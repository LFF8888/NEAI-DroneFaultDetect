
U575NanoEdgeAI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7c4  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800ba00  0800ba00  0001ba00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bebc  0800bebc  0001bebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bec4  0800bec4  0001bec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bec8  0800bec8  0001bec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  0800becc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .neai         00000030  200001dc  0800c0a8  000201dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000008c0  2000020c  0800c0d8  0002020c  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  20000acc  0800c0d8  00020acc  2**0
                  ALLOC
 10 .ARM.attributes 00000036  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 11 .comment      000000bc  00000000  00000000  00020242  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017fc4  00000000  00000000  000202fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003670  00000000  00000000  000382c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  0003b938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e44  00000000  00000000  0003cc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038f59  00000000  00000000  0003da54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c138  00000000  00000000  000769ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00161823  00000000  00000000  00092ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00005fec  00000000  00000000  001f4308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000074  00000000  00000000  001fa2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000020c 	.word	0x2000020c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800b9e4 	.word	0x0800b9e4

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000210 	.word	0x20000210
 8000274:	0800b9e4 	.word	0x0800b9e4

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2f>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb8:	bf24      	itt	cs
 8000bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc2:	d90d      	bls.n	8000be0 <__aeabi_d2f+0x30>
 8000bc4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd8:	bf08      	it	eq
 8000bda:	f020 0001 	biceq.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be4:	d121      	bne.n	8000c2a <__aeabi_d2f+0x7a>
 8000be6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bea:	bfbc      	itt	lt
 8000bec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	4770      	bxlt	lr
 8000bf2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfa:	f1c2 0218 	rsb	r2, r2, #24
 8000bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8000c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c06:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0a:	bf18      	it	ne
 8000c0c:	f040 0001 	orrne.w	r0, r0, #1
 8000c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c1c:	ea40 000c 	orr.w	r0, r0, ip
 8000c20:	fa23 f302 	lsr.w	r3, r3, r2
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	e7cc      	b.n	8000bc4 <__aeabi_d2f+0x14>
 8000c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2e:	d107      	bne.n	8000c40 <__aeabi_d2f+0x90>
 8000c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c34:	bf1e      	ittt	ne
 8000c36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3e:	4770      	bxne	lr
 8000c40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__aeabi_uldivmod>:
 8000c50:	b953      	cbnz	r3, 8000c68 <__aeabi_uldivmod+0x18>
 8000c52:	b94a      	cbnz	r2, 8000c68 <__aeabi_uldivmod+0x18>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	bf08      	it	eq
 8000c58:	2800      	cmpeq	r0, #0
 8000c5a:	bf1c      	itt	ne
 8000c5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c60:	f04f 30ff 	movne.w	r0, #4294967295
 8000c64:	f000 b982 	b.w	8000f6c <__aeabi_idiv0>
 8000c68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c70:	f000 f806 	bl	8000c80 <__udivmoddi4>
 8000c74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7c:	b004      	add	sp, #16
 8000c7e:	4770      	bx	lr

08000c80 <__udivmoddi4>:
 8000c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c84:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000c86:	460d      	mov	r5, r1
 8000c88:	4604      	mov	r4, r0
 8000c8a:	460f      	mov	r7, r1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d146      	bne.n	8000d1e <__udivmoddi4+0x9e>
 8000c90:	428a      	cmp	r2, r1
 8000c92:	4694      	mov	ip, r2
 8000c94:	d95e      	bls.n	8000d54 <__udivmoddi4+0xd4>
 8000c96:	fab2 f382 	clz	r3, r2
 8000c9a:	b143      	cbz	r3, 8000cae <__udivmoddi4+0x2e>
 8000c9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca0:	f1c3 0220 	rsb	r2, r3, #32
 8000ca4:	409f      	lsls	r7, r3
 8000ca6:	409c      	lsls	r4, r3
 8000ca8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cac:	4317      	orrs	r7, r2
 8000cae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cb2:	fa1f f58c 	uxth.w	r5, ip
 8000cb6:	0c22      	lsrs	r2, r4, #16
 8000cb8:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cbc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc0:	fb01 f005 	mul.w	r0, r1, r5
 8000cc4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cc8:	4290      	cmp	r0, r2
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x5e>
 8000ccc:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x5c>
 8000cd6:	4290      	cmp	r0, r2
 8000cd8:	f200 8134 	bhi.w	8000f44 <__udivmoddi4+0x2c4>
 8000cdc:	4639      	mov	r1, r7
 8000cde:	1a12      	subs	r2, r2, r0
 8000ce0:	b2a4      	uxth	r4, r4
 8000ce2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cf2:	42a5      	cmp	r5, r4
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x88>
 8000cf6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x86>
 8000d00:	42a5      	cmp	r5, r4
 8000d02:	f200 8119 	bhi.w	8000f38 <__udivmoddi4+0x2b8>
 8000d06:	4610      	mov	r0, r2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0x9a>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xb4>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80fc 	beq.w	8000f20 <__udivmoddi4+0x2a0>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d14c      	bne.n	8000dd6 <__udivmoddi4+0x156>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	f0c0 80f2 	bcc.w	8000f26 <__udivmoddi4+0x2a6>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f240 80ef 	bls.w	8000f26 <__udivmoddi4+0x2a6>
 8000d48:	4608      	mov	r0, r1
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0x9a>
 8000d4e:	e9c6 4700 	strd	r4, r7, [r6]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0x9a>
 8000d54:	b902      	cbnz	r2, 8000d58 <__udivmoddi4+0xd8>
 8000d56:	deff      	udf	#255	; 0xff
 8000d58:	fab2 f382 	clz	r3, r2
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	f040 809f 	bne.w	8000ea0 <__udivmoddi4+0x220>
 8000d62:	1a8a      	subs	r2, r1, r2
 8000d64:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d68:	fa1f f78c 	uxth.w	r7, ip
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	fbb2 f5fe 	udiv	r5, r2, lr
 8000d72:	fb0e 2015 	mls	r0, lr, r5, r2
 8000d76:	0c22      	lsrs	r2, r4, #16
 8000d78:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d7c:	fb07 f005 	mul.w	r0, r7, r5
 8000d80:	4290      	cmp	r0, r2
 8000d82:	d90f      	bls.n	8000da4 <__udivmoddi4+0x124>
 8000d84:	eb1c 0202 	adds.w	r2, ip, r2
 8000d88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d8c:	bf2c      	ite	cs
 8000d8e:	f04f 0901 	movcs.w	r9, #1
 8000d92:	f04f 0900 	movcc.w	r9, #0
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d903      	bls.n	8000da2 <__udivmoddi4+0x122>
 8000d9a:	f1b9 0f00 	cmp.w	r9, #0
 8000d9e:	f000 80ce 	beq.w	8000f3e <__udivmoddi4+0x2be>
 8000da2:	4645      	mov	r5, r8
 8000da4:	1a12      	subs	r2, r2, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dac:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db0:	fb00 f707 	mul.w	r7, r0, r7
 8000db4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db8:	42a7      	cmp	r7, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x14e>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x14c>
 8000dc6:	42a7      	cmp	r7, r4
 8000dc8:	f200 80b3 	bhi.w	8000f32 <__udivmoddi4+0x2b2>
 8000dcc:	4610      	mov	r0, r2
 8000dce:	1be4      	subs	r4, r4, r7
 8000dd0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dd4:	e79c      	b.n	8000d10 <__udivmoddi4+0x90>
 8000dd6:	f1c1 0420 	rsb	r4, r1, #32
 8000dda:	408b      	lsls	r3, r1
 8000ddc:	fa05 fc01 	lsl.w	ip, r5, r1
 8000de0:	fa22 f704 	lsr.w	r7, r2, r4
 8000de4:	40e5      	lsrs	r5, r4
 8000de6:	408a      	lsls	r2, r1
 8000de8:	431f      	orrs	r7, r3
 8000dea:	fa20 f304 	lsr.w	r3, r0, r4
 8000dee:	4088      	lsls	r0, r1
 8000df0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000df4:	ea43 030c 	orr.w	r3, r3, ip
 8000df8:	fa1f fc87 	uxth.w	ip, r7
 8000dfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e00:	fbb5 fef8 	udiv	lr, r5, r8
 8000e04:	fb08 551e 	mls	r5, r8, lr, r5
 8000e08:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a9      	cmp	r9, r5
 8000e12:	d90e      	bls.n	8000e32 <__udivmoddi4+0x1b2>
 8000e14:	197d      	adds	r5, r7, r5
 8000e16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1a:	bf2c      	ite	cs
 8000e1c:	f04f 0b01 	movcs.w	fp, #1
 8000e20:	f04f 0b00 	movcc.w	fp, #0
 8000e24:	45a9      	cmp	r9, r5
 8000e26:	d903      	bls.n	8000e30 <__udivmoddi4+0x1b0>
 8000e28:	f1bb 0f00 	cmp.w	fp, #0
 8000e2c:	f000 808d 	beq.w	8000f4a <__udivmoddi4+0x2ca>
 8000e30:	46d6      	mov	lr, sl
 8000e32:	eba5 0509 	sub.w	r5, r5, r9
 8000e36:	fa1f f983 	uxth.w	r9, r3
 8000e3a:	fbb5 f3f8 	udiv	r3, r5, r8
 8000e3e:	fb08 5513 	mls	r5, r8, r3, r5
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000e4a:	45ac      	cmp	ip, r5
 8000e4c:	d906      	bls.n	8000e5c <__udivmoddi4+0x1dc>
 8000e4e:	197d      	adds	r5, r7, r5
 8000e50:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e54:	d201      	bcs.n	8000e5a <__udivmoddi4+0x1da>
 8000e56:	45ac      	cmp	ip, r5
 8000e58:	d87e      	bhi.n	8000f58 <__udivmoddi4+0x2d8>
 8000e5a:	4643      	mov	r3, r8
 8000e5c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000e60:	eba5 050c 	sub.w	r5, r5, ip
 8000e64:	fba3 9802 	umull	r9, r8, r3, r2
 8000e68:	4545      	cmp	r5, r8
 8000e6a:	46ce      	mov	lr, r9
 8000e6c:	46c4      	mov	ip, r8
 8000e6e:	d302      	bcc.n	8000e76 <__udivmoddi4+0x1f6>
 8000e70:	d106      	bne.n	8000e80 <__udivmoddi4+0x200>
 8000e72:	4548      	cmp	r0, r9
 8000e74:	d204      	bcs.n	8000e80 <__udivmoddi4+0x200>
 8000e76:	3b01      	subs	r3, #1
 8000e78:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e7c:	eb68 0c07 	sbc.w	ip, r8, r7
 8000e80:	2e00      	cmp	r6, #0
 8000e82:	d06f      	beq.n	8000f64 <__udivmoddi4+0x2e4>
 8000e84:	ebb0 020e 	subs.w	r2, r0, lr
 8000e88:	eb65 050c 	sbc.w	r5, r5, ip
 8000e8c:	40ca      	lsrs	r2, r1
 8000e8e:	fa05 f404 	lsl.w	r4, r5, r4
 8000e92:	40cd      	lsrs	r5, r1
 8000e94:	4618      	mov	r0, r3
 8000e96:	4314      	orrs	r4, r2
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e9c6 4500 	strd	r4, r5, [r6]
 8000e9e:	e73c      	b.n	8000d1a <__udivmoddi4+0x9a>
 8000ea0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea4:	f1c3 0220 	rsb	r2, r3, #32
 8000ea8:	4099      	lsls	r1, r3
 8000eaa:	409c      	lsls	r4, r3
 8000eac:	40d5      	lsrs	r5, r2
 8000eae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000eb2:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb6:	fa1f f78c 	uxth.w	r7, ip
 8000eba:	fbb5 f0fe 	udiv	r0, r5, lr
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	fb0e 5510 	mls	r5, lr, r0, r5
 8000ec4:	0c11      	lsrs	r1, r2, #16
 8000ec6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eca:	fb00 f507 	mul.w	r5, r0, r7
 8000ece:	428d      	cmp	r5, r1
 8000ed0:	d90e      	bls.n	8000ef0 <__udivmoddi4+0x270>
 8000ed2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eda:	bf2c      	ite	cs
 8000edc:	f04f 0901 	movcs.w	r9, #1
 8000ee0:	f04f 0900 	movcc.w	r9, #0
 8000ee4:	428d      	cmp	r5, r1
 8000ee6:	d902      	bls.n	8000eee <__udivmoddi4+0x26e>
 8000ee8:	f1b9 0f00 	cmp.w	r9, #0
 8000eec:	d031      	beq.n	8000f52 <__udivmoddi4+0x2d2>
 8000eee:	4640      	mov	r0, r8
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5fe 	udiv	r5, r1, lr
 8000ef8:	fb0e 1115 	mls	r1, lr, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f107 	mul.w	r1, r5, r7
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x298>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f10:	d201      	bcs.n	8000f16 <__udivmoddi4+0x296>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d823      	bhi.n	8000f5e <__udivmoddi4+0x2de>
 8000f16:	4645      	mov	r5, r8
 8000f18:	1a52      	subs	r2, r2, r1
 8000f1a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f1e:	e726      	b.n	8000d6e <__udivmoddi4+0xee>
 8000f20:	4631      	mov	r1, r6
 8000f22:	4630      	mov	r0, r6
 8000f24:	e6f9      	b.n	8000d1a <__udivmoddi4+0x9a>
 8000f26:	1a84      	subs	r4, r0, r2
 8000f28:	eb65 0203 	sbc.w	r2, r5, r3
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	4617      	mov	r7, r2
 8000f30:	e70b      	b.n	8000d4a <__udivmoddi4+0xca>
 8000f32:	4464      	add	r4, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	e74a      	b.n	8000dce <__udivmoddi4+0x14e>
 8000f38:	4464      	add	r4, ip
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	e6e4      	b.n	8000d08 <__udivmoddi4+0x88>
 8000f3e:	3d02      	subs	r5, #2
 8000f40:	4462      	add	r2, ip
 8000f42:	e72f      	b.n	8000da4 <__udivmoddi4+0x124>
 8000f44:	3902      	subs	r1, #2
 8000f46:	4462      	add	r2, ip
 8000f48:	e6c9      	b.n	8000cde <__udivmoddi4+0x5e>
 8000f4a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f4e:	443d      	add	r5, r7
 8000f50:	e76f      	b.n	8000e32 <__udivmoddi4+0x1b2>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	e7cb      	b.n	8000ef0 <__udivmoddi4+0x270>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	443d      	add	r5, r7
 8000f5c:	e77e      	b.n	8000e5c <__udivmoddi4+0x1dc>
 8000f5e:	3d02      	subs	r5, #2
 8000f60:	4462      	add	r2, ip
 8000f62:	e7d9      	b.n	8000f18 <__udivmoddi4+0x298>
 8000f64:	4618      	mov	r0, r3
 8000f66:	4631      	mov	r1, r6
 8000f68:	e6d7      	b.n	8000d1a <__udivmoddi4+0x9a>
 8000f6a:	bf00      	nop

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <IIC_SDA>:
#define IIC_PIN_PORT GPIOD

#include "main.h"

void IIC_SDA(unsigned char Value)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(IIC_PIN_PORT, IIC_SDA_PIN, Value);
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	2140      	movs	r1, #64	; 0x40
 8000f80:	4803      	ldr	r0, [pc, #12]	; (8000f90 <IIC_SDA+0x20>)
 8000f82:	f002 f851 	bl	8003028 <HAL_GPIO_WritePin>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	42020c00 	.word	0x42020c00

08000f94 <IIC_SCL>:

void IIC_SCL(unsigned char Value)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(IIC_PIN_PORT, IIC_SCL_PIN, Value);
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	2180      	movs	r1, #128	; 0x80
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <IIC_SCL+0x20>)
 8000fa6:	f002 f83f 	bl	8003028 <HAL_GPIO_WritePin>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	42020c00 	.word	0x42020c00

08000fb8 <IIC_R_SDA>:

uint8_t IIC_R_SDA(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
	uint8_t Value;
	Value = HAL_GPIO_ReadPin(IIC_PIN_PORT, IIC_SDA_PIN);
 8000fbe:	2140      	movs	r1, #64	; 0x40
 8000fc0:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <IIC_R_SDA+0x1c>)
 8000fc2:	f002 f819 	bl	8002ff8 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	return Value;
 8000fca:	79fb      	ldrb	r3, [r7, #7]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	42020c00 	.word	0x42020c00

08000fd8 <IIC_Start>:

void IIC_Start(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	IIC_SDA(1);
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f7ff ffc7 	bl	8000f70 <IIC_SDA>
	IIC_SCL(1);
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f7ff ffd6 	bl	8000f94 <IIC_SCL>
	IIC_SDA(0);
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f7ff ffc1 	bl	8000f70 <IIC_SDA>
	IIC_SCL(0);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f7ff ffd0 	bl	8000f94 <IIC_SCL>
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <IIC_Stop>:

void IIC_Stop(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	IIC_SCL(0);
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff ffc9 	bl	8000f94 <IIC_SCL>
	IIC_SDA(0);
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff ffb4 	bl	8000f70 <IIC_SDA>
	IIC_SCL(1);
 8001008:	2001      	movs	r0, #1
 800100a:	f7ff ffc3 	bl	8000f94 <IIC_SCL>
	IIC_SDA(1);
 800100e:	2001      	movs	r0, #1
 8001010:	f7ff ffae 	bl	8000f70 <IIC_SDA>
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <IIC_WriteByte>:

void IIC_WriteByte(uint8_t Byte)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	73fb      	strb	r3, [r7, #15]

	for(i = 0; i < 8; i++)
 8001026:	2300      	movs	r3, #0
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	e015      	b.n	8001058 <IIC_WriteByte+0x40>
	{
		IIC_SDA(Byte & (0x80 >> i));
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	2280      	movs	r2, #128	; 0x80
 8001030:	fa42 f303 	asr.w	r3, r2, r3
 8001034:	b25a      	sxtb	r2, r3
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	4013      	ands	r3, r2
 800103c:	b25b      	sxtb	r3, r3
 800103e:	b2db      	uxtb	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff95 	bl	8000f70 <IIC_SDA>
		IIC_SCL(1);
 8001046:	2001      	movs	r0, #1
 8001048:	f7ff ffa4 	bl	8000f94 <IIC_SCL>
		IIC_SCL(0);
 800104c:	2000      	movs	r0, #0
 800104e:	f7ff ffa1 	bl	8000f94 <IIC_SCL>
	for(i = 0; i < 8; i++)
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	3301      	adds	r3, #1
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	2b07      	cmp	r3, #7
 800105c:	d9e6      	bls.n	800102c <IIC_WriteByte+0x14>
	}
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <IIC_ReadByte>:

uint8_t IIC_ReadByte(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	uint8_t i, Byte = 0x00;
 800106e:	2300      	movs	r3, #0
 8001070:	71bb      	strb	r3, [r7, #6]

	IIC_SDA(1);
 8001072:	2001      	movs	r0, #1
 8001074:	f7ff ff7c 	bl	8000f70 <IIC_SDA>

	for(i = 0; i < 8; i++)
 8001078:	2300      	movs	r3, #0
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	e017      	b.n	80010ae <IIC_ReadByte+0x46>
	{
		IIC_SCL(1);
 800107e:	2001      	movs	r0, #1
 8001080:	f7ff ff88 	bl	8000f94 <IIC_SCL>
		if(IIC_R_SDA() == 1)
 8001084:	f7ff ff98 	bl	8000fb8 <IIC_R_SDA>
 8001088:	4603      	mov	r3, r0
 800108a:	2b01      	cmp	r3, #1
 800108c:	d109      	bne.n	80010a2 <IIC_ReadByte+0x3a>
			Byte |= (0x80 >> i);
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	fa42 f303 	asr.w	r3, r2, r3
 8001096:	b25a      	sxtb	r2, r3
 8001098:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800109c:	4313      	orrs	r3, r2
 800109e:	b25b      	sxtb	r3, r3
 80010a0:	71bb      	strb	r3, [r7, #6]
		IIC_SCL(0);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f7ff ff76 	bl	8000f94 <IIC_SCL>
	for(i = 0; i < 8; i++)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	3301      	adds	r3, #1
 80010ac:	71fb      	strb	r3, [r7, #7]
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b07      	cmp	r3, #7
 80010b2:	d9e4      	bls.n	800107e <IIC_ReadByte+0x16>
	}

	return Byte;
 80010b4:	79bb      	ldrb	r3, [r7, #6]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <IIC_SendACK>:

void IIC_SendACK(uint8_t ACK)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]
	IIC_SDA(ACK);
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff50 	bl	8000f70 <IIC_SDA>
	IIC_SCL(1);
 80010d0:	2001      	movs	r0, #1
 80010d2:	f7ff ff5f 	bl	8000f94 <IIC_SCL>
	IIC_SCL(0);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f7ff ff5c 	bl	8000f94 <IIC_SCL>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <IIC_ReadACK>:

uint8_t IIC_ReadACK(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
	uint8_t ACK = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	71fb      	strb	r3, [r7, #7]
	IIC_SDA(1);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f7ff ff3e 	bl	8000f70 <IIC_SDA>
	IIC_SCL(1);
 80010f4:	2001      	movs	r0, #1
 80010f6:	f7ff ff4d 	bl	8000f94 <IIC_SCL>
	ACK = IIC_R_SDA();
 80010fa:	f7ff ff5d 	bl	8000fb8 <IIC_R_SDA>
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	IIC_SCL(0);
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff ff46 	bl	8000f94 <IIC_SCL>
	return ACK;
 8001108:	79fb      	ldrb	r3, [r7, #7]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <MPU6050_WriteReg>:
#include "MPU6050_Reg.h"

#define MPU6050_ADDRESS		0xD0

void MPU6050_WriteReg(uint8_t RegAddress, uint8_t Data)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	460a      	mov	r2, r1
 800111c:	71fb      	strb	r3, [r7, #7]
 800111e:	4613      	mov	r3, r2
 8001120:	71bb      	strb	r3, [r7, #6]
	IIC_Start();
 8001122:	f7ff ff59 	bl	8000fd8 <IIC_Start>

	IIC_WriteByte(MPU6050_ADDRESS);
 8001126:	20d0      	movs	r0, #208	; 0xd0
 8001128:	f7ff ff76 	bl	8001018 <IIC_WriteByte>
	IIC_ReadACK();
 800112c:	f7ff ffda 	bl	80010e4 <IIC_ReadACK>

	IIC_WriteByte(RegAddress);
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff70 	bl	8001018 <IIC_WriteByte>
	IIC_ReadACK();
 8001138:	f7ff ffd4 	bl	80010e4 <IIC_ReadACK>

	IIC_WriteByte(Data);
 800113c:	79bb      	ldrb	r3, [r7, #6]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff6a 	bl	8001018 <IIC_WriteByte>
	IIC_ReadACK();
 8001144:	f7ff ffce 	bl	80010e4 <IIC_ReadACK>

	IIC_Stop();
 8001148:	f7ff ff56 	bl	8000ff8 <IIC_Stop>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <MPU6050_ReadReg>:

uint8_t MPU6050_ReadReg(uint8_t RegAddress)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
	uint8_t Data;

	IIC_Start();
 800115e:	f7ff ff3b 	bl	8000fd8 <IIC_Start>

	IIC_WriteByte(MPU6050_ADDRESS);
 8001162:	20d0      	movs	r0, #208	; 0xd0
 8001164:	f7ff ff58 	bl	8001018 <IIC_WriteByte>
	IIC_ReadACK();
 8001168:	f7ff ffbc 	bl	80010e4 <IIC_ReadACK>

	IIC_WriteByte(RegAddress);
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff52 	bl	8001018 <IIC_WriteByte>
	IIC_ReadACK();
 8001174:	f7ff ffb6 	bl	80010e4 <IIC_ReadACK>

	IIC_Start();
 8001178:	f7ff ff2e 	bl	8000fd8 <IIC_Start>

	IIC_WriteByte(MPU6050_ADDRESS | 0x01);
 800117c:	20d1      	movs	r0, #209	; 0xd1
 800117e:	f7ff ff4b 	bl	8001018 <IIC_WriteByte>
	IIC_ReadACK();
 8001182:	f7ff ffaf 	bl	80010e4 <IIC_ReadACK>

	Data = IIC_ReadByte();
 8001186:	f7ff ff6f 	bl	8001068 <IIC_ReadByte>
 800118a:	4603      	mov	r3, r0
 800118c:	73fb      	strb	r3, [r7, #15]
	IIC_SendACK(1);
 800118e:	2001      	movs	r0, #1
 8001190:	f7ff ff95 	bl	80010be <IIC_SendACK>

	IIC_Stop();
 8001194:	f7ff ff30 	bl	8000ff8 <IIC_Stop>

	return Data;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <MPU6050_Init>:

void MPU6050_Init(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0
	MPU6050_WriteReg(MPU6050_PWR_MGMT_1, 0x01);
 80011a6:	2101      	movs	r1, #1
 80011a8:	206b      	movs	r0, #107	; 0x6b
 80011aa:	f7ff ffb2 	bl	8001112 <MPU6050_WriteReg>
	MPU6050_WriteReg(MPU6050_PWR_MGMT_2, 0x00);
 80011ae:	2100      	movs	r1, #0
 80011b0:	206c      	movs	r0, #108	; 0x6c
 80011b2:	f7ff ffae 	bl	8001112 <MPU6050_WriteReg>
	MPU6050_WriteReg(MPU6050_SMPLRT_DIV, 0x09);
 80011b6:	2109      	movs	r1, #9
 80011b8:	2019      	movs	r0, #25
 80011ba:	f7ff ffaa 	bl	8001112 <MPU6050_WriteReg>
	MPU6050_WriteReg(MPU6050_CONFIG, 0x06);
 80011be:	2106      	movs	r1, #6
 80011c0:	201a      	movs	r0, #26
 80011c2:	f7ff ffa6 	bl	8001112 <MPU6050_WriteReg>
	MPU6050_WriteReg(MPU6050_GYRO_CONFIG, 0x18);
 80011c6:	2118      	movs	r1, #24
 80011c8:	201b      	movs	r0, #27
 80011ca:	f7ff ffa2 	bl	8001112 <MPU6050_WriteReg>
	MPU6050_WriteReg(MPU6050_ACCEL_CONFIG, 0x18);
 80011ce:	2118      	movs	r1, #24
 80011d0:	201c      	movs	r0, #28
 80011d2:	f7ff ff9e 	bl	8001112 <MPU6050_WriteReg>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}

080011da <MPU6050_GetData>:
	return MPU6050_ReadReg(MPU6050_WHO_AM_I);
}

void MPU6050_GetData(int16_t *AccX, int16_t *AccY, int16_t *AccZ,
						int16_t *GyroX, int16_t *GyroY, int16_t *GyroZ)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	60f8      	str	r0, [r7, #12]
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	603b      	str	r3, [r7, #0]
	uint8_t DataH, DataL;

	DataH = MPU6050_ReadReg(MPU6050_ACCEL_XOUT_H);
 80011e8:	203b      	movs	r0, #59	; 0x3b
 80011ea:	f7ff ffb3 	bl	8001154 <MPU6050_ReadReg>
 80011ee:	4603      	mov	r3, r0
 80011f0:	75fb      	strb	r3, [r7, #23]
	DataL = MPU6050_ReadReg(MPU6050_ACCEL_XOUT_L);
 80011f2:	203c      	movs	r0, #60	; 0x3c
 80011f4:	f7ff ffae 	bl	8001154 <MPU6050_ReadReg>
 80011f8:	4603      	mov	r3, r0
 80011fa:	75bb      	strb	r3, [r7, #22]
	*AccX = (DataH << 8) | DataL;
 80011fc:	7dfb      	ldrb	r3, [r7, #23]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	b21a      	sxth	r2, r3
 8001202:	7dbb      	ldrb	r3, [r7, #22]
 8001204:	b21b      	sxth	r3, r3
 8001206:	4313      	orrs	r3, r2
 8001208:	b21a      	sxth	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	801a      	strh	r2, [r3, #0]

	DataH = MPU6050_ReadReg(MPU6050_ACCEL_YOUT_H);
 800120e:	203d      	movs	r0, #61	; 0x3d
 8001210:	f7ff ffa0 	bl	8001154 <MPU6050_ReadReg>
 8001214:	4603      	mov	r3, r0
 8001216:	75fb      	strb	r3, [r7, #23]
	DataL = MPU6050_ReadReg(MPU6050_ACCEL_YOUT_L);
 8001218:	203e      	movs	r0, #62	; 0x3e
 800121a:	f7ff ff9b 	bl	8001154 <MPU6050_ReadReg>
 800121e:	4603      	mov	r3, r0
 8001220:	75bb      	strb	r3, [r7, #22]
	*AccY = (DataH << 8) | DataL;
 8001222:	7dfb      	ldrb	r3, [r7, #23]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21a      	sxth	r2, r3
 8001228:	7dbb      	ldrb	r3, [r7, #22]
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b21a      	sxth	r2, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	801a      	strh	r2, [r3, #0]

	DataH = MPU6050_ReadReg(MPU6050_ACCEL_ZOUT_H);
 8001234:	203f      	movs	r0, #63	; 0x3f
 8001236:	f7ff ff8d 	bl	8001154 <MPU6050_ReadReg>
 800123a:	4603      	mov	r3, r0
 800123c:	75fb      	strb	r3, [r7, #23]
	DataL = MPU6050_ReadReg(MPU6050_ACCEL_ZOUT_L);
 800123e:	2040      	movs	r0, #64	; 0x40
 8001240:	f7ff ff88 	bl	8001154 <MPU6050_ReadReg>
 8001244:	4603      	mov	r3, r0
 8001246:	75bb      	strb	r3, [r7, #22]
	*AccZ = (DataH << 8) | DataL;
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	b21a      	sxth	r2, r3
 800124e:	7dbb      	ldrb	r3, [r7, #22]
 8001250:	b21b      	sxth	r3, r3
 8001252:	4313      	orrs	r3, r2
 8001254:	b21a      	sxth	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	801a      	strh	r2, [r3, #0]

	DataH = MPU6050_ReadReg(MPU6050_GYRO_XOUT_H);
 800125a:	2043      	movs	r0, #67	; 0x43
 800125c:	f7ff ff7a 	bl	8001154 <MPU6050_ReadReg>
 8001260:	4603      	mov	r3, r0
 8001262:	75fb      	strb	r3, [r7, #23]
	DataL = MPU6050_ReadReg(MPU6050_GYRO_XOUT_L);
 8001264:	2044      	movs	r0, #68	; 0x44
 8001266:	f7ff ff75 	bl	8001154 <MPU6050_ReadReg>
 800126a:	4603      	mov	r3, r0
 800126c:	75bb      	strb	r3, [r7, #22]
	*GyroX = (DataH << 8) | DataL;
 800126e:	7dfb      	ldrb	r3, [r7, #23]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b21a      	sxth	r2, r3
 8001274:	7dbb      	ldrb	r3, [r7, #22]
 8001276:	b21b      	sxth	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b21a      	sxth	r2, r3
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	801a      	strh	r2, [r3, #0]

	DataH = MPU6050_ReadReg(MPU6050_GYRO_YOUT_H);
 8001280:	2045      	movs	r0, #69	; 0x45
 8001282:	f7ff ff67 	bl	8001154 <MPU6050_ReadReg>
 8001286:	4603      	mov	r3, r0
 8001288:	75fb      	strb	r3, [r7, #23]
	DataL = MPU6050_ReadReg(MPU6050_GYRO_YOUT_L);
 800128a:	2046      	movs	r0, #70	; 0x46
 800128c:	f7ff ff62 	bl	8001154 <MPU6050_ReadReg>
 8001290:	4603      	mov	r3, r0
 8001292:	75bb      	strb	r3, [r7, #22]
	*GyroY = (DataH << 8) | DataL;
 8001294:	7dfb      	ldrb	r3, [r7, #23]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21a      	sxth	r2, r3
 800129a:	7dbb      	ldrb	r3, [r7, #22]
 800129c:	b21b      	sxth	r3, r3
 800129e:	4313      	orrs	r3, r2
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	6a3b      	ldr	r3, [r7, #32]
 80012a4:	801a      	strh	r2, [r3, #0]

	DataH = MPU6050_ReadReg(MPU6050_GYRO_ZOUT_H);
 80012a6:	2047      	movs	r0, #71	; 0x47
 80012a8:	f7ff ff54 	bl	8001154 <MPU6050_ReadReg>
 80012ac:	4603      	mov	r3, r0
 80012ae:	75fb      	strb	r3, [r7, #23]
	DataL = MPU6050_ReadReg(MPU6050_GYRO_ZOUT_L);
 80012b0:	2048      	movs	r0, #72	; 0x48
 80012b2:	f7ff ff4f 	bl	8001154 <MPU6050_ReadReg>
 80012b6:	4603      	mov	r3, r0
 80012b8:	75bb      	strb	r3, [r7, #22]
	*GyroZ = (DataH << 8) | DataL;
 80012ba:	7dfb      	ldrb	r3, [r7, #23]
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	b21a      	sxth	r2, r3
 80012c0:	7dbb      	ldrb	r3, [r7, #22]
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	4313      	orrs	r3, r2
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	801a      	strh	r2, [r3, #0]
}
 80012cc:	bf00      	nop
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012d8:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <MX_ADC1_Init+0x80>)
 80012da:	4a1f      	ldr	r2, [pc, #124]	; (8001358 <MX_ADC1_Init+0x84>)
 80012dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <MX_ADC1_Init+0x80>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_ADC1_Init+0x80>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_ADC1_Init+0x80>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_ADC1_Init+0x80>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <MX_ADC1_Init+0x80>)
 80012f8:	2204      	movs	r2, #4
 80012fa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MX_ADC1_Init+0x80>)
 80012fe:	2200      	movs	r2, #0
 8001300:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MX_ADC1_Init+0x80>)
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <MX_ADC1_Init+0x80>)
 800130c:	2201      	movs	r2, #1
 800130e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001310:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MX_ADC1_Init+0x80>)
 8001312:	2200      	movs	r2, #0
 8001314:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_ADC1_Init+0x80>)
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_ADC1_Init+0x80>)
 8001322:	2200      	movs	r2, #0
 8001324:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MX_ADC1_Init+0x80>)
 8001328:	2200      	movs	r2, #0
 800132a:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_ADC1_Init+0x80>)
 800132e:	2200      	movs	r2, #0
 8001330:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <MX_ADC1_Init+0x80>)
 8001334:	2200      	movs	r2, #0
 8001336:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_ADC1_Init+0x80>)
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001340:	4804      	ldr	r0, [pc, #16]	; (8001354 <MX_ADC1_Init+0x80>)
 8001342:	f001 f8d3 	bl	80024ec <HAL_ADC_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 800134c:	f000 fbba 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000228 	.word	0x20000228
 8001358:	42028000 	.word	0x42028000

0800135c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b0bc      	sub	sp, #240	; 0xf0
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	22c8      	movs	r2, #200	; 0xc8
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f008 f958 	bl	8009632 <memset>
  if(adcHandle->Instance==ADC1)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a24      	ldr	r2, [pc, #144]	; (8001418 <HAL_ADC_MspInit+0xbc>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d140      	bne.n	800140e <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800138c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001398:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800139c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	4618      	mov	r0, r3
 80013a6:	f003 fa3f 	bl	8004828 <HAL_RCCEx_PeriphCLKConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 80013b0:	f000 fb88 	bl	8001ac4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <HAL_ADC_MspInit+0xc0>)
 80013b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013ba:	4a18      	ldr	r2, [pc, #96]	; (800141c <HAL_ADC_MspInit+0xc0>)
 80013bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013c0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <HAL_ADC_MspInit+0xc0>)
 80013c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_ADC_MspInit+0xc0>)
 80013d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013d8:	4a10      	ldr	r2, [pc, #64]	; (800141c <HAL_ADC_MspInit+0xc0>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_ADC_MspInit+0xc0>)
 80013e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80013f0:	2304      	movs	r3, #4
 80013f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f6:	2303      	movs	r3, #3
 80013f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <HAL_ADC_MspInit+0xc4>)
 800140a:	f001 fc1d 	bl	8002c48 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800140e:	bf00      	nop
 8001410:	37f0      	adds	r7, #240	; 0xf0
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	42028000 	.word	0x42028000
 800141c:	46020c00 	.word	0x46020c00
 8001420:	42020800 	.word	0x42020800

08001424 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	4b61      	ldr	r3, [pc, #388]	; (80015c0 <MX_GPIO_Init+0x19c>)
 800143c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001440:	4a5f      	ldr	r2, [pc, #380]	; (80015c0 <MX_GPIO_Init+0x19c>)
 8001442:	f043 0304 	orr.w	r3, r3, #4
 8001446:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800144a:	4b5d      	ldr	r3, [pc, #372]	; (80015c0 <MX_GPIO_Init+0x19c>)
 800144c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	4b59      	ldr	r3, [pc, #356]	; (80015c0 <MX_GPIO_Init+0x19c>)
 800145a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800145e:	4a58      	ldr	r2, [pc, #352]	; (80015c0 <MX_GPIO_Init+0x19c>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001468:	4b55      	ldr	r3, [pc, #340]	; (80015c0 <MX_GPIO_Init+0x19c>)
 800146a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	4b52      	ldr	r3, [pc, #328]	; (80015c0 <MX_GPIO_Init+0x19c>)
 8001478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800147c:	4a50      	ldr	r2, [pc, #320]	; (80015c0 <MX_GPIO_Init+0x19c>)
 800147e:	f043 0302 	orr.w	r3, r3, #2
 8001482:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001486:	4b4e      	ldr	r3, [pc, #312]	; (80015c0 <MX_GPIO_Init+0x19c>)
 8001488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001494:	4b4a      	ldr	r3, [pc, #296]	; (80015c0 <MX_GPIO_Init+0x19c>)
 8001496:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800149a:	4a49      	ldr	r2, [pc, #292]	; (80015c0 <MX_GPIO_Init+0x19c>)
 800149c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80014a4:	4b46      	ldr	r3, [pc, #280]	; (80015c0 <MX_GPIO_Init+0x19c>)
 80014a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b2:	4b43      	ldr	r3, [pc, #268]	; (80015c0 <MX_GPIO_Init+0x19c>)
 80014b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014b8:	4a41      	ldr	r2, [pc, #260]	; (80015c0 <MX_GPIO_Init+0x19c>)
 80014ba:	f043 0308 	orr.w	r3, r3, #8
 80014be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80014c2:	4b3f      	ldr	r3, [pc, #252]	; (80015c0 <MX_GPIO_Init+0x19c>)
 80014c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2104      	movs	r1, #4
 80014d4:	483b      	ldr	r0, [pc, #236]	; (80015c4 <MX_GPIO_Init+0x1a0>)
 80014d6:	f001 fda7 	bl	8003028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	2180      	movs	r1, #128	; 0x80
 80014de:	483a      	ldr	r0, [pc, #232]	; (80015c8 <MX_GPIO_Init+0x1a4>)
 80014e0:	f001 fda2 	bl	8003028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	21c0      	movs	r1, #192	; 0xc0
 80014e8:	4838      	ldr	r0, [pc, #224]	; (80015cc <MX_GPIO_Init+0x1a8>)
 80014ea:	f001 fd9d 	bl	8003028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	21a0      	movs	r1, #160	; 0xa0
 80014f2:	4837      	ldr	r0, [pc, #220]	; (80015d0 <MX_GPIO_Init+0x1ac>)
 80014f4:	f001 fd98 	bl	8003028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80014f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014fe:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <MX_GPIO_Init+0x1b0>)
 8001500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4619      	mov	r1, r3
 800150c:	482e      	ldr	r0, [pc, #184]	; (80015c8 <MX_GPIO_Init+0x1a4>)
 800150e:	f001 fb9b 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8001512:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4619      	mov	r1, r3
 8001526:	482a      	ldr	r0, [pc, #168]	; (80015d0 <MX_GPIO_Init+0x1ac>)
 8001528:	f001 fb8e 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800152c:	2304      	movs	r3, #4
 800152e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	2301      	movs	r3, #1
 8001532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001534:	2301      	movs	r3, #1
 8001536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001538:	2302      	movs	r3, #2
 800153a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	4820      	ldr	r0, [pc, #128]	; (80015c4 <MX_GPIO_Init+0x1a0>)
 8001544:	f001 fb80 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154c:	2301      	movs	r3, #1
 800154e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001550:	2301      	movs	r3, #1
 8001552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001554:	2302      	movs	r3, #2
 8001556:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	481a      	ldr	r0, [pc, #104]	; (80015c8 <MX_GPIO_Init+0x1a4>)
 8001560:	f001 fb72 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001564:	23c0      	movs	r3, #192	; 0xc0
 8001566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001568:	2311      	movs	r3, #17
 800156a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	4814      	ldr	r0, [pc, #80]	; (80015cc <MX_GPIO_Init+0x1a8>)
 800157c:	f001 fb64 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8001580:	2320      	movs	r3, #32
 8001582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001584:	2301      	movs	r3, #1
 8001586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	480e      	ldr	r0, [pc, #56]	; (80015d0 <MX_GPIO_Init+0x1ac>)
 8001598:	f001 fb56 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a8:	2302      	movs	r3, #2
 80015aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	4807      	ldr	r0, [pc, #28]	; (80015d0 <MX_GPIO_Init+0x1ac>)
 80015b4:	f001 fb48 	bl	8002c48 <HAL_GPIO_Init>

}
 80015b8:	bf00      	nop
 80015ba:	3728      	adds	r7, #40	; 0x28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	46020c00 	.word	0x46020c00
 80015c4:	42021800 	.word	0x42021800
 80015c8:	42020800 	.word	0x42020800
 80015cc:	42020c00 	.word	0x42020c00
 80015d0:	42020400 	.word	0x42020400
 80015d4:	10210000 	.word	0x10210000

080015d8 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80015dc:	2000      	movs	r0, #0
 80015de:	f001 fd55 	bl	800308c <HAL_ICACHE_ConfigAssociativityMode>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80015e8:	f000 fa6c 	bl	8001ac4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80015ec:	f001 fd6e 	bl	80030cc <HAL_ICACHE_Enable>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80015f6:	f000 fa65 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001606:	f000 fdcb 	bl	80021a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800160a:	f000 f883 	bl	8001714 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800160e:	f000 f8e2 	bl	80017d6 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001612:	f7ff ff07 	bl	8001424 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001616:	f7ff fe5d 	bl	80012d4 <MX_ADC1_Init>
  MX_UCPD1_Init();
 800161a:	f000 fc73 	bl	8001f04 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 800161e:	f000 fca7 	bl	8001f70 <MX_USART1_UART_Init>
  MX_ICACHE_Init();
 8001622:	f7ff ffd9 	bl	80015d8 <MX_ICACHE_Init>
  MX_SPI1_Init();
 8001626:	f000 fa51 	bl	8001acc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 800162a:	f7ff fdba 	bl	80011a2 <MPU6050_Init>
  HAL_Delay(100);
 800162e:	2064      	movs	r0, #100	; 0x64
 8001630:	f000 fe3a 	bl	80022a8 <HAL_Delay>
  MPU6050_Init();
 8001634:	f7ff fdb5 	bl	80011a2 <MPU6050_Init>

  // Initialization
  neai_anomalydetection_init();
 8001638:	f007 f828 	bl	800868c <neai_anomalydetection_init>

  // Learning
  for (uint16_t i = 0; i < MINIMUM_ITERATION_CALLS_FOR_EFFICIENT_LEARNING; i++) {
 800163c:	2300      	movs	r3, #0
 800163e:	80fb      	strh	r3, [r7, #6]
 8001640:	e01d      	b.n	800167e <main+0x7e>
    HAL_GPIO_TogglePin(GPIOB, LED_GREEN_Pin);
 8001642:	2180      	movs	r1, #128	; 0x80
 8001644:	4829      	ldr	r0, [pc, #164]	; (80016ec <main+0xec>)
 8001646:	f001 fd07 	bl	8003058 <HAL_GPIO_TogglePin>

    fill_accelerometer_buffer();
 800164a:	f000 f8d3 	bl	80017f4 <fill_accelerometer_buffer>
    neai_anomalydetection_learn(acc_buffer);
 800164e:	4828      	ldr	r0, [pc, #160]	; (80016f0 <main+0xf0>)
 8001650:	f007 f85a 	bl	8008708 <neai_anomalydetection_learn>

    HAL_GPIO_TogglePin(GPIOB, LED_GREEN_Pin);
 8001654:	2180      	movs	r1, #128	; 0x80
 8001656:	4825      	ldr	r0, [pc, #148]	; (80016ec <main+0xec>)
 8001658:	f001 fcfe 	bl	8003058 <HAL_GPIO_TogglePin>
    HAL_UART_Transmit(&huart1, (uint8_t*)"Learning number ", 16, 1000);
 800165c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001660:	2210      	movs	r2, #16
 8001662:	4924      	ldr	r1, [pc, #144]	; (80016f4 <main+0xf4>)
 8001664:	4824      	ldr	r0, [pc, #144]	; (80016f8 <main+0xf8>)
 8001666:	f005 ffab 	bl	80075c0 <HAL_UART_Transmit>
    //HAL_UART_Transmit(&huart1, (uint8_t*)(i+1), 2, 1000);
    HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 1000);
 800166a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166e:	2201      	movs	r2, #1
 8001670:	4922      	ldr	r1, [pc, #136]	; (80016fc <main+0xfc>)
 8001672:	4821      	ldr	r0, [pc, #132]	; (80016f8 <main+0xf8>)
 8001674:	f005 ffa4 	bl	80075c0 <HAL_UART_Transmit>
  for (uint16_t i = 0; i < MINIMUM_ITERATION_CALLS_FOR_EFFICIENT_LEARNING; i++) {
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	3301      	adds	r3, #1
 800167c:	80fb      	strh	r3, [r7, #6]
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	2b11      	cmp	r3, #17
 8001682:	d9de      	bls.n	8001642 <main+0x42>
  }
  HAL_UART_Transmit(&huart1, (uint8_t*)"Learning finished\n", 18, 1000);
 8001684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001688:	2212      	movs	r2, #18
 800168a:	491d      	ldr	r1, [pc, #116]	; (8001700 <main+0x100>)
 800168c:	481a      	ldr	r0, [pc, #104]	; (80016f8 <main+0xf8>)
 800168e:	f005 ff97 	bl	80075c0 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Inference
	  HAL_GPIO_TogglePin(GPIOB, LED_BLUE_Pin);
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	4815      	ldr	r0, [pc, #84]	; (80016ec <main+0xec>)
 8001696:	f001 fcdf 	bl	8003058 <HAL_GPIO_TogglePin>
	  fill_accelerometer_buffer();
 800169a:	f000 f8ab 	bl	80017f4 <fill_accelerometer_buffer>
	  neai_anomalydetection_detect(acc_buffer, &similarity);
 800169e:	4919      	ldr	r1, [pc, #100]	; (8001704 <main+0x104>)
 80016a0:	4813      	ldr	r0, [pc, #76]	; (80016f0 <main+0xf0>)
 80016a2:	f007 f955 	bl	8008950 <neai_anomalydetection_detect>
	  HAL_GPIO_TogglePin(GPIOB, LED_BLUE_Pin);
 80016a6:	2180      	movs	r1, #128	; 0x80
 80016a8:	4810      	ldr	r0, [pc, #64]	; (80016ec <main+0xec>)
 80016aa:	f001 fcd5 	bl	8003058 <HAL_GPIO_TogglePin>
	  if (similarity >= 90) {
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <main+0x104>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b59      	cmp	r3, #89	; 0x59
 80016b4:	d90c      	bls.n	80016d0 <main+0xd0>
	    HAL_UART_Transmit(&huart1, (uint8_t*)"NORMAL!\n", 10, 1000);
 80016b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ba:	220a      	movs	r2, #10
 80016bc:	4912      	ldr	r1, [pc, #72]	; (8001708 <main+0x108>)
 80016be:	480e      	ldr	r0, [pc, #56]	; (80016f8 <main+0xf8>)
 80016c0:	f005 ff7e 	bl	80075c0 <HAL_UART_Transmit>
	    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2104      	movs	r1, #4
 80016c8:	4810      	ldr	r0, [pc, #64]	; (800170c <main+0x10c>)
 80016ca:	f001 fcad 	bl	8003028 <HAL_GPIO_WritePin>
 80016ce:	e7e0      	b.n	8001692 <main+0x92>
	  }
	  else {
	    HAL_UART_Transmit(&huart1, (uint8_t*)"ERROR!\n", 10, 1000);
 80016d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d4:	220a      	movs	r2, #10
 80016d6:	490e      	ldr	r1, [pc, #56]	; (8001710 <main+0x110>)
 80016d8:	4807      	ldr	r0, [pc, #28]	; (80016f8 <main+0xf8>)
 80016da:	f005 ff71 	bl	80075c0 <HAL_UART_Transmit>
	    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80016de:	2201      	movs	r2, #1
 80016e0:	2104      	movs	r1, #4
 80016e2:	480a      	ldr	r0, [pc, #40]	; (800170c <main+0x10c>)
 80016e4:	f001 fca0 	bl	8003028 <HAL_GPIO_WritePin>
	  HAL_GPIO_TogglePin(GPIOB, LED_BLUE_Pin);
 80016e8:	e7d3      	b.n	8001692 <main+0x92>
 80016ea:	bf00      	nop
 80016ec:	42020400 	.word	0x42020400
 80016f0:	200002d4 	.word	0x200002d4
 80016f4:	0800ba00 	.word	0x0800ba00
 80016f8:	2000081c 	.word	0x2000081c
 80016fc:	0800ba14 	.word	0x0800ba14
 8001700:	0800ba18 	.word	0x0800ba18
 8001704:	20000784 	.word	0x20000784
 8001708:	0800ba2c 	.word	0x0800ba2c
 800170c:	42021800 	.word	0x42021800
 8001710:	0800ba38 	.word	0x0800ba38

08001714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b09e      	sub	sp, #120	; 0x78
 8001718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171a:	f107 0318 	add.w	r3, r7, #24
 800171e:	2260      	movs	r2, #96	; 0x60
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f007 ff85 	bl	8009632 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001728:	463b      	mov	r3, r7
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	611a      	str	r2, [r3, #16]
 8001736:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001738:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800173c:	f001 fcd6 	bl	80030ec <HAL_PWREx_ControlVoltageScaling>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001746:	f000 f9bd 	bl	8001ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800174a:	2312      	movs	r3, #18
 800174c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800174e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001754:	2310      	movs	r3, #16
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001758:	2301      	movs	r3, #1
 800175a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800175c:	2310      	movs	r3, #16
 800175e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8001760:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001764:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001766:	2302      	movs	r3, #2
 8001768:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800176a:	2301      	movs	r3, #1
 800176c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800176e:	2300      	movs	r3, #0
 8001770:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001772:	2301      	movs	r3, #1
 8001774:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001776:	2350      	movs	r3, #80	; 0x50
 8001778:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800177a:	2302      	movs	r3, #2
 800177c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800177e:	2302      	movs	r3, #2
 8001780:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001782:	2302      	movs	r3, #2
 8001784:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8001786:	2300      	movs	r3, #0
 8001788:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178e:	f107 0318 	add.w	r3, r7, #24
 8001792:	4618      	mov	r0, r3
 8001794:	f001 fd96 	bl	80032c4 <HAL_RCC_OscConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800179e:	f000 f991 	bl	8001ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a2:	231f      	movs	r3, #31
 80017a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a6:	2303      	movs	r3, #3
 80017a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017ba:	463b      	mov	r3, r7
 80017bc:	2104      	movs	r1, #4
 80017be:	4618      	mov	r0, r3
 80017c0:	f002 fc5c 	bl	800407c <HAL_RCC_ClockConfig>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <SystemClock_Config+0xba>
  {
    Error_Handler();
 80017ca:	f000 f97b 	bl	8001ac4 <Error_Handler>
  }
}
 80017ce:	bf00      	nop
 80017d0:	3778      	adds	r7, #120	; 0x78
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80017da:	f001 fd63 	bl	80032a4 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80017de:	2002      	movs	r0, #2
 80017e0:	f001 fd10 	bl	8003204 <HAL_PWREx_ConfigSupply>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemPower_Config+0x18>
  {
    Error_Handler();
 80017ea:	f000 f96b 	bl	8001ac4 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <fill_accelerometer_buffer>:

/* USER CODE BEGIN 4 */
void fill_accelerometer_buffer() {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af02      	add	r7, sp, #8
  for (int i = 0; i < DATA_INPUT_USER; i++) {
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	e13a      	b.n	8001a76 <fill_accelerometer_buffer+0x282>
	  MPU6050_GetData(&AX, &AY, &AZ, &GX, &GY, &GZ);
 8001800:	4ba4      	ldr	r3, [pc, #656]	; (8001a94 <fill_accelerometer_buffer+0x2a0>)
 8001802:	9301      	str	r3, [sp, #4]
 8001804:	4ba4      	ldr	r3, [pc, #656]	; (8001a98 <fill_accelerometer_buffer+0x2a4>)
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	4ba4      	ldr	r3, [pc, #656]	; (8001a9c <fill_accelerometer_buffer+0x2a8>)
 800180a:	4aa5      	ldr	r2, [pc, #660]	; (8001aa0 <fill_accelerometer_buffer+0x2ac>)
 800180c:	49a5      	ldr	r1, [pc, #660]	; (8001aa4 <fill_accelerometer_buffer+0x2b0>)
 800180e:	48a6      	ldr	r0, [pc, #664]	; (8001aa8 <fill_accelerometer_buffer+0x2b4>)
 8001810:	f7ff fce3 	bl	80011da <MPU6050_GetData>

	  sprintf(buffer, "%.3f,", (float)AX / 1000);
 8001814:	4ba4      	ldr	r3, [pc, #656]	; (8001aa8 <fill_accelerometer_buffer+0x2b4>)
 8001816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001822:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8001aac <fill_accelerometer_buffer+0x2b8>
 8001826:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800182a:	ee16 0a90 	vmov	r0, s13
 800182e:	f7fe fe8f 	bl	8000550 <__aeabi_f2d>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	499e      	ldr	r1, [pc, #632]	; (8001ab0 <fill_accelerometer_buffer+0x2bc>)
 8001838:	489e      	ldr	r0, [pc, #632]	; (8001ab4 <fill_accelerometer_buffer+0x2c0>)
 800183a:	f007 fe97 	bl	800956c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 800183e:	489d      	ldr	r0, [pc, #628]	; (8001ab4 <fill_accelerometer_buffer+0x2c0>)
 8001840:	f7fe fd1a 	bl	8000278 <strlen>
 8001844:	4603      	mov	r3, r0
 8001846:	b29a      	uxth	r2, r3
 8001848:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184c:	4999      	ldr	r1, [pc, #612]	; (8001ab4 <fill_accelerometer_buffer+0x2c0>)
 800184e:	489a      	ldr	r0, [pc, #616]	; (8001ab8 <fill_accelerometer_buffer+0x2c4>)
 8001850:	f005 feb6 	bl	80075c0 <HAL_UART_Transmit>

	  sprintf(buffer, "%.3f,", (float)AY / 1000);
 8001854:	4b93      	ldr	r3, [pc, #588]	; (8001aa4 <fill_accelerometer_buffer+0x2b0>)
 8001856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185a:	ee07 3a90 	vmov	s15, r3
 800185e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001862:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8001aac <fill_accelerometer_buffer+0x2b8>
 8001866:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800186a:	ee16 0a90 	vmov	r0, s13
 800186e:	f7fe fe6f 	bl	8000550 <__aeabi_f2d>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	498e      	ldr	r1, [pc, #568]	; (8001ab0 <fill_accelerometer_buffer+0x2bc>)
 8001878:	488e      	ldr	r0, [pc, #568]	; (8001ab4 <fill_accelerometer_buffer+0x2c0>)
 800187a:	f007 fe77 	bl	800956c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 800187e:	488d      	ldr	r0, [pc, #564]	; (8001ab4 <fill_accelerometer_buffer+0x2c0>)
 8001880:	f7fe fcfa 	bl	8000278 <strlen>
 8001884:	4603      	mov	r3, r0
 8001886:	b29a      	uxth	r2, r3
 8001888:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188c:	4989      	ldr	r1, [pc, #548]	; (8001ab4 <fill_accelerometer_buffer+0x2c0>)
 800188e:	488a      	ldr	r0, [pc, #552]	; (8001ab8 <fill_accelerometer_buffer+0x2c4>)
 8001890:	f005 fe96 	bl	80075c0 <HAL_UART_Transmit>

	  sprintf(buffer, "%.3f,", (float)AZ / 1000);
 8001894:	4b82      	ldr	r3, [pc, #520]	; (8001aa0 <fill_accelerometer_buffer+0x2ac>)
 8001896:	f9b3 3000 	ldrsh.w	r3, [r3]
 800189a:	ee07 3a90 	vmov	s15, r3
 800189e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a2:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8001aac <fill_accelerometer_buffer+0x2b8>
 80018a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018aa:	ee16 0a90 	vmov	r0, s13
 80018ae:	f7fe fe4f 	bl	8000550 <__aeabi_f2d>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	497e      	ldr	r1, [pc, #504]	; (8001ab0 <fill_accelerometer_buffer+0x2bc>)
 80018b8:	487e      	ldr	r0, [pc, #504]	; (8001ab4 <fill_accelerometer_buffer+0x2c0>)
 80018ba:	f007 fe57 	bl	800956c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 80018be:	487d      	ldr	r0, [pc, #500]	; (8001ab4 <fill_accelerometer_buffer+0x2c0>)
 80018c0:	f7fe fcda 	bl	8000278 <strlen>
 80018c4:	4603      	mov	r3, r0
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018cc:	4979      	ldr	r1, [pc, #484]	; (8001ab4 <fill_accelerometer_buffer+0x2c0>)
 80018ce:	487a      	ldr	r0, [pc, #488]	; (8001ab8 <fill_accelerometer_buffer+0x2c4>)
 80018d0:	f005 fe76 	bl	80075c0 <HAL_UART_Transmit>

	  sprintf(buffer, "%.3f,", (float)GX / 1000);
 80018d4:	4b71      	ldr	r3, [pc, #452]	; (8001a9c <fill_accelerometer_buffer+0x2a8>)
 80018d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018da:	ee07 3a90 	vmov	s15, r3
 80018de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e2:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001aac <fill_accelerometer_buffer+0x2b8>
 80018e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018ea:	ee16 0a90 	vmov	r0, s13
 80018ee:	f7fe fe2f 	bl	8000550 <__aeabi_f2d>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	496e      	ldr	r1, [pc, #440]	; (8001ab0 <fill_accelerometer_buffer+0x2bc>)
 80018f8:	486e      	ldr	r0, [pc, #440]	; (8001ab4 <fill_accelerometer_buffer+0x2c0>)
 80018fa:	f007 fe37 	bl	800956c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 80018fe:	486d      	ldr	r0, [pc, #436]	; (8001ab4 <fill_accelerometer_buffer+0x2c0>)
 8001900:	f7fe fcba 	bl	8000278 <strlen>
 8001904:	4603      	mov	r3, r0
 8001906:	b29a      	uxth	r2, r3
 8001908:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190c:	4969      	ldr	r1, [pc, #420]	; (8001ab4 <fill_accelerometer_buffer+0x2c0>)
 800190e:	486a      	ldr	r0, [pc, #424]	; (8001ab8 <fill_accelerometer_buffer+0x2c4>)
 8001910:	f005 fe56 	bl	80075c0 <HAL_UART_Transmit>

	  sprintf(buffer, "%.3f,", (float)GY / 1000);
 8001914:	4b60      	ldr	r3, [pc, #384]	; (8001a98 <fill_accelerometer_buffer+0x2a4>)
 8001916:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191a:	ee07 3a90 	vmov	s15, r3
 800191e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001922:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001aac <fill_accelerometer_buffer+0x2b8>
 8001926:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800192a:	ee16 0a90 	vmov	r0, s13
 800192e:	f7fe fe0f 	bl	8000550 <__aeabi_f2d>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	495e      	ldr	r1, [pc, #376]	; (8001ab0 <fill_accelerometer_buffer+0x2bc>)
 8001938:	485e      	ldr	r0, [pc, #376]	; (8001ab4 <fill_accelerometer_buffer+0x2c0>)
 800193a:	f007 fe17 	bl	800956c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 800193e:	485d      	ldr	r0, [pc, #372]	; (8001ab4 <fill_accelerometer_buffer+0x2c0>)
 8001940:	f7fe fc9a 	bl	8000278 <strlen>
 8001944:	4603      	mov	r3, r0
 8001946:	b29a      	uxth	r2, r3
 8001948:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194c:	4959      	ldr	r1, [pc, #356]	; (8001ab4 <fill_accelerometer_buffer+0x2c0>)
 800194e:	485a      	ldr	r0, [pc, #360]	; (8001ab8 <fill_accelerometer_buffer+0x2c4>)
 8001950:	f005 fe36 	bl	80075c0 <HAL_UART_Transmit>

	  sprintf(buffer, "%.3f,", (float)GZ / 1000);
 8001954:	4b4f      	ldr	r3, [pc, #316]	; (8001a94 <fill_accelerometer_buffer+0x2a0>)
 8001956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800195a:	ee07 3a90 	vmov	s15, r3
 800195e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001962:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001aac <fill_accelerometer_buffer+0x2b8>
 8001966:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800196a:	ee16 0a90 	vmov	r0, s13
 800196e:	f7fe fdef 	bl	8000550 <__aeabi_f2d>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	494e      	ldr	r1, [pc, #312]	; (8001ab0 <fill_accelerometer_buffer+0x2bc>)
 8001978:	484e      	ldr	r0, [pc, #312]	; (8001ab4 <fill_accelerometer_buffer+0x2c0>)
 800197a:	f007 fdf7 	bl	800956c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 800197e:	484d      	ldr	r0, [pc, #308]	; (8001ab4 <fill_accelerometer_buffer+0x2c0>)
 8001980:	f7fe fc7a 	bl	8000278 <strlen>
 8001984:	4603      	mov	r3, r0
 8001986:	b29a      	uxth	r2, r3
 8001988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198c:	4949      	ldr	r1, [pc, #292]	; (8001ab4 <fill_accelerometer_buffer+0x2c0>)
 800198e:	484a      	ldr	r0, [pc, #296]	; (8001ab8 <fill_accelerometer_buffer+0x2c4>)
 8001990:	f005 fe16 	bl	80075c0 <HAL_UART_Transmit>

	  HAL_Delay(8);
 8001994:	2008      	movs	r0, #8
 8001996:	f000 fc87 	bl	80022a8 <HAL_Delay>

    acc_buffer[AXIS_NUMBER * i + 0] = AX;
 800199a:	4b43      	ldr	r3, [pc, #268]	; (8001aa8 <fill_accelerometer_buffer+0x2b4>)
 800199c:	f9b3 1000 	ldrsh.w	r1, [r3]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	ee07 1a90 	vmov	s15, r1
 80019ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b2:	4a42      	ldr	r2, [pc, #264]	; (8001abc <fill_accelerometer_buffer+0x2c8>)
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	edc3 7a00 	vstr	s15, [r3]
    acc_buffer[AXIS_NUMBER * i + 1] = AY;
 80019bc:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <fill_accelerometer_buffer+0x2b0>)
 80019be:	f9b3 1000 	ldrsh.w	r1, [r3]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	3301      	adds	r3, #1
 80019ce:	ee07 1a90 	vmov	s15, r1
 80019d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d6:	4a39      	ldr	r2, [pc, #228]	; (8001abc <fill_accelerometer_buffer+0x2c8>)
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	edc3 7a00 	vstr	s15, [r3]
    acc_buffer[AXIS_NUMBER * i + 2] = AZ;
 80019e0:	4b2f      	ldr	r3, [pc, #188]	; (8001aa0 <fill_accelerometer_buffer+0x2ac>)
 80019e2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	3302      	adds	r3, #2
 80019f2:	ee07 1a90 	vmov	s15, r1
 80019f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019fa:	4a30      	ldr	r2, [pc, #192]	; (8001abc <fill_accelerometer_buffer+0x2c8>)
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	edc3 7a00 	vstr	s15, [r3]
    acc_buffer[AXIS_NUMBER * i + 3] = GX;
 8001a04:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <fill_accelerometer_buffer+0x2a8>)
 8001a06:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	3303      	adds	r3, #3
 8001a16:	ee07 1a90 	vmov	s15, r1
 8001a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1e:	4a27      	ldr	r2, [pc, #156]	; (8001abc <fill_accelerometer_buffer+0x2c8>)
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	edc3 7a00 	vstr	s15, [r3]
    acc_buffer[AXIS_NUMBER * i + 4] = GY;
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <fill_accelerometer_buffer+0x2a4>)
 8001a2a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	3304      	adds	r3, #4
 8001a3a:	ee07 1a90 	vmov	s15, r1
 8001a3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a42:	4a1e      	ldr	r2, [pc, #120]	; (8001abc <fill_accelerometer_buffer+0x2c8>)
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	edc3 7a00 	vstr	s15, [r3]
    acc_buffer[AXIS_NUMBER * i + 5] = GZ;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <fill_accelerometer_buffer+0x2a0>)
 8001a4e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	3305      	adds	r3, #5
 8001a5e:	ee07 1a90 	vmov	s15, r1
 8001a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a66:	4a15      	ldr	r2, [pc, #84]	; (8001abc <fill_accelerometer_buffer+0x2c8>)
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < DATA_INPUT_USER; i++) {
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3301      	adds	r3, #1
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b31      	cmp	r3, #49	; 0x31
 8001a7a:	f77f aec1 	ble.w	8001800 <fill_accelerometer_buffer+0xc>
  }
  HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 1000);
 8001a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a82:	2201      	movs	r2, #1
 8001a84:	490e      	ldr	r1, [pc, #56]	; (8001ac0 <fill_accelerometer_buffer+0x2cc>)
 8001a86:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <fill_accelerometer_buffer+0x2c4>)
 8001a88:	f005 fd9a 	bl	80075c0 <HAL_UART_Transmit>
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200002be 	.word	0x200002be
 8001a98:	200002bc 	.word	0x200002bc
 8001a9c:	200002ba 	.word	0x200002ba
 8001aa0:	200002b8 	.word	0x200002b8
 8001aa4:	200002b6 	.word	0x200002b6
 8001aa8:	200002b4 	.word	0x200002b4
 8001aac:	447a0000 	.word	0x447a0000
 8001ab0:	0800ba40 	.word	0x0800ba40
 8001ab4:	200002c0 	.word	0x200002c0
 8001ab8:	2000081c 	.word	0x2000081c
 8001abc:	200002d4 	.word	0x200002d4
 8001ac0:	0800ba14 	.word	0x0800ba14

08001ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8001ac8:	e7fe      	b.n	8001ac8 <Error_Handler+0x4>
	...

08001acc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001adc:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001ade:	4a31      	ldr	r2, [pc, #196]	; (8001ba4 <MX_SPI1_Init+0xd8>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ae2:	4b2f      	ldr	r3, [pc, #188]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001ae4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ae8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001aea:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001af0:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001af2:	2203      	movs	r2, #3
 8001af4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001af6:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001afc:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b02:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001b04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b0a:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b10:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b16:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b1c:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001b22:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001b24:	2207      	movs	r2, #7
 8001b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b28:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001b2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b2e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001b30:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001b36:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b3c:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b42:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001b48:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001b4e:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b66:	480e      	ldr	r0, [pc, #56]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001b68:	f005 fb68 	bl	800723c <HAL_SPI_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8001b72:	f7ff ffa7 	bl	8001ac4 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001b7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b7e:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	4619      	mov	r1, r3
 8001b88:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_SPI1_Init+0xd4>)
 8001b8a:	f005 fc88 	bl	800749e <HAL_SPIEx_SetConfigAutonomousMode>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8001b94:	f7ff ff96 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b98:	bf00      	nop
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000788 	.word	0x20000788
 8001ba4:	40013000 	.word	0x40013000

08001ba8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b0bc      	sub	sp, #240	; 0xf0
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc0:	f107 0310 	add.w	r3, r7, #16
 8001bc4:	22c8      	movs	r2, #200	; 0xc8
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f007 fd32 	bl	8009632 <memset>
  if(spiHandle->Instance==SPI1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a27      	ldr	r2, [pc, #156]	; (8001c70 <HAL_SPI_MspInit+0xc8>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d146      	bne.n	8001c66 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001bd8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001be4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001be8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bec:	f107 0310 	add.w	r3, r7, #16
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f002 fe19 	bl	8004828 <HAL_RCCEx_PeriphCLKConfig>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001bfc:	f7ff ff62 	bl	8001ac4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c00:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <HAL_SPI_MspInit+0xcc>)
 8001c02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001c06:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <HAL_SPI_MspInit+0xcc>)
 8001c08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c0c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001c10:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <HAL_SPI_MspInit+0xcc>)
 8001c12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001c16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <HAL_SPI_MspInit+0xcc>)
 8001c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c24:	4a13      	ldr	r2, [pc, #76]	; (8001c74 <HAL_SPI_MspInit+0xcc>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_SPI_MspInit+0xcc>)
 8001c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c3c:	23e0      	movs	r3, #224	; 0xe0
 8001c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c54:	2305      	movs	r3, #5
 8001c56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4805      	ldr	r0, [pc, #20]	; (8001c78 <HAL_SPI_MspInit+0xd0>)
 8001c62:	f000 fff1 	bl	8002c48 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c66:	bf00      	nop
 8001c68:	37f0      	adds	r7, #240	; 0xf0
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40013000 	.word	0x40013000
 8001c74:	46020c00 	.word	0x46020c00
 8001c78:	42020000 	.word	0x42020000

08001c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_MspInit+0x34>)
 8001c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c88:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <HAL_MspInit+0x34>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <HAL_MspInit+0x34>)
 8001c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001ca0:	2004      	movs	r0, #4
 8001ca2:	f000 ff9f 	bl	8002be4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	46020c00 	.word	0x46020c00

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <NMI_Handler+0x4>

08001cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <HardFault_Handler+0x4>

08001cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <MemManage_Handler+0x4>

08001cc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <BusFault_Handler+0x4>

08001ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <UsageFault_Handler+0x4>

08001cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d00:	f000 fab2 	bl	8002268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return 1;
 8001d0c:	2301      	movs	r3, #1
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <_kill>:

int _kill(int pid, int sig)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d22:	f007 fcd9 	bl	80096d8 <__errno>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2216      	movs	r2, #22
 8001d2a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_exit>:

void _exit (int status)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ffe7 	bl	8001d18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d4a:	e7fe      	b.n	8001d4a <_exit+0x12>

08001d4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	e00a      	b.n	8001d74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d5e:	f3af 8000 	nop.w
 8001d62:	4601      	mov	r1, r0
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	60ba      	str	r2, [r7, #8]
 8001d6a:	b2ca      	uxtb	r2, r1
 8001d6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	3301      	adds	r3, #1
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	dbf0      	blt.n	8001d5e <_read+0x12>
  }

  return len;
 8001d7c:	687b      	ldr	r3, [r7, #4]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	e009      	b.n	8001dac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	60ba      	str	r2, [r7, #8]
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	3301      	adds	r3, #1
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	dbf1      	blt.n	8001d98 <_write+0x12>
  }
  return len;
 8001db4:	687b      	ldr	r3, [r7, #4]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <_close>:

int _close(int file)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001de6:	605a      	str	r2, [r3, #4]
  return 0;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <_isatty>:

int _isatty(int file)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dfe:	2301      	movs	r3, #1
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e30:	4a14      	ldr	r2, [pc, #80]	; (8001e84 <_sbrk+0x5c>)
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <_sbrk+0x60>)
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <_sbrk+0x64>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d102      	bne.n	8001e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e44:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <_sbrk+0x64>)
 8001e46:	4a12      	ldr	r2, [pc, #72]	; (8001e90 <_sbrk+0x68>)
 8001e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <_sbrk+0x64>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d207      	bcs.n	8001e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e58:	f007 fc3e 	bl	80096d8 <__errno>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	220c      	movs	r2, #12
 8001e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295
 8001e66:	e009      	b.n	8001e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <_sbrk+0x64>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e6e:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <_sbrk+0x64>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <_sbrk+0x64>)
 8001e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	200c0000 	.word	0x200c0000
 8001e88:	00000400 	.word	0x00000400
 8001e8c:	20000818 	.word	0x20000818
 8001e90:	20000ad0 	.word	0x20000ad0

08001e94 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <LL_AHB2_GRP1_EnableClock+0x34>)
 8001e9e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001ea2:	4909      	ldr	r1, [pc, #36]	; (8001ec8 <LL_AHB2_GRP1_EnableClock+0x34>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <LL_AHB2_GRP1_EnableClock+0x34>)
 8001eae:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	46020c00 	.word	0x46020c00

08001ecc <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <LL_APB1_GRP2_EnableClock+0x34>)
 8001ed6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001eda:	4909      	ldr	r1, [pc, #36]	; (8001f00 <LL_APB1_GRP2_EnableClock+0x34>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <LL_APB1_GRP2_EnableClock+0x34>)
 8001ee6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4013      	ands	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	46020c00 	.word	0x46020c00

08001f04 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
 8001f18:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001f1a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001f1e:	f7ff ffd5 	bl	8001ecc <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001f22:	2002      	movs	r0, #2
 8001f24:	f7ff ffb6 	bl	8001e94 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f7ff ffb3 	bl	8001e94 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f32:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001f34:	2303      	movs	r3, #3
 8001f36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4809      	ldr	r0, [pc, #36]	; (8001f68 <MX_UCPD1_Init+0x64>)
 8001f42:	f006 f9e4 	bl	800830e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f4a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f50:	2300      	movs	r3, #0
 8001f52:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f54:	463b      	mov	r3, r7
 8001f56:	4619      	mov	r1, r3
 8001f58:	4804      	ldr	r0, [pc, #16]	; (8001f6c <MX_UCPD1_Init+0x68>)
 8001f5a:	f006 f9d8 	bl	800830e <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001f5e:	bf00      	nop
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	42020400 	.word	0x42020400
 8001f6c:	42020000 	.word	0x42020000

08001f70 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f74:	4b22      	ldr	r3, [pc, #136]	; (8002000 <MX_USART1_UART_Init+0x90>)
 8001f76:	4a23      	ldr	r2, [pc, #140]	; (8002004 <MX_USART1_UART_Init+0x94>)
 8001f78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8001f7a:	4b21      	ldr	r3, [pc, #132]	; (8002000 <MX_USART1_UART_Init+0x90>)
 8001f7c:	4a22      	ldr	r2, [pc, #136]	; (8002008 <MX_USART1_UART_Init+0x98>)
 8001f7e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f80:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <MX_USART1_UART_Init+0x90>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f86:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <MX_USART1_UART_Init+0x90>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f8c:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <MX_USART1_UART_Init+0x90>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f92:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <MX_USART1_UART_Init+0x90>)
 8001f94:	220c      	movs	r2, #12
 8001f96:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f98:	4b19      	ldr	r3, [pc, #100]	; (8002000 <MX_USART1_UART_Init+0x90>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f9e:	4b18      	ldr	r3, [pc, #96]	; (8002000 <MX_USART1_UART_Init+0x90>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fa4:	4b16      	ldr	r3, [pc, #88]	; (8002000 <MX_USART1_UART_Init+0x90>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <MX_USART1_UART_Init+0x90>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fb0:	4b13      	ldr	r3, [pc, #76]	; (8002000 <MX_USART1_UART_Init+0x90>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fb6:	4812      	ldr	r0, [pc, #72]	; (8002000 <MX_USART1_UART_Init+0x90>)
 8001fb8:	f005 fab2 	bl	8007520 <HAL_UART_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001fc2:	f7ff fd7f 	bl	8001ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	480d      	ldr	r0, [pc, #52]	; (8002000 <MX_USART1_UART_Init+0x90>)
 8001fca:	f005 ff8b 	bl	8007ee4 <HAL_UARTEx_SetTxFifoThreshold>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8001fd4:	f7ff fd76 	bl	8001ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4809      	ldr	r0, [pc, #36]	; (8002000 <MX_USART1_UART_Init+0x90>)
 8001fdc:	f005 ffc0 	bl	8007f60 <HAL_UARTEx_SetRxFifoThreshold>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001fe6:	f7ff fd6d 	bl	8001ac4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001fea:	4805      	ldr	r0, [pc, #20]	; (8002000 <MX_USART1_UART_Init+0x90>)
 8001fec:	f005 ff41 	bl	8007e72 <HAL_UARTEx_DisableFifoMode>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001ff6:	f7ff fd65 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	2000081c 	.word	0x2000081c
 8002004:	40013800 	.word	0x40013800
 8002008:	001e8480 	.word	0x001e8480

0800200c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b0bc      	sub	sp, #240	; 0xf0
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	22c8      	movs	r2, #200	; 0xc8
 800202a:	2100      	movs	r1, #0
 800202c:	4618      	mov	r0, r3
 800202e:	f007 fb00 	bl	8009632 <memset>
  if(uartHandle->Instance==USART1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a26      	ldr	r2, [pc, #152]	; (80020d0 <HAL_UART_MspInit+0xc4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d145      	bne.n	80020c8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800203c:	f04f 0201 	mov.w	r2, #1
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002048:	2300      	movs	r3, #0
 800204a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800204c:	f107 0310 	add.w	r3, r7, #16
 8002050:	4618      	mov	r0, r3
 8002052:	f002 fbe9 	bl	8004828 <HAL_RCCEx_PeriphCLKConfig>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 800205c:	f7ff fd32 	bl	8001ac4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002060:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <HAL_UART_MspInit+0xc8>)
 8002062:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002066:	4a1b      	ldr	r2, [pc, #108]	; (80020d4 <HAL_UART_MspInit+0xc8>)
 8002068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800206c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002070:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <HAL_UART_MspInit+0xc8>)
 8002072:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <HAL_UART_MspInit+0xc8>)
 8002080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002084:	4a13      	ldr	r2, [pc, #76]	; (80020d4 <HAL_UART_MspInit+0xc8>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_UART_MspInit+0xc8>)
 8002090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 800209c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020aa:	2302      	movs	r3, #2
 80020ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b0:	2303      	movs	r3, #3
 80020b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020b6:	2307      	movs	r3, #7
 80020b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020c0:	4619      	mov	r1, r3
 80020c2:	4805      	ldr	r0, [pc, #20]	; (80020d8 <HAL_UART_MspInit+0xcc>)
 80020c4:	f000 fdc0 	bl	8002c48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80020c8:	bf00      	nop
 80020ca:	37f0      	adds	r7, #240	; 0xf0
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40013800 	.word	0x40013800
 80020d4:	46020c00 	.word	0x46020c00
 80020d8:	42020000 	.word	0x42020000

080020dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80020dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002114 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80020e0:	f000 f826 	bl	8002130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020e6:	e003      	b.n	80020f0 <LoopCopyDataInit>

080020e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80020ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020ee:	3104      	adds	r1, #4

080020f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020f0:	480a      	ldr	r0, [pc, #40]	; (800211c <LoopForever+0xa>)
	ldr	r3, =_edata
 80020f2:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <LoopForever+0xe>)
	adds	r2, r0, r1
 80020f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80020f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80020f8:	d3f6      	bcc.n	80020e8 <CopyDataInit>
	ldr	r2, =_sbss
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <LoopForever+0x12>)
	b	LoopFillZerobss
 80020fc:	e002      	b.n	8002104 <LoopFillZerobss>

080020fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80020fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002100:	f842 3b04 	str.w	r3, [r2], #4

08002104 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <LoopForever+0x16>)
	cmp	r2, r3
 8002106:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002108:	d3f9      	bcc.n	80020fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800210a:	f007 faeb 	bl	80096e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800210e:	f7ff fa77 	bl	8001600 <main>

08002112 <LoopForever>:

LoopForever:
    b LoopForever
 8002112:	e7fe      	b.n	8002112 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002114:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002118:	0800becc 	.word	0x0800becc
	ldr	r0, =_sdata
 800211c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002120:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8002124:	2000020c 	.word	0x2000020c
	ldr	r3, = _ebss
 8002128:	20000acc 	.word	0x20000acc

0800212c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800212c:	e7fe      	b.n	800212c <ADC1_IRQHandler>
	...

08002130 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002134:	4b18      	ldr	r3, [pc, #96]	; (8002198 <SystemInit+0x68>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213a:	4a17      	ldr	r2, [pc, #92]	; (8002198 <SystemInit+0x68>)
 800213c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002144:	4b15      	ldr	r3, [pc, #84]	; (800219c <SystemInit+0x6c>)
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800214a:	4b14      	ldr	r3, [pc, #80]	; (800219c <SystemInit+0x6c>)
 800214c:	2200      	movs	r2, #0
 800214e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <SystemInit+0x6c>)
 8002152:	2200      	movs	r2, #0
 8002154:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002156:	4b11      	ldr	r3, [pc, #68]	; (800219c <SystemInit+0x6c>)
 8002158:	2200      	movs	r2, #0
 800215a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800215c:	4b0f      	ldr	r3, [pc, #60]	; (800219c <SystemInit+0x6c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0e      	ldr	r2, [pc, #56]	; (800219c <SystemInit+0x6c>)
 8002162:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002166:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800216a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <SystemInit+0x6c>)
 800216e:	2200      	movs	r2, #0
 8002170:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <SystemInit+0x6c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a09      	ldr	r2, [pc, #36]	; (800219c <SystemInit+0x6c>)
 8002178:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800217c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800217e:	4b07      	ldr	r3, [pc, #28]	; (800219c <SystemInit+0x6c>)
 8002180:	2200      	movs	r2, #0
 8002182:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002184:	4b04      	ldr	r3, [pc, #16]	; (8002198 <SystemInit+0x68>)
 8002186:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800218a:	609a      	str	r2, [r3, #8]
  #endif
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	e000ed00 	.word	0xe000ed00
 800219c:	46020c00 	.word	0x46020c00

080021a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <HAL_Init+0x4c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a10      	ldr	r2, [pc, #64]	; (80021ec <HAL_Init+0x4c>)
 80021aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b0:	2003      	movs	r0, #3
 80021b2:	f000 fd17 	bl	8002be4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80021b6:	f002 f953 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 80021ba:	4602      	mov	r2, r0
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <HAL_Init+0x50>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	490b      	ldr	r1, [pc, #44]	; (80021f4 <HAL_Init+0x54>)
 80021c6:	5ccb      	ldrb	r3, [r1, r3]
 80021c8:	fa22 f303 	lsr.w	r3, r2, r3
 80021cc:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <HAL_Init+0x58>)
 80021ce:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021d0:	2000      	movs	r0, #0
 80021d2:	f000 f813 	bl	80021fc <HAL_InitTick>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e002      	b.n	80021e6 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80021e0:	f7ff fd4c 	bl	8001c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40022000 	.word	0x40022000
 80021f0:	46020c00 	.word	0x46020c00
 80021f4:	0800ba48 	.word	0x0800ba48
 80021f8:	20000000 	.word	0x20000000

080021fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002204:	4b15      	ldr	r3, [pc, #84]	; (800225c <HAL_InitTick+0x60>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e021      	b.n	8002254 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002210:	4b13      	ldr	r3, [pc, #76]	; (8002260 <HAL_InitTick+0x64>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <HAL_InitTick+0x60>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4619      	mov	r1, r3
 800221a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002222:	fbb2 f3f3 	udiv	r3, r2, r3
 8002226:	4618      	mov	r0, r3
 8002228:	f000 fd01 	bl	8002c2e <HAL_SYSTICK_Config>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e00e      	b.n	8002254 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b0f      	cmp	r3, #15
 800223a:	d80a      	bhi.n	8002252 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800223c:	2200      	movs	r2, #0
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	f04f 30ff 	mov.w	r0, #4294967295
 8002244:	f000 fcd9 	bl	8002bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002248:	4a06      	ldr	r2, [pc, #24]	; (8002264 <HAL_InitTick+0x68>)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	e000      	b.n	8002254 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000008 	.word	0x20000008
 8002260:	20000000 	.word	0x20000000
 8002264:	20000004 	.word	0x20000004

08002268 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_IncTick+0x20>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_IncTick+0x24>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4413      	add	r3, r2
 8002278:	4a04      	ldr	r2, [pc, #16]	; (800228c <HAL_IncTick+0x24>)
 800227a:	6013      	str	r3, [r2, #0]
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000008 	.word	0x20000008
 800228c:	200008b0 	.word	0x200008b0

08002290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return uwTick;
 8002294:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <HAL_GetTick+0x14>)
 8002296:	681b      	ldr	r3, [r3, #0]
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	200008b0 	.word	0x200008b0

080022a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b0:	f7ff ffee 	bl	8002290 <HAL_GetTick>
 80022b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c0:	d005      	beq.n	80022ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022c2:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <HAL_Delay+0x44>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4413      	add	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ce:	bf00      	nop
 80022d0:	f7ff ffde 	bl	8002290 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d8f7      	bhi.n	80022d0 <HAL_Delay+0x28>
  {
  }
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000008 	.word	0x20000008

080022f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	431a      	orrs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	601a      	str	r2, [r3, #0]
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <LL_ADC_SetResolution+0x3c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d104      	bne.n	8002338 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	3b01      	subs	r3, #1
 8002332:	f003 030c 	and.w	r3, r3, #12
 8002336:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f023 020c 	bic.w	r2, r3, #12
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	60da      	str	r2, [r3, #12]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	46021000 	.word	0x46021000

08002358 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002366:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800236a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	2a00      	cmp	r2, #0
 8002382:	d002      	beq.n	800238a <LL_ADC_SetGainCompensation+0x32>
 8002384:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002388:	e000      	b.n	800238c <LL_ADC_SetGainCompensation+0x34>
 800238a:	2200      	movs	r2, #0
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	671a      	str	r2, [r3, #112]	; 0x70
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800239e:	b480      	push	{r7}
 80023a0:	b085      	sub	sp, #20
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2107      	movs	r1, #7
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	401a      	ands	r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	431a      	orrs	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80023ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6093      	str	r3, [r2, #8]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002414:	d101      	bne.n	800241a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002438:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800243c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	609a      	str	r2, [r3, #8]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002460:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002464:	d101      	bne.n	800246a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <LL_ADC_IsEnabled+0x18>
 800248c:	2301      	movs	r3, #1
 800248e:	e000      	b.n	8002492 <LL_ADC_IsEnabled+0x1a>
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d101      	bne.n	80024b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d101      	bne.n	80024dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	; 0x28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e2b3      	b.n	8002a74 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a8b      	ldr	r2, [pc, #556]	; (8002748 <HAL_ADC_Init+0x25c>)
 800251a:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002520:	2b00      	cmp	r3, #0
 8002522:	d109      	bne.n	8002538 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7fe ff19 	bl	800135c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff5f 	bl	8002400 <LL_ADC_IsDeepPowerDownEnabled>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d004      	beq.n	8002552 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff45 	bl	80023dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ff7a 	bl	8002450 <LL_ADC_IsInternalRegulatorEnabled>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d115      	bne.n	800258e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff ff5e 	bl	8002428 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800256c:	4b77      	ldr	r3, [pc, #476]	; (800274c <HAL_ADC_Init+0x260>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	099b      	lsrs	r3, r3, #6
 8002572:	4a77      	ldr	r2, [pc, #476]	; (8002750 <HAL_ADC_Init+0x264>)
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	099b      	lsrs	r3, r3, #6
 800257a:	3301      	adds	r3, #1
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002580:	e002      	b.n	8002588 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	3b01      	subs	r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f9      	bne.n	8002582 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff ff5c 	bl	8002450 <LL_ADC_IsInternalRegulatorEnabled>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10e      	bne.n	80025bc <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025a2:	f043 0210 	orr.w	r2, r3, #16
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025ae:	f043 0201 	orr.w	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff6c 	bl	800249e <LL_ADC_REG_IsConversionOngoing>
 80025c6:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025cc:	f003 0310 	and.w	r3, r3, #16
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f040 8244 	bne.w	8002a5e <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f040 8240 	bne.w	8002a5e <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025e2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025e6:	f043 0202 	orr.w	r2, r3, #2
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff ff40 	bl	8002478 <LL_ADC_IsEnabled>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d140      	bne.n	8002680 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a51      	ldr	r2, [pc, #324]	; (8002748 <HAL_ADC_Init+0x25c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d028      	beq.n	800265a <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a51      	ldr	r2, [pc, #324]	; (8002754 <HAL_ADC_Init+0x268>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d109      	bne.n	8002626 <HAL_ADC_Init+0x13a>
 8002612:	4850      	ldr	r0, [pc, #320]	; (8002754 <HAL_ADC_Init+0x268>)
 8002614:	f7ff ff30 	bl	8002478 <LL_ADC_IsEnabled>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	bf0c      	ite	eq
 800261e:	2301      	moveq	r3, #1
 8002620:	2300      	movne	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	e008      	b.n	8002638 <HAL_ADC_Init+0x14c>
 8002626:	4848      	ldr	r0, [pc, #288]	; (8002748 <HAL_ADC_Init+0x25c>)
 8002628:	f7ff ff26 	bl	8002478 <LL_ADC_IsEnabled>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	bf0c      	ite	eq
 8002632:	2301      	moveq	r3, #1
 8002634:	2300      	movne	r3, #0
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d021      	beq.n	8002680 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a44      	ldr	r2, [pc, #272]	; (8002754 <HAL_ADC_Init+0x268>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <HAL_ADC_Init+0x15e>
 8002646:	4a44      	ldr	r2, [pc, #272]	; (8002758 <HAL_ADC_Init+0x26c>)
 8002648:	e000      	b.n	800264c <HAL_ADC_Init+0x160>
 800264a:	4a44      	ldr	r2, [pc, #272]	; (800275c <HAL_ADC_Init+0x270>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	4619      	mov	r1, r3
 8002652:	4610      	mov	r0, r2
 8002654:	f7ff fe4c 	bl	80022f0 <LL_ADC_SetCommonClock>
 8002658:	e012      	b.n	8002680 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	4619      	mov	r1, r3
 8002664:	4610      	mov	r0, r2
 8002666:	f7ff fe57 	bl	8002318 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800266a:	4b3c      	ldr	r3, [pc, #240]	; (800275c <HAL_ADC_Init+0x270>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800267a:	4938      	ldr	r1, [pc, #224]	; (800275c <HAL_ADC_Init+0x270>)
 800267c:	4313      	orrs	r3, r2
 800267e:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a30      	ldr	r2, [pc, #192]	; (8002748 <HAL_ADC_Init+0x25c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d010      	beq.n	80026ac <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002690:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002696:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800269c:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80026a4:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80026a6:	4313      	orrs	r3, r2
 80026a8:	623b      	str	r3, [r7, #32]
 80026aa:	e030      	b.n	800270e <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	7f1b      	ldrb	r3, [r3, #28]
 80026b0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026b8:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026ba:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026c0:	2a00      	cmp	r2, #0
 80026c2:	d002      	beq.n	80026ca <HAL_ADC_Init+0x1de>
 80026c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026c8:	e000      	b.n	80026cc <HAL_ADC_Init+0x1e0>
 80026ca:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80026cc:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80026d2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	da04      	bge.n	80026e6 <HAL_ADC_Init+0x1fa>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026e4:	e001      	b.n	80026ea <HAL_ADC_Init+0x1fe>
 80026e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 80026ea:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4918      	ldr	r1, [pc, #96]	; (8002754 <HAL_ADC_Init+0x268>)
 80026f2:	428b      	cmp	r3, r1
 80026f4:	d103      	bne.n	80026fe <HAL_ADC_Init+0x212>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026fc:	e003      	b.n	8002706 <HAL_ADC_Init+0x21a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002704:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002706:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002708:	6a3a      	ldr	r2, [r7, #32]
 800270a:	4313      	orrs	r3, r2
 800270c:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002714:	2b01      	cmp	r3, #1
 8002716:	d12f      	bne.n	8002778 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <HAL_ADC_Init+0x25c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d007      	beq.n	8002732 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	3b01      	subs	r3, #1
 8002728:	045b      	lsls	r3, r3, #17
 800272a:	6a3a      	ldr	r2, [r7, #32]
 800272c:	4313      	orrs	r3, r2
 800272e:	623b      	str	r3, [r7, #32]
 8002730:	e022      	b.n	8002778 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002738:	2b00      	cmp	r3, #0
 800273a:	d111      	bne.n	8002760 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002742:	623b      	str	r3, [r7, #32]
 8002744:	e018      	b.n	8002778 <HAL_ADC_Init+0x28c>
 8002746:	bf00      	nop
 8002748:	46021000 	.word	0x46021000
 800274c:	20000000 	.word	0x20000000
 8002750:	053e2d63 	.word	0x053e2d63
 8002754:	42028000 	.word	0x42028000
 8002758:	42028308 	.word	0x42028308
 800275c:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002764:	f043 0220 	orr.w	r2, r3, #32
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002770:	f043 0201 	orr.w	r2, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a92      	ldr	r2, [pc, #584]	; (80029c8 <HAL_ADC_Init+0x4dc>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d018      	beq.n	80027b4 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002786:	2b00      	cmp	r3, #0
 8002788:	d009      	beq.n	800279e <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002796:	4313      	orrs	r3, r2
 8002798:	6a3a      	ldr	r2, [r7, #32]
 800279a:	4313      	orrs	r3, r2
 800279c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	4b89      	ldr	r3, [pc, #548]	; (80029cc <HAL_ADC_Init+0x4e0>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	6a39      	ldr	r1, [r7, #32]
 80027ae:	430b      	orrs	r3, r1
 80027b0:	60d3      	str	r3, [r2, #12]
 80027b2:	e031      	b.n	8002818 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d009      	beq.n	80027d0 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c0:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c8:	4313      	orrs	r3, r2
 80027ca:	6a3a      	ldr	r2, [r7, #32]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	4b7e      	ldr	r3, [pc, #504]	; (80029d0 <HAL_ADC_Init+0x4e4>)
 80027d8:	4013      	ands	r3, r2
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	6a39      	ldr	r1, [r7, #32]
 80027e0:	430b      	orrs	r3, r1
 80027e2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d008      	beq.n	80027fe <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1a      	ldr	r2, [r3, #32]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002802:	2b00      	cmp	r3, #0
 8002804:	d008      	beq.n	8002818 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a6a      	ldr	r2, [pc, #424]	; (80029c8 <HAL_ADC_Init+0x4dc>)
 800281e:	4293      	cmp	r3, r2
 8002820:	f000 8093 	beq.w	800294a <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fe38 	bl	800249e <LL_ADC_REG_IsConversionOngoing>
 800282e:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fe45 	bl	80024c4 <LL_ADC_INJ_IsConversionOngoing>
 800283a:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d161      	bne.n	8002906 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d15e      	bne.n	8002906 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	7f1b      	ldrb	r3, [r3, #28]
 800284c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4960      	ldr	r1, [pc, #384]	; (80029d4 <HAL_ADC_Init+0x4e8>)
 8002854:	428b      	cmp	r3, r1
 8002856:	d102      	bne.n	800285e <HAL_ADC_Init+0x372>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285c:	e002      	b.n	8002864 <HAL_ADC_Init+0x378>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002862:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002864:	4313      	orrs	r3, r2
 8002866:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002872:	f023 0303 	bic.w	r3, r3, #3
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	6a39      	ldr	r1, [r7, #32]
 800287c:	430b      	orrs	r3, r1
 800287e:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d007      	beq.n	8002898 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4619      	mov	r1, r3
 8002892:	4610      	mov	r0, r2
 8002894:	f7ff fd60 	bl	8002358 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d11e      	bne.n	80028e0 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a6:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	691a      	ldr	r2, [r3, #16]
 80028ae:	4b4a      	ldr	r3, [pc, #296]	; (80029d8 <HAL_ADC_Init+0x4ec>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80028b6:	0411      	lsls	r1, r2, #16
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80028bc:	4311      	orrs	r1, r2
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80028c2:	4311      	orrs	r1, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80028c8:	4311      	orrs	r1, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028ce:	0892      	lsrs	r2, r2, #2
 80028d0:	430a      	orrs	r2, r1
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0201 	orr.w	r2, r2, #1
 80028dc:	611a      	str	r2, [r3, #16]
 80028de:	e007      	b.n	80028f0 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d10c      	bne.n	8002928 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	f023 010f 	bic.w	r1, r3, #15
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	1e5a      	subs	r2, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	631a      	str	r2, [r3, #48]	; 0x30
 8002926:	e007      	b.n	8002938 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 020f 	bic.w	r2, r2, #15
 8002936:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800293c:	f023 0303 	bic.w	r3, r3, #3
 8002940:	f043 0201 	orr.w	r2, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002948:	e092      	b.n	8002a70 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002950:	2b01      	cmp	r3, #1
 8002952:	d111      	bne.n	8002978 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800295c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002962:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002968:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	4313      	orrs	r3, r2
 800296e:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691a      	ldr	r2, [r3, #16]
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <HAL_ADC_Init+0x4f0>)
 8002980:	4013      	ands	r3, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	69f9      	ldr	r1, [r7, #28]
 8002988:	430b      	orrs	r3, r1
 800298a:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6818      	ldr	r0, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002994:	461a      	mov	r2, r3
 8002996:	2100      	movs	r1, #0
 8002998:	f7ff fd01 	bl	800239e <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a4:	461a      	mov	r2, r3
 80029a6:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 80029aa:	f7ff fcf8 	bl	800239e <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d114      	bne.n	80029e0 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f062 020f 	orn	r2, r2, #15
 80029c4:	629a      	str	r2, [r3, #40]	; 0x28
 80029c6:	e024      	b.n	8002a12 <HAL_ADC_Init+0x526>
 80029c8:	46021000 	.word	0x46021000
 80029cc:	fff0c013 	.word	0xfff0c013
 80029d0:	ffde800d 	.word	0xffde800d
 80029d4:	42028000 	.word	0x42028000
 80029d8:	fc00f81e 	.word	0xfc00f81e
 80029dc:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029e8:	d113      	bne.n	8002a12 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	3b01      	subs	r3, #1
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	f003 031c 	and.w	r3, r3, #28
 80029fc:	f06f 020f 	mvn.w	r2, #15
 8002a00:	fa02 f103 	lsl.w	r1, r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <HAL_ADC_Init+0x590>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	6a3a      	ldr	r2, [r7, #32]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d10b      	bne.n	8002a3a <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a2c:	f023 0303 	bic.w	r3, r3, #3
 8002a30:	f043 0201 	orr.w	r2, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002a38:	e01a      	b.n	8002a70 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a3e:	f023 0312 	bic.w	r3, r3, #18
 8002a42:	f043 0210 	orr.w	r2, r3, #16
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a4e:	f043 0201 	orr.w	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002a5c:	e008      	b.n	8002a70 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a62:	f043 0210 	orr.w	r2, r3, #16
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8002a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3728      	adds	r7, #40	; 0x28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	833ffff3 	.word	0x833ffff3

08002a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab2:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	60d3      	str	r3, [r2, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	0a1b      	lsrs	r3, r3, #8
 8002ad2:	f003 0307 	and.w	r3, r3, #7
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	6039      	str	r1, [r7, #0]
 8002aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	db0a      	blt.n	8002b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	490c      	ldr	r1, [pc, #48]	; (8002b30 <__NVIC_SetPriority+0x4c>)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	0112      	lsls	r2, r2, #4
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	440b      	add	r3, r1
 8002b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b0c:	e00a      	b.n	8002b24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	4908      	ldr	r1, [pc, #32]	; (8002b34 <__NVIC_SetPriority+0x50>)
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	3b04      	subs	r3, #4
 8002b1c:	0112      	lsls	r2, r2, #4
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	440b      	add	r3, r1
 8002b22:	761a      	strb	r2, [r3, #24]
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000e100 	.word	0xe000e100
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b089      	sub	sp, #36	; 0x24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f1c3 0307 	rsb	r3, r3, #7
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	bf28      	it	cs
 8002b56:	2304      	movcs	r3, #4
 8002b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	2b06      	cmp	r3, #6
 8002b60:	d902      	bls.n	8002b68 <NVIC_EncodePriority+0x30>
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3b03      	subs	r3, #3
 8002b66:	e000      	b.n	8002b6a <NVIC_EncodePriority+0x32>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43da      	mvns	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b80:	f04f 31ff 	mov.w	r1, #4294967295
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8a:	43d9      	mvns	r1, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b90:	4313      	orrs	r3, r2
         );
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3724      	adds	r7, #36	; 0x24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bb0:	d301      	bcc.n	8002bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e00f      	b.n	8002bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bb6:	4a0a      	ldr	r2, [pc, #40]	; (8002be0 <SysTick_Config+0x40>)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bbe:	210f      	movs	r1, #15
 8002bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc4:	f7ff ff8e 	bl	8002ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <SysTick_Config+0x40>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bce:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <SysTick_Config+0x40>)
 8002bd0:	2207      	movs	r2, #7
 8002bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	e000e010 	.word	0xe000e010

08002be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff ff47 	bl	8002a80 <__NVIC_SetPriorityGrouping>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b086      	sub	sp, #24
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	4603      	mov	r3, r0
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	607a      	str	r2, [r7, #4]
 8002c06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c08:	f7ff ff5e 	bl	8002ac8 <__NVIC_GetPriorityGrouping>
 8002c0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	6978      	ldr	r0, [r7, #20]
 8002c14:	f7ff ff90 	bl	8002b38 <NVIC_EncodePriority>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ff5f 	bl	8002ae4 <__NVIC_SetPriority>
}
 8002c26:	bf00      	nop
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff ffb2 	bl	8002ba0 <SysTick_Config>
 8002c3c:	4603      	mov	r3, r0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b089      	sub	sp, #36	; 0x24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002c5a:	e1ba      	b.n	8002fd2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	2101      	movs	r1, #1
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	fa01 f303 	lsl.w	r3, r1, r3
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 81aa 	beq.w	8002fcc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a55      	ldr	r2, [pc, #340]	; (8002dd0 <HAL_GPIO_Init+0x188>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d15d      	bne.n	8002d3c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002c86:	2201      	movs	r2, #1
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	4013      	ands	r3, r2
 8002c94:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 0201 	and.w	r2, r3, #1
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	69fa      	ldr	r2, [r7, #28]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69fa      	ldr	r2, [r7, #28]
 8002cae:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002cb0:	4a48      	ldr	r2, [pc, #288]	; (8002dd4 <HAL_GPIO_Init+0x18c>)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002cb8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002cba:	4a46      	ldr	r2, [pc, #280]	; (8002dd4 <HAL_GPIO_Init+0x18c>)
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	08da      	lsrs	r2, r3, #3
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	3208      	adds	r2, #8
 8002cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	220f      	movs	r2, #15
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	69fa      	ldr	r2, [r7, #28]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	220b      	movs	r2, #11
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	08da      	lsrs	r2, r3, #3
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	3208      	adds	r2, #8
 8002d06:	69f9      	ldr	r1, [r7, #28]
 8002d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	2203      	movs	r2, #3
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69fa      	ldr	r2, [r7, #28]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	2202      	movs	r2, #2
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	69fa      	ldr	r2, [r7, #28]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	e067      	b.n	8002e0c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_Init+0x104>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b12      	cmp	r3, #18
 8002d4a:	d145      	bne.n	8002dd8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	08da      	lsrs	r2, r3, #3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3208      	adds	r2, #8
 8002d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d58:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	220f      	movs	r2, #15
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	f003 020f 	and.w	r2, r3, #15
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69fa      	ldr	r2, [r7, #28]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	08da      	lsrs	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3208      	adds	r2, #8
 8002d92:	69f9      	ldr	r1, [r7, #28]
 8002d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	2203      	movs	r2, #3
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69fa      	ldr	r2, [r7, #28]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 0203 	and.w	r2, r3, #3
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69fa      	ldr	r2, [r7, #28]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	69fa      	ldr	r2, [r7, #28]
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	e01e      	b.n	8002e0c <HAL_GPIO_Init+0x1c4>
 8002dce:	bf00      	nop
 8002dd0:	46020000 	.word	0x46020000
 8002dd4:	0800baa0 	.word	0x0800baa0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	2203      	movs	r2, #3
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69fa      	ldr	r2, [r7, #28]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0203 	and.w	r2, r3, #3
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	69fa      	ldr	r2, [r7, #28]
 8002e0a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d00b      	beq.n	8002e2c <HAL_GPIO_Init+0x1e4>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d007      	beq.n	8002e2c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e20:	2b11      	cmp	r3, #17
 8002e22:	d003      	beq.n	8002e2c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b12      	cmp	r3, #18
 8002e2a:	d130      	bne.n	8002e8e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	2203      	movs	r2, #3
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69fa      	ldr	r2, [r7, #28]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002e62:	2201      	movs	r2, #1
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	69fa      	ldr	r2, [r7, #28]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	091b      	lsrs	r3, r3, #4
 8002e78:	f003 0201 	and.w	r2, r3, #1
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	69fa      	ldr	r2, [r7, #28]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	69fa      	ldr	r2, [r7, #28]
 8002e8c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d017      	beq.n	8002ec6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69fa      	ldr	r2, [r7, #28]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	69fa      	ldr	r2, [r7, #28]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d07c      	beq.n	8002fcc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002ed2:	4a47      	ldr	r2, [pc, #284]	; (8002ff0 <HAL_GPIO_Init+0x3a8>)
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	089b      	lsrs	r3, r3, #2
 8002ed8:	3318      	adds	r3, #24
 8002eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ede:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	220f      	movs	r2, #15
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	0a9a      	lsrs	r2, r3, #10
 8002efa:	4b3e      	ldr	r3, [pc, #248]	; (8002ff4 <HAL_GPIO_Init+0x3ac>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	f002 0203 	and.w	r2, r2, #3
 8002f04:	00d2      	lsls	r2, r2, #3
 8002f06:	4093      	lsls	r3, r2
 8002f08:	69fa      	ldr	r2, [r7, #28]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002f0e:	4938      	ldr	r1, [pc, #224]	; (8002ff0 <HAL_GPIO_Init+0x3a8>)
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	089b      	lsrs	r3, r3, #2
 8002f14:	3318      	adds	r3, #24
 8002f16:	69fa      	ldr	r2, [r7, #28]
 8002f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002f1c:	4b34      	ldr	r3, [pc, #208]	; (8002ff0 <HAL_GPIO_Init+0x3a8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002f38:	69fa      	ldr	r2, [r7, #28]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002f40:	4a2b      	ldr	r2, [pc, #172]	; (8002ff0 <HAL_GPIO_Init+0x3a8>)
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002f46:	4b2a      	ldr	r3, [pc, #168]	; (8002ff0 <HAL_GPIO_Init+0x3a8>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	4013      	ands	r3, r2
 8002f54:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002f6a:	4a21      	ldr	r2, [pc, #132]	; (8002ff0 <HAL_GPIO_Init+0x3a8>)
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002f70:	4b1f      	ldr	r3, [pc, #124]	; (8002ff0 <HAL_GPIO_Init+0x3a8>)
 8002f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f76:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002f96:	4a16      	ldr	r2, [pc, #88]	; (8002ff0 <HAL_GPIO_Init+0x3a8>)
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002f9e:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <HAL_GPIO_Init+0x3a8>)
 8002fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fa4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002fc4:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <HAL_GPIO_Init+0x3a8>)
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f47f ae3d 	bne.w	8002c5c <HAL_GPIO_Init+0x14>
  }
}
 8002fe2:	bf00      	nop
 8002fe4:	bf00      	nop
 8002fe6:	3724      	adds	r7, #36	; 0x24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	46022000 	.word	0x46022000
 8002ff4:	002f7f7f 	.word	0x002f7f7f

08002ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	887b      	ldrh	r3, [r7, #2]
 800300a:	4013      	ands	r3, r2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
 8003014:	e001      	b.n	800301a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003016:	2300      	movs	r3, #0
 8003018:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 800301a:	7bfb      	ldrb	r3, [r7, #15]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	807b      	strh	r3, [r7, #2]
 8003034:	4613      	mov	r3, r2
 8003036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003038:	787b      	ldrb	r3, [r7, #1]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800303e:	887a      	ldrh	r2, [r7, #2]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003044:	e002      	b.n	800304c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003046:	887a      	ldrh	r2, [r7, #2]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800306a:	887a      	ldrh	r2, [r7, #2]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4013      	ands	r3, r2
 8003070:	041a      	lsls	r2, r3, #16
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	43d9      	mvns	r1, r3
 8003076:	887b      	ldrh	r3, [r7, #2]
 8003078:	400b      	ands	r3, r1
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	619a      	str	r2, [r3, #24]
}
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
 80030a8:	e007      	b.n	80030ba <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80030aa:	4b07      	ldr	r3, [pc, #28]	; (80030c8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 0204 	bic.w	r2, r3, #4
 80030b2:	4905      	ldr	r1, [pc, #20]	; (80030c8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	40030400 	.word	0x40030400

080030cc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_ICACHE_Enable+0x1c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <HAL_ICACHE_Enable+0x1c>)
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	40030400 	.word	0x40030400

080030ec <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80030f4:	4b39      	ldr	r3, [pc, #228]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80030f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030fc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	429a      	cmp	r2, r3
 8003104:	d10b      	bne.n	800311e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800310c:	d905      	bls.n	800311a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800310e:	4b33      	ldr	r3, [pc, #204]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	4a32      	ldr	r2, [pc, #200]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003118:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	e057      	b.n	80031ce <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003124:	d90a      	bls.n	800313c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003126:	4b2d      	ldr	r3, [pc, #180]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4313      	orrs	r3, r2
 8003132:	4a2a      	ldr	r2, [pc, #168]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003138:	60d3      	str	r3, [r2, #12]
 800313a:	e007      	b.n	800314c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800313c:	4b27      	ldr	r3, [pc, #156]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003144:	4925      	ldr	r1, [pc, #148]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4313      	orrs	r3, r2
 800314a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800314c:	4b24      	ldr	r3, [pc, #144]	; (80031e0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a24      	ldr	r2, [pc, #144]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	099b      	lsrs	r3, r3, #6
 8003158:	2232      	movs	r2, #50	; 0x32
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	4a21      	ldr	r2, [pc, #132]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003160:	fba2 2303 	umull	r2, r3, r2, r3
 8003164:	099b      	lsrs	r3, r3, #6
 8003166:	3301      	adds	r3, #1
 8003168:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800316a:	e002      	b.n	8003172 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	3b01      	subs	r3, #1
 8003170:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003172:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d102      	bne.n	8003184 <HAL_PWREx_ControlVoltageScaling+0x98>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f3      	bne.n	800316c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d01b      	beq.n	80031c2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800318a:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a15      	ldr	r2, [pc, #84]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003190:	fba2 2303 	umull	r2, r3, r2, r3
 8003194:	099b      	lsrs	r3, r3, #6
 8003196:	2232      	movs	r2, #50	; 0x32
 8003198:	fb02 f303 	mul.w	r3, r2, r3
 800319c:	4a11      	ldr	r2, [pc, #68]	; (80031e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	099b      	lsrs	r3, r3, #6
 80031a4:	3301      	adds	r3, #1
 80031a6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80031a8:	e002      	b.n	80031b0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	3b01      	subs	r3, #1
 80031ae:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80031b0:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80031b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d102      	bne.n	80031c2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f3      	bne.n	80031aa <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e000      	b.n	80031ce <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	46020800 	.word	0x46020800
 80031e0:	20000000 	.word	0x20000000
 80031e4:	10624dd3 	.word	0x10624dd3

080031e8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80031ec:	4b04      	ldr	r3, [pc, #16]	; (8003200 <HAL_PWREx_GetVoltageRange+0x18>)
 80031ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	46020800 	.word	0x46020800

08003204 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800320c:	4b22      	ldr	r3, [pc, #136]	; (8003298 <HAL_PWREx_ConfigSupply+0x94>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a22      	ldr	r2, [pc, #136]	; (800329c <HAL_PWREx_ConfigSupply+0x98>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	099b      	lsrs	r3, r3, #6
 8003218:	2232      	movs	r2, #50	; 0x32
 800321a:	fb02 f303 	mul.w	r3, r2, r3
 800321e:	4a1f      	ldr	r2, [pc, #124]	; (800329c <HAL_PWREx_ConfigSupply+0x98>)
 8003220:	fba2 2303 	umull	r2, r3, r2, r3
 8003224:	099b      	lsrs	r3, r3, #6
 8003226:	3301      	adds	r3, #1
 8003228:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d113      	bne.n	8003258 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003230:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4a1a      	ldr	r2, [pc, #104]	; (80032a0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003236:	f023 0302 	bic.w	r3, r3, #2
 800323a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800323c:	e002      	b.n	8003244 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3b01      	subs	r3, #1
 8003242:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003244:	4b16      	ldr	r3, [pc, #88]	; (80032a0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b02      	cmp	r3, #2
 800324e:	d116      	bne.n	800327e <HAL_PWREx_ConfigSupply+0x7a>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f3      	bne.n	800323e <HAL_PWREx_ConfigSupply+0x3a>
 8003256:	e012      	b.n	800327e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003258:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <HAL_PWREx_ConfigSupply+0x9c>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4a10      	ldr	r2, [pc, #64]	; (80032a0 <HAL_PWREx_ConfigSupply+0x9c>)
 800325e:	f043 0302 	orr.w	r3, r3, #2
 8003262:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003264:	e002      	b.n	800326c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	3b01      	subs	r3, #1
 800326a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800326c:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <HAL_PWREx_ConfigSupply+0x9c>)
 800326e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d102      	bne.n	800327e <HAL_PWREx_ConfigSupply+0x7a>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f3      	bne.n	8003266 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e000      	b.n	800328a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	20000000 	.word	0x20000000
 800329c:	10624dd3 	.word	0x10624dd3
 80032a0:	46020800 	.word	0x46020800

080032a4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80032a8:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	4a04      	ldr	r2, [pc, #16]	; (80032c0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80032ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032b2:	6113      	str	r3, [r2, #16]
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	46020800 	.word	0x46020800

080032c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08e      	sub	sp, #56	; 0x38
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80032cc:	2300      	movs	r3, #0
 80032ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d102      	bne.n	80032de <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	f000 bec8 	b.w	800406e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032de:	4b99      	ldr	r3, [pc, #612]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032e8:	4b96      	ldr	r3, [pc, #600]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0310 	and.w	r3, r3, #16
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 816c 	beq.w	80035d8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003302:	2b00      	cmp	r3, #0
 8003304:	d007      	beq.n	8003316 <HAL_RCC_OscConfig+0x52>
 8003306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003308:	2b0c      	cmp	r3, #12
 800330a:	f040 80de 	bne.w	80034ca <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003310:	2b01      	cmp	r3, #1
 8003312:	f040 80da 	bne.w	80034ca <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d102      	bne.n	8003324 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	f000 bea5 	b.w	800406e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003328:	4b86      	ldr	r3, [pc, #536]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d004      	beq.n	800333e <HAL_RCC_OscConfig+0x7a>
 8003334:	4b83      	ldr	r3, [pc, #524]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800333c:	e005      	b.n	800334a <HAL_RCC_OscConfig+0x86>
 800333e:	4b81      	ldr	r3, [pc, #516]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003340:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003344:	041b      	lsls	r3, r3, #16
 8003346:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800334a:	4293      	cmp	r3, r2
 800334c:	d255      	bcs.n	80033fa <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800334e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10a      	bne.n	800336a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	4618      	mov	r0, r3
 800335a:	f001 f9df 	bl	800471c <RCC_SetFlashLatencyFromMSIRange>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	f000 be82 	b.w	800406e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800336a:	4b76      	ldr	r3, [pc, #472]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	4a75      	ldr	r2, [pc, #468]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003370:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003374:	6093      	str	r3, [r2, #8]
 8003376:	4b73      	ldr	r3, [pc, #460]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	4970      	ldr	r1, [pc, #448]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003384:	4313      	orrs	r3, r2
 8003386:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003390:	d309      	bcc.n	80033a6 <HAL_RCC_OscConfig+0xe2>
 8003392:	4b6c      	ldr	r3, [pc, #432]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f023 021f 	bic.w	r2, r3, #31
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	4969      	ldr	r1, [pc, #420]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60cb      	str	r3, [r1, #12]
 80033a4:	e07e      	b.n	80034a4 <HAL_RCC_OscConfig+0x1e0>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	da0a      	bge.n	80033c4 <HAL_RCC_OscConfig+0x100>
 80033ae:	4b65      	ldr	r3, [pc, #404]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	015b      	lsls	r3, r3, #5
 80033bc:	4961      	ldr	r1, [pc, #388]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	60cb      	str	r3, [r1, #12]
 80033c2:	e06f      	b.n	80034a4 <HAL_RCC_OscConfig+0x1e0>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033cc:	d30a      	bcc.n	80033e4 <HAL_RCC_OscConfig+0x120>
 80033ce:	4b5d      	ldr	r3, [pc, #372]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	029b      	lsls	r3, r3, #10
 80033dc:	4959      	ldr	r1, [pc, #356]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	60cb      	str	r3, [r1, #12]
 80033e2:	e05f      	b.n	80034a4 <HAL_RCC_OscConfig+0x1e0>
 80033e4:	4b57      	ldr	r3, [pc, #348]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	03db      	lsls	r3, r3, #15
 80033f2:	4954      	ldr	r1, [pc, #336]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60cb      	str	r3, [r1, #12]
 80033f8:	e054      	b.n	80034a4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80033fa:	4b52      	ldr	r3, [pc, #328]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	4a51      	ldr	r2, [pc, #324]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003400:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003404:	6093      	str	r3, [r2, #8]
 8003406:	4b4f      	ldr	r3, [pc, #316]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	494c      	ldr	r1, [pc, #304]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003414:	4313      	orrs	r3, r2
 8003416:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003420:	d309      	bcc.n	8003436 <HAL_RCC_OscConfig+0x172>
 8003422:	4b48      	ldr	r3, [pc, #288]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f023 021f 	bic.w	r2, r3, #31
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	4945      	ldr	r1, [pc, #276]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003430:	4313      	orrs	r3, r2
 8003432:	60cb      	str	r3, [r1, #12]
 8003434:	e028      	b.n	8003488 <HAL_RCC_OscConfig+0x1c4>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	2b00      	cmp	r3, #0
 800343c:	da0a      	bge.n	8003454 <HAL_RCC_OscConfig+0x190>
 800343e:	4b41      	ldr	r3, [pc, #260]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	015b      	lsls	r3, r3, #5
 800344c:	493d      	ldr	r1, [pc, #244]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 800344e:	4313      	orrs	r3, r2
 8003450:	60cb      	str	r3, [r1, #12]
 8003452:	e019      	b.n	8003488 <HAL_RCC_OscConfig+0x1c4>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345c:	d30a      	bcc.n	8003474 <HAL_RCC_OscConfig+0x1b0>
 800345e:	4b39      	ldr	r3, [pc, #228]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	029b      	lsls	r3, r3, #10
 800346c:	4935      	ldr	r1, [pc, #212]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 800346e:	4313      	orrs	r3, r2
 8003470:	60cb      	str	r3, [r1, #12]
 8003472:	e009      	b.n	8003488 <HAL_RCC_OscConfig+0x1c4>
 8003474:	4b33      	ldr	r3, [pc, #204]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	03db      	lsls	r3, r3, #15
 8003482:	4930      	ldr	r1, [pc, #192]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003484:	4313      	orrs	r3, r2
 8003486:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	4618      	mov	r0, r3
 8003494:	f001 f942 	bl	800471c <RCC_SetFlashLatencyFromMSIRange>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	f000 bde5 	b.w	800406e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80034a4:	f001 f8e4 	bl	8004670 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034a8:	4b27      	ldr	r3, [pc, #156]	; (8003548 <HAL_RCC_OscConfig+0x284>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fe fea5 	bl	80021fc <HAL_InitTick>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80034b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 808a 	beq.w	80035d6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80034c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034c6:	f000 bdd2 	b.w	800406e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d066      	beq.n	80035a0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80034d2:	4b1c      	ldr	r3, [pc, #112]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a1b      	ldr	r2, [pc, #108]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80034de:	f7fe fed7 	bl	8002290 <HAL_GetTick>
 80034e2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80034e4:	e009      	b.n	80034fa <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034e6:	f7fe fed3 	bl	8002290 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d902      	bls.n	80034fa <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	f000 bdba 	b.w	800406e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80034fa:	4b12      	ldr	r3, [pc, #72]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0ef      	beq.n	80034e6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003506:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	4a0e      	ldr	r2, [pc, #56]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 800350c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003510:	6093      	str	r3, [r2, #8]
 8003512:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	4909      	ldr	r1, [pc, #36]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003520:	4313      	orrs	r3, r2
 8003522:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800352c:	d30e      	bcc.n	800354c <HAL_RCC_OscConfig+0x288>
 800352e:	4b05      	ldr	r3, [pc, #20]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f023 021f 	bic.w	r2, r3, #31
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	4902      	ldr	r1, [pc, #8]	; (8003544 <HAL_RCC_OscConfig+0x280>)
 800353c:	4313      	orrs	r3, r2
 800353e:	60cb      	str	r3, [r1, #12]
 8003540:	e04a      	b.n	80035d8 <HAL_RCC_OscConfig+0x314>
 8003542:	bf00      	nop
 8003544:	46020c00 	.word	0x46020c00
 8003548:	20000004 	.word	0x20000004
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	2b00      	cmp	r3, #0
 8003552:	da0a      	bge.n	800356a <HAL_RCC_OscConfig+0x2a6>
 8003554:	4b98      	ldr	r3, [pc, #608]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	015b      	lsls	r3, r3, #5
 8003562:	4995      	ldr	r1, [pc, #596]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003564:	4313      	orrs	r3, r2
 8003566:	60cb      	str	r3, [r1, #12]
 8003568:	e036      	b.n	80035d8 <HAL_RCC_OscConfig+0x314>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003572:	d30a      	bcc.n	800358a <HAL_RCC_OscConfig+0x2c6>
 8003574:	4b90      	ldr	r3, [pc, #576]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	029b      	lsls	r3, r3, #10
 8003582:	498d      	ldr	r1, [pc, #564]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003584:	4313      	orrs	r3, r2
 8003586:	60cb      	str	r3, [r1, #12]
 8003588:	e026      	b.n	80035d8 <HAL_RCC_OscConfig+0x314>
 800358a:	4b8b      	ldr	r3, [pc, #556]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	03db      	lsls	r3, r3, #15
 8003598:	4987      	ldr	r1, [pc, #540]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800359a:	4313      	orrs	r3, r2
 800359c:	60cb      	str	r3, [r1, #12]
 800359e:	e01b      	b.n	80035d8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80035a0:	4b85      	ldr	r3, [pc, #532]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a84      	ldr	r2, [pc, #528]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 80035a6:	f023 0301 	bic.w	r3, r3, #1
 80035aa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80035ac:	f7fe fe70 	bl	8002290 <HAL_GetTick>
 80035b0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80035b2:	e009      	b.n	80035c8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035b4:	f7fe fe6c 	bl	8002290 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d902      	bls.n	80035c8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	f000 bd53 	b.w	800406e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80035c8:	4b7b      	ldr	r3, [pc, #492]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1ef      	bne.n	80035b4 <HAL_RCC_OscConfig+0x2f0>
 80035d4:	e000      	b.n	80035d8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80035d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 808b 	beq.w	80036fc <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80035e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d005      	beq.n	80035f8 <HAL_RCC_OscConfig+0x334>
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	2b0c      	cmp	r3, #12
 80035f0:	d109      	bne.n	8003606 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d106      	bne.n	8003606 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d17d      	bne.n	80036fc <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	f000 bd34 	b.w	800406e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800360e:	d106      	bne.n	800361e <HAL_RCC_OscConfig+0x35a>
 8003610:	4b69      	ldr	r3, [pc, #420]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a68      	ldr	r2, [pc, #416]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	e041      	b.n	80036a2 <HAL_RCC_OscConfig+0x3de>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003626:	d112      	bne.n	800364e <HAL_RCC_OscConfig+0x38a>
 8003628:	4b63      	ldr	r3, [pc, #396]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a62      	ldr	r2, [pc, #392]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800362e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	4b60      	ldr	r3, [pc, #384]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a5f      	ldr	r2, [pc, #380]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800363a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	4b5d      	ldr	r3, [pc, #372]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a5c      	ldr	r2, [pc, #368]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	e029      	b.n	80036a2 <HAL_RCC_OscConfig+0x3de>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003656:	d112      	bne.n	800367e <HAL_RCC_OscConfig+0x3ba>
 8003658:	4b57      	ldr	r3, [pc, #348]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a56      	ldr	r2, [pc, #344]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800365e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	4b54      	ldr	r3, [pc, #336]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a53      	ldr	r2, [pc, #332]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800366a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	4b51      	ldr	r3, [pc, #324]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a50      	ldr	r2, [pc, #320]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	e011      	b.n	80036a2 <HAL_RCC_OscConfig+0x3de>
 800367e:	4b4e      	ldr	r3, [pc, #312]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a4d      	ldr	r2, [pc, #308]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	4b4b      	ldr	r3, [pc, #300]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a4a      	ldr	r2, [pc, #296]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003690:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	4b48      	ldr	r3, [pc, #288]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a47      	ldr	r2, [pc, #284]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800369c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80036a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d014      	beq.n	80036d4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80036aa:	f7fe fdf1 	bl	8002290 <HAL_GetTick>
 80036ae:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036b0:	e009      	b.n	80036c6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b2:	f7fe fded 	bl	8002290 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b64      	cmp	r3, #100	; 0x64
 80036be:	d902      	bls.n	80036c6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	f000 bcd4 	b.w	800406e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036c6:	4b3c      	ldr	r3, [pc, #240]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0ef      	beq.n	80036b2 <HAL_RCC_OscConfig+0x3ee>
 80036d2:	e013      	b.n	80036fc <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80036d4:	f7fe fddc 	bl	8002290 <HAL_GetTick>
 80036d8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036da:	e009      	b.n	80036f0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036dc:	f7fe fdd8 	bl	8002290 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b64      	cmp	r3, #100	; 0x64
 80036e8:	d902      	bls.n	80036f0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	f000 bcbf 	b.w	800406e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036f0:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1ef      	bne.n	80036dc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d05f      	beq.n	80037c8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370a:	2b04      	cmp	r3, #4
 800370c:	d005      	beq.n	800371a <HAL_RCC_OscConfig+0x456>
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	2b0c      	cmp	r3, #12
 8003712:	d114      	bne.n	800373e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003716:	2b02      	cmp	r3, #2
 8003718:	d111      	bne.n	800373e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d102      	bne.n	8003728 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	f000 bca3 	b.w	800406e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003728:	4b23      	ldr	r3, [pc, #140]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	041b      	lsls	r3, r3, #16
 8003736:	4920      	ldr	r1, [pc, #128]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003738:	4313      	orrs	r3, r2
 800373a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800373c:	e044      	b.n	80037c8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d024      	beq.n	8003790 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003746:	4b1c      	ldr	r3, [pc, #112]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a1b      	ldr	r2, [pc, #108]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800374c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003750:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003752:	f7fe fd9d 	bl	8002290 <HAL_GetTick>
 8003756:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003758:	e009      	b.n	800376e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800375a:	f7fe fd99 	bl	8002290 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d902      	bls.n	800376e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	f000 bc80 	b.w	800406e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800376e:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0ef      	beq.n	800375a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800377a:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	041b      	lsls	r3, r3, #16
 8003788:	490b      	ldr	r1, [pc, #44]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800378a:	4313      	orrs	r3, r2
 800378c:	610b      	str	r3, [r1, #16]
 800378e:	e01b      	b.n	80037c8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003790:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a08      	ldr	r2, [pc, #32]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003796:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800379a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800379c:	f7fe fd78 	bl	8002290 <HAL_GetTick>
 80037a0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037a2:	e00b      	b.n	80037bc <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a4:	f7fe fd74 	bl	8002290 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d904      	bls.n	80037bc <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	f000 bc5b 	b.w	800406e <HAL_RCC_OscConfig+0xdaa>
 80037b8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037bc:	4baf      	ldr	r3, [pc, #700]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1ed      	bne.n	80037a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 80c8 	beq.w	8003966 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80037d6:	2300      	movs	r3, #0
 80037d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037dc:	4ba7      	ldr	r3, [pc, #668]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 80037de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d111      	bne.n	800380e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ea:	4ba4      	ldr	r3, [pc, #656]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 80037ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f0:	4aa2      	ldr	r2, [pc, #648]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 80037f2:	f043 0304 	orr.w	r3, r3, #4
 80037f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80037fa:	4ba0      	ldr	r3, [pc, #640]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 80037fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003808:	2301      	movs	r3, #1
 800380a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800380e:	4b9c      	ldr	r3, [pc, #624]	; (8003a80 <HAL_RCC_OscConfig+0x7bc>)
 8003810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d119      	bne.n	800384e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800381a:	4b99      	ldr	r3, [pc, #612]	; (8003a80 <HAL_RCC_OscConfig+0x7bc>)
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	4a98      	ldr	r2, [pc, #608]	; (8003a80 <HAL_RCC_OscConfig+0x7bc>)
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003826:	f7fe fd33 	bl	8002290 <HAL_GetTick>
 800382a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800382c:	e009      	b.n	8003842 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800382e:	f7fe fd2f 	bl	8002290 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d902      	bls.n	8003842 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	f000 bc16 	b.w	800406e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003842:	4b8f      	ldr	r3, [pc, #572]	; (8003a80 <HAL_RCC_OscConfig+0x7bc>)
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0ef      	beq.n	800382e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d05f      	beq.n	8003916 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003856:	4b89      	ldr	r3, [pc, #548]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 8003858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800385c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003868:	429a      	cmp	r2, r3
 800386a:	d037      	beq.n	80038dc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d006      	beq.n	8003884 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e3f4      	b.n	800406e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d01b      	beq.n	80038c6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800388e:	4b7b      	ldr	r3, [pc, #492]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 8003890:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003894:	4a79      	ldr	r2, [pc, #484]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 8003896:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800389a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800389e:	f7fe fcf7 	bl	8002290 <HAL_GetTick>
 80038a2:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a6:	f7fe fcf3 	bl	8002290 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b05      	cmp	r3, #5
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e3da      	b.n	800406e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80038b8:	4b70      	ldr	r3, [pc, #448]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 80038ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1ef      	bne.n	80038a6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80038c6:	4b6d      	ldr	r3, [pc, #436]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 80038c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038cc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	4969      	ldr	r1, [pc, #420]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80038dc:	4b67      	ldr	r3, [pc, #412]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 80038de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038e2:	4a66      	ldr	r2, [pc, #408]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 80038e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80038ec:	f7fe fcd0 	bl	8002290 <HAL_GetTick>
 80038f0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f4:	f7fe fccc 	bl	8002290 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b05      	cmp	r3, #5
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e3b3      	b.n	800406e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003906:	4b5d      	ldr	r3, [pc, #372]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 8003908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800390c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0ef      	beq.n	80038f4 <HAL_RCC_OscConfig+0x630>
 8003914:	e01b      	b.n	800394e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003916:	4b59      	ldr	r3, [pc, #356]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 8003918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800391c:	4a57      	ldr	r2, [pc, #348]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 800391e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003922:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003926:	f7fe fcb3 	bl	8002290 <HAL_GetTick>
 800392a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800392e:	f7fe fcaf 	bl	8002290 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b05      	cmp	r3, #5
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e396      	b.n	800406e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003940:	4b4e      	ldr	r3, [pc, #312]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 8003942:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003946:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1ef      	bne.n	800392e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800394e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003952:	2b01      	cmp	r3, #1
 8003954:	d107      	bne.n	8003966 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003956:	4b49      	ldr	r3, [pc, #292]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 8003958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800395c:	4a47      	ldr	r2, [pc, #284]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 800395e:	f023 0304 	bic.w	r3, r3, #4
 8003962:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 8111 	beq.w	8003b96 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003974:	2300      	movs	r3, #0
 8003976:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800397a:	4b40      	ldr	r3, [pc, #256]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 800397c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d111      	bne.n	80039ac <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003988:	4b3c      	ldr	r3, [pc, #240]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 800398a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800398e:	4a3b      	ldr	r2, [pc, #236]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 8003990:	f043 0304 	orr.w	r3, r3, #4
 8003994:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003998:	4b38      	ldr	r3, [pc, #224]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 800399a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80039a6:	2301      	movs	r3, #1
 80039a8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039ac:	4b34      	ldr	r3, [pc, #208]	; (8003a80 <HAL_RCC_OscConfig+0x7bc>)
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d118      	bne.n	80039ea <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80039b8:	4b31      	ldr	r3, [pc, #196]	; (8003a80 <HAL_RCC_OscConfig+0x7bc>)
 80039ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039bc:	4a30      	ldr	r2, [pc, #192]	; (8003a80 <HAL_RCC_OscConfig+0x7bc>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c4:	f7fe fc64 	bl	8002290 <HAL_GetTick>
 80039c8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039cc:	f7fe fc60 	bl	8002290 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e347      	b.n	800406e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039de:	4b28      	ldr	r3, [pc, #160]	; (8003a80 <HAL_RCC_OscConfig+0x7bc>)
 80039e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d01f      	beq.n	8003a36 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d010      	beq.n	8003a24 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a02:	4b1e      	ldr	r3, [pc, #120]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 8003a04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a08:	4a1c      	ldr	r2, [pc, #112]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 8003a0a:	f043 0304 	orr.w	r3, r3, #4
 8003a0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a12:	4b1a      	ldr	r3, [pc, #104]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 8003a14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a18:	4a18      	ldr	r2, [pc, #96]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a22:	e018      	b.n	8003a56 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a24:	4b15      	ldr	r3, [pc, #84]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 8003a26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a2a:	4a14      	ldr	r2, [pc, #80]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a34:	e00f      	b.n	8003a56 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a36:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 8003a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a3c:	4a0f      	ldr	r2, [pc, #60]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a46:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 8003a48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a4c:	4a0b      	ldr	r2, [pc, #44]	; (8003a7c <HAL_RCC_OscConfig+0x7b8>)
 8003a4e:	f023 0304 	bic.w	r3, r3, #4
 8003a52:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d057      	beq.n	8003b0e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003a5e:	f7fe fc17 	bl	8002290 <HAL_GetTick>
 8003a62:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a64:	e00e      	b.n	8003a84 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a66:	f7fe fc13 	bl	8002290 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d905      	bls.n	8003a84 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e2f8      	b.n	800406e <HAL_RCC_OscConfig+0xdaa>
 8003a7c:	46020c00 	.word	0x46020c00
 8003a80:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a84:	4b9c      	ldr	r3, [pc, #624]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003a86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0e9      	beq.n	8003a66 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d01b      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003a9e:	4b96      	ldr	r3, [pc, #600]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003aa4:	4a94      	ldr	r2, [pc, #592]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aaa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003aae:	e00a      	b.n	8003ac6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab0:	f7fe fbee 	bl	8002290 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e2d3      	b.n	800406e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003ac6:	4b8c      	ldr	r3, [pc, #560]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003ac8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ed      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x7ec>
 8003ad4:	e053      	b.n	8003b7e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003ad6:	4b88      	ldr	r3, [pc, #544]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003adc:	4a86      	ldr	r2, [pc, #536]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ae2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ae6:	e00a      	b.n	8003afe <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae8:	f7fe fbd2 	bl	8002290 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e2b7      	b.n	800406e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003afe:	4b7e      	ldr	r3, [pc, #504]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1ed      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x824>
 8003b0c:	e037      	b.n	8003b7e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003b0e:	f7fe fbbf 	bl	8002290 <HAL_GetTick>
 8003b12:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b14:	e00a      	b.n	8003b2c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b16:	f7fe fbbb 	bl	8002290 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e2a0      	b.n	800406e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b2c:	4b72      	ldr	r3, [pc, #456]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003b2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1ed      	bne.n	8003b16 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003b3a:	4b6f      	ldr	r3, [pc, #444]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003b3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d01a      	beq.n	8003b7e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003b48:	4b6b      	ldr	r3, [pc, #428]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003b4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b4e:	4a6a      	ldr	r2, [pc, #424]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b54:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b58:	e00a      	b.n	8003b70 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5a:	f7fe fb99 	bl	8002290 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e27e      	b.n	800406e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b70:	4b61      	ldr	r3, [pc, #388]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003b72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1ed      	bne.n	8003b5a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b7e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d107      	bne.n	8003b96 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b86:	4b5c      	ldr	r3, [pc, #368]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b8c:	4a5a      	ldr	r2, [pc, #360]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003b8e:	f023 0304 	bic.w	r3, r3, #4
 8003b92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d036      	beq.n	8003c10 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d019      	beq.n	8003bde <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003baa:	4b53      	ldr	r3, [pc, #332]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a52      	ldr	r2, [pc, #328]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003bb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bb4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003bb6:	f7fe fb6b 	bl	8002290 <HAL_GetTick>
 8003bba:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bbe:	f7fe fb67 	bl	8002290 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e24e      	b.n	800406e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003bd0:	4b49      	ldr	r3, [pc, #292]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0f0      	beq.n	8003bbe <HAL_RCC_OscConfig+0x8fa>
 8003bdc:	e018      	b.n	8003c10 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003bde:	4b46      	ldr	r3, [pc, #280]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a45      	ldr	r2, [pc, #276]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003be8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003bea:	f7fe fb51 	bl	8002290 <HAL_GetTick>
 8003bee:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bf2:	f7fe fb4d 	bl	8002290 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e234      	b.n	800406e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003c04:	4b3c      	ldr	r3, [pc, #240]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1f0      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d036      	beq.n	8003c8a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d019      	beq.n	8003c58 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003c24:	4b34      	ldr	r3, [pc, #208]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a33      	ldr	r2, [pc, #204]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003c2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c2e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003c30:	f7fe fb2e 	bl	8002290 <HAL_GetTick>
 8003c34:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003c38:	f7fe fb2a 	bl	8002290 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e211      	b.n	800406e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003c4a:	4b2b      	ldr	r3, [pc, #172]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0f0      	beq.n	8003c38 <HAL_RCC_OscConfig+0x974>
 8003c56:	e018      	b.n	8003c8a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003c58:	4b27      	ldr	r3, [pc, #156]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a26      	ldr	r2, [pc, #152]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003c5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c62:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003c64:	f7fe fb14 	bl	8002290 <HAL_GetTick>
 8003c68:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003c6c:	f7fe fb10 	bl	8002290 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e1f7      	b.n	800406e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003c7e:	4b1e      	ldr	r3, [pc, #120]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d07f      	beq.n	8003d96 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d062      	beq.n	8003d64 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003c9e:	4b16      	ldr	r3, [pc, #88]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	4a15      	ldr	r2, [pc, #84]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003ca4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ca8:	6093      	str	r3, [r2, #8]
 8003caa:	4b13      	ldr	r3, [pc, #76]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb6:	4910      	ldr	r1, [pc, #64]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003cc4:	d309      	bcc.n	8003cda <HAL_RCC_OscConfig+0xa16>
 8003cc6:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f023 021f 	bic.w	r2, r3, #31
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	4909      	ldr	r1, [pc, #36]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60cb      	str	r3, [r1, #12]
 8003cd8:	e02a      	b.n	8003d30 <HAL_RCC_OscConfig+0xa6c>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	da0c      	bge.n	8003cfc <HAL_RCC_OscConfig+0xa38>
 8003ce2:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	015b      	lsls	r3, r3, #5
 8003cf0:	4901      	ldr	r1, [pc, #4]	; (8003cf8 <HAL_RCC_OscConfig+0xa34>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60cb      	str	r3, [r1, #12]
 8003cf6:	e01b      	b.n	8003d30 <HAL_RCC_OscConfig+0xa6c>
 8003cf8:	46020c00 	.word	0x46020c00
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d04:	d30a      	bcc.n	8003d1c <HAL_RCC_OscConfig+0xa58>
 8003d06:	4ba1      	ldr	r3, [pc, #644]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	029b      	lsls	r3, r3, #10
 8003d14:	499d      	ldr	r1, [pc, #628]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60cb      	str	r3, [r1, #12]
 8003d1a:	e009      	b.n	8003d30 <HAL_RCC_OscConfig+0xa6c>
 8003d1c:	4b9b      	ldr	r3, [pc, #620]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	03db      	lsls	r3, r3, #15
 8003d2a:	4998      	ldr	r1, [pc, #608]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003d30:	4b96      	ldr	r3, [pc, #600]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a95      	ldr	r2, [pc, #596]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003d36:	f043 0310 	orr.w	r3, r3, #16
 8003d3a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003d3c:	f7fe faa8 	bl	8002290 <HAL_GetTick>
 8003d40:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003d44:	f7fe faa4 	bl	8002290 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e18b      	b.n	800406e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003d56:	4b8d      	ldr	r3, [pc, #564]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0xa80>
 8003d62:	e018      	b.n	8003d96 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003d64:	4b89      	ldr	r3, [pc, #548]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a88      	ldr	r2, [pc, #544]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003d6a:	f023 0310 	bic.w	r3, r3, #16
 8003d6e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003d70:	f7fe fa8e 	bl	8002290 <HAL_GetTick>
 8003d74:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003d78:	f7fe fa8a 	bl	8002290 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e171      	b.n	800406e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003d8a:	4b80      	ldr	r3, [pc, #512]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 8166 	beq.w	800406c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003da0:	2300      	movs	r3, #0
 8003da2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003da6:	4b79      	ldr	r3, [pc, #484]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	2b0c      	cmp	r3, #12
 8003db0:	f000 80f2 	beq.w	8003f98 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	f040 80c5 	bne.w	8003f48 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003dbe:	4b73      	ldr	r3, [pc, #460]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a72      	ldr	r2, [pc, #456]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003dc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dc8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003dca:	f7fe fa61 	bl	8002290 <HAL_GetTick>
 8003dce:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd2:	f7fe fa5d 	bl	8002290 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e144      	b.n	800406e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003de4:	4b69      	ldr	r3, [pc, #420]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f0      	bne.n	8003dd2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df0:	4b66      	ldr	r3, [pc, #408]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d111      	bne.n	8003e22 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003dfe:	4b63      	ldr	r3, [pc, #396]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e04:	4a61      	ldr	r2, [pc, #388]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003e06:	f043 0304 	orr.w	r3, r3, #4
 8003e0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003e0e:	4b5f      	ldr	r3, [pc, #380]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003e22:	4b5b      	ldr	r3, [pc, #364]	; (8003f90 <HAL_RCC_OscConfig+0xccc>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e2e:	d102      	bne.n	8003e36 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003e30:	2301      	movs	r3, #1
 8003e32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003e36:	4b56      	ldr	r3, [pc, #344]	; (8003f90 <HAL_RCC_OscConfig+0xccc>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	4a55      	ldr	r2, [pc, #340]	; (8003f90 <HAL_RCC_OscConfig+0xccc>)
 8003e3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e40:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003e42:	4b52      	ldr	r3, [pc, #328]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e4a:	f023 0303 	bic.w	r3, r3, #3
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e56:	3a01      	subs	r2, #1
 8003e58:	0212      	lsls	r2, r2, #8
 8003e5a:	4311      	orrs	r1, r2
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e60:	430a      	orrs	r2, r1
 8003e62:	494a      	ldr	r1, [pc, #296]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	628b      	str	r3, [r1, #40]	; 0x28
 8003e68:	4b48      	ldr	r3, [pc, #288]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e6c:	4b49      	ldr	r3, [pc, #292]	; (8003f94 <HAL_RCC_OscConfig+0xcd0>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e74:	3a01      	subs	r2, #1
 8003e76:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003e7e:	3a01      	subs	r2, #1
 8003e80:	0252      	lsls	r2, r2, #9
 8003e82:	b292      	uxth	r2, r2
 8003e84:	4311      	orrs	r1, r2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e8a:	3a01      	subs	r2, #1
 8003e8c:	0412      	lsls	r2, r2, #16
 8003e8e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003e92:	4311      	orrs	r1, r2
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003e98:	3a01      	subs	r2, #1
 8003e9a:	0612      	lsls	r2, r2, #24
 8003e9c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	493a      	ldr	r1, [pc, #232]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003ea8:	4b38      	ldr	r3, [pc, #224]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eac:	4a37      	ldr	r2, [pc, #220]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003eae:	f023 0310 	bic.w	r3, r3, #16
 8003eb2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb8:	4a34      	ldr	r2, [pc, #208]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003ebe:	4b33      	ldr	r3, [pc, #204]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec2:	4a32      	ldr	r2, [pc, #200]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003ec4:	f043 0310 	orr.w	r3, r3, #16
 8003ec8:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003eca:	4b30      	ldr	r3, [pc, #192]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ece:	f023 020c 	bic.w	r2, r3, #12
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed6:	492d      	ldr	r1, [pc, #180]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8003edc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d105      	bne.n	8003ef0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003ee4:	4b2a      	ldr	r3, [pc, #168]	; (8003f90 <HAL_RCC_OscConfig+0xccc>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	4a29      	ldr	r2, [pc, #164]	; (8003f90 <HAL_RCC_OscConfig+0xccc>)
 8003eea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eee:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003ef0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d107      	bne.n	8003f08 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003ef8:	4b24      	ldr	r3, [pc, #144]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003efe:	4a23      	ldr	r2, [pc, #140]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003f00:	f023 0304 	bic.w	r3, r3, #4
 8003f04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f08:	4b20      	ldr	r3, [pc, #128]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	4a1f      	ldr	r2, [pc, #124]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003f0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f12:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003f14:	4b1d      	ldr	r3, [pc, #116]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1c      	ldr	r2, [pc, #112]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f1e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f20:	f7fe f9b6 	bl	8002290 <HAL_GetTick>
 8003f24:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f28:	f7fe f9b2 	bl	8002290 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e099      	b.n	800406e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003f3a:	4b14      	ldr	r3, [pc, #80]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0xc64>
 8003f46:	e091      	b.n	800406c <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003f48:	4b10      	ldr	r3, [pc, #64]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a0f      	ldr	r2, [pc, #60]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f52:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f54:	f7fe f99c 	bl	8002290 <HAL_GetTick>
 8003f58:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5c:	f7fe f998 	bl	8002290 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e07f      	b.n	800406e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003f6e:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003f7a:	4b04      	ldr	r3, [pc, #16]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	4a03      	ldr	r2, [pc, #12]	; (8003f8c <HAL_RCC_OscConfig+0xcc8>)
 8003f80:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003f84:	f023 0303 	bic.w	r3, r3, #3
 8003f88:	6293      	str	r3, [r2, #40]	; 0x28
 8003f8a:	e06f      	b.n	800406c <HAL_RCC_OscConfig+0xda8>
 8003f8c:	46020c00 	.word	0x46020c00
 8003f90:	46020800 	.word	0x46020800
 8003f94:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003f98:	4b37      	ldr	r3, [pc, #220]	; (8004078 <HAL_RCC_OscConfig+0xdb4>)
 8003f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f9e:	4b36      	ldr	r3, [pc, #216]	; (8004078 <HAL_RCC_OscConfig+0xdb4>)
 8003fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d039      	beq.n	8004020 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f003 0203 	and.w	r2, r3, #3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d132      	bne.n	8004020 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	0a1b      	lsrs	r3, r3, #8
 8003fbe:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d129      	bne.n	8004020 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d122      	bne.n	8004020 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d11a      	bne.n	8004020 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	0a5b      	lsrs	r3, r3, #9
 8003fee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d111      	bne.n	8004020 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	0c1b      	lsrs	r3, r3, #16
 8004000:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004008:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800400a:	429a      	cmp	r2, r3
 800400c:	d108      	bne.n	8004020 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	0e1b      	lsrs	r3, r3, #24
 8004012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800401c:	429a      	cmp	r2, r3
 800401e:	d001      	beq.n	8004024 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e024      	b.n	800406e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004024:	4b14      	ldr	r3, [pc, #80]	; (8004078 <HAL_RCC_OscConfig+0xdb4>)
 8004026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004028:	08db      	lsrs	r3, r3, #3
 800402a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004032:	429a      	cmp	r2, r3
 8004034:	d01a      	beq.n	800406c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004036:	4b10      	ldr	r3, [pc, #64]	; (8004078 <HAL_RCC_OscConfig+0xdb4>)
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	4a0f      	ldr	r2, [pc, #60]	; (8004078 <HAL_RCC_OscConfig+0xdb4>)
 800403c:	f023 0310 	bic.w	r3, r3, #16
 8004040:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004042:	f7fe f925 	bl	8002290 <HAL_GetTick>
 8004046:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004048:	bf00      	nop
 800404a:	f7fe f921 	bl	8002290 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004052:	4293      	cmp	r3, r2
 8004054:	d0f9      	beq.n	800404a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405a:	4a07      	ldr	r2, [pc, #28]	; (8004078 <HAL_RCC_OscConfig+0xdb4>)
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004060:	4b05      	ldr	r3, [pc, #20]	; (8004078 <HAL_RCC_OscConfig+0xdb4>)
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	4a04      	ldr	r2, [pc, #16]	; (8004078 <HAL_RCC_OscConfig+0xdb4>)
 8004066:	f043 0310 	orr.w	r3, r3, #16
 800406a:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3738      	adds	r7, #56	; 0x38
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	46020c00 	.word	0x46020c00

0800407c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e1d9      	b.n	8004444 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004090:	4b9b      	ldr	r3, [pc, #620]	; (8004300 <HAL_RCC_ClockConfig+0x284>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 030f 	and.w	r3, r3, #15
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d910      	bls.n	80040c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409e:	4b98      	ldr	r3, [pc, #608]	; (8004300 <HAL_RCC_ClockConfig+0x284>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f023 020f 	bic.w	r2, r3, #15
 80040a6:	4996      	ldr	r1, [pc, #600]	; (8004300 <HAL_RCC_ClockConfig+0x284>)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ae:	4b94      	ldr	r3, [pc, #592]	; (8004300 <HAL_RCC_ClockConfig+0x284>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e1c1      	b.n	8004444 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0310 	and.w	r3, r3, #16
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d010      	beq.n	80040ee <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	695a      	ldr	r2, [r3, #20]
 80040d0:	4b8c      	ldr	r3, [pc, #560]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040d8:	429a      	cmp	r2, r3
 80040da:	d908      	bls.n	80040ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80040dc:	4b89      	ldr	r3, [pc, #548]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	4986      	ldr	r1, [pc, #536]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d012      	beq.n	8004120 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	4b81      	ldr	r3, [pc, #516]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	091b      	lsrs	r3, r3, #4
 8004104:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004108:	429a      	cmp	r2, r3
 800410a:	d909      	bls.n	8004120 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800410c:	4b7d      	ldr	r3, [pc, #500]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	497a      	ldr	r1, [pc, #488]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 800411c:	4313      	orrs	r3, r2
 800411e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d010      	beq.n	800414e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	4b74      	ldr	r3, [pc, #464]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004138:	429a      	cmp	r2, r3
 800413a:	d908      	bls.n	800414e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800413c:	4b71      	ldr	r3, [pc, #452]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	496e      	ldr	r1, [pc, #440]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 800414a:	4313      	orrs	r3, r2
 800414c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d010      	beq.n	800417c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	4b69      	ldr	r3, [pc, #420]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	429a      	cmp	r2, r3
 8004168:	d908      	bls.n	800417c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800416a:	4b66      	ldr	r3, [pc, #408]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	f023 020f 	bic.w	r2, r3, #15
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	4963      	ldr	r1, [pc, #396]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 8004178:	4313      	orrs	r3, r2
 800417a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 80d2 	beq.w	800432e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800418a:	2300      	movs	r3, #0
 800418c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b03      	cmp	r3, #3
 8004194:	d143      	bne.n	800421e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004196:	4b5b      	ldr	r3, [pc, #364]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 8004198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d110      	bne.n	80041c6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80041a4:	4b57      	ldr	r3, [pc, #348]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 80041a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041aa:	4a56      	ldr	r2, [pc, #344]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 80041ac:	f043 0304 	orr.w	r3, r3, #4
 80041b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80041b4:	4b53      	ldr	r3, [pc, #332]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 80041b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80041c2:	2301      	movs	r3, #1
 80041c4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80041c6:	f7fe f863 	bl	8002290 <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80041cc:	4b4e      	ldr	r3, [pc, #312]	; (8004308 <HAL_RCC_ClockConfig+0x28c>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00f      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80041da:	f7fe f859 	bl	8002290 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e12b      	b.n	8004444 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80041ec:	4b46      	ldr	r3, [pc, #280]	; (8004308 <HAL_RCC_ClockConfig+0x28c>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0f0      	beq.n	80041da <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80041f8:	7dfb      	ldrb	r3, [r7, #23]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d107      	bne.n	800420e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80041fe:	4b41      	ldr	r3, [pc, #260]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 8004200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004204:	4a3f      	ldr	r2, [pc, #252]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 8004206:	f023 0304 	bic.w	r3, r3, #4
 800420a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800420e:	4b3d      	ldr	r3, [pc, #244]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d121      	bne.n	800425e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e112      	b.n	8004444 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d107      	bne.n	8004236 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004226:	4b37      	ldr	r3, [pc, #220]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d115      	bne.n	800425e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e106      	b.n	8004444 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d107      	bne.n	800424e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800423e:	4b31      	ldr	r3, [pc, #196]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e0fa      	b.n	8004444 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800424e:	4b2d      	ldr	r3, [pc, #180]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e0f2      	b.n	8004444 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800425e:	4b29      	ldr	r3, [pc, #164]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f023 0203 	bic.w	r2, r3, #3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	4926      	ldr	r1, [pc, #152]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 800426c:	4313      	orrs	r3, r2
 800426e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004270:	f7fe f80e 	bl	8002290 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b03      	cmp	r3, #3
 800427c:	d112      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800427e:	e00a      	b.n	8004296 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004280:	f7fe f806 	bl	8002290 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f241 3288 	movw	r2, #5000	; 0x1388
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e0d6      	b.n	8004444 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004296:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	f003 030c 	and.w	r3, r3, #12
 800429e:	2b0c      	cmp	r3, #12
 80042a0:	d1ee      	bne.n	8004280 <HAL_RCC_ClockConfig+0x204>
 80042a2:	e044      	b.n	800432e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d112      	bne.n	80042d2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80042ac:	e00a      	b.n	80042c4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ae:	f7fd ffef 	bl	8002290 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042bc:	4293      	cmp	r3, r2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e0bf      	b.n	8004444 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80042c4:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	f003 030c 	and.w	r3, r3, #12
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d1ee      	bne.n	80042ae <HAL_RCC_ClockConfig+0x232>
 80042d0:	e02d      	b.n	800432e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d123      	bne.n	8004322 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80042da:	e00a      	b.n	80042f2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042dc:	f7fd ffd8 	bl	8002290 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e0a8      	b.n	8004444 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80042f2:	4b04      	ldr	r3, [pc, #16]	; (8004304 <HAL_RCC_ClockConfig+0x288>)
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	f003 030c 	and.w	r3, r3, #12
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1ee      	bne.n	80042dc <HAL_RCC_ClockConfig+0x260>
 80042fe:	e016      	b.n	800432e <HAL_RCC_ClockConfig+0x2b2>
 8004300:	40022000 	.word	0x40022000
 8004304:	46020c00 	.word	0x46020c00
 8004308:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800430c:	f7fd ffc0 	bl	8002290 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	f241 3288 	movw	r2, #5000	; 0x1388
 800431a:	4293      	cmp	r3, r2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e090      	b.n	8004444 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004322:	4b4a      	ldr	r3, [pc, #296]	; (800444c <HAL_RCC_ClockConfig+0x3d0>)
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	f003 030c 	and.w	r3, r3, #12
 800432a:	2b04      	cmp	r3, #4
 800432c:	d1ee      	bne.n	800430c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d010      	beq.n	800435c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	4b43      	ldr	r3, [pc, #268]	; (800444c <HAL_RCC_ClockConfig+0x3d0>)
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	429a      	cmp	r2, r3
 8004348:	d208      	bcs.n	800435c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800434a:	4b40      	ldr	r3, [pc, #256]	; (800444c <HAL_RCC_ClockConfig+0x3d0>)
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	f023 020f 	bic.w	r2, r3, #15
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	493d      	ldr	r1, [pc, #244]	; (800444c <HAL_RCC_ClockConfig+0x3d0>)
 8004358:	4313      	orrs	r3, r2
 800435a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800435c:	4b3c      	ldr	r3, [pc, #240]	; (8004450 <HAL_RCC_ClockConfig+0x3d4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d210      	bcs.n	800438c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436a:	4b39      	ldr	r3, [pc, #228]	; (8004450 <HAL_RCC_ClockConfig+0x3d4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f023 020f 	bic.w	r2, r3, #15
 8004372:	4937      	ldr	r1, [pc, #220]	; (8004450 <HAL_RCC_ClockConfig+0x3d4>)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	4313      	orrs	r3, r2
 8004378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800437a:	4b35      	ldr	r3, [pc, #212]	; (8004450 <HAL_RCC_ClockConfig+0x3d4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d001      	beq.n	800438c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e05b      	b.n	8004444 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d010      	beq.n	80043ba <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	4b2b      	ldr	r3, [pc, #172]	; (800444c <HAL_RCC_ClockConfig+0x3d0>)
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d208      	bcs.n	80043ba <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80043a8:	4b28      	ldr	r3, [pc, #160]	; (800444c <HAL_RCC_ClockConfig+0x3d0>)
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	4925      	ldr	r1, [pc, #148]	; (800444c <HAL_RCC_ClockConfig+0x3d0>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d012      	beq.n	80043ec <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	4b20      	ldr	r3, [pc, #128]	; (800444c <HAL_RCC_ClockConfig+0x3d0>)
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	091b      	lsrs	r3, r3, #4
 80043d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d209      	bcs.n	80043ec <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80043d8:	4b1c      	ldr	r3, [pc, #112]	; (800444c <HAL_RCC_ClockConfig+0x3d0>)
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	4919      	ldr	r1, [pc, #100]	; (800444c <HAL_RCC_ClockConfig+0x3d0>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d010      	beq.n	800441a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	695a      	ldr	r2, [r3, #20]
 80043fc:	4b13      	ldr	r3, [pc, #76]	; (800444c <HAL_RCC_ClockConfig+0x3d0>)
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004404:	429a      	cmp	r2, r3
 8004406:	d208      	bcs.n	800441a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004408:	4b10      	ldr	r3, [pc, #64]	; (800444c <HAL_RCC_ClockConfig+0x3d0>)
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	490d      	ldr	r1, [pc, #52]	; (800444c <HAL_RCC_ClockConfig+0x3d0>)
 8004416:	4313      	orrs	r3, r2
 8004418:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800441a:	f000 f821 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 800441e:	4602      	mov	r2, r0
 8004420:	4b0a      	ldr	r3, [pc, #40]	; (800444c <HAL_RCC_ClockConfig+0x3d0>)
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	f003 030f 	and.w	r3, r3, #15
 8004428:	490a      	ldr	r1, [pc, #40]	; (8004454 <HAL_RCC_ClockConfig+0x3d8>)
 800442a:	5ccb      	ldrb	r3, [r1, r3]
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
 8004430:	4a09      	ldr	r2, [pc, #36]	; (8004458 <HAL_RCC_ClockConfig+0x3dc>)
 8004432:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004434:	4b09      	ldr	r3, [pc, #36]	; (800445c <HAL_RCC_ClockConfig+0x3e0>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	f7fd fedf 	bl	80021fc <HAL_InitTick>
 800443e:	4603      	mov	r3, r0
 8004440:	73fb      	strb	r3, [r7, #15]

  return status;
 8004442:	7bfb      	ldrb	r3, [r7, #15]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	46020c00 	.word	0x46020c00
 8004450:	40022000 	.word	0x40022000
 8004454:	0800ba48 	.word	0x0800ba48
 8004458:	20000000 	.word	0x20000000
 800445c:	20000004 	.word	0x20000004

08004460 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004460:	b480      	push	{r7}
 8004462:	b08b      	sub	sp, #44	; 0x2c
 8004464:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800446e:	4b7b      	ldr	r3, [pc, #492]	; (800465c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	f003 030c 	and.w	r3, r3, #12
 8004476:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004478:	4b78      	ldr	r3, [pc, #480]	; (800465c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	f003 0303 	and.w	r3, r3, #3
 8004480:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <HAL_RCC_GetSysClockFreq+0x34>
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	2b0c      	cmp	r3, #12
 800448c:	d121      	bne.n	80044d2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d11e      	bne.n	80044d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004494:	4b71      	ldr	r3, [pc, #452]	; (800465c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d107      	bne.n	80044b0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80044a0:	4b6e      	ldr	r3, [pc, #440]	; (800465c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80044a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044a6:	0b1b      	lsrs	r3, r3, #12
 80044a8:	f003 030f 	and.w	r3, r3, #15
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
 80044ae:	e005      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80044b0:	4b6a      	ldr	r3, [pc, #424]	; (800465c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	0f1b      	lsrs	r3, r3, #28
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044bc:	4a68      	ldr	r2, [pc, #416]	; (8004660 <HAL_RCC_GetSysClockFreq+0x200>)
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d110      	bne.n	80044ee <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80044d0:	e00d      	b.n	80044ee <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044d2:	4b62      	ldr	r3, [pc, #392]	; (800465c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f003 030c 	and.w	r3, r3, #12
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d102      	bne.n	80044e4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044de:	4b61      	ldr	r3, [pc, #388]	; (8004664 <HAL_RCC_GetSysClockFreq+0x204>)
 80044e0:	623b      	str	r3, [r7, #32]
 80044e2:	e004      	b.n	80044ee <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d101      	bne.n	80044ee <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044ea:	4b5e      	ldr	r3, [pc, #376]	; (8004664 <HAL_RCC_GetSysClockFreq+0x204>)
 80044ec:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b0c      	cmp	r3, #12
 80044f2:	f040 80ac 	bne.w	800464e <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80044f6:	4b59      	ldr	r3, [pc, #356]	; (800465c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80044f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004500:	4b56      	ldr	r3, [pc, #344]	; (800465c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004504:	0a1b      	lsrs	r3, r3, #8
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	3301      	adds	r3, #1
 800450c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800450e:	4b53      	ldr	r3, [pc, #332]	; (800465c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004512:	091b      	lsrs	r3, r3, #4
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800451a:	4b50      	ldr	r3, [pc, #320]	; (800465c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	08db      	lsrs	r3, r3, #3
 8004520:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	fb02 f303 	mul.w	r3, r2, r3
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004532:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 8086 	beq.w	800464a <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	2b02      	cmp	r3, #2
 8004542:	d003      	beq.n	800454c <HAL_RCC_GetSysClockFreq+0xec>
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	2b03      	cmp	r3, #3
 8004548:	d022      	beq.n	8004590 <HAL_RCC_GetSysClockFreq+0x130>
 800454a:	e043      	b.n	80045d4 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004556:	eddf 6a44 	vldr	s13, [pc, #272]	; 8004668 <HAL_RCC_GetSysClockFreq+0x208>
 800455a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800455e:	4b3f      	ldr	r3, [pc, #252]	; (800465c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800456e:	ed97 6a01 	vldr	s12, [r7, #4]
 8004572:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800466c <HAL_RCC_GetSysClockFreq+0x20c>
 8004576:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800457a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800457e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004582:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800458a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800458e:	e046      	b.n	800461e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800459a:	eddf 6a33 	vldr	s13, [pc, #204]	; 8004668 <HAL_RCC_GetSysClockFreq+0x208>
 800459e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045a2:	4b2e      	ldr	r3, [pc, #184]	; (800465c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80045a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045aa:	ee07 3a90 	vmov	s15, r3
 80045ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80045b2:	ed97 6a01 	vldr	s12, [r7, #4]
 80045b6:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800466c <HAL_RCC_GetSysClockFreq+0x20c>
 80045ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045be:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80045c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ce:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80045d2:	e024      	b.n	800461e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	ee07 3a90 	vmov	s15, r3
 80045e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ec:	4b1b      	ldr	r3, [pc, #108]	; (800465c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80045ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f4:	ee07 3a90 	vmov	s15, r3
 80045f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80045fc:	ed97 6a01 	vldr	s12, [r7, #4]
 8004600:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800466c <HAL_RCC_GetSysClockFreq+0x20c>
 8004604:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004608:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800460c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004610:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004618:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800461c:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800461e:	4b0f      	ldr	r3, [pc, #60]	; (800465c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004622:	0e1b      	lsrs	r3, r3, #24
 8004624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004628:	3301      	adds	r3, #1
 800462a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004636:	edd7 6a07 	vldr	s13, [r7, #28]
 800463a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800463e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004642:	ee17 3a90 	vmov	r3, s15
 8004646:	623b      	str	r3, [r7, #32]
 8004648:	e001      	b.n	800464e <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800464a:	2300      	movs	r3, #0
 800464c:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800464e:	6a3b      	ldr	r3, [r7, #32]
}
 8004650:	4618      	mov	r0, r3
 8004652:	372c      	adds	r7, #44	; 0x2c
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	46020c00 	.word	0x46020c00
 8004660:	0800ba60 	.word	0x0800ba60
 8004664:	00f42400 	.word	0x00f42400
 8004668:	4b742400 	.word	0x4b742400
 800466c:	46000000 	.word	0x46000000

08004670 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004674:	f7ff fef4 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 8004678:	4602      	mov	r2, r0
 800467a:	4b07      	ldr	r3, [pc, #28]	; (8004698 <HAL_RCC_GetHCLKFreq+0x28>)
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	4906      	ldr	r1, [pc, #24]	; (800469c <HAL_RCC_GetHCLKFreq+0x2c>)
 8004684:	5ccb      	ldrb	r3, [r1, r3]
 8004686:	fa22 f303 	lsr.w	r3, r2, r3
 800468a:	4a05      	ldr	r2, [pc, #20]	; (80046a0 <HAL_RCC_GetHCLKFreq+0x30>)
 800468c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800468e:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <HAL_RCC_GetHCLKFreq+0x30>)
 8004690:	681b      	ldr	r3, [r3, #0]
}
 8004692:	4618      	mov	r0, r3
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	46020c00 	.word	0x46020c00
 800469c:	0800ba48 	.word	0x0800ba48
 80046a0:	20000000 	.word	0x20000000

080046a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80046a8:	f7ff ffe2 	bl	8004670 <HAL_RCC_GetHCLKFreq>
 80046ac:	4602      	mov	r2, r0
 80046ae:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	091b      	lsrs	r3, r3, #4
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	4903      	ldr	r1, [pc, #12]	; (80046c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ba:	5ccb      	ldrb	r3, [r1, r3]
 80046bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	46020c00 	.word	0x46020c00
 80046c8:	0800ba58 	.word	0x0800ba58

080046cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80046d0:	f7ff ffce 	bl	8004670 <HAL_RCC_GetHCLKFreq>
 80046d4:	4602      	mov	r2, r0
 80046d6:	4b05      	ldr	r3, [pc, #20]	; (80046ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	0a1b      	lsrs	r3, r3, #8
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	4903      	ldr	r1, [pc, #12]	; (80046f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046e2:	5ccb      	ldrb	r3, [r1, r3]
 80046e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	46020c00 	.word	0x46020c00
 80046f0:	0800ba58 	.word	0x0800ba58

080046f4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80046f8:	f7ff ffba 	bl	8004670 <HAL_RCC_GetHCLKFreq>
 80046fc:	4602      	mov	r2, r0
 80046fe:	4b05      	ldr	r3, [pc, #20]	; (8004714 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	091b      	lsrs	r3, r3, #4
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	4903      	ldr	r1, [pc, #12]	; (8004718 <HAL_RCC_GetPCLK3Freq+0x24>)
 800470a:	5ccb      	ldrb	r3, [r1, r3]
 800470c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004710:	4618      	mov	r0, r3
 8004712:	bd80      	pop	{r7, pc}
 8004714:	46020c00 	.word	0x46020c00
 8004718:	0800ba58 	.word	0x0800ba58

0800471c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004724:	4b3e      	ldr	r3, [pc, #248]	; (8004820 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004732:	f7fe fd59 	bl	80031e8 <HAL_PWREx_GetVoltageRange>
 8004736:	6178      	str	r0, [r7, #20]
 8004738:	e019      	b.n	800476e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800473a:	4b39      	ldr	r3, [pc, #228]	; (8004820 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800473c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004740:	4a37      	ldr	r2, [pc, #220]	; (8004820 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004742:	f043 0304 	orr.w	r3, r3, #4
 8004746:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800474a:	4b35      	ldr	r3, [pc, #212]	; (8004820 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800474c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004758:	f7fe fd46 	bl	80031e8 <HAL_PWREx_GetVoltageRange>
 800475c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800475e:	4b30      	ldr	r3, [pc, #192]	; (8004820 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004764:	4a2e      	ldr	r2, [pc, #184]	; (8004820 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004766:	f023 0304 	bic.w	r3, r3, #4
 800476a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004774:	d003      	beq.n	800477e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800477c:	d109      	bne.n	8004792 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004784:	d202      	bcs.n	800478c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004786:	2301      	movs	r3, #1
 8004788:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800478a:	e033      	b.n	80047f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800478c:	2300      	movs	r3, #0
 800478e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004790:	e030      	b.n	80047f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004798:	d208      	bcs.n	80047ac <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a0:	d102      	bne.n	80047a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80047a2:	2303      	movs	r3, #3
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	e025      	b.n	80047f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e035      	b.n	8004818 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047b2:	d90f      	bls.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d109      	bne.n	80047ce <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047c0:	d902      	bls.n	80047c8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80047c2:	2300      	movs	r3, #0
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	e015      	b.n	80047f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80047c8:	2301      	movs	r3, #1
 80047ca:	613b      	str	r3, [r7, #16]
 80047cc:	e012      	b.n	80047f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80047ce:	2300      	movs	r3, #0
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	e00f      	b.n	80047f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047da:	d109      	bne.n	80047f0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e2:	d102      	bne.n	80047ea <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80047e4:	2301      	movs	r3, #1
 80047e6:	613b      	str	r3, [r7, #16]
 80047e8:	e004      	b.n	80047f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80047ea:	2302      	movs	r3, #2
 80047ec:	613b      	str	r3, [r7, #16]
 80047ee:	e001      	b.n	80047f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80047f0:	2301      	movs	r3, #1
 80047f2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047f4:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f023 020f 	bic.w	r2, r3, #15
 80047fc:	4909      	ldr	r1, [pc, #36]	; (8004824 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004804:	4b07      	ldr	r3, [pc, #28]	; (8004824 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 030f 	and.w	r3, r3, #15
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	429a      	cmp	r2, r3
 8004810:	d001      	beq.n	8004816 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	46020c00 	.word	0x46020c00
 8004824:	40022000 	.word	0x40022000

08004828 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800482c:	b0ba      	sub	sp, #232	; 0xe8
 800482e:	af00      	add	r7, sp, #0
 8004830:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004834:	2300      	movs	r3, #0
 8004836:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800483a:	2300      	movs	r3, #0
 800483c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004840:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004848:	f002 0401 	and.w	r4, r2, #1
 800484c:	2500      	movs	r5, #0
 800484e:	ea54 0305 	orrs.w	r3, r4, r5
 8004852:	d00b      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004854:	4bcb      	ldr	r3, [pc, #812]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800485a:	f023 0103 	bic.w	r1, r3, #3
 800485e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004864:	4ac7      	ldr	r2, [pc, #796]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004866:	430b      	orrs	r3, r1
 8004868:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800486c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004874:	f002 0802 	and.w	r8, r2, #2
 8004878:	f04f 0900 	mov.w	r9, #0
 800487c:	ea58 0309 	orrs.w	r3, r8, r9
 8004880:	d00b      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004882:	4bc0      	ldr	r3, [pc, #768]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004888:	f023 010c 	bic.w	r1, r3, #12
 800488c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004892:	4abc      	ldr	r2, [pc, #752]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004894:	430b      	orrs	r3, r1
 8004896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800489a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a2:	f002 0a04 	and.w	sl, r2, #4
 80048a6:	f04f 0b00 	mov.w	fp, #0
 80048aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80048ae:	d00b      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80048b0:	4bb4      	ldr	r3, [pc, #720]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048b6:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80048ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c0:	4ab0      	ldr	r2, [pc, #704]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048c2:	430b      	orrs	r3, r1
 80048c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d0:	f002 0308 	and.w	r3, r2, #8
 80048d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048d8:	2300      	movs	r3, #0
 80048da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80048e2:	460b      	mov	r3, r1
 80048e4:	4313      	orrs	r3, r2
 80048e6:	d00b      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80048e8:	4ba6      	ldr	r3, [pc, #664]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f8:	4aa2      	ldr	r2, [pc, #648]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048fa:	430b      	orrs	r3, r1
 80048fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004900:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004908:	f002 0310 	and.w	r3, r2, #16
 800490c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004910:	2300      	movs	r3, #0
 8004912:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004916:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800491a:	460b      	mov	r3, r1
 800491c:	4313      	orrs	r3, r2
 800491e:	d00b      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004920:	4b98      	ldr	r3, [pc, #608]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004926:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800492a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800492e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004930:	4a94      	ldr	r2, [pc, #592]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004932:	430b      	orrs	r3, r1
 8004934:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004938:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	f002 0320 	and.w	r3, r2, #32
 8004944:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004948:	2300      	movs	r3, #0
 800494a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800494e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004952:	460b      	mov	r3, r1
 8004954:	4313      	orrs	r3, r2
 8004956:	d00b      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004958:	4b8a      	ldr	r3, [pc, #552]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800495a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800495e:	f023 0107 	bic.w	r1, r3, #7
 8004962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004968:	4a86      	ldr	r2, [pc, #536]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800496a:	430b      	orrs	r3, r1
 800496c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004970:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004978:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800497c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004980:	2300      	movs	r3, #0
 8004982:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004986:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800498a:	460b      	mov	r3, r1
 800498c:	4313      	orrs	r3, r2
 800498e:	d00b      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004990:	4b7c      	ldr	r3, [pc, #496]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004996:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800499a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800499e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049a0:	4a78      	ldr	r2, [pc, #480]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049a2:	430b      	orrs	r3, r1
 80049a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80049b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049b8:	2300      	movs	r3, #0
 80049ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049be:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049c2:	460b      	mov	r3, r1
 80049c4:	4313      	orrs	r3, r2
 80049c6:	d00b      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80049c8:	4b6e      	ldr	r3, [pc, #440]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049d8:	4a6a      	ldr	r2, [pc, #424]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049da:	430b      	orrs	r3, r1
 80049dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e8:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80049ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049f0:	2300      	movs	r3, #0
 80049f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80049f6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4313      	orrs	r3, r2
 80049fe:	d00b      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004a00:	4b60      	ldr	r3, [pc, #384]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a10:	4a5c      	ldr	r2, [pc, #368]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a12:	430b      	orrs	r3, r1
 8004a14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a20:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004a24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a2e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004a32:	460b      	mov	r3, r1
 8004a34:	4313      	orrs	r3, r2
 8004a36:	d00b      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004a38:	4b52      	ldr	r3, [pc, #328]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a3e:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8004a42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a48:	4a4e      	ldr	r2, [pc, #312]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a4a:	430b      	orrs	r3, r1
 8004a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004a5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a60:	2300      	movs	r3, #0
 8004a62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a66:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	d00b      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004a70:	4b44      	ldr	r3, [pc, #272]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a76:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a80:	4a40      	ldr	r2, [pc, #256]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a82:	430b      	orrs	r3, r1
 8004a84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a90:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004a94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004a9e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	d00b      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004aa8:	4b36      	ldr	r3, [pc, #216]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004aae:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8004ab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ab8:	4a32      	ldr	r2, [pc, #200]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aba:	430b      	orrs	r3, r1
 8004abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004ac0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004acc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ad6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004ada:	460b      	mov	r3, r1
 8004adc:	4313      	orrs	r3, r2
 8004ade:	d00c      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004ae0:	4b28      	ldr	r3, [pc, #160]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ae2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ae6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004af2:	4a24      	ldr	r2, [pc, #144]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004af4:	430b      	orrs	r3, r1
 8004af6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004afa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b02:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004b06:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b08:	2300      	movs	r3, #0
 8004b0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b0c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004b10:	460b      	mov	r3, r1
 8004b12:	4313      	orrs	r3, r2
 8004b14:	d04f      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004b16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1e:	2b80      	cmp	r3, #128	; 0x80
 8004b20:	d02d      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004b22:	2b80      	cmp	r3, #128	; 0x80
 8004b24:	d827      	bhi.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004b26:	2b60      	cmp	r3, #96	; 0x60
 8004b28:	d02e      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004b2a:	2b60      	cmp	r3, #96	; 0x60
 8004b2c:	d823      	bhi.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004b2e:	2b40      	cmp	r3, #64	; 0x40
 8004b30:	d006      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004b32:	2b40      	cmp	r3, #64	; 0x40
 8004b34:	d81f      	bhi.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x326>
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	d011      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004b3e:	e01a      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b40:	4b10      	ldr	r3, [pc, #64]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b44:	4a0f      	ldr	r2, [pc, #60]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b4a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b4c:	e01d      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b52:	3308      	adds	r3, #8
 8004b54:	4618      	mov	r0, r3
 8004b56:	f002 fa41 	bl	8006fdc <RCCEx_PLL2_Config>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b60:	e013      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b66:	332c      	adds	r3, #44	; 0x2c
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f002 facf 	bl	800710c <RCCEx_PLL3_Config>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b74:	e009      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004b7c:	e005      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8004b7e:	bf00      	nop
 8004b80:	e003      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004b82:	bf00      	nop
 8004b84:	46020c00 	.word	0x46020c00
        break;
 8004b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b8a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10d      	bne.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004b92:	4bb6      	ldr	r3, [pc, #728]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004b94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004b98:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8004b9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba4:	4ab1      	ldr	r2, [pc, #708]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004ba6:	430b      	orrs	r3, r1
 8004ba8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004bac:	e003      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bae:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004bb2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004bb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbe:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004bc2:	673b      	str	r3, [r7, #112]	; 0x70
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	677b      	str	r3, [r7, #116]	; 0x74
 8004bc8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	d053      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bde:	d033      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be4:	d82c      	bhi.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004be6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bea:	d02f      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004bec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bf0:	d826      	bhi.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bf6:	d008      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bfc:	d820      	bhi.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8004c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c06:	d011      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004c08:	e01a      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c0a:	4b98      	ldr	r3, [pc, #608]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0e:	4a97      	ldr	r2, [pc, #604]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c14:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004c16:	e01a      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f002 f9dc 	bl	8006fdc <RCCEx_PLL2_Config>
 8004c24:	4603      	mov	r3, r0
 8004c26:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004c2a:	e010      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c30:	332c      	adds	r3, #44	; 0x2c
 8004c32:	4618      	mov	r0, r3
 8004c34:	f002 fa6a 	bl	800710c <RCCEx_PLL3_Config>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004c3e:	e006      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004c46:	e002      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004c48:	bf00      	nop
 8004c4a:	e000      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c4e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10d      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004c56:	4b85      	ldr	r3, [pc, #532]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004c58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004c5c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004c60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c68:	4a80      	ldr	r2, [pc, #512]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004c6a:	430b      	orrs	r3, r1
 8004c6c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004c70:	e003      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c72:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004c76:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004c7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004c86:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c88:	2300      	movs	r3, #0
 8004c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c8c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004c90:	460b      	mov	r3, r1
 8004c92:	4313      	orrs	r3, r2
 8004c94:	d046      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004c96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c9e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004ca2:	d028      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004ca4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004ca8:	d821      	bhi.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004caa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cae:	d022      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cb4:	d81b      	bhi.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004cb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cba:	d01c      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004cbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cc0:	d815      	bhi.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc6:	d008      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ccc:	d80f      	bhi.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d011      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd6:	d00e      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004cd8:	e009      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cde:	3308      	adds	r3, #8
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f002 f97b 	bl	8006fdc <RCCEx_PLL2_Config>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004cec:	e004      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004cf4:	e000      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8004cf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cf8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10d      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004d00:	4b5a      	ldr	r3, [pc, #360]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004d02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d06:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d12:	4a56      	ldr	r2, [pc, #344]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004d14:	430b      	orrs	r3, r1
 8004d16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004d1a:	e003      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d1c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004d20:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004d24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004d30:	663b      	str	r3, [r7, #96]	; 0x60
 8004d32:	2300      	movs	r3, #0
 8004d34:	667b      	str	r3, [r7, #100]	; 0x64
 8004d36:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	d03f      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004d40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d48:	2b04      	cmp	r3, #4
 8004d4a:	d81e      	bhi.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x562>
 8004d4c:	a201      	add	r2, pc, #4	; (adr r2, 8004d54 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8004d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d52:	bf00      	nop
 8004d54:	08004d93 	.word	0x08004d93
 8004d58:	08004d69 	.word	0x08004d69
 8004d5c:	08004d77 	.word	0x08004d77
 8004d60:	08004d93 	.word	0x08004d93
 8004d64:	08004d93 	.word	0x08004d93
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d68:	4b40      	ldr	r3, [pc, #256]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	4a3f      	ldr	r2, [pc, #252]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d72:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004d74:	e00e      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d7a:	332c      	adds	r3, #44	; 0x2c
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f002 f9c5 	bl	800710c <RCCEx_PLL3_Config>
 8004d82:	4603      	mov	r3, r0
 8004d84:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004d88:	e004      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004d90:	e000      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8004d92:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004d94:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10d      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004d9c:	4b33      	ldr	r3, [pc, #204]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004d9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004da2:	f023 0107 	bic.w	r1, r3, #7
 8004da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dae:	4a2f      	ldr	r2, [pc, #188]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004db0:	430b      	orrs	r3, r1
 8004db2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004db6:	e003      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004dbc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004dc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004dcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dce:	2300      	movs	r3, #0
 8004dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dd2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	d04d      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004ddc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004de4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004de8:	d028      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004dea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dee:	d821      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004df0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004df4:	d024      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8004df6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004dfa:	d81b      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004dfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e00:	d00e      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8004e02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e06:	d815      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d01b      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8004e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e10:	d110      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e12:	4b16      	ldr	r3, [pc, #88]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e16:	4a15      	ldr	r2, [pc, #84]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e1c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004e1e:	e012      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e24:	332c      	adds	r3, #44	; 0x2c
 8004e26:	4618      	mov	r0, r3
 8004e28:	f002 f970 	bl	800710c <RCCEx_PLL3_Config>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004e32:	e008      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004e3a:	e004      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004e3c:	bf00      	nop
 8004e3e:	e002      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004e40:	bf00      	nop
 8004e42:	e000      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004e44:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004e46:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d110      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8004e4e:	4b07      	ldr	r3, [pc, #28]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e54:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004e58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e60:	4a02      	ldr	r2, [pc, #8]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e62:	430b      	orrs	r3, r1
 8004e64:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e68:	e006      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004e6a:	bf00      	nop
 8004e6c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e70:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004e74:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e80:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004e84:	653b      	str	r3, [r7, #80]	; 0x50
 8004e86:	2300      	movs	r3, #0
 8004e88:	657b      	str	r3, [r7, #84]	; 0x54
 8004e8a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4313      	orrs	r3, r2
 8004e92:	f000 80b5 	beq.w	8005000 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e96:	2300      	movs	r3, #0
 8004e98:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e9c:	4b9d      	ldr	r3, [pc, #628]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d113      	bne.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eaa:	4b9a      	ldr	r3, [pc, #616]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eb0:	4a98      	ldr	r2, [pc, #608]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004eb2:	f043 0304 	orr.w	r3, r3, #4
 8004eb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004eba:	4b96      	ldr	r3, [pc, #600]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec0:	f003 0304 	and.w	r3, r3, #4
 8004ec4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ec8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004ed2:	4b91      	ldr	r3, [pc, #580]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed6:	4a90      	ldr	r2, [pc, #576]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004ed8:	f043 0301 	orr.w	r3, r3, #1
 8004edc:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ede:	f7fd f9d7 	bl	8002290 <HAL_GetTick>
 8004ee2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ee6:	e00b      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee8:	f7fd f9d2 	bl	8002290 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d903      	bls.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004efe:	e005      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f00:	4b85      	ldr	r3, [pc, #532]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0ed      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8004f0c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d165      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f14:	4b7f      	ldr	r3, [pc, #508]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d023      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8004f2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f2e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d01b      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f3a:	4b76      	ldr	r3, [pc, #472]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f48:	4b72      	ldr	r3, [pc, #456]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f4e:	4a71      	ldr	r2, [pc, #452]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f54:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f58:	4b6e      	ldr	r3, [pc, #440]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f5e:	4a6d      	ldr	r2, [pc, #436]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f64:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f68:	4a6a      	ldr	r2, [pc, #424]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d019      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7e:	f7fd f987 	bl	8002290 <HAL_GetTick>
 8004f82:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f86:	e00d      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f88:	f7fd f982 	bl	8002290 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f92:	1ad2      	subs	r2, r2, r3
 8004f94:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d903      	bls.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8004fa2:	e006      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fa4:	4b5b      	ldr	r3, [pc, #364]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004fa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0ea      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8004fb2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10d      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004fba:	4b56      	ldr	r3, [pc, #344]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fc0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fc8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004fcc:	4a51      	ldr	r2, [pc, #324]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004fce:	430b      	orrs	r3, r1
 8004fd0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fd6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004fda:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8004fde:	e003      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004fe4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fe8:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d107      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ff0:	4b48      	ldr	r3, [pc, #288]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ff6:	4a47      	ldr	r2, [pc, #284]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004ff8:	f023 0304 	bic.w	r3, r3, #4
 8004ffc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005000:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800500c:	64bb      	str	r3, [r7, #72]	; 0x48
 800500e:	2300      	movs	r3, #0
 8005010:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005012:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005016:	460b      	mov	r3, r1
 8005018:	4313      	orrs	r3, r2
 800501a:	d042      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800501c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005020:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005024:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005028:	d022      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800502a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800502e:	d81b      	bhi.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005030:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005034:	d011      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x832>
 8005036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800503a:	d815      	bhi.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800503c:	2b00      	cmp	r3, #0
 800503e:	d019      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8005040:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005044:	d110      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800504a:	3308      	adds	r3, #8
 800504c:	4618      	mov	r0, r3
 800504e:	f001 ffc5 	bl	8006fdc <RCCEx_PLL2_Config>
 8005052:	4603      	mov	r3, r0
 8005054:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005058:	e00d      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800505a:	4b2e      	ldr	r3, [pc, #184]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800505c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505e:	4a2d      	ldr	r2, [pc, #180]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005064:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005066:	e006      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800506e:	e002      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005070:	bf00      	nop
 8005072:	e000      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005074:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005076:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10d      	bne.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800507e:	4b25      	ldr	r3, [pc, #148]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005084:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005088:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800508c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005090:	4a20      	ldr	r2, [pc, #128]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005092:	430b      	orrs	r3, r1
 8005094:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005098:	e003      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800509a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800509e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80050a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050aa:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80050ae:	643b      	str	r3, [r7, #64]	; 0x40
 80050b0:	2300      	movs	r3, #0
 80050b2:	647b      	str	r3, [r7, #68]	; 0x44
 80050b4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80050b8:	460b      	mov	r3, r1
 80050ba:	4313      	orrs	r3, r2
 80050bc:	d032      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80050be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ca:	d00b      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80050cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d0:	d804      	bhi.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d008      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80050d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050da:	d007      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80050e2:	e004      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80050e4:	bf00      	nop
 80050e6:	e002      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80050e8:	bf00      	nop
 80050ea:	e000      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80050ec:	bf00      	nop
    }
    if (ret == HAL_OK)
 80050ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d112      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80050f6:	4b07      	ldr	r3, [pc, #28]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80050fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005100:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005104:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005108:	4a02      	ldr	r2, [pc, #8]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800510a:	430b      	orrs	r3, r1
 800510c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005110:	e008      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8005112:	bf00      	nop
 8005114:	46020c00 	.word	0x46020c00
 8005118:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800511c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005120:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005124:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512c:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005130:	63bb      	str	r3, [r7, #56]	; 0x38
 8005132:	2300      	movs	r3, #0
 8005134:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005136:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800513a:	460b      	mov	r3, r1
 800513c:	4313      	orrs	r3, r2
 800513e:	d00c      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005140:	4b98      	ldr	r3, [pc, #608]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005142:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005146:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800514a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800514e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005152:	4a94      	ldr	r2, [pc, #592]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005154:	430b      	orrs	r3, r1
 8005156:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800515a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005162:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005166:	633b      	str	r3, [r7, #48]	; 0x30
 8005168:	2300      	movs	r3, #0
 800516a:	637b      	str	r3, [r7, #52]	; 0x34
 800516c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005170:	460b      	mov	r3, r1
 8005172:	4313      	orrs	r3, r2
 8005174:	d019      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005176:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800517a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800517e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005182:	d105      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005184:	4b87      	ldr	r3, [pc, #540]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005188:	4a86      	ldr	r2, [pc, #536]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800518a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800518e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005190:	4b84      	ldr	r3, [pc, #528]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005192:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005196:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800519a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800519e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80051a2:	4a80      	ldr	r2, [pc, #512]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80051a4:	430b      	orrs	r3, r1
 80051a6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80051aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80051b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051b8:	2300      	movs	r3, #0
 80051ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051bc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80051c0:	460b      	mov	r3, r1
 80051c2:	4313      	orrs	r3, r2
 80051c4:	d00c      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80051c6:	4b77      	ldr	r3, [pc, #476]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80051c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80051d8:	4972      	ldr	r1, [pc, #456]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80051e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80051ec:	623b      	str	r3, [r7, #32]
 80051ee:	2300      	movs	r3, #0
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24
 80051f2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80051f6:	460b      	mov	r3, r1
 80051f8:	4313      	orrs	r3, r2
 80051fa:	d00c      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80051fc:	4b69      	ldr	r3, [pc, #420]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80051fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005202:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005206:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800520a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800520e:	4965      	ldr	r1, [pc, #404]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005210:	4313      	orrs	r3, r2
 8005212:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005216:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005222:	61bb      	str	r3, [r7, #24]
 8005224:	2300      	movs	r3, #0
 8005226:	61fb      	str	r3, [r7, #28]
 8005228:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800522c:	460b      	mov	r3, r1
 800522e:	4313      	orrs	r3, r2
 8005230:	d00c      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005232:	4b5c      	ldr	r3, [pc, #368]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005234:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005238:	f023 0218 	bic.w	r2, r3, #24
 800523c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005240:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005244:	4957      	ldr	r1, [pc, #348]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800524c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005254:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005258:	613b      	str	r3, [r7, #16]
 800525a:	2300      	movs	r3, #0
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005262:	460b      	mov	r3, r1
 8005264:	4313      	orrs	r3, r2
 8005266:	d032      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005268:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800526c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005270:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005274:	d105      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005276:	4b4b      	ldr	r3, [pc, #300]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527a:	4a4a      	ldr	r2, [pc, #296]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800527c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005280:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005286:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800528a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800528e:	d108      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005290:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005294:	3308      	adds	r3, #8
 8005296:	4618      	mov	r0, r3
 8005298:	f001 fea0 	bl	8006fdc <RCCEx_PLL2_Config>
 800529c:	4603      	mov	r3, r0
 800529e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 80052a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10d      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80052aa:	4b3e      	ldr	r3, [pc, #248]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80052ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80052b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052bc:	4939      	ldr	r1, [pc, #228]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80052c4:	e003      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80052ca:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80052ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80052da:	60bb      	str	r3, [r7, #8]
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80052e4:	460b      	mov	r3, r1
 80052e6:	4313      	orrs	r3, r2
 80052e8:	d03a      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80052ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052f6:	d00e      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80052f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052fc:	d815      	bhi.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d017      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005302:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005306:	d110      	bne.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005308:	4b26      	ldr	r3, [pc, #152]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800530a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530c:	4a25      	ldr	r2, [pc, #148]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800530e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005312:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005314:	e00e      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005316:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800531a:	3308      	adds	r3, #8
 800531c:	4618      	mov	r0, r3
 800531e:	f001 fe5d 	bl	8006fdc <RCCEx_PLL2_Config>
 8005322:	4603      	mov	r3, r0
 8005324:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005328:	e004      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005330:	e000      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8005332:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005334:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10d      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800533c:	4b19      	ldr	r3, [pc, #100]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800533e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005342:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005346:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800534a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800534e:	4915      	ldr	r1, [pc, #84]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005350:	4313      	orrs	r3, r2
 8005352:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005356:	e003      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005358:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800535c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005360:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800536c:	603b      	str	r3, [r7, #0]
 800536e:	2300      	movs	r3, #0
 8005370:	607b      	str	r3, [r7, #4]
 8005372:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005376:	460b      	mov	r3, r1
 8005378:	4313      	orrs	r3, r2
 800537a:	d00c      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800537c:	4b09      	ldr	r3, [pc, #36]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800537e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005382:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005386:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800538a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800538e:	4905      	ldr	r1, [pc, #20]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005390:	4313      	orrs	r3, r2
 8005392:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005396:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800539a:	4618      	mov	r0, r3
 800539c:	37e8      	adds	r7, #232	; 0xe8
 800539e:	46bd      	mov	sp, r7
 80053a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053a4:	46020c00 	.word	0x46020c00

080053a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b089      	sub	sp, #36	; 0x24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80053b0:	4bad      	ldr	r3, [pc, #692]	; (8005668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80053b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80053ba:	4bab      	ldr	r3, [pc, #684]	; (8005668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80053bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80053c4:	4ba8      	ldr	r3, [pc, #672]	; (8005668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80053c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c8:	0a1b      	lsrs	r3, r3, #8
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	3301      	adds	r3, #1
 80053d0:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80053d2:	4ba5      	ldr	r3, [pc, #660]	; (8005668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80053d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d6:	091b      	lsrs	r3, r3, #4
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80053de:	4ba2      	ldr	r3, [pc, #648]	; (8005668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80053e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e2:	08db      	lsrs	r3, r3, #3
 80053e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	fb02 f303 	mul.w	r3, r2, r3
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 8123 	beq.w	8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b03      	cmp	r3, #3
 8005406:	d062      	beq.n	80054ce <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	2b03      	cmp	r3, #3
 800540c:	f200 8081 	bhi.w	8005512 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d024      	beq.n	8005460 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2b02      	cmp	r3, #2
 800541a:	d17a      	bne.n	8005512 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005426:	eddf 6a91 	vldr	s13, [pc, #580]	; 800566c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800542a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800542e:	4b8e      	ldr	r3, [pc, #568]	; (8005668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005436:	ee07 3a90 	vmov	s15, r3
 800543a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800543e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005442:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8005670 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005446:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800544a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800544e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005452:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800545a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800545e:	e08f      	b.n	8005580 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005460:	4b81      	ldr	r3, [pc, #516]	; (8005668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 800546c:	4b7e      	ldr	r3, [pc, #504]	; (8005668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	0f1b      	lsrs	r3, r3, #28
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	e006      	b.n	8005486 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8005478:	4b7b      	ldr	r3, [pc, #492]	; (8005668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800547a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800547e:	041b      	lsls	r3, r3, #16
 8005480:	0f1b      	lsrs	r3, r3, #28
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	4a7b      	ldr	r2, [pc, #492]	; (8005674 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8005488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800548c:	ee07 3a90 	vmov	s15, r3
 8005490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	ee07 3a90 	vmov	s15, r3
 800549a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	ee07 3a90 	vmov	s15, r3
 80054a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80054b0:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005670 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80054b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80054c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054cc:	e058      	b.n	8005580 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	ee07 3a90 	vmov	s15, r3
 80054d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d8:	eddf 6a64 	vldr	s13, [pc, #400]	; 800566c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80054dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054e0:	4b61      	ldr	r3, [pc, #388]	; (8005668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80054e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e8:	ee07 3a90 	vmov	s15, r3
 80054ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80054f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80054f4:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005670 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80054f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005500:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005504:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005510:	e036      	b.n	8005580 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005512:	4b55      	ldr	r3, [pc, #340]	; (8005668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d005      	beq.n	800552a <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 800551e:	4b52      	ldr	r3, [pc, #328]	; (8005668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	0f1b      	lsrs	r3, r3, #28
 8005524:	f003 030f 	and.w	r3, r3, #15
 8005528:	e006      	b.n	8005538 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 800552a:	4b4f      	ldr	r3, [pc, #316]	; (8005668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800552c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005530:	041b      	lsls	r3, r3, #16
 8005532:	0f1b      	lsrs	r3, r3, #28
 8005534:	f003 030f 	and.w	r3, r3, #15
 8005538:	4a4e      	ldr	r2, [pc, #312]	; (8005674 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 800553a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800553e:	ee07 3a90 	vmov	s15, r3
 8005542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	ee07 3a90 	vmov	s15, r3
 800554c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005550:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800555e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005562:	eddf 5a43 	vldr	s11, [pc, #268]	; 8005670 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800556a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800556e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005572:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800557e:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005580:	4b39      	ldr	r3, [pc, #228]	; (8005668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d017      	beq.n	80055bc <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800558c:	4b36      	ldr	r3, [pc, #216]	; (8005668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800558e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005590:	0a5b      	lsrs	r3, r3, #9
 8005592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005596:	ee07 3a90 	vmov	s15, r3
 800559a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800559e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055a2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80055a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80055aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055b2:	ee17 2a90 	vmov	r2, s15
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	601a      	str	r2, [r3, #0]
 80055ba:	e002      	b.n	80055c2 <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80055c2:	4b29      	ldr	r3, [pc, #164]	; (8005668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80055c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d017      	beq.n	80055fe <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80055ce:	4b26      	ldr	r3, [pc, #152]	; (8005668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80055d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d2:	0c1b      	lsrs	r3, r3, #16
 80055d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055d8:	ee07 3a90 	vmov	s15, r3
 80055dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80055e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055e4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80055e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80055ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055f4:	ee17 2a90 	vmov	r2, s15
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	605a      	str	r2, [r3, #4]
 80055fc:	e002      	b.n	8005604 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005604:	4b18      	ldr	r3, [pc, #96]	; (8005668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d017      	beq.n	8005640 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005610:	4b15      	ldr	r3, [pc, #84]	; (8005668 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005614:	0e1b      	lsrs	r3, r3, #24
 8005616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005622:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005626:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800562a:	edd7 6a07 	vldr	s13, [r7, #28]
 800562e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005636:	ee17 2a90 	vmov	r2, s15
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800563e:	e00c      	b.n	800565a <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	609a      	str	r2, [r3, #8]
}
 8005646:	e008      	b.n	800565a <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	609a      	str	r2, [r3, #8]
}
 800565a:	bf00      	nop
 800565c:	3724      	adds	r7, #36	; 0x24
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	46020c00 	.word	0x46020c00
 800566c:	4b742400 	.word	0x4b742400
 8005670:	46000000 	.word	0x46000000
 8005674:	0800ba60 	.word	0x0800ba60

08005678 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005678:	b480      	push	{r7}
 800567a:	b089      	sub	sp, #36	; 0x24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005680:	4bad      	ldr	r3, [pc, #692]	; (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005688:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800568a:	4bab      	ldr	r3, [pc, #684]	; (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800568c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005694:	4ba8      	ldr	r3, [pc, #672]	; (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005698:	0a1b      	lsrs	r3, r3, #8
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	3301      	adds	r3, #1
 80056a0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80056a2:	4ba5      	ldr	r3, [pc, #660]	; (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	091b      	lsrs	r3, r3, #4
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80056ae:	4ba2      	ldr	r3, [pc, #648]	; (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	08db      	lsrs	r3, r3, #3
 80056b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	fb02 f303 	mul.w	r3, r2, r3
 80056be:	ee07 3a90 	vmov	s15, r3
 80056c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 8123 	beq.w	8005918 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d062      	beq.n	800579e <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	2b03      	cmp	r3, #3
 80056dc:	f200 8081 	bhi.w	80057e2 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d024      	beq.n	8005730 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d17a      	bne.n	80057e2 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f6:	eddf 6a91 	vldr	s13, [pc, #580]	; 800593c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80056fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056fe:	4b8e      	ldr	r3, [pc, #568]	; (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005706:	ee07 3a90 	vmov	s15, r3
 800570a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800570e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005712:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8005940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005716:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800571a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800571e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005722:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800572e:	e08f      	b.n	8005850 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005730:	4b81      	ldr	r3, [pc, #516]	; (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d005      	beq.n	8005748 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 800573c:	4b7e      	ldr	r3, [pc, #504]	; (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	0f1b      	lsrs	r3, r3, #28
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	e006      	b.n	8005756 <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8005748:	4b7b      	ldr	r3, [pc, #492]	; (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800574a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800574e:	041b      	lsls	r3, r3, #16
 8005750:	0f1b      	lsrs	r3, r3, #28
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	4a7b      	ldr	r2, [pc, #492]	; (8005944 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8005758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800575c:	ee07 3a90 	vmov	s15, r3
 8005760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	ee07 3a90 	vmov	s15, r3
 800576a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	ee07 3a90 	vmov	s15, r3
 8005778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800577c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005780:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005784:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005788:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800578c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005790:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005798:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800579c:	e058      	b.n	8005850 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	ee07 3a90 	vmov	s15, r3
 80057a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a8:	eddf 6a64 	vldr	s13, [pc, #400]	; 800593c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80057ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057b0:	4b61      	ldr	r3, [pc, #388]	; (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80057b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b8:	ee07 3a90 	vmov	s15, r3
 80057bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80057c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80057c4:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80057c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80057cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80057d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80057d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057e0:	e036      	b.n	8005850 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80057e2:	4b55      	ldr	r3, [pc, #340]	; (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d005      	beq.n	80057fa <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 80057ee:	4b52      	ldr	r3, [pc, #328]	; (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	0f1b      	lsrs	r3, r3, #28
 80057f4:	f003 030f 	and.w	r3, r3, #15
 80057f8:	e006      	b.n	8005808 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 80057fa:	4b4f      	ldr	r3, [pc, #316]	; (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80057fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005800:	041b      	lsls	r3, r3, #16
 8005802:	0f1b      	lsrs	r3, r3, #28
 8005804:	f003 030f 	and.w	r3, r3, #15
 8005808:	4a4e      	ldr	r2, [pc, #312]	; (8005944 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800580a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	ee07 3a90 	vmov	s15, r3
 800581c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800582e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005832:	eddf 5a43 	vldr	s11, [pc, #268]	; 8005940 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800583a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800583e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005842:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800584a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800584e:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005850:	4b39      	ldr	r3, [pc, #228]	; (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d017      	beq.n	800588c <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800585c:	4b36      	ldr	r3, [pc, #216]	; (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800585e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005860:	0a5b      	lsrs	r3, r3, #9
 8005862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800586e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005872:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005876:	edd7 6a07 	vldr	s13, [r7, #28]
 800587a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800587e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005882:	ee17 2a90 	vmov	r2, s15
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	e002      	b.n	8005892 <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005892:	4b29      	ldr	r3, [pc, #164]	; (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d017      	beq.n	80058ce <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800589e:	4b26      	ldr	r3, [pc, #152]	; (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80058a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a2:	0c1b      	lsrs	r3, r3, #16
 80058a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058a8:	ee07 3a90 	vmov	s15, r3
 80058ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80058b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058b4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80058b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80058bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058c4:	ee17 2a90 	vmov	r2, s15
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	605a      	str	r2, [r3, #4]
 80058cc:	e002      	b.n	80058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80058d4:	4b18      	ldr	r3, [pc, #96]	; (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d017      	beq.n	8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80058e0:	4b15      	ldr	r3, [pc, #84]	; (8005938 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80058e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e4:	0e1b      	lsrs	r3, r3, #24
 80058e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80058f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058f6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80058fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80058fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005906:	ee17 2a90 	vmov	r2, s15
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800590e:	e00c      	b.n	800592a <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	609a      	str	r2, [r3, #8]
}
 8005916:	e008      	b.n	800592a <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	609a      	str	r2, [r3, #8]
}
 800592a:	bf00      	nop
 800592c:	3724      	adds	r7, #36	; 0x24
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	46020c00 	.word	0x46020c00
 800593c:	4b742400 	.word	0x4b742400
 8005940:	46000000 	.word	0x46000000
 8005944:	0800ba60 	.word	0x0800ba60

08005948 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005948:	b480      	push	{r7}
 800594a:	b089      	sub	sp, #36	; 0x24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005950:	4bad      	ldr	r3, [pc, #692]	; (8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005958:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800595a:	4bab      	ldr	r3, [pc, #684]	; (8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800595c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005964:	4ba8      	ldr	r3, [pc, #672]	; (8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005968:	0a1b      	lsrs	r3, r3, #8
 800596a:	f003 030f 	and.w	r3, r3, #15
 800596e:	3301      	adds	r3, #1
 8005970:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005972:	4ba5      	ldr	r3, [pc, #660]	; (8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005976:	091b      	lsrs	r3, r3, #4
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800597e:	4ba2      	ldr	r3, [pc, #648]	; (8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005982:	08db      	lsrs	r3, r3, #3
 8005984:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	fb02 f303 	mul.w	r3, r2, r3
 800598e:	ee07 3a90 	vmov	s15, r3
 8005992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005996:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 8123 	beq.w	8005be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d062      	beq.n	8005a6e <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	f200 8081 	bhi.w	8005ab2 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d024      	beq.n	8005a00 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d17a      	bne.n	8005ab2 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	ee07 3a90 	vmov	s15, r3
 80059c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c6:	eddf 6a91 	vldr	s13, [pc, #580]	; 8005c0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80059ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ce:	4b8e      	ldr	r3, [pc, #568]	; (8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80059d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d6:	ee07 3a90 	vmov	s15, r3
 80059da:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80059de:	ed97 6a02 	vldr	s12, [r7, #8]
 80059e2:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80059e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80059ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80059ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80059f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059fa:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 80059fe:	e08f      	b.n	8005b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005a00:	4b81      	ldr	r3, [pc, #516]	; (8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d005      	beq.n	8005a18 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8005a0c:	4b7e      	ldr	r3, [pc, #504]	; (8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	0f1b      	lsrs	r3, r3, #28
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	e006      	b.n	8005a26 <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8005a18:	4b7b      	ldr	r3, [pc, #492]	; (8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005a1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a1e:	041b      	lsls	r3, r3, #16
 8005a20:	0f1b      	lsrs	r3, r3, #28
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	4a7b      	ldr	r2, [pc, #492]	; (8005c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8005a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a2c:	ee07 3a90 	vmov	s15, r3
 8005a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	ee07 3a90 	vmov	s15, r3
 8005a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	ee07 3a90 	vmov	s15, r3
 8005a48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a50:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005a54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a60:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a6c:	e058      	b.n	8005b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	ee07 3a90 	vmov	s15, r3
 8005a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a78:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005c0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005a7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a80:	4b61      	ldr	r3, [pc, #388]	; (8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a88:	ee07 3a90 	vmov	s15, r3
 8005a8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a90:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a94:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005a98:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005a9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005aa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ab0:	e036      	b.n	8005b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005ab2:	4b55      	ldr	r3, [pc, #340]	; (8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d005      	beq.n	8005aca <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 8005abe:	4b52      	ldr	r3, [pc, #328]	; (8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	0f1b      	lsrs	r3, r3, #28
 8005ac4:	f003 030f 	and.w	r3, r3, #15
 8005ac8:	e006      	b.n	8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8005aca:	4b4f      	ldr	r3, [pc, #316]	; (8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005acc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ad0:	041b      	lsls	r3, r3, #16
 8005ad2:	0f1b      	lsrs	r3, r3, #28
 8005ad4:	f003 030f 	and.w	r3, r3, #15
 8005ad8:	4a4e      	ldr	r2, [pc, #312]	; (8005c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8005ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ade:	ee07 3a90 	vmov	s15, r3
 8005ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	ee07 3a90 	vmov	s15, r3
 8005aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	ee07 3a90 	vmov	s15, r3
 8005afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005afe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b02:	eddf 5a43 	vldr	s11, [pc, #268]	; 8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b1e:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005b20:	4b39      	ldr	r3, [pc, #228]	; (8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d017      	beq.n	8005b5c <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005b2c:	4b36      	ldr	r3, [pc, #216]	; (8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b30:	0a5b      	lsrs	r3, r3, #9
 8005b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b36:	ee07 3a90 	vmov	s15, r3
 8005b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005b3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b42:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005b46:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b52:	ee17 2a90 	vmov	r2, s15
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	e002      	b.n	8005b62 <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005b62:	4b29      	ldr	r3, [pc, #164]	; (8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d017      	beq.n	8005b9e <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005b6e:	4b26      	ldr	r3, [pc, #152]	; (8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b72:	0c1b      	lsrs	r3, r3, #16
 8005b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b78:	ee07 3a90 	vmov	s15, r3
 8005b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005b80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b84:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005b88:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b94:	ee17 2a90 	vmov	r2, s15
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	605a      	str	r2, [r3, #4]
 8005b9c:	e002      	b.n	8005ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005ba4:	4b18      	ldr	r3, [pc, #96]	; (8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d017      	beq.n	8005be0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005bb0:	4b15      	ldr	r3, [pc, #84]	; (8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb4:	0e1b      	lsrs	r3, r3, #24
 8005bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bba:	ee07 3a90 	vmov	s15, r3
 8005bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005bc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bc6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005bca:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bd6:	ee17 2a90 	vmov	r2, s15
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8005bde:	e00c      	b.n	8005bfa <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	609a      	str	r2, [r3, #8]
}
 8005be6:	e008      	b.n	8005bfa <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	609a      	str	r2, [r3, #8]
}
 8005bfa:	bf00      	nop
 8005bfc:	3724      	adds	r7, #36	; 0x24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	46020c00 	.word	0x46020c00
 8005c0c:	4b742400 	.word	0x4b742400
 8005c10:	46000000 	.word	0x46000000
 8005c14:	0800ba60 	.word	0x0800ba60

08005c18 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08e      	sub	sp, #56	; 0x38
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005c22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c26:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8005c2a:	430b      	orrs	r3, r1
 8005c2c:	d145      	bne.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005c2e:	4ba7      	ldr	r3, [pc, #668]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005c30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c38:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005c3a:	4ba4      	ldr	r3, [pc, #656]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005c3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d108      	bne.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c4e:	d104      	bne.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005c50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c54:	637b      	str	r3, [r7, #52]	; 0x34
 8005c56:	f001 b9b3 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005c5a:	4b9c      	ldr	r3, [pc, #624]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c68:	d114      	bne.n	8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c70:	d110      	bne.n	8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c72:	4b96      	ldr	r3, [pc, #600]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c80:	d103      	bne.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005c82:	23fa      	movs	r3, #250	; 0xfa
 8005c84:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c86:	f001 b99b 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8005c8a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005c8e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c90:	f001 b996 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005c94:	4b8d      	ldr	r3, [pc, #564]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ca0:	d107      	bne.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ca8:	d103      	bne.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005caa:	4b89      	ldr	r3, [pc, #548]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005cac:	637b      	str	r3, [r7, #52]	; 0x34
 8005cae:	f001 b987 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005cb6:	f001 b983 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005cba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cbe:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005cc2:	430b      	orrs	r3, r1
 8005cc4:	d151      	bne.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005cc6:	4b81      	ldr	r3, [pc, #516]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005cc8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005ccc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005cd0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	2b80      	cmp	r3, #128	; 0x80
 8005cd6:	d035      	beq.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cda:	2b80      	cmp	r3, #128	; 0x80
 8005cdc:	d841      	bhi.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce0:	2b60      	cmp	r3, #96	; 0x60
 8005ce2:	d02a      	beq.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce6:	2b60      	cmp	r3, #96	; 0x60
 8005ce8:	d83b      	bhi.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cec:	2b40      	cmp	r3, #64	; 0x40
 8005cee:	d009      	beq.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	2b40      	cmp	r3, #64	; 0x40
 8005cf4:	d835      	bhi.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00c      	beq.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	2b20      	cmp	r3, #32
 8005d00:	d012      	beq.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005d02:	e02e      	b.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7ff fb4d 	bl	80053a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d12:	f001 b955 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d16:	f107 0318 	add.w	r3, r7, #24
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff fcac 	bl	8005678 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d24:	f001 b94c 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d28:	f107 030c 	add.w	r3, r7, #12
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7ff fe0b 	bl	8005948 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d36:	f001 b943 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005d3a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005d3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d40:	f001 b93e 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d44:	4b61      	ldr	r3, [pc, #388]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d50:	d103      	bne.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8005d52:	4b60      	ldr	r3, [pc, #384]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d54:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005d56:	f001 b933 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d5e:	f001 b92f 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d66:	f001 b92b 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005d6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d6e:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005d72:	430b      	orrs	r3, r1
 8005d74:	d158      	bne.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005d76:	4b55      	ldr	r3, [pc, #340]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005d78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005d7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d80:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d88:	d03b      	beq.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d90:	d846      	bhi.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d98:	d02e      	beq.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005da0:	d83e      	bhi.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005da8:	d00b      	beq.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db0:	d836      	bhi.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00d      	beq.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dbe:	d012      	beq.n	8005de6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005dc0:	e02e      	b.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7ff faee 	bl	80053a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dd0:	f001 b8f6 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dd4:	f107 0318 	add.w	r3, r7, #24
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff fc4d 	bl	8005678 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005de2:	f001 b8ed 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005de6:	f107 030c 	add.w	r3, r7, #12
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff fdac 	bl	8005948 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005df4:	f001 b8e4 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005df8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005dfc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dfe:	f001 b8df 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e02:	4b32      	ldr	r3, [pc, #200]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e0e:	d103      	bne.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8005e10:	4b30      	ldr	r3, [pc, #192]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e12:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e14:	f001 b8d4 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e1c:	f001 b8d0 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8005e20:	2300      	movs	r3, #0
 8005e22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e24:	f001 b8cc 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8005e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e2c:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8005e30:	430b      	orrs	r3, r1
 8005e32:	d126      	bne.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8005e34:	4b25      	ldr	r3, [pc, #148]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e3e:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8005e40:	4b22      	ldr	r3, [pc, #136]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4c:	d106      	bne.n	8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d103      	bne.n	8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8005e54:	4b1f      	ldr	r3, [pc, #124]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e56:	637b      	str	r3, [r7, #52]	; 0x34
 8005e58:	f001 b8b2 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8005e5c:	4b1b      	ldr	r3, [pc, #108]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e68:	d107      	bne.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e70:	d103      	bne.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8005e72:	4b19      	ldr	r3, [pc, #100]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e74:	637b      	str	r3, [r7, #52]	; 0x34
 8005e76:	f001 b8a3 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e7e:	f001 b89f 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8005e82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e86:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8005e8a:	430b      	orrs	r3, r1
 8005e8c:	d16e      	bne.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005e8e:	4b0f      	ldr	r3, [pc, #60]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e94:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005e98:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005ea0:	d03d      	beq.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005ea8:	d85c      	bhi.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005eb0:	d014      	beq.n	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005eb8:	d854      	bhi.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8005eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01f      	beq.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ec6:	d012      	beq.n	8005eee <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8005ec8:	e04c      	b.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8005eca:	bf00      	nop
 8005ecc:	46020c00 	.word	0x46020c00
 8005ed0:	0007a120 	.word	0x0007a120
 8005ed4:	00f42400 	.word	0x00f42400
 8005ed8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7ff fa61 	bl	80053a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005eea:	f001 b869 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005eee:	f107 0318 	add.w	r3, r7, #24
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7ff fbc0 	bl	8005678 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005efc:	f001 b860 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005f00:	4ba7      	ldr	r3, [pc, #668]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f0c:	d103      	bne.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8005f0e:	4ba5      	ldr	r3, [pc, #660]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005f10:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005f12:	f001 b855 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f1a:	f001 b851 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005f1e:	4ba0      	ldr	r3, [pc, #640]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0320 	and.w	r3, r3, #32
 8005f26:	2b20      	cmp	r3, #32
 8005f28:	d118      	bne.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005f2a:	4b9d      	ldr	r3, [pc, #628]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d005      	beq.n	8005f42 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005f36:	4b9a      	ldr	r3, [pc, #616]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	0e1b      	lsrs	r3, r3, #24
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	e006      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005f42:	4b97      	ldr	r3, [pc, #604]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f48:	041b      	lsls	r3, r3, #16
 8005f4a:	0e1b      	lsrs	r3, r3, #24
 8005f4c:	f003 030f 	and.w	r3, r3, #15
 8005f50:	4a95      	ldr	r2, [pc, #596]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f56:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005f58:	f001 b832 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f60:	f001 b82e 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f68:	f001 b82a 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005f6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f70:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8005f74:	430b      	orrs	r3, r1
 8005f76:	d17f      	bne.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005f78:	4b89      	ldr	r3, [pc, #548]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005f7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f82:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d165      	bne.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005f8a:	4b85      	ldr	r3, [pc, #532]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f90:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005f94:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005f9c:	d034      	beq.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005fa4:	d853      	bhi.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8005fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fac:	d00b      	beq.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fb4:	d84b      	bhi.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d016      	beq.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fc2:	d009      	beq.n	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8005fc4:	e043      	b.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7ff f9ec 	bl	80053a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005fd4:	f000 bff4 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fd8:	f107 0318 	add.w	r3, r7, #24
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7ff fb4b 	bl	8005678 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005fe6:	f000 bfeb 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005fea:	4b6d      	ldr	r3, [pc, #436]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff6:	d103      	bne.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8005ff8:	4b6a      	ldr	r3, [pc, #424]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005ffa:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005ffc:	f000 bfe0 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006000:	2300      	movs	r3, #0
 8006002:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006004:	f000 bfdc 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006008:	4b65      	ldr	r3, [pc, #404]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0320 	and.w	r3, r3, #32
 8006010:	2b20      	cmp	r3, #32
 8006012:	d118      	bne.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006014:	4b62      	ldr	r3, [pc, #392]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d005      	beq.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006020:	4b5f      	ldr	r3, [pc, #380]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	0e1b      	lsrs	r3, r3, #24
 8006026:	f003 030f 	and.w	r3, r3, #15
 800602a:	e006      	b.n	800603a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800602c:	4b5c      	ldr	r3, [pc, #368]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800602e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006032:	041b      	lsls	r3, r3, #16
 8006034:	0e1b      	lsrs	r3, r3, #24
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	4a5b      	ldr	r2, [pc, #364]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800603c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006040:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006042:	f000 bfbd 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800604a:	f000 bfb9 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006052:	f000 bfb5 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800605c:	d108      	bne.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800605e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006062:	4618      	mov	r0, r3
 8006064:	f7ff f9a0 	bl	80053a8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	637b      	str	r3, [r7, #52]	; 0x34
 800606c:	f000 bfa8 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8006070:	2300      	movs	r3, #0
 8006072:	637b      	str	r3, [r7, #52]	; 0x34
 8006074:	f000 bfa4 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800607c:	1e51      	subs	r1, r2, #1
 800607e:	430b      	orrs	r3, r1
 8006080:	d136      	bne.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006082:	4b47      	ldr	r3, [pc, #284]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006088:	f003 0303 	and.w	r3, r3, #3
 800608c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	2b00      	cmp	r3, #0
 8006092:	d104      	bne.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006094:	f7fe fb1a 	bl	80046cc <HAL_RCC_GetPCLK2Freq>
 8006098:	6378      	str	r0, [r7, #52]	; 0x34
 800609a:	f000 bf91 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d104      	bne.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80060a4:	f7fe f9dc 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 80060a8:	6378      	str	r0, [r7, #52]	; 0x34
 80060aa:	f000 bf89 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80060ae:	4b3c      	ldr	r3, [pc, #240]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ba:	d106      	bne.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80060bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d103      	bne.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 80060c2:	4b3a      	ldr	r3, [pc, #232]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80060c4:	637b      	str	r3, [r7, #52]	; 0x34
 80060c6:	f000 bf7b 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80060ca:	4b35      	ldr	r3, [pc, #212]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80060cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d107      	bne.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80060d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060da:	2b03      	cmp	r3, #3
 80060dc:	d104      	bne.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 80060de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060e2:	637b      	str	r3, [r7, #52]	; 0x34
 80060e4:	f000 bf6c 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	637b      	str	r3, [r7, #52]	; 0x34
 80060ec:	f000 bf68 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80060f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060f4:	1e91      	subs	r1, r2, #2
 80060f6:	430b      	orrs	r3, r1
 80060f8:	d136      	bne.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80060fa:	4b29      	ldr	r3, [pc, #164]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80060fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006100:	f003 030c 	and.w	r3, r3, #12
 8006104:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	2b00      	cmp	r3, #0
 800610a:	d104      	bne.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800610c:	f7fe faca 	bl	80046a4 <HAL_RCC_GetPCLK1Freq>
 8006110:	6378      	str	r0, [r7, #52]	; 0x34
 8006112:	f000 bf55 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	2b04      	cmp	r3, #4
 800611a:	d104      	bne.n	8006126 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800611c:	f7fe f9a0 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 8006120:	6378      	str	r0, [r7, #52]	; 0x34
 8006122:	f000 bf4d 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006126:	4b1e      	ldr	r3, [pc, #120]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800612e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006132:	d106      	bne.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006136:	2b08      	cmp	r3, #8
 8006138:	d103      	bne.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800613a:	4b1c      	ldr	r3, [pc, #112]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800613c:	637b      	str	r3, [r7, #52]	; 0x34
 800613e:	f000 bf3f 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006142:	4b17      	ldr	r3, [pc, #92]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006144:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b02      	cmp	r3, #2
 800614e:	d107      	bne.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006152:	2b0c      	cmp	r3, #12
 8006154:	d104      	bne.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8006156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800615a:	637b      	str	r3, [r7, #52]	; 0x34
 800615c:	f000 bf30 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	637b      	str	r3, [r7, #52]	; 0x34
 8006164:	f000 bf2c 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800616c:	1f11      	subs	r1, r2, #4
 800616e:	430b      	orrs	r3, r1
 8006170:	d13f      	bne.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006172:	4b0b      	ldr	r3, [pc, #44]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006178:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800617c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	2b00      	cmp	r3, #0
 8006182:	d104      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006184:	f7fe fa8e 	bl	80046a4 <HAL_RCC_GetPCLK1Freq>
 8006188:	6378      	str	r0, [r7, #52]	; 0x34
 800618a:	f000 bf19 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	2b10      	cmp	r3, #16
 8006192:	d10d      	bne.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006194:	f7fe f964 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 8006198:	6378      	str	r0, [r7, #52]	; 0x34
 800619a:	f000 bf11 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800619e:	bf00      	nop
 80061a0:	46020c00 	.word	0x46020c00
 80061a4:	02dc6c00 	.word	0x02dc6c00
 80061a8:	0800ba60 	.word	0x0800ba60
 80061ac:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80061b0:	4ba6      	ldr	r3, [pc, #664]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061bc:	d106      	bne.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80061be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c0:	2b20      	cmp	r3, #32
 80061c2:	d103      	bne.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 80061c4:	4ba2      	ldr	r3, [pc, #648]	; (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80061c6:	637b      	str	r3, [r7, #52]	; 0x34
 80061c8:	f000 befa 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80061cc:	4b9f      	ldr	r3, [pc, #636]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80061ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d107      	bne.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80061da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061dc:	2b30      	cmp	r3, #48	; 0x30
 80061de:	d104      	bne.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 80061e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061e4:	637b      	str	r3, [r7, #52]	; 0x34
 80061e6:	f000 beeb 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	637b      	str	r3, [r7, #52]	; 0x34
 80061ee:	f000 bee7 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80061f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061f6:	f1a2 0108 	sub.w	r1, r2, #8
 80061fa:	430b      	orrs	r3, r1
 80061fc:	d136      	bne.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80061fe:	4b93      	ldr	r3, [pc, #588]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006204:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006208:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800620a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620c:	2b00      	cmp	r3, #0
 800620e:	d104      	bne.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006210:	f7fe fa48 	bl	80046a4 <HAL_RCC_GetPCLK1Freq>
 8006214:	6378      	str	r0, [r7, #52]	; 0x34
 8006216:	f000 bed3 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621c:	2b40      	cmp	r3, #64	; 0x40
 800621e:	d104      	bne.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006220:	f7fe f91e 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 8006224:	6378      	str	r0, [r7, #52]	; 0x34
 8006226:	f000 becb 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800622a:	4b88      	ldr	r3, [pc, #544]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006236:	d106      	bne.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	2b80      	cmp	r3, #128	; 0x80
 800623c:	d103      	bne.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800623e:	4b84      	ldr	r3, [pc, #528]	; (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006240:	637b      	str	r3, [r7, #52]	; 0x34
 8006242:	f000 bebd 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006246:	4b81      	ldr	r3, [pc, #516]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800624c:	f003 0302 	and.w	r3, r3, #2
 8006250:	2b02      	cmp	r3, #2
 8006252:	d107      	bne.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006256:	2bc0      	cmp	r3, #192	; 0xc0
 8006258:	d104      	bne.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800625a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800625e:	637b      	str	r3, [r7, #52]	; 0x34
 8006260:	f000 beae 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	637b      	str	r3, [r7, #52]	; 0x34
 8006268:	f000 beaa 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800626c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006270:	f1a2 0110 	sub.w	r1, r2, #16
 8006274:	430b      	orrs	r3, r1
 8006276:	d139      	bne.n	80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006278:	4b74      	ldr	r3, [pc, #464]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800627a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800627e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006282:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	2b00      	cmp	r3, #0
 8006288:	d104      	bne.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800628a:	f7fe fa0b 	bl	80046a4 <HAL_RCC_GetPCLK1Freq>
 800628e:	6378      	str	r0, [r7, #52]	; 0x34
 8006290:	f000 be96 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800629a:	d104      	bne.n	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800629c:	f7fe f8e0 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 80062a0:	6378      	str	r0, [r7, #52]	; 0x34
 80062a2:	f000 be8d 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80062a6:	4b69      	ldr	r3, [pc, #420]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062b2:	d107      	bne.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ba:	d103      	bne.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 80062bc:	4b64      	ldr	r3, [pc, #400]	; (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80062be:	637b      	str	r3, [r7, #52]	; 0x34
 80062c0:	f000 be7e 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80062c4:	4b61      	ldr	r3, [pc, #388]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80062c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d108      	bne.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80062d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062d8:	d104      	bne.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 80062da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062de:	637b      	str	r3, [r7, #52]	; 0x34
 80062e0:	f000 be6e 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	637b      	str	r3, [r7, #52]	; 0x34
 80062e8:	f000 be6a 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80062ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062f0:	f1a2 0120 	sub.w	r1, r2, #32
 80062f4:	430b      	orrs	r3, r1
 80062f6:	d158      	bne.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80062f8:	4b54      	ldr	r3, [pc, #336]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80062fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062fe:	f003 0307 	and.w	r3, r3, #7
 8006302:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006306:	2b00      	cmp	r3, #0
 8006308:	d104      	bne.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800630a:	f7fe f9f3 	bl	80046f4 <HAL_RCC_GetPCLK3Freq>
 800630e:	6378      	str	r0, [r7, #52]	; 0x34
 8006310:	f000 be56 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	2b01      	cmp	r3, #1
 8006318:	d104      	bne.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800631a:	f7fe f8a1 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 800631e:	6378      	str	r0, [r7, #52]	; 0x34
 8006320:	f000 be4e 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006324:	4b49      	ldr	r3, [pc, #292]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800632c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006330:	d106      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8006332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006334:	2b02      	cmp	r3, #2
 8006336:	d103      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8006338:	4b45      	ldr	r3, [pc, #276]	; (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800633a:	637b      	str	r3, [r7, #52]	; 0x34
 800633c:	f000 be40 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006340:	4b42      	ldr	r3, [pc, #264]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006342:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	2b02      	cmp	r3, #2
 800634c:	d107      	bne.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	2b03      	cmp	r3, #3
 8006352:	d104      	bne.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8006354:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006358:	637b      	str	r3, [r7, #52]	; 0x34
 800635a:	f000 be31 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800635e:	4b3b      	ldr	r3, [pc, #236]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0320 	and.w	r3, r3, #32
 8006366:	2b20      	cmp	r3, #32
 8006368:	d11b      	bne.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	2b04      	cmp	r3, #4
 800636e:	d118      	bne.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006370:	4b36      	ldr	r3, [pc, #216]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d005      	beq.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800637c:	4b33      	ldr	r3, [pc, #204]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	0e1b      	lsrs	r3, r3, #24
 8006382:	f003 030f 	and.w	r3, r3, #15
 8006386:	e006      	b.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8006388:	4b30      	ldr	r3, [pc, #192]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800638a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800638e:	041b      	lsls	r3, r3, #16
 8006390:	0e1b      	lsrs	r3, r3, #24
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	4a2f      	ldr	r2, [pc, #188]	; (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800639c:	637b      	str	r3, [r7, #52]	; 0x34
 800639e:	f000 be0f 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	637b      	str	r3, [r7, #52]	; 0x34
 80063a6:	f000 be0b 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80063aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063ae:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80063b2:	430b      	orrs	r3, r1
 80063b4:	d172      	bne.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80063b6:	4b25      	ldr	r3, [pc, #148]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80063b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80063bc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80063c0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c8:	d104      	bne.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80063ca:	f7fe f849 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 80063ce:	6378      	str	r0, [r7, #52]	; 0x34
 80063d0:	f000 bdf6 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80063d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063da:	d108      	bne.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063dc:	f107 0318 	add.w	r3, r7, #24
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff f949 	bl	8005678 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	637b      	str	r3, [r7, #52]	; 0x34
 80063ea:	f000 bde9 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d104      	bne.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80063f4:	f7fe f93c 	bl	8004670 <HAL_RCC_GetHCLKFreq>
 80063f8:	6378      	str	r0, [r7, #52]	; 0x34
 80063fa:	f000 bde1 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80063fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006400:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006404:	d128      	bne.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006406:	4b11      	ldr	r3, [pc, #68]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	2b20      	cmp	r3, #32
 8006410:	d118      	bne.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006412:	4b0e      	ldr	r3, [pc, #56]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d005      	beq.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800641e:	4b0b      	ldr	r3, [pc, #44]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	0e1b      	lsrs	r3, r3, #24
 8006424:	f003 030f 	and.w	r3, r3, #15
 8006428:	e006      	b.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800642a:	4b08      	ldr	r3, [pc, #32]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800642c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006430:	041b      	lsls	r3, r3, #16
 8006432:	0e1b      	lsrs	r3, r3, #24
 8006434:	f003 030f 	and.w	r3, r3, #15
 8006438:	4a06      	ldr	r2, [pc, #24]	; (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800643a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800643e:	637b      	str	r3, [r7, #52]	; 0x34
 8006440:	f000 bdbe 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8006444:	2300      	movs	r3, #0
 8006446:	637b      	str	r3, [r7, #52]	; 0x34
 8006448:	f000 bdba 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800644c:	46020c00 	.word	0x46020c00
 8006450:	00f42400 	.word	0x00f42400
 8006454:	0800ba60 	.word	0x0800ba60
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006458:	4baf      	ldr	r3, [pc, #700]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006460:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006464:	d107      	bne.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800646c:	d103      	bne.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 800646e:	4bab      	ldr	r3, [pc, #684]	; (800671c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006470:	637b      	str	r3, [r7, #52]	; 0x34
 8006472:	f000 bda5 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006476:	4ba8      	ldr	r3, [pc, #672]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800647e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006482:	d107      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8006484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006486:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800648a:	d103      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 800648c:	4ba3      	ldr	r3, [pc, #652]	; (800671c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800648e:	637b      	str	r3, [r7, #52]	; 0x34
 8006490:	f000 bd96 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	637b      	str	r3, [r7, #52]	; 0x34
 8006498:	f000 bd92 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800649c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064a0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80064a4:	430b      	orrs	r3, r1
 80064a6:	d158      	bne.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80064a8:	4b9b      	ldr	r3, [pc, #620]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80064aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80064ae:	f003 0307 	and.w	r3, r3, #7
 80064b2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80064b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	d84b      	bhi.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 80064ba:	a201      	add	r2, pc, #4	; (adr r2, 80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80064bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c0:	080064f9 	.word	0x080064f9
 80064c4:	080064d5 	.word	0x080064d5
 80064c8:	080064e7 	.word	0x080064e7
 80064cc:	08006503 	.word	0x08006503
 80064d0:	0800650d 	.word	0x0800650d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fe ff65 	bl	80053a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064e2:	f000 bd6d 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064e6:	f107 030c 	add.w	r3, r7, #12
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7ff fa2c 	bl	8005948 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064f4:	f000 bd64 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80064f8:	f7fe f8ba 	bl	8004670 <HAL_RCC_GetHCLKFreq>
 80064fc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80064fe:	f000 bd5f 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006502:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006506:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006508:	f000 bd5a 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800650c:	4b82      	ldr	r3, [pc, #520]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0320 	and.w	r3, r3, #32
 8006514:	2b20      	cmp	r3, #32
 8006516:	d118      	bne.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006518:	4b7f      	ldr	r3, [pc, #508]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d005      	beq.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8006524:	4b7c      	ldr	r3, [pc, #496]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	0e1b      	lsrs	r3, r3, #24
 800652a:	f003 030f 	and.w	r3, r3, #15
 800652e:	e006      	b.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8006530:	4b79      	ldr	r3, [pc, #484]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006532:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006536:	041b      	lsls	r3, r3, #16
 8006538:	0e1b      	lsrs	r3, r3, #24
 800653a:	f003 030f 	and.w	r3, r3, #15
 800653e:	4a78      	ldr	r2, [pc, #480]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8006540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006544:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006546:	f000 bd3b 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800654e:	f000 bd37 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006552:	2300      	movs	r3, #0
 8006554:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006556:	f000 bd33 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800655a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800655e:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8006562:	430b      	orrs	r3, r1
 8006564:	d167      	bne.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006566:	4b6c      	ldr	r3, [pc, #432]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800656c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006570:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006578:	d036      	beq.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006580:	d855      	bhi.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006588:	d029      	beq.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006590:	d84d      	bhi.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006598:	d013      	beq.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065a0:	d845      	bhi.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d015      	beq.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 80065a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ae:	d13e      	bne.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fe fef7 	bl	80053a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065be:	f000 bcff 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065c2:	f107 030c 	add.w	r3, r7, #12
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7ff f9be 	bl	8005948 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065d0:	f000 bcf6 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80065d4:	f7fe f84c 	bl	8004670 <HAL_RCC_GetHCLKFreq>
 80065d8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80065da:	f000 bcf1 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80065de:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80065e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065e4:	f000 bcec 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80065e8:	4b4b      	ldr	r3, [pc, #300]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0320 	and.w	r3, r3, #32
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	d118      	bne.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80065f4:	4b48      	ldr	r3, [pc, #288]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d005      	beq.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8006600:	4b45      	ldr	r3, [pc, #276]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	0e1b      	lsrs	r3, r3, #24
 8006606:	f003 030f 	and.w	r3, r3, #15
 800660a:	e006      	b.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800660c:	4b42      	ldr	r3, [pc, #264]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800660e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006612:	041b      	lsls	r3, r3, #16
 8006614:	0e1b      	lsrs	r3, r3, #24
 8006616:	f003 030f 	and.w	r3, r3, #15
 800661a:	4a41      	ldr	r2, [pc, #260]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800661c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006620:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006622:	f000 bccd 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800662a:	f000 bcc9 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006632:	f000 bcc5 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800663a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800663e:	430b      	orrs	r3, r1
 8006640:	d14c      	bne.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006642:	4b35      	ldr	r3, [pc, #212]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006648:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800664c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	2b00      	cmp	r3, #0
 8006652:	d104      	bne.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006654:	f7fe f826 	bl	80046a4 <HAL_RCC_GetPCLK1Freq>
 8006658:	6378      	str	r0, [r7, #52]	; 0x34
 800665a:	f000 bcb1 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800665e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006664:	d104      	bne.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006666:	f7fd fefb 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 800666a:	6378      	str	r0, [r7, #52]	; 0x34
 800666c:	f000 bca8 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006670:	4b29      	ldr	r3, [pc, #164]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800667c:	d107      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006684:	d103      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 8006686:	4b25      	ldr	r3, [pc, #148]	; (800671c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006688:	637b      	str	r3, [r7, #52]	; 0x34
 800668a:	f000 bc99 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800668e:	4b22      	ldr	r3, [pc, #136]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0320 	and.w	r3, r3, #32
 8006696:	2b20      	cmp	r3, #32
 8006698:	d11c      	bne.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800669a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066a0:	d118      	bne.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80066a2:	4b1d      	ldr	r3, [pc, #116]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d005      	beq.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80066ae:	4b1a      	ldr	r3, [pc, #104]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	0e1b      	lsrs	r3, r3, #24
 80066b4:	f003 030f 	and.w	r3, r3, #15
 80066b8:	e006      	b.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80066ba:	4b17      	ldr	r3, [pc, #92]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80066bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80066c0:	041b      	lsls	r3, r3, #16
 80066c2:	0e1b      	lsrs	r3, r3, #24
 80066c4:	f003 030f 	and.w	r3, r3, #15
 80066c8:	4a15      	ldr	r2, [pc, #84]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80066ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ce:	637b      	str	r3, [r7, #52]	; 0x34
 80066d0:	f000 bc76 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	637b      	str	r3, [r7, #52]	; 0x34
 80066d8:	f000 bc72 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80066dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066e0:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80066e4:	430b      	orrs	r3, r1
 80066e6:	d153      	bne.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80066e8:	4b0b      	ldr	r3, [pc, #44]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80066ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80066f2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80066f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d104      	bne.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80066fa:	f7fd ffd3 	bl	80046a4 <HAL_RCC_GetPCLK1Freq>
 80066fe:	6378      	str	r0, [r7, #52]	; 0x34
 8006700:	f000 bc5e 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800670a:	d10b      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800670c:	f7fd fea8 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 8006710:	6378      	str	r0, [r7, #52]	; 0x34
 8006712:	f000 bc55 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006716:	bf00      	nop
 8006718:	46020c00 	.word	0x46020c00
 800671c:	00f42400 	.word	0x00f42400
 8006720:	0800ba60 	.word	0x0800ba60
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006724:	4ba1      	ldr	r3, [pc, #644]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800672c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006730:	d107      	bne.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006738:	d103      	bne.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 800673a:	4b9d      	ldr	r3, [pc, #628]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800673c:	637b      	str	r3, [r7, #52]	; 0x34
 800673e:	f000 bc3f 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006742:	4b9a      	ldr	r3, [pc, #616]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0320 	and.w	r3, r3, #32
 800674a:	2b20      	cmp	r3, #32
 800674c:	d11c      	bne.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006754:	d118      	bne.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006756:	4b95      	ldr	r3, [pc, #596]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d005      	beq.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8006762:	4b92      	ldr	r3, [pc, #584]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	0e1b      	lsrs	r3, r3, #24
 8006768:	f003 030f 	and.w	r3, r3, #15
 800676c:	e006      	b.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800676e:	4b8f      	ldr	r3, [pc, #572]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006770:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006774:	041b      	lsls	r3, r3, #16
 8006776:	0e1b      	lsrs	r3, r3, #24
 8006778:	f003 030f 	and.w	r3, r3, #15
 800677c:	4a8d      	ldr	r2, [pc, #564]	; (80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800677e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006782:	637b      	str	r3, [r7, #52]	; 0x34
 8006784:	f000 bc1c 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006788:	2300      	movs	r3, #0
 800678a:	637b      	str	r3, [r7, #52]	; 0x34
 800678c:	f000 bc18 	b.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006794:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006798:	430b      	orrs	r3, r1
 800679a:	d151      	bne.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800679c:	4b83      	ldr	r3, [pc, #524]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800679e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80067a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067a6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80067a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067aa:	2bc0      	cmp	r3, #192	; 0xc0
 80067ac:	d024      	beq.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	2bc0      	cmp	r3, #192	; 0xc0
 80067b2:	d842      	bhi.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80067b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b6:	2b80      	cmp	r3, #128	; 0x80
 80067b8:	d00d      	beq.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 80067ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067bc:	2b80      	cmp	r3, #128	; 0x80
 80067be:	d83c      	bhi.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 80067c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c8:	2b40      	cmp	r3, #64	; 0x40
 80067ca:	d011      	beq.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 80067cc:	e035      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80067ce:	f7fd ff91 	bl	80046f4 <HAL_RCC_GetPCLK3Freq>
 80067d2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80067d4:	e3f4      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067d6:	4b75      	ldr	r3, [pc, #468]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067e2:	d102      	bne.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 80067e4:	4b72      	ldr	r3, [pc, #456]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80067e6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80067e8:	e3ea      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067ee:	e3e7      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80067f0:	f7fd fe36 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 80067f4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80067f6:	e3e3      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80067f8:	4b6c      	ldr	r3, [pc, #432]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0320 	and.w	r3, r3, #32
 8006800:	2b20      	cmp	r3, #32
 8006802:	d117      	bne.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006804:	4b69      	ldr	r3, [pc, #420]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d005      	beq.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8006810:	4b66      	ldr	r3, [pc, #408]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	0e1b      	lsrs	r3, r3, #24
 8006816:	f003 030f 	and.w	r3, r3, #15
 800681a:	e006      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 800681c:	4b63      	ldr	r3, [pc, #396]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800681e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006822:	041b      	lsls	r3, r3, #16
 8006824:	0e1b      	lsrs	r3, r3, #24
 8006826:	f003 030f 	and.w	r3, r3, #15
 800682a:	4a62      	ldr	r2, [pc, #392]	; (80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800682c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006830:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006832:	e3c5      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006838:	e3c2      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800683e:	e3bf      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006844:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8006848:	430b      	orrs	r3, r1
 800684a:	d147      	bne.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800684c:	4b57      	ldr	r3, [pc, #348]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800684e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006852:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006856:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685a:	2b00      	cmp	r3, #0
 800685c:	d103      	bne.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800685e:	f7fd ff21 	bl	80046a4 <HAL_RCC_GetPCLK1Freq>
 8006862:	6378      	str	r0, [r7, #52]	; 0x34
 8006864:	e3ac      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006868:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800686c:	d103      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800686e:	f7fd fdf7 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 8006872:	6378      	str	r0, [r7, #52]	; 0x34
 8006874:	e3a4      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006876:	4b4d      	ldr	r3, [pc, #308]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800687e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006882:	d106      	bne.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8006884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800688a:	d102      	bne.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 800688c:	4b48      	ldr	r3, [pc, #288]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800688e:	637b      	str	r3, [r7, #52]	; 0x34
 8006890:	e396      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006892:	4b46      	ldr	r3, [pc, #280]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0320 	and.w	r3, r3, #32
 800689a:	2b20      	cmp	r3, #32
 800689c:	d11b      	bne.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80068a4:	d117      	bne.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068a6:	4b41      	ldr	r3, [pc, #260]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d005      	beq.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80068b2:	4b3e      	ldr	r3, [pc, #248]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	0e1b      	lsrs	r3, r3, #24
 80068b8:	f003 030f 	and.w	r3, r3, #15
 80068bc:	e006      	b.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 80068be:	4b3b      	ldr	r3, [pc, #236]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80068c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068c4:	041b      	lsls	r3, r3, #16
 80068c6:	0e1b      	lsrs	r3, r3, #24
 80068c8:	f003 030f 	and.w	r3, r3, #15
 80068cc:	4a39      	ldr	r2, [pc, #228]	; (80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80068ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068d2:	637b      	str	r3, [r7, #52]	; 0x34
 80068d4:	e374      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	637b      	str	r3, [r7, #52]	; 0x34
 80068da:	e371      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80068dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068e0:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80068e4:	430b      	orrs	r3, r1
 80068e6:	d16a      	bne.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80068e8:	4b30      	ldr	r3, [pc, #192]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80068ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80068ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068f2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d120      	bne.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80068fa:	4b2c      	ldr	r3, [pc, #176]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0320 	and.w	r3, r3, #32
 8006902:	2b20      	cmp	r3, #32
 8006904:	d117      	bne.n	8006936 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006906:	4b29      	ldr	r3, [pc, #164]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d005      	beq.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 8006912:	4b26      	ldr	r3, [pc, #152]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	0e1b      	lsrs	r3, r3, #24
 8006918:	f003 030f 	and.w	r3, r3, #15
 800691c:	e006      	b.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800691e:	4b23      	ldr	r3, [pc, #140]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006920:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006924:	041b      	lsls	r3, r3, #16
 8006926:	0e1b      	lsrs	r3, r3, #24
 8006928:	f003 030f 	and.w	r3, r3, #15
 800692c:	4a21      	ldr	r2, [pc, #132]	; (80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800692e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006932:	637b      	str	r3, [r7, #52]	; 0x34
 8006934:	e344      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8006936:	2300      	movs	r3, #0
 8006938:	637b      	str	r3, [r7, #52]	; 0x34
 800693a:	e341      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800693c:	4b1b      	ldr	r3, [pc, #108]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800693e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006942:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006946:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800694a:	d112      	bne.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006952:	d10e      	bne.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006954:	4b15      	ldr	r3, [pc, #84]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006956:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800695a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800695e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006962:	d102      	bne.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8006964:	23fa      	movs	r3, #250	; 0xfa
 8006966:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006968:	e32a      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800696a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800696e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006970:	e326      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006972:	4b0e      	ldr	r3, [pc, #56]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800697a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800697e:	d106      	bne.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8006980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006986:	d102      	bne.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8006988:	4b09      	ldr	r3, [pc, #36]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800698a:	637b      	str	r3, [r7, #52]	; 0x34
 800698c:	e318      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800698e:	4b07      	ldr	r3, [pc, #28]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006994:	f003 0302 	and.w	r3, r3, #2
 8006998:	2b02      	cmp	r3, #2
 800699a:	d10d      	bne.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 800699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069a2:	d109      	bne.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 80069a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069a8:	637b      	str	r3, [r7, #52]	; 0x34
 80069aa:	e309      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80069ac:	46020c00 	.word	0x46020c00
 80069b0:	00f42400 	.word	0x00f42400
 80069b4:	0800ba60 	.word	0x0800ba60
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	637b      	str	r3, [r7, #52]	; 0x34
 80069bc:	e300      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80069be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069c2:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80069c6:	430b      	orrs	r3, r1
 80069c8:	d164      	bne.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80069ca:	4ba2      	ldr	r3, [pc, #648]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80069cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80069d4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d120      	bne.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80069dc:	4b9d      	ldr	r3, [pc, #628]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0320 	and.w	r3, r3, #32
 80069e4:	2b20      	cmp	r3, #32
 80069e6:	d117      	bne.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069e8:	4b9a      	ldr	r3, [pc, #616]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d005      	beq.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 80069f4:	4b97      	ldr	r3, [pc, #604]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	0e1b      	lsrs	r3, r3, #24
 80069fa:	f003 030f 	and.w	r3, r3, #15
 80069fe:	e006      	b.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8006a00:	4b94      	ldr	r3, [pc, #592]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006a02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a06:	041b      	lsls	r3, r3, #16
 8006a08:	0e1b      	lsrs	r3, r3, #24
 8006a0a:	f003 030f 	and.w	r3, r3, #15
 8006a0e:	4a92      	ldr	r2, [pc, #584]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8006a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a14:	637b      	str	r3, [r7, #52]	; 0x34
 8006a16:	e2d3      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a1c:	e2d0      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006a1e:	4b8d      	ldr	r3, [pc, #564]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a2c:	d112      	bne.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a34:	d10e      	bne.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a36:	4b87      	ldr	r3, [pc, #540]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a44:	d102      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 8006a46:	23fa      	movs	r3, #250	; 0xfa
 8006a48:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a4a:	e2b9      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006a4c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a50:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a52:	e2b5      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006a54:	4b7f      	ldr	r3, [pc, #508]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a60:	d106      	bne.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a68:	d102      	bne.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8006a6a:	4b7c      	ldr	r3, [pc, #496]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a6e:	e2a7      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006a70:	4b78      	ldr	r3, [pc, #480]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006a72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d107      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a84:	d103      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8006a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a8c:	e298      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	637b      	str	r3, [r7, #52]	; 0x34
 8006a92:	e295      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006a94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a98:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006a9c:	430b      	orrs	r3, r1
 8006a9e:	d147      	bne.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006aa0:	4b6c      	ldr	r3, [pc, #432]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006aa6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006aaa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d103      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ab2:	f7fd fdf7 	bl	80046a4 <HAL_RCC_GetPCLK1Freq>
 8006ab6:	6378      	str	r0, [r7, #52]	; 0x34
 8006ab8:	e282      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006aba:	4b66      	ldr	r3, [pc, #408]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ac8:	d112      	bne.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8006aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006acc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ad0:	d10e      	bne.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ad2:	4b60      	ldr	r3, [pc, #384]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006adc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ae0:	d102      	bne.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8006ae2:	23fa      	movs	r3, #250	; 0xfa
 8006ae4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ae6:	e26b      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006ae8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006aec:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006aee:	e267      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006af0:	4b58      	ldr	r3, [pc, #352]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006afc:	d106      	bne.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b04:	d102      	bne.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8006b06:	4b55      	ldr	r3, [pc, #340]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006b08:	637b      	str	r3, [r7, #52]	; 0x34
 8006b0a:	e259      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006b0c:	4b51      	ldr	r3, [pc, #324]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d107      	bne.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006b20:	d103      	bne.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 8006b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b26:	637b      	str	r3, [r7, #52]	; 0x34
 8006b28:	e24a      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b2e:	e247      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b34:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8006b38:	430b      	orrs	r3, r1
 8006b3a:	d12d      	bne.n	8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006b3c:	4b45      	ldr	r3, [pc, #276]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b42:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006b46:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006b48:	4b42      	ldr	r3, [pc, #264]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b54:	d105      	bne.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d102      	bne.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8006b5c:	4b3f      	ldr	r3, [pc, #252]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b60:	e22e      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b68:	d107      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fe fc1a 	bl	80053a8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b76:	637b      	str	r3, [r7, #52]	; 0x34
 8006b78:	e222      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b80:	d107      	bne.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b82:	f107 0318 	add.w	r3, r7, #24
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7fe fd76 	bl	8005678 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b90:	e216      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	637b      	str	r3, [r7, #52]	; 0x34
 8006b96:	e213      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b9c:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8006ba0:	430b      	orrs	r3, r1
 8006ba2:	d15d      	bne.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006ba4:	4b2b      	ldr	r3, [pc, #172]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006baa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006bae:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bb6:	d028      	beq.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bbe:	d845      	bhi.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bc6:	d013      	beq.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bce:	d83d      	bhi.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d004      	beq.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bdc:	d004      	beq.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8006bde:	e035      	b.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006be0:	f7fd fd74 	bl	80046cc <HAL_RCC_GetPCLK2Freq>
 8006be4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006be6:	e1eb      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006be8:	f7fd fc3a 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 8006bec:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006bee:	e1e7      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bf0:	4b18      	ldr	r3, [pc, #96]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bfc:	d102      	bne.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8006bfe:	4b17      	ldr	r3, [pc, #92]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006c00:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c02:	e1dd      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c08:	e1da      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006c0a:	4b12      	ldr	r3, [pc, #72]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0320 	and.w	r3, r3, #32
 8006c12:	2b20      	cmp	r3, #32
 8006c14:	d117      	bne.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c16:	4b0f      	ldr	r3, [pc, #60]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d005      	beq.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 8006c22:	4b0c      	ldr	r3, [pc, #48]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	0e1b      	lsrs	r3, r3, #24
 8006c28:	f003 030f 	and.w	r3, r3, #15
 8006c2c:	e006      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8006c2e:	4b09      	ldr	r3, [pc, #36]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006c30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c34:	041b      	lsls	r3, r3, #16
 8006c36:	0e1b      	lsrs	r3, r3, #24
 8006c38:	f003 030f 	and.w	r3, r3, #15
 8006c3c:	4a06      	ldr	r2, [pc, #24]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8006c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c42:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c44:	e1bc      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c4a:	e1b9      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c50:	e1b6      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006c52:	bf00      	nop
 8006c54:	46020c00 	.word	0x46020c00
 8006c58:	0800ba60 	.word	0x0800ba60
 8006c5c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006c60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c64:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8006c68:	430b      	orrs	r3, r1
 8006c6a:	d156      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006c6c:	4ba5      	ldr	r3, [pc, #660]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c76:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c7e:	d028      	beq.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8006c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c86:	d845      	bhi.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8006c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c8e:	d013      	beq.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8006c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c96:	d83d      	bhi.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8006c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d004      	beq.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ca4:	d004      	beq.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8006ca6:	e035      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006ca8:	f7fd fcfc 	bl	80046a4 <HAL_RCC_GetPCLK1Freq>
 8006cac:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006cae:	e187      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006cb0:	f7fd fbd6 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 8006cb4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006cb6:	e183      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cb8:	4b92      	ldr	r3, [pc, #584]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cc4:	d102      	bne.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8006cc6:	4b90      	ldr	r3, [pc, #576]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8006cc8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006cca:	e179      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cd0:	e176      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006cd2:	4b8c      	ldr	r3, [pc, #560]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b20      	cmp	r3, #32
 8006cdc:	d117      	bne.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006cde:	4b89      	ldr	r3, [pc, #548]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d005      	beq.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8006cea:	4b86      	ldr	r3, [pc, #536]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	0e1b      	lsrs	r3, r3, #24
 8006cf0:	f003 030f 	and.w	r3, r3, #15
 8006cf4:	e006      	b.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8006cf6:	4b83      	ldr	r3, [pc, #524]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006cf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cfc:	041b      	lsls	r3, r3, #16
 8006cfe:	0e1b      	lsrs	r3, r3, #24
 8006d00:	f003 030f 	and.w	r3, r3, #15
 8006d04:	4a81      	ldr	r2, [pc, #516]	; (8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8006d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d0a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d0c:	e158      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d12:	e155      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006d14:	2300      	movs	r3, #0
 8006d16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d18:	e152      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006d1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d1e:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8006d22:	430b      	orrs	r3, r1
 8006d24:	d177      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006d26:	4b77      	ldr	r3, [pc, #476]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006d28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d2c:	f003 0318 	and.w	r3, r3, #24
 8006d30:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	2b18      	cmp	r3, #24
 8006d36:	d86b      	bhi.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8006d38:	a201      	add	r2, pc, #4	; (adr r2, 8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8006d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3e:	bf00      	nop
 8006d40:	08006da5 	.word	0x08006da5
 8006d44:	08006e11 	.word	0x08006e11
 8006d48:	08006e11 	.word	0x08006e11
 8006d4c:	08006e11 	.word	0x08006e11
 8006d50:	08006e11 	.word	0x08006e11
 8006d54:	08006e11 	.word	0x08006e11
 8006d58:	08006e11 	.word	0x08006e11
 8006d5c:	08006e11 	.word	0x08006e11
 8006d60:	08006dad 	.word	0x08006dad
 8006d64:	08006e11 	.word	0x08006e11
 8006d68:	08006e11 	.word	0x08006e11
 8006d6c:	08006e11 	.word	0x08006e11
 8006d70:	08006e11 	.word	0x08006e11
 8006d74:	08006e11 	.word	0x08006e11
 8006d78:	08006e11 	.word	0x08006e11
 8006d7c:	08006e11 	.word	0x08006e11
 8006d80:	08006db5 	.word	0x08006db5
 8006d84:	08006e11 	.word	0x08006e11
 8006d88:	08006e11 	.word	0x08006e11
 8006d8c:	08006e11 	.word	0x08006e11
 8006d90:	08006e11 	.word	0x08006e11
 8006d94:	08006e11 	.word	0x08006e11
 8006d98:	08006e11 	.word	0x08006e11
 8006d9c:	08006e11 	.word	0x08006e11
 8006da0:	08006dcf 	.word	0x08006dcf
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006da4:	f7fd fca6 	bl	80046f4 <HAL_RCC_GetPCLK3Freq>
 8006da8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006daa:	e109      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006dac:	f7fd fb58 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 8006db0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006db2:	e105      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006db4:	4b53      	ldr	r3, [pc, #332]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dc0:	d102      	bne.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8006dc2:	4b51      	ldr	r3, [pc, #324]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8006dc4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006dc6:	e0fb      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dcc:	e0f8      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006dce:	4b4d      	ldr	r3, [pc, #308]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0320 	and.w	r3, r3, #32
 8006dd6:	2b20      	cmp	r3, #32
 8006dd8:	d117      	bne.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006dda:	4b4a      	ldr	r3, [pc, #296]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d005      	beq.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8006de6:	4b47      	ldr	r3, [pc, #284]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	0e1b      	lsrs	r3, r3, #24
 8006dec:	f003 030f 	and.w	r3, r3, #15
 8006df0:	e006      	b.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8006df2:	4b44      	ldr	r3, [pc, #272]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006df4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006df8:	041b      	lsls	r3, r3, #16
 8006dfa:	0e1b      	lsrs	r3, r3, #24
 8006dfc:	f003 030f 	and.w	r3, r3, #15
 8006e00:	4a42      	ldr	r2, [pc, #264]	; (8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8006e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e06:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e08:	e0da      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e0e:	e0d7      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e14:	e0d4      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006e16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e1a:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8006e1e:	430b      	orrs	r3, r1
 8006e20:	d155      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006e22:	4b38      	ldr	r3, [pc, #224]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006e24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006e28:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006e2c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e34:	d013      	beq.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8006e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e3c:	d844      	bhi.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e44:	d013      	beq.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8006e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e4c:	d83c      	bhi.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d014      	beq.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8006e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e5a:	d014      	beq.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8006e5c:	e034      	b.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e5e:	f107 0318 	add.w	r3, r7, #24
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fe fc08 	bl	8005678 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e6c:	e0a8      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fe fa98 	bl	80053a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e7c:	e0a0      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006e7e:	f7fd faef 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 8006e82:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006e84:	e09c      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006e86:	4b1f      	ldr	r3, [pc, #124]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0320 	and.w	r3, r3, #32
 8006e8e:	2b20      	cmp	r3, #32
 8006e90:	d117      	bne.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e92:	4b1c      	ldr	r3, [pc, #112]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d005      	beq.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8006e9e:	4b19      	ldr	r3, [pc, #100]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	0e1b      	lsrs	r3, r3, #24
 8006ea4:	f003 030f 	and.w	r3, r3, #15
 8006ea8:	e006      	b.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8006eaa:	4b16      	ldr	r3, [pc, #88]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006eac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006eb0:	041b      	lsls	r3, r3, #16
 8006eb2:	0e1b      	lsrs	r3, r3, #24
 8006eb4:	f003 030f 	and.w	r3, r3, #15
 8006eb8:	4a14      	ldr	r2, [pc, #80]	; (8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8006eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ebe:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ec0:	e07e      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ec6:	e07b      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ecc:	e078      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8006ece:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ed2:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8006ed6:	430b      	orrs	r3, r1
 8006ed8:	d138      	bne.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8006eda:	4b0a      	ldr	r3, [pc, #40]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006edc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ee4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8006ee6:	4b07      	ldr	r3, [pc, #28]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8006ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d10d      	bne.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10a      	bne.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8006efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006efe:	637b      	str	r3, [r7, #52]	; 0x34
 8006f00:	e05e      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006f02:	bf00      	nop
 8006f04:	46020c00 	.word	0x46020c00
 8006f08:	00f42400 	.word	0x00f42400
 8006f0c:	0800ba60 	.word	0x0800ba60
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8006f10:	4b2e      	ldr	r3, [pc, #184]	; (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8006f12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f1e:	d112      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8006f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f26:	d10e      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006f28:	4b28      	ldr	r3, [pc, #160]	; (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8006f2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f36:	d102      	bne.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8006f38:	23fa      	movs	r3, #250	; 0xfa
 8006f3a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006f3c:	e040      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006f3e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006f42:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006f44:	e03c      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8006f46:	2300      	movs	r3, #0
 8006f48:	637b      	str	r3, [r7, #52]	; 0x34
 8006f4a:	e039      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8006f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f50:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006f54:	430b      	orrs	r3, r1
 8006f56:	d131      	bne.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006f58:	4b1c      	ldr	r3, [pc, #112]	; (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8006f5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006f5e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006f62:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006f64:	4b19      	ldr	r3, [pc, #100]	; (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f70:	d105      	bne.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8006f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d102      	bne.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8006f78:	4b15      	ldr	r3, [pc, #84]	; (8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8006f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f7c:	e020      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8006f7e:	4b13      	ldr	r3, [pc, #76]	; (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f8a:	d106      	bne.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f92:	d102      	bne.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8006f94:	4b0f      	ldr	r3, [pc, #60]	; (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8006f96:	637b      	str	r3, [r7, #52]	; 0x34
 8006f98:	e012      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8006f9a:	4b0c      	ldr	r3, [pc, #48]	; (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa6:	d106      	bne.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fae:	d102      	bne.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8006fb0:	4b09      	ldr	r3, [pc, #36]	; (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8006fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb4:	e004      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006fba:	e001      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8006fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3738      	adds	r7, #56	; 0x38
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	46020c00 	.word	0x46020c00
 8006fd0:	02dc6c00 	.word	0x02dc6c00
 8006fd4:	016e3600 	.word	0x016e3600
 8006fd8:	00f42400 	.word	0x00f42400

08006fdc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8006fe4:	4b47      	ldr	r3, [pc, #284]	; (8007104 <RCCEx_PLL2_Config+0x128>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a46      	ldr	r2, [pc, #280]	; (8007104 <RCCEx_PLL2_Config+0x128>)
 8006fea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006fee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006ff0:	f7fb f94e 	bl	8002290 <HAL_GetTick>
 8006ff4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ff6:	e008      	b.n	800700a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006ff8:	f7fb f94a 	bl	8002290 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	2b02      	cmp	r3, #2
 8007004:	d901      	bls.n	800700a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e077      	b.n	80070fa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800700a:	4b3e      	ldr	r3, [pc, #248]	; (8007104 <RCCEx_PLL2_Config+0x128>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1f0      	bne.n	8006ff8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007016:	4b3b      	ldr	r3, [pc, #236]	; (8007104 <RCCEx_PLL2_Config+0x128>)
 8007018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800701e:	f023 0303 	bic.w	r3, r3, #3
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	6811      	ldr	r1, [r2, #0]
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	6852      	ldr	r2, [r2, #4]
 800702a:	3a01      	subs	r2, #1
 800702c:	0212      	lsls	r2, r2, #8
 800702e:	430a      	orrs	r2, r1
 8007030:	4934      	ldr	r1, [pc, #208]	; (8007104 <RCCEx_PLL2_Config+0x128>)
 8007032:	4313      	orrs	r3, r2
 8007034:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007036:	4b33      	ldr	r3, [pc, #204]	; (8007104 <RCCEx_PLL2_Config+0x128>)
 8007038:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800703a:	4b33      	ldr	r3, [pc, #204]	; (8007108 <RCCEx_PLL2_Config+0x12c>)
 800703c:	4013      	ands	r3, r2
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	6892      	ldr	r2, [r2, #8]
 8007042:	3a01      	subs	r2, #1
 8007044:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	68d2      	ldr	r2, [r2, #12]
 800704c:	3a01      	subs	r2, #1
 800704e:	0252      	lsls	r2, r2, #9
 8007050:	b292      	uxth	r2, r2
 8007052:	4311      	orrs	r1, r2
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	6912      	ldr	r2, [r2, #16]
 8007058:	3a01      	subs	r2, #1
 800705a:	0412      	lsls	r2, r2, #16
 800705c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007060:	4311      	orrs	r1, r2
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	6952      	ldr	r2, [r2, #20]
 8007066:	3a01      	subs	r2, #1
 8007068:	0612      	lsls	r2, r2, #24
 800706a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800706e:	430a      	orrs	r2, r1
 8007070:	4924      	ldr	r1, [pc, #144]	; (8007104 <RCCEx_PLL2_Config+0x128>)
 8007072:	4313      	orrs	r3, r2
 8007074:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007076:	4b23      	ldr	r3, [pc, #140]	; (8007104 <RCCEx_PLL2_Config+0x128>)
 8007078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707a:	f023 020c 	bic.w	r2, r3, #12
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	4920      	ldr	r1, [pc, #128]	; (8007104 <RCCEx_PLL2_Config+0x128>)
 8007084:	4313      	orrs	r3, r2
 8007086:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007088:	4b1e      	ldr	r3, [pc, #120]	; (8007104 <RCCEx_PLL2_Config+0x128>)
 800708a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	491c      	ldr	r1, [pc, #112]	; (8007104 <RCCEx_PLL2_Config+0x128>)
 8007092:	4313      	orrs	r3, r2
 8007094:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007096:	4b1b      	ldr	r3, [pc, #108]	; (8007104 <RCCEx_PLL2_Config+0x128>)
 8007098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709a:	4a1a      	ldr	r2, [pc, #104]	; (8007104 <RCCEx_PLL2_Config+0x128>)
 800709c:	f023 0310 	bic.w	r3, r3, #16
 80070a0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80070a2:	4b18      	ldr	r3, [pc, #96]	; (8007104 <RCCEx_PLL2_Config+0x128>)
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	69d2      	ldr	r2, [r2, #28]
 80070b2:	00d2      	lsls	r2, r2, #3
 80070b4:	4913      	ldr	r1, [pc, #76]	; (8007104 <RCCEx_PLL2_Config+0x128>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80070ba:	4b12      	ldr	r3, [pc, #72]	; (8007104 <RCCEx_PLL2_Config+0x128>)
 80070bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070be:	4a11      	ldr	r2, [pc, #68]	; (8007104 <RCCEx_PLL2_Config+0x128>)
 80070c0:	f043 0310 	orr.w	r3, r3, #16
 80070c4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80070c6:	4b0f      	ldr	r3, [pc, #60]	; (8007104 <RCCEx_PLL2_Config+0x128>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a0e      	ldr	r2, [pc, #56]	; (8007104 <RCCEx_PLL2_Config+0x128>)
 80070cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070d0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80070d2:	f7fb f8dd 	bl	8002290 <HAL_GetTick>
 80070d6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070d8:	e008      	b.n	80070ec <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070da:	f7fb f8d9 	bl	8002290 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d901      	bls.n	80070ec <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e006      	b.n	80070fa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070ec:	4b05      	ldr	r3, [pc, #20]	; (8007104 <RCCEx_PLL2_Config+0x128>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0f0      	beq.n	80070da <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80070f8:	2300      	movs	r3, #0

}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	46020c00 	.word	0x46020c00
 8007108:	80800000 	.word	0x80800000

0800710c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007114:	4b47      	ldr	r3, [pc, #284]	; (8007234 <RCCEx_PLL3_Config+0x128>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a46      	ldr	r2, [pc, #280]	; (8007234 <RCCEx_PLL3_Config+0x128>)
 800711a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800711e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007120:	f7fb f8b6 	bl	8002290 <HAL_GetTick>
 8007124:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007126:	e008      	b.n	800713a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007128:	f7fb f8b2 	bl	8002290 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b02      	cmp	r3, #2
 8007134:	d901      	bls.n	800713a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e077      	b.n	800722a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800713a:	4b3e      	ldr	r3, [pc, #248]	; (8007234 <RCCEx_PLL3_Config+0x128>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1f0      	bne.n	8007128 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007146:	4b3b      	ldr	r3, [pc, #236]	; (8007234 <RCCEx_PLL3_Config+0x128>)
 8007148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800714e:	f023 0303 	bic.w	r3, r3, #3
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	6811      	ldr	r1, [r2, #0]
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	6852      	ldr	r2, [r2, #4]
 800715a:	3a01      	subs	r2, #1
 800715c:	0212      	lsls	r2, r2, #8
 800715e:	430a      	orrs	r2, r1
 8007160:	4934      	ldr	r1, [pc, #208]	; (8007234 <RCCEx_PLL3_Config+0x128>)
 8007162:	4313      	orrs	r3, r2
 8007164:	630b      	str	r3, [r1, #48]	; 0x30
 8007166:	4b33      	ldr	r3, [pc, #204]	; (8007234 <RCCEx_PLL3_Config+0x128>)
 8007168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800716a:	4b33      	ldr	r3, [pc, #204]	; (8007238 <RCCEx_PLL3_Config+0x12c>)
 800716c:	4013      	ands	r3, r2
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	6892      	ldr	r2, [r2, #8]
 8007172:	3a01      	subs	r2, #1
 8007174:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	68d2      	ldr	r2, [r2, #12]
 800717c:	3a01      	subs	r2, #1
 800717e:	0252      	lsls	r2, r2, #9
 8007180:	b292      	uxth	r2, r2
 8007182:	4311      	orrs	r1, r2
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	6912      	ldr	r2, [r2, #16]
 8007188:	3a01      	subs	r2, #1
 800718a:	0412      	lsls	r2, r2, #16
 800718c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007190:	4311      	orrs	r1, r2
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	6952      	ldr	r2, [r2, #20]
 8007196:	3a01      	subs	r2, #1
 8007198:	0612      	lsls	r2, r2, #24
 800719a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800719e:	430a      	orrs	r2, r1
 80071a0:	4924      	ldr	r1, [pc, #144]	; (8007234 <RCCEx_PLL3_Config+0x128>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80071a6:	4b23      	ldr	r3, [pc, #140]	; (8007234 <RCCEx_PLL3_Config+0x128>)
 80071a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071aa:	f023 020c 	bic.w	r2, r3, #12
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	4920      	ldr	r1, [pc, #128]	; (8007234 <RCCEx_PLL3_Config+0x128>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80071b8:	4b1e      	ldr	r3, [pc, #120]	; (8007234 <RCCEx_PLL3_Config+0x128>)
 80071ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	491c      	ldr	r1, [pc, #112]	; (8007234 <RCCEx_PLL3_Config+0x128>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80071c6:	4b1b      	ldr	r3, [pc, #108]	; (8007234 <RCCEx_PLL3_Config+0x128>)
 80071c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ca:	4a1a      	ldr	r2, [pc, #104]	; (8007234 <RCCEx_PLL3_Config+0x128>)
 80071cc:	f023 0310 	bic.w	r3, r3, #16
 80071d0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80071d2:	4b18      	ldr	r3, [pc, #96]	; (8007234 <RCCEx_PLL3_Config+0x128>)
 80071d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071da:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	69d2      	ldr	r2, [r2, #28]
 80071e2:	00d2      	lsls	r2, r2, #3
 80071e4:	4913      	ldr	r1, [pc, #76]	; (8007234 <RCCEx_PLL3_Config+0x128>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80071ea:	4b12      	ldr	r3, [pc, #72]	; (8007234 <RCCEx_PLL3_Config+0x128>)
 80071ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ee:	4a11      	ldr	r2, [pc, #68]	; (8007234 <RCCEx_PLL3_Config+0x128>)
 80071f0:	f043 0310 	orr.w	r3, r3, #16
 80071f4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80071f6:	4b0f      	ldr	r3, [pc, #60]	; (8007234 <RCCEx_PLL3_Config+0x128>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a0e      	ldr	r2, [pc, #56]	; (8007234 <RCCEx_PLL3_Config+0x128>)
 80071fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007200:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007202:	f7fb f845 	bl	8002290 <HAL_GetTick>
 8007206:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007208:	e008      	b.n	800721c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800720a:	f7fb f841 	bl	8002290 <HAL_GetTick>
 800720e:	4602      	mov	r2, r0
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	2b02      	cmp	r3, #2
 8007216:	d901      	bls.n	800721c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007218:	2303      	movs	r3, #3
 800721a:	e006      	b.n	800722a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800721c:	4b05      	ldr	r3, [pc, #20]	; (8007234 <RCCEx_PLL3_Config+0x128>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d0f0      	beq.n	800720a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	46020c00 	.word	0x46020c00
 8007238:	80800000 	.word	0x80800000

0800723c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e0fb      	b.n	8007446 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a7f      	ldr	r2, [pc, #508]	; (8007450 <HAL_SPI_Init+0x214>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d004      	beq.n	8007262 <HAL_SPI_Init+0x26>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a7d      	ldr	r2, [pc, #500]	; (8007454 <HAL_SPI_Init+0x218>)
 800725e:	4293      	cmp	r3, r2
 8007260:	e000      	b.n	8007264 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007262:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a78      	ldr	r2, [pc, #480]	; (8007450 <HAL_SPI_Init+0x214>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d004      	beq.n	800727e <HAL_SPI_Init+0x42>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a76      	ldr	r2, [pc, #472]	; (8007454 <HAL_SPI_Init+0x218>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d105      	bne.n	800728a <HAL_SPI_Init+0x4e>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	2b0f      	cmp	r3, #15
 8007284:	d901      	bls.n	800728a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e0dd      	b.n	8007446 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f8ec 	bl	8007468 <SPI_GetPacketSize>
 8007290:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a6e      	ldr	r2, [pc, #440]	; (8007450 <HAL_SPI_Init+0x214>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d004      	beq.n	80072a6 <HAL_SPI_Init+0x6a>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a6c      	ldr	r2, [pc, #432]	; (8007454 <HAL_SPI_Init+0x218>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d102      	bne.n	80072ac <HAL_SPI_Init+0x70>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	d816      	bhi.n	80072da <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80072b0:	4a69      	ldr	r2, [pc, #420]	; (8007458 <HAL_SPI_Init+0x21c>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d00e      	beq.n	80072d4 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a68      	ldr	r2, [pc, #416]	; (800745c <HAL_SPI_Init+0x220>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d009      	beq.n	80072d4 <HAL_SPI_Init+0x98>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a66      	ldr	r2, [pc, #408]	; (8007460 <HAL_SPI_Init+0x224>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d004      	beq.n	80072d4 <HAL_SPI_Init+0x98>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a65      	ldr	r2, [pc, #404]	; (8007464 <HAL_SPI_Init+0x228>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d104      	bne.n	80072de <HAL_SPI_Init+0xa2>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2b10      	cmp	r3, #16
 80072d8:	d901      	bls.n	80072de <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e0b3      	b.n	8007446 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d106      	bne.n	80072f8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7fa fc58 	bl	8001ba8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0201 	bic.w	r2, r2, #1
 800730e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800731a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007324:	d119      	bne.n	800735a <HAL_SPI_Init+0x11e>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800732e:	d103      	bne.n	8007338 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007334:	2b00      	cmp	r3, #0
 8007336:	d008      	beq.n	800734a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10c      	bne.n	800735a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007344:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007348:	d107      	bne.n	800735a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007358:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00f      	beq.n	8007386 <HAL_SPI_Init+0x14a>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	2b06      	cmp	r3, #6
 800736c:	d90b      	bls.n	8007386 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	430a      	orrs	r2, r1
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	e007      	b.n	8007396 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007394:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69da      	ldr	r2, [r3, #28]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739e:	431a      	orrs	r2, r3
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	431a      	orrs	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a8:	ea42 0103 	orr.w	r1, r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68da      	ldr	r2, [r3, #12]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	430a      	orrs	r2, r1
 80073b6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	431a      	orrs	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c6:	431a      	orrs	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	431a      	orrs	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	431a      	orrs	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	431a      	orrs	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	431a      	orrs	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ea:	431a      	orrs	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	431a      	orrs	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073f6:	431a      	orrs	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073fc:	431a      	orrs	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007402:	ea42 0103 	orr.w	r1, r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	430a      	orrs	r2, r1
 8007410:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00a      	beq.n	8007434 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	46002000 	.word	0x46002000
 8007454:	56002000 	.word	0x56002000
 8007458:	40013000 	.word	0x40013000
 800745c:	50013000 	.word	0x50013000
 8007460:	40003800 	.word	0x40003800
 8007464:	50003800 	.word	0x50003800

08007468 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007474:	095b      	lsrs	r3, r3, #5
 8007476:	3301      	adds	r3, #1
 8007478:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	3301      	adds	r3, #1
 8007480:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	3307      	adds	r3, #7
 8007486:	08db      	lsrs	r3, r3, #3
 8007488:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007492:	4618      	mov	r0, r3
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800749e:	b480      	push	{r7}
 80074a0:	b083      	sub	sp, #12
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d12e      	bne.n	8007512 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d101      	bne.n	80074c2 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80074be:	2302      	movs	r3, #2
 80074c0:	e028      	b.n	8007514 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2202      	movs	r2, #2
 80074ce:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f022 0201 	bic.w	r2, r2, #1
 80074e0:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80074ee:	ea42 0103 	orr.w	r1, r2, r3
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	689a      	ldr	r2, [r3, #8]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	430a      	orrs	r2, r1
 80074fc:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	e000      	b.n	8007514 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
  }
}
 8007514:	4618      	mov	r0, r3
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d101      	bne.n	8007532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e042      	b.n	80075b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007538:	2b00      	cmp	r3, #0
 800753a:	d106      	bne.n	800754a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7fa fd61 	bl	800200c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2224      	movs	r2, #36	; 0x24
 800754e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f022 0201 	bic.w	r2, r2, #1
 8007560:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f8ca 	bl	80076fc <UART_SetConfig>
 8007568:	4603      	mov	r3, r0
 800756a:	2b01      	cmp	r3, #1
 800756c:	d101      	bne.n	8007572 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e022      	b.n	80075b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007576:	2b00      	cmp	r3, #0
 8007578:	d002      	beq.n	8007580 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fa60 	bl	8007a40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	685a      	ldr	r2, [r3, #4]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800758e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	689a      	ldr	r2, [r3, #8]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800759e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f042 0201 	orr.w	r2, r2, #1
 80075ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fae7 	bl	8007b84 <UART_CheckIdleState>
 80075b6:	4603      	mov	r3, r0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b08a      	sub	sp, #40	; 0x28
 80075c4:	af02      	add	r7, sp, #8
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	603b      	str	r3, [r7, #0]
 80075cc:	4613      	mov	r3, r2
 80075ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075d6:	2b20      	cmp	r3, #32
 80075d8:	f040 808b 	bne.w	80076f2 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d002      	beq.n	80075e8 <HAL_UART_Transmit+0x28>
 80075e2:	88fb      	ldrh	r3, [r7, #6]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e083      	b.n	80076f4 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f6:	2b80      	cmp	r3, #128	; 0x80
 80075f8:	d107      	bne.n	800760a <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689a      	ldr	r2, [r3, #8]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007608:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2221      	movs	r2, #33	; 0x21
 8007616:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800761a:	f7fa fe39 	bl	8002290 <HAL_GetTick>
 800761e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	88fa      	ldrh	r2, [r7, #6]
 8007624:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	88fa      	ldrh	r2, [r7, #6]
 800762c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007638:	d108      	bne.n	800764c <HAL_UART_Transmit+0x8c>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d104      	bne.n	800764c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8007642:	2300      	movs	r3, #0
 8007644:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	61bb      	str	r3, [r7, #24]
 800764a:	e003      	b.n	8007654 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007650:	2300      	movs	r3, #0
 8007652:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007654:	e030      	b.n	80076b8 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2200      	movs	r2, #0
 800765e:	2180      	movs	r1, #128	; 0x80
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 fb39 	bl	8007cd8 <UART_WaitOnFlagUntilTimeout>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d005      	beq.n	8007678 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2220      	movs	r2, #32
 8007670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e03d      	b.n	80076f4 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10b      	bne.n	8007696 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	461a      	mov	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800768c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	3302      	adds	r3, #2
 8007692:	61bb      	str	r3, [r7, #24]
 8007694:	e007      	b.n	80076a6 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	781a      	ldrb	r2, [r3, #0]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	3301      	adds	r3, #1
 80076a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	3b01      	subs	r3, #1
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80076be:	b29b      	uxth	r3, r3
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1c8      	bne.n	8007656 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2200      	movs	r2, #0
 80076cc:	2140      	movs	r1, #64	; 0x40
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 fb02 	bl	8007cd8 <UART_WaitOnFlagUntilTimeout>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d005      	beq.n	80076e6 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2220      	movs	r2, #32
 80076de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e006      	b.n	80076f4 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2220      	movs	r2, #32
 80076ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	e000      	b.n	80076f4 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80076f2:	2302      	movs	r3, #2
  }
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3720      	adds	r7, #32
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007700:	b094      	sub	sp, #80	; 0x50
 8007702:	af00      	add	r7, sp, #0
 8007704:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800770c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	4b7e      	ldr	r3, [pc, #504]	; (800790c <UART_SetConfig+0x210>)
 8007712:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007716:	689a      	ldr	r2, [r3, #8]
 8007718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	431a      	orrs	r2, r3
 800771e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	431a      	orrs	r2, r3
 8007724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007726:	69db      	ldr	r3, [r3, #28]
 8007728:	4313      	orrs	r3, r2
 800772a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800772c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4977      	ldr	r1, [pc, #476]	; (8007910 <UART_SetConfig+0x214>)
 8007734:	4019      	ands	r1, r3
 8007736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800773c:	430b      	orrs	r3, r1
 800773e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800774a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774c:	68d9      	ldr	r1, [r3, #12]
 800774e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	ea40 0301 	orr.w	r3, r0, r1
 8007756:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800775e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	4b6a      	ldr	r3, [pc, #424]	; (800790c <UART_SetConfig+0x210>)
 8007764:	429a      	cmp	r2, r3
 8007766:	d009      	beq.n	800777c <UART_SetConfig+0x80>
 8007768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	4b69      	ldr	r3, [pc, #420]	; (8007914 <UART_SetConfig+0x218>)
 800776e:	429a      	cmp	r2, r3
 8007770:	d004      	beq.n	800777c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007774:	6a1a      	ldr	r2, [r3, #32]
 8007776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007778:	4313      	orrs	r3, r2
 800777a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800777c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8007786:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007790:	430b      	orrs	r3, r1
 8007792:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779a:	f023 000f 	bic.w	r0, r3, #15
 800779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80077a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	ea40 0301 	orr.w	r3, r0, r1
 80077aa:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	4b59      	ldr	r3, [pc, #356]	; (8007918 <UART_SetConfig+0x21c>)
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d102      	bne.n	80077bc <UART_SetConfig+0xc0>
 80077b6:	2301      	movs	r3, #1
 80077b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80077ba:	e029      	b.n	8007810 <UART_SetConfig+0x114>
 80077bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	4b56      	ldr	r3, [pc, #344]	; (800791c <UART_SetConfig+0x220>)
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d102      	bne.n	80077cc <UART_SetConfig+0xd0>
 80077c6:	2302      	movs	r3, #2
 80077c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80077ca:	e021      	b.n	8007810 <UART_SetConfig+0x114>
 80077cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	4b53      	ldr	r3, [pc, #332]	; (8007920 <UART_SetConfig+0x224>)
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d102      	bne.n	80077dc <UART_SetConfig+0xe0>
 80077d6:	2304      	movs	r3, #4
 80077d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80077da:	e019      	b.n	8007810 <UART_SetConfig+0x114>
 80077dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	4b50      	ldr	r3, [pc, #320]	; (8007924 <UART_SetConfig+0x228>)
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d102      	bne.n	80077ec <UART_SetConfig+0xf0>
 80077e6:	2308      	movs	r3, #8
 80077e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80077ea:	e011      	b.n	8007810 <UART_SetConfig+0x114>
 80077ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	4b4d      	ldr	r3, [pc, #308]	; (8007928 <UART_SetConfig+0x22c>)
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d102      	bne.n	80077fc <UART_SetConfig+0x100>
 80077f6:	2310      	movs	r3, #16
 80077f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80077fa:	e009      	b.n	8007810 <UART_SetConfig+0x114>
 80077fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	4b42      	ldr	r3, [pc, #264]	; (800790c <UART_SetConfig+0x210>)
 8007802:	429a      	cmp	r2, r3
 8007804:	d102      	bne.n	800780c <UART_SetConfig+0x110>
 8007806:	2320      	movs	r3, #32
 8007808:	64bb      	str	r3, [r7, #72]	; 0x48
 800780a:	e001      	b.n	8007810 <UART_SetConfig+0x114>
 800780c:	2300      	movs	r3, #0
 800780e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	4b3d      	ldr	r3, [pc, #244]	; (800790c <UART_SetConfig+0x210>)
 8007816:	429a      	cmp	r2, r3
 8007818:	d005      	beq.n	8007826 <UART_SetConfig+0x12a>
 800781a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	4b3d      	ldr	r3, [pc, #244]	; (8007914 <UART_SetConfig+0x218>)
 8007820:	429a      	cmp	r2, r3
 8007822:	f040 8085 	bne.w	8007930 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007828:	2200      	movs	r2, #0
 800782a:	623b      	str	r3, [r7, #32]
 800782c:	627a      	str	r2, [r7, #36]	; 0x24
 800782e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007832:	f7fe f9f1 	bl	8005c18 <HAL_RCCEx_GetPeriphCLKFreq>
 8007836:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 80e8 	beq.w	8007a10 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	4a39      	ldr	r2, [pc, #228]	; (800792c <UART_SetConfig+0x230>)
 8007846:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800784a:	461a      	mov	r2, r3
 800784c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800784e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007852:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	4613      	mov	r3, r2
 800785a:	005b      	lsls	r3, r3, #1
 800785c:	4413      	add	r3, r2
 800785e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007860:	429a      	cmp	r2, r3
 8007862:	d305      	bcc.n	8007870 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800786a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800786c:	429a      	cmp	r2, r3
 800786e:	d903      	bls.n	8007878 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007876:	e048      	b.n	800790a <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800787a:	2200      	movs	r2, #0
 800787c:	61bb      	str	r3, [r7, #24]
 800787e:	61fa      	str	r2, [r7, #28]
 8007880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007884:	4a29      	ldr	r2, [pc, #164]	; (800792c <UART_SetConfig+0x230>)
 8007886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800788a:	b29b      	uxth	r3, r3
 800788c:	2200      	movs	r2, #0
 800788e:	613b      	str	r3, [r7, #16]
 8007890:	617a      	str	r2, [r7, #20]
 8007892:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007896:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800789a:	f7f9 f9d9 	bl	8000c50 <__aeabi_uldivmod>
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	4610      	mov	r0, r2
 80078a4:	4619      	mov	r1, r3
 80078a6:	f04f 0200 	mov.w	r2, #0
 80078aa:	f04f 0300 	mov.w	r3, #0
 80078ae:	020b      	lsls	r3, r1, #8
 80078b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80078b4:	0202      	lsls	r2, r0, #8
 80078b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078b8:	6849      	ldr	r1, [r1, #4]
 80078ba:	0849      	lsrs	r1, r1, #1
 80078bc:	2000      	movs	r0, #0
 80078be:	460c      	mov	r4, r1
 80078c0:	4605      	mov	r5, r0
 80078c2:	eb12 0804 	adds.w	r8, r2, r4
 80078c6:	eb43 0905 	adc.w	r9, r3, r5
 80078ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	60bb      	str	r3, [r7, #8]
 80078d2:	60fa      	str	r2, [r7, #12]
 80078d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078d8:	4640      	mov	r0, r8
 80078da:	4649      	mov	r1, r9
 80078dc:	f7f9 f9b8 	bl	8000c50 <__aeabi_uldivmod>
 80078e0:	4602      	mov	r2, r0
 80078e2:	460b      	mov	r3, r1
 80078e4:	4613      	mov	r3, r2
 80078e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078ee:	d308      	bcc.n	8007902 <UART_SetConfig+0x206>
 80078f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078f6:	d204      	bcs.n	8007902 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80078f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078fe:	60da      	str	r2, [r3, #12]
 8007900:	e003      	b.n	800790a <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8007908:	e082      	b.n	8007a10 <UART_SetConfig+0x314>
 800790a:	e081      	b.n	8007a10 <UART_SetConfig+0x314>
 800790c:	46002400 	.word	0x46002400
 8007910:	cfff69f3 	.word	0xcfff69f3
 8007914:	56002400 	.word	0x56002400
 8007918:	40013800 	.word	0x40013800
 800791c:	40004400 	.word	0x40004400
 8007920:	40004800 	.word	0x40004800
 8007924:	40004c00 	.word	0x40004c00
 8007928:	40005000 	.word	0x40005000
 800792c:	0800bb20 	.word	0x0800bb20
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007932:	69db      	ldr	r3, [r3, #28]
 8007934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007938:	d13c      	bne.n	80079b4 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800793a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800793c:	2200      	movs	r2, #0
 800793e:	603b      	str	r3, [r7, #0]
 8007940:	607a      	str	r2, [r7, #4]
 8007942:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007946:	f7fe f967 	bl	8005c18 <HAL_RCCEx_GetPeriphCLKFreq>
 800794a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800794c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800794e:	2b00      	cmp	r3, #0
 8007950:	d05e      	beq.n	8007a10 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007956:	4a39      	ldr	r2, [pc, #228]	; (8007a3c <UART_SetConfig+0x340>)
 8007958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800795c:	461a      	mov	r2, r3
 800795e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007960:	fbb3 f3f2 	udiv	r3, r3, r2
 8007964:	005a      	lsls	r2, r3, #1
 8007966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	085b      	lsrs	r3, r3, #1
 800796c:	441a      	add	r2, r3
 800796e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	fbb2 f3f3 	udiv	r3, r2, r3
 8007976:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800797a:	2b0f      	cmp	r3, #15
 800797c:	d916      	bls.n	80079ac <UART_SetConfig+0x2b0>
 800797e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007984:	d212      	bcs.n	80079ac <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007988:	b29b      	uxth	r3, r3
 800798a:	f023 030f 	bic.w	r3, r3, #15
 800798e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007992:	085b      	lsrs	r3, r3, #1
 8007994:	b29b      	uxth	r3, r3
 8007996:	f003 0307 	and.w	r3, r3, #7
 800799a:	b29a      	uxth	r2, r3
 800799c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800799e:	4313      	orrs	r3, r2
 80079a0:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 80079a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80079a8:	60da      	str	r2, [r3, #12]
 80079aa:	e031      	b.n	8007a10 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80079b2:	e02d      	b.n	8007a10 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80079b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079b6:	2200      	movs	r2, #0
 80079b8:	469a      	mov	sl, r3
 80079ba:	4693      	mov	fp, r2
 80079bc:	4650      	mov	r0, sl
 80079be:	4659      	mov	r1, fp
 80079c0:	f7fe f92a 	bl	8005c18 <HAL_RCCEx_GetPeriphCLKFreq>
 80079c4:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 80079c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d021      	beq.n	8007a10 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	4a1a      	ldr	r2, [pc, #104]	; (8007a3c <UART_SetConfig+0x340>)
 80079d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079d6:	461a      	mov	r2, r3
 80079d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079da:	fbb3 f2f2 	udiv	r2, r3, r2
 80079de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	085b      	lsrs	r3, r3, #1
 80079e4:	441a      	add	r2, r3
 80079e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f2:	2b0f      	cmp	r3, #15
 80079f4:	d909      	bls.n	8007a0a <UART_SetConfig+0x30e>
 80079f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079fc:	d205      	bcs.n	8007a0a <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	60da      	str	r2, [r3, #12]
 8007a08:	e002      	b.n	8007a10 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a12:	2201      	movs	r2, #1
 8007a14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a22:	2200      	movs	r2, #0
 8007a24:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a28:	2200      	movs	r2, #0
 8007a2a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007a2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3750      	adds	r7, #80	; 0x50
 8007a34:	46bd      	mov	sp, r7
 8007a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a3a:	bf00      	nop
 8007a3c:	0800bb20 	.word	0x0800bb20

08007a40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00a      	beq.n	8007a6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	430a      	orrs	r2, r1
 8007a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6e:	f003 0302 	and.w	r3, r3, #2
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00a      	beq.n	8007a8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a90:	f003 0304 	and.w	r3, r3, #4
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00a      	beq.n	8007aae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab2:	f003 0308 	and.w	r3, r3, #8
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00a      	beq.n	8007ad0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	430a      	orrs	r2, r1
 8007ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad4:	f003 0310 	and.w	r3, r3, #16
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00a      	beq.n	8007af2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af6:	f003 0320 	and.w	r3, r3, #32
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00a      	beq.n	8007b14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	430a      	orrs	r2, r1
 8007b12:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d01a      	beq.n	8007b56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b3e:	d10a      	bne.n	8007b56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	430a      	orrs	r2, r1
 8007b54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00a      	beq.n	8007b78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	430a      	orrs	r2, r1
 8007b76:	605a      	str	r2, [r3, #4]
  }
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b098      	sub	sp, #96	; 0x60
 8007b88:	af02      	add	r7, sp, #8
 8007b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b94:	f7fa fb7c 	bl	8002290 <HAL_GetTick>
 8007b98:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0308 	and.w	r3, r3, #8
 8007ba4:	2b08      	cmp	r3, #8
 8007ba6:	d12f      	bne.n	8007c08 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ba8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f88e 	bl	8007cd8 <UART_WaitOnFlagUntilTimeout>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d022      	beq.n	8007c08 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bca:	e853 3f00 	ldrex	r3, [r3]
 8007bce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bd6:	653b      	str	r3, [r7, #80]	; 0x50
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007be0:	647b      	str	r3, [r7, #68]	; 0x44
 8007be2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007be6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007be8:	e841 2300 	strex	r3, r2, [r1]
 8007bec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1e6      	bne.n	8007bc2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e063      	b.n	8007cd0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0304 	and.w	r3, r3, #4
 8007c12:	2b04      	cmp	r3, #4
 8007c14:	d149      	bne.n	8007caa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f857 	bl	8007cd8 <UART_WaitOnFlagUntilTimeout>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d03c      	beq.n	8007caa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	e853 3f00 	ldrex	r3, [r3]
 8007c3c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
 8007c40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c4e:	633b      	str	r3, [r7, #48]	; 0x30
 8007c50:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c56:	e841 2300 	strex	r3, r2, [r1]
 8007c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1e6      	bne.n	8007c30 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	3308      	adds	r3, #8
 8007c68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	e853 3f00 	ldrex	r3, [r3]
 8007c70:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f023 0301 	bic.w	r3, r3, #1
 8007c78:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3308      	adds	r3, #8
 8007c80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c82:	61fa      	str	r2, [r7, #28]
 8007c84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c86:	69b9      	ldr	r1, [r7, #24]
 8007c88:	69fa      	ldr	r2, [r7, #28]
 8007c8a:	e841 2300 	strex	r3, r2, [r1]
 8007c8e:	617b      	str	r3, [r7, #20]
   return(result);
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1e5      	bne.n	8007c62 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2220      	movs	r2, #32
 8007c9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e012      	b.n	8007cd0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2220      	movs	r2, #32
 8007cae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2220      	movs	r2, #32
 8007cb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3758      	adds	r7, #88	; 0x58
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	603b      	str	r3, [r7, #0]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ce8:	e049      	b.n	8007d7e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf0:	d045      	beq.n	8007d7e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cf2:	f7fa facd 	bl	8002290 <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	69ba      	ldr	r2, [r7, #24]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d302      	bcc.n	8007d08 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e048      	b.n	8007d9e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0304 	and.w	r3, r3, #4
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d031      	beq.n	8007d7e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	f003 0308 	and.w	r3, r3, #8
 8007d24:	2b08      	cmp	r3, #8
 8007d26:	d110      	bne.n	8007d4a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2208      	movs	r2, #8
 8007d2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f000 f838 	bl	8007da6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2208      	movs	r2, #8
 8007d3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e029      	b.n	8007d9e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	69db      	ldr	r3, [r3, #28]
 8007d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d58:	d111      	bne.n	8007d7e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f000 f81e 	bl	8007da6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e00f      	b.n	8007d9e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	69da      	ldr	r2, [r3, #28]
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	4013      	ands	r3, r2
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	bf0c      	ite	eq
 8007d8e:	2301      	moveq	r3, #1
 8007d90:	2300      	movne	r3, #0
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	461a      	mov	r2, r3
 8007d96:	79fb      	ldrb	r3, [r7, #7]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d0a6      	beq.n	8007cea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b095      	sub	sp, #84	; 0x54
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db6:	e853 3f00 	ldrex	r3, [r3]
 8007dba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	461a      	mov	r2, r3
 8007dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dcc:	643b      	str	r3, [r7, #64]	; 0x40
 8007dce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dd4:	e841 2300 	strex	r3, r2, [r1]
 8007dd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1e6      	bne.n	8007dae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3308      	adds	r3, #8
 8007de6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de8:	6a3b      	ldr	r3, [r7, #32]
 8007dea:	e853 3f00 	ldrex	r3, [r3]
 8007dee:	61fb      	str	r3, [r7, #28]
   return(result);
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007df6:	f023 0301 	bic.w	r3, r3, #1
 8007dfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3308      	adds	r3, #8
 8007e02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e0c:	e841 2300 	strex	r3, r2, [r1]
 8007e10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1e3      	bne.n	8007de0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d118      	bne.n	8007e52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	e853 3f00 	ldrex	r3, [r3]
 8007e2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	f023 0310 	bic.w	r3, r3, #16
 8007e34:	647b      	str	r3, [r7, #68]	; 0x44
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e3e:	61bb      	str	r3, [r7, #24]
 8007e40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e42:	6979      	ldr	r1, [r7, #20]
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1e6      	bne.n	8007e20 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2220      	movs	r2, #32
 8007e56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007e66:	bf00      	nop
 8007e68:	3754      	adds	r7, #84	; 0x54
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b085      	sub	sp, #20
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d101      	bne.n	8007e88 <HAL_UARTEx_DisableFifoMode+0x16>
 8007e84:	2302      	movs	r3, #2
 8007e86:	e027      	b.n	8007ed8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2224      	movs	r2, #36	; 0x24
 8007e94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f022 0201 	bic.w	r2, r2, #1
 8007eae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007eb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2220      	movs	r2, #32
 8007eca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d101      	bne.n	8007efc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	e02d      	b.n	8007f58 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2224      	movs	r2, #36	; 0x24
 8007f08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f022 0201 	bic.w	r2, r2, #1
 8007f22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	430a      	orrs	r2, r1
 8007f36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f84f 	bl	8007fdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2220      	movs	r2, #32
 8007f4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d101      	bne.n	8007f78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f74:	2302      	movs	r3, #2
 8007f76:	e02d      	b.n	8007fd4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2224      	movs	r2, #36	; 0x24
 8007f84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f022 0201 	bic.w	r2, r2, #1
 8007f9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	430a      	orrs	r2, r1
 8007fb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f811 	bl	8007fdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2220      	movs	r2, #32
 8007fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d108      	bne.n	8007ffe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ffc:	e031      	b.n	8008062 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ffe:	2308      	movs	r3, #8
 8008000:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008002:	2308      	movs	r3, #8
 8008004:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	0e5b      	lsrs	r3, r3, #25
 800800e:	b2db      	uxtb	r3, r3
 8008010:	f003 0307 	and.w	r3, r3, #7
 8008014:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	0f5b      	lsrs	r3, r3, #29
 800801e:	b2db      	uxtb	r3, r3
 8008020:	f003 0307 	and.w	r3, r3, #7
 8008024:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008026:	7bbb      	ldrb	r3, [r7, #14]
 8008028:	7b3a      	ldrb	r2, [r7, #12]
 800802a:	4911      	ldr	r1, [pc, #68]	; (8008070 <UARTEx_SetNbDataToProcess+0x94>)
 800802c:	5c8a      	ldrb	r2, [r1, r2]
 800802e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008032:	7b3a      	ldrb	r2, [r7, #12]
 8008034:	490f      	ldr	r1, [pc, #60]	; (8008074 <UARTEx_SetNbDataToProcess+0x98>)
 8008036:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008038:	fb93 f3f2 	sdiv	r3, r3, r2
 800803c:	b29a      	uxth	r2, r3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008044:	7bfb      	ldrb	r3, [r7, #15]
 8008046:	7b7a      	ldrb	r2, [r7, #13]
 8008048:	4909      	ldr	r1, [pc, #36]	; (8008070 <UARTEx_SetNbDataToProcess+0x94>)
 800804a:	5c8a      	ldrb	r2, [r1, r2]
 800804c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008050:	7b7a      	ldrb	r2, [r7, #13]
 8008052:	4908      	ldr	r1, [pc, #32]	; (8008074 <UARTEx_SetNbDataToProcess+0x98>)
 8008054:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008056:	fb93 f3f2 	sdiv	r3, r3, r2
 800805a:	b29a      	uxth	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008062:	bf00      	nop
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	0800bb38 	.word	0x0800bb38
 8008074:	0800bb40 	.word	0x0800bb40

08008078 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008078:	b480      	push	{r7}
 800807a:	b08b      	sub	sp, #44	; 0x2c
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	fa93 f3a3 	rbit	r3, r3
 8008092:	613b      	str	r3, [r7, #16]
  return result;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d101      	bne.n	80080a2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800809e:	2320      	movs	r3, #32
 80080a0:	e003      	b.n	80080aa <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	fab3 f383 	clz	r3, r3
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	005b      	lsls	r3, r3, #1
 80080ac:	2103      	movs	r1, #3
 80080ae:	fa01 f303 	lsl.w	r3, r1, r3
 80080b2:	43db      	mvns	r3, r3
 80080b4:	401a      	ands	r2, r3
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	fa93 f3a3 	rbit	r3, r3
 80080c0:	61fb      	str	r3, [r7, #28]
  return result;
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80080c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80080cc:	2320      	movs	r3, #32
 80080ce:	e003      	b.n	80080d8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	fab3 f383 	clz	r3, r3
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	005b      	lsls	r3, r3, #1
 80080da:	6879      	ldr	r1, [r7, #4]
 80080dc:	fa01 f303 	lsl.w	r3, r1, r3
 80080e0:	431a      	orrs	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	601a      	str	r2, [r3, #0]
}
 80080e6:	bf00      	nop
 80080e8:	372c      	adds	r7, #44	; 0x2c
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b085      	sub	sp, #20
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	685a      	ldr	r2, [r3, #4]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	43db      	mvns	r3, r3
 8008106:	401a      	ands	r2, r3
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	6879      	ldr	r1, [r7, #4]
 800810c:	fb01 f303 	mul.w	r3, r1, r3
 8008110:	431a      	orrs	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	605a      	str	r2, [r3, #4]
}
 8008116:	bf00      	nop
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8008122:	b480      	push	{r7}
 8008124:	b08b      	sub	sp, #44	; 0x2c
 8008126:	af00      	add	r7, sp, #0
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	689a      	ldr	r2, [r3, #8]
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	fa93 f3a3 	rbit	r3, r3
 800813c:	613b      	str	r3, [r7, #16]
  return result;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d101      	bne.n	800814c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008148:	2320      	movs	r3, #32
 800814a:	e003      	b.n	8008154 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	fab3 f383 	clz	r3, r3
 8008152:	b2db      	uxtb	r3, r3
 8008154:	005b      	lsls	r3, r3, #1
 8008156:	2103      	movs	r1, #3
 8008158:	fa01 f303 	lsl.w	r3, r1, r3
 800815c:	43db      	mvns	r3, r3
 800815e:	401a      	ands	r2, r3
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008164:	6a3b      	ldr	r3, [r7, #32]
 8008166:	fa93 f3a3 	rbit	r3, r3
 800816a:	61fb      	str	r3, [r7, #28]
  return result;
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	2b00      	cmp	r3, #0
 8008174:	d101      	bne.n	800817a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8008176:	2320      	movs	r3, #32
 8008178:	e003      	b.n	8008182 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	fab3 f383 	clz	r3, r3
 8008180:	b2db      	uxtb	r3, r3
 8008182:	005b      	lsls	r3, r3, #1
 8008184:	6879      	ldr	r1, [r7, #4]
 8008186:	fa01 f303 	lsl.w	r3, r1, r3
 800818a:	431a      	orrs	r2, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8008190:	bf00      	nop
 8008192:	372c      	adds	r7, #44	; 0x2c
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800819c:	b480      	push	{r7}
 800819e:	b08b      	sub	sp, #44	; 0x2c
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	68da      	ldr	r2, [r3, #12]
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	fa93 f3a3 	rbit	r3, r3
 80081b6:	613b      	str	r3, [r7, #16]
  return result;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d101      	bne.n	80081c6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80081c2:	2320      	movs	r3, #32
 80081c4:	e003      	b.n	80081ce <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	fab3 f383 	clz	r3, r3
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	005b      	lsls	r3, r3, #1
 80081d0:	2103      	movs	r1, #3
 80081d2:	fa01 f303 	lsl.w	r3, r1, r3
 80081d6:	43db      	mvns	r3, r3
 80081d8:	401a      	ands	r2, r3
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	fa93 f3a3 	rbit	r3, r3
 80081e4:	61fb      	str	r3, [r7, #28]
  return result;
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80081ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80081f0:	2320      	movs	r3, #32
 80081f2:	e003      	b.n	80081fc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f6:	fab3 f383 	clz	r3, r3
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	005b      	lsls	r3, r3, #1
 80081fe:	6879      	ldr	r1, [r7, #4]
 8008200:	fa01 f303 	lsl.w	r3, r1, r3
 8008204:	431a      	orrs	r2, r3
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	60da      	str	r2, [r3, #12]
}
 800820a:	bf00      	nop
 800820c:	372c      	adds	r7, #44	; 0x2c
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr

08008216 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008216:	b480      	push	{r7}
 8008218:	b08b      	sub	sp, #44	; 0x2c
 800821a:	af00      	add	r7, sp, #0
 800821c:	60f8      	str	r0, [r7, #12]
 800821e:	60b9      	str	r1, [r7, #8]
 8008220:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6a1a      	ldr	r2, [r3, #32]
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	fa93 f3a3 	rbit	r3, r3
 8008230:	613b      	str	r3, [r7, #16]
  return result;
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d101      	bne.n	8008240 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800823c:	2320      	movs	r3, #32
 800823e:	e003      	b.n	8008248 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	fab3 f383 	clz	r3, r3
 8008246:	b2db      	uxtb	r3, r3
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	210f      	movs	r1, #15
 800824c:	fa01 f303 	lsl.w	r3, r1, r3
 8008250:	43db      	mvns	r3, r3
 8008252:	401a      	ands	r2, r3
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	fa93 f3a3 	rbit	r3, r3
 800825e:	61fb      	str	r3, [r7, #28]
  return result;
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800826a:	2320      	movs	r3, #32
 800826c:	e003      	b.n	8008276 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	fab3 f383 	clz	r3, r3
 8008274:	b2db      	uxtb	r3, r3
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	6879      	ldr	r1, [r7, #4]
 800827a:	fa01 f303 	lsl.w	r3, r1, r3
 800827e:	431a      	orrs	r2, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8008284:	bf00      	nop
 8008286:	372c      	adds	r7, #44	; 0x2c
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008290:	b480      	push	{r7}
 8008292:	b08b      	sub	sp, #44	; 0x2c
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	0a1b      	lsrs	r3, r3, #8
 80082a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	fa93 f3a3 	rbit	r3, r3
 80082ac:	613b      	str	r3, [r7, #16]
  return result;
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d101      	bne.n	80082bc <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80082b8:	2320      	movs	r3, #32
 80082ba:	e003      	b.n	80082c4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	fab3 f383 	clz	r3, r3
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	210f      	movs	r1, #15
 80082c8:	fa01 f303 	lsl.w	r3, r1, r3
 80082cc:	43db      	mvns	r3, r3
 80082ce:	401a      	ands	r2, r3
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	0a1b      	lsrs	r3, r3, #8
 80082d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082d6:	6a3b      	ldr	r3, [r7, #32]
 80082d8:	fa93 f3a3 	rbit	r3, r3
 80082dc:	61fb      	str	r3, [r7, #28]
  return result;
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80082e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80082e8:	2320      	movs	r3, #32
 80082ea:	e003      	b.n	80082f4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80082ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ee:	fab3 f383 	clz	r3, r3
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	6879      	ldr	r1, [r7, #4]
 80082f8:	fa01 f303 	lsl.w	r3, r1, r3
 80082fc:	431a      	orrs	r2, r3
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8008302:	bf00      	nop
 8008304:	372c      	adds	r7, #44	; 0x2c
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b08a      	sub	sp, #40	; 0x28
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	fa93 f3a3 	rbit	r3, r3
 8008324:	617b      	str	r3, [r7, #20]
  return result;
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <LL_GPIO_Init+0x26>
    return 32U;
 8008330:	2320      	movs	r3, #32
 8008332:	e003      	b.n	800833c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	fab3 f383 	clz	r3, r3
 800833a:	b2db      	uxtb	r3, r3
 800833c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800833e:	e058      	b.n	80083f2 <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	2101      	movs	r1, #1
 8008346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008348:	fa01 f303 	lsl.w	r3, r1, r3
 800834c:	4013      	ands	r3, r2
 800834e:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8008350:	6a3b      	ldr	r3, [r7, #32]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d04a      	beq.n	80083ec <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d003      	beq.n	8008366 <LL_GPIO_Init+0x58>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	2b02      	cmp	r3, #2
 8008364:	d10e      	bne.n	8008384 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	461a      	mov	r2, r3
 800836c:	6a39      	ldr	r1, [r7, #32]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7ff fed7 	bl	8008122 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	6819      	ldr	r1, [r3, #0]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	461a      	mov	r2, r3
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f7ff feb7 	bl	80080f2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	461a      	mov	r2, r3
 800838a:	6a39      	ldr	r1, [r7, #32]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f7ff ff05 	bl	800819c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	2b02      	cmp	r3, #2
 8008398:	d121      	bne.n	80083de <LL_GPIO_Init+0xd0>
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	fa93 f3a3 	rbit	r3, r3
 80083a4:	60bb      	str	r3, [r7, #8]
  return result;
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <LL_GPIO_Init+0xa6>
    return 32U;
 80083b0:	2320      	movs	r3, #32
 80083b2:	e003      	b.n	80083bc <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	fab3 f383 	clz	r3, r3
 80083ba:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 80083bc:	2b07      	cmp	r3, #7
 80083be:	d807      	bhi.n	80083d0 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	695b      	ldr	r3, [r3, #20]
 80083c4:	461a      	mov	r2, r3
 80083c6:	6a39      	ldr	r1, [r7, #32]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f7ff ff24 	bl	8008216 <LL_GPIO_SetAFPin_0_7>
 80083ce:	e006      	b.n	80083de <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	461a      	mov	r2, r3
 80083d6:	6a39      	ldr	r1, [r7, #32]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f7ff ff59 	bl	8008290 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	461a      	mov	r2, r3
 80083e4:	6a39      	ldr	r1, [r7, #32]
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7ff fe46 	bl	8008078 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	3301      	adds	r3, #1
 80083f0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f8:	fa22 f303 	lsr.w	r3, r2, r3
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d19f      	bne.n	8008340 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3728      	adds	r7, #40	; 0x28
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <funchad35.constprop.0>:
 800840c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008410:	4604      	mov	r4, r0
 8008412:	22c8      	movs	r2, #200	; 0xc8
 8008414:	ed2d 8b02 	vpush	{d8}
 8008418:	2100      	movs	r1, #0
 800841a:	4859      	ldr	r0, [pc, #356]	; (8008580 <funchad35.constprop.0+0x174>)
 800841c:	f001 f909 	bl	8009632 <memset>
 8008420:	4620      	mov	r0, r4
 8008422:	2200      	movs	r2, #0
 8008424:	4e57      	ldr	r6, [pc, #348]	; (8008584 <funchad35.constprop.0+0x178>)
 8008426:	4c56      	ldr	r4, [pc, #344]	; (8008580 <funchad35.constprop.0+0x174>)
 8008428:	4601      	mov	r1, r0
 800842a:	46a0      	mov	r8, r4
 800842c:	4623      	mov	r3, r4
 800842e:	460d      	mov	r5, r1
 8008430:	edd3 7a00 	vldr	s15, [r3]
 8008434:	ed95 7a00 	vldr	s14, [r5]
 8008438:	eee7 7a07 	vfma.f32	s15, s14, s14
 800843c:	ece3 7a01 	vstmia	r3!, {s15}
 8008440:	429e      	cmp	r6, r3
 8008442:	f101 0118 	add.w	r1, r1, #24
 8008446:	d1f2      	bne.n	800842e <funchad35.constprop.0+0x22>
 8008448:	3201      	adds	r2, #1
 800844a:	2a06      	cmp	r2, #6
 800844c:	f100 0004 	add.w	r0, r0, #4
 8008450:	d1e9      	bne.n	8008426 <funchad35.constprop.0+0x1a>
 8008452:	4625      	mov	r5, r4
 8008454:	2700      	movs	r7, #0
 8008456:	f04f 0900 	mov.w	r9, #0
 800845a:	eddf 8a4b 	vldr	s17, [pc, #300]	; 8008588 <funchad35.constprop.0+0x17c>
 800845e:	e005      	b.n	800846c <funchad35.constprop.0+0x60>
 8008460:	f845 9c04 	str.w	r9, [r5, #-4]
 8008464:	42ae      	cmp	r6, r5
 8008466:	f107 0701 	add.w	r7, r7, #1
 800846a:	d020      	beq.n	80084ae <funchad35.constprop.0+0xa2>
 800846c:	ecb5 0a01 	vldmia	r5!, {s0}
 8008470:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008478:	dbf2      	blt.n	8008460 <funchad35.constprop.0+0x54>
 800847a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800847e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008482:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8008486:	d478      	bmi.n	800857a <funchad35.constprop.0+0x16e>
 8008488:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800848c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008490:	ed05 8a01 	vstr	s16, [r5, #-4]
 8008494:	dae6      	bge.n	8008464 <funchad35.constprop.0+0x58>
 8008496:	ee07 7a90 	vmov	s15, r7
 800849a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800849e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80084a2:	42ae      	cmp	r6, r5
 80084a4:	ed45 7a01 	vstr	s15, [r5, #-4]
 80084a8:	f107 0701 	add.w	r7, r7, #1
 80084ac:	d1de      	bne.n	800846c <funchad35.constprop.0+0x60>
 80084ae:	edd8 8a00 	vldr	s17, [r8]
 80084b2:	eeb0 8a68 	vmov.f32	s16, s17
 80084b6:	4b35      	ldr	r3, [pc, #212]	; (800858c <funchad35.constprop.0+0x180>)
 80084b8:	ecf3 7a01 	vldmia	r3!, {s15}
 80084bc:	eeb4 8a67 	vcmp.f32	s16, s15
 80084c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084c4:	bfc8      	it	gt
 80084c6:	eeb0 8a67 	vmovgt.f32	s16, s15
 80084ca:	429e      	cmp	r6, r3
 80084cc:	d1f4      	bne.n	80084b8 <funchad35.constprop.0+0xac>
 80084ce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80084d2:	ee38 0a40 	vsub.f32	s0, s16, s0
 80084d6:	ecf4 0a01 	vldmia	r4!, {s1}
 80084da:	f003 fa2d 	bl	800b938 <fmaxf>
 80084de:	42a6      	cmp	r6, r4
 80084e0:	d1f9      	bne.n	80084d6 <funchad35.constprop.0+0xca>
 80084e2:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80084e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ea:	4b29      	ldr	r3, [pc, #164]	; (8008590 <funchad35.constprop.0+0x184>)
 80084ec:	bf54      	ite	pl
 80084ee:	ed83 0a00 	vstrpl	s0, [r3]
 80084f2:	edc3 8a00 	vstrmi	s17, [r3]
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	4619      	mov	r1, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d03b      	beq.n	8008576 <funchad35.constprop.0+0x16a>
 80084fe:	2200      	movs	r2, #0
 8008500:	1e48      	subs	r0, r1, #1
 8008502:	4001      	ands	r1, r0
 8008504:	4614      	mov	r4, r2
 8008506:	f102 0201 	add.w	r2, r2, #1
 800850a:	d1f9      	bne.n	8008500 <funchad35.constprop.0+0xf4>
 800850c:	4a21      	ldr	r2, [pc, #132]	; (8008594 <funchad35.constprop.0+0x188>)
 800850e:	4822      	ldr	r0, [pc, #136]	; (8008598 <funchad35.constprop.0+0x18c>)
 8008510:	eb03 2383 	add.w	r3, r3, r3, lsl #10
 8008514:	ea02 0243 	and.w	r2, r2, r3, lsl #1
 8008518:	ea00 1343 	and.w	r3, r0, r3, lsl #5
 800851c:	4313      	orrs	r3, r2
 800851e:	eb03 2203 	add.w	r2, r3, r3, lsl #8
 8008522:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008526:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 800852a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800852e:	d009      	beq.n	8008544 <funchad35.constprop.0+0x138>
 8008530:	1e53      	subs	r3, r2, #1
 8008532:	401a      	ands	r2, r3
 8008534:	4608      	mov	r0, r1
 8008536:	f101 0101 	add.w	r1, r1, #1
 800853a:	d1f9      	bne.n	8008530 <funchad35.constprop.0+0x124>
 800853c:	1b02      	subs	r2, r0, r4
 800853e:	fab2 f282 	clz	r2, r2
 8008542:	0952      	lsrs	r2, r2, #5
 8008544:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8008548:	4413      	add	r3, r2
 800854a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800854e:	eba3 0302 	sub.w	r3, r3, r2
 8008552:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8008556:	4413      	add	r3, r2
 8008558:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800855c:	eba3 0302 	sub.w	r3, r3, r2
 8008560:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008564:	eba3 0302 	sub.w	r3, r3, r2
 8008568:	ea6f 0303 	mvn.w	r3, r3
 800856c:	ba1b      	rev	r3, r3
 800856e:	ecbd 8b02 	vpop	{d8}
 8008572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008576:	2201      	movs	r2, #1
 8008578:	e7e4      	b.n	8008544 <funchad35.constprop.0+0x138>
 800857a:	f003 f96d 	bl	800b858 <sqrtf>
 800857e:	e783      	b.n	8008488 <funchad35.constprop.0+0x7c>
 8008580:	200008b8 	.word	0x200008b8
 8008584:	20000980 	.word	0x20000980
 8008588:	3b03126f 	.word	0x3b03126f
 800858c:	200008bc 	.word	0x200008bc
 8008590:	200008b4 	.word	0x200008b4
 8008594:	00022110 	.word	0x00022110
 8008598:	00088440 	.word	0x00088440

0800859c <funchad14.constprop.0>:
 800859c:	2300      	movs	r3, #0
 800859e:	b470      	push	{r4, r5, r6}
 80085a0:	6003      	str	r3, [r0, #0]
 80085a2:	4c36      	ldr	r4, [pc, #216]	; (800867c <funchad14.constprop.0+0xe0>)
 80085a4:	600b      	str	r3, [r1, #0]
 80085a6:	4622      	mov	r2, r4
 80085a8:	f04f 0300 	mov.w	r3, #0
 80085ac:	2a00      	cmp	r2, #0
 80085ae:	d007      	beq.n	80085c0 <funchad14.constprop.0+0x24>
 80085b0:	f1a2 0501 	sub.w	r5, r2, #1
 80085b4:	ea02 0205 	and.w	r2, r2, r5
 80085b8:	f103 0301 	add.w	r3, r3, #1
 80085bc:	2a00      	cmp	r2, #0
 80085be:	d1f7      	bne.n	80085b0 <funchad14.constprop.0+0x14>
 80085c0:	2b20      	cmp	r3, #32
 80085c2:	bfcc      	ite	gt
 80085c4:	2300      	movgt	r3, #0
 80085c6:	2301      	movle	r3, #1
 80085c8:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 80085cc:	eba2 0203 	sub.w	r2, r2, r3
 80085d0:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80085d4:	eba2 0203 	sub.w	r2, r2, r3
 80085d8:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80085dc:	441a      	add	r2, r3
 80085de:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80085e2:	eba2 0203 	sub.w	r2, r2, r3
 80085e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80085ea:	eba2 0203 	sub.w	r2, r2, r3
 80085ee:	ea6f 0202 	mvn.w	r2, r2
 80085f2:	ba12      	rev	r2, r2
 80085f4:	8993      	ldrh	r3, [r2, #12]
 80085f6:	edd4 7a01 	vldr	s15, [r4, #4]
 80085fa:	111a      	asrs	r2, r3, #4
 80085fc:	f003 030f 	and.w	r3, r3, #15
 8008600:	ebc2 7582 	rsb	r5, r2, r2, lsl #30
 8008604:	ebc3 7683 	rsb	r6, r3, r3, lsl #30
 8008608:	ebc2 0585 	rsb	r5, r2, r5, lsl #2
 800860c:	ebc3 0686 	rsb	r6, r3, r6, lsl #2
 8008610:	4435      	add	r5, r6
 8008612:	442c      	add	r4, r5
 8008614:	fb02 4202 	mla	r2, r2, r2, r4
 8008618:	fb03 2303 	mla	r3, r3, r3, r2
 800861c:	3b32      	subs	r3, #50	; 0x32
 800861e:	edd3 6a00 	vldr	s13, [r3]
 8008622:	eef5 6a40 	vcmp.f32	s13, #0.0
 8008626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800862a:	4b15      	ldr	r3, [pc, #84]	; (8008680 <funchad14.constprop.0+0xe4>)
 800862c:	ed93 7a00 	vldr	s14, [r3]
 8008630:	d10f      	bne.n	8008652 <funchad14.constprop.0+0xb6>
 8008632:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008684 <funchad14.constprop.0+0xe8>
 8008636:	eeb0 7a67 	vmov.f32	s14, s15
 800863a:	bc70      	pop	{r4, r5, r6}
 800863c:	ed81 7a00 	vstr	s14, [r1]
 8008640:	ed90 7a00 	vldr	s14, [r0]
 8008644:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008648:	ee77 7a87 	vadd.f32	s15, s15, s14
 800864c:	edc0 7a00 	vstr	s15, [r0]
 8008650:	4770      	bx	lr
 8008652:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008656:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800865a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800865e:	bf48      	it	mi
 8008660:	eeb1 7a47 	vnegmi.f32	s14, s14
 8008664:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008668:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800866c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8008688 <funchad14.constprop.0+0xec>
 8008670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008674:	bfc8      	it	gt
 8008676:	eeb0 7a67 	vmovgt.f32	s14, s15
 800867a:	e7de      	b.n	800863a <funchad14.constprop.0+0x9e>
 800867c:	200001dc 	.word	0x200001dc
 8008680:	200008b4 	.word	0x200008b4
 8008684:	42c80000 	.word	0x42c80000
 8008688:	00000000 	.word	0x00000000

0800868c <neai_anomalydetection_init>:
 800868c:	2200      	movs	r2, #0
 800868e:	4815      	ldr	r0, [pc, #84]	; (80086e4 <neai_anomalydetection_init+0x58>)
 8008690:	4915      	ldr	r1, [pc, #84]	; (80086e8 <neai_anomalydetection_init+0x5c>)
 8008692:	b4f0      	push	{r4, r5, r6, r7}
 8008694:	f04f 5c7e 	mov.w	ip, #1065353216	; 0x3f800000
 8008698:	6008      	str	r0, [r1, #0]
 800869a:	2000      	movs	r0, #0
 800869c:	2101      	movs	r1, #1
 800869e:	4b13      	ldr	r3, [pc, #76]	; (80086ec <neai_anomalydetection_init+0x60>)
 80086a0:	4f13      	ldr	r7, [pc, #76]	; (80086f0 <neai_anomalydetection_init+0x64>)
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	605a      	str	r2, [r3, #4]
 80086a6:	60da      	str	r2, [r3, #12]
 80086a8:	611a      	str	r2, [r3, #16]
 80086aa:	4a12      	ldr	r2, [pc, #72]	; (80086f4 <neai_anomalydetection_init+0x68>)
 80086ac:	4e12      	ldr	r6, [pc, #72]	; (80086f8 <neai_anomalydetection_init+0x6c>)
 80086ae:	8812      	ldrh	r2, [r2, #0]
 80086b0:	4d12      	ldr	r5, [pc, #72]	; (80086fc <neai_anomalydetection_init+0x70>)
 80086b2:	4c13      	ldr	r4, [pc, #76]	; (8008700 <neai_anomalydetection_init+0x74>)
 80086b4:	2aa5      	cmp	r2, #165	; 0xa5
 80086b6:	f8c3 c018 	str.w	ip, [r3, #24]
 80086ba:	61df      	str	r7, [r3, #28]
 80086bc:	621e      	str	r6, [r3, #32]
 80086be:	625d      	str	r5, [r3, #36]	; 0x24
 80086c0:	629c      	str	r4, [r3, #40]	; 0x28
 80086c2:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
 80086c6:	6098      	str	r0, [r3, #8]
 80086c8:	6158      	str	r0, [r3, #20]
 80086ca:	d104      	bne.n	80086d6 <neai_anomalydetection_init+0x4a>
 80086cc:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
 80086d0:	85d8      	strh	r0, [r3, #46]	; 0x2e
 80086d2:	bcf0      	pop	{r4, r5, r6, r7}
 80086d4:	4770      	bx	lr
 80086d6:	227c      	movs	r2, #124	; 0x7c
 80086d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 80086dc:	4610      	mov	r0, r2
 80086de:	bcf0      	pop	{r4, r5, r6, r7}
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	40747ae1 	.word	0x40747ae1
 80086e8:	2000000c 	.word	0x2000000c
 80086ec:	200001dc 	.word	0x200001dc
 80086f0:	40400000 	.word	0x40400000
 80086f4:	08fffff0 	.word	0x08fffff0
 80086f8:	3f4f5c29 	.word	0x3f4f5c29
 80086fc:	3ee147ae 	.word	0x3ee147ae
 8008700:	3ea3d70a 	.word	0x3ea3d70a
 8008704:	00000000 	.word	0x00000000

08008708 <neai_anomalydetection_learn>:
 8008708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800870a:	ed2d 8b02 	vpush	{d8}
 800870e:	4c8c      	ldr	r4, [pc, #560]	; (8008940 <neai_anomalydetection_learn+0x238>)
 8008710:	b083      	sub	sp, #12
 8008712:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8008716:	2b01      	cmp	r3, #1
 8008718:	f040 80a0 	bne.w	800885c <neai_anomalydetection_learn+0x154>
 800871c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8008720:	2b7c      	cmp	r3, #124	; 0x7c
 8008722:	f000 808c 	beq.w	800883e <neai_anomalydetection_learn+0x136>
 8008726:	f7ff fe71 	bl	800840c <funchad35.constprop.0>
 800872a:	8de6      	ldrh	r6, [r4, #46]	; 0x2e
 800872c:	68a5      	ldr	r5, [r4, #8]
 800872e:	3601      	adds	r6, #1
 8008730:	1c6b      	adds	r3, r5, #1
 8008732:	b2b6      	uxth	r6, r6
 8008734:	2b02      	cmp	r3, #2
 8008736:	85e6      	strh	r6, [r4, #46]	; 0x2e
 8008738:	60a3      	str	r3, [r4, #8]
 800873a:	f200 8097 	bhi.w	800886c <neai_anomalydetection_learn+0x164>
 800873e:	4f81      	ldr	r7, [pc, #516]	; (8008944 <neai_anomalydetection_learn+0x23c>)
 8008740:	463b      	mov	r3, r7
 8008742:	ba3a      	rev	r2, r7
 8008744:	2000      	movs	r0, #0
 8008746:	1e59      	subs	r1, r3, #1
 8008748:	400b      	ands	r3, r1
 800874a:	f100 0001 	add.w	r0, r0, #1
 800874e:	d1fa      	bne.n	8008746 <neai_anomalydetection_learn+0x3e>
 8008750:	4619      	mov	r1, r3
 8008752:	b132      	cbz	r2, 8008762 <neai_anomalydetection_learn+0x5a>
 8008754:	f102 3cff 	add.w	ip, r2, #4294967295
 8008758:	ea12 020c 	ands.w	r2, r2, ip
 800875c:	f101 0101 	add.w	r1, r1, #1
 8008760:	d1f8      	bne.n	8008754 <neai_anomalydetection_learn+0x4c>
 8008762:	1a09      	subs	r1, r1, r0
 8008764:	fab1 f181 	clz	r1, r1
 8008768:	0949      	lsrs	r1, r1, #5
 800876a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800876e:	440a      	add	r2, r1
 8008770:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8008774:	440a      	add	r2, r1
 8008776:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800877a:	440a      	add	r2, r1
 800877c:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8008780:	eba2 0201 	sub.w	r2, r2, r1
 8008784:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008788:	eba2 0201 	sub.w	r2, r2, r1
 800878c:	ea6f 0202 	mvn.w	r2, r2
 8008790:	ba12      	rev	r2, r2
 8008792:	88d2      	ldrh	r2, [r2, #6]
 8008794:	ea5f 1c22 	movs.w	ip, r2, asr #4
 8008798:	f002 010f 	and.w	r1, r2, #15
 800879c:	f000 80c2 	beq.w	8008924 <neai_anomalydetection_learn+0x21c>
 80087a0:	2000      	movs	r0, #0
 80087a2:	4662      	mov	r2, ip
 80087a4:	f102 3eff 	add.w	lr, r2, #4294967295
 80087a8:	ea12 020e 	ands.w	r2, r2, lr
 80087ac:	f100 0001 	add.w	r0, r0, #1
 80087b0:	d1f8      	bne.n	80087a4 <neai_anomalydetection_learn+0x9c>
 80087b2:	b189      	cbz	r1, 80087d8 <neai_anomalydetection_learn+0xd0>
 80087b4:	460a      	mov	r2, r1
 80087b6:	f102 3eff 	add.w	lr, r2, #4294967295
 80087ba:	ea12 020e 	ands.w	r2, r2, lr
 80087be:	f103 0301 	add.w	r3, r3, #1
 80087c2:	d1f8      	bne.n	80087b6 <neai_anomalydetection_learn+0xae>
 80087c4:	fb01 f10c 	mul.w	r1, r1, ip
 80087c8:	4418      	add	r0, r3
 80087ca:	b129      	cbz	r1, 80087d8 <neai_anomalydetection_learn+0xd0>
 80087cc:	1e4b      	subs	r3, r1, #1
 80087ce:	4019      	ands	r1, r3
 80087d0:	f102 0201 	add.w	r2, r2, #1
 80087d4:	d1fa      	bne.n	80087cc <neai_anomalydetection_learn+0xc4>
 80087d6:	4410      	add	r0, r2
 80087d8:	ed94 6a01 	vldr	s12, [r4, #4]
 80087dc:	ee26 0a06 	vmul.f32	s0, s12, s12
 80087e0:	edd4 7a00 	vldr	s15, [r4]
 80087e4:	eef0 6a40 	vmov.f32	s13, s0
 80087e8:	eee7 6aa7 	vfma.f32	s13, s15, s15
 80087ec:	3807      	subs	r0, #7
 80087ee:	4438      	add	r0, r7
 80087f0:	3502      	adds	r5, #2
 80087f2:	ed90 7a00 	vldr	s14, [r0]
 80087f6:	ee07 5a90 	vmov	s15, r5
 80087fa:	eef0 5a66 	vmov.f32	s11, s13
 80087fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008802:	eed7 5a07 	vfnms.f32	s11, s14, s14
 8008806:	ee37 5a46 	vsub.f32	s10, s14, s12
 800880a:	ee85 0aa7 	vdiv.f32	s0, s11, s15
 800880e:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8008812:	ee30 0a26 	vadd.f32	s0, s0, s13
 8008816:	ee77 7a06 	vadd.f32	s15, s14, s12
 800881a:	eea7 0ae7 	vfms.f32	s0, s15, s15
 800881e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008826:	edc4 7a01 	vstr	s15, [r4, #4]
 800882a:	f04f 0300 	mov.w	r3, #0
 800882e:	da0b      	bge.n	8008848 <neai_anomalydetection_learn+0x140>
 8008830:	6023      	str	r3, [r4, #0]
 8008832:	2e0a      	cmp	r6, #10
 8008834:	bf34      	ite	cc
 8008836:	237e      	movcc	r3, #126	; 0x7e
 8008838:	237f      	movcs	r3, #127	; 0x7f
 800883a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800883e:	4618      	mov	r0, r3
 8008840:	b003      	add	sp, #12
 8008842:	ecbd 8b02 	vpop	{d8}
 8008846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008848:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800884c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008850:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8008854:	d468      	bmi.n	8008928 <neai_anomalydetection_learn+0x220>
 8008856:	ed84 8a00 	vstr	s16, [r4]
 800885a:	e7ea      	b.n	8008832 <neai_anomalydetection_learn+0x12a>
 800885c:	237b      	movs	r3, #123	; 0x7b
 800885e:	4618      	mov	r0, r3
 8008860:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8008864:	b003      	add	sp, #12
 8008866:	ecbd 8b02 	vpop	{d8}
 800886a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800886c:	2300      	movs	r3, #0
 800886e:	4668      	mov	r0, sp
 8008870:	a901      	add	r1, sp, #4
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	9301      	str	r3, [sp, #4]
 8008876:	f7ff fe91 	bl	800859c <funchad14.constprop.0>
 800887a:	6963      	ldr	r3, [r4, #20]
 800887c:	edd4 5a03 	vldr	s11, [r4, #12]
 8008880:	3301      	adds	r3, #1
 8008882:	ed94 6a04 	vldr	s12, [r4, #16]
 8008886:	ee07 3a90 	vmov	s15, r3
 800888a:	eddd 6a00 	vldr	s13, [sp]
 800888e:	ed9d 7a01 	vldr	s14, [sp, #4]
 8008892:	eeb8 5a67 	vcvt.f32.u32	s10, s15
 8008896:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800889a:	ee37 7a46 	vsub.f32	s14, s14, s12
 800889e:	eec6 7a85 	vdiv.f32	s15, s13, s10
 80088a2:	ee87 8a05 	vdiv.f32	s16, s14, s10
 80088a6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80088aa:	ee38 8a06 	vadd.f32	s16, s16, s12
 80088ae:	edc4 7a03 	vstr	s15, [r4, #12]
 80088b2:	ed84 8a04 	vstr	s16, [r4, #16]
 80088b6:	6163      	str	r3, [r4, #20]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f43f af40 	beq.w	800873e <neai_anomalydetection_learn+0x36>
 80088be:	edd4 8a08 	vldr	s17, [r4, #32]
 80088c2:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80088c6:	ee17 0a90 	vmov	r0, s15
 80088ca:	f7f7 fe41 	bl	8000550 <__aeabi_f2d>
 80088ce:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8008930 <neai_anomalydetection_learn+0x228>
 80088d2:	ec41 0b10 	vmov	d0, r0, r1
 80088d6:	f002 ffdd 	bl	800b894 <fmax>
 80088da:	ec51 0b10 	vmov	r0, r1, d0
 80088de:	f7f8 f967 	bl	8000bb0 <__aeabi_d2f>
 80088e2:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80088e6:	ee00 0a10 	vmov	s0, r0
 80088ea:	f003 f840 	bl	800b96e <fminf>
 80088ee:	ee68 7a28 	vmul.f32	s15, s16, s17
 80088f2:	ed84 0a06 	vstr	s0, [r4, #24]
 80088f6:	ee17 0a90 	vmov	r0, s15
 80088fa:	f7f7 fe29 	bl	8000550 <__aeabi_f2d>
 80088fe:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8008938 <neai_anomalydetection_learn+0x230>
 8008902:	ec41 0b10 	vmov	d0, r0, r1
 8008906:	f002 ffc5 	bl	800b894 <fmax>
 800890a:	ec51 0b10 	vmov	r0, r1, d0
 800890e:	f7f8 f94f 	bl	8000bb0 <__aeabi_d2f>
 8008912:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8008948 <neai_anomalydetection_learn+0x240>
 8008916:	ee00 0a10 	vmov	s0, r0
 800891a:	f003 f828 	bl	800b96e <fminf>
 800891e:	ed84 0a07 	vstr	s0, [r4, #28]
 8008922:	e70c      	b.n	800873e <neai_anomalydetection_learn+0x36>
 8008924:	4660      	mov	r0, ip
 8008926:	e744      	b.n	80087b2 <neai_anomalydetection_learn+0xaa>
 8008928:	f002 ff96 	bl	800b858 <sqrtf>
 800892c:	e793      	b.n	8008856 <neai_anomalydetection_learn+0x14e>
 800892e:	bf00      	nop
 8008930:	00000000 	.word	0x00000000
 8008934:	3ff00000 	.word	0x3ff00000
 8008938:	00000000 	.word	0x00000000
 800893c:	40080000 	.word	0x40080000
 8008940:	200001dc 	.word	0x200001dc
 8008944:	200008b4 	.word	0x200008b4
 8008948:	42c80000 	.word	0x42c80000
 800894c:	00000000 	.word	0x00000000

08008950 <neai_anomalydetection_detect>:
 8008950:	b530      	push	{r4, r5, lr}
 8008952:	23ff      	movs	r3, #255	; 0xff
 8008954:	ed2d 8b02 	vpush	{d8}
 8008958:	4d73      	ldr	r5, [pc, #460]	; (8008b28 <neai_anomalydetection_detect+0x1d8>)
 800895a:	700b      	strb	r3, [r1, #0]
 800895c:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8008960:	b085      	sub	sp, #20
 8008962:	f1a3 027c 	sub.w	r2, r3, #124	; 0x7c
 8008966:	2a02      	cmp	r2, #2
 8008968:	f240 80ac 	bls.w	8008ac4 <neai_anomalydetection_detect+0x174>
 800896c:	2b80      	cmp	r3, #128	; 0x80
 800896e:	f000 80a9 	beq.w	8008ac4 <neai_anomalydetection_detect+0x174>
 8008972:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
 8008974:	2b09      	cmp	r3, #9
 8008976:	f240 80aa 	bls.w	8008ace <neai_anomalydetection_detect+0x17e>
 800897a:	460c      	mov	r4, r1
 800897c:	f7ff fd46 	bl	800840c <funchad35.constprop.0>
 8008980:	68aa      	ldr	r2, [r5, #8]
 8008982:	2a00      	cmp	r2, #0
 8008984:	f000 809c 	beq.w	8008ac0 <neai_anomalydetection_detect+0x170>
 8008988:	4b68      	ldr	r3, [pc, #416]	; (8008b2c <neai_anomalydetection_detect+0x1dc>)
 800898a:	6818      	ldr	r0, [r3, #0]
 800898c:	f7f7 fde0 	bl	8000550 <__aeabi_f2d>
 8008990:	a361      	add	r3, pc, #388	; (adr r3, 8008b18 <neai_anomalydetection_detect+0x1c8>)
 8008992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008996:	f7f7 fe33 	bl	8000600 <__aeabi_dmul>
 800899a:	f7f8 f909 	bl	8000bb0 <__aeabi_d2f>
 800899e:	eddf 7a64 	vldr	s15, [pc, #400]	; 8008b30 <neai_anomalydetection_detect+0x1e0>
 80089a2:	ee08 0a10 	vmov	s16, r0
 80089a6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80089aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ae:	f2c0 8096 	blt.w	8008ade <neai_anomalydetection_detect+0x18e>
 80089b2:	eddf 7a60 	vldr	s15, [pc, #384]	; 8008b34 <neai_anomalydetection_detect+0x1e4>
 80089b6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80089ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089be:	f200 808e 	bhi.w	8008ade <neai_anomalydetection_detect+0x18e>
 80089c2:	4b5d      	ldr	r3, [pc, #372]	; (8008b38 <neai_anomalydetection_detect+0x1e8>)
 80089c4:	6018      	str	r0, [r3, #0]
 80089c6:	2300      	movs	r3, #0
 80089c8:	a903      	add	r1, sp, #12
 80089ca:	a802      	add	r0, sp, #8
 80089cc:	9302      	str	r3, [sp, #8]
 80089ce:	9303      	str	r3, [sp, #12]
 80089d0:	f7ff fde4 	bl	800859c <funchad14.constprop.0>
 80089d4:	2201      	movs	r2, #1
 80089d6:	ba13      	rev	r3, r2
 80089d8:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80089dc:	f1a3 0301 	sub.w	r3, r3, #1
 80089e0:	eba2 0303 	sub.w	r3, r2, r3
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	ea4f 1243 	mov.w	r2, r3, lsl #5
 80089ea:	441a      	add	r2, r3
 80089ec:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80089f0:	441a      	add	r2, r3
 80089f2:	ea4f 1242 	mov.w	r2, r2, lsl #5
 80089f6:	eba2 0203 	sub.w	r2, r2, r3
 80089fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80089fe:	eba2 0203 	sub.w	r2, r2, r3
 8008a02:	ea6f 0202 	mvn.w	r2, r2
 8008a06:	ba12      	rev	r2, r2
 8008a08:	eddd 6a03 	vldr	s13, [sp, #12]
 8008a0c:	edd5 7a07 	vldr	s15, [r5, #28]
 8008a10:	ee68 6a26 	vmul.f32	s13, s16, s13
 8008a14:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8008a18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a1c:	ee37 7a68 	vsub.f32	s14, s14, s17
 8008a20:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8008a24:	ee37 7a07 	vadd.f32	s14, s14, s14
 8008a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a2c:	ee17 0a90 	vmov	r0, s15
 8008a30:	f7f7 fd8e 	bl	8000550 <__aeabi_f2d>
 8008a34:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 8008b20 <neai_anomalydetection_detect+0x1d0>
 8008a38:	ec41 0b10 	vmov	d0, r0, r1
 8008a3c:	f002 ff2a 	bl	800b894 <fmax>
 8008a40:	ec51 0b10 	vmov	r0, r1, d0
 8008a44:	f7f8 f8b4 	bl	8000bb0 <__aeabi_d2f>
 8008a48:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8008a4c:	ee00 0a10 	vmov	s0, r0
 8008a50:	f002 ff8d 	bl	800b96e <fminf>
 8008a54:	ed9d 7a02 	vldr	s14, [sp, #8]
 8008a58:	edd5 6a06 	vldr	s13, [r5, #24]
 8008a5c:	ee28 7a07 	vmul.f32	s14, s16, s14
 8008a60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008a64:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8008a68:	edd5 6a09 	vldr	s13, [r5, #36]	; 0x24
 8008a6c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8008a70:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008a74:	ee28 8a07 	vmul.f32	s16, s16, s14
 8008a78:	eea7 0aa6 	vfma.f32	s0, s15, s13
 8008a7c:	ee68 7a00 	vmul.f32	s15, s16, s0
 8008a80:	ee17 0a90 	vmov	r0, s15
 8008a84:	f7f7 fd64 	bl	8000550 <__aeabi_f2d>
 8008a88:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8008b20 <neai_anomalydetection_detect+0x1d0>
 8008a8c:	ec41 0b10 	vmov	d0, r0, r1
 8008a90:	f002 ff00 	bl	800b894 <fmax>
 8008a94:	ec51 0b10 	vmov	r0, r1, d0
 8008a98:	f7f8 f88a 	bl	8000bb0 <__aeabi_d2f>
 8008a9c:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8008aa0:	ee00 0a10 	vmov	s0, r0
 8008aa4:	f002 ff63 	bl	800b96e <fminf>
 8008aa8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8008aac:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008ab0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008ab4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8008ab8:	edcd 7a01 	vstr	s15, [sp, #4]
 8008abc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	7022      	strb	r2, [r4, #0]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	b005      	add	sp, #20
 8008ac8:	ecbd 8b02 	vpop	{d8}
 8008acc:	bd30      	pop	{r4, r5, pc}
 8008ace:	237e      	movs	r3, #126	; 0x7e
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
 8008ad6:	b005      	add	sp, #20
 8008ad8:	ecbd 8b02 	vpop	{d8}
 8008adc:	bd30      	pop	{r4, r5, pc}
 8008ade:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ae6:	dd13      	ble.n	8008b10 <neai_anomalydetection_detect+0x1c0>
 8008ae8:	eddf 7a11 	vldr	s15, [pc, #68]	; 8008b30 <neai_anomalydetection_detect+0x1e0>
 8008aec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008af4:	d505      	bpl.n	8008b02 <neai_anomalydetection_detect+0x1b2>
 8008af6:	4b10      	ldr	r3, [pc, #64]	; (8008b38 <neai_anomalydetection_detect+0x1e8>)
 8008af8:	eeb0 8a67 	vmov.f32	s16, s15
 8008afc:	edc3 7a00 	vstr	s15, [r3]
 8008b00:	e761      	b.n	80089c6 <neai_anomalydetection_detect+0x76>
 8008b02:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8008b34 <neai_anomalydetection_detect+0x1e4>
 8008b06:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b0e:	dcf2      	bgt.n	8008af6 <neai_anomalydetection_detect+0x1a6>
 8008b10:	4b09      	ldr	r3, [pc, #36]	; (8008b38 <neai_anomalydetection_detect+0x1e8>)
 8008b12:	ed93 8a00 	vldr	s16, [r3]
 8008b16:	e756      	b.n	80089c6 <neai_anomalydetection_detect+0x76>
 8008b18:	28f5c28f 	.word	0x28f5c28f
 8008b1c:	400e8f5c 	.word	0x400e8f5c
	...
 8008b28:	200001dc 	.word	0x200001dc
 8008b2c:	20000010 	.word	0x20000010
 8008b30:	3c23d70a 	.word	0x3c23d70a
 8008b34:	42c80000 	.word	0x42c80000
 8008b38:	2000000c 	.word	0x2000000c

08008b3c <__cvt>:
 8008b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b40:	ec55 4b10 	vmov	r4, r5, d0
 8008b44:	2d00      	cmp	r5, #0
 8008b46:	460e      	mov	r6, r1
 8008b48:	4619      	mov	r1, r3
 8008b4a:	462b      	mov	r3, r5
 8008b4c:	bfb4      	ite	lt
 8008b4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008b52:	2300      	movge	r3, #0
 8008b54:	4691      	mov	r9, r2
 8008b56:	bfbf      	itttt	lt
 8008b58:	4622      	movlt	r2, r4
 8008b5a:	461d      	movlt	r5, r3
 8008b5c:	232d      	movlt	r3, #45	; 0x2d
 8008b5e:	4614      	movlt	r4, r2
 8008b60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008b64:	700b      	strb	r3, [r1, #0]
 8008b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b68:	f023 0820 	bic.w	r8, r3, #32
 8008b6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b70:	d005      	beq.n	8008b7e <__cvt+0x42>
 8008b72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008b76:	d100      	bne.n	8008b7a <__cvt+0x3e>
 8008b78:	3601      	adds	r6, #1
 8008b7a:	2102      	movs	r1, #2
 8008b7c:	e000      	b.n	8008b80 <__cvt+0x44>
 8008b7e:	2103      	movs	r1, #3
 8008b80:	ab03      	add	r3, sp, #12
 8008b82:	4632      	mov	r2, r6
 8008b84:	9301      	str	r3, [sp, #4]
 8008b86:	ab02      	add	r3, sp, #8
 8008b88:	ec45 4b10 	vmov	d0, r4, r5
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	4653      	mov	r3, sl
 8008b90:	f000 fe6e 	bl	8009870 <_dtoa_r>
 8008b94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008b98:	4607      	mov	r7, r0
 8008b9a:	d102      	bne.n	8008ba2 <__cvt+0x66>
 8008b9c:	f019 0f01 	tst.w	r9, #1
 8008ba0:	d022      	beq.n	8008be8 <__cvt+0xac>
 8008ba2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ba6:	eb07 0906 	add.w	r9, r7, r6
 8008baa:	d110      	bne.n	8008bce <__cvt+0x92>
 8008bac:	783b      	ldrb	r3, [r7, #0]
 8008bae:	2b30      	cmp	r3, #48	; 0x30
 8008bb0:	d10a      	bne.n	8008bc8 <__cvt+0x8c>
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	4629      	mov	r1, r5
 8008bba:	f7f7 ff89 	bl	8000ad0 <__aeabi_dcmpeq>
 8008bbe:	b918      	cbnz	r0, 8008bc8 <__cvt+0x8c>
 8008bc0:	f1c6 0601 	rsb	r6, r6, #1
 8008bc4:	f8ca 6000 	str.w	r6, [sl]
 8008bc8:	f8da 3000 	ldr.w	r3, [sl]
 8008bcc:	4499      	add	r9, r3
 8008bce:	2200      	movs	r2, #0
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	f7f7 ff7b 	bl	8000ad0 <__aeabi_dcmpeq>
 8008bda:	b108      	cbz	r0, 8008be0 <__cvt+0xa4>
 8008bdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8008be0:	2230      	movs	r2, #48	; 0x30
 8008be2:	9b03      	ldr	r3, [sp, #12]
 8008be4:	454b      	cmp	r3, r9
 8008be6:	d307      	bcc.n	8008bf8 <__cvt+0xbc>
 8008be8:	9b03      	ldr	r3, [sp, #12]
 8008bea:	4638      	mov	r0, r7
 8008bec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bee:	1bdb      	subs	r3, r3, r7
 8008bf0:	6013      	str	r3, [r2, #0]
 8008bf2:	b004      	add	sp, #16
 8008bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf8:	1c59      	adds	r1, r3, #1
 8008bfa:	9103      	str	r1, [sp, #12]
 8008bfc:	701a      	strb	r2, [r3, #0]
 8008bfe:	e7f0      	b.n	8008be2 <__cvt+0xa6>

08008c00 <__exponent>:
 8008c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c02:	2900      	cmp	r1, #0
 8008c04:	4603      	mov	r3, r0
 8008c06:	bfb8      	it	lt
 8008c08:	4249      	neglt	r1, r1
 8008c0a:	f803 2b02 	strb.w	r2, [r3], #2
 8008c0e:	bfb4      	ite	lt
 8008c10:	222d      	movlt	r2, #45	; 0x2d
 8008c12:	222b      	movge	r2, #43	; 0x2b
 8008c14:	2909      	cmp	r1, #9
 8008c16:	7042      	strb	r2, [r0, #1]
 8008c18:	dd29      	ble.n	8008c6e <__exponent+0x6e>
 8008c1a:	f10d 0207 	add.w	r2, sp, #7
 8008c1e:	260a      	movs	r6, #10
 8008c20:	4617      	mov	r7, r2
 8008c22:	4694      	mov	ip, r2
 8008c24:	3a01      	subs	r2, #1
 8008c26:	fb91 f5f6 	sdiv	r5, r1, r6
 8008c2a:	fb06 1415 	mls	r4, r6, r5, r1
 8008c2e:	3430      	adds	r4, #48	; 0x30
 8008c30:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008c34:	460c      	mov	r4, r1
 8008c36:	4629      	mov	r1, r5
 8008c38:	2c63      	cmp	r4, #99	; 0x63
 8008c3a:	dcf2      	bgt.n	8008c22 <__exponent+0x22>
 8008c3c:	3130      	adds	r1, #48	; 0x30
 8008c3e:	f1ac 0402 	sub.w	r4, ip, #2
 8008c42:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008c46:	1c41      	adds	r1, r0, #1
 8008c48:	4622      	mov	r2, r4
 8008c4a:	42ba      	cmp	r2, r7
 8008c4c:	d30a      	bcc.n	8008c64 <__exponent+0x64>
 8008c4e:	f10d 0209 	add.w	r2, sp, #9
 8008c52:	eba2 020c 	sub.w	r2, r2, ip
 8008c56:	42bc      	cmp	r4, r7
 8008c58:	bf88      	it	hi
 8008c5a:	2200      	movhi	r2, #0
 8008c5c:	4413      	add	r3, r2
 8008c5e:	1a18      	subs	r0, r3, r0
 8008c60:	b003      	add	sp, #12
 8008c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c64:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008c68:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008c6c:	e7ed      	b.n	8008c4a <__exponent+0x4a>
 8008c6e:	2330      	movs	r3, #48	; 0x30
 8008c70:	3130      	adds	r1, #48	; 0x30
 8008c72:	7083      	strb	r3, [r0, #2]
 8008c74:	1d03      	adds	r3, r0, #4
 8008c76:	70c1      	strb	r1, [r0, #3]
 8008c78:	e7f1      	b.n	8008c5e <__exponent+0x5e>
	...

08008c7c <_printf_float>:
 8008c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c80:	ed2d 8b02 	vpush	{d8}
 8008c84:	b08d      	sub	sp, #52	; 0x34
 8008c86:	460c      	mov	r4, r1
 8008c88:	4616      	mov	r6, r2
 8008c8a:	461f      	mov	r7, r3
 8008c8c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008c90:	4605      	mov	r5, r0
 8008c92:	f000 fcd7 	bl	8009644 <_localeconv_r>
 8008c96:	f8d0 a000 	ldr.w	sl, [r0]
 8008c9a:	4650      	mov	r0, sl
 8008c9c:	f7f7 faec 	bl	8000278 <strlen>
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008ca6:	ee08 0a10 	vmov	s16, r0
 8008caa:	930a      	str	r3, [sp, #40]	; 0x28
 8008cac:	6823      	ldr	r3, [r4, #0]
 8008cae:	9305      	str	r3, [sp, #20]
 8008cb0:	f8d8 3000 	ldr.w	r3, [r8]
 8008cb4:	3307      	adds	r3, #7
 8008cb6:	f023 0307 	bic.w	r3, r3, #7
 8008cba:	f103 0208 	add.w	r2, r3, #8
 8008cbe:	f8c8 2000 	str.w	r2, [r8]
 8008cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008cca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008cce:	f8cd 8018 	str.w	r8, [sp, #24]
 8008cd2:	9307      	str	r3, [sp, #28]
 8008cd4:	4b9f      	ldr	r3, [pc, #636]	; (8008f54 <_printf_float+0x2d8>)
 8008cd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cda:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008cde:	f7f7 ff29 	bl	8000b34 <__aeabi_dcmpun>
 8008ce2:	bb88      	cbnz	r0, 8008d48 <_printf_float+0xcc>
 8008ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ce8:	4b9a      	ldr	r3, [pc, #616]	; (8008f54 <_printf_float+0x2d8>)
 8008cea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cee:	f7f7 ff03 	bl	8000af8 <__aeabi_dcmple>
 8008cf2:	bb48      	cbnz	r0, 8008d48 <_printf_float+0xcc>
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	4640      	mov	r0, r8
 8008cfa:	4649      	mov	r1, r9
 8008cfc:	f7f7 fef2 	bl	8000ae4 <__aeabi_dcmplt>
 8008d00:	b110      	cbz	r0, 8008d08 <_printf_float+0x8c>
 8008d02:	232d      	movs	r3, #45	; 0x2d
 8008d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d08:	4a93      	ldr	r2, [pc, #588]	; (8008f58 <_printf_float+0x2dc>)
 8008d0a:	4b94      	ldr	r3, [pc, #592]	; (8008f5c <_printf_float+0x2e0>)
 8008d0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008d10:	bf94      	ite	ls
 8008d12:	4690      	movls	r8, r2
 8008d14:	4698      	movhi	r8, r3
 8008d16:	2303      	movs	r3, #3
 8008d18:	f04f 0900 	mov.w	r9, #0
 8008d1c:	6123      	str	r3, [r4, #16]
 8008d1e:	9b05      	ldr	r3, [sp, #20]
 8008d20:	f023 0304 	bic.w	r3, r3, #4
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	4633      	mov	r3, r6
 8008d28:	aa0b      	add	r2, sp, #44	; 0x2c
 8008d2a:	4621      	mov	r1, r4
 8008d2c:	4628      	mov	r0, r5
 8008d2e:	9700      	str	r7, [sp, #0]
 8008d30:	f000 f9da 	bl	80090e8 <_printf_common>
 8008d34:	3001      	adds	r0, #1
 8008d36:	f040 8090 	bne.w	8008e5a <_printf_float+0x1de>
 8008d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3e:	b00d      	add	sp, #52	; 0x34
 8008d40:	ecbd 8b02 	vpop	{d8}
 8008d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d48:	4642      	mov	r2, r8
 8008d4a:	464b      	mov	r3, r9
 8008d4c:	4640      	mov	r0, r8
 8008d4e:	4649      	mov	r1, r9
 8008d50:	f7f7 fef0 	bl	8000b34 <__aeabi_dcmpun>
 8008d54:	b140      	cbz	r0, 8008d68 <_printf_float+0xec>
 8008d56:	464b      	mov	r3, r9
 8008d58:	4a81      	ldr	r2, [pc, #516]	; (8008f60 <_printf_float+0x2e4>)
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	bfbc      	itt	lt
 8008d5e:	232d      	movlt	r3, #45	; 0x2d
 8008d60:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008d64:	4b7f      	ldr	r3, [pc, #508]	; (8008f64 <_printf_float+0x2e8>)
 8008d66:	e7d1      	b.n	8008d0c <_printf_float+0x90>
 8008d68:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008d6c:	6863      	ldr	r3, [r4, #4]
 8008d6e:	9206      	str	r2, [sp, #24]
 8008d70:	1c5a      	adds	r2, r3, #1
 8008d72:	d13f      	bne.n	8008df4 <_printf_float+0x178>
 8008d74:	2306      	movs	r3, #6
 8008d76:	6063      	str	r3, [r4, #4]
 8008d78:	9b05      	ldr	r3, [sp, #20]
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	6861      	ldr	r1, [r4, #4]
 8008d7e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008d82:	2300      	movs	r3, #0
 8008d84:	9303      	str	r3, [sp, #12]
 8008d86:	ab0a      	add	r3, sp, #40	; 0x28
 8008d88:	6022      	str	r2, [r4, #0]
 8008d8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008d8e:	ab09      	add	r3, sp, #36	; 0x24
 8008d90:	ec49 8b10 	vmov	d0, r8, r9
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008d9a:	f7ff fecf 	bl	8008b3c <__cvt>
 8008d9e:	9b06      	ldr	r3, [sp, #24]
 8008da0:	4680      	mov	r8, r0
 8008da2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008da4:	2b47      	cmp	r3, #71	; 0x47
 8008da6:	d108      	bne.n	8008dba <_printf_float+0x13e>
 8008da8:	1cc8      	adds	r0, r1, #3
 8008daa:	db02      	blt.n	8008db2 <_printf_float+0x136>
 8008dac:	6863      	ldr	r3, [r4, #4]
 8008dae:	4299      	cmp	r1, r3
 8008db0:	dd41      	ble.n	8008e36 <_printf_float+0x1ba>
 8008db2:	f1ab 0302 	sub.w	r3, fp, #2
 8008db6:	fa5f fb83 	uxtb.w	fp, r3
 8008dba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008dbe:	d820      	bhi.n	8008e02 <_printf_float+0x186>
 8008dc0:	3901      	subs	r1, #1
 8008dc2:	465a      	mov	r2, fp
 8008dc4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008dc8:	9109      	str	r1, [sp, #36]	; 0x24
 8008dca:	f7ff ff19 	bl	8008c00 <__exponent>
 8008dce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dd0:	4681      	mov	r9, r0
 8008dd2:	1813      	adds	r3, r2, r0
 8008dd4:	2a01      	cmp	r2, #1
 8008dd6:	6123      	str	r3, [r4, #16]
 8008dd8:	dc02      	bgt.n	8008de0 <_printf_float+0x164>
 8008dda:	6822      	ldr	r2, [r4, #0]
 8008ddc:	07d2      	lsls	r2, r2, #31
 8008dde:	d501      	bpl.n	8008de4 <_printf_float+0x168>
 8008de0:	3301      	adds	r3, #1
 8008de2:	6123      	str	r3, [r4, #16]
 8008de4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d09c      	beq.n	8008d26 <_printf_float+0xaa>
 8008dec:	232d      	movs	r3, #45	; 0x2d
 8008dee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008df2:	e798      	b.n	8008d26 <_printf_float+0xaa>
 8008df4:	9a06      	ldr	r2, [sp, #24]
 8008df6:	2a47      	cmp	r2, #71	; 0x47
 8008df8:	d1be      	bne.n	8008d78 <_printf_float+0xfc>
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d1bc      	bne.n	8008d78 <_printf_float+0xfc>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e7b9      	b.n	8008d76 <_printf_float+0xfa>
 8008e02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008e06:	d118      	bne.n	8008e3a <_printf_float+0x1be>
 8008e08:	2900      	cmp	r1, #0
 8008e0a:	6863      	ldr	r3, [r4, #4]
 8008e0c:	dd0b      	ble.n	8008e26 <_printf_float+0x1aa>
 8008e0e:	6121      	str	r1, [r4, #16]
 8008e10:	b913      	cbnz	r3, 8008e18 <_printf_float+0x19c>
 8008e12:	6822      	ldr	r2, [r4, #0]
 8008e14:	07d0      	lsls	r0, r2, #31
 8008e16:	d502      	bpl.n	8008e1e <_printf_float+0x1a2>
 8008e18:	3301      	adds	r3, #1
 8008e1a:	440b      	add	r3, r1
 8008e1c:	6123      	str	r3, [r4, #16]
 8008e1e:	f04f 0900 	mov.w	r9, #0
 8008e22:	65a1      	str	r1, [r4, #88]	; 0x58
 8008e24:	e7de      	b.n	8008de4 <_printf_float+0x168>
 8008e26:	b913      	cbnz	r3, 8008e2e <_printf_float+0x1b2>
 8008e28:	6822      	ldr	r2, [r4, #0]
 8008e2a:	07d2      	lsls	r2, r2, #31
 8008e2c:	d501      	bpl.n	8008e32 <_printf_float+0x1b6>
 8008e2e:	3302      	adds	r3, #2
 8008e30:	e7f4      	b.n	8008e1c <_printf_float+0x1a0>
 8008e32:	2301      	movs	r3, #1
 8008e34:	e7f2      	b.n	8008e1c <_printf_float+0x1a0>
 8008e36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e3c:	4299      	cmp	r1, r3
 8008e3e:	db05      	blt.n	8008e4c <_printf_float+0x1d0>
 8008e40:	6823      	ldr	r3, [r4, #0]
 8008e42:	6121      	str	r1, [r4, #16]
 8008e44:	07d8      	lsls	r0, r3, #31
 8008e46:	d5ea      	bpl.n	8008e1e <_printf_float+0x1a2>
 8008e48:	1c4b      	adds	r3, r1, #1
 8008e4a:	e7e7      	b.n	8008e1c <_printf_float+0x1a0>
 8008e4c:	2900      	cmp	r1, #0
 8008e4e:	bfd4      	ite	le
 8008e50:	f1c1 0202 	rsble	r2, r1, #2
 8008e54:	2201      	movgt	r2, #1
 8008e56:	4413      	add	r3, r2
 8008e58:	e7e0      	b.n	8008e1c <_printf_float+0x1a0>
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	055a      	lsls	r2, r3, #21
 8008e5e:	d407      	bmi.n	8008e70 <_printf_float+0x1f4>
 8008e60:	6923      	ldr	r3, [r4, #16]
 8008e62:	4642      	mov	r2, r8
 8008e64:	4631      	mov	r1, r6
 8008e66:	4628      	mov	r0, r5
 8008e68:	47b8      	blx	r7
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	d12c      	bne.n	8008ec8 <_printf_float+0x24c>
 8008e6e:	e764      	b.n	8008d3a <_printf_float+0xbe>
 8008e70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008e74:	f240 80e0 	bls.w	8009038 <_printf_float+0x3bc>
 8008e78:	2200      	movs	r2, #0
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e80:	f7f7 fe26 	bl	8000ad0 <__aeabi_dcmpeq>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d034      	beq.n	8008ef2 <_printf_float+0x276>
 8008e88:	2301      	movs	r3, #1
 8008e8a:	4a37      	ldr	r2, [pc, #220]	; (8008f68 <_printf_float+0x2ec>)
 8008e8c:	4631      	mov	r1, r6
 8008e8e:	4628      	mov	r0, r5
 8008e90:	47b8      	blx	r7
 8008e92:	3001      	adds	r0, #1
 8008e94:	f43f af51 	beq.w	8008d3a <_printf_float+0xbe>
 8008e98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	db02      	blt.n	8008ea6 <_printf_float+0x22a>
 8008ea0:	6823      	ldr	r3, [r4, #0]
 8008ea2:	07d8      	lsls	r0, r3, #31
 8008ea4:	d510      	bpl.n	8008ec8 <_printf_float+0x24c>
 8008ea6:	ee18 3a10 	vmov	r3, s16
 8008eaa:	4652      	mov	r2, sl
 8008eac:	4631      	mov	r1, r6
 8008eae:	4628      	mov	r0, r5
 8008eb0:	47b8      	blx	r7
 8008eb2:	3001      	adds	r0, #1
 8008eb4:	f43f af41 	beq.w	8008d3a <_printf_float+0xbe>
 8008eb8:	f04f 0800 	mov.w	r8, #0
 8008ebc:	f104 091a 	add.w	r9, r4, #26
 8008ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	4543      	cmp	r3, r8
 8008ec6:	dc09      	bgt.n	8008edc <_printf_float+0x260>
 8008ec8:	6823      	ldr	r3, [r4, #0]
 8008eca:	079b      	lsls	r3, r3, #30
 8008ecc:	f100 8107 	bmi.w	80090de <_printf_float+0x462>
 8008ed0:	68e0      	ldr	r0, [r4, #12]
 8008ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ed4:	4298      	cmp	r0, r3
 8008ed6:	bfb8      	it	lt
 8008ed8:	4618      	movlt	r0, r3
 8008eda:	e730      	b.n	8008d3e <_printf_float+0xc2>
 8008edc:	2301      	movs	r3, #1
 8008ede:	464a      	mov	r2, r9
 8008ee0:	4631      	mov	r1, r6
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	47b8      	blx	r7
 8008ee6:	3001      	adds	r0, #1
 8008ee8:	f43f af27 	beq.w	8008d3a <_printf_float+0xbe>
 8008eec:	f108 0801 	add.w	r8, r8, #1
 8008ef0:	e7e6      	b.n	8008ec0 <_printf_float+0x244>
 8008ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	dc39      	bgt.n	8008f6c <_printf_float+0x2f0>
 8008ef8:	2301      	movs	r3, #1
 8008efa:	4a1b      	ldr	r2, [pc, #108]	; (8008f68 <_printf_float+0x2ec>)
 8008efc:	4631      	mov	r1, r6
 8008efe:	4628      	mov	r0, r5
 8008f00:	47b8      	blx	r7
 8008f02:	3001      	adds	r0, #1
 8008f04:	f43f af19 	beq.w	8008d3a <_printf_float+0xbe>
 8008f08:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	d102      	bne.n	8008f16 <_printf_float+0x29a>
 8008f10:	6823      	ldr	r3, [r4, #0]
 8008f12:	07d9      	lsls	r1, r3, #31
 8008f14:	d5d8      	bpl.n	8008ec8 <_printf_float+0x24c>
 8008f16:	ee18 3a10 	vmov	r3, s16
 8008f1a:	4652      	mov	r2, sl
 8008f1c:	4631      	mov	r1, r6
 8008f1e:	4628      	mov	r0, r5
 8008f20:	47b8      	blx	r7
 8008f22:	3001      	adds	r0, #1
 8008f24:	f43f af09 	beq.w	8008d3a <_printf_float+0xbe>
 8008f28:	f04f 0900 	mov.w	r9, #0
 8008f2c:	f104 0a1a 	add.w	sl, r4, #26
 8008f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f32:	425b      	negs	r3, r3
 8008f34:	454b      	cmp	r3, r9
 8008f36:	dc01      	bgt.n	8008f3c <_printf_float+0x2c0>
 8008f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f3a:	e792      	b.n	8008e62 <_printf_float+0x1e6>
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	4652      	mov	r2, sl
 8008f40:	4631      	mov	r1, r6
 8008f42:	4628      	mov	r0, r5
 8008f44:	47b8      	blx	r7
 8008f46:	3001      	adds	r0, #1
 8008f48:	f43f aef7 	beq.w	8008d3a <_printf_float+0xbe>
 8008f4c:	f109 0901 	add.w	r9, r9, #1
 8008f50:	e7ee      	b.n	8008f30 <_printf_float+0x2b4>
 8008f52:	bf00      	nop
 8008f54:	7fefffff 	.word	0x7fefffff
 8008f58:	0800bb48 	.word	0x0800bb48
 8008f5c:	0800bb4c 	.word	0x0800bb4c
 8008f60:	0800bb50 	.word	0x0800bb50
 8008f64:	0800bb54 	.word	0x0800bb54
 8008f68:	0800bb58 	.word	0x0800bb58
 8008f6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f70:	429a      	cmp	r2, r3
 8008f72:	bfa8      	it	ge
 8008f74:	461a      	movge	r2, r3
 8008f76:	2a00      	cmp	r2, #0
 8008f78:	4691      	mov	r9, r2
 8008f7a:	dc37      	bgt.n	8008fec <_printf_float+0x370>
 8008f7c:	f04f 0b00 	mov.w	fp, #0
 8008f80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f84:	f104 021a 	add.w	r2, r4, #26
 8008f88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f8a:	9305      	str	r3, [sp, #20]
 8008f8c:	eba3 0309 	sub.w	r3, r3, r9
 8008f90:	455b      	cmp	r3, fp
 8008f92:	dc33      	bgt.n	8008ffc <_printf_float+0x380>
 8008f94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	db3b      	blt.n	8009014 <_printf_float+0x398>
 8008f9c:	6823      	ldr	r3, [r4, #0]
 8008f9e:	07da      	lsls	r2, r3, #31
 8008fa0:	d438      	bmi.n	8009014 <_printf_float+0x398>
 8008fa2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008fa6:	eba2 0903 	sub.w	r9, r2, r3
 8008faa:	9b05      	ldr	r3, [sp, #20]
 8008fac:	1ad2      	subs	r2, r2, r3
 8008fae:	4591      	cmp	r9, r2
 8008fb0:	bfa8      	it	ge
 8008fb2:	4691      	movge	r9, r2
 8008fb4:	f1b9 0f00 	cmp.w	r9, #0
 8008fb8:	dc35      	bgt.n	8009026 <_printf_float+0x3aa>
 8008fba:	f04f 0800 	mov.w	r8, #0
 8008fbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fc2:	f104 0a1a 	add.w	sl, r4, #26
 8008fc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fca:	1a9b      	subs	r3, r3, r2
 8008fcc:	eba3 0309 	sub.w	r3, r3, r9
 8008fd0:	4543      	cmp	r3, r8
 8008fd2:	f77f af79 	ble.w	8008ec8 <_printf_float+0x24c>
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	4652      	mov	r2, sl
 8008fda:	4631      	mov	r1, r6
 8008fdc:	4628      	mov	r0, r5
 8008fde:	47b8      	blx	r7
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	f43f aeaa 	beq.w	8008d3a <_printf_float+0xbe>
 8008fe6:	f108 0801 	add.w	r8, r8, #1
 8008fea:	e7ec      	b.n	8008fc6 <_printf_float+0x34a>
 8008fec:	4613      	mov	r3, r2
 8008fee:	4631      	mov	r1, r6
 8008ff0:	4642      	mov	r2, r8
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	47b8      	blx	r7
 8008ff6:	3001      	adds	r0, #1
 8008ff8:	d1c0      	bne.n	8008f7c <_printf_float+0x300>
 8008ffa:	e69e      	b.n	8008d3a <_printf_float+0xbe>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	4631      	mov	r1, r6
 8009000:	4628      	mov	r0, r5
 8009002:	9205      	str	r2, [sp, #20]
 8009004:	47b8      	blx	r7
 8009006:	3001      	adds	r0, #1
 8009008:	f43f ae97 	beq.w	8008d3a <_printf_float+0xbe>
 800900c:	f10b 0b01 	add.w	fp, fp, #1
 8009010:	9a05      	ldr	r2, [sp, #20]
 8009012:	e7b9      	b.n	8008f88 <_printf_float+0x30c>
 8009014:	ee18 3a10 	vmov	r3, s16
 8009018:	4652      	mov	r2, sl
 800901a:	4631      	mov	r1, r6
 800901c:	4628      	mov	r0, r5
 800901e:	47b8      	blx	r7
 8009020:	3001      	adds	r0, #1
 8009022:	d1be      	bne.n	8008fa2 <_printf_float+0x326>
 8009024:	e689      	b.n	8008d3a <_printf_float+0xbe>
 8009026:	9a05      	ldr	r2, [sp, #20]
 8009028:	464b      	mov	r3, r9
 800902a:	4631      	mov	r1, r6
 800902c:	4628      	mov	r0, r5
 800902e:	4442      	add	r2, r8
 8009030:	47b8      	blx	r7
 8009032:	3001      	adds	r0, #1
 8009034:	d1c1      	bne.n	8008fba <_printf_float+0x33e>
 8009036:	e680      	b.n	8008d3a <_printf_float+0xbe>
 8009038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800903a:	2a01      	cmp	r2, #1
 800903c:	dc01      	bgt.n	8009042 <_printf_float+0x3c6>
 800903e:	07db      	lsls	r3, r3, #31
 8009040:	d53a      	bpl.n	80090b8 <_printf_float+0x43c>
 8009042:	2301      	movs	r3, #1
 8009044:	4642      	mov	r2, r8
 8009046:	4631      	mov	r1, r6
 8009048:	4628      	mov	r0, r5
 800904a:	47b8      	blx	r7
 800904c:	3001      	adds	r0, #1
 800904e:	f43f ae74 	beq.w	8008d3a <_printf_float+0xbe>
 8009052:	ee18 3a10 	vmov	r3, s16
 8009056:	4652      	mov	r2, sl
 8009058:	4631      	mov	r1, r6
 800905a:	4628      	mov	r0, r5
 800905c:	47b8      	blx	r7
 800905e:	3001      	adds	r0, #1
 8009060:	f43f ae6b 	beq.w	8008d3a <_printf_float+0xbe>
 8009064:	2200      	movs	r2, #0
 8009066:	2300      	movs	r3, #0
 8009068:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800906c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009070:	f7f7 fd2e 	bl	8000ad0 <__aeabi_dcmpeq>
 8009074:	b9d8      	cbnz	r0, 80090ae <_printf_float+0x432>
 8009076:	f10a 33ff 	add.w	r3, sl, #4294967295
 800907a:	f108 0201 	add.w	r2, r8, #1
 800907e:	4631      	mov	r1, r6
 8009080:	4628      	mov	r0, r5
 8009082:	47b8      	blx	r7
 8009084:	3001      	adds	r0, #1
 8009086:	d10e      	bne.n	80090a6 <_printf_float+0x42a>
 8009088:	e657      	b.n	8008d3a <_printf_float+0xbe>
 800908a:	2301      	movs	r3, #1
 800908c:	4652      	mov	r2, sl
 800908e:	4631      	mov	r1, r6
 8009090:	4628      	mov	r0, r5
 8009092:	47b8      	blx	r7
 8009094:	3001      	adds	r0, #1
 8009096:	f43f ae50 	beq.w	8008d3a <_printf_float+0xbe>
 800909a:	f108 0801 	add.w	r8, r8, #1
 800909e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090a0:	3b01      	subs	r3, #1
 80090a2:	4543      	cmp	r3, r8
 80090a4:	dcf1      	bgt.n	800908a <_printf_float+0x40e>
 80090a6:	464b      	mov	r3, r9
 80090a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80090ac:	e6da      	b.n	8008e64 <_printf_float+0x1e8>
 80090ae:	f04f 0800 	mov.w	r8, #0
 80090b2:	f104 0a1a 	add.w	sl, r4, #26
 80090b6:	e7f2      	b.n	800909e <_printf_float+0x422>
 80090b8:	2301      	movs	r3, #1
 80090ba:	4642      	mov	r2, r8
 80090bc:	e7df      	b.n	800907e <_printf_float+0x402>
 80090be:	2301      	movs	r3, #1
 80090c0:	464a      	mov	r2, r9
 80090c2:	4631      	mov	r1, r6
 80090c4:	4628      	mov	r0, r5
 80090c6:	47b8      	blx	r7
 80090c8:	3001      	adds	r0, #1
 80090ca:	f43f ae36 	beq.w	8008d3a <_printf_float+0xbe>
 80090ce:	f108 0801 	add.w	r8, r8, #1
 80090d2:	68e3      	ldr	r3, [r4, #12]
 80090d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090d6:	1a5b      	subs	r3, r3, r1
 80090d8:	4543      	cmp	r3, r8
 80090da:	dcf0      	bgt.n	80090be <_printf_float+0x442>
 80090dc:	e6f8      	b.n	8008ed0 <_printf_float+0x254>
 80090de:	f04f 0800 	mov.w	r8, #0
 80090e2:	f104 0919 	add.w	r9, r4, #25
 80090e6:	e7f4      	b.n	80090d2 <_printf_float+0x456>

080090e8 <_printf_common>:
 80090e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090ec:	4616      	mov	r6, r2
 80090ee:	4699      	mov	r9, r3
 80090f0:	688a      	ldr	r2, [r1, #8]
 80090f2:	4607      	mov	r7, r0
 80090f4:	690b      	ldr	r3, [r1, #16]
 80090f6:	460c      	mov	r4, r1
 80090f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090fc:	4293      	cmp	r3, r2
 80090fe:	bfb8      	it	lt
 8009100:	4613      	movlt	r3, r2
 8009102:	6033      	str	r3, [r6, #0]
 8009104:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009108:	b10a      	cbz	r2, 800910e <_printf_common+0x26>
 800910a:	3301      	adds	r3, #1
 800910c:	6033      	str	r3, [r6, #0]
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	0699      	lsls	r1, r3, #26
 8009112:	bf42      	ittt	mi
 8009114:	6833      	ldrmi	r3, [r6, #0]
 8009116:	3302      	addmi	r3, #2
 8009118:	6033      	strmi	r3, [r6, #0]
 800911a:	6825      	ldr	r5, [r4, #0]
 800911c:	f015 0506 	ands.w	r5, r5, #6
 8009120:	d106      	bne.n	8009130 <_printf_common+0x48>
 8009122:	f104 0a19 	add.w	sl, r4, #25
 8009126:	68e3      	ldr	r3, [r4, #12]
 8009128:	6832      	ldr	r2, [r6, #0]
 800912a:	1a9b      	subs	r3, r3, r2
 800912c:	42ab      	cmp	r3, r5
 800912e:	dc2b      	bgt.n	8009188 <_printf_common+0xa0>
 8009130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009134:	1e13      	subs	r3, r2, #0
 8009136:	6822      	ldr	r2, [r4, #0]
 8009138:	bf18      	it	ne
 800913a:	2301      	movne	r3, #1
 800913c:	0692      	lsls	r2, r2, #26
 800913e:	d430      	bmi.n	80091a2 <_printf_common+0xba>
 8009140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009144:	4649      	mov	r1, r9
 8009146:	4638      	mov	r0, r7
 8009148:	47c0      	blx	r8
 800914a:	3001      	adds	r0, #1
 800914c:	d023      	beq.n	8009196 <_printf_common+0xae>
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	341a      	adds	r4, #26
 8009152:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009156:	f003 0306 	and.w	r3, r3, #6
 800915a:	2b04      	cmp	r3, #4
 800915c:	bf0a      	itet	eq
 800915e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009162:	2500      	movne	r5, #0
 8009164:	6833      	ldreq	r3, [r6, #0]
 8009166:	f04f 0600 	mov.w	r6, #0
 800916a:	bf08      	it	eq
 800916c:	1aed      	subeq	r5, r5, r3
 800916e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009172:	bf08      	it	eq
 8009174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009178:	4293      	cmp	r3, r2
 800917a:	bfc4      	itt	gt
 800917c:	1a9b      	subgt	r3, r3, r2
 800917e:	18ed      	addgt	r5, r5, r3
 8009180:	42b5      	cmp	r5, r6
 8009182:	d11a      	bne.n	80091ba <_printf_common+0xd2>
 8009184:	2000      	movs	r0, #0
 8009186:	e008      	b.n	800919a <_printf_common+0xb2>
 8009188:	2301      	movs	r3, #1
 800918a:	4652      	mov	r2, sl
 800918c:	4649      	mov	r1, r9
 800918e:	4638      	mov	r0, r7
 8009190:	47c0      	blx	r8
 8009192:	3001      	adds	r0, #1
 8009194:	d103      	bne.n	800919e <_printf_common+0xb6>
 8009196:	f04f 30ff 	mov.w	r0, #4294967295
 800919a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800919e:	3501      	adds	r5, #1
 80091a0:	e7c1      	b.n	8009126 <_printf_common+0x3e>
 80091a2:	18e1      	adds	r1, r4, r3
 80091a4:	1c5a      	adds	r2, r3, #1
 80091a6:	2030      	movs	r0, #48	; 0x30
 80091a8:	3302      	adds	r3, #2
 80091aa:	4422      	add	r2, r4
 80091ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091b8:	e7c2      	b.n	8009140 <_printf_common+0x58>
 80091ba:	2301      	movs	r3, #1
 80091bc:	4622      	mov	r2, r4
 80091be:	4649      	mov	r1, r9
 80091c0:	4638      	mov	r0, r7
 80091c2:	47c0      	blx	r8
 80091c4:	3001      	adds	r0, #1
 80091c6:	d0e6      	beq.n	8009196 <_printf_common+0xae>
 80091c8:	3601      	adds	r6, #1
 80091ca:	e7d9      	b.n	8009180 <_printf_common+0x98>

080091cc <_printf_i>:
 80091cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091d0:	7e0f      	ldrb	r7, [r1, #24]
 80091d2:	4691      	mov	r9, r2
 80091d4:	4680      	mov	r8, r0
 80091d6:	460c      	mov	r4, r1
 80091d8:	2f78      	cmp	r7, #120	; 0x78
 80091da:	469a      	mov	sl, r3
 80091dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80091e2:	d807      	bhi.n	80091f4 <_printf_i+0x28>
 80091e4:	2f62      	cmp	r7, #98	; 0x62
 80091e6:	d80a      	bhi.n	80091fe <_printf_i+0x32>
 80091e8:	2f00      	cmp	r7, #0
 80091ea:	f000 80d3 	beq.w	8009394 <_printf_i+0x1c8>
 80091ee:	2f58      	cmp	r7, #88	; 0x58
 80091f0:	f000 80bf 	beq.w	8009372 <_printf_i+0x1a6>
 80091f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80091fc:	e03a      	b.n	8009274 <_printf_i+0xa8>
 80091fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009202:	2b15      	cmp	r3, #21
 8009204:	d8f6      	bhi.n	80091f4 <_printf_i+0x28>
 8009206:	a101      	add	r1, pc, #4	; (adr r1, 800920c <_printf_i+0x40>)
 8009208:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800920c:	08009265 	.word	0x08009265
 8009210:	08009279 	.word	0x08009279
 8009214:	080091f5 	.word	0x080091f5
 8009218:	080091f5 	.word	0x080091f5
 800921c:	080091f5 	.word	0x080091f5
 8009220:	080091f5 	.word	0x080091f5
 8009224:	08009279 	.word	0x08009279
 8009228:	080091f5 	.word	0x080091f5
 800922c:	080091f5 	.word	0x080091f5
 8009230:	080091f5 	.word	0x080091f5
 8009234:	080091f5 	.word	0x080091f5
 8009238:	0800937b 	.word	0x0800937b
 800923c:	080092a5 	.word	0x080092a5
 8009240:	08009337 	.word	0x08009337
 8009244:	080091f5 	.word	0x080091f5
 8009248:	080091f5 	.word	0x080091f5
 800924c:	0800939d 	.word	0x0800939d
 8009250:	080091f5 	.word	0x080091f5
 8009254:	080092a5 	.word	0x080092a5
 8009258:	080091f5 	.word	0x080091f5
 800925c:	080091f5 	.word	0x080091f5
 8009260:	0800933f 	.word	0x0800933f
 8009264:	682b      	ldr	r3, [r5, #0]
 8009266:	1d1a      	adds	r2, r3, #4
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	602a      	str	r2, [r5, #0]
 800926c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009270:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009274:	2301      	movs	r3, #1
 8009276:	e09e      	b.n	80093b6 <_printf_i+0x1ea>
 8009278:	6820      	ldr	r0, [r4, #0]
 800927a:	682b      	ldr	r3, [r5, #0]
 800927c:	0607      	lsls	r7, r0, #24
 800927e:	f103 0104 	add.w	r1, r3, #4
 8009282:	6029      	str	r1, [r5, #0]
 8009284:	d501      	bpl.n	800928a <_printf_i+0xbe>
 8009286:	681e      	ldr	r6, [r3, #0]
 8009288:	e003      	b.n	8009292 <_printf_i+0xc6>
 800928a:	0646      	lsls	r6, r0, #25
 800928c:	d5fb      	bpl.n	8009286 <_printf_i+0xba>
 800928e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009292:	2e00      	cmp	r6, #0
 8009294:	da03      	bge.n	800929e <_printf_i+0xd2>
 8009296:	232d      	movs	r3, #45	; 0x2d
 8009298:	4276      	negs	r6, r6
 800929a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800929e:	4859      	ldr	r0, [pc, #356]	; (8009404 <_printf_i+0x238>)
 80092a0:	230a      	movs	r3, #10
 80092a2:	e012      	b.n	80092ca <_printf_i+0xfe>
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	6820      	ldr	r0, [r4, #0]
 80092a8:	1d19      	adds	r1, r3, #4
 80092aa:	6029      	str	r1, [r5, #0]
 80092ac:	0605      	lsls	r5, r0, #24
 80092ae:	d501      	bpl.n	80092b4 <_printf_i+0xe8>
 80092b0:	681e      	ldr	r6, [r3, #0]
 80092b2:	e002      	b.n	80092ba <_printf_i+0xee>
 80092b4:	0641      	lsls	r1, r0, #25
 80092b6:	d5fb      	bpl.n	80092b0 <_printf_i+0xe4>
 80092b8:	881e      	ldrh	r6, [r3, #0]
 80092ba:	2f6f      	cmp	r7, #111	; 0x6f
 80092bc:	4851      	ldr	r0, [pc, #324]	; (8009404 <_printf_i+0x238>)
 80092be:	bf0c      	ite	eq
 80092c0:	2308      	moveq	r3, #8
 80092c2:	230a      	movne	r3, #10
 80092c4:	2100      	movs	r1, #0
 80092c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092ca:	6865      	ldr	r5, [r4, #4]
 80092cc:	2d00      	cmp	r5, #0
 80092ce:	60a5      	str	r5, [r4, #8]
 80092d0:	bfa2      	ittt	ge
 80092d2:	6821      	ldrge	r1, [r4, #0]
 80092d4:	f021 0104 	bicge.w	r1, r1, #4
 80092d8:	6021      	strge	r1, [r4, #0]
 80092da:	b90e      	cbnz	r6, 80092e0 <_printf_i+0x114>
 80092dc:	2d00      	cmp	r5, #0
 80092de:	d04a      	beq.n	8009376 <_printf_i+0x1aa>
 80092e0:	4615      	mov	r5, r2
 80092e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80092e6:	fb03 6711 	mls	r7, r3, r1, r6
 80092ea:	5dc7      	ldrb	r7, [r0, r7]
 80092ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80092f0:	4637      	mov	r7, r6
 80092f2:	460e      	mov	r6, r1
 80092f4:	42bb      	cmp	r3, r7
 80092f6:	d9f4      	bls.n	80092e2 <_printf_i+0x116>
 80092f8:	2b08      	cmp	r3, #8
 80092fa:	d10b      	bne.n	8009314 <_printf_i+0x148>
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	07de      	lsls	r6, r3, #31
 8009300:	d508      	bpl.n	8009314 <_printf_i+0x148>
 8009302:	6923      	ldr	r3, [r4, #16]
 8009304:	6861      	ldr	r1, [r4, #4]
 8009306:	4299      	cmp	r1, r3
 8009308:	bfde      	ittt	le
 800930a:	2330      	movle	r3, #48	; 0x30
 800930c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009310:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009314:	1b52      	subs	r2, r2, r5
 8009316:	6122      	str	r2, [r4, #16]
 8009318:	464b      	mov	r3, r9
 800931a:	aa03      	add	r2, sp, #12
 800931c:	4621      	mov	r1, r4
 800931e:	4640      	mov	r0, r8
 8009320:	f8cd a000 	str.w	sl, [sp]
 8009324:	f7ff fee0 	bl	80090e8 <_printf_common>
 8009328:	3001      	adds	r0, #1
 800932a:	d149      	bne.n	80093c0 <_printf_i+0x1f4>
 800932c:	f04f 30ff 	mov.w	r0, #4294967295
 8009330:	b004      	add	sp, #16
 8009332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009336:	6823      	ldr	r3, [r4, #0]
 8009338:	f043 0320 	orr.w	r3, r3, #32
 800933c:	6023      	str	r3, [r4, #0]
 800933e:	2778      	movs	r7, #120	; 0x78
 8009340:	4831      	ldr	r0, [pc, #196]	; (8009408 <_printf_i+0x23c>)
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009348:	061f      	lsls	r7, r3, #24
 800934a:	6829      	ldr	r1, [r5, #0]
 800934c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009350:	d402      	bmi.n	8009358 <_printf_i+0x18c>
 8009352:	065f      	lsls	r7, r3, #25
 8009354:	bf48      	it	mi
 8009356:	b2b6      	uxthmi	r6, r6
 8009358:	07df      	lsls	r7, r3, #31
 800935a:	6029      	str	r1, [r5, #0]
 800935c:	bf44      	itt	mi
 800935e:	f043 0320 	orrmi.w	r3, r3, #32
 8009362:	6023      	strmi	r3, [r4, #0]
 8009364:	b91e      	cbnz	r6, 800936e <_printf_i+0x1a2>
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	f023 0320 	bic.w	r3, r3, #32
 800936c:	6023      	str	r3, [r4, #0]
 800936e:	2310      	movs	r3, #16
 8009370:	e7a8      	b.n	80092c4 <_printf_i+0xf8>
 8009372:	4824      	ldr	r0, [pc, #144]	; (8009404 <_printf_i+0x238>)
 8009374:	e7e5      	b.n	8009342 <_printf_i+0x176>
 8009376:	4615      	mov	r5, r2
 8009378:	e7be      	b.n	80092f8 <_printf_i+0x12c>
 800937a:	682b      	ldr	r3, [r5, #0]
 800937c:	6826      	ldr	r6, [r4, #0]
 800937e:	1d18      	adds	r0, r3, #4
 8009380:	6961      	ldr	r1, [r4, #20]
 8009382:	6028      	str	r0, [r5, #0]
 8009384:	0635      	lsls	r5, r6, #24
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	d501      	bpl.n	800938e <_printf_i+0x1c2>
 800938a:	6019      	str	r1, [r3, #0]
 800938c:	e002      	b.n	8009394 <_printf_i+0x1c8>
 800938e:	0670      	lsls	r0, r6, #25
 8009390:	d5fb      	bpl.n	800938a <_printf_i+0x1be>
 8009392:	8019      	strh	r1, [r3, #0]
 8009394:	2300      	movs	r3, #0
 8009396:	4615      	mov	r5, r2
 8009398:	6123      	str	r3, [r4, #16]
 800939a:	e7bd      	b.n	8009318 <_printf_i+0x14c>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	2100      	movs	r1, #0
 80093a0:	1d1a      	adds	r2, r3, #4
 80093a2:	602a      	str	r2, [r5, #0]
 80093a4:	681d      	ldr	r5, [r3, #0]
 80093a6:	6862      	ldr	r2, [r4, #4]
 80093a8:	4628      	mov	r0, r5
 80093aa:	f000 f9c1 	bl	8009730 <memchr>
 80093ae:	b108      	cbz	r0, 80093b4 <_printf_i+0x1e8>
 80093b0:	1b40      	subs	r0, r0, r5
 80093b2:	6060      	str	r0, [r4, #4]
 80093b4:	6863      	ldr	r3, [r4, #4]
 80093b6:	6123      	str	r3, [r4, #16]
 80093b8:	2300      	movs	r3, #0
 80093ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093be:	e7ab      	b.n	8009318 <_printf_i+0x14c>
 80093c0:	6923      	ldr	r3, [r4, #16]
 80093c2:	462a      	mov	r2, r5
 80093c4:	4649      	mov	r1, r9
 80093c6:	4640      	mov	r0, r8
 80093c8:	47d0      	blx	sl
 80093ca:	3001      	adds	r0, #1
 80093cc:	d0ae      	beq.n	800932c <_printf_i+0x160>
 80093ce:	6823      	ldr	r3, [r4, #0]
 80093d0:	079b      	lsls	r3, r3, #30
 80093d2:	d413      	bmi.n	80093fc <_printf_i+0x230>
 80093d4:	68e0      	ldr	r0, [r4, #12]
 80093d6:	9b03      	ldr	r3, [sp, #12]
 80093d8:	4298      	cmp	r0, r3
 80093da:	bfb8      	it	lt
 80093dc:	4618      	movlt	r0, r3
 80093de:	e7a7      	b.n	8009330 <_printf_i+0x164>
 80093e0:	2301      	movs	r3, #1
 80093e2:	4632      	mov	r2, r6
 80093e4:	4649      	mov	r1, r9
 80093e6:	4640      	mov	r0, r8
 80093e8:	47d0      	blx	sl
 80093ea:	3001      	adds	r0, #1
 80093ec:	d09e      	beq.n	800932c <_printf_i+0x160>
 80093ee:	3501      	adds	r5, #1
 80093f0:	68e3      	ldr	r3, [r4, #12]
 80093f2:	9903      	ldr	r1, [sp, #12]
 80093f4:	1a5b      	subs	r3, r3, r1
 80093f6:	42ab      	cmp	r3, r5
 80093f8:	dcf2      	bgt.n	80093e0 <_printf_i+0x214>
 80093fa:	e7eb      	b.n	80093d4 <_printf_i+0x208>
 80093fc:	2500      	movs	r5, #0
 80093fe:	f104 0619 	add.w	r6, r4, #25
 8009402:	e7f5      	b.n	80093f0 <_printf_i+0x224>
 8009404:	0800bb5a 	.word	0x0800bb5a
 8009408:	0800bb6b 	.word	0x0800bb6b

0800940c <std>:
 800940c:	2300      	movs	r3, #0
 800940e:	b510      	push	{r4, lr}
 8009410:	4604      	mov	r4, r0
 8009412:	6083      	str	r3, [r0, #8]
 8009414:	8181      	strh	r1, [r0, #12]
 8009416:	4619      	mov	r1, r3
 8009418:	6643      	str	r3, [r0, #100]	; 0x64
 800941a:	81c2      	strh	r2, [r0, #14]
 800941c:	2208      	movs	r2, #8
 800941e:	6183      	str	r3, [r0, #24]
 8009420:	e9c0 3300 	strd	r3, r3, [r0]
 8009424:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009428:	305c      	adds	r0, #92	; 0x5c
 800942a:	f000 f902 	bl	8009632 <memset>
 800942e:	4b05      	ldr	r3, [pc, #20]	; (8009444 <std+0x38>)
 8009430:	6224      	str	r4, [r4, #32]
 8009432:	6263      	str	r3, [r4, #36]	; 0x24
 8009434:	4b04      	ldr	r3, [pc, #16]	; (8009448 <std+0x3c>)
 8009436:	62a3      	str	r3, [r4, #40]	; 0x28
 8009438:	4b04      	ldr	r3, [pc, #16]	; (800944c <std+0x40>)
 800943a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800943c:	4b04      	ldr	r3, [pc, #16]	; (8009450 <std+0x44>)
 800943e:	6323      	str	r3, [r4, #48]	; 0x30
 8009440:	bd10      	pop	{r4, pc}
 8009442:	bf00      	nop
 8009444:	080095ad 	.word	0x080095ad
 8009448:	080095cf 	.word	0x080095cf
 800944c:	08009607 	.word	0x08009607
 8009450:	0800962b 	.word	0x0800962b

08009454 <stdio_exit_handler>:
 8009454:	4a02      	ldr	r2, [pc, #8]	; (8009460 <stdio_exit_handler+0xc>)
 8009456:	4903      	ldr	r1, [pc, #12]	; (8009464 <stdio_exit_handler+0x10>)
 8009458:	4803      	ldr	r0, [pc, #12]	; (8009468 <stdio_exit_handler+0x14>)
 800945a:	f000 b869 	b.w	8009530 <_fwalk_sglue>
 800945e:	bf00      	nop
 8009460:	20000014 	.word	0x20000014
 8009464:	0800b111 	.word	0x0800b111
 8009468:	20000020 	.word	0x20000020

0800946c <cleanup_stdio>:
 800946c:	6841      	ldr	r1, [r0, #4]
 800946e:	4b0c      	ldr	r3, [pc, #48]	; (80094a0 <cleanup_stdio+0x34>)
 8009470:	4299      	cmp	r1, r3
 8009472:	b510      	push	{r4, lr}
 8009474:	4604      	mov	r4, r0
 8009476:	d001      	beq.n	800947c <cleanup_stdio+0x10>
 8009478:	f001 fe4a 	bl	800b110 <_fflush_r>
 800947c:	68a1      	ldr	r1, [r4, #8]
 800947e:	4b09      	ldr	r3, [pc, #36]	; (80094a4 <cleanup_stdio+0x38>)
 8009480:	4299      	cmp	r1, r3
 8009482:	d002      	beq.n	800948a <cleanup_stdio+0x1e>
 8009484:	4620      	mov	r0, r4
 8009486:	f001 fe43 	bl	800b110 <_fflush_r>
 800948a:	68e1      	ldr	r1, [r4, #12]
 800948c:	4b06      	ldr	r3, [pc, #24]	; (80094a8 <cleanup_stdio+0x3c>)
 800948e:	4299      	cmp	r1, r3
 8009490:	d004      	beq.n	800949c <cleanup_stdio+0x30>
 8009492:	4620      	mov	r0, r4
 8009494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009498:	f001 be3a 	b.w	800b110 <_fflush_r>
 800949c:	bd10      	pop	{r4, pc}
 800949e:	bf00      	nop
 80094a0:	20000980 	.word	0x20000980
 80094a4:	200009e8 	.word	0x200009e8
 80094a8:	20000a50 	.word	0x20000a50

080094ac <global_stdio_init.part.0>:
 80094ac:	b510      	push	{r4, lr}
 80094ae:	4b0b      	ldr	r3, [pc, #44]	; (80094dc <global_stdio_init.part.0+0x30>)
 80094b0:	2104      	movs	r1, #4
 80094b2:	4c0b      	ldr	r4, [pc, #44]	; (80094e0 <global_stdio_init.part.0+0x34>)
 80094b4:	4a0b      	ldr	r2, [pc, #44]	; (80094e4 <global_stdio_init.part.0+0x38>)
 80094b6:	4620      	mov	r0, r4
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f7ff ffa6 	bl	800940c <std>
 80094c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80094c4:	2201      	movs	r2, #1
 80094c6:	2109      	movs	r1, #9
 80094c8:	f7ff ffa0 	bl	800940c <std>
 80094cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80094d0:	2202      	movs	r2, #2
 80094d2:	2112      	movs	r1, #18
 80094d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094d8:	f7ff bf98 	b.w	800940c <std>
 80094dc:	20000ab8 	.word	0x20000ab8
 80094e0:	20000980 	.word	0x20000980
 80094e4:	08009455 	.word	0x08009455

080094e8 <__sfp_lock_acquire>:
 80094e8:	4801      	ldr	r0, [pc, #4]	; (80094f0 <__sfp_lock_acquire+0x8>)
 80094ea:	f000 b91f 	b.w	800972c <__retarget_lock_acquire_recursive>
 80094ee:	bf00      	nop
 80094f0:	20000ac1 	.word	0x20000ac1

080094f4 <__sfp_lock_release>:
 80094f4:	4801      	ldr	r0, [pc, #4]	; (80094fc <__sfp_lock_release+0x8>)
 80094f6:	f000 b91a 	b.w	800972e <__retarget_lock_release_recursive>
 80094fa:	bf00      	nop
 80094fc:	20000ac1 	.word	0x20000ac1

08009500 <__sinit>:
 8009500:	b510      	push	{r4, lr}
 8009502:	4604      	mov	r4, r0
 8009504:	f7ff fff0 	bl	80094e8 <__sfp_lock_acquire>
 8009508:	6a23      	ldr	r3, [r4, #32]
 800950a:	b11b      	cbz	r3, 8009514 <__sinit+0x14>
 800950c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009510:	f7ff bff0 	b.w	80094f4 <__sfp_lock_release>
 8009514:	4b04      	ldr	r3, [pc, #16]	; (8009528 <__sinit+0x28>)
 8009516:	6223      	str	r3, [r4, #32]
 8009518:	4b04      	ldr	r3, [pc, #16]	; (800952c <__sinit+0x2c>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1f5      	bne.n	800950c <__sinit+0xc>
 8009520:	f7ff ffc4 	bl	80094ac <global_stdio_init.part.0>
 8009524:	e7f2      	b.n	800950c <__sinit+0xc>
 8009526:	bf00      	nop
 8009528:	0800946d 	.word	0x0800946d
 800952c:	20000ab8 	.word	0x20000ab8

08009530 <_fwalk_sglue>:
 8009530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009534:	4607      	mov	r7, r0
 8009536:	4688      	mov	r8, r1
 8009538:	4614      	mov	r4, r2
 800953a:	2600      	movs	r6, #0
 800953c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009540:	f1b9 0901 	subs.w	r9, r9, #1
 8009544:	d505      	bpl.n	8009552 <_fwalk_sglue+0x22>
 8009546:	6824      	ldr	r4, [r4, #0]
 8009548:	2c00      	cmp	r4, #0
 800954a:	d1f7      	bne.n	800953c <_fwalk_sglue+0xc>
 800954c:	4630      	mov	r0, r6
 800954e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009552:	89ab      	ldrh	r3, [r5, #12]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d907      	bls.n	8009568 <_fwalk_sglue+0x38>
 8009558:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800955c:	3301      	adds	r3, #1
 800955e:	d003      	beq.n	8009568 <_fwalk_sglue+0x38>
 8009560:	4629      	mov	r1, r5
 8009562:	4638      	mov	r0, r7
 8009564:	47c0      	blx	r8
 8009566:	4306      	orrs	r6, r0
 8009568:	3568      	adds	r5, #104	; 0x68
 800956a:	e7e9      	b.n	8009540 <_fwalk_sglue+0x10>

0800956c <siprintf>:
 800956c:	b40e      	push	{r1, r2, r3}
 800956e:	b500      	push	{lr}
 8009570:	b09c      	sub	sp, #112	; 0x70
 8009572:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009576:	ab1d      	add	r3, sp, #116	; 0x74
 8009578:	9002      	str	r0, [sp, #8]
 800957a:	9006      	str	r0, [sp, #24]
 800957c:	9107      	str	r1, [sp, #28]
 800957e:	9104      	str	r1, [sp, #16]
 8009580:	4808      	ldr	r0, [pc, #32]	; (80095a4 <siprintf+0x38>)
 8009582:	4909      	ldr	r1, [pc, #36]	; (80095a8 <siprintf+0x3c>)
 8009584:	f853 2b04 	ldr.w	r2, [r3], #4
 8009588:	9105      	str	r1, [sp, #20]
 800958a:	a902      	add	r1, sp, #8
 800958c:	6800      	ldr	r0, [r0, #0]
 800958e:	9301      	str	r3, [sp, #4]
 8009590:	f001 fc3c 	bl	800ae0c <_svfiprintf_r>
 8009594:	9b02      	ldr	r3, [sp, #8]
 8009596:	2200      	movs	r2, #0
 8009598:	701a      	strb	r2, [r3, #0]
 800959a:	b01c      	add	sp, #112	; 0x70
 800959c:	f85d eb04 	ldr.w	lr, [sp], #4
 80095a0:	b003      	add	sp, #12
 80095a2:	4770      	bx	lr
 80095a4:	2000006c 	.word	0x2000006c
 80095a8:	ffff0208 	.word	0xffff0208

080095ac <__sread>:
 80095ac:	b510      	push	{r4, lr}
 80095ae:	460c      	mov	r4, r1
 80095b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095b4:	f000 f86c 	bl	8009690 <_read_r>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	bfab      	itete	ge
 80095bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80095be:	89a3      	ldrhlt	r3, [r4, #12]
 80095c0:	181b      	addge	r3, r3, r0
 80095c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80095c6:	bfac      	ite	ge
 80095c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80095ca:	81a3      	strhlt	r3, [r4, #12]
 80095cc:	bd10      	pop	{r4, pc}

080095ce <__swrite>:
 80095ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d2:	461f      	mov	r7, r3
 80095d4:	898b      	ldrh	r3, [r1, #12]
 80095d6:	4605      	mov	r5, r0
 80095d8:	460c      	mov	r4, r1
 80095da:	05db      	lsls	r3, r3, #23
 80095dc:	4616      	mov	r6, r2
 80095de:	d505      	bpl.n	80095ec <__swrite+0x1e>
 80095e0:	2302      	movs	r3, #2
 80095e2:	2200      	movs	r2, #0
 80095e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e8:	f000 f840 	bl	800966c <_lseek_r>
 80095ec:	89a3      	ldrh	r3, [r4, #12]
 80095ee:	4632      	mov	r2, r6
 80095f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095f4:	4628      	mov	r0, r5
 80095f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095fa:	81a3      	strh	r3, [r4, #12]
 80095fc:	463b      	mov	r3, r7
 80095fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009602:	f000 b857 	b.w	80096b4 <_write_r>

08009606 <__sseek>:
 8009606:	b510      	push	{r4, lr}
 8009608:	460c      	mov	r4, r1
 800960a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800960e:	f000 f82d 	bl	800966c <_lseek_r>
 8009612:	1c43      	adds	r3, r0, #1
 8009614:	89a3      	ldrh	r3, [r4, #12]
 8009616:	bf15      	itete	ne
 8009618:	6560      	strne	r0, [r4, #84]	; 0x54
 800961a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800961e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009622:	81a3      	strheq	r3, [r4, #12]
 8009624:	bf18      	it	ne
 8009626:	81a3      	strhne	r3, [r4, #12]
 8009628:	bd10      	pop	{r4, pc}

0800962a <__sclose>:
 800962a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800962e:	f000 b80d 	b.w	800964c <_close_r>

08009632 <memset>:
 8009632:	4402      	add	r2, r0
 8009634:	4603      	mov	r3, r0
 8009636:	4293      	cmp	r3, r2
 8009638:	d100      	bne.n	800963c <memset+0xa>
 800963a:	4770      	bx	lr
 800963c:	f803 1b01 	strb.w	r1, [r3], #1
 8009640:	e7f9      	b.n	8009636 <memset+0x4>
	...

08009644 <_localeconv_r>:
 8009644:	4800      	ldr	r0, [pc, #0]	; (8009648 <_localeconv_r+0x4>)
 8009646:	4770      	bx	lr
 8009648:	20000160 	.word	0x20000160

0800964c <_close_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	2300      	movs	r3, #0
 8009650:	4d05      	ldr	r5, [pc, #20]	; (8009668 <_close_r+0x1c>)
 8009652:	4604      	mov	r4, r0
 8009654:	4608      	mov	r0, r1
 8009656:	602b      	str	r3, [r5, #0]
 8009658:	f7f8 fbb1 	bl	8001dbe <_close>
 800965c:	1c43      	adds	r3, r0, #1
 800965e:	d102      	bne.n	8009666 <_close_r+0x1a>
 8009660:	682b      	ldr	r3, [r5, #0]
 8009662:	b103      	cbz	r3, 8009666 <_close_r+0x1a>
 8009664:	6023      	str	r3, [r4, #0]
 8009666:	bd38      	pop	{r3, r4, r5, pc}
 8009668:	20000abc 	.word	0x20000abc

0800966c <_lseek_r>:
 800966c:	b538      	push	{r3, r4, r5, lr}
 800966e:	4604      	mov	r4, r0
 8009670:	4d06      	ldr	r5, [pc, #24]	; (800968c <_lseek_r+0x20>)
 8009672:	4608      	mov	r0, r1
 8009674:	4611      	mov	r1, r2
 8009676:	2200      	movs	r2, #0
 8009678:	602a      	str	r2, [r5, #0]
 800967a:	461a      	mov	r2, r3
 800967c:	f7f8 fbc6 	bl	8001e0c <_lseek>
 8009680:	1c43      	adds	r3, r0, #1
 8009682:	d102      	bne.n	800968a <_lseek_r+0x1e>
 8009684:	682b      	ldr	r3, [r5, #0]
 8009686:	b103      	cbz	r3, 800968a <_lseek_r+0x1e>
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	bd38      	pop	{r3, r4, r5, pc}
 800968c:	20000abc 	.word	0x20000abc

08009690 <_read_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	4604      	mov	r4, r0
 8009694:	4d06      	ldr	r5, [pc, #24]	; (80096b0 <_read_r+0x20>)
 8009696:	4608      	mov	r0, r1
 8009698:	4611      	mov	r1, r2
 800969a:	2200      	movs	r2, #0
 800969c:	602a      	str	r2, [r5, #0]
 800969e:	461a      	mov	r2, r3
 80096a0:	f7f8 fb54 	bl	8001d4c <_read>
 80096a4:	1c43      	adds	r3, r0, #1
 80096a6:	d102      	bne.n	80096ae <_read_r+0x1e>
 80096a8:	682b      	ldr	r3, [r5, #0]
 80096aa:	b103      	cbz	r3, 80096ae <_read_r+0x1e>
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	bd38      	pop	{r3, r4, r5, pc}
 80096b0:	20000abc 	.word	0x20000abc

080096b4 <_write_r>:
 80096b4:	b538      	push	{r3, r4, r5, lr}
 80096b6:	4604      	mov	r4, r0
 80096b8:	4d06      	ldr	r5, [pc, #24]	; (80096d4 <_write_r+0x20>)
 80096ba:	4608      	mov	r0, r1
 80096bc:	4611      	mov	r1, r2
 80096be:	2200      	movs	r2, #0
 80096c0:	602a      	str	r2, [r5, #0]
 80096c2:	461a      	mov	r2, r3
 80096c4:	f7f8 fb5f 	bl	8001d86 <_write>
 80096c8:	1c43      	adds	r3, r0, #1
 80096ca:	d102      	bne.n	80096d2 <_write_r+0x1e>
 80096cc:	682b      	ldr	r3, [r5, #0]
 80096ce:	b103      	cbz	r3, 80096d2 <_write_r+0x1e>
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	bd38      	pop	{r3, r4, r5, pc}
 80096d4:	20000abc 	.word	0x20000abc

080096d8 <__errno>:
 80096d8:	4b01      	ldr	r3, [pc, #4]	; (80096e0 <__errno+0x8>)
 80096da:	6818      	ldr	r0, [r3, #0]
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	2000006c 	.word	0x2000006c

080096e4 <__libc_init_array>:
 80096e4:	b570      	push	{r4, r5, r6, lr}
 80096e6:	4d0d      	ldr	r5, [pc, #52]	; (800971c <__libc_init_array+0x38>)
 80096e8:	2600      	movs	r6, #0
 80096ea:	4c0d      	ldr	r4, [pc, #52]	; (8009720 <__libc_init_array+0x3c>)
 80096ec:	1b64      	subs	r4, r4, r5
 80096ee:	10a4      	asrs	r4, r4, #2
 80096f0:	42a6      	cmp	r6, r4
 80096f2:	d109      	bne.n	8009708 <__libc_init_array+0x24>
 80096f4:	4d0b      	ldr	r5, [pc, #44]	; (8009724 <__libc_init_array+0x40>)
 80096f6:	2600      	movs	r6, #0
 80096f8:	4c0b      	ldr	r4, [pc, #44]	; (8009728 <__libc_init_array+0x44>)
 80096fa:	f002 f973 	bl	800b9e4 <_init>
 80096fe:	1b64      	subs	r4, r4, r5
 8009700:	10a4      	asrs	r4, r4, #2
 8009702:	42a6      	cmp	r6, r4
 8009704:	d105      	bne.n	8009712 <__libc_init_array+0x2e>
 8009706:	bd70      	pop	{r4, r5, r6, pc}
 8009708:	f855 3b04 	ldr.w	r3, [r5], #4
 800970c:	3601      	adds	r6, #1
 800970e:	4798      	blx	r3
 8009710:	e7ee      	b.n	80096f0 <__libc_init_array+0xc>
 8009712:	f855 3b04 	ldr.w	r3, [r5], #4
 8009716:	3601      	adds	r6, #1
 8009718:	4798      	blx	r3
 800971a:	e7f2      	b.n	8009702 <__libc_init_array+0x1e>
 800971c:	0800bec4 	.word	0x0800bec4
 8009720:	0800bec4 	.word	0x0800bec4
 8009724:	0800bec4 	.word	0x0800bec4
 8009728:	0800bec8 	.word	0x0800bec8

0800972c <__retarget_lock_acquire_recursive>:
 800972c:	4770      	bx	lr

0800972e <__retarget_lock_release_recursive>:
 800972e:	4770      	bx	lr

08009730 <memchr>:
 8009730:	b2c9      	uxtb	r1, r1
 8009732:	4402      	add	r2, r0
 8009734:	b510      	push	{r4, lr}
 8009736:	4290      	cmp	r0, r2
 8009738:	4603      	mov	r3, r0
 800973a:	d101      	bne.n	8009740 <memchr+0x10>
 800973c:	2300      	movs	r3, #0
 800973e:	e003      	b.n	8009748 <memchr+0x18>
 8009740:	781c      	ldrb	r4, [r3, #0]
 8009742:	3001      	adds	r0, #1
 8009744:	428c      	cmp	r4, r1
 8009746:	d1f6      	bne.n	8009736 <memchr+0x6>
 8009748:	4618      	mov	r0, r3
 800974a:	bd10      	pop	{r4, pc}

0800974c <quorem>:
 800974c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009750:	6903      	ldr	r3, [r0, #16]
 8009752:	4607      	mov	r7, r0
 8009754:	690c      	ldr	r4, [r1, #16]
 8009756:	42a3      	cmp	r3, r4
 8009758:	f2c0 8086 	blt.w	8009868 <quorem+0x11c>
 800975c:	3c01      	subs	r4, #1
 800975e:	f100 0514 	add.w	r5, r0, #20
 8009762:	f101 0814 	add.w	r8, r1, #20
 8009766:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800976a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800976e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009772:	9301      	str	r3, [sp, #4]
 8009774:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009778:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800977c:	3301      	adds	r3, #1
 800977e:	429a      	cmp	r2, r3
 8009780:	fbb2 f6f3 	udiv	r6, r2, r3
 8009784:	d335      	bcc.n	80097f2 <quorem+0xa6>
 8009786:	f04f 0e00 	mov.w	lr, #0
 800978a:	4640      	mov	r0, r8
 800978c:	46ac      	mov	ip, r5
 800978e:	46f2      	mov	sl, lr
 8009790:	f850 2b04 	ldr.w	r2, [r0], #4
 8009794:	b293      	uxth	r3, r2
 8009796:	4581      	cmp	r9, r0
 8009798:	fb06 e303 	mla	r3, r6, r3, lr
 800979c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80097a0:	ea4f 4213 	mov.w	r2, r3, lsr #16
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	fb06 220e 	mla	r2, r6, lr, r2
 80097aa:	ebaa 0303 	sub.w	r3, sl, r3
 80097ae:	f8dc a000 	ldr.w	sl, [ip]
 80097b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80097b6:	fa1f fa8a 	uxth.w	sl, sl
 80097ba:	b292      	uxth	r2, r2
 80097bc:	4453      	add	r3, sl
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	f8dc 3000 	ldr.w	r3, [ip]
 80097c4:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 80097c8:	9b00      	ldr	r3, [sp, #0]
 80097ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097ce:	f8bd 3000 	ldrh.w	r3, [sp]
 80097d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80097da:	f84c 3b04 	str.w	r3, [ip], #4
 80097de:	d2d7      	bcs.n	8009790 <quorem+0x44>
 80097e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80097e4:	b92b      	cbnz	r3, 80097f2 <quorem+0xa6>
 80097e6:	9b01      	ldr	r3, [sp, #4]
 80097e8:	3b04      	subs	r3, #4
 80097ea:	429d      	cmp	r5, r3
 80097ec:	461a      	mov	r2, r3
 80097ee:	d32f      	bcc.n	8009850 <quorem+0x104>
 80097f0:	613c      	str	r4, [r7, #16]
 80097f2:	4638      	mov	r0, r7
 80097f4:	f001 f9aa 	bl	800ab4c <__mcmp>
 80097f8:	2800      	cmp	r0, #0
 80097fa:	db25      	blt.n	8009848 <quorem+0xfc>
 80097fc:	3601      	adds	r6, #1
 80097fe:	4629      	mov	r1, r5
 8009800:	2000      	movs	r0, #0
 8009802:	f858 2b04 	ldr.w	r2, [r8], #4
 8009806:	f8d1 c000 	ldr.w	ip, [r1]
 800980a:	b293      	uxth	r3, r2
 800980c:	45c1      	cmp	r9, r8
 800980e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8009812:	eba0 0303 	sub.w	r3, r0, r3
 8009816:	fa1f f08c 	uxth.w	r0, ip
 800981a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800981e:	4403      	add	r3, r0
 8009820:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009824:	b29b      	uxth	r3, r3
 8009826:	ea4f 4022 	mov.w	r0, r2, asr #16
 800982a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800982e:	f841 3b04 	str.w	r3, [r1], #4
 8009832:	d2e6      	bcs.n	8009802 <quorem+0xb6>
 8009834:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009838:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800983c:	b922      	cbnz	r2, 8009848 <quorem+0xfc>
 800983e:	3b04      	subs	r3, #4
 8009840:	429d      	cmp	r5, r3
 8009842:	461a      	mov	r2, r3
 8009844:	d30a      	bcc.n	800985c <quorem+0x110>
 8009846:	613c      	str	r4, [r7, #16]
 8009848:	4630      	mov	r0, r6
 800984a:	b003      	add	sp, #12
 800984c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009850:	6812      	ldr	r2, [r2, #0]
 8009852:	3b04      	subs	r3, #4
 8009854:	2a00      	cmp	r2, #0
 8009856:	d1cb      	bne.n	80097f0 <quorem+0xa4>
 8009858:	3c01      	subs	r4, #1
 800985a:	e7c6      	b.n	80097ea <quorem+0x9e>
 800985c:	6812      	ldr	r2, [r2, #0]
 800985e:	3b04      	subs	r3, #4
 8009860:	2a00      	cmp	r2, #0
 8009862:	d1f0      	bne.n	8009846 <quorem+0xfa>
 8009864:	3c01      	subs	r4, #1
 8009866:	e7eb      	b.n	8009840 <quorem+0xf4>
 8009868:	2000      	movs	r0, #0
 800986a:	e7ee      	b.n	800984a <quorem+0xfe>
 800986c:	0000      	movs	r0, r0
	...

08009870 <_dtoa_r>:
 8009870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009874:	69c5      	ldr	r5, [r0, #28]
 8009876:	4604      	mov	r4, r0
 8009878:	ed2d 8b04 	vpush	{d8-d9}
 800987c:	b093      	sub	sp, #76	; 0x4c
 800987e:	ec57 6b10 	vmov	r6, r7, d0
 8009882:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009886:	9107      	str	r1, [sp, #28]
 8009888:	920a      	str	r2, [sp, #40]	; 0x28
 800988a:	930d      	str	r3, [sp, #52]	; 0x34
 800988c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009890:	b975      	cbnz	r5, 80098b0 <_dtoa_r+0x40>
 8009892:	2010      	movs	r0, #16
 8009894:	f000 fe28 	bl	800a4e8 <malloc>
 8009898:	4602      	mov	r2, r0
 800989a:	61e0      	str	r0, [r4, #28]
 800989c:	b920      	cbnz	r0, 80098a8 <_dtoa_r+0x38>
 800989e:	4bae      	ldr	r3, [pc, #696]	; (8009b58 <_dtoa_r+0x2e8>)
 80098a0:	21ef      	movs	r1, #239	; 0xef
 80098a2:	48ae      	ldr	r0, [pc, #696]	; (8009b5c <_dtoa_r+0x2ec>)
 80098a4:	f001 fc94 	bl	800b1d0 <__assert_func>
 80098a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80098ac:	6005      	str	r5, [r0, #0]
 80098ae:	60c5      	str	r5, [r0, #12]
 80098b0:	69e3      	ldr	r3, [r4, #28]
 80098b2:	6819      	ldr	r1, [r3, #0]
 80098b4:	b151      	cbz	r1, 80098cc <_dtoa_r+0x5c>
 80098b6:	685a      	ldr	r2, [r3, #4]
 80098b8:	2301      	movs	r3, #1
 80098ba:	4620      	mov	r0, r4
 80098bc:	4093      	lsls	r3, r2
 80098be:	604a      	str	r2, [r1, #4]
 80098c0:	608b      	str	r3, [r1, #8]
 80098c2:	f000 ff05 	bl	800a6d0 <_Bfree>
 80098c6:	69e3      	ldr	r3, [r4, #28]
 80098c8:	2200      	movs	r2, #0
 80098ca:	601a      	str	r2, [r3, #0]
 80098cc:	1e3b      	subs	r3, r7, #0
 80098ce:	bfb7      	itett	lt
 80098d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80098d4:	2300      	movge	r3, #0
 80098d6:	2201      	movlt	r2, #1
 80098d8:	9303      	strlt	r3, [sp, #12]
 80098da:	bfac      	ite	ge
 80098dc:	f8c8 3000 	strge.w	r3, [r8]
 80098e0:	f8c8 2000 	strlt.w	r2, [r8]
 80098e4:	4b9e      	ldr	r3, [pc, #632]	; (8009b60 <_dtoa_r+0x2f0>)
 80098e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80098ea:	ea33 0308 	bics.w	r3, r3, r8
 80098ee:	d11b      	bne.n	8009928 <_dtoa_r+0xb8>
 80098f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80098f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098f6:	6013      	str	r3, [r2, #0]
 80098f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80098fc:	4333      	orrs	r3, r6
 80098fe:	f000 8592 	beq.w	800a426 <_dtoa_r+0xbb6>
 8009902:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009904:	b963      	cbnz	r3, 8009920 <_dtoa_r+0xb0>
 8009906:	4b97      	ldr	r3, [pc, #604]	; (8009b64 <_dtoa_r+0x2f4>)
 8009908:	e027      	b.n	800995a <_dtoa_r+0xea>
 800990a:	4b97      	ldr	r3, [pc, #604]	; (8009b68 <_dtoa_r+0x2f8>)
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	3308      	adds	r3, #8
 8009910:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009912:	6013      	str	r3, [r2, #0]
 8009914:	9800      	ldr	r0, [sp, #0]
 8009916:	b013      	add	sp, #76	; 0x4c
 8009918:	ecbd 8b04 	vpop	{d8-d9}
 800991c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009920:	4b90      	ldr	r3, [pc, #576]	; (8009b64 <_dtoa_r+0x2f4>)
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	3303      	adds	r3, #3
 8009926:	e7f3      	b.n	8009910 <_dtoa_r+0xa0>
 8009928:	ed9d 7b02 	vldr	d7, [sp, #8]
 800992c:	2200      	movs	r2, #0
 800992e:	2300      	movs	r3, #0
 8009930:	ec51 0b17 	vmov	r0, r1, d7
 8009934:	eeb0 8a47 	vmov.f32	s16, s14
 8009938:	eef0 8a67 	vmov.f32	s17, s15
 800993c:	f7f7 f8c8 	bl	8000ad0 <__aeabi_dcmpeq>
 8009940:	4681      	mov	r9, r0
 8009942:	b160      	cbz	r0, 800995e <_dtoa_r+0xee>
 8009944:	2301      	movs	r3, #1
 8009946:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009948:	6013      	str	r3, [r2, #0]
 800994a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800994c:	2b00      	cmp	r3, #0
 800994e:	f000 8567 	beq.w	800a420 <_dtoa_r+0xbb0>
 8009952:	4b86      	ldr	r3, [pc, #536]	; (8009b6c <_dtoa_r+0x2fc>)
 8009954:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009956:	6013      	str	r3, [r2, #0]
 8009958:	3b01      	subs	r3, #1
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	e7da      	b.n	8009914 <_dtoa_r+0xa4>
 800995e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009962:	eeb0 0a48 	vmov.f32	s0, s16
 8009966:	eef0 0a68 	vmov.f32	s1, s17
 800996a:	aa10      	add	r2, sp, #64	; 0x40
 800996c:	a911      	add	r1, sp, #68	; 0x44
 800996e:	4620      	mov	r0, r4
 8009970:	f001 f998 	bl	800aca4 <__d2b>
 8009974:	4682      	mov	sl, r0
 8009976:	2d00      	cmp	r5, #0
 8009978:	d07d      	beq.n	8009a76 <_dtoa_r+0x206>
 800997a:	ee18 3a90 	vmov	r3, s17
 800997e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009982:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009986:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800998a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800998e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009992:	ec51 0b18 	vmov	r0, r1, d8
 8009996:	4619      	mov	r1, r3
 8009998:	2200      	movs	r2, #0
 800999a:	4b75      	ldr	r3, [pc, #468]	; (8009b70 <_dtoa_r+0x300>)
 800999c:	f7f6 fc78 	bl	8000290 <__aeabi_dsub>
 80099a0:	a367      	add	r3, pc, #412	; (adr r3, 8009b40 <_dtoa_r+0x2d0>)
 80099a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a6:	f7f6 fe2b 	bl	8000600 <__aeabi_dmul>
 80099aa:	a367      	add	r3, pc, #412	; (adr r3, 8009b48 <_dtoa_r+0x2d8>)
 80099ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b0:	f7f6 fc70 	bl	8000294 <__adddf3>
 80099b4:	4606      	mov	r6, r0
 80099b6:	460f      	mov	r7, r1
 80099b8:	4628      	mov	r0, r5
 80099ba:	f7f6 fdb7 	bl	800052c <__aeabi_i2d>
 80099be:	a364      	add	r3, pc, #400	; (adr r3, 8009b50 <_dtoa_r+0x2e0>)
 80099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c4:	f7f6 fe1c 	bl	8000600 <__aeabi_dmul>
 80099c8:	4602      	mov	r2, r0
 80099ca:	460b      	mov	r3, r1
 80099cc:	4630      	mov	r0, r6
 80099ce:	4639      	mov	r1, r7
 80099d0:	f7f6 fc60 	bl	8000294 <__adddf3>
 80099d4:	4606      	mov	r6, r0
 80099d6:	460f      	mov	r7, r1
 80099d8:	f7f7 f8c2 	bl	8000b60 <__aeabi_d2iz>
 80099dc:	2200      	movs	r2, #0
 80099de:	4683      	mov	fp, r0
 80099e0:	2300      	movs	r3, #0
 80099e2:	4630      	mov	r0, r6
 80099e4:	4639      	mov	r1, r7
 80099e6:	f7f7 f87d 	bl	8000ae4 <__aeabi_dcmplt>
 80099ea:	b148      	cbz	r0, 8009a00 <_dtoa_r+0x190>
 80099ec:	4658      	mov	r0, fp
 80099ee:	f7f6 fd9d 	bl	800052c <__aeabi_i2d>
 80099f2:	4632      	mov	r2, r6
 80099f4:	463b      	mov	r3, r7
 80099f6:	f7f7 f86b 	bl	8000ad0 <__aeabi_dcmpeq>
 80099fa:	b908      	cbnz	r0, 8009a00 <_dtoa_r+0x190>
 80099fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a00:	f1bb 0f16 	cmp.w	fp, #22
 8009a04:	d857      	bhi.n	8009ab6 <_dtoa_r+0x246>
 8009a06:	4b5b      	ldr	r3, [pc, #364]	; (8009b74 <_dtoa_r+0x304>)
 8009a08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009a0c:	ec51 0b18 	vmov	r0, r1, d8
 8009a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a14:	f7f7 f866 	bl	8000ae4 <__aeabi_dcmplt>
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	d04e      	beq.n	8009aba <_dtoa_r+0x24a>
 8009a1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a20:	2300      	movs	r3, #0
 8009a22:	930c      	str	r3, [sp, #48]	; 0x30
 8009a24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a26:	1b5b      	subs	r3, r3, r5
 8009a28:	1e5a      	subs	r2, r3, #1
 8009a2a:	bf4c      	ite	mi
 8009a2c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009a30:	2300      	movpl	r3, #0
 8009a32:	9206      	str	r2, [sp, #24]
 8009a34:	bf45      	ittet	mi
 8009a36:	9305      	strmi	r3, [sp, #20]
 8009a38:	2300      	movmi	r3, #0
 8009a3a:	9305      	strpl	r3, [sp, #20]
 8009a3c:	9306      	strmi	r3, [sp, #24]
 8009a3e:	f1bb 0f00 	cmp.w	fp, #0
 8009a42:	db3c      	blt.n	8009abe <_dtoa_r+0x24e>
 8009a44:	9b06      	ldr	r3, [sp, #24]
 8009a46:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009a4a:	445b      	add	r3, fp
 8009a4c:	9306      	str	r3, [sp, #24]
 8009a4e:	2300      	movs	r3, #0
 8009a50:	9308      	str	r3, [sp, #32]
 8009a52:	9b07      	ldr	r3, [sp, #28]
 8009a54:	2b09      	cmp	r3, #9
 8009a56:	d868      	bhi.n	8009b2a <_dtoa_r+0x2ba>
 8009a58:	2b05      	cmp	r3, #5
 8009a5a:	bfc5      	ittet	gt
 8009a5c:	3b04      	subgt	r3, #4
 8009a5e:	2500      	movgt	r5, #0
 8009a60:	2501      	movle	r5, #1
 8009a62:	9307      	strgt	r3, [sp, #28]
 8009a64:	9b07      	ldr	r3, [sp, #28]
 8009a66:	3b02      	subs	r3, #2
 8009a68:	2b03      	cmp	r3, #3
 8009a6a:	f200 8087 	bhi.w	8009b7c <_dtoa_r+0x30c>
 8009a6e:	e8df f003 	tbb	[pc, r3]
 8009a72:	3d30      	.short	0x3d30
 8009a74:	5a3b      	.short	0x5a3b
 8009a76:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009a7a:	441d      	add	r5, r3
 8009a7c:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009a80:	2b20      	cmp	r3, #32
 8009a82:	bfc9      	itett	gt
 8009a84:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a88:	f1c3 0320 	rsble	r3, r3, #32
 8009a8c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009a90:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009a94:	bfd8      	it	le
 8009a96:	fa06 f003 	lslle.w	r0, r6, r3
 8009a9a:	f105 35ff 	add.w	r5, r5, #4294967295
 8009a9e:	bfc4      	itt	gt
 8009aa0:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009aa4:	ea48 0003 	orrgt.w	r0, r8, r3
 8009aa8:	f7f6 fd30 	bl	800050c <__aeabi_ui2d>
 8009aac:	2201      	movs	r2, #1
 8009aae:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009ab2:	920e      	str	r2, [sp, #56]	; 0x38
 8009ab4:	e76f      	b.n	8009996 <_dtoa_r+0x126>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e7b3      	b.n	8009a22 <_dtoa_r+0x1b2>
 8009aba:	900c      	str	r0, [sp, #48]	; 0x30
 8009abc:	e7b2      	b.n	8009a24 <_dtoa_r+0x1b4>
 8009abe:	9b05      	ldr	r3, [sp, #20]
 8009ac0:	eba3 030b 	sub.w	r3, r3, fp
 8009ac4:	9305      	str	r3, [sp, #20]
 8009ac6:	f1cb 0300 	rsb	r3, fp, #0
 8009aca:	9308      	str	r3, [sp, #32]
 8009acc:	2300      	movs	r3, #0
 8009ace:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ad0:	e7bf      	b.n	8009a52 <_dtoa_r+0x1e2>
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	dc52      	bgt.n	8009b82 <_dtoa_r+0x312>
 8009adc:	2301      	movs	r3, #1
 8009ade:	461a      	mov	r2, r3
 8009ae0:	9301      	str	r3, [sp, #4]
 8009ae2:	9304      	str	r3, [sp, #16]
 8009ae4:	920a      	str	r2, [sp, #40]	; 0x28
 8009ae6:	e00b      	b.n	8009b00 <_dtoa_r+0x290>
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e7f3      	b.n	8009ad4 <_dtoa_r+0x264>
 8009aec:	2300      	movs	r3, #0
 8009aee:	9309      	str	r3, [sp, #36]	; 0x24
 8009af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af2:	445b      	add	r3, fp
 8009af4:	9301      	str	r3, [sp, #4]
 8009af6:	3301      	adds	r3, #1
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	9304      	str	r3, [sp, #16]
 8009afc:	bfb8      	it	lt
 8009afe:	2301      	movlt	r3, #1
 8009b00:	69e0      	ldr	r0, [r4, #28]
 8009b02:	2100      	movs	r1, #0
 8009b04:	2204      	movs	r2, #4
 8009b06:	f102 0614 	add.w	r6, r2, #20
 8009b0a:	429e      	cmp	r6, r3
 8009b0c:	d93d      	bls.n	8009b8a <_dtoa_r+0x31a>
 8009b0e:	6041      	str	r1, [r0, #4]
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 fd9d 	bl	800a650 <_Balloc>
 8009b16:	9000      	str	r0, [sp, #0]
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	d139      	bne.n	8009b90 <_dtoa_r+0x320>
 8009b1c:	4b16      	ldr	r3, [pc, #88]	; (8009b78 <_dtoa_r+0x308>)
 8009b1e:	4602      	mov	r2, r0
 8009b20:	f240 11af 	movw	r1, #431	; 0x1af
 8009b24:	e6bd      	b.n	80098a2 <_dtoa_r+0x32>
 8009b26:	2301      	movs	r3, #1
 8009b28:	e7e1      	b.n	8009aee <_dtoa_r+0x27e>
 8009b2a:	2501      	movs	r5, #1
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	9509      	str	r5, [sp, #36]	; 0x24
 8009b30:	9307      	str	r3, [sp, #28]
 8009b32:	f04f 33ff 	mov.w	r3, #4294967295
 8009b36:	2200      	movs	r2, #0
 8009b38:	9301      	str	r3, [sp, #4]
 8009b3a:	9304      	str	r3, [sp, #16]
 8009b3c:	2312      	movs	r3, #18
 8009b3e:	e7d1      	b.n	8009ae4 <_dtoa_r+0x274>
 8009b40:	636f4361 	.word	0x636f4361
 8009b44:	3fd287a7 	.word	0x3fd287a7
 8009b48:	8b60c8b3 	.word	0x8b60c8b3
 8009b4c:	3fc68a28 	.word	0x3fc68a28
 8009b50:	509f79fb 	.word	0x509f79fb
 8009b54:	3fd34413 	.word	0x3fd34413
 8009b58:	0800bb89 	.word	0x0800bb89
 8009b5c:	0800bba0 	.word	0x0800bba0
 8009b60:	7ff00000 	.word	0x7ff00000
 8009b64:	0800bb85 	.word	0x0800bb85
 8009b68:	0800bb7c 	.word	0x0800bb7c
 8009b6c:	0800bb59 	.word	0x0800bb59
 8009b70:	3ff80000 	.word	0x3ff80000
 8009b74:	0800bc90 	.word	0x0800bc90
 8009b78:	0800bbf8 	.word	0x0800bbf8
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b80:	e7d7      	b.n	8009b32 <_dtoa_r+0x2c2>
 8009b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b84:	9301      	str	r3, [sp, #4]
 8009b86:	9304      	str	r3, [sp, #16]
 8009b88:	e7ba      	b.n	8009b00 <_dtoa_r+0x290>
 8009b8a:	3101      	adds	r1, #1
 8009b8c:	0052      	lsls	r2, r2, #1
 8009b8e:	e7ba      	b.n	8009b06 <_dtoa_r+0x296>
 8009b90:	69e3      	ldr	r3, [r4, #28]
 8009b92:	9a00      	ldr	r2, [sp, #0]
 8009b94:	601a      	str	r2, [r3, #0]
 8009b96:	9b04      	ldr	r3, [sp, #16]
 8009b98:	2b0e      	cmp	r3, #14
 8009b9a:	f200 80a8 	bhi.w	8009cee <_dtoa_r+0x47e>
 8009b9e:	2d00      	cmp	r5, #0
 8009ba0:	f000 80a5 	beq.w	8009cee <_dtoa_r+0x47e>
 8009ba4:	f1bb 0f00 	cmp.w	fp, #0
 8009ba8:	dd38      	ble.n	8009c1c <_dtoa_r+0x3ac>
 8009baa:	f00b 020f 	and.w	r2, fp, #15
 8009bae:	4bbf      	ldr	r3, [pc, #764]	; (8009eac <_dtoa_r+0x63c>)
 8009bb0:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009bb4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009bb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bbc:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009bc0:	d019      	beq.n	8009bf6 <_dtoa_r+0x386>
 8009bc2:	4bbb      	ldr	r3, [pc, #748]	; (8009eb0 <_dtoa_r+0x640>)
 8009bc4:	f008 080f 	and.w	r8, r8, #15
 8009bc8:	2503      	movs	r5, #3
 8009bca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009bce:	ec51 0b18 	vmov	r0, r1, d8
 8009bd2:	f7f6 fe3f 	bl	8000854 <__aeabi_ddiv>
 8009bd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bda:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009eb0 <_dtoa_r+0x640>
 8009bde:	f1b8 0f00 	cmp.w	r8, #0
 8009be2:	d10a      	bne.n	8009bfa <_dtoa_r+0x38a>
 8009be4:	4632      	mov	r2, r6
 8009be6:	463b      	mov	r3, r7
 8009be8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bec:	f7f6 fe32 	bl	8000854 <__aeabi_ddiv>
 8009bf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bf4:	e02b      	b.n	8009c4e <_dtoa_r+0x3de>
 8009bf6:	2502      	movs	r5, #2
 8009bf8:	e7ef      	b.n	8009bda <_dtoa_r+0x36a>
 8009bfa:	f018 0f01 	tst.w	r8, #1
 8009bfe:	d008      	beq.n	8009c12 <_dtoa_r+0x3a2>
 8009c00:	4630      	mov	r0, r6
 8009c02:	4639      	mov	r1, r7
 8009c04:	3501      	adds	r5, #1
 8009c06:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009c0a:	f7f6 fcf9 	bl	8000600 <__aeabi_dmul>
 8009c0e:	4606      	mov	r6, r0
 8009c10:	460f      	mov	r7, r1
 8009c12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009c16:	f109 0908 	add.w	r9, r9, #8
 8009c1a:	e7e0      	b.n	8009bde <_dtoa_r+0x36e>
 8009c1c:	f000 809f 	beq.w	8009d5e <_dtoa_r+0x4ee>
 8009c20:	f1cb 0600 	rsb	r6, fp, #0
 8009c24:	4ba1      	ldr	r3, [pc, #644]	; (8009eac <_dtoa_r+0x63c>)
 8009c26:	4fa2      	ldr	r7, [pc, #648]	; (8009eb0 <_dtoa_r+0x640>)
 8009c28:	2502      	movs	r5, #2
 8009c2a:	f006 020f 	and.w	r2, r6, #15
 8009c2e:	1136      	asrs	r6, r6, #4
 8009c30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c34:	ec51 0b18 	vmov	r0, r1, d8
 8009c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3c:	f7f6 fce0 	bl	8000600 <__aeabi_dmul>
 8009c40:	2300      	movs	r3, #0
 8009c42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c46:	2e00      	cmp	r6, #0
 8009c48:	d17e      	bne.n	8009d48 <_dtoa_r+0x4d8>
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1d0      	bne.n	8009bf0 <_dtoa_r+0x380>
 8009c4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c50:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f000 8084 	beq.w	8009d62 <_dtoa_r+0x4f2>
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	4b95      	ldr	r3, [pc, #596]	; (8009eb4 <_dtoa_r+0x644>)
 8009c5e:	4640      	mov	r0, r8
 8009c60:	4649      	mov	r1, r9
 8009c62:	f7f6 ff3f 	bl	8000ae4 <__aeabi_dcmplt>
 8009c66:	2800      	cmp	r0, #0
 8009c68:	d07b      	beq.n	8009d62 <_dtoa_r+0x4f2>
 8009c6a:	9b04      	ldr	r3, [sp, #16]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d078      	beq.n	8009d62 <_dtoa_r+0x4f2>
 8009c70:	9b01      	ldr	r3, [sp, #4]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	dd39      	ble.n	8009cea <_dtoa_r+0x47a>
 8009c76:	2200      	movs	r2, #0
 8009c78:	4b8f      	ldr	r3, [pc, #572]	; (8009eb8 <_dtoa_r+0x648>)
 8009c7a:	4640      	mov	r0, r8
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	f7f6 fcbf 	bl	8000600 <__aeabi_dmul>
 8009c82:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009c86:	3501      	adds	r5, #1
 8009c88:	9e01      	ldr	r6, [sp, #4]
 8009c8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009c92:	4628      	mov	r0, r5
 8009c94:	f7f6 fc4a 	bl	800052c <__aeabi_i2d>
 8009c98:	4642      	mov	r2, r8
 8009c9a:	464b      	mov	r3, r9
 8009c9c:	f7f6 fcb0 	bl	8000600 <__aeabi_dmul>
 8009ca0:	4b86      	ldr	r3, [pc, #536]	; (8009ebc <_dtoa_r+0x64c>)
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f7f6 faf6 	bl	8000294 <__adddf3>
 8009ca8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cb0:	9303      	str	r3, [sp, #12]
 8009cb2:	2e00      	cmp	r6, #0
 8009cb4:	d158      	bne.n	8009d68 <_dtoa_r+0x4f8>
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	4b81      	ldr	r3, [pc, #516]	; (8009ec0 <_dtoa_r+0x650>)
 8009cba:	4640      	mov	r0, r8
 8009cbc:	4649      	mov	r1, r9
 8009cbe:	f7f6 fae7 	bl	8000290 <__aeabi_dsub>
 8009cc2:	4680      	mov	r8, r0
 8009cc4:	4689      	mov	r9, r1
 8009cc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cca:	f7f6 ff29 	bl	8000b20 <__aeabi_dcmpgt>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	f040 8296 	bne.w	800a200 <_dtoa_r+0x990>
 8009cd4:	4640      	mov	r0, r8
 8009cd6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009cda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cde:	4649      	mov	r1, r9
 8009ce0:	f7f6 ff00 	bl	8000ae4 <__aeabi_dcmplt>
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	f040 8289 	bne.w	800a1fc <_dtoa_r+0x98c>
 8009cea:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009cee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f2c0 814e 	blt.w	8009f92 <_dtoa_r+0x722>
 8009cf6:	f1bb 0f0e 	cmp.w	fp, #14
 8009cfa:	f300 814a 	bgt.w	8009f92 <_dtoa_r+0x722>
 8009cfe:	4b6b      	ldr	r3, [pc, #428]	; (8009eac <_dtoa_r+0x63c>)
 8009d00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009d04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f280 80dc 	bge.w	8009ec8 <_dtoa_r+0x658>
 8009d10:	9b04      	ldr	r3, [sp, #16]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f300 80d8 	bgt.w	8009ec8 <_dtoa_r+0x658>
 8009d18:	f040 826f 	bne.w	800a1fa <_dtoa_r+0x98a>
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	4b68      	ldr	r3, [pc, #416]	; (8009ec0 <_dtoa_r+0x650>)
 8009d20:	4640      	mov	r0, r8
 8009d22:	4649      	mov	r1, r9
 8009d24:	f7f6 fc6c 	bl	8000600 <__aeabi_dmul>
 8009d28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d2c:	f7f6 feee 	bl	8000b0c <__aeabi_dcmpge>
 8009d30:	9e04      	ldr	r6, [sp, #16]
 8009d32:	4637      	mov	r7, r6
 8009d34:	2800      	cmp	r0, #0
 8009d36:	f040 8245 	bne.w	800a1c4 <_dtoa_r+0x954>
 8009d3a:	9d00      	ldr	r5, [sp, #0]
 8009d3c:	2331      	movs	r3, #49	; 0x31
 8009d3e:	f10b 0b01 	add.w	fp, fp, #1
 8009d42:	f805 3b01 	strb.w	r3, [r5], #1
 8009d46:	e241      	b.n	800a1cc <_dtoa_r+0x95c>
 8009d48:	07f2      	lsls	r2, r6, #31
 8009d4a:	d505      	bpl.n	8009d58 <_dtoa_r+0x4e8>
 8009d4c:	3501      	adds	r5, #1
 8009d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d52:	f7f6 fc55 	bl	8000600 <__aeabi_dmul>
 8009d56:	2301      	movs	r3, #1
 8009d58:	1076      	asrs	r6, r6, #1
 8009d5a:	3708      	adds	r7, #8
 8009d5c:	e773      	b.n	8009c46 <_dtoa_r+0x3d6>
 8009d5e:	2502      	movs	r5, #2
 8009d60:	e775      	b.n	8009c4e <_dtoa_r+0x3de>
 8009d62:	465f      	mov	r7, fp
 8009d64:	9e04      	ldr	r6, [sp, #16]
 8009d66:	e792      	b.n	8009c8e <_dtoa_r+0x41e>
 8009d68:	9900      	ldr	r1, [sp, #0]
 8009d6a:	4b50      	ldr	r3, [pc, #320]	; (8009eac <_dtoa_r+0x63c>)
 8009d6c:	4431      	add	r1, r6
 8009d6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009d72:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d76:	9102      	str	r1, [sp, #8]
 8009d78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d7a:	eeb0 9a47 	vmov.f32	s18, s14
 8009d7e:	eef0 9a67 	vmov.f32	s19, s15
 8009d82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d86:	2900      	cmp	r1, #0
 8009d88:	d044      	beq.n	8009e14 <_dtoa_r+0x5a4>
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	494d      	ldr	r1, [pc, #308]	; (8009ec4 <_dtoa_r+0x654>)
 8009d8e:	f7f6 fd61 	bl	8000854 <__aeabi_ddiv>
 8009d92:	ec53 2b19 	vmov	r2, r3, d9
 8009d96:	f7f6 fa7b 	bl	8000290 <__aeabi_dsub>
 8009d9a:	9d00      	ldr	r5, [sp, #0]
 8009d9c:	ec41 0b19 	vmov	d9, r0, r1
 8009da0:	4649      	mov	r1, r9
 8009da2:	4640      	mov	r0, r8
 8009da4:	f7f6 fedc 	bl	8000b60 <__aeabi_d2iz>
 8009da8:	4606      	mov	r6, r0
 8009daa:	f7f6 fbbf 	bl	800052c <__aeabi_i2d>
 8009dae:	4602      	mov	r2, r0
 8009db0:	3630      	adds	r6, #48	; 0x30
 8009db2:	460b      	mov	r3, r1
 8009db4:	4640      	mov	r0, r8
 8009db6:	4649      	mov	r1, r9
 8009db8:	f7f6 fa6a 	bl	8000290 <__aeabi_dsub>
 8009dbc:	f805 6b01 	strb.w	r6, [r5], #1
 8009dc0:	4680      	mov	r8, r0
 8009dc2:	4689      	mov	r9, r1
 8009dc4:	ec53 2b19 	vmov	r2, r3, d9
 8009dc8:	f7f6 fe8c 	bl	8000ae4 <__aeabi_dcmplt>
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	d164      	bne.n	8009e9a <_dtoa_r+0x62a>
 8009dd0:	4642      	mov	r2, r8
 8009dd2:	464b      	mov	r3, r9
 8009dd4:	2000      	movs	r0, #0
 8009dd6:	4937      	ldr	r1, [pc, #220]	; (8009eb4 <_dtoa_r+0x644>)
 8009dd8:	f7f6 fa5a 	bl	8000290 <__aeabi_dsub>
 8009ddc:	ec53 2b19 	vmov	r2, r3, d9
 8009de0:	f7f6 fe80 	bl	8000ae4 <__aeabi_dcmplt>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	f040 80b6 	bne.w	8009f56 <_dtoa_r+0x6e6>
 8009dea:	9b02      	ldr	r3, [sp, #8]
 8009dec:	429d      	cmp	r5, r3
 8009dee:	f43f af7c 	beq.w	8009cea <_dtoa_r+0x47a>
 8009df2:	2200      	movs	r2, #0
 8009df4:	4b30      	ldr	r3, [pc, #192]	; (8009eb8 <_dtoa_r+0x648>)
 8009df6:	ec51 0b19 	vmov	r0, r1, d9
 8009dfa:	f7f6 fc01 	bl	8000600 <__aeabi_dmul>
 8009dfe:	2200      	movs	r2, #0
 8009e00:	4b2d      	ldr	r3, [pc, #180]	; (8009eb8 <_dtoa_r+0x648>)
 8009e02:	ec41 0b19 	vmov	d9, r0, r1
 8009e06:	4640      	mov	r0, r8
 8009e08:	4649      	mov	r1, r9
 8009e0a:	f7f6 fbf9 	bl	8000600 <__aeabi_dmul>
 8009e0e:	4680      	mov	r8, r0
 8009e10:	4689      	mov	r9, r1
 8009e12:	e7c5      	b.n	8009da0 <_dtoa_r+0x530>
 8009e14:	ec51 0b17 	vmov	r0, r1, d7
 8009e18:	f7f6 fbf2 	bl	8000600 <__aeabi_dmul>
 8009e1c:	9b02      	ldr	r3, [sp, #8]
 8009e1e:	9d00      	ldr	r5, [sp, #0]
 8009e20:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e22:	ec41 0b19 	vmov	d9, r0, r1
 8009e26:	4649      	mov	r1, r9
 8009e28:	4640      	mov	r0, r8
 8009e2a:	f7f6 fe99 	bl	8000b60 <__aeabi_d2iz>
 8009e2e:	4606      	mov	r6, r0
 8009e30:	f7f6 fb7c 	bl	800052c <__aeabi_i2d>
 8009e34:	4602      	mov	r2, r0
 8009e36:	460b      	mov	r3, r1
 8009e38:	4640      	mov	r0, r8
 8009e3a:	4649      	mov	r1, r9
 8009e3c:	3630      	adds	r6, #48	; 0x30
 8009e3e:	f7f6 fa27 	bl	8000290 <__aeabi_dsub>
 8009e42:	9b02      	ldr	r3, [sp, #8]
 8009e44:	f805 6b01 	strb.w	r6, [r5], #1
 8009e48:	4680      	mov	r8, r0
 8009e4a:	429d      	cmp	r5, r3
 8009e4c:	4689      	mov	r9, r1
 8009e4e:	f04f 0200 	mov.w	r2, #0
 8009e52:	d124      	bne.n	8009e9e <_dtoa_r+0x62e>
 8009e54:	4b1b      	ldr	r3, [pc, #108]	; (8009ec4 <_dtoa_r+0x654>)
 8009e56:	ec51 0b19 	vmov	r0, r1, d9
 8009e5a:	f7f6 fa1b 	bl	8000294 <__adddf3>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	460b      	mov	r3, r1
 8009e62:	4640      	mov	r0, r8
 8009e64:	4649      	mov	r1, r9
 8009e66:	f7f6 fe5b 	bl	8000b20 <__aeabi_dcmpgt>
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	d173      	bne.n	8009f56 <_dtoa_r+0x6e6>
 8009e6e:	2000      	movs	r0, #0
 8009e70:	4914      	ldr	r1, [pc, #80]	; (8009ec4 <_dtoa_r+0x654>)
 8009e72:	ec53 2b19 	vmov	r2, r3, d9
 8009e76:	f7f6 fa0b 	bl	8000290 <__aeabi_dsub>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	4640      	mov	r0, r8
 8009e80:	4649      	mov	r1, r9
 8009e82:	f7f6 fe2f 	bl	8000ae4 <__aeabi_dcmplt>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	f43f af2f 	beq.w	8009cea <_dtoa_r+0x47a>
 8009e8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009e8e:	1e6b      	subs	r3, r5, #1
 8009e90:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e96:	2b30      	cmp	r3, #48	; 0x30
 8009e98:	d0f8      	beq.n	8009e8c <_dtoa_r+0x61c>
 8009e9a:	46bb      	mov	fp, r7
 8009e9c:	e04a      	b.n	8009f34 <_dtoa_r+0x6c4>
 8009e9e:	4b06      	ldr	r3, [pc, #24]	; (8009eb8 <_dtoa_r+0x648>)
 8009ea0:	f7f6 fbae 	bl	8000600 <__aeabi_dmul>
 8009ea4:	4680      	mov	r8, r0
 8009ea6:	4689      	mov	r9, r1
 8009ea8:	e7bd      	b.n	8009e26 <_dtoa_r+0x5b6>
 8009eaa:	bf00      	nop
 8009eac:	0800bc90 	.word	0x0800bc90
 8009eb0:	0800bc68 	.word	0x0800bc68
 8009eb4:	3ff00000 	.word	0x3ff00000
 8009eb8:	40240000 	.word	0x40240000
 8009ebc:	401c0000 	.word	0x401c0000
 8009ec0:	40140000 	.word	0x40140000
 8009ec4:	3fe00000 	.word	0x3fe00000
 8009ec8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009ecc:	9d00      	ldr	r5, [sp, #0]
 8009ece:	4642      	mov	r2, r8
 8009ed0:	464b      	mov	r3, r9
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	4639      	mov	r1, r7
 8009ed6:	f7f6 fcbd 	bl	8000854 <__aeabi_ddiv>
 8009eda:	f7f6 fe41 	bl	8000b60 <__aeabi_d2iz>
 8009ede:	9001      	str	r0, [sp, #4]
 8009ee0:	f7f6 fb24 	bl	800052c <__aeabi_i2d>
 8009ee4:	4642      	mov	r2, r8
 8009ee6:	464b      	mov	r3, r9
 8009ee8:	f7f6 fb8a 	bl	8000600 <__aeabi_dmul>
 8009eec:	4602      	mov	r2, r0
 8009eee:	460b      	mov	r3, r1
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	4639      	mov	r1, r7
 8009ef4:	f7f6 f9cc 	bl	8000290 <__aeabi_dsub>
 8009ef8:	9e01      	ldr	r6, [sp, #4]
 8009efa:	9f04      	ldr	r7, [sp, #16]
 8009efc:	4602      	mov	r2, r0
 8009efe:	3630      	adds	r6, #48	; 0x30
 8009f00:	460b      	mov	r3, r1
 8009f02:	f805 6b01 	strb.w	r6, [r5], #1
 8009f06:	9e00      	ldr	r6, [sp, #0]
 8009f08:	1bae      	subs	r6, r5, r6
 8009f0a:	42b7      	cmp	r7, r6
 8009f0c:	d134      	bne.n	8009f78 <_dtoa_r+0x708>
 8009f0e:	f7f6 f9c1 	bl	8000294 <__adddf3>
 8009f12:	4642      	mov	r2, r8
 8009f14:	464b      	mov	r3, r9
 8009f16:	4606      	mov	r6, r0
 8009f18:	460f      	mov	r7, r1
 8009f1a:	f7f6 fe01 	bl	8000b20 <__aeabi_dcmpgt>
 8009f1e:	b9c8      	cbnz	r0, 8009f54 <_dtoa_r+0x6e4>
 8009f20:	4642      	mov	r2, r8
 8009f22:	464b      	mov	r3, r9
 8009f24:	4630      	mov	r0, r6
 8009f26:	4639      	mov	r1, r7
 8009f28:	f7f6 fdd2 	bl	8000ad0 <__aeabi_dcmpeq>
 8009f2c:	b110      	cbz	r0, 8009f34 <_dtoa_r+0x6c4>
 8009f2e:	9b01      	ldr	r3, [sp, #4]
 8009f30:	07db      	lsls	r3, r3, #31
 8009f32:	d40f      	bmi.n	8009f54 <_dtoa_r+0x6e4>
 8009f34:	4651      	mov	r1, sl
 8009f36:	4620      	mov	r0, r4
 8009f38:	f000 fbca 	bl	800a6d0 <_Bfree>
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f40:	702b      	strb	r3, [r5, #0]
 8009f42:	f10b 0301 	add.w	r3, fp, #1
 8009f46:	6013      	str	r3, [r2, #0]
 8009f48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f43f ace2 	beq.w	8009914 <_dtoa_r+0xa4>
 8009f50:	601d      	str	r5, [r3, #0]
 8009f52:	e4df      	b.n	8009914 <_dtoa_r+0xa4>
 8009f54:	465f      	mov	r7, fp
 8009f56:	462b      	mov	r3, r5
 8009f58:	461d      	mov	r5, r3
 8009f5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f5e:	2a39      	cmp	r2, #57	; 0x39
 8009f60:	d106      	bne.n	8009f70 <_dtoa_r+0x700>
 8009f62:	9a00      	ldr	r2, [sp, #0]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d1f7      	bne.n	8009f58 <_dtoa_r+0x6e8>
 8009f68:	2230      	movs	r2, #48	; 0x30
 8009f6a:	9900      	ldr	r1, [sp, #0]
 8009f6c:	3701      	adds	r7, #1
 8009f6e:	700a      	strb	r2, [r1, #0]
 8009f70:	781a      	ldrb	r2, [r3, #0]
 8009f72:	3201      	adds	r2, #1
 8009f74:	701a      	strb	r2, [r3, #0]
 8009f76:	e790      	b.n	8009e9a <_dtoa_r+0x62a>
 8009f78:	2200      	movs	r2, #0
 8009f7a:	4ba3      	ldr	r3, [pc, #652]	; (800a208 <_dtoa_r+0x998>)
 8009f7c:	f7f6 fb40 	bl	8000600 <__aeabi_dmul>
 8009f80:	2200      	movs	r2, #0
 8009f82:	2300      	movs	r3, #0
 8009f84:	4606      	mov	r6, r0
 8009f86:	460f      	mov	r7, r1
 8009f88:	f7f6 fda2 	bl	8000ad0 <__aeabi_dcmpeq>
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	d09e      	beq.n	8009ece <_dtoa_r+0x65e>
 8009f90:	e7d0      	b.n	8009f34 <_dtoa_r+0x6c4>
 8009f92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f94:	2a00      	cmp	r2, #0
 8009f96:	f000 80ca 	beq.w	800a12e <_dtoa_r+0x8be>
 8009f9a:	9a07      	ldr	r2, [sp, #28]
 8009f9c:	2a01      	cmp	r2, #1
 8009f9e:	f300 80ad 	bgt.w	800a0fc <_dtoa_r+0x88c>
 8009fa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fa4:	2a00      	cmp	r2, #0
 8009fa6:	f000 80a5 	beq.w	800a0f4 <_dtoa_r+0x884>
 8009faa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009fae:	9e08      	ldr	r6, [sp, #32]
 8009fb0:	9d05      	ldr	r5, [sp, #20]
 8009fb2:	9a05      	ldr	r2, [sp, #20]
 8009fb4:	2101      	movs	r1, #1
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	441a      	add	r2, r3
 8009fba:	9205      	str	r2, [sp, #20]
 8009fbc:	9a06      	ldr	r2, [sp, #24]
 8009fbe:	441a      	add	r2, r3
 8009fc0:	9206      	str	r2, [sp, #24]
 8009fc2:	f000 fc3d 	bl	800a840 <__i2b>
 8009fc6:	4607      	mov	r7, r0
 8009fc8:	b165      	cbz	r5, 8009fe4 <_dtoa_r+0x774>
 8009fca:	9b06      	ldr	r3, [sp, #24]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	dd09      	ble.n	8009fe4 <_dtoa_r+0x774>
 8009fd0:	42ab      	cmp	r3, r5
 8009fd2:	9a05      	ldr	r2, [sp, #20]
 8009fd4:	bfa8      	it	ge
 8009fd6:	462b      	movge	r3, r5
 8009fd8:	1ad2      	subs	r2, r2, r3
 8009fda:	1aed      	subs	r5, r5, r3
 8009fdc:	9205      	str	r2, [sp, #20]
 8009fde:	9a06      	ldr	r2, [sp, #24]
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	9306      	str	r3, [sp, #24]
 8009fe4:	9b08      	ldr	r3, [sp, #32]
 8009fe6:	b1f3      	cbz	r3, 800a026 <_dtoa_r+0x7b6>
 8009fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f000 80a3 	beq.w	800a136 <_dtoa_r+0x8c6>
 8009ff0:	2e00      	cmp	r6, #0
 8009ff2:	dd10      	ble.n	800a016 <_dtoa_r+0x7a6>
 8009ff4:	4639      	mov	r1, r7
 8009ff6:	4632      	mov	r2, r6
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	f000 fce1 	bl	800a9c0 <__pow5mult>
 8009ffe:	4652      	mov	r2, sl
 800a000:	4601      	mov	r1, r0
 800a002:	4607      	mov	r7, r0
 800a004:	4620      	mov	r0, r4
 800a006:	f000 fc31 	bl	800a86c <__multiply>
 800a00a:	4680      	mov	r8, r0
 800a00c:	4651      	mov	r1, sl
 800a00e:	4620      	mov	r0, r4
 800a010:	46c2      	mov	sl, r8
 800a012:	f000 fb5d 	bl	800a6d0 <_Bfree>
 800a016:	9b08      	ldr	r3, [sp, #32]
 800a018:	1b9a      	subs	r2, r3, r6
 800a01a:	d004      	beq.n	800a026 <_dtoa_r+0x7b6>
 800a01c:	4651      	mov	r1, sl
 800a01e:	4620      	mov	r0, r4
 800a020:	f000 fcce 	bl	800a9c0 <__pow5mult>
 800a024:	4682      	mov	sl, r0
 800a026:	2101      	movs	r1, #1
 800a028:	4620      	mov	r0, r4
 800a02a:	f000 fc09 	bl	800a840 <__i2b>
 800a02e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a030:	4606      	mov	r6, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	f340 8081 	ble.w	800a13a <_dtoa_r+0x8ca>
 800a038:	461a      	mov	r2, r3
 800a03a:	4601      	mov	r1, r0
 800a03c:	4620      	mov	r0, r4
 800a03e:	f000 fcbf 	bl	800a9c0 <__pow5mult>
 800a042:	9b07      	ldr	r3, [sp, #28]
 800a044:	4606      	mov	r6, r0
 800a046:	2b01      	cmp	r3, #1
 800a048:	dd7a      	ble.n	800a140 <_dtoa_r+0x8d0>
 800a04a:	f04f 0800 	mov.w	r8, #0
 800a04e:	6933      	ldr	r3, [r6, #16]
 800a050:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a054:	6918      	ldr	r0, [r3, #16]
 800a056:	f000 fba5 	bl	800a7a4 <__hi0bits>
 800a05a:	f1c0 0020 	rsb	r0, r0, #32
 800a05e:	9b06      	ldr	r3, [sp, #24]
 800a060:	4418      	add	r0, r3
 800a062:	f010 001f 	ands.w	r0, r0, #31
 800a066:	f000 8094 	beq.w	800a192 <_dtoa_r+0x922>
 800a06a:	f1c0 0320 	rsb	r3, r0, #32
 800a06e:	2b04      	cmp	r3, #4
 800a070:	f340 8085 	ble.w	800a17e <_dtoa_r+0x90e>
 800a074:	f1c0 001c 	rsb	r0, r0, #28
 800a078:	9b05      	ldr	r3, [sp, #20]
 800a07a:	4403      	add	r3, r0
 800a07c:	4405      	add	r5, r0
 800a07e:	9305      	str	r3, [sp, #20]
 800a080:	9b06      	ldr	r3, [sp, #24]
 800a082:	4403      	add	r3, r0
 800a084:	9306      	str	r3, [sp, #24]
 800a086:	9b05      	ldr	r3, [sp, #20]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	dd05      	ble.n	800a098 <_dtoa_r+0x828>
 800a08c:	4651      	mov	r1, sl
 800a08e:	461a      	mov	r2, r3
 800a090:	4620      	mov	r0, r4
 800a092:	f000 fcef 	bl	800aa74 <__lshift>
 800a096:	4682      	mov	sl, r0
 800a098:	9b06      	ldr	r3, [sp, #24]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	dd05      	ble.n	800a0aa <_dtoa_r+0x83a>
 800a09e:	4631      	mov	r1, r6
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f000 fce6 	bl	800aa74 <__lshift>
 800a0a8:	4606      	mov	r6, r0
 800a0aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d072      	beq.n	800a196 <_dtoa_r+0x926>
 800a0b0:	4631      	mov	r1, r6
 800a0b2:	4650      	mov	r0, sl
 800a0b4:	f000 fd4a 	bl	800ab4c <__mcmp>
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	da6c      	bge.n	800a196 <_dtoa_r+0x926>
 800a0bc:	2300      	movs	r3, #0
 800a0be:	4651      	mov	r1, sl
 800a0c0:	220a      	movs	r2, #10
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f000 fb26 	bl	800a714 <__multadd>
 800a0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a0ce:	4682      	mov	sl, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f000 81af 	beq.w	800a434 <_dtoa_r+0xbc4>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	4639      	mov	r1, r7
 800a0da:	220a      	movs	r2, #10
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f000 fb19 	bl	800a714 <__multadd>
 800a0e2:	9b01      	ldr	r3, [sp, #4]
 800a0e4:	4607      	mov	r7, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f300 8096 	bgt.w	800a218 <_dtoa_r+0x9a8>
 800a0ec:	9b07      	ldr	r3, [sp, #28]
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	dc59      	bgt.n	800a1a6 <_dtoa_r+0x936>
 800a0f2:	e091      	b.n	800a218 <_dtoa_r+0x9a8>
 800a0f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a0fa:	e758      	b.n	8009fae <_dtoa_r+0x73e>
 800a0fc:	9b04      	ldr	r3, [sp, #16]
 800a0fe:	1e5e      	subs	r6, r3, #1
 800a100:	9b08      	ldr	r3, [sp, #32]
 800a102:	42b3      	cmp	r3, r6
 800a104:	bfb7      	itett	lt
 800a106:	9b08      	ldrlt	r3, [sp, #32]
 800a108:	1b9e      	subge	r6, r3, r6
 800a10a:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a10c:	1af3      	sublt	r3, r6, r3
 800a10e:	bfbe      	ittt	lt
 800a110:	9608      	strlt	r6, [sp, #32]
 800a112:	2600      	movlt	r6, #0
 800a114:	18d2      	addlt	r2, r2, r3
 800a116:	9b04      	ldr	r3, [sp, #16]
 800a118:	bfb8      	it	lt
 800a11a:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	bfb7      	itett	lt
 800a120:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a124:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a128:	1a9d      	sublt	r5, r3, r2
 800a12a:	2300      	movlt	r3, #0
 800a12c:	e741      	b.n	8009fb2 <_dtoa_r+0x742>
 800a12e:	9e08      	ldr	r6, [sp, #32]
 800a130:	9d05      	ldr	r5, [sp, #20]
 800a132:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a134:	e748      	b.n	8009fc8 <_dtoa_r+0x758>
 800a136:	9a08      	ldr	r2, [sp, #32]
 800a138:	e770      	b.n	800a01c <_dtoa_r+0x7ac>
 800a13a:	9b07      	ldr	r3, [sp, #28]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	dc19      	bgt.n	800a174 <_dtoa_r+0x904>
 800a140:	9b02      	ldr	r3, [sp, #8]
 800a142:	b9bb      	cbnz	r3, 800a174 <_dtoa_r+0x904>
 800a144:	9b03      	ldr	r3, [sp, #12]
 800a146:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a14a:	b99b      	cbnz	r3, 800a174 <_dtoa_r+0x904>
 800a14c:	9b03      	ldr	r3, [sp, #12]
 800a14e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a152:	0d1b      	lsrs	r3, r3, #20
 800a154:	051b      	lsls	r3, r3, #20
 800a156:	b183      	cbz	r3, 800a17a <_dtoa_r+0x90a>
 800a158:	9b05      	ldr	r3, [sp, #20]
 800a15a:	f04f 0801 	mov.w	r8, #1
 800a15e:	3301      	adds	r3, #1
 800a160:	9305      	str	r3, [sp, #20]
 800a162:	9b06      	ldr	r3, [sp, #24]
 800a164:	3301      	adds	r3, #1
 800a166:	9306      	str	r3, [sp, #24]
 800a168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f47f af6f 	bne.w	800a04e <_dtoa_r+0x7de>
 800a170:	2001      	movs	r0, #1
 800a172:	e774      	b.n	800a05e <_dtoa_r+0x7ee>
 800a174:	f04f 0800 	mov.w	r8, #0
 800a178:	e7f6      	b.n	800a168 <_dtoa_r+0x8f8>
 800a17a:	4698      	mov	r8, r3
 800a17c:	e7f4      	b.n	800a168 <_dtoa_r+0x8f8>
 800a17e:	d082      	beq.n	800a086 <_dtoa_r+0x816>
 800a180:	331c      	adds	r3, #28
 800a182:	9a05      	ldr	r2, [sp, #20]
 800a184:	441a      	add	r2, r3
 800a186:	441d      	add	r5, r3
 800a188:	9205      	str	r2, [sp, #20]
 800a18a:	9a06      	ldr	r2, [sp, #24]
 800a18c:	441a      	add	r2, r3
 800a18e:	9206      	str	r2, [sp, #24]
 800a190:	e779      	b.n	800a086 <_dtoa_r+0x816>
 800a192:	4603      	mov	r3, r0
 800a194:	e7f4      	b.n	800a180 <_dtoa_r+0x910>
 800a196:	9b04      	ldr	r3, [sp, #16]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	dc37      	bgt.n	800a20c <_dtoa_r+0x99c>
 800a19c:	9b07      	ldr	r3, [sp, #28]
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	dd34      	ble.n	800a20c <_dtoa_r+0x99c>
 800a1a2:	9b04      	ldr	r3, [sp, #16]
 800a1a4:	9301      	str	r3, [sp, #4]
 800a1a6:	9b01      	ldr	r3, [sp, #4]
 800a1a8:	b963      	cbnz	r3, 800a1c4 <_dtoa_r+0x954>
 800a1aa:	4631      	mov	r1, r6
 800a1ac:	2205      	movs	r2, #5
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	f000 fab0 	bl	800a714 <__multadd>
 800a1b4:	4601      	mov	r1, r0
 800a1b6:	4606      	mov	r6, r0
 800a1b8:	4650      	mov	r0, sl
 800a1ba:	f000 fcc7 	bl	800ab4c <__mcmp>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	f73f adbb 	bgt.w	8009d3a <_dtoa_r+0x4ca>
 800a1c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1c6:	9d00      	ldr	r5, [sp, #0]
 800a1c8:	ea6f 0b03 	mvn.w	fp, r3
 800a1cc:	f04f 0800 	mov.w	r8, #0
 800a1d0:	4631      	mov	r1, r6
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	f000 fa7c 	bl	800a6d0 <_Bfree>
 800a1d8:	2f00      	cmp	r7, #0
 800a1da:	f43f aeab 	beq.w	8009f34 <_dtoa_r+0x6c4>
 800a1de:	f1b8 0f00 	cmp.w	r8, #0
 800a1e2:	d005      	beq.n	800a1f0 <_dtoa_r+0x980>
 800a1e4:	45b8      	cmp	r8, r7
 800a1e6:	d003      	beq.n	800a1f0 <_dtoa_r+0x980>
 800a1e8:	4641      	mov	r1, r8
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	f000 fa70 	bl	800a6d0 <_Bfree>
 800a1f0:	4639      	mov	r1, r7
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	f000 fa6c 	bl	800a6d0 <_Bfree>
 800a1f8:	e69c      	b.n	8009f34 <_dtoa_r+0x6c4>
 800a1fa:	2600      	movs	r6, #0
 800a1fc:	4637      	mov	r7, r6
 800a1fe:	e7e1      	b.n	800a1c4 <_dtoa_r+0x954>
 800a200:	46bb      	mov	fp, r7
 800a202:	4637      	mov	r7, r6
 800a204:	e599      	b.n	8009d3a <_dtoa_r+0x4ca>
 800a206:	bf00      	nop
 800a208:	40240000 	.word	0x40240000
 800a20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f000 80c8 	beq.w	800a3a4 <_dtoa_r+0xb34>
 800a214:	9b04      	ldr	r3, [sp, #16]
 800a216:	9301      	str	r3, [sp, #4]
 800a218:	2d00      	cmp	r5, #0
 800a21a:	dd05      	ble.n	800a228 <_dtoa_r+0x9b8>
 800a21c:	4639      	mov	r1, r7
 800a21e:	462a      	mov	r2, r5
 800a220:	4620      	mov	r0, r4
 800a222:	f000 fc27 	bl	800aa74 <__lshift>
 800a226:	4607      	mov	r7, r0
 800a228:	f1b8 0f00 	cmp.w	r8, #0
 800a22c:	d05b      	beq.n	800a2e6 <_dtoa_r+0xa76>
 800a22e:	6879      	ldr	r1, [r7, #4]
 800a230:	4620      	mov	r0, r4
 800a232:	f000 fa0d 	bl	800a650 <_Balloc>
 800a236:	4605      	mov	r5, r0
 800a238:	b928      	cbnz	r0, 800a246 <_dtoa_r+0x9d6>
 800a23a:	4b82      	ldr	r3, [pc, #520]	; (800a444 <_dtoa_r+0xbd4>)
 800a23c:	4602      	mov	r2, r0
 800a23e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a242:	f7ff bb2e 	b.w	80098a2 <_dtoa_r+0x32>
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	f107 010c 	add.w	r1, r7, #12
 800a24c:	300c      	adds	r0, #12
 800a24e:	3202      	adds	r2, #2
 800a250:	0092      	lsls	r2, r2, #2
 800a252:	f000 ffaf 	bl	800b1b4 <memcpy>
 800a256:	2201      	movs	r2, #1
 800a258:	4629      	mov	r1, r5
 800a25a:	4620      	mov	r0, r4
 800a25c:	f000 fc0a 	bl	800aa74 <__lshift>
 800a260:	9b00      	ldr	r3, [sp, #0]
 800a262:	46b8      	mov	r8, r7
 800a264:	4607      	mov	r7, r0
 800a266:	3301      	adds	r3, #1
 800a268:	9304      	str	r3, [sp, #16]
 800a26a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a26e:	4413      	add	r3, r2
 800a270:	9308      	str	r3, [sp, #32]
 800a272:	9b02      	ldr	r3, [sp, #8]
 800a274:	f003 0301 	and.w	r3, r3, #1
 800a278:	9306      	str	r3, [sp, #24]
 800a27a:	9b04      	ldr	r3, [sp, #16]
 800a27c:	4631      	mov	r1, r6
 800a27e:	4650      	mov	r0, sl
 800a280:	3b01      	subs	r3, #1
 800a282:	9301      	str	r3, [sp, #4]
 800a284:	f7ff fa62 	bl	800974c <quorem>
 800a288:	4641      	mov	r1, r8
 800a28a:	9002      	str	r0, [sp, #8]
 800a28c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a290:	4650      	mov	r0, sl
 800a292:	f000 fc5b 	bl	800ab4c <__mcmp>
 800a296:	463a      	mov	r2, r7
 800a298:	9005      	str	r0, [sp, #20]
 800a29a:	4631      	mov	r1, r6
 800a29c:	4620      	mov	r0, r4
 800a29e:	f000 fc71 	bl	800ab84 <__mdiff>
 800a2a2:	68c2      	ldr	r2, [r0, #12]
 800a2a4:	4605      	mov	r5, r0
 800a2a6:	bb02      	cbnz	r2, 800a2ea <_dtoa_r+0xa7a>
 800a2a8:	4601      	mov	r1, r0
 800a2aa:	4650      	mov	r0, sl
 800a2ac:	f000 fc4e 	bl	800ab4c <__mcmp>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	4629      	mov	r1, r5
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	9209      	str	r2, [sp, #36]	; 0x24
 800a2b8:	f000 fa0a 	bl	800a6d0 <_Bfree>
 800a2bc:	9b07      	ldr	r3, [sp, #28]
 800a2be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2c0:	9d04      	ldr	r5, [sp, #16]
 800a2c2:	ea43 0102 	orr.w	r1, r3, r2
 800a2c6:	9b06      	ldr	r3, [sp, #24]
 800a2c8:	4319      	orrs	r1, r3
 800a2ca:	d110      	bne.n	800a2ee <_dtoa_r+0xa7e>
 800a2cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a2d0:	d029      	beq.n	800a326 <_dtoa_r+0xab6>
 800a2d2:	9b05      	ldr	r3, [sp, #20]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	dd02      	ble.n	800a2de <_dtoa_r+0xa6e>
 800a2d8:	9b02      	ldr	r3, [sp, #8]
 800a2da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a2de:	9b01      	ldr	r3, [sp, #4]
 800a2e0:	f883 9000 	strb.w	r9, [r3]
 800a2e4:	e774      	b.n	800a1d0 <_dtoa_r+0x960>
 800a2e6:	4638      	mov	r0, r7
 800a2e8:	e7ba      	b.n	800a260 <_dtoa_r+0x9f0>
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	e7e1      	b.n	800a2b2 <_dtoa_r+0xa42>
 800a2ee:	9b05      	ldr	r3, [sp, #20]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	db04      	blt.n	800a2fe <_dtoa_r+0xa8e>
 800a2f4:	9907      	ldr	r1, [sp, #28]
 800a2f6:	430b      	orrs	r3, r1
 800a2f8:	9906      	ldr	r1, [sp, #24]
 800a2fa:	430b      	orrs	r3, r1
 800a2fc:	d120      	bne.n	800a340 <_dtoa_r+0xad0>
 800a2fe:	2a00      	cmp	r2, #0
 800a300:	dded      	ble.n	800a2de <_dtoa_r+0xa6e>
 800a302:	4651      	mov	r1, sl
 800a304:	2201      	movs	r2, #1
 800a306:	4620      	mov	r0, r4
 800a308:	f000 fbb4 	bl	800aa74 <__lshift>
 800a30c:	4631      	mov	r1, r6
 800a30e:	4682      	mov	sl, r0
 800a310:	f000 fc1c 	bl	800ab4c <__mcmp>
 800a314:	2800      	cmp	r0, #0
 800a316:	dc03      	bgt.n	800a320 <_dtoa_r+0xab0>
 800a318:	d1e1      	bne.n	800a2de <_dtoa_r+0xa6e>
 800a31a:	f019 0f01 	tst.w	r9, #1
 800a31e:	d0de      	beq.n	800a2de <_dtoa_r+0xa6e>
 800a320:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a324:	d1d8      	bne.n	800a2d8 <_dtoa_r+0xa68>
 800a326:	2339      	movs	r3, #57	; 0x39
 800a328:	9a01      	ldr	r2, [sp, #4]
 800a32a:	7013      	strb	r3, [r2, #0]
 800a32c:	462b      	mov	r3, r5
 800a32e:	461d      	mov	r5, r3
 800a330:	3b01      	subs	r3, #1
 800a332:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a336:	2a39      	cmp	r2, #57	; 0x39
 800a338:	d06b      	beq.n	800a412 <_dtoa_r+0xba2>
 800a33a:	3201      	adds	r2, #1
 800a33c:	701a      	strb	r2, [r3, #0]
 800a33e:	e747      	b.n	800a1d0 <_dtoa_r+0x960>
 800a340:	2a00      	cmp	r2, #0
 800a342:	dd07      	ble.n	800a354 <_dtoa_r+0xae4>
 800a344:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a348:	d0ed      	beq.n	800a326 <_dtoa_r+0xab6>
 800a34a:	f109 0301 	add.w	r3, r9, #1
 800a34e:	9a01      	ldr	r2, [sp, #4]
 800a350:	7013      	strb	r3, [r2, #0]
 800a352:	e73d      	b.n	800a1d0 <_dtoa_r+0x960>
 800a354:	9b04      	ldr	r3, [sp, #16]
 800a356:	9a08      	ldr	r2, [sp, #32]
 800a358:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d042      	beq.n	800a3e6 <_dtoa_r+0xb76>
 800a360:	4651      	mov	r1, sl
 800a362:	2300      	movs	r3, #0
 800a364:	220a      	movs	r2, #10
 800a366:	4620      	mov	r0, r4
 800a368:	f000 f9d4 	bl	800a714 <__multadd>
 800a36c:	45b8      	cmp	r8, r7
 800a36e:	4682      	mov	sl, r0
 800a370:	f04f 0300 	mov.w	r3, #0
 800a374:	f04f 020a 	mov.w	r2, #10
 800a378:	4641      	mov	r1, r8
 800a37a:	4620      	mov	r0, r4
 800a37c:	d107      	bne.n	800a38e <_dtoa_r+0xb1e>
 800a37e:	f000 f9c9 	bl	800a714 <__multadd>
 800a382:	4680      	mov	r8, r0
 800a384:	4607      	mov	r7, r0
 800a386:	9b04      	ldr	r3, [sp, #16]
 800a388:	3301      	adds	r3, #1
 800a38a:	9304      	str	r3, [sp, #16]
 800a38c:	e775      	b.n	800a27a <_dtoa_r+0xa0a>
 800a38e:	f000 f9c1 	bl	800a714 <__multadd>
 800a392:	4639      	mov	r1, r7
 800a394:	4680      	mov	r8, r0
 800a396:	2300      	movs	r3, #0
 800a398:	220a      	movs	r2, #10
 800a39a:	4620      	mov	r0, r4
 800a39c:	f000 f9ba 	bl	800a714 <__multadd>
 800a3a0:	4607      	mov	r7, r0
 800a3a2:	e7f0      	b.n	800a386 <_dtoa_r+0xb16>
 800a3a4:	9b04      	ldr	r3, [sp, #16]
 800a3a6:	9301      	str	r3, [sp, #4]
 800a3a8:	9d00      	ldr	r5, [sp, #0]
 800a3aa:	4631      	mov	r1, r6
 800a3ac:	4650      	mov	r0, sl
 800a3ae:	f7ff f9cd 	bl	800974c <quorem>
 800a3b2:	9b00      	ldr	r3, [sp, #0]
 800a3b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a3b8:	f805 9b01 	strb.w	r9, [r5], #1
 800a3bc:	1aea      	subs	r2, r5, r3
 800a3be:	9b01      	ldr	r3, [sp, #4]
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	dd07      	ble.n	800a3d4 <_dtoa_r+0xb64>
 800a3c4:	4651      	mov	r1, sl
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	220a      	movs	r2, #10
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f000 f9a2 	bl	800a714 <__multadd>
 800a3d0:	4682      	mov	sl, r0
 800a3d2:	e7ea      	b.n	800a3aa <_dtoa_r+0xb3a>
 800a3d4:	9b01      	ldr	r3, [sp, #4]
 800a3d6:	f04f 0800 	mov.w	r8, #0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	bfcc      	ite	gt
 800a3de:	461d      	movgt	r5, r3
 800a3e0:	2501      	movle	r5, #1
 800a3e2:	9b00      	ldr	r3, [sp, #0]
 800a3e4:	441d      	add	r5, r3
 800a3e6:	4651      	mov	r1, sl
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	f000 fb42 	bl	800aa74 <__lshift>
 800a3f0:	4631      	mov	r1, r6
 800a3f2:	4682      	mov	sl, r0
 800a3f4:	f000 fbaa 	bl	800ab4c <__mcmp>
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	dc97      	bgt.n	800a32c <_dtoa_r+0xabc>
 800a3fc:	d102      	bne.n	800a404 <_dtoa_r+0xb94>
 800a3fe:	f019 0f01 	tst.w	r9, #1
 800a402:	d193      	bne.n	800a32c <_dtoa_r+0xabc>
 800a404:	462b      	mov	r3, r5
 800a406:	461d      	mov	r5, r3
 800a408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a40c:	2a30      	cmp	r2, #48	; 0x30
 800a40e:	d0fa      	beq.n	800a406 <_dtoa_r+0xb96>
 800a410:	e6de      	b.n	800a1d0 <_dtoa_r+0x960>
 800a412:	9a00      	ldr	r2, [sp, #0]
 800a414:	429a      	cmp	r2, r3
 800a416:	d18a      	bne.n	800a32e <_dtoa_r+0xabe>
 800a418:	f10b 0b01 	add.w	fp, fp, #1
 800a41c:	2331      	movs	r3, #49	; 0x31
 800a41e:	e797      	b.n	800a350 <_dtoa_r+0xae0>
 800a420:	4b09      	ldr	r3, [pc, #36]	; (800a448 <_dtoa_r+0xbd8>)
 800a422:	f7ff ba9a 	b.w	800995a <_dtoa_r+0xea>
 800a426:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a428:	2b00      	cmp	r3, #0
 800a42a:	f47f aa6e 	bne.w	800990a <_dtoa_r+0x9a>
 800a42e:	4b07      	ldr	r3, [pc, #28]	; (800a44c <_dtoa_r+0xbdc>)
 800a430:	f7ff ba93 	b.w	800995a <_dtoa_r+0xea>
 800a434:	9b01      	ldr	r3, [sp, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	dcb6      	bgt.n	800a3a8 <_dtoa_r+0xb38>
 800a43a:	9b07      	ldr	r3, [sp, #28]
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	f73f aeb2 	bgt.w	800a1a6 <_dtoa_r+0x936>
 800a442:	e7b1      	b.n	800a3a8 <_dtoa_r+0xb38>
 800a444:	0800bbf8 	.word	0x0800bbf8
 800a448:	0800bb58 	.word	0x0800bb58
 800a44c:	0800bb7c 	.word	0x0800bb7c

0800a450 <_free_r>:
 800a450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a452:	2900      	cmp	r1, #0
 800a454:	d043      	beq.n	800a4de <_free_r+0x8e>
 800a456:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a45a:	1f0c      	subs	r4, r1, #4
 800a45c:	9001      	str	r0, [sp, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	bfb8      	it	lt
 800a462:	18e4      	addlt	r4, r4, r3
 800a464:	f000 f8e8 	bl	800a638 <__malloc_lock>
 800a468:	4a1e      	ldr	r2, [pc, #120]	; (800a4e4 <_free_r+0x94>)
 800a46a:	9801      	ldr	r0, [sp, #4]
 800a46c:	6813      	ldr	r3, [r2, #0]
 800a46e:	b933      	cbnz	r3, 800a47e <_free_r+0x2e>
 800a470:	6063      	str	r3, [r4, #4]
 800a472:	6014      	str	r4, [r2, #0]
 800a474:	b003      	add	sp, #12
 800a476:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a47a:	f000 b8e3 	b.w	800a644 <__malloc_unlock>
 800a47e:	42a3      	cmp	r3, r4
 800a480:	d908      	bls.n	800a494 <_free_r+0x44>
 800a482:	6825      	ldr	r5, [r4, #0]
 800a484:	1961      	adds	r1, r4, r5
 800a486:	428b      	cmp	r3, r1
 800a488:	bf01      	itttt	eq
 800a48a:	6819      	ldreq	r1, [r3, #0]
 800a48c:	685b      	ldreq	r3, [r3, #4]
 800a48e:	1949      	addeq	r1, r1, r5
 800a490:	6021      	streq	r1, [r4, #0]
 800a492:	e7ed      	b.n	800a470 <_free_r+0x20>
 800a494:	461a      	mov	r2, r3
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	b10b      	cbz	r3, 800a49e <_free_r+0x4e>
 800a49a:	42a3      	cmp	r3, r4
 800a49c:	d9fa      	bls.n	800a494 <_free_r+0x44>
 800a49e:	6811      	ldr	r1, [r2, #0]
 800a4a0:	1855      	adds	r5, r2, r1
 800a4a2:	42a5      	cmp	r5, r4
 800a4a4:	d10b      	bne.n	800a4be <_free_r+0x6e>
 800a4a6:	6824      	ldr	r4, [r4, #0]
 800a4a8:	4421      	add	r1, r4
 800a4aa:	1854      	adds	r4, r2, r1
 800a4ac:	6011      	str	r1, [r2, #0]
 800a4ae:	42a3      	cmp	r3, r4
 800a4b0:	d1e0      	bne.n	800a474 <_free_r+0x24>
 800a4b2:	681c      	ldr	r4, [r3, #0]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	440c      	add	r4, r1
 800a4b8:	6053      	str	r3, [r2, #4]
 800a4ba:	6014      	str	r4, [r2, #0]
 800a4bc:	e7da      	b.n	800a474 <_free_r+0x24>
 800a4be:	d902      	bls.n	800a4c6 <_free_r+0x76>
 800a4c0:	230c      	movs	r3, #12
 800a4c2:	6003      	str	r3, [r0, #0]
 800a4c4:	e7d6      	b.n	800a474 <_free_r+0x24>
 800a4c6:	6825      	ldr	r5, [r4, #0]
 800a4c8:	1961      	adds	r1, r4, r5
 800a4ca:	428b      	cmp	r3, r1
 800a4cc:	bf02      	ittt	eq
 800a4ce:	6819      	ldreq	r1, [r3, #0]
 800a4d0:	685b      	ldreq	r3, [r3, #4]
 800a4d2:	1949      	addeq	r1, r1, r5
 800a4d4:	6063      	str	r3, [r4, #4]
 800a4d6:	bf08      	it	eq
 800a4d8:	6021      	streq	r1, [r4, #0]
 800a4da:	6054      	str	r4, [r2, #4]
 800a4dc:	e7ca      	b.n	800a474 <_free_r+0x24>
 800a4de:	b003      	add	sp, #12
 800a4e0:	bd30      	pop	{r4, r5, pc}
 800a4e2:	bf00      	nop
 800a4e4:	20000ac4 	.word	0x20000ac4

0800a4e8 <malloc>:
 800a4e8:	4b02      	ldr	r3, [pc, #8]	; (800a4f4 <malloc+0xc>)
 800a4ea:	4601      	mov	r1, r0
 800a4ec:	6818      	ldr	r0, [r3, #0]
 800a4ee:	f000 b823 	b.w	800a538 <_malloc_r>
 800a4f2:	bf00      	nop
 800a4f4:	2000006c 	.word	0x2000006c

0800a4f8 <sbrk_aligned>:
 800a4f8:	b570      	push	{r4, r5, r6, lr}
 800a4fa:	4e0e      	ldr	r6, [pc, #56]	; (800a534 <sbrk_aligned+0x3c>)
 800a4fc:	460c      	mov	r4, r1
 800a4fe:	4605      	mov	r5, r0
 800a500:	6831      	ldr	r1, [r6, #0]
 800a502:	b911      	cbnz	r1, 800a50a <sbrk_aligned+0x12>
 800a504:	f000 fe46 	bl	800b194 <_sbrk_r>
 800a508:	6030      	str	r0, [r6, #0]
 800a50a:	4621      	mov	r1, r4
 800a50c:	4628      	mov	r0, r5
 800a50e:	f000 fe41 	bl	800b194 <_sbrk_r>
 800a512:	1c43      	adds	r3, r0, #1
 800a514:	d00a      	beq.n	800a52c <sbrk_aligned+0x34>
 800a516:	1cc4      	adds	r4, r0, #3
 800a518:	f024 0403 	bic.w	r4, r4, #3
 800a51c:	42a0      	cmp	r0, r4
 800a51e:	d007      	beq.n	800a530 <sbrk_aligned+0x38>
 800a520:	1a21      	subs	r1, r4, r0
 800a522:	4628      	mov	r0, r5
 800a524:	f000 fe36 	bl	800b194 <_sbrk_r>
 800a528:	3001      	adds	r0, #1
 800a52a:	d101      	bne.n	800a530 <sbrk_aligned+0x38>
 800a52c:	f04f 34ff 	mov.w	r4, #4294967295
 800a530:	4620      	mov	r0, r4
 800a532:	bd70      	pop	{r4, r5, r6, pc}
 800a534:	20000ac8 	.word	0x20000ac8

0800a538 <_malloc_r>:
 800a538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a53c:	1ccd      	adds	r5, r1, #3
 800a53e:	4607      	mov	r7, r0
 800a540:	f025 0503 	bic.w	r5, r5, #3
 800a544:	3508      	adds	r5, #8
 800a546:	2d0c      	cmp	r5, #12
 800a548:	bf38      	it	cc
 800a54a:	250c      	movcc	r5, #12
 800a54c:	2d00      	cmp	r5, #0
 800a54e:	db01      	blt.n	800a554 <_malloc_r+0x1c>
 800a550:	42a9      	cmp	r1, r5
 800a552:	d905      	bls.n	800a560 <_malloc_r+0x28>
 800a554:	230c      	movs	r3, #12
 800a556:	2600      	movs	r6, #0
 800a558:	603b      	str	r3, [r7, #0]
 800a55a:	4630      	mov	r0, r6
 800a55c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a560:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a634 <_malloc_r+0xfc>
 800a564:	f000 f868 	bl	800a638 <__malloc_lock>
 800a568:	f8d8 3000 	ldr.w	r3, [r8]
 800a56c:	461c      	mov	r4, r3
 800a56e:	bb5c      	cbnz	r4, 800a5c8 <_malloc_r+0x90>
 800a570:	4629      	mov	r1, r5
 800a572:	4638      	mov	r0, r7
 800a574:	f7ff ffc0 	bl	800a4f8 <sbrk_aligned>
 800a578:	1c43      	adds	r3, r0, #1
 800a57a:	4604      	mov	r4, r0
 800a57c:	d155      	bne.n	800a62a <_malloc_r+0xf2>
 800a57e:	f8d8 4000 	ldr.w	r4, [r8]
 800a582:	4626      	mov	r6, r4
 800a584:	2e00      	cmp	r6, #0
 800a586:	d145      	bne.n	800a614 <_malloc_r+0xdc>
 800a588:	2c00      	cmp	r4, #0
 800a58a:	d048      	beq.n	800a61e <_malloc_r+0xe6>
 800a58c:	6823      	ldr	r3, [r4, #0]
 800a58e:	4631      	mov	r1, r6
 800a590:	4638      	mov	r0, r7
 800a592:	eb04 0903 	add.w	r9, r4, r3
 800a596:	f000 fdfd 	bl	800b194 <_sbrk_r>
 800a59a:	4581      	cmp	r9, r0
 800a59c:	d13f      	bne.n	800a61e <_malloc_r+0xe6>
 800a59e:	6821      	ldr	r1, [r4, #0]
 800a5a0:	4638      	mov	r0, r7
 800a5a2:	1a6d      	subs	r5, r5, r1
 800a5a4:	4629      	mov	r1, r5
 800a5a6:	f7ff ffa7 	bl	800a4f8 <sbrk_aligned>
 800a5aa:	3001      	adds	r0, #1
 800a5ac:	d037      	beq.n	800a61e <_malloc_r+0xe6>
 800a5ae:	6823      	ldr	r3, [r4, #0]
 800a5b0:	442b      	add	r3, r5
 800a5b2:	6023      	str	r3, [r4, #0]
 800a5b4:	f8d8 3000 	ldr.w	r3, [r8]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d038      	beq.n	800a62e <_malloc_r+0xf6>
 800a5bc:	685a      	ldr	r2, [r3, #4]
 800a5be:	42a2      	cmp	r2, r4
 800a5c0:	d12b      	bne.n	800a61a <_malloc_r+0xe2>
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	605a      	str	r2, [r3, #4]
 800a5c6:	e00f      	b.n	800a5e8 <_malloc_r+0xb0>
 800a5c8:	6822      	ldr	r2, [r4, #0]
 800a5ca:	1b52      	subs	r2, r2, r5
 800a5cc:	d41f      	bmi.n	800a60e <_malloc_r+0xd6>
 800a5ce:	2a0b      	cmp	r2, #11
 800a5d0:	d917      	bls.n	800a602 <_malloc_r+0xca>
 800a5d2:	1961      	adds	r1, r4, r5
 800a5d4:	42a3      	cmp	r3, r4
 800a5d6:	6025      	str	r5, [r4, #0]
 800a5d8:	bf18      	it	ne
 800a5da:	6059      	strne	r1, [r3, #4]
 800a5dc:	6863      	ldr	r3, [r4, #4]
 800a5de:	bf08      	it	eq
 800a5e0:	f8c8 1000 	streq.w	r1, [r8]
 800a5e4:	5162      	str	r2, [r4, r5]
 800a5e6:	604b      	str	r3, [r1, #4]
 800a5e8:	f104 060b 	add.w	r6, r4, #11
 800a5ec:	4638      	mov	r0, r7
 800a5ee:	f000 f829 	bl	800a644 <__malloc_unlock>
 800a5f2:	1d23      	adds	r3, r4, #4
 800a5f4:	f026 0607 	bic.w	r6, r6, #7
 800a5f8:	1af2      	subs	r2, r6, r3
 800a5fa:	d0ae      	beq.n	800a55a <_malloc_r+0x22>
 800a5fc:	1b9b      	subs	r3, r3, r6
 800a5fe:	50a3      	str	r3, [r4, r2]
 800a600:	e7ab      	b.n	800a55a <_malloc_r+0x22>
 800a602:	42a3      	cmp	r3, r4
 800a604:	6862      	ldr	r2, [r4, #4]
 800a606:	d1dd      	bne.n	800a5c4 <_malloc_r+0x8c>
 800a608:	f8c8 2000 	str.w	r2, [r8]
 800a60c:	e7ec      	b.n	800a5e8 <_malloc_r+0xb0>
 800a60e:	4623      	mov	r3, r4
 800a610:	6864      	ldr	r4, [r4, #4]
 800a612:	e7ac      	b.n	800a56e <_malloc_r+0x36>
 800a614:	4634      	mov	r4, r6
 800a616:	6876      	ldr	r6, [r6, #4]
 800a618:	e7b4      	b.n	800a584 <_malloc_r+0x4c>
 800a61a:	4613      	mov	r3, r2
 800a61c:	e7cc      	b.n	800a5b8 <_malloc_r+0x80>
 800a61e:	230c      	movs	r3, #12
 800a620:	4638      	mov	r0, r7
 800a622:	603b      	str	r3, [r7, #0]
 800a624:	f000 f80e 	bl	800a644 <__malloc_unlock>
 800a628:	e797      	b.n	800a55a <_malloc_r+0x22>
 800a62a:	6025      	str	r5, [r4, #0]
 800a62c:	e7dc      	b.n	800a5e8 <_malloc_r+0xb0>
 800a62e:	605b      	str	r3, [r3, #4]
 800a630:	deff      	udf	#255	; 0xff
 800a632:	bf00      	nop
 800a634:	20000ac4 	.word	0x20000ac4

0800a638 <__malloc_lock>:
 800a638:	4801      	ldr	r0, [pc, #4]	; (800a640 <__malloc_lock+0x8>)
 800a63a:	f7ff b877 	b.w	800972c <__retarget_lock_acquire_recursive>
 800a63e:	bf00      	nop
 800a640:	20000ac0 	.word	0x20000ac0

0800a644 <__malloc_unlock>:
 800a644:	4801      	ldr	r0, [pc, #4]	; (800a64c <__malloc_unlock+0x8>)
 800a646:	f7ff b872 	b.w	800972e <__retarget_lock_release_recursive>
 800a64a:	bf00      	nop
 800a64c:	20000ac0 	.word	0x20000ac0

0800a650 <_Balloc>:
 800a650:	b570      	push	{r4, r5, r6, lr}
 800a652:	69c6      	ldr	r6, [r0, #28]
 800a654:	4604      	mov	r4, r0
 800a656:	460d      	mov	r5, r1
 800a658:	b976      	cbnz	r6, 800a678 <_Balloc+0x28>
 800a65a:	2010      	movs	r0, #16
 800a65c:	f7ff ff44 	bl	800a4e8 <malloc>
 800a660:	4602      	mov	r2, r0
 800a662:	61e0      	str	r0, [r4, #28]
 800a664:	b920      	cbnz	r0, 800a670 <_Balloc+0x20>
 800a666:	4b18      	ldr	r3, [pc, #96]	; (800a6c8 <_Balloc+0x78>)
 800a668:	216b      	movs	r1, #107	; 0x6b
 800a66a:	4818      	ldr	r0, [pc, #96]	; (800a6cc <_Balloc+0x7c>)
 800a66c:	f000 fdb0 	bl	800b1d0 <__assert_func>
 800a670:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a674:	6006      	str	r6, [r0, #0]
 800a676:	60c6      	str	r6, [r0, #12]
 800a678:	69e6      	ldr	r6, [r4, #28]
 800a67a:	68f3      	ldr	r3, [r6, #12]
 800a67c:	b183      	cbz	r3, 800a6a0 <_Balloc+0x50>
 800a67e:	69e3      	ldr	r3, [r4, #28]
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a686:	b9b8      	cbnz	r0, 800a6b8 <_Balloc+0x68>
 800a688:	2101      	movs	r1, #1
 800a68a:	4620      	mov	r0, r4
 800a68c:	fa01 f605 	lsl.w	r6, r1, r5
 800a690:	1d72      	adds	r2, r6, #5
 800a692:	0092      	lsls	r2, r2, #2
 800a694:	f000 fdba 	bl	800b20c <_calloc_r>
 800a698:	b160      	cbz	r0, 800a6b4 <_Balloc+0x64>
 800a69a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a69e:	e00e      	b.n	800a6be <_Balloc+0x6e>
 800a6a0:	2221      	movs	r2, #33	; 0x21
 800a6a2:	2104      	movs	r1, #4
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	f000 fdb1 	bl	800b20c <_calloc_r>
 800a6aa:	69e3      	ldr	r3, [r4, #28]
 800a6ac:	60f0      	str	r0, [r6, #12]
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d1e4      	bne.n	800a67e <_Balloc+0x2e>
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	bd70      	pop	{r4, r5, r6, pc}
 800a6b8:	6802      	ldr	r2, [r0, #0]
 800a6ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a6be:	2300      	movs	r3, #0
 800a6c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a6c4:	e7f7      	b.n	800a6b6 <_Balloc+0x66>
 800a6c6:	bf00      	nop
 800a6c8:	0800bb89 	.word	0x0800bb89
 800a6cc:	0800bc09 	.word	0x0800bc09

0800a6d0 <_Bfree>:
 800a6d0:	b570      	push	{r4, r5, r6, lr}
 800a6d2:	69c6      	ldr	r6, [r0, #28]
 800a6d4:	4605      	mov	r5, r0
 800a6d6:	460c      	mov	r4, r1
 800a6d8:	b976      	cbnz	r6, 800a6f8 <_Bfree+0x28>
 800a6da:	2010      	movs	r0, #16
 800a6dc:	f7ff ff04 	bl	800a4e8 <malloc>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	61e8      	str	r0, [r5, #28]
 800a6e4:	b920      	cbnz	r0, 800a6f0 <_Bfree+0x20>
 800a6e6:	4b09      	ldr	r3, [pc, #36]	; (800a70c <_Bfree+0x3c>)
 800a6e8:	218f      	movs	r1, #143	; 0x8f
 800a6ea:	4809      	ldr	r0, [pc, #36]	; (800a710 <_Bfree+0x40>)
 800a6ec:	f000 fd70 	bl	800b1d0 <__assert_func>
 800a6f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6f4:	6006      	str	r6, [r0, #0]
 800a6f6:	60c6      	str	r6, [r0, #12]
 800a6f8:	b13c      	cbz	r4, 800a70a <_Bfree+0x3a>
 800a6fa:	69eb      	ldr	r3, [r5, #28]
 800a6fc:	6862      	ldr	r2, [r4, #4]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a704:	6021      	str	r1, [r4, #0]
 800a706:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a70a:	bd70      	pop	{r4, r5, r6, pc}
 800a70c:	0800bb89 	.word	0x0800bb89
 800a710:	0800bc09 	.word	0x0800bc09

0800a714 <__multadd>:
 800a714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a718:	f101 0c14 	add.w	ip, r1, #20
 800a71c:	4607      	mov	r7, r0
 800a71e:	460c      	mov	r4, r1
 800a720:	461e      	mov	r6, r3
 800a722:	690d      	ldr	r5, [r1, #16]
 800a724:	2000      	movs	r0, #0
 800a726:	f8dc 3000 	ldr.w	r3, [ip]
 800a72a:	3001      	adds	r0, #1
 800a72c:	b299      	uxth	r1, r3
 800a72e:	4285      	cmp	r5, r0
 800a730:	fb02 6101 	mla	r1, r2, r1, r6
 800a734:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a738:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800a73c:	b289      	uxth	r1, r1
 800a73e:	fb02 3306 	mla	r3, r2, r6, r3
 800a742:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a746:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a74a:	f84c 1b04 	str.w	r1, [ip], #4
 800a74e:	dcea      	bgt.n	800a726 <__multadd+0x12>
 800a750:	b30e      	cbz	r6, 800a796 <__multadd+0x82>
 800a752:	68a3      	ldr	r3, [r4, #8]
 800a754:	42ab      	cmp	r3, r5
 800a756:	dc19      	bgt.n	800a78c <__multadd+0x78>
 800a758:	6861      	ldr	r1, [r4, #4]
 800a75a:	4638      	mov	r0, r7
 800a75c:	3101      	adds	r1, #1
 800a75e:	f7ff ff77 	bl	800a650 <_Balloc>
 800a762:	4680      	mov	r8, r0
 800a764:	b928      	cbnz	r0, 800a772 <__multadd+0x5e>
 800a766:	4602      	mov	r2, r0
 800a768:	4b0c      	ldr	r3, [pc, #48]	; (800a79c <__multadd+0x88>)
 800a76a:	21ba      	movs	r1, #186	; 0xba
 800a76c:	480c      	ldr	r0, [pc, #48]	; (800a7a0 <__multadd+0x8c>)
 800a76e:	f000 fd2f 	bl	800b1d0 <__assert_func>
 800a772:	6922      	ldr	r2, [r4, #16]
 800a774:	f104 010c 	add.w	r1, r4, #12
 800a778:	300c      	adds	r0, #12
 800a77a:	3202      	adds	r2, #2
 800a77c:	0092      	lsls	r2, r2, #2
 800a77e:	f000 fd19 	bl	800b1b4 <memcpy>
 800a782:	4621      	mov	r1, r4
 800a784:	4644      	mov	r4, r8
 800a786:	4638      	mov	r0, r7
 800a788:	f7ff ffa2 	bl	800a6d0 <_Bfree>
 800a78c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a790:	3501      	adds	r5, #1
 800a792:	615e      	str	r6, [r3, #20]
 800a794:	6125      	str	r5, [r4, #16]
 800a796:	4620      	mov	r0, r4
 800a798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a79c:	0800bbf8 	.word	0x0800bbf8
 800a7a0:	0800bc09 	.word	0x0800bc09

0800a7a4 <__hi0bits>:
 800a7a4:	0c03      	lsrs	r3, r0, #16
 800a7a6:	041b      	lsls	r3, r3, #16
 800a7a8:	b9d3      	cbnz	r3, 800a7e0 <__hi0bits+0x3c>
 800a7aa:	0400      	lsls	r0, r0, #16
 800a7ac:	2310      	movs	r3, #16
 800a7ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a7b2:	bf04      	itt	eq
 800a7b4:	0200      	lsleq	r0, r0, #8
 800a7b6:	3308      	addeq	r3, #8
 800a7b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a7bc:	bf04      	itt	eq
 800a7be:	0100      	lsleq	r0, r0, #4
 800a7c0:	3304      	addeq	r3, #4
 800a7c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a7c6:	bf04      	itt	eq
 800a7c8:	0080      	lsleq	r0, r0, #2
 800a7ca:	3302      	addeq	r3, #2
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	db05      	blt.n	800a7dc <__hi0bits+0x38>
 800a7d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a7d4:	f103 0301 	add.w	r3, r3, #1
 800a7d8:	bf08      	it	eq
 800a7da:	2320      	moveq	r3, #32
 800a7dc:	4618      	mov	r0, r3
 800a7de:	4770      	bx	lr
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	e7e4      	b.n	800a7ae <__hi0bits+0xa>

0800a7e4 <__lo0bits>:
 800a7e4:	6803      	ldr	r3, [r0, #0]
 800a7e6:	f013 0207 	ands.w	r2, r3, #7
 800a7ea:	d00c      	beq.n	800a806 <__lo0bits+0x22>
 800a7ec:	07d9      	lsls	r1, r3, #31
 800a7ee:	d422      	bmi.n	800a836 <__lo0bits+0x52>
 800a7f0:	079a      	lsls	r2, r3, #30
 800a7f2:	bf47      	ittee	mi
 800a7f4:	085b      	lsrmi	r3, r3, #1
 800a7f6:	2201      	movmi	r2, #1
 800a7f8:	089b      	lsrpl	r3, r3, #2
 800a7fa:	2202      	movpl	r2, #2
 800a7fc:	bf4c      	ite	mi
 800a7fe:	6003      	strmi	r3, [r0, #0]
 800a800:	6003      	strpl	r3, [r0, #0]
 800a802:	4610      	mov	r0, r2
 800a804:	4770      	bx	lr
 800a806:	b299      	uxth	r1, r3
 800a808:	b909      	cbnz	r1, 800a80e <__lo0bits+0x2a>
 800a80a:	0c1b      	lsrs	r3, r3, #16
 800a80c:	2210      	movs	r2, #16
 800a80e:	b2d9      	uxtb	r1, r3
 800a810:	b909      	cbnz	r1, 800a816 <__lo0bits+0x32>
 800a812:	3208      	adds	r2, #8
 800a814:	0a1b      	lsrs	r3, r3, #8
 800a816:	0719      	lsls	r1, r3, #28
 800a818:	bf04      	itt	eq
 800a81a:	091b      	lsreq	r3, r3, #4
 800a81c:	3204      	addeq	r2, #4
 800a81e:	0799      	lsls	r1, r3, #30
 800a820:	bf04      	itt	eq
 800a822:	089b      	lsreq	r3, r3, #2
 800a824:	3202      	addeq	r2, #2
 800a826:	07d9      	lsls	r1, r3, #31
 800a828:	d403      	bmi.n	800a832 <__lo0bits+0x4e>
 800a82a:	085b      	lsrs	r3, r3, #1
 800a82c:	f102 0201 	add.w	r2, r2, #1
 800a830:	d003      	beq.n	800a83a <__lo0bits+0x56>
 800a832:	6003      	str	r3, [r0, #0]
 800a834:	e7e5      	b.n	800a802 <__lo0bits+0x1e>
 800a836:	2200      	movs	r2, #0
 800a838:	e7e3      	b.n	800a802 <__lo0bits+0x1e>
 800a83a:	2220      	movs	r2, #32
 800a83c:	e7e1      	b.n	800a802 <__lo0bits+0x1e>
	...

0800a840 <__i2b>:
 800a840:	b510      	push	{r4, lr}
 800a842:	460c      	mov	r4, r1
 800a844:	2101      	movs	r1, #1
 800a846:	f7ff ff03 	bl	800a650 <_Balloc>
 800a84a:	4602      	mov	r2, r0
 800a84c:	b928      	cbnz	r0, 800a85a <__i2b+0x1a>
 800a84e:	4b05      	ldr	r3, [pc, #20]	; (800a864 <__i2b+0x24>)
 800a850:	f240 1145 	movw	r1, #325	; 0x145
 800a854:	4804      	ldr	r0, [pc, #16]	; (800a868 <__i2b+0x28>)
 800a856:	f000 fcbb 	bl	800b1d0 <__assert_func>
 800a85a:	2301      	movs	r3, #1
 800a85c:	6144      	str	r4, [r0, #20]
 800a85e:	6103      	str	r3, [r0, #16]
 800a860:	bd10      	pop	{r4, pc}
 800a862:	bf00      	nop
 800a864:	0800bbf8 	.word	0x0800bbf8
 800a868:	0800bc09 	.word	0x0800bc09

0800a86c <__multiply>:
 800a86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a870:	4691      	mov	r9, r2
 800a872:	690a      	ldr	r2, [r1, #16]
 800a874:	460c      	mov	r4, r1
 800a876:	b085      	sub	sp, #20
 800a878:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	bfbe      	ittt	lt
 800a880:	460b      	movlt	r3, r1
 800a882:	464c      	movlt	r4, r9
 800a884:	4699      	movlt	r9, r3
 800a886:	6927      	ldr	r7, [r4, #16]
 800a888:	68a3      	ldr	r3, [r4, #8]
 800a88a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a88e:	6861      	ldr	r1, [r4, #4]
 800a890:	eb07 060a 	add.w	r6, r7, sl
 800a894:	42b3      	cmp	r3, r6
 800a896:	bfb8      	it	lt
 800a898:	3101      	addlt	r1, #1
 800a89a:	f7ff fed9 	bl	800a650 <_Balloc>
 800a89e:	b930      	cbnz	r0, 800a8ae <__multiply+0x42>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	4b45      	ldr	r3, [pc, #276]	; (800a9b8 <__multiply+0x14c>)
 800a8a4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a8a8:	4844      	ldr	r0, [pc, #272]	; (800a9bc <__multiply+0x150>)
 800a8aa:	f000 fc91 	bl	800b1d0 <__assert_func>
 800a8ae:	f100 0514 	add.w	r5, r0, #20
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a8b8:	462b      	mov	r3, r5
 800a8ba:	4543      	cmp	r3, r8
 800a8bc:	d321      	bcc.n	800a902 <__multiply+0x96>
 800a8be:	f104 0314 	add.w	r3, r4, #20
 800a8c2:	f104 0115 	add.w	r1, r4, #21
 800a8c6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a8ca:	f109 0314 	add.w	r3, r9, #20
 800a8ce:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a8d2:	9202      	str	r2, [sp, #8]
 800a8d4:	1b3a      	subs	r2, r7, r4
 800a8d6:	3a15      	subs	r2, #21
 800a8d8:	f022 0203 	bic.w	r2, r2, #3
 800a8dc:	3204      	adds	r2, #4
 800a8de:	428f      	cmp	r7, r1
 800a8e0:	bf38      	it	cc
 800a8e2:	2204      	movcc	r2, #4
 800a8e4:	9201      	str	r2, [sp, #4]
 800a8e6:	9a02      	ldr	r2, [sp, #8]
 800a8e8:	9303      	str	r3, [sp, #12]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d80c      	bhi.n	800a908 <__multiply+0x9c>
 800a8ee:	2e00      	cmp	r6, #0
 800a8f0:	dd03      	ble.n	800a8fa <__multiply+0x8e>
 800a8f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d05b      	beq.n	800a9b2 <__multiply+0x146>
 800a8fa:	6106      	str	r6, [r0, #16]
 800a8fc:	b005      	add	sp, #20
 800a8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a902:	f843 2b04 	str.w	r2, [r3], #4
 800a906:	e7d8      	b.n	800a8ba <__multiply+0x4e>
 800a908:	f8b3 a000 	ldrh.w	sl, [r3]
 800a90c:	f1ba 0f00 	cmp.w	sl, #0
 800a910:	d024      	beq.n	800a95c <__multiply+0xf0>
 800a912:	f104 0e14 	add.w	lr, r4, #20
 800a916:	46a9      	mov	r9, r5
 800a918:	f04f 0c00 	mov.w	ip, #0
 800a91c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a920:	f8d9 1000 	ldr.w	r1, [r9]
 800a924:	fa1f fb82 	uxth.w	fp, r2
 800a928:	4577      	cmp	r7, lr
 800a92a:	b289      	uxth	r1, r1
 800a92c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a930:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a934:	f8d9 2000 	ldr.w	r2, [r9]
 800a938:	4461      	add	r1, ip
 800a93a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a93e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a942:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a946:	b289      	uxth	r1, r1
 800a948:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a94c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a950:	f849 1b04 	str.w	r1, [r9], #4
 800a954:	d8e2      	bhi.n	800a91c <__multiply+0xb0>
 800a956:	9a01      	ldr	r2, [sp, #4]
 800a958:	f845 c002 	str.w	ip, [r5, r2]
 800a95c:	9a03      	ldr	r2, [sp, #12]
 800a95e:	3304      	adds	r3, #4
 800a960:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a964:	f1b9 0f00 	cmp.w	r9, #0
 800a968:	d021      	beq.n	800a9ae <__multiply+0x142>
 800a96a:	6829      	ldr	r1, [r5, #0]
 800a96c:	f104 0c14 	add.w	ip, r4, #20
 800a970:	46ae      	mov	lr, r5
 800a972:	f04f 0a00 	mov.w	sl, #0
 800a976:	f8bc b000 	ldrh.w	fp, [ip]
 800a97a:	b289      	uxth	r1, r1
 800a97c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a980:	fb09 220b 	mla	r2, r9, fp, r2
 800a984:	4452      	add	r2, sl
 800a986:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a98a:	f84e 1b04 	str.w	r1, [lr], #4
 800a98e:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a992:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a996:	f8be 1000 	ldrh.w	r1, [lr]
 800a99a:	4567      	cmp	r7, ip
 800a99c:	fb09 110a 	mla	r1, r9, sl, r1
 800a9a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a9a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a9a8:	d8e5      	bhi.n	800a976 <__multiply+0x10a>
 800a9aa:	9a01      	ldr	r2, [sp, #4]
 800a9ac:	50a9      	str	r1, [r5, r2]
 800a9ae:	3504      	adds	r5, #4
 800a9b0:	e799      	b.n	800a8e6 <__multiply+0x7a>
 800a9b2:	3e01      	subs	r6, #1
 800a9b4:	e79b      	b.n	800a8ee <__multiply+0x82>
 800a9b6:	bf00      	nop
 800a9b8:	0800bbf8 	.word	0x0800bbf8
 800a9bc:	0800bc09 	.word	0x0800bc09

0800a9c0 <__pow5mult>:
 800a9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9c4:	4615      	mov	r5, r2
 800a9c6:	f012 0203 	ands.w	r2, r2, #3
 800a9ca:	4606      	mov	r6, r0
 800a9cc:	460f      	mov	r7, r1
 800a9ce:	d007      	beq.n	800a9e0 <__pow5mult+0x20>
 800a9d0:	3a01      	subs	r2, #1
 800a9d2:	4c25      	ldr	r4, [pc, #148]	; (800aa68 <__pow5mult+0xa8>)
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a9da:	f7ff fe9b 	bl	800a714 <__multadd>
 800a9de:	4607      	mov	r7, r0
 800a9e0:	10ad      	asrs	r5, r5, #2
 800a9e2:	d03d      	beq.n	800aa60 <__pow5mult+0xa0>
 800a9e4:	69f4      	ldr	r4, [r6, #28]
 800a9e6:	b97c      	cbnz	r4, 800aa08 <__pow5mult+0x48>
 800a9e8:	2010      	movs	r0, #16
 800a9ea:	f7ff fd7d 	bl	800a4e8 <malloc>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	61f0      	str	r0, [r6, #28]
 800a9f2:	b928      	cbnz	r0, 800aa00 <__pow5mult+0x40>
 800a9f4:	4b1d      	ldr	r3, [pc, #116]	; (800aa6c <__pow5mult+0xac>)
 800a9f6:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a9fa:	481d      	ldr	r0, [pc, #116]	; (800aa70 <__pow5mult+0xb0>)
 800a9fc:	f000 fbe8 	bl	800b1d0 <__assert_func>
 800aa00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa04:	6004      	str	r4, [r0, #0]
 800aa06:	60c4      	str	r4, [r0, #12]
 800aa08:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800aa0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa10:	b94c      	cbnz	r4, 800aa26 <__pow5mult+0x66>
 800aa12:	f240 2171 	movw	r1, #625	; 0x271
 800aa16:	4630      	mov	r0, r6
 800aa18:	f7ff ff12 	bl	800a840 <__i2b>
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	4604      	mov	r4, r0
 800aa20:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa24:	6003      	str	r3, [r0, #0]
 800aa26:	f04f 0900 	mov.w	r9, #0
 800aa2a:	07eb      	lsls	r3, r5, #31
 800aa2c:	d50a      	bpl.n	800aa44 <__pow5mult+0x84>
 800aa2e:	4639      	mov	r1, r7
 800aa30:	4622      	mov	r2, r4
 800aa32:	4630      	mov	r0, r6
 800aa34:	f7ff ff1a 	bl	800a86c <__multiply>
 800aa38:	4680      	mov	r8, r0
 800aa3a:	4639      	mov	r1, r7
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	4647      	mov	r7, r8
 800aa40:	f7ff fe46 	bl	800a6d0 <_Bfree>
 800aa44:	106d      	asrs	r5, r5, #1
 800aa46:	d00b      	beq.n	800aa60 <__pow5mult+0xa0>
 800aa48:	6820      	ldr	r0, [r4, #0]
 800aa4a:	b938      	cbnz	r0, 800aa5c <__pow5mult+0x9c>
 800aa4c:	4622      	mov	r2, r4
 800aa4e:	4621      	mov	r1, r4
 800aa50:	4630      	mov	r0, r6
 800aa52:	f7ff ff0b 	bl	800a86c <__multiply>
 800aa56:	6020      	str	r0, [r4, #0]
 800aa58:	f8c0 9000 	str.w	r9, [r0]
 800aa5c:	4604      	mov	r4, r0
 800aa5e:	e7e4      	b.n	800aa2a <__pow5mult+0x6a>
 800aa60:	4638      	mov	r0, r7
 800aa62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa66:	bf00      	nop
 800aa68:	0800bd58 	.word	0x0800bd58
 800aa6c:	0800bb89 	.word	0x0800bb89
 800aa70:	0800bc09 	.word	0x0800bc09

0800aa74 <__lshift>:
 800aa74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa78:	460c      	mov	r4, r1
 800aa7a:	4607      	mov	r7, r0
 800aa7c:	4691      	mov	r9, r2
 800aa7e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa82:	6923      	ldr	r3, [r4, #16]
 800aa84:	6849      	ldr	r1, [r1, #4]
 800aa86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa8a:	68a3      	ldr	r3, [r4, #8]
 800aa8c:	f108 0601 	add.w	r6, r8, #1
 800aa90:	42b3      	cmp	r3, r6
 800aa92:	db0b      	blt.n	800aaac <__lshift+0x38>
 800aa94:	4638      	mov	r0, r7
 800aa96:	f7ff fddb 	bl	800a650 <_Balloc>
 800aa9a:	4605      	mov	r5, r0
 800aa9c:	b948      	cbnz	r0, 800aab2 <__lshift+0x3e>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	4b28      	ldr	r3, [pc, #160]	; (800ab44 <__lshift+0xd0>)
 800aaa2:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800aaa6:	4828      	ldr	r0, [pc, #160]	; (800ab48 <__lshift+0xd4>)
 800aaa8:	f000 fb92 	bl	800b1d0 <__assert_func>
 800aaac:	3101      	adds	r1, #1
 800aaae:	005b      	lsls	r3, r3, #1
 800aab0:	e7ee      	b.n	800aa90 <__lshift+0x1c>
 800aab2:	2300      	movs	r3, #0
 800aab4:	f100 0114 	add.w	r1, r0, #20
 800aab8:	f100 0210 	add.w	r2, r0, #16
 800aabc:	4618      	mov	r0, r3
 800aabe:	4553      	cmp	r3, sl
 800aac0:	db33      	blt.n	800ab2a <__lshift+0xb6>
 800aac2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aac6:	f104 0314 	add.w	r3, r4, #20
 800aaca:	6920      	ldr	r0, [r4, #16]
 800aacc:	f019 091f 	ands.w	r9, r9, #31
 800aad0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aad4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aad8:	d02b      	beq.n	800ab32 <__lshift+0xbe>
 800aada:	f1c9 0e20 	rsb	lr, r9, #32
 800aade:	468a      	mov	sl, r1
 800aae0:	2200      	movs	r2, #0
 800aae2:	6818      	ldr	r0, [r3, #0]
 800aae4:	fa00 f009 	lsl.w	r0, r0, r9
 800aae8:	4310      	orrs	r0, r2
 800aaea:	f84a 0b04 	str.w	r0, [sl], #4
 800aaee:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaf2:	459c      	cmp	ip, r3
 800aaf4:	fa22 f20e 	lsr.w	r2, r2, lr
 800aaf8:	d8f3      	bhi.n	800aae2 <__lshift+0x6e>
 800aafa:	ebac 0304 	sub.w	r3, ip, r4
 800aafe:	f104 0015 	add.w	r0, r4, #21
 800ab02:	3b15      	subs	r3, #21
 800ab04:	f023 0303 	bic.w	r3, r3, #3
 800ab08:	3304      	adds	r3, #4
 800ab0a:	4584      	cmp	ip, r0
 800ab0c:	bf38      	it	cc
 800ab0e:	2304      	movcc	r3, #4
 800ab10:	50ca      	str	r2, [r1, r3]
 800ab12:	b10a      	cbz	r2, 800ab18 <__lshift+0xa4>
 800ab14:	f108 0602 	add.w	r6, r8, #2
 800ab18:	3e01      	subs	r6, #1
 800ab1a:	4638      	mov	r0, r7
 800ab1c:	4621      	mov	r1, r4
 800ab1e:	612e      	str	r6, [r5, #16]
 800ab20:	f7ff fdd6 	bl	800a6d0 <_Bfree>
 800ab24:	4628      	mov	r0, r5
 800ab26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab30:	e7c5      	b.n	800aabe <__lshift+0x4a>
 800ab32:	3904      	subs	r1, #4
 800ab34:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab38:	459c      	cmp	ip, r3
 800ab3a:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab3e:	d8f9      	bhi.n	800ab34 <__lshift+0xc0>
 800ab40:	e7ea      	b.n	800ab18 <__lshift+0xa4>
 800ab42:	bf00      	nop
 800ab44:	0800bbf8 	.word	0x0800bbf8
 800ab48:	0800bc09 	.word	0x0800bc09

0800ab4c <__mcmp>:
 800ab4c:	6902      	ldr	r2, [r0, #16]
 800ab4e:	b530      	push	{r4, r5, lr}
 800ab50:	690c      	ldr	r4, [r1, #16]
 800ab52:	1b12      	subs	r2, r2, r4
 800ab54:	d10e      	bne.n	800ab74 <__mcmp+0x28>
 800ab56:	f100 0314 	add.w	r3, r0, #20
 800ab5a:	3114      	adds	r1, #20
 800ab5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ab60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ab64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ab68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ab6c:	42a5      	cmp	r5, r4
 800ab6e:	d003      	beq.n	800ab78 <__mcmp+0x2c>
 800ab70:	d305      	bcc.n	800ab7e <__mcmp+0x32>
 800ab72:	2201      	movs	r2, #1
 800ab74:	4610      	mov	r0, r2
 800ab76:	bd30      	pop	{r4, r5, pc}
 800ab78:	4283      	cmp	r3, r0
 800ab7a:	d3f3      	bcc.n	800ab64 <__mcmp+0x18>
 800ab7c:	e7fa      	b.n	800ab74 <__mcmp+0x28>
 800ab7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab82:	e7f7      	b.n	800ab74 <__mcmp+0x28>

0800ab84 <__mdiff>:
 800ab84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab88:	460c      	mov	r4, r1
 800ab8a:	4606      	mov	r6, r0
 800ab8c:	4611      	mov	r1, r2
 800ab8e:	4692      	mov	sl, r2
 800ab90:	4620      	mov	r0, r4
 800ab92:	f7ff ffdb 	bl	800ab4c <__mcmp>
 800ab96:	1e05      	subs	r5, r0, #0
 800ab98:	d110      	bne.n	800abbc <__mdiff+0x38>
 800ab9a:	4629      	mov	r1, r5
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	f7ff fd57 	bl	800a650 <_Balloc>
 800aba2:	b930      	cbnz	r0, 800abb2 <__mdiff+0x2e>
 800aba4:	4b3d      	ldr	r3, [pc, #244]	; (800ac9c <__mdiff+0x118>)
 800aba6:	4602      	mov	r2, r0
 800aba8:	f240 2137 	movw	r1, #567	; 0x237
 800abac:	483c      	ldr	r0, [pc, #240]	; (800aca0 <__mdiff+0x11c>)
 800abae:	f000 fb0f 	bl	800b1d0 <__assert_func>
 800abb2:	2301      	movs	r3, #1
 800abb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800abb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abbc:	bfa4      	itt	ge
 800abbe:	4653      	movge	r3, sl
 800abc0:	46a2      	movge	sl, r4
 800abc2:	4630      	mov	r0, r6
 800abc4:	bfa8      	it	ge
 800abc6:	2500      	movge	r5, #0
 800abc8:	f8da 1004 	ldr.w	r1, [sl, #4]
 800abcc:	bfac      	ite	ge
 800abce:	461c      	movge	r4, r3
 800abd0:	2501      	movlt	r5, #1
 800abd2:	f7ff fd3d 	bl	800a650 <_Balloc>
 800abd6:	b920      	cbnz	r0, 800abe2 <__mdiff+0x5e>
 800abd8:	4b30      	ldr	r3, [pc, #192]	; (800ac9c <__mdiff+0x118>)
 800abda:	4602      	mov	r2, r0
 800abdc:	f240 2145 	movw	r1, #581	; 0x245
 800abe0:	e7e4      	b.n	800abac <__mdiff+0x28>
 800abe2:	f8da 7010 	ldr.w	r7, [sl, #16]
 800abe6:	f104 0914 	add.w	r9, r4, #20
 800abea:	6926      	ldr	r6, [r4, #16]
 800abec:	f100 0814 	add.w	r8, r0, #20
 800abf0:	60c5      	str	r5, [r0, #12]
 800abf2:	f10a 0514 	add.w	r5, sl, #20
 800abf6:	f10a 0210 	add.w	r2, sl, #16
 800abfa:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800abfe:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800ac02:	46c2      	mov	sl, r8
 800ac04:	f04f 0c00 	mov.w	ip, #0
 800ac08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ac0c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ac10:	fa1f f18b 	uxth.w	r1, fp
 800ac14:	454e      	cmp	r6, r9
 800ac16:	4461      	add	r1, ip
 800ac18:	fa1f fc83 	uxth.w	ip, r3
 800ac1c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ac20:	eba1 010c 	sub.w	r1, r1, ip
 800ac24:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ac28:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ac2c:	b289      	uxth	r1, r1
 800ac2e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ac32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800ac36:	f84a 1b04 	str.w	r1, [sl], #4
 800ac3a:	d8e5      	bhi.n	800ac08 <__mdiff+0x84>
 800ac3c:	1b33      	subs	r3, r6, r4
 800ac3e:	3415      	adds	r4, #21
 800ac40:	3b15      	subs	r3, #21
 800ac42:	f023 0303 	bic.w	r3, r3, #3
 800ac46:	3304      	adds	r3, #4
 800ac48:	42a6      	cmp	r6, r4
 800ac4a:	bf38      	it	cc
 800ac4c:	2304      	movcc	r3, #4
 800ac4e:	441d      	add	r5, r3
 800ac50:	4443      	add	r3, r8
 800ac52:	462c      	mov	r4, r5
 800ac54:	461e      	mov	r6, r3
 800ac56:	4574      	cmp	r4, lr
 800ac58:	d30e      	bcc.n	800ac78 <__mdiff+0xf4>
 800ac5a:	f10e 0203 	add.w	r2, lr, #3
 800ac5e:	1b52      	subs	r2, r2, r5
 800ac60:	3d03      	subs	r5, #3
 800ac62:	f022 0203 	bic.w	r2, r2, #3
 800ac66:	45ae      	cmp	lr, r5
 800ac68:	bf38      	it	cc
 800ac6a:	2200      	movcc	r2, #0
 800ac6c:	4413      	add	r3, r2
 800ac6e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ac72:	b18a      	cbz	r2, 800ac98 <__mdiff+0x114>
 800ac74:	6107      	str	r7, [r0, #16]
 800ac76:	e79f      	b.n	800abb8 <__mdiff+0x34>
 800ac78:	f854 8b04 	ldr.w	r8, [r4], #4
 800ac7c:	fa1f f288 	uxth.w	r2, r8
 800ac80:	4462      	add	r2, ip
 800ac82:	1411      	asrs	r1, r2, #16
 800ac84:	b292      	uxth	r2, r2
 800ac86:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 800ac8a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ac8e:	ea4f 4c21 	mov.w	ip, r1, asr #16
 800ac92:	f846 2b04 	str.w	r2, [r6], #4
 800ac96:	e7de      	b.n	800ac56 <__mdiff+0xd2>
 800ac98:	3f01      	subs	r7, #1
 800ac9a:	e7e8      	b.n	800ac6e <__mdiff+0xea>
 800ac9c:	0800bbf8 	.word	0x0800bbf8
 800aca0:	0800bc09 	.word	0x0800bc09

0800aca4 <__d2b>:
 800aca4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aca8:	460f      	mov	r7, r1
 800acaa:	2101      	movs	r1, #1
 800acac:	4616      	mov	r6, r2
 800acae:	ec59 8b10 	vmov	r8, r9, d0
 800acb2:	f7ff fccd 	bl	800a650 <_Balloc>
 800acb6:	4604      	mov	r4, r0
 800acb8:	b930      	cbnz	r0, 800acc8 <__d2b+0x24>
 800acba:	4602      	mov	r2, r0
 800acbc:	4b24      	ldr	r3, [pc, #144]	; (800ad50 <__d2b+0xac>)
 800acbe:	f240 310f 	movw	r1, #783	; 0x30f
 800acc2:	4824      	ldr	r0, [pc, #144]	; (800ad54 <__d2b+0xb0>)
 800acc4:	f000 fa84 	bl	800b1d0 <__assert_func>
 800acc8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800accc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acd0:	bb2d      	cbnz	r5, 800ad1e <__d2b+0x7a>
 800acd2:	9301      	str	r3, [sp, #4]
 800acd4:	f1b8 0300 	subs.w	r3, r8, #0
 800acd8:	d026      	beq.n	800ad28 <__d2b+0x84>
 800acda:	4668      	mov	r0, sp
 800acdc:	9300      	str	r3, [sp, #0]
 800acde:	f7ff fd81 	bl	800a7e4 <__lo0bits>
 800ace2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ace6:	b1e8      	cbz	r0, 800ad24 <__d2b+0x80>
 800ace8:	f1c0 0320 	rsb	r3, r0, #32
 800acec:	fa02 f303 	lsl.w	r3, r2, r3
 800acf0:	40c2      	lsrs	r2, r0
 800acf2:	430b      	orrs	r3, r1
 800acf4:	9201      	str	r2, [sp, #4]
 800acf6:	6163      	str	r3, [r4, #20]
 800acf8:	9b01      	ldr	r3, [sp, #4]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	61a3      	str	r3, [r4, #24]
 800acfe:	bf14      	ite	ne
 800ad00:	2202      	movne	r2, #2
 800ad02:	2201      	moveq	r2, #1
 800ad04:	6122      	str	r2, [r4, #16]
 800ad06:	b1bd      	cbz	r5, 800ad38 <__d2b+0x94>
 800ad08:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ad0c:	4405      	add	r5, r0
 800ad0e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad12:	603d      	str	r5, [r7, #0]
 800ad14:	6030      	str	r0, [r6, #0]
 800ad16:	4620      	mov	r0, r4
 800ad18:	b003      	add	sp, #12
 800ad1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad22:	e7d6      	b.n	800acd2 <__d2b+0x2e>
 800ad24:	6161      	str	r1, [r4, #20]
 800ad26:	e7e7      	b.n	800acf8 <__d2b+0x54>
 800ad28:	a801      	add	r0, sp, #4
 800ad2a:	f7ff fd5b 	bl	800a7e4 <__lo0bits>
 800ad2e:	9b01      	ldr	r3, [sp, #4]
 800ad30:	3020      	adds	r0, #32
 800ad32:	2201      	movs	r2, #1
 800ad34:	6163      	str	r3, [r4, #20]
 800ad36:	e7e5      	b.n	800ad04 <__d2b+0x60>
 800ad38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad40:	6038      	str	r0, [r7, #0]
 800ad42:	6918      	ldr	r0, [r3, #16]
 800ad44:	f7ff fd2e 	bl	800a7a4 <__hi0bits>
 800ad48:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad4c:	e7e2      	b.n	800ad14 <__d2b+0x70>
 800ad4e:	bf00      	nop
 800ad50:	0800bbf8 	.word	0x0800bbf8
 800ad54:	0800bc09 	.word	0x0800bc09

0800ad58 <__ssputs_r>:
 800ad58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad5c:	461f      	mov	r7, r3
 800ad5e:	688e      	ldr	r6, [r1, #8]
 800ad60:	4682      	mov	sl, r0
 800ad62:	460c      	mov	r4, r1
 800ad64:	42be      	cmp	r6, r7
 800ad66:	4690      	mov	r8, r2
 800ad68:	680b      	ldr	r3, [r1, #0]
 800ad6a:	d82c      	bhi.n	800adc6 <__ssputs_r+0x6e>
 800ad6c:	898a      	ldrh	r2, [r1, #12]
 800ad6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad72:	d026      	beq.n	800adc2 <__ssputs_r+0x6a>
 800ad74:	6965      	ldr	r5, [r4, #20]
 800ad76:	6909      	ldr	r1, [r1, #16]
 800ad78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad7c:	eba3 0901 	sub.w	r9, r3, r1
 800ad80:	1c7b      	adds	r3, r7, #1
 800ad82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad86:	444b      	add	r3, r9
 800ad88:	106d      	asrs	r5, r5, #1
 800ad8a:	429d      	cmp	r5, r3
 800ad8c:	bf38      	it	cc
 800ad8e:	461d      	movcc	r5, r3
 800ad90:	0553      	lsls	r3, r2, #21
 800ad92:	d527      	bpl.n	800ade4 <__ssputs_r+0x8c>
 800ad94:	4629      	mov	r1, r5
 800ad96:	f7ff fbcf 	bl	800a538 <_malloc_r>
 800ad9a:	4606      	mov	r6, r0
 800ad9c:	b360      	cbz	r0, 800adf8 <__ssputs_r+0xa0>
 800ad9e:	464a      	mov	r2, r9
 800ada0:	6921      	ldr	r1, [r4, #16]
 800ada2:	f000 fa07 	bl	800b1b4 <memcpy>
 800ada6:	89a3      	ldrh	r3, [r4, #12]
 800ada8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800adac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adb0:	81a3      	strh	r3, [r4, #12]
 800adb2:	6126      	str	r6, [r4, #16]
 800adb4:	444e      	add	r6, r9
 800adb6:	6165      	str	r5, [r4, #20]
 800adb8:	eba5 0509 	sub.w	r5, r5, r9
 800adbc:	6026      	str	r6, [r4, #0]
 800adbe:	463e      	mov	r6, r7
 800adc0:	60a5      	str	r5, [r4, #8]
 800adc2:	42be      	cmp	r6, r7
 800adc4:	d900      	bls.n	800adc8 <__ssputs_r+0x70>
 800adc6:	463e      	mov	r6, r7
 800adc8:	4632      	mov	r2, r6
 800adca:	4641      	mov	r1, r8
 800adcc:	6820      	ldr	r0, [r4, #0]
 800adce:	f000 f9c7 	bl	800b160 <memmove>
 800add2:	68a3      	ldr	r3, [r4, #8]
 800add4:	2000      	movs	r0, #0
 800add6:	1b9b      	subs	r3, r3, r6
 800add8:	60a3      	str	r3, [r4, #8]
 800adda:	6823      	ldr	r3, [r4, #0]
 800addc:	4433      	add	r3, r6
 800adde:	6023      	str	r3, [r4, #0]
 800ade0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ade4:	462a      	mov	r2, r5
 800ade6:	f000 fa39 	bl	800b25c <_realloc_r>
 800adea:	4606      	mov	r6, r0
 800adec:	2800      	cmp	r0, #0
 800adee:	d1e0      	bne.n	800adb2 <__ssputs_r+0x5a>
 800adf0:	6921      	ldr	r1, [r4, #16]
 800adf2:	4650      	mov	r0, sl
 800adf4:	f7ff fb2c 	bl	800a450 <_free_r>
 800adf8:	230c      	movs	r3, #12
 800adfa:	f04f 30ff 	mov.w	r0, #4294967295
 800adfe:	f8ca 3000 	str.w	r3, [sl]
 800ae02:	89a3      	ldrh	r3, [r4, #12]
 800ae04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae08:	81a3      	strh	r3, [r4, #12]
 800ae0a:	e7e9      	b.n	800ade0 <__ssputs_r+0x88>

0800ae0c <_svfiprintf_r>:
 800ae0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae10:	4698      	mov	r8, r3
 800ae12:	898b      	ldrh	r3, [r1, #12]
 800ae14:	b09d      	sub	sp, #116	; 0x74
 800ae16:	4607      	mov	r7, r0
 800ae18:	061b      	lsls	r3, r3, #24
 800ae1a:	460d      	mov	r5, r1
 800ae1c:	4614      	mov	r4, r2
 800ae1e:	d50e      	bpl.n	800ae3e <_svfiprintf_r+0x32>
 800ae20:	690b      	ldr	r3, [r1, #16]
 800ae22:	b963      	cbnz	r3, 800ae3e <_svfiprintf_r+0x32>
 800ae24:	2140      	movs	r1, #64	; 0x40
 800ae26:	f7ff fb87 	bl	800a538 <_malloc_r>
 800ae2a:	6028      	str	r0, [r5, #0]
 800ae2c:	6128      	str	r0, [r5, #16]
 800ae2e:	b920      	cbnz	r0, 800ae3a <_svfiprintf_r+0x2e>
 800ae30:	230c      	movs	r3, #12
 800ae32:	603b      	str	r3, [r7, #0]
 800ae34:	f04f 30ff 	mov.w	r0, #4294967295
 800ae38:	e0d0      	b.n	800afdc <_svfiprintf_r+0x1d0>
 800ae3a:	2340      	movs	r3, #64	; 0x40
 800ae3c:	616b      	str	r3, [r5, #20]
 800ae3e:	2300      	movs	r3, #0
 800ae40:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae44:	f04f 0901 	mov.w	r9, #1
 800ae48:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aff4 <_svfiprintf_r+0x1e8>
 800ae4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae4e:	2320      	movs	r3, #32
 800ae50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae54:	2330      	movs	r3, #48	; 0x30
 800ae56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae5a:	4623      	mov	r3, r4
 800ae5c:	469a      	mov	sl, r3
 800ae5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae62:	b10a      	cbz	r2, 800ae68 <_svfiprintf_r+0x5c>
 800ae64:	2a25      	cmp	r2, #37	; 0x25
 800ae66:	d1f9      	bne.n	800ae5c <_svfiprintf_r+0x50>
 800ae68:	ebba 0b04 	subs.w	fp, sl, r4
 800ae6c:	d00b      	beq.n	800ae86 <_svfiprintf_r+0x7a>
 800ae6e:	465b      	mov	r3, fp
 800ae70:	4622      	mov	r2, r4
 800ae72:	4629      	mov	r1, r5
 800ae74:	4638      	mov	r0, r7
 800ae76:	f7ff ff6f 	bl	800ad58 <__ssputs_r>
 800ae7a:	3001      	adds	r0, #1
 800ae7c:	f000 80a9 	beq.w	800afd2 <_svfiprintf_r+0x1c6>
 800ae80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae82:	445a      	add	r2, fp
 800ae84:	9209      	str	r2, [sp, #36]	; 0x24
 800ae86:	f89a 3000 	ldrb.w	r3, [sl]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f000 80a1 	beq.w	800afd2 <_svfiprintf_r+0x1c6>
 800ae90:	2300      	movs	r3, #0
 800ae92:	f04f 32ff 	mov.w	r2, #4294967295
 800ae96:	f10a 0a01 	add.w	sl, sl, #1
 800ae9a:	9304      	str	r3, [sp, #16]
 800ae9c:	9307      	str	r3, [sp, #28]
 800ae9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aea2:	931a      	str	r3, [sp, #104]	; 0x68
 800aea4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aea8:	4654      	mov	r4, sl
 800aeaa:	2205      	movs	r2, #5
 800aeac:	4851      	ldr	r0, [pc, #324]	; (800aff4 <_svfiprintf_r+0x1e8>)
 800aeae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeb2:	f7fe fc3d 	bl	8009730 <memchr>
 800aeb6:	9a04      	ldr	r2, [sp, #16]
 800aeb8:	b9d8      	cbnz	r0, 800aef2 <_svfiprintf_r+0xe6>
 800aeba:	06d0      	lsls	r0, r2, #27
 800aebc:	bf44      	itt	mi
 800aebe:	2320      	movmi	r3, #32
 800aec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aec4:	0711      	lsls	r1, r2, #28
 800aec6:	bf44      	itt	mi
 800aec8:	232b      	movmi	r3, #43	; 0x2b
 800aeca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aece:	f89a 3000 	ldrb.w	r3, [sl]
 800aed2:	2b2a      	cmp	r3, #42	; 0x2a
 800aed4:	d015      	beq.n	800af02 <_svfiprintf_r+0xf6>
 800aed6:	9a07      	ldr	r2, [sp, #28]
 800aed8:	4654      	mov	r4, sl
 800aeda:	2000      	movs	r0, #0
 800aedc:	f04f 0c0a 	mov.w	ip, #10
 800aee0:	4621      	mov	r1, r4
 800aee2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aee6:	3b30      	subs	r3, #48	; 0x30
 800aee8:	2b09      	cmp	r3, #9
 800aeea:	d94d      	bls.n	800af88 <_svfiprintf_r+0x17c>
 800aeec:	b1b0      	cbz	r0, 800af1c <_svfiprintf_r+0x110>
 800aeee:	9207      	str	r2, [sp, #28]
 800aef0:	e014      	b.n	800af1c <_svfiprintf_r+0x110>
 800aef2:	eba0 0308 	sub.w	r3, r0, r8
 800aef6:	46a2      	mov	sl, r4
 800aef8:	fa09 f303 	lsl.w	r3, r9, r3
 800aefc:	4313      	orrs	r3, r2
 800aefe:	9304      	str	r3, [sp, #16]
 800af00:	e7d2      	b.n	800aea8 <_svfiprintf_r+0x9c>
 800af02:	9b03      	ldr	r3, [sp, #12]
 800af04:	1d19      	adds	r1, r3, #4
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	9103      	str	r1, [sp, #12]
 800af0c:	bfbb      	ittet	lt
 800af0e:	425b      	neglt	r3, r3
 800af10:	f042 0202 	orrlt.w	r2, r2, #2
 800af14:	9307      	strge	r3, [sp, #28]
 800af16:	9307      	strlt	r3, [sp, #28]
 800af18:	bfb8      	it	lt
 800af1a:	9204      	strlt	r2, [sp, #16]
 800af1c:	7823      	ldrb	r3, [r4, #0]
 800af1e:	2b2e      	cmp	r3, #46	; 0x2e
 800af20:	d10c      	bne.n	800af3c <_svfiprintf_r+0x130>
 800af22:	7863      	ldrb	r3, [r4, #1]
 800af24:	2b2a      	cmp	r3, #42	; 0x2a
 800af26:	d134      	bne.n	800af92 <_svfiprintf_r+0x186>
 800af28:	9b03      	ldr	r3, [sp, #12]
 800af2a:	3402      	adds	r4, #2
 800af2c:	1d1a      	adds	r2, r3, #4
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	9203      	str	r2, [sp, #12]
 800af34:	bfb8      	it	lt
 800af36:	f04f 33ff 	movlt.w	r3, #4294967295
 800af3a:	9305      	str	r3, [sp, #20]
 800af3c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b004 <_svfiprintf_r+0x1f8>
 800af40:	2203      	movs	r2, #3
 800af42:	7821      	ldrb	r1, [r4, #0]
 800af44:	4650      	mov	r0, sl
 800af46:	f7fe fbf3 	bl	8009730 <memchr>
 800af4a:	b138      	cbz	r0, 800af5c <_svfiprintf_r+0x150>
 800af4c:	eba0 000a 	sub.w	r0, r0, sl
 800af50:	2240      	movs	r2, #64	; 0x40
 800af52:	9b04      	ldr	r3, [sp, #16]
 800af54:	3401      	adds	r4, #1
 800af56:	4082      	lsls	r2, r0
 800af58:	4313      	orrs	r3, r2
 800af5a:	9304      	str	r3, [sp, #16]
 800af5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af60:	2206      	movs	r2, #6
 800af62:	4825      	ldr	r0, [pc, #148]	; (800aff8 <_svfiprintf_r+0x1ec>)
 800af64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af68:	f7fe fbe2 	bl	8009730 <memchr>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	d038      	beq.n	800afe2 <_svfiprintf_r+0x1d6>
 800af70:	4b22      	ldr	r3, [pc, #136]	; (800affc <_svfiprintf_r+0x1f0>)
 800af72:	bb1b      	cbnz	r3, 800afbc <_svfiprintf_r+0x1b0>
 800af74:	9b03      	ldr	r3, [sp, #12]
 800af76:	3307      	adds	r3, #7
 800af78:	f023 0307 	bic.w	r3, r3, #7
 800af7c:	3308      	adds	r3, #8
 800af7e:	9303      	str	r3, [sp, #12]
 800af80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af82:	4433      	add	r3, r6
 800af84:	9309      	str	r3, [sp, #36]	; 0x24
 800af86:	e768      	b.n	800ae5a <_svfiprintf_r+0x4e>
 800af88:	fb0c 3202 	mla	r2, ip, r2, r3
 800af8c:	460c      	mov	r4, r1
 800af8e:	2001      	movs	r0, #1
 800af90:	e7a6      	b.n	800aee0 <_svfiprintf_r+0xd4>
 800af92:	2300      	movs	r3, #0
 800af94:	3401      	adds	r4, #1
 800af96:	f04f 0c0a 	mov.w	ip, #10
 800af9a:	4619      	mov	r1, r3
 800af9c:	9305      	str	r3, [sp, #20]
 800af9e:	4620      	mov	r0, r4
 800afa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afa4:	3a30      	subs	r2, #48	; 0x30
 800afa6:	2a09      	cmp	r2, #9
 800afa8:	d903      	bls.n	800afb2 <_svfiprintf_r+0x1a6>
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d0c6      	beq.n	800af3c <_svfiprintf_r+0x130>
 800afae:	9105      	str	r1, [sp, #20]
 800afb0:	e7c4      	b.n	800af3c <_svfiprintf_r+0x130>
 800afb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800afb6:	4604      	mov	r4, r0
 800afb8:	2301      	movs	r3, #1
 800afba:	e7f0      	b.n	800af9e <_svfiprintf_r+0x192>
 800afbc:	ab03      	add	r3, sp, #12
 800afbe:	462a      	mov	r2, r5
 800afc0:	a904      	add	r1, sp, #16
 800afc2:	4638      	mov	r0, r7
 800afc4:	9300      	str	r3, [sp, #0]
 800afc6:	4b0e      	ldr	r3, [pc, #56]	; (800b000 <_svfiprintf_r+0x1f4>)
 800afc8:	f7fd fe58 	bl	8008c7c <_printf_float>
 800afcc:	1c42      	adds	r2, r0, #1
 800afce:	4606      	mov	r6, r0
 800afd0:	d1d6      	bne.n	800af80 <_svfiprintf_r+0x174>
 800afd2:	89ab      	ldrh	r3, [r5, #12]
 800afd4:	065b      	lsls	r3, r3, #25
 800afd6:	f53f af2d 	bmi.w	800ae34 <_svfiprintf_r+0x28>
 800afda:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afdc:	b01d      	add	sp, #116	; 0x74
 800afde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe2:	ab03      	add	r3, sp, #12
 800afe4:	462a      	mov	r2, r5
 800afe6:	a904      	add	r1, sp, #16
 800afe8:	4638      	mov	r0, r7
 800afea:	9300      	str	r3, [sp, #0]
 800afec:	4b04      	ldr	r3, [pc, #16]	; (800b000 <_svfiprintf_r+0x1f4>)
 800afee:	f7fe f8ed 	bl	80091cc <_printf_i>
 800aff2:	e7eb      	b.n	800afcc <_svfiprintf_r+0x1c0>
 800aff4:	0800bd64 	.word	0x0800bd64
 800aff8:	0800bd6e 	.word	0x0800bd6e
 800affc:	08008c7d 	.word	0x08008c7d
 800b000:	0800ad59 	.word	0x0800ad59
 800b004:	0800bd6a 	.word	0x0800bd6a

0800b008 <__sflush_r>:
 800b008:	898a      	ldrh	r2, [r1, #12]
 800b00a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b00e:	4605      	mov	r5, r0
 800b010:	0710      	lsls	r0, r2, #28
 800b012:	460c      	mov	r4, r1
 800b014:	d458      	bmi.n	800b0c8 <__sflush_r+0xc0>
 800b016:	684b      	ldr	r3, [r1, #4]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	dc05      	bgt.n	800b028 <__sflush_r+0x20>
 800b01c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b01e:	2b00      	cmp	r3, #0
 800b020:	dc02      	bgt.n	800b028 <__sflush_r+0x20>
 800b022:	2000      	movs	r0, #0
 800b024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b02a:	2e00      	cmp	r6, #0
 800b02c:	d0f9      	beq.n	800b022 <__sflush_r+0x1a>
 800b02e:	2300      	movs	r3, #0
 800b030:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b034:	682f      	ldr	r7, [r5, #0]
 800b036:	6a21      	ldr	r1, [r4, #32]
 800b038:	602b      	str	r3, [r5, #0]
 800b03a:	d032      	beq.n	800b0a2 <__sflush_r+0x9a>
 800b03c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b03e:	89a3      	ldrh	r3, [r4, #12]
 800b040:	075a      	lsls	r2, r3, #29
 800b042:	d505      	bpl.n	800b050 <__sflush_r+0x48>
 800b044:	6863      	ldr	r3, [r4, #4]
 800b046:	1ac0      	subs	r0, r0, r3
 800b048:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b04a:	b10b      	cbz	r3, 800b050 <__sflush_r+0x48>
 800b04c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b04e:	1ac0      	subs	r0, r0, r3
 800b050:	2300      	movs	r3, #0
 800b052:	4602      	mov	r2, r0
 800b054:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b056:	4628      	mov	r0, r5
 800b058:	6a21      	ldr	r1, [r4, #32]
 800b05a:	47b0      	blx	r6
 800b05c:	1c43      	adds	r3, r0, #1
 800b05e:	89a3      	ldrh	r3, [r4, #12]
 800b060:	d106      	bne.n	800b070 <__sflush_r+0x68>
 800b062:	6829      	ldr	r1, [r5, #0]
 800b064:	291d      	cmp	r1, #29
 800b066:	d82b      	bhi.n	800b0c0 <__sflush_r+0xb8>
 800b068:	4a28      	ldr	r2, [pc, #160]	; (800b10c <__sflush_r+0x104>)
 800b06a:	410a      	asrs	r2, r1
 800b06c:	07d6      	lsls	r6, r2, #31
 800b06e:	d427      	bmi.n	800b0c0 <__sflush_r+0xb8>
 800b070:	2200      	movs	r2, #0
 800b072:	04d9      	lsls	r1, r3, #19
 800b074:	6062      	str	r2, [r4, #4]
 800b076:	6922      	ldr	r2, [r4, #16]
 800b078:	6022      	str	r2, [r4, #0]
 800b07a:	d504      	bpl.n	800b086 <__sflush_r+0x7e>
 800b07c:	1c42      	adds	r2, r0, #1
 800b07e:	d101      	bne.n	800b084 <__sflush_r+0x7c>
 800b080:	682b      	ldr	r3, [r5, #0]
 800b082:	b903      	cbnz	r3, 800b086 <__sflush_r+0x7e>
 800b084:	6560      	str	r0, [r4, #84]	; 0x54
 800b086:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b088:	602f      	str	r7, [r5, #0]
 800b08a:	2900      	cmp	r1, #0
 800b08c:	d0c9      	beq.n	800b022 <__sflush_r+0x1a>
 800b08e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b092:	4299      	cmp	r1, r3
 800b094:	d002      	beq.n	800b09c <__sflush_r+0x94>
 800b096:	4628      	mov	r0, r5
 800b098:	f7ff f9da 	bl	800a450 <_free_r>
 800b09c:	2000      	movs	r0, #0
 800b09e:	6360      	str	r0, [r4, #52]	; 0x34
 800b0a0:	e7c0      	b.n	800b024 <__sflush_r+0x1c>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	4628      	mov	r0, r5
 800b0a6:	47b0      	blx	r6
 800b0a8:	1c41      	adds	r1, r0, #1
 800b0aa:	d1c8      	bne.n	800b03e <__sflush_r+0x36>
 800b0ac:	682b      	ldr	r3, [r5, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d0c5      	beq.n	800b03e <__sflush_r+0x36>
 800b0b2:	2b1d      	cmp	r3, #29
 800b0b4:	d001      	beq.n	800b0ba <__sflush_r+0xb2>
 800b0b6:	2b16      	cmp	r3, #22
 800b0b8:	d101      	bne.n	800b0be <__sflush_r+0xb6>
 800b0ba:	602f      	str	r7, [r5, #0]
 800b0bc:	e7b1      	b.n	800b022 <__sflush_r+0x1a>
 800b0be:	89a3      	ldrh	r3, [r4, #12]
 800b0c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0c4:	81a3      	strh	r3, [r4, #12]
 800b0c6:	e7ad      	b.n	800b024 <__sflush_r+0x1c>
 800b0c8:	690f      	ldr	r7, [r1, #16]
 800b0ca:	2f00      	cmp	r7, #0
 800b0cc:	d0a9      	beq.n	800b022 <__sflush_r+0x1a>
 800b0ce:	0793      	lsls	r3, r2, #30
 800b0d0:	680e      	ldr	r6, [r1, #0]
 800b0d2:	600f      	str	r7, [r1, #0]
 800b0d4:	bf0c      	ite	eq
 800b0d6:	694b      	ldreq	r3, [r1, #20]
 800b0d8:	2300      	movne	r3, #0
 800b0da:	eba6 0807 	sub.w	r8, r6, r7
 800b0de:	608b      	str	r3, [r1, #8]
 800b0e0:	f1b8 0f00 	cmp.w	r8, #0
 800b0e4:	dd9d      	ble.n	800b022 <__sflush_r+0x1a>
 800b0e6:	4643      	mov	r3, r8
 800b0e8:	463a      	mov	r2, r7
 800b0ea:	6a21      	ldr	r1, [r4, #32]
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0f0:	47b0      	blx	r6
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	dc06      	bgt.n	800b104 <__sflush_r+0xfc>
 800b0f6:	89a3      	ldrh	r3, [r4, #12]
 800b0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b100:	81a3      	strh	r3, [r4, #12]
 800b102:	e78f      	b.n	800b024 <__sflush_r+0x1c>
 800b104:	4407      	add	r7, r0
 800b106:	eba8 0800 	sub.w	r8, r8, r0
 800b10a:	e7e9      	b.n	800b0e0 <__sflush_r+0xd8>
 800b10c:	dfbffffe 	.word	0xdfbffffe

0800b110 <_fflush_r>:
 800b110:	b538      	push	{r3, r4, r5, lr}
 800b112:	690b      	ldr	r3, [r1, #16]
 800b114:	4605      	mov	r5, r0
 800b116:	460c      	mov	r4, r1
 800b118:	b913      	cbnz	r3, 800b120 <_fflush_r+0x10>
 800b11a:	2500      	movs	r5, #0
 800b11c:	4628      	mov	r0, r5
 800b11e:	bd38      	pop	{r3, r4, r5, pc}
 800b120:	b118      	cbz	r0, 800b12a <_fflush_r+0x1a>
 800b122:	6a03      	ldr	r3, [r0, #32]
 800b124:	b90b      	cbnz	r3, 800b12a <_fflush_r+0x1a>
 800b126:	f7fe f9eb 	bl	8009500 <__sinit>
 800b12a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d0f3      	beq.n	800b11a <_fflush_r+0xa>
 800b132:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b134:	07d0      	lsls	r0, r2, #31
 800b136:	d404      	bmi.n	800b142 <_fflush_r+0x32>
 800b138:	0599      	lsls	r1, r3, #22
 800b13a:	d402      	bmi.n	800b142 <_fflush_r+0x32>
 800b13c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b13e:	f7fe faf5 	bl	800972c <__retarget_lock_acquire_recursive>
 800b142:	4628      	mov	r0, r5
 800b144:	4621      	mov	r1, r4
 800b146:	f7ff ff5f 	bl	800b008 <__sflush_r>
 800b14a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b14c:	4605      	mov	r5, r0
 800b14e:	07da      	lsls	r2, r3, #31
 800b150:	d4e4      	bmi.n	800b11c <_fflush_r+0xc>
 800b152:	89a3      	ldrh	r3, [r4, #12]
 800b154:	059b      	lsls	r3, r3, #22
 800b156:	d4e1      	bmi.n	800b11c <_fflush_r+0xc>
 800b158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b15a:	f7fe fae8 	bl	800972e <__retarget_lock_release_recursive>
 800b15e:	e7dd      	b.n	800b11c <_fflush_r+0xc>

0800b160 <memmove>:
 800b160:	4288      	cmp	r0, r1
 800b162:	b510      	push	{r4, lr}
 800b164:	eb01 0402 	add.w	r4, r1, r2
 800b168:	d902      	bls.n	800b170 <memmove+0x10>
 800b16a:	4284      	cmp	r4, r0
 800b16c:	4623      	mov	r3, r4
 800b16e:	d807      	bhi.n	800b180 <memmove+0x20>
 800b170:	1e43      	subs	r3, r0, #1
 800b172:	42a1      	cmp	r1, r4
 800b174:	d008      	beq.n	800b188 <memmove+0x28>
 800b176:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b17a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b17e:	e7f8      	b.n	800b172 <memmove+0x12>
 800b180:	4402      	add	r2, r0
 800b182:	4601      	mov	r1, r0
 800b184:	428a      	cmp	r2, r1
 800b186:	d100      	bne.n	800b18a <memmove+0x2a>
 800b188:	bd10      	pop	{r4, pc}
 800b18a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b18e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b192:	e7f7      	b.n	800b184 <memmove+0x24>

0800b194 <_sbrk_r>:
 800b194:	b538      	push	{r3, r4, r5, lr}
 800b196:	2300      	movs	r3, #0
 800b198:	4d05      	ldr	r5, [pc, #20]	; (800b1b0 <_sbrk_r+0x1c>)
 800b19a:	4604      	mov	r4, r0
 800b19c:	4608      	mov	r0, r1
 800b19e:	602b      	str	r3, [r5, #0]
 800b1a0:	f7f6 fe42 	bl	8001e28 <_sbrk>
 800b1a4:	1c43      	adds	r3, r0, #1
 800b1a6:	d102      	bne.n	800b1ae <_sbrk_r+0x1a>
 800b1a8:	682b      	ldr	r3, [r5, #0]
 800b1aa:	b103      	cbz	r3, 800b1ae <_sbrk_r+0x1a>
 800b1ac:	6023      	str	r3, [r4, #0]
 800b1ae:	bd38      	pop	{r3, r4, r5, pc}
 800b1b0:	20000abc 	.word	0x20000abc

0800b1b4 <memcpy>:
 800b1b4:	440a      	add	r2, r1
 800b1b6:	1e43      	subs	r3, r0, #1
 800b1b8:	4291      	cmp	r1, r2
 800b1ba:	d100      	bne.n	800b1be <memcpy+0xa>
 800b1bc:	4770      	bx	lr
 800b1be:	b510      	push	{r4, lr}
 800b1c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1c4:	4291      	cmp	r1, r2
 800b1c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1ca:	d1f9      	bne.n	800b1c0 <memcpy+0xc>
 800b1cc:	bd10      	pop	{r4, pc}
	...

0800b1d0 <__assert_func>:
 800b1d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1d2:	4614      	mov	r4, r2
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	4b09      	ldr	r3, [pc, #36]	; (800b1fc <__assert_func+0x2c>)
 800b1d8:	4605      	mov	r5, r0
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	68d8      	ldr	r0, [r3, #12]
 800b1de:	b14c      	cbz	r4, 800b1f4 <__assert_func+0x24>
 800b1e0:	4b07      	ldr	r3, [pc, #28]	; (800b200 <__assert_func+0x30>)
 800b1e2:	9100      	str	r1, [sp, #0]
 800b1e4:	4907      	ldr	r1, [pc, #28]	; (800b204 <__assert_func+0x34>)
 800b1e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b1ea:	462b      	mov	r3, r5
 800b1ec:	f000 f872 	bl	800b2d4 <fiprintf>
 800b1f0:	f000 f882 	bl	800b2f8 <abort>
 800b1f4:	4b04      	ldr	r3, [pc, #16]	; (800b208 <__assert_func+0x38>)
 800b1f6:	461c      	mov	r4, r3
 800b1f8:	e7f3      	b.n	800b1e2 <__assert_func+0x12>
 800b1fa:	bf00      	nop
 800b1fc:	2000006c 	.word	0x2000006c
 800b200:	0800bd7f 	.word	0x0800bd7f
 800b204:	0800bd8c 	.word	0x0800bd8c
 800b208:	0800bdba 	.word	0x0800bdba

0800b20c <_calloc_r>:
 800b20c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b20e:	fba1 2402 	umull	r2, r4, r1, r2
 800b212:	b94c      	cbnz	r4, 800b228 <_calloc_r+0x1c>
 800b214:	4611      	mov	r1, r2
 800b216:	9201      	str	r2, [sp, #4]
 800b218:	f7ff f98e 	bl	800a538 <_malloc_r>
 800b21c:	9a01      	ldr	r2, [sp, #4]
 800b21e:	4605      	mov	r5, r0
 800b220:	b930      	cbnz	r0, 800b230 <_calloc_r+0x24>
 800b222:	4628      	mov	r0, r5
 800b224:	b003      	add	sp, #12
 800b226:	bd30      	pop	{r4, r5, pc}
 800b228:	220c      	movs	r2, #12
 800b22a:	2500      	movs	r5, #0
 800b22c:	6002      	str	r2, [r0, #0]
 800b22e:	e7f8      	b.n	800b222 <_calloc_r+0x16>
 800b230:	4621      	mov	r1, r4
 800b232:	f7fe f9fe 	bl	8009632 <memset>
 800b236:	e7f4      	b.n	800b222 <_calloc_r+0x16>

0800b238 <__ascii_mbtowc>:
 800b238:	b082      	sub	sp, #8
 800b23a:	b901      	cbnz	r1, 800b23e <__ascii_mbtowc+0x6>
 800b23c:	a901      	add	r1, sp, #4
 800b23e:	b142      	cbz	r2, 800b252 <__ascii_mbtowc+0x1a>
 800b240:	b14b      	cbz	r3, 800b256 <__ascii_mbtowc+0x1e>
 800b242:	7813      	ldrb	r3, [r2, #0]
 800b244:	600b      	str	r3, [r1, #0]
 800b246:	7812      	ldrb	r2, [r2, #0]
 800b248:	1e10      	subs	r0, r2, #0
 800b24a:	bf18      	it	ne
 800b24c:	2001      	movne	r0, #1
 800b24e:	b002      	add	sp, #8
 800b250:	4770      	bx	lr
 800b252:	4610      	mov	r0, r2
 800b254:	e7fb      	b.n	800b24e <__ascii_mbtowc+0x16>
 800b256:	f06f 0001 	mvn.w	r0, #1
 800b25a:	e7f8      	b.n	800b24e <__ascii_mbtowc+0x16>

0800b25c <_realloc_r>:
 800b25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b260:	4680      	mov	r8, r0
 800b262:	4614      	mov	r4, r2
 800b264:	460e      	mov	r6, r1
 800b266:	b921      	cbnz	r1, 800b272 <_realloc_r+0x16>
 800b268:	4611      	mov	r1, r2
 800b26a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b26e:	f7ff b963 	b.w	800a538 <_malloc_r>
 800b272:	b92a      	cbnz	r2, 800b280 <_realloc_r+0x24>
 800b274:	4625      	mov	r5, r4
 800b276:	f7ff f8eb 	bl	800a450 <_free_r>
 800b27a:	4628      	mov	r0, r5
 800b27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b280:	f000 f841 	bl	800b306 <_malloc_usable_size_r>
 800b284:	4284      	cmp	r4, r0
 800b286:	4607      	mov	r7, r0
 800b288:	d802      	bhi.n	800b290 <_realloc_r+0x34>
 800b28a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b28e:	d812      	bhi.n	800b2b6 <_realloc_r+0x5a>
 800b290:	4621      	mov	r1, r4
 800b292:	4640      	mov	r0, r8
 800b294:	f7ff f950 	bl	800a538 <_malloc_r>
 800b298:	4605      	mov	r5, r0
 800b29a:	2800      	cmp	r0, #0
 800b29c:	d0ed      	beq.n	800b27a <_realloc_r+0x1e>
 800b29e:	42bc      	cmp	r4, r7
 800b2a0:	4622      	mov	r2, r4
 800b2a2:	4631      	mov	r1, r6
 800b2a4:	bf28      	it	cs
 800b2a6:	463a      	movcs	r2, r7
 800b2a8:	f7ff ff84 	bl	800b1b4 <memcpy>
 800b2ac:	4631      	mov	r1, r6
 800b2ae:	4640      	mov	r0, r8
 800b2b0:	f7ff f8ce 	bl	800a450 <_free_r>
 800b2b4:	e7e1      	b.n	800b27a <_realloc_r+0x1e>
 800b2b6:	4635      	mov	r5, r6
 800b2b8:	e7df      	b.n	800b27a <_realloc_r+0x1e>

0800b2ba <__ascii_wctomb>:
 800b2ba:	b149      	cbz	r1, 800b2d0 <__ascii_wctomb+0x16>
 800b2bc:	2aff      	cmp	r2, #255	; 0xff
 800b2be:	bf8d      	iteet	hi
 800b2c0:	238a      	movhi	r3, #138	; 0x8a
 800b2c2:	2001      	movls	r0, #1
 800b2c4:	700a      	strbls	r2, [r1, #0]
 800b2c6:	6003      	strhi	r3, [r0, #0]
 800b2c8:	bf88      	it	hi
 800b2ca:	f04f 30ff 	movhi.w	r0, #4294967295
 800b2ce:	4770      	bx	lr
 800b2d0:	4608      	mov	r0, r1
 800b2d2:	4770      	bx	lr

0800b2d4 <fiprintf>:
 800b2d4:	b40e      	push	{r1, r2, r3}
 800b2d6:	b503      	push	{r0, r1, lr}
 800b2d8:	ab03      	add	r3, sp, #12
 800b2da:	4601      	mov	r1, r0
 800b2dc:	4805      	ldr	r0, [pc, #20]	; (800b2f4 <fiprintf+0x20>)
 800b2de:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2e2:	6800      	ldr	r0, [r0, #0]
 800b2e4:	9301      	str	r3, [sp, #4]
 800b2e6:	f000 f83f 	bl	800b368 <_vfiprintf_r>
 800b2ea:	b002      	add	sp, #8
 800b2ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2f0:	b003      	add	sp, #12
 800b2f2:	4770      	bx	lr
 800b2f4:	2000006c 	.word	0x2000006c

0800b2f8 <abort>:
 800b2f8:	2006      	movs	r0, #6
 800b2fa:	b508      	push	{r3, lr}
 800b2fc:	f000 fa0c 	bl	800b718 <raise>
 800b300:	2001      	movs	r0, #1
 800b302:	f7f6 fd19 	bl	8001d38 <_exit>

0800b306 <_malloc_usable_size_r>:
 800b306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b30a:	1f18      	subs	r0, r3, #4
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	bfbc      	itt	lt
 800b310:	580b      	ldrlt	r3, [r1, r0]
 800b312:	18c0      	addlt	r0, r0, r3
 800b314:	4770      	bx	lr

0800b316 <__sfputc_r>:
 800b316:	6893      	ldr	r3, [r2, #8]
 800b318:	3b01      	subs	r3, #1
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	6093      	str	r3, [r2, #8]
 800b31e:	b410      	push	{r4}
 800b320:	da08      	bge.n	800b334 <__sfputc_r+0x1e>
 800b322:	6994      	ldr	r4, [r2, #24]
 800b324:	42a3      	cmp	r3, r4
 800b326:	db01      	blt.n	800b32c <__sfputc_r+0x16>
 800b328:	290a      	cmp	r1, #10
 800b32a:	d103      	bne.n	800b334 <__sfputc_r+0x1e>
 800b32c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b330:	f000 b934 	b.w	800b59c <__swbuf_r>
 800b334:	6813      	ldr	r3, [r2, #0]
 800b336:	1c58      	adds	r0, r3, #1
 800b338:	6010      	str	r0, [r2, #0]
 800b33a:	4608      	mov	r0, r1
 800b33c:	7019      	strb	r1, [r3, #0]
 800b33e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b342:	4770      	bx	lr

0800b344 <__sfputs_r>:
 800b344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b346:	4606      	mov	r6, r0
 800b348:	460f      	mov	r7, r1
 800b34a:	4614      	mov	r4, r2
 800b34c:	18d5      	adds	r5, r2, r3
 800b34e:	42ac      	cmp	r4, r5
 800b350:	d101      	bne.n	800b356 <__sfputs_r+0x12>
 800b352:	2000      	movs	r0, #0
 800b354:	e007      	b.n	800b366 <__sfputs_r+0x22>
 800b356:	463a      	mov	r2, r7
 800b358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b35c:	4630      	mov	r0, r6
 800b35e:	f7ff ffda 	bl	800b316 <__sfputc_r>
 800b362:	1c43      	adds	r3, r0, #1
 800b364:	d1f3      	bne.n	800b34e <__sfputs_r+0xa>
 800b366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b368 <_vfiprintf_r>:
 800b368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b36c:	460d      	mov	r5, r1
 800b36e:	b09d      	sub	sp, #116	; 0x74
 800b370:	4614      	mov	r4, r2
 800b372:	4698      	mov	r8, r3
 800b374:	4606      	mov	r6, r0
 800b376:	b118      	cbz	r0, 800b380 <_vfiprintf_r+0x18>
 800b378:	6a03      	ldr	r3, [r0, #32]
 800b37a:	b90b      	cbnz	r3, 800b380 <_vfiprintf_r+0x18>
 800b37c:	f7fe f8c0 	bl	8009500 <__sinit>
 800b380:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b382:	07d9      	lsls	r1, r3, #31
 800b384:	d405      	bmi.n	800b392 <_vfiprintf_r+0x2a>
 800b386:	89ab      	ldrh	r3, [r5, #12]
 800b388:	059a      	lsls	r2, r3, #22
 800b38a:	d402      	bmi.n	800b392 <_vfiprintf_r+0x2a>
 800b38c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b38e:	f7fe f9cd 	bl	800972c <__retarget_lock_acquire_recursive>
 800b392:	89ab      	ldrh	r3, [r5, #12]
 800b394:	071b      	lsls	r3, r3, #28
 800b396:	d501      	bpl.n	800b39c <_vfiprintf_r+0x34>
 800b398:	692b      	ldr	r3, [r5, #16]
 800b39a:	b99b      	cbnz	r3, 800b3c4 <_vfiprintf_r+0x5c>
 800b39c:	4629      	mov	r1, r5
 800b39e:	4630      	mov	r0, r6
 800b3a0:	f000 f93a 	bl	800b618 <__swsetup_r>
 800b3a4:	b170      	cbz	r0, 800b3c4 <_vfiprintf_r+0x5c>
 800b3a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3a8:	07dc      	lsls	r4, r3, #31
 800b3aa:	d504      	bpl.n	800b3b6 <_vfiprintf_r+0x4e>
 800b3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b0:	b01d      	add	sp, #116	; 0x74
 800b3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b6:	89ab      	ldrh	r3, [r5, #12]
 800b3b8:	0598      	lsls	r0, r3, #22
 800b3ba:	d4f7      	bmi.n	800b3ac <_vfiprintf_r+0x44>
 800b3bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3be:	f7fe f9b6 	bl	800972e <__retarget_lock_release_recursive>
 800b3c2:	e7f3      	b.n	800b3ac <_vfiprintf_r+0x44>
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3ca:	f04f 0901 	mov.w	r9, #1
 800b3ce:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800b588 <_vfiprintf_r+0x220>
 800b3d2:	9309      	str	r3, [sp, #36]	; 0x24
 800b3d4:	2320      	movs	r3, #32
 800b3d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3da:	2330      	movs	r3, #48	; 0x30
 800b3dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3e0:	4623      	mov	r3, r4
 800b3e2:	469a      	mov	sl, r3
 800b3e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3e8:	b10a      	cbz	r2, 800b3ee <_vfiprintf_r+0x86>
 800b3ea:	2a25      	cmp	r2, #37	; 0x25
 800b3ec:	d1f9      	bne.n	800b3e2 <_vfiprintf_r+0x7a>
 800b3ee:	ebba 0b04 	subs.w	fp, sl, r4
 800b3f2:	d00b      	beq.n	800b40c <_vfiprintf_r+0xa4>
 800b3f4:	465b      	mov	r3, fp
 800b3f6:	4622      	mov	r2, r4
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	4630      	mov	r0, r6
 800b3fc:	f7ff ffa2 	bl	800b344 <__sfputs_r>
 800b400:	3001      	adds	r0, #1
 800b402:	f000 80a9 	beq.w	800b558 <_vfiprintf_r+0x1f0>
 800b406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b408:	445a      	add	r2, fp
 800b40a:	9209      	str	r2, [sp, #36]	; 0x24
 800b40c:	f89a 3000 	ldrb.w	r3, [sl]
 800b410:	2b00      	cmp	r3, #0
 800b412:	f000 80a1 	beq.w	800b558 <_vfiprintf_r+0x1f0>
 800b416:	2300      	movs	r3, #0
 800b418:	f04f 32ff 	mov.w	r2, #4294967295
 800b41c:	f10a 0a01 	add.w	sl, sl, #1
 800b420:	9304      	str	r3, [sp, #16]
 800b422:	9307      	str	r3, [sp, #28]
 800b424:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b428:	931a      	str	r3, [sp, #104]	; 0x68
 800b42a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b42e:	4654      	mov	r4, sl
 800b430:	2205      	movs	r2, #5
 800b432:	4855      	ldr	r0, [pc, #340]	; (800b588 <_vfiprintf_r+0x220>)
 800b434:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b438:	f7fe f97a 	bl	8009730 <memchr>
 800b43c:	9a04      	ldr	r2, [sp, #16]
 800b43e:	b9d8      	cbnz	r0, 800b478 <_vfiprintf_r+0x110>
 800b440:	06d1      	lsls	r1, r2, #27
 800b442:	bf44      	itt	mi
 800b444:	2320      	movmi	r3, #32
 800b446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b44a:	0713      	lsls	r3, r2, #28
 800b44c:	bf44      	itt	mi
 800b44e:	232b      	movmi	r3, #43	; 0x2b
 800b450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b454:	f89a 3000 	ldrb.w	r3, [sl]
 800b458:	2b2a      	cmp	r3, #42	; 0x2a
 800b45a:	d015      	beq.n	800b488 <_vfiprintf_r+0x120>
 800b45c:	9a07      	ldr	r2, [sp, #28]
 800b45e:	4654      	mov	r4, sl
 800b460:	2000      	movs	r0, #0
 800b462:	f04f 0c0a 	mov.w	ip, #10
 800b466:	4621      	mov	r1, r4
 800b468:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b46c:	3b30      	subs	r3, #48	; 0x30
 800b46e:	2b09      	cmp	r3, #9
 800b470:	d94d      	bls.n	800b50e <_vfiprintf_r+0x1a6>
 800b472:	b1b0      	cbz	r0, 800b4a2 <_vfiprintf_r+0x13a>
 800b474:	9207      	str	r2, [sp, #28]
 800b476:	e014      	b.n	800b4a2 <_vfiprintf_r+0x13a>
 800b478:	eba0 0308 	sub.w	r3, r0, r8
 800b47c:	46a2      	mov	sl, r4
 800b47e:	fa09 f303 	lsl.w	r3, r9, r3
 800b482:	4313      	orrs	r3, r2
 800b484:	9304      	str	r3, [sp, #16]
 800b486:	e7d2      	b.n	800b42e <_vfiprintf_r+0xc6>
 800b488:	9b03      	ldr	r3, [sp, #12]
 800b48a:	1d19      	adds	r1, r3, #4
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	9103      	str	r1, [sp, #12]
 800b492:	bfbb      	ittet	lt
 800b494:	425b      	neglt	r3, r3
 800b496:	f042 0202 	orrlt.w	r2, r2, #2
 800b49a:	9307      	strge	r3, [sp, #28]
 800b49c:	9307      	strlt	r3, [sp, #28]
 800b49e:	bfb8      	it	lt
 800b4a0:	9204      	strlt	r2, [sp, #16]
 800b4a2:	7823      	ldrb	r3, [r4, #0]
 800b4a4:	2b2e      	cmp	r3, #46	; 0x2e
 800b4a6:	d10c      	bne.n	800b4c2 <_vfiprintf_r+0x15a>
 800b4a8:	7863      	ldrb	r3, [r4, #1]
 800b4aa:	2b2a      	cmp	r3, #42	; 0x2a
 800b4ac:	d134      	bne.n	800b518 <_vfiprintf_r+0x1b0>
 800b4ae:	9b03      	ldr	r3, [sp, #12]
 800b4b0:	3402      	adds	r4, #2
 800b4b2:	1d1a      	adds	r2, r3, #4
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	9203      	str	r2, [sp, #12]
 800b4ba:	bfb8      	it	lt
 800b4bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4c0:	9305      	str	r3, [sp, #20]
 800b4c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b598 <_vfiprintf_r+0x230>
 800b4c6:	2203      	movs	r2, #3
 800b4c8:	7821      	ldrb	r1, [r4, #0]
 800b4ca:	4650      	mov	r0, sl
 800b4cc:	f7fe f930 	bl	8009730 <memchr>
 800b4d0:	b138      	cbz	r0, 800b4e2 <_vfiprintf_r+0x17a>
 800b4d2:	eba0 000a 	sub.w	r0, r0, sl
 800b4d6:	2240      	movs	r2, #64	; 0x40
 800b4d8:	9b04      	ldr	r3, [sp, #16]
 800b4da:	3401      	adds	r4, #1
 800b4dc:	4082      	lsls	r2, r0
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	9304      	str	r3, [sp, #16]
 800b4e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4e6:	2206      	movs	r2, #6
 800b4e8:	4828      	ldr	r0, [pc, #160]	; (800b58c <_vfiprintf_r+0x224>)
 800b4ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4ee:	f7fe f91f 	bl	8009730 <memchr>
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	d03f      	beq.n	800b576 <_vfiprintf_r+0x20e>
 800b4f6:	4b26      	ldr	r3, [pc, #152]	; (800b590 <_vfiprintf_r+0x228>)
 800b4f8:	bb1b      	cbnz	r3, 800b542 <_vfiprintf_r+0x1da>
 800b4fa:	9b03      	ldr	r3, [sp, #12]
 800b4fc:	3307      	adds	r3, #7
 800b4fe:	f023 0307 	bic.w	r3, r3, #7
 800b502:	3308      	adds	r3, #8
 800b504:	9303      	str	r3, [sp, #12]
 800b506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b508:	443b      	add	r3, r7
 800b50a:	9309      	str	r3, [sp, #36]	; 0x24
 800b50c:	e768      	b.n	800b3e0 <_vfiprintf_r+0x78>
 800b50e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b512:	460c      	mov	r4, r1
 800b514:	2001      	movs	r0, #1
 800b516:	e7a6      	b.n	800b466 <_vfiprintf_r+0xfe>
 800b518:	2300      	movs	r3, #0
 800b51a:	3401      	adds	r4, #1
 800b51c:	f04f 0c0a 	mov.w	ip, #10
 800b520:	4619      	mov	r1, r3
 800b522:	9305      	str	r3, [sp, #20]
 800b524:	4620      	mov	r0, r4
 800b526:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b52a:	3a30      	subs	r2, #48	; 0x30
 800b52c:	2a09      	cmp	r2, #9
 800b52e:	d903      	bls.n	800b538 <_vfiprintf_r+0x1d0>
 800b530:	2b00      	cmp	r3, #0
 800b532:	d0c6      	beq.n	800b4c2 <_vfiprintf_r+0x15a>
 800b534:	9105      	str	r1, [sp, #20]
 800b536:	e7c4      	b.n	800b4c2 <_vfiprintf_r+0x15a>
 800b538:	fb0c 2101 	mla	r1, ip, r1, r2
 800b53c:	4604      	mov	r4, r0
 800b53e:	2301      	movs	r3, #1
 800b540:	e7f0      	b.n	800b524 <_vfiprintf_r+0x1bc>
 800b542:	ab03      	add	r3, sp, #12
 800b544:	462a      	mov	r2, r5
 800b546:	a904      	add	r1, sp, #16
 800b548:	4630      	mov	r0, r6
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	4b11      	ldr	r3, [pc, #68]	; (800b594 <_vfiprintf_r+0x22c>)
 800b54e:	f7fd fb95 	bl	8008c7c <_printf_float>
 800b552:	4607      	mov	r7, r0
 800b554:	1c78      	adds	r0, r7, #1
 800b556:	d1d6      	bne.n	800b506 <_vfiprintf_r+0x19e>
 800b558:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b55a:	07d9      	lsls	r1, r3, #31
 800b55c:	d405      	bmi.n	800b56a <_vfiprintf_r+0x202>
 800b55e:	89ab      	ldrh	r3, [r5, #12]
 800b560:	059a      	lsls	r2, r3, #22
 800b562:	d402      	bmi.n	800b56a <_vfiprintf_r+0x202>
 800b564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b566:	f7fe f8e2 	bl	800972e <__retarget_lock_release_recursive>
 800b56a:	89ab      	ldrh	r3, [r5, #12]
 800b56c:	065b      	lsls	r3, r3, #25
 800b56e:	f53f af1d 	bmi.w	800b3ac <_vfiprintf_r+0x44>
 800b572:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b574:	e71c      	b.n	800b3b0 <_vfiprintf_r+0x48>
 800b576:	ab03      	add	r3, sp, #12
 800b578:	462a      	mov	r2, r5
 800b57a:	a904      	add	r1, sp, #16
 800b57c:	4630      	mov	r0, r6
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	4b04      	ldr	r3, [pc, #16]	; (800b594 <_vfiprintf_r+0x22c>)
 800b582:	f7fd fe23 	bl	80091cc <_printf_i>
 800b586:	e7e4      	b.n	800b552 <_vfiprintf_r+0x1ea>
 800b588:	0800bd64 	.word	0x0800bd64
 800b58c:	0800bd6e 	.word	0x0800bd6e
 800b590:	08008c7d 	.word	0x08008c7d
 800b594:	0800b345 	.word	0x0800b345
 800b598:	0800bd6a 	.word	0x0800bd6a

0800b59c <__swbuf_r>:
 800b59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b59e:	460e      	mov	r6, r1
 800b5a0:	4614      	mov	r4, r2
 800b5a2:	4605      	mov	r5, r0
 800b5a4:	b118      	cbz	r0, 800b5ae <__swbuf_r+0x12>
 800b5a6:	6a03      	ldr	r3, [r0, #32]
 800b5a8:	b90b      	cbnz	r3, 800b5ae <__swbuf_r+0x12>
 800b5aa:	f7fd ffa9 	bl	8009500 <__sinit>
 800b5ae:	69a3      	ldr	r3, [r4, #24]
 800b5b0:	60a3      	str	r3, [r4, #8]
 800b5b2:	89a3      	ldrh	r3, [r4, #12]
 800b5b4:	071a      	lsls	r2, r3, #28
 800b5b6:	d525      	bpl.n	800b604 <__swbuf_r+0x68>
 800b5b8:	6923      	ldr	r3, [r4, #16]
 800b5ba:	b31b      	cbz	r3, 800b604 <__swbuf_r+0x68>
 800b5bc:	6823      	ldr	r3, [r4, #0]
 800b5be:	b2f6      	uxtb	r6, r6
 800b5c0:	6922      	ldr	r2, [r4, #16]
 800b5c2:	4637      	mov	r7, r6
 800b5c4:	1a98      	subs	r0, r3, r2
 800b5c6:	6963      	ldr	r3, [r4, #20]
 800b5c8:	4283      	cmp	r3, r0
 800b5ca:	dc04      	bgt.n	800b5d6 <__swbuf_r+0x3a>
 800b5cc:	4621      	mov	r1, r4
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	f7ff fd9e 	bl	800b110 <_fflush_r>
 800b5d4:	b9e0      	cbnz	r0, 800b610 <__swbuf_r+0x74>
 800b5d6:	68a3      	ldr	r3, [r4, #8]
 800b5d8:	3b01      	subs	r3, #1
 800b5da:	60a3      	str	r3, [r4, #8]
 800b5dc:	6823      	ldr	r3, [r4, #0]
 800b5de:	1c5a      	adds	r2, r3, #1
 800b5e0:	6022      	str	r2, [r4, #0]
 800b5e2:	701e      	strb	r6, [r3, #0]
 800b5e4:	1c43      	adds	r3, r0, #1
 800b5e6:	6962      	ldr	r2, [r4, #20]
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d004      	beq.n	800b5f6 <__swbuf_r+0x5a>
 800b5ec:	89a3      	ldrh	r3, [r4, #12]
 800b5ee:	07db      	lsls	r3, r3, #31
 800b5f0:	d506      	bpl.n	800b600 <__swbuf_r+0x64>
 800b5f2:	2e0a      	cmp	r6, #10
 800b5f4:	d104      	bne.n	800b600 <__swbuf_r+0x64>
 800b5f6:	4621      	mov	r1, r4
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	f7ff fd89 	bl	800b110 <_fflush_r>
 800b5fe:	b938      	cbnz	r0, 800b610 <__swbuf_r+0x74>
 800b600:	4638      	mov	r0, r7
 800b602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b604:	4621      	mov	r1, r4
 800b606:	4628      	mov	r0, r5
 800b608:	f000 f806 	bl	800b618 <__swsetup_r>
 800b60c:	2800      	cmp	r0, #0
 800b60e:	d0d5      	beq.n	800b5bc <__swbuf_r+0x20>
 800b610:	f04f 37ff 	mov.w	r7, #4294967295
 800b614:	e7f4      	b.n	800b600 <__swbuf_r+0x64>
	...

0800b618 <__swsetup_r>:
 800b618:	b538      	push	{r3, r4, r5, lr}
 800b61a:	4b2a      	ldr	r3, [pc, #168]	; (800b6c4 <__swsetup_r+0xac>)
 800b61c:	4605      	mov	r5, r0
 800b61e:	460c      	mov	r4, r1
 800b620:	6818      	ldr	r0, [r3, #0]
 800b622:	b118      	cbz	r0, 800b62c <__swsetup_r+0x14>
 800b624:	6a03      	ldr	r3, [r0, #32]
 800b626:	b90b      	cbnz	r3, 800b62c <__swsetup_r+0x14>
 800b628:	f7fd ff6a 	bl	8009500 <__sinit>
 800b62c:	89a3      	ldrh	r3, [r4, #12]
 800b62e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b632:	0718      	lsls	r0, r3, #28
 800b634:	d422      	bmi.n	800b67c <__swsetup_r+0x64>
 800b636:	06d9      	lsls	r1, r3, #27
 800b638:	d407      	bmi.n	800b64a <__swsetup_r+0x32>
 800b63a:	2309      	movs	r3, #9
 800b63c:	602b      	str	r3, [r5, #0]
 800b63e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b642:	f04f 30ff 	mov.w	r0, #4294967295
 800b646:	81a3      	strh	r3, [r4, #12]
 800b648:	e034      	b.n	800b6b4 <__swsetup_r+0x9c>
 800b64a:	0758      	lsls	r0, r3, #29
 800b64c:	d512      	bpl.n	800b674 <__swsetup_r+0x5c>
 800b64e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b650:	b141      	cbz	r1, 800b664 <__swsetup_r+0x4c>
 800b652:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b656:	4299      	cmp	r1, r3
 800b658:	d002      	beq.n	800b660 <__swsetup_r+0x48>
 800b65a:	4628      	mov	r0, r5
 800b65c:	f7fe fef8 	bl	800a450 <_free_r>
 800b660:	2300      	movs	r3, #0
 800b662:	6363      	str	r3, [r4, #52]	; 0x34
 800b664:	89a3      	ldrh	r3, [r4, #12]
 800b666:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b66a:	81a3      	strh	r3, [r4, #12]
 800b66c:	2300      	movs	r3, #0
 800b66e:	6063      	str	r3, [r4, #4]
 800b670:	6923      	ldr	r3, [r4, #16]
 800b672:	6023      	str	r3, [r4, #0]
 800b674:	89a3      	ldrh	r3, [r4, #12]
 800b676:	f043 0308 	orr.w	r3, r3, #8
 800b67a:	81a3      	strh	r3, [r4, #12]
 800b67c:	6923      	ldr	r3, [r4, #16]
 800b67e:	b94b      	cbnz	r3, 800b694 <__swsetup_r+0x7c>
 800b680:	89a3      	ldrh	r3, [r4, #12]
 800b682:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b68a:	d003      	beq.n	800b694 <__swsetup_r+0x7c>
 800b68c:	4621      	mov	r1, r4
 800b68e:	4628      	mov	r0, r5
 800b690:	f000 f883 	bl	800b79a <__smakebuf_r>
 800b694:	89a0      	ldrh	r0, [r4, #12]
 800b696:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b69a:	f010 0301 	ands.w	r3, r0, #1
 800b69e:	d00a      	beq.n	800b6b6 <__swsetup_r+0x9e>
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	60a3      	str	r3, [r4, #8]
 800b6a4:	6963      	ldr	r3, [r4, #20]
 800b6a6:	425b      	negs	r3, r3
 800b6a8:	61a3      	str	r3, [r4, #24]
 800b6aa:	6923      	ldr	r3, [r4, #16]
 800b6ac:	b943      	cbnz	r3, 800b6c0 <__swsetup_r+0xa8>
 800b6ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b6b2:	d1c4      	bne.n	800b63e <__swsetup_r+0x26>
 800b6b4:	bd38      	pop	{r3, r4, r5, pc}
 800b6b6:	0781      	lsls	r1, r0, #30
 800b6b8:	bf58      	it	pl
 800b6ba:	6963      	ldrpl	r3, [r4, #20]
 800b6bc:	60a3      	str	r3, [r4, #8]
 800b6be:	e7f4      	b.n	800b6aa <__swsetup_r+0x92>
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	e7f7      	b.n	800b6b4 <__swsetup_r+0x9c>
 800b6c4:	2000006c 	.word	0x2000006c

0800b6c8 <_raise_r>:
 800b6c8:	291f      	cmp	r1, #31
 800b6ca:	b538      	push	{r3, r4, r5, lr}
 800b6cc:	4604      	mov	r4, r0
 800b6ce:	460d      	mov	r5, r1
 800b6d0:	d904      	bls.n	800b6dc <_raise_r+0x14>
 800b6d2:	2316      	movs	r3, #22
 800b6d4:	6003      	str	r3, [r0, #0]
 800b6d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6da:	bd38      	pop	{r3, r4, r5, pc}
 800b6dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b6de:	b112      	cbz	r2, 800b6e6 <_raise_r+0x1e>
 800b6e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6e4:	b94b      	cbnz	r3, 800b6fa <_raise_r+0x32>
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	f000 f830 	bl	800b74c <_getpid_r>
 800b6ec:	462a      	mov	r2, r5
 800b6ee:	4601      	mov	r1, r0
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6f6:	f000 b817 	b.w	800b728 <_kill_r>
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d00a      	beq.n	800b714 <_raise_r+0x4c>
 800b6fe:	1c59      	adds	r1, r3, #1
 800b700:	d103      	bne.n	800b70a <_raise_r+0x42>
 800b702:	2316      	movs	r3, #22
 800b704:	6003      	str	r3, [r0, #0]
 800b706:	2001      	movs	r0, #1
 800b708:	e7e7      	b.n	800b6da <_raise_r+0x12>
 800b70a:	2400      	movs	r4, #0
 800b70c:	4628      	mov	r0, r5
 800b70e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b712:	4798      	blx	r3
 800b714:	2000      	movs	r0, #0
 800b716:	e7e0      	b.n	800b6da <_raise_r+0x12>

0800b718 <raise>:
 800b718:	4b02      	ldr	r3, [pc, #8]	; (800b724 <raise+0xc>)
 800b71a:	4601      	mov	r1, r0
 800b71c:	6818      	ldr	r0, [r3, #0]
 800b71e:	f7ff bfd3 	b.w	800b6c8 <_raise_r>
 800b722:	bf00      	nop
 800b724:	2000006c 	.word	0x2000006c

0800b728 <_kill_r>:
 800b728:	b538      	push	{r3, r4, r5, lr}
 800b72a:	2300      	movs	r3, #0
 800b72c:	4d06      	ldr	r5, [pc, #24]	; (800b748 <_kill_r+0x20>)
 800b72e:	4604      	mov	r4, r0
 800b730:	4608      	mov	r0, r1
 800b732:	4611      	mov	r1, r2
 800b734:	602b      	str	r3, [r5, #0]
 800b736:	f7f6 faef 	bl	8001d18 <_kill>
 800b73a:	1c43      	adds	r3, r0, #1
 800b73c:	d102      	bne.n	800b744 <_kill_r+0x1c>
 800b73e:	682b      	ldr	r3, [r5, #0]
 800b740:	b103      	cbz	r3, 800b744 <_kill_r+0x1c>
 800b742:	6023      	str	r3, [r4, #0]
 800b744:	bd38      	pop	{r3, r4, r5, pc}
 800b746:	bf00      	nop
 800b748:	20000abc 	.word	0x20000abc

0800b74c <_getpid_r>:
 800b74c:	f7f6 badc 	b.w	8001d08 <_getpid>

0800b750 <__swhatbuf_r>:
 800b750:	b570      	push	{r4, r5, r6, lr}
 800b752:	460c      	mov	r4, r1
 800b754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b758:	b096      	sub	sp, #88	; 0x58
 800b75a:	4615      	mov	r5, r2
 800b75c:	2900      	cmp	r1, #0
 800b75e:	461e      	mov	r6, r3
 800b760:	da0c      	bge.n	800b77c <__swhatbuf_r+0x2c>
 800b762:	89a3      	ldrh	r3, [r4, #12]
 800b764:	2100      	movs	r1, #0
 800b766:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b76a:	bf0c      	ite	eq
 800b76c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b770:	2340      	movne	r3, #64	; 0x40
 800b772:	2000      	movs	r0, #0
 800b774:	6031      	str	r1, [r6, #0]
 800b776:	602b      	str	r3, [r5, #0]
 800b778:	b016      	add	sp, #88	; 0x58
 800b77a:	bd70      	pop	{r4, r5, r6, pc}
 800b77c:	466a      	mov	r2, sp
 800b77e:	f000 f849 	bl	800b814 <_fstat_r>
 800b782:	2800      	cmp	r0, #0
 800b784:	dbed      	blt.n	800b762 <__swhatbuf_r+0x12>
 800b786:	9901      	ldr	r1, [sp, #4]
 800b788:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b78c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b790:	4259      	negs	r1, r3
 800b792:	4159      	adcs	r1, r3
 800b794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b798:	e7eb      	b.n	800b772 <__swhatbuf_r+0x22>

0800b79a <__smakebuf_r>:
 800b79a:	898b      	ldrh	r3, [r1, #12]
 800b79c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b79e:	079d      	lsls	r5, r3, #30
 800b7a0:	4606      	mov	r6, r0
 800b7a2:	460c      	mov	r4, r1
 800b7a4:	d507      	bpl.n	800b7b6 <__smakebuf_r+0x1c>
 800b7a6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7aa:	6023      	str	r3, [r4, #0]
 800b7ac:	6123      	str	r3, [r4, #16]
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	6163      	str	r3, [r4, #20]
 800b7b2:	b002      	add	sp, #8
 800b7b4:	bd70      	pop	{r4, r5, r6, pc}
 800b7b6:	ab01      	add	r3, sp, #4
 800b7b8:	466a      	mov	r2, sp
 800b7ba:	f7ff ffc9 	bl	800b750 <__swhatbuf_r>
 800b7be:	9900      	ldr	r1, [sp, #0]
 800b7c0:	4605      	mov	r5, r0
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	f7fe feb8 	bl	800a538 <_malloc_r>
 800b7c8:	b948      	cbnz	r0, 800b7de <__smakebuf_r+0x44>
 800b7ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ce:	059a      	lsls	r2, r3, #22
 800b7d0:	d4ef      	bmi.n	800b7b2 <__smakebuf_r+0x18>
 800b7d2:	f023 0303 	bic.w	r3, r3, #3
 800b7d6:	f043 0302 	orr.w	r3, r3, #2
 800b7da:	81a3      	strh	r3, [r4, #12]
 800b7dc:	e7e3      	b.n	800b7a6 <__smakebuf_r+0xc>
 800b7de:	89a3      	ldrh	r3, [r4, #12]
 800b7e0:	6020      	str	r0, [r4, #0]
 800b7e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7e6:	6120      	str	r0, [r4, #16]
 800b7e8:	81a3      	strh	r3, [r4, #12]
 800b7ea:	9b00      	ldr	r3, [sp, #0]
 800b7ec:	6163      	str	r3, [r4, #20]
 800b7ee:	9b01      	ldr	r3, [sp, #4]
 800b7f0:	b15b      	cbz	r3, 800b80a <__smakebuf_r+0x70>
 800b7f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	f000 f81e 	bl	800b838 <_isatty_r>
 800b7fc:	b128      	cbz	r0, 800b80a <__smakebuf_r+0x70>
 800b7fe:	89a3      	ldrh	r3, [r4, #12]
 800b800:	f023 0303 	bic.w	r3, r3, #3
 800b804:	f043 0301 	orr.w	r3, r3, #1
 800b808:	81a3      	strh	r3, [r4, #12]
 800b80a:	89a3      	ldrh	r3, [r4, #12]
 800b80c:	431d      	orrs	r5, r3
 800b80e:	81a5      	strh	r5, [r4, #12]
 800b810:	e7cf      	b.n	800b7b2 <__smakebuf_r+0x18>
	...

0800b814 <_fstat_r>:
 800b814:	b538      	push	{r3, r4, r5, lr}
 800b816:	2300      	movs	r3, #0
 800b818:	4d06      	ldr	r5, [pc, #24]	; (800b834 <_fstat_r+0x20>)
 800b81a:	4604      	mov	r4, r0
 800b81c:	4608      	mov	r0, r1
 800b81e:	4611      	mov	r1, r2
 800b820:	602b      	str	r3, [r5, #0]
 800b822:	f7f6 fad8 	bl	8001dd6 <_fstat>
 800b826:	1c43      	adds	r3, r0, #1
 800b828:	d102      	bne.n	800b830 <_fstat_r+0x1c>
 800b82a:	682b      	ldr	r3, [r5, #0]
 800b82c:	b103      	cbz	r3, 800b830 <_fstat_r+0x1c>
 800b82e:	6023      	str	r3, [r4, #0]
 800b830:	bd38      	pop	{r3, r4, r5, pc}
 800b832:	bf00      	nop
 800b834:	20000abc 	.word	0x20000abc

0800b838 <_isatty_r>:
 800b838:	b538      	push	{r3, r4, r5, lr}
 800b83a:	2300      	movs	r3, #0
 800b83c:	4d05      	ldr	r5, [pc, #20]	; (800b854 <_isatty_r+0x1c>)
 800b83e:	4604      	mov	r4, r0
 800b840:	4608      	mov	r0, r1
 800b842:	602b      	str	r3, [r5, #0]
 800b844:	f7f6 fad7 	bl	8001df6 <_isatty>
 800b848:	1c43      	adds	r3, r0, #1
 800b84a:	d102      	bne.n	800b852 <_isatty_r+0x1a>
 800b84c:	682b      	ldr	r3, [r5, #0]
 800b84e:	b103      	cbz	r3, 800b852 <_isatty_r+0x1a>
 800b850:	6023      	str	r3, [r4, #0]
 800b852:	bd38      	pop	{r3, r4, r5, pc}
 800b854:	20000abc 	.word	0x20000abc

0800b858 <sqrtf>:
 800b858:	b508      	push	{r3, lr}
 800b85a:	ed2d 8b02 	vpush	{d8}
 800b85e:	eeb0 8a40 	vmov.f32	s16, s0
 800b862:	f000 f8bb 	bl	800b9dc <__ieee754_sqrtf>
 800b866:	eeb4 8a48 	vcmp.f32	s16, s16
 800b86a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b86e:	d60c      	bvs.n	800b88a <sqrtf+0x32>
 800b870:	eddf 8a07 	vldr	s17, [pc, #28]	; 800b890 <sqrtf+0x38>
 800b874:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b87c:	d505      	bpl.n	800b88a <sqrtf+0x32>
 800b87e:	f7fd ff2b 	bl	80096d8 <__errno>
 800b882:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b886:	2321      	movs	r3, #33	; 0x21
 800b888:	6003      	str	r3, [r0, #0]
 800b88a:	ecbd 8b02 	vpop	{d8}
 800b88e:	bd08      	pop	{r3, pc}
 800b890:	00000000 	.word	0x00000000

0800b894 <fmax>:
 800b894:	b508      	push	{r3, lr}
 800b896:	ed2d 8b04 	vpush	{d8-d9}
 800b89a:	eeb0 8a40 	vmov.f32	s16, s0
 800b89e:	eef0 8a60 	vmov.f32	s17, s1
 800b8a2:	eeb0 9a41 	vmov.f32	s18, s2
 800b8a6:	eef0 9a61 	vmov.f32	s19, s3
 800b8aa:	f000 f81b 	bl	800b8e4 <__fpclassifyd>
 800b8ae:	b168      	cbz	r0, 800b8cc <fmax+0x38>
 800b8b0:	eeb0 0a49 	vmov.f32	s0, s18
 800b8b4:	eef0 0a69 	vmov.f32	s1, s19
 800b8b8:	f000 f814 	bl	800b8e4 <__fpclassifyd>
 800b8bc:	b150      	cbz	r0, 800b8d4 <fmax+0x40>
 800b8be:	ec53 2b19 	vmov	r2, r3, d9
 800b8c2:	ec51 0b18 	vmov	r0, r1, d8
 800b8c6:	f7f5 f92b 	bl	8000b20 <__aeabi_dcmpgt>
 800b8ca:	b918      	cbnz	r0, 800b8d4 <fmax+0x40>
 800b8cc:	eeb0 8a49 	vmov.f32	s16, s18
 800b8d0:	eef0 8a69 	vmov.f32	s17, s19
 800b8d4:	eeb0 0a48 	vmov.f32	s0, s16
 800b8d8:	eef0 0a68 	vmov.f32	s1, s17
 800b8dc:	ecbd 8b04 	vpop	{d8-d9}
 800b8e0:	bd08      	pop	{r3, pc}
	...

0800b8e4 <__fpclassifyd>:
 800b8e4:	ec51 0b10 	vmov	r0, r1, d0
 800b8e8:	b510      	push	{r4, lr}
 800b8ea:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	d019      	beq.n	800b926 <__fpclassifyd+0x42>
 800b8f2:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 800b8f6:	490e      	ldr	r1, [pc, #56]	; (800b930 <__fpclassifyd+0x4c>)
 800b8f8:	428a      	cmp	r2, r1
 800b8fa:	d90e      	bls.n	800b91a <__fpclassifyd+0x36>
 800b8fc:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 800b900:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800b904:	428a      	cmp	r2, r1
 800b906:	d908      	bls.n	800b91a <__fpclassifyd+0x36>
 800b908:	4a0a      	ldr	r2, [pc, #40]	; (800b934 <__fpclassifyd+0x50>)
 800b90a:	4213      	tst	r3, r2
 800b90c:	d007      	beq.n	800b91e <__fpclassifyd+0x3a>
 800b90e:	4294      	cmp	r4, r2
 800b910:	d107      	bne.n	800b922 <__fpclassifyd+0x3e>
 800b912:	fab0 f080 	clz	r0, r0
 800b916:	0940      	lsrs	r0, r0, #5
 800b918:	bd10      	pop	{r4, pc}
 800b91a:	2004      	movs	r0, #4
 800b91c:	e7fc      	b.n	800b918 <__fpclassifyd+0x34>
 800b91e:	2003      	movs	r0, #3
 800b920:	e7fa      	b.n	800b918 <__fpclassifyd+0x34>
 800b922:	2000      	movs	r0, #0
 800b924:	e7f8      	b.n	800b918 <__fpclassifyd+0x34>
 800b926:	2800      	cmp	r0, #0
 800b928:	d1ee      	bne.n	800b908 <__fpclassifyd+0x24>
 800b92a:	2002      	movs	r0, #2
 800b92c:	e7f4      	b.n	800b918 <__fpclassifyd+0x34>
 800b92e:	bf00      	nop
 800b930:	7fdfffff 	.word	0x7fdfffff
 800b934:	7ff00000 	.word	0x7ff00000

0800b938 <fmaxf>:
 800b938:	b508      	push	{r3, lr}
 800b93a:	ed2d 8b02 	vpush	{d8}
 800b93e:	eeb0 8a40 	vmov.f32	s16, s0
 800b942:	eef0 8a60 	vmov.f32	s17, s1
 800b946:	f000 f82d 	bl	800b9a4 <__fpclassifyf>
 800b94a:	b148      	cbz	r0, 800b960 <fmaxf+0x28>
 800b94c:	eeb0 0a68 	vmov.f32	s0, s17
 800b950:	f000 f828 	bl	800b9a4 <__fpclassifyf>
 800b954:	b130      	cbz	r0, 800b964 <fmaxf+0x2c>
 800b956:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b95e:	dc01      	bgt.n	800b964 <fmaxf+0x2c>
 800b960:	eeb0 8a68 	vmov.f32	s16, s17
 800b964:	eeb0 0a48 	vmov.f32	s0, s16
 800b968:	ecbd 8b02 	vpop	{d8}
 800b96c:	bd08      	pop	{r3, pc}

0800b96e <fminf>:
 800b96e:	b508      	push	{r3, lr}
 800b970:	ed2d 8b02 	vpush	{d8}
 800b974:	eeb0 8a40 	vmov.f32	s16, s0
 800b978:	eef0 8a60 	vmov.f32	s17, s1
 800b97c:	f000 f812 	bl	800b9a4 <__fpclassifyf>
 800b980:	b148      	cbz	r0, 800b996 <fminf+0x28>
 800b982:	eeb0 0a68 	vmov.f32	s0, s17
 800b986:	f000 f80d 	bl	800b9a4 <__fpclassifyf>
 800b98a:	b130      	cbz	r0, 800b99a <fminf+0x2c>
 800b98c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b994:	d401      	bmi.n	800b99a <fminf+0x2c>
 800b996:	eeb0 8a68 	vmov.f32	s16, s17
 800b99a:	eeb0 0a48 	vmov.f32	s0, s16
 800b99e:	ecbd 8b02 	vpop	{d8}
 800b9a2:	bd08      	pop	{r3, pc}

0800b9a4 <__fpclassifyf>:
 800b9a4:	ee10 3a10 	vmov	r3, s0
 800b9a8:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800b9ac:	d00d      	beq.n	800b9ca <__fpclassifyf+0x26>
 800b9ae:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800b9b2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800b9b6:	d30a      	bcc.n	800b9ce <__fpclassifyf+0x2a>
 800b9b8:	1e42      	subs	r2, r0, #1
 800b9ba:	4b07      	ldr	r3, [pc, #28]	; (800b9d8 <__fpclassifyf+0x34>)
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d908      	bls.n	800b9d2 <__fpclassifyf+0x2e>
 800b9c0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800b9c4:	4258      	negs	r0, r3
 800b9c6:	4158      	adcs	r0, r3
 800b9c8:	4770      	bx	lr
 800b9ca:	2002      	movs	r0, #2
 800b9cc:	4770      	bx	lr
 800b9ce:	2004      	movs	r0, #4
 800b9d0:	4770      	bx	lr
 800b9d2:	2003      	movs	r0, #3
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop
 800b9d8:	007ffffe 	.word	0x007ffffe

0800b9dc <__ieee754_sqrtf>:
 800b9dc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b9e0:	4770      	bx	lr
	...

0800b9e4 <_init>:
 800b9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9e6:	bf00      	nop
 800b9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ea:	bc08      	pop	{r3}
 800b9ec:	469e      	mov	lr, r3
 800b9ee:	4770      	bx	lr

0800b9f0 <_fini>:
 800b9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f2:	bf00      	nop
 800b9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9f6:	bc08      	pop	{r3}
 800b9f8:	469e      	mov	lr, r3
 800b9fa:	4770      	bx	lr
