
STM32F769I_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d8e4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003204  0801dae4  0801dae4  0002dae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  08020ce8  08020ce8  00030ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08020d00  08020d00  000678b8  2**0
                  CONTENTS
  5 .ARM          00000008  08020d00  08020d00  00030d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08020d08  08020d08  000678b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  08020d08  08020d08  00030d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  08020d24  08020d24  00030d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000150  20000000  08020d2c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 CCMRAM        00009600  20000150  08020e7c  00040150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0001af6c  20009750  0802a47c  00049750  2**2
                  ALLOC
 12 ._user_heap_stack 00002004  200246bc  0802a47c  000546bc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000678b8  2**0
                  CONTENTS, READONLY
 14 ExtFlashSection 00017700  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 FontFlashSection 000001a8  90017700  90017700  00067700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000010  900178a8  900178a8  000678a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 BufferSection 00177000  c0000000  c0000000  00070000  2**2
                  ALLOC
 18 .debug_line   00053c32  00000000  00000000  000678e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_info   000a05de  00000000  00000000  000bb518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 0001345c  00000000  00000000  0015baf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00002d20  00000000  00000000  0016ef58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00150268  00000000  00000000  00171c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00004838  00000000  00000000  002c1ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  0003ca07  00000000  00000000  002c6718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000cf  00000000  00000000  0030311f  2**0
                  CONTENTS, READONLY
 26 .debug_frame  000089d8  00000000  00000000  003031f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_loc    000300a0  00000000  00000000  0030bbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20009750 	.word	0x20009750
 800021c:	00000000 	.word	0x00000000
 8000220:	0801dacc 	.word	0x0801dacc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20009754 	.word	0x20009754
 800023c:	0801dacc 	.word	0x0801dacc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800061c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005ea:	e003      	b.n	80005f4 <LoopCopyDataInit>

080005ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005f2:	3104      	adds	r1, #4

080005f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005f4:	480b      	ldr	r0, [pc, #44]	; (8000624 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005fc:	d3f6      	bcc.n	80005ec <CopyDataInit>
  ldr  r2, =_sbss
 80005fe:	4a0b      	ldr	r2, [pc, #44]	; (800062c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000600:	e002      	b.n	8000608 <LoopFillZerobss>

08000602 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000602:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000604:	f842 3b04 	str.w	r3, [r2], #4

08000608 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800060a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800060c:	d3f9      	bcc.n	8000602 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800060e:	f004 fd03 	bl	8005018 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000612:	f01c f9e1 	bl	801c9d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000616:	f002 fcf9 	bl	800300c <main>
  bx  lr    
 800061a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800061c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000620:	08020d2c 	.word	0x08020d2c
  ldr  r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000628:	20000150 	.word	0x20000150
  ldr  r2, =_sbss
 800062c:	20009750 	.word	0x20009750
  ldr  r3, = _ebss
 8000630:	200246bc 	.word	0x200246bc

08000634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <ADC_IRQHandler>

08000636 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8000636:	4770      	bx	lr

08000638 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8000638:	4770      	bx	lr

0800063a <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800063a:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 800063c:	f001 fce8 	bl	8002010 <touchgfx_components_init>
  touchgfx_init();
}
 8000640:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
 8000644:	f001 bc74 	b.w	8001f30 <touchgfx_init>

08000648 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8000648:	f001 bce4 	b.w	8002014 <touchgfx_taskEntry>

0800064c <BSP_PB_Init>:
    __weak void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
    {
        GPIO_InitTypeDef gpio_init_structure;

        /* Enable the BUTTON clock */
        BUTTON_GPIO_CLK_ENABLE();
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <BSP_PB_Init+0x60>)
 800064e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000650:	f042 0201 	orr.w	r2, r2, #1
    {
 8000654:	b510      	push	{r4, lr}
        BUTTON_GPIO_CLK_ENABLE();
 8000656:	631a      	str	r2, [r3, #48]	; 0x30
    {
 8000658:	b086      	sub	sp, #24
        BUTTON_GPIO_CLK_ENABLE();
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	9b00      	ldr	r3, [sp, #0]

        if (Button_Mode == BUTTON_MODE_GPIO)
 8000664:	b959      	cbnz	r1, 800067e <BSP_PB_Init+0x32>
        {
            /* Configure Button pin as input */
            gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000666:	2301      	movs	r3, #1
            gpio_init_structure.Mode = GPIO_MODE_INPUT;
            gpio_init_structure.Pull = GPIO_NOPULL;
 8000668:	9103      	str	r1, [sp, #12]
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800066a:	4811      	ldr	r0, [pc, #68]	; (80006b0 <BSP_PB_Init+0x64>)
            gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800066c:	e9cd 3101 	strd	r3, r1, [sp, #4]
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000670:	2302      	movs	r3, #2
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000672:	a901      	add	r1, sp, #4
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000674:	9304      	str	r3, [sp, #16]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000676:	f005 fcc3 	bl	8006000 <HAL_GPIO_Init>

            /* Enable and set Button EXTI Interrupt to the lowest priority */
            HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
            HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
        }
    }
 800067a:	b006      	add	sp, #24
 800067c:	bd10      	pop	{r4, pc}
        if (Button_Mode == BUTTON_MODE_EXTI)
 800067e:	2901      	cmp	r1, #1
 8000680:	d1fb      	bne.n	800067a <BSP_PB_Init+0x2e>
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000682:	2400      	movs	r4, #0
 8000684:	2302      	movs	r3, #2
            gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000686:	9101      	str	r1, [sp, #4]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000688:	a901      	add	r1, sp, #4
 800068a:	4809      	ldr	r0, [pc, #36]	; (80006b0 <BSP_PB_Init+0x64>)
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800068c:	e9cd 4303 	strd	r4, r3, [sp, #12]
            gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000690:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000694:	9302      	str	r3, [sp, #8]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000696:	f005 fcb3 	bl	8006000 <HAL_GPIO_Init>
            HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800069a:	4622      	mov	r2, r4
 800069c:	210f      	movs	r1, #15
 800069e:	2006      	movs	r0, #6
 80006a0:	f004 fd28 	bl	80050f4 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80006a4:	2006      	movs	r0, #6
 80006a6:	f004 fd57 	bl	8005158 <HAL_NVIC_EnableIRQ>
    }
 80006aa:	e7e6      	b.n	800067a <BSP_PB_Init+0x2e>
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40020000 	.word	0x40020000

080006b4 <_ZN8touchgfx7Buttons4initEv>:
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 80006b4:	2100      	movs	r1, #0
{
 80006b6:	b508      	push	{r3, lr}
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 80006b8:	4608      	mov	r0, r1
 80006ba:	f7ff ffc7 	bl	800064c <BSP_PB_Init>
}
 80006be:	bd08      	pop	{r3, pc}

080006c0 <BSP_PB_GetState>:
      *            @arg  BUTTON_USER: User Push Button
      * @retval The Button GPIO pin value
      */
    __weak uint32_t BSP_PB_GetState(Button_TypeDef Button)
    {
        return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80006c0:	2101      	movs	r1, #1
 80006c2:	4802      	ldr	r0, [pc, #8]	; (80006cc <BSP_PB_GetState+0xc>)
    {
 80006c4:	b508      	push	{r3, lr}
        return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80006c6:	f005 fe21 	bl	800630c <HAL_GPIO_ReadPin>
    }
 80006ca:	bd08      	pop	{r3, pc}
 80006cc:	40020000 	.word	0x40020000

080006d0 <_ZN8touchgfx7Buttons6sampleEv>:
{
 80006d0:	b508      	push	{r3, lr}
    result = BSP_PB_GetState(BUTTON_WAKEUP);
 80006d2:	2000      	movs	r0, #0
 80006d4:	f7ff fff4 	bl	80006c0 <BSP_PB_GetState>
}
 80006d8:	bd08      	pop	{r3, pc}

080006da <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 80006da:	6840      	ldr	r0, [r0, #4]
    }
 80006dc:	4770      	bx	lr

080006de <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 80006de:	6041      	str	r1, [r0, #4]
    }
 80006e0:	4770      	bx	lr
	...

080006e4 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 80006e4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80006e8:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 80006ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006f0:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 80006f6:	4a06      	ldr	r2, [pc, #24]	; (8000710 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 80006f8:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 80006fc:	430a      	orrs	r2, r1
 80006fe:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	f042 0201 	orr.w	r2, r2, #1
 8000708:	601a      	str	r2, [r3, #0]
}
 800070a:	4770      	bx	lr
 800070c:	e0001000 	.word	0xe0001000
 8000710:	c5acce55 	.word	0xc5acce55

08000714 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8000714:	1a51      	subs	r1, r2, r1
 8000716:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 800071a:	fbb1 f0f3 	udiv	r0, r1, r3
 800071e:	4770      	bx	lr

08000720 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8000720:	4b01      	ldr	r3, [pc, #4]	; (8000728 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8000722:	6858      	ldr	r0, [r3, #4]
}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e0001000 	.word	0xe0001000

0800072c <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 800072c:	4770      	bx	lr

0800072e <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 800072e:	b510      	push	{r4, lr}
 8000730:	4604      	mov	r4, r0
 8000732:	210c      	movs	r1, #12
 8000734:	f01c f8d8 	bl	801c8e8 <_ZdlPvj>
 8000738:	4620      	mov	r0, r4
 800073a:	bd10      	pop	{r4, pc}

0800073c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 800073c:	6803      	ldr	r3, [r0, #0]
{
 800073e:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8000740:	691b      	ldr	r3, [r3, #16]
{
 8000742:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8000744:	b131      	cbz	r1, 8000754 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8000746:	4798      	blx	r3
 8000748:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 800074a:	6863      	ldr	r3, [r4, #4]
 800074c:	1a9b      	subs	r3, r3, r2
 800074e:	4418      	add	r0, r3
 8000750:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8000752:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8000754:	4798      	blx	r3
 8000756:	60a0      	str	r0, [r4, #8]
}
 8000758:	e7fb      	b.n	8000752 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

0800075a <_ZN8touchgfx16ButtonController5resetEv>:
    virtual bool sample(uint8_t& key) = 0;

    /** Resets button controller. Does nothing in the default implementation. */
    virtual void reset()
    {
    }
 800075a:	4770      	bx	lr

0800075c <_ZN8touchgfx10KeySamplerD1Ev>:
public:
    KeySampler()
    {
        init();
    }
    virtual ~KeySampler() {}
 800075c:	4770      	bx	lr
	...

08000760 <_ZN8touchgfx10KeySampler4initEv>:
using namespace touchgfx;

static uint8_t btnstatus[4];

void KeySampler::init()
{
 8000760:	b508      	push	{r3, lr}
    Buttons::init();
 8000762:	f7ff ffa7 	bl	80006b4 <_ZN8touchgfx7Buttons4initEv>

    memset(btnstatus, 0x00, sizeof(uint8_t) * 4);
 8000766:	4b02      	ldr	r3, [pc, #8]	; (8000770 <_ZN8touchgfx10KeySampler4initEv+0x10>)
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
}
 800076c:	bd08      	pop	{r3, pc}
 800076e:	bf00      	nop
 8000770:	2000976c 	.word	0x2000976c

08000774 <_ZN8touchgfx10KeySampler6sampleERh>:

bool KeySampler::sample(uint8_t& key)
{
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	460d      	mov	r5, r1
    unsigned int buttonValue = Buttons::sample();
 8000778:	f7ff ffaa 	bl	80006d0 <_ZN8touchgfx7Buttons6sampleEv>

    //Propergate values through buffer
    btnstatus[3] = btnstatus[2];
 800077c:	4a0b      	ldr	r2, [pc, #44]	; (80007ac <_ZN8touchgfx10KeySampler6sampleERh+0x38>)
    btnstatus[2] = btnstatus[1];
    btnstatus[1] = btnstatus[0];
    btnstatus[0] = buttonValue;
 800077e:	b2c4      	uxtb	r4, r0
    btnstatus[3] = btnstatus[2];
 8000780:	7893      	ldrb	r3, [r2, #2]
    btnstatus[2] = btnstatus[1];
 8000782:	7856      	ldrb	r6, [r2, #1]
    btnstatus[1] = btnstatus[0];
 8000784:	7811      	ldrb	r1, [r2, #0]

    //User key
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 8000786:	f013 0001 	ands.w	r0, r3, #1
    btnstatus[3] = btnstatus[2];
 800078a:	70d3      	strb	r3, [r2, #3]
    btnstatus[2] = btnstatus[1];
 800078c:	7096      	strb	r6, [r2, #2]
    btnstatus[1] = btnstatus[0];
 800078e:	7051      	strb	r1, [r2, #1]
    btnstatus[0] = buttonValue;
 8000790:	7014      	strb	r4, [r2, #0]
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 8000792:	d00a      	beq.n	80007aa <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 8000794:	f016 0001 	ands.w	r0, r6, #1
 8000798:	d007      	beq.n	80007aa <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 800079a:	f011 0001 	ands.w	r0, r1, #1
 800079e:	d004      	beq.n	80007aa <_ZN8touchgfx10KeySampler6sampleERh+0x36>
            ((btnstatus[1] & Key1) == 1) && ((btnstatus[0] & Key1) == 0))
 80007a0:	07e3      	lsls	r3, r4, #31
    {
        key = 1;
 80007a2:	bf56      	itet	pl
 80007a4:	2001      	movpl	r0, #1
        return true;
    }

    return false;
 80007a6:	2000      	movmi	r0, #0
        key = 1;
 80007a8:	7028      	strbpl	r0, [r5, #0]
}
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	2000976c 	.word	0x2000976c

080007b0 <_ZN8touchgfx10KeySamplerD0Ev>:
 80007b0:	b510      	push	{r4, lr}
 80007b2:	4604      	mov	r4, r0
 80007b4:	2104      	movs	r1, #4
 80007b6:	f01c f897 	bl	801c8e8 <_ZdlPvj>
 80007ba:	4620      	mov	r0, r4
 80007bc:	bd10      	pop	{r4, pc}

080007be <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80007be:	4770      	bx	lr

080007c0 <_ZN20STM32TouchControllerD0Ev>:
 80007c0:	b510      	push	{r4, lr}
 80007c2:	4604      	mov	r4, r0
 80007c4:	2104      	movs	r1, #4
 80007c6:	f01c f88f 	bl	801c8e8 <_ZdlPvj>
 80007ca:	4620      	mov	r0, r4
 80007cc:	bd10      	pop	{r4, pc}

080007ce <TS_IO_Init>:
      * @retval None
      */
    __weak void TS_IO_Init(void)
    {
        // I2Cx_Init(&hi2c4);
    }
 80007ce:	4770      	bx	lr

080007d0 <TS_IO_Write>:
      * @param  Reg: Reg address
      * @param  Value: Data to be written
      * @retval None
      */
    __weak void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
    {
 80007d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80007d2:	2301      	movs	r3, #1
    {
 80007d4:	f88d 2017 	strb.w	r2, [sp, #23]
        status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80007d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007dc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80007e0:	f10d 0217 	add.w	r2, sp, #23
 80007e4:	9200      	str	r2, [sp, #0]
 80007e6:	460a      	mov	r2, r1
 80007e8:	4601      	mov	r1, r0
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <TS_IO_Write+0x34>)
 80007ec:	f005 ff28 	bl	8006640 <HAL_I2C_Mem_Write>
        if (status != HAL_OK)
 80007f0:	b120      	cbz	r0, 80007fc <TS_IO_Write+0x2c>
        HAL_I2C_DeInit(i2c_handler);
 80007f2:	4804      	ldr	r0, [pc, #16]	; (8000804 <TS_IO_Write+0x34>)
 80007f4:	f005 ff0a 	bl	800660c <HAL_I2C_DeInit>
        MX_I2C4_Init();
 80007f8:	f002 fbe6 	bl	8002fc8 <MX_I2C4_Init>
        I2Cx_WriteMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
    }
 80007fc:	b007      	add	sp, #28
 80007fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8000802:	bf00      	nop
 8000804:	2000eb14 	.word	0x2000eb14

08000808 <TS_IO_Read>:
      * @param  Addr: I2C address
      * @param  Reg: Reg address
      * @retval Data to be read
      */
    __weak uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
    {
 8000808:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        uint8_t read_value = 0;
 800080a:	2300      	movs	r3, #0
    {
 800080c:	460a      	mov	r2, r1
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800080e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        uint8_t read_value = 0;
 8000812:	f88d 3017 	strb.w	r3, [sp, #23]
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000816:	2301      	movs	r3, #1
 8000818:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800081c:	f10d 0117 	add.w	r1, sp, #23
 8000820:	9100      	str	r1, [sp, #0]
 8000822:	4601      	mov	r1, r0
 8000824:	4806      	ldr	r0, [pc, #24]	; (8000840 <TS_IO_Read+0x38>)
 8000826:	f005 ffe5 	bl	80067f4 <HAL_I2C_Mem_Read>
        if (status != HAL_OK)
 800082a:	b120      	cbz	r0, 8000836 <TS_IO_Read+0x2e>
        HAL_I2C_DeInit(i2c_handler);
 800082c:	4804      	ldr	r0, [pc, #16]	; (8000840 <TS_IO_Read+0x38>)
 800082e:	f005 feed 	bl	800660c <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000832:	f002 fbc9 	bl	8002fc8 <MX_I2C4_Init>

        I2Cx_ReadMultiple(&hi2c4, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

        return read_value;
    }
 8000836:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800083a:	b007      	add	sp, #28
 800083c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000840:	2000eb14 	.word	0x2000eb14

08000844 <TS_IO_ReadMultiple>:
      * @param  Buffer: Pointer to data buffer
      * @param  Length: Length of the data
      * @retval Number of read data
      */
    __weak uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t* Buffer, uint16_t Length)
    {
 8000844:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000846:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800084a:	9200      	str	r2, [sp, #0]
 800084c:	460a      	mov	r2, r1
 800084e:	4601      	mov	r1, r0
 8000850:	4807      	ldr	r0, [pc, #28]	; (8000870 <TS_IO_ReadMultiple+0x2c>)
 8000852:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000856:	2301      	movs	r3, #1
 8000858:	f005 ffcc 	bl	80067f4 <HAL_I2C_Mem_Read>
        if (status != HAL_OK)
 800085c:	4604      	mov	r4, r0
 800085e:	b120      	cbz	r0, 800086a <TS_IO_ReadMultiple+0x26>
        HAL_I2C_DeInit(i2c_handler);
 8000860:	4803      	ldr	r0, [pc, #12]	; (8000870 <TS_IO_ReadMultiple+0x2c>)
 8000862:	f005 fed3 	bl	800660c <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000866:	f002 fbaf 	bl	8002fc8 <MX_I2C4_Init>
        return I2Cx_ReadMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
    }
 800086a:	b2a0      	uxth	r0, r4
 800086c:	b004      	add	sp, #16
 800086e:	bd10      	pop	{r4, pc}
 8000870:	2000eb14 	.word	0x2000eb14

08000874 <BSP_TS_Init>:
      * @param  ts_SizeX : Maximum X size of the TS area on LCD
      * @param  ts_SizeY : Maximum Y size of the TS area on LCD
      * @retval TS_OK if all initializations are OK. Other value if error.
      */
    __weak uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
    {
 8000874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
        /* but the prototype of Init() is like that in template and should be respected       */

        /* Initialize the communication channel to sensor (I2C) if necessary */
        /* that is initialization is done only once after a power up         */
        ft6x06_ts_drv.Init(I2C_Address);
 8000876:	4d13      	ldr	r5, [pc, #76]	; (80008c4 <BSP_TS_Init+0x50>)
    {
 8000878:	4606      	mov	r6, r0
        ft6x06_ts_drv.Init(I2C_Address);
 800087a:	4c13      	ldr	r4, [pc, #76]	; (80008c8 <BSP_TS_Init+0x54>)
    {
 800087c:	460f      	mov	r7, r1
        ft6x06_ts_drv.Init(I2C_Address);
 800087e:	682b      	ldr	r3, [r5, #0]
 8000880:	7820      	ldrb	r0, [r4, #0]
 8000882:	4798      	blx	r3

        ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8000884:	686b      	ldr	r3, [r5, #4]
 8000886:	2054      	movs	r0, #84	; 0x54
 8000888:	4798      	blx	r3
        if (ts_id1 != FT6206_ID_VALUE)
 800088a:	b2c0      	uxtb	r0, r0
 800088c:	2811      	cmp	r0, #17
 800088e:	d009      	beq.n	80008a4 <BSP_TS_Init+0x30>
        {
            ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8000890:	686b      	ldr	r3, [r5, #4]
 8000892:	2070      	movs	r0, #112	; 0x70
 8000894:	4798      	blx	r3
            I2C_Address    = TS_I2C_ADDRESS_A02;
 8000896:	2370      	movs	r3, #112	; 0x70
            I2C_Address    = TS_I2C_ADDRESS;
        }

        /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
        /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
        if ((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8000898:	b2c0      	uxtb	r0, r0
            I2C_Address    = TS_I2C_ADDRESS_A02;
 800089a:	7023      	strb	r3, [r4, #0]
        if ((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 800089c:	2811      	cmp	r0, #17
 800089e:	d003      	beq.n	80008a8 <BSP_TS_Init+0x34>

            } /* of if(ts_status == TS_OK) */
        }
        else
        {
            ts_status = TS_DEVICE_NOT_FOUND;
 80008a0:	2003      	movs	r0, #3
        }

        return (ts_status);
    }
 80008a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            I2C_Address    = TS_I2C_ADDRESS;
 80008a4:	2354      	movs	r3, #84	; 0x54
 80008a6:	7023      	strb	r3, [r4, #0]
            if (ts_SizeX < ts_SizeY)
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <BSP_TS_Init+0x58>)
                ts_orientation = TS_SWAP_XY | TS_SWAP_Y;
 80008aa:	42be      	cmp	r6, r7
 80008ac:	bf34      	ite	cc
 80008ae:	2601      	movcc	r6, #1
 80008b0:	260c      	movcs	r6, #12
                ft6x06_ts_drv.Reset(I2C_Address);
 80008b2:	7820      	ldrb	r0, [r4, #0]
 80008b4:	701e      	strb	r6, [r3, #0]
 80008b6:	68ab      	ldr	r3, [r5, #8]
 80008b8:	4798      	blx	r3
                ft6x06_ts_drv.Start(I2C_Address);
 80008ba:	7820      	ldrb	r0, [r4, #0]
 80008bc:	68eb      	ldr	r3, [r5, #12]
 80008be:	4798      	blx	r3
        uint8_t ts_status = TS_OK;
 80008c0:	2000      	movs	r0, #0
 80008c2:	e7ee      	b.n	80008a2 <BSP_TS_Init+0x2e>
 80008c4:	20000038 	.word	0x20000038
 80008c8:	20009770 	.word	0x20009770
 80008cc:	20009771 	.word	0x20009771

080008d0 <_ZN20STM32TouchController4initEv>:
{
 80008d0:	b508      	push	{r3, lr}
    if (BSP_TS_Init(800, 480) == TS_OK)
 80008d2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80008d6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80008da:	f7ff ffcb 	bl	8000874 <BSP_TS_Init>
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <_ZN20STM32TouchController4initEv+0x2c>)
 80008e0:	b910      	cbnz	r0, 80008e8 <_ZN20STM32TouchController4initEv+0x18>
        bsp_ts_initialized = true;
 80008e2:	2201      	movs	r2, #1
 80008e4:	701a      	strb	r2, [r3, #0]
}
 80008e6:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1fb      	bne.n	80008e6 <_ZN20STM32TouchController4initEv+0x16>
 80008ee:	4b04      	ldr	r3, [pc, #16]	; (8000900 <_ZN20STM32TouchController4initEv+0x30>)
 80008f0:	216a      	movs	r1, #106	; 0x6a
 80008f2:	4a04      	ldr	r2, [pc, #16]	; (8000904 <_ZN20STM32TouchController4initEv+0x34>)
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <_ZN20STM32TouchController4initEv+0x38>)
 80008f6:	f01c f825 	bl	801c944 <__assert_func>
 80008fa:	bf00      	nop
 80008fc:	20009772 	.word	0x20009772
 8000900:	0801db68 	.word	0x0801db68
 8000904:	0801db7b 	.word	0x0801db7b
 8000908:	0801dba5 	.word	0x0801dba5

0800090c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
__weak uint8_t BSP_TS_GetState(TS_StateTypeDef* TS_State)
{
 800090c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t xDiff;
    uint16_t yDiff;
    uint32_t index;

    /* Check and update the number of touches active detected */
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 8000910:	4a35      	ldr	r2, [pc, #212]	; (80009e8 <BSP_TS_GetState+0xdc>)
{
 8000912:	4607      	mov	r7, r0
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 8000914:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 80009f8 <BSP_TS_GetState+0xec>
{
 8000918:	b085      	sub	sp, #20
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 800091a:	7810      	ldrb	r0, [r2, #0]
 800091c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8000920:	4798      	blx	r3
 8000922:	7038      	strb	r0, [r7, #0]
    if (TS_State->touchDetected)
 8000924:	2800      	cmp	r0, #0
 8000926:	d05a      	beq.n	80009de <BSP_TS_GetState+0xd2>
 8000928:	4e30      	ldr	r6, [pc, #192]	; (80009ec <BSP_TS_GetState+0xe0>)
 800092a:	f107 0902 	add.w	r9, r7, #2
 800092e:	4d30      	ldr	r5, [pc, #192]	; (80009f0 <BSP_TS_GetState+0xe4>)
 8000930:	f10d 0b0c 	add.w	fp, sp, #12
 8000934:	ac02      	add	r4, sp, #8
    {
        for (index = 0; index < TS_State->touchDetected; index++)
 8000936:	f04f 0800 	mov.w	r8, #0
 800093a:	783b      	ldrb	r3, [r7, #0]
 800093c:	4543      	cmp	r3, r8
 800093e:	d94e      	bls.n	80009de <BSP_TS_GetState+0xd2>
        {
            /* Get each touch coordinates */
            ft6x06_ts_drv.GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8000940:	4829      	ldr	r0, [pc, #164]	; (80009e8 <BSP_TS_GetState+0xdc>)
 8000942:	465a      	mov	r2, fp
 8000944:	4621      	mov	r1, r4
 8000946:	f8da 3014 	ldr.w	r3, [sl, #20]
 800094a:	7800      	ldrb	r0, [r0, #0]
        for (index = 0; index < TS_State->touchDetected; index++)
 800094c:	f108 0801 	add.w	r8, r8, #1
            ft6x06_ts_drv.GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8000950:	4798      	blx	r3

            if (ts_orientation & TS_SWAP_XY)
 8000952:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <BSP_TS_GetState+0xe8>)
 8000954:	46b4      	mov	ip, r6
 8000956:	46ae      	mov	lr, r5
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	3604      	adds	r6, #4
 800095c:	3504      	adds	r5, #4
 800095e:	0719      	lsls	r1, r3, #28
            {
                tmp = Raw_x[index];
 8000960:	bf41      	itttt	mi
 8000962:	8822      	ldrhmi	r2, [r4, #0]
                Raw_x[index] = Raw_y[index];
 8000964:	f8bb 1000 	ldrhmi.w	r1, [fp]
                Raw_y[index] = tmp;
 8000968:	f8ab 2000 	strhmi.w	r2, [fp]
                Raw_x[index] = Raw_y[index];
 800096c:	8021      	strhmi	r1, [r4, #0]
            }

            if (ts_orientation & TS_SWAP_X)
 800096e:	079a      	lsls	r2, r3, #30
            {
                Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8000970:	bf41      	itttt	mi
 8000972:	8822      	ldrhmi	r2, [r4, #0]
 8000974:	f5c2 7247 	rsbmi	r2, r2, #796	; 0x31c
 8000978:	3203      	addmi	r2, #3
 800097a:	8022      	strhmi	r2, [r4, #0]
            }

            if (ts_orientation & TS_SWAP_Y)
 800097c:	075b      	lsls	r3, r3, #29
            {
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
            }

            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 800097e:	f856 2c04 	ldr.w	r2, [r6, #-4]
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8000982:	bf48      	it	mi
 8000984:	f8bb 3000 	ldrhmi.w	r3, [fp]
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000988:	f834 0b02 	ldrh.w	r0, [r4], #2
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 800098c:	bf42      	ittt	mi
 800098e:	f5c3 73ef 	rsbmi	r3, r3, #478	; 0x1de
 8000992:	3301      	addmi	r3, #1
 8000994:	f8ab 3000 	strhmi.w	r3, [fp]
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000998:	b293      	uxth	r3, r2
 800099a:	4290      	cmp	r0, r2
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 800099c:	f83b 1b02 	ldrh.w	r1, [fp], #2
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 80009a0:	bf8c      	ite	hi
 80009a2:	1ac3      	subhi	r3, r0, r3
 80009a4:	1a1b      	subls	r3, r3, r0
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	9301      	str	r3, [sp, #4]
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 80009aa:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	4299      	cmp	r1, r3

            if ((xDiff + yDiff) > 5)
 80009b2:	9b01      	ldr	r3, [sp, #4]
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 80009b4:	bf8c      	ite	hi
 80009b6:	1a8a      	subhi	r2, r1, r2
 80009b8:	1a52      	subls	r2, r2, r1
 80009ba:	b292      	uxth	r2, r2
            if ((xDiff + yDiff) > 5)
 80009bc:	441a      	add	r2, r3
 80009be:	2a05      	cmp	r2, #5
            {
                _x[index] = Raw_x[index];
 80009c0:	bfc8      	it	gt
 80009c2:	f846 0c04 	strgt.w	r0, [r6, #-4]
                _y[index] = Raw_y[index];
            }


            TS_State->touchX[index] = _x[index];
 80009c6:	f8dc 3000 	ldr.w	r3, [ip]
                _y[index] = Raw_y[index];
 80009ca:	bfc8      	it	gt
 80009cc:	f845 1c04 	strgt.w	r1, [r5, #-4]
            TS_State->touchX[index] = _x[index];
 80009d0:	f829 3b02 	strh.w	r3, [r9], #2
            TS_State->touchY[index] = _y[index];
 80009d4:	f8de 3000 	ldr.w	r3, [lr]
 80009d8:	f8a9 3002 	strh.w	r3, [r9, #2]
        for (index = 0; index < TS_State->touchDetected; index++)
 80009dc:	e7ad      	b.n	800093a <BSP_TS_GetState+0x2e>
        } /* of for(index=0; index < TS_State->touchDetected; index++) */
    } /* end of if(TS_State->touchDetected != 0) */

    return (ts_status);
}
 80009de:	2000      	movs	r0, #0
 80009e0:	b005      	add	sp, #20
 80009e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009e6:	bf00      	nop
 80009e8:	20009770 	.word	0x20009770
 80009ec:	20009774 	.word	0x20009774
 80009f0:	2000977c 	.word	0x2000977c
 80009f4:	20009771 	.word	0x20009771
 80009f8:	20000038 	.word	0x20000038

080009fc <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 80009fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (bsp_ts_initialized)
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
{
 8000a00:	460e      	mov	r6, r1
 8000a02:	4615      	mov	r5, r2
    if (bsp_ts_initialized)
 8000a04:	781c      	ldrb	r4, [r3, #0]
 8000a06:	b15c      	cbz	r4, 8000a20 <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
        BSP_TS_GetState(&state);
 8000a08:	a801      	add	r0, sp, #4
 8000a0a:	f7ff ff7f 	bl	800090c <BSP_TS_GetState>
        if (state.touchDetected)
 8000a0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000a12:	b143      	cbz	r3, 8000a26 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>
            x = state.touchX[0];
 8000a14:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000a18:	6033      	str	r3, [r6, #0]
            y = state.touchY[0];
 8000a1a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8000a1e:	602b      	str	r3, [r5, #0]
}
 8000a20:	4620      	mov	r0, r4
 8000a22:	b004      	add	sp, #16
 8000a24:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8000a26:	461c      	mov	r4, r3
 8000a28:	e7fa      	b.n	8000a20 <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
 8000a2a:	bf00      	nop
 8000a2c:	20009772 	.word	0x20009772

08000a30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8000a30:	2803      	cmp	r0, #3
 8000a32:	d823      	bhi.n	8000a7c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>
 8000a34:	e8df f000 	tbb	[pc, r0]
 8000a38:	1a120b02 	.word	0x1a120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8000a3c:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000a3e:	2140      	movs	r1, #64	; 0x40
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	fab2 f282 	clz	r2, r2
 8000a46:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000a48:	480e      	ldr	r0, [pc, #56]	; (8000a84 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8000a4a:	f005 bc65 	b.w	8006318 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	685a      	ldr	r2, [r3, #4]
 8000a54:	fab2 f282 	clz	r2, r2
 8000a58:	0952      	lsrs	r2, r2, #5
 8000a5a:	e7f5      	b.n	8000a48 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000a5e:	2102      	movs	r1, #2
 8000a60:	4809      	ldr	r0, [pc, #36]	; (8000a88 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 8000a62:	689a      	ldr	r2, [r3, #8]
 8000a64:	fab2 f282 	clz	r2, r2
 8000a68:	0952      	lsrs	r2, r2, #5
 8000a6a:	e7ee      	b.n	8000a4a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000a6e:	2140      	movs	r1, #64	; 0x40
 8000a70:	4806      	ldr	r0, [pc, #24]	; (8000a8c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8000a72:	68da      	ldr	r2, [r3, #12]
 8000a74:	fab2 f282 	clz	r2, r2
 8000a78:	0952      	lsrs	r2, r2, #5
 8000a7a:	e7e6      	b.n	8000a4a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20009784 	.word	0x20009784
 8000a84:	40020800 	.word	0x40020800
 8000a88:	40022400 	.word	0x40022400
 8000a8c:	40021400 	.word	0x40021400

08000a90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8000a90:	2803      	cmp	r0, #3
 8000a92:	d823      	bhi.n	8000adc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>
 8000a94:	e8df f000 	tbb	[pc, r0]
 8000a98:	1a120b02 	.word	0x1a120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8000a9c:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000a9e:	2140      	movs	r1, #64	; 0x40
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	3a00      	subs	r2, #0
 8000aa4:	bf18      	it	ne
 8000aa6:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000aa8:	480e      	ldr	r0, [pc, #56]	; (8000ae4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000aaa:	f005 bc35 	b.w	8006318 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000ab0:	2180      	movs	r1, #128	; 0x80
 8000ab2:	685a      	ldr	r2, [r3, #4]
 8000ab4:	3a00      	subs	r2, #0
 8000ab6:	bf18      	it	ne
 8000ab8:	2201      	movne	r2, #1
 8000aba:	e7f5      	b.n	8000aa8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000abe:	2102      	movs	r1, #2
 8000ac0:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 8000ac2:	689a      	ldr	r2, [r3, #8]
 8000ac4:	3a00      	subs	r2, #0
 8000ac6:	bf18      	it	ne
 8000ac8:	2201      	movne	r2, #1
 8000aca:	e7ee      	b.n	8000aaa <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000ace:	2140      	movs	r1, #64	; 0x40
 8000ad0:	4806      	ldr	r0, [pc, #24]	; (8000aec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8000ad2:	68da      	ldr	r2, [r3, #12]
 8000ad4:	3a00      	subs	r2, #0
 8000ad6:	bf18      	it	ne
 8000ad8:	2201      	movne	r2, #1
 8000ada:	e7e6      	b.n	8000aaa <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20009784 	.word	0x20009784
 8000ae4:	40020800 	.word	0x40020800
 8000ae8:	40022400 	.word	0x40022400
 8000aec:	40021400 	.word	0x40021400

08000af0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8000af0:	2803      	cmp	r0, #3
 8000af2:	d80f      	bhi.n	8000b14 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
 8000af4:	e8df f000 	tbb	[pc, r0]
 8000af8:	0b080602 	.word	0x0b080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000afc:	2140      	movs	r1, #64	; 0x40
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000afe:	4806      	ldr	r0, [pc, #24]	; (8000b18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000b00:	f005 bc0f 	b.w	8006322 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	e7fa      	b.n	8000afe <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000b08:	2102      	movs	r1, #2
 8000b0a:	4804      	ldr	r0, [pc, #16]	; (8000b1c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8000b0c:	e7f8      	b.n	8000b00 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000b0e:	2140      	movs	r1, #64	; 0x40
 8000b10:	4803      	ldr	r0, [pc, #12]	; (8000b20 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8000b12:	e7f5      	b.n	8000b00 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40020800 	.word	0x40020800
 8000b1c:	40022400 	.word	0x40022400
 8000b20:	40021400 	.word	0x40021400

08000b24 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000b24:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8000b26:	2803      	cmp	r0, #3
 8000b28:	d813      	bhi.n	8000b52 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2e>
 8000b2a:	e8df f000 	tbb	[pc, r0]
 8000b2e:	0a02      	.short	0x0a02
 8000b30:	0f0c      	.short	0x0f0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000b32:	2140      	movs	r1, #64	; 0x40
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000b34:	4808      	ldr	r0, [pc, #32]	; (8000b58 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x34>)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000b36:	f005 fbe9 	bl	800630c <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8000b3a:	1e43      	subs	r3, r0, #1
 8000b3c:	4258      	negs	r0, r3
 8000b3e:	4158      	adcs	r0, r3
 8000b40:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000b42:	2180      	movs	r1, #128	; 0x80
 8000b44:	e7f6      	b.n	8000b34 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000b46:	2102      	movs	r1, #2
 8000b48:	4804      	ldr	r0, [pc, #16]	; (8000b5c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
 8000b4a:	e7f4      	b.n	8000b36 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000b4c:	2140      	movs	r1, #64	; 0x40
 8000b4e:	4804      	ldr	r0, [pc, #16]	; (8000b60 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8000b50:	e7f1      	b.n	8000b36 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8000b52:	2000      	movs	r0, #0
 8000b54:	e7f1      	b.n	8000b3a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8000b56:	bf00      	nop
 8000b58:	40020800 	.word	0x40020800
 8000b5c:	40022400 	.word	0x40022400
 8000b60:	40021400 	.word	0x40021400

08000b64 <_ZN8touchgfx4GPIO4initEv>:
{
 8000b64:	b570      	push	{r4, r5, r6, lr}
 8000b66:	4d08      	ldr	r5, [pc, #32]	; (8000b88 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8000b68:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8000b6a:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000b6c:	b2e0      	uxtb	r0, r4
 8000b6e:	f7ff ffd9 	bl	8000b24 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8000b72:	b118      	cbz	r0, 8000b7c <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8000b74:	682b      	ldr	r3, [r5, #0]
 8000b76:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8000b78:	bf18      	it	ne
 8000b7a:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8000b7c:	3401      	adds	r4, #1
 8000b7e:	3504      	adds	r5, #4
 8000b80:	2c05      	cmp	r4, #5
 8000b82:	d1f3      	bne.n	8000b6c <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8000b84:	bd70      	pop	{r4, r5, r6, pc}
 8000b86:	bf00      	nop
 8000b88:	20009784 	.word	0x20009784

08000b8c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8000b8c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8000b8e:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8000b92:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8000b96:	4770      	bx	lr

08000b98 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8000b98:	2000      	movs	r0, #0
 8000b9a:	4770      	bx	lr

08000b9c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000b9c:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000b9e:	3900      	subs	r1, #0
 8000ba0:	4b02      	ldr	r3, [pc, #8]	; (8000bac <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8000ba2:	bf18      	it	ne
 8000ba4:	2101      	movne	r1, #1
 8000ba6:	7019      	strb	r1, [r3, #0]
    }
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20024417 	.word	0x20024417

08000bb0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	4770      	bx	lr

08000bb4 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8000bb4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000bb6:	b10b      	cbz	r3, 8000bbc <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8000bb8:	4608      	mov	r0, r1
 8000bba:	4718      	bx	r3
        }
    }
 8000bbc:	4770      	bx	lr

08000bbe <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8000bbe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000bc2:	4770      	bx	lr

08000bc4 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8000bc4:	6840      	ldr	r0, [r0, #4]
 8000bc6:	6803      	ldr	r3, [r0, #0]
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	4718      	bx	r3

08000bcc <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8000bcc:	4b01      	ldr	r3, [pc, #4]	; (8000bd4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8000bce:	6818      	ldr	r0, [r3, #0]
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20009794 	.word	0x20009794

08000bd8 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000bd8:	4770      	bx	lr
	...

08000bdc <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000bdc:	b4f0      	push	{r4, r5, r6, r7}
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000bde:	2300      	movs	r3, #0
 8000be0:	4c10      	ldr	r4, [pc, #64]	; (8000c24 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8000be2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000be6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000bea:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000bee:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bf2:	f3c3 05c9 	ubfx	r5, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000bf6:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000bfa:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000bfc:	ea03 0c06 	and.w	ip, r3, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c00:	462a      	mov	r2, r5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000c02:	ea4c 7782 	orr.w	r7, ip, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000c06:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000c08:	f8c4 7274 	str.w	r7, [r4, #628]	; 0x274
      } while (ways-- != 0U);
 8000c0c:	d2f9      	bcs.n	8000c02 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
    } while(sets-- != 0U);
 8000c0e:	3b20      	subs	r3, #32
 8000c10:	f113 0f20 	cmn.w	r3, #32
 8000c14:	d1f2      	bne.n	8000bfc <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x20>
 8000c16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c1a:	f3bf 8f6f 	isb	sy
    /* USER CODE END flushFrameBuffer step 1 */

    /* USER CODE BEGIN flushFrameBuffer step 2 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
    /* USER CODE END flushFrameBuffer step 2 */
}
 8000c1e:	bcf0      	pop	{r4, r5, r6, r7}
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000c20:	f001 baca 	b.w	80021b8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8000c28:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8000c2a:	f001 fa59 	bl	80020e0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2e:	4b02      	ldr	r3, [pc, #8]	; (8000c38 <_ZN11TouchGFXHAL16enableInterruptsEv+0x10>)
 8000c30:	2204      	movs	r2, #4
 8000c32:	60da      	str	r2, [r3, #12]
    NVIC_EnableIRQ(DSI_IRQn);
    /* USER CODE END enableInterrupts */
}
 8000c34:	bd08      	pop	{r3, pc}
 8000c36:	bf00      	nop
 8000c38:	e000e100 	.word	0xe000e100

08000c3c <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8000c3c:	b510      	push	{r4, lr}
 8000c3e:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8000c40:	f001 fbc2 	bl	80023c8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8000c44:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8000c48:	b113      	cbz	r3, 8000c50 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8000c4a:	4b02      	ldr	r3, [pc, #8]	; (8000c54 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	701a      	strb	r2, [r3, #0]
    }
}
 8000c50:	bd10      	pop	{r4, pc}
 8000c52:	bf00      	nop
 8000c54:	20000014 	.word	0x20000014

08000c58 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8000c58:	f001 ba4b 	b.w	80020f2 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08000c5c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000c5c:	b510      	push	{r4, lr}
 8000c5e:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000c60:	f00c f966 	bl	800cf30 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000c64:	6823      	ldr	r3, [r4, #0]
 8000c66:	4620      	mov	r0, r4
 8000c68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 8000c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8000c70:	4718      	bx	r3

08000c72 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8000c72:	f00b bbc3 	b.w	800c3fc <_ZN8touchgfx3HAL16flushFrameBufferEv>

08000c76 <_ZN11TouchGFXHALD0Ev>:
 8000c76:	b510      	push	{r4, lr}
 8000c78:	4604      	mov	r4, r0
 8000c7a:	217c      	movs	r1, #124	; 0x7c
 8000c7c:	f01b fe34 	bl	801c8e8 <_ZdlPvj>
 8000c80:	4620      	mov	r0, r4
 8000c82:	bd10      	pop	{r4, pc}

08000c84 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8000c84:	4b02      	ldr	r3, [pc, #8]	; (8000c90 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8000c8a:	f00b bbf3 	b.w	800c474 <_ZN8touchgfx3HAL10beginFrameEv>
 8000c8e:	bf00      	nop
 8000c90:	20000014 	.word	0x20000014

08000c94 <_ZN11TouchGFXHAL10initializeEv>:
{
 8000c94:	b538      	push	{r3, r4, r5, lr}
 8000c96:	4604      	mov	r4, r0
    GPIO::init();
 8000c98:	f7ff ff64 	bl	8000b64 <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 8000c9c:	4d08      	ldr	r5, [pc, #32]	; (8000cc0 <_ZN11TouchGFXHAL10initializeEv+0x2c>)
    TouchGFXGeneratedHAL::initialize();
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	f001 fa64 	bl	800216c <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8000ca4:	2300      	movs	r3, #0
    instrumentation.init();
 8000ca6:	4628      	mov	r0, r5
 8000ca8:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8000cac:	f7ff fd1a 	bl	80006e4 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8000cb0:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8000cb2:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8000cb4:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
        buttonController = btnCtrl;
 8000cb8:	4b02      	ldr	r3, [pc, #8]	; (8000cc4 <_ZN11TouchGFXHAL10initializeEv+0x30>)
 8000cba:	6163      	str	r3, [r4, #20]
}
 8000cbc:	bd38      	pop	{r3, r4, r5, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2000979c 	.word	0x2000979c
 8000cc4:	200097a8 	.word	0x200097a8

08000cc8 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8000cc8:	6803      	ldr	r3, [r0, #0]
{
 8000cca:	4604      	mov	r4, r0
 8000ccc:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8000cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cd2:	4798      	blx	r3
    enableInterrupts();
 8000cd4:	6823      	ldr	r3, [r4, #0]
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000cda:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8000cdc:	f000 fef4 	bl	8001ac8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8000ce0:	6823      	ldr	r3, [r4, #0]
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ce6:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2329      	movs	r3, #41	; 0x29
 8000cec:	2215      	movs	r2, #21
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8000cf0:	9100      	str	r1, [sp, #0]
 8000cf2:	f005 f8fc 	bl	8005eee <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8000cf6:	f000 fee7 	bl	8001ac8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000cfa:	6823      	ldr	r3, [r4, #0]
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d00:	4798      	blx	r3
    for (;;)
 8000d02:	e7f8      	b.n	8000cf6 <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8000d04:	2000eaf8 	.word	0x2000eaf8

08000d08 <_ZN11TouchGFXHAL19configureInterruptsEv>:
{
 8000d08:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::configureInterrupts();
 8000d0a:	f001 f9e1 	bl	80020d0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2107      	movs	r1, #7
 8000d12:	205a      	movs	r0, #90	; 0x5a
 8000d14:	f004 f9ee 	bl	80050f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2107      	movs	r1, #7
 8000d1c:	2062      	movs	r0, #98	; 0x62
}
 8000d1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8000d22:	f004 b9e7 	b.w	80050f4 <HAL_NVIC_SetPriority>

08000d26 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8000d26:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8000d2a:	b11b      	cbz	r3, 8000d34 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8000d2c:	6840      	ldr	r0, [r0, #4]
 8000d2e:	6803      	ldr	r3, [r0, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4718      	bx	r3
    }
 8000d34:	4618      	mov	r0, r3
 8000d36:	4770      	bx	lr

08000d38 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000d38:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8000d3e:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8000d40:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 8000d44:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8000d46:	428c      	cmp	r4, r1
 8000d48:	d009      	beq.n	8000d5e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8000d4a:	b93a      	cbnz	r2, 8000d5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8000d4c:	490a      	ldr	r1, [pc, #40]	; (8000d78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000d4e:	4a0b      	ldr	r2, [pc, #44]	; (8000d7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8000d50:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000d52:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8000d54:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8000d56:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000d58:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8000d5a:	701a      	strb	r2, [r3, #0]
        }
    }
 8000d5c:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8000d5e:	2a00      	cmp	r2, #0
 8000d60:	d0fc      	beq.n	8000d5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000d62:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000d64:	4904      	ldr	r1, [pc, #16]	; (8000d78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000d66:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000d68:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000d6a:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8000d6c:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8000d6e:	2200      	movs	r2, #0
 8000d70:	e7f3      	b.n	8000d5a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8000d72:	bf00      	nop
 8000d74:	20024410 	.word	0x20024410
 8000d78:	2002440e 	.word	0x2002440e
 8000d7c:	2002440c 	.word	0x2002440c

08000d80 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8000d80:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d803      	bhi.n	8000d92 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d905      	bls.n	8000d9e <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8000d94:	219e      	movs	r1, #158	; 0x9e
 8000d96:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8000d98:	4807      	ldr	r0, [pc, #28]	; (8000db8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8000d9a:	f01b fdd3 	bl	801c944 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8000da0:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000da4:	801a      	strh	r2, [r3, #0]
    }
 8000da6:	bd08      	pop	{r3, pc}
 8000da8:	2002440c 	.word	0x2002440c
 8000dac:	2002440e 	.word	0x2002440e
 8000db0:	0801dc08 	.word	0x0801dc08
 8000db4:	0801dc6b 	.word	0x0801dc6b
 8000db8:	0801dcae 	.word	0x0801dcae
 8000dbc:	20024412 	.word	0x20024412
 8000dc0:	20024414 	.word	0x20024414

08000dc4 <_ZN11TouchGFXHAL17disableInterruptsEv>:
{
 8000dc4:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::disableInterrupts();
 8000dc6:	f001 fb31 	bl	800242c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <_ZN11TouchGFXHAL17disableInterruptsEv+0x18>)
 8000dcc:	2204      	movs	r2, #4
 8000dce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dd6:	f3bf 8f6f 	isb	sy
}
 8000dda:	bd08      	pop	{r3, pc}
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8000de0:	b570      	push	{r4, r5, r6, lr}
 8000de2:	460d      	mov	r5, r1
 8000de4:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8000de8:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8000dea:	b935      	cbnz	r5, 8000dfa <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8000dec:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8000dee:	f240 21d2 	movw	r1, #722	; 0x2d2
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8000df4:	480a      	ldr	r0, [pc, #40]	; (8000e20 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8000df6:	f01b fda5 	bl	801c944 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8000dfa:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8000dfe:	3a00      	subs	r2, #0
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8000e02:	bf18      	it	ne
 8000e04:	2201      	movne	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8000e08:	6803      	ldr	r3, [r0, #0]
}
 8000e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e12:	4718      	bx	r3
 8000e14:	20009794 	.word	0x20009794
 8000e18:	0801dcf3 	.word	0x0801dcf3
 8000e1c:	0801dd2b 	.word	0x0801dd2b
 8000e20:	0801dcae 	.word	0x0801dcae
 8000e24:	20024416 	.word	0x20024416

08000e28 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lastRenderMethod(HARDWARE)
 8000e28:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8000e2c:	60c3      	str	r3, [r0, #12]
 8000e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e32:	2300      	movs	r3, #0
 8000e34:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
 8000e38:	4a1e      	ldr	r2, [pc, #120]	; (8000eb4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8000e3a:	8503      	strh	r3, [r0, #40]	; 0x28
 8000e3c:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8000e40:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000e42:	8603      	strh	r3, [r0, #48]	; 0x30
 8000e44:	6603      	str	r3, [r0, #96]	; 0x60
 8000e46:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
 8000e4a:	6703      	str	r3, [r0, #112]	; 0x70
 8000e4c:	e9c0 2319 	strd	r2, r3, [r0, #100]	; 0x64
 8000e50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8000e54:	b570      	push	{r4, r5, r6, lr}
 8000e56:	6742      	str	r2, [r0, #116]	; 0x74
 8000e58:	2201      	movs	r2, #1
                           height)
 8000e5a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8000e5e:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8000e62:	3520      	adds	r5, #32
 8000e64:	e9c0 3304 	strd	r3, r3, [r0, #16]
              inProgress(false)
 8000e68:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8000e6c:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8000e70:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
 8000e74:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8000e78:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8000e7c:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
 8000e80:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 8000e84:	b2ad      	uxth	r5, r5
        instance = this;
 8000e86:	4a0c      	ldr	r2, [pc, #48]	; (8000eb8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000e88:	42b5      	cmp	r5, r6
        instance = this;
 8000e8a:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8000e8c:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8000e8e:	8015      	strh	r5, [r2, #0]
 8000e90:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 8000e92:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000e94:	bf28      	it	cs
 8000e96:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8000e98:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000e9a:	bf38      	it	cc
 8000e9c:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8000e9e:	8016      	strh	r6, [r2, #0]
 8000ea0:	4a09      	ldr	r2, [pc, #36]	; (8000ec8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000ea2:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8000ea6:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8000ea8:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8000eaa:	7013      	strb	r3, [r2, #0]
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 8000eae:	6003      	str	r3, [r0, #0]
}
 8000eb0:	bd70      	pop	{r4, r5, r6, pc}
 8000eb2:	bf00      	nop
 8000eb4:	01000001 	.word	0x01000001
 8000eb8:	20024418 	.word	0x20024418
 8000ebc:	2002440c 	.word	0x2002440c
 8000ec0:	20024412 	.word	0x20024412
 8000ec4:	2002440e 	.word	0x2002440e
 8000ec8:	20024414 	.word	0x20024414
 8000ecc:	20024410 	.word	0x20024410
 8000ed0:	0801dd84 	.word	0x0801dd84

08000ed4 <OTM8009A_IO_Delay>:
      * @brief  OTM8009A delay
      * @param  Delay: Delay in ms
      */
    __weak void OTM8009A_IO_Delay(uint32_t Delay)
    {
        HAL_Delay(Delay);
 8000ed4:	f004 b8ea 	b.w	80050ac <HAL_Delay>

08000ed8 <DSI_IO_WriteCmd>:
     * @param  pParams: Pointer to parameter values table.
     * @retval HAL status
     */
    void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t* pParams)
    {
        if (NbrParams <= 1)
 8000ed8:	2801      	cmp	r0, #1
    {
 8000eda:	b507      	push	{r0, r1, r2, lr}
        if (NbrParams <= 1)
 8000edc:	d80a      	bhi.n	8000ef4 <DSI_IO_WriteCmd+0x1c>
        {
            HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 8000ede:	784b      	ldrb	r3, [r1, #1]
 8000ee0:	2215      	movs	r2, #21
 8000ee2:	4809      	ldr	r0, [pc, #36]	; (8000f08 <DSI_IO_WriteCmd+0x30>)
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	780b      	ldrb	r3, [r1, #0]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	f005 f800 	bl	8005eee <HAL_DSI_ShortWrite>
        }
        else
        {
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
        }
    }
 8000eee:	b003      	add	sp, #12
 8000ef0:	f85d fb04 	ldr.w	pc, [sp], #4
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
 8000ef4:	9101      	str	r1, [sp, #4]
 8000ef6:	2239      	movs	r2, #57	; 0x39
 8000ef8:	5c0b      	ldrb	r3, [r1, r0]
 8000efa:	2100      	movs	r1, #0
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	4603      	mov	r3, r0
 8000f00:	4801      	ldr	r0, [pc, #4]	; (8000f08 <DSI_IO_WriteCmd+0x30>)
 8000f02:	f005 f805 	bl	8005f10 <HAL_DSI_LongWrite>
    }
 8000f06:	e7f2      	b.n	8000eee <DSI_IO_WriteCmd+0x16>
 8000f08:	2000eaf8 	.word	0x2000eaf8

08000f0c <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8000f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        static uint8_t ScanLineParams[2];

        uint16_t scanline = 533;
        ScanLineParams[0] = scanline >> 8;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <LCD_ReqTear+0x30>)
        ScanLineParams[1] = scanline & 0x00FF;
 8000f12:	2515      	movs	r5, #21

        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8000f14:	4c0a      	ldr	r4, [pc, #40]	; (8000f40 <LCD_ReqTear+0x34>)
        ScanLineParams[0] = scanline >> 8;
 8000f16:	7013      	strb	r3, [r2, #0]
        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8000f18:	2100      	movs	r1, #0
        ScanLineParams[1] = scanline & 0x00FF;
 8000f1a:	7055      	strb	r5, [r2, #1]
        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	9201      	str	r2, [sp, #4]
 8000f20:	2244      	movs	r2, #68	; 0x44
 8000f22:	9200      	str	r2, [sp, #0]
 8000f24:	2239      	movs	r2, #57	; 0x39
 8000f26:	f004 fff3 	bl	8005f10 <HAL_DSI_LongWrite>
        // set_tear_on
        HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2335      	movs	r3, #53	; 0x35
 8000f2e:	462a      	mov	r2, r5
 8000f30:	4620      	mov	r0, r4
 8000f32:	9100      	str	r1, [sp, #0]
 8000f34:	f004 ffdb 	bl	8005eee <HAL_DSI_ShortWrite>
    }
 8000f38:	b003      	add	sp, #12
 8000f3a:	bd30      	pop	{r4, r5, pc}
 8000f3c:	200097ac 	.word	0x200097ac
 8000f40:	2000eaf8 	.word	0x2000eaf8

08000f44 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8000f44:	b507      	push	{r0, r1, r2, lr}
 8000f46:	9001      	str	r0, [sp, #4]
    LCD_ReqTear();
 8000f48:	f7ff ffe0 	bl	8000f0c <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x48>)
 8000f4e:	2202      	movs	r2, #2
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8000f50:	9801      	ldr	r0, [sp, #4]
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8000f5e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8000f62:	f042 0201 	orr.w	r2, r2, #1
 8000f66:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8000f6a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8000f6e:	f042 0202 	orr.w	r2, r2, #2
 8000f72:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_LTDC_ENABLE_IT(&hltdc, (LTDC_IT_LI | LTDC_IT_FU)); /* Enable line and FIFO underrun interrupts */
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x4c>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000f7c:	f043 0303 	orr.w	r3, r3, #3
 8000f80:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000f82:	b003      	add	sp, #12
 8000f84:	f85d eb04 	ldr.w	lr, [sp], #4
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8000f88:	f001 b8b2 	b.w	80020f0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
 8000f8c:	2000eaf8 	.word	0x2000eaf8
 8000f90:	2000ebc0 	.word	0x2000ebc0

08000f94 <LCD_SetUpdateRegion>:

    void LCD_SetUpdateRegion(int idx)
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <LCD_SetUpdateRegion+0x20>)
    {
 8000f96:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8000f98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000f9c:	232a      	movs	r3, #42	; 0x2a
 8000f9e:	2239      	movs	r2, #57	; 0x39
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2304      	movs	r3, #4
 8000fa6:	9001      	str	r0, [sp, #4]
 8000fa8:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <LCD_SetUpdateRegion+0x24>)
 8000faa:	f004 ffb1 	bl	8005f10 <HAL_DSI_LongWrite>
    }
 8000fae:	b003      	add	sp, #12
 8000fb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fb4:	20000004 	.word	0x20000004
 8000fb8:	2000eaf8 	.word	0x2000eaf8

08000fbc <HAL_DSI_TearingEffectCallback>:
    // {
    //     HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
    // }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8000fbc:	b570      	push	{r4, r5, r6, lr}
        return instance;
 8000fbe:	4d15      	ldr	r5, [pc, #84]	; (8001014 <HAL_DSI_TearingEffectCallback+0x58>)
 8000fc0:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f7ff fd34 	bl	8000a30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8000fc8:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8000fca:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8000fce:	3301      	adds	r3, #1
 8000fd0:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8000fd4:	f000 fd6c 	bl	8001ab0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HAL_DSI_TearingEffectCallback+0x5c>)
        return instance;
 8000fda:	6828      	ldr	r0, [r5, #0]
 8000fdc:	781a      	ldrb	r2, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8000fde:	781b      	ldrb	r3, [r3, #0]
        lockDMAToPorch = enableLock;
 8000fe0:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a
 8000fe4:	b123      	cbz	r3, 8000ff0 <HAL_DSI_TearingEffectCallback+0x34>
 8000fe6:	4d0d      	ldr	r5, [pc, #52]	; (800101c <HAL_DSI_TearingEffectCallback+0x60>)
 8000fe8:	782b      	ldrb	r3, [r5, #0]
 8000fea:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8000fee:	b123      	cbz	r3, 8000ffa <HAL_DSI_TearingEffectCallback+0x3e>
            HAL_DSI_Refresh(hdsi);
            displayRefreshing = true;
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
 8000ff0:	2000      	movs	r0, #0
        }
    }
 8000ff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8000ff6:	f7ff bd4b 	b.w	8000a90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                HAL::getInstance()->swapFrameBuffers();
 8000ffa:	f00b ff99 	bl	800cf30 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            updateRegion = 0;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_DSI_TearingEffectCallback+0x64>)
            LCD_SetUpdateRegion(updateRegion);
 8001000:	4630      	mov	r0, r6
            updateRegion = 0;
 8001002:	601e      	str	r6, [r3, #0]
            LCD_SetUpdateRegion(updateRegion);
 8001004:	f7ff ffc6 	bl	8000f94 <LCD_SetUpdateRegion>
            HAL_DSI_Refresh(hdsi);
 8001008:	4620      	mov	r0, r4
 800100a:	f004 ff60 	bl	8005ece <HAL_DSI_Refresh>
            displayRefreshing = true;
 800100e:	2301      	movs	r3, #1
 8001010:	702b      	strb	r3, [r5, #0]
    }
 8001012:	bd70      	pop	{r4, r5, r6, pc}
 8001014:	20024418 	.word	0x20024418
 8001018:	20000014 	.word	0x20000014
 800101c:	200097ae 	.word	0x200097ae
 8001020:	20009798 	.word	0x20009798

08001024 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
        updateRegion++;
 8001024:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <HAL_DSI_EndOfRefreshCallback+0xd0>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	3201      	adds	r2, #1
    {
 800102a:	b570      	push	{r4, r5, r6, lr}
        if (updateRegion < 4)
 800102c:	2a03      	cmp	r2, #3
        updateRegion++;
 800102e:	601a      	str	r2, [r3, #0]
        {
            DSI->WCR &= ~(DSI_WCR_DSIEN);
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 8001030:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <HAL_DSI_EndOfRefreshCallback+0xd4>)
    {
 8001032:	4605      	mov	r5, r0
 8001034:	4c31      	ldr	r4, [pc, #196]	; (80010fc <HAL_DSI_EndOfRefreshCallback+0xd8>)
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 8001036:	6819      	ldr	r1, [r3, #0]
 8001038:	4b31      	ldr	r3, [pc, #196]	; (8001100 <HAL_DSI_EndOfRefreshCallback+0xdc>)
        if (updateRegion < 4)
 800103a:	dc2e      	bgt.n	800109a <HAL_DSI_EndOfRefreshCallback+0x76>
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 800103c:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8001040:	f020 0008 	bic.w	r0, r0, #8
 8001044:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 8001048:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800104c:	fb00 1102 	mla	r1, r0, r2, r1
            LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
            LTDC_Layer1->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
            LTDC_Layer1->CFBLR = ((832 * 2) << 16) | ((REAL_WIDTH) * 2 + 3);

            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
            LCD_SetUpdateRegion(updateRegion);
 8001050:	4610      	mov	r0, r2
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 8001052:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
                ADJUSTED_WIDTH += 32;
 8001056:	bf0c      	ite	eq
 8001058:	23e8      	moveq	r3, #232	; 0xe8
            uint16_t ADJUSTED_WIDTH = 200;
 800105a:	23c8      	movne	r3, #200	; 0xc8
            LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2; //adj
 800105c:	4928      	ldr	r1, [pc, #160]	; (8001100 <HAL_DSI_EndOfRefreshCallback+0xdc>)
 800105e:	3302      	adds	r3, #2
 8001060:	041b      	lsls	r3, r3, #16
 8001062:	f443 73f1 	orr.w	r3, r3, #482	; 0x1e2
 8001066:	610b      	str	r3, [r1, #16]
            LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8001068:	4b26      	ldr	r3, [pc, #152]	; (8001104 <HAL_DSI_EndOfRefreshCallback+0xe0>)
 800106a:	614b      	str	r3, [r1, #20]
            LTDC_Layer1->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 800106c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
            LTDC_Layer1->CFBLR = ((832 * 2) << 16) | ((REAL_WIDTH) * 2 + 3);
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <HAL_DSI_EndOfRefreshCallback+0xe4>)
 8001076:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800107a:	2301      	movs	r3, #1
 800107c:	624b      	str	r3, [r1, #36]	; 0x24
            LCD_SetUpdateRegion(updateRegion);
 800107e:	f7ff ff89 	bl	8000f94 <LCD_SetUpdateRegion>

            DSI->WCR |= DSI_WCR_DSIEN;
 8001082:	4a1e      	ldr	r2, [pc, #120]	; (80010fc <HAL_DSI_EndOfRefreshCallback+0xd8>)
            HAL_DSI_Refresh(hdsi);
 8001084:	4628      	mov	r0, r5
            DSI->WCR |= DSI_WCR_DSIEN;
 8001086:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 800108a:	f043 0308 	orr.w	r3, r3, #8
        //             // Signal to the framework that display update has finished.
        //             HAL::getInstance()->frontPorchEntered();
        //         }
        //     }
        // }
    }
 800108e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DSI->WCR |= DSI_WCR_DSIEN;
 8001092:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
            HAL_DSI_Refresh(hdsi);
 8001096:	f004 bf1a 	b.w	8005ece <HAL_DSI_Refresh>
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 800109a:	f8d4 2404 	ldr.w	r2, [r4, #1028]	; 0x404
            LCD_SetUpdateRegion(0);
 800109e:	2000      	movs	r0, #0
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 80010a0:	f022 0208 	bic.w	r2, r2, #8
 80010a4:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
            LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 80010a8:	4a18      	ldr	r2, [pc, #96]	; (800110c <HAL_DSI_EndOfRefreshCallback+0xe8>)
            LTDC_Layer1->CFBAR = (uint32_t)currFbBase;
 80010aa:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
            LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 80010ae:	611a      	str	r2, [r3, #16]
            LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 80010b0:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 80010b4:	615a      	str	r2, [r3, #20]
            LTDC_Layer1->WHPCR = ((WIDTH + 2) << 16) | 3;
 80010b6:	4a16      	ldr	r2, [pc, #88]	; (8001110 <HAL_DSI_EndOfRefreshCallback+0xec>)
 80010b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            LTDC_Layer1->CFBLR = (((832 * 2) << 16) | ((WIDTH * 2) + 3));
 80010bc:	4a12      	ldr	r2, [pc, #72]	; (8001108 <HAL_DSI_EndOfRefreshCallback+0xe4>)
 80010be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80010c2:	2201      	movs	r2, #1
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24
            LCD_SetUpdateRegion(0);
 80010c6:	f7ff ff65 	bl	8000f94 <LCD_SetUpdateRegion>
            DSI->WCR |= DSI_WCR_DSIEN;
 80010ca:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
            GPIO::clear(GPIO::VSYNC_FREQ);
 80010ce:	2000      	movs	r0, #0
            DSI->WCR |= DSI_WCR_DSIEN;
 80010d0:	f043 0308 	orr.w	r3, r3, #8
 80010d4:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
            GPIO::clear(GPIO::VSYNC_FREQ);
 80010d8:	f7ff fcda 	bl	8000a90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            displayRefreshing = false;
 80010dc:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <HAL_DSI_EndOfRefreshCallback+0xf0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
        return instance;
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_DSI_EndOfRefreshCallback+0xf4>)
 80010e4:	6818      	ldr	r0, [r3, #0]
            if (HAL::getInstance())
 80010e6:	b120      	cbz	r0, 80010f2 <HAL_DSI_EndOfRefreshCallback+0xce>
        allowDMATransfers();
 80010e8:	6803      	ldr	r3, [r0, #0]
    }
 80010ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80010ee:	6a1b      	ldr	r3, [r3, #32]
 80010f0:	4718      	bx	r3
 80010f2:	bd70      	pop	{r4, r5, r6, pc}
 80010f4:	20009798 	.word	0x20009798
 80010f8:	20009794 	.word	0x20009794
 80010fc:	40016c00 	.word	0x40016c00
 8001100:	40016800 	.word	0x40016800
 8001104:	00ca01e3 	.word	0x00ca01e3
 8001108:	06800193 	.word	0x06800193
 800110c:	00ca01e2 	.word	0x00ca01e2
 8001110:	00ca0003 	.word	0x00ca0003
 8001114:	200097ae 	.word	0x200097ae
 8001118:	20024418 	.word	0x20024418

0800111c <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 800111c:	4601      	mov	r1, r0
 800111e:	b508      	push	{r3, lr}
        return instance;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <IdleTaskHook+0x14>)
 8001122:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001124:	b101      	cbz	r1, 8001128 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001126:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001128:	f00b ff1c 	bl	800cf64 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 800112c:	2001      	movs	r0, #1
 800112e:	bd08      	pop	{r3, pc}
 8001130:	20024418 	.word	0x20024418

08001134 <_GLOBAL__sub_I_displayRefreshing>:
          cc_in(0)
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <_GLOBAL__sub_I_displayRefreshing+0x18>)
 8001136:	2200      	movs	r2, #0
{
class KeySampler : public ButtonController
{
public:
    KeySampler()
    {
 8001138:	4805      	ldr	r0, [pc, #20]	; (8001150 <_GLOBAL__sub_I_displayRefreshing+0x1c>)
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <_GLOBAL__sub_I_displayRefreshing+0x20>)
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	4b05      	ldr	r3, [pc, #20]	; (8001158 <_GLOBAL__sub_I_displayRefreshing+0x24>)
 8001144:	6003      	str	r3, [r0, #0]
        init();
 8001146:	f7ff bb0b 	b.w	8000760 <_ZN8touchgfx10KeySampler4initEv>
 800114a:	bf00      	nop
 800114c:	2000979c 	.word	0x2000979c
 8001150:	200097a8 	.word	0x200097a8
 8001154:	0801db2c 	.word	0x0801db2c
 8001158:	0801db54 	.word	0x0801db54

0800115c <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 800115c:	6940      	ldr	r0, [r0, #20]
 800115e:	4770      	bx	lr

08001160 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 8001160:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8001164:	4770      	bx	lr

08001166 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 8001166:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001168:	b923      	cbnz	r3, 8001174 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 800116a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800116c:	3800      	subs	r0, #0
 800116e:	bf18      	it	ne
 8001170:	2001      	movne	r0, #1
 8001172:	4770      	bx	lr
 8001174:	2001      	movs	r0, #1
}
 8001176:	4770      	bx	lr

08001178 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 8001178:	6880      	ldr	r0, [r0, #8]
 800117a:	4770      	bx	lr

0800117c <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 800117c:	4770      	bx	lr

0800117e <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 800117e:	3004      	adds	r0, #4
{
 8001180:	b510      	push	{r4, lr}
 8001182:	460c      	mov	r4, r1
    *data = videoInfo;
 8001184:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8001186:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800118a:	bd10      	pop	{r4, pc}

0800118c <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 800118c:	4770      	bx	lr
	...

08001190 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8001190:	b508      	push	{r3, lr}
    assert(0);
 8001192:	4a03      	ldr	r2, [pc, #12]	; (80011a0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8001194:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8001198:	4b02      	ldr	r3, [pc, #8]	; (80011a4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 800119a:	4803      	ldr	r0, [pc, #12]	; (80011a8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 800119c:	f01b fbd2 	bl	801c944 <__assert_func>
 80011a0:	0801de54 	.word	0x0801de54
 80011a4:	0801fcf7 	.word	0x0801fcf7
 80011a8:	0801deaf 	.word	0x0801deaf

080011ac <_ZN20HardwareMJPEGDecoderD0Ev>:
 80011ac:	b510      	push	{r4, lr}
 80011ae:	4604      	mov	r4, r0
 80011b0:	2144      	movs	r1, #68	; 0x44
 80011b2:	f01b fb99 	bl	801c8e8 <_ZdlPvj>
 80011b6:	4620      	mov	r0, r4
 80011b8:	bd10      	pop	{r4, pc}
	...

080011bc <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80011bc:	b538      	push	{r3, r4, r5, lr}
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80011be:	2500      	movs	r5, #0
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <_ZN20HardwareMJPEGDecoderC1Ev+0x44>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80011c2:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80011c4:	6003      	str	r3, [r0, #0]
 80011c6:	63c5      	str	r5, [r0, #60]	; 0x3c
 80011c8:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
 80011cc:	e9c0 5505 	strd	r5, r5, [r0, #20]
 80011d0:	e9c0 5507 	strd	r5, r5, [r0, #28]
 80011d4:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
 80011d8:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
 80011dc:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
    videoInfo.frame_width = 0;
 80011e0:	e9c0 5503 	strd	r5, r5, [r0, #12]
    videoInfo.number_of_frames = 0;
 80011e4:	e9c0 5501 	strd	r5, r5, [r0, #4]
    TGFX_JPEG_InitColorTables();
 80011e8:	f001 fd18 	bl	8002c1c <TGFX_JPEG_InitColorTables>
    semDecodingDone = SEM_CREATE();
 80011ec:	462a      	mov	r2, r5
 80011ee:	4629      	mov	r1, r5
 80011f0:	2001      	movs	r0, #1
 80011f2:	f008 f93d 	bl	8009470 <osSemaphoreNew>
 80011f6:	4b03      	ldr	r3, [pc, #12]	; (8001204 <_ZN20HardwareMJPEGDecoderC1Ev+0x48>)
 80011f8:	6018      	str	r0, [r3, #0]
}
 80011fa:	4620      	mov	r0, r4
 80011fc:	bd38      	pop	{r3, r4, r5, pc}
 80011fe:	bf00      	nop
 8001200:	0801e134 	.word	0x0801e134
 8001204:	200097f4 	.word	0x200097f4

08001208 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 8001208:	b420      	push	{r5}
 800120a:	460d      	mov	r5, r1
 800120c:	4611      	mov	r1, r2
 800120e:	461a      	mov	r2, r3
    if (reader != 0)
 8001210:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001212:	b13b      	cbz	r3, 8001224 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8001214:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001216:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001218:	1aed      	subs	r5, r5, r3
        src = (const char*)movieData + offset;
 800121a:	4428      	add	r0, r5
}
 800121c:	f85d 5b04 	ldr.w	r5, [sp], #4
    return strncmp(src, str, num);
 8001220:	f01c b84a 	b.w	801d2b8 <strncmp>
        src = (const char*)movieData + offset;
 8001224:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001226:	e7f8      	b.n	800121a <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08001228 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8001228:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 800122a:	b510      	push	{r4, lr}
    if (reader != 0)
 800122c:	b173      	cbz	r3, 800124c <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 800122e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8001230:	6b42      	ldr	r2, [r0, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 8001232:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8001234:	1853      	adds	r3, r2, r1
 8001236:	5c52      	ldrb	r2, [r2, r1]
 8001238:	7898      	ldrb	r0, [r3, #2]
 800123a:	785c      	ldrb	r4, [r3, #1]
 800123c:	0400      	lsls	r0, r0, #16
 800123e:	78db      	ldrb	r3, [r3, #3]
 8001240:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8001244:	4310      	orrs	r0, r2
 8001246:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 800124a:	bd10      	pop	{r4, pc}
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 800124c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800124e:	5858      	ldr	r0, [r3, r1]
 8001250:	e7fb      	b.n	800124a <_ZN20HardwareMJPEGDecoder6getU32Em+0x22>

08001252 <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 8001252:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001254:	b143      	cbz	r3, 8001268 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 8001256:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001258:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 800125a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800125c:	185a      	adds	r2, r3, r1
 800125e:	5c58      	ldrb	r0, [r3, r1]
 8001260:	7852      	ldrb	r2, [r2, #1]
 8001262:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8001266:	4770      	bx	lr
        return d[0] | (d[1] << 8);
 8001268:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800126a:	5a58      	ldrh	r0, [r3, r1]
}
 800126c:	4770      	bx	lr
	...

08001270 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 8001270:	b570      	push	{r4, r5, r6, lr}
 8001272:	4604      	mov	r4, r0
    if (reader != 0)
 8001274:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
 8001276:	460d      	mov	r5, r1
 8001278:	4616      	mov	r6, r2
    if (reader != 0)
 800127a:	b1d8      	cbz	r0, 80012b4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 800127c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800127e:	4293      	cmp	r3, r2
 8001280:	d208      	bcs.n	8001294 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8001282:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 8001286:	21a8      	movs	r1, #168	; 0xa8
 8001288:	480d      	ldr	r0, [pc, #52]	; (80012c0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800128a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            assert(!"Buffer to small");
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 8001290:	f01b fb58 	bl	801c944 <__assert_func>
        reader->seek(offset);
 8001294:	6803      	ldr	r3, [r0, #0]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 800129a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800129c:	4632      	mov	r2, r6
 800129e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012a0:	6803      	ldr	r3, [r0, #0]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	4798      	blx	r3
 80012a6:	b910      	cbnz	r0, 80012ae <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 80012a8:	230d      	movs	r3, #13
 80012aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
 80012ae:	6b60      	ldr	r0, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
 80012b0:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 80012b2:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80012b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80012b6:	4408      	add	r0, r1
 80012b8:	e7fb      	b.n	80012b2 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 80012ba:	bf00      	nop
 80012bc:	0801df14 	.word	0x0801df14
 80012c0:	0801deaf 	.word	0x0801deaf
 80012c4:	0801df01 	.word	0x0801df01

080012c8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 80012c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80012cc:	6943      	ldr	r3, [r0, #20]
{
 80012ce:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80012d0:	b92b      	cbnz	r3, 80012de <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80012d2:	4b22      	ldr	r3, [pc, #136]	; (800135c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 80012d4:	21ee      	movs	r1, #238	; 0xee
 80012d6:	4a22      	ldr	r2, [pc, #136]	; (8001360 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80012d8:	4822      	ldr	r0, [pc, #136]	; (8001364 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80012da:	f01b fb33 	bl	801c944 <__assert_func>
    readData(currentMovieOffset, 8);
 80012de:	2208      	movs	r2, #8
 80012e0:	6981      	ldr	r1, [r0, #24]
 80012e2:	f7ff ffc5 	bl	8001270 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80012e6:	69a1      	ldr	r1, [r4, #24]
 80012e8:	4620      	mov	r0, r4
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80012ea:	f243 0730 	movw	r7, #12336	; 0x3030
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80012ee:	3104      	adds	r1, #4
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80012f0:	f246 3664 	movw	r6, #25444	; 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80012f4:	f7ff ff98 	bl	8001228 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80012f8:	4605      	mov	r5, r0
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 80012fa:	69a1      	ldr	r1, [r4, #24]
 80012fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012fe:	440d      	add	r5, r1
 8001300:	f105 0208 	add.w	r2, r5, #8
 8001304:	429a      	cmp	r2, r3
 8001306:	d222      	bcs.n	800134e <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x86>
        frameNumber++;
 8001308:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800130a:	3509      	adds	r5, #9
        readData(currentMovieOffset, 8);
 800130c:	2208      	movs	r2, #8
 800130e:	4620      	mov	r0, r4
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8001310:	f025 0101 	bic.w	r1, r5, #1
        frameNumber++;
 8001314:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8001316:	61a1      	str	r1, [r4, #24]
        frameNumber++;
 8001318:	6163      	str	r3, [r4, #20]
        readData(currentMovieOffset, 8);
 800131a:	f7ff ffa9 	bl	8001270 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 800131e:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8001322:	4620      	mov	r0, r4
 8001324:	4641      	mov	r1, r8
 8001326:	f7ff ff94 	bl	8001252 <_ZN20HardwareMJPEGDecoder6getU16Em>
 800132a:	4681      	mov	r9, r0
        chunkSize = getU32(currentMovieOffset + 4);
 800132c:	f108 0104 	add.w	r1, r8, #4
 8001330:	4620      	mov	r0, r4
 8001332:	f7ff ff79 	bl	8001228 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8001336:	45b9      	cmp	r9, r7
        chunkSize = getU32(currentMovieOffset + 4);
 8001338:	4605      	mov	r5, r0
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 800133a:	d1de      	bne.n	80012fa <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x32>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800133c:	f108 0102 	add.w	r1, r8, #2
 8001340:	4620      	mov	r0, r4
 8001342:	f7ff ff86 	bl	8001252 <_ZN20HardwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8001346:	42b0      	cmp	r0, r6
 8001348:	d1d7      	bne.n	80012fa <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x32>
            return true;
 800134a:	2001      	movs	r0, #1
 800134c:	e004      	b.n	8001358 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x90>
    frameNumber = 1;
 800134e:	2301      	movs	r3, #1
    return false;
 8001350:	2000      	movs	r0, #0
    frameNumber = 1;
 8001352:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; //start over
 8001354:	6a23      	ldr	r3, [r4, #32]
 8001356:	61a3      	str	r3, [r4, #24]
}
 8001358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800135c:	0801df56 	.word	0x0801df56
 8001360:	0801df9f 	.word	0x0801df9f
 8001364:	0801deaf 	.word	0x0801deaf

08001368 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 8001368:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 800136a:	6803      	ldr	r3, [r0, #0]
 800136c:	bf38      	it	cc
 800136e:	2101      	movcc	r1, #1
 8001370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 8001372:	b570      	push	{r4, r5, r6, lr}
 8001374:	460d      	mov	r5, r1
 8001376:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8001378:	4798      	blx	r3
 800137a:	42a8      	cmp	r0, r5
 800137c:	d204      	bcs.n	8001388 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 800137e:	6823      	ldr	r3, [r4, #0]
 8001380:	4620      	mov	r0, r4
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	4798      	blx	r3
 8001386:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8001388:	1e6b      	subs	r3, r5, #1
 800138a:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 800138c:	2210      	movs	r2, #16
 800138e:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8001390:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8001394:	f106 0108 	add.w	r1, r6, #8
 8001398:	f7ff ff6a 	bl	8001270 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 800139c:	f106 0110 	add.w	r1, r6, #16
 80013a0:	4620      	mov	r0, r4
 80013a2:	f7ff ff41 	bl	8001228 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80013a6:	6a23      	ldr	r3, [r4, #32]
 80013a8:	3b04      	subs	r3, #4
 80013aa:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 80013ac:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 80013b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080013b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
{
 80013b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentMovieOffset = 0;
 80013b8:	2100      	movs	r1, #0
{
 80013ba:	4604      	mov	r4, r0
    readData(0, 72);
 80013bc:	2248      	movs	r2, #72	; 0x48
    currentMovieOffset = 0;
 80013be:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 80013c0:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    readData(0, 72);
 80013c4:	f7ff ff54 	bl	8001270 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 80013c8:	69a7      	ldr	r7, [r4, #24]
 80013ca:	2304      	movs	r3, #4
 80013cc:	4a64      	ldr	r2, [pc, #400]	; (8001560 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80013ce:	4639      	mov	r1, r7
 80013d0:	4620      	mov	r0, r4
 80013d2:	f7ff ff19 	bl	8001208 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80013d6:	b148      	cbz	r0, 80013ec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 80013d8:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80013da:	4a62      	ldr	r2, [pc, #392]	; (8001564 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 80013dc:	f44f 719b 	mov.w	r1, #310	; 0x136
        lastError = AVI_ERROR_NOT_RIFF;
 80013e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        assert(!"RIFF header not found");
 80013e4:	4b60      	ldr	r3, [pc, #384]	; (8001568 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
        assert(!"AVI header not found");
 80013e6:	4861      	ldr	r0, [pc, #388]	; (800156c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 80013e8:	f01b faac 	bl	801c944 <__assert_func>
    currentMovieOffset += 8;
 80013ec:	f107 0108 	add.w	r1, r7, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 80013f0:	2304      	movs	r3, #4
 80013f2:	4a5f      	ldr	r2, [pc, #380]	; (8001570 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 80013f4:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 80013f6:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 80013f8:	f7ff ff06 	bl	8001208 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80013fc:	b138      	cbz	r0, 800140e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80013fe:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 8001400:	4a58      	ldr	r2, [pc, #352]	; (8001564 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 8001402:	f44f 719f 	mov.w	r1, #318	; 0x13e
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8001406:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        assert(!"AVI header not found");
 800140a:	4b5a      	ldr	r3, [pc, #360]	; (8001574 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 800140c:	e7eb      	b.n	80013e6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 800140e:	f107 010c 	add.w	r1, r7, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8001412:	2304      	movs	r3, #4
 8001414:	4a58      	ldr	r2, [pc, #352]	; (8001578 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8001416:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8001418:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800141a:	f7ff fef5 	bl	8001208 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800141e:	4606      	mov	r6, r0
 8001420:	b138      	cbz	r0, 8001432 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8001422:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8001424:	4a4f      	ldr	r2, [pc, #316]	; (8001564 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 8001426:	f240 1145 	movw	r1, #325	; 0x145
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800142a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        assert(!"AVI LIST not found");
 800142e:	4b53      	ldr	r3, [pc, #332]	; (800157c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8001430:	e7d9      	b.n	80013e6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8001432:	f107 0110 	add.w	r1, r7, #16
 8001436:	4620      	mov	r0, r4
 8001438:	f7ff fef6 	bl	8001228 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 800143c:	4605      	mov	r5, r0
 800143e:	b920      	cbnz	r0, 800144a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8001440:	4b4f      	ldr	r3, [pc, #316]	; (8001580 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8001442:	f240 114b 	movw	r1, #331	; 0x14b
 8001446:	4a47      	ldr	r2, [pc, #284]	; (8001564 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 8001448:	e7cd      	b.n	80013e6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 800144a:	f107 0814 	add.w	r8, r7, #20
    if (compare(offset, "hdrl", 4))
 800144e:	2304      	movs	r3, #4
 8001450:	4a4c      	ldr	r2, [pc, #304]	; (8001584 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 8001452:	4620      	mov	r0, r4
 8001454:	4641      	mov	r1, r8
 8001456:	f7ff fed7 	bl	8001208 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800145a:	2800      	cmp	r0, #0
 800145c:	d04b      	beq.n	80014f6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 800145e:	2306      	movs	r3, #6
 8001460:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (compare(offset, "avih", 4))
 8001464:	2304      	movs	r3, #4
 8001466:	4a48      	ldr	r2, [pc, #288]	; (8001588 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
 8001468:	f107 0118 	add.w	r1, r7, #24
 800146c:	4620      	mov	r0, r4
 800146e:	f7ff fecb 	bl	8001208 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001472:	2800      	cmp	r0, #0
 8001474:	d041      	beq.n	80014fa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x146>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 8001476:	2307      	movs	r3, #7
 8001478:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 800147c:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800147e:	4f43      	ldr	r7, [pc, #268]	; (800158c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
    readData(listOffset, 12);
 8001480:	220c      	movs	r2, #12
 8001482:	4620      	mov	r0, r4
 8001484:	4629      	mov	r1, r5
 8001486:	f7ff fef3 	bl	8001270 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800148a:	f105 0608 	add.w	r6, r5, #8
 800148e:	2304      	movs	r3, #4
 8001490:	463a      	mov	r2, r7
 8001492:	4620      	mov	r0, r4
 8001494:	4631      	mov	r1, r6
 8001496:	f7ff feb7 	bl	8001208 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800149a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800149e:	2800      	cmp	r0, #0
 80014a0:	d04a      	beq.n	8001538 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d14a      	bne.n	800153c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x188>
 80014a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80014a8:	1d29      	adds	r1, r5, #4
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80014aa:	42ab      	cmp	r3, r5
 80014ac:	d84a      	bhi.n	8001544 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x190>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 80014ae:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80014b2:	1d29      	adds	r1, r5, #4
 80014b4:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 80014b6:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80014b8:	9101      	str	r1, [sp, #4]
 80014ba:	f7ff feb5 	bl	8001228 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80014be:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80014c0:	9901      	ldr	r1, [sp, #4]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80014c2:	6260      	str	r0, [r4, #36]	; 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80014c4:	4620      	mov	r0, r4
 80014c6:	f7ff feaf 	bl	8001228 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 80014ca:	4406      	add	r6, r0
    readData(listOffset, 4);
 80014cc:	2204      	movs	r2, #4
 80014ce:	4620      	mov	r0, r4
 80014d0:	4631      	mov	r1, r6
 80014d2:	f7ff fecd 	bl	8001270 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 80014d6:	2304      	movs	r3, #4
 80014d8:	4a2d      	ldr	r2, [pc, #180]	; (8001590 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1dc>)
 80014da:	4631      	mov	r1, r6
 80014dc:	4620      	mov	r0, r4
 80014de:	f7ff fe93 	bl	8001208 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80014e2:	2800      	cmp	r0, #0
 80014e4:	d139      	bne.n	800155a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a6>
    frameNumber = 1; //next frame number is 1
 80014e6:	2301      	movs	r3, #1
        indexOffset = listOffset;
 80014e8:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; //next frame number is 1
 80014ea:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 80014ec:	69a3      	ldr	r3, [r4, #24]
 80014ee:	6223      	str	r3, [r4, #32]
}
 80014f0:	b002      	add	sp, #8
 80014f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 80014f6:	2601      	movs	r6, #1
 80014f8:	e7b4      	b.n	8001464 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 80014fa:	2e00      	cmp	r6, #0
 80014fc:	d0be      	beq.n	800147c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80014fe:	f107 0120 	add.w	r1, r7, #32
 8001502:	4620      	mov	r0, r4
 8001504:	f7ff fe90 	bl	8001228 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001508:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 800150c:	f107 0130 	add.w	r1, r7, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8001510:	fbb0 f0f3 	udiv	r0, r0, r3
 8001514:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8001516:	4620      	mov	r0, r4
 8001518:	f7ff fe86 	bl	8001228 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 800151c:	f107 0140 	add.w	r1, r7, #64	; 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8001520:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8001522:	4620      	mov	r0, r4
 8001524:	f7ff fe80 	bl	8001228 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8001528:	f107 0144 	add.w	r1, r7, #68	; 0x44
        videoInfo.frame_width = getU32(offset + 32);
 800152c:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800152e:	4620      	mov	r0, r4
 8001530:	f7ff fe7a 	bl	8001228 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001534:	6120      	str	r0, [r4, #16]
 8001536:	e7a1      	b.n	800147c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0b8      	beq.n	80014ae <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xfa>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 800153c:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800153e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return;
 8001542:	e7d5      	b.n	80014f0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13c>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8001544:	4620      	mov	r0, r4
 8001546:	f7ff fe6f 	bl	8001228 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800154a:	3008      	adds	r0, #8
        readData(listOffset, 12);
 800154c:	220c      	movs	r2, #12
        listOffset += listSize;
 800154e:	4405      	add	r5, r0
        readData(listOffset, 12);
 8001550:	4620      	mov	r0, r4
 8001552:	4629      	mov	r1, r5
 8001554:	f7ff fe8c 	bl	8001270 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8001558:	e797      	b.n	800148a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800155a:	230b      	movs	r3, #11
 800155c:	e7ef      	b.n	800153e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18a>
 800155e:	bf00      	nop
 8001560:	0801dfd2 	.word	0x0801dfd2
 8001564:	0801dff0 	.word	0x0801dff0
 8001568:	0801dfd7 	.word	0x0801dfd7
 800156c:	0801deaf 	.word	0x0801deaf
 8001570:	0801e01d 	.word	0x0801e01d
 8001574:	0801e022 	.word	0x0801e022
 8001578:	0801e03a 	.word	0x0801e03a
 800157c:	0801e03f 	.word	0x0801e03f
 8001580:	0801e055 	.word	0x0801e055
 8001584:	0801e061 	.word	0x0801e061
 8001588:	0801e066 	.word	0x0801e066
 800158c:	0801e06b 	.word	0x0801e06b
 8001590:	0801e070 	.word	0x0801e070

08001594 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8001594:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
 8001598:	2200      	movs	r2, #0
 800159a:	6302      	str	r2, [r0, #48]	; 0x30
    readVideoHeader();
 800159c:	f7ff bf0a 	b.w	80013b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

080015a0 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 80015a0:	b510      	push	{r4, lr}
    movieData = 0;
 80015a2:	2300      	movs	r3, #0
{
 80015a4:	4604      	mov	r4, r0
 80015a6:	4608      	mov	r0, r1
    movieData = 0;
 80015a8:	62e3      	str	r3, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
 80015aa:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 80015ac:	6321      	str	r1, [r4, #48]	; 0x30
    movieLength = reader.getDataLength();
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	4798      	blx	r3
 80015b2:	62a0      	str	r0, [r4, #40]	; 0x28
    readVideoHeader();
 80015b4:	4620      	mov	r0, r4
}
 80015b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 80015ba:	f7ff befb 	b.w	80013b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

080015c0 <JPEG_Decode_DMA>:
      * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
      * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
      * @retval None
      */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 80015c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        FrameBufferAddress = output;
 80015c2:	4c12      	ldr	r4, [pc, #72]	; (800160c <JPEG_Decode_DMA+0x4c>)
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
        }

        //Do not return from this function until done with decoding all chunks.
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80015c4:	f44f 75c0 	mov.w	r5, #384	; 0x180
        FrameBufferAddress = output;
 80015c8:	6023      	str	r3, [r4, #0]
        Output_Is_Paused = 0;
 80015ca:	2400      	movs	r4, #0
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <JPEG_Decode_DMA+0x50>)
 80015ce:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <JPEG_Decode_DMA+0x54>)
 80015d2:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Write_BufferIndex = 0;
 80015d4:	4b10      	ldr	r3, [pc, #64]	; (8001618 <JPEG_Decode_DMA+0x58>)
 80015d6:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 80015d8:	4b10      	ldr	r3, [pc, #64]	; (800161c <JPEG_Decode_DMA+0x5c>)
 80015da:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <JPEG_Decode_DMA+0x60>)
 80015de:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <JPEG_Decode_DMA+0x64>)
 80015e2:	601a      	str	r2, [r3, #0]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80015e4:	4a10      	ldr	r2, [pc, #64]	; (8001628 <JPEG_Decode_DMA+0x68>)
        MCU_BlockIndex = 0;
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <JPEG_Decode_DMA+0x6c>)
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80015e8:	68d2      	ldr	r2, [r2, #12]
        MCU_BlockIndex = 0;
 80015ea:	601c      	str	r4, [r3, #0]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80015ec:	436a      	muls	r2, r5
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <JPEG_Decode_DMA+0x70>)
 80015f0:	701c      	strb	r4, [r3, #0]
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 80015f2:	609c      	str	r4, [r3, #8]
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80015f4:	731c      	strb	r4, [r3, #12]
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 80015f6:	615c      	str	r4, [r3, #20]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80015f8:	9200      	str	r2, [sp, #0]
 80015fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f005 fd6a 	bl	80070d8 <HAL_JPEG_Decode_DMA>

        return 0;
    }
 8001604:	4620      	mov	r0, r4
 8001606:	b003      	add	sp, #12
 8001608:	bd30      	pop	{r4, r5, pc}
 800160a:	bf00      	nop
 800160c:	200097b0 	.word	0x200097b0
 8001610:	200097d8 	.word	0x200097d8
 8001614:	200097c0 	.word	0x200097c0
 8001618:	200097c4 	.word	0x200097c4
 800161c:	200097b8 	.word	0x200097b8
 8001620:	200097b4 	.word	0x200097b4
 8001624:	200097bc 	.word	0x200097bc
 8001628:	200097dc 	.word	0x200097dc
 800162c:	200097d0 	.word	0x200097d0
 8001630:	20000018 	.word	0x20000018

08001634 <HAL_JPEG_InfoReadyCallback>:
      * @param hjpeg: JPEG handle pointer
      * @param pInfo: JPEG Info Struct pointer
      * @retval None
      */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
 8001634:	b508      	push	{r3, lr}
        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8001636:	684b      	ldr	r3, [r1, #4]
    {
 8001638:	4608      	mov	r0, r1
        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800163a:	2b01      	cmp	r3, #1
 800163c:	d119      	bne.n	8001672 <HAL_JPEG_InfoReadyCallback+0x3e>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 800163e:	68cb      	ldr	r3, [r1, #12]
 8001640:	071a      	lsls	r2, r3, #28
            if ((pInfo->ImageHeight % 16) != 0)
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
            }

            HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001642:	4a1e      	ldr	r2, [pc, #120]	; (80016bc <HAL_JPEG_InfoReadyCallback+0x88>)
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8001644:	bf1e      	ittt	ne
 8001646:	f023 030f 	bicne.w	r3, r3, #15
 800164a:	3310      	addne	r3, #16
 800164c:	60cb      	strne	r3, [r1, #12]
            if ((pInfo->ImageHeight % 16) != 0)
 800164e:	688b      	ldr	r3, [r1, #8]
 8001650:	0719      	lsls	r1, r3, #28
            HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001652:	491b      	ldr	r1, [pc, #108]	; (80016c0 <HAL_JPEG_InfoReadyCallback+0x8c>)
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8001654:	bf1e      	ittt	ne
 8001656:	f023 030f 	bicne.w	r3, r3, #15
 800165a:	3310      	addne	r3, #16
 800165c:	6083      	strne	r3, [r0, #8]
            HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 800165e:	f001 fa79 	bl	8002b54 <TGFX_JPEG_GetDecodeColorConvertFunc>
            if (status != HAL_OK)
 8001662:	b348      	cbz	r0, 80016b8 <HAL_JPEG_InfoReadyCallback+0x84>
            {
                assert(status == HAL_OK);
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <HAL_JPEG_InfoReadyCallback+0x90>)
 8001666:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800166a:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <HAL_JPEG_InfoReadyCallback+0x94>)
            }

            HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
            if (status != HAL_OK)
            {
                assert(status == HAL_OK);
 800166c:	4817      	ldr	r0, [pc, #92]	; (80016cc <HAL_JPEG_InfoReadyCallback+0x98>)
 800166e:	f01b f969 	bl	801c944 <__assert_func>
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8001672:	2b02      	cmp	r3, #2
 8001674:	d117      	bne.n	80016a6 <HAL_JPEG_InfoReadyCallback+0x72>
                if ((pInfo->ImageWidth % 16) != 0)
 8001676:	68cb      	ldr	r3, [r1, #12]
 8001678:	071a      	lsls	r2, r3, #28
 800167a:	d003      	beq.n	8001684 <HAL_JPEG_InfoReadyCallback+0x50>
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800167c:	f023 030f 	bic.w	r3, r3, #15
 8001680:	3310      	adds	r3, #16
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8001682:	60c3      	str	r3, [r0, #12]
                if ((pInfo->ImageHeight % 8) != 0)
 8001684:	6883      	ldr	r3, [r0, #8]
 8001686:	075a      	lsls	r2, r3, #29
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8001688:	bf1e      	ittt	ne
 800168a:	f023 0307 	bicne.w	r3, r3, #7
 800168e:	3308      	addne	r3, #8
 8001690:	6083      	strne	r3, [r0, #8]
            HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <HAL_JPEG_InfoReadyCallback+0x88>)
 8001694:	490a      	ldr	r1, [pc, #40]	; (80016c0 <HAL_JPEG_InfoReadyCallback+0x8c>)
 8001696:	f00a fb81 	bl	800bd9c <JPEG_GetDecodeColorConvertFunc>
            if (status != HAL_OK)
 800169a:	b168      	cbz	r0, 80016b8 <HAL_JPEG_InfoReadyCallback+0x84>
                assert(status == HAL_OK);
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_JPEG_InfoReadyCallback+0x90>)
 800169e:	f240 214e 	movw	r1, #590	; 0x24e
 80016a2:	4a09      	ldr	r2, [pc, #36]	; (80016c8 <HAL_JPEG_InfoReadyCallback+0x94>)
 80016a4:	e7e2      	b.n	800166c <HAL_JPEG_InfoReadyCallback+0x38>
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f3      	bne.n	8001692 <HAL_JPEG_InfoReadyCallback+0x5e>
                if ((pInfo->ImageWidth % 8) != 0)
 80016aa:	68cb      	ldr	r3, [r1, #12]
 80016ac:	0759      	lsls	r1, r3, #29
 80016ae:	d0e9      	beq.n	8001684 <HAL_JPEG_InfoReadyCallback+0x50>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80016b0:	f023 0307 	bic.w	r3, r3, #7
 80016b4:	3308      	adds	r3, #8
 80016b6:	e7e4      	b.n	8001682 <HAL_JPEG_InfoReadyCallback+0x4e>
            }
        }
    }
 80016b8:	bd08      	pop	{r3, pc}
 80016ba:	bf00      	nop
 80016bc:	200097d4 	.word	0x200097d4
 80016c0:	200097f0 	.word	0x200097f0
 80016c4:	0801e075 	.word	0x0801e075
 80016c8:	0801e086 	.word	0x0801e086
 80016cc:	0801deaf 	.word	0x0801deaf

080016d0 <HAL_JPEG_GetDataCallback>:
      * @retval None
      */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        //Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet.
        JPEG_InputImageIndex += NbDecodedData;
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_JPEG_GetDataCallback+0x30>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	440a      	add	r2, r1
    {
 80016d6:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 80016d8:	601a      	str	r2, [r3, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_JPEG_GetDataCallback+0x34>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d20c      	bcs.n	80016fc <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80016e2:	4c09      	ldr	r4, [pc, #36]	; (8001708 <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 80016e4:	1a9a      	subs	r2, r3, r2
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80016e6:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80016e8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80016ec:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80016ee:	bf28      	it	cs
 80016f0:	f44f 3280 	movcs.w	r2, #65536	; 0x10000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80016f4:	6021      	str	r1, [r4, #0]
        }
    }
 80016f6:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80016f8:	f005 bd55 	b.w	80071a6 <HAL_JPEG_ConfigInputBuffer>
    }
 80016fc:	bc30      	pop	{r4, r5}
 80016fe:	4770      	bx	lr
 8001700:	200097b8 	.word	0x200097b8
 8001704:	200097bc 	.word	0x200097bc
 8001708:	200097b4 	.word	0x200097b4

0800170c <HAL_JPEG_DataReadyCallback>:
      * @param pDataOut: pointer to the output data buffer
      * @param OutDataLength: length of output buffer in bytes
      * @retval None
      */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 800170c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 800170e:	4d17      	ldr	r5, [pc, #92]	; (800176c <HAL_JPEG_DataReadyCallback+0x60>)
 8001710:	2701      	movs	r7, #1
 8001712:	210c      	movs	r1, #12
 8001714:	4c16      	ldr	r4, [pc, #88]	; (8001770 <HAL_JPEG_DataReadyCallback+0x64>)
 8001716:	682b      	ldr	r3, [r5, #0]
    {
 8001718:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 800171a:	4359      	muls	r1, r3
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;

        JPEG_OUT_Write_BufferIndex++;
 800171c:	443b      	add	r3, r7
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 800171e:	42bb      	cmp	r3, r7
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8001720:	eb04 0001 	add.w	r0, r4, r1
 8001724:	5467      	strb	r7, [r4, r1]
        {
            JPEG_OUT_Write_BufferIndex = 0;
 8001726:	bf88      	it	hi
 8001728:	2300      	movhi	r3, #0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 800172a:	6082      	str	r2, [r0, #8]
        }

        //if the other buffer is full, then ui thread might be converting it
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 800172c:	220c      	movs	r2, #12
            JPEG_OUT_Write_BufferIndex = 0;
 800172e:	602b      	str	r3, [r5, #0]
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8001730:	682b      	ldr	r3, [r5, #0]
 8001732:	4353      	muls	r3, r2
 8001734:	5ce3      	ldrb	r3, [r4, r3]
 8001736:	b133      	cbz	r3, 8001746 <HAL_JPEG_DataReadyCallback+0x3a>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8001738:	2102      	movs	r1, #2
 800173a:	4630      	mov	r0, r6
 800173c:	f005 fd00 	bl	8007140 <HAL_JPEG_Pause>
            Output_Is_Paused = 1;
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_JPEG_DataReadyCallback+0x68>)
 8001742:	2201      	movs	r2, #1
 8001744:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001746:	682a      	ldr	r2, [r5, #0]
 8001748:	210c      	movs	r1, #12
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_JPEG_DataReadyCallback+0x6c>)
 800174c:	4630      	mov	r0, r6
 800174e:	fb01 4402 	mla	r4, r1, r2, r4
 8001752:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	6861      	ldr	r1, [r4, #4]
 800175a:	435a      	muls	r2, r3
 800175c:	f005 fd26 	bl	80071ac <HAL_JPEG_ConfigOutputBuffer>

        // Signal Hardware Decoding to wake up
        SEM_POST(semDecodingDone);
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_JPEG_DataReadyCallback+0x70>)
 8001762:	6818      	ldr	r0, [r3, #0]
    }
 8001764:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        SEM_POST(semDecodingDone);
 8001768:	f007 bf12 	b.w	8009590 <osSemaphoreRelease>
 800176c:	200097c4 	.word	0x200097c4
 8001770:	20000018 	.word	0x20000018
 8001774:	200097d8 	.word	0x200097d8
 8001778:	200097dc 	.word	0x200097dc
 800177c:	200097f4 	.word	0x200097f4

08001780 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
      * @retval None
      */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 8001782:	e7fe      	b.n	8001782 <HAL_JPEG_ErrorCallback+0x2>

08001784 <HAL_JPEG_DecodeCpltCallback>:
      * @param hjpeg: JPEG handle pointer
      * @retval None
      */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8001784:	4b01      	ldr	r3, [pc, #4]	; (800178c <HAL_JPEG_DecodeCpltCallback+0x8>)
 8001786:	2201      	movs	r2, #1
 8001788:	601a      	str	r2, [r3, #0]
    }
 800178a:	4770      	bx	lr
 800178c:	200097cc 	.word	0x200097cc

08001790 <JPEG_OutputHandler>:
  * @brief  JPEG Ouput Data BackGround Postprocessing .
  * @param hjpeg: JPEG handle pointer
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 8001790:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    uint32_t ConvertedDataCount;

    if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL)
 8001794:	4d38      	ldr	r5, [pc, #224]	; (8001878 <JPEG_OutputHandler+0xe8>)
 8001796:	260c      	movs	r6, #12
 8001798:	4c38      	ldr	r4, [pc, #224]	; (800187c <JPEG_OutputHandler+0xec>)
 800179a:	682b      	ldr	r3, [r5, #0]
 800179c:	4373      	muls	r3, r6
 800179e:	5ce3      	ldrb	r3, [r4, r3]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d149      	bne.n	8001838 <JPEG_OutputHandler+0xa8>
    {
        /* Invalidate DCache prior to YCbCr/RGB software conversion. */
        if (SCB->CCR & SCB_CCR_DC_Msk)
 80017a4:	4a36      	ldr	r2, [pc, #216]	; (8001880 <JPEG_OutputHandler+0xf0>)
 80017a6:	6953      	ldr	r3, [r2, #20]
 80017a8:	03db      	lsls	r3, r3, #15
 80017aa:	d51e      	bpl.n	80017ea <JPEG_OutputHandler+0x5a>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80017ac:	2300      	movs	r3, #0
 80017ae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80017b2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80017b6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80017ba:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80017be:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80017c2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80017c6:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80017c8:	ea03 0c06 	and.w	ip, r3, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80017cc:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80017ce:	ea4c 7781 	orr.w	r7, ip, r1, lsl #30
      } while (ways-- != 0U);
 80017d2:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80017d4:	f8c2 7274 	str.w	r7, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 80017d8:	d2f9      	bcs.n	80017ce <JPEG_OutputHandler+0x3e>
    } while(sets-- != 0U);
 80017da:	3b20      	subs	r3, #32
 80017dc:	f113 0f20 	cmn.w	r3, #32
 80017e0:	d1f2      	bne.n	80017c8 <JPEG_OutputHandler+0x38>
 80017e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80017e6:	f3bf 8f6f 	isb	sy
        {
            SCB_CleanInvalidateDCache();
        }

        MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 80017ea:	260c      	movs	r6, #12
 80017ec:	4f25      	ldr	r7, [pc, #148]	; (8001884 <JPEG_OutputHandler+0xf4>)
 80017ee:	6828      	ldr	r0, [r5, #0]
 80017f0:	eb0d 0306 	add.w	r3, sp, r6
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	fb06 4000 	mla	r0, r6, r0, r4
 80017fa:	4923      	ldr	r1, [pc, #140]	; (8001888 <JPEG_OutputHandler+0xf8>)
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	4b23      	ldr	r3, [pc, #140]	; (800188c <JPEG_OutputHandler+0xfc>)
 8001800:	6809      	ldr	r1, [r1, #0]
 8001802:	f8d3 8000 	ldr.w	r8, [r3]
 8001806:	6883      	ldr	r3, [r0, #8]
 8001808:	6840      	ldr	r0, [r0, #4]
 800180a:	47c0      	blx	r8

        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 800180c:	682a      	ldr	r2, [r5, #0]
        MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 800180e:	683b      	ldr	r3, [r7, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8001810:	4356      	muls	r6, r2
        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;

        JPEG_OUT_Read_BufferIndex++;
 8001812:	3201      	adds	r2, #1
        MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 8001814:	4418      	add	r0, r3
        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8001816:	2300      	movs	r3, #0
        JPEG_OUT_Read_BufferIndex++;
 8001818:	2a01      	cmp	r2, #1
        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 800181a:	eb04 0106 	add.w	r1, r4, r6
 800181e:	55a3      	strb	r3, [r4, r6]
        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;
 8001820:	608b      	str	r3, [r1, #8]
        JPEG_OUT_Read_BufferIndex++;
 8001822:	bf98      	it	ls
 8001824:	4613      	movls	r3, r2
        MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 8001826:	6038      	str	r0, [r7, #0]
        JPEG_OUT_Read_BufferIndex++;
 8001828:	602b      	str	r3, [r5, #0]
        if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
        {
            JPEG_OUT_Read_BufferIndex = 0;
        }

        if (MCU_BlockIndex == MCU_TotalNb)
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <JPEG_OutputHandler+0x100>)
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d10f      	bne.n	8001854 <JPEG_OutputHandler+0xc4>
        {
            return 1;
 8001834:	2001      	movs	r0, #1
 8001836:	e018      	b.n	800186a <JPEG_OutputHandler+0xda>
        }
    }
    else if ((Output_Is_Paused == 1) && \
 8001838:	4916      	ldr	r1, [pc, #88]	; (8001894 <JPEG_OutputHandler+0x104>)
 800183a:	680a      	ldr	r2, [r1, #0]
             (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
 800183c:	2a01      	cmp	r2, #1
 800183e:	d117      	bne.n	8001870 <JPEG_OutputHandler+0xe0>
 8001840:	4a15      	ldr	r2, [pc, #84]	; (8001898 <JPEG_OutputHandler+0x108>)
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	4372      	muls	r2, r6
    else if ((Output_Is_Paused == 1) && \
 8001846:	5ca2      	ldrb	r2, [r4, r2]
 8001848:	4313      	orrs	r3, r2
 800184a:	d111      	bne.n	8001870 <JPEG_OutputHandler+0xe0>
             (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
    {
        Output_Is_Paused = 0;
 800184c:	600b      	str	r3, [r1, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 800184e:	2102      	movs	r1, #2
 8001850:	f005 fee2 	bl	8007618 <HAL_JPEG_Resume>
    else
    {
        return 2;
    }

    if ((MCU_BlockIndex == MCU_TotalNb) && (Jpeg_HWDecodingEnd)) // decode completed
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <JPEG_OutputHandler+0xf4>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <JPEG_OutputHandler+0x100>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d109      	bne.n	8001874 <JPEG_OutputHandler+0xe4>
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <JPEG_OutputHandler+0x10c>)
 8001862:	6818      	ldr	r0, [r3, #0]
 8001864:	3800      	subs	r0, #0
 8001866:	bf18      	it	ne
 8001868:	2001      	movne	r0, #1
    {
        return 1;
    }

    return 0;
}
 800186a:	b004      	add	sp, #16
 800186c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return 2;
 8001870:	2002      	movs	r0, #2
 8001872:	e7fa      	b.n	800186a <JPEG_OutputHandler+0xda>
    return 0;
 8001874:	2000      	movs	r0, #0
 8001876:	e7f8      	b.n	800186a <JPEG_OutputHandler+0xda>
 8001878:	200097c0 	.word	0x200097c0
 800187c:	20000018 	.word	0x20000018
 8001880:	e000ed00 	.word	0xe000ed00
 8001884:	200097d0 	.word	0x200097d0
 8001888:	200097b0 	.word	0x200097b0
 800188c:	200097f0 	.word	0x200097f0
 8001890:	200097d4 	.word	0x200097d4
 8001894:	200097d8 	.word	0x200097d8
 8001898:	200097c4 	.word	0x200097c4
 800189c:	200097cc 	.word	0x200097cc

080018a0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 80018a0:	b538      	push	{r3, r4, r5, lr}
    if (length == 0)
 80018a2:	b36a      	cbz	r2, 8001900 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x60>
    if (outputBuffer) //only decode if buffers are assigned.
 80018a4:	b363      	cbz	r3, 8001900 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x60>
        JPEG_ConvertorParams.bytes_pr_pixel = 2;
 80018a6:	4c17      	ldr	r4, [pc, #92]	; (8001904 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>)
 80018a8:	2502      	movs	r5, #2
 80018aa:	6125      	str	r5, [r4, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 80018ac:	68c5      	ldr	r5, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 80018ae:	6900      	ldr	r0, [r0, #16]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 80018b0:	f015 0f0f 	tst.w	r5, #15
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 80018b4:	f000 000f 	and.w	r0, r0, #15
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 80018b8:	bf18      	it	ne
 80018ba:	f025 050f 	bicne.w	r5, r5, #15
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 80018be:	f1c0 0010 	rsb	r0, r0, #16
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 80018c2:	bf18      	it	ne
 80018c4:	3510      	addne	r5, #16
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 80018c6:	60a0      	str	r0, [r4, #8]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 80018c8:	6025      	str	r5, [r4, #0]
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 80018ca:	f44f 65c8 	mov.w	r5, #1600	; 0x640
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 80018ce:	480e      	ldr	r0, [pc, #56]	; (8001908 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x68>)
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 80018d0:	6065      	str	r5, [r4, #4]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 80018d2:	6825      	ldr	r5, [r4, #0]
 80018d4:	092d      	lsrs	r5, r5, #4
 80018d6:	60e5      	str	r5, [r4, #12]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 80018d8:	f7ff fe72 	bl	80015c0 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 80018dc:	4d0a      	ldr	r5, [pc, #40]	; (8001908 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x68>)
 80018de:	4c0b      	ldr	r4, [pc, #44]	; (800190c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x6c>)
 80018e0:	4628      	mov	r0, r5
 80018e2:	f7ff ff55 	bl	8001790 <JPEG_OutputHandler>
 80018e6:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 80018e8:	6823      	ldr	r3, [r4, #0]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d105      	bne.n	80018fa <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x5a>
                SEM_WAIT(semDecodingDone);
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x70>)
 80018f0:	f04f 31ff 	mov.w	r1, #4294967295
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	f007 fe11 	bl	800951c <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 80018fa:	6823      	ldr	r3, [r4, #0]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d1ef      	bne.n	80018e0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x40>
}
 8001900:	bd38      	pop	{r3, r4, r5, pc}
 8001902:	bf00      	nop
 8001904:	200097dc 	.word	0x200097dc
 8001908:	2000eb68 	.word	0x2000eb68
 800190c:	200097c8 	.word	0x200097c8
 8001910:	200097f4 	.word	0x200097f4

08001914 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8001914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001918:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800191a:	6943      	ldr	r3, [r0, #20]
{
 800191c:	4604      	mov	r4, r0
 800191e:	460f      	mov	r7, r1
 8001920:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8001922:	b92b      	cbnz	r3, 8001930 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1c>
 8001924:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8001926:	21ba      	movs	r1, #186	; 0xba
 8001928:	4a2a      	ldr	r2, [pc, #168]	; (80019d4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 800192a:	482b      	ldr	r0, [pc, #172]	; (80019d8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>)
 800192c:	f01b f80a 	bl	801c944 <__assert_func>
    readData(currentMovieOffset, 8);
 8001930:	2208      	movs	r2, #8
 8001932:	6981      	ldr	r1, [r0, #24]
 8001934:	f7ff fc9c 	bl	8001270 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8001938:	69a6      	ldr	r6, [r4, #24]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800193a:	4620      	mov	r0, r4
 800193c:	f106 0a08 	add.w	sl, r6, #8
 8001940:	1d31      	adds	r1, r6, #4
 8001942:	f7ff fc71 	bl	8001228 <_ZN20HardwareMJPEGDecoder6getU32Em>
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8001946:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001948:	eb00 020a 	add.w	r2, r0, sl
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800194c:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 800194e:	429a      	cmp	r2, r3
 8001950:	d231      	bcs.n	80019b6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa2>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8001952:	4631      	mov	r1, r6
 8001954:	4620      	mov	r0, r4
 8001956:	f7ff fc7c 	bl	8001252 <_ZN20HardwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800195a:	f243 0330 	movw	r3, #12336	; 0x3030
 800195e:	4298      	cmp	r0, r3
 8001960:	d11d      	bne.n	800199e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8001962:	1cb1      	adds	r1, r6, #2
 8001964:	4620      	mov	r0, r4
 8001966:	f7ff fc74 	bl	8001252 <_ZN20HardwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800196a:	f246 3364 	movw	r3, #25444	; 0x6364
 800196e:	4298      	cmp	r0, r3
 8001970:	d115      	bne.n	800199e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8001972:	b1a5      	cbz	r5, 800199e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001974:	462a      	mov	r2, r5
 8001976:	4651      	mov	r1, sl
 8001978:	4620      	mov	r0, r4
            currentMovieOffset += 8;
 800197a:	f8c4 a018 	str.w	sl, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 800197e:	f7ff fc77 	bl	8001270 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8001982:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001984:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8001986:	462a      	mov	r2, r5
 8001988:	4620      	mov	r0, r4
 800198a:	f8cd 8000 	str.w	r8, [sp]
 800198e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8001992:	463b      	mov	r3, r7
 8001994:	f7ff ff84 	bl	80018a0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8001998:	6963      	ldr	r3, [r4, #20]
 800199a:	3301      	adds	r3, #1
 800199c:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 800199e:	69a3      	ldr	r3, [r4, #24]
 80019a0:	442b      	add	r3, r5
        if (chunkSize == 0) // Empty frame - Skip
 80019a2:	b18d      	cbz	r5, 80019c8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
            currentMovieOffset += 8;
 80019a4:	61a3      	str	r3, [r4, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80019a6:	69a3      	ldr	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 80019a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80019aa:	3301      	adds	r3, #1
 80019ac:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 80019b0:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80019b2:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 80019b4:	d10a      	bne.n	80019cc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>
        frameNumber = 1;
 80019b6:	2001      	movs	r0, #1
        currentMovieOffset = firstFrameOffset; //start over
 80019b8:	6a23      	ldr	r3, [r4, #32]
        frameNumber = 1;
 80019ba:	6160      	str	r0, [r4, #20]
        currentMovieOffset = firstFrameOffset; //start over
 80019bc:	61a3      	str	r3, [r4, #24]
}
 80019be:	f080 0001 	eor.w	r0, r0, #1
 80019c2:	b004      	add	sp, #16
 80019c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            currentMovieOffset += 8;
 80019c8:	3308      	adds	r3, #8
 80019ca:	e7eb      	b.n	80019a4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        isCurrentFrameLast = false;
 80019cc:	2000      	movs	r0, #0
 80019ce:	e7f6      	b.n	80019be <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 80019d0:	0801df56 	.word	0x0801df56
 80019d4:	0801e0ce 	.word	0x0801e0ce
 80019d8:	0801deaf 	.word	0x0801deaf

080019dc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 80019dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80019de:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 80019e0:	6981      	ldr	r1, [r0, #24]
{
 80019e2:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
 80019e4:	2208      	movs	r2, #8
 80019e6:	f7ff fc43 	bl	8001270 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 80019ea:	69a6      	ldr	r6, [r4, #24]
 80019ec:	4620      	mov	r0, r4
 80019ee:	1d31      	adds	r1, r6, #4
 80019f0:	f7ff fc1a 	bl	8001228 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80019f4:	f106 0108 	add.w	r1, r6, #8
    const uint32_t length = getU32(currentMovieOffset + 4);
 80019f8:	4602      	mov	r2, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80019fa:	9001      	str	r0, [sp, #4]
 80019fc:	4620      	mov	r0, r4
 80019fe:	f7ff fc37 	bl	8001270 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8001a02:	4601      	mov	r1, r0
    if (frameBuffer) //only decode if buffers are assigned.
 8001a04:	b16d      	cbz	r5, 8001a22 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001a06:	462b      	mov	r3, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001a08:	4c07      	ldr	r4, [pc, #28]	; (8001a28 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 8001a0a:	4d08      	ldr	r5, [pc, #32]	; (8001a2c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001a0c:	9a01      	ldr	r2, [sp, #4]
 8001a0e:	4807      	ldr	r0, [pc, #28]	; (8001a2c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8001a10:	f7ff fdd6 	bl	80015c0 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001a14:	4628      	mov	r0, r5
 8001a16:	f7ff febb 	bl	8001790 <JPEG_OutputHandler>
 8001a1a:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f8      	beq.n	8001a14 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8001a22:	2001      	movs	r0, #1
 8001a24:	b002      	add	sp, #8
 8001a26:	bd70      	pop	{r4, r5, r6, pc}
 8001a28:	200097c8 	.word	0x200097c8
 8001a2c:	2000eb68 	.word	0x2000eb68

08001a30 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001a30:	2101      	movs	r1, #1
 8001a32:	2200      	movs	r2, #0
{
 8001a34:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001a36:	4608      	mov	r0, r1
 8001a38:	f007 fd1a 	bl	8009470 <osSemaphoreNew>
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001a3e:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001a40:	b928      	cbnz	r0, 8001a4e <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001a44:	2128      	movs	r1, #40	; 0x28
 8001a46:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001a48:	480a      	ldr	r0, [pc, #40]	; (8001a74 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001a4a:	f01a ff7b 	bl	801c944 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2104      	movs	r1, #4
 8001a52:	2001      	movs	r0, #1
 8001a54:	f007 fdd2 	bl	80095fc <osMessageQueueNew>
 8001a58:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001a5a:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001a5c:	b918      	cbnz	r0, 8001a66 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001a60:	212c      	movs	r1, #44	; 0x2c
 8001a62:	4a03      	ldr	r2, [pc, #12]	; (8001a70 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001a64:	e7f0      	b.n	8001a48 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001a66:	bd08      	pop	{r3, pc}
 8001a68:	200097fc 	.word	0x200097fc
 8001a6c:	0801e170 	.word	0x0801e170
 8001a70:	0801e1b9 	.word	0x0801e1b9
 8001a74:	0801e1e8 	.word	0x0801e1e8
 8001a78:	200097f8 	.word	0x200097f8
 8001a7c:	0801e230 	.word	0x0801e230

08001a80 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001a80:	4b02      	ldr	r3, [pc, #8]	; (8001a8c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001a82:	f04f 31ff 	mov.w	r1, #4294967295
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	f007 bd48 	b.w	800951c <osSemaphoreAcquire>
 8001a8c:	200097fc 	.word	0x200097fc

08001a90 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001a90:	4b01      	ldr	r3, [pc, #4]	; (8001a98 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	f007 bd7c 	b.w	8009590 <osSemaphoreRelease>
 8001a98:	200097fc 	.word	0x200097fc

08001a9c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001a9c:	4b02      	ldr	r3, [pc, #8]	; (8001aa8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	f007 bd3b 	b.w	800951c <osSemaphoreAcquire>
 8001aa6:	bf00      	nop
 8001aa8:	200097fc 	.word	0x200097fc

08001aac <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001aac:	f7ff bff0 	b.w	8001a90 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001ab0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	4803      	ldr	r0, [pc, #12]	; (8001ac0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001ab4:	4903      	ldr	r1, [pc, #12]	; (8001ac4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	6800      	ldr	r0, [r0, #0]
 8001aba:	f007 bde5 	b.w	8009688 <osMessageQueuePut>
 8001abe:	bf00      	nop
 8001ac0:	200097f8 	.word	0x200097f8
 8001ac4:	20000030 	.word	0x20000030

08001ac8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001ac8:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001aca:	2300      	movs	r3, #0
 8001acc:	4c07      	ldr	r4, [pc, #28]	; (8001aec <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001ace:	a901      	add	r1, sp, #4
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	6820      	ldr	r0, [r4, #0]
 8001ad4:	f007 fe1a 	bl	800970c <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8001adc:	2200      	movs	r2, #0
 8001ade:	a901      	add	r1, sp, #4
 8001ae0:	6820      	ldr	r0, [r4, #0]
 8001ae2:	f007 fe13 	bl	800970c <osMessageQueueGet>
}
 8001ae6:	b002      	add	sp, #8
 8001ae8:	bd10      	pop	{r4, pc}
 8001aea:	bf00      	nop
 8001aec:	200097f8 	.word	0x200097f8

08001af0 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001af0:	6803      	ldr	r3, [r0, #0]
 8001af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af4:	4718      	bx	r3

08001af6 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001af6:	2001      	movs	r0, #1
 8001af8:	4770      	bx	lr

08001afa <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001afa:	6803      	ldr	r3, [r0, #0]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afe:	4718      	bx	r3

08001b00 <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <_ZN8STM32DMA10initializeEv+0x38>)
{
 8001b02:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b06:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b0a:	631a      	str	r2, [r3, #48]	; 0x30
 8001b0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b0e:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001b12:	9201      	str	r2, [sp, #4]
 8001b14:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001b16:	691a      	ldr	r2, [r3, #16]
 8001b18:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b1c:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001b1e:	691a      	ldr	r2, [r3, #16]
 8001b20:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001b24:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <_ZN8STM32DMA10initializeEv+0x3c>)
 8001b28:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <_ZN8STM32DMA10initializeEv+0x40>)
 8001b2a:	619a      	str	r2, [r3, #24]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b30:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <_ZN8STM32DMA10initializeEv+0x44>)
 8001b32:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001b34:	b002      	add	sp, #8
 8001b36:	4770      	bx	lr
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	2000e9e0 	.word	0x2000e9e0
 8001b40:	08001b89 	.word	0x08001b89
 8001b44:	e000e100 	.word	0xe000e100

08001b48 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001b48:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001b4c:	4770      	bx	lr
	...

08001b50 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b52:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b56:	6003      	str	r3, [r0, #0]
 8001b58:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <_ZN8STM32DMAD1Ev+0x1c>)
 8001b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001b5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b62:	f3bf 8f6f 	isb	sy
}
 8001b66:	4770      	bx	lr
 8001b68:	0801e3c8 	.word	0x0801e3c8
 8001b6c:	e000e100 	.word	0xe000e100

08001b70 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001b70:	b510      	push	{r4, lr}
 8001b72:	4604      	mov	r4, r0
}
 8001b74:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001b78:	f7ff ffea 	bl	8001b50 <_ZN8STM32DMAD1Ev>
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	f01a feb3 	bl	801c8e8 <_ZdlPvj>
 8001b82:	4620      	mov	r0, r4
 8001b84:	bd10      	pop	{r4, pc}
	...

08001b88 <DMA2D_XferCpltCallback>:
 8001b88:	4b02      	ldr	r3, [pc, #8]	; (8001b94 <DMA2D_XferCpltCallback+0xc>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001b8e:	6803      	ldr	r3, [r0, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	4718      	bx	r3
 8001b94:	20024418 	.word	0x20024418

08001b98 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001b98:	b570      	push	{r4, r5, r6, lr}
 8001b9a:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <_ZN8STM32DMAC1Ev+0x30>)
 8001b9e:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001ba0:	2600      	movs	r6, #0
 8001ba2:	4625      	mov	r5, r4
 8001ba4:	2260      	movs	r2, #96	; 0x60
 8001ba6:	6060      	str	r0, [r4, #4]
 8001ba8:	7226      	strb	r6, [r4, #8]
 8001baa:	7266      	strb	r6, [r4, #9]
 8001bac:	f845 3b20 	str.w	r3, [r5], #32
 8001bb0:	4629      	mov	r1, r5
 8001bb2:	f00b fb13 	bl	800d1dc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001bb6:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
        : color(0)
 8001bba:	60ee      	str	r6, [r5, #12]
 8001bbc:	3524      	adds	r5, #36	; 0x24
 8001bbe:	42ab      	cmp	r3, r5
 8001bc0:	d1fb      	bne.n	8001bba <_ZN8STM32DMAC1Ev+0x22>
}
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	bd70      	pop	{r4, r5, r6, pc}
 8001bc6:	bf00      	nop
 8001bc8:	0801e3c8 	.word	0x0801e3c8

08001bcc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001bcc:	b508      	push	{r3, lr}
    switch (format)
 8001bce:	290b      	cmp	r1, #11
 8001bd0:	d80b      	bhi.n	8001bea <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8001bd2:	e8df f001 	tbb	[pc, r1]
 8001bd6:	0612      	.short	0x0612
 8001bd8:	0a0a0a10 	.word	0x0a0a0a10
 8001bdc:	0808080a 	.word	0x0808080a
 8001be0:	0808      	.short	0x0808
 8001be2:	2001      	movs	r0, #1
}
 8001be4:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001be6:	2005      	movs	r0, #5
        break;
 8001be8:	e7fc      	b.n	8001be4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001bec:	2166      	movs	r1, #102	; 0x66
 8001bee:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001bf0:	4805      	ldr	r0, [pc, #20]	; (8001c08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8001bf2:	f01a fea7 	bl	801c944 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	e7f4      	b.n	8001be4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001bfa:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001bfc:	e7f2      	b.n	8001be4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001bfe:	bf00      	nop
 8001c00:	0801e272 	.word	0x0801e272
 8001c04:	0801e28d 	.word	0x0801e28d
 8001c08:	0801e2d7 	.word	0x0801e2d7

08001c0c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001c0c:	b508      	push	{r3, lr}
    switch (format)
 8001c0e:	290a      	cmp	r1, #10
 8001c10:	d809      	bhi.n	8001c26 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8001c12:	e8df f001 	tbb	[pc, r1]
 8001c16:	0610      	.short	0x0610
 8001c18:	0808080e 	.word	0x0808080e
 8001c1c:	06060608 	.word	0x06060608
 8001c20:	06          	.byte	0x06
 8001c21:	00          	.byte	0x00
 8001c22:	2001      	movs	r0, #1
}
 8001c24:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8001c28:	2187      	movs	r1, #135	; 0x87
 8001c2a:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001c2c:	4805      	ldr	r0, [pc, #20]	; (8001c44 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001c2e:	f01a fe89 	bl	801c944 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001c32:	2000      	movs	r0, #0
 8001c34:	e7f6      	b.n	8001c24 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001c36:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001c38:	e7f4      	b.n	8001c24 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001c3a:	bf00      	nop
 8001c3c:	0801e272 	.word	0x0801e272
 8001c40:	0801e31d 	.word	0x0801e31d
 8001c44:	0801e2d7 	.word	0x0801e2d7

08001c48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8001c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001c4c:	7f4f      	ldrb	r7, [r1, #29]
{
 8001c4e:	460c      	mov	r4, r1
 8001c50:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001c52:	4639      	mov	r1, r7
 8001c54:	f7ff ffba 	bl	8001bcc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001c58:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001c5c:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001c5e:	4648      	mov	r0, r9
 8001c60:	4641      	mov	r1, r8
 8001c62:	f7ff ffb3 	bl	8001bcc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001c66:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001c68:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001c6a:	4648      	mov	r0, r9
 8001c6c:	f7ff ffce 	bl	8001c0c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001c70:	8aa1      	ldrh	r1, [r4, #20]
 8001c72:	8b62      	ldrh	r2, [r4, #26]
 8001c74:	4b42      	ldr	r3, [pc, #264]	; (8001d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8001c76:	1a52      	subs	r2, r2, r1
 8001c78:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001c7a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001c7c:	8b22      	ldrh	r2, [r4, #24]
 8001c7e:	1a52      	subs	r2, r2, r1
 8001c80:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001c82:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001c84:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001c86:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001c8a:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001c8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001c8e:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001c90:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001c92:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8001c94:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001c96:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 8001c9a:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001c9c:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 8001ca0:	d026      	beq.n	8001cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 8001ca2:	d810      	bhi.n	8001cc6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 8001ca4:	2920      	cmp	r1, #32
 8001ca6:	ea45 0402 	orr.w	r4, r5, r2
 8001caa:	d062      	beq.n	8001d72 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 8001cac:	2940      	cmp	r1, #64	; 0x40
 8001cae:	d060      	beq.n	8001d72 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 8001cb0:	2904      	cmp	r1, #4
 8001cb2:	d05e      	beq.n	8001d72 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001cb4:	432a      	orrs	r2, r5
 8001cb6:	4b32      	ldr	r3, [pc, #200]	; (8001d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001cb8:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001cba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001cbe:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001cc0:	d05b      	beq.n	8001d7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8001cc2:	4a30      	ldr	r2, [pc, #192]	; (8001d84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8001cc4:	e040      	b.n	8001d48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8001cc6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001cca:	d007      	beq.n	8001cdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 8001ccc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001cd0:	d1f0      	bne.n	8001cb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001cd2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001cd6:	f042 0209 	orr.w	r2, r2, #9
 8001cda:	e003      	b.n	8001ce4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001cdc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001ce0:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001ce4:	61da      	str	r2, [r3, #28]
        return color;
 8001ce6:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001ce8:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001cea:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001cec:	6158      	str	r0, [r3, #20]
 8001cee:	e02a      	b.n	8001d46 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8001cf0:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001cf2:	432a      	orrs	r2, r5
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001cf4:	1d21      	adds	r1, r4, #4
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001cf6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001cfa:	62d9      	str	r1, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001cfc:	61da      	str	r2, [r3, #28]
            switch ((Bitmap::ClutFormat)palette->format)
 8001cfe:	7822      	ldrb	r2, [r4, #0]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001d00:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001d02:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8001d04:	b142      	cbz	r2, 8001d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8001d06:	2a01      	cmp	r2, #1
 8001d08:	d021      	beq.n	8001d4e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8001d0a:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8001d0c:	f240 1111 	movw	r1, #273	; 0x111
 8001d10:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8001d12:	481f      	ldr	r0, [pc, #124]	; (8001d90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8001d14:	f01a fe16 	bl	801c944 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001d18:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 8001d1a:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001d1c:	8861      	ldrh	r1, [r4, #2]
 8001d1e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001d22:	3901      	subs	r1, #1
 8001d24:	f022 0210 	bic.w	r2, r2, #16
 8001d28:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d2c:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8001d30:	69da      	ldr	r2, [r3, #28]
 8001d32:	f042 0220 	orr.w	r2, r2, #32
 8001d36:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8001d38:	69da      	ldr	r2, [r3, #28]
 8001d3a:	0692      	lsls	r2, r2, #26
 8001d3c:	d4fc      	bmi.n	8001d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8001d3e:	2210      	movs	r2, #16
 8001d40:	609a      	str	r2, [r3, #8]
            if (blend)
 8001d42:	2800      	cmp	r0, #0
 8001d44:	d0bd      	beq.n	8001cc2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001d46:	4a13      	ldr	r2, [pc, #76]	; (8001d94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001d48:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
 8001d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001d4e:	8862      	ldrh	r2, [r4, #2]
                if (blitOp.alpha == 255)
 8001d50:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001d54:	69d9      	ldr	r1, [r3, #28]
 8001d56:	f102 34ff 	add.w	r4, r2, #4294967295
                if (blitOp.alpha == 255)
 8001d5a:	bf18      	it	ne
 8001d5c:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001d5e:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8001d62:	f022 0210 	bic.w	r2, r2, #16
 8001d66:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8001d6a:	f042 0210 	orr.w	r2, r2, #16
 8001d6e:	61da      	str	r2, [r3, #28]
                break;
 8001d70:	e7dd      	b.n	8001d2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d72:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 8001d76:	61dc      	str	r4, [r3, #28]
 8001d78:	e7b7      	b.n	8001cea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001d7a:	f240 2201 	movw	r2, #513	; 0x201
 8001d7e:	e7e3      	b.n	8001d48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8001d80:	4002b000 	.word	0x4002b000
 8001d84:	00010201 	.word	0x00010201
 8001d88:	0801e368 	.word	0x0801e368
 8001d8c:	0801e382 	.word	0x0801e382
 8001d90:	0801e2d7 	.word	0x0801e2d7
 8001d94:	00020201 	.word	0x00020201

08001d98 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8001d98:	b570      	push	{r4, r5, r6, lr}
 8001d9a:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001d9c:	7f89      	ldrb	r1, [r1, #30]
 8001d9e:	f7ff ff35 	bl	8001c0c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001da2:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001da4:	8aa6      	ldrh	r6, [r4, #20]
 8001da6:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001da8:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001daa:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001dae:	6925      	ldr	r5, [r4, #16]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001db0:	1b92      	subs	r2, r2, r6
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001db2:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001db4:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001db6:	63dd      	str	r5, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8001dba:	6826      	ldr	r6, [r4, #0]
 8001dbc:	68e1      	ldr	r1, [r4, #12]
 8001dbe:	2e08      	cmp	r6, #8
 8001dc0:	d10d      	bne.n	8001dde <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001dc2:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001dc4:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001dc6:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8001dc8:	4a0e      	ldr	r2, [pc, #56]	; (8001e04 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8001dca:	7f20      	ldrb	r0, [r4, #28]
 8001dcc:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001dd0:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8001dd2:	4a0d      	ldr	r2, [pc, #52]	; (8001e08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001dd4:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001dd6:	615d      	str	r5, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001dd8:	60dd      	str	r5, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001dda:	601a      	str	r2, [r3, #0]
    }
}
 8001ddc:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8001dde:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8001de0:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8001de2:	0948      	lsrs	r0, r1, #5
        WRITE_REG(DMA2D->FGOR, 0);
 8001de4:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8001de6:	0a0a      	lsrs	r2, r1, #8
 8001de8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8001dec:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8001df0:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8001df4:	4302      	orrs	r2, r0
 8001df6:	430a      	orrs	r2, r1
 8001df8:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8001dfc:	e7ed      	b.n	8001dda <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8001dfe:	bf00      	nop
 8001e00:	4002b000 	.word	0x4002b000
 8001e04:	00010009 	.word	0x00010009
 8001e08:	00020201 	.word	0x00020201
 8001e0c:	00030201 	.word	0x00030201

08001e10 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8001e10:	2001      	movs	r0, #1
 8001e12:	4770      	bx	lr

08001e14 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8001e14:	200c      	movs	r0, #12
 8001e16:	4770      	bx	lr

08001e18 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8001e18:	230c      	movs	r3, #12
 8001e1a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001e1e:	3008      	adds	r0, #8
 8001e20:	4770      	bx	lr

08001e22 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8001e22:	230c      	movs	r3, #12
 8001e24:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001e28:	3008      	adds	r0, #8
 8001e2a:	4770      	bx	lr

08001e2c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	4770      	bx	lr

08001e30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8001e30:	20a0      	movs	r0, #160	; 0xa0
 8001e32:	4770      	bx	lr

08001e34 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001e34:	23a0      	movs	r3, #160	; 0xa0
 8001e36:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001e3a:	3008      	adds	r0, #8
 8001e3c:	4770      	bx	lr

08001e3e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001e3e:	23a0      	movs	r3, #160	; 0xa0
 8001e40:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001e44:	3008      	adds	r0, #8
 8001e46:	4770      	bx	lr

08001e48 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8001e48:	2001      	movs	r0, #1
 8001e4a:	4770      	bx	lr

08001e4c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8001e4c:	2010      	movs	r0, #16
 8001e4e:	4770      	bx	lr

08001e50 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001e50:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8001e54:	3008      	adds	r0, #8
 8001e56:	4770      	bx	lr

08001e58 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001e58:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8001e5c:	3008      	adds	r0, #8
 8001e5e:	4770      	bx	lr

08001e60 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8001e60:	4608      	mov	r0, r1
 8001e62:	f002 bb47 	b.w	80044f4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
	...

08001e68 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001e6a:	b510      	push	{r4, lr}
 8001e6c:	4604      	mov	r4, r0
 8001e6e:	6003      	str	r3, [r0, #0]
 8001e70:	f00a f81b 	bl	800beaa <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001e74:	4620      	mov	r0, r4
 8001e76:	bd10      	pop	{r4, pc}
 8001e78:	0801e480 	.word	0x0801e480

08001e7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001e7c:	b510      	push	{r4, lr}
 8001e7e:	4604      	mov	r4, r0
 8001e80:	f7ff fff2 	bl	8001e68 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001e84:	2114      	movs	r1, #20
 8001e86:	4620      	mov	r0, r4
 8001e88:	f01a fd2e 	bl	801c8e8 <_ZdlPvj>
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	bd10      	pop	{r4, pc}

08001e90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001e92:	b510      	push	{r4, lr}
 8001e94:	4604      	mov	r4, r0
 8001e96:	6003      	str	r3, [r0, #0]
 8001e98:	f00a f807 	bl	800beaa <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	bd10      	pop	{r4, pc}
 8001ea0:	0801e44c 	.word	0x0801e44c

08001ea4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001ea4:	b510      	push	{r4, lr}
 8001ea6:	4604      	mov	r4, r0
 8001ea8:	f7ff fff2 	bl	8001e90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001eac:	21a8      	movs	r1, #168	; 0xa8
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f01a fd1a 	bl	801c8e8 <_ZdlPvj>
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	bd10      	pop	{r4, pc}

08001eb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8001eb8:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001eba:	b510      	push	{r4, lr}
 8001ebc:	4604      	mov	r4, r0
 8001ebe:	6003      	str	r3, [r0, #0]
 8001ec0:	f009 fff3 	bl	800beaa <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	bd10      	pop	{r4, pc}
 8001ec8:	0801e418 	.word	0x0801e418

08001ecc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001ecc:	b510      	push	{r4, lr}
 8001ece:	4604      	mov	r4, r0
 8001ed0:	f7ff fff2 	bl	8001eb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001ed4:	2118      	movs	r1, #24
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	f01a fd06 	bl	801c8e8 <_ZdlPvj>
 8001edc:	4620      	mov	r0, r4
 8001ede:	bd10      	pop	{r4, pc}

08001ee0 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <_ZN12FrontendHeapD1Ev+0x24>)
 8001ee2:	b510      	push	{r4, lr}
 8001ee4:	4604      	mov	r4, r0
 8001ee6:	f840 3bd4 	str.w	r3, [r0], #212
 8001eea:	f7ff ffbd 	bl	8001e68 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001eee:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001ef2:	f7ff ffcd 	bl	8001e90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001ef6:	f104 0014 	add.w	r0, r4, #20
 8001efa:	f7ff ffdd 	bl	8001eb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001efe:	4620      	mov	r0, r4
 8001f00:	bd10      	pop	{r4, pc}
 8001f02:	bf00      	nop
 8001f04:	0801e4b4 	.word	0x0801e4b4

08001f08 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8001f08:	b508      	push	{r3, lr}
 8001f0a:	4802      	ldr	r0, [pc, #8]	; (8001f14 <__tcf_0+0xc>)
 8001f0c:	f7ff ffe8 	bl	8001ee0 <_ZN12FrontendHeapD1Ev>
 8001f10:	bd08      	pop	{r3, pc}
 8001f12:	bf00      	nop
 8001f14:	20009804 	.word	0x20009804

08001f18 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8001f18:	b510      	push	{r4, lr}
 8001f1a:	4604      	mov	r4, r0
 8001f1c:	f7ff ffe0 	bl	8001ee0 <_ZN12FrontendHeapD1Ev>
 8001f20:	f44f 7112 	mov.w	r1, #584	; 0x248
 8001f24:	4620      	mov	r0, r4
 8001f26:	f01a fcdf 	bl	801c8e8 <_ZdlPvj>
 8001f2a:	4620      	mov	r0, r4
 8001f2c:	bd10      	pop	{r4, pc}
	...

08001f30 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8001f30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8001f34:	f002 f978 	bl	8004228 <_ZN14BitmapDatabase11getInstanceEv>
 8001f38:	2400      	movs	r4, #0
 8001f3a:	4605      	mov	r5, r0
 8001f3c:	f002 f978 	bl	8004230 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8001f40:	4623      	mov	r3, r4
 8001f42:	4601      	mov	r1, r0
 8001f44:	4622      	mov	r2, r4
 8001f46:	4628      	mov	r0, r5
 8001f48:	9400      	str	r4, [sp, #0]
 8001f4a:	f00e feb7 	bl	8010cbc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8001f4e:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <touchgfx_init+0xb4>)
 8001f50:	4a25      	ldr	r2, [pc, #148]	; (8001fe8 <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8001f52:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8001f54:	4d25      	ldr	r5, [pc, #148]	; (8001fec <touchgfx_init+0xbc>)
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	f002 fce0 	bl	800491c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8001f5c:	4824      	ldr	r0, [pc, #144]	; (8001ff0 <touchgfx_init+0xc0>)
 8001f5e:	f00e fe15 	bl	8010b8c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8001f62:	782b      	ldrb	r3, [r5, #0]
 8001f64:	f3bf 8f5b 	dmb	ish
 8001f68:	07db      	lsls	r3, r3, #31
 8001f6a:	d435      	bmi.n	8001fd8 <touchgfx_init+0xa8>
 8001f6c:	4628      	mov	r0, r5
 8001f6e:	f01a fcbd 	bl	801c8ec <__cxa_guard_acquire>
 8001f72:	b388      	cbz	r0, 8001fd8 <touchgfx_init+0xa8>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8001f74:	4c1f      	ldr	r4, [pc, #124]	; (8001ff4 <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8001f76:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <touchgfx_init+0xc8>)
 8001f78:	f104 06ec 	add.w	r6, r4, #236	; 0xec
 8001f7c:	f104 0014 	add.w	r0, r4, #20
 8001f80:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8001f84:	f104 07d4 	add.w	r7, r4, #212	; 0xd4
 8001f88:	6023      	str	r3, [r4, #0]
 8001f8a:	6060      	str	r0, [r4, #4]
 8001f8c:	f8c4 8008 	str.w	r8, [r4, #8]
 8001f90:	60e7      	str	r7, [r4, #12]
 8001f92:	6126      	str	r6, [r4, #16]
 8001f94:	f009 ff8a 	bl	800beac <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001f98:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <touchgfx_init+0xcc>)
 8001f9a:	4640      	mov	r0, r8
 8001f9c:	6163      	str	r3, [r4, #20]
 8001f9e:	f009 ff85 	bl	800beac <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001fa2:	4b17      	ldr	r3, [pc, #92]	; (8002000 <touchgfx_init+0xd0>)
 8001fa4:	4638      	mov	r0, r7
 8001fa6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001fa8:	f009 ff80 	bl	800beac <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001fac:	4b15      	ldr	r3, [pc, #84]	; (8002004 <touchgfx_init+0xd4>)
 8001fae:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8001fb2:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 8001fb6:	f002 fd1f 	bl	80049f8 <_ZN5ModelC1Ev>
 8001fba:	4622      	mov	r2, r4
 8001fbc:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
 8001fc0:	4630      	mov	r0, r6
 8001fc2:	f002 fd0f 	bl	80049e4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8001fc6:	4630      	mov	r0, r6
 8001fc8:	f002 fa94 	bl	80044f4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8001fcc:	480e      	ldr	r0, [pc, #56]	; (8002008 <touchgfx_init+0xd8>)
 8001fce:	f01a fcd7 	bl	801c980 <atexit>
 8001fd2:	4628      	mov	r0, r5
 8001fd4:	f01a fc96 	bl	801c904 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8001fd8:	480c      	ldr	r0, [pc, #48]	; (800200c <touchgfx_init+0xdc>)
}
 8001fda:	b002      	add	sp, #8
 8001fdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8001fe0:	f7fe be58 	b.w	8000c94 <_ZN11TouchGFXHAL10initializeEv>
 8001fe4:	20024474 	.word	0x20024474
 8001fe8:	2000a86c 	.word	0x2000a86c
 8001fec:	20009800 	.word	0x20009800
 8001ff0:	20000034 	.word	0x20000034
 8001ff4:	20009804 	.word	0x20009804
 8001ff8:	0801e4b4 	.word	0x0801e4b4
 8001ffc:	0801e418 	.word	0x0801e418
 8002000:	0801e44c 	.word	0x0801e44c
 8002004:	0801e480 	.word	0x0801e480
 8002008:	08001f09 	.word	0x08001f09
 800200c:	2000a7f0 	.word	0x2000a7f0

08002010 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 8002010:	4770      	bx	lr
	...

08002014 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002014:	4801      	ldr	r0, [pc, #4]	; (800201c <touchgfx_taskEntry+0x8>)
 8002016:	f7fe be57 	b.w	8000cc8 <_ZN11TouchGFXHAL9taskEntryEv>
 800201a:	bf00      	nop
 800201c:	2000a7f0 	.word	0x2000a7f0

08002020 <_GLOBAL__sub_I_touchgfx_init>:
}
 8002020:	b513      	push	{r0, r1, r4, lr}
static STM32DMA dma;
 8002022:	490c      	ldr	r1, [pc, #48]	; (8002054 <_GLOBAL__sub_I_touchgfx_init+0x34>)
{
public:

    STM32TouchController() {}
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <_GLOBAL__sub_I_touchgfx_init+0x38>)
 8002026:	4c0d      	ldr	r4, [pc, #52]	; (800205c <_GLOBAL__sub_I_touchgfx_init+0x3c>)
 8002028:	4608      	mov	r0, r1
 800202a:	6023      	str	r3, [r4, #0]
 800202c:	f7ff fdb4 	bl	8001b98 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8002030:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 8002032:	4610      	mov	r0, r2
 8002034:	f011 ff4e 	bl	8013ed4 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8002038:	f44f 7348 	mov.w	r3, #800	; 0x320
 800203c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002040:	4904      	ldr	r1, [pc, #16]	; (8002054 <_GLOBAL__sub_I_touchgfx_init+0x34>)
 8002042:	4808      	ldr	r0, [pc, #32]	; (8002064 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 8002044:	e9cd 3200 	strd	r3, r2, [sp]
 8002048:	4623      	mov	r3, r4
 800204a:	4a05      	ldr	r2, [pc, #20]	; (8002060 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 800204c:	f7fe feec 	bl	8000e28 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 8002050:	b002      	add	sp, #8
 8002052:	bd10      	pop	{r4, pc}
 8002054:	20009a50 	.word	0x20009a50
 8002058:	0801dbf8 	.word	0x0801dbf8
 800205c:	20009a4c 	.word	0x20009a4c
 8002060:	2000a870 	.word	0x2000a870
 8002064:	2000a7f0 	.word	0x2000a7f0

08002068 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002068:	4801      	ldr	r0, [pc, #4]	; (8002070 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800206a:	f7ff bd71 	b.w	8001b50 <_ZN8STM32DMAD1Ev>
 800206e:	bf00      	nop
 8002070:	20009a50 	.word	0x20009a50

08002074 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002074:	2000      	movs	r0, #0
 8002076:	4770      	bx	lr

08002078 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002078:	8081      	strh	r1, [r0, #4]
    }
 800207a:	4770      	bx	lr

0800207c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 800207c:	80c1      	strh	r1, [r0, #6]
    }
 800207e:	4770      	bx	lr

08002080 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002080:	8101      	strh	r1, [r0, #8]
    }
 8002082:	4770      	bx	lr

08002084 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002084:	8141      	strh	r1, [r0, #10]
    }
 8002086:	4770      	bx	lr

08002088 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002088:	4770      	bx	lr

0800208a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800208a:	4770      	bx	lr

0800208c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 800208c:	4770      	bx	lr

0800208e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 800208e:	4770      	bx	lr

08002090 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002090:	4770      	bx	lr

08002092 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002092:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002094:	88c4      	ldrh	r4, [r0, #6]
 8002096:	6803      	ldr	r3, [r0, #0]
 8002098:	1b12      	subs	r2, r2, r4
 800209a:	8884      	ldrh	r4, [r0, #4]
 800209c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209e:	1b09      	subs	r1, r1, r4
 80020a0:	b212      	sxth	r2, r2
    }
 80020a2:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80020a6:	b209      	sxth	r1, r1
 80020a8:	4718      	bx	r3

080020aa <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80020aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020ae:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80020b0:	f04f 33ff 	mov.w	r3, #4294967295
 80020b4:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80020b6:	6813      	ldr	r3, [r2, #0]
 80020b8:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80020ba:	6010      	str	r0, [r2, #0]
    }
 80020bc:	4770      	bx	lr

080020be <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80020be:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80020c2:	b11a      	cbz	r2, 80020cc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80020c4:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80020c8:	b102      	cbz	r2, 80020cc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80020ca:	6018      	str	r0, [r3, #0]
        }
    }
 80020cc:	4770      	bx	lr
	...

080020d0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d0:	4b02      	ldr	r3, [pc, #8]	; (80020dc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80020d2:	2290      	movs	r2, #144	; 0x90
 80020d4:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000e100 	.word	0xe000e100

080020e0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e0:	4b02      	ldr	r3, [pc, #8]	; (80020ec <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 80020e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020e6:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000e100 	.word	0xe000e100

080020f0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
}
 80020f0:	4770      	bx	lr

080020f2 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80020f2:	4770      	bx	lr

080020f4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80020f4:	4a12      	ldr	r2, [pc, #72]	; (8002140 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 80020f6:	6953      	ldr	r3, [r2, #20]
 80020f8:	03db      	lsls	r3, r3, #15
{
 80020fa:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80020fc:	d51e      	bpl.n	800213c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002104:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002108:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800210c:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002110:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002114:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002118:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800211a:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800211e:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002120:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8002124:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002126:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 800212a:	d2f9      	bcs.n	8002120 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 800212c:	3b20      	subs	r3, #32
 800212e:	f113 0f20 	cmn.w	r3, #32
 8002132:	d1f2      	bne.n	800211a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8002134:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002138:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 800213c:	bd70      	pop	{r4, r5, r6, pc}
 800213e:	bf00      	nop
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 8002144:	6301      	str	r1, [r0, #48]	; 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 8002146:	e9c0 210d 	strd	r2, r1, [r0, #52]	; 0x34
    }
 800214a:	4770      	bx	lr

0800214c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 800214c:	4770      	bx	lr

0800214e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 800214e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8002152:	4611      	mov	r1, r2
 8002154:	6840      	ldr	r0, [r0, #4]
 8002156:	6803      	ldr	r3, [r0, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	4718      	bx	r3

0800215c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 800215c:	b510      	push	{r4, lr}
 800215e:	4604      	mov	r4, r0
 8002160:	2148      	movs	r1, #72	; 0x48
 8002162:	f01a fbc1 	bl	801c8e8 <_ZdlPvj>
 8002166:	4620      	mov	r0, r4
 8002168:	bd10      	pop	{r4, pc}
	...

0800216c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 800216c:	b538      	push	{r3, r4, r5, lr}
 800216e:	4604      	mov	r4, r0
    HAL::initialize();
 8002170:	f00a f999 	bl	800c4a6 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8002178:	f00c f968 	bl	800e44c <_ZN8touchgfx11Application11getInstanceEv>
 800217c:	4601      	mov	r1, r0
 800217e:	4620      	mov	r0, r4
 8002180:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8002182:	6823      	ldr	r3, [r4, #0]
 8002184:	4907      	ldr	r1, [pc, #28]	; (80021a4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x38>)
 8002186:	4620      	mov	r0, r4
 8002188:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800218c:	2300      	movs	r3, #0
 800218e:	461a      	mov	r2, r3
 8002190:	47a8      	blx	r5
    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
    {
        // Running in UI thread / main

        assert(index < no_streams);
        mjpegDecoders[index] = &decoder;
 8002192:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8002194:	4a05      	ldr	r2, [pc, #20]	; (80021ac <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8002196:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8002198:	4a05      	ldr	r2, [pc, #20]	; (80021b0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 800219a:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB = bufferRGB;
 800219c:	639a      	str	r2, [r3, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
 800219e:	4a05      	ldr	r2, [pc, #20]	; (80021b4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 80021a0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80021a2:	bd38      	pop	{r3, r4, r5, pc}
 80021a4:	c00bb800 	.word	0xc00bb800
 80021a8:	2000a92c 	.word	0x2000a92c
 80021ac:	2000a8e8 	.word	0x2000a8e8
 80021b0:	c0000000 	.word	0xc0000000
 80021b4:	000bb800 	.word	0x000bb800

080021b8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
    HAL::flushFrameBuffer(rect);
 80021b8:	f00a b926 	b.w	800c408 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080021bc <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 80021bc:	f00a ba81 	b.w	800c6c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080021c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 80021c0:	b538      	push	{r3, r4, r5, lr}
 80021c2:	4604      	mov	r4, r0
 80021c4:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 80021c6:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80021c8:	f04f 31ff 	mov.w	r1, #4294967295
 80021cc:	f007 f8f6 	bl	80093bc <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 80021d0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80021d2:	f007 f923 	bl	800941c <osMutexRelease>
        streams[handle].isActive = false;
 80021d6:	2124      	movs	r1, #36	; 0x24
 80021d8:	2300      	movs	r3, #0
 80021da:	fb01 4505 	mla	r5, r1, r5, r4
 80021de:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
        if (oneIsActive == false)
 80021e2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80021e6:	b90b      	cbnz	r3, 80021ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 80021e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021ea:	63a3      	str	r3, [r4, #56]	; 0x38
    }
 80021ec:	bd38      	pop	{r3, r4, r5, pc}

080021ee <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80021ee:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80021f2:	b112      	cbz	r2, 80021fa <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80021f4:	6803      	ldr	r3, [r0, #0]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	4718      	bx	r3
    }
 80021fa:	4770      	bx	lr

080021fc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    {
        assert(handle < no_streams);
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
 80021fc:	b508      	push	{r3, lr}
    {
        assert(handle < no_streams);
 80021fe:	b131      	cbz	r1, 800220e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x12>
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
 8002202:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8002206:	4a04      	ldr	r2, [pc, #16]	; (8002218 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
 8002208:	4804      	ldr	r0, [pc, #16]	; (800221c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
 800220a:	f01a fb9b 	bl	801c944 <__assert_func>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
 800220e:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8002212:	bd08      	pop	{r3, pc}
 8002214:	0801e4c0 	.word	0x0801e4c0
 8002218:	0801e4d4 	.word	0x0801e4d4
 800221c:	0801e65e 	.word	0x0801e65e

08002220 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8002220:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8002222:	b131      	cbz	r1, 8002232 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8002226:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 800222a:	4a06      	ldr	r2, [pc, #24]	; (8002244 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 800222c:	4806      	ldr	r0, [pc, #24]	; (8002248 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 800222e:	f01a fb89 	bl	801c944 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8002232:	6840      	ldr	r0, [r0, #4]
 8002234:	4611      	mov	r1, r2
 8002236:	6803      	ldr	r3, [r0, #0]
    }
 8002238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4718      	bx	r3
 8002240:	0801e4c0 	.word	0x0801e4c0
 8002244:	0801e6a1 	.word	0x0801e6a1
 8002248:	0801e65e 	.word	0x0801e65e

0800224c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 800224c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800224e:	b129      	cbz	r1, 800225c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x10>
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
 8002252:	2179      	movs	r1, #121	; 0x79
 8002254:	4a03      	ldr	r2, [pc, #12]	; (8002264 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
 8002256:	4804      	ldr	r0, [pc, #16]	; (8002268 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
 8002258:	f01a fb74 	bl	801c944 <__assert_func>
    }
 800225c:	68c0      	ldr	r0, [r0, #12]
 800225e:	bd08      	pop	{r3, pc}
 8002260:	0801e4c0 	.word	0x0801e4c0
 8002264:	0801e84f 	.word	0x0801e84f
 8002268:	0801e65e 	.word	0x0801e65e

0800226c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 800226c:	b510      	push	{r4, lr}
 800226e:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8002270:	b129      	cbz	r1, 800227e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 8002272:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 8002274:	21a2      	movs	r1, #162	; 0xa2
 8002276:	4a19      	ldr	r2, [pc, #100]	; (80022dc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 8002278:	4819      	ldr	r0, [pc, #100]	; (80022e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 800227a:	f01a fb63 	bl	801c944 <__assert_func>
        switch (cmd)
 800227e:	2a05      	cmp	r2, #5
 8002280:	d815      	bhi.n	80022ae <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8002282:	e8df f002 	tbb	[pc, r2]
 8002286:	1103      	.short	0x1103
 8002288:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 800228c:	6840      	ldr	r0, [r0, #4]
 800228e:	6803      	ldr	r3, [r0, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	4798      	blx	r3
 8002294:	b158      	cbz	r0, 80022ae <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 8002296:	2301      	movs	r3, #1
 8002298:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 800229c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            stream.frameCount = 0;
 80022a0:	2300      	movs	r3, #0
            stream.tickCount = 0;
 80022a2:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 80022a6:	e002      	b.n	80022ae <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 80022a8:	2300      	movs	r3, #0
 80022aa:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    }
 80022ae:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 80022b0:	6203      	str	r3, [r0, #32]
 80022b2:	e7f5      	b.n	80022a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 80022b4:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 80022b6:	2301      	movs	r3, #1
 80022b8:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
 80022bc:	e7f0      	b.n	80022a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 80022be:	2300      	movs	r3, #0
 80022c0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
            stream.seek_to_frame = 1;
 80022c4:	2301      	movs	r3, #1
 80022c6:	6203      	str	r3, [r0, #32]
            break;
 80022c8:	e7f1      	b.n	80022ae <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 80022ca:	3b00      	subs	r3, #0
 80022cc:	bf18      	it	ne
 80022ce:	2301      	movne	r3, #1
 80022d0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    }
 80022d4:	e7eb      	b.n	80022ae <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80022d6:	bf00      	nop
 80022d8:	0801e4c0 	.word	0x0801e4c0
 80022dc:	0801ea04 	.word	0x0801ea04
 80022e0:	0801e65e 	.word	0x0801e65e

080022e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 80022e4:	b510      	push	{r4, lr}
 80022e6:	460c      	mov	r4, r1
 80022e8:	4611      	mov	r1, r2
 80022ea:	461a      	mov	r2, r3
        assert(handle < no_streams);
 80022ec:	b12c      	cbz	r4, 80022fa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x16>
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x24>)
 80022f0:	2190      	movs	r1, #144	; 0x90
 80022f2:	4a06      	ldr	r2, [pc, #24]	; (800230c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
 80022f4:	4806      	ldr	r0, [pc, #24]	; (8002310 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
 80022f6:	f01a fb25 	bl	801c944 <__assert_func>
        stream.frameNumber = 0;
 80022fa:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 80022fc:	6840      	ldr	r0, [r0, #4]
 80022fe:	6803      	ldr	r3, [r0, #0]
    }
 8002300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	4718      	bx	r3
 8002308:	0801e4c0 	.word	0x0801e4c0
 800230c:	0801ebd8 	.word	0x0801ebd8
 8002310:	0801e65e 	.word	0x0801e65e

08002314 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8002314:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002316:	b129      	cbz	r1, 8002324 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x10>
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
 800231a:	2182      	movs	r1, #130	; 0x82
 800231c:	4a05      	ldr	r2, [pc, #20]	; (8002334 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
 800231e:	4806      	ldr	r0, [pc, #24]	; (8002338 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
 8002320:	f01a fb10 	bl	801c944 <__assert_func>
        stream.tickCount = 0;
 8002324:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8002328:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 800232c:	bd08      	pop	{r3, pc}
 800232e:	bf00      	nop
 8002330:	0801e4c0 	.word	0x0801e4c0
 8002334:	0801edb3 	.word	0x0801edb3
 8002338:	0801e65e 	.word	0x0801e65e

0800233c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 800233c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8002340:	b510      	push	{r4, lr}
 8002342:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 8002344:	b153      	cbz	r3, 800235c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 8002346:	f04f 31ff 	mov.w	r1, #4294967295
 800234a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800234c:	f007 f836 	bl	80093bc <osMutexAcquire>
            firstDrawThisFrame = false;
 8002350:	2300      	movs	r3, #0
 8002352:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
            uiHasMutex = true;
 8002356:	2301      	movs	r3, #1
 8002358:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    }
 800235c:	bd10      	pop	{r4, pc}
	...

08002360 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8002360:	b510      	push	{r4, lr}
 8002362:	4604      	mov	r4, r0
 8002364:	4610      	mov	r0, r2
        assert(handle < no_streams);
 8002366:	b129      	cbz	r1, 8002374 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8002368:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 800236a:	21d0      	movs	r1, #208	; 0xd0
 800236c:	4a13      	ldr	r2, [pc, #76]	; (80023bc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 800236e:	4814      	ldr	r0, [pc, #80]	; (80023c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 8002370:	f01a fae8 	bl	801c944 <__assert_func>
        if (stream.isPlaying)
 8002374:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8002378:	b133      	cbz	r3, 8002388 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 800237a:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f893 1067 	ldrb.w	r1, [r3, #103]	; 0x67
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 8002382:	6963      	ldr	r3, [r4, #20]
 8002384:	440b      	add	r3, r1
 8002386:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 8002388:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800238c:	b90b      	cbnz	r3, 8002392 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 800238e:	2001      	movs	r0, #1
    }
 8002390:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 8002392:	68a3      	ldr	r3, [r4, #8]
 8002394:	6303      	str	r3, [r0, #48]	; 0x30
            widget.invalidate();
 8002396:	6803      	ldr	r3, [r0, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 800239c:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 800239e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
            stream.doInvalidateOnNextTick = false;
 80023a2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 80023a6:	2800      	cmp	r0, #0
 80023a8:	d1f1      	bne.n	800238e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 80023aa:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1ee      	bne.n	8002390 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 80023b2:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 80023b6:	e7eb      	b.n	8002390 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 80023b8:	0801e4c0 	.word	0x0801e4c0
 80023bc:	0801ef6f 	.word	0x0801ef6f
 80023c0:	0801e65e 	.word	0x0801e65e
 80023c4:	20024418 	.word	0x20024418

080023c8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 80023c8:	b510      	push	{r4, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 80023ca:	4c17      	ldr	r4, [pc, #92]	; (8002428 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>)
    HAL::endFrame();
 80023cc:	f00a f85e 	bl	800c48c <_ZN8touchgfx3HAL8endFrameEv>
 80023d0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80023d4:	b913      	cbnz	r3, 80023dc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x14>
 80023d6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80023da:	b1ab      	cbz	r3, 8002408 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x40>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 80023dc:	69e1      	ldr	r1, [r4, #28]
 80023de:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80023e2:	4353      	muls	r3, r2
 80023e4:	6922      	ldr	r2, [r4, #16]
 80023e6:	434a      	muls	r2, r1
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d30d      	bcc.n	8002408 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x40>
        {
            if (allowSkipFrames)
 80023ec:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 80023f0:	b138      	cbz	r0, 8002402 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3a>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 80023f8:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 80023fa:	bf98      	it	ls
 80023fc:	f102 32ff 	addls.w	r2, r2, #4294967295
 8002400:	6262      	str	r2, [r4, #36]	; 0x24
                    stream.doDecode = true;
 8002402:	2301      	movs	r3, #1
 8002404:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        firstDrawThisFrame = true;
 8002408:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 800240a:	6c20      	ldr	r0, [r4, #64]	; 0x40
        firstDrawThisFrame = true;
 800240c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        SEM_POST(semDecode);
 8002410:	f007 f8be 	bl	8009590 <osSemaphoreRelease>
        if (uiHasMutex)
 8002414:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002418:	b12b      	cbz	r3, 8002426 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x5e>
            MUTEX_UNLOCK(mutexBuffers);
 800241a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800241c:	f006 fffe 	bl	800941c <osMutexRelease>
            uiHasMutex = false;
 8002420:	2300      	movs	r3, #0
 8002422:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002426:	bd10      	pop	{r4, pc}
 8002428:	2000a92c 	.word	0x2000a92c

0800242c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 800242e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002432:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002436:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800243a:	f3bf 8f6f 	isb	sy
}
 800243e:	4770      	bx	lr
 8002440:	e000e100 	.word	0xe000e100

08002444 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8002444:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8002448:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
 800244a:	b9db      	cbnz	r3, 8002484 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x40>
        streams[handle].isActive = true;
 800244c:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800244e:	6b85      	ldr	r5, [r0, #56]	; 0x38
            {
                // Reset stream parameters
                streams[i] = Stream();
 8002450:	60c3      	str	r3, [r0, #12]
        streams[handle].isActive = true;
 8002452:	6282      	str	r2, [r0, #40]	; 0x28
                streams[i] = Stream();
 8002454:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002458:	6103      	str	r3, [r0, #16]
 800245a:	8582      	strh	r2, [r0, #44]	; 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800245c:	f505 223b 	add.w	r2, r5, #765952	; 0xbb000
                streams[i] = Stream();
 8002460:	6143      	str	r3, [r0, #20]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
                streams[i] = Stream();
 8002466:	6183      	str	r3, [r0, #24]
 8002468:	61c3      	str	r3, [r0, #28]
 800246a:	6203      	str	r3, [r0, #32]
 800246c:	6243      	str	r3, [r0, #36]	; 0x24
 800246e:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002472:	e9d0 460c 	ldrd	r4, r6, [r0, #48]	; 0x30
 8002476:	4434      	add	r4, r6
 8002478:	42a2      	cmp	r2, r4
 800247a:	d90a      	bls.n	8002492 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4e>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 800247e:	2152      	movs	r1, #82	; 0x52
 8002480:	4a0b      	ldr	r2, [pc, #44]	; (80024b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 8002482:	e003      	b.n	800248c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 8002486:	f240 11c5 	movw	r1, #453	; 0x1c5
 800248a:	4a0b      	ldr	r2, [pc, #44]	; (80024b8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 800248c:	480b      	ldr	r0, [pc, #44]	; (80024bc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 800248e:	f01a fa59 	bl	801c944 <__assert_func>
        topBufferRGB += sizeOfOneDecodeBuffer;
 8002492:	6382      	str	r2, [r0, #56]	; 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8002494:	f44f 7248 	mov.w	r2, #800	; 0x320
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8002498:	6085      	str	r5, [r0, #8]
    }
 800249a:	4618      	mov	r0, r3
 800249c:	86ca      	strh	r2, [r1, #54]	; 0x36
        bufferHeight = height;
 800249e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
        format = bufferFormat;
 80024a2:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferHeight = height;
 80024a6:	870a      	strh	r2, [r1, #56]	; 0x38
        buffer = videoBuffer;
 80024a8:	630b      	str	r3, [r1, #48]	; 0x30
 80024aa:	bd70      	pop	{r4, r5, r6, pc}
 80024ac:	0801f2c7 	.word	0x0801f2c7
 80024b0:	0801f302 	.word	0x0801f302
 80024b4:	0801f110 	.word	0x0801f110
 80024b8:	0801f140 	.word	0x0801f140
 80024bc:	0801e65e 	.word	0x0801e65e

080024c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 80024c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80024c4:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 80024c6:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 80024c8:	f44f 67c8 	mov.w	r7, #1600	; 0x640
            SEM_WAIT(semDecode);
 80024cc:	f04f 31ff 	mov.w	r1, #4294967295
 80024d0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80024d2:	f007 f823 	bl	800951c <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 80024d6:	f04f 31ff 	mov.w	r1, #4294967295
 80024da:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80024dc:	f006 ff6e 	bl	80093bc <osMutexAcquire>
                if (stream.doDecode)
 80024e0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80024e4:	b343      	cbz	r3, 8002538 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 80024e6:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 80024e8:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 80024ec:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 80024ee:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
                    if (stream.seek_to_frame > 0)
 80024f2:	f1b8 0f00 	cmp.w	r8, #0
 80024f6:	d023      	beq.n	8002540 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	4641      	mov	r1, r8
 80024fc:	4628      	mov	r0, r5
 80024fe:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002504:	682b      	ldr	r3, [r5, #0]
 8002506:	f44f 7248 	mov.w	r2, #800	; 0x320
 800250a:	9700      	str	r7, [sp, #0]
 800250c:	4628      	mov	r0, r5
 800250e:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8002512:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002516:	68a1      	ldr	r1, [r4, #8]
 8002518:	47c0      	blx	r8
                    stream.frameCount++;
 800251a:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 800251c:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
                    stream.frameCount++;
 8002520:	3301      	adds	r3, #1
 8002522:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8002524:	b1f0      	cbz	r0, 8002564 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8002526:	682b      	ldr	r3, [r5, #0]
 8002528:	4628      	mov	r0, r5
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	4798      	blx	r3
 800252e:	3801      	subs	r0, #1
 8002530:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8002532:	2300      	movs	r3, #0
 8002534:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 8002538:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800253a:	f006 ff6f 	bl	800941c <osMutexRelease>
        while (1)
 800253e:	e7c5      	b.n	80024cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 8002540:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002542:	2a00      	cmp	r2, #0
 8002544:	d0de      	beq.n	8002504 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8002546:	4628      	mov	r0, r5
 8002548:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	; 0x24
 800254c:	4798      	blx	r3
 800254e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002550:	4401      	add	r1, r0
 8002552:	4628      	mov	r0, r5
 8002554:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 8002556:	6923      	ldr	r3, [r4, #16]
 8002558:	6a62      	ldr	r2, [r4, #36]	; 0x24
                            stream.skip_frames = 0;
 800255a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
                            stream.frameCount += stream.skip_frames;
 800255e:	4413      	add	r3, r2
 8002560:	6123      	str	r3, [r4, #16]
 8002562:	e7cf      	b.n	8002504 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                        stream.frameNumber = 1;
 8002564:	60e6      	str	r6, [r4, #12]
 8002566:	e7e4      	b.n	8002532 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x72>

08002568 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 8002568:	4801      	ldr	r0, [pc, #4]	; (8002570 <videoTaskFunc+0x8>)
{
 800256a:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 800256c:	f7ff ffa8 	bl	80024c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
 8002570:	2000a92c 	.word	0x2000a92c

08002574 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 8002574:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 8002576:	4814      	ldr	r0, [pc, #80]	; (80025c8 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002578:	2500      	movs	r5, #0
 800257a:	f7fe fe1f 	bl	80011bc <_ZN20HardwareMJPEGDecoderC1Ev>
 800257e:	4c13      	ldr	r4, [pc, #76]	; (80025cc <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 8002580:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8002582:	462a      	mov	r2, r5
 8002584:	4629      	mov	r1, r5
 8002586:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002588:	6023      	str	r3, [r4, #0]
 800258a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800258e:	63a5      	str	r5, [r4, #56]	; 0x38
 8002590:	87a3      	strh	r3, [r4, #60]	; 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8002592:	85a3      	strh	r3, [r4, #44]	; 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002594:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8002598:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 800259c:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 80025a0:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
 80025a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 80025a8:	e9c4 5503 	strd	r5, r5, [r4, #12]
 80025ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80025b0:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 80025b4:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 80025b8:	f006 ff5a 	bl	8009470 <osSemaphoreNew>
 80025bc:	6420      	str	r0, [r4, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
 80025be:	4628      	mov	r0, r5
 80025c0:	f006 feba 	bl	8009338 <osMutexNew>
 80025c4:	6460      	str	r0, [r4, #68]	; 0x44
}
 80025c6:	bd38      	pop	{r3, r4, r5, pc}
 80025c8:	2000a8e8 	.word	0x2000a8e8
 80025cc:	2000a92c 	.word	0x2000a92c
 80025d0:	0801f4b0 	.word	0x0801f4b0

080025d4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80025d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025d8:	b08d      	sub	sp, #52	; 0x34
 80025da:	9207      	str	r2, [sp, #28]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 80025dc:	f44f 72c0 	mov.w	r2, #384	; 0x180
  currentMCU = BlockIndex;
 80025e0:	f8dd 801c 	ldr.w	r8, [sp, #28]
{
 80025e4:	9001      	str	r0, [sp, #4]
 80025e6:	910b      	str	r1, [sp, #44]	; 0x2c
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 80025e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80025ec:	9306      	str	r3, [sp, #24]

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 80025ee:	4b6c      	ldr	r3, [pc, #432]	; (80027a0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>)
 80025f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	9205      	str	r2, [sp, #20]
  while(currentMCU < (numberMCU + BlockIndex))
 80025f6:	2200      	movs	r2, #0
 80025f8:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 80025fc:	4401      	add	r1, r0
 80025fe:	4541      	cmp	r1, r8
 8002600:	d806      	bhi.n	8002610 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3c>
 8002602:	b10a      	cbz	r2, 8002608 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x34>
 8002604:	4a66      	ldr	r2, [pc, #408]	; (80027a0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>)
 8002606:	6293      	str	r3, [r2, #40]	; 0x28
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002608:	9806      	ldr	r0, [sp, #24]
 800260a:	b00d      	add	sp, #52	; 0x34
 800260c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8002610:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8002614:	9a05      	ldr	r2, [sp, #20]
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8002616:	9905      	ldr	r1, [sp, #20]
    currentMCU++;
 8002618:	f108 0801 	add.w	r8, r8, #1
    for(i= 0; i <  16; i+=2)
 800261c:	f04f 0b00 	mov.w	fp, #0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8002620:	fbb3 f2f2 	udiv	r2, r3, r2
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8002624:	fb01 3312 	mls	r3, r1, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002628:	f44f 41c8 	mov.w	r1, #25600	; 0x6400
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	fb01 3302 	mla	r3, r1, r2, r3
 8002632:	9302      	str	r3, [sp, #8]
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 8002634:	9b01      	ldr	r3, [sp, #4]
 8002636:	f503 7c80 	add.w	ip, r3, #256	; 0x100
    pLum = pInBuffer;
 800263a:	4699      	mov	r9, r3
      if(refline < JPEG_ConvertorParams.ScaledWidth * 480)
 800263c:	9b02      	ldr	r3, [sp, #8]
 800263e:	4a59      	ldr	r2, [pc, #356]	; (80027a4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	f200 8099 	bhi.w	8002778 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1a4>
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 8002646:	f503 65c8 	add.w	r5, r3, #1600	; 0x640
 800264a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800264c:	f8cd 900c 	str.w	r9, [sp, #12]
 8002650:	441d      	add	r5, r3
        for(k= 0; k<2; k++)
 8002652:	f10c 0308 	add.w	r3, ip, #8
 8002656:	9309      	str	r3, [sp, #36]	; 0x24
          for(j=0; j < 8; j+=2)
 8002658:	f10c 33ff 	add.w	r3, ip, #4294967295
 800265c:	9f03      	ldr	r7, [sp, #12]
    for(i= 0; i <  16; i+=2)
 800265e:	2600      	movs	r6, #0
 8002660:	9304      	str	r3, [sp, #16]
 8002662:	f5a5 63c8 	sub.w	r3, r5, #1600	; 0x640
 8002666:	9308      	str	r3, [sp, #32]
 8002668:	9b08      	ldr	r3, [sp, #32]
          for(j=0; j < 8; j+=2)
 800266a:	3702      	adds	r7, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 800266c:	484e      	ldr	r0, [pc, #312]	; (80027a8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d4>)
 800266e:	4433      	add	r3, r6
            ycomp = (int32_t)(*(pLum +j));
 8002670:	f817 ec02 	ldrb.w	lr, [r7, #-2]
 8002674:	930a      	str	r3, [sp, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002676:	9b04      	ldr	r3, [sp, #16]
 8002678:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800267c:	9304      	str	r3, [sp, #16]
 800267e:	4b4b      	ldr	r3, [pc, #300]	; (80027ac <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d8>)
 8002680:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002684:	9b04      	ldr	r3, [sp, #16]
 8002686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800268a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 800268e:	4848      	ldr	r0, [pc, #288]	; (80027b0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>)
 8002690:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002694:	4847      	ldr	r0, [pc, #284]	; (80027b4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e0>)
 8002696:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800269a:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800269c:	4a46      	ldr	r2, [pc, #280]	; (80027b8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e4>)
 800269e:	4414      	add	r4, r2
 80026a0:	4610      	mov	r0, r2
 80026a2:	eb04 020e 	add.w	r2, r4, lr
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80026a6:	eb00 4323 	add.w	r3, r0, r3, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80026aa:	4401      	add	r1, r0
            *(__IO uint16_t *)pOutAddr =
 80026ac:	9808      	ldr	r0, [sp, #32]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80026ae:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
 80026b2:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80026b6:	eb03 020e 	add.w	r2, r3, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80026ba:	448e      	add	lr, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80026bc:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
 80026c0:	f89e e100 	ldrb.w	lr, [lr, #256]	; 0x100
 80026c4:	0892      	lsrs	r2, r2, #2
 80026c6:	0152      	lsls	r2, r2, #5
 80026c8:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 80026cc:	ea42 02de 	orr.w	r2, r2, lr, lsr #3
            *(__IO uint16_t *)pOutAddr =
 80026d0:	5382      	strh	r2, [r0, r6]
            ycomp = (int32_t)(*(pLum +j +1));
 80026d2:	f817 ec01 	ldrb.w	lr, [r7, #-1]
            *((__IO uint16_t *)(pOutAddr + 2)) =
 80026d6:	980a      	ldr	r0, [sp, #40]	; 0x28
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80026d8:	eb04 020e 	add.w	r2, r4, lr
 80026dc:	f892 a100 	ldrb.w	sl, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80026e0:	eb03 020e 	add.w	r2, r3, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80026e4:	448e      	add	lr, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80026e6:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80026ea:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80026ee:	0892      	lsrs	r2, r2, #2
 80026f0:	0152      	lsls	r2, r2, #5
 80026f2:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 80026f6:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
 80026fa:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 80026fe:	8042      	strh	r2, [r0, #2]
            ycomp = (int32_t)(*(pLum +j +8));
 8002700:	f897 e006 	ldrb.w	lr, [r7, #6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002704:	eb04 020e 	add.w	r2, r4, lr
 8002708:	f892 a100 	ldrb.w	sl, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800270c:	eb03 020e 	add.w	r2, r3, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002710:	448e      	add	lr, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002712:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002716:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800271a:	0892      	lsrs	r2, r2, #2
 800271c:	0152      	lsls	r2, r2, #5
 800271e:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 8002722:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
 8002726:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 =
 800272a:	53aa      	strh	r2, [r5, r6]
            ycomp = (int32_t)(*(pLum +j +8 +1));
 800272c:	79fa      	ldrb	r2, [r7, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800272e:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002730:	4414      	add	r4, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002732:	440a      	add	r2, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002734:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002738:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800273c:	089b      	lsrs	r3, r3, #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800273e:	08e4      	lsrs	r4, r4, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002740:	015b      	lsls	r3, r3, #5
 8002742:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
 8002746:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
            *((__IO uint16_t *)(pOutAddr2 +2)) =
 800274a:	19aa      	adds	r2, r5, r6
          for(j=0; j < 8; j+=2)
 800274c:	3604      	adds	r6, #4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800274e:	ea43 03d4 	orr.w	r3, r3, r4, lsr #3
          for(j=0; j < 8; j+=2)
 8002752:	2e10      	cmp	r6, #16
            *((__IO uint16_t *)(pOutAddr2 +2)) =
 8002754:	8053      	strh	r3, [r2, #2]
          for(j=0; j < 8; j+=2)
 8002756:	d187      	bne.n	8002668 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x94>
          pLum += 64;
 8002758:	9b03      	ldr	r3, [sp, #12]
            pChrom++;
 800275a:	f10c 0c04 	add.w	ip, ip, #4
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 800275e:	3510      	adds	r5, #16
          pLum += 64;
 8002760:	3340      	adds	r3, #64	; 0x40
 8002762:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
 8002764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002766:	4563      	cmp	r3, ip
 8002768:	f47f af76 	bne.w	8002658 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x84>
        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 800276c:	9b02      	ldr	r3, [sp, #8]
        pLum = pLum - 128 + 16;
 800276e:	f109 0910 	add.w	r9, r9, #16
        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 8002772:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8002776:	9302      	str	r3, [sp, #8]
    for(i= 0; i <  16; i+=2)
 8002778:	f10b 0b02 	add.w	fp, fp, #2
 800277c:	f1bb 0f10 	cmp.w	fp, #16
 8002780:	d107      	bne.n	8002792 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1be>
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 8002782:	9b01      	ldr	r3, [sp, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800278a:	9301      	str	r3, [sp, #4]
    JPEG_ConvertorParams.ScaledWidth = 800 * 2;
 800278c:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8002790:	e732      	b.n	80025f8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x24>
      if(i == 8)
 8002792:	f1bb 0f08 	cmp.w	fp, #8
        pLum = pInBuffer + 128;
 8002796:	bf04      	itt	eq
 8002798:	9b01      	ldreq	r3, [sp, #4]
 800279a:	f103 0980 	addeq.w	r9, r3, #128	; 0x80
 800279e:	e74d      	b.n	800263c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x68>
 80027a0:	2000d5f4 	.word	0x2000d5f4
 80027a4:	000bb7ff 	.word	0x000bb7ff
 80027a8:	2000c174 	.word	0x2000c174
 80027ac:	2000b574 	.word	0x2000b574
 80027b0:	2000bd74 	.word	0x2000bd74
 80027b4:	2000b974 	.word	0x2000b974
 80027b8:	0801f4e8 	.word	0x0801f4e8

080027bc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80027bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 80027c0:	0a1b      	lsrs	r3, r3, #8
{
 80027c2:	b08d      	sub	sp, #52	; 0x34
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 80027c4:	9305      	str	r3, [sp, #20]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 80027c6:	4b4f      	ldr	r3, [pc, #316]	; (8002904 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x148>)
{
 80027c8:	9206      	str	r2, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 80027ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  currentMCU = BlockIndex;
 80027cc:	f8dd e018 	ldr.w	lr, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 80027d0:	9202      	str	r2, [sp, #8]

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80027d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80027d4:	691b      	ldr	r3, [r3, #16]
{
 80027d6:	910a      	str	r1, [sp, #40]	; 0x28
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80027d8:	9203      	str	r2, [sp, #12]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80027da:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
 80027dc:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 80027e0:	4413      	add	r3, r2
 80027e2:	4573      	cmp	r3, lr
 80027e4:	d803      	bhi.n	80027ee <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x32>
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
  }
  return numberMCU;
}
 80027e6:	9805      	ldr	r0, [sp, #20]
 80027e8:	b00d      	add	sp, #52	; 0x34
 80027ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 80027ee:	ea4f 120e 	mov.w	r2, lr, lsl #4
 80027f2:	9b02      	ldr	r3, [sp, #8]
    currentMCU++;
 80027f4:	f10e 0e01 	add.w	lr, lr, #1
 80027f8:	f100 0780 	add.w	r7, r0, #128	; 0x80
    pLum = pInBuffer;
 80027fc:	4682      	mov	sl, r0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 80027fe:	fbb2 f1f3 	udiv	r1, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002802:	9b03      	ldr	r3, [sp, #12]
 8002804:	fb03 f401 	mul.w	r4, r3, r1
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8002808:	9b02      	ldr	r3, [sp, #8]
 800280a:	fb03 2311 	mls	r3, r3, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002814:	9300      	str	r3, [sp, #0]
    currentMCU++;
 8002816:	2308      	movs	r3, #8
 8002818:	9304      	str	r3, [sp, #16]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800281a:	9b07      	ldr	r3, [sp, #28]
 800281c:	9a00      	ldr	r2, [sp, #0]
 800281e:	4293      	cmp	r3, r2
 8002820:	d969      	bls.n	80028f6 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x13a>
        pOutAddr = pOutBuffer + refline;
 8002822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002824:	46d0      	mov	r8, sl
 8002826:	eb03 0902 	add.w	r9, r3, r2
        for(k= 0; k<2; k++)
 800282a:	f107 0308 	add.w	r3, r7, #8
 800282e:	9308      	str	r3, [sp, #32]
          for(j=0; j < 8; j+=2)
 8002830:	1e7b      	subs	r3, r7, #1
    currentMCU++;
 8002832:	2400      	movs	r4, #0
 8002834:	9301      	str	r3, [sp, #4]
            ycomp = (int32_t)(*(pLum +j +1));
 8002836:	f108 0301 	add.w	r3, r8, #1
 800283a:	930b      	str	r3, [sp, #44]	; 0x2c
 800283c:	eb09 0384 	add.w	r3, r9, r4, lsl #2
            ycomp = (int32_t)(*(pLum +j));
 8002840:	f818 c014 	ldrb.w	ip, [r8, r4, lsl #1]
 8002844:	9309      	str	r3, [sp, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002846:	9b01      	ldr	r3, [sp, #4]
 8002848:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800284c:	9301      	str	r3, [sp, #4]
 800284e:	4b2e      	ldr	r3, [pc, #184]	; (8002908 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14c>)
 8002850:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002854:	9b01      	ldr	r3, [sp, #4]
 8002856:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 800285a:	4b2c      	ldr	r3, [pc, #176]	; (800290c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x150>)
 800285c:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002860:	4b2b      	ldr	r3, [pc, #172]	; (8002910 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x154>)
 8002862:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002866:	4b2b      	ldr	r3, [pc, #172]	; (8002914 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x158>)
 8002868:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800286c:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800286e:	4a2a      	ldr	r2, [pc, #168]	; (8002918 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x15c>)
 8002870:	4613      	mov	r3, r2
 8002872:	4416      	add	r6, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002874:	eb03 4121 	add.w	r1, r3, r1, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002878:	eb06 020c 	add.w	r2, r6, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800287c:	441d      	add	r5, r3
            ycomp = (int32_t)(*(pLum +j +1));
 800287e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002880:	f892 b100 	ldrb.w	fp, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002884:	eb01 020c 	add.w	r2, r1, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002888:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800288a:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800288e:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002892:	0892      	lsrs	r2, r2, #2
 8002894:	0152      	lsls	r2, r2, #5
 8002896:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
 800289a:	f89c b100 	ldrb.w	fp, [ip, #256]	; 0x100
 800289e:	ea42 02db 	orr.w	r2, r2, fp, lsr #3
            *(__IO uint16_t *)pOutAddr =
 80028a2:	f829 2024 	strh.w	r2, [r9, r4, lsl #2]
            ycomp = (int32_t)(*(pLum +j +1));
 80028a6:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
          for(j=0; j < 8; j+=2)
 80028aa:	3401      	adds	r4, #1
            *((__IO uint16_t *)(pOutAddr + 2)) =
 80028ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80028ae:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80028b0:	4416      	add	r6, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80028b2:	4415      	add	r5, r2
          for(j=0; j < 8; j+=2)
 80028b4:	2c04      	cmp	r4, #4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80028b6:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80028ba:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80028be:	ea4f 0191 	mov.w	r1, r1, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80028c2:	ea4f 06d6 	mov.w	r6, r6, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80028c6:	ea4f 1141 	mov.w	r1, r1, lsl #5
 80028ca:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 80028ce:	f895 6100 	ldrb.w	r6, [r5, #256]	; 0x100
 80028d2:	ea41 01d6 	orr.w	r1, r1, r6, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 80028d6:	8059      	strh	r1, [r3, #2]
          for(j=0; j < 8; j+=2)
 80028d8:	d1b0      	bne.n	800283c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
            pChrom++;
 80028da:	3704      	adds	r7, #4
        for(k= 0; k<2; k++)
 80028dc:	9b08      	ldr	r3, [sp, #32]
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 80028de:	f109 0910 	add.w	r9, r9, #16
          pLum += 64;
 80028e2:	f108 0840 	add.w	r8, r8, #64	; 0x40
        for(k= 0; k<2; k++)
 80028e6:	42bb      	cmp	r3, r7
 80028e8:	d1a2      	bne.n	8002830 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x74>
        refline += JPEG_ConvertorParams.ScaledWidth;
 80028ea:	9a00      	ldr	r2, [sp, #0]
        pLum = pLum - 128 + 8;
 80028ec:	f10a 0a08 	add.w	sl, sl, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 80028f0:	9b03      	ldr	r3, [sp, #12]
 80028f2:	441a      	add	r2, r3
 80028f4:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  8; i++)
 80028f6:	9b04      	ldr	r3, [sp, #16]
 80028f8:	3b01      	subs	r3, #1
 80028fa:	9304      	str	r3, [sp, #16]
 80028fc:	d18d      	bne.n	800281a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x5e>
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 80028fe:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002902:	e76b      	b.n	80027dc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x20>
 8002904:	2000d5f4 	.word	0x2000d5f4
 8002908:	2000b574 	.word	0x2000b574
 800290c:	2000c174 	.word	0x2000c174
 8002910:	2000bd74 	.word	0x2000bd74
 8002914:	2000b974 	.word	0x2000b974
 8002918:	0801f4e8 	.word	0x0801f4e8

0800291c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 800291c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002920:	4692      	mov	sl, r2
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8002922:	22c0      	movs	r2, #192	; 0xc0
{
 8002924:	b089      	sub	sp, #36	; 0x24
  currentMCU = BlockIndex;
 8002926:	4654      	mov	r4, sl
{
 8002928:	9107      	str	r1, [sp, #28]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800292a:	fbb3 f3f2 	udiv	r3, r3, r2

  while(currentMCU < (numberMCU + BlockIndex))
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800292e:	4a35      	ldr	r2, [pc, #212]	; (8002a04 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8002930:	9304      	str	r3, [sp, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002932:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002934:	9100      	str	r1, [sp, #0]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002936:	6a91      	ldr	r1, [r2, #40]	; 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002938:	6912      	ldr	r2, [r2, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800293a:	9101      	str	r1, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800293c:	9205      	str	r2, [sp, #20]
  while(currentMCU < (numberMCU + BlockIndex))
 800293e:	9b04      	ldr	r3, [sp, #16]
 8002940:	eb03 020a 	add.w	r2, r3, sl
 8002944:	42a2      	cmp	r2, r4
 8002946:	d803      	bhi.n	8002950 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x34>
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002948:	4618      	mov	r0, r3
 800294a:	b009      	add	sp, #36	; 0x24
 800294c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002950:	00e1      	lsls	r1, r4, #3
 8002952:	9a00      	ldr	r2, [sp, #0]
    currentMCU++;
 8002954:	3401      	adds	r4, #1
    pLum = pInBuffer;
 8002956:	4684      	mov	ip, r0
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002958:	fbb1 f5f2 	udiv	r5, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800295c:	9a01      	ldr	r2, [sp, #4]
 800295e:	fb02 f605 	mul.w	r6, r2, r5
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002962:	9a00      	ldr	r2, [sp, #0]
 8002964:	fb02 1215 	mls	r2, r2, r5, r1
    currentMCU++;
 8002968:	2108      	movs	r1, #8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800296a:	0052      	lsls	r2, r2, #1
    currentMCU++;
 800296c:	9103      	str	r1, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800296e:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 8002972:	f100 0640 	add.w	r6, r0, #64	; 0x40
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002976:	9905      	ldr	r1, [sp, #20]
 8002978:	4291      	cmp	r1, r2
 800297a:	d93d      	bls.n	80029f8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xdc>
        pOutAddr = pOutBuffer+ refline;
 800297c:	9907      	ldr	r1, [sp, #28]
 800297e:	f106 3eff 	add.w	lr, r6, #4294967295
 8002982:	188d      	adds	r5, r1, r2
          for(j=0; j < 8; j++)
 8002984:	f10c 31ff 	add.w	r1, ip, #4294967295
 8002988:	9102      	str	r1, [sp, #8]
 800298a:	f105 0110 	add.w	r1, r5, #16
 800298e:	9106      	str	r1, [sp, #24]
            ycomp = (int32_t)(*(pLum +j));
 8002990:	9f02      	ldr	r7, [sp, #8]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002992:	f81e 8f01 	ldrb.w	r8, [lr, #1]!
            ycomp = (int32_t)(*(pLum +j));
 8002996:	f817 1f01 	ldrb.w	r1, [r7, #1]!
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 800299a:	f89e 9040 	ldrb.w	r9, [lr, #64]	; 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800299e:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
            ycomp = (int32_t)(*(pLum +j));
 80029a0:	9702      	str	r7, [sp, #8]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80029a2:	4f1a      	ldr	r7, [pc, #104]	; (8002a0c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf0>)
 80029a4:	4419      	add	r1, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80029a6:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf4>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80029a8:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 80029ac:	440f      	add	r7, r1
 80029ae:	f897 b100 	ldrb.w	fp, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80029b2:	f853 7028 	ldr.w	r7, [r3, r8, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 80029b6:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf8>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80029b8:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80029bc:	440f      	add	r7, r1
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 80029be:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 80029c2:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xfc>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80029c4:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 80029c8:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80029cc:	08ff      	lsrs	r7, r7, #3
          for(j=0; j < 8; j++)
 80029ce:	9b06      	ldr	r3, [sp, #24]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 80029d0:	44c8      	add	r8, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80029d2:	ea47 27cb 	orr.w	r7, r7, fp, lsl #11
 80029d6:	eb01 4828 	add.w	r8, r1, r8, asr #16
 80029da:	f898 b100 	ldrb.w	fp, [r8, #256]	; 0x100
 80029de:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 80029e2:	ea47 174b 	orr.w	r7, r7, fp, lsl #5
            *(__IO uint16_t *)pOutAddr =
 80029e6:	f825 7b02 	strh.w	r7, [r5], #2
          for(j=0; j < 8; j++)
 80029ea:	429d      	cmp	r5, r3
 80029ec:	d1d0      	bne.n	8002990 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x74>
        refline += JPEG_ConvertorParams.ScaledWidth;
 80029ee:	9b01      	ldr	r3, [sp, #4]
            pChrom++;
 80029f0:	3608      	adds	r6, #8
          pLum += 8;
 80029f2:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 80029f6:	441a      	add	r2, r3
    for(i= 0; i <  8; i++)
 80029f8:	9b03      	ldr	r3, [sp, #12]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	9303      	str	r3, [sp, #12]
 80029fe:	d1ba      	bne.n	8002976 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x5a>
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 8002a00:	30c0      	adds	r0, #192	; 0xc0
 8002a02:	e79c      	b.n	800293e <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x22>
 8002a04:	2000d5f4 	.word	0x2000d5f4
 8002a08:	0801f4e8 	.word	0x0801f4e8
 8002a0c:	2000c174 	.word	0x2000c174
 8002a10:	2000b574 	.word	0x2000b574
 8002a14:	2000bd74 	.word	0x2000bd74
 8002a18:	2000b974 	.word	0x2000b974

08002a1c <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a20:	b085      	sub	sp, #20
 8002a22:	4604      	mov	r4, r0
  uint32_t refline;

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 8002a24:	0998      	lsrs	r0, r3, #6
{
 8002a26:	9102      	str	r1, [sp, #8]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
 8002a28:	eb02 1393 	add.w	r3, r2, r3, lsr #6
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a2c:	491a      	ldr	r1, [pc, #104]	; (8002a98 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
  while(currentMCU < (numberMCU + BlockIndex))
 8002a2e:	9303      	str	r3, [sp, #12]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002a30:	e9d1 8909 	ldrd	r8, r9, [r1, #36]	; 0x24
    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002a34:	6909      	ldr	r1, [r1, #16]
 8002a36:	9101      	str	r1, [sp, #4]
  while(currentMCU < (numberMCU + BlockIndex))
 8002a38:	9b03      	ldr	r3, [sp, #12]
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d802      	bhi.n	8002a44 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x28>
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002a3e:	b005      	add	sp, #20
 8002a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a44:	00d1      	lsls	r1, r2, #3
    pLum = pInBuffer;
 8002a46:	46a4      	mov	ip, r4
    currentMCU++;
 8002a48:	3201      	adds	r2, #1
 8002a4a:	2708      	movs	r7, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002a4c:	fbb1 f3f8 	udiv	r3, r1, r8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002a50:	fb09 f503 	mul.w	r5, r9, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002a54:	fb08 1313 	mls	r3, r8, r3, r1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002a5e:	9901      	ldr	r1, [sp, #4]
 8002a60:	4299      	cmp	r1, r3
 8002a62:	d914      	bls.n	8002a8e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x72>
      pOutAddr = pOutBuffer + refline;
 8002a64:	9902      	ldr	r1, [sp, #8]
 8002a66:	46e2      	mov	sl, ip
 8002a68:	4419      	add	r1, r3
 8002a6a:	f101 0b10 	add.w	fp, r1, #16
          ySample =   (uint32_t)(*pLum);
 8002a6e:	f81a 6b01 	ldrb.w	r6, [sl], #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
 8002a72:	08f5      	lsrs	r5, r6, #3
 8002a74:	08b6      	lsrs	r6, r6, #2
 8002a76:	ea4f 2ec5 	mov.w	lr, r5, lsl #11
 8002a7a:	ea4e 1646 	orr.w	r6, lr, r6, lsl #5
 8002a7e:	432e      	orrs	r6, r5
 8002a80:	f821 6b02 	strh.w	r6, [r1], #2
        for(j=0; j < 8; j++)
 8002a84:	4559      	cmp	r1, fp
 8002a86:	d1f2      	bne.n	8002a6e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x52>
          pLum++;
 8002a88:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002a8c:	444b      	add	r3, r9
    for(i= 0; i <  8; i++)
 8002a8e:	3f01      	subs	r7, #1
 8002a90:	d1e5      	bne.n	8002a5e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
    pInBuffer +=  GRAY_444_BLOCK_SIZE;
 8002a92:	3440      	adds	r4, #64	; 0x40
 8002a94:	e7d0      	b.n	8002a38 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1c>
 8002a96:	bf00      	nop
 8002a98:	2000d5f4 	.word	0x2000d5f4

08002a9c <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	4605      	mov	r5, r0
        pOutAddr = pOutBuffer+ refline;

          for(j=0; j < 8; j++)
          {
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8002aa4:	27ff      	movs	r7, #255	; 0xff
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 8002aa6:	0a18      	lsrs	r0, r3, #8
{
 8002aa8:	9102      	str	r1, [sp, #8]
  while(currentMCU < (numberMCU + BlockIndex))
 8002aaa:	eb02 2313 	add.w	r3, r2, r3, lsr #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002aae:	4928      	ldr	r1, [pc, #160]	; (8002b50 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb4>)
  while(currentMCU < (numberMCU + BlockIndex))
 8002ab0:	9303      	str	r3, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002ab2:	e9d1 9a09 	ldrd	r9, sl, [r1, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002ab6:	6909      	ldr	r1, [r1, #16]
 8002ab8:	9100      	str	r1, [sp, #0]
  while(currentMCU < (numberMCU + BlockIndex))
 8002aba:	9b03      	ldr	r3, [sp, #12]
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d802      	bhi.n	8002ac6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002ac0:	b005      	add	sp, #20
 8002ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002ac6:	00d3      	lsls	r3, r2, #3
    pChrom = pInBuffer;
 8002ac8:	46ae      	mov	lr, r5
    currentMCU++;
 8002aca:	3201      	adds	r2, #1
 8002acc:	f04f 0c08 	mov.w	ip, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002ad0:	fbb3 f1f9 	udiv	r1, r3, r9
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002ad4:	fb0a f401 	mul.w	r4, sl, r1
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002ad8:	fb09 3111 	mls	r1, r9, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002adc:	0049      	lsls	r1, r1, #1
 8002ade:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002ae2:	9b00      	ldr	r3, [sp, #0]
 8002ae4:	428b      	cmp	r3, r1
 8002ae6:	d92c      	bls.n	8002b42 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xa6>
        pOutAddr = pOutBuffer+ refline;
 8002ae8:	9b02      	ldr	r3, [sp, #8]
 8002aea:	4674      	mov	r4, lr
 8002aec:	185e      	adds	r6, r3, r1
          for(j=0; j < 8; j++)
 8002aee:	f106 0310 	add.w	r3, r6, #16
 8002af2:	9301      	str	r3, [sp, #4]
            color_k = (int32_t)(*(pChrom + 192));
 8002af4:	f894 80c0 	ldrb.w	r8, [r4, #192]	; 0xc0
            pChrom++;
 8002af8:	3401      	adds	r4, #1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8002afa:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8002afe:	fb13 f308 	smulbb	r3, r3, r8
 8002b02:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8002b06:	ea4f 0be3 	mov.w	fp, r3, asr #3
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8002b0a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8002b0e:	fb13 f308 	smulbb	r3, r3, r8
 8002b12:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002b16:	109b      	asrs	r3, r3, #2
 8002b18:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8002b1a:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 8002b1e:	f894 b07f 	ldrb.w	fp, [r4, #127]	; 0x7f
 8002b22:	fb1b fb08 	smulbb	fp, fp, r8
 8002b26:	fbbb fbf7 	udiv	fp, fp, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002b2a:	ea43 0bdb 	orr.w	fp, r3, fp, lsr #3
          for(j=0; j < 8; j++)
 8002b2e:	9b01      	ldr	r3, [sp, #4]
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002b30:	fa1f fb8b 	uxth.w	fp, fp
          *(__IO uint16_t *)pOutAddr =
 8002b34:	f826 bb02 	strh.w	fp, [r6], #2
          for(j=0; j < 8; j++)
 8002b38:	429e      	cmp	r6, r3
 8002b3a:	d1db      	bne.n	8002af4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x58>
            pChrom++;
 8002b3c:	f10e 0e08 	add.w	lr, lr, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002b40:	4451      	add	r1, sl
    for(i= 0; i <  8; i++)
 8002b42:	f1bc 0c01 	subs.w	ip, ip, #1
 8002b46:	d1cc      	bne.n	8002ae2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x46>
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 8002b48:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8002b4c:	e7b5      	b.n	8002aba <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1e>
 8002b4e:	bf00      	nop
 8002b50:	2000d5f4 	.word	0x2000d5f4

08002b54 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8002b54:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8002b56:	68c4      	ldr	r4, [r0, #12]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8002b58:	6885      	ldr	r5, [r0, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002b5a:	6806      	ldr	r6, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002b5c:	fb05 f704 	mul.w	r7, r5, r4
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002b60:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb0>)

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8002b62:	6840      	ldr	r0, [r0, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8002b64:	2e10      	cmp	r6, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002b66:	ea4f 0747 	mov.w	r7, r7, lsl #1
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8002b6a:	601e      	str	r6, [r3, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8002b6c:	609c      	str	r4, [r3, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8002b6e:	60dd      	str	r5, [r3, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8002b70:	611f      	str	r7, [r3, #16]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8002b72:	6058      	str	r0, [r3, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8002b74:	d13c      	bne.n	8002bf0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x9c>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002b76:	2801      	cmp	r0, #1
 8002b78:	d122      	bne.n	8002bc0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x6c>
    {
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8002b7a:	4823      	ldr	r0, [pc, #140]	; (8002c08 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb4>)
 8002b7c:	6008      	str	r0, [r1, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;

      if(JPEG_ConvertorParams.LineOffset != 0)
 8002b7e:	f014 010f 	ands.w	r1, r4, #15
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8002b82:	bf18      	it	ne
 8002b84:	f1c1 0110 	rsbne	r1, r1, #16
 8002b88:	6159      	str	r1, [r3, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8002b8a:	2110      	movs	r1, #16
 8002b8c:	61d9      	str	r1, [r3, #28]
      if(JPEG_ConvertorParams.LineOffset != 0)
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
      }
      JPEG_ConvertorParams.H_factor = 16;
      JPEG_ConvertorParams.V_factor  = 8;
 8002b8e:	6219      	str	r1, [r3, #32]
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8002b90:	6959      	ldr	r1, [r3, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8002b92:	69d8      	ldr	r0, [r3, #28]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8002b94:	4421      	add	r1, r4
 8002b96:	6259      	str	r1, [r3, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
 8002b98:	0061      	lsls	r1, r4, #1
 8002b9a:	6299      	str	r1, [r3, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8002b9c:	fbb4 f1f0 	udiv	r1, r4, r0
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8002ba0:	fb00 4411 	mls	r4, r0, r1, r4
 8002ba4:	b104      	cbz	r4, 8002ba8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x54>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
 8002ba6:	3101      	adds	r1, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8002ba8:	6a1c      	ldr	r4, [r3, #32]
 8002baa:	fbb5 f0f4 	udiv	r0, r5, r4
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8002bae:	fb04 5510 	mls	r5, r4, r0, r5
 8002bb2:	b105      	cbz	r5, 8002bb6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x62>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
 8002bb4:	3001      	adds	r0, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8002bb6:	4341      	muls	r1, r0
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
 8002bb8:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8002bba:	62d9      	str	r1, [r3, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8002bbc:	6011      	str	r1, [r2, #0]
}
 8002bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8002bc0:	2802      	cmp	r0, #2
 8002bc2:	d10b      	bne.n	8002bdc <TGFX_JPEG_GetDecodeColorConvertFunc+0x88>
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8002bc4:	4811      	ldr	r0, [pc, #68]	; (8002c0c <TGFX_JPEG_GetDecodeColorConvertFunc+0xb8>)
 8002bc6:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
 8002bc8:	f014 010f 	ands.w	r1, r4, #15
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8002bcc:	bf18      	it	ne
 8002bce:	f1c1 0110 	rsbne	r1, r1, #16
 8002bd2:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
 8002bd4:	2110      	movs	r1, #16
 8002bd6:	61d9      	str	r1, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8002bd8:	2108      	movs	r1, #8
 8002bda:	e7d8      	b.n	8002b8e <TGFX_JPEG_GetDecodeColorConvertFunc+0x3a>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8002bdc:	480c      	ldr	r0, [pc, #48]	; (8002c10 <TGFX_JPEG_GetDecodeColorConvertFunc+0xbc>)
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8002bde:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
 8002be0:	f014 0107 	ands.w	r1, r4, #7
 8002be4:	d001      	beq.n	8002bea <TGFX_JPEG_GetDecodeColorConvertFunc+0x96>
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8002be6:	f1c1 0108 	rsb	r1, r1, #8
 8002bea:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 8;
 8002bec:	2108      	movs	r1, #8
 8002bee:	e7cd      	b.n	8002b8c <TGFX_JPEG_GetDecodeColorConvertFunc+0x38>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8002bf0:	b90e      	cbnz	r6, 8002bf6 <TGFX_JPEG_GetDecodeColorConvertFunc+0xa2>
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8002bf2:	4808      	ldr	r0, [pc, #32]	; (8002c14 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc0>)
 8002bf4:	e7f3      	b.n	8002bde <TGFX_JPEG_GetDecodeColorConvertFunc+0x8a>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8002bf6:	2e30      	cmp	r6, #48	; 0x30
 8002bf8:	d101      	bne.n	8002bfe <TGFX_JPEG_GetDecodeColorConvertFunc+0xaa>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8002bfa:	4807      	ldr	r0, [pc, #28]	; (8002c18 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc4>)
 8002bfc:	e7ef      	b.n	8002bde <TGFX_JPEG_GetDecodeColorConvertFunc+0x8a>
    return HAL_ERROR; /* Color space Not supported*/
 8002bfe:	2001      	movs	r0, #1
 8002c00:	e7dd      	b.n	8002bbe <TGFX_JPEG_GetDecodeColorConvertFunc+0x6a>
 8002c02:	bf00      	nop
 8002c04:	2000d5f4 	.word	0x2000d5f4
 8002c08:	080025d5 	.word	0x080025d5
 8002c0c:	080027bd 	.word	0x080027bd
 8002c10:	0800291d 	.word	0x0800291d
 8002c14:	08002a1d 	.word	0x08002a1d
 8002c18:	08002a9d 	.word	0x08002a9d

08002c1c <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 8002c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c20:	f8df c250 	ldr.w	ip, [pc, #592]	; 8002e74 <TGFX_JPEG_InitColorTables+0x258>
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
  int32_t i;

  for (i = 0; i <= 255; i++)
 8002c24:	2300      	movs	r3, #0
 8002c26:	f8df 8250 	ldr.w	r8, [pc, #592]	; 8002e78 <TGFX_JPEG_InitColorTables+0x25c>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c2a:	f644 4b8b 	movw	fp, #19595	; 0x4c8b
 8002c2e:	4f7e      	ldr	r7, [pc, #504]	; (8002e28 <TGFX_JPEG_InitColorTables+0x20c>)
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c30:	f249 6a45 	movw	sl, #38469	; 0x9645
 8002c34:	4e7d      	ldr	r6, [pc, #500]	; (8002e2c <TGFX_JPEG_InitColorTables+0x210>)
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c36:	f641 592f 	movw	r9, #7471	; 0x1d2f
 8002c3a:	4d7d      	ldr	r5, [pc, #500]	; (8002e30 <TGFX_JPEG_InitColorTables+0x214>)
 8002c3c:	4c7d      	ldr	r4, [pc, #500]	; (8002e34 <TGFX_JPEG_InitColorTables+0x218>)
 8002c3e:	487e      	ldr	r0, [pc, #504]	; (8002e38 <TGFX_JPEG_InitColorTables+0x21c>)
 8002c40:	497e      	ldr	r1, [pc, #504]	; (8002e3c <TGFX_JPEG_InitColorTables+0x220>)
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c42:	fb0b f203 	mul.w	r2, fp, r3
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c46:	f64e 3e2f 	movw	lr, #60207	; 0xeb2f
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c4a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002c4e:	1412      	asrs	r2, r2, #16
 8002c50:	f848 2b04 	str.w	r2, [r8], #4
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c54:	fb0a f203 	mul.w	r2, sl, r3
 8002c58:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002c5c:	1412      	asrs	r2, r2, #16
 8002c5e:	f84c 2b04 	str.w	r2, [ip], #4
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c62:	fb09 f203 	mul.w	r2, r9, r3
 8002c66:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002c6a:	1412      	asrs	r2, r2, #16
 8002c6c:	f847 2b04 	str.w	r2, [r7], #4
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c70:	4a73      	ldr	r2, [pc, #460]	; (8002e40 <TGFX_JPEG_InitColorTables+0x224>)
 8002c72:	435a      	muls	r2, r3
 8002c74:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002c78:	1412      	asrs	r2, r2, #16
 8002c7a:	f846 2b04 	str.w	r2, [r6], #4
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c7e:	4a71      	ldr	r2, [pc, #452]	; (8002e44 <TGFX_JPEG_InitColorTables+0x228>)
 8002c80:	435a      	muls	r2, r3
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c82:	3301      	adds	r3, #1
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c84:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= 255; i++)
 8002c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c8c:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002c90:	f845 2b04 	str.w	r2, [r5], #4
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c94:	f343 024f 	sbfx	r2, r3, #1, #16
 8002c98:	f844 2b04 	str.w	r2, [r4], #4
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002c9c:	4a6a      	ldr	r2, [pc, #424]	; (8002e48 <TGFX_JPEG_InitColorTables+0x22c>)
 8002c9e:	fb02 e203 	mla	r2, r2, r3, lr
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ca2:	f249 4ed0 	movw	lr, #38096	; 0x94d0
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002ca6:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002caa:	f840 2b04 	str.w	r2, [r0], #4
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8002cae:	4a67      	ldr	r2, [pc, #412]	; (8002e4c <TGFX_JPEG_InitColorTables+0x230>)
 8002cb0:	fb02 e203 	mla	r2, r2, r3, lr
 8002cb4:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002cb8:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0; i <= 255; i++)
 8002cbc:	d1c1      	bne.n	8002c42 <TGFX_JPEG_InitColorTables+0x26>
 8002cbe:	4c64      	ldr	r4, [pc, #400]	; (8002e50 <TGFX_JPEG_InitColorTables+0x234>)
void TGFX_JPEG_Init_MCU_LUT(void)
{
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
 8002cc0:	2200      	movs	r2, #0
  {
    for(j = 0; j < 16; j++)
 8002cc2:	00d3      	lsls	r3, r2, #3
  for (i = 0; i <= 255; i++)
 8002cc4:	4625      	mov	r5, r4
    for(j = 0; j < 16; j++)
 8002cc6:	2100      	movs	r1, #0
    {
      offset =  j + (i*8);
      if((j>=8) && (i>=8)) offset+= 120;
 8002cc8:	2907      	cmp	r1, #7
 8002cca:	f240 80a6 	bls.w	8002e1a <TGFX_JPEG_InitColorTables+0x1fe>
 8002cce:	2a07      	cmp	r2, #7
 8002cd0:	bf8c      	ite	hi
 8002cd2:	f103 0078 	addhi.w	r0, r3, #120	; 0x78
      else  if((j>=8) && (i<8)) offset+= 56;
 8002cd6:	f103 0038 	addls.w	r0, r3, #56	; 0x38
    for(j = 0; j < 16; j++)
 8002cda:	3101      	adds	r1, #1
 8002cdc:	3301      	adds	r3, #1
      else  if((j<8) && (i>=8)) offset+= 64;

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 8002cde:	f825 0b02 	strh.w	r0, [r5], #2
    for(j = 0; j < 16; j++)
 8002ce2:	2910      	cmp	r1, #16
 8002ce4:	d1f0      	bne.n	8002cc8 <TGFX_JPEG_InitColorTables+0xac>
  for(i = 0; i < 16; i++)
 8002ce6:	3201      	adds	r2, #1
 8002ce8:	3420      	adds	r4, #32
 8002cea:	2a10      	cmp	r2, #16
 8002cec:	d1e9      	bne.n	8002cc2 <TGFX_JPEG_InitColorTables+0xa6>
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 8002cee:	2000      	movs	r0, #0
      offset = i*16 + j;

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8002cf0:	f8df e188 	ldr.w	lr, [pc, #392]	; 8002e7c <TGFX_JPEG_InitColorTables+0x260>
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8002cf4:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8002e80 <TGFX_JPEG_InitColorTables+0x264>

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8002cf8:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8002e84 <TGFX_JPEG_InitColorTables+0x268>
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002cfc:	f8df a188 	ldr.w	sl, [pc, #392]	; 8002e88 <TGFX_JPEG_InitColorTables+0x26c>
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002d00:	0844      	lsrs	r4, r0, #1
    for(j = 0; j < 16; j++)
 8002d02:	2500      	movs	r5, #0
 8002d04:	00c3      	lsls	r3, r0, #3
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002d06:	00e4      	lsls	r4, r4, #3
 8002d08:	fa1f fc83 	uxth.w	ip, r3
 8002d0c:	b2a4      	uxth	r4, r4
 8002d0e:	0142      	lsls	r2, r0, #5
 8002d10:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8002d14:	4f4f      	ldr	r7, [pc, #316]	; (8002e54 <TGFX_JPEG_InitColorTables+0x238>)
    for(j = 0; j < 16; j++)
 8002d16:	3501      	adds	r5, #1
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002d18:	1919      	adds	r1, r3, r4
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002d1a:	4463      	add	r3, ip
    for(j = 0; j < 16; j++)
 8002d1c:	2d10      	cmp	r5, #16
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002d1e:	b289      	uxth	r1, r1
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002d20:	b29b      	uxth	r3, r3
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002d22:	f501 7680 	add.w	r6, r1, #256	; 0x100
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002d26:	f103 0b80 	add.w	fp, r3, #128	; 0x80
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8002d2a:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002d2e:	b2b6      	uxth	r6, r6
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8002d30:	f822 3008 	strh.w	r3, [r2, r8]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002d34:	53d6      	strh	r6, [r2, r7]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002d36:	4f48      	ldr	r7, [pc, #288]	; (8002e58 <TGFX_JPEG_InitColorTables+0x23c>)
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8002d38:	f822 600a 	strh.w	r6, [r2, sl]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8002d3c:	f822 b007 	strh.w	fp, [r2, r7]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8002d40:	f501 7ba0 	add.w	fp, r1, #320	; 0x140
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8002d44:	f501 71c0 	add.w	r1, r1, #384	; 0x180
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8002d48:	f822 b00e 	strh.w	fp, [r2, lr]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8002d4c:	f822 1009 	strh.w	r1, [r2, r9]
    for(j = 0; j < 16; j++)
 8002d50:	f102 0202 	add.w	r2, r2, #2
 8002d54:	d1dc      	bne.n	8002d10 <TGFX_JPEG_InitColorTables+0xf4>
  for(i = 0; i < 16; i++)
 8002d56:	3001      	adds	r0, #1
 8002d58:	2810      	cmp	r0, #16
 8002d5a:	d1d1      	bne.n	8002d00 <TGFX_JPEG_InitColorTables+0xe4>
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8002e8c <TGFX_JPEG_InitColorTables+0x270>
 8002d62:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8002e90 <TGFX_JPEG_InitColorTables+0x274>
 8002d66:	4608      	mov	r0, r1
 8002d68:	f8df e128 	ldr.w	lr, [pc, #296]	; 8002e94 <TGFX_JPEG_InitColorTables+0x278>
 8002d6c:	f8df c128 	ldr.w	ip, [pc, #296]	; 8002e98 <TGFX_JPEG_InitColorTables+0x27c>
 8002d70:	b283      	uxth	r3, r0
 8002d72:	eb09 0701 	add.w	r7, r9, r1
 8002d76:	eb08 0601 	add.w	r6, r8, r1
 8002d7a:	eb0e 0501 	add.w	r5, lr, r1
    }
  }

  for(i = 0; i < 8; i++)
  {
    for(j = 0; j < 8; j++)
 8002d7e:	f103 0208 	add.w	r2, r3, #8
 8002d82:	eb0c 0401 	add.w	r4, ip, r1
 8002d86:	b292      	uxth	r2, r2
    {
      offset = i*8 + j;

      JPEG_Y_MCU_444_LUT[offset]  = offset;
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8002d88:	f103 0a40 	add.w	sl, r3, #64	; 0x40
      JPEG_Y_MCU_444_LUT[offset]  = offset;
 8002d8c:	f827 3b02 	strh.w	r3, [r7], #2
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8002d90:	f826 ab02 	strh.w	sl, [r6], #2
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 8002d94:	f103 0a80 	add.w	sl, r3, #128	; 0x80
 8002d98:	f825 ab02 	strh.w	sl, [r5], #2
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8002d9c:	f103 0ac0 	add.w	sl, r3, #192	; 0xc0
    for(j = 0; j < 8; j++)
 8002da0:	3301      	adds	r3, #1
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8002da2:	f824 ab02 	strh.w	sl, [r4], #2
    for(j = 0; j < 8; j++)
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d1ed      	bne.n	8002d88 <TGFX_JPEG_InitColorTables+0x16c>
  for(i = 0; i < 8; i++)
 8002dac:	3008      	adds	r0, #8
 8002dae:	3110      	adds	r1, #16
 8002db0:	2840      	cmp	r0, #64	; 0x40
 8002db2:	d1dd      	bne.n	8002d70 <TGFX_JPEG_InitColorTables+0x154>
 8002db4:	4d29      	ldr	r5, [pc, #164]	; (8002e5c <TGFX_JPEG_InitColorTables+0x240>)
  for (i = 0; i <= 255; i++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	4c29      	ldr	r4, [pc, #164]	; (8002e60 <TGFX_JPEG_InitColorTables+0x244>)
 8002dba:	482a      	ldr	r0, [pc, #168]	; (8002e64 <TGFX_JPEG_InitColorTables+0x248>)
 8002dbc:	492a      	ldr	r1, [pc, #168]	; (8002e68 <TGFX_JPEG_InitColorTables+0x24c>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8002dbe:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8002e9c <TGFX_JPEG_InitColorTables+0x280>
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8002dc2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8002ea0 <TGFX_JPEG_InitColorTables+0x284>
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 8002dc6:	4f29      	ldr	r7, [pc, #164]	; (8002e6c <TGFX_JPEG_InitColorTables+0x250>)
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8002dc8:	4e29      	ldr	r6, [pc, #164]	; (8002e70 <TGFX_JPEG_InitColorTables+0x254>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8002dca:	fb0e f203 	mul.w	r2, lr, r3
 8002dce:	f5a2 0232 	sub.w	r2, r2, #11665408	; 0xb20000
 8002dd2:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8002dd6:	1412      	asrs	r2, r2, #16
 8002dd8:	f845 2b04 	str.w	r2, [r5], #4
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8002ddc:	fb0c f203 	mul.w	r2, ip, r3
 8002de0:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 8002de4:	f5a2 42a0 	sub.w	r2, r2, #20480	; 0x5000
 8002de8:	1412      	asrs	r2, r2, #16
 8002dea:	f844 2b04 	str.w	r2, [r4], #4
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 8002dee:	fb07 f203 	mul.w	r2, r7, r3
 8002df2:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 8002df6:	f502 42d0 	add.w	r2, r2, #26624	; 0x6800
 8002dfa:	f840 2b04 	str.w	r2, [r0], #4
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8002dfe:	fb06 f203 	mul.w	r2, r6, r3
  for (i = 0; i <= 255; i++)
 8002e02:	3301      	adds	r3, #1
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8002e04:	f502 1230 	add.w	r2, r2, #2883584	; 0x2c0000
  for (i = 0; i <= 255; i++)
 8002e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8002e0c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8002e10:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0; i <= 255; i++)
 8002e14:	d1d9      	bne.n	8002dca <TGFX_JPEG_InitColorTables+0x1ae>
}
 8002e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else  if((j<8) && (i>=8)) offset+= 64;
 8002e1a:	2a07      	cmp	r2, #7
 8002e1c:	bf8c      	ite	hi
 8002e1e:	f103 0040 	addhi.w	r0, r3, #64	; 0x40
      offset =  j + (i*8);
 8002e22:	4618      	movls	r0, r3
 8002e24:	e759      	b.n	8002cda <TGFX_JPEG_InitColorTables+0xbe>
 8002e26:	bf00      	nop
 8002e28:	2000b174 	.word	0x2000b174
 8002e2c:	2000e1b4 	.word	0x2000e1b4
 8002e30:	2000c574 	.word	0x2000c574
 8002e34:	2000a974 	.word	0x2000a974
 8002e38:	2000c974 	.word	0x2000c974
 8002e3c:	2000ad74 	.word	0x2000ad74
 8002e40:	ffffd4d1 	.word	0xffffd4d1
 8002e44:	ffffab30 	.word	0xffffab30
 8002e48:	ffff94d1 	.word	0xffff94d1
 8002e4c:	ffffeb30 	.word	0xffffeb30
 8002e50:	2000dfb4 	.word	0x2000dfb4
 8002e54:	2000d174 	.word	0x2000d174
 8002e58:	2000d374 	.word	0x2000d374
 8002e5c:	2000c174 	.word	0x2000c174
 8002e60:	2000b574 	.word	0x2000b574
 8002e64:	2000bd74 	.word	0x2000bd74
 8002e68:	2000b974 	.word	0x2000b974
 8002e6c:	ffff4930 	.word	0xffff4930
 8002e70:	ffffa7e8 	.word	0xffffa7e8
 8002e74:	2000cd74 	.word	0x2000cd74
 8002e78:	2000e5b4 	.word	0x2000e5b4
 8002e7c:	2000d634 	.word	0x2000d634
 8002e80:	2000d834 	.word	0x2000d834
 8002e84:	2000dab4 	.word	0x2000dab4
 8002e88:	2000dcb4 	.word	0x2000dcb4
 8002e8c:	2000df34 	.word	0x2000df34
 8002e90:	2000d574 	.word	0x2000d574
 8002e94:	2000da34 	.word	0x2000da34
 8002e98:	2000deb4 	.word	0x2000deb4
 8002e9c:	000166e8 	.word	0x000166e8
 8002ea0:	0001c5a0 	.word	0x0001c5a0

08002ea4 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8002ea4:	4901      	ldr	r1, [pc, #4]	; (8002eac <vApplicationIdleHook+0x8>)
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	f008 b82e 	b.w	800af08 <vTaskSetApplicationTaskTag>
 8002eac:	0800111d 	.word	0x0800111d

08002eb0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002eb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  for(;;)
  {
    osDelay(100);
 8002eb2:	2064      	movs	r0, #100	; 0x64
 8002eb4:	f006 fa26 	bl	8009304 <osDelay>
  for(;;)
 8002eb8:	e7fb      	b.n	8002eb2 <StartDefaultTask+0x2>
	...

08002ebc <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8002ebc:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002ebe:	f44f 7340 	mov.w	r3, #768	; 0x300
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8002ec2:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec8:	4817      	ldr	r0, [pc, #92]	; (8002f28 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002eca:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8002ecc:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ece:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8002ed0:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002ed2:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002ed4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8002ed8:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8002eda:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002edc:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002ede:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ee2:	f005 f815 	bl	8007f10 <HAL_QSPI_Command>
 8002ee6:	b9e0      	cbnz	r0, 8002f22 <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = MX25L512_SR_WREN;
 8002ee8:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 8002eea:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8002eec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002ef0:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ef2:	480d      	ldr	r0, [pc, #52]	; (8002f28 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = MX25L512_SR_WREN;
 8002ef4:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8002ef8:	2310      	movs	r3, #16
 8002efa:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8002efe:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f00:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8002f02:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 8002f06:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f0a:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_4_LINES;
 8002f0c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f12:	f005 f8f8 	bl	8008106 <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 8002f16:	3800      	subs	r0, #0
 8002f18:	bf18      	it	ne
 8002f1a:	2001      	movne	r0, #1
}
 8002f1c:	b015      	add	sp, #84	; 0x54
 8002f1e:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 8002f22:	2001      	movs	r0, #1
 8002f24:	e7fa      	b.n	8002f1c <QSPI_WriteEnable.constprop.0+0x60>
 8002f26:	bf00      	nop
 8002f28:	2000ec68 	.word	0x2000ec68

08002f2c <SystemClock_Config>:
{
 8002f2c:	b510      	push	{r4, lr}
 8002f2e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f30:	2210      	movs	r2, #16
 8002f32:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f34:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f36:	a809      	add	r0, sp, #36	; 0x24
 8002f38:	f019 fd94 	bl	801ca64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f3c:	2214      	movs	r2, #20
 8002f3e:	2100      	movs	r1, #0
 8002f40:	a802      	add	r0, sp, #8
 8002f42:	f019 fd8f 	bl	801ca64 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f46:	4b1e      	ldr	r3, [pc, #120]	; (8002fc0 <SystemClock_Config+0x94>)
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002f48:	2119      	movs	r1, #25
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f4a:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f4e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f5e:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <SystemClock_Config+0x98>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002f66:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f68:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f70:	9301      	str	r3, [sp, #4]
 8002f72:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f78:	e9cd 2307 	strd	r2, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f80:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002f84:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002f88:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8002f8c:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002f8e:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 7;
 8002f92:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f94:	f005 f948 	bl	8008228 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002f98:	f004 fe56 	bl	8007c48 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f9c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f9e:	2000      	movs	r0, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002fa0:	2106      	movs	r1, #6
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fa2:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002fa6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002faa:	e9cd 0304 	strd	r0, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002fb2:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fb4:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002fb6:	f005 fb2b 	bl	8008610 <HAL_RCC_ClockConfig>
}
 8002fba:	b014      	add	sp, #80	; 0x50
 8002fbc:	bd10      	pop	{r4, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40007000 	.word	0x40007000

08002fc8 <MX_I2C4_Init>:
{
 8002fc8:	b538      	push	{r3, r4, r5, lr}
  hi2c4.Init.Timing = 0x00C0EAFF;
 8002fca:	4a0d      	ldr	r2, [pc, #52]	; (8003000 <MX_I2C4_Init+0x38>)
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fcc:	2500      	movs	r5, #0
  hi2c4.Instance = I2C4;
 8002fce:	4c0d      	ldr	r4, [pc, #52]	; (8003004 <MX_I2C4_Init+0x3c>)
  hi2c4.Init.Timing = 0x00C0EAFF;
 8002fd0:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <MX_I2C4_Init+0x40>)
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002fd2:	4620      	mov	r0, r4
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fd4:	6225      	str	r5, [r4, #32]
  hi2c4.Init.Timing = 0x00C0EAFF;
 8002fd6:	e9c4 2300 	strd	r2, r3, [r4]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fda:	2301      	movs	r3, #1
  hi2c4.Init.OwnAddress2 = 0;
 8002fdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fe0:	e9c4 5302 	strd	r5, r3, [r4, #8]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fe4:	e9c4 5506 	strd	r5, r5, [r4, #24]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002fe8:	f003 fabf 	bl	800656a <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002fec:	4629      	mov	r1, r5
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f003 fce5 	bl	80069be <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	4620      	mov	r0, r4
}
 8002ff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002ffc:	f003 bd05 	b.w	8006a0a <HAL_I2CEx_ConfigDigitalFilter>
 8003000:	40006000 	.word	0x40006000
 8003004:	2000eb14 	.word	0x2000eb14
 8003008:	00c0eaff 	.word	0x00c0eaff

0800300c <main>:
{
 800300c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003010:	b0bb      	sub	sp, #236	; 0xec

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003012:	2210      	movs	r2, #16
 8003014:	2100      	movs	r1, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003016:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003018:	a82c      	add	r0, sp, #176	; 0xb0

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 800301a:	261c      	movs	r6, #28
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800301c:	f019 fd22 	bl	801ca64 <memset>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003020:	2503      	movs	r5, #3
  HAL_MPU_Disable();
 8003022:	f002 f8bb 	bl	800519c <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8003026:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800302a:	4bcd      	ldr	r3, [pc, #820]	; (8003360 <main+0x354>)
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800302c:	f240 1701 	movw	r7, #257	; 0x101
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003030:	f8ad 40b0 	strh.w	r4, [sp, #176]	; 0xb0
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8003034:	e9cd 032d 	strd	r0, r3, [sp, #180]	; 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003038:	4bca      	ldr	r3, [pc, #808]	; (8003364 <main+0x358>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800303a:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800303c:	932f      	str	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800303e:	f002 f8cb 	bl	80051d8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x90000000;
 8003042:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8003046:	f88d 40b1 	strb.w	r4, [sp, #177]	; 0xb1
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800304a:	2400      	movs	r4, #0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800304c:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.BaseAddress = 0x90000000;
 800304e:	932d      	str	r3, [sp, #180]	; 0xb4
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8003050:	f88d 60b8 	strb.w	r6, [sp, #184]	; 0xb8
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003054:	f88d 40bb 	strb.w	r4, [sp, #187]	; 0xbb
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003058:	f8ad 40be 	strh.w	r4, [sp, #190]	; 0xbe
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800305c:	f002 f8bc 	bl	80051d8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8003060:	2302      	movs	r3, #2
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003062:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003064:	f88d 50bb 	strb.w	r5, [sp, #187]	; 0xbb
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8003068:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800306c:	2319      	movs	r3, #25
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800306e:	f8ad 70be 	strh.w	r7, [sp, #190]	; 0xbe
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8003072:	f88d 30b8 	strb.w	r3, [sp, #184]	; 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003076:	f002 f8af 	bl	80051d8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0xC0000000;
 800307a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800307e:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8003080:	f88d 60b8 	strb.w	r6, [sp, #184]	; 0xb8

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8003084:	2604      	movs	r6, #4
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8003086:	932d      	str	r3, [sp, #180]	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8003088:	f88d 50b1 	strb.w	r5, [sp, #177]	; 0xb1
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800308c:	f88d 40bb 	strb.w	r4, [sp, #187]	; 0xbb
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003090:	f8ad 40be 	strh.w	r4, [sp, #190]	; 0xbe
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003094:	f002 f8a0 	bl	80051d8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8003098:	2317      	movs	r3, #23
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800309a:	a82c      	add	r0, sp, #176	; 0xb0
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 800309c:	f88d 60b1 	strb.w	r6, [sp, #177]	; 0xb1
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80030a0:	f88d 30b8 	strb.w	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80030a4:	f88d 50bb 	strb.w	r5, [sp, #187]	; 0xbb
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80030a8:	f8ad 70be 	strh.w	r7, [sp, #190]	; 0xbe
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80030ac:	f002 f894 	bl	80051d8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80030b0:	4630      	mov	r0, r6
 80030b2:	f002 f881 	bl	80051b8 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 80030b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80030ba:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80030be:	4aaa      	ldr	r2, [pc, #680]	; (8003368 <main+0x35c>)
 80030c0:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80030c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80030c8:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80030cc:	6953      	ldr	r3, [r2, #20]
 80030ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80030d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80030d8:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80030dc:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80030e0:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80030e4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80030e8:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80030ec:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80030f0:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80030f4:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80030f6:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80030fa:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80030fc:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8003100:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003102:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8003106:	d2f9      	bcs.n	80030fc <main+0xf0>
    } while(sets-- != 0U);
 8003108:	3b20      	subs	r3, #32
 800310a:	f113 0f20 	cmn.w	r3, #32
 800310e:	d1f2      	bne.n	80030f6 <main+0xea>
 8003110:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003114:	6953      	ldr	r3, [r2, #20]
 8003116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311a:	6153      	str	r3, [r2, #20]
 800311c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003120:	f3bf 8f6f 	isb	sy
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003124:	4e91      	ldr	r6, [pc, #580]	; (800336c <main+0x360>)
  HAL_Init();
 8003126:	f001 ff9d 	bl	8005064 <HAL_Init>
  SystemClock_Config();
 800312a:	f7ff feff 	bl	8002f2c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312e:	2214      	movs	r2, #20
 8003130:	2100      	movs	r1, #0
 8003132:	a82c      	add	r0, sp, #176	; 0xb0
 8003134:	f019 fc96 	bl	801ca64 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003138:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 800313a:	2201      	movs	r2, #1
 800313c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003140:	f043 0310 	orr.w	r3, r3, #16
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8003144:	488a      	ldr	r0, [pc, #552]	; (8003370 <main+0x364>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003146:	2501      	movs	r5, #1
 8003148:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800314c:	6333      	str	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800314e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003150:	6b33      	ldr	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003152:	f04f 0b03 	mov.w	fp, #3
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8003156:	f04f 0802 	mov.w	r8, #2
  hdsi.Init.TXEscapeCkdiv = 4;
 800315a:	f04f 0a04 	mov.w	sl, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800315e:	f003 0310 	and.w	r3, r3, #16
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8003162:	f44f 4980 	mov.w	r9, #16384	; 0x4000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003166:	9303      	str	r3, [sp, #12]
 8003168:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800316a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800316c:	f043 0302 	orr.w	r3, r3, #2
 8003170:	6333      	str	r3, [r6, #48]	; 0x30
 8003172:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	9304      	str	r3, [sp, #16]
 800317a:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800317c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800317e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003182:	6333      	str	r3, [r6, #48]	; 0x30
 8003184:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318a:	9305      	str	r3, [sp, #20]
 800318c:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800318e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003190:	f043 0308 	orr.w	r3, r3, #8
 8003194:	6333      	str	r3, [r6, #48]	; 0x30
 8003196:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	9306      	str	r3, [sp, #24]
 800319e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031a0:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80031a2:	f043 0304 	orr.w	r3, r3, #4
 80031a6:	6333      	str	r3, [r6, #48]	; 0x30
 80031a8:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	9307      	str	r3, [sp, #28]
 80031b0:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80031b2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80031b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b8:	6333      	str	r3, [r6, #48]	; 0x30
 80031ba:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	9308      	str	r3, [sp, #32]
 80031c2:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80031c4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80031c6:	f043 0320 	orr.w	r3, r3, #32
 80031ca:	6333      	str	r3, [r6, #48]	; 0x30
 80031cc:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	9309      	str	r3, [sp, #36]	; 0x24
 80031d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80031d6:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80031d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031dc:	6333      	str	r3, [r6, #48]	; 0x30
 80031de:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80031e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031e4:	930a      	str	r3, [sp, #40]	; 0x28
 80031e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031e8:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80031ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ee:	6333      	str	r3, [r6, #48]	; 0x30
 80031f0:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80031f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80031f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 80031fa:	f003 f88d 	bl	8006318 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 80031fe:	2200      	movs	r2, #0
 8003200:	21c0      	movs	r1, #192	; 0xc0
 8003202:	485c      	ldr	r0, [pc, #368]	; (8003374 <main+0x368>)
 8003204:	f003 f888 	bl	8006318 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8003208:	2200      	movs	r2, #0
 800320a:	2140      	movs	r1, #64	; 0x40
 800320c:	485a      	ldr	r0, [pc, #360]	; (8003378 <main+0x36c>)
 800320e:	f003 f883 	bl	8006318 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8003212:	2200      	movs	r2, #0
 8003214:	2102      	movs	r1, #2
 8003216:	4856      	ldr	r0, [pc, #344]	; (8003370 <main+0x364>)
 8003218:	f003 f87e 	bl	8006318 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 800321c:	a92c      	add	r1, sp, #176	; 0xb0
 800321e:	4854      	ldr	r0, [pc, #336]	; (8003370 <main+0x364>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003220:	e9cd 752c 	strd	r7, r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003224:	e9cd 552e 	strd	r5, r5, [sp, #184]	; 0xb8
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 8003228:	f002 feea 	bl	8006000 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|VSYNC_FREQ_Pin;
 800322c:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800322e:	a92c      	add	r1, sp, #176	; 0xb0
 8003230:	4850      	ldr	r0, [pc, #320]	; (8003374 <main+0x368>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003232:	e9cd 352c 	strd	r3, r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003236:	e9cd 4b2e 	strd	r4, fp, [sp, #184]	; 0xb8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800323a:	f002 fee1 	bl	8006000 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 800323e:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8003240:	a92c      	add	r1, sp, #176	; 0xb0
 8003242:	484d      	ldr	r0, [pc, #308]	; (8003378 <main+0x36c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003244:	e9cd 352c 	strd	r3, r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003248:	e9cd 4b2e 	strd	r4, fp, [sp, #184]	; 0xb8
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800324c:	f002 fed8 	bl	8006000 <HAL_GPIO_Init>
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8003250:	a92c      	add	r1, sp, #176	; 0xb0
 8003252:	4847      	ldr	r0, [pc, #284]	; (8003370 <main+0x364>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003254:	e9cd 852c 	strd	r8, r5, [sp, #176]	; 0xb0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003258:	e9cd 4b2e 	strd	r4, fp, [sp, #184]	; 0xb8
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 800325c:	f002 fed0 	bl	8006000 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003260:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8003262:	4622      	mov	r2, r4
 8003264:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003266:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800326a:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 800326c:	6333      	str	r3, [r6, #48]	; 0x30
 800326e:	6b33      	ldr	r3, [r6, #48]	; 0x30
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8003270:	f44f 7680 	mov.w	r6, #256	; 0x100
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003278:	9302      	str	r3, [sp, #8]
 800327a:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800327c:	f001 ff3a 	bl	80050f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003280:	2038      	movs	r0, #56	; 0x38
 8003282:	f001 ff69 	bl	8005158 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8003286:	4622      	mov	r2, r4
 8003288:	2105      	movs	r1, #5
 800328a:	2039      	movs	r0, #57	; 0x39
 800328c:	f001 ff32 	bl	80050f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003290:	2039      	movs	r0, #57	; 0x39
 8003292:	f001 ff61 	bl	8005158 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_RESET);
 8003296:	4639      	mov	r1, r7
 8003298:	4622      	mov	r2, r4
 800329a:	4835      	ldr	r0, [pc, #212]	; (8003370 <main+0x364>)
 800329c:	f003 f83c 	bl	8006318 <HAL_GPIO_WritePin>
  HAL_Delay(20); /* wait 20 ms */
 80032a0:	2014      	movs	r0, #20
 80032a2:	f001 ff03 	bl	80050ac <HAL_Delay>
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 80032a6:	4639      	mov	r1, r7
 80032a8:	462a      	mov	r2, r5
 80032aa:	4831      	ldr	r0, [pc, #196]	; (8003370 <main+0x364>)
 80032ac:	f003 f834 	bl	8006318 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80032b0:	200a      	movs	r0, #10
 80032b2:	f001 fefb 	bl	80050ac <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80032b6:	2224      	movs	r2, #36	; 0x24
 80032b8:	4621      	mov	r1, r4
 80032ba:	a815      	add	r0, sp, #84	; 0x54
  DSI_PLLInitTypeDef PLLInit = {0};
 80032bc:	940e      	str	r4, [sp, #56]	; 0x38
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80032be:	f019 fbd1 	bl	801ca64 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80032c2:	2218      	movs	r2, #24
 80032c4:	4621      	mov	r1, r4
 80032c6:	a80f      	add	r0, sp, #60	; 0x3c
  hdsi.Instance = DSI;
 80032c8:	4f2c      	ldr	r7, [pc, #176]	; (800337c <main+0x370>)
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80032ca:	f019 fbcb 	bl	801ca64 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 80032ce:	2234      	movs	r2, #52	; 0x34
 80032d0:	4621      	mov	r1, r4
 80032d2:	a82c      	add	r0, sp, #176	; 0xb0
 80032d4:	f019 fbc6 	bl	801ca64 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80032d8:	222c      	movs	r2, #44	; 0x2c
 80032da:	4621      	mov	r1, r4
 80032dc:	a81e      	add	r0, sp, #120	; 0x78
 80032de:	f019 fbc1 	bl	801ca64 <memset>
  hdsi.Instance = DSI;
 80032e2:	4b27      	ldr	r3, [pc, #156]	; (8003380 <main+0x374>)
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80032e4:	2264      	movs	r2, #100	; 0x64
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80032e6:	a90c      	add	r1, sp, #48	; 0x30
 80032e8:	4638      	mov	r0, r7
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80032ea:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80032ee:	2305      	movs	r3, #5
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80032f0:	e9c7 a502 	strd	sl, r5, [r7, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80032f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80032f8:	f002 fb34 	bl	8005964 <HAL_DSI_Init>
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80032fc:	a915      	add	r1, sp, #84	; 0x54
 80032fe:	4638      	mov	r0, r7
  HostTimeouts.BTATimeout = 0;
 8003300:	941d      	str	r4, [sp, #116]	; 0x74
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8003302:	e9cd 5415 	strd	r5, r4, [sp, #84]	; 0x54
  HostTimeouts.HighSpeedReadTimeout = 0;
 8003306:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800330a:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  HostTimeouts.LowPowerWriteTimeout = 0;
 800330e:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8003312:	f002 fd53 	bl	8005dbc <HAL_DSI_ConfigHostTimeouts>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8003316:	211c      	movs	r1, #28
 8003318:	2321      	movs	r3, #33	; 0x21
  PhyTimings.DataLaneLP2HSTime = 25;
 800331a:	200f      	movs	r0, #15
  PhyTimings.ClockLaneLP2HSTime = 33;
 800331c:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  PhyTimings.DataLaneLP2HSTime = 25;
 8003320:	2319      	movs	r3, #25
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8003322:	a90f      	add	r1, sp, #60	; 0x3c
  PhyTimings.DataLaneLP2HSTime = 25;
 8003324:	e9cd 0311 	strd	r0, r3, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8003328:	4638      	mov	r0, r7
  PhyTimings.StopWaitTime = 0;
 800332a:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800332e:	f002 fd08 	bl	8005d42 <HAL_DSI_ConfigPhyTimer>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8003332:	4651      	mov	r1, sl
 8003334:	4638      	mov	r0, r7
 8003336:	f002 fcf3 	bl	8005d20 <HAL_DSI_ConfigFlowControl>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800333a:	f242 7110 	movw	r1, #10000	; 0x2710
 800333e:	4638      	mov	r0, r7
 8003340:	f002 fe47 	bl	8005fd2 <HAL_DSI_SetLowPowerRXFilter>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_OVF) != HAL_OK)
 8003344:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003348:	4638      	mov	r0, r7
 800334a:	f002 faa8 	bl	800589e <HAL_DSI_ConfigErrorMonitor>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 800334e:	f44f 7300 	mov.w	r3, #512	; 0x200
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8003352:	f44f 6c80 	mov.w	ip, #1024	; 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8003356:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 800335a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800335e:	e011      	b.n	8003384 <main+0x378>
 8003360:	03000012 	.word	0x03000012
 8003364:	01010001 	.word	0x01010001
 8003368:	e000ed00 	.word	0xe000ed00
 800336c:	40023800 	.word	0x40023800
 8003370:	40022400 	.word	0x40022400
 8003374:	40020800 	.word	0x40020800
 8003378:	40021400 	.word	0x40021400
 800337c:	2000eaf8 	.word	0x2000eaf8
 8003380:	40016c00 	.word	0x40016c00
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8003384:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8003388:	4638      	mov	r0, r7
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 800338a:	f8cd 80e0 	str.w	r8, [sp, #224]	; 0xe0
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 800338e:	e9cd 632c 	strd	r6, r3, [sp, #176]	; 0xb0
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8003392:	f44f 6300 	mov.w	r3, #2048	; 0x800
  hltdc.Instance = LTDC;
 8003396:	4ec7      	ldr	r6, [pc, #796]	; (80036b4 <main+0x6a8>)
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8003398:	e9cd c32e 	strd	ip, r3, [sp, #184]	; 0xb8
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 800339c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033a0:	e9cd e330 	strd	lr, r3, [sp, #192]	; 0xc0
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 80033a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033a8:	e9cd 9332 	strd	r9, r3, [sp, #200]	; 0xc8
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 80033ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 80033b0:	f04f 0910 	mov.w	r9, #16
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 80033b4:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 80033b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033bc:	e9cd 1336 	strd	r1, r3, [sp, #216]	; 0xd8
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 80033c0:	a92c      	add	r1, sp, #176	; 0xb0
 80033c2:	f002 fc79 	bl	8005cb8 <HAL_DSI_ConfigCommand>
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 80033c6:	23c8      	movs	r3, #200	; 0xc8
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80033c8:	a91e      	add	r1, sp, #120	; 0x78
 80033ca:	4638      	mov	r0, r7
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 80033cc:	9528      	str	r5, [sp, #160]	; 0xa0
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 80033ce:	e9cd 3920 	strd	r3, r9, [sp, #128]	; 0x80
  CmdCfg.ColorCoding = DSI_RGB565;
 80033d2:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 80033d6:	e9cd 4a22 	strd	r4, sl, [sp, #136]	; 0x88
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80033da:	e9cd 8424 	strd	r8, r4, [sp, #144]	; 0x90
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 80033de:	e9cd 4426 	strd	r4, r4, [sp, #152]	; 0x98
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80033e2:	f002 fbf7 	bl	8005bd4 <HAL_DSI_ConfigAdaptedCommandMode>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80033e6:	4621      	mov	r1, r4
 80033e8:	4638      	mov	r0, r7
 80033ea:	f002 fbe2 	bl	8005bb2 <HAL_DSI_SetGenericVCID>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80033ee:	4621      	mov	r1, r4
 80033f0:	2234      	movs	r2, #52	; 0x34
 80033f2:	a81e      	add	r0, sp, #120	; 0x78
 80033f4:	f019 fb36 	bl	801ca64 <memset>
  hltdc.Instance = LTDC;
 80033f8:	4aaf      	ldr	r2, [pc, #700]	; (80036b8 <main+0x6ac>)
  hltdc.Init.AccumulatedActiveH = 482;
 80033fa:	20ca      	movs	r0, #202	; 0xca
  hltdc.Init.TotalHeigh = 483;
 80033fc:	f04f 0ccb 	mov.w	ip, #203	; 0xcb
  hltdc.Init.Backcolor.Blue = 0;
 8003400:	86b4      	strh	r4, [r6, #52]	; 0x34
  hltdc.Init.AccumulatedVBP = 2;
 8003402:	f8c6 8020 	str.w	r8, [r6, #32]
  hltdc.Init.Backcolor.Red = 0;
 8003406:	f886 4036 	strb.w	r4, [r6, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800340a:	e9c6 2400 	strd	r2, r4, [r6]
  hltdc.Init.AccumulatedActiveH = 482;
 800340e:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8003412:	e9c6 0209 	strd	r0, r2, [r6, #36]	; 0x24
  hltdc.Init.TotalHeigh = 483;
 8003416:	f240 12e3 	movw	r2, #483	; 0x1e3
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800341a:	4630      	mov	r0, r6
  hltdc.Init.TotalHeigh = 483;
 800341c:	e9c6 c20b 	strd	ip, r2, [r6, #44]	; 0x2c
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003420:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hltdc.Init.HorizontalSync = 1;
 8003424:	e9c6 4504 	strd	r4, r5, [r6, #16]
  hltdc.Init.AccumulatedHBP = 2;
 8003428:	e9c6 5806 	strd	r5, r8, [r6, #24]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800342c:	f004 fad6 	bl	80079dc <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8003430:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003432:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  pLayerCfg.WindowX1 = 200;
 8003436:	23c8      	movs	r3, #200	; 0xc8
  pLayerCfg.WindowY1 = 480;
 8003438:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800343c:	4630      	mov	r0, r6
  pLayerCfg.WindowX0 = 0;
 800343e:	941e      	str	r4, [sp, #120]	; 0x78
  pLayerCfg.ImageHeight = 480;
 8003440:	9229      	str	r2, [sp, #164]	; 0xa4
  pLayerCfg.Backcolor.Blue = 0;
 8003442:	f8ad 40a8 	strh.w	r4, [sp, #168]	; 0xa8
  pLayerCfg.Backcolor.Red = 0;
 8003446:	f88d 40aa 	strb.w	r4, [sp, #170]	; 0xaa
  pLayerCfg.Alpha0 = 0;
 800344a:	e9cd 1423 	strd	r1, r4, [sp, #140]	; 0x8c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800344e:	2105      	movs	r1, #5
 8003450:	e9cd e125 	strd	lr, r1, [sp, #148]	; 0x94
  pLayerCfg.FBStartAdress = 0xC0000000;
 8003454:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003458:	e9cd 2821 	strd	r2, r8, [sp, #132]	; 0x84
  pLayerCfg.ImageWidth = 200;
 800345c:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003460:	4622      	mov	r2, r4
 8003462:	a91e      	add	r1, sp, #120	; 0x78
  pLayerCfg.WindowY0 = 0;
 8003464:	e9cd 341f 	strd	r3, r4, [sp, #124]	; 0x7c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003468:	f004 fb84 	bl	8007b74 <HAL_LTDC_ConfigLayer>
  __HAL_LTDC_DISABLE(&hltdc);
 800346c:	6832      	ldr	r2, [r6, #0]
  HAL_DSI_Start(&hdsi);
 800346e:	4638      	mov	r0, r7
  __HAL_LTDC_DISABLE(&hltdc);
 8003470:	6993      	ldr	r3, [r2, #24]
 8003472:	f023 0301 	bic.w	r3, r3, #1
 8003476:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8003478:	f002 fd06 	bl	8005e88 <HAL_DSI_Start>
  OTM8009A_Init(OTM8009A_FORMAT_RBG565, LCD_ORIENTATION_LANDSCAPE);
 800347c:	4629      	mov	r1, r5
 800347e:	4640      	mov	r0, r8
 8003480:	f001 fb7e 	bl	8004b80 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8003484:	2328      	movs	r3, #40	; 0x28
 8003486:	2215      	movs	r2, #21
 8003488:	4621      	mov	r1, r4
 800348a:	4638      	mov	r0, r7
 800348c:	9400      	str	r4, [sp, #0]
 800348e:	f002 fd2e 	bl	8005eee <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8003492:	a92c      	add	r1, sp, #176	; 0xb0
 8003494:	4638      	mov	r0, r7
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8003496:	9436      	str	r4, [sp, #216]	; 0xd8
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8003498:	f44f 7740 	mov.w	r7, #768	; 0x300
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 800349c:	e9cd 442c 	strd	r4, r4, [sp, #176]	; 0xb0
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 80034a0:	e9cd 442e 	strd	r4, r4, [sp, #184]	; 0xb8
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 80034a4:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 80034a8:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 80034ac:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 80034b0:	f002 fc02 	bl	8005cb8 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 80034b4:	4622      	mov	r2, r4
 80034b6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80034ba:	4630      	mov	r0, r6
 80034bc:	f004 fb88 	bl	8007bd0 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 80034c0:	6832      	ldr	r2, [r6, #0]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80034c2:	4e7e      	ldr	r6, [pc, #504]	; (80036bc <main+0x6b0>)
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80034c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
  __HAL_LTDC_ENABLE(&hltdc);
 80034c8:	6993      	ldr	r3, [r2, #24]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80034ca:	4630      	mov	r0, r6
  __HAL_LTDC_ENABLE(&hltdc);
 80034cc:	432b      	orrs	r3, r5
 80034ce:	6193      	str	r3, [r2, #24]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80034d0:	2220      	movs	r2, #32
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80034d2:	4b7b      	ldr	r3, [pc, #492]	; (80036c0 <main+0x6b4>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80034d4:	62b4      	str	r4, [r6, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 80034d6:	f8cd 80b0 	str.w	r8, [sp, #176]	; 0xb0
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80034da:	e9c6 3400 	strd	r3, r4, [r6]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80034de:	2340      	movs	r3, #64	; 0x40
 80034e0:	e9c6 2304 	strd	r2, r3, [r6, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80034e4:	f44f 73c0 	mov.w	r3, #384	; 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80034e8:	e9c6 3406 	strd	r3, r4, [r6, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80034ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034f0:	e9c6 1308 	strd	r1, r3, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80034f4:	2307      	movs	r3, #7
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80034f6:	a92c      	add	r1, sp, #176	; 0xb0
  SdramTiming.SelfRefreshTime = 4;
 80034f8:	e9cd 3a2d 	strd	r3, sl, [sp, #180]	; 0xb4
  SdramTiming.WriteRecoveryTime = 2;
 80034fc:	e9cd 382f 	strd	r3, r8, [sp, #188]	; 0xbc
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8003500:	e9c6 4a02 	strd	r4, sl, [r6, #8]
  SdramTiming.RCDDelay = 3;
 8003504:	e9cd 8b31 	strd	r8, fp, [sp, #196]	; 0xc4
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003508:	f005 fbfc 	bl	8008d04 <HAL_SDRAM_Init>
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800350c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003510:	a91e      	add	r1, sp, #120	; 0x78
 8003512:	4630      	mov	r0, r6
 __IO uint32_t tmpmrd = 0;
 8003514:	940f      	str	r4, [sp, #60]	; 0x3c
    Command->CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8003516:	e9cd 591e 	strd	r5, r9, [sp, #120]	; 0x78
    Command->ModeRegisterDefinition = 0;
 800351a:	e9cd 5420 	strd	r5, r4, [sp, #128]	; 0x80
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800351e:	f005 fc11 	bl	8008d44 <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 8003522:	4628      	mov	r0, r5
 8003524:	f001 fdc2 	bl	80050ac <HAL_Delay>
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800352c:	a91e      	add	r1, sp, #120	; 0x78
 800352e:	4630      	mov	r0, r6
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003530:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
    Command->ModeRegisterDefinition = 0;
 8003534:	e9cd 5420 	strd	r5, r4, [sp, #128]	; 0x80
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003538:	f005 fc04 	bl	8008d44 <HAL_SDRAM_SendCommand>
    Command->AutoRefreshNumber      = 8;
 800353c:	2308      	movs	r3, #8
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800353e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003542:	a91e      	add	r1, sp, #120	; 0x78
 8003544:	4630      	mov	r0, r6
    Command->ModeRegisterDefinition = 0;
 8003546:	e9cd 3420 	strd	r3, r4, [sp, #128]	; 0x80
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800354a:	e9cd b91e 	strd	fp, r9, [sp, #120]	; 0x78
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800354e:	f005 fbf9 	bl	8008d44 <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          | \
 8003552:	f44f 730c 	mov.w	r3, #560	; 0x230
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800355a:	a91e      	add	r1, sp, #120	; 0x78
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          | \
 800355c:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800355e:	4630      	mov	r0, r6
    Command->ModeRegisterDefinition = tmpmrd;
 8003560:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    Command->AutoRefreshNumber      = 1;
 8003562:	9520      	str	r5, [sp, #128]	; 0x80
    Command->ModeRegisterDefinition = tmpmrd;
 8003564:	9321      	str	r3, [sp, #132]	; 0x84
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003566:	e9cd a91e 	strd	sl, r9, [sp, #120]	; 0x78
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800356a:	f005 fbeb 	bl	8008d44 <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 800356e:	f240 712a 	movw	r1, #1834	; 0x72a
 8003572:	4630      	mov	r0, r6
  hqspi.Instance = QUADSPI;
 8003574:	4e53      	ldr	r6, [pc, #332]	; (80036c4 <main+0x6b8>)
    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8003576:	f005 fc04 	bl	8008d82 <HAL_SDRAM_ProgramRefreshRate>
  FMC_Bank1->BTCR[0] = 0x000030D2;
 800357a:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800357e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8003582:	4630      	mov	r0, r6
  FMC_Bank1->BTCR[0] = 0x000030D2;
 8003584:	601a      	str	r2, [r3, #0]
  hqspi.Instance = QUADSPI;
 8003586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800358a:	6234      	str	r4, [r6, #32]
  hqspi.Init.ClockPrescaler = 1;
 800358c:	e9c6 3500 	strd	r3, r5, [r6]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8003590:	2319      	movs	r3, #25
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8003592:	e9c6 9902 	strd	r9, r9, [r6, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8003596:	e9c6 3704 	strd	r3, r7, [r6, #16]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800359a:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800359e:	f004 fc63 	bl	8007e68 <HAL_QSPI_Init>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80035a2:	9732      	str	r7, [sp, #200]	; 0xc8
  s_command.Instruction       = RESET_ENABLE_CMD;
 80035a4:	2766      	movs	r7, #102	; 0x66
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035aa:	a92c      	add	r1, sp, #176	; 0xb0
 80035ac:	4630      	mov	r0, r6
  s_command.Instruction       = RESET_ENABLE_CMD;
 80035ae:	972c      	str	r7, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_NONE;
 80035b0:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 80035b2:	9431      	str	r4, [sp, #196]	; 0xc4
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80035b4:	9439      	str	r4, [sp, #228]	; 0xe4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80035b6:	e9cd 4433 	strd	r4, r4, [sp, #204]	; 0xcc
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80035ba:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035be:	f004 fca7 	bl	8007f10 <HAL_QSPI_Command>
 80035c2:	2800      	cmp	r0, #0
 80035c4:	f040 80bb 	bne.w	800373e <main+0x732>
  s_command.Instruction = RESET_MEMORY_CMD;
 80035c8:	2499      	movs	r4, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ce:	a92c      	add	r1, sp, #176	; 0xb0
 80035d0:	4630      	mov	r0, r6
  s_command.Instruction = RESET_MEMORY_CMD;
 80035d2:	942c      	str	r4, [sp, #176]	; 0xb0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035d4:	f004 fc9c 	bl	8007f10 <HAL_QSPI_Command>
 80035d8:	2800      	cmp	r0, #0
 80035da:	f040 80b0 	bne.w	800373e <main+0x732>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80035de:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e6:	a92c      	add	r1, sp, #176	; 0xb0
 80035e8:	4630      	mov	r0, r6
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80035ea:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = RESET_ENABLE_CMD;
 80035ec:	972c      	str	r7, [sp, #176]	; 0xb0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035ee:	f004 fc8f 	bl	8007f10 <HAL_QSPI_Command>
 80035f2:	2800      	cmp	r0, #0
 80035f4:	f040 80a3 	bne.w	800373e <main+0x732>
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fc:	a92c      	add	r1, sp, #176	; 0xb0
 80035fe:	4630      	mov	r0, r6
  s_command.Instruction = RESET_MEMORY_CMD;
 8003600:	942c      	str	r4, [sp, #176]	; 0xb0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003602:	f004 fc85 	bl	8007f10 <HAL_QSPI_Command>
 8003606:	4604      	mov	r4, r0
 8003608:	2800      	cmp	r0, #0
 800360a:	f040 8098 	bne.w	800373e <main+0x732>
  HAL_Delay( 1000 );
 800360e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003612:	f001 fd4b 	bl	80050ac <HAL_Delay>
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800361a:	aa1e      	add	r2, sp, #120	; 0x78
 800361c:	a92c      	add	r1, sp, #176	; 0xb0
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800361e:	9323      	str	r3, [sp, #140]	; 0x8c
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003620:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003624:	4630      	mov	r0, r6
  s_config.Interval        = 0x10;
 8003626:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800362a:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction     = READ_STATUS_REG_CMD;
 800362c:	2305      	movs	r3, #5
 800362e:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode        = QSPI_DATA_1_LINE;
 8003630:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003634:	9335      	str	r3, [sp, #212]	; 0xd4
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003636:	f241 3388 	movw	r3, #5000	; 0x1388
  s_config.Mask            = MX25L512_SR_WIP;
 800363a:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
  s_config.StatusBytesSize = 1;
 800363e:	e9cd 5421 	strd	r5, r4, [sp, #132]	; 0x84
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003642:	f004 fd60 	bl	8008106 <HAL_QSPI_AutoPolling>
 8003646:	2800      	cmp	r0, #0
 8003648:	d179      	bne.n	800373e <main+0x732>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800364a:	f44f 7380 	mov.w	r3, #256	; 0x100
  s_command.DummyCycles       = 0;
 800364e:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003650:	f241 3288 	movw	r2, #5000	; 0x1388
 8003654:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003656:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003658:	2305      	movs	r3, #5
 800365a:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800365c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003660:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003664:	e9cd 5036 	strd	r5, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003668:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800366c:	4630      	mov	r0, r6
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800366e:	9335      	str	r3, [sp, #212]	; 0xd4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003670:	f004 fc4e 	bl	8007f10 <HAL_QSPI_Command>
 8003674:	2800      	cmp	r0, #0
 8003676:	d162      	bne.n	800373e <main+0x732>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003678:	f241 3288 	movw	r2, #5000	; 0x1388
 800367c:	a915      	add	r1, sp, #84	; 0x54
 800367e:	4630      	mov	r0, r6
 8003680:	f004 fce2 	bl	8008048 <HAL_QSPI_Receive>
 8003684:	2800      	cmp	r0, #0
 8003686:	d15a      	bne.n	800373e <main+0x732>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003688:	f44f 7380 	mov.w	r3, #256	; 0x100
  s_command.DataMode          = QSPI_DATA_NONE;
 800368c:	9035      	str	r0, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 800368e:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003690:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003694:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003696:	2306      	movs	r3, #6
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003698:	9039      	str	r0, [sp, #228]	; 0xe4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800369a:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800369c:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800369e:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80036a2:	e9cd 0037 	strd	r0, r0, [sp, #220]	; 0xdc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036a6:	4630      	mov	r0, r6
 80036a8:	f004 fc32 	bl	8007f10 <HAL_QSPI_Command>
 80036ac:	2800      	cmp	r0, #0
 80036ae:	d146      	bne.n	800373e <main+0x732>
 80036b0:	e00a      	b.n	80036c8 <main+0x6bc>
 80036b2:	bf00      	nop
 80036b4:	2000ebc0 	.word	0x2000ebc0
 80036b8:	40016800 	.word	0x40016800
 80036bc:	2000ecb4 	.word	0x2000ecb4
 80036c0:	a0000140 	.word	0xa0000140
 80036c4:	2000ec68 	.word	0x2000ec68
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80036c8:	2300      	movs	r3, #0
  s_config.StatusBytesSize = 1;
 80036ca:	462c      	mov	r4, r5
 80036cc:	9521      	str	r5, [sp, #132]	; 0x84
  s_command.DataMode       = QSPI_DATA_1_LINE;
 80036ce:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80036d2:	9322      	str	r3, [sp, #136]	; 0x88
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80036d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036d8:	aa1e      	add	r2, sp, #120	; 0x78
 80036da:	a92c      	add	r1, sp, #176	; 0xb0
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80036dc:	9323      	str	r3, [sp, #140]	; 0x8c
  s_command.Instruction    = READ_STATUS_REG_CMD;
 80036de:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036e0:	4630      	mov	r0, r6
  s_config.Interval        = 0x10;
 80036e2:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
  s_command.Instruction    = READ_STATUS_REG_CMD;
 80036e6:	932c      	str	r3, [sp, #176]	; 0xb0
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036e8:	f241 3388 	movw	r3, #5000	; 0x1388
  s_command.DataMode       = QSPI_DATA_1_LINE;
 80036ec:	9535      	str	r5, [sp, #212]	; 0xd4
  s_config.Mask            = MX25L512_SR_WREN;
 80036ee:	e9cd 881e 	strd	r8, r8, [sp, #120]	; 0x78
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036f2:	f004 fd08 	bl	8008106 <HAL_QSPI_AutoPolling>
 80036f6:	bb10      	cbnz	r0, 800373e <main+0x732>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80036f8:	f44f 7380 	mov.w	r3, #256	; 0x100
  s_command.DummyCycles       = 0;
 80036fc:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003702:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003704:	9332      	str	r3, [sp, #200]	; 0xc8
  reg |= MX25L512_SR_QUADEN;
 8003706:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 800370a:	942c      	str	r4, [sp, #176]	; 0xb0
  reg |= MX25L512_SR_QUADEN;
 800370c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003710:	9535      	str	r5, [sp, #212]	; 0xd4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003712:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003716:	e9cd 4036 	strd	r4, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800371a:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800371e:	4630      	mov	r0, r6
  reg |= MX25L512_SR_QUADEN;
 8003720:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003724:	f004 fbf4 	bl	8007f10 <HAL_QSPI_Command>
 8003728:	b948      	cbnz	r0, 800373e <main+0x732>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800372a:	f241 3288 	movw	r2, #5000	; 0x1388
 800372e:	a915      	add	r1, sp, #84	; 0x54
 8003730:	4630      	mov	r0, r6
 8003732:	f004 fc30 	bl	8007f96 <HAL_QSPI_Transmit>
 8003736:	b910      	cbnz	r0, 800373e <main+0x732>
  HAL_Delay( 40 );
 8003738:	2028      	movs	r0, #40	; 0x28
 800373a:	f001 fcb7 	bl	80050ac <HAL_Delay>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800373e:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003742:	f241 3288 	movw	r2, #5000	; 0x1388
 8003746:	a92c      	add	r1, sp, #176	; 0xb0
 8003748:	48b7      	ldr	r0, [pc, #732]	; (8003a28 <main+0xa1c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800374a:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = ENTER_QUAD_CMD;
 800374c:	2335      	movs	r3, #53	; 0x35
 800374e:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003750:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003752:	e9cd 3333 	strd	r3, r3, [sp, #204]	; 0xcc
  s_command.DataMode          = QSPI_DATA_NONE;
 8003756:	9335      	str	r3, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 8003758:	9331      	str	r3, [sp, #196]	; 0xc4
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800375a:	9339      	str	r3, [sp, #228]	; 0xe4
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800375c:	e9cd 3337 	strd	r3, r3, [sp, #220]	; 0xdc
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003760:	f004 fbd6 	bl	8007f10 <HAL_QSPI_Command>
 8003764:	b9e0      	cbnz	r0, 80037a0 <main+0x794>
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 8003766:	2341      	movs	r3, #65	; 0x41
 8003768:	f04f 0c40 	mov.w	ip, #64	; 0x40
  s_config.Interval        = 0x10;
 800376c:	f04f 0e01 	mov.w	lr, #1
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003770:	9022      	str	r0, [sp, #136]	; 0x88
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003772:	aa1e      	add	r2, sp, #120	; 0x78
 8003774:	a92c      	add	r1, sp, #176	; 0xb0
 8003776:	48ac      	ldr	r0, [pc, #688]	; (8003a28 <main+0xa1c>)
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 8003778:	e9cd c31e 	strd	ip, r3, [sp, #120]	; 0x78
  s_config.Interval        = 0x10;
 800377c:	2310      	movs	r3, #16
 800377e:	e9cd 3e20 	strd	r3, lr, [sp, #128]	; 0x80
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003782:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003786:	9323      	str	r3, [sp, #140]	; 0x8c
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003788:	f44f 7340 	mov.w	r3, #768	; 0x300
 800378c:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800378e:	2305      	movs	r3, #5
 8003790:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003792:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003796:	9335      	str	r3, [sp, #212]	; 0xd4
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003798:	f241 3388 	movw	r3, #5000	; 0x1388
 800379c:	f004 fcb3 	bl	8008106 <HAL_QSPI_AutoPolling>
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 80037a0:	23b7      	movs	r3, #183	; 0xb7
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80037a2:	f44f 7440 	mov.w	r4, #768	; 0x300
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 80037a6:	931e      	str	r3, [sp, #120]	; 0x78
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80037a8:	2300      	movs	r3, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80037aa:	9424      	str	r4, [sp, #144]	; 0x90
  s_command.DataMode          = QSPI_DATA_NONE;
 80037ac:	9327      	str	r3, [sp, #156]	; 0x9c
  s_command.DummyCycles       = 0;
 80037ae:	9323      	str	r3, [sp, #140]	; 0x8c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80037b0:	932b      	str	r3, [sp, #172]	; 0xac
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80037b2:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80037b6:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80037ba:	f7ff fb7f 	bl	8002ebc <QSPI_WriteEnable.constprop.0>
 80037be:	bb18      	cbnz	r0, 8003808 <main+0x7fc>
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c4:	a91e      	add	r1, sp, #120	; 0x78
 80037c6:	4898      	ldr	r0, [pc, #608]	; (8003a28 <main+0xa1c>)
 80037c8:	f004 fba2 	bl	8007f10 <HAL_QSPI_Command>
 80037cc:	b9e0      	cbnz	r0, 8003808 <main+0x7fc>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80037ce:	2305      	movs	r3, #5
  s_command.DummyCycles       = 0;
 80037d0:	9031      	str	r0, [sp, #196]	; 0xc4
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80037d2:	9039      	str	r0, [sp, #228]	; 0xe4
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80037d4:	aa15      	add	r2, sp, #84	; 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80037d6:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80037d8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
  s_config.Match           = 0;
 80037dc:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80037de:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80037e0:	9335      	str	r3, [sp, #212]	; 0xd4
  s_config.Mask            = MX25L512_SR_WIP;
 80037e2:	2301      	movs	r3, #1
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80037e4:	9432      	str	r4, [sp, #200]	; 0xc8
  s_config.Mask            = MX25L512_SR_WIP;
 80037e6:	9316      	str	r3, [sp, #88]	; 0x58
  s_config.StatusBytesSize = 1;
 80037e8:	e9cd 3018 	strd	r3, r0, [sp, #96]	; 0x60
  s_config.Interval        = 0x10;
 80037ec:	2310      	movs	r3, #16
 80037ee:	9317      	str	r3, [sp, #92]	; 0x5c
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80037f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80037f4:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80037f8:	e9cd 0037 	strd	r0, r0, [sp, #220]	; 0xdc
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80037fc:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80037fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8003802:	4889      	ldr	r0, [pc, #548]	; (8003a28 <main+0xa1c>)
 8003804:	f004 fc7f 	bl	8008106 <HAL_QSPI_AutoPolling>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003808:	2305      	movs	r3, #5
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800380a:	f44f 7640 	mov.w	r6, #768	; 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800380e:	f04f 7440 	mov.w	r4, #50331648	; 0x3000000
  s_command.NbData            = 1;
 8003812:	2501      	movs	r5, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003814:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003816:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003818:	f241 3288 	movw	r2, #5000	; 0x1388
 800381c:	a92c      	add	r1, sp, #176	; 0xb0
 800381e:	4882      	ldr	r0, [pc, #520]	; (8003a28 <main+0xa1c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003820:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003822:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 8003824:	9331      	str	r3, [sp, #196]	; 0xc4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003826:	e9cd 3333 	strd	r3, r3, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800382a:	e9cd 5336 	strd	r5, r3, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800382e:	e9cd 3338 	strd	r3, r3, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003832:	f004 fb6d 	bl	8007f10 <HAL_QSPI_Command>
 8003836:	2800      	cmp	r0, #0
 8003838:	d14f      	bne.n	80038da <main+0x8ce>
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800383a:	f241 3288 	movw	r2, #5000	; 0x1388
 800383e:	a91e      	add	r1, sp, #120	; 0x78
 8003840:	4879      	ldr	r0, [pc, #484]	; (8003a28 <main+0xa1c>)
 8003842:	f004 fc01 	bl	8008048 <HAL_QSPI_Receive>
 8003846:	2800      	cmp	r0, #0
 8003848:	d147      	bne.n	80038da <main+0x8ce>
  s_command.Instruction       = READ_CFG_REG_CMD;
 800384a:	2315      	movs	r3, #21
  s_command.DummyCycles       = 0;
 800384c:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800384e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003852:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003854:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.Instruction       = READ_CFG_REG_CMD;
 8003856:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003858:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800385a:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800385e:	e9cd 5036 	strd	r5, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003862:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003866:	4870      	ldr	r0, [pc, #448]	; (8003a28 <main+0xa1c>)
 8003868:	f004 fb52 	bl	8007f10 <HAL_QSPI_Command>
 800386c:	bba8      	cbnz	r0, 80038da <main+0x8ce>
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800386e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003872:	f10d 0179 	add.w	r1, sp, #121	; 0x79
 8003876:	486c      	ldr	r0, [pc, #432]	; (8003a28 <main+0xa1c>)
 8003878:	f004 fbe6 	bl	8008048 <HAL_QSPI_Receive>
 800387c:	bb68      	cbnz	r0, 80038da <main+0x8ce>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 800387e:	f7ff fb1d 	bl	8002ebc <QSPI_WriteEnable.constprop.0>
 8003882:	bb50      	cbnz	r0, 80038da <main+0x8ce>
  s_command.NbData            = 2;
 8003884:	2302      	movs	r3, #2
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003886:	22c0      	movs	r2, #192	; 0xc0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003888:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 800388a:	952c      	str	r5, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800388c:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 800388e:	9031      	str	r0, [sp, #196]	; 0xc4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003890:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003894:	e9cd 3036 	strd	r3, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003898:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
 800389c:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 80038a0:	2103      	movs	r1, #3
 80038a2:	f89d 3079 	ldrb.w	r3, [sp, #121]	; 0x79
 80038a6:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038aa:	485f      	ldr	r0, [pc, #380]	; (8003a28 <main+0xa1c>)
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 80038ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038b0:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038b4:	a92c      	add	r1, sp, #176	; 0xb0
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 80038b6:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038b8:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 80038bc:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038c0:	f004 fb26 	bl	8007f10 <HAL_QSPI_Command>
 80038c4:	b948      	cbnz	r0, 80038da <main+0x8ce>
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ca:	a91e      	add	r1, sp, #120	; 0x78
 80038cc:	4856      	ldr	r0, [pc, #344]	; (8003a28 <main+0xa1c>)
 80038ce:	f004 fb62 	bl	8007f96 <HAL_QSPI_Transmit>
 80038d2:	b910      	cbnz	r0, 80038da <main+0x8ce>
  HAL_Delay( 40 );
 80038d4:	2028      	movs	r0, #40	; 0x28
 80038d6:	f001 fbe9 	bl	80050ac <HAL_Delay>
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80038da:	2305      	movs	r3, #5
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80038dc:	f44f 7640 	mov.w	r6, #768	; 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80038e0:	f04f 7440 	mov.w	r4, #50331648	; 0x3000000
  s_command.NbData            = 1;
 80038e4:	2501      	movs	r5, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80038e6:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80038e8:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ee:	a92c      	add	r1, sp, #176	; 0xb0
 80038f0:	484d      	ldr	r0, [pc, #308]	; (8003a28 <main+0xa1c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80038f2:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80038f4:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 80038f6:	9331      	str	r3, [sp, #196]	; 0xc4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80038f8:	e9cd 3333 	strd	r3, r3, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80038fc:	e9cd 5336 	strd	r5, r3, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003900:	e9cd 3338 	strd	r3, r3, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003904:	f004 fb04 	bl	8007f10 <HAL_QSPI_Command>
 8003908:	2800      	cmp	r0, #0
 800390a:	d14b      	bne.n	80039a4 <main+0x998>
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800390c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003910:	a91e      	add	r1, sp, #120	; 0x78
 8003912:	4845      	ldr	r0, [pc, #276]	; (8003a28 <main+0xa1c>)
 8003914:	f004 fb98 	bl	8008048 <HAL_QSPI_Receive>
 8003918:	2800      	cmp	r0, #0
 800391a:	d143      	bne.n	80039a4 <main+0x998>
  s_command.Instruction       = READ_CFG_REG_CMD;
 800391c:	2315      	movs	r3, #21
  s_command.DummyCycles       = 0;
 800391e:	9031      	str	r0, [sp, #196]	; 0xc4
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003920:	f241 3288 	movw	r2, #5000	; 0x1388
 8003924:	a92c      	add	r1, sp, #176	; 0xb0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003926:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.Instruction       = READ_CFG_REG_CMD;
 8003928:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800392a:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800392c:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003930:	e9cd 5036 	strd	r5, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003934:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003938:	483b      	ldr	r0, [pc, #236]	; (8003a28 <main+0xa1c>)
 800393a:	f004 fae9 	bl	8007f10 <HAL_QSPI_Command>
 800393e:	bb88      	cbnz	r0, 80039a4 <main+0x998>
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003940:	f241 3288 	movw	r2, #5000	; 0x1388
 8003944:	f10d 0179 	add.w	r1, sp, #121	; 0x79
 8003948:	4837      	ldr	r0, [pc, #220]	; (8003a28 <main+0xa1c>)
 800394a:	f004 fb7d 	bl	8008048 <HAL_QSPI_Receive>
 800394e:	bb48      	cbnz	r0, 80039a4 <main+0x998>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003950:	f7ff fab4 	bl	8002ebc <QSPI_WriteEnable.constprop.0>
 8003954:	bb30      	cbnz	r0, 80039a4 <main+0x998>
  s_command.NbData            = 2;
 8003956:	2302      	movs	r3, #2
 8003958:	2207      	movs	r2, #7
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800395a:	9632      	str	r6, [sp, #200]	; 0xc8
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 800395c:	952c      	str	r5, [sp, #176]	; 0xb0
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800395e:	9435      	str	r4, [sp, #212]	; 0xd4
  s_command.DummyCycles       = 0;
 8003960:	9031      	str	r0, [sp, #196]	; 0xc4
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003962:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003966:	e9cd 3036 	strd	r3, r0, [sp, #216]	; 0xd8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800396a:	e9cd 0038 	strd	r0, r0, [sp, #224]	; 0xe0
 800396e:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8003972:	2106      	movs	r1, #6
 8003974:	f89d 3079 	ldrb.w	r3, [sp, #121]	; 0x79
 8003978:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800397c:	482a      	ldr	r0, [pc, #168]	; (8003a28 <main+0xa1c>)
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 800397e:	f023 0307 	bic.w	r3, r3, #7
 8003982:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003986:	a92c      	add	r1, sp, #176	; 0xb0
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8003988:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800398a:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 800398e:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003992:	f004 fabd 	bl	8007f10 <HAL_QSPI_Command>
 8003996:	b928      	cbnz	r0, 80039a4 <main+0x998>
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003998:	f241 3288 	movw	r2, #5000	; 0x1388
 800399c:	a91e      	add	r1, sp, #120	; 0x78
 800399e:	4822      	ldr	r0, [pc, #136]	; (8003a28 <main+0xa1c>)
 80039a0:	f004 faf9 	bl	8007f96 <HAL_QSPI_Transmit>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80039a4:	f44f 7340 	mov.w	r3, #768	; 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80039a8:	2400      	movs	r4, #0
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80039aa:	aa1e      	add	r2, sp, #120	; 0x78
  hdma2d.Instance = DMA2D;
 80039ac:	4d1f      	ldr	r5, [pc, #124]	; (8003a2c <main+0xa20>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80039ae:	9332      	str	r3, [sp, #200]	; 0xc8
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 80039b0:	23ec      	movs	r3, #236	; 0xec
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80039b2:	a92c      	add	r1, sp, #176	; 0xb0
 80039b4:	481c      	ldr	r0, [pc, #112]	; (8003a28 <main+0xa1c>)
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 80039b6:	932c      	str	r3, [sp, #176]	; 0xb0
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80039b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80039bc:	9439      	str	r4, [sp, #228]	; 0xe4
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80039be:	9333      	str	r3, [sp, #204]	; 0xcc
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80039c0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80039c4:	932f      	str	r3, [sp, #188]	; 0xbc
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80039c6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80039ca:	e9cd 4334 	strd	r4, r3, [sp, #208]	; 0xd0
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 80039ce:	230a      	movs	r3, #10
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80039d0:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 80039d4:	9331      	str	r3, [sp, #196]	; 0xc4
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80039d6:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80039da:	f004 fbe4 	bl	80081a6 <HAL_QSPI_MemoryMapped>
  hdma2d.Instance = DMA2D;
 80039de:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <main+0xa24>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80039e0:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80039e2:	e9c5 440e 	strd	r4, r4, [r5, #56]	; 0x38
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80039e6:	e9c5 4410 	strd	r4, r4, [r5, #64]	; 0x40
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80039ea:	e9c5 4412 	strd	r4, r4, [r5, #72]	; 0x48
  hdma2d.Init.Mode = DMA2D_M2M;
 80039ee:	e9c5 3400 	strd	r3, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 80039f2:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80039f6:	f001 fe1f 	bl	8005638 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80039fa:	2101      	movs	r1, #1
 80039fc:	4628      	mov	r0, r5
 80039fe:	f001 fedd 	bl	80057bc <HAL_DMA2D_ConfigLayer>
  MX_I2C4_Init();
 8003a02:	f7ff fae1 	bl	8002fc8 <MX_I2C4_Init>
  MX_LIBJPEG_Init();
 8003a06:	f7fc fe16 	bl	8000636 <MX_LIBJPEG_Init>
  hcrc.Instance = CRC;
 8003a0a:	480a      	ldr	r0, [pc, #40]	; (8003a34 <main+0xa28>)
 8003a0c:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <main+0xa2c>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003a0e:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 8003a10:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003a12:	2301      	movs	r3, #1
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003a14:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003a18:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003a1a:	f001 fc09 	bl	8005230 <HAL_CRC_Init>
  hjpeg.Instance = JPEG;
 8003a1e:	4b07      	ldr	r3, [pc, #28]	; (8003a3c <main+0xa30>)
 8003a20:	4807      	ldr	r0, [pc, #28]	; (8003a40 <main+0xa34>)
 8003a22:	6003      	str	r3, [r0, #0]
 8003a24:	e00e      	b.n	8003a44 <main+0xa38>
 8003a26:	bf00      	nop
 8003a28:	2000ec68 	.word	0x2000ec68
 8003a2c:	2000e9e0 	.word	0x2000e9e0
 8003a30:	4002b000 	.word	0x4002b000
 8003a34:	2000e9bc 	.word	0x2000e9bc
 8003a38:	40023000 	.word	0x40023000
 8003a3c:	50051000 	.word	0x50051000
 8003a40:	2000eb68 	.word	0x2000eb68
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8003a44:	f003 f996 	bl	8006d74 <HAL_JPEG_Init>
  MX_TouchGFX_Init();
 8003a48:	f7fc fdf7 	bl	800063a <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8003a4c:	f7fc fdf4 	bl	8000638 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8003a50:	f005 fbc8 	bl	80091e4 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003a54:	4a0b      	ldr	r2, [pc, #44]	; (8003a84 <main+0xa78>)
 8003a56:	4621      	mov	r1, r4
 8003a58:	480b      	ldr	r0, [pc, #44]	; (8003a88 <main+0xa7c>)
 8003a5a:	f005 fbfd 	bl	8009258 <osThreadNew>
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <main+0xa80>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8003a60:	4a0b      	ldr	r2, [pc, #44]	; (8003a90 <main+0xa84>)
 8003a62:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003a64:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8003a66:	480b      	ldr	r0, [pc, #44]	; (8003a94 <main+0xa88>)
 8003a68:	f005 fbf6 	bl	8009258 <osThreadNew>
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <main+0xa8c>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8003a6e:	4a0b      	ldr	r2, [pc, #44]	; (8003a9c <main+0xa90>)
 8003a70:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8003a72:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8003a74:	480a      	ldr	r0, [pc, #40]	; (8003aa0 <main+0xa94>)
 8003a76:	f005 fbef 	bl	8009258 <osThreadNew>
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <main+0xa98>)
 8003a7c:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003a7e:	f005 fbcb 	bl	8009218 <osKernelStart>
  while (1)
 8003a82:	e7fe      	b.n	8003a82 <main+0xa76>
 8003a84:	0801f830 	.word	0x0801f830
 8003a88:	08002eb1 	.word	0x08002eb1
 8003a8c:	2000e9b8 	.word	0x2000e9b8
 8003a90:	0801f80c 	.word	0x0801f80c
 8003a94:	08000649 	.word	0x08000649
 8003a98:	2000e9b4 	.word	0x2000e9b4
 8003a9c:	0801f854 	.word	0x0801f854
 8003aa0:	08002569 	.word	0x08002569
 8003aa4:	2000ece8 	.word	0x2000ece8

08003aa8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003aa8:	6802      	ldr	r2, [r0, #0]
 8003aaa:	4b03      	ldr	r3, [pc, #12]	; (8003ab8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d101      	bne.n	8003ab4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003ab0:	f001 baea 	b.w	8005088 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40001000 	.word	0x40001000

08003abc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003abc:	4770      	bx	lr
	...

08003ac0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ac0:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <HAL_MspInit+0x38>)
{
 8003ac2:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ac4:	210f      	movs	r1, #15
 8003ac6:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003acc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
 8003ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ad4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003ad8:	9200      	str	r2, [sp, #0]
 8003ada:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ae2:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ae4:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aec:	9301      	str	r3, [sp, #4]
 8003aee:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003af0:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003af2:	f001 baff 	b.w	80050f4 <HAL_NVIC_SetPriority>
 8003af6:	bf00      	nop
 8003af8:	40023800 	.word	0x40023800

08003afc <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8003afc:	6802      	ldr	r2, [r0, #0]
{
 8003afe:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8003b00:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <HAL_CRC_MspInit+0x28>)
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d10b      	bne.n	8003b1e <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003b06:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8003b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b12:	631a      	str	r2, [r3, #48]	; 0x30
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b1a:	9301      	str	r3, [sp, #4]
 8003b1c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003b1e:	b002      	add	sp, #8
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40023000 	.word	0x40023000

08003b28 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8003b28:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <HAL_DMA2D_MspInit+0x3c>)
{
 8003b2a:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8003b2c:	6802      	ldr	r2, [r0, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d115      	bne.n	8003b5e <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003b32:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003b36:	2105      	movs	r1, #5
 8003b38:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b3c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003b42:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b4a:	9301      	str	r3, [sp, #4]
 8003b4c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003b4e:	f001 fad1 	bl	80050f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003b52:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003b54:	b003      	add	sp, #12
 8003b56:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003b5a:	f001 bafd 	b.w	8005158 <HAL_NVIC_EnableIRQ>
}
 8003b5e:	b003      	add	sp, #12
 8003b60:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b64:	4002b000 	.word	0x4002b000

08003b68 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8003b68:	b510      	push	{r4, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b6e:	2214      	movs	r2, #20
 8003b70:	2100      	movs	r1, #0
 8003b72:	a803      	add	r0, sp, #12
 8003b74:	f018 ff76 	bl	801ca64 <memset>
  if(hdsi->Instance==DSI)
 8003b78:	6822      	ldr	r2, [r4, #0]
 8003b7a:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <HAL_DSI_MspInit+0x68>)
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d125      	bne.n	8003bcc <HAL_DSI_MspInit+0x64>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8003b80:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003b84:	a903      	add	r1, sp, #12
 8003b86:	4813      	ldr	r0, [pc, #76]	; (8003bd4 <HAL_DSI_MspInit+0x6c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8003b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b8a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003b8e:	645a      	str	r2, [r3, #68]	; 0x44
 8003b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b92:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003b96:	9201      	str	r2, [sp, #4]
 8003b98:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba0:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba2:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003baa:	9302      	str	r3, [sp, #8]
 8003bac:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8003bb4:	230d      	movs	r3, #13
 8003bb6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003bb8:	f002 fa22 	bl	8006000 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 8003bbc:	2062      	movs	r0, #98	; 0x62
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	2105      	movs	r1, #5
 8003bc2:	f001 fa97 	bl	80050f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8003bc6:	2062      	movs	r0, #98	; 0x62
 8003bc8:	f001 fac6 	bl	8005158 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8003bcc:	b008      	add	sp, #32
 8003bce:	bd10      	pop	{r4, pc}
 8003bd0:	40016c00 	.word	0x40016c00
 8003bd4:	40022400 	.word	0x40022400

08003bd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bda:	b0ad      	sub	sp, #180	; 0xb4
 8003bdc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bde:	2214      	movs	r2, #20
 8003be0:	2100      	movs	r1, #0
 8003be2:	a803      	add	r0, sp, #12
 8003be4:	f018 ff3e 	bl	801ca64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003be8:	2290      	movs	r2, #144	; 0x90
 8003bea:	2100      	movs	r1, #0
 8003bec:	a808      	add	r0, sp, #32
 8003bee:	f018 ff39 	bl	801ca64 <memset>
  if(hi2c->Instance==I2C4)
 8003bf2:	6822      	ldr	r2, [r4, #0]
 8003bf4:	4b25      	ldr	r3, [pc, #148]	; (8003c8c <HAL_I2C_MspInit+0xb4>)
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d146      	bne.n	8003c88 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8003bfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bfe:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8003c00:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c02:	f004 fdd3 	bl	80087ac <HAL_RCCEx_PeriphCLKConfig>
 8003c06:	b108      	cbz	r0, 8003c0c <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8003c08:	f7ff ff58 	bl	8003abc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c0c:	4c20      	ldr	r4, [pc, #128]	; (8003c90 <HAL_I2C_MspInit+0xb8>)
    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c0e:	2712      	movs	r7, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c10:	2601      	movs	r6, #1
 8003c12:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c14:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c16:	a903      	add	r1, sp, #12
 8003c18:	481e      	ldr	r0, [pc, #120]	; (8003c94 <HAL_I2C_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c1a:	f043 0302 	orr.w	r3, r3, #2
 8003c1e:	6323      	str	r3, [r4, #48]	; 0x30
 8003c20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c2c:	f043 0308 	orr.w	r3, r3, #8
 8003c30:	6323      	str	r3, [r4, #48]	; 0x30
 8003c32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	9301      	str	r3, [sp, #4]
 8003c3a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c3c:	2380      	movs	r3, #128	; 0x80
 8003c3e:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8003c42:	230b      	movs	r3, #11
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c44:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8003c48:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c4a:	f002 f9d9 	bl	8006000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003c4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c52:	a903      	add	r1, sp, #12
 8003c54:	4810      	ldr	r0, [pc, #64]	; (8003c98 <HAL_I2C_MspInit+0xc0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c56:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003c5a:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c5c:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003c60:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c62:	f002 f9cd 	bl	8006000 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003c66:	6c23      	ldr	r3, [r4, #64]	; 0x40
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8003c68:	205f      	movs	r0, #95	; 0x5f
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2105      	movs	r1, #5
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c72:	6423      	str	r3, [r4, #64]	; 0x40
 8003c74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c7a:	9302      	str	r3, [sp, #8]
 8003c7c:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8003c7e:	f001 fa39 	bl	80050f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8003c82:	205f      	movs	r0, #95	; 0x5f
 8003c84:	f001 fa68 	bl	8005158 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8003c88:	b02d      	add	sp, #180	; 0xb4
 8003c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c8c:	40006000 	.word	0x40006000
 8003c90:	40023800 	.word	0x40023800
 8003c94:	40020400 	.word	0x40020400
 8003c98:	40020c00 	.word	0x40020c00

08003c9c <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C4)
 8003c9c:	6802      	ldr	r2, [r0, #0]
{
 8003c9e:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C4)
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <HAL_I2C_MspDeInit+0x34>)
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d112      	bne.n	8003ccc <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8003ca6:	4a0b      	ldr	r2, [pc, #44]	; (8003cd4 <HAL_I2C_MspDeInit+0x38>)

    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8003ca8:	2180      	movs	r1, #128	; 0x80
 8003caa:	480b      	ldr	r0, [pc, #44]	; (8003cd8 <HAL_I2C_MspDeInit+0x3c>)
    __HAL_RCC_I2C4_CLK_DISABLE();
 8003cac:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cb2:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8003cb4:	f002 fa88 	bl	80061c8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8003cb8:	4808      	ldr	r0, [pc, #32]	; (8003cdc <HAL_I2C_MspDeInit+0x40>)
 8003cba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cbe:	f002 fa83 	bl	80061c8 <HAL_GPIO_DeInit>

    /* I2C4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8003cc2:	205f      	movs	r0, #95	; 0x5f
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8003cc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8003cc8:	f001 ba54 	b.w	8005174 <HAL_NVIC_DisableIRQ>
}
 8003ccc:	bd08      	pop	{r3, pc}
 8003cce:	bf00      	nop
 8003cd0:	40006000 	.word	0x40006000
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	40020400 	.word	0x40020400
 8003cdc:	40020c00 	.word	0x40020c00

08003ce0 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8003ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 8003ce2:	4b35      	ldr	r3, [pc, #212]	; (8003db8 <HAL_JPEG_MspInit+0xd8>)
{
 8003ce4:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 8003ce6:	6802      	ldr	r2, [r0, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d162      	bne.n	8003db2 <HAL_JPEG_MspInit+0xd2>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8003cec:	4b33      	ldr	r3, [pc, #204]	; (8003dbc <HAL_JPEG_MspInit+0xdc>)
    hdma_jpeg_in.Instance = DMA2_Stream0;
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
    hdma_jpeg_in.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_jpeg_in.Init.MemInc = DMA_MINC_ENABLE;
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003cee:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_jpeg_in.Instance = DMA2_Stream0;
 8003cf2:	4c33      	ldr	r4, [pc, #204]	; (8003dc0 <HAL_JPEG_MspInit+0xe0>)
    hdma_jpeg_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_jpeg_in.Init.Mode = DMA_NORMAL;
    hdma_jpeg_in.Init.Priority = DMA_PRIORITY_LOW;
    hdma_jpeg_in.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_jpeg_in.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003cf4:	2004      	movs	r0, #4
    __HAL_RCC_JPEG_CLK_ENABLE();
 8003cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    hdma_jpeg_in.Init.MemBurst = DMA_MBURST_INC4;
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8003cf8:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
 8003cfc:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8003dcc <HAL_JPEG_MspInit+0xec>
    __HAL_RCC_JPEG_CLK_ENABLE();
 8003d00:	f042 0202 	orr.w	r2, r2, #2
 8003d04:	635a      	str	r2, [r3, #52]	; 0x34
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d06:	2240      	movs	r2, #64	; 0x40
    __HAL_RCC_JPEG_CLK_ENABLE();
 8003d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	9301      	str	r3, [sp, #4]
 8003d10:	9b01      	ldr	r3, [sp, #4]
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
 8003d12:	f04f 5390 	mov.w	r3, #301989888	; 0x12000000
 8003d16:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e9c4 2302 	strd	r2, r3, [r4, #8]
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_jpeg_in.Init.Priority = DMA_PRIORITY_LOW;
 8003d24:	6223      	str	r3, [r4, #32]
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d26:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_jpeg_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_jpeg_in.Init.Mode = DMA_NORMAL;
 8003d2e:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_jpeg_in.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e9c4 0309 	strd	r0, r3, [r4, #36]	; 0x24
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8003d38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_jpeg_in) != HAL_OK)
 8003d3c:	4620      	mov	r0, r4
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8003d3e:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_jpeg_in) != HAL_OK)
 8003d42:	f001 fae9 	bl	8005318 <HAL_DMA_Init>
 8003d46:	b108      	cbz	r0, 8003d4c <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 8003d48:	f7ff feb8 	bl	8003abc <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hdma_jpeg_in);
 8003d4c:	632c      	str	r4, [r5, #48]	; 0x30

    /* JPEG_OUT Init */
    hdma_jpeg_out.Instance = DMA2_Stream1;
    hdma_jpeg_out.Init.Channel = DMA_CHANNEL_9;
 8003d4e:	f04f 5390 	mov.w	r3, #301989888	; 0x12000000
 8003d52:	4a1c      	ldr	r2, [pc, #112]	; (8003dc4 <HAL_JPEG_MspInit+0xe4>)
    hdma_jpeg_out.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_jpeg_out.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_jpeg_out.Init.MemInc = DMA_MINC_ENABLE;
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d54:	f44f 6180 	mov.w	r1, #1024	; 0x400
    __HAL_LINKDMA(hjpeg,hdmain,hdma_jpeg_in);
 8003d58:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_jpeg_out.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_jpeg_out.Init.Mode = DMA_NORMAL;
    hdma_jpeg_out.Init.Priority = DMA_PRIORITY_LOW;
    hdma_jpeg_out.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_jpeg_out.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d5a:	2004      	movs	r0, #4
    hdma_jpeg_out.Instance = DMA2_Stream1;
 8003d5c:	4c1a      	ldr	r4, [pc, #104]	; (8003dc8 <HAL_JPEG_MspInit+0xe8>)
    hdma_jpeg_out.Init.MemBurst = DMA_MBURST_INC4;
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8003d5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    hdma_jpeg_out.Init.Channel = DMA_CHANNEL_9;
 8003d62:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_jpeg_out.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d6a:	2300      	movs	r3, #0
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d6c:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_jpeg_out.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_jpeg_out.Init.Priority = DMA_PRIORITY_LOW;
 8003d74:	6223      	str	r3, [r4, #32]
    hdma_jpeg_out.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d76:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_jpeg_out.Init.Mode = DMA_NORMAL;
 8003d7a:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_jpeg_out.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e9c4 0309 	strd	r0, r3, [r4, #36]	; 0x24
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8003d84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_jpeg_out) != HAL_OK)
 8003d88:	4620      	mov	r0, r4
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8003d8a:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_jpeg_out) != HAL_OK)
 8003d8e:	f001 fac3 	bl	8005318 <HAL_DMA_Init>
 8003d92:	b108      	cbz	r0, 8003d98 <HAL_JPEG_MspInit+0xb8>
    {
      Error_Handler();
 8003d94:	f7ff fe92 	bl	8003abc <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hdma_jpeg_out);
 8003d98:	636c      	str	r4, [r5, #52]	; 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2105      	movs	r1, #5
 8003d9e:	206c      	movs	r0, #108	; 0x6c
    __HAL_LINKDMA(hjpeg,hdmaout,hdma_jpeg_out);
 8003da0:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8003da2:	f001 f9a7 	bl	80050f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8003da6:	206c      	movs	r0, #108	; 0x6c
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8003da8:	b003      	add	sp, #12
 8003daa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8003dae:	f001 b9d3 	b.w	8005158 <HAL_NVIC_EnableIRQ>
}
 8003db2:	b003      	add	sp, #12
 8003db4:	bd30      	pop	{r4, r5, pc}
 8003db6:	bf00      	nop
 8003db8:	50051000 	.word	0x50051000
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	2000ea38 	.word	0x2000ea38
 8003dc4:	40026428 	.word	0x40026428
 8003dc8:	2000ea98 	.word	0x2000ea98
 8003dcc:	40026410 	.word	0x40026410

08003dd0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	b0a6      	sub	sp, #152	; 0x98
 8003dd4:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003dd6:	2290      	movs	r2, #144	; 0x90
 8003dd8:	2100      	movs	r1, #0
 8003dda:	a802      	add	r0, sp, #8
 8003ddc:	f018 fe42 	bl	801ca64 <memset>
  if(hltdc->Instance==LTDC)
 8003de0:	6822      	ldr	r2, [r4, #0]
 8003de2:	4b14      	ldr	r3, [pc, #80]	; (8003e34 <HAL_LTDC_MspInit+0x64>)
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d122      	bne.n	8003e2e <HAL_LTDC_MspInit+0x5e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003de8:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003dea:	2007      	movs	r0, #7
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003dec:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8003dee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003df2:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003df4:	2302      	movs	r3, #2
 8003df6:	e9cd 3008 	strd	r3, r0, [sp, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003dfa:	2301      	movs	r3, #1
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003dfc:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003dfe:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e00:	f004 fcd4 	bl	80087ac <HAL_RCCEx_PeriphCLKConfig>
 8003e04:	b108      	cbz	r0, 8003e0a <HAL_LTDC_MspInit+0x3a>
    {
      Error_Handler();
 8003e06:	f7ff fe59 	bl	8003abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <HAL_LTDC_MspInit+0x68>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8003e0c:	2058      	movs	r0, #88	; 0x58
 8003e0e:	2103      	movs	r1, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e12:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003e16:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8003e18:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e20:	9301      	str	r3, [sp, #4]
 8003e22:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8003e24:	f001 f966 	bl	80050f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003e28:	2058      	movs	r0, #88	; 0x58
 8003e2a:	f001 f995 	bl	8005158 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003e2e:	b026      	add	sp, #152	; 0x98
 8003e30:	bd10      	pop	{r4, pc}
 8003e32:	bf00      	nop
 8003e34:	40016800 	.word	0x40016800
 8003e38:	40023800 	.word	0x40023800

08003e3c <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e3c:	2214      	movs	r2, #20
 8003e3e:	2100      	movs	r1, #0
{
 8003e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e44:	b08a      	sub	sp, #40	; 0x28
 8003e46:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e48:	eb0d 0002 	add.w	r0, sp, r2
 8003e4c:	f018 fe0a 	bl	801ca64 <memset>
  if(hqspi->Instance==QUADSPI)
 8003e50:	6822      	ldr	r2, [r4, #0]
 8003e52:	4b3a      	ldr	r3, [pc, #232]	; (8003f3c <HAL_QSPI_MspInit+0x100>)
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d16e      	bne.n	8003f36 <HAL_QSPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

    __HAL_RCC_QSPI_FORCE_RESET();
 8003e58:	4b39      	ldr	r3, [pc, #228]	; (8003f40 <HAL_QSPI_MspInit+0x104>)
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e5a:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003e5c:	2403      	movs	r4, #3
 8003e5e:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_FORCE_RESET();
 8003e60:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e62:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e66:	a905      	add	r1, sp, #20
 8003e68:	4836      	ldr	r0, [pc, #216]	; (8003f44 <HAL_QSPI_MspInit+0x108>)
    __HAL_RCC_QSPI_FORCE_RESET();
 8003e6a:	f042 0202 	orr.w	r2, r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6e:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_FORCE_RESET();
 8003e70:	619a      	str	r2, [r3, #24]
    __HAL_RCC_QSPI_RELEASE_RESET();
 8003e72:	699a      	ldr	r2, [r3, #24]
 8003e74:	f022 0202 	bic.w	r2, r2, #2
 8003e78:	619a      	str	r2, [r3, #24]
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003e7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e7c:	f042 0202 	orr.w	r2, r2, #2
 8003e80:	639a      	str	r2, [r3, #56]	; 0x38
 8003e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e84:	f002 0202 	and.w	r2, r2, #2
 8003e88:	9200      	str	r2, [sp, #0]
 8003e8a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e8e:	f042 0210 	orr.w	r2, r2, #16
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30
 8003e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e96:	f002 0210 	and.w	r2, r2, #16
 8003e9a:	9201      	str	r2, [sp, #4]
 8003e9c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea0:	f042 0202 	orr.w	r2, r2, #2
 8003ea4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea8:	f002 0202 	and.w	r2, r2, #2
 8003eac:	9202      	str	r2, [sp, #8]
 8003eae:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb2:	f042 0204 	orr.w	r2, r2, #4
 8003eb6:	631a      	str	r2, [r3, #48]	; 0x30
 8003eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eba:	f002 0204 	and.w	r2, r2, #4
 8003ebe:	9203      	str	r2, [sp, #12]
 8003ec0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ec4:	f042 0208 	orr.w	r2, r2, #8
 8003ec8:	631a      	str	r2, [r3, #48]	; 0x30
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	9304      	str	r3, [sp, #16]
 8003ed2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed4:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003ed8:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003edc:	f002 f890 	bl	8006000 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003ee0:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ee2:	a905      	add	r1, sp, #20
 8003ee4:	4818      	ldr	r0, [pc, #96]	; (8003f48 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee6:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003eea:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eec:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003ef0:	230a      	movs	r3, #10
 8003ef2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ef4:	f002 f884 	bl	8006000 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8003ef8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003efc:	a905      	add	r1, sp, #20
 8003efe:	4813      	ldr	r0, [pc, #76]	; (8003f4c <HAL_QSPI_MspInit+0x110>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003f00:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f02:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f06:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f0a:	f002 f879 	bl	8006000 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f0e:	a905      	add	r1, sp, #20
 8003f10:	480d      	ldr	r0, [pc, #52]	; (8003f48 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003f12:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f14:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f18:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f1c:	f002 f870 	bl	8006000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003f20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f24:	a905      	add	r1, sp, #20
 8003f26:	480a      	ldr	r0, [pc, #40]	; (8003f50 <HAL_QSPI_MspInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003f28:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f2a:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f2e:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f32:	f002 f865 	bl	8006000 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003f36:	b00a      	add	sp, #40	; 0x28
 8003f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f3c:	a0001000 	.word	0xa0001000
 8003f40:	40023800 	.word	0x40023800
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40020400 	.word	0x40020400
 8003f4c:	40020800 	.word	0x40020800
 8003f50:	40020c00 	.word	0x40020c00

08003f54 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003f54:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003f56:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003f58:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003f5a:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 8003f5c:	4b2a      	ldr	r3, [pc, #168]	; (8004008 <HAL_SDRAM_MspInit+0xb4>)
 8003f5e:	681e      	ldr	r6, [r3, #0]
 8003f60:	2e00      	cmp	r6, #0
 8003f62:	d14f      	bne.n	8004004 <HAL_SDRAM_MspInit+0xb0>
  FMC_Initialized = 1;
 8003f64:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f66:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f68:	2503      	movs	r5, #3
 8003f6a:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 8003f6c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f6e:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8003f70:	4b26      	ldr	r3, [pc, #152]	; (800400c <HAL_SDRAM_MspInit+0xb8>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f72:	4827      	ldr	r0, [pc, #156]	; (8004010 <HAL_SDRAM_MspInit+0xbc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8003f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	639a      	str	r2, [r3, #56]	; 0x38
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f86:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f8a:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f8e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f92:	f002 f835 	bl	8006000 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8003f96:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f9a:	a901      	add	r1, sp, #4
 8003f9c:	481d      	ldr	r0, [pc, #116]	; (8004014 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f9e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fa4:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003fa8:	f002 f82a 	bl	8006000 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8003fac:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fb0:	a901      	add	r1, sp, #4
 8003fb2:	4819      	ldr	r0, [pc, #100]	; (8004018 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003fb4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fba:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fbe:	f002 f81f 	bl	8006000 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 8003fc2:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003fc6:	a901      	add	r1, sp, #4
 8003fc8:	4814      	ldr	r0, [pc, #80]	; (800401c <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003fca:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fcc:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fd0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003fd4:	f002 f814 	bl	8006000 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003fd8:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003fdc:	a901      	add	r1, sp, #4
 8003fde:	4810      	ldr	r0, [pc, #64]	; (8004020 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003fe0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe6:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003fea:	f002 f809 	bl	8006000 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 8003fee:	f64f 732c 	movw	r3, #65324	; 0xff2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003ff2:	a901      	add	r1, sp, #4
 8003ff4:	480b      	ldr	r0, [pc, #44]	; (8004024 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003ff6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff8:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ffc:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004000:	f001 fffe 	bl	8006000 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004004:	b007      	add	sp, #28
 8004006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004008:	2000ecec 	.word	0x2000ecec
 800400c:	40023800 	.word	0x40023800
 8004010:	40021000 	.word	0x40021000
 8004014:	40021800 	.word	0x40021800
 8004018:	40020c00 	.word	0x40020c00
 800401c:	40022000 	.word	0x40022000
 8004020:	40021400 	.word	0x40021400
 8004024:	40021c00 	.word	0x40021c00

08004028 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004028:	4b21      	ldr	r3, [pc, #132]	; (80040b0 <HAL_InitTick+0x88>)
 800402a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800402c:	f042 0210 	orr.w	r2, r2, #16
{
 8004030:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004032:	641a      	str	r2, [r3, #64]	; 0x40
{
 8004034:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
 8004038:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800403a:	a901      	add	r1, sp, #4
 800403c:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800403e:	f003 0310 	and.w	r3, r3, #16
 8004042:	9302      	str	r3, [sp, #8]
 8004044:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004046:	f004 fb93 	bl	8008770 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800404a:	9b06      	ldr	r3, [sp, #24]
 800404c:	bb4b      	cbnz	r3, 80040a2 <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800404e:	f004 fb7f 	bl	8008750 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004052:	4e18      	ldr	r6, [pc, #96]	; (80040b4 <HAL_InitTick+0x8c>)
 8004054:	4b18      	ldr	r3, [pc, #96]	; (80040b8 <HAL_InitTick+0x90>)
 8004056:	6033      	str	r3, [r6, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004058:	f240 33e7 	movw	r3, #999	; 0x3e7
 800405c:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800405e:	4b17      	ldr	r3, [pc, #92]	; (80040bc <HAL_InitTick+0x94>)
 8004060:	fbb0 f3f3 	udiv	r3, r0, r3
 8004064:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 8004066:	4630      	mov	r0, r6
  htim6.Init.Prescaler = uwPrescalerValue;
 8004068:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800406e:	60b3      	str	r3, [r6, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004070:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim6);
 8004072:	f004 fff7 	bl	8009064 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8004076:	4604      	mov	r4, r0
 8004078:	b980      	cbnz	r0, 800409c <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800407a:	4630      	mov	r0, r6
 800407c:	f004 fe9a 	bl	8008db4 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8004080:	4604      	mov	r4, r0
 8004082:	b958      	cbnz	r0, 800409c <HAL_InitTick+0x74>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004084:	2036      	movs	r0, #54	; 0x36
 8004086:	f001 f867 	bl	8005158 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800408a:	2d0f      	cmp	r5, #15
 800408c:	d80d      	bhi.n	80040aa <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800408e:	4622      	mov	r2, r4
 8004090:	4629      	mov	r1, r5
 8004092:	2036      	movs	r0, #54	; 0x36
 8004094:	f001 f82e 	bl	80050f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004098:	4b09      	ldr	r3, [pc, #36]	; (80040c0 <HAL_InitTick+0x98>)
 800409a:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 800409c:	4620      	mov	r0, r4
 800409e:	b008      	add	sp, #32
 80040a0:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80040a2:	f004 fb55 	bl	8008750 <HAL_RCC_GetPCLK1Freq>
 80040a6:	0040      	lsls	r0, r0, #1
 80040a8:	e7d3      	b.n	8004052 <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 80040aa:	2401      	movs	r4, #1
 80040ac:	e7f6      	b.n	800409c <HAL_InitTick+0x74>
 80040ae:	bf00      	nop
 80040b0:	40023800 	.word	0x40023800
 80040b4:	2000ecf0 	.word	0x2000ecf0
 80040b8:	40001000 	.word	0x40001000
 80040bc:	000f4240 	.word	0x000f4240
 80040c0:	20000068 	.word	0x20000068

080040c4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80040c4:	4770      	bx	lr

080040c6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040c6:	e7fe      	b.n	80040c6 <HardFault_Handler>

080040c8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040c8:	e7fe      	b.n	80040c8 <MemManage_Handler>

080040ca <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040ca:	e7fe      	b.n	80040ca <BusFault_Handler>

080040cc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040cc:	e7fe      	b.n	80040cc <UsageFault_Handler>

080040ce <DebugMon_Handler>:
 80040ce:	4770      	bx	lr

080040d0 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80040d0:	4801      	ldr	r0, [pc, #4]	; (80040d8 <TIM6_DAC_IRQHandler+0x8>)
 80040d2:	f004 beb1 	b.w	8008e38 <HAL_TIM_IRQHandler>
 80040d6:	bf00      	nop
 80040d8:	2000ecf0 	.word	0x2000ecf0

080040dc <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_in);
 80040dc:	4801      	ldr	r0, [pc, #4]	; (80040e4 <DMA2_Stream0_IRQHandler+0x8>)
 80040de:	f001 b9eb 	b.w	80054b8 <HAL_DMA_IRQHandler>
 80040e2:	bf00      	nop
 80040e4:	2000ea38 	.word	0x2000ea38

080040e8 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_out);
 80040e8:	4801      	ldr	r0, [pc, #4]	; (80040f0 <DMA2_Stream1_IRQHandler+0x8>)
 80040ea:	f001 b9e5 	b.w	80054b8 <HAL_DMA_IRQHandler>
 80040ee:	bf00      	nop
 80040f0:	2000ea98 	.word	0x2000ea98

080040f4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80040f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */
  int now = HAL_GetTick();
 80040f6:	f000 ffd3 	bl	80050a0 <HAL_GetTick>
  diff = last - now;
 80040fa:	4a05      	ldr	r2, [pc, #20]	; (8004110 <LTDC_IRQHandler+0x1c>)
 80040fc:	4905      	ldr	r1, [pc, #20]	; (8004114 <LTDC_IRQHandler+0x20>)
 80040fe:	6813      	ldr	r3, [r2, #0]
 8004100:	1a1b      	subs	r3, r3, r0
 8004102:	600b      	str	r3, [r1, #0]
  last = now;
 8004104:	6010      	str	r0, [r2, #0]
  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004106:	4804      	ldr	r0, [pc, #16]	; (8004118 <LTDC_IRQHandler+0x24>)
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004108:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_LTDC_IRQHandler(&hltdc);
 800410c:	f003 bcd5 	b.w	8007aba <HAL_LTDC_IRQHandler>
 8004110:	2000ed40 	.word	0x2000ed40
 8004114:	2000ed3c 	.word	0x2000ed3c
 8004118:	2000ebc0 	.word	0x2000ebc0

0800411c <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800411c:	4801      	ldr	r0, [pc, #4]	; (8004124 <DMA2D_IRQHandler+0x8>)
 800411e:	f001 bac3 	b.w	80056a8 <HAL_DMA2D_IRQHandler>
 8004122:	bf00      	nop
 8004124:	2000e9e0 	.word	0x2000e9e0

08004128 <I2C4_EV_IRQHandler>:
void I2C4_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8004128:	4801      	ldr	r0, [pc, #4]	; (8004130 <I2C4_EV_IRQHandler+0x8>)
 800412a:	f002 bc41 	b.w	80069b0 <HAL_I2C_EV_IRQHandler>
 800412e:	bf00      	nop
 8004130:	2000eb14 	.word	0x2000eb14

08004134 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8004134:	4801      	ldr	r0, [pc, #4]	; (800413c <DSI_IRQHandler+0x8>)
 8004136:	f001 bcca 	b.w	8005ace <HAL_DSI_IRQHandler>
 800413a:	bf00      	nop
 800413c:	2000eaf8 	.word	0x2000eaf8

08004140 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8004140:	4801      	ldr	r0, [pc, #4]	; (8004148 <JPEG_IRQHandler+0x8>)
 8004142:	f003 bb67 	b.w	8007814 <HAL_JPEG_IRQHandler>
 8004146:	bf00      	nop
 8004148:	2000eb68 	.word	0x2000eb68

0800414c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800414c:	2001      	movs	r0, #1
 800414e:	4770      	bx	lr

08004150 <_kill>:

int _kill(int pid, int sig)
{
 8004150:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004152:	f018 fc29 	bl	801c9a8 <__errno>
 8004156:	2316      	movs	r3, #22
 8004158:	6003      	str	r3, [r0, #0]
	return -1;
}
 800415a:	f04f 30ff 	mov.w	r0, #4294967295
 800415e:	bd08      	pop	{r3, pc}

08004160 <_exit>:

void _exit (int status)
{
 8004160:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004162:	f018 fc21 	bl	801c9a8 <__errno>
 8004166:	2316      	movs	r3, #22
 8004168:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800416a:	e7fe      	b.n	800416a <_exit+0xa>

0800416c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800416c:	b570      	push	{r4, r5, r6, lr}
 800416e:	460d      	mov	r5, r1
 8004170:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004172:	460e      	mov	r6, r1
 8004174:	1b73      	subs	r3, r6, r5
 8004176:	429c      	cmp	r4, r3
 8004178:	dc01      	bgt.n	800417e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800417a:	4620      	mov	r0, r4
 800417c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800417e:	f3af 8000 	nop.w
 8004182:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004186:	e7f5      	b.n	8004174 <_read+0x8>

08004188 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004188:	b570      	push	{r4, r5, r6, lr}
 800418a:	460d      	mov	r5, r1
 800418c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800418e:	460e      	mov	r6, r1
 8004190:	1b73      	subs	r3, r6, r5
 8004192:	429c      	cmp	r4, r3
 8004194:	dc01      	bgt.n	800419a <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8004196:	4620      	mov	r0, r4
 8004198:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800419a:	f816 0b01 	ldrb.w	r0, [r6], #1
 800419e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041a2:	e7f5      	b.n	8004190 <_write+0x8>

080041a4 <_close>:

int _close(int file)
{
	return -1;
}
 80041a4:	f04f 30ff 	mov.w	r0, #4294967295
 80041a8:	4770      	bx	lr

080041aa <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80041aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80041ae:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80041b0:	604b      	str	r3, [r1, #4]
}
 80041b2:	4770      	bx	lr

080041b4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80041b4:	2001      	movs	r0, #1
 80041b6:	4770      	bx	lr

080041b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80041b8:	2000      	movs	r0, #0
 80041ba:	4770      	bx	lr

080041bc <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80041bc:	4a0a      	ldr	r2, [pc, #40]	; (80041e8 <_sbrk+0x2c>)
 80041be:	6811      	ldr	r1, [r2, #0]
{
 80041c0:	b508      	push	{r3, lr}
 80041c2:	4603      	mov	r3, r0
	if (heap_end == 0)
 80041c4:	b909      	cbnz	r1, 80041ca <_sbrk+0xe>
		heap_end = &end;
 80041c6:	4909      	ldr	r1, [pc, #36]	; (80041ec <_sbrk+0x30>)
 80041c8:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 80041ca:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80041cc:	4669      	mov	r1, sp
 80041ce:	4403      	add	r3, r0
 80041d0:	428b      	cmp	r3, r1
 80041d2:	d906      	bls.n	80041e2 <_sbrk+0x26>
	{
		errno = ENOMEM;
 80041d4:	f018 fbe8 	bl	801c9a8 <__errno>
 80041d8:	230c      	movs	r3, #12
 80041da:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80041dc:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80041e0:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80041e2:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 80041e4:	e7fc      	b.n	80041e0 <_sbrk+0x24>
 80041e6:	bf00      	nop
 80041e8:	2000ed44 	.word	0x2000ed44
 80041ec:	200246c0 	.word	0x200246c0

080041f0 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80041f0:	4770      	bx	lr

080041f2 <_ZN23ApplicationFontProviderD0Ev>:
 80041f2:	b510      	push	{r4, lr}
 80041f4:	4604      	mov	r4, r0
 80041f6:	2104      	movs	r1, #4
 80041f8:	f018 fb76 	bl	801c8e8 <_ZdlPvj>
 80041fc:	4620      	mov	r0, r4
 80041fe:	bd10      	pop	{r4, pc}

08004200 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8004200:	2901      	cmp	r1, #1
{
 8004202:	b508      	push	{r3, lr}
    switch (typography)
 8004204:	d006      	beq.n	8004214 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8004206:	2902      	cmp	r1, #2
 8004208:	d008      	beq.n	800421c <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 800420a:	b959      	cbnz	r1, 8004224 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800420c:	f000 fbc4 	bl	8004998 <_ZN17TypedTextDatabase8getFontsEv>
 8004210:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8004212:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8004214:	f000 fbc0 	bl	8004998 <_ZN17TypedTextDatabase8getFontsEv>
 8004218:	6840      	ldr	r0, [r0, #4]
 800421a:	e7fa      	b.n	8004212 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800421c:	f000 fbbc 	bl	8004998 <_ZN17TypedTextDatabase8getFontsEv>
 8004220:	6880      	ldr	r0, [r0, #8]
 8004222:	e7f6      	b.n	8004212 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8004224:	2000      	movs	r0, #0
 8004226:	e7f4      	b.n	8004212 <_ZN23ApplicationFontProvider7getFontEt+0x12>

08004228 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8004228:	4800      	ldr	r0, [pc, #0]	; (800422c <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 800422a:	4770      	bx	lr
 800422c:	0801f88c 	.word	0x0801f88c

08004230 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8004230:	2002      	movs	r0, #2
 8004232:	4770      	bx	lr

08004234 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8004234:	b513      	push	{r0, r1, r4, lr}
 8004236:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8004238:	b151      	cbz	r1, 8004250 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800423a:	6803      	ldr	r3, [r0, #0]
 800423c:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 800423e:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8004240:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8004244:	689c      	ldr	r4, [r3, #8]
 8004246:	f10d 0303 	add.w	r3, sp, #3
 800424a:	47a0      	blx	r4
        return glyph;
    }
 800424c:	b002      	add	sp, #8
 800424e:	bd10      	pop	{r4, pc}
            return 0;
 8004250:	4608      	mov	r0, r1
 8004252:	e7fb      	b.n	800424c <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08004254 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8004254:	89c0      	ldrh	r0, [r0, #14]
 8004256:	4770      	bx	lr

08004258 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8004258:	8a00      	ldrh	r0, [r0, #16]
 800425a:	4770      	bx	lr

0800425c <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 800425c:	88c0      	ldrh	r0, [r0, #6]
 800425e:	4770      	bx	lr

08004260 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8004260:	8880      	ldrh	r0, [r0, #4]
 8004262:	4770      	bx	lr

08004264 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8004264:	7a80      	ldrb	r0, [r0, #10]
    }
 8004266:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800426a:	4770      	bx	lr

0800426c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 800426c:	7a80      	ldrb	r0, [r0, #10]
    }
 800426e:	09c0      	lsrs	r0, r0, #7
 8004270:	4770      	bx	lr

08004272 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8004272:	4770      	bx	lr

08004274 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8004274:	4770      	bx	lr

08004276 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8004276:	f500 7398 	add.w	r3, r0, #304	; 0x130
 800427a:	6808      	ldr	r0, [r1, #0]
 800427c:	6849      	ldr	r1, [r1, #4]
 800427e:	c303      	stmia	r3!, {r0, r1}
    }
 8004280:	4770      	bx	lr

08004282 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8004282:	4770      	bx	lr

08004284 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8004284:	4770      	bx	lr

08004286 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8004286:	6041      	str	r1, [r0, #4]
    }
 8004288:	4770      	bx	lr

0800428a <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800428a:	4770      	bx	lr

0800428c <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800428c:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 800428e:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8004292:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8004296:	2300      	movs	r3, #0
 8004298:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 800429c:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 80042a0:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	0800434d 	.word	0x0800434d

080042ac <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80042ac:	2301      	movs	r3, #1
 80042ae:	7203      	strb	r3, [r0, #8]
    }
 80042b0:	4770      	bx	lr

080042b2 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80042b2:	4770      	bx	lr

080042b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 80042b4:	4770      	bx	lr

080042b6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80042b6:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 80042b8:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 80042ba:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 80042bc:	68c2      	ldr	r2, [r0, #12]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	1054      	asrs	r4, r2, #1
 80042c2:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80042c6:	07d2      	lsls	r2, r2, #31
 80042c8:	bf48      	it	mi
 80042ca:	590a      	ldrmi	r2, [r1, r4]
    }
 80042cc:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 80042d0:	bf48      	it	mi
 80042d2:	58d3      	ldrmi	r3, [r2, r3]
 80042d4:	4718      	bx	r3

080042d6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 80042d6:	6843      	ldr	r3, [r0, #4]
 80042d8:	b12b      	cbz	r3, 80042e6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 80042da:	6883      	ldr	r3, [r0, #8]
 80042dc:	b92b      	cbnz	r3, 80042ea <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 80042de:	68c0      	ldr	r0, [r0, #12]
 80042e0:	f000 0001 	and.w	r0, r0, #1
 80042e4:	4770      	bx	lr
 80042e6:	4618      	mov	r0, r3
 80042e8:	4770      	bx	lr
 80042ea:	2001      	movs	r0, #1
    }
 80042ec:	4770      	bx	lr

080042ee <_ZN8touchgfx12NoTransitionD0Ev>:
 80042ee:	b510      	push	{r4, lr}
 80042f0:	4604      	mov	r4, r0
 80042f2:	210c      	movs	r1, #12
 80042f4:	f018 faf8 	bl	801c8e8 <_ZdlPvj>
 80042f8:	4620      	mov	r0, r4
 80042fa:	bd10      	pop	{r4, pc}

080042fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80042fc:	b510      	push	{r4, lr}
 80042fe:	4604      	mov	r4, r0
 8004300:	2110      	movs	r1, #16
 8004302:	f018 faf1 	bl	801c8e8 <_ZdlPvj>
 8004306:	4620      	mov	r0, r4
 8004308:	bd10      	pop	{r4, pc}

0800430a <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 800430a:	b510      	push	{r4, lr}
 800430c:	4604      	mov	r4, r0
 800430e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8004312:	f018 fae9 	bl	801c8e8 <_ZdlPvj>
 8004316:	4620      	mov	r0, r4
 8004318:	bd10      	pop	{r4, pc}

0800431a <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 800431a:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 800431c:	f00a f896 	bl	800e44c <_ZN8touchgfx11Application11getInstanceEv>
    }
 8004320:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 8004324:	f00a bcdc 	b.w	800ece0 <_ZN8touchgfx11Application10invalidateEv>

08004328 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8004328:	b510      	push	{r4, lr}
 800432a:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800432c:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8004330:	b158      	cbz	r0, 800434a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8004332:	6803      	ldr	r3, [r0, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	4798      	blx	r3
 8004338:	b138      	cbz	r0, 800434a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800433a:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 800433e:	6803      	ldr	r3, [r0, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 800434a:	bd10      	pop	{r4, pc}

0800434c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800434c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004350:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 8004354:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004356:	68a8      	ldr	r0, [r5, #8]
 8004358:	6803      	ldr	r3, [r0, #0]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	4798      	blx	r3
 800435e:	289f      	cmp	r0, #159	; 0x9f
 8004360:	d805      	bhi.n	800436e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x22>
 8004362:	4b46      	ldr	r3, [pc, #280]	; (800447c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8004364:	21a3      	movs	r1, #163	; 0xa3
 8004366:	4a46      	ldr	r2, [pc, #280]	; (8004480 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004368:	4846      	ldr	r0, [pc, #280]	; (8004484 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 800436a:	f018 faeb 	bl	801c944 <__assert_func>
 800436e:	6868      	ldr	r0, [r5, #4]
 8004370:	6803      	ldr	r3, [r0, #0]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	4798      	blx	r3
 8004376:	280f      	cmp	r0, #15
 8004378:	d803      	bhi.n	8004382 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x36>
 800437a:	4b43      	ldr	r3, [pc, #268]	; (8004488 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 800437c:	21a4      	movs	r1, #164	; 0xa4
 800437e:	4a40      	ldr	r2, [pc, #256]	; (8004480 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8004380:	e7f2      	b.n	8004368 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004382:	68e8      	ldr	r0, [r5, #12]
 8004384:	6803      	ldr	r3, [r0, #0]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	4798      	blx	r3
 800438a:	280b      	cmp	r0, #11
 800438c:	d803      	bhi.n	8004396 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4a>
 800438e:	4b3f      	ldr	r3, [pc, #252]	; (800448c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8004390:	21a5      	movs	r1, #165	; 0xa5
 8004392:	4a3b      	ldr	r2, [pc, #236]	; (8004480 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8004394:	e7e8      	b.n	8004368 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    if (*currentTrans)
 8004396:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8004494 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
    Application::getInstance()->clearAllTimerWidgets();
 800439a:	f00a f857 	bl	800e44c <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 800439e:	3004      	adds	r0, #4
 80043a0:	f00a f879 	bl	800e496 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80043a4:	f8d9 0000 	ldr.w	r0, [r9]
 80043a8:	b110      	cbz	r0, 80043b0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 80043aa:	6803      	ldr	r3, [r0, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	4798      	blx	r3
    if (*currentTrans)
 80043b0:	f8d9 0000 	ldr.w	r0, [r9]
 80043b4:	b110      	cbz	r0, 80043bc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 80043b6:	6803      	ldr	r3, [r0, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4798      	blx	r3
    if (*currentScreen)
 80043bc:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8004498 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>
 80043c0:	f8d8 0000 	ldr.w	r0, [r8]
 80043c4:	b110      	cbz	r0, 80043cc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 80043c6:	6803      	ldr	r3, [r0, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	4798      	blx	r3
    if (*currentPresenter)
 80043cc:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80043d0:	b110      	cbz	r0, 80043d8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 80043d2:	6803      	ldr	r3, [r0, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4798      	blx	r3
    if (*currentScreen)
 80043d8:	f8d8 0000 	ldr.w	r0, [r8]
 80043dc:	b110      	cbz	r0, 80043e4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 80043de:	6803      	ldr	r3, [r0, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4798      	blx	r3
    if (*currentPresenter)
 80043e4:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80043e8:	b110      	cbz	r0, 80043f0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 80043ea:	6803      	ldr	r3, [r0, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80043f0:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80043f2:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 80043f4:	f04f 0b00 	mov.w	fp, #0
 80043f8:	6803      	ldr	r3, [r0, #0]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	4798      	blx	r3
 80043fe:	4b24      	ldr	r3, [pc, #144]	; (8004490 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 8004400:	4604      	mov	r4, r0
 8004402:	f8c0 b004 	str.w	fp, [r0, #4]
 8004406:	6003      	str	r3, [r0, #0]
 8004408:	4659      	mov	r1, fp
 800440a:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800440e:	68a8      	ldr	r0, [r5, #8]
 8004410:	6803      	ldr	r3, [r0, #0]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	4798      	blx	r3
 8004416:	4606      	mov	r6, r0
 8004418:	f000 fb24 	bl	8004a64 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800441c:	6868      	ldr	r0, [r5, #4]
 800441e:	4659      	mov	r1, fp
 8004420:	6803      	ldr	r3, [r0, #0]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	4798      	blx	r3
 8004426:	4605      	mov	r5, r0
 8004428:	4631      	mov	r1, r6
 800442a:	f000 faf7 	bl	8004a1c <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 800442e:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8004432:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 8004436:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 800443a:	b1e5      	cbz	r5, 8004476 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12a>
 800443c:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 800443e:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8004442:	4630      	mov	r0, r6
 8004444:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8004446:	f8c5 a008 	str.w	sl, [r5, #8]
 800444a:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 800444c:	63f5      	str	r5, [r6, #60]	; 0x3c
 800444e:	4798      	blx	r3
    newPresenter->activate();
 8004450:	682b      	ldr	r3, [r5, #0]
 8004452:	4628      	mov	r0, r5
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004458:	4621      	mov	r1, r4
 800445a:	4630      	mov	r0, r6
 800445c:	f00b fc8e 	bl	800fd7c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	4620      	mov	r0, r4
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	4798      	blx	r3
    newTransition->invalidate();
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	4620      	mov	r0, r4
 800446c:	695b      	ldr	r3, [r3, #20]
}
 800446e:	b001      	add	sp, #4
 8004470:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004474:	4718      	bx	r3
    model->bind(newPresenter);
 8004476:	462b      	mov	r3, r5
 8004478:	e7e1      	b.n	800443e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf2>
 800447a:	bf00      	nop
 800447c:	0801f8b4 	.word	0x0801f8b4
 8004480:	0801f942 	.word	0x0801f942
 8004484:	0801fa46 	.word	0x0801fa46
 8004488:	0801fa8d 	.word	0x0801fa8d
 800448c:	0801fb30 	.word	0x0801fb30
 8004490:	0801fc40 	.word	0x0801fc40
 8004494:	20024458 	.word	0x20024458
 8004498:	20024454 	.word	0x20024454

0800449c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800449c:	b570      	push	{r4, r5, r6, lr}
 800449e:	4604      	mov	r4, r0
 80044a0:	460d      	mov	r5, r1
 80044a2:	4616      	mov	r6, r2
          pendingScreenTransitionCallback(0)
 80044a4:	f00a f898 	bl	800e5d8 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80044a8:	4b0e      	ldr	r3, [pc, #56]	; (80044e4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>)
          pendingScreenTransitionCallback(0)
 80044aa:	2100      	movs	r1, #0
        instance = this;
 80044ac:	601c      	str	r4, [r3, #0]
      model(m)
 80044ae:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x4c>)
 80044b0:	e9c4 6555 	strd	r6, r5, [r4, #340]	; 0x154
        return instance;
 80044b4:	4d0d      	ldr	r5, [pc, #52]	; (80044ec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
 80044b6:	6023      	str	r3, [r4, #0]
 80044b8:	6828      	ldr	r0, [r5, #0]
        : pobject(0), pmemfun(0)
 80044ba:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 80044bc:	e9c4 1153 	strd	r1, r1, [r4, #332]	; 0x14c
 80044c0:	e9c4 3151 	strd	r3, r1, [r4, #324]	; 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80044c4:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80044c6:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	4798      	blx	r3
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80044ce:	682b      	ldr	r3, [r5, #0]
 80044d0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80044d4:	b10a      	cbz	r2, 80044da <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x3e>
 80044d6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80044d8:	b900      	cbnz	r0, 80044dc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x40>
        return instance->lcdRef;
 80044da:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80044dc:	f011 fae1 	bl	8015aa2 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 80044e0:	4620      	mov	r0, r4
 80044e2:	bd70      	pop	{r4, r5, r6, pc}
 80044e4:	20024464 	.word	0x20024464
 80044e8:	0801fbf4 	.word	0x0801fbf4
 80044ec:	20024418 	.word	0x20024418
 80044f0:	0801fbdc 	.word	0x0801fbdc

080044f4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80044f4:	4b06      	ldr	r3, [pc, #24]	; (8004510 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 80044f6:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 80044fa:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 80044fe:	2300      	movs	r3, #0
 8004500:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8004504:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8004508:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	0800434d 	.word	0x0800434d

08004514 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8004514:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004516:	4770      	bx	lr

08004518 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8004518:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800451a:	4770      	bx	lr

0800451c <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 800451c:	4770      	bx	lr

0800451e <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800451e:	888b      	ldrh	r3, [r1, #4]
 8004520:	69c0      	ldr	r0, [r0, #28]
 8004522:	0adb      	lsrs	r3, r3, #11
 8004524:	680a      	ldr	r2, [r1, #0]
 8004526:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 800452a:	4410      	add	r0, r2
 800452c:	4770      	bx	lr

0800452e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800452e:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8004530:	b1c2      	cbz	r2, 8004564 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8004532:	7b13      	ldrb	r3, [r2, #12]
 8004534:	b1b3      	cbz	r3, 8004564 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8004536:	7b54      	ldrb	r4, [r2, #13]
 8004538:	7ad2      	ldrb	r2, [r2, #11]
 800453a:	0224      	lsls	r4, r4, #8
 800453c:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8004540:	4314      	orrs	r4, r2
 8004542:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004544:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8004546:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 800454a:	8813      	ldrh	r3, [r2, #0]
 800454c:	428b      	cmp	r3, r1
 800454e:	d102      	bne.n	8004556 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8004550:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8004554:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8004556:	d805      	bhi.n	8004564 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004558:	3801      	subs	r0, #1
 800455a:	3204      	adds	r2, #4
 800455c:	b280      	uxth	r0, r0
 800455e:	2800      	cmp	r0, #0
 8004560:	d1f3      	bne.n	800454a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8004562:	e7f7      	b.n	8004554 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8004564:	2000      	movs	r0, #0
 8004566:	e7f5      	b.n	8004554 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08004568 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8004568:	b510      	push	{r4, lr}
 800456a:	4604      	mov	r4, r0
 800456c:	212c      	movs	r1, #44	; 0x2c
 800456e:	f018 f9bb 	bl	801c8e8 <_ZdlPvj>
 8004572:	4620      	mov	r0, r4
 8004574:	bd10      	pop	{r4, pc}
	...

08004578 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8004578:	b530      	push	{r4, r5, lr}
 800457a:	b08b      	sub	sp, #44	; 0x2c
 800457c:	4604      	mov	r4, r0
      arabicTable(formsTable)
 800457e:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 8004582:	9508      	str	r5, [sp, #32]
 8004584:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 8004588:	9507      	str	r5, [sp, #28]
 800458a:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800458e:	9506      	str	r5, [sp, #24]
 8004590:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8004594:	9505      	str	r5, [sp, #20]
 8004596:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800459a:	9504      	str	r5, [sp, #16]
 800459c:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80045a0:	9503      	str	r5, [sp, #12]
 80045a2:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80045a6:	9502      	str	r5, [sp, #8]
 80045a8:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80045ac:	9501      	str	r5, [sp, #4]
 80045ae:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80045b2:	9500      	str	r5, [sp, #0]
 80045b4:	f00b f83c 	bl	800f630 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 80045b8:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 80045ba:	4620      	mov	r0, r4
      arabicTable(formsTable)
 80045bc:	6023      	str	r3, [r4, #0]
 80045be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80045c0:	61e3      	str	r3, [r4, #28]
 80045c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80045c4:	6223      	str	r3, [r4, #32]
 80045c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80045c8:	6263      	str	r3, [r4, #36]	; 0x24
 80045ca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80045cc:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80045ce:	b00b      	add	sp, #44	; 0x2c
 80045d0:	bd30      	pop	{r4, r5, pc}
 80045d2:	bf00      	nop
 80045d4:	0801fc64 	.word	0x0801fc64

080045d8 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80045d8:	4770      	bx	lr

080045da <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80045da:	4770      	bx	lr

080045dc <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80045dc:	4770      	bx	lr

080045de <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80045de:	4770      	bx	lr

080045e0 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80045e0:	4770      	bx	lr

080045e2 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 80045e2:	4770      	bx	lr

080045e4 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 80045e4:	4770      	bx	lr

080045e6 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80045e6:	b510      	push	{r4, lr}
 80045e8:	4604      	mov	r4, r0
}
 80045ea:	21a0      	movs	r1, #160	; 0xa0
 80045ec:	f018 f97c 	bl	801c8e8 <_ZdlPvj>
 80045f0:	4620      	mov	r0, r4
 80045f2:	bd10      	pop	{r4, pc}

080045f4 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 80045f4:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80045f6:	b570      	push	{r4, r5, r6, lr}
 80045f8:	4604      	mov	r4, r0
        setX(x);
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 80045fc:	4615      	mov	r5, r2
        setX(x);
 80045fe:	4798      	blx	r3
        setY(y);
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	4620      	mov	r0, r4
 8004604:	4629      	mov	r1, r5
 8004606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 8004608:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 800460c:	4718      	bx	r3
	...

08004610 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8004610:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004614:	4604      	mov	r4, r0
        : presenter(0)
 8004616:	2500      	movs	r5, #0
 8004618:	f00b fa04 	bl	800fa24 <_ZN8touchgfx6ScreenC1Ev>
 800461c:	4b30      	ldr	r3, [pc, #192]	; (80046e0 <_ZN15Screen1ViewBaseC1Ev+0xd0>)
 800461e:	4626      	mov	r6, r4
 8004620:	63e5      	str	r5, [r4, #60]	; 0x3c
        setXY(x, y);
 8004622:	462a      	mov	r2, r5
 8004624:	4629      	mov	r1, r5
 8004626:	f846 3b40 	str.w	r3, [r6], #64
 800462a:	4630      	mov	r0, r6
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 800462c:	4b2d      	ldr	r3, [pc, #180]	; (80046e4 <_ZN15Screen1ViewBaseC1Ev+0xd4>)
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 800462e:	f104 0804 	add.w	r8, r4, #4
          visible(true)
 8004632:	6625      	str	r5, [r4, #96]	; 0x60
 8004634:	f104 076c 	add.w	r7, r4, #108	; 0x6c
        : color(col)
 8004638:	66a5      	str	r5, [r4, #104]	; 0x68
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 800463a:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
 800463e:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
        : x(0), y(0), width(0), height(0)
 8004642:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
 8004646:	f44f 7380 	mov.w	r3, #256	; 0x100
 800464a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 800464e:	23ff      	movs	r3, #255	; 0xff
 8004650:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
        touchable = touch;
 8004654:	f240 1301 	movw	r3, #257	; 0x101
 8004658:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 800465c:	4b22      	ldr	r3, [pc, #136]	; (80046e8 <_ZN15Screen1ViewBaseC1Ev+0xd8>)
 800465e:	66e3      	str	r3, [r4, #108]	; 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8004660:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004664:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004668:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 800466c:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8004670:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
          visible(true)
 8004674:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
 8004678:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
 800467c:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
 8004680:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
 8004684:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 8004688:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
        setXY(x, y);
 800468c:	f7ff ffb2 	bl	80045f4 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8004690:	4630      	mov	r0, r6
 8004692:	f44f 7148 	mov.w	r1, #800	; 0x320
 8004696:	f7fd fcf3 	bl	8002080 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 800469a:	4630      	mov	r0, r6
 800469c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80046a0:	f7fd fcf0 	bl	8002084 <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 80046a4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80046a8:	4631      	mov	r1, r6
 80046aa:	4640      	mov	r0, r8
 80046ac:	66a3      	str	r3, [r4, #104]	; 0x68
 80046ae:	f007 fc11 	bl	800bed4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(220, 190);
 80046b2:	4638      	mov	r0, r7
 80046b4:	22be      	movs	r2, #190	; 0xbe
 80046b6:	21dc      	movs	r1, #220	; 0xdc
 80046b8:	f7ff ff9c 	bl	80045f4 <_ZN8touchgfx8Drawable5setXYEss>
 80046bc:	2301      	movs	r3, #1
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 80046be:	aa01      	add	r2, sp, #4
 80046c0:	4669      	mov	r1, sp
 80046c2:	4638      	mov	r0, r7
 80046c4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80046c8:	f8ad 5000 	strh.w	r5, [sp]
 80046cc:	f008 fdd8 	bl	800d280 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80046d0:	4640      	mov	r0, r8
 80046d2:	4639      	mov	r1, r7
 80046d4:	f007 fbfe 	bl	800bed4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80046d8:	4620      	mov	r0, r4
 80046da:	b002      	add	sp, #8
 80046dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046e0:	0801fcc4 	.word	0x0801fcc4
 80046e4:	08020798 	.word	0x08020798
 80046e8:	08020800 	.word	0x08020800

080046ec <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80046ec:	4770      	bx	lr
	...

080046f0 <_Z23getFont_verdana_10_4bppv>:
{
 80046f0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80046f2:	4d16      	ldr	r5, [pc, #88]	; (800474c <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 80046f4:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80046f6:	782c      	ldrb	r4, [r5, #0]
 80046f8:	f3bf 8f5b 	dmb	ish
 80046fc:	f014 0401 	ands.w	r4, r4, #1
 8004700:	d120      	bne.n	8004744 <_Z23getFont_verdana_10_4bppv+0x54>
 8004702:	4628      	mov	r0, r5
 8004704:	f018 f8f2 	bl	801c8ec <__cxa_guard_acquire>
 8004708:	b1e0      	cbz	r0, 8004744 <_Z23getFont_verdana_10_4bppv+0x54>
 800470a:	233f      	movs	r3, #63	; 0x3f
 800470c:	2201      	movs	r2, #1
 800470e:	4910      	ldr	r1, [pc, #64]	; (8004750 <_Z23getFont_verdana_10_4bppv+0x60>)
 8004710:	9309      	str	r3, [sp, #36]	; 0x24
 8004712:	4b10      	ldr	r3, [pc, #64]	; (8004754 <_Z23getFont_verdana_10_4bppv+0x64>)
 8004714:	4810      	ldr	r0, [pc, #64]	; (8004758 <_Z23getFont_verdana_10_4bppv+0x68>)
 8004716:	9308      	str	r3, [sp, #32]
 8004718:	4b10      	ldr	r3, [pc, #64]	; (800475c <_Z23getFont_verdana_10_4bppv+0x6c>)
 800471a:	940a      	str	r4, [sp, #40]	; 0x28
 800471c:	9405      	str	r4, [sp, #20]
 800471e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8004722:	2304      	movs	r3, #4
 8004724:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004728:	230a      	movs	r3, #10
 800472a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004734:	f7ff ff20 	bl	8004578 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004738:	4809      	ldr	r0, [pc, #36]	; (8004760 <_Z23getFont_verdana_10_4bppv+0x70>)
 800473a:	f018 f921 	bl	801c980 <atexit>
 800473e:	4628      	mov	r0, r5
 8004740:	f018 f8e0 	bl	801c904 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8004744:	4804      	ldr	r0, [pc, #16]	; (8004758 <_Z23getFont_verdana_10_4bppv+0x68>)
 8004746:	b00f      	add	sp, #60	; 0x3c
 8004748:	bd30      	pop	{r4, r5, pc}
 800474a:	bf00      	nop
 800474c:	2000ed48 	.word	0x2000ed48
 8004750:	90017878 	.word	0x90017878
 8004754:	08020ce8 	.word	0x08020ce8
 8004758:	2000ed4c 	.word	0x2000ed4c
 800475c:	08020cf4 	.word	0x08020cf4
 8004760:	080046ed 	.word	0x080046ed

08004764 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004764:	4770      	bx	lr
	...

08004768 <_Z23getFont_verdana_20_4bppv>:
{
 8004768:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800476a:	4d16      	ldr	r5, [pc, #88]	; (80047c4 <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 800476c:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800476e:	782c      	ldrb	r4, [r5, #0]
 8004770:	f3bf 8f5b 	dmb	ish
 8004774:	f014 0401 	ands.w	r4, r4, #1
 8004778:	d120      	bne.n	80047bc <_Z23getFont_verdana_20_4bppv+0x54>
 800477a:	4628      	mov	r0, r5
 800477c:	f018 f8b6 	bl	801c8ec <__cxa_guard_acquire>
 8004780:	b1e0      	cbz	r0, 80047bc <_Z23getFont_verdana_20_4bppv+0x54>
 8004782:	233f      	movs	r3, #63	; 0x3f
 8004784:	2201      	movs	r2, #1
 8004786:	4910      	ldr	r1, [pc, #64]	; (80047c8 <_Z23getFont_verdana_20_4bppv+0x60>)
 8004788:	9309      	str	r3, [sp, #36]	; 0x24
 800478a:	4b10      	ldr	r3, [pc, #64]	; (80047cc <_Z23getFont_verdana_20_4bppv+0x64>)
 800478c:	4810      	ldr	r0, [pc, #64]	; (80047d0 <_Z23getFont_verdana_20_4bppv+0x68>)
 800478e:	9308      	str	r3, [sp, #32]
 8004790:	4b10      	ldr	r3, [pc, #64]	; (80047d4 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8004792:	940a      	str	r4, [sp, #40]	; 0x28
 8004794:	9405      	str	r4, [sp, #20]
 8004796:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800479a:	2304      	movs	r3, #4
 800479c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80047a0:	2314      	movs	r3, #20
 80047a2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80047ac:	f7ff fee4 	bl	8004578 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80047b0:	4809      	ldr	r0, [pc, #36]	; (80047d8 <_Z23getFont_verdana_20_4bppv+0x70>)
 80047b2:	f018 f8e5 	bl	801c980 <atexit>
 80047b6:	4628      	mov	r0, r5
 80047b8:	f018 f8a4 	bl	801c904 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 80047bc:	4804      	ldr	r0, [pc, #16]	; (80047d0 <_Z23getFont_verdana_20_4bppv+0x68>)
 80047be:	b00f      	add	sp, #60	; 0x3c
 80047c0:	bd30      	pop	{r4, r5, pc}
 80047c2:	bf00      	nop
 80047c4:	2000ed78 	.word	0x2000ed78
 80047c8:	90017888 	.word	0x90017888
 80047cc:	08020cec 	.word	0x08020cec
 80047d0:	2000ed7c 	.word	0x2000ed7c
 80047d4:	08020cf8 	.word	0x08020cf8
 80047d8:	08004765 	.word	0x08004765

080047dc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80047dc:	4770      	bx	lr
	...

080047e0 <_Z23getFont_verdana_40_4bppv>:
{
 80047e0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80047e2:	4d16      	ldr	r5, [pc, #88]	; (800483c <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 80047e4:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80047e6:	782c      	ldrb	r4, [r5, #0]
 80047e8:	f3bf 8f5b 	dmb	ish
 80047ec:	f014 0401 	ands.w	r4, r4, #1
 80047f0:	d120      	bne.n	8004834 <_Z23getFont_verdana_40_4bppv+0x54>
 80047f2:	4628      	mov	r0, r5
 80047f4:	f018 f87a 	bl	801c8ec <__cxa_guard_acquire>
 80047f8:	b1e0      	cbz	r0, 8004834 <_Z23getFont_verdana_40_4bppv+0x54>
 80047fa:	233f      	movs	r3, #63	; 0x3f
 80047fc:	2201      	movs	r2, #1
 80047fe:	4910      	ldr	r1, [pc, #64]	; (8004840 <_Z23getFont_verdana_40_4bppv+0x60>)
 8004800:	9309      	str	r3, [sp, #36]	; 0x24
 8004802:	4b10      	ldr	r3, [pc, #64]	; (8004844 <_Z23getFont_verdana_40_4bppv+0x64>)
 8004804:	4810      	ldr	r0, [pc, #64]	; (8004848 <_Z23getFont_verdana_40_4bppv+0x68>)
 8004806:	9308      	str	r3, [sp, #32]
 8004808:	4b10      	ldr	r3, [pc, #64]	; (800484c <_Z23getFont_verdana_40_4bppv+0x6c>)
 800480a:	940a      	str	r4, [sp, #40]	; 0x28
 800480c:	9405      	str	r4, [sp, #20]
 800480e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8004812:	2304      	movs	r3, #4
 8004814:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004818:	2328      	movs	r3, #40	; 0x28
 800481a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004824:	f7ff fea8 	bl	8004578 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004828:	4809      	ldr	r0, [pc, #36]	; (8004850 <_Z23getFont_verdana_40_4bppv+0x70>)
 800482a:	f018 f8a9 	bl	801c980 <atexit>
 800482e:	4628      	mov	r0, r5
 8004830:	f018 f868 	bl	801c904 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8004834:	4804      	ldr	r0, [pc, #16]	; (8004848 <_Z23getFont_verdana_40_4bppv+0x68>)
 8004836:	b00f      	add	sp, #60	; 0x3c
 8004838:	bd30      	pop	{r4, r5, pc}
 800483a:	bf00      	nop
 800483c:	2000eda8 	.word	0x2000eda8
 8004840:	90017898 	.word	0x90017898
 8004844:	08020cf0 	.word	0x08020cf0
 8004848:	2000edac 	.word	0x2000edac
 800484c:	08020cfc 	.word	0x08020cfc
 8004850:	080047dd 	.word	0x080047dd

08004854 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8004854:	2000      	movs	r0, #0
 8004856:	4770      	bx	lr

08004858 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8004858:	2000      	movs	r0, #0
 800485a:	4770      	bx	lr

0800485c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800485c:	b40e      	push	{r1, r2, r3}
 800485e:	b503      	push	{r0, r1, lr}
 8004860:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004862:	2100      	movs	r1, #0
{
 8004864:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8004868:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800486a:	f00a fd09 	bl	800f280 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800486e:	b002      	add	sp, #8
 8004870:	f85d eb04 	ldr.w	lr, [sp], #4
 8004874:	b003      	add	sp, #12
 8004876:	4770      	bx	lr

08004878 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004878:	b40c      	push	{r2, r3}
 800487a:	b507      	push	{r0, r1, r2, lr}
 800487c:	ab04      	add	r3, sp, #16
 800487e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8004882:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8004884:	f00a fcfc 	bl	800f280 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004888:	b003      	add	sp, #12
 800488a:	f85d eb04 	ldr.w	lr, [sp], #4
 800488e:	b002      	add	sp, #8
 8004890:	4770      	bx	lr
	...

08004894 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8004894:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8004896:	b510      	push	{r4, lr}
 8004898:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800489a:	b373      	cbz	r3, 80048fa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800489c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800489e:	b92b      	cbnz	r3, 80048ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 80048a0:	4b18      	ldr	r3, [pc, #96]	; (8004904 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 80048a2:	21c5      	movs	r1, #197	; 0xc5
 80048a4:	4a18      	ldr	r2, [pc, #96]	; (8004908 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80048a6:	4819      	ldr	r0, [pc, #100]	; (800490c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 80048a8:	f018 f84c 	bl	801c944 <__assert_func>
            return buffer[pos];
 80048ac:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80048ae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80048b2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80048b4:	b30b      	cbz	r3, 80048fa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 80048b6:	f00b ff2d 	bl	8010714 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 80048ba:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d803      	bhi.n	80048c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 80048c0:	4b13      	ldr	r3, [pc, #76]	; (8004910 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 80048c2:	21cb      	movs	r1, #203	; 0xcb
 80048c4:	4a13      	ldr	r2, [pc, #76]	; (8004914 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 80048c6:	e7ee      	b.n	80048a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 80048c8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80048ca:	f640 103f 	movw	r0, #2367	; 0x93f
 80048ce:	1c53      	adds	r3, r2, #1
 80048d0:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 80048d2:	2b09      	cmp	r3, #9
 80048d4:	4619      	mov	r1, r3
 80048d6:	bf88      	it	hi
 80048d8:	f1a3 010a 	subhi.w	r1, r3, #10
 80048dc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80048e0:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 80048e2:	4281      	cmp	r1, r0
 80048e4:	d109      	bne.n	80048fa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 80048e6:	2b0a      	cmp	r3, #10
 80048e8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80048ec:	bf28      	it	cs
 80048ee:	2300      	movcs	r3, #0
            return buffer[pos];
 80048f0:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80048f2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80048f6:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 80048f8:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 80048fa:	4620      	mov	r0, r4
}
 80048fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8004900:	f00b be0a 	b.w	8010518 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8004904:	0801fcf0 	.word	0x0801fcf0
 8004908:	0801fcf9 	.word	0x0801fcf9
 800490c:	0801fda4 	.word	0x0801fda4
 8004910:	0801fdee 	.word	0x0801fdee
 8004914:	0801fdfc 	.word	0x0801fdfc

08004918 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8004918:	f00b bdc7 	b.w	80104aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800491c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800491c:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800491e:	bb18      	cbnz	r0, 8004968 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8004920:	4b12      	ldr	r3, [pc, #72]	; (800496c <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8004922:	4813      	ldr	r0, [pc, #76]	; (8004970 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4913      	ldr	r1, [pc, #76]	; (8004974 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8004928:	b1b3      	cbz	r3, 8004958 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800492a:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800492c:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800492e:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8004930:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8004932:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	441a      	add	r2, r3
 8004938:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 800493a:	4b0f      	ldr	r3, [pc, #60]	; (8004978 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 800493c:	2200      	movs	r2, #0
 800493e:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8004940:	f000 f82a 	bl	8004998 <_ZN17TypedTextDatabase8getFontsEv>
 8004944:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8004946:	f000 f825 	bl	8004994 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 800494a:	4b0c      	ldr	r3, [pc, #48]	; (800497c <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 800494c:	601c      	str	r4, [r3, #0]
        fonts = f;
 800494e:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8004950:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8004952:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8004954:	8018      	strh	r0, [r3, #0]
    }
}
 8004956:	e007      	b.n	8004968 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8004958:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 800495a:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800495c:	4b0b      	ldr	r3, [pc, #44]	; (800498c <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 800495e:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8004962:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8004964:	2c00      	cmp	r4, #0
 8004966:	d1e8      	bne.n	800493a <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8004968:	bd38      	pop	{r3, r4, r5, pc}
 800496a:	bf00      	nop
 800496c:	2000edd8 	.word	0x2000edd8
 8004970:	2000eddc 	.word	0x2000eddc
 8004974:	2000ede0 	.word	0x2000ede0
 8004978:	2000ede4 	.word	0x2000ede4
 800497c:	20024468 	.word	0x20024468
 8004980:	20024470 	.word	0x20024470
 8004984:	2002446c 	.word	0x2002446c
 8004988:	900178ac 	.word	0x900178ac
 800498c:	900178a8 	.word	0x900178a8
 8004990:	900178b4 	.word	0x900178b4

08004994 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return 0;
}
 8004994:	2000      	movs	r0, #0
 8004996:	4770      	bx	lr

08004998 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8004998:	4800      	ldr	r0, [pc, #0]	; (800499c <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800499a:	4770      	bx	lr
 800499c:	2000ede8 	.word	0x2000ede8

080049a0 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80049a0:	b510      	push	{r4, lr}
};
 80049a2:	4c05      	ldr	r4, [pc, #20]	; (80049b8 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 80049a4:	f7ff fee0 	bl	8004768 <_Z23getFont_verdana_20_4bppv>
};
 80049a8:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 80049aa:	f7ff ff19 	bl	80047e0 <_Z23getFont_verdana_40_4bppv>
};
 80049ae:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 80049b0:	f7ff fe9e 	bl	80046f0 <_Z23getFont_verdana_10_4bppv>
};
 80049b4:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 80049b6:	bd10      	pop	{r4, pc}
 80049b8:	2000ede8 	.word	0x2000ede8

080049bc <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80049bc:	4770      	bx	lr

080049be <_ZN19FrontendApplicationD0Ev>:
 80049be:	b510      	push	{r4, lr}
 80049c0:	4604      	mov	r4, r0
 80049c2:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80049c6:	f017 ff8f 	bl	801c8e8 <_ZdlPvj>
 80049ca:	4620      	mov	r0, r4
 80049cc:	bd10      	pop	{r4, pc}

080049ce <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80049ce:	b510      	push	{r4, lr}
 80049d0:	4604      	mov	r4, r0
    {
        model.tick();
 80049d2:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 80049d6:	f000 f812 	bl	80049fe <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80049da:	4620      	mov	r0, r4
    }
 80049dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80049e0:	f009 bdb6 	b.w	800e550 <_ZN8touchgfx11Application15handleTickEventEv>

080049e4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80049e4:	b510      	push	{r4, lr}
 80049e6:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80049e8:	f7ff fd58 	bl	800449c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80049ec:	4b01      	ldr	r3, [pc, #4]	; (80049f4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80049ee:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80049f0:	6023      	str	r3, [r4, #0]
}
 80049f2:	bd10      	pop	{r4, pc}
 80049f4:	0801fed8 	.word	0x0801fed8

080049f8 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80049f8:	2200      	movs	r2, #0
 80049fa:	6002      	str	r2, [r0, #0]
{

}
 80049fc:	4770      	bx	lr

080049fe <_ZN5Model4tickEv>:

void Model::tick()
{

}
 80049fe:	4770      	bx	lr

08004a00 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8004a00:	4770      	bx	lr

08004a02 <_ZThn4_N16Screen1PresenterD1Ev>:
 8004a02:	3804      	subs	r0, #4
 8004a04:	4770      	bx	lr

08004a06 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8004a06:	4770      	bx	lr

08004a08 <_ZN16Screen1PresenterD0Ev>:
 8004a08:	b510      	push	{r4, lr}
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	2110      	movs	r1, #16
 8004a0e:	f017 ff6b 	bl	801c8e8 <_ZdlPvj>
 8004a12:	4620      	mov	r0, r4
 8004a14:	bd10      	pop	{r4, pc}

08004a16 <_ZThn4_N16Screen1PresenterD0Ev>:
 8004a16:	f1a0 0004 	sub.w	r0, r0, #4
 8004a1a:	e7f5      	b.n	8004a08 <_ZN16Screen1PresenterD0Ev>

08004a1c <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8004a1c:	2200      	movs	r2, #0
    : view(v)
 8004a1e:	60c1      	str	r1, [r0, #12]
 8004a20:	6082      	str	r2, [r0, #8]
 8004a22:	4a04      	ldr	r2, [pc, #16]	; (8004a34 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8004a24:	b510      	push	{r4, lr}
    : view(v)
 8004a26:	f102 0408 	add.w	r4, r2, #8
 8004a2a:	3220      	adds	r2, #32
 8004a2c:	6004      	str	r4, [r0, #0]
 8004a2e:	6042      	str	r2, [r0, #4]
}
 8004a30:	bd10      	pop	{r4, pc}
 8004a32:	bf00      	nop
 8004a34:	0801ff1c 	.word	0x0801ff1c

08004a38 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8004a38:	4770      	bx	lr
	...

08004a3c <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8004a3c:	4b03      	ldr	r3, [pc, #12]	; (8004a4c <_ZN11Screen1ViewD1Ev+0x10>)
 8004a3e:	b510      	push	{r4, lr}
 8004a40:	4604      	mov	r4, r0
 8004a42:	6003      	str	r3, [r0, #0]
 8004a44:	f7ff fdcd 	bl	80045e2 <_ZN15Screen1ViewBaseD1Ev>
 8004a48:	4620      	mov	r0, r4
 8004a4a:	bd10      	pop	{r4, pc}
 8004a4c:	0801ff4c 	.word	0x0801ff4c

08004a50 <_ZN11Screen1ViewD0Ev>:
 8004a50:	b510      	push	{r4, lr}
 8004a52:	4604      	mov	r4, r0
 8004a54:	f7ff fff2 	bl	8004a3c <_ZN11Screen1ViewD1Ev>
 8004a58:	21a0      	movs	r1, #160	; 0xa0
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f017 ff44 	bl	801c8e8 <_ZdlPvj>
 8004a60:	4620      	mov	r0, r4
 8004a62:	bd10      	pop	{r4, pc}

08004a64 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8004a64:	b510      	push	{r4, lr}
 8004a66:	4604      	mov	r4, r0
 8004a68:	f7ff fdd2 	bl	8004610 <_ZN15Screen1ViewBaseC1Ev>
 8004a6c:	4b01      	ldr	r3, [pc, #4]	; (8004a74 <_ZN11Screen1ViewC1Ev+0x10>)
}
 8004a6e:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8004a70:	6023      	str	r3, [r4, #0]
}
 8004a72:	bd10      	pop	{r4, pc}
 8004a74:	0801ff4c 	.word	0x0801ff4c

08004a78 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8004a78:	f7ff bdb4 	b.w	80045e4 <_ZN15Screen1ViewBase11setupScreenEv>

08004a7c <ft6x06_Reset>:
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8004a7c:	4770      	bx	lr

08004a7e <ft6x06_TS_ITStatus>:
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
}
 8004a7e:	2000      	movs	r0, #0
 8004a80:	4770      	bx	lr

08004a82 <ft6x06_ReadID>:
{
 8004a82:	b510      	push	{r4, lr}
 8004a84:	4604      	mov	r4, r0
  TS_IO_Init();
 8004a86:	f7fb fea2 	bl	80007ce <TS_IO_Init>
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8004a8a:	21a8      	movs	r1, #168	; 0xa8
 8004a8c:	b2e0      	uxtb	r0, r4
 8004a8e:	f7fb febb 	bl	8000808 <TS_IO_Read>
}
 8004a92:	b280      	uxth	r0, r0
 8004a94:	bd10      	pop	{r4, pc}
	...

08004a98 <ft6x06_TS_DetectTouch>:
{
 8004a98:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 8004a9a:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8004a9c:	2102      	movs	r1, #2
 8004a9e:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8004aa0:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8004aa4:	f7fb feb0 	bl	8000808 <TS_IO_Read>
 8004aa8:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT6206_TD_STAT_MASK;
 8004aac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004ab0:	f003 030f 	and.w	r3, r3, #15
 8004ab4:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8004ab8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <ft6x06_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8004ac0:	f88d 4007 	strb.w	r4, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8004ac4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004ac8:	4b03      	ldr	r3, [pc, #12]	; (8004ad8 <ft6x06_TS_DetectTouch+0x40>)
  return(nbTouch);
 8004aca:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8004ace:	705a      	strb	r2, [r3, #1]
  ft6x06_handle.currActiveTouchIdx = 0;
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	709a      	strb	r2, [r3, #2]
}
 8004ad4:	b002      	add	sp, #8
 8004ad6:	bd10      	pop	{r4, pc}
 8004ad8:	2000edf6 	.word	0x2000edf6

08004adc <ft6x06_TS_GetXY>:
{
 8004adc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8004ade:	4c15      	ldr	r4, [pc, #84]	; (8004b34 <ft6x06_TS_GetXY+0x58>)
{
 8004ae0:	4615      	mov	r5, r2
 8004ae2:	460e      	mov	r6, r1
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8004ae4:	78a3      	ldrb	r3, [r4, #2]
 8004ae6:	7862      	ldrb	r2, [r4, #1]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d91f      	bls.n	8004b2c <ft6x06_TS_GetXY+0x50>
    switch(ft6x06_handle.currActiveTouchIdx)
 8004aec:	b303      	cbz	r3, 8004b30 <ft6x06_TS_GetXY+0x54>
      regAddress = FT6206_P2_XH_REG; 
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	bf14      	ite	ne
 8004af2:	2100      	movne	r1, #0
 8004af4:	2109      	moveq	r1, #9
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8004af6:	2304      	movs	r3, #4
 8004af8:	b2c0      	uxtb	r0, r0
 8004afa:	eb0d 0203 	add.w	r2, sp, r3
 8004afe:	f7fb fea1 	bl	8000844 <TS_IO_ReadMultiple>
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8004b02:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004b06:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004b0a:	021b      	lsls	r3, r3, #8
 8004b0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b10:	4313      	orrs	r3, r2
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8004b12:	f89d 2007 	ldrb.w	r2, [sp, #7]
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8004b16:	8033      	strh	r3, [r6, #0]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8004b18:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004b1c:	021b      	lsls	r3, r3, #8
 8004b1e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b22:	4313      	orrs	r3, r2
 8004b24:	802b      	strh	r3, [r5, #0]
    ft6x06_handle.currActiveTouchIdx++;
 8004b26:	78a3      	ldrb	r3, [r4, #2]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	70a3      	strb	r3, [r4, #2]
}
 8004b2c:	b002      	add	sp, #8
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}
    switch(ft6x06_handle.currActiveTouchIdx)
 8004b30:	2103      	movs	r1, #3
 8004b32:	e7e0      	b.n	8004af6 <ft6x06_TS_GetXY+0x1a>
 8004b34:	2000edf6 	.word	0x2000edf6

08004b38 <ft6x06_TS_EnableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8004b38:	2201      	movs	r2, #1
 8004b3a:	21a4      	movs	r1, #164	; 0xa4
 8004b3c:	b2c0      	uxtb	r0, r0
 8004b3e:	f7fb be47 	b.w	80007d0 <TS_IO_Write>

08004b42 <ft6x06_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8004b42:	2200      	movs	r2, #0
 8004b44:	21a4      	movs	r1, #164	; 0xa4
 8004b46:	b2c0      	uxtb	r0, r0
 8004b48:	f7fb be42 	b.w	80007d0 <TS_IO_Write>

08004b4c <ft6x06_TS_Start>:
  ft6x06_TS_DisableIT(DeviceAddr);
 8004b4c:	f7ff bff9 	b.w	8004b42 <ft6x06_TS_DisableIT>

08004b50 <ft6x06_TS_ClearIT>:
 8004b50:	4770      	bx	lr
	...

08004b54 <ft6x06_Init>:
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
  {
    if(ft6x06[idx] == DeviceAddr)
 8004b54:	4b09      	ldr	r3, [pc, #36]	; (8004b7c <ft6x06_Init+0x28>)
{  
 8004b56:	b410      	push	{r4}
    if(ft6x06[idx] == DeviceAddr)
 8004b58:	781a      	ldrb	r2, [r3, #0]
 8004b5a:	4290      	cmp	r0, r2
 8004b5c:	d00a      	beq.n	8004b74 <ft6x06_Init+0x20>
 8004b5e:	7859      	ldrb	r1, [r3, #1]
 8004b60:	4288      	cmp	r0, r1
 8004b62:	d007      	beq.n	8004b74 <ft6x06_Init+0x20>
 8004b64:	b10a      	cbz	r2, 8004b6a <ft6x06_Init+0x16>
 8004b66:	b929      	cbnz	r1, 8004b74 <ft6x06_Init+0x20>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8004b68:	2201      	movs	r2, #1
      ft6x06[empty] = DeviceAddr;
 8004b6a:	5498      	strb	r0, [r3, r2]
}
 8004b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
      TS_IO_Init(); 
 8004b70:	f7fb be2d 	b.w	80007ce <TS_IO_Init>
}
 8004b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	2000edf4 	.word	0x2000edf4

08004b80 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8004b80:	b538      	push	{r3, r4, r5, lr}
 8004b82:	4604      	mov	r4, r0
 8004b84:	460d      	mov	r5, r1
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8004b86:	2000      	movs	r0, #0
 8004b88:	49c9      	ldr	r1, [pc, #804]	; (8004eb0 <OTM8009A_Init+0x330>)
 8004b8a:	f7fc f9a5 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8004b8e:	49c9      	ldr	r1, [pc, #804]	; (8004eb4 <OTM8009A_Init+0x334>)
 8004b90:	2003      	movs	r0, #3
 8004b92:	f7fc f9a1 	bl	8000ed8 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8004b96:	49c8      	ldr	r1, [pc, #800]	; (8004eb8 <OTM8009A_Init+0x338>)
 8004b98:	2000      	movs	r0, #0
 8004b9a:	f7fc f99d 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8004b9e:	49c7      	ldr	r1, [pc, #796]	; (8004ebc <OTM8009A_Init+0x33c>)
 8004ba0:	2002      	movs	r0, #2
 8004ba2:	f7fc f999 	bl	8000ed8 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8004ba6:	49c4      	ldr	r1, [pc, #784]	; (8004eb8 <OTM8009A_Init+0x338>)
 8004ba8:	2000      	movs	r0, #0
 8004baa:	f7fc f995 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8004bae:	49c4      	ldr	r1, [pc, #784]	; (8004ec0 <OTM8009A_Init+0x340>)
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	f7fc f991 	bl	8000ed8 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8004bb6:	200a      	movs	r0, #10
 8004bb8:	f7fc f98c 	bl	8000ed4 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8004bbc:	49c1      	ldr	r1, [pc, #772]	; (8004ec4 <OTM8009A_Init+0x344>)
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	f7fc f98a 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8004bc4:	49c0      	ldr	r1, [pc, #768]	; (8004ec8 <OTM8009A_Init+0x348>)
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	f7fc f986 	bl	8000ed8 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8004bcc:	200a      	movs	r0, #10
 8004bce:	f7fc f981 	bl	8000ed4 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8004bd2:	49be      	ldr	r1, [pc, #760]	; (8004ecc <OTM8009A_Init+0x34c>)
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	f7fc f97f 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8004bda:	49bd      	ldr	r1, [pc, #756]	; (8004ed0 <OTM8009A_Init+0x350>)
 8004bdc:	2000      	movs	r0, #0
 8004bde:	f7fc f97b 	bl	8000ed8 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8004be2:	49bc      	ldr	r1, [pc, #752]	; (8004ed4 <OTM8009A_Init+0x354>)
 8004be4:	2000      	movs	r0, #0
 8004be6:	f7fc f977 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8004bea:	49bb      	ldr	r1, [pc, #748]	; (8004ed8 <OTM8009A_Init+0x358>)
 8004bec:	2000      	movs	r0, #0
 8004bee:	f7fc f973 	bl	8000ed8 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8004bf2:	49ba      	ldr	r1, [pc, #744]	; (8004edc <OTM8009A_Init+0x35c>)
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	f7fc f96f 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8004bfa:	49b9      	ldr	r1, [pc, #740]	; (8004ee0 <OTM8009A_Init+0x360>)
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	f7fc f96b 	bl	8000ed8 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8004c02:	49ab      	ldr	r1, [pc, #684]	; (8004eb0 <OTM8009A_Init+0x330>)
 8004c04:	2000      	movs	r0, #0
 8004c06:	f7fc f967 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8004c0a:	49b6      	ldr	r1, [pc, #728]	; (8004ee4 <OTM8009A_Init+0x364>)
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	f7fc f963 	bl	8000ed8 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8004c12:	49b5      	ldr	r1, [pc, #724]	; (8004ee8 <OTM8009A_Init+0x368>)
 8004c14:	2000      	movs	r0, #0
 8004c16:	f7fc f95f 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8004c1a:	49b4      	ldr	r1, [pc, #720]	; (8004eec <OTM8009A_Init+0x36c>)
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	f7fc f95b 	bl	8000ed8 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8004c22:	49b3      	ldr	r1, [pc, #716]	; (8004ef0 <OTM8009A_Init+0x370>)
 8004c24:	2000      	movs	r0, #0
 8004c26:	f7fc f957 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8004c2a:	49b2      	ldr	r1, [pc, #712]	; (8004ef4 <OTM8009A_Init+0x374>)
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	f7fc f953 	bl	8000ed8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8004c32:	49b1      	ldr	r1, [pc, #708]	; (8004ef8 <OTM8009A_Init+0x378>)
 8004c34:	2000      	movs	r0, #0
 8004c36:	f7fc f94f 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8004c3a:	49b0      	ldr	r1, [pc, #704]	; (8004efc <OTM8009A_Init+0x37c>)
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	f7fc f94b 	bl	8000ed8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8004c42:	49af      	ldr	r1, [pc, #700]	; (8004f00 <OTM8009A_Init+0x380>)
 8004c44:	2000      	movs	r0, #0
 8004c46:	f7fc f947 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8004c4a:	49a3      	ldr	r1, [pc, #652]	; (8004ed8 <OTM8009A_Init+0x358>)
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	f7fc f943 	bl	8000ed8 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8004c52:	4997      	ldr	r1, [pc, #604]	; (8004eb0 <OTM8009A_Init+0x330>)
 8004c54:	2000      	movs	r0, #0
 8004c56:	f7fc f93f 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8004c5a:	49aa      	ldr	r1, [pc, #680]	; (8004f04 <OTM8009A_Init+0x384>)
 8004c5c:	2002      	movs	r0, #2
 8004c5e:	f7fc f93b 	bl	8000ed8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8004c62:	49a9      	ldr	r1, [pc, #676]	; (8004f08 <OTM8009A_Init+0x388>)
 8004c64:	2000      	movs	r0, #0
 8004c66:	f7fc f937 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8004c6a:	49a8      	ldr	r1, [pc, #672]	; (8004f0c <OTM8009A_Init+0x38c>)
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	f7fc f933 	bl	8000ed8 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8004c72:	49a7      	ldr	r1, [pc, #668]	; (8004f10 <OTM8009A_Init+0x390>)
 8004c74:	2000      	movs	r0, #0
 8004c76:	f7fc f92f 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8004c7a:	49a6      	ldr	r1, [pc, #664]	; (8004f14 <OTM8009A_Init+0x394>)
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	f7fc f92b 	bl	8000ed8 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8004c82:	49a5      	ldr	r1, [pc, #660]	; (8004f18 <OTM8009A_Init+0x398>)
 8004c84:	2000      	movs	r0, #0
 8004c86:	f7fc f927 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8004c8a:	49a4      	ldr	r1, [pc, #656]	; (8004f1c <OTM8009A_Init+0x39c>)
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	f7fc f923 	bl	8000ed8 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8004c92:	4995      	ldr	r1, [pc, #596]	; (8004ee8 <OTM8009A_Init+0x368>)
 8004c94:	2000      	movs	r0, #0
 8004c96:	f7fc f91f 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8004c9a:	49a1      	ldr	r1, [pc, #644]	; (8004f20 <OTM8009A_Init+0x3a0>)
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	f7fc f91b 	bl	8000ed8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8004ca2:	4993      	ldr	r1, [pc, #588]	; (8004ef0 <OTM8009A_Init+0x370>)
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	f7fc f917 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8004caa:	499e      	ldr	r1, [pc, #632]	; (8004f24 <OTM8009A_Init+0x3a4>)
 8004cac:	2000      	movs	r0, #0
 8004cae:	f7fc f913 	bl	8000ed8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8004cb2:	499d      	ldr	r1, [pc, #628]	; (8004f28 <OTM8009A_Init+0x3a8>)
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	f7fc f90f 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8004cba:	499c      	ldr	r1, [pc, #624]	; (8004f2c <OTM8009A_Init+0x3ac>)
 8004cbc:	2002      	movs	r0, #2
 8004cbe:	f7fc f90b 	bl	8000ed8 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8004cc2:	497d      	ldr	r1, [pc, #500]	; (8004eb8 <OTM8009A_Init+0x338>)
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	f7fc f907 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8004cca:	4999      	ldr	r1, [pc, #612]	; (8004f30 <OTM8009A_Init+0x3b0>)
 8004ccc:	2006      	movs	r0, #6
 8004cce:	f7fc f903 	bl	8000ed8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8004cd2:	4998      	ldr	r1, [pc, #608]	; (8004f34 <OTM8009A_Init+0x3b4>)
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	f7fc f8ff 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8004cda:	4997      	ldr	r1, [pc, #604]	; (8004f38 <OTM8009A_Init+0x3b8>)
 8004cdc:	200e      	movs	r0, #14
 8004cde:	f7fc f8fb 	bl	8000ed8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8004ce2:	4996      	ldr	r1, [pc, #600]	; (8004f3c <OTM8009A_Init+0x3bc>)
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	f7fc f8f7 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8004cea:	4995      	ldr	r1, [pc, #596]	; (8004f40 <OTM8009A_Init+0x3c0>)
 8004cec:	200e      	movs	r0, #14
 8004cee:	f7fc f8f3 	bl	8000ed8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8004cf2:	4994      	ldr	r1, [pc, #592]	; (8004f44 <OTM8009A_Init+0x3c4>)
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	f7fc f8ef 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8004cfa:	4993      	ldr	r1, [pc, #588]	; (8004f48 <OTM8009A_Init+0x3c8>)
 8004cfc:	200a      	movs	r0, #10
 8004cfe:	f7fc f8eb 	bl	8000ed8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8004d02:	4992      	ldr	r1, [pc, #584]	; (8004f4c <OTM8009A_Init+0x3cc>)
 8004d04:	2000      	movs	r0, #0
 8004d06:	f7fc f8e7 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8004d0a:	4991      	ldr	r1, [pc, #580]	; (8004f50 <OTM8009A_Init+0x3d0>)
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	f7fc f8e3 	bl	8000ed8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8004d12:	4969      	ldr	r1, [pc, #420]	; (8004eb8 <OTM8009A_Init+0x338>)
 8004d14:	2000      	movs	r0, #0
 8004d16:	f7fc f8df 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8004d1a:	498e      	ldr	r1, [pc, #568]	; (8004f54 <OTM8009A_Init+0x3d4>)
 8004d1c:	200a      	movs	r0, #10
 8004d1e:	f7fc f8db 	bl	8000ed8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8004d22:	498d      	ldr	r1, [pc, #564]	; (8004f58 <OTM8009A_Init+0x3d8>)
 8004d24:	2000      	movs	r0, #0
 8004d26:	f7fc f8d7 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8004d2a:	498c      	ldr	r1, [pc, #560]	; (8004f5c <OTM8009A_Init+0x3dc>)
 8004d2c:	200f      	movs	r0, #15
 8004d2e:	f7fc f8d3 	bl	8000ed8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8004d32:	4980      	ldr	r1, [pc, #512]	; (8004f34 <OTM8009A_Init+0x3b4>)
 8004d34:	2000      	movs	r0, #0
 8004d36:	f7fc f8cf 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8004d3a:	4989      	ldr	r1, [pc, #548]	; (8004f60 <OTM8009A_Init+0x3e0>)
 8004d3c:	200f      	movs	r0, #15
 8004d3e:	f7fc f8cb 	bl	8000ed8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8004d42:	497e      	ldr	r1, [pc, #504]	; (8004f3c <OTM8009A_Init+0x3bc>)
 8004d44:	2000      	movs	r0, #0
 8004d46:	f7fc f8c7 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8004d4a:	4986      	ldr	r1, [pc, #536]	; (8004f64 <OTM8009A_Init+0x3e4>)
 8004d4c:	200a      	movs	r0, #10
 8004d4e:	f7fc f8c3 	bl	8000ed8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8004d52:	497c      	ldr	r1, [pc, #496]	; (8004f44 <OTM8009A_Init+0x3c4>)
 8004d54:	2000      	movs	r0, #0
 8004d56:	f7fc f8bf 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8004d5a:	4983      	ldr	r1, [pc, #524]	; (8004f68 <OTM8009A_Init+0x3e8>)
 8004d5c:	200f      	movs	r0, #15
 8004d5e:	f7fc f8bb 	bl	8000ed8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8004d62:	497a      	ldr	r1, [pc, #488]	; (8004f4c <OTM8009A_Init+0x3cc>)
 8004d64:	2000      	movs	r0, #0
 8004d66:	f7fc f8b7 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8004d6a:	4980      	ldr	r1, [pc, #512]	; (8004f6c <OTM8009A_Init+0x3ec>)
 8004d6c:	200f      	movs	r0, #15
 8004d6e:	f7fc f8b3 	bl	8000ed8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8004d72:	497f      	ldr	r1, [pc, #508]	; (8004f70 <OTM8009A_Init+0x3f0>)
 8004d74:	2000      	movs	r0, #0
 8004d76:	f7fc f8af 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8004d7a:	497e      	ldr	r1, [pc, #504]	; (8004f74 <OTM8009A_Init+0x3f4>)
 8004d7c:	200a      	movs	r0, #10
 8004d7e:	f7fc f8ab 	bl	8000ed8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8004d82:	497d      	ldr	r1, [pc, #500]	; (8004f78 <OTM8009A_Init+0x3f8>)
 8004d84:	2000      	movs	r0, #0
 8004d86:	f7fc f8a7 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8004d8a:	497c      	ldr	r1, [pc, #496]	; (8004f7c <OTM8009A_Init+0x3fc>)
 8004d8c:	200a      	movs	r0, #10
 8004d8e:	f7fc f8a3 	bl	8000ed8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8004d92:	4949      	ldr	r1, [pc, #292]	; (8004eb8 <OTM8009A_Init+0x338>)
 8004d94:	2000      	movs	r0, #0
 8004d96:	f7fc f89f 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8004d9a:	4979      	ldr	r1, [pc, #484]	; (8004f80 <OTM8009A_Init+0x400>)
 8004d9c:	200a      	movs	r0, #10
 8004d9e:	f7fc f89b 	bl	8000ed8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8004da2:	496d      	ldr	r1, [pc, #436]	; (8004f58 <OTM8009A_Init+0x3d8>)
 8004da4:	2000      	movs	r0, #0
 8004da6:	f7fc f897 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8004daa:	4976      	ldr	r1, [pc, #472]	; (8004f84 <OTM8009A_Init+0x404>)
 8004dac:	200f      	movs	r0, #15
 8004dae:	f7fc f893 	bl	8000ed8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8004db2:	4960      	ldr	r1, [pc, #384]	; (8004f34 <OTM8009A_Init+0x3b4>)
 8004db4:	2000      	movs	r0, #0
 8004db6:	f7fc f88f 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8004dba:	4973      	ldr	r1, [pc, #460]	; (8004f88 <OTM8009A_Init+0x408>)
 8004dbc:	200f      	movs	r0, #15
 8004dbe:	f7fc f88b 	bl	8000ed8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8004dc2:	495e      	ldr	r1, [pc, #376]	; (8004f3c <OTM8009A_Init+0x3bc>)
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	f7fc f887 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8004dca:	4970      	ldr	r1, [pc, #448]	; (8004f8c <OTM8009A_Init+0x40c>)
 8004dcc:	200a      	movs	r0, #10
 8004dce:	f7fc f883 	bl	8000ed8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8004dd2:	495c      	ldr	r1, [pc, #368]	; (8004f44 <OTM8009A_Init+0x3c4>)
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	f7fc f87f 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8004dda:	496d      	ldr	r1, [pc, #436]	; (8004f90 <OTM8009A_Init+0x410>)
 8004ddc:	200f      	movs	r0, #15
 8004dde:	f7fc f87b 	bl	8000ed8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8004de2:	495a      	ldr	r1, [pc, #360]	; (8004f4c <OTM8009A_Init+0x3cc>)
 8004de4:	2000      	movs	r0, #0
 8004de6:	f7fc f877 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8004dea:	496a      	ldr	r1, [pc, #424]	; (8004f94 <OTM8009A_Init+0x414>)
 8004dec:	200f      	movs	r0, #15
 8004dee:	f7fc f873 	bl	8000ed8 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8004df2:	493d      	ldr	r1, [pc, #244]	; (8004ee8 <OTM8009A_Init+0x368>)
 8004df4:	2000      	movs	r0, #0
 8004df6:	f7fc f86f 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8004dfa:	4967      	ldr	r1, [pc, #412]	; (8004f98 <OTM8009A_Init+0x418>)
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	f7fc f86b 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8004e02:	4966      	ldr	r1, [pc, #408]	; (8004f9c <OTM8009A_Init+0x41c>)
 8004e04:	2000      	movs	r0, #0
 8004e06:	f7fc f867 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8004e0a:	4965      	ldr	r1, [pc, #404]	; (8004fa0 <OTM8009A_Init+0x420>)
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	f7fc f863 	bl	8000ed8 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8004e12:	4964      	ldr	r1, [pc, #400]	; (8004fa4 <OTM8009A_Init+0x424>)
 8004e14:	2000      	movs	r0, #0
 8004e16:	f7fc f85f 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8004e1a:	4963      	ldr	r1, [pc, #396]	; (8004fa8 <OTM8009A_Init+0x428>)
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	f7fc f85b 	bl	8000ed8 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8004e22:	4923      	ldr	r1, [pc, #140]	; (8004eb0 <OTM8009A_Init+0x330>)
 8004e24:	2000      	movs	r0, #0
 8004e26:	f7fc f857 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8004e2a:	4960      	ldr	r1, [pc, #384]	; (8004fac <OTM8009A_Init+0x42c>)
 8004e2c:	2003      	movs	r0, #3
 8004e2e:	f7fc f853 	bl	8000ed8 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8004e32:	491f      	ldr	r1, [pc, #124]	; (8004eb0 <OTM8009A_Init+0x330>)
 8004e34:	2000      	movs	r0, #0
 8004e36:	f7fc f84f 	bl	8000ed8 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8004e3a:	491d      	ldr	r1, [pc, #116]	; (8004eb0 <OTM8009A_Init+0x330>)
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	f7fc f84b 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8004e42:	495b      	ldr	r1, [pc, #364]	; (8004fb0 <OTM8009A_Init+0x430>)
 8004e44:	2010      	movs	r0, #16
 8004e46:	f7fc f847 	bl	8000ed8 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8004e4a:	4919      	ldr	r1, [pc, #100]	; (8004eb0 <OTM8009A_Init+0x330>)
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	f7fc f843 	bl	8000ed8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8004e52:	4958      	ldr	r1, [pc, #352]	; (8004fb4 <OTM8009A_Init+0x434>)
 8004e54:	2010      	movs	r0, #16
 8004e56:	f7fc f83f 	bl	8000ed8 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	4956      	ldr	r1, [pc, #344]	; (8004fb8 <OTM8009A_Init+0x438>)
 8004e5e:	f7fc f83b 	bl	8000ed8 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8004e62:	2078      	movs	r0, #120	; 0x78
 8004e64:	f7fc f836 	bl	8000ed4 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8004e68:	2c00      	cmp	r4, #0
 8004e6a:	f000 80c7 	beq.w	8004ffc <OTM8009A_Init+0x47c>
 8004e6e:	2c02      	cmp	r4, #2
 8004e70:	d103      	bne.n	8004e7a <OTM8009A_Init+0x2fa>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8004e72:	4952      	ldr	r1, [pc, #328]	; (8004fbc <OTM8009A_Init+0x43c>)
 8004e74:	2000      	movs	r0, #0
    break;
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8004e76:	f7fc f82f 	bl	8000ed8 <DSI_IO_WriteCmd>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004e7a:	2d01      	cmp	r5, #1
 8004e7c:	d10b      	bne.n	8004e96 <OTM8009A_Init+0x316>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8004e7e:	4950      	ldr	r1, [pc, #320]	; (8004fc0 <OTM8009A_Init+0x440>)
 8004e80:	2000      	movs	r0, #0
 8004e82:	f7fc f829 	bl	8000ed8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8004e86:	494f      	ldr	r1, [pc, #316]	; (8004fc4 <OTM8009A_Init+0x444>)
 8004e88:	2004      	movs	r0, #4
 8004e8a:	f7fc f825 	bl	8000ed8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8004e8e:	494e      	ldr	r1, [pc, #312]	; (8004fc8 <OTM8009A_Init+0x448>)
 8004e90:	2004      	movs	r0, #4
 8004e92:	f7fc f821 	bl	8000ed8 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8004e96:	494d      	ldr	r1, [pc, #308]	; (8004fcc <OTM8009A_Init+0x44c>)
 8004e98:	2000      	movs	r0, #0
 8004e9a:	f7fc f81d 	bl	8000ed8 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8004e9e:	494c      	ldr	r1, [pc, #304]	; (8004fd0 <OTM8009A_Init+0x450>)
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	f7fc f819 	bl	8000ed8 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8004ea6:	494b      	ldr	r1, [pc, #300]	; (8004fd4 <OTM8009A_Init+0x454>)
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	f7fc f815 	bl	8000ed8 <DSI_IO_WriteCmd>
 8004eae:	e093      	b.n	8004fd8 <OTM8009A_Init+0x458>
 8004eb0:	0801ff78 	.word	0x0801ff78
 8004eb4:	0801ffde 	.word	0x0801ffde
 8004eb8:	0801ff8e 	.word	0x0801ff8e
 8004ebc:	08020064 	.word	0x08020064
 8004ec0:	0801ffa4 	.word	0x0801ffa4
 8004ec4:	0801ffba 	.word	0x0801ffba
 8004ec8:	0801ffd0 	.word	0x0801ffd0
 8004ecc:	0801ffd6 	.word	0x0801ffd6
 8004ed0:	0801ffd8 	.word	0x0801ffd8
 8004ed4:	0801ffda 	.word	0x0801ffda
 8004ed8:	0801ffdc 	.word	0x0801ffdc
 8004edc:	0801ff7a 	.word	0x0801ff7a
 8004ee0:	0801ff7c 	.word	0x0801ff7c
 8004ee4:	0801ff7e 	.word	0x0801ff7e
 8004ee8:	0801ff80 	.word	0x0801ff80
 8004eec:	0801ff82 	.word	0x0801ff82
 8004ef0:	0801ff84 	.word	0x0801ff84
 8004ef4:	0801ff86 	.word	0x0801ff86
 8004ef8:	0801ff88 	.word	0x0801ff88
 8004efc:	0801ff8a 	.word	0x0801ff8a
 8004f00:	0801ff8c 	.word	0x0801ff8c
 8004f04:	080200e2 	.word	0x080200e2
 8004f08:	0801ff90 	.word	0x0801ff90
 8004f0c:	0801ff92 	.word	0x0801ff92
 8004f10:	0801ff94 	.word	0x0801ff94
 8004f14:	0801ff96 	.word	0x0801ff96
 8004f18:	0801ff98 	.word	0x0801ff98
 8004f1c:	0801ff9a 	.word	0x0801ff9a
 8004f20:	0801ff9c 	.word	0x0801ff9c
 8004f24:	0801ff9e 	.word	0x0801ff9e
 8004f28:	0801ffa0 	.word	0x0801ffa0
 8004f2c:	080200e5 	.word	0x080200e5
 8004f30:	080200e8 	.word	0x080200e8
 8004f34:	0801ffa2 	.word	0x0801ffa2
 8004f38:	080200ef 	.word	0x080200ef
 8004f3c:	0801ffa6 	.word	0x0801ffa6
 8004f40:	080200fe 	.word	0x080200fe
 8004f44:	0801ffa8 	.word	0x0801ffa8
 8004f48:	0801ffe2 	.word	0x0801ffe2
 8004f4c:	0801ffaa 	.word	0x0801ffaa
 8004f50:	0801ffc8 	.word	0x0801ffc8
 8004f54:	0801ffed 	.word	0x0801ffed
 8004f58:	0801ffac 	.word	0x0801ffac
 8004f5c:	0801fff8 	.word	0x0801fff8
 8004f60:	08020008 	.word	0x08020008
 8004f64:	08020018 	.word	0x08020018
 8004f68:	08020023 	.word	0x08020023
 8004f6c:	08020033 	.word	0x08020033
 8004f70:	0801ffae 	.word	0x0801ffae
 8004f74:	08020043 	.word	0x08020043
 8004f78:	0801ffb0 	.word	0x0801ffb0
 8004f7c:	0802004e 	.word	0x0802004e
 8004f80:	08020059 	.word	0x08020059
 8004f84:	08020067 	.word	0x08020067
 8004f88:	08020077 	.word	0x08020077
 8004f8c:	08020087 	.word	0x08020087
 8004f90:	08020092 	.word	0x08020092
 8004f94:	080200a2 	.word	0x080200a2
 8004f98:	0801ffca 	.word	0x0801ffca
 8004f9c:	0801ffcc 	.word	0x0801ffcc
 8004fa0:	0801ffce 	.word	0x0801ffce
 8004fa4:	0801ffd2 	.word	0x0801ffd2
 8004fa8:	0801ffd4 	.word	0x0801ffd4
 8004fac:	080200b2 	.word	0x080200b2
 8004fb0:	080200c0 	.word	0x080200c0
 8004fb4:	080200d1 	.word	0x080200d1
 8004fb8:	0801ffb2 	.word	0x0801ffb2
 8004fbc:	0801ffb4 	.word	0x0801ffb4
 8004fc0:	0801ffb8 	.word	0x0801ffb8
 8004fc4:	080200b6 	.word	0x080200b6
 8004fc8:	080200bb 	.word	0x080200bb
 8004fcc:	0801ffbc 	.word	0x0801ffbc
 8004fd0:	0801ffbe 	.word	0x0801ffbe
 8004fd4:	0801ffc0 	.word	0x0801ffc0

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8004fd8:	490a      	ldr	r1, [pc, #40]	; (8005004 <OTM8009A_Init+0x484>)
 8004fda:	2000      	movs	r0, #0
 8004fdc:	f7fb ff7c 	bl	8000ed8 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8004fe0:	4909      	ldr	r1, [pc, #36]	; (8005008 <OTM8009A_Init+0x488>)
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	f7fb ff78 	bl	8000ed8 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8004fe8:	4908      	ldr	r1, [pc, #32]	; (800500c <OTM8009A_Init+0x48c>)
 8004fea:	2000      	movs	r0, #0
 8004fec:	f7fb ff74 	bl	8000ed8 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8004ff0:	4907      	ldr	r1, [pc, #28]	; (8005010 <OTM8009A_Init+0x490>)
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	f7fb ff70 	bl	8000ed8 <DSI_IO_WriteCmd>

  return 0;
}
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	bd38      	pop	{r3, r4, r5, pc}
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8004ffc:	4905      	ldr	r1, [pc, #20]	; (8005014 <OTM8009A_Init+0x494>)
 8004ffe:	4620      	mov	r0, r4
 8005000:	e739      	b.n	8004e76 <OTM8009A_Init+0x2f6>
 8005002:	bf00      	nop
 8005004:	0801ffc2 	.word	0x0801ffc2
 8005008:	0801ffc4 	.word	0x0801ffc4
 800500c:	0801ff78 	.word	0x0801ff78
 8005010:	0801ffc6 	.word	0x0801ffc6
 8005014:	0801ffb6 	.word	0x0801ffb6

08005018 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005018:	490f      	ldr	r1, [pc, #60]	; (8005058 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800501a:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800501c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8005028:	4b0c      	ldr	r3, [pc, #48]	; (800505c <SystemInit+0x44>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	f042 0201 	orr.w	r2, r2, #1
 8005030:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005032:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800503a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800503e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005040:	4a07      	ldr	r2, [pc, #28]	; (8005060 <SystemInit+0x48>)
 8005042:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800504a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800504c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800504e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005052:	608b      	str	r3, [r1, #8]
#endif
}
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	e000ed00 	.word	0xe000ed00
 800505c:	40023800 	.word	0x40023800
 8005060:	24003010 	.word	0x24003010

08005064 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005064:	4a07      	ldr	r2, [pc, #28]	; (8005084 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005066:	2003      	movs	r0, #3
{
 8005068:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800506a:	6813      	ldr	r3, [r2, #0]
 800506c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005070:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005072:	f000 f82d 	bl	80050d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005076:	2000      	movs	r0, #0
 8005078:	f7fe ffd6 	bl	8004028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800507c:	f7fe fd20 	bl	8003ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8005080:	2000      	movs	r0, #0
 8005082:	bd08      	pop	{r3, pc}
 8005084:	40023c00 	.word	0x40023c00

08005088 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005088:	4a03      	ldr	r2, [pc, #12]	; (8005098 <HAL_IncTick+0x10>)
 800508a:	4b04      	ldr	r3, [pc, #16]	; (800509c <HAL_IncTick+0x14>)
 800508c:	6811      	ldr	r1, [r2, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	440b      	add	r3, r1
 8005092:	6013      	str	r3, [r2, #0]
}
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	2000edfc 	.word	0x2000edfc
 800509c:	20000064 	.word	0x20000064

080050a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80050a0:	4b01      	ldr	r3, [pc, #4]	; (80050a8 <HAL_GetTick+0x8>)
 80050a2:	6818      	ldr	r0, [r3, #0]
}
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	2000edfc 	.word	0x2000edfc

080050ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050ac:	b538      	push	{r3, r4, r5, lr}
 80050ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80050b0:	f7ff fff6 	bl	80050a0 <HAL_GetTick>
 80050b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050b6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80050b8:	bf1e      	ittt	ne
 80050ba:	4b04      	ldrne	r3, [pc, #16]	; (80050cc <HAL_Delay+0x20>)
 80050bc:	781b      	ldrbne	r3, [r3, #0]
 80050be:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80050c0:	f7ff ffee 	bl	80050a0 <HAL_GetTick>
 80050c4:	1b43      	subs	r3, r0, r5
 80050c6:	42a3      	cmp	r3, r4
 80050c8:	d3fa      	bcc.n	80050c0 <HAL_Delay+0x14>
  {
  }
}
 80050ca:	bd38      	pop	{r3, r4, r5, pc}
 80050cc:	20000064 	.word	0x20000064

080050d0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050d0:	4907      	ldr	r1, [pc, #28]	; (80050f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050d2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050d4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050de:	0412      	lsls	r2, r2, #16
 80050e0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80050ec:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80050ee:	4770      	bx	lr
 80050f0:	e000ed00 	.word	0xe000ed00

080050f4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050f4:	4b16      	ldr	r3, [pc, #88]	; (8005150 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050f6:	b530      	push	{r4, r5, lr}
 80050f8:	68dc      	ldr	r4, [r3, #12]
 80050fa:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050fe:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005102:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005104:	2d04      	cmp	r5, #4
 8005106:	bf28      	it	cs
 8005108:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800510a:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800510c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005110:	bf8c      	ite	hi
 8005112:	3c03      	subhi	r4, #3
 8005114:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005116:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 800511a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800511c:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005120:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005124:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005128:	fa01 f104 	lsl.w	r1, r1, r4
 800512c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005130:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005134:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8005136:	db06      	blt.n	8005146 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005138:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800513c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005140:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005144:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005146:	f000 000f 	and.w	r0, r0, #15
 800514a:	4a02      	ldr	r2, [pc, #8]	; (8005154 <HAL_NVIC_SetPriority+0x60>)
 800514c:	5413      	strb	r3, [r2, r0]
 800514e:	e7f9      	b.n	8005144 <HAL_NVIC_SetPriority+0x50>
 8005150:	e000ed00 	.word	0xe000ed00
 8005154:	e000ed14 	.word	0xe000ed14

08005158 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005158:	2800      	cmp	r0, #0
 800515a:	db08      	blt.n	800516e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800515c:	0942      	lsrs	r2, r0, #5
 800515e:	2301      	movs	r3, #1
 8005160:	f000 001f 	and.w	r0, r0, #31
 8005164:	fa03 f000 	lsl.w	r0, r3, r0
 8005168:	4b01      	ldr	r3, [pc, #4]	; (8005170 <HAL_NVIC_EnableIRQ+0x18>)
 800516a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800516e:	4770      	bx	lr
 8005170:	e000e100 	.word	0xe000e100

08005174 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005174:	2800      	cmp	r0, #0
 8005176:	db0d      	blt.n	8005194 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005178:	0943      	lsrs	r3, r0, #5
 800517a:	2201      	movs	r2, #1
 800517c:	f000 001f 	and.w	r0, r0, #31
 8005180:	3320      	adds	r3, #32
 8005182:	fa02 f000 	lsl.w	r0, r2, r0
 8005186:	4a04      	ldr	r2, [pc, #16]	; (8005198 <HAL_NVIC_DisableIRQ+0x24>)
 8005188:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800518c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005190:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	e000e100 	.word	0xe000e100

0800519c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800519c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80051a0:	4b04      	ldr	r3, [pc, #16]	; (80051b4 <HAL_MPU_Disable+0x18>)
 80051a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80051a8:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	e000ed00 	.word	0xe000ed00

080051b8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80051b8:	4b06      	ldr	r3, [pc, #24]	; (80051d4 <HAL_MPU_Enable+0x1c>)
 80051ba:	f040 0001 	orr.w	r0, r0, #1
 80051be:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80051c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80051c8:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80051ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80051ce:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80051d2:	4770      	bx	lr
 80051d4:	e000ed00 	.word	0xe000ed00

080051d8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80051d8:	7843      	ldrb	r3, [r0, #1]
 80051da:	4a14      	ldr	r2, [pc, #80]	; (800522c <HAL_MPU_ConfigRegion+0x54>)
{
 80051dc:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 80051de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 80051e2:	7801      	ldrb	r1, [r0, #0]
 80051e4:	b1e9      	cbz	r1, 8005222 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80051e6:	6843      	ldr	r3, [r0, #4]
 80051e8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80051ec:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80051ee:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80051f0:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80051f2:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80051f6:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80051f8:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80051fa:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80051fe:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005200:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005204:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005206:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800520a:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800520c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005210:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005212:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005216:	7a01      	ldrb	r1, [r0, #8]
 8005218:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800521c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8005220:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8005222:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8005226:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 800522a:	e7f9      	b.n	8005220 <HAL_MPU_ConfigRegion+0x48>
 800522c:	e000ed00 	.word	0xe000ed00

08005230 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005230:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005232:	4604      	mov	r4, r0
 8005234:	b908      	cbnz	r0, 800523a <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8005236:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8005238:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800523a:	7f43      	ldrb	r3, [r0, #29]
 800523c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005240:	b913      	cbnz	r3, 8005248 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8005242:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8005244:	f7fe fc5a 	bl	8003afc <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005248:	2302      	movs	r3, #2
 800524a:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800524c:	7923      	ldrb	r3, [r4, #4]
 800524e:	b9e3      	cbnz	r3, 800528a <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005250:	6823      	ldr	r3, [r4, #0]
 8005252:	4a13      	ldr	r2, [pc, #76]	; (80052a0 <HAL_CRC_Init+0x70>)
 8005254:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	f022 0218 	bic.w	r2, r2, #24
 800525c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800525e:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005260:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005262:	b9d2      	cbnz	r2, 800529a <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005264:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005268:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800526a:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800526c:	689a      	ldr	r2, [r3, #8]
 800526e:	6961      	ldr	r1, [r4, #20]
 8005270:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005274:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005276:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005278:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005280:	430a      	orrs	r2, r1
 8005282:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8005284:	2301      	movs	r3, #1
 8005286:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8005288:	e7d6      	b.n	8005238 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800528a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800528e:	4620      	mov	r0, r4
 8005290:	f000 f808 	bl	80052a4 <HAL_CRCEx_Polynomial_Set>
 8005294:	2800      	cmp	r0, #0
 8005296:	d0e2      	beq.n	800525e <HAL_CRC_Init+0x2e>
 8005298:	e7cd      	b.n	8005236 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800529a:	6922      	ldr	r2, [r4, #16]
 800529c:	e7e4      	b.n	8005268 <HAL_CRC_Init+0x38>
 800529e:	bf00      	nop
 80052a0:	04c11db7 	.word	0x04c11db7

080052a4 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80052a4:	231f      	movs	r3, #31
{
 80052a6:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80052a8:	3b01      	subs	r3, #1
 80052aa:	d31c      	bcc.n	80052e6 <HAL_CRCEx_Polynomial_Set+0x42>
 80052ac:	fa21 f403 	lsr.w	r4, r1, r3
 80052b0:	07e4      	lsls	r4, r4, #31
 80052b2:	d5f9      	bpl.n	80052a8 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80052b4:	2a10      	cmp	r2, #16
 80052b6:	d012      	beq.n	80052de <HAL_CRCEx_Polynomial_Set+0x3a>
 80052b8:	d804      	bhi.n	80052c4 <HAL_CRCEx_Polynomial_Set+0x20>
 80052ba:	b13a      	cbz	r2, 80052cc <HAL_CRCEx_Polynomial_Set+0x28>
 80052bc:	2a08      	cmp	r2, #8
 80052be:	d010      	beq.n	80052e2 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 80052c0:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80052c2:	e00b      	b.n	80052dc <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 80052c4:	2a18      	cmp	r2, #24
 80052c6:	d1fb      	bne.n	80052c0 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 80052c8:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80052ca:	d8f9      	bhi.n	80052c0 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80052cc:	6800      	ldr	r0, [r0, #0]
 80052ce:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80052d0:	6883      	ldr	r3, [r0, #8]
 80052d2:	f023 0318 	bic.w	r3, r3, #24
 80052d6:	431a      	orrs	r2, r3
 80052d8:	6082      	str	r2, [r0, #8]
 80052da:	2000      	movs	r0, #0
}
 80052dc:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80052de:	2b07      	cmp	r3, #7
 80052e0:	e7f3      	b.n	80052ca <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 80052e2:	2b0f      	cmp	r3, #15
 80052e4:	e7f1      	b.n	80052ca <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 80052e6:	2a00      	cmp	r2, #0
 80052e8:	d1ea      	bne.n	80052c0 <HAL_CRCEx_Polynomial_Set+0x1c>
 80052ea:	e7ef      	b.n	80052cc <HAL_CRCEx_Polynomial_Set+0x28>

080052ec <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80052ec:	6803      	ldr	r3, [r0, #0]
{
 80052ee:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80052f0:	2018      	movs	r0, #24
 80052f2:	b2d9      	uxtb	r1, r3
 80052f4:	3910      	subs	r1, #16
 80052f6:	fbb1 f0f0 	udiv	r0, r1, r0
{
 80052fa:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80052fc:	4c05      	ldr	r4, [pc, #20]	; (8005314 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80052fe:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005300:	5c20      	ldrb	r0, [r4, r0]
 8005302:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005304:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8005308:	f020 0003 	bic.w	r0, r0, #3
 800530c:	bf88      	it	hi
 800530e:	3004      	addhi	r0, #4
 8005310:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8005312:	bd10      	pop	{r4, pc}
 8005314:	08020125 	.word	0x08020125

08005318 <HAL_DMA_Init>:
{
 8005318:	b570      	push	{r4, r5, r6, lr}
 800531a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800531c:	f7ff fec0 	bl	80050a0 <HAL_GetTick>
 8005320:	4605      	mov	r5, r0
  if(hdma == NULL)
 8005322:	2c00      	cmp	r4, #0
 8005324:	d073      	beq.n	800540e <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8005326:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 8005328:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800532a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800532e:	2300      	movs	r3, #0
 8005330:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8005334:	6813      	ldr	r3, [r2, #0]
 8005336:	f023 0301 	bic.w	r3, r3, #1
 800533a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800533c:	6821      	ldr	r1, [r4, #0]
 800533e:	680b      	ldr	r3, [r1, #0]
 8005340:	07d8      	lsls	r0, r3, #31
 8005342:	d42f      	bmi.n	80053a4 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8005344:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005346:	4d33      	ldr	r5, [pc, #204]	; (8005414 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005348:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800534a:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800534c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8005350:	4313      	orrs	r3, r2
 8005352:	68e2      	ldr	r2, [r4, #12]
 8005354:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005356:	6922      	ldr	r2, [r4, #16]
 8005358:	4313      	orrs	r3, r2
 800535a:	6962      	ldr	r2, [r4, #20]
 800535c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800535e:	69e2      	ldr	r2, [r4, #28]
 8005360:	4303      	orrs	r3, r0
 8005362:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8005364:	6a22      	ldr	r2, [r4, #32]
 8005366:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005368:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800536a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800536c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005370:	bf02      	ittt	eq
 8005372:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8005376:	4335      	orreq	r5, r6
 8005378:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800537a:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 800537c:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800537e:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005380:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8005384:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005388:	d133      	bne.n	80053f2 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 800538a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800538c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800538e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005390:	b37d      	cbz	r5, 80053f2 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005392:	b990      	cbnz	r0, 80053ba <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8005394:	2a01      	cmp	r2, #1
 8005396:	d021      	beq.n	80053dc <HAL_DMA_Init+0xc4>
 8005398:	f032 0202 	bics.w	r2, r2, #2
 800539c:	d129      	bne.n	80053f2 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800539e:	01ea      	lsls	r2, r5, #7
 80053a0:	d527      	bpl.n	80053f2 <HAL_DMA_Init+0xda>
 80053a2:	e01e      	b.n	80053e2 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053a4:	f7ff fe7c 	bl	80050a0 <HAL_GetTick>
 80053a8:	1b40      	subs	r0, r0, r5
 80053aa:	2805      	cmp	r0, #5
 80053ac:	d9c6      	bls.n	800533c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053ae:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053b0:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053b2:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80053b4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80053b8:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053ba:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80053be:	d114      	bne.n	80053ea <HAL_DMA_Init+0xd2>
    switch (tmp)
 80053c0:	2a03      	cmp	r2, #3
 80053c2:	d816      	bhi.n	80053f2 <HAL_DMA_Init+0xda>
 80053c4:	a001      	add	r0, pc, #4	; (adr r0, 80053cc <HAL_DMA_Init+0xb4>)
 80053c6:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80053ca:	bf00      	nop
 80053cc:	080053e3 	.word	0x080053e3
 80053d0:	0800539f 	.word	0x0800539f
 80053d4:	080053e3 	.word	0x080053e3
 80053d8:	080053dd 	.word	0x080053dd
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053dc:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80053e0:	d107      	bne.n	80053f2 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80053e2:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 80053e4:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80053e6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80053e8:	e7e4      	b.n	80053b4 <HAL_DMA_Init+0x9c>
    switch (tmp)
 80053ea:	2a02      	cmp	r2, #2
 80053ec:	d9f9      	bls.n	80053e2 <HAL_DMA_Init+0xca>
 80053ee:	2a03      	cmp	r2, #3
 80053f0:	d0d5      	beq.n	800539e <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 80053f2:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80053f4:	4620      	mov	r0, r4
 80053f6:	f7ff ff79 	bl	80052ec <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053fa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80053fc:	233f      	movs	r3, #63	; 0x3f
 80053fe:	4093      	lsls	r3, r2
 8005400:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005402:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8005404:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005406:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8005408:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800540c:	e7d4      	b.n	80053b8 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 800540e:	2001      	movs	r0, #1
 8005410:	e7d2      	b.n	80053b8 <HAL_DMA_Init+0xa0>
 8005412:	bf00      	nop
 8005414:	e010803f 	.word	0xe010803f

08005418 <HAL_DMA_Start_IT>:
{
 8005418:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800541a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800541e:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8005420:	2c01      	cmp	r4, #1
 8005422:	d034      	beq.n	800548e <HAL_DMA_Start_IT+0x76>
 8005424:	2401      	movs	r4, #1
 8005426:	2500      	movs	r5, #0
 8005428:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800542c:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8005430:	2c01      	cmp	r4, #1
 8005432:	f04f 0402 	mov.w	r4, #2
 8005436:	d128      	bne.n	800548a <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8005438:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800543c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800543e:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005440:	6825      	ldr	r5, [r4, #0]
 8005442:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8005446:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8005448:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800544a:	6883      	ldr	r3, [r0, #8]
 800544c:	2b40      	cmp	r3, #64	; 0x40
 800544e:	d119      	bne.n	8005484 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8005450:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8005452:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005454:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005456:	233f      	movs	r3, #63	; 0x3f
 8005458:	4093      	lsls	r3, r2
 800545a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	f043 0316 	orr.w	r3, r3, #22
 8005462:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005464:	6963      	ldr	r3, [r4, #20]
 8005466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546a:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800546c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800546e:	b11b      	cbz	r3, 8005478 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	f043 0308 	orr.w	r3, r3, #8
 8005476:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8005478:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800547a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800547c:	f043 0301 	orr.w	r3, r3, #1
 8005480:	6023      	str	r3, [r4, #0]
}
 8005482:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8005484:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8005486:	60e2      	str	r2, [r4, #12]
 8005488:	e7e4      	b.n	8005454 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 800548a:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800548e:	2002      	movs	r0, #2
 8005490:	e7f7      	b.n	8005482 <HAL_DMA_Start_IT+0x6a>

08005492 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005492:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8005496:	2b02      	cmp	r3, #2
 8005498:	d003      	beq.n	80054a2 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800549a:	2380      	movs	r3, #128	; 0x80
 800549c:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800549e:	2001      	movs	r0, #1
 80054a0:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80054a2:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80054a4:	2305      	movs	r3, #5
 80054a6:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 80054aa:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80054ac:	6813      	ldr	r3, [r2, #0]
 80054ae:	f023 0301 	bic.w	r3, r3, #1
 80054b2:	6013      	str	r3, [r2, #0]
}
 80054b4:	4770      	bx	lr
	...

080054b8 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 80054b8:	2300      	movs	r3, #0
{
 80054ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 80054bc:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80054be:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 80054c0:	4b5b      	ldr	r3, [pc, #364]	; (8005630 <HAL_DMA_IRQHandler+0x178>)
{
 80054c2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054c4:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 80054c6:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80054c8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80054ca:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80054cc:	409a      	lsls	r2, r3
 80054ce:	4232      	tst	r2, r6
 80054d0:	d00c      	beq.n	80054ec <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80054d2:	6801      	ldr	r1, [r0, #0]
 80054d4:	6808      	ldr	r0, [r1, #0]
 80054d6:	0740      	lsls	r0, r0, #29
 80054d8:	d508      	bpl.n	80054ec <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80054da:	6808      	ldr	r0, [r1, #0]
 80054dc:	f020 0004 	bic.w	r0, r0, #4
 80054e0:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80054e2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80054e4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80054e6:	f042 0201 	orr.w	r2, r2, #1
 80054ea:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80054ec:	2201      	movs	r2, #1
 80054ee:	409a      	lsls	r2, r3
 80054f0:	4232      	tst	r2, r6
 80054f2:	d008      	beq.n	8005506 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80054f4:	6821      	ldr	r1, [r4, #0]
 80054f6:	6949      	ldr	r1, [r1, #20]
 80054f8:	0609      	lsls	r1, r1, #24
 80054fa:	d504      	bpl.n	8005506 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80054fc:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80054fe:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005500:	f042 0202 	orr.w	r2, r2, #2
 8005504:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005506:	2204      	movs	r2, #4
 8005508:	409a      	lsls	r2, r3
 800550a:	4232      	tst	r2, r6
 800550c:	d008      	beq.n	8005520 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800550e:	6821      	ldr	r1, [r4, #0]
 8005510:	6809      	ldr	r1, [r1, #0]
 8005512:	0788      	lsls	r0, r1, #30
 8005514:	d504      	bpl.n	8005520 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005516:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005518:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800551a:	f042 0204 	orr.w	r2, r2, #4
 800551e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005520:	2210      	movs	r2, #16
 8005522:	409a      	lsls	r2, r3
 8005524:	4232      	tst	r2, r6
 8005526:	d010      	beq.n	800554a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	6819      	ldr	r1, [r3, #0]
 800552c:	0709      	lsls	r1, r1, #28
 800552e:	d50c      	bpl.n	800554a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005530:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	0350      	lsls	r0, r2, #13
 8005536:	d537      	bpl.n	80055a8 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	0319      	lsls	r1, r3, #12
 800553c:	d401      	bmi.n	8005542 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800553e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005540:	e000      	b.n	8005544 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005542:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8005544:	b10b      	cbz	r3, 800554a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8005546:	4620      	mov	r0, r4
 8005548:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800554a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800554c:	2220      	movs	r2, #32
 800554e:	408a      	lsls	r2, r1
 8005550:	4232      	tst	r2, r6
 8005552:	d03a      	beq.n	80055ca <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	6818      	ldr	r0, [r3, #0]
 8005558:	06c6      	lsls	r6, r0, #27
 800555a:	d536      	bpl.n	80055ca <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800555c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800555e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8005562:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005564:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005566:	d127      	bne.n	80055b8 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005568:	f022 0216 	bic.w	r2, r2, #22
 800556c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800556e:	695a      	ldr	r2, [r3, #20]
 8005570:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005574:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005576:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005578:	b90a      	cbnz	r2, 800557e <HAL_DMA_IRQHandler+0xc6>
 800557a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800557c:	b11a      	cbz	r2, 8005586 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	f022 0208 	bic.w	r2, r2, #8
 8005584:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005586:	233f      	movs	r3, #63	; 0x3f
 8005588:	408b      	lsls	r3, r1
 800558a:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800558c:	2301      	movs	r3, #1
 800558e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8005592:	2300      	movs	r3, #0
 8005594:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8005598:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800559a:	2b00      	cmp	r3, #0
 800559c:	d045      	beq.n	800562a <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 800559e:	4620      	mov	r0, r4
}
 80055a0:	b003      	add	sp, #12
 80055a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80055a6:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	05d2      	lsls	r2, r2, #23
 80055ac:	d4c7      	bmi.n	800553e <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	f022 0208 	bic.w	r2, r2, #8
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	e7c2      	b.n	800553e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055b8:	0350      	lsls	r0, r2, #13
 80055ba:	d527      	bpl.n	800560c <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	0319      	lsls	r1, r3, #12
 80055c0:	d431      	bmi.n	8005626 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 80055c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80055c4:	b10b      	cbz	r3, 80055ca <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 80055c6:	4620      	mov	r0, r4
 80055c8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80055ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80055cc:	b36b      	cbz	r3, 800562a <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80055ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80055d0:	07da      	lsls	r2, r3, #31
 80055d2:	d519      	bpl.n	8005608 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 80055d4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
 80055d8:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 80055da:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 80055de:	2305      	movs	r3, #5
 80055e0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80055e4:	6813      	ldr	r3, [r2, #0]
 80055e6:	f023 0301 	bic.w	r3, r3, #1
 80055ea:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80055ec:	9b01      	ldr	r3, [sp, #4]
 80055ee:	3301      	adds	r3, #1
 80055f0:	42bb      	cmp	r3, r7
 80055f2:	9301      	str	r3, [sp, #4]
 80055f4:	d802      	bhi.n	80055fc <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80055f6:	6813      	ldr	r3, [r2, #0]
 80055f8:	07db      	lsls	r3, r3, #31
 80055fa:	d4f7      	bmi.n	80055ec <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 80055fc:	2301      	movs	r3, #1
 80055fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8005602:	2300      	movs	r3, #0
 8005604:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8005608:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800560a:	e7c6      	b.n	800559a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8005612:	d108      	bne.n	8005626 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005614:	6819      	ldr	r1, [r3, #0]
 8005616:	f021 0110 	bic.w	r1, r1, #16
 800561a:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800561c:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800561e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005622:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8005626:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005628:	e7cc      	b.n	80055c4 <HAL_DMA_IRQHandler+0x10c>
}
 800562a:	b003      	add	sp, #12
 800562c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800562e:	bf00      	nop
 8005630:	20000060 	.word	0x20000060

08005634 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005634:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8005636:	4770      	bx	lr

08005638 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005638:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800563a:	4604      	mov	r4, r0
 800563c:	b380      	cbz	r0, 80056a0 <HAL_DMA2D_Init+0x68>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800563e:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8005642:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005646:	b91b      	cbnz	r3, 8005650 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005648:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800564c:	f7fe fa6c 	bl	8003b28 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005650:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005652:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005654:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005660:	430a      	orrs	r2, r1

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005662:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005664:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005668:	f022 0207 	bic.w	r2, r2, #7
 800566c:	430a      	orrs	r2, r1

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800566e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005670:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005674:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8005678:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800567c:	430a      	orrs	r2, r1
 800567e:	641a      	str	r2, [r3, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005680:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005682:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8005686:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800568a:	0552      	lsls	r2, r2, #21
 800568c:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005690:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005692:	430a      	orrs	r2, r1
 8005694:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005696:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005698:	6560      	str	r0, [r4, #84]	; 0x54
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800569a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 800569e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80056a0:	2001      	movs	r0, #1
 80056a2:	e7fc      	b.n	800569e <HAL_DMA2D_Init+0x66>

080056a4 <HAL_DMA2D_LineEventCallback>:
 80056a4:	4770      	bx	lr

080056a6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 80056a6:	4770      	bx	lr

080056a8 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80056a8:	6803      	ldr	r3, [r0, #0]
{
 80056aa:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80056ac:	685e      	ldr	r6, [r3, #4]
{
 80056ae:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80056b0:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80056b2:	07f2      	lsls	r2, r6, #31
 80056b4:	d514      	bpl.n	80056e0 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80056b6:	05e9      	lsls	r1, r5, #23
 80056b8:	d512      	bpl.n	80056e0 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056c0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80056c2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80056c4:	f042 0201 	orr.w	r2, r2, #1
 80056c8:	6542      	str	r2, [r0, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80056ca:	2201      	movs	r2, #1
 80056cc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80056ce:	2304      	movs	r3, #4
 80056d0:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80056d4:	2300      	movs	r3, #0
 80056d6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 80056da:	69c3      	ldr	r3, [r0, #28]
 80056dc:	b103      	cbz	r3, 80056e0 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80056de:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80056e0:	06b2      	lsls	r2, r6, #26
 80056e2:	d516      	bpl.n	8005712 <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80056e4:	04ab      	lsls	r3, r5, #18
 80056e6:	d514      	bpl.n	8005712 <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80056e8:	6823      	ldr	r3, [r4, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056f0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80056f2:	2220      	movs	r2, #32
 80056f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80056f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80056f8:	f043 0302 	orr.w	r3, r3, #2
 80056fc:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80056fe:	2304      	movs	r3, #4
 8005700:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005704:	2300      	movs	r3, #0
 8005706:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800570a:	69e3      	ldr	r3, [r4, #28]
 800570c:	b10b      	cbz	r3, 8005712 <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800570e:	4620      	mov	r0, r4
 8005710:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005712:	0730      	lsls	r0, r6, #28
 8005714:	d516      	bpl.n	8005744 <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005716:	0529      	lsls	r1, r5, #20
 8005718:	d514      	bpl.n	8005744 <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005722:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005724:	2208      	movs	r2, #8
 8005726:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005728:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800572a:	f043 0304 	orr.w	r3, r3, #4
 800572e:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005730:	2304      	movs	r3, #4
 8005732:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005736:	2300      	movs	r3, #0
 8005738:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800573c:	69e3      	ldr	r3, [r4, #28]
 800573e:	b10b      	cbz	r3, 8005744 <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005740:	4620      	mov	r0, r4
 8005742:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005744:	0772      	lsls	r2, r6, #29
 8005746:	d50b      	bpl.n	8005760 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005748:	056b      	lsls	r3, r5, #21
 800574a:	d509      	bpl.n	8005760 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800574c:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800574e:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005756:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005758:	2204      	movs	r2, #4
 800575a:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800575c:	f7ff ffa2 	bl	80056a4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005760:	07b0      	lsls	r0, r6, #30
 8005762:	d514      	bpl.n	800578e <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005764:	05a9      	lsls	r1, r5, #22
 8005766:	d512      	bpl.n	800578e <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005770:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005772:	2202      	movs	r2, #2
 8005774:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005776:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005778:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800577a:	2301      	movs	r3, #1
 800577c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005780:	2300      	movs	r3, #0
 8005782:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 8005786:	69a3      	ldr	r3, [r4, #24]
 8005788:	b10b      	cbz	r3, 800578e <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800578a:	4620      	mov	r0, r4
 800578c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800578e:	06f2      	lsls	r2, r6, #27
 8005790:	d513      	bpl.n	80057ba <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005792:	04eb      	lsls	r3, r5, #19
 8005794:	d511      	bpl.n	80057ba <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005796:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005798:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057a0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80057a2:	2210      	movs	r2, #16
 80057a4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80057a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80057a8:	6563      	str	r3, [r4, #84]	; 0x54
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80057aa:	2301      	movs	r3, #1
 80057ac:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      __HAL_UNLOCK(hdma2d);
 80057b0:	2300      	movs	r3, #0
 80057b2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80057b6:	f7ff ff76 	bl	80056a6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80057ba:	bd70      	pop	{r4, r5, r6, pc}

080057bc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80057bc:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80057be:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	f04f 0302 	mov.w	r3, #2
 80057c8:	d031      	beq.n	800582e <HAL_DMA2D_ConfigLayer+0x72>

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80057ca:	2418      	movs	r4, #24
  __HAL_LOCK(hdma2d);
 80057cc:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80057ce:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80057d2:	fb04 0401 	mla	r4, r4, r1, r0
  __HAL_LOCK(hdma2d);
 80057d6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80057da:	6b22      	ldr	r2, [r4, #48]	; 0x30
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80057dc:	e9d4 5609 	ldrd	r5, r6, [r4, #36]	; 0x24
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80057e0:	0513      	lsls	r3, r2, #20
 80057e2:	6b62      	ldr	r2, [r4, #52]	; 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80057e4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80057e8:	4e1b      	ldr	r6, [pc, #108]	; (8005858 <HAL_DMA2D_ConfigLayer+0x9c>)
 80057ea:	432b      	orrs	r3, r5
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80057ec:	3d09      	subs	r5, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80057ee:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80057f2:	2d01      	cmp	r5, #1
 80057f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80057f6:	bf96      	itet	ls
 80057f8:	f002 427f 	andls.w	r2, r2, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80057fc:	ea43 6302 	orrhi.w	r3, r3, r2, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005800:	4313      	orrls	r3, r2

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005802:	6802      	ldr	r2, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005804:	b9a9      	cbnz	r1, 8005832 <HAL_DMA2D_ConfigLayer+0x76>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005806:	6a54      	ldr	r4, [r2, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005808:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800580a:	ea04 0406 	and.w	r4, r4, r6
 800580e:	ea43 0304 	orr.w	r3, r3, r4
 8005812:	6253      	str	r3, [r2, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005814:	6a03      	ldr	r3, [r0, #32]
 8005816:	6193      	str	r3, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005818:	d803      	bhi.n	8005822 <HAL_DMA2D_ConfigLayer+0x66>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800581a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800581c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005820:	6293      	str	r3, [r2, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005822:	2301      	movs	r3, #1
 8005824:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005828:	2300      	movs	r3, #0
 800582a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  __HAL_LOCK(hdma2d);
 800582e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8005830:	bd70      	pop	{r4, r5, r6, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005832:	69d4      	ldr	r4, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005834:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005836:	ea04 0406 	and.w	r4, r4, r6
 800583a:	ea43 0304 	orr.w	r3, r3, r4
 800583e:	61d3      	str	r3, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005840:	f04f 0318 	mov.w	r3, #24
 8005844:	fb03 0101 	mla	r1, r3, r1, r0
 8005848:	6a0b      	ldr	r3, [r1, #32]
 800584a:	6113      	str	r3, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800584c:	d8e9      	bhi.n	8005822 <HAL_DMA2D_ConfigLayer+0x66>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800584e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005850:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005854:	6213      	str	r3, [r2, #32]
 8005856:	e7e4      	b.n	8005822 <HAL_DMA2D_ConfigLayer+0x66>
 8005858:	00ccfff0 	.word	0x00ccfff0

0800585c <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800585c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005860:	4607      	mov	r7, r0
 8005862:	460d      	mov	r5, r1
 8005864:	4614      	mov	r4, r2
 8005866:	461e      	mov	r6, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005868:	f7ff fc1a 	bl	80050a0 <HAL_GetTick>
 800586c:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005872:	07d2      	lsls	r2, r2, #31
 8005874:	d50a      	bpl.n	800588c <DSI_ShortWrite+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8005876:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800587a:	9906      	ldr	r1, [sp, #24]

  return HAL_OK;
 800587c:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800587e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8005882:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8005886:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 8005888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800588c:	f7ff fc08 	bl	80050a0 <HAL_GetTick>
 8005890:	eba0 0008 	sub.w	r0, r0, r8
 8005894:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005898:	d9e9      	bls.n	800586e <DSI_ShortWrite+0x12>
      return HAL_TIMEOUT;
 800589a:	2003      	movs	r0, #3
 800589c:	e7f4      	b.n	8005888 <DSI_ShortWrite+0x2c>

0800589e <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800589e:	7c03      	ldrb	r3, [r0, #16]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d05c      	beq.n	800595e <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 80058a4:	2200      	movs	r2, #0
 80058a6:	6803      	ldr	r3, [r0, #0]
 80058a8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80058ac:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80058b0:	07ca      	lsls	r2, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 80058b2:	6181      	str	r1, [r0, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80058b4:	d507      	bpl.n	80058c6 <HAL_DSI_ConfigErrorMonitor+0x28>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80058b6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80058ba:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 80058be:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 80058c2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80058c6:	078a      	lsls	r2, r1, #30
 80058c8:	d505      	bpl.n	80058d6 <HAL_DSI_ConfigErrorMonitor+0x38>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80058ca:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80058ce:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80058d2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80058d6:	074a      	lsls	r2, r1, #29
 80058d8:	d505      	bpl.n	80058e6 <HAL_DSI_ConfigErrorMonitor+0x48>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80058da:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80058de:	f042 0201 	orr.w	r2, r2, #1
 80058e2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80058e6:	070a      	lsls	r2, r1, #28
 80058e8:	d505      	bpl.n	80058f6 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80058ea:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80058ee:	f042 0202 	orr.w	r2, r2, #2
 80058f2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80058f6:	06ca      	lsls	r2, r1, #27
 80058f8:	d505      	bpl.n	8005906 <HAL_DSI_ConfigErrorMonitor+0x68>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80058fa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80058fe:	f042 020c 	orr.w	r2, r2, #12
 8005902:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8005906:	068a      	lsls	r2, r1, #26
 8005908:	d505      	bpl.n	8005916 <HAL_DSI_ConfigErrorMonitor+0x78>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800590a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800590e:	f042 0210 	orr.w	r2, r2, #16
 8005912:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8005916:	064a      	lsls	r2, r1, #25
 8005918:	d505      	bpl.n	8005926 <HAL_DSI_ConfigErrorMonitor+0x88>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800591a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800591e:	f042 0220 	orr.w	r2, r2, #32
 8005922:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8005926:	060a      	lsls	r2, r1, #24
 8005928:	d505      	bpl.n	8005936 <HAL_DSI_ConfigErrorMonitor+0x98>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800592a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800592e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005932:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8005936:	05ca      	lsls	r2, r1, #23
 8005938:	d505      	bpl.n	8005946 <HAL_DSI_ConfigErrorMonitor+0xa8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800593a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800593e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005942:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8005946:	058a      	lsls	r2, r1, #22
 8005948:	d505      	bpl.n	8005956 <HAL_DSI_ConfigErrorMonitor+0xb8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800594a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800594e:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8005952:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8005956:	2300      	movs	r3, #0
 8005958:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800595a:	4618      	mov	r0, r3
 800595c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800595e:	2002      	movs	r0, #2
}
 8005960:	4770      	bx	lr
	...

08005964 <HAL_DSI_Init>:
{
 8005964:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005966:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8005968:	4604      	mov	r4, r0
 800596a:	2800      	cmp	r0, #0
 800596c:	f000 80a9 	beq.w	8005ac2 <HAL_DSI_Init+0x15e>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8005970:	7c43      	ldrb	r3, [r0, #17]
 8005972:	b90b      	cbnz	r3, 8005978 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8005974:	f7fe f8f8 	bl	8003b68 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8005978:	2303      	movs	r3, #3
 800597a:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800597c:	2300      	movs	r3, #0
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8005986:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800598a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800598e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005992:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800599a:	f7ff fb81 	bl	80050a0 <HAL_GetTick>
 800599e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80059a0:	6822      	ldr	r2, [r4, #0]
 80059a2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 80059a6:	04d9      	lsls	r1, r3, #19
 80059a8:	d57a      	bpl.n	8005aa0 <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80059aa:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 80059ae:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 80059b2:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 80059b6:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80059ba:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80059be:	e9d5 0300 	ldrd	r0, r3, [r5]
 80059c2:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80059c4:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80059c8:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80059ca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 80059ce:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80059d0:	430b      	orrs	r3, r1
 80059d2:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 80059d6:	2300      	movs	r3, #0
 80059d8:	9301      	str	r3, [sp, #4]
 80059da:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 80059de:	f043 0301 	orr.w	r3, r3, #1
 80059e2:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 80059e6:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	9301      	str	r3, [sp, #4]
 80059f0:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 80059f2:	f7ff fb5b 	bl	80050ac <HAL_Delay>
  tickstart = HAL_GetTick();
 80059f6:	f7ff fb53 	bl	80050a0 <HAL_GetTick>
 80059fa:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80059fc:	6823      	ldr	r3, [r4, #0]
 80059fe:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8005a02:	05d2      	lsls	r2, r2, #23
 8005a04:	d556      	bpl.n	8005ab4 <HAL_DSI_Init+0x150>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8005a06:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005a0a:	f246 10a8 	movw	r0, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8005a0e:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8005a10:	f042 0206 	orr.w	r2, r2, #6
 8005a14:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8005a18:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005a1c:	f022 0203 	bic.w	r2, r2, #3
 8005a20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8005a24:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005a28:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8005a2a:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8005a2c:	f042 0201 	orr.w	r2, r2, #1
 8005a30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8005a34:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8005a38:	f022 0203 	bic.w	r2, r2, #3
 8005a3c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8005a40:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8005a44:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8005a46:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8005a48:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005a52:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	430a      	orrs	r2, r1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005a58:	491b      	ldr	r1, [pc, #108]	; (8005ac8 <HAL_DSI_Init+0x164>)
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8005a5a:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005a5c:	686a      	ldr	r2, [r5, #4]
 8005a5e:	2a01      	cmp	r2, #1
 8005a60:	bf38      	it	cc
 8005a62:	2201      	movcc	r2, #1
 8005a64:	434a      	muls	r2, r1
 8005a66:	68a9      	ldr	r1, [r5, #8]
 8005a68:	f001 0103 	and.w	r1, r1, #3
 8005a6c:	408a      	lsls	r2, r1
 8005a6e:	6829      	ldr	r1, [r5, #0]
 8005a70:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 8005a72:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005a74:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8005a78:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8005a7c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005a80:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8005a84:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8005a8e:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8005a92:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 8005a96:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8005a98:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8005a9a:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8005a9c:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8005a9e:	e007      	b.n	8005ab0 <HAL_DSI_Init+0x14c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005aa0:	f7ff fafe 	bl	80050a0 <HAL_GetTick>
 8005aa4:	1b80      	subs	r0, r0, r6
 8005aa6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005aaa:	f67f af79 	bls.w	80059a0 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8005aae:	2003      	movs	r0, #3
}
 8005ab0:	b002      	add	sp, #8
 8005ab2:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005ab4:	f7ff faf4 	bl	80050a0 <HAL_GetTick>
 8005ab8:	1b80      	subs	r0, r0, r6
 8005aba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005abe:	d99d      	bls.n	80059fc <HAL_DSI_Init+0x98>
 8005ac0:	e7f5      	b.n	8005aae <HAL_DSI_Init+0x14a>
    return HAL_ERROR;
 8005ac2:	2001      	movs	r0, #1
 8005ac4:	e7f4      	b.n	8005ab0 <HAL_DSI_Init+0x14c>
 8005ac6:	bf00      	nop
 8005ac8:	003d0900 	.word	0x003d0900

08005acc <HAL_DSI_ErrorCallback>:
 8005acc:	4770      	bx	lr

08005ace <HAL_DSI_IRQHandler>:
{
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8005ace:	6803      	ldr	r3, [r0, #0]
 8005ad0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8005ad4:	07d1      	lsls	r1, r2, #31
{
 8005ad6:	b510      	push	{r4, lr}
 8005ad8:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8005ada:	d508      	bpl.n	8005aee <HAL_DSI_IRQHandler+0x20>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8005adc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005ae0:	07d2      	lsls	r2, r2, #31
 8005ae2:	d504      	bpl.n	8005aee <HAL_DSI_IRQHandler+0x20>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8005aea:	f7fb fa67 	bl	8000fbc <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8005af4:	0791      	lsls	r1, r2, #30
 8005af6:	d509      	bpl.n	8005b0c <HAL_DSI_IRQHandler+0x3e>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8005af8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005afc:	0792      	lsls	r2, r2, #30
 8005afe:	d505      	bpl.n	8005b0c <HAL_DSI_IRQHandler+0x3e>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8005b00:	2202      	movs	r2, #2
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8005b02:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8005b04:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8005b08:	f7fb fa8c 	bl	8001024 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8005b0c:	69a3      	ldr	r3, [r4, #24]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d04e      	beq.n	8005bb0 <HAL_DSI_IRQHandler+0xe2>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8005b12:	6821      	ldr	r1, [r4, #0]
 8005b14:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8005b18:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8005b1c:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8005b20:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8005b22:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8005b26:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8005b28:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8005b2a:	b119      	cbz	r1, 8005b34 <HAL_DSI_IRQHandler+0x66>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8005b2c:	6961      	ldr	r1, [r4, #20]
 8005b2e:	f041 0101 	orr.w	r1, r1, #1
 8005b32:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8005b34:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 8005b38:	d003      	beq.n	8005b42 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8005b3a:	6962      	ldr	r2, [r4, #20]
 8005b3c:	f042 0202 	orr.w	r2, r2, #2
 8005b40:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8005b42:	07d8      	lsls	r0, r3, #31
 8005b44:	d503      	bpl.n	8005b4e <HAL_DSI_IRQHandler+0x80>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8005b46:	6962      	ldr	r2, [r4, #20]
 8005b48:	f042 0204 	orr.w	r2, r2, #4
 8005b4c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8005b4e:	0799      	lsls	r1, r3, #30
 8005b50:	d503      	bpl.n	8005b5a <HAL_DSI_IRQHandler+0x8c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8005b52:	6962      	ldr	r2, [r4, #20]
 8005b54:	f042 0208 	orr.w	r2, r2, #8
 8005b58:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8005b5a:	f013 0f0c 	tst.w	r3, #12
 8005b5e:	d003      	beq.n	8005b68 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8005b60:	6962      	ldr	r2, [r4, #20]
 8005b62:	f042 0210 	orr.w	r2, r2, #16
 8005b66:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8005b68:	06da      	lsls	r2, r3, #27
 8005b6a:	d503      	bpl.n	8005b74 <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8005b6c:	6962      	ldr	r2, [r4, #20]
 8005b6e:	f042 0220 	orr.w	r2, r2, #32
 8005b72:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8005b74:	0698      	lsls	r0, r3, #26
 8005b76:	d503      	bpl.n	8005b80 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8005b78:	6962      	ldr	r2, [r4, #20]
 8005b7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b7e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8005b80:	0659      	lsls	r1, r3, #25
 8005b82:	d503      	bpl.n	8005b8c <HAL_DSI_IRQHandler+0xbe>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8005b84:	6962      	ldr	r2, [r4, #20]
 8005b86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b8a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8005b8c:	061a      	lsls	r2, r3, #24
 8005b8e:	d503      	bpl.n	8005b98 <HAL_DSI_IRQHandler+0xca>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8005b90:	6962      	ldr	r2, [r4, #20]
 8005b92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b96:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8005b98:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 8005b9c:	d003      	beq.n	8005ba6 <HAL_DSI_IRQHandler+0xd8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8005b9e:	6963      	ldr	r3, [r4, #20]
 8005ba0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ba4:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8005ba6:	6963      	ldr	r3, [r4, #20]
 8005ba8:	b113      	cbz	r3, 8005bb0 <HAL_DSI_IRQHandler+0xe2>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8005baa:	4620      	mov	r0, r4
 8005bac:	f7ff ff8e 	bl	8005acc <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8005bb0:	bd10      	pop	{r4, pc}

08005bb2 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005bb2:	7c03      	ldrb	r3, [r0, #16]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d00b      	beq.n	8005bd0 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8005bb8:	6803      	ldr	r3, [r0, #0]
 8005bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bbc:	f022 0203 	bic.w	r2, r2, #3
 8005bc0:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8005bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bc4:	4311      	orrs	r1, r2
 8005bc6:	6319      	str	r1, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005bc8:	2300      	movs	r3, #0
 8005bca:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8005bcc:	4618      	mov	r0, r3
 8005bce:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8005bd0:	2002      	movs	r0, #2
}
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8005bd4:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005bd6:	7c03      	ldrb	r3, [r0, #16]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d06a      	beq.n	8005cb2 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8005bdc:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8005bde:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8005be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005be2:	f042 0201 	orr.w	r2, r2, #1
 8005be6:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8005be8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005bec:	f022 0201 	bic.w	r2, r2, #1
 8005bf0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8005bf4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005bf8:	f042 0201 	orr.w	r2, r2, #1
 8005bfc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	f022 0203 	bic.w	r2, r2, #3
 8005c06:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	4322      	orrs	r2, r4
 8005c0c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8005c0e:	695a      	ldr	r2, [r3, #20]
 8005c10:	f022 0207 	bic.w	r2, r2, #7
 8005c14:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8005c16:	695c      	ldr	r4, [r3, #20]
 8005c18:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8005c1c:	432a      	orrs	r2, r5
 8005c1e:	694d      	ldr	r5, [r1, #20]
 8005c20:	432a      	orrs	r2, r5

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8005c22:	684d      	ldr	r5, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8005c24:	4322      	orrs	r2, r4
 8005c26:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8005c28:	691a      	ldr	r2, [r3, #16]
 8005c2a:	f022 020f 	bic.w	r2, r2, #15
 8005c2e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8005c30:	691c      	ldr	r4, [r3, #16]
 8005c32:	432c      	orrs	r4, r5
 8005c34:	611c      	str	r4, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8005c36:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8005c3a:	f024 040e 	bic.w	r4, r4, #14
 8005c3e:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8005c42:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8005c46:	688c      	ldr	r4, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8005c48:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8005c4c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8005c50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005c52:	0c12      	lsrs	r2, r2, #16
 8005c54:	0412      	lsls	r2, r2, #16
 8005c56:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8005c58:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005c5a:	4322      	orrs	r2, r4
 8005c5c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8005c5e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8005c62:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005c66:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8005c6a:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8005c6e:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8005c72:	432a      	orrs	r2, r5
 8005c74:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8005c76:	432a      	orrs	r2, r5
 8005c78:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8005c7a:	6a89      	ldr	r1, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8005c7c:	432a      	orrs	r2, r5
 8005c7e:	4322      	orrs	r2, r4
 8005c80:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8005c84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005c86:	f022 0201 	bic.w	r2, r2, #1
 8005c8a:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8005c8c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8005c92:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005c96:	f042 0201 	orr.w	r2, r2, #1
 8005c9a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8005c9e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005ca2:	f042 0202 	orr.w	r2, r2, #2
 8005ca6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005caa:	2300      	movs	r3, #0
 8005cac:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8005cae:	4618      	mov	r0, r3
}
 8005cb0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8005cb2:	2002      	movs	r0, #2
 8005cb4:	e7fc      	b.n	8005cb0 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08005cb8 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8005cb8:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005cba:	7c03      	ldrb	r3, [r0, #16]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d02a      	beq.n	8005d16 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8005cc0:	6802      	ldr	r2, [r0, #0]
 8005cc2:	4b16      	ldr	r3, [pc, #88]	; (8005d1c <HAL_DSI_ConfigCommand+0x64>)
 8005cc4:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8005cc6:	4023      	ands	r3, r4
 8005cc8:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8005cca:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8005ccc:	e9d1 3500 	ldrd	r3, r5, [r1]
 8005cd0:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8005cd2:	688d      	ldr	r5, [r1, #8]
 8005cd4:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8005cd6:	68cd      	ldr	r5, [r1, #12]
 8005cd8:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8005cda:	690d      	ldr	r5, [r1, #16]
 8005cdc:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8005cde:	694d      	ldr	r5, [r1, #20]
 8005ce0:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8005ce2:	698d      	ldr	r5, [r1, #24]
 8005ce4:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8005ce6:	69cd      	ldr	r5, [r1, #28]
 8005ce8:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8005cea:	6a0d      	ldr	r5, [r1, #32]
 8005cec:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8005cee:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8005cf0:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8005cf2:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8005cf4:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8005cf6:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8005cf8:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      | \
 8005cfa:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8005cfc:	4323      	orrs	r3, r4
 8005cfe:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8005d00:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8005d02:	f023 0302 	bic.w	r3, r3, #2
 8005d06:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8005d08:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8005d0a:	430b      	orrs	r3, r1
 8005d0c:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005d0e:	2300      	movs	r3, #0
 8005d10:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8005d12:	4618      	mov	r0, r3
}
 8005d14:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8005d16:	2002      	movs	r0, #2
 8005d18:	e7fc      	b.n	8005d14 <HAL_DSI_ConfigCommand+0x5c>
 8005d1a:	bf00      	nop
 8005d1c:	fef080ff 	.word	0xfef080ff

08005d20 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005d20:	7c03      	ldrb	r3, [r0, #16]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d00b      	beq.n	8005d3e <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8005d26:	6803      	ldr	r3, [r0, #0]
 8005d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d2a:	f022 021f 	bic.w	r2, r2, #31
 8005d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8005d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d32:	4311      	orrs	r1, r2
 8005d34:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005d36:	2300      	movs	r3, #0
 8005d38:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8005d3e:	2002      	movs	r0, #2
}
 8005d40:	4770      	bx	lr

08005d42 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8005d42:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005d44:	7c03      	ldrb	r3, [r0, #16]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d035      	beq.n	8005db6 <HAL_DSI_ConfigPhyTimer+0x74>
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8005d4a:	6803      	ldr	r3, [r0, #0]
  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8005d4c:	e9d1 2400 	ldrd	r2, r4, [r1]
 8005d50:	4294      	cmp	r4, r2
 8005d52:	bf38      	it	cc
 8005d54:	4614      	movcc	r4, r2
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8005d56:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005d5a:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8005d5e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8005d62:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005d66:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005d6a:	4322      	orrs	r2, r4
 8005d6c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8005d70:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005d74:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8005d78:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8005d7c:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8005d80:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8005d84:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8005d86:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8005d8a:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8005d8c:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8005d8e:	432a      	orrs	r2, r5
 8005d90:	4322      	orrs	r2, r4
 8005d92:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8005d96:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8005d9a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005d9e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8005da2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8005da6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005daa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005dae:	2300      	movs	r3, #0
 8005db0:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8005db2:	4618      	mov	r0, r3
}
 8005db4:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8005db6:	2002      	movs	r0, #2
 8005db8:	e7fc      	b.n	8005db4 <HAL_DSI_ConfigPhyTimer+0x72>
	...

08005dbc <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8005dbc:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005dbe:	7c03      	ldrb	r3, [r0, #16]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d05c      	beq.n	8005e7e <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8005dc4:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8005dc6:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8005dc8:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8005dca:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8005dcc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005dd0:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8005dd8:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8005dda:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8005ddc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005dde:	b292      	uxth	r2, r2
 8005de0:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8005de2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005de4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005de8:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8005dea:	4a26      	ldr	r2, [pc, #152]	; (8005e84 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 8005dec:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8005dee:	4014      	ands	r4, r2
 8005df0:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8005df2:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8005df4:	432c      	orrs	r4, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8005df6:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8005df8:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8005dfa:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8005dfc:	4014      	ands	r4, r2
 8005dfe:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8005e00:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8005e02:	432c      	orrs	r4, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8005e04:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8005e06:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8005e08:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8005e0c:	4014      	ands	r4, r2
 8005e0e:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8005e12:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8005e16:	432c      	orrs	r4, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8005e18:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8005e1a:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8005e1e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8005e22:	4014      	ands	r4, r2
 8005e24:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8005e28:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8005e2c:	432c      	orrs	r4, r5
 8005e2e:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8005e32:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8005e36:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8005e3a:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8005e3e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8005e42:	698d      	ldr	r5, [r1, #24]
 8005e44:	432c      	orrs	r4, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8005e46:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8005e48:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8005e4a:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8005e4e:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8005e52:	4014      	ands	r4, r2
 8005e54:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8005e58:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8005e5c:	432c      	orrs	r4, r5
 8005e5e:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8005e62:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8005e66:	4022      	ands	r2, r4
 8005e68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8005e6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005e70:	430a      	orrs	r2, r1
 8005e72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005e76:	2300      	movs	r3, #0
 8005e78:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8005e7a:	4618      	mov	r0, r3
}
 8005e7c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8005e7e:	2002      	movs	r0, #2
 8005e80:	e7fc      	b.n	8005e7c <HAL_DSI_ConfigHostTimeouts+0xc0>
 8005e82:	bf00      	nop
 8005e84:	ffff0000 	.word	0xffff0000

08005e88 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005e88:	7c03      	ldrb	r3, [r0, #16]
{
 8005e8a:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d01c      	beq.n	8005eca <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8005e90:	6802      	ldr	r2, [r0, #0]
 8005e92:	2300      	movs	r3, #0
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	6851      	ldr	r1, [r2, #4]
 8005e98:	f041 0101 	orr.w	r1, r1, #1
 8005e9c:	6051      	str	r1, [r2, #4]
 8005e9e:	6851      	ldr	r1, [r2, #4]
 8005ea0:	f001 0101 	and.w	r1, r1, #1
 8005ea4:	9100      	str	r1, [sp, #0]
 8005ea6:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8005ea8:	9301      	str	r3, [sp, #4]
 8005eaa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 8005eae:	f041 0108 	orr.w	r1, r1, #8
 8005eb2:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8005eb6:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005eba:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8005ebc:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8005ebe:	f002 0208 	and.w	r2, r2, #8
 8005ec2:	9201      	str	r2, [sp, #4]
 8005ec4:	9a01      	ldr	r2, [sp, #4]
}
 8005ec6:	b002      	add	sp, #8
 8005ec8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8005eca:	2002      	movs	r0, #2
 8005ecc:	e7fb      	b.n	8005ec6 <HAL_DSI_Start+0x3e>

08005ece <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005ece:	7c03      	ldrb	r3, [r0, #16]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d00a      	beq.n	8005eea <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8005ed4:	6802      	ldr	r2, [r0, #0]
 8005ed6:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 8005eda:	f043 0304 	orr.w	r3, r3, #4
 8005ede:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8005eea:	2002      	movs	r0, #2
}
 8005eec:	4770      	bx	lr

08005eee <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8005eee:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8005ef0:	7c05      	ldrb	r5, [r0, #16]
{
 8005ef2:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8005ef4:	2d01      	cmp	r5, #1
 8005ef6:	d009      	beq.n	8005f0c <HAL_DSI_ShortWrite+0x1e>
 8005ef8:	2501      	movs	r5, #1
 8005efa:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8005efc:	9d06      	ldr	r5, [sp, #24]
 8005efe:	9500      	str	r5, [sp, #0]
 8005f00:	f7ff fcac 	bl	800585c <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005f04:	2300      	movs	r3, #0
 8005f06:	7423      	strb	r3, [r4, #16]

  return status;
}
 8005f08:	b003      	add	sp, #12
 8005f0a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8005f0c:	2002      	movs	r0, #2
 8005f0e:	e7fb      	b.n	8005f08 <HAL_DSI_ShortWrite+0x1a>

08005f10 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8005f10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f14:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8005f16:	7c03      	ldrb	r3, [r0, #16]
{
 8005f18:	4606      	mov	r6, r0
 8005f1a:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8005f1c:	2b01      	cmp	r3, #1
{
 8005f1e:	4615      	mov	r5, r2
 8005f20:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  __HAL_LOCK(hdsi);
 8005f24:	d053      	beq.n	8005fce <HAL_DSI_LongWrite+0xbe>
 8005f26:	2301      	movs	r3, #1
 8005f28:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f2a:	f7ff f8b9 	bl	80050a0 <HAL_GetTick>
 8005f2e:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005f30:	6831      	ldr	r1, [r6, #0]
 8005f32:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8005f34:	f013 0a01 	ands.w	sl, r3, #1
 8005f38:	d01a      	beq.n	8005f70 <HAL_DSI_LongWrite+0x60>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8005f3a:	2c03      	cmp	r4, #3
 8005f3c:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 8005f3e:	f04f 0200 	mov.w	r2, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8005f42:	bf28      	it	cs
 8005f44:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 8005f46:	4282      	cmp	r2, r0
 8005f48:	d11e      	bne.n	8005f88 <HAL_DSI_LongWrite+0x78>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8005f4a:	1aa3      	subs	r3, r4, r2
  pparams += nbBytes;
 8005f4c:	4442      	add	r2, r8
  hdsi->Instance->GPDR = fifoword;
 8005f4e:	f8c1 9070 	str.w	r9, [r1, #112]	; 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8005f52:	bb1b      	cbnz	r3, 8005f9c <HAL_DSI_LongWrite+0x8c>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8005f54:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8005f56:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 8005f5a:	4618      	mov	r0, r3
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8005f5c:	0222      	lsls	r2, r4, #8
 8005f5e:	0224      	lsls	r4, r4, #8
 8005f60:	b292      	uxth	r2, r2
 8005f62:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8005f66:	4315      	orrs	r5, r2
 8005f68:	432c      	orrs	r4, r5
 8005f6a:	66cc      	str	r4, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 8005f6c:	7433      	strb	r3, [r6, #16]
  return HAL_OK;
 8005f6e:	e009      	b.n	8005f84 <HAL_DSI_LongWrite+0x74>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005f70:	f7ff f896 	bl	80050a0 <HAL_GetTick>
 8005f74:	eba0 000b 	sub.w	r0, r0, fp
 8005f78:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005f7c:	d9d8      	bls.n	8005f30 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8005f7e:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8005f80:	f886 a010 	strb.w	sl, [r6, #16]
}
 8005f84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8005f88:	f818 3002 	ldrb.w	r3, [r8, r2]
 8005f8c:	3201      	adds	r2, #1
 8005f8e:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8005f92:	fa03 f30c 	lsl.w	r3, r3, ip
 8005f96:	ea49 0903 	orr.w	r9, r9, r3
  for (count = 0U; count < nbBytes; count++)
 8005f9a:	e7d4      	b.n	8005f46 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8005f9c:	2b04      	cmp	r3, #4
    fifoword = 0U;
 8005f9e:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8005fa2:	469e      	mov	lr, r3
    for (count = 0U; count < nbBytes; count++)
 8005fa4:	4660      	mov	r0, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8005fa6:	bf28      	it	cs
 8005fa8:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8005fac:	f812 8000 	ldrb.w	r8, [r2, r0]
 8005fb0:	ea4f 09c0 	mov.w	r9, r0, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8005fb4:	3001      	adds	r0, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8005fb6:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8005fba:	4586      	cmp	lr, r0
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8005fbc:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8005fc0:	d1f4      	bne.n	8005fac <HAL_DSI_LongWrite+0x9c>
    uicounter -= nbBytes;
 8005fc2:	eba3 030e 	sub.w	r3, r3, lr
    pparams += nbBytes;
 8005fc6:	4472      	add	r2, lr
    hdsi->Instance->GPDR = fifoword;
 8005fc8:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
    pparams += nbBytes;
 8005fcc:	e7c1      	b.n	8005f52 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8005fce:	2002      	movs	r0, #2
 8005fd0:	e7d8      	b.n	8005f84 <HAL_DSI_LongWrite+0x74>

08005fd2 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005fd2:	7c03      	ldrb	r3, [r0, #16]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d010      	beq.n	8005ffa <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8005fd8:	6803      	ldr	r3, [r0, #0]
 8005fda:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8005fde:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8005fe2:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8005fe6:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8005fea:	ea42 6141 	orr.w	r1, r2, r1, lsl #25
 8005fee:	f8c3 141c 	str.w	r1, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8005ffa:	2002      	movs	r0, #2
}
 8005ffc:	4770      	bx	lr
	...

08006000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006004:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006006:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80061c4 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800600a:	4a6c      	ldr	r2, [pc, #432]	; (80061bc <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 800600c:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800600e:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8006010:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006012:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8006016:	43ac      	bics	r4, r5
 8006018:	f040 80b6 	bne.w	8006188 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800601c:	684d      	ldr	r5, [r1, #4]
 800601e:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006022:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006024:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006028:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800602c:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800602e:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006030:	2f01      	cmp	r7, #1
 8006032:	d834      	bhi.n	800609e <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8006034:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006036:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 800603a:	68cf      	ldr	r7, [r1, #12]
 800603c:	fa07 f708 	lsl.w	r7, r7, r8
 8006040:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8006044:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8006046:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006048:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800604c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8006050:	409f      	lsls	r7, r3
 8006052:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8006056:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8006058:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800605a:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800605c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006060:	688f      	ldr	r7, [r1, #8]
 8006062:	fa07 f708 	lsl.w	r7, r7, r8
 8006066:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 800606a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800606c:	d119      	bne.n	80060a2 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 800606e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006072:	f003 0b07 	and.w	fp, r3, #7
 8006076:	f04f 0e0f 	mov.w	lr, #15
 800607a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800607e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8006082:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006086:	fa0e fe0b 	lsl.w	lr, lr, fp
 800608a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800608e:	690f      	ldr	r7, [r1, #16]
 8006090:	fa07 f70b 	lsl.w	r7, r7, fp
 8006094:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8006098:	f8ca 7020 	str.w	r7, [sl, #32]
 800609c:	e001      	b.n	80060a2 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800609e:	2c03      	cmp	r4, #3
 80060a0:	d1da      	bne.n	8006058 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 80060a2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80060a4:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80060a8:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80060ac:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80060b0:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 80060b4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80060b6:	d067      	beq.n	8006188 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060b8:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80060bc:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80060c0:	f003 0703 	and.w	r7, r3, #3
 80060c4:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060c8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80060cc:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80060d0:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060d2:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 80060d6:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 80060da:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80060de:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 80060e2:	9401      	str	r4, [sp, #4]
 80060e4:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80060e6:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 80060ea:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80060ee:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80060f2:	4c33      	ldr	r4, [pc, #204]	; (80061c0 <HAL_GPIO_Init+0x1c0>)
 80060f4:	42a0      	cmp	r0, r4
 80060f6:	d04e      	beq.n	8006196 <HAL_GPIO_Init+0x196>
 80060f8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80060fc:	42a0      	cmp	r0, r4
 80060fe:	d04c      	beq.n	800619a <HAL_GPIO_Init+0x19a>
 8006100:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006104:	42a0      	cmp	r0, r4
 8006106:	d04a      	beq.n	800619e <HAL_GPIO_Init+0x19e>
 8006108:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800610c:	42a0      	cmp	r0, r4
 800610e:	d048      	beq.n	80061a2 <HAL_GPIO_Init+0x1a2>
 8006110:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006114:	42a0      	cmp	r0, r4
 8006116:	d046      	beq.n	80061a6 <HAL_GPIO_Init+0x1a6>
 8006118:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800611c:	42a0      	cmp	r0, r4
 800611e:	d044      	beq.n	80061aa <HAL_GPIO_Init+0x1aa>
 8006120:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006124:	42a0      	cmp	r0, r4
 8006126:	d042      	beq.n	80061ae <HAL_GPIO_Init+0x1ae>
 8006128:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800612c:	42a0      	cmp	r0, r4
 800612e:	d040      	beq.n	80061b2 <HAL_GPIO_Init+0x1b2>
 8006130:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006134:	42a0      	cmp	r0, r4
 8006136:	d03e      	beq.n	80061b6 <HAL_GPIO_Init+0x1b6>
 8006138:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800613c:	42a0      	cmp	r0, r4
 800613e:	bf0c      	ite	eq
 8006140:	2409      	moveq	r4, #9
 8006142:	240a      	movne	r4, #10
 8006144:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006146:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006148:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800614c:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800614e:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 8006152:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8006154:	bf54      	ite	pl
 8006156:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8006158:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800615c:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 800615e:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8006160:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8006162:	bf54      	ite	pl
 8006164:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8006166:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800616a:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 800616c:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 800616e:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8006170:	bf54      	ite	pl
 8006172:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8006174:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006178:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 800617a:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 800617c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800617e:	bf54      	ite	pl
 8006180:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8006182:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8006186:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006188:	3301      	adds	r3, #1
 800618a:	2b10      	cmp	r3, #16
 800618c:	f47f af3e 	bne.w	800600c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8006190:	b003      	add	sp, #12
 8006192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006196:	2400      	movs	r4, #0
 8006198:	e7d4      	b.n	8006144 <HAL_GPIO_Init+0x144>
 800619a:	2401      	movs	r4, #1
 800619c:	e7d2      	b.n	8006144 <HAL_GPIO_Init+0x144>
 800619e:	2402      	movs	r4, #2
 80061a0:	e7d0      	b.n	8006144 <HAL_GPIO_Init+0x144>
 80061a2:	2403      	movs	r4, #3
 80061a4:	e7ce      	b.n	8006144 <HAL_GPIO_Init+0x144>
 80061a6:	2404      	movs	r4, #4
 80061a8:	e7cc      	b.n	8006144 <HAL_GPIO_Init+0x144>
 80061aa:	2405      	movs	r4, #5
 80061ac:	e7ca      	b.n	8006144 <HAL_GPIO_Init+0x144>
 80061ae:	2406      	movs	r4, #6
 80061b0:	e7c8      	b.n	8006144 <HAL_GPIO_Init+0x144>
 80061b2:	2407      	movs	r4, #7
 80061b4:	e7c6      	b.n	8006144 <HAL_GPIO_Init+0x144>
 80061b6:	2408      	movs	r4, #8
 80061b8:	e7c4      	b.n	8006144 <HAL_GPIO_Init+0x144>
 80061ba:	bf00      	nop
 80061bc:	40013c00 	.word	0x40013c00
 80061c0:	40020000 	.word	0x40020000
 80061c4:	40023800 	.word	0x40023800

080061c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80061c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80061cc:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80061ce:	4c4a      	ldr	r4, [pc, #296]	; (80062f8 <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80061d0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8006300 <HAL_GPIO_DeInit+0x138>
 80061d4:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8006304 <HAL_GPIO_DeInit+0x13c>
 80061d8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006308 <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
 80061dc:	2301      	movs	r3, #1
 80061de:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 80061e2:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 80061e6:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 80061ea:	d16e      	bne.n	80062ca <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
 80061ec:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80061f0:	f002 0c03 	and.w	ip, r2, #3
 80061f4:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80061f6:	4b41      	ldr	r3, [pc, #260]	; (80062fc <HAL_GPIO_DeInit+0x134>)
 80061f8:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80061fc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006200:	4298      	cmp	r0, r3
 8006202:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006206:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 800620a:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800620e:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006212:	d05f      	beq.n	80062d4 <HAL_GPIO_DeInit+0x10c>
 8006214:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006218:	4298      	cmp	r0, r3
 800621a:	d05d      	beq.n	80062d8 <HAL_GPIO_DeInit+0x110>
 800621c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006220:	4298      	cmp	r0, r3
 8006222:	d05b      	beq.n	80062dc <HAL_GPIO_DeInit+0x114>
 8006224:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006228:	4298      	cmp	r0, r3
 800622a:	d059      	beq.n	80062e0 <HAL_GPIO_DeInit+0x118>
 800622c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006230:	4298      	cmp	r0, r3
 8006232:	d057      	beq.n	80062e4 <HAL_GPIO_DeInit+0x11c>
 8006234:	4548      	cmp	r0, r9
 8006236:	d057      	beq.n	80062e8 <HAL_GPIO_DeInit+0x120>
 8006238:	4550      	cmp	r0, sl
 800623a:	d057      	beq.n	80062ec <HAL_GPIO_DeInit+0x124>
 800623c:	4558      	cmp	r0, fp
 800623e:	d057      	beq.n	80062f0 <HAL_GPIO_DeInit+0x128>
 8006240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006244:	4298      	cmp	r0, r3
 8006246:	d055      	beq.n	80062f4 <HAL_GPIO_DeInit+0x12c>
 8006248:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800624c:	4298      	cmp	r0, r3
 800624e:	bf0c      	ite	eq
 8006250:	2309      	moveq	r3, #9
 8006252:	230a      	movne	r3, #10
 8006254:	fa03 f30c 	lsl.w	r3, r3, ip
 8006258:	4543      	cmp	r3, r8
 800625a:	d113      	bne.n	8006284 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	ea23 0307 	bic.w	r3, r3, r7
 8006262:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006264:	6863      	ldr	r3, [r4, #4]
 8006266:	ea23 0307 	bic.w	r3, r3, r7
 800626a:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800626c:	68e3      	ldr	r3, [r4, #12]
 800626e:	ea23 0307 	bic.w	r3, r3, r7
 8006272:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006274:	68a3      	ldr	r3, [r4, #8]
 8006276:	ea23 0307 	bic.w	r3, r3, r7
 800627a:	60a3      	str	r3, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800627c:	68ab      	ldr	r3, [r5, #8]
 800627e:	ea23 0306 	bic.w	r3, r3, r6
 8006282:	60ab      	str	r3, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006284:	2603      	movs	r6, #3
 8006286:	0053      	lsls	r3, r2, #1
 8006288:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800628a:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800628e:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006292:	270f      	movs	r7, #15
 8006294:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006298:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800629c:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80062a0:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80062a2:	fa22 f506 	lsr.w	r5, r2, r6
 80062a6:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80062aa:	6a2e      	ldr	r6, [r5, #32]
 80062ac:	ea26 0707 	bic.w	r7, r6, r7
 80062b0:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80062b2:	68c5      	ldr	r5, [r0, #12]
 80062b4:	ea25 0503 	bic.w	r5, r5, r3
 80062b8:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062ba:	6845      	ldr	r5, [r0, #4]
 80062bc:	ea25 050e 	bic.w	r5, r5, lr
 80062c0:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80062c2:	6885      	ldr	r5, [r0, #8]
 80062c4:	ea25 0303 	bic.w	r3, r5, r3
 80062c8:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80062ca:	3201      	adds	r2, #1
 80062cc:	2a10      	cmp	r2, #16
 80062ce:	d185      	bne.n	80061dc <HAL_GPIO_DeInit+0x14>
    }
  }
}
 80062d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80062d4:	2300      	movs	r3, #0
 80062d6:	e7bd      	b.n	8006254 <HAL_GPIO_DeInit+0x8c>
 80062d8:	2301      	movs	r3, #1
 80062da:	e7bb      	b.n	8006254 <HAL_GPIO_DeInit+0x8c>
 80062dc:	2302      	movs	r3, #2
 80062de:	e7b9      	b.n	8006254 <HAL_GPIO_DeInit+0x8c>
 80062e0:	2303      	movs	r3, #3
 80062e2:	e7b7      	b.n	8006254 <HAL_GPIO_DeInit+0x8c>
 80062e4:	2304      	movs	r3, #4
 80062e6:	e7b5      	b.n	8006254 <HAL_GPIO_DeInit+0x8c>
 80062e8:	2305      	movs	r3, #5
 80062ea:	e7b3      	b.n	8006254 <HAL_GPIO_DeInit+0x8c>
 80062ec:	2306      	movs	r3, #6
 80062ee:	e7b1      	b.n	8006254 <HAL_GPIO_DeInit+0x8c>
 80062f0:	2307      	movs	r3, #7
 80062f2:	e7af      	b.n	8006254 <HAL_GPIO_DeInit+0x8c>
 80062f4:	2308      	movs	r3, #8
 80062f6:	e7ad      	b.n	8006254 <HAL_GPIO_DeInit+0x8c>
 80062f8:	40013c00 	.word	0x40013c00
 80062fc:	40020000 	.word	0x40020000
 8006300:	40021400 	.word	0x40021400
 8006304:	40021800 	.word	0x40021800
 8006308:	40021c00 	.word	0x40021c00

0800630c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800630c:	6903      	ldr	r3, [r0, #16]
 800630e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8006310:	bf14      	ite	ne
 8006312:	2001      	movne	r0, #1
 8006314:	2000      	moveq	r0, #0
 8006316:	4770      	bx	lr

08006318 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006318:	b10a      	cbz	r2, 800631e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800631a:	6181      	str	r1, [r0, #24]
  }
}
 800631c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800631e:	0409      	lsls	r1, r1, #16
 8006320:	e7fb      	b.n	800631a <HAL_GPIO_WritePin+0x2>

08006322 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006322:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006324:	ea01 0203 	and.w	r2, r1, r3
 8006328:	ea21 0103 	bic.w	r1, r1, r3
 800632c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006330:	6181      	str	r1, [r0, #24]
}
 8006332:	4770      	bx	lr

08006334 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006334:	6803      	ldr	r3, [r0, #0]
 8006336:	699a      	ldr	r2, [r3, #24]
 8006338:	0791      	lsls	r1, r2, #30
 800633a:	d501      	bpl.n	8006340 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800633c:	2200      	movs	r2, #0
 800633e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006340:	699a      	ldr	r2, [r3, #24]
 8006342:	07d2      	lsls	r2, r2, #31
 8006344:	d403      	bmi.n	800634e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006346:	699a      	ldr	r2, [r3, #24]
 8006348:	f042 0201 	orr.w	r2, r2, #1
 800634c:	619a      	str	r2, [r3, #24]
  }
}
 800634e:	4770      	bx	lr

08006350 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006350:	b530      	push	{r4, r5, lr}
 8006352:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006354:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006358:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800635a:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800635c:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800635e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8006362:	4a05      	ldr	r2, [pc, #20]	; (8006378 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006364:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8006366:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800636a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800636e:	ea20 0002 	bic.w	r0, r0, r2
 8006372:	4303      	orrs	r3, r0
 8006374:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006376:	bd30      	pop	{r4, r5, pc}
 8006378:	03ff63ff 	.word	0x03ff63ff

0800637c <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 800637c:	6803      	ldr	r3, [r0, #0]
{
 800637e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8006382:	699c      	ldr	r4, [r3, #24]
{
 8006384:	4605      	mov	r5, r0
 8006386:	460f      	mov	r7, r1
 8006388:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800638a:	f014 0410 	ands.w	r4, r4, #16
 800638e:	d070      	beq.n	8006472 <I2C_IsErrorOccurred+0xf6>
  uint32_t error_code = 0;
 8006390:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006392:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8006394:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006396:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	699a      	ldr	r2, [r3, #24]
 800639c:	0692      	lsls	r2, r2, #26
 800639e:	d462      	bmi.n	8006466 <I2C_IsErrorOccurred+0xea>
 80063a0:	f1b8 0f00 	cmp.w	r8, #0
 80063a4:	d036      	beq.n	8006414 <I2C_IsErrorOccurred+0x98>
    error_code |= HAL_I2C_ERROR_AF;
 80063a6:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 80063aa:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80063b0:	05d6      	lsls	r6, r2, #23
 80063b2:	d505      	bpl.n	80063c0 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80063b4:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 80063b8:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 80063bc:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80063be:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80063c0:	0551      	lsls	r1, r2, #21
 80063c2:	d505      	bpl.n	80063d0 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80063c8:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 80063cc:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063ce:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80063d0:	0592      	lsls	r2, r2, #22
 80063d2:	d550      	bpl.n	8006476 <I2C_IsErrorOccurred+0xfa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80063d4:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80063d8:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80063dc:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80063de:	4628      	mov	r0, r5
 80063e0:	f7ff ffa8 	bl	8006334 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80063e4:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80063e6:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80063e8:	6853      	ldr	r3, [r2, #4]
 80063ea:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80063ee:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80063f2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80063f6:	f023 0301 	bic.w	r3, r3, #1
 80063fa:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80063fc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80063fe:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8006400:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8006402:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006404:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006408:	2300      	movs	r3, #0
 800640a:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800640e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8006412:	e032      	b.n	800647a <I2C_IsErrorOccurred+0xfe>
      if (Timeout != HAL_MAX_DELAY)
 8006414:	1c7a      	adds	r2, r7, #1
 8006416:	d0c0      	beq.n	800639a <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006418:	f7fe fe42 	bl	80050a0 <HAL_GetTick>
 800641c:	1b80      	subs	r0, r0, r6
 800641e:	42b8      	cmp	r0, r7
 8006420:	d801      	bhi.n	8006426 <I2C_IsErrorOccurred+0xaa>
 8006422:	2f00      	cmp	r7, #0
 8006424:	d1b8      	bne.n	8006398 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006426:	682b      	ldr	r3, [r5, #0]
 8006428:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800642a:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800642e:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8006430:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006432:	0400      	lsls	r0, r0, #16
 8006434:	d50a      	bpl.n	800644c <I2C_IsErrorOccurred+0xd0>
 8006436:	0448      	lsls	r0, r1, #17
 8006438:	d408      	bmi.n	800644c <I2C_IsErrorOccurred+0xd0>
              (tmp1 != I2C_CR2_STOP) && \
 800643a:	2a20      	cmp	r2, #32
 800643c:	d006      	beq.n	800644c <I2C_IsErrorOccurred+0xd0>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006444:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8006446:	f7fe fe2b 	bl	80050a0 <HAL_GetTick>
 800644a:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800644c:	682b      	ldr	r3, [r5, #0]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	0699      	lsls	r1, r3, #26
 8006452:	d4a1      	bmi.n	8006398 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006454:	f7fe fe24 	bl	80050a0 <HAL_GetTick>
 8006458:	1b80      	subs	r0, r0, r6
 800645a:	2819      	cmp	r0, #25
 800645c:	d9f6      	bls.n	800644c <I2C_IsErrorOccurred+0xd0>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800645e:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8006460:	f04f 0801 	mov.w	r8, #1
 8006464:	e798      	b.n	8006398 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8006466:	f1b8 0f00 	cmp.w	r8, #0
 800646a:	d19c      	bne.n	80063a6 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800646c:	2220      	movs	r2, #32
 800646e:	61da      	str	r2, [r3, #28]
 8006470:	e799      	b.n	80063a6 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8006472:	4620      	mov	r0, r4
 8006474:	e79a      	b.n	80063ac <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8006476:	2800      	cmp	r0, #0
 8006478:	d1b1      	bne.n	80063de <I2C_IsErrorOccurred+0x62>
}
 800647a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800647e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800647e:	b570      	push	{r4, r5, r6, lr}
 8006480:	4604      	mov	r4, r0
 8006482:	460d      	mov	r5, r1
 8006484:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006486:	6823      	ldr	r3, [r4, #0]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	079b      	lsls	r3, r3, #30
 800648c:	d501      	bpl.n	8006492 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800648e:	2000      	movs	r0, #0
}
 8006490:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006492:	4632      	mov	r2, r6
 8006494:	4629      	mov	r1, r5
 8006496:	4620      	mov	r0, r4
 8006498:	f7ff ff70 	bl	800637c <I2C_IsErrorOccurred>
 800649c:	b9a0      	cbnz	r0, 80064c8 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800649e:	1c6a      	adds	r2, r5, #1
 80064a0:	d0f1      	beq.n	8006486 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a2:	f7fe fdfd 	bl	80050a0 <HAL_GetTick>
 80064a6:	1b80      	subs	r0, r0, r6
 80064a8:	42a8      	cmp	r0, r5
 80064aa:	d801      	bhi.n	80064b0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80064ac:	2d00      	cmp	r5, #0
 80064ae:	d1ea      	bne.n	8006486 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80064b2:	f043 0320 	orr.w	r3, r3, #32
 80064b6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80064b8:	2320      	movs	r3, #32
 80064ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064be:	2300      	movs	r3, #0
 80064c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80064c4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80064c8:	2001      	movs	r0, #1
 80064ca:	e7e1      	b.n	8006490 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

080064cc <I2C_WaitOnFlagUntilTimeout>:
{
 80064cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d0:	9f06      	ldr	r7, [sp, #24]
 80064d2:	4604      	mov	r4, r0
 80064d4:	4688      	mov	r8, r1
 80064d6:	4616      	mov	r6, r2
 80064d8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064da:	6822      	ldr	r2, [r4, #0]
 80064dc:	6993      	ldr	r3, [r2, #24]
 80064de:	ea38 0303 	bics.w	r3, r8, r3
 80064e2:	bf0c      	ite	eq
 80064e4:	2301      	moveq	r3, #1
 80064e6:	2300      	movne	r3, #0
 80064e8:	42b3      	cmp	r3, r6
 80064ea:	d001      	beq.n	80064f0 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80064ec:	2000      	movs	r0, #0
 80064ee:	e015      	b.n	800651c <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80064f0:	1c6b      	adds	r3, r5, #1
 80064f2:	d0f3      	beq.n	80064dc <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064f4:	f7fe fdd4 	bl	80050a0 <HAL_GetTick>
 80064f8:	1bc0      	subs	r0, r0, r7
 80064fa:	42a8      	cmp	r0, r5
 80064fc:	d801      	bhi.n	8006502 <I2C_WaitOnFlagUntilTimeout+0x36>
 80064fe:	2d00      	cmp	r5, #0
 8006500:	d1eb      	bne.n	80064da <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006502:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8006504:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006506:	f043 0320 	orr.w	r3, r3, #32
 800650a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800650c:	2320      	movs	r3, #32
 800650e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006512:	2300      	movs	r3, #0
 8006514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8006518:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800651c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006520 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8006520:	b570      	push	{r4, r5, r6, lr}
 8006522:	4604      	mov	r4, r0
 8006524:	460d      	mov	r5, r1
 8006526:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	069b      	lsls	r3, r3, #26
 800652e:	d501      	bpl.n	8006534 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8006530:	2000      	movs	r0, #0
}
 8006532:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006534:	4632      	mov	r2, r6
 8006536:	4629      	mov	r1, r5
 8006538:	4620      	mov	r0, r4
 800653a:	f7ff ff1f 	bl	800637c <I2C_IsErrorOccurred>
 800653e:	b990      	cbnz	r0, 8006566 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006540:	f7fe fdae 	bl	80050a0 <HAL_GetTick>
 8006544:	1b80      	subs	r0, r0, r6
 8006546:	42a8      	cmp	r0, r5
 8006548:	d801      	bhi.n	800654e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800654a:	2d00      	cmp	r5, #0
 800654c:	d1ec      	bne.n	8006528 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800654e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006550:	f043 0320 	orr.w	r3, r3, #32
 8006554:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006556:	2320      	movs	r3, #32
 8006558:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800655c:	2300      	movs	r3, #0
 800655e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8006562:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006566:	2001      	movs	r0, #1
 8006568:	e7e3      	b.n	8006532 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

0800656a <HAL_I2C_Init>:
{
 800656a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800656c:	4604      	mov	r4, r0
 800656e:	2800      	cmp	r0, #0
 8006570:	d04a      	beq.n	8006608 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006572:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006576:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800657a:	b91b      	cbnz	r3, 8006584 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800657c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8006580:	f7fd fb2a 	bl	8003bd8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006584:	2324      	movs	r3, #36	; 0x24
 8006586:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	f022 0201 	bic.w	r2, r2, #1
 8006592:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006594:	6862      	ldr	r2, [r4, #4]
 8006596:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800659a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800659c:	689a      	ldr	r2, [r3, #8]
 800659e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065a2:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80065a4:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065a8:	2901      	cmp	r1, #1
 80065aa:	d124      	bne.n	80065f6 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80065ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065b0:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80065b2:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065b4:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80065b6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80065ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065be:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065c6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065c8:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80065cc:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80065ce:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80065d4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80065d6:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80065da:	430a      	orrs	r2, r1
 80065dc:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	f042 0201 	orr.w	r2, r2, #1
 80065e4:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80065e6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065e8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80065ee:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80065f4:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80065f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80065fa:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80065fc:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80065fe:	d1d8      	bne.n	80065b2 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006600:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006604:	605a      	str	r2, [r3, #4]
 8006606:	e7d4      	b.n	80065b2 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8006608:	2001      	movs	r0, #1
 800660a:	e7f3      	b.n	80065f4 <HAL_I2C_Init+0x8a>

0800660c <HAL_I2C_DeInit>:
{
 800660c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800660e:	4604      	mov	r4, r0
 8006610:	b198      	cbz	r0, 800663a <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8006612:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006614:	2324      	movs	r3, #36	; 0x24
 8006616:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800661a:	6813      	ldr	r3, [r2, #0]
 800661c:	f023 0301 	bic.w	r3, r3, #1
 8006620:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8006622:	f7fd fb3b 	bl	8003c9c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006626:	2000      	movs	r0, #0
 8006628:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800662a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800662e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006632:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006634:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8006638:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800663a:	2001      	movs	r0, #1
 800663c:	e7fc      	b.n	8006638 <HAL_I2C_DeInit+0x2c>
	...

08006640 <HAL_I2C_Mem_Write>:
{
 8006640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006644:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006646:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800664a:	4604      	mov	r4, r0
 800664c:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800664e:	2b20      	cmp	r3, #32
{
 8006650:	4616      	mov	r6, r2
 8006652:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8006656:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800665a:	f040 80c6 	bne.w	80067ea <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800665e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006660:	b113      	cbz	r3, 8006668 <HAL_I2C_Mem_Write+0x28>
 8006662:	f1ba 0f00 	cmp.w	sl, #0
 8006666:	d106      	bne.n	8006676 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800666c:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800666e:	2001      	movs	r0, #1
}
 8006670:	b003      	add	sp, #12
 8006672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8006676:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800667a:	2b01      	cmp	r3, #1
 800667c:	f000 80b5 	beq.w	80067ea <HAL_I2C_Mem_Write+0x1aa>
 8006680:	f04f 0b01 	mov.w	fp, #1
 8006684:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8006688:	f7fe fd0a 	bl	80050a0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800668c:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800668e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006690:	9000      	str	r0, [sp, #0]
 8006692:	465a      	mov	r2, fp
 8006694:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006698:	4620      	mov	r0, r4
 800669a:	f7ff ff17 	bl	80064cc <I2C_WaitOnFlagUntilTimeout>
 800669e:	2800      	cmp	r0, #0
 80066a0:	d1e5      	bne.n	800666e <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80066a2:	2321      	movs	r3, #33	; 0x21
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80066a4:	fa5f f289 	uxtb.w	r2, r9
 80066a8:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 80066aa:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80066ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80066b0:	2340      	movs	r3, #64	; 0x40
 80066b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80066b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066b8:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80066ba:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80066bc:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80066be:	4b4c      	ldr	r3, [pc, #304]	; (80067f0 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 80066c0:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066ca:	f7ff fe41 	bl	8006350 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066ce:	462a      	mov	r2, r5
 80066d0:	4641      	mov	r1, r8
 80066d2:	4620      	mov	r0, r4
 80066d4:	f7ff fed3 	bl	800647e <I2C_WaitOnTXISFlagUntilTimeout>
 80066d8:	bb18      	cbnz	r0, 8006722 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066da:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066de:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066e0:	d115      	bne.n	800670e <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066e2:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80066e4:	2200      	movs	r2, #0
 80066e6:	2180      	movs	r1, #128	; 0x80
 80066e8:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066ea:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80066ec:	4643      	mov	r3, r8
 80066ee:	9500      	str	r5, [sp, #0]
 80066f0:	f7ff feec 	bl	80064cc <I2C_WaitOnFlagUntilTimeout>
 80066f4:	b9a8      	cbnz	r0, 8006722 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	2bff      	cmp	r3, #255	; 0xff
 80066fc:	d815      	bhi.n	800672a <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80066fe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006700:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006704:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8006706:	b292      	uxth	r2, r2
 8006708:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	e012      	b.n	8006734 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800670e:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006710:	4641      	mov	r1, r8
 8006712:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006714:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006716:	462a      	mov	r2, r5
 8006718:	f7ff feb1 	bl	800647e <I2C_WaitOnTXISFlagUntilTimeout>
 800671c:	b908      	cbnz	r0, 8006722 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	e7df      	b.n	80066e2 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8006722:	2300      	movs	r3, #0
 8006724:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006728:	e7a1      	b.n	800666e <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800672a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800672c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006730:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006732:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006734:	4639      	mov	r1, r7
 8006736:	4620      	mov	r0, r4
 8006738:	f7ff fe0a 	bl	8006350 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800673c:	462a      	mov	r2, r5
 800673e:	4641      	mov	r1, r8
 8006740:	4620      	mov	r0, r4
 8006742:	f7ff fe9c 	bl	800647e <I2C_WaitOnTXISFlagUntilTimeout>
 8006746:	2800      	cmp	r0, #0
 8006748:	d191      	bne.n	800666e <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800674a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800674c:	6822      	ldr	r2, [r4, #0]
 800674e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8006752:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8006754:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006756:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006758:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800675a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800675c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800675e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8006760:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8006762:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006764:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006766:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006768:	b29b      	uxth	r3, r3
 800676a:	b1b3      	cbz	r3, 800679a <HAL_I2C_Mem_Write+0x15a>
 800676c:	b9aa      	cbnz	r2, 800679a <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800676e:	4643      	mov	r3, r8
 8006770:	2180      	movs	r1, #128	; 0x80
 8006772:	4620      	mov	r0, r4
 8006774:	9500      	str	r5, [sp, #0]
 8006776:	f7ff fea9 	bl	80064cc <I2C_WaitOnFlagUntilTimeout>
 800677a:	2800      	cmp	r0, #0
 800677c:	f47f af77 	bne.w	800666e <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006780:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006782:	b29b      	uxth	r3, r3
 8006784:	2bff      	cmp	r3, #255	; 0xff
 8006786:	d928      	bls.n	80067da <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006788:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800678a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800678e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006790:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006792:	4639      	mov	r1, r7
 8006794:	4620      	mov	r0, r4
 8006796:	f7ff fddb 	bl	8006350 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800679a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800679c:	b29b      	uxth	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1cc      	bne.n	800673c <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067a2:	462a      	mov	r2, r5
 80067a4:	4641      	mov	r1, r8
 80067a6:	4620      	mov	r0, r4
 80067a8:	f7ff feba 	bl	8006520 <I2C_WaitOnSTOPFlagUntilTimeout>
 80067ac:	2800      	cmp	r0, #0
 80067ae:	f47f af5e 	bne.w	800666e <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	2120      	movs	r1, #32
 80067b6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80067be:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80067c2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80067c6:	f022 0201 	bic.w	r2, r2, #1
 80067ca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80067cc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80067d0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80067d4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80067d8:	e74a      	b.n	8006670 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80067da:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067e0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80067e2:	b292      	uxth	r2, r2
 80067e4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067e6:	b2d2      	uxtb	r2, r2
 80067e8:	e7d3      	b.n	8006792 <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 80067ea:	2002      	movs	r0, #2
 80067ec:	e740      	b.n	8006670 <HAL_I2C_Mem_Write+0x30>
 80067ee:	bf00      	nop
 80067f0:	80002000 	.word	0x80002000

080067f4 <HAL_I2C_Mem_Read>:
{
 80067f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f8:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80067fa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80067fe:	4604      	mov	r4, r0
 8006800:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006802:	2b20      	cmp	r3, #32
{
 8006804:	4616      	mov	r6, r2
 8006806:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800680a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800680e:	f040 80c9 	bne.w	80069a4 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8006812:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006814:	b113      	cbz	r3, 800681c <HAL_I2C_Mem_Read+0x28>
 8006816:	f1ba 0f00 	cmp.w	sl, #0
 800681a:	d106      	bne.n	800682a <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800681c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006820:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8006822:	2001      	movs	r0, #1
}
 8006824:	b003      	add	sp, #12
 8006826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800682a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800682e:	2b01      	cmp	r3, #1
 8006830:	f000 80b8 	beq.w	80069a4 <HAL_I2C_Mem_Read+0x1b0>
 8006834:	f04f 0b01 	mov.w	fp, #1
 8006838:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800683c:	f7fe fc30 	bl	80050a0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006840:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8006842:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006844:	9000      	str	r0, [sp, #0]
 8006846:	465a      	mov	r2, fp
 8006848:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800684c:	4620      	mov	r0, r4
 800684e:	f7ff fe3d 	bl	80064cc <I2C_WaitOnFlagUntilTimeout>
 8006852:	2800      	cmp	r0, #0
 8006854:	d1e5      	bne.n	8006822 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006856:	2322      	movs	r3, #34	; 0x22
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006858:	fa5f f289 	uxtb.w	r2, r9
 800685c:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 800685e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006860:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006864:	2340      	movs	r3, #64	; 0x40
 8006866:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800686a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800686c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800686e:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006870:	4b4d      	ldr	r3, [pc, #308]	; (80069a8 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8006872:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	4603      	mov	r3, r0
 800687a:	4620      	mov	r0, r4
 800687c:	f7ff fd68 	bl	8006350 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006880:	462a      	mov	r2, r5
 8006882:	4641      	mov	r1, r8
 8006884:	4620      	mov	r0, r4
 8006886:	f7ff fdfa 	bl	800647e <I2C_WaitOnTXISFlagUntilTimeout>
 800688a:	bb20      	cbnz	r0, 80068d6 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800688c:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006890:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006892:	d116      	bne.n	80068c2 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006894:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006896:	2200      	movs	r2, #0
 8006898:	2140      	movs	r1, #64	; 0x40
 800689a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800689c:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800689e:	4643      	mov	r3, r8
 80068a0:	9500      	str	r5, [sp, #0]
 80068a2:	f7ff fe13 	bl	80064cc <I2C_WaitOnFlagUntilTimeout>
 80068a6:	b9b0      	cbnz	r0, 80068d6 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	2bff      	cmp	r3, #255	; 0xff
 80068ae:	4b3f      	ldr	r3, [pc, #252]	; (80069ac <HAL_I2C_Mem_Read+0x1b8>)
 80068b0:	d815      	bhi.n	80068de <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80068b2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80068ba:	b292      	uxth	r2, r2
 80068bc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	e012      	b.n	80068e8 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80068c2:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068c4:	4641      	mov	r1, r8
 80068c6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80068c8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ca:	462a      	mov	r2, r5
 80068cc:	f7ff fdd7 	bl	800647e <I2C_WaitOnTXISFlagUntilTimeout>
 80068d0:	b908      	cbnz	r0, 80068d6 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	e7de      	b.n	8006894 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 80068d6:	2300      	movs	r3, #0
 80068d8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80068dc:	e7a1      	b.n	8006822 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068de:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068e6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068e8:	4639      	mov	r1, r7
 80068ea:	4620      	mov	r0, r4
 80068ec:	f7ff fd30 	bl	8006350 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80068f0:	4643      	mov	r3, r8
 80068f2:	2200      	movs	r2, #0
 80068f4:	2104      	movs	r1, #4
 80068f6:	4620      	mov	r0, r4
 80068f8:	9500      	str	r5, [sp, #0]
 80068fa:	f7ff fde7 	bl	80064cc <I2C_WaitOnFlagUntilTimeout>
 80068fe:	2800      	cmp	r0, #0
 8006900:	d18f      	bne.n	8006822 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006908:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800690a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800690c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800690e:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8006910:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8006912:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006914:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006916:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8006918:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800691a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800691c:	b29b      	uxth	r3, r3
 800691e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006920:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006922:	b29b      	uxth	r3, r3
 8006924:	b1b3      	cbz	r3, 8006954 <HAL_I2C_Mem_Read+0x160>
 8006926:	b9aa      	cbnz	r2, 8006954 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006928:	4643      	mov	r3, r8
 800692a:	2180      	movs	r1, #128	; 0x80
 800692c:	4620      	mov	r0, r4
 800692e:	9500      	str	r5, [sp, #0]
 8006930:	f7ff fdcc 	bl	80064cc <I2C_WaitOnFlagUntilTimeout>
 8006934:	2800      	cmp	r0, #0
 8006936:	f47f af74 	bne.w	8006822 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800693a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800693c:	b29b      	uxth	r3, r3
 800693e:	2bff      	cmp	r3, #255	; 0xff
 8006940:	d928      	bls.n	8006994 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006942:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006944:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006948:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800694a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800694c:	4639      	mov	r1, r7
 800694e:	4620      	mov	r0, r4
 8006950:	f7ff fcfe 	bl	8006350 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8006954:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006956:	b29b      	uxth	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1c9      	bne.n	80068f0 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800695c:	462a      	mov	r2, r5
 800695e:	4641      	mov	r1, r8
 8006960:	4620      	mov	r0, r4
 8006962:	f7ff fddd 	bl	8006520 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006966:	2800      	cmp	r0, #0
 8006968:	f47f af5b 	bne.w	8006822 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	2120      	movs	r1, #32
 8006970:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8006978:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800697c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8006980:	f022 0201 	bic.w	r2, r2, #1
 8006984:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006986:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800698a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800698e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8006992:	e747      	b.n	8006824 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8006994:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006996:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800699a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800699c:	b292      	uxth	r2, r2
 800699e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069a0:	b2d2      	uxtb	r2, r2
 80069a2:	e7d3      	b.n	800694c <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 80069a4:	2002      	movs	r0, #2
 80069a6:	e73d      	b.n	8006824 <HAL_I2C_Mem_Read+0x30>
 80069a8:	80002000 	.word	0x80002000
 80069ac:	80002400 	.word	0x80002400

080069b0 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80069b0:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 80069b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80069b4:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80069b6:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 80069b8:	b103      	cbz	r3, 80069bc <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 80069ba:	4718      	bx	r3
}
 80069bc:	4770      	bx	lr

080069be <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80069be:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069c0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80069c4:	2b20      	cmp	r3, #32
 80069c6:	b2dc      	uxtb	r4, r3
 80069c8:	d11d      	bne.n	8006a06 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069ca:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d019      	beq.n	8006a06 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80069d2:	2324      	movs	r3, #36	; 0x24
 80069d4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069d8:	6803      	ldr	r3, [r0, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	f022 0201 	bic.w	r2, r2, #1
 80069e0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80069e8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	4311      	orrs	r1, r2
 80069ee:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	f042 0201 	orr.w	r2, r2, #1
 80069f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069f8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80069fa:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80069fe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8006a02:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006a04:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8006a06:	2002      	movs	r0, #2
 8006a08:	e7fc      	b.n	8006a04 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08006a0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a0a:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a0c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006a10:	2b20      	cmp	r3, #32
 8006a12:	b2dc      	uxtb	r4, r3
 8006a14:	d11c      	bne.n	8006a50 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a16:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d018      	beq.n	8006a50 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a1e:	2324      	movs	r3, #36	; 0x24
 8006a20:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a24:	6803      	ldr	r3, [r0, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	f022 0201 	bic.w	r2, r2, #1
 8006a2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006a2e:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006a30:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006a34:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006a38:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	f042 0201 	orr.w	r2, r2, #1
 8006a40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a42:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8006a44:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006a48:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8006a4c:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006a4e:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8006a50:	2002      	movs	r0, #2
 8006a52:	e7fc      	b.n	8006a4e <HAL_I2CEx_ConfigDigitalFilter+0x44>

08006a54 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8006a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a56:	3801      	subs	r0, #1
 8006a58:	2601      	movs	r6, #1
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8006a5a:	2500      	movs	r5, #0
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 8006a5c:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    if ((p + i) > 256UL)
 8006a60:	462f      	mov	r7, r5
 8006a62:	4425      	add	r5, r4
 8006a64:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8006a68:	d822      	bhi.n	8006ab0 <JPEG_Bits_To_SizeCodes+0x5c>
 8006a6a:	440f      	add	r7, r1
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 8006a6c:	b954      	cbnz	r4, 8006a84 <JPEG_Bits_To_SizeCodes+0x30>
  for (l = 0; l < 16UL; l++)
 8006a6e:	3601      	adds	r6, #1
 8006a70:	2e11      	cmp	r6, #17
 8006a72:	d1f3      	bne.n	8006a5c <JPEG_Bits_To_SizeCodes+0x8>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 8006a74:	554c      	strb	r4, [r1, r5]
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8006a76:	2601      	movs	r6, #1
  *LastK = p;
 8006a78:	601d      	str	r5, [r3, #0]
  code = 0;
 8006a7a:	4623      	mov	r3, r4
  si = Huffsize[0];
 8006a7c:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 8006a7e:	5d08      	ldrb	r0, [r1, r4]
 8006a80:	b9a0      	cbnz	r0, 8006aac <JPEG_Bits_To_SizeCodes+0x58>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 8006a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
      i--;
 8006a84:	3c01      	subs	r4, #1
      Huffsize[p] = (uint8_t) l + 1U;
 8006a86:	f807 6b01 	strb.w	r6, [r7], #1
      i--;
 8006a8a:	e7ef      	b.n	8006a6c <JPEG_Bits_To_SizeCodes+0x18>
      Huffcode[p] = code;
 8006a8c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
      p++;
 8006a90:	3401      	adds	r4, #1
    while (((uint32_t) Huffsize[p]) == si)
 8006a92:	5d08      	ldrb	r0, [r1, r4]
 8006a94:	193b      	adds	r3, r7, r4
 8006a96:	42a8      	cmp	r0, r5
 8006a98:	d0f8      	beq.n	8006a8c <JPEG_Bits_To_SizeCodes+0x38>
    if(si > 31UL)
 8006a9a:	2d1f      	cmp	r5, #31
 8006a9c:	d808      	bhi.n	8006ab0 <JPEG_Bits_To_SizeCodes+0x5c>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8006a9e:	fa06 f005 	lsl.w	r0, r6, r5
 8006aa2:	4298      	cmp	r0, r3
 8006aa4:	d904      	bls.n	8006ab0 <JPEG_Bits_To_SizeCodes+0x5c>
    code <<= 1;
 8006aa6:	005b      	lsls	r3, r3, #1
    si++;
 8006aa8:	3501      	adds	r5, #1
 8006aaa:	e7e8      	b.n	8006a7e <JPEG_Bits_To_SizeCodes+0x2a>
 8006aac:	1b1f      	subs	r7, r3, r4
 8006aae:	e7f0      	b.n	8006a92 <JPEG_Bits_To_SizeCodes+0x3e>
      return HAL_ERROR;
 8006ab0:	2001      	movs	r0, #1
 8006ab2:	e7e6      	b.n	8006a82 <JPEG_Bits_To_SizeCodes+0x2e>

08006ab4 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8006ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ab6:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
 8006aba:	460d      	mov	r5, r1
 8006abc:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8006abe:	ab01      	add	r3, sp, #4
 8006ac0:	aa43      	add	r2, sp, #268	; 0x10c
 8006ac2:	a902      	add	r1, sp, #8
 8006ac4:	f7ff ffc6 	bl	8006a54 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8006ac8:	b938      	cbnz	r0, 8006ada <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 8006aca:	9e01      	ldr	r6, [sp, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	f104 0110 	add.w	r1, r4, #16
 8006ad2:	3610      	adds	r6, #16
 8006ad4:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 8006ad6:	42a1      	cmp	r1, r4
 8006ad8:	d102      	bne.n	8006ae0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8006ada:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
 8006ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 8006ae0:	f811 6b01 	ldrb.w	r6, [r1], #1
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8006ae4:	2e0b      	cmp	r6, #11
 8006ae6:	d80a      	bhi.n	8006afe <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8006ae8:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8006aec:	f852 cb04 	ldr.w	ip, [r2], #4
 8006af0:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8006af4:	f813 7b01 	ldrb.w	r7, [r3], #1
 8006af8:	3f01      	subs	r7, #1
 8006afa:	55af      	strb	r7, [r5, r6]
      k++;
 8006afc:	e7eb      	b.n	8006ad6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 8006afe:	2001      	movs	r0, #1
 8006b00:	e7eb      	b.n	8006ada <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

08006b02 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8006b02:	4603      	mov	r3, r0
 8006b04:	4608      	mov	r0, r1
 8006b06:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8006b08:	681c      	ldr	r4, [r3, #0]
{
 8006b0a:	b091      	sub	sp, #68	; 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8006b0c:	f504 63f8 	add.w	r3, r4, #1984	; 0x7c0
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d125      	bne.n	8006b60 <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8006b14:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8006b18:	a901      	add	r1, sp, #4
 8006b1a:	f7ff ffcb 	bl	8006ab4 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 8006b1e:	b9e8      	cbnz	r0, 8006b5c <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 8006b20:	aa01      	add	r2, sp, #4
 8006b22:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 8006b26:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 8006b2a:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 8006b2c:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 8006b2e:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8006b30:	7ad3      	ldrb	r3, [r2, #11]
    while (i > 1UL)
 8006b32:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8006b34:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    while (i > 1UL)
 8006b38:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8006b3a:	021b      	lsls	r3, r3, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8006b3c:	f895 703c 	ldrb.w	r7, [r5, #60]	; 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8006b40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006b44:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8006b46:	7b13      	ldrb	r3, [r2, #12]
 8006b48:	021b      	lsls	r3, r3, #8
 8006b4a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006b4e:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8006b50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006b54:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8006b58:	42b4      	cmp	r4, r6
 8006b5a:	d1e9      	bne.n	8006b30 <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8006b5c:	b011      	add	sp, #68	; 0x44
 8006b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8006b60:	f504 63fc 	add.w	r3, r4, #2016	; 0x7e0
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d102      	bne.n	8006b6e <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8006b68:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
 8006b6c:	e7d4      	b.n	8006b18 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 8006b6e:	2001      	movs	r0, #1
 8006b70:	e7f4      	b.n	8006b5c <JPEG_Set_HuffDC_Mem+0x5a>

08006b72 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8006b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8006b76:	6804      	ldr	r4, [r0, #0]
{
 8006b78:	f6ad 0d38 	subw	sp, sp, #2104	; 0x838
 8006b7c:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8006b7e:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d115      	bne.n	8006bb2 <JPEG_Set_HuffAC_Mem+0x40>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8006b86:	f204 6444 	addw	r4, r4, #1604	; 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8006b8a:	466b      	mov	r3, sp
 8006b8c:	f20d 4234 	addw	r2, sp, #1076	; 0x434
 8006b90:	a901      	add	r1, sp, #4
 8006b92:	4628      	mov	r0, r5
 8006b94:	f7ff ff5e 	bl	8006a54 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	d15d      	bne.n	8006c58 <JPEG_Set_HuffAC_Mem+0xe6>
 8006b9c:	9b00      	ldr	r3, [sp, #0]
 8006b9e:	460e      	mov	r6, r1
 8006ba0:	f105 0c10 	add.w	ip, r5, #16
 8006ba4:	4617      	mov	r7, r2
 8006ba6:	3310      	adds	r3, #16
      l = (msb * 10UL) + lsb - 1UL;
 8006ba8:	f04f 0e0a 	mov.w	lr, #10
 8006bac:	18e9      	adds	r1, r5, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8006bae:	ad42      	add	r5, sp, #264	; 0x108
 8006bb0:	e021      	b.n	8006bf6 <JPEG_Set_HuffAC_Mem+0x84>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8006bb2:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d110      	bne.n	8006bdc <JPEG_Set_HuffAC_Mem+0x6a>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8006bba:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
 8006bbe:	e7e4      	b.n	8006b8a <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 8006bc0:	f81c 3b01 	ldrb.w	r3, [ip], #1
    if (l == 0UL)
 8006bc4:	b163      	cbz	r3, 8006be0 <JPEG_Set_HuffAC_Mem+0x6e>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8006bc6:	2bf0      	cmp	r3, #240	; 0xf0
 8006bc8:	d04a      	beq.n	8006c60 <JPEG_Set_HuffAC_Mem+0xee>
      msb = (l & 0xF0UL) >> 4;
 8006bca:	ea4f 1813 	mov.w	r8, r3, lsr #4
      lsb = (l & 0x0FUL);
 8006bce:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	fb0e 3308 	mla	r3, lr, r8, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8006bd8:	2ba1      	cmp	r3, #161	; 0xa1
 8006bda:	d902      	bls.n	8006be2 <JPEG_Set_HuffAC_Mem+0x70>
      return HAL_ERROR; /* Huffman Table overflow error*/
 8006bdc:	2001      	movs	r0, #1
  }

  if (HuffTableAC != NULL)
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
    if (error != HAL_OK)
 8006bde:	e03b      	b.n	8006c58 <JPEG_Set_HuffAC_Mem+0xe6>
      l = 160; /*l = 0x00 EOB code*/
 8006be0:	23a0      	movs	r3, #160	; 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8006be2:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8006be6:	f857 8b04 	ldr.w	r8, [r7], #4
 8006bea:	f8c2 80a4 	str.w	r8, [r2, #164]	; 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8006bee:	f816 2b01 	ldrb.w	r2, [r6], #1
 8006bf2:	3a01      	subs	r2, #1
 8006bf4:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
 8006bf6:	4561      	cmp	r1, ip
 8006bf8:	d1e2      	bne.n	8006bc0 <JPEG_Set_HuffAC_Mem+0x4e>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 8006bfa:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 8006bfe:	a942      	add	r1, sp, #264	; 0x108
 8006c00:	f5a4 76a2 	sub.w	r6, r4, #324	; 0x144
 8006c04:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 8006c06:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 8006c08:	6063      	str	r3, [r4, #4]
 8006c0a:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 8006c0c:	f103 33d1 	add.w	r3, r3, #3520188881	; 0xd1d1d1d1
 8006c10:	f103 232e 	add.w	r3, r3, #771763712	; 0x2e002e00
 8006c14:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 8006c16:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 8006c1a:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 8006c1c:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 8006c20:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 8006c22:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 8006c26:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8006c28:	f891 30a1 	ldrb.w	r3, [r1, #161]	; 0xa1
    while (i > 1UL)
 8006c2c:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8006c2e:	f895 2330 	ldrb.w	r2, [r5, #816]	; 0x330
    while (i > 1UL)
 8006c32:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8006c34:	021b      	lsls	r3, r3, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8006c36:	f895 732c 	ldrb.w	r7, [r5, #812]	; 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8006c3a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006c3e:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8006c40:	f891 30a2 	ldrb.w	r3, [r1, #162]	; 0xa2
 8006c44:	021b      	lsls	r3, r3, #8
 8006c46:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006c4a:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8006c4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c50:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8006c54:	42b4      	cmp	r4, r6
 8006c56:	d1e7      	bne.n	8006c28 <JPEG_Set_HuffAC_Mem+0xb6>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8006c58:	f60d 0d38 	addw	sp, sp, #2104	; 0x838
 8006c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      l = 161;
 8006c60:	23a1      	movs	r3, #161	; 0xa1
 8006c62:	e7be      	b.n	8006be2 <JPEG_Set_HuffAC_Mem+0x70>

08006c64 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8006c64:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006c66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006c6a:	6543      	str	r3, [r0, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006c6c:	6d42      	ldr	r2, [r0, #84]	; 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8006c6e:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006c70:	f002 0203 	and.w	r2, r2, #3
 8006c74:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	bf0c      	ite	eq
 8006c7a:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8006c7e:	f022 0208 	bicne.w	r2, r2, #8
 8006c82:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	f022 0201 	bic.w	r2, r2, #1
 8006c8a:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8006c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c8e:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8006c92:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8006c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c96:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8006c9a:	631a      	str	r2, [r3, #48]	; 0x30
  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8006c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ca2:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8006ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ca6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006caa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8006cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cae:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006cb2:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	f042 0201 	orr.w	r2, r2, #1
 8006cba:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8006cbc:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8006cbe:	f002 020c 	and.w	r2, r2, #12
 8006cc2:	2a08      	cmp	r2, #8
 8006cc4:	d104      	bne.n	8006cd0 <JPEG_Init_Process+0x6c>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8006cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cc8:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8006ccc:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8006cce:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8006cd0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8006cd2:	f002 020c 	and.w	r2, r2, #12
 8006cd6:	2a0c      	cmp	r2, #12
 8006cd8:	d1f9      	bne.n	8006cce <JPEG_Init_Process+0x6a>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8006cda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cdc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006ce0:	e7f4      	b.n	8006ccc <JPEG_Init_Process+0x68>
	...

08006ce4 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8006ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 8006ce6:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8006ce8:	4604      	mov	r4, r0
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d927      	bls.n	8006d3e <JPEG_DMA_StartProcess+0x5a>
 8006cee:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006cf0:	2903      	cmp	r1, #3
 8006cf2:	d924      	bls.n	8006d3e <JPEG_DMA_StartProcess+0x5a>
  {
    return HAL_ERROR;
  }
  /* Reset Ending DMA internal context flag*/
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 8006cf4:	6d42      	ldr	r2, [r0, #84]	; 0x54
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
  /* Set the DMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8006cf6:	f023 0303 	bic.w	r3, r3, #3
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 8006cfa:	4d1a      	ldr	r5, [pc, #104]	; (8006d64 <JPEG_DMA_StartProcess+0x80>)

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 8006cfc:	f021 0103 	bic.w	r1, r1, #3
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 8006d00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 8006d04:	4e18      	ldr	r6, [pc, #96]	; (8006d68 <JPEG_DMA_StartProcess+0x84>)
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 8006d06:	4f19      	ldr	r7, [pc, #100]	; (8006d6c <JPEG_DMA_StartProcess+0x88>)
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 8006d08:	6542      	str	r2, [r0, #84]	; 0x54
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 8006d0a:	6802      	ldr	r2, [r0, #0]
 8006d0c:	6b10      	ldr	r0, [r2, #48]	; 0x30

  /* Start DMA FIFO In transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8006d0e:	3240      	adds	r2, #64	; 0x40
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 8006d10:	f420 50c0 	bic.w	r0, r0, #6144	; 0x1800
 8006d14:	f842 0c10 	str.w	r0, [r2, #-16]
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 8006d18:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006d1a:	63c5      	str	r5, [r0, #60]	; 0x3c
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 8006d1c:	6b65      	ldr	r5, [r4, #52]	; 0x34
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 8006d1e:	64c6      	str	r6, [r0, #76]	; 0x4c
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
 8006d20:	64ee      	str	r6, [r5, #76]	; 0x4c
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 8006d22:	4e13      	ldr	r6, [pc, #76]	; (8006d70 <JPEG_DMA_StartProcess+0x8c>)
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 8006d24:	63ef      	str	r7, [r5, #60]	; 0x3c
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 8006d26:	652e      	str	r6, [r5, #80]	; 0x50
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8006d28:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8006d2a:	089b      	lsrs	r3, r3, #2
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 8006d2c:	62e1      	str	r1, [r4, #44]	; 0x2c
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8006d2e:	69a1      	ldr	r1, [r4, #24]
 8006d30:	f7fe fb72 	bl	8005418 <HAL_DMA_Start_IT>
 8006d34:	b128      	cbz	r0, 8006d42 <JPEG_DMA_StartProcess+0x5e>

  /* Start DMA FIFO Out transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
                       hjpeg->OutDataLength >> 2)  != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8006d36:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006d38:	f043 0304 	orr.w	r3, r3, #4
 8006d3c:	6523      	str	r3, [r4, #80]	; 0x50
    return HAL_ERROR;
 8006d3e:	2001      	movs	r0, #1
 8006d40:	e00e      	b.n	8006d60 <JPEG_DMA_StartProcess+0x7c>
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8006d42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006d44:	6821      	ldr	r1, [r4, #0]
 8006d46:	089b      	lsrs	r3, r3, #2
 8006d48:	69e2      	ldr	r2, [r4, #28]
 8006d4a:	3144      	adds	r1, #68	; 0x44
 8006d4c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006d4e:	f7fe fb63 	bl	8005418 <HAL_DMA_Start_IT>
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d1ef      	bne.n	8006d36 <JPEG_DMA_StartProcess+0x52>
    return HAL_ERROR;
  }

  /* Enable JPEG In/Out DMA requests*/
  JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA | JPEG_DMA_ODMA);
 8006d56:	6822      	ldr	r2, [r4, #0]
 8006d58:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006d5a:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8006d5e:	6313      	str	r3, [r2, #48]	; 0x30

  return HAL_OK;
}
 8006d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d62:	bf00      	nop
 8006d64:	080072d1 	.word	0x080072d1
 8006d68:	080071b5 	.word	0x080071b5
 8006d6c:	08007785 	.word	0x08007785
 8006d70:	08007775 	.word	0x08007775

08006d74 <HAL_JPEG_Init>:
{
 8006d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 8006d76:	4604      	mov	r4, r0
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	f000 811f 	beq.w	8006fbc <HAL_JPEG_Init+0x248>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8006d7e:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 8006d82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006d86:	b91b      	cbnz	r3, 8006d90 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 8006d88:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8006d8c:	f7fc ffa8 	bl	8003ce0 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 8006d90:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8006d92:	2302      	movs	r3, #2
 8006d94:	498a      	ldr	r1, [pc, #552]	; (8006fc0 <HAL_JPEG_Init+0x24c>)
 8006d96:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 8006d9a:	f502 705b 	add.w	r0, r2, #876	; 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 8006d9e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006da0:	f502 7557 	add.w	r5, r2, #860	; 0x35c
 8006da4:	f043 0301 	orr.w	r3, r3, #1
 8006da8:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8006daa:	6813      	ldr	r3, [r2, #0]
 8006dac:	f023 0301 	bic.w	r3, r3, #1
 8006db0:	6013      	str	r3, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8006db2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006db4:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8006db8:	6313      	str	r3, [r2, #48]	; 0x30
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8006dba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006dbc:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8006dc0:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8006dc2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006dc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006dc8:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8006dca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006dd0:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8006dd2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006dd4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006dd8:	6393      	str	r3, [r2, #56]	; 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8006dda:	4b7a      	ldr	r3, [pc, #488]	; (8006fc4 <HAL_JPEG_Init+0x250>)
 8006ddc:	63e3      	str	r3, [r4, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8006dde:	4b7a      	ldr	r3, [pc, #488]	; (8006fc8 <HAL_JPEG_Init+0x254>)
 8006de0:	6423      	str	r3, [r4, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 8006de2:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 8006de4:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8006de8:	7b8b      	ldrb	r3, [r1, #14]
  while (index > 3UL)
 8006dea:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006dec:	7cce      	ldrb	r6, [r1, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8006dee:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006df0:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8006df4:	7c0e      	ldrb	r6, [r1, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8006df6:	4333      	orrs	r3, r6
 8006df8:	7c4e      	ldrb	r6, [r1, #17]
 8006dfa:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006dfe:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 8006e02:	42a8      	cmp	r0, r5
 8006e04:	d1f0      	bne.n	8006de8 <HAL_JPEG_Init+0x74>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006e06:	4b71      	ldr	r3, [pc, #452]	; (8006fcc <HAL_JPEG_Init+0x258>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8006e08:	f502 7662 	add.w	r6, r2, #904	; 0x388
 8006e0c:	4970      	ldr	r1, [pc, #448]	; (8006fd0 <HAL_JPEG_Init+0x25c>)
 8006e0e:	f502 775e 	add.w	r7, r2, #888	; 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006e12:	f8c2 3378 	str.w	r3, [r2, #888]	; 0x378
 8006e16:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8006e1a:	460d      	mov	r5, r1
 8006e1c:	4630      	mov	r0, r6
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006e1e:	f8c2 3374 	str.w	r3, [r2, #884]	; 0x374
 8006e22:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
 8006e26:	f8c2 3370 	str.w	r3, [r2, #880]	; 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8006e2a:	7bab      	ldrb	r3, [r5, #14]
  while (index > 3UL)
 8006e2c:	3d04      	subs	r5, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006e2e:	f895 c013 	ldrb.w	ip, [r5, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8006e32:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006e34:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8006e38:	f895 c010 	ldrb.w	ip, [r5, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8006e3c:	ea43 030c 	orr.w	r3, r3, ip
 8006e40:	f895 c011 	ldrb.w	ip, [r5, #17]
 8006e44:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006e48:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 8006e4c:	42be      	cmp	r6, r7
 8006e4e:	d1ec      	bne.n	8006e2a <HAL_JPEG_Init+0xb6>
  value = *address & 0xFFFF0000U;
 8006e50:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8006e54:	f502 6585 	add.w	r5, r2, #1064	; 0x428
  value = *address & 0xFFFF0000U;
 8006e58:	0c1b      	lsrs	r3, r3, #16
 8006e5a:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8006e5c:	f443 437a 	orr.w	r3, r3, #64000	; 0xfa00
 8006e60:	f043 03f9 	orr.w	r3, r3, #249	; 0xf9
  *address = value;
 8006e64:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8006e68:	f891 30ae 	ldrb.w	r3, [r1, #174]	; 0xae
  while (index > 3UL)
 8006e6c:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006e6e:	f891 60b3 	ldrb.w	r6, [r1, #179]	; 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8006e72:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006e74:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8006e78:	f891 60b0 	ldrb.w	r6, [r1, #176]	; 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8006e7c:	4333      	orrs	r3, r6
 8006e7e:	f891 60b1 	ldrb.w	r6, [r1, #177]	; 0xb1
 8006e82:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006e86:	f845 3904 	str.w	r3, [r5], #-4
  while (index > 3UL)
 8006e8a:	4285      	cmp	r5, r0
 8006e8c:	d1ec      	bne.n	8006e68 <HAL_JPEG_Init+0xf4>
  value = *address & 0x0000FFFFU;
 8006e8e:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8006e92:	f502 658b 	add.w	r5, r2, #1112	; 0x458
  value = *address & 0xFFFF0000U;
 8006e96:	484f      	ldr	r0, [pc, #316]	; (8006fd4 <HAL_JPEG_Init+0x260>)
  value = *address & 0x0000FFFFU;
 8006e98:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8006e9a:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
  *address = value;
 8006e9e:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
  value = *address & 0xFFFF0000U;
 8006ea2:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
 8006ea6:	4003      	ands	r3, r0
  *address = value;
 8006ea8:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006eac:	2301      	movs	r3, #1
 8006eae:	f8c2 3438 	str.w	r3, [r2, #1080]	; 0x438
 8006eb2:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 8006eb6:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
 8006eba:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  value = *address & 0x0000FFFFUL;
 8006ebe:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006ec2:	4b45      	ldr	r3, [pc, #276]	; (8006fd8 <HAL_JPEG_Init+0x264>)
  value = *address & 0x0000FFFFUL;
 8006ec4:	b289      	uxth	r1, r1
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8006ec6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  *address = value;
 8006eca:	f8c2 143c 	str.w	r1, [r2, #1084]	; 0x43c
  value = *address & 0xFFFF0000UL;
 8006ece:	f8d2 1448 	ldr.w	r1, [r2, #1096]	; 0x448
 8006ed2:	4001      	ands	r1, r0
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8006ed4:	f441 6130 	orr.w	r1, r1, #2816	; 0xb00
 8006ed8:	f041 010a 	orr.w	r1, r1, #10
  *address = value;
 8006edc:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006ee0:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444
 8006ee4:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
 8006ee8:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
  value = *address & 0x0000FFFFU;
 8006eec:	f8d2 1448 	ldr.w	r1, [r2, #1096]	; 0x448
 8006ef0:	b289      	uxth	r1, r1
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8006ef2:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  *address = value;
 8006ef6:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
  value = *address & 0xFFFF0000U;
 8006efa:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 8006efe:	4937      	ldr	r1, [pc, #220]	; (8006fdc <HAL_JPEG_Init+0x268>)
 8006f00:	4003      	ands	r3, r0
  address = (hjpeg->Instance->DHTMEM + 102);
 8006f02:	f502 609f 	add.w	r0, r2, #1272	; 0x4f8
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8006f06:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8006f0a:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 8006f0e:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006f12:	4b33      	ldr	r3, [pc, #204]	; (8006fe0 <HAL_JPEG_Init+0x26c>)
 8006f14:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454
 8006f18:	4b32      	ldr	r3, [pc, #200]	; (8006fe4 <HAL_JPEG_Init+0x270>)
 8006f1a:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450
 8006f1e:	4b32      	ldr	r3, [pc, #200]	; (8006fe8 <HAL_JPEG_Init+0x274>)
 8006f20:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
  value = *address & 0x0000FFFFUL;
 8006f24:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 8006f28:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8006f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
 8006f2e:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8006f32:	f891 30b0 	ldrb.w	r3, [r1, #176]	; 0xb0
  while (index > 3UL)
 8006f36:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006f38:	f891 60b5 	ldrb.w	r6, [r1, #181]	; 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8006f3c:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8006f3e:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8006f42:	f891 60b2 	ldrb.w	r6, [r1, #178]	; 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8006f46:	4333      	orrs	r3, r6
 8006f48:	f891 60b3 	ldrb.w	r6, [r1, #179]	; 0xb3
 8006f4c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006f50:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 8006f54:	42a8      	cmp	r0, r5
 8006f56:	d1ec      	bne.n	8006f32 <HAL_JPEG_Init+0x1be>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8006f58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f5c:	491c      	ldr	r1, [pc, #112]	; (8006fd0 <HAL_JPEG_Init+0x25c>)
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f7ff fe07 	bl	8006b72 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8006f64:	b110      	cbz	r0, 8006f6c <HAL_JPEG_Init+0x1f8>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8006f66:	2001      	movs	r0, #1
 8006f68:	6520      	str	r0, [r4, #80]	; 0x50
}
 8006f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                              (hjpeg->Instance->HUFFENC_AC1));
 8006f6c:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8006f6e:	4620      	mov	r0, r4
 8006f70:	491a      	ldr	r1, [pc, #104]	; (8006fdc <HAL_JPEG_Init+0x268>)
 8006f72:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
 8006f76:	f7ff fdfc 	bl	8006b72 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	d1f3      	bne.n	8006f66 <HAL_JPEG_Init+0x1f2>
                              hjpeg->Instance->HUFFENC_DC0);
 8006f7e:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8006f80:	4620      	mov	r0, r4
 8006f82:	490f      	ldr	r1, [pc, #60]	; (8006fc0 <HAL_JPEG_Init+0x24c>)
 8006f84:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8006f88:	f7ff fdbb 	bl	8006b02 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d1ea      	bne.n	8006f66 <HAL_JPEG_Init+0x1f2>
                              hjpeg->Instance->HUFFENC_DC1);
 8006f90:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8006f92:	4620      	mov	r0, r4
 8006f94:	4915      	ldr	r1, [pc, #84]	; (8006fec <HAL_JPEG_Init+0x278>)
 8006f96:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
 8006f9a:	f7ff fdb2 	bl	8006b02 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d1e1      	bne.n	8006f66 <HAL_JPEG_Init+0x1f2>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8006fa2:	6822      	ldr	r2, [r4, #0]
 8006fa4:	6853      	ldr	r3, [r2, #4]
 8006fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006faa:	6053      	str	r3, [r2, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8006fac:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 8006fae:	6220      	str	r0, [r4, #32]
  hjpeg->JpegOutCount = 0;
 8006fb0:	6260      	str	r0, [r4, #36]	; 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8006fb2:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8006fb6:	6520      	str	r0, [r4, #80]	; 0x50
  hjpeg->Context = 0;
 8006fb8:	6560      	str	r0, [r4, #84]	; 0x54
  return HAL_OK;
 8006fba:	e7d6      	b.n	8006f6a <HAL_JPEG_Init+0x1f6>
    return HAL_ERROR;
 8006fbc:	2001      	movs	r0, #1
 8006fbe:	e7d4      	b.n	8006f6a <HAL_JPEG_Init+0x1f6>
 8006fc0:	080202ed 	.word	0x080202ed
 8006fc4:	08020309 	.word	0x08020309
 8006fc8:	08020291 	.word	0x08020291
 8006fcc:	0b0a0908 	.word	0x0b0a0908
 8006fd0:	080201df 	.word	0x080201df
 8006fd4:	ffff0000 	.word	0xffff0000
 8006fd8:	09080706 	.word	0x09080706
 8006fdc:	0802012d 	.word	0x0802012d
 8006fe0:	01000404 	.word	0x01000404
 8006fe4:	05070403 	.word	0x05070403
 8006fe8:	04040201 	.word	0x04040201
 8006fec:	080202d1 	.word	0x080202d1

08006ff0 <HAL_JPEG_GetInfo>:
{
 8006ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	d06a      	beq.n	80070ce <HAL_JPEG_GetInfo+0xde>
 8006ff8:	2900      	cmp	r1, #0
 8006ffa:	d068      	beq.n	80070ce <HAL_JPEG_GetInfo+0xde>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8006ffc:	6804      	ldr	r4, [r0, #0]
 8006ffe:	6863      	ldr	r3, [r4, #4]
 8007000:	f003 0303 	and.w	r3, r3, #3
 8007004:	2b02      	cmp	r3, #2
 8007006:	d13b      	bne.n	8007080 <HAL_JPEG_GetInfo+0x90>
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8007008:	2310      	movs	r3, #16
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 800700a:	600b      	str	r3, [r1, #0]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800700c:	6863      	ldr	r3, [r4, #4]
 800700e:	0c1b      	lsrs	r3, r3, #16
 8007010:	608b      	str	r3, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8007012:	68e3      	ldr	r3, [r4, #12]
 8007014:	0c1b      	lsrs	r3, r3, #16
 8007016:	60cb      	str	r3, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8007018:	680b      	ldr	r3, [r1, #0]
 800701a:	f023 0320 	bic.w	r3, r3, #32
 800701e:	2b10      	cmp	r3, #16
 8007020:	d13b      	bne.n	800709a <HAL_JPEG_GetInfo+0xaa>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8007022:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8007024:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8007026:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800702a:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800702c:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800702e:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8007030:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007034:	d12f      	bne.n	8007096 <HAL_JPEG_GetInfo+0xa6>
 8007036:	4313      	orrs	r3, r2
 8007038:	071a      	lsls	r2, r3, #28
 800703a:	d12e      	bne.n	800709a <HAL_JPEG_GetInfo+0xaa>
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800703c:	2302      	movs	r3, #2
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800703e:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 8007040:	2300      	movs	r3, #0
 8007042:	3450      	adds	r4, #80	; 0x50
 8007044:	f8df c08c 	ldr.w	ip, [pc, #140]	; 80070d4 <HAL_JPEG_GetInfo+0xe4>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 8007048:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800704a:	f04f 0e64 	mov.w	lr, #100	; 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 800704e:	f241 3888 	movw	r8, #5000	; 0x1388
    quantRow = *tableAddress;
 8007052:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 8007056:	eb0c 0705 	add.w	r7, ip, r5
    quantRow = *tableAddress;
 800705a:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800705c:	fa29 f206 	lsr.w	r2, r9, r6
 8007060:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 8007062:	2a01      	cmp	r2, #1
 8007064:	d120      	bne.n	80070a8 <HAL_JPEG_GetInfo+0xb8>
        quality += 100UL;
 8007066:	3364      	adds	r3, #100	; 0x64
    for (j = 0; j < 4UL; j++)
 8007068:	3608      	adds	r6, #8
 800706a:	3701      	adds	r7, #1
 800706c:	2e20      	cmp	r6, #32
 800706e:	d1f5      	bne.n	800705c <HAL_JPEG_GetInfo+0x6c>
        }
      }
    }

    i += 4UL;
 8007070:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8007072:	2d40      	cmp	r5, #64	; 0x40
 8007074:	d1ed      	bne.n	8007052 <HAL_JPEG_GetInfo+0x62>
    tableAddress ++;
  }

  return (quality / 64UL);
 8007076:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 8007078:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800707a:	610b      	str	r3, [r1, #16]
}
 800707c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8007080:	6863      	ldr	r3, [r4, #4]
 8007082:	f013 0303 	ands.w	r3, r3, #3
 8007086:	d0c0      	beq.n	800700a <HAL_JPEG_GetInfo+0x1a>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8007088:	6863      	ldr	r3, [r4, #4]
 800708a:	f003 0303 	and.w	r3, r3, #3
 800708e:	2b03      	cmp	r3, #3
 8007090:	d11d      	bne.n	80070ce <HAL_JPEG_GetInfo+0xde>
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8007092:	2330      	movs	r3, #48	; 0x30
 8007094:	e7b9      	b.n	800700a <HAL_JPEG_GetInfo+0x1a>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007096:	2d03      	cmp	r5, #3
 8007098:	d001      	beq.n	800709e <HAL_JPEG_GetInfo+0xae>
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800709a:	2300      	movs	r3, #0
 800709c:	e7cf      	b.n	800703e <HAL_JPEG_GetInfo+0x4e>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800709e:	4313      	orrs	r3, r2
 80070a0:	071b      	lsls	r3, r3, #28
 80070a2:	d1fa      	bne.n	800709a <HAL_JPEG_GetInfo+0xaa>
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e7ca      	b.n	800703e <HAL_JPEG_GetInfo+0x4e>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80070a8:	fb0e fb02 	mul.w	fp, lr, r2
 80070ac:	f897 a000 	ldrb.w	sl, [r7]
 80070b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80070b2:	f812 a00a 	ldrb.w	sl, [r2, sl]
 80070b6:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 80070ba:	2a64      	cmp	r2, #100	; 0x64
          quality += 5000UL / scale;
 80070bc:	bf8b      	itete	hi
 80070be:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 80070c2:	f1c2 02c8 	rsbls	r2, r2, #200	; 0xc8
          quality += 5000UL / scale;
 80070c6:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 80070c8:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 80070cc:	e7cc      	b.n	8007068 <HAL_JPEG_GetInfo+0x78>
    return HAL_ERROR;
 80070ce:	2001      	movs	r0, #1
 80070d0:	e7d4      	b.n	800707c <HAL_JPEG_GetInfo+0x8c>
 80070d2:	bf00      	nop
 80070d4:	08020349 	.word	0x08020349

080070d8 <HAL_JPEG_Decode_DMA>:
{
 80070d8:	b570      	push	{r4, r5, r6, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 80070da:	4604      	mov	r4, r0
 80070dc:	b348      	cbz	r0, 8007132 <HAL_JPEG_Decode_DMA+0x5a>
 80070de:	b341      	cbz	r1, 8007132 <HAL_JPEG_Decode_DMA+0x5a>
 80070e0:	b33b      	cbz	r3, 8007132 <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 80070e2:	f890 504c 	ldrb.w	r5, [r0, #76]	; 0x4c
 80070e6:	2d01      	cmp	r5, #1
 80070e8:	d028      	beq.n	800713c <HAL_JPEG_Decode_DMA+0x64>
 80070ea:	2501      	movs	r5, #1
 80070ec:	f880 504c 	strb.w	r5, [r0, #76]	; 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 80070f0:	f890 504d 	ldrb.w	r5, [r0, #77]	; 0x4d
 80070f4:	2d01      	cmp	r5, #1
 80070f6:	d11e      	bne.n	8007136 <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 80070f8:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 80070fa:	6282      	str	r2, [r0, #40]	; 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 80070fc:	f880 504d 	strb.w	r5, [r0, #77]	; 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8007100:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8007102:	f025 050f 	bic.w	r5, r5, #15
 8007106:	6545      	str	r5, [r0, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8007108:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800710a:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800710e:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8007112:	6545      	str	r5, [r0, #84]	; 0x54
    hjpeg->JpegInCount = 0;
 8007114:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 8007116:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 8007118:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 800711a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hjpeg->JpegOutCount = 0;
 800711c:	6245      	str	r5, [r0, #36]	; 0x24
    JPEG_Init_Process(hjpeg);
 800711e:	f7ff fda1 	bl	8006c64 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8007122:	f7ff fddf 	bl	8006ce4 <JPEG_DMA_StartProcess>
 8007126:	b128      	cbz	r0, 8007134 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007128:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 800712a:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800712e:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    return HAL_ERROR;
 8007132:	2001      	movs	r0, #1
}
 8007134:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hjpeg);
 8007136:	2300      	movs	r3, #0
 8007138:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  __HAL_LOCK(hjpeg);
 800713c:	2002      	movs	r0, #2
 800713e:	e7f9      	b.n	8007134 <HAL_JPEG_Decode_DMA+0x5c>

08007140 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8007140:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8007142:	f003 030c 	and.w	r3, r3, #12
 8007146:	2b0c      	cmp	r3, #12
 8007148:	d117      	bne.n	800717a <HAL_JPEG_Pause+0x3a>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800714a:	f011 0301 	ands.w	r3, r1, #1
 800714e:	d005      	beq.n	800715c <HAL_JPEG_Pause+0x1c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8007150:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8007152:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007156:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 8007158:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800715c:	0789      	lsls	r1, r1, #30
 800715e:	d505      	bpl.n	800716c <HAL_JPEG_Pause+0x2c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8007160:	6d42      	ldr	r2, [r0, #84]	; 0x54
      mask |= JPEG_DMA_ODMA;
 8007162:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8007166:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800716a:	6542      	str	r2, [r0, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800716c:	6801      	ldr	r1, [r0, #0]
 800716e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8007170:	ea22 0303 	bic.w	r3, r2, r3
 8007174:	630b      	str	r3, [r1, #48]	; 0x30
}
 8007176:	2000      	movs	r0, #0
 8007178:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800717a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800717c:	f003 030c 	and.w	r3, r3, #12
 8007180:	2b08      	cmp	r3, #8
 8007182:	d1f8      	bne.n	8007176 <HAL_JPEG_Pause+0x36>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8007184:	f011 0301 	ands.w	r3, r1, #1
 8007188:	d004      	beq.n	8007194 <HAL_JPEG_Pause+0x54>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800718a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800718c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007190:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8007192:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8007194:	078a      	lsls	r2, r1, #30
 8007196:	d5e9      	bpl.n	800716c <HAL_JPEG_Pause+0x2c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8007198:	6d42      	ldr	r2, [r0, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800719a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800719e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071a2:	6542      	str	r2, [r0, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80071a4:	e7e2      	b.n	800716c <HAL_JPEG_Pause+0x2c>

080071a6 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 80071a6:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 80071a8:	6282      	str	r2, [r0, #40]	; 0x28
}
 80071aa:	4770      	bx	lr

080071ac <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 80071ac:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 80071ae:	62c2      	str	r2, [r0, #44]	; 0x2c
}
 80071b0:	4770      	bx	lr

080071b2 <HAL_JPEG_EncodeCpltCallback>:
 80071b2:	4770      	bx	lr

080071b4 <JPEG_DMAErrorCallback>:
{
 80071b4:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071b6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80071b8:	f7fe fa3c 	bl	8005634 <HAL_DMA_GetError>
 80071bc:	2802      	cmp	r0, #2
 80071be:	d016      	beq.n	80071ee <JPEG_DMAErrorCallback+0x3a>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80071c0:	6823      	ldr	r3, [r4, #0]
    HAL_JPEG_ErrorCallback(hjpeg);
 80071c2:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	f022 0201 	bic.w	r2, r2, #1
 80071ca:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80071cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071ce:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80071d2:	631a      	str	r2, [r3, #48]	; 0x30
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 80071d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071d6:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 80071da:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->State = HAL_JPEG_STATE_READY;
 80071dc:	2301      	movs	r3, #1
 80071de:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80071e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80071e4:	f043 0304 	orr.w	r3, r3, #4
 80071e8:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_JPEG_ErrorCallback(hjpeg);
 80071ea:	f7fa fac9 	bl	8001780 <HAL_JPEG_ErrorCallback>
}
 80071ee:	bd10      	pop	{r4, pc}

080071f0 <JPEG_ReadInputData>:
{
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 80071f2:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 80071f4:	4604      	mov	r4, r0
 80071f6:	460e      	mov	r6, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 80071f8:	bb35      	cbnz	r5, 8007248 <JPEG_ReadInputData+0x58>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 80071fa:	2101      	movs	r1, #1
 80071fc:	f7ff ffa0 	bl	8007140 <HAL_JPEG_Pause>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8007200:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007202:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8007206:	d11e      	bne.n	8007246 <JPEG_ReadInputData+0x56>
 8007208:	b1ed      	cbz	r5, 8007246 <JPEG_ReadInputData+0x56>
    if (nb_words >= nbRequestWords)
 800720a:	ebb6 0f95 	cmp.w	r6, r5, lsr #2
    nb_words = nb_bytes / 4UL;
 800720e:	ea4f 0795 	mov.w	r7, r5, lsr #2
    if (nb_words >= nbRequestWords)
 8007212:	d830      	bhi.n	8007276 <JPEG_ReadInputData+0x86>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007214:	69a5      	ldr	r5, [r4, #24]
 8007216:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 8007218:	6a20      	ldr	r0, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800721a:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800721c:	1829      	adds	r1, r5, r0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800721e:	5c28      	ldrb	r0, [r5, r0]
      for (index = 0; index < nbRequestWords; index++)
 8007220:	429e      	cmp	r6, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007222:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007224:	f891 c001 	ldrb.w	ip, [r1, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007228:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800722c:	78c9      	ldrb	r1, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800722e:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8007232:	ea42 0200 	orr.w	r2, r2, r0
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007236:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800723a:	643a      	str	r2, [r7, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
 800723c:	6a22      	ldr	r2, [r4, #32]
 800723e:	f102 0204 	add.w	r2, r2, #4
 8007242:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8007244:	d1e8      	bne.n	8007218 <JPEG_ReadInputData+0x28>
}
 8007246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8007248:	6a03      	ldr	r3, [r0, #32]
 800724a:	429d      	cmp	r5, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800724c:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800724e:	d901      	bls.n	8007254 <JPEG_ReadInputData+0x64>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8007250:	1aed      	subs	r5, r5, r3
 8007252:	e7d5      	b.n	8007200 <JPEG_ReadInputData+0x10>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8007254:	429d      	cmp	r5, r3
 8007256:	d10c      	bne.n	8007272 <JPEG_ReadInputData+0x82>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8007258:	6a01      	ldr	r1, [r0, #32]
 800725a:	f7fa fa39 	bl	80016d0 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 800725e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007260:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8007262:	bf84      	itt	hi
 8007264:	f023 0303 	bichi.w	r3, r3, #3
 8007268:	62a3      	strhi	r3, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
 800726a:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 800726c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
 800726e:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 8007270:	e7c6      	b.n	8007200 <JPEG_ReadInputData+0x10>
  uint32_t nb_bytes = 0;
 8007272:	2500      	movs	r5, #0
 8007274:	e7c4      	b.n	8007200 <JPEG_ReadInputData+0x10>
      if (nb_words > 0UL)
 8007276:	2d03      	cmp	r5, #3
 8007278:	d826      	bhi.n	80072c8 <JPEG_ReadInputData+0xd8>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800727a:	69a6      	ldr	r6, [r4, #24]
        for (index = 0; index < nb_bytes; index++)
 800727c:	461a      	mov	r2, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800727e:	6a21      	ldr	r1, [r4, #32]
 8007280:	00d0      	lsls	r0, r2, #3
        for (index = 0; index < nb_bytes; index++)
 8007282:	3201      	adds	r2, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8007284:	5c71      	ldrb	r1, [r6, r1]
        for (index = 0; index < nb_bytes; index++)
 8007286:	4295      	cmp	r5, r2
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8007288:	fa01 f100 	lsl.w	r1, r1, r0
 800728c:	ea43 0301 	orr.w	r3, r3, r1
          hjpeg->JpegInCount++;
 8007290:	6a21      	ldr	r1, [r4, #32]
 8007292:	f101 0101 	add.w	r1, r1, #1
 8007296:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8007298:	d1f1      	bne.n	800727e <JPEG_ReadInputData+0x8e>
        hjpeg->Instance->DIR = dataword;
 800729a:	6822      	ldr	r2, [r4, #0]
 800729c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800729e:	e7d2      	b.n	8007246 <JPEG_ReadInputData+0x56>
          input_count = hjpeg->JpegInCount;
 80072a0:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80072a2:	3301      	adds	r3, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80072a4:	69a6      	ldr	r6, [r4, #24]
 80072a6:	6821      	ldr	r1, [r4, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80072a8:	1970      	adds	r0, r6, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80072aa:	5d75      	ldrb	r5, [r6, r5]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80072ac:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80072ae:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80072b2:	0412      	lsls	r2, r2, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80072b4:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80072b6:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 80072ba:	432a      	orrs	r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80072bc:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80072c0:	640a      	str	r2, [r1, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 80072c2:	6a22      	ldr	r2, [r4, #32]
 80072c4:	3204      	adds	r2, #4
 80072c6:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80072c8:	42bb      	cmp	r3, r7
 80072ca:	d1e9      	bne.n	80072a0 <JPEG_ReadInputData+0xb0>
 80072cc:	e7bb      	b.n	8007246 <JPEG_ReadInputData+0x56>
	...

080072d0 <JPEG_DMAInCpltCallback>:
{
 80072d0:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072d2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072d8:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80072dc:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 80072de:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80072e0:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80072e4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80072e8:	0412      	lsls	r2, r2, #16
 80072ea:	0c12      	lsrs	r2, r2, #16
 80072ec:	2a0c      	cmp	r2, #12
 80072ee:	d12c      	bne.n	800734a <JPEG_DMAInCpltCallback+0x7a>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 80072f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072f6:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 80072f8:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80072fa:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 80072fc:	685a      	ldr	r2, [r3, #4]
 80072fe:	4b1b      	ldr	r3, [pc, #108]	; (800736c <JPEG_DMAInCpltCallback+0x9c>)
 8007300:	ea03 0282 	and.w	r2, r3, r2, lsl #2
 8007304:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007306:	1a9b      	subs	r3, r3, r2
 8007308:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800730a:	6a21      	ldr	r1, [r4, #32]
 800730c:	f7fa f9e0 	bl	80016d0 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= 4UL)
 8007310:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007312:	2b03      	cmp	r3, #3
 8007314:	d91a      	bls.n	800734c <JPEG_DMAInCpltCallback+0x7c>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8007316:	f023 0303 	bic.w	r3, r3, #3
      hjpeg->InDataLength = 4;
 800731a:	62a3      	str	r3, [r4, #40]	; 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800731c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800731e:	04db      	lsls	r3, r3, #19
 8007320:	d41d      	bmi.n	800735e <JPEG_DMAInCpltCallback+0x8e>
 8007322:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007324:	b1db      	cbz	r3, 800735e <JPEG_DMAInCpltCallback+0x8e>
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8007326:	6822      	ldr	r2, [r4, #0]
 8007328:	089b      	lsrs	r3, r3, #2
 800732a:	69a1      	ldr	r1, [r4, #24]
 800732c:	3240      	adds	r2, #64	; 0x40
 800732e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007330:	f7fe f872 	bl	8005418 <HAL_DMA_Start_IT>
 8007334:	b170      	cbz	r0, 8007354 <JPEG_DMAInCpltCallback+0x84>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007336:	6d23      	ldr	r3, [r4, #80]	; 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 8007338:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800733a:	f043 0304 	orr.w	r3, r3, #4
 800733e:	6523      	str	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007340:	2306      	movs	r3, #6
 8007342:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 8007346:	f7fa fa1b 	bl	8001780 <HAL_JPEG_ErrorCallback>
}
 800734a:	bd10      	pop	{r4, pc}
    else if (hjpeg->InDataLength > 0UL)
 800734c:	2b00      	cmp	r3, #0
 800734e:	d0e5      	beq.n	800731c <JPEG_DMAInCpltCallback+0x4c>
      hjpeg->InDataLength = 4;
 8007350:	2304      	movs	r3, #4
 8007352:	e7e2      	b.n	800731a <JPEG_DMAInCpltCallback+0x4a>
      JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 8007354:	6822      	ldr	r2, [r4, #0]
 8007356:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007358:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800735c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800735e:	6822      	ldr	r2, [r4, #0]
 8007360:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007362:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007366:	6313      	str	r3, [r2, #48]	; 0x30
 8007368:	e7ef      	b.n	800734a <JPEG_DMAInCpltCallback+0x7a>
 800736a:	bf00      	nop
 800736c:	0003fffc 	.word	0x0003fffc

08007370 <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8007370:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
 8007372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8007374:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007378:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 800737a:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800737c:	4293      	cmp	r3, r2
 800737e:	d32a      	bcc.n	80073d6 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 8007380:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8007382:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 8007384:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8007386:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 8007388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nbOutputWords; index++)
 800738a:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800738c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800738e:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8007390:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007392:	69e0      	ldr	r0, [r4, #28]
 8007394:	4428      	add	r0, r5
 8007396:	ea4f 2513 	mov.w	r5, r3, lsr #8
 800739a:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800739c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800739e:	69e0      	ldr	r0, [r4, #28]
 80073a0:	4428      	add	r0, r5
 80073a2:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80073a6:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80073aa:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80073ac:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80073ae:	69e0      	ldr	r0, [r4, #28]
 80073b0:	4428      	add	r0, r5
 80073b2:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 80073b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073b6:	f103 0304 	add.w	r3, r3, #4
 80073ba:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 80073bc:	d1e1      	bne.n	8007382 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80073be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d106      	bne.n	80073d4 <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80073c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80073c8:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80073ca:	4620      	mov	r0, r4
 80073cc:	f7fa f99e 	bl	800170c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80073d0:	2300      	movs	r3, #0
 80073d2:	6263      	str	r3, [r4, #36]	; 0x24
}
 80073d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 80073d6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80073d8:	4293      	cmp	r3, r2
 80073da:	d9fb      	bls.n	80073d4 <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80073dc:	6a42      	ldr	r2, [r0, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 80073de:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80073e0:	1a9b      	subs	r3, r3, r2
 80073e2:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 80073e4:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80073e6:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 80073e8:	d105      	bne.n	80073f6 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80073ea:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80073ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073ee:	429f      	cmp	r7, r3
 80073f0:	d119      	bne.n	8007426 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80073f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80073f4:	e7e9      	b.n	80073ca <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 80073f6:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 80073f8:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 80073fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80073fc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80073fe:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8007400:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007402:	69e1      	ldr	r1, [r4, #28]
 8007404:	4429      	add	r1, r5
 8007406:	0a1d      	lsrs	r5, r3, #8
 8007408:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800740a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800740c:	69e1      	ldr	r1, [r4, #28]
 800740e:	4429      	add	r1, r5
 8007410:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8007412:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8007414:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8007416:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007418:	69e1      	ldr	r1, [r4, #28]
 800741a:	4429      	add	r1, r5
 800741c:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 800741e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007420:	3304      	adds	r3, #4
 8007422:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 8007424:	e7de      	b.n	80073e4 <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8007426:	6a65      	ldr	r5, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 8007428:	2000      	movs	r0, #0
      dataword = hjpeg->Instance->DOR;
 800742a:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800742c:	eba7 0c05 	sub.w	ip, r7, r5
      dataword = hjpeg->Instance->DOR;
 8007430:	6c5e      	ldr	r6, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
 8007432:	4560      	cmp	r0, ip
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8007434:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 8007436:	d114      	bne.n	8007462 <JPEG_StoreOutputData+0xf2>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007438:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800743a:	4620      	mov	r0, r4
 800743c:	f7fa f966 	bl	800170c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8007440:	2300      	movs	r3, #0
 8007442:	6263      	str	r3, [r4, #36]	; 0x24
      nb_bytes = 4UL - nb_bytes;
 8007444:	1d2b      	adds	r3, r5, #4
 8007446:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 8007448:	2b03      	cmp	r3, #3
 800744a:	d8c3      	bhi.n	80073d4 <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800744c:	00da      	lsls	r2, r3, #3
 800744e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007450:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 8007452:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8007454:	fa26 f202 	lsr.w	r2, r6, r2
 8007458:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 800745a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800745c:	3201      	adds	r2, #1
 800745e:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8007460:	e7f2      	b.n	8007448 <JPEG_StoreOutputData+0xd8>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8007462:	f000 0203 	and.w	r2, r0, #3
 8007466:	6a63      	ldr	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 8007468:	3001      	adds	r0, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800746a:	00d2      	lsls	r2, r2, #3
 800746c:	fa26 f202 	lsr.w	r2, r6, r2
 8007470:	54ca      	strb	r2, [r1, r3]
        hjpeg->JpegOutCount++;
 8007472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007474:	3301      	adds	r3, #1
 8007476:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 8007478:	e7db      	b.n	8007432 <JPEG_StoreOutputData+0xc2>

0800747a <JPEG_Process>:
{
 800747a:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800747c:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
 800747e:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007480:	f003 0303 	and.w	r3, r3, #3
 8007484:	2b02      	cmp	r3, #2
 8007486:	d114      	bne.n	80074b2 <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8007488:	6803      	ldr	r3, [r0, #0]
 800748a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800748c:	065a      	lsls	r2, r3, #25
 800748e:	d510      	bpl.n	80074b2 <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8007490:	1d01      	adds	r1, r0, #4
 8007492:	f7ff fdad 	bl	8006ff0 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8007496:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8007498:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800749a:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800749c:	f7fa f8ca 	bl	8001634 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074a8:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80074aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074b0:	639a      	str	r2, [r3, #56]	; 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 80074b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80074b4:	04db      	lsls	r3, r3, #19
 80074b6:	d407      	bmi.n	80074c8 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074bc:	0795      	lsls	r5, r2, #30
 80074be:	d543      	bpl.n	8007548 <JPEG_Process+0xce>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80074c0:	2104      	movs	r1, #4
      JPEG_ReadInputData(hjpeg, 1);
 80074c2:	4620      	mov	r0, r4
 80074c4:	f7ff fe94 	bl	80071f0 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80074c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80074ca:	0499      	lsls	r1, r3, #18
 80074cc:	d407      	bmi.n	80074de <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 80074ce:	6823      	ldr	r3, [r4, #0]
 80074d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074d2:	0712      	lsls	r2, r2, #28
 80074d4:	d53d      	bpl.n	8007552 <JPEG_Process+0xd8>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80074d6:	2104      	movs	r1, #4
      JPEG_StoreOutputData(hjpeg, 1);
 80074d8:	4620      	mov	r0, r4
 80074da:	f7ff ff49 	bl	8007370 <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074e2:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80074e6:	2a20      	cmp	r2, #32
 80074e8:	d13b      	bne.n	8007562 <JPEG_Process+0xe8>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	f022 0201 	bic.w	r2, r2, #1
 80074f0:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80074f2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80074f4:	f002 020c 	and.w	r2, r2, #12
 80074f8:	2a08      	cmp	r2, #8
 80074fa:	d103      	bne.n	8007504 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80074fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074fe:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8007502:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8007504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007506:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800750a:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
 800750c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800750e:	b133      	cbz	r3, 800751e <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007510:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007512:	4620      	mov	r0, r4
 8007514:	69e1      	ldr	r1, [r4, #28]
 8007516:	f7fa f8f9 	bl	800170c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800751a:	2300      	movs	r3, #0
 800751c:	6263      	str	r3, [r4, #36]	; 0x24
    tmpContext = hjpeg->Context;
 800751e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8007520:	2501      	movs	r5, #1
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007522:	6d62      	ldr	r2, [r4, #84]	; 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8007524:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007526:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800752a:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800752e:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007530:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 8007532:	f04f 0200 	mov.w	r2, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
 8007536:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
    __HAL_UNLOCK(hjpeg);
 800753a:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800753e:	d10d      	bne.n	800755c <JPEG_Process+0xe2>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8007540:	f7fa f920 	bl	8001784 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 8007544:	4628      	mov	r0, r5
}
 8007546:	bd38      	pop	{r3, r4, r5, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8007548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800754a:	0758      	lsls	r0, r3, #29
 800754c:	d5bc      	bpl.n	80074c8 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 800754e:	2101      	movs	r1, #1
 8007550:	e7b7      	b.n	80074c2 <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8007552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007554:	06db      	lsls	r3, r3, #27
 8007556:	d5c2      	bpl.n	80074de <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 8007558:	2101      	movs	r1, #1
 800755a:	e7bd      	b.n	80074d8 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800755c:	f7ff fe29 	bl	80071b2 <HAL_JPEG_EncodeCpltCallback>
 8007560:	e7f0      	b.n	8007544 <JPEG_Process+0xca>
  return JPEG_PROCESS_ONGOING;
 8007562:	2000      	movs	r0, #0
 8007564:	e7ef      	b.n	8007546 <JPEG_Process+0xcc>

08007566 <JPEG_DMA_PollResidualData>:
{
 8007566:	b570      	push	{r4, r5, r6, lr}
 8007568:	4604      	mov	r4, r0
 800756a:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800756c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800756e:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
 8007572:	d123      	bne.n	80075bc <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8007574:	6823      	ldr	r3, [r4, #0]
 8007576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007578:	06d0      	lsls	r0, r2, #27
 800757a:	d51f      	bpl.n	80075bc <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 800757c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800757e:	69e1      	ldr	r1, [r4, #28]
 8007580:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007582:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8007584:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007586:	69e2      	ldr	r2, [r4, #28]
 8007588:	440a      	add	r2, r1
 800758a:	0a19      	lsrs	r1, r3, #8
 800758c:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800758e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007590:	69e2      	ldr	r2, [r4, #28]
 8007592:	440a      	add	r2, r1
 8007594:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8007596:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8007598:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800759a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800759c:	69e2      	ldr	r2, [r4, #28]
 800759e:	440a      	add	r2, r1
 80075a0:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 80075a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075a4:	3304      	adds	r3, #4
 80075a6:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80075a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80075aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d105      	bne.n	80075bc <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80075b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80075b2:	4620      	mov	r0, r4
 80075b4:	69e1      	ldr	r1, [r4, #28]
 80075b6:	f7fa f8a9 	bl	800170c <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 80075ba:	6265      	str	r5, [r4, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80075bc:	3e01      	subs	r6, #1
 80075be:	d1d5      	bne.n	800756c <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80075c0:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 80075c2:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80075c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80075c6:	06c9      	lsls	r1, r1, #27
 80075c8:	d501      	bpl.n	80075ce <JPEG_DMA_PollResidualData+0x68>
 80075ca:	0492      	lsls	r2, r2, #18
 80075cc:	d420      	bmi.n	8007610 <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	f022 0201 	bic.w	r2, r2, #1
 80075d4:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 80075d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075d8:	b133      	cbz	r3, 80075e8 <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80075da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80075dc:	4620      	mov	r0, r4
 80075de:	69e1      	ldr	r1, [r4, #28]
 80075e0:	f7fa f894 	bl	800170c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80075e4:	2300      	movs	r3, #0
 80075e6:	6263      	str	r3, [r4, #36]	; 0x24
    tmpContext = hjpeg->Context;
 80075e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80075ea:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80075ec:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80075ee:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80075f2:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80075f6:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80075f8:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 80075fa:	f04f 0200 	mov.w	r2, #0
 80075fe:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8007602:	f04f 0201 	mov.w	r2, #1
 8007606:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800760a:	d102      	bne.n	8007612 <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800760c:	f7fa f8ba 	bl	8001784 <HAL_JPEG_DecodeCpltCallback>
}
 8007610:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8007612:	f7ff fdce 	bl	80071b2 <HAL_JPEG_EncodeCpltCallback>
}
 8007616:	e7fb      	b.n	8007610 <JPEG_DMA_PollResidualData+0xaa>

08007618 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8007618:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800761a:	f413 5f40 	tst.w	r3, #12288	; 0x3000
{
 800761e:	b570      	push	{r4, r5, r6, lr}
 8007620:	4604      	mov	r4, r0
 8007622:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8007624:	d034      	beq.n	8007690 <HAL_JPEG_Resume+0x78>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8007626:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8007628:	f003 030c 	and.w	r3, r3, #12
 800762c:	2b0c      	cmp	r3, #12
 800762e:	d13e      	bne.n	80076ae <HAL_JPEG_Resume+0x96>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8007630:	f011 0601 	ands.w	r6, r1, #1
 8007634:	d00a      	beq.n	800764c <HAL_JPEG_Resume+0x34>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8007636:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8007638:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800763c:	6543      	str	r3, [r0, #84]	; 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800763e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007640:	f023 0303 	bic.w	r3, r3, #3
 8007644:	6283      	str	r3, [r0, #40]	; 0x28
      if (hjpeg->InDataLength > 0UL)
 8007646:	b99b      	cbnz	r3, 8007670 <HAL_JPEG_Resume+0x58>
      mask |= JPEG_DMA_IDMA;
 8007648:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800764c:	07a8      	lsls	r0, r5, #30
 800764e:	d509      	bpl.n	8007664 <HAL_JPEG_Resume+0x4c>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8007650:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007652:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007656:	6563      	str	r3, [r4, #84]	; 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8007658:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800765a:	0419      	lsls	r1, r3, #16
 800765c:	d51a      	bpl.n	8007694 <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 800765e:	4620      	mov	r0, r4
 8007660:	f7ff ff81 	bl	8007566 <JPEG_DMA_PollResidualData>
    JPEG_ENABLE_DMA(hjpeg, mask);
 8007664:	6822      	ldr	r2, [r4, #0]
 8007666:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007668:	431e      	orrs	r6, r3
 800766a:	6316      	str	r6, [r2, #48]	; 0x30
  return HAL_OK;
 800766c:	2000      	movs	r0, #0
 800766e:	e010      	b.n	8007692 <HAL_JPEG_Resume+0x7a>
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8007670:	6802      	ldr	r2, [r0, #0]
 8007672:	089b      	lsrs	r3, r3, #2
 8007674:	6981      	ldr	r1, [r0, #24]
 8007676:	3240      	adds	r2, #64	; 0x40
 8007678:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800767a:	f7fd fecd 	bl	8005418 <HAL_DMA_Start_IT>
 800767e:	2800      	cmp	r0, #0
 8007680:	d0e2      	beq.n	8007648 <HAL_JPEG_Resume+0x30>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007682:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007684:	f043 0304 	orr.w	r3, r3, #4
 8007688:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800768a:	2306      	movs	r3, #6
 800768c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    return HAL_ERROR;
 8007690:	2001      	movs	r0, #1
}
 8007692:	bd70      	pop	{r4, r5, r6, pc}
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007694:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007696:	6821      	ldr	r1, [r4, #0]
 8007698:	089b      	lsrs	r3, r3, #2
 800769a:	69e2      	ldr	r2, [r4, #28]
 800769c:	3144      	adds	r1, #68	; 0x44
 800769e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80076a0:	f7fd feba 	bl	8005418 <HAL_DMA_Start_IT>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	d1ec      	bne.n	8007682 <HAL_JPEG_Resume+0x6a>
        mask |= JPEG_DMA_ODMA;
 80076a8:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
 80076ac:	e7da      	b.n	8007664 <HAL_JPEG_Resume+0x4c>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80076ae:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80076b0:	f003 030c 	and.w	r3, r3, #12
 80076b4:	2b08      	cmp	r3, #8
 80076b6:	d1d9      	bne.n	800766c <HAL_JPEG_Resume+0x54>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80076b8:	f011 0301 	ands.w	r3, r1, #1
 80076bc:	d004      	beq.n	80076c8 <HAL_JPEG_Resume+0xb0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 80076be:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80076c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076c4:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80076c6:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80076c8:	07aa      	lsls	r2, r5, #30
 80076ca:	d505      	bpl.n	80076d8 <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 80076cc:	6d62      	ldr	r2, [r4, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80076ce:	f043 0328 	orr.w	r3, r3, #40	; 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 80076d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076d6:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 80076d8:	6821      	ldr	r1, [r4, #0]
 80076da:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80076dc:	4313      	orrs	r3, r2
 80076de:	630b      	str	r3, [r1, #48]	; 0x30
 80076e0:	e7c4      	b.n	800766c <HAL_JPEG_Resume+0x54>
	...

080076e4 <JPEG_DMA_EndProcess>:
{
 80076e4:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 80076e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
 80076e8:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 80076ea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	6859      	ldr	r1, [r3, #4]
 80076f0:	4b1f      	ldr	r3, [pc, #124]	; (8007770 <JPEG_DMA_EndProcess+0x8c>)
 80076f2:	ea03 0381 	and.w	r3, r3, r1, lsl #2
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	6243      	str	r3, [r0, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80076fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d105      	bne.n	800770c <JPEG_DMA_EndProcess+0x28>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007700:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007702:	69c1      	ldr	r1, [r0, #28]
 8007704:	f7fa f802 	bl	800170c <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 8007708:	2300      	movs	r3, #0
 800770a:	6263      	str	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800770c:	6823      	ldr	r3, [r4, #0]
 800770e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8007710:	f015 0510 	ands.w	r5, r5, #16
 8007714:	d124      	bne.n	8007760 <JPEG_DMA_EndProcess+0x7c>
    if (hjpeg->JpegOutCount > 0UL)
 8007716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007718:	b12b      	cbz	r3, 8007726 <JPEG_DMA_EndProcess+0x42>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800771a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800771c:	4620      	mov	r0, r4
 800771e:	69e1      	ldr	r1, [r4, #28]
 8007720:	f7f9 fff4 	bl	800170c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8007724:	6265      	str	r5, [r4, #36]	; 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007726:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8007728:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800772a:	6813      	ldr	r3, [r2, #0]
 800772c:	f023 0301 	bic.w	r3, r3, #1
 8007730:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 8007732:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007734:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007736:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800773a:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800773e:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007740:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 8007742:	f04f 0200 	mov.w	r2, #0
 8007746:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800774a:	f04f 0201 	mov.w	r2, #1
 800774e:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007752:	d102      	bne.n	800775a <JPEG_DMA_EndProcess+0x76>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8007754:	f7fa f816 	bl	8001784 <HAL_JPEG_DecodeCpltCallback>
}
 8007758:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800775a:	f7ff fd2a 	bl	80071b2 <HAL_JPEG_EncodeCpltCallback>
 800775e:	e7fb      	b.n	8007758 <JPEG_DMA_EndProcess+0x74>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8007760:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007762:	049b      	lsls	r3, r3, #18
 8007764:	d4f8      	bmi.n	8007758 <JPEG_DMA_EndProcess+0x74>
    JPEG_DMA_PollResidualData(hjpeg);
 8007766:	4620      	mov	r0, r4
}
 8007768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800776c:	f7ff befb 	b.w	8007566 <JPEG_DMA_PollResidualData>
 8007770:	0003fffc 	.word	0x0003fffc

08007774 <JPEG_DMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007774:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8007776:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8007778:	041b      	lsls	r3, r3, #16
 800777a:	d501      	bpl.n	8007780 <JPEG_DMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 800777c:	f7ff bfb2 	b.w	80076e4 <JPEG_DMA_EndProcess>
}
 8007780:	4770      	bx	lr
	...

08007784 <JPEG_DMAOutCpltCallback>:
{
 8007784:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007786:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007788:	6823      	ldr	r3, [r4, #0]
 800778a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800778c:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8007790:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8007792:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007794:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8007798:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800779c:	0412      	lsls	r2, r2, #16
 800779e:	0c12      	lsrs	r2, r2, #16
 80077a0:	2a0c      	cmp	r2, #12
 80077a2:	d129      	bne.n	80077f8 <JPEG_DMAOutCpltCallback+0x74>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 80077a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077a6:	0692      	lsls	r2, r2, #26
 80077a8:	d42c      	bmi.n	8007804 <JPEG_DMAOutCpltCallback+0x80>
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 80077aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80077ac:	69e1      	ldr	r1, [r4, #28]
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 80077ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80077b2:	631a      	str	r2, [r3, #48]	; 0x30
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 80077b4:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80077b6:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 80077b8:	685a      	ldr	r2, [r3, #4]
 80077ba:	4b15      	ldr	r3, [pc, #84]	; (8007810 <JPEG_DMAOutCpltCallback+0x8c>)
 80077bc:	ea03 0282 	and.w	r2, r3, r2, lsl #2
 80077c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80077c2:	1a9b      	subs	r3, r3, r2
 80077c4:	6263      	str	r3, [r4, #36]	; 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80077c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80077c8:	f7f9 ffa0 	bl	800170c <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80077cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80077ce:	049b      	lsls	r3, r3, #18
 80077d0:	d418      	bmi.n	8007804 <JPEG_DMAOutCpltCallback+0x80>
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80077d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80077d4:	6821      	ldr	r1, [r4, #0]
 80077d6:	089b      	lsrs	r3, r3, #2
 80077d8:	69e2      	ldr	r2, [r4, #28]
 80077da:	3144      	adds	r1, #68	; 0x44
 80077dc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80077de:	f7fd fe1b 	bl	8005418 <HAL_DMA_Start_IT>
 80077e2:	b150      	cbz	r0, 80077fa <JPEG_DMAOutCpltCallback+0x76>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80077e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 80077e6:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80077e8:	f043 0304 	orr.w	r3, r3, #4
 80077ec:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 80077ee:	2306      	movs	r3, #6
 80077f0:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 80077f4:	f7f9 ffc4 	bl	8001780 <HAL_JPEG_ErrorCallback>
}
 80077f8:	bd10      	pop	{r4, pc}
        JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 80077fa:	6822      	ldr	r2, [r4, #0]
 80077fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80077fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007802:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007804:	6822      	ldr	r2, [r4, #0]
 8007806:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007808:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800780c:	6313      	str	r3, [r2, #48]	; 0x30
 800780e:	e7f3      	b.n	80077f8 <JPEG_DMAOutCpltCallback+0x74>
 8007810:	0003fffc 	.word	0x0003fffc

08007814 <HAL_JPEG_IRQHandler>:
{
 8007814:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 8007816:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
{
 800781a:	4604      	mov	r4, r0
  switch (hjpeg->State)
 800781c:	3b03      	subs	r3, #3
 800781e:	2b01      	cmp	r3, #1
 8007820:	d854      	bhi.n	80078cc <HAL_JPEG_IRQHandler+0xb8>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8007822:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8007824:	f003 030c 	and.w	r3, r3, #12
 8007828:	2b08      	cmp	r3, #8
 800782a:	d103      	bne.n	8007834 <HAL_JPEG_IRQHandler+0x20>
}
 800782c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 8007830:	f7ff be23 	b.w	800747a <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8007834:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8007836:	f003 030c 	and.w	r3, r3, #12
 800783a:	2b0c      	cmp	r3, #12
 800783c:	d146      	bne.n	80078cc <HAL_JPEG_IRQHandler+0xb8>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800783e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8007840:	f003 0303 	and.w	r3, r3, #3
 8007844:	2b02      	cmp	r3, #2
 8007846:	d114      	bne.n	8007872 <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8007848:	6803      	ldr	r3, [r0, #0]
 800784a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800784c:	0659      	lsls	r1, r3, #25
 800784e:	d510      	bpl.n	8007872 <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8007850:	1d01      	adds	r1, r0, #4
 8007852:	f7ff fbcd 	bl	8006ff0 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8007856:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8007858:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800785a:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800785c:	f7f9 feea 	bl	8001634 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8007860:	6823      	ldr	r3, [r4, #0]
 8007862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007864:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007868:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800786a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800786c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007870:	639a      	str	r2, [r3, #56]	; 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8007872:	6823      	ldr	r3, [r4, #0]
 8007874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007876:	0692      	lsls	r2, r2, #26
 8007878:	d528      	bpl.n	80078cc <HAL_JPEG_IRQHandler+0xb8>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800787a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 800787c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800787e:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8007882:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8007884:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007886:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800788a:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	f022 0201 	bic.w	r2, r2, #1
 8007892:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007896:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800789a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800789c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800789e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80078a2:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 80078a4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d101      	bne.n	80078b0 <HAL_JPEG_IRQHandler+0x9c>
      (void) HAL_DMA_Abort_IT(hjpeg->hdmain);
 80078ac:	f7fd fdf1 	bl	8005492 <HAL_DMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_DMA_STATE_BUSY)
 80078b0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80078b2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d103      	bne.n	80078c2 <HAL_JPEG_IRQHandler+0xae>
}
 80078ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_DMA_Abort_IT(hjpeg->hdmaout);
 80078be:	f7fd bde8 	b.w	8005492 <HAL_DMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 80078c2:	4620      	mov	r0, r4
}
 80078c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 80078c8:	f7ff bf0c 	b.w	80076e4 <JPEG_DMA_EndProcess>
}
 80078cc:	bd10      	pop	{r4, pc}

080078ce <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80078ce:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80078d0:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80078d2:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80078d6:	3284      	adds	r2, #132	; 0x84
 80078d8:	1883      	adds	r3, r0, r2
{
 80078da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80078de:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80078e0:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80078e4:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80078e6:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80078ea:	684c      	ldr	r4, [r1, #4]
 80078ec:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80078f0:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80078f4:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80078f8:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80078fa:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80078fc:	68c5      	ldr	r5, [r0, #12]
 80078fe:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8007902:	443d      	add	r5, r7
 8007904:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007908:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800790a:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800790c:	68c5      	ldr	r5, [r0, #12]
 800790e:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8007912:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007914:	689d      	ldr	r5, [r3, #8]
 8007916:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 800791a:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800791c:	688d      	ldr	r5, [r1, #8]
 800791e:	68c7      	ldr	r7, [r0, #12]
 8007920:	3501      	adds	r5, #1
 8007922:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8007926:	443d      	add	r5, r7
 8007928:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800792c:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800792e:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007930:	691d      	ldr	r5, [r3, #16]
 8007932:	f025 0507 	bic.w	r5, r5, #7
 8007936:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007938:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800793a:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800793c:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007940:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007944:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007948:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800794c:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8007950:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8007954:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8007958:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800795a:	695d      	ldr	r5, [r3, #20]
 800795c:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8007960:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007962:	694d      	ldr	r5, [r1, #20]
 8007964:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007966:	69dd      	ldr	r5, [r3, #28]
 8007968:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 800796c:	f025 0507 	bic.w	r5, r5, #7
 8007970:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007972:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8007976:	433d      	orrs	r5, r7
 8007978:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800797a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800797c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800797e:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007982:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007984:	b31e      	cbz	r6, 80079ce <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007986:	2e01      	cmp	r6, #1
 8007988:	d023      	beq.n	80079d2 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800798a:	1eb5      	subs	r5, r6, #2
 800798c:	2d02      	cmp	r5, #2
 800798e:	d922      	bls.n	80079d6 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8007990:	2e07      	cmp	r6, #7
 8007992:	bf0c      	ite	eq
 8007994:	2502      	moveq	r5, #2
 8007996:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007998:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800799a:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800799e:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80079a2:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80079a4:	62de      	str	r6, [r3, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80079a6:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80079a8:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80079aa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80079ac:	436e      	muls	r6, r5
 80079ae:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80079b2:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80079b4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80079b6:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 80079ba:	f024 0407 	bic.w	r4, r4, #7
 80079be:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80079c0:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80079c2:	5883      	ldr	r3, [r0, r2]
 80079c4:	f043 0301 	orr.w	r3, r3, #1
 80079c8:	5083      	str	r3, [r0, r2]
}
 80079ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 80079ce:	2504      	movs	r5, #4
 80079d0:	e7e2      	b.n	8007998 <LTDC_SetConfig+0xca>
    tmp = 3U;
 80079d2:	2503      	movs	r5, #3
 80079d4:	e7e0      	b.n	8007998 <LTDC_SetConfig+0xca>
    tmp = 2U;
 80079d6:	2502      	movs	r5, #2
 80079d8:	e7de      	b.n	8007998 <LTDC_SetConfig+0xca>
	...

080079dc <HAL_LTDC_Init>:
{
 80079dc:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80079de:	4604      	mov	r4, r0
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d063      	beq.n	8007aac <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80079e4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80079e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80079ec:	b91b      	cbnz	r3, 80079f6 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80079ee:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80079f2:	f7fc f9ed 	bl	8003dd0 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80079f6:	2302      	movs	r3, #2
 80079f8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	699a      	ldr	r2, [r3, #24]
 8007a00:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007a04:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007a06:	6999      	ldr	r1, [r3, #24]
 8007a08:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8007a0c:	4302      	orrs	r2, r0
 8007a0e:	68e0      	ldr	r0, [r4, #12]
 8007a10:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007a12:	6920      	ldr	r0, [r4, #16]
 8007a14:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007a16:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007a18:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007a1a:	4925      	ldr	r1, [pc, #148]	; (8007ab0 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007a1c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007a1e:	689a      	ldr	r2, [r3, #8]
 8007a20:	400a      	ands	r2, r1
 8007a22:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007a24:	689a      	ldr	r2, [r3, #8]
 8007a26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007a2a:	69a0      	ldr	r0, [r4, #24]
 8007a2c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007a2e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007a30:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	400a      	ands	r2, r1
 8007a36:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007a38:	68da      	ldr	r2, [r3, #12]
 8007a3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007a3e:	6a20      	ldr	r0, [r4, #32]
 8007a40:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007a42:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007a44:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007a46:	691a      	ldr	r2, [r3, #16]
 8007a48:	400a      	ands	r2, r1
 8007a4a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007a4c:	691a      	ldr	r2, [r3, #16]
 8007a4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007a52:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007a54:	4302      	orrs	r2, r0
 8007a56:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007a58:	695a      	ldr	r2, [r3, #20]
 8007a5a:	4011      	ands	r1, r2
 8007a5c:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007a5e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007a60:	695a      	ldr	r2, [r3, #20]
 8007a62:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007a66:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007a6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007a6e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007a72:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007a76:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007a7a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007a7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a7e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8007a82:	430a      	orrs	r2, r1
 8007a84:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8007a88:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007a8c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a92:	f042 0206 	orr.w	r2, r2, #6
 8007a96:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8007a98:	699a      	ldr	r2, [r3, #24]
 8007a9a:	f042 0201 	orr.w	r2, r2, #1
 8007a9e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8007aa0:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007aa2:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8007aa6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8007aaa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007aac:	2001      	movs	r0, #1
 8007aae:	e7fc      	b.n	8007aaa <HAL_LTDC_Init+0xce>
 8007ab0:	f000f800 	.word	0xf000f800

08007ab4 <HAL_LTDC_ErrorCallback>:
 8007ab4:	4770      	bx	lr

08007ab6 <HAL_LTDC_LineEventCallback>:
 8007ab6:	4770      	bx	lr

08007ab8 <HAL_LTDC_ReloadEventCallback>:
 8007ab8:	4770      	bx	lr

08007aba <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007aba:	6803      	ldr	r3, [r0, #0]
{
 8007abc:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007abe:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8007ac0:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007ac2:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007ac4:	0772      	lsls	r2, r6, #29
 8007ac6:	d514      	bpl.n	8007af2 <HAL_LTDC_IRQHandler+0x38>
 8007ac8:	0769      	lsls	r1, r5, #29
 8007aca:	d512      	bpl.n	8007af2 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ace:	f022 0204 	bic.w	r2, r2, #4
 8007ad2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007ad4:	2204      	movs	r2, #4
 8007ad6:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007ad8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8007adc:	f043 0301 	orr.w	r3, r3, #1
 8007ae0:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8007ae4:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007ae6:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007aea:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8007aee:	f7ff ffe1 	bl	8007ab4 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007af2:	07b2      	lsls	r2, r6, #30
 8007af4:	d516      	bpl.n	8007b24 <HAL_LTDC_IRQHandler+0x6a>
 8007af6:	07ab      	lsls	r3, r5, #30
 8007af8:	d514      	bpl.n	8007b24 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007afa:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8007afc:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b00:	f022 0202 	bic.w	r2, r2, #2
 8007b04:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007b06:	2202      	movs	r2, #2
 8007b08:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007b0a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007b14:	2304      	movs	r3, #4
 8007b16:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8007b20:	f7ff ffc8 	bl	8007ab4 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007b24:	07f0      	lsls	r0, r6, #31
 8007b26:	d510      	bpl.n	8007b4a <HAL_LTDC_IRQHandler+0x90>
 8007b28:	07e9      	lsls	r1, r5, #31
 8007b2a:	d50e      	bpl.n	8007b4a <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007b2c:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8007b2e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b32:	f022 0201 	bic.w	r2, r2, #1
 8007b36:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007b38:	2201      	movs	r2, #1
 8007b3a:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8007b3c:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8007b3e:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007b42:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8007b46:	f7ff ffb6 	bl	8007ab6 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007b4a:	0732      	lsls	r2, r6, #28
 8007b4c:	d511      	bpl.n	8007b72 <HAL_LTDC_IRQHandler+0xb8>
 8007b4e:	072b      	lsls	r3, r5, #28
 8007b50:	d50f      	bpl.n	8007b72 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007b52:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007b54:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b58:	f022 0208 	bic.w	r2, r2, #8
 8007b5c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007b5e:	2208      	movs	r2, #8
 8007b60:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8007b62:	2301      	movs	r3, #1
 8007b64:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007b6e:	f7ff ffa3 	bl	8007ab8 <HAL_LTDC_ReloadEventCallback>
}
 8007b72:	bd70      	pop	{r4, r5, r6, pc}

08007b74 <HAL_LTDC_ConfigLayer>:
{
 8007b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8007b78:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8007b7c:	4606      	mov	r6, r0
 8007b7e:	460f      	mov	r7, r1
 8007b80:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	f04f 0002 	mov.w	r0, #2
 8007b88:	d01f      	beq.n	8007bca <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007b8a:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8007b8c:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007b90:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007b92:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007b96:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8007b9a:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007b9e:	3438      	adds	r4, #56	; 0x38
 8007ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bac:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007bae:	4630      	mov	r0, r6
 8007bb0:	4662      	mov	r2, ip
 8007bb2:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007bb4:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007bb6:	f7ff fe8a 	bl	80078ce <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007bba:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8007bbc:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007bbe:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007bc2:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007bc6:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8007bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007bd0 <HAL_LTDC_SetPitch>:
{
 8007bd0:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 8007bd2:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	f04f 0302 	mov.w	r3, #2
 8007bdc:	d02c      	beq.n	8007c38 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8007bde:	2434      	movs	r4, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007be0:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8007be4:	fb04 0402 	mla	r4, r4, r2, r0
 8007be8:	6ca4      	ldr	r4, [r4, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007bea:	b33c      	cbz	r4, 8007c3c <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007bec:	2c01      	cmp	r4, #1
 8007bee:	d027      	beq.n	8007c40 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007bf0:	1ea5      	subs	r5, r4, #2
 8007bf2:	429d      	cmp	r5, r3
 8007bf4:	d902      	bls.n	8007bfc <HAL_LTDC_SetPitch+0x2c>
    tmp = 1U;
 8007bf6:	2c07      	cmp	r4, #7
 8007bf8:	bf18      	it	ne
 8007bfa:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8007bfc:	01d2      	lsls	r2, r2, #7
 8007bfe:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8007c00:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8007c02:	3284      	adds	r2, #132	; 0x84
 8007c04:	4422      	add	r2, r4
 8007c06:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8007c08:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007c0c:	f424 14f8 	bic.w	r4, r4, #2031616	; 0x1f0000
 8007c10:	62d4      	str	r4, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8007c12:	4c0c      	ldr	r4, [pc, #48]	; (8007c44 <HAL_LTDC_SetPitch+0x74>)
 8007c14:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007c16:	f045 0501 	orr.w	r5, r5, #1
 8007c1a:	6265      	str	r5, [r4, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8007c1c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8007c1e:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8007c22:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8007c24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c26:	f043 0301 	orr.w	r3, r3, #1
 8007c2a:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007c32:	2300      	movs	r3, #0
 8007c34:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 8007c3c:	2304      	movs	r3, #4
 8007c3e:	e7dd      	b.n	8007bfc <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e7db      	b.n	8007bfc <HAL_LTDC_SetPitch+0x2c>
 8007c44:	40016800 	.word	0x40016800

08007c48 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8007c48:	4b19      	ldr	r3, [pc, #100]	; (8007cb0 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8007c4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8007c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007c4e:	4c19      	ldr	r4, [pc, #100]	; (8007cb4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8007c50:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007c54:	641a      	str	r2, [r3, #64]	; 0x40
 8007c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c5c:	9301      	str	r3, [sp, #4]
 8007c5e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c66:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c68:	f7fd fa1a 	bl	80050a0 <HAL_GetTick>
 8007c6c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007c6e:	6863      	ldr	r3, [r4, #4]
 8007c70:	03da      	lsls	r2, r3, #15
 8007c72:	d50c      	bpl.n	8007c8e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007c74:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007c76:	4d0f      	ldr	r5, [pc, #60]	; (8007cb4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c7c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8007c7e:	f7fd fa0f 	bl	80050a0 <HAL_GetTick>
 8007c82:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007c84:	686b      	ldr	r3, [r5, #4]
 8007c86:	039b      	lsls	r3, r3, #14
 8007c88:	d50a      	bpl.n	8007ca0 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	e006      	b.n	8007c9c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007c8e:	f7fd fa07 	bl	80050a0 <HAL_GetTick>
 8007c92:	1b40      	subs	r0, r0, r5
 8007c94:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007c98:	d9e9      	bls.n	8007c6e <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8007c9a:	2003      	movs	r0, #3
}
 8007c9c:	b003      	add	sp, #12
 8007c9e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007ca0:	f7fd f9fe 	bl	80050a0 <HAL_GetTick>
 8007ca4:	1b00      	subs	r0, r0, r4
 8007ca6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007caa:	d9eb      	bls.n	8007c84 <HAL_PWREx_EnableOverDrive+0x3c>
 8007cac:	e7f5      	b.n	8007c9a <HAL_PWREx_EnableOverDrive+0x52>
 8007cae:	bf00      	nop
 8007cb0:	40023800 	.word	0x40023800
 8007cb4:	40007000 	.word	0x40007000

08007cb8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8007cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8007cbc:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8007cbe:	b136      	cbz	r6, 8007cce <QSPI_Config+0x16>
 8007cc0:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8007cc4:	d003      	beq.n	8007cce <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8007cc6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8007cc8:	6804      	ldr	r4, [r0, #0]
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8007cce:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007cd2:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8007cd6:	f1b9 0f00 	cmp.w	r9, #0
 8007cda:	d04f      	beq.n	8007d7c <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007cdc:	694b      	ldr	r3, [r1, #20]
 8007cde:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8007ce2:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007ce4:	f8d1 a000 	ldr.w	sl, [r1]
 8007ce8:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 8007cec:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 8007cf0:	ea49 0902 	orr.w	r9, r9, r2
 8007cf4:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8007cf8:	b335      	cbz	r5, 8007d48 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007cfa:	688b      	ldr	r3, [r1, #8]
 8007cfc:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007d00:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007d02:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007d04:	b19f      	cbz	r7, 8007d2e <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007d06:	ea4a 0307 	orr.w	r3, sl, r7
 8007d0a:	4323      	orrs	r3, r4
 8007d0c:	68cc      	ldr	r4, [r1, #12]
 8007d0e:	ea43 0308 	orr.w	r3, r3, r8
 8007d12:	ea43 030e 	orr.w	r3, r3, lr
 8007d16:	4333      	orrs	r3, r6
 8007d18:	4323      	orrs	r3, r4
 8007d1a:	ea43 030c 	orr.w	r3, r3, ip
 8007d1e:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007d20:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007d24:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007d26:	d00d      	beq.n	8007d44 <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007d28:	684b      	ldr	r3, [r1, #4]
 8007d2a:	6183      	str	r3, [r0, #24]
 8007d2c:	e00a      	b.n	8007d44 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007d2e:	ea4a 0304 	orr.w	r3, sl, r4
 8007d32:	ea43 0308 	orr.w	r3, r3, r8
 8007d36:	ea43 030e 	orr.w	r3, r3, lr
 8007d3a:	4333      	orrs	r3, r6
 8007d3c:	ea43 030c 	orr.w	r3, r3, ip
 8007d40:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007d42:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8007d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007d48:	b16f      	cbz	r7, 8007d66 <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007d4a:	ea4a 0307 	orr.w	r3, sl, r7
 8007d4e:	4323      	orrs	r3, r4
 8007d50:	68cc      	ldr	r4, [r1, #12]
 8007d52:	ea43 0308 	orr.w	r3, r3, r8
 8007d56:	ea43 030e 	orr.w	r3, r3, lr
 8007d5a:	4323      	orrs	r3, r4
 8007d5c:	ea43 030c 	orr.w	r3, r3, ip
 8007d60:	ea43 0309 	orr.w	r3, r3, r9
 8007d64:	e7dc      	b.n	8007d20 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007d66:	ea4a 0304 	orr.w	r3, sl, r4
 8007d6a:	ea43 0308 	orr.w	r3, r3, r8
 8007d6e:	ea43 030e 	orr.w	r3, r3, lr
 8007d72:	ea43 030c 	orr.w	r3, r3, ip
 8007d76:	ea43 0309 	orr.w	r3, r3, r9
 8007d7a:	e7e2      	b.n	8007d42 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8007d7c:	b365      	cbz	r5, 8007dd8 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007d7e:	6804      	ldr	r4, [r0, #0]
 8007d80:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007d82:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007d84:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007d86:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007d8a:	694e      	ldr	r6, [r1, #20]
 8007d8c:	ea43 0502 	orr.w	r5, r3, r2
 8007d90:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8007d94:	04b6      	lsls	r6, r6, #18
 8007d96:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007d9a:	b1a7      	cbz	r7, 8007dc6 <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007d9c:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007d9e:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007da2:	ea40 0008 	orr.w	r0, r0, r8
 8007da6:	ea43 0300 	orr.w	r3, r3, r0
 8007daa:	68c8      	ldr	r0, [r1, #12]
 8007dac:	ea43 030c 	orr.w	r3, r3, ip
 8007db0:	ea43 0300 	orr.w	r3, r3, r0
 8007db4:	ea43 0306 	orr.w	r3, r3, r6
 8007db8:	ea43 0305 	orr.w	r3, r3, r5
 8007dbc:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007dbe:	d0c1      	beq.n	8007d44 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007dc0:	684b      	ldr	r3, [r1, #4]
 8007dc2:	61a3      	str	r3, [r4, #24]
 8007dc4:	e7be      	b.n	8007d44 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007dc6:	ea40 0008 	orr.w	r0, r0, r8
 8007dca:	4303      	orrs	r3, r0
 8007dcc:	ea43 030c 	orr.w	r3, r3, ip
 8007dd0:	4333      	orrs	r3, r6
 8007dd2:	432b      	orrs	r3, r5
 8007dd4:	6163      	str	r3, [r4, #20]
 8007dd6:	e7b5      	b.n	8007d44 <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007dd8:	b17f      	cbz	r7, 8007dfa <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007dda:	ea46 0307 	orr.w	r3, r6, r7
 8007dde:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8007de0:	6800      	ldr	r0, [r0, #0]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	4323      	orrs	r3, r4
 8007de6:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8007de8:	4323      	orrs	r3, r4
 8007dea:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8007dec:	4323      	orrs	r3, r4
 8007dee:	68cc      	ldr	r4, [r1, #12]
 8007df0:	4323      	orrs	r3, r4
 8007df2:	694c      	ldr	r4, [r1, #20]
 8007df4:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8007df8:	e792      	b.n	8007d20 <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8007dfa:	2e00      	cmp	r6, #0
 8007dfc:	d0a2      	beq.n	8007d44 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007dfe:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8007e00:	6800      	ldr	r0, [r0, #0]
 8007e02:	4333      	orrs	r3, r6
 8007e04:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8007e06:	431a      	orrs	r2, r3
 8007e08:	694b      	ldr	r3, [r1, #20]
 8007e0a:	4332      	orrs	r2, r6
 8007e0c:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8007e0e:	4332      	orrs	r2, r6
 8007e10:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 8007e14:	6142      	str	r2, [r0, #20]
}
 8007e16:	e795      	b.n	8007d44 <QSPI_Config+0x8c>

08007e18 <QSPI_WaitFlagStateUntilTimeout>:
{
 8007e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e1c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007e20:	4604      	mov	r4, r0
 8007e22:	460e      	mov	r6, r1
 8007e24:	4615      	mov	r5, r2
 8007e26:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007e28:	6822      	ldr	r2, [r4, #0]
 8007e2a:	6893      	ldr	r3, [r2, #8]
 8007e2c:	4233      	tst	r3, r6
 8007e2e:	bf14      	ite	ne
 8007e30:	2301      	movne	r3, #1
 8007e32:	2300      	moveq	r3, #0
 8007e34:	42ab      	cmp	r3, r5
 8007e36:	d101      	bne.n	8007e3c <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8007e38:	2000      	movs	r0, #0
 8007e3a:	e012      	b.n	8007e62 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8007e3c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007e40:	d0f3      	beq.n	8007e2a <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e42:	f7fd f92d 	bl	80050a0 <HAL_GetTick>
 8007e46:	1bc0      	subs	r0, r0, r7
 8007e48:	4540      	cmp	r0, r8
 8007e4a:	d802      	bhi.n	8007e52 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8007e4c:	f1b8 0f00 	cmp.w	r8, #0
 8007e50:	d1ea      	bne.n	8007e28 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007e52:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007e54:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007e56:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007e5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007e5c:	f043 0301 	orr.w	r3, r3, #1
 8007e60:	6463      	str	r3, [r4, #68]	; 0x44
}
 8007e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007e68 <HAL_QSPI_Init>:
{
 8007e68:	b530      	push	{r4, r5, lr}
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8007e6e:	f7fd f917 	bl	80050a0 <HAL_GetTick>
 8007e72:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8007e74:	2c00      	cmp	r4, #0
 8007e76:	d047      	beq.n	8007f08 <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007e78:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007e7c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8007e80:	b94a      	cbnz	r2, 8007e96 <HAL_QSPI_Init+0x2e>
 8007e82:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8007e84:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 8007e86:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8007e8a:	f7fb ffd7 	bl	8003e3c <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8007e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e92:	9b03      	ldr	r3, [sp, #12]
 8007e94:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007e96:	6820      	ldr	r0, [r4, #0]
 8007e98:	68a1      	ldr	r1, [r4, #8]
 8007e9a:	6802      	ldr	r2, [r0, #0]
 8007e9c:	3901      	subs	r1, #1
 8007e9e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8007ea2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007ea6:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007ea8:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007eaa:	4620      	mov	r0, r4
 8007eac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007eae:	9200      	str	r2, [sp, #0]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f7ff ffb1 	bl	8007e18 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8007eb6:	bb10      	cbnz	r0, 8007efe <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007eb8:	6822      	ldr	r2, [r4, #0]
 8007eba:	69e5      	ldr	r5, [r4, #28]
 8007ebc:	68e3      	ldr	r3, [r4, #12]
 8007ebe:	6811      	ldr	r1, [r2, #0]
 8007ec0:	432b      	orrs	r3, r5
 8007ec2:	6a25      	ldr	r5, [r4, #32]
 8007ec4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8007ec8:	432b      	orrs	r3, r5
 8007eca:	6865      	ldr	r5, [r4, #4]
 8007ecc:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8007ed0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8007ed4:	430b      	orrs	r3, r1
 8007ed6:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007ed8:	6855      	ldr	r5, [r2, #4]
 8007eda:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8007ede:	430b      	orrs	r3, r1
 8007ee0:	6921      	ldr	r1, [r4, #16]
 8007ee2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007ee6:	4909      	ldr	r1, [pc, #36]	; (8007f0c <HAL_QSPI_Init+0xa4>)
 8007ee8:	4029      	ands	r1, r5
 8007eea:	430b      	orrs	r3, r1
 8007eec:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8007eee:	6813      	ldr	r3, [r2, #0]
 8007ef0:	f043 0301 	orr.w	r3, r3, #1
 8007ef4:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8007ef6:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007ef8:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8007efa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8007efe:	2300      	movs	r3, #0
 8007f00:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007f04:	b005      	add	sp, #20
 8007f06:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8007f08:	2001      	movs	r0, #1
 8007f0a:	e7fb      	b.n	8007f04 <HAL_QSPI_Init+0x9c>
 8007f0c:	ffe0f8fe 	.word	0xffe0f8fe

08007f10 <HAL_QSPI_Command>:
{
 8007f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f14:	4604      	mov	r4, r0
 8007f16:	b085      	sub	sp, #20
 8007f18:	4617      	mov	r7, r2
 8007f1a:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 8007f1c:	f7fd f8c0 	bl	80050a0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8007f20:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8007f24:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8007f26:	2a01      	cmp	r2, #1
 8007f28:	d033      	beq.n	8007f92 <HAL_QSPI_Command+0x82>
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	2602      	movs	r6, #2
 8007f2e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007f32:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007f36:	2a01      	cmp	r2, #1
 8007f38:	fa5f f882 	uxtb.w	r8, r2
 8007f3c:	d127      	bne.n	8007f8e <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007f3e:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007f40:	9003      	str	r0, [sp, #12]
 8007f42:	2120      	movs	r1, #32
 8007f44:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007f46:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007f48:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8007f4a:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007f4e:	f7ff ff63 	bl	8007e18 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8007f52:	4605      	mov	r5, r0
 8007f54:	b9a0      	cbnz	r0, 8007f80 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007f56:	4602      	mov	r2, r0
 8007f58:	4649      	mov	r1, r9
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	f7ff feac 	bl	8007cb8 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8007f60:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8007f64:	9b03      	ldr	r3, [sp, #12]
 8007f66:	b94a      	cbnz	r2, 8007f7c <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007f68:	4642      	mov	r2, r8
 8007f6a:	4631      	mov	r1, r6
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	9700      	str	r7, [sp, #0]
 8007f70:	f7ff ff52 	bl	8007e18 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8007f74:	4605      	mov	r5, r0
 8007f76:	b918      	cbnz	r0, 8007f80 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007f78:	6823      	ldr	r3, [r4, #0]
 8007f7a:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8007f7c:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8007f80:	2300      	movs	r3, #0
 8007f82:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007f86:	4628      	mov	r0, r5
 8007f88:	b005      	add	sp, #20
 8007f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8007f8e:	4635      	mov	r5, r6
 8007f90:	e7f6      	b.n	8007f80 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 8007f92:	2502      	movs	r5, #2
 8007f94:	e7f7      	b.n	8007f86 <HAL_QSPI_Command+0x76>

08007f96 <HAL_QSPI_Transmit>:
{
 8007f96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f98:	4604      	mov	r4, r0
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	4616      	mov	r6, r2
 8007f9e:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8007fa0:	f7fd f87e 	bl	80050a0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8007fa4:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8007fa8:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8007faa:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8007fac:	2a01      	cmp	r2, #1
 8007fae:	d049      	beq.n	8008044 <HAL_QSPI_Transmit+0xae>
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007fb6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007fba:	2a01      	cmp	r2, #1
 8007fbc:	b2d0      	uxtb	r0, r2
 8007fbe:	d13f      	bne.n	8008040 <HAL_QSPI_Transmit+0xaa>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8007fc4:	2f00      	cmp	r7, #0
 8007fc6:	d036      	beq.n	8008036 <HAL_QSPI_Transmit+0xa0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8007fc8:	2212      	movs	r2, #18
 8007fca:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8007fce:	692a      	ldr	r2, [r5, #16]
 8007fd0:	3201      	adds	r2, #1
 8007fd2:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007fd4:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8007fd6:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007fd8:	3201      	adds	r2, #1
 8007fda:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007fdc:	696a      	ldr	r2, [r5, #20]
 8007fde:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007fe2:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8007fe4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007fe6:	b98a      	cbnz	r2, 800800c <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007fe8:	2201      	movs	r2, #1
 8007fea:	2102      	movs	r1, #2
 8007fec:	4620      	mov	r0, r4
 8007fee:	9600      	str	r6, [sp, #0]
 8007ff0:	f7ff ff12 	bl	8007e18 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8007ff4:	b910      	cbnz	r0, 8007ffc <HAL_QSPI_Transmit+0x66>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	2202      	movs	r2, #2
 8007ffa:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8008002:	2300      	movs	r3, #0
 8008004:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8008008:	b005      	add	sp, #20
 800800a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800800c:	2201      	movs	r2, #1
 800800e:	2104      	movs	r1, #4
 8008010:	4620      	mov	r0, r4
 8008012:	9600      	str	r6, [sp, #0]
 8008014:	9303      	str	r3, [sp, #12]
 8008016:	f7ff feff 	bl	8007e18 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800801a:	2800      	cmp	r0, #0
 800801c:	d1ee      	bne.n	8007ffc <HAL_QSPI_Transmit+0x66>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800801e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8008020:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8008022:	7812      	ldrb	r2, [r2, #0]
 8008024:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 8008028:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800802a:	3201      	adds	r2, #1
 800802c:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800802e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008030:	3a01      	subs	r2, #1
 8008032:	62e2      	str	r2, [r4, #44]	; 0x2c
 8008034:	e7d6      	b.n	8007fe4 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8008036:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008038:	f043 0308 	orr.w	r3, r3, #8
 800803c:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800803e:	e7e0      	b.n	8008002 <HAL_QSPI_Transmit+0x6c>
    status = HAL_BUSY;
 8008040:	2002      	movs	r0, #2
 8008042:	e7de      	b.n	8008002 <HAL_QSPI_Transmit+0x6c>
  __HAL_LOCK(hqspi);
 8008044:	2002      	movs	r0, #2
 8008046:	e7df      	b.n	8008008 <HAL_QSPI_Transmit+0x72>

08008048 <HAL_QSPI_Receive>:
{
 8008048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800804a:	4604      	mov	r4, r0
 800804c:	b085      	sub	sp, #20
 800804e:	4616      	mov	r6, r2
 8008050:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8008052:	f7fd f825 	bl	80050a0 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8008056:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8008058:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800805a:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 800805e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8008062:	2a01      	cmp	r2, #1
 8008064:	d04d      	beq.n	8008102 <HAL_QSPI_Receive+0xba>
 8008066:	2201      	movs	r2, #1
 8008068:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800806c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8008070:	2a01      	cmp	r2, #1
 8008072:	b2d0      	uxtb	r0, r2
 8008074:	d143      	bne.n	80080fe <HAL_QSPI_Receive+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008076:	2200      	movs	r2, #0
 8008078:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800807a:	2f00      	cmp	r7, #0
 800807c:	d03a      	beq.n	80080f4 <HAL_QSPI_Receive+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800807e:	2222      	movs	r2, #34	; 0x22
 8008080:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8008084:	692a      	ldr	r2, [r5, #16]
 8008086:	3201      	adds	r2, #1
 8008088:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800808a:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800808c:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800808e:	3201      	adds	r2, #1
 8008090:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8008092:	6969      	ldr	r1, [r5, #20]
 8008094:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8008098:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800809c:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800809e:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 80080a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80080a4:	b98a      	cbnz	r2, 80080ca <HAL_QSPI_Receive+0x82>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80080a6:	2201      	movs	r2, #1
 80080a8:	2102      	movs	r1, #2
 80080aa:	4620      	mov	r0, r4
 80080ac:	9600      	str	r6, [sp, #0]
 80080ae:	f7ff feb3 	bl	8007e18 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 80080b2:	b910      	cbnz	r0, 80080ba <HAL_QSPI_Receive+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80080b4:	6823      	ldr	r3, [r4, #0]
 80080b6:	2202      	movs	r2, #2
 80080b8:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 80080ba:	2301      	movs	r3, #1
 80080bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80080c0:	2300      	movs	r3, #0
 80080c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80080c6:	b005      	add	sp, #20
 80080c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80080ca:	2201      	movs	r2, #1
 80080cc:	2106      	movs	r1, #6
 80080ce:	4620      	mov	r0, r4
 80080d0:	9600      	str	r6, [sp, #0]
 80080d2:	9303      	str	r3, [sp, #12]
 80080d4:	f7ff fea0 	bl	8007e18 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 80080d8:	2800      	cmp	r0, #0
 80080da:	d1ee      	bne.n	80080ba <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80080dc:	f895 1020 	ldrb.w	r1, [r5, #32]
 80080e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80080e2:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80080e4:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 80080e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80080e8:	3201      	adds	r2, #1
 80080ea:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80080ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80080ee:	3a01      	subs	r2, #1
 80080f0:	63a2      	str	r2, [r4, #56]	; 0x38
 80080f2:	e7d6      	b.n	80080a2 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80080f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80080f6:	f043 0308 	orr.w	r3, r3, #8
 80080fa:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 80080fc:	e7e0      	b.n	80080c0 <HAL_QSPI_Receive+0x78>
    status = HAL_BUSY;
 80080fe:	2002      	movs	r0, #2
 8008100:	e7de      	b.n	80080c0 <HAL_QSPI_Receive+0x78>
  __HAL_LOCK(hqspi);
 8008102:	2002      	movs	r0, #2
 8008104:	e7df      	b.n	80080c6 <HAL_QSPI_Receive+0x7e>

08008106 <HAL_QSPI_AutoPolling>:
{
 8008106:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800810a:	4604      	mov	r4, r0
 800810c:	4615      	mov	r5, r2
 800810e:	461e      	mov	r6, r3
 8008110:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8008112:	f7fc ffc5 	bl	80050a0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8008116:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800811a:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800811c:	2a01      	cmp	r2, #1
 800811e:	d040      	beq.n	80081a2 <HAL_QSPI_AutoPolling+0x9c>
 8008120:	2201      	movs	r2, #1
 8008122:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008126:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800812a:	2a01      	cmp	r2, #1
 800812c:	b2d7      	uxtb	r7, r2
 800812e:	d136      	bne.n	800819e <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8008130:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008132:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008134:	9003      	str	r0, [sp, #12]
 8008136:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008138:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800813a:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800813c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008140:	2120      	movs	r1, #32
 8008142:	f7ff fe69 	bl	8007e18 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8008146:	bb20      	cbnz	r0, 8008192 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8008148:	6821      	ldr	r1, [r4, #0]
 800814a:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800814c:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800814e:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8008150:	686a      	ldr	r2, [r5, #4]
 8008152:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8008154:	68aa      	ldr	r2, [r5, #8]
 8008156:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8008158:	680a      	ldr	r2, [r1, #0]
 800815a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800815e:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8008160:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8008162:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008166:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8008168:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 800816a:	68ea      	ldr	r2, [r5, #12]
 800816c:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8008170:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008174:	f7ff fda0 	bl	8007cb8 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8008178:	9b03      	ldr	r3, [sp, #12]
 800817a:	463a      	mov	r2, r7
 800817c:	2108      	movs	r1, #8
 800817e:	4620      	mov	r0, r4
 8008180:	9600      	str	r6, [sp, #0]
 8008182:	f7ff fe49 	bl	8007e18 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8008186:	b920      	cbnz	r0, 8008192 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	2208      	movs	r2, #8
 800818c:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800818e:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8008192:	2300      	movs	r3, #0
 8008194:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8008198:	b004      	add	sp, #16
 800819a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 800819e:	2002      	movs	r0, #2
 80081a0:	e7f7      	b.n	8008192 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 80081a2:	2002      	movs	r0, #2
 80081a4:	e7f8      	b.n	8008198 <HAL_QSPI_AutoPolling+0x92>

080081a6 <HAL_QSPI_MemoryMapped>:
{
 80081a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081a8:	4604      	mov	r4, r0
 80081aa:	4616      	mov	r6, r2
 80081ac:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80081ae:	f7fc ff77 	bl	80050a0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80081b2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80081b6:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80081b8:	2a01      	cmp	r2, #1
 80081ba:	d033      	beq.n	8008224 <HAL_QSPI_MemoryMapped+0x7e>
 80081bc:	2201      	movs	r2, #1
 80081be:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80081c2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80081c6:	2a01      	cmp	r2, #1
 80081c8:	d12a      	bne.n	8008220 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80081ca:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80081cc:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80081ce:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80081d0:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80081d2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80081d6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80081d8:	9100      	str	r1, [sp, #0]
 80081da:	2120      	movs	r1, #32
 80081dc:	f7ff fe1c 	bl	8007e18 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80081e0:	4605      	mov	r5, r0
 80081e2:	b9b8      	cbnz	r0, 8008214 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	6872      	ldr	r2, [r6, #4]
 80081e8:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80081ea:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80081ec:	f020 0008 	bic.w	r0, r0, #8
 80081f0:	ea40 0002 	orr.w	r0, r0, r2
 80081f4:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80081f6:	d107      	bne.n	8008208 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80081f8:	6832      	ldr	r2, [r6, #0]
 80081fa:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80081fc:	2210      	movs	r2, #16
 80081fe:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008206:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8008208:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800820c:	4639      	mov	r1, r7
 800820e:	4620      	mov	r0, r4
 8008210:	f7ff fd52 	bl	8007cb8 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 8008214:	2300      	movs	r3, #0
 8008216:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800821a:	4628      	mov	r0, r5
 800821c:	b003      	add	sp, #12
 800821e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 8008220:	2502      	movs	r5, #2
 8008222:	e7f7      	b.n	8008214 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8008224:	2502      	movs	r5, #2
 8008226:	e7f8      	b.n	800821a <HAL_QSPI_MemoryMapped+0x74>

08008228 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008228:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800822c:	4604      	mov	r4, r0
 800822e:	b340      	cbz	r0, 8008282 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008230:	6803      	ldr	r3, [r0, #0]
 8008232:	07db      	lsls	r3, r3, #31
 8008234:	d410      	bmi.n	8008258 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008236:	6823      	ldr	r3, [r4, #0]
 8008238:	079f      	lsls	r7, r3, #30
 800823a:	d464      	bmi.n	8008306 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800823c:	6823      	ldr	r3, [r4, #0]
 800823e:	0719      	lsls	r1, r3, #28
 8008240:	f100 80aa 	bmi.w	8008398 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008244:	6823      	ldr	r3, [r4, #0]
 8008246:	075a      	lsls	r2, r3, #29
 8008248:	f100 80cb 	bmi.w	80083e2 <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800824c:	69a2      	ldr	r2, [r4, #24]
 800824e:	2a00      	cmp	r2, #0
 8008250:	f040 8134 	bne.w	80084bc <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8008254:	2000      	movs	r0, #0
 8008256:	e02b      	b.n	80082b0 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008258:	4b96      	ldr	r3, [pc, #600]	; (80084b4 <HAL_RCC_OscConfig+0x28c>)
 800825a:	689a      	ldr	r2, [r3, #8]
 800825c:	f002 020c 	and.w	r2, r2, #12
 8008260:	2a04      	cmp	r2, #4
 8008262:	d007      	beq.n	8008274 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008264:	689a      	ldr	r2, [r3, #8]
 8008266:	f002 020c 	and.w	r2, r2, #12
 800826a:	2a08      	cmp	r2, #8
 800826c:	d10b      	bne.n	8008286 <HAL_RCC_OscConfig+0x5e>
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	0256      	lsls	r6, r2, #9
 8008272:	d508      	bpl.n	8008286 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008274:	4b8f      	ldr	r3, [pc, #572]	; (80084b4 <HAL_RCC_OscConfig+0x28c>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	039d      	lsls	r5, r3, #14
 800827a:	d5dc      	bpl.n	8008236 <HAL_RCC_OscConfig+0xe>
 800827c:	6863      	ldr	r3, [r4, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1d9      	bne.n	8008236 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8008282:	2001      	movs	r0, #1
 8008284:	e014      	b.n	80082b0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008286:	6862      	ldr	r2, [r4, #4]
 8008288:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800828c:	d113      	bne.n	80082b6 <HAL_RCC_OscConfig+0x8e>
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008294:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008296:	f7fc ff03 	bl	80050a0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800829a:	4e86      	ldr	r6, [pc, #536]	; (80084b4 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 800829c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800829e:	6833      	ldr	r3, [r6, #0]
 80082a0:	0398      	lsls	r0, r3, #14
 80082a2:	d4c8      	bmi.n	8008236 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082a4:	f7fc fefc 	bl	80050a0 <HAL_GetTick>
 80082a8:	1b40      	subs	r0, r0, r5
 80082aa:	2864      	cmp	r0, #100	; 0x64
 80082ac:	d9f7      	bls.n	800829e <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 80082ae:	2003      	movs	r0, #3
}
 80082b0:	b002      	add	sp, #8
 80082b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082b6:	4d7f      	ldr	r5, [pc, #508]	; (80084b4 <HAL_RCC_OscConfig+0x28c>)
 80082b8:	682b      	ldr	r3, [r5, #0]
 80082ba:	b992      	cbnz	r2, 80082e2 <HAL_RCC_OscConfig+0xba>
 80082bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082c0:	602b      	str	r3, [r5, #0]
 80082c2:	682b      	ldr	r3, [r5, #0]
 80082c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80082ca:	f7fc fee9 	bl	80050a0 <HAL_GetTick>
 80082ce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082d0:	682b      	ldr	r3, [r5, #0]
 80082d2:	0399      	lsls	r1, r3, #14
 80082d4:	d5af      	bpl.n	8008236 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082d6:	f7fc fee3 	bl	80050a0 <HAL_GetTick>
 80082da:	1b80      	subs	r0, r0, r6
 80082dc:	2864      	cmp	r0, #100	; 0x64
 80082de:	d9f7      	bls.n	80082d0 <HAL_RCC_OscConfig+0xa8>
 80082e0:	e7e5      	b.n	80082ae <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082e2:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80082e6:	d107      	bne.n	80082f8 <HAL_RCC_OscConfig+0xd0>
 80082e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082ec:	602b      	str	r3, [r5, #0]
 80082ee:	682b      	ldr	r3, [r5, #0]
 80082f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082f4:	602b      	str	r3, [r5, #0]
 80082f6:	e7ce      	b.n	8008296 <HAL_RCC_OscConfig+0x6e>
 80082f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082fc:	602b      	str	r3, [r5, #0]
 80082fe:	682b      	ldr	r3, [r5, #0]
 8008300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008304:	e7f6      	b.n	80082f4 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008306:	4b6b      	ldr	r3, [pc, #428]	; (80084b4 <HAL_RCC_OscConfig+0x28c>)
 8008308:	689a      	ldr	r2, [r3, #8]
 800830a:	f012 0f0c 	tst.w	r2, #12
 800830e:	d007      	beq.n	8008320 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008310:	689a      	ldr	r2, [r3, #8]
 8008312:	f002 020c 	and.w	r2, r2, #12
 8008316:	2a08      	cmp	r2, #8
 8008318:	d111      	bne.n	800833e <HAL_RCC_OscConfig+0x116>
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	0252      	lsls	r2, r2, #9
 800831e:	d40e      	bmi.n	800833e <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008320:	4a64      	ldr	r2, [pc, #400]	; (80084b4 <HAL_RCC_OscConfig+0x28c>)
 8008322:	6813      	ldr	r3, [r2, #0]
 8008324:	079b      	lsls	r3, r3, #30
 8008326:	d502      	bpl.n	800832e <HAL_RCC_OscConfig+0x106>
 8008328:	68e3      	ldr	r3, [r4, #12]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d1a9      	bne.n	8008282 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800832e:	6813      	ldr	r3, [r2, #0]
 8008330:	6921      	ldr	r1, [r4, #16]
 8008332:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008336:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800833a:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800833c:	e77e      	b.n	800823c <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800833e:	68e2      	ldr	r2, [r4, #12]
 8008340:	b1c2      	cbz	r2, 8008374 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 8008342:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008344:	4d5b      	ldr	r5, [pc, #364]	; (80084b4 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8008346:	f042 0201 	orr.w	r2, r2, #1
 800834a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800834c:	f7fc fea8 	bl	80050a0 <HAL_GetTick>
 8008350:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008352:	682b      	ldr	r3, [r5, #0]
 8008354:	079f      	lsls	r7, r3, #30
 8008356:	d507      	bpl.n	8008368 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	6922      	ldr	r2, [r4, #16]
 800835c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008360:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008364:	602b      	str	r3, [r5, #0]
 8008366:	e769      	b.n	800823c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008368:	f7fc fe9a 	bl	80050a0 <HAL_GetTick>
 800836c:	1b80      	subs	r0, r0, r6
 800836e:	2802      	cmp	r0, #2
 8008370:	d9ef      	bls.n	8008352 <HAL_RCC_OscConfig+0x12a>
 8008372:	e79c      	b.n	80082ae <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8008374:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008376:	4e4f      	ldr	r6, [pc, #316]	; (80084b4 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8008378:	f022 0201 	bic.w	r2, r2, #1
 800837c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800837e:	f7fc fe8f 	bl	80050a0 <HAL_GetTick>
 8008382:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008384:	6833      	ldr	r3, [r6, #0]
 8008386:	0798      	lsls	r0, r3, #30
 8008388:	f57f af58 	bpl.w	800823c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800838c:	f7fc fe88 	bl	80050a0 <HAL_GetTick>
 8008390:	1b40      	subs	r0, r0, r5
 8008392:	2802      	cmp	r0, #2
 8008394:	d9f6      	bls.n	8008384 <HAL_RCC_OscConfig+0x15c>
 8008396:	e78a      	b.n	80082ae <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008398:	6963      	ldr	r3, [r4, #20]
 800839a:	4d46      	ldr	r5, [pc, #280]	; (80084b4 <HAL_RCC_OscConfig+0x28c>)
 800839c:	b183      	cbz	r3, 80083c0 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 800839e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80083a0:	f043 0301 	orr.w	r3, r3, #1
 80083a4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80083a6:	f7fc fe7b 	bl	80050a0 <HAL_GetTick>
 80083aa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083ac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80083ae:	079b      	lsls	r3, r3, #30
 80083b0:	f53f af48 	bmi.w	8008244 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083b4:	f7fc fe74 	bl	80050a0 <HAL_GetTick>
 80083b8:	1b80      	subs	r0, r0, r6
 80083ba:	2802      	cmp	r0, #2
 80083bc:	d9f6      	bls.n	80083ac <HAL_RCC_OscConfig+0x184>
 80083be:	e776      	b.n	80082ae <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80083c0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80083c2:	f023 0301 	bic.w	r3, r3, #1
 80083c6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80083c8:	f7fc fe6a 	bl	80050a0 <HAL_GetTick>
 80083cc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083ce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80083d0:	079f      	lsls	r7, r3, #30
 80083d2:	f57f af37 	bpl.w	8008244 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083d6:	f7fc fe63 	bl	80050a0 <HAL_GetTick>
 80083da:	1b80      	subs	r0, r0, r6
 80083dc:	2802      	cmp	r0, #2
 80083de:	d9f6      	bls.n	80083ce <HAL_RCC_OscConfig+0x1a6>
 80083e0:	e765      	b.n	80082ae <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083e2:	4b34      	ldr	r3, [pc, #208]	; (80084b4 <HAL_RCC_OscConfig+0x28c>)
 80083e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083e6:	00d0      	lsls	r0, r2, #3
 80083e8:	d427      	bmi.n	800843a <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 80083ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80083ec:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80083ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80083f2:	641a      	str	r2, [r3, #64]	; 0x40
 80083f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083fa:	9301      	str	r3, [sp, #4]
 80083fc:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80083fe:	4d2e      	ldr	r5, [pc, #184]	; (80084b8 <HAL_RCC_OscConfig+0x290>)
 8008400:	682b      	ldr	r3, [r5, #0]
 8008402:	05d9      	lsls	r1, r3, #23
 8008404:	d51b      	bpl.n	800843e <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008406:	68a3      	ldr	r3, [r4, #8]
 8008408:	4d2a      	ldr	r5, [pc, #168]	; (80084b4 <HAL_RCC_OscConfig+0x28c>)
 800840a:	2b01      	cmp	r3, #1
 800840c:	d127      	bne.n	800845e <HAL_RCC_OscConfig+0x236>
 800840e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008410:	f043 0301 	orr.w	r3, r3, #1
 8008414:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008416:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800841a:	f7fc fe41 	bl	80050a0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800841e:	4e25      	ldr	r6, [pc, #148]	; (80084b4 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8008420:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008422:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8008424:	079b      	lsls	r3, r3, #30
 8008426:	d53f      	bpl.n	80084a8 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8008428:	2f00      	cmp	r7, #0
 800842a:	f43f af0f 	beq.w	800824c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800842e:	4a21      	ldr	r2, [pc, #132]	; (80084b4 <HAL_RCC_OscConfig+0x28c>)
 8008430:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008436:	6413      	str	r3, [r2, #64]	; 0x40
 8008438:	e708      	b.n	800824c <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 800843a:	2700      	movs	r7, #0
 800843c:	e7df      	b.n	80083fe <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 800843e:	682b      	ldr	r3, [r5, #0]
 8008440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008444:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8008446:	f7fc fe2b 	bl	80050a0 <HAL_GetTick>
 800844a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800844c:	682b      	ldr	r3, [r5, #0]
 800844e:	05da      	lsls	r2, r3, #23
 8008450:	d4d9      	bmi.n	8008406 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008452:	f7fc fe25 	bl	80050a0 <HAL_GetTick>
 8008456:	1b80      	subs	r0, r0, r6
 8008458:	2864      	cmp	r0, #100	; 0x64
 800845a:	d9f7      	bls.n	800844c <HAL_RCC_OscConfig+0x224>
 800845c:	e727      	b.n	80082ae <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800845e:	b9ab      	cbnz	r3, 800848c <HAL_RCC_OscConfig+0x264>
 8008460:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008462:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008466:	f023 0301 	bic.w	r3, r3, #1
 800846a:	672b      	str	r3, [r5, #112]	; 0x70
 800846c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800846e:	f023 0304 	bic.w	r3, r3, #4
 8008472:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8008474:	f7fc fe14 	bl	80050a0 <HAL_GetTick>
 8008478:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800847a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800847c:	0798      	lsls	r0, r3, #30
 800847e:	d5d3      	bpl.n	8008428 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008480:	f7fc fe0e 	bl	80050a0 <HAL_GetTick>
 8008484:	1b80      	subs	r0, r0, r6
 8008486:	4540      	cmp	r0, r8
 8008488:	d9f7      	bls.n	800847a <HAL_RCC_OscConfig+0x252>
 800848a:	e710      	b.n	80082ae <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800848c:	2b05      	cmp	r3, #5
 800848e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008490:	d103      	bne.n	800849a <HAL_RCC_OscConfig+0x272>
 8008492:	f043 0304 	orr.w	r3, r3, #4
 8008496:	672b      	str	r3, [r5, #112]	; 0x70
 8008498:	e7b9      	b.n	800840e <HAL_RCC_OscConfig+0x1e6>
 800849a:	f023 0301 	bic.w	r3, r3, #1
 800849e:	672b      	str	r3, [r5, #112]	; 0x70
 80084a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80084a2:	f023 0304 	bic.w	r3, r3, #4
 80084a6:	e7b5      	b.n	8008414 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084a8:	f7fc fdfa 	bl	80050a0 <HAL_GetTick>
 80084ac:	1b40      	subs	r0, r0, r5
 80084ae:	4540      	cmp	r0, r8
 80084b0:	d9b7      	bls.n	8008422 <HAL_RCC_OscConfig+0x1fa>
 80084b2:	e6fc      	b.n	80082ae <HAL_RCC_OscConfig+0x86>
 80084b4:	40023800 	.word	0x40023800
 80084b8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80084bc:	4d3c      	ldr	r5, [pc, #240]	; (80085b0 <HAL_RCC_OscConfig+0x388>)
 80084be:	68ab      	ldr	r3, [r5, #8]
 80084c0:	f003 030c 	and.w	r3, r3, #12
 80084c4:	2b08      	cmp	r3, #8
 80084c6:	d042      	beq.n	800854e <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 80084c8:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084ca:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80084cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084d0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084d2:	d12f      	bne.n	8008534 <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
 80084d4:	f7fc fde4 	bl	80050a0 <HAL_GetTick>
 80084d8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084da:	682b      	ldr	r3, [r5, #0]
 80084dc:	0199      	lsls	r1, r3, #6
 80084de:	d423      	bmi.n	8008528 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80084e0:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80084e8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80084ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80084ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80084f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80084f4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80084f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80084fa:	0852      	lsrs	r2, r2, #1
 80084fc:	3a01      	subs	r2, #1
 80084fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008502:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8008504:	682b      	ldr	r3, [r5, #0]
 8008506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800850a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800850c:	f7fc fdc8 	bl	80050a0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008510:	4d27      	ldr	r5, [pc, #156]	; (80085b0 <HAL_RCC_OscConfig+0x388>)
        tickstart = HAL_GetTick();
 8008512:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008514:	682b      	ldr	r3, [r5, #0]
 8008516:	019a      	lsls	r2, r3, #6
 8008518:	f53f ae9c 	bmi.w	8008254 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800851c:	f7fc fdc0 	bl	80050a0 <HAL_GetTick>
 8008520:	1b00      	subs	r0, r0, r4
 8008522:	2802      	cmp	r0, #2
 8008524:	d9f6      	bls.n	8008514 <HAL_RCC_OscConfig+0x2ec>
 8008526:	e6c2      	b.n	80082ae <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008528:	f7fc fdba 	bl	80050a0 <HAL_GetTick>
 800852c:	1b80      	subs	r0, r0, r6
 800852e:	2802      	cmp	r0, #2
 8008530:	d9d3      	bls.n	80084da <HAL_RCC_OscConfig+0x2b2>
 8008532:	e6bc      	b.n	80082ae <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8008534:	f7fc fdb4 	bl	80050a0 <HAL_GetTick>
 8008538:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800853a:	682b      	ldr	r3, [r5, #0]
 800853c:	019b      	lsls	r3, r3, #6
 800853e:	f57f ae89 	bpl.w	8008254 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008542:	f7fc fdad 	bl	80050a0 <HAL_GetTick>
 8008546:	1b00      	subs	r0, r0, r4
 8008548:	2802      	cmp	r0, #2
 800854a:	d9f6      	bls.n	800853a <HAL_RCC_OscConfig+0x312>
 800854c:	e6af      	b.n	80082ae <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800854e:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8008550:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008552:	f43f ae96 	beq.w	8008282 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008556:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800855a:	69e1      	ldr	r1, [r4, #28]
 800855c:	428a      	cmp	r2, r1
 800855e:	f47f ae90 	bne.w	8008282 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008562:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008566:	6a21      	ldr	r1, [r4, #32]
 8008568:	428a      	cmp	r2, r1
 800856a:	f47f ae8a 	bne.w	8008282 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800856e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008572:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008574:	401a      	ands	r2, r3
 8008576:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800857a:	f47f ae82 	bne.w	8008282 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800857e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008580:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8008584:	0852      	lsrs	r2, r2, #1
 8008586:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008588:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800858c:	f47f ae79 	bne.w	8008282 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008590:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008594:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008596:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800859a:	f47f ae72 	bne.w	8008282 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800859e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80085a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80085a4:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 80085a8:	f43f ae54 	beq.w	8008254 <HAL_RCC_OscConfig+0x2c>
 80085ac:	e669      	b.n	8008282 <HAL_RCC_OscConfig+0x5a>
 80085ae:	bf00      	nop
 80085b0:	40023800 	.word	0x40023800

080085b4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085b4:	4913      	ldr	r1, [pc, #76]	; (8008604 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80085b6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085b8:	688b      	ldr	r3, [r1, #8]
 80085ba:	f003 030c 	and.w	r3, r3, #12
 80085be:	2b04      	cmp	r3, #4
 80085c0:	d01b      	beq.n	80085fa <HAL_RCC_GetSysClockFreq+0x46>
 80085c2:	2b08      	cmp	r3, #8
 80085c4:	d11b      	bne.n	80085fe <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80085c6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80085c8:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085ca:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80085cc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80085d0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085d4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80085d8:	bf1a      	itte	ne
 80085da:	480b      	ldrne	r0, [pc, #44]	; (8008608 <HAL_RCC_GetSysClockFreq+0x54>)
 80085dc:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085de:	480b      	ldreq	r0, [pc, #44]	; (800860c <HAL_RCC_GetSysClockFreq+0x58>)
 80085e0:	fba1 0100 	umull	r0, r1, r1, r0
 80085e4:	f7f7 fe7c 	bl	80002e0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80085e8:	4b06      	ldr	r3, [pc, #24]	; (8008604 <HAL_RCC_GetSysClockFreq+0x50>)
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80085f0:	3301      	adds	r3, #1
 80085f2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80085f4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80085f8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085fa:	4803      	ldr	r0, [pc, #12]	; (8008608 <HAL_RCC_GetSysClockFreq+0x54>)
 80085fc:	e7fc      	b.n	80085f8 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80085fe:	4803      	ldr	r0, [pc, #12]	; (800860c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8008600:	e7fa      	b.n	80085f8 <HAL_RCC_GetSysClockFreq+0x44>
 8008602:	bf00      	nop
 8008604:	40023800 	.word	0x40023800
 8008608:	017d7840 	.word	0x017d7840
 800860c:	00f42400 	.word	0x00f42400

08008610 <HAL_RCC_ClockConfig>:
{
 8008610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008614:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8008616:	4604      	mov	r4, r0
 8008618:	b910      	cbnz	r0, 8008620 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800861a:	2001      	movs	r0, #1
}
 800861c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008620:	4a46      	ldr	r2, [pc, #280]	; (800873c <HAL_RCC_ClockConfig+0x12c>)
 8008622:	6813      	ldr	r3, [r2, #0]
 8008624:	f003 030f 	and.w	r3, r3, #15
 8008628:	428b      	cmp	r3, r1
 800862a:	d328      	bcc.n	800867e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800862c:	6822      	ldr	r2, [r4, #0]
 800862e:	0797      	lsls	r7, r2, #30
 8008630:	d430      	bmi.n	8008694 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008632:	07d0      	lsls	r0, r2, #31
 8008634:	d444      	bmi.n	80086c0 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008636:	4a41      	ldr	r2, [pc, #260]	; (800873c <HAL_RCC_ClockConfig+0x12c>)
 8008638:	6813      	ldr	r3, [r2, #0]
 800863a:	f003 030f 	and.w	r3, r3, #15
 800863e:	42ab      	cmp	r3, r5
 8008640:	d867      	bhi.n	8008712 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008642:	6822      	ldr	r2, [r4, #0]
 8008644:	0751      	lsls	r1, r2, #29
 8008646:	d470      	bmi.n	800872a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008648:	0713      	lsls	r3, r2, #28
 800864a:	d507      	bpl.n	800865c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800864c:	4a3c      	ldr	r2, [pc, #240]	; (8008740 <HAL_RCC_ClockConfig+0x130>)
 800864e:	6921      	ldr	r1, [r4, #16]
 8008650:	6893      	ldr	r3, [r2, #8]
 8008652:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008656:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800865a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800865c:	f7ff ffaa 	bl	80085b4 <HAL_RCC_GetSysClockFreq>
 8008660:	4b37      	ldr	r3, [pc, #220]	; (8008740 <HAL_RCC_ClockConfig+0x130>)
 8008662:	4a38      	ldr	r2, [pc, #224]	; (8008744 <HAL_RCC_ClockConfig+0x134>)
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800866a:	5cd3      	ldrb	r3, [r2, r3]
 800866c:	40d8      	lsrs	r0, r3
 800866e:	4b36      	ldr	r3, [pc, #216]	; (8008748 <HAL_RCC_ClockConfig+0x138>)
 8008670:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8008672:	4b36      	ldr	r3, [pc, #216]	; (800874c <HAL_RCC_ClockConfig+0x13c>)
 8008674:	6818      	ldr	r0, [r3, #0]
 8008676:	f7fb fcd7 	bl	8004028 <HAL_InitTick>
  return HAL_OK;
 800867a:	2000      	movs	r0, #0
 800867c:	e7ce      	b.n	800861c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800867e:	6813      	ldr	r3, [r2, #0]
 8008680:	f023 030f 	bic.w	r3, r3, #15
 8008684:	430b      	orrs	r3, r1
 8008686:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008688:	6813      	ldr	r3, [r2, #0]
 800868a:	f003 030f 	and.w	r3, r3, #15
 800868e:	428b      	cmp	r3, r1
 8008690:	d1c3      	bne.n	800861a <HAL_RCC_ClockConfig+0xa>
 8008692:	e7cb      	b.n	800862c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008694:	f012 0f04 	tst.w	r2, #4
 8008698:	4b29      	ldr	r3, [pc, #164]	; (8008740 <HAL_RCC_ClockConfig+0x130>)
 800869a:	d003      	beq.n	80086a4 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800869c:	6899      	ldr	r1, [r3, #8]
 800869e:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 80086a2:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086a4:	0716      	lsls	r6, r2, #28
 80086a6:	d503      	bpl.n	80086b0 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80086a8:	6899      	ldr	r1, [r3, #8]
 80086aa:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 80086ae:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086b0:	4923      	ldr	r1, [pc, #140]	; (8008740 <HAL_RCC_ClockConfig+0x130>)
 80086b2:	68a0      	ldr	r0, [r4, #8]
 80086b4:	688b      	ldr	r3, [r1, #8]
 80086b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086ba:	4303      	orrs	r3, r0
 80086bc:	608b      	str	r3, [r1, #8]
 80086be:	e7b8      	b.n	8008632 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086c0:	6861      	ldr	r1, [r4, #4]
 80086c2:	4b1f      	ldr	r3, [pc, #124]	; (8008740 <HAL_RCC_ClockConfig+0x130>)
 80086c4:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086c6:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086c8:	d11b      	bne.n	8008702 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086ca:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086ce:	d0a4      	beq.n	800861a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80086d0:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086d2:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086d6:	4f1a      	ldr	r7, [pc, #104]	; (8008740 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80086d8:	f022 0203 	bic.w	r2, r2, #3
 80086dc:	430a      	orrs	r2, r1
 80086de:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80086e0:	f7fc fcde 	bl	80050a0 <HAL_GetTick>
 80086e4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	6862      	ldr	r2, [r4, #4]
 80086ea:	f003 030c 	and.w	r3, r3, #12
 80086ee:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80086f2:	d0a0      	beq.n	8008636 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086f4:	f7fc fcd4 	bl	80050a0 <HAL_GetTick>
 80086f8:	1b80      	subs	r0, r0, r6
 80086fa:	4540      	cmp	r0, r8
 80086fc:	d9f3      	bls.n	80086e6 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 80086fe:	2003      	movs	r0, #3
 8008700:	e78c      	b.n	800861c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008702:	2902      	cmp	r1, #2
 8008704:	d102      	bne.n	800870c <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008706:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800870a:	e7e0      	b.n	80086ce <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800870c:	f012 0f02 	tst.w	r2, #2
 8008710:	e7dd      	b.n	80086ce <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008712:	6813      	ldr	r3, [r2, #0]
 8008714:	f023 030f 	bic.w	r3, r3, #15
 8008718:	432b      	orrs	r3, r5
 800871a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800871c:	6813      	ldr	r3, [r2, #0]
 800871e:	f003 030f 	and.w	r3, r3, #15
 8008722:	42ab      	cmp	r3, r5
 8008724:	f47f af79 	bne.w	800861a <HAL_RCC_ClockConfig+0xa>
 8008728:	e78b      	b.n	8008642 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800872a:	4905      	ldr	r1, [pc, #20]	; (8008740 <HAL_RCC_ClockConfig+0x130>)
 800872c:	68e0      	ldr	r0, [r4, #12]
 800872e:	688b      	ldr	r3, [r1, #8]
 8008730:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8008734:	4303      	orrs	r3, r0
 8008736:	608b      	str	r3, [r1, #8]
 8008738:	e786      	b.n	8008648 <HAL_RCC_ClockConfig+0x38>
 800873a:	bf00      	nop
 800873c:	40023c00 	.word	0x40023c00
 8008740:	40023800 	.word	0x40023800
 8008744:	0802010d 	.word	0x0802010d
 8008748:	20000060 	.word	0x20000060
 800874c:	20000068 	.word	0x20000068

08008750 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008750:	4b04      	ldr	r3, [pc, #16]	; (8008764 <HAL_RCC_GetPCLK1Freq+0x14>)
 8008752:	4a05      	ldr	r2, [pc, #20]	; (8008768 <HAL_RCC_GetPCLK1Freq+0x18>)
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800875a:	5cd3      	ldrb	r3, [r2, r3]
 800875c:	4a03      	ldr	r2, [pc, #12]	; (800876c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800875e:	6810      	ldr	r0, [r2, #0]
}
 8008760:	40d8      	lsrs	r0, r3
 8008762:	4770      	bx	lr
 8008764:	40023800 	.word	0x40023800
 8008768:	0802011d 	.word	0x0802011d
 800876c:	20000060 	.word	0x20000060

08008770 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008770:	230f      	movs	r3, #15
 8008772:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008774:	4b0b      	ldr	r3, [pc, #44]	; (80087a4 <HAL_RCC_GetClockConfig+0x34>)
 8008776:	689a      	ldr	r2, [r3, #8]
 8008778:	f002 0203 	and.w	r2, r2, #3
 800877c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800877e:	689a      	ldr	r2, [r3, #8]
 8008780:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008784:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008786:	689a      	ldr	r2, [r3, #8]
 8008788:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800878c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	08db      	lsrs	r3, r3, #3
 8008792:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8008796:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008798:	4b03      	ldr	r3, [pc, #12]	; (80087a8 <HAL_RCC_GetClockConfig+0x38>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 030f 	and.w	r3, r3, #15
 80087a0:	600b      	str	r3, [r1, #0]
}
 80087a2:	4770      	bx	lr
 80087a4:	40023800 	.word	0x40023800
 80087a8:	40023c00 	.word	0x40023c00

080087ac <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80087ac:	6803      	ldr	r3, [r0, #0]
{
 80087ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80087b2:	f013 0601 	ands.w	r6, r3, #1
{
 80087b6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80087b8:	d00b      	beq.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80087ba:	4ab0      	ldr	r2, [pc, #704]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80087bc:	6891      	ldr	r1, [r2, #8]
 80087be:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80087c2:	6091      	str	r1, [r2, #8]
 80087c4:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80087c6:	6891      	ldr	r1, [r2, #8]
 80087c8:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80087ca:	fab6 f686 	clz	r6, r6
 80087ce:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80087d0:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80087d2:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80087d6:	d012      	beq.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80087d8:	49a8      	ldr	r1, [pc, #672]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80087da:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80087dc:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80087e0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80087e4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 80087e8:	bf08      	it	eq
 80087ea:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80087ec:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80087f0:	bf16      	itet	ne
 80087f2:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80087f6:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80087f8:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80087fa:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80087fe:	02d9      	lsls	r1, r3, #11
 8008800:	d510      	bpl.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008802:	489e      	ldr	r0, [pc, #632]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008804:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008806:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800880a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800880e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8008812:	ea42 0201 	orr.w	r2, r2, r1
 8008816:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800881a:	f000 81a7 	beq.w	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800881e:	2900      	cmp	r1, #0
 8008820:	bf08      	it	eq
 8008822:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8008824:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8008828:	bf18      	it	ne
 800882a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800882c:	069a      	lsls	r2, r3, #26
 800882e:	d531      	bpl.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008830:	4b92      	ldr	r3, [pc, #584]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008832:	4f93      	ldr	r7, [pc, #588]	; (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8008834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008836:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800883a:	641a      	str	r2, [r3, #64]	; 0x40
 800883c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008842:	9301      	str	r3, [sp, #4]
 8008844:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800884c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800884e:	f7fc fc27 	bl	80050a0 <HAL_GetTick>
 8008852:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	05db      	lsls	r3, r3, #23
 8008858:	f140 818a 	bpl.w	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800885c:	4f87      	ldr	r7, [pc, #540]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800885e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008860:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8008864:	f040 818f 	bne.w	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x3da>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008868:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800886a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800886e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8008872:	4a82      	ldr	r2, [pc, #520]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008874:	f040 81ad 	bne.w	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008878:	6891      	ldr	r1, [r2, #8]
 800887a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800887e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8008882:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8008886:	4301      	orrs	r1, r0
 8008888:	6091      	str	r1, [r2, #8]
 800888a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800888e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8008890:	430b      	orrs	r3, r1
 8008892:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	06da      	lsls	r2, r3, #27
 8008898:	d50c      	bpl.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800889a:	4a78      	ldr	r2, [pc, #480]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800889c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80088a0:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80088a4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80088a8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80088ac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80088ae:	4301      	orrs	r1, r0
 80088b0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80088b4:	045f      	lsls	r7, r3, #17
 80088b6:	d508      	bpl.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80088b8:	4970      	ldr	r1, [pc, #448]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80088ba:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80088bc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80088c0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80088c4:	4302      	orrs	r2, r0
 80088c6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80088ca:	0418      	lsls	r0, r3, #16
 80088cc:	d508      	bpl.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80088ce:	496b      	ldr	r1, [pc, #428]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80088d0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80088d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80088d6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80088da:	4302      	orrs	r2, r0
 80088dc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80088e0:	03d9      	lsls	r1, r3, #15
 80088e2:	d508      	bpl.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80088e4:	4965      	ldr	r1, [pc, #404]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80088e6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80088e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80088ec:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80088f0:	4302      	orrs	r2, r0
 80088f2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80088f6:	039a      	lsls	r2, r3, #14
 80088f8:	d508      	bpl.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80088fa:	4960      	ldr	r1, [pc, #384]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80088fc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80088fe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008902:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8008906:	4302      	orrs	r2, r0
 8008908:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800890c:	065f      	lsls	r7, r3, #25
 800890e:	d508      	bpl.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008910:	495a      	ldr	r1, [pc, #360]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008912:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8008914:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008918:	f022 0203 	bic.w	r2, r2, #3
 800891c:	4302      	orrs	r2, r0
 800891e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008922:	0618      	lsls	r0, r3, #24
 8008924:	d508      	bpl.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008926:	4955      	ldr	r1, [pc, #340]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008928:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800892a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800892e:	f022 020c 	bic.w	r2, r2, #12
 8008932:	4302      	orrs	r2, r0
 8008934:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008938:	05d9      	lsls	r1, r3, #23
 800893a:	d508      	bpl.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800893c:	494f      	ldr	r1, [pc, #316]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800893e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008940:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008944:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008948:	4302      	orrs	r2, r0
 800894a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800894e:	059a      	lsls	r2, r3, #22
 8008950:	d508      	bpl.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008952:	494a      	ldr	r1, [pc, #296]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008954:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8008956:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800895a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800895e:	4302      	orrs	r2, r0
 8008960:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008964:	055f      	lsls	r7, r3, #21
 8008966:	d508      	bpl.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008968:	4944      	ldr	r1, [pc, #272]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800896a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800896c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008970:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008974:	4302      	orrs	r2, r0
 8008976:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800897a:	0518      	lsls	r0, r3, #20
 800897c:	d508      	bpl.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800897e:	493f      	ldr	r1, [pc, #252]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008982:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008986:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800898a:	4302      	orrs	r2, r0
 800898c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008990:	04d9      	lsls	r1, r3, #19
 8008992:	d508      	bpl.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008994:	4939      	ldr	r1, [pc, #228]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008996:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8008998:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800899c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80089a0:	4302      	orrs	r2, r0
 80089a2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80089a6:	049a      	lsls	r2, r3, #18
 80089a8:	d508      	bpl.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80089aa:	4934      	ldr	r1, [pc, #208]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80089ac:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80089ae:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80089b2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80089b6:	4302      	orrs	r2, r0
 80089b8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80089bc:	025f      	lsls	r7, r3, #9
 80089be:	d508      	bpl.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80089c0:	492e      	ldr	r1, [pc, #184]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80089c2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80089c4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80089c8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80089cc:	4302      	orrs	r2, r0
 80089ce:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80089d2:	0298      	lsls	r0, r3, #10
 80089d4:	d50c      	bpl.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80089d6:	4829      	ldr	r0, [pc, #164]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80089d8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80089da:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80089de:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80089e2:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80089e6:	bf08      	it	eq
 80089e8:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80089ea:	430a      	orrs	r2, r1
 80089ec:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80089f0:	f013 0f08 	tst.w	r3, #8
 80089f4:	bf18      	it	ne
 80089f6:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80089f8:	0359      	lsls	r1, r3, #13
 80089fa:	d508      	bpl.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80089fc:	491f      	ldr	r1, [pc, #124]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80089fe:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008a00:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008a04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008a08:	4302      	orrs	r2, r0
 8008a0a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008a0e:	021a      	lsls	r2, r3, #8
 8008a10:	d509      	bpl.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008a12:	491a      	ldr	r1, [pc, #104]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008a14:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8008a18:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008a1c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008a20:	4302      	orrs	r2, r0
 8008a22:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008a26:	015f      	lsls	r7, r3, #5
 8008a28:	d509      	bpl.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8008a2a:	4914      	ldr	r1, [pc, #80]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008a2c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8008a30:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008a34:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8008a38:	4302      	orrs	r2, r0
 8008a3a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008a3e:	0118      	lsls	r0, r3, #4
 8008a40:	d509      	bpl.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a42:	490e      	ldr	r1, [pc, #56]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008a44:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8008a48:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8008a4c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8008a50:	4302      	orrs	r2, r0
 8008a52:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8008a56:	00d9      	lsls	r1, r3, #3
 8008a58:	d509      	bpl.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008a5a:	4908      	ldr	r1, [pc, #32]	; (8008a7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008a5c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008a60:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8008a64:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8008a68:	4302      	orrs	r2, r0
 8008a6a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008a6e:	2e01      	cmp	r6, #1
 8008a70:	f000 80b3 	beq.w	8008bda <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008a74:	019a      	lsls	r2, r3, #6
 8008a76:	f100 80b0 	bmi.w	8008bda <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008a7a:	e003      	b.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008a7c:	40023800 	.word	0x40023800
 8008a80:	40007000 	.word	0x40007000
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008a84:	2d01      	cmp	r5, #1
 8008a86:	d16f      	bne.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008a88:	4d9d      	ldr	r5, [pc, #628]	; (8008d00 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8008a8a:	682b      	ldr	r3, [r5, #0]
 8008a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a90:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a92:	f7fc fb05 	bl	80050a0 <HAL_GetTick>
 8008a96:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a98:	682b      	ldr	r3, [r5, #0]
 8008a9a:	009f      	lsls	r7, r3, #2
 8008a9c:	f100 8121 	bmi.w	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x536>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008aa0:	6822      	ldr	r2, [r4, #0]
 8008aa2:	0316      	lsls	r6, r2, #12
 8008aa4:	d501      	bpl.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8008aa6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008aa8:	b11b      	cbz	r3, 8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x306>
 8008aaa:	02d0      	lsls	r0, r2, #11
 8008aac:	d51c      	bpl.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008aae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ab0:	b9d3      	cbnz	r3, 8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008ab2:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008ab6:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008aba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008abe:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8008ac2:	430b      	orrs	r3, r1
 8008ac4:	6961      	ldr	r1, [r4, #20]
 8008ac6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8008aca:	69a1      	ldr	r1, [r4, #24]
 8008acc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008ad0:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008ad4:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8008ad8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008ada:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8008ade:	3901      	subs	r1, #1
 8008ae0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008ae4:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008ae8:	0291      	lsls	r1, r2, #10
 8008aea:	d515      	bpl.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8008aec:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8008aee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008af2:	d111      	bne.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008af4:	4982      	ldr	r1, [pc, #520]	; (8008d00 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8008af6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008afa:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008afe:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8008b02:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8008b06:	4303      	orrs	r3, r0
 8008b08:	6960      	ldr	r0, [r4, #20]
 8008b0a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8008b0e:	6a20      	ldr	r0, [r4, #32]
 8008b10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008b18:	0712      	lsls	r2, r2, #28
 8008b1a:	d519      	bpl.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008b1c:	4a78      	ldr	r2, [pc, #480]	; (8008d00 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8008b1e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008b22:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008b26:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8008b2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008b2e:	430b      	orrs	r3, r1
 8008b30:	6961      	ldr	r1, [r4, #20]
 8008b32:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8008b36:	69e1      	ldr	r1, [r4, #28]
 8008b38:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8008b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008b40:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8008b44:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008b46:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008b4a:	430b      	orrs	r3, r1
 8008b4c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008b50:	4c6b      	ldr	r4, [pc, #428]	; (8008d00 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b58:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b5a:	f7fc faa1 	bl	80050a0 <HAL_GetTick>
 8008b5e:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	f140 80c4 	bpl.w	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x544>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8008b68:	2000      	movs	r0, #0
 8008b6a:	e009      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      plli2sused = 1;
 8008b6c:	2601      	movs	r6, #1
 8008b6e:	e659      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b70:	f7fc fa96 	bl	80050a0 <HAL_GetTick>
 8008b74:	eba0 0008 	sub.w	r0, r0, r8
 8008b78:	2864      	cmp	r0, #100	; 0x64
 8008b7a:	f67f ae6b 	bls.w	8008854 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8008b7e:	2003      	movs	r0, #3
}
 8008b80:	b003      	add	sp, #12
 8008b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008b86:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008b88:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	f43f ae6b 	beq.w	8008868 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8008b94:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8008b9a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008b9e:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008ba0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008ba2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008ba6:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8008ba8:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008baa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bac:	07d8      	lsls	r0, r3, #31
 8008bae:	f57f ae5b 	bpl.w	8008868 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8008bb2:	f7fc fa75 	bl	80050a0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008bb6:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8008bba:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bbe:	0799      	lsls	r1, r3, #30
 8008bc0:	f53f ae52 	bmi.w	8008868 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008bc4:	f7fc fa6c 	bl	80050a0 <HAL_GetTick>
 8008bc8:	eba0 0008 	sub.w	r0, r0, r8
 8008bcc:	4548      	cmp	r0, r9
 8008bce:	d9f5      	bls.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008bd0:	e7d5      	b.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bd2:	6891      	ldr	r1, [r2, #8]
 8008bd4:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8008bd8:	e656      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8008bda:	4e49      	ldr	r6, [pc, #292]	; (8008d00 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8008bdc:	6833      	ldr	r3, [r6, #0]
 8008bde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008be2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8008be4:	f7fc fa5c 	bl	80050a0 <HAL_GetTick>
 8008be8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008bea:	6833      	ldr	r3, [r6, #0]
 8008bec:	011b      	lsls	r3, r3, #4
 8008bee:	d472      	bmi.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008bf0:	6822      	ldr	r2, [r4, #0]
 8008bf2:	07d7      	lsls	r7, r2, #31
 8008bf4:	d512      	bpl.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x470>
 8008bf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bf8:	b983      	cbnz	r3, 8008c1c <HAL_RCCEx_PeriphCLKConfig+0x470>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008bfa:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008bfe:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008c02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008c06:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8008c0a:	430b      	orrs	r3, r1
 8008c0c:	6861      	ldr	r1, [r4, #4]
 8008c0e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8008c12:	68a1      	ldr	r1, [r4, #8]
 8008c14:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8008c18:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008c1c:	0316      	lsls	r6, r2, #12
 8008c1e:	d503      	bpl.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008c20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c26:	d005      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008c28:	02d0      	lsls	r0, r2, #11
 8008c2a:	d51e      	bpl.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x4be>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008c2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c32:	d11a      	bne.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x4be>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008c34:	4932      	ldr	r1, [pc, #200]	; (8008d00 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8008c36:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008c3a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008c3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008c42:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8008c46:	4303      	orrs	r3, r0
 8008c48:	6860      	ldr	r0, [r4, #4]
 8008c4a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8008c4e:	68e0      	ldr	r0, [r4, #12]
 8008c50:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8008c54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008c58:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8008c5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c5e:	f020 001f 	bic.w	r0, r0, #31
 8008c62:	3b01      	subs	r3, #1
 8008c64:	4303      	orrs	r3, r0
 8008c66:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c6a:	01d1      	lsls	r1, r2, #7
 8008c6c:	d511      	bpl.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008c6e:	4924      	ldr	r1, [pc, #144]	; (8008d00 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8008c70:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008c74:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008c78:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8008c7c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8008c80:	4303      	orrs	r3, r0
 8008c82:	6860      	ldr	r0, [r4, #4]
 8008c84:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8008c88:	6920      	ldr	r0, [r4, #16]
 8008c8a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008c8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008c92:	0192      	lsls	r2, r2, #6
 8008c94:	d50d      	bpl.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008c96:	6923      	ldr	r3, [r4, #16]
 8008c98:	6862      	ldr	r2, [r4, #4]
 8008c9a:	041b      	lsls	r3, r3, #16
 8008c9c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8008ca0:	68e2      	ldr	r2, [r4, #12]
 8008ca2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008ca6:	68a2      	ldr	r2, [r4, #8]
 8008ca8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8008cac:	4a14      	ldr	r2, [pc, #80]	; (8008d00 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8008cae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8008cb2:	4e13      	ldr	r6, [pc, #76]	; (8008d00 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8008cb4:	6833      	ldr	r3, [r6, #0]
 8008cb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008cba:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8008cbc:	f7fc f9f0 	bl	80050a0 <HAL_GetTick>
 8008cc0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008cc2:	6833      	ldr	r3, [r6, #0]
 8008cc4:	011b      	lsls	r3, r3, #4
 8008cc6:	f53f aedd 	bmi.w	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008cca:	f7fc f9e9 	bl	80050a0 <HAL_GetTick>
 8008cce:	1bc0      	subs	r0, r0, r7
 8008cd0:	2864      	cmp	r0, #100	; 0x64
 8008cd2:	d9f6      	bls.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8008cd4:	e753      	b.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008cd6:	f7fc f9e3 	bl	80050a0 <HAL_GetTick>
 8008cda:	1bc0      	subs	r0, r0, r7
 8008cdc:	2864      	cmp	r0, #100	; 0x64
 8008cde:	d984      	bls.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8008ce0:	e74d      	b.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008ce2:	f7fc f9dd 	bl	80050a0 <HAL_GetTick>
 8008ce6:	1b80      	subs	r0, r0, r6
 8008ce8:	2864      	cmp	r0, #100	; 0x64
 8008cea:	f67f aed5 	bls.w	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 8008cee:	e746      	b.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008cf0:	f7fc f9d6 	bl	80050a0 <HAL_GetTick>
 8008cf4:	1b40      	subs	r0, r0, r5
 8008cf6:	2864      	cmp	r0, #100	; 0x64
 8008cf8:	f67f af32 	bls.w	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8008cfc:	e73f      	b.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8008cfe:	bf00      	nop
 8008d00:	40023800 	.word	0x40023800

08008d04 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008d08:	4604      	mov	r4, r0
 8008d0a:	b1c8      	cbz	r0, 8008d40 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008d0c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8008d10:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008d14:	b91b      	cbnz	r3, 8008d1e <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008d16:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008d1a:	f7fb f91b 	bl	8003f54 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008d1e:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008d20:	1d21      	adds	r1, r4, #4
 8008d22:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008d24:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008d28:	f000 f9cf 	bl	80090ca <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008d2c:	6862      	ldr	r2, [r4, #4]
 8008d2e:	4629      	mov	r1, r5
 8008d30:	6820      	ldr	r0, [r4, #0]
 8008d32:	f000 fa05 	bl	8009140 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008d36:	2301      	movs	r3, #1

  return HAL_OK;
 8008d38:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008d3a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008d40:	2001      	movs	r0, #1
 8008d42:	e7fc      	b.n	8008d3e <HAL_SDRAM_Init+0x3a>

08008d44 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008d44:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008d46:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8008d4a:	4605      	mov	r5, r0
 8008d4c:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008d4e:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008d50:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8008d52:	d010      	beq.n	8008d76 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8008d54:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8008d58:	2c01      	cmp	r4, #1
 8008d5a:	d110      	bne.n	8008d7e <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008d5c:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008d5e:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008d60:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008d64:	f000 fa22 	bl	80091ac <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008d68:	6833      	ldr	r3, [r6, #0]
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d104      	bne.n	8008d78 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008d6e:	2305      	movs	r3, #5
 8008d70:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008d74:	2000      	movs	r0, #0
}
 8008d76:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8008d78:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8008d7c:	e7fa      	b.n	8008d74 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8008d7e:	2001      	movs	r0, #1
 8008d80:	e7f9      	b.n	8008d76 <HAL_SDRAM_SendCommand+0x32>

08008d82 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008d82:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008d84:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8008d88:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	b2d8      	uxtb	r0, r3
 8008d8e:	d00d      	beq.n	8008dac <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8008d90:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	b2dd      	uxtb	r5, r3
 8008d98:	d109      	bne.n	8008dae <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008d9a:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008d9c:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008d9e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008da2:	f000 fa15 	bl	80091d0 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008da6:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008da8:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8008dac:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008dae:	2001      	movs	r0, #1
 8008db0:	e7fc      	b.n	8008dac <HAL_SDRAM_ProgramRefreshRate+0x2a>

08008db2 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008db2:	4770      	bx	lr

08008db4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008db4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d133      	bne.n	8008e24 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008dc2:	6803      	ldr	r3, [r0, #0]
 8008dc4:	68da      	ldr	r2, [r3, #12]
 8008dc6:	f042 0201 	orr.w	r2, r2, #1
 8008dca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dcc:	4a16      	ldr	r2, [pc, #88]	; (8008e28 <HAL_TIM_Base_Start_IT+0x74>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d01a      	beq.n	8008e08 <HAL_TIM_Base_Start_IT+0x54>
 8008dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dd6:	d017      	beq.n	8008e08 <HAL_TIM_Base_Start_IT+0x54>
 8008dd8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d013      	beq.n	8008e08 <HAL_TIM_Base_Start_IT+0x54>
 8008de0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d00f      	beq.n	8008e08 <HAL_TIM_Base_Start_IT+0x54>
 8008de8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d00b      	beq.n	8008e08 <HAL_TIM_Base_Start_IT+0x54>
 8008df0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d007      	beq.n	8008e08 <HAL_TIM_Base_Start_IT+0x54>
 8008df8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d003      	beq.n	8008e08 <HAL_TIM_Base_Start_IT+0x54>
 8008e00:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d107      	bne.n	8008e18 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e08:	6899      	ldr	r1, [r3, #8]
 8008e0a:	4a08      	ldr	r2, [pc, #32]	; (8008e2c <HAL_TIM_Base_Start_IT+0x78>)
 8008e0c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e0e:	2a06      	cmp	r2, #6
 8008e10:	d006      	beq.n	8008e20 <HAL_TIM_Base_Start_IT+0x6c>
 8008e12:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008e16:	d003      	beq.n	8008e20 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	f042 0201 	orr.w	r2, r2, #1
 8008e1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e20:	2000      	movs	r0, #0
}
 8008e22:	4770      	bx	lr
    return HAL_ERROR;
 8008e24:	2001      	movs	r0, #1
 8008e26:	4770      	bx	lr
 8008e28:	40010000 	.word	0x40010000
 8008e2c:	00010007 	.word	0x00010007

08008e30 <HAL_TIM_OC_DelayElapsedCallback>:
 8008e30:	4770      	bx	lr

08008e32 <HAL_TIM_IC_CaptureCallback>:
 8008e32:	4770      	bx	lr

08008e34 <HAL_TIM_PWM_PulseFinishedCallback>:
 8008e34:	4770      	bx	lr

08008e36 <HAL_TIM_TriggerCallback>:
 8008e36:	4770      	bx	lr

08008e38 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e38:	6803      	ldr	r3, [r0, #0]
 8008e3a:	691a      	ldr	r2, [r3, #16]
 8008e3c:	0791      	lsls	r1, r2, #30
{
 8008e3e:	b510      	push	{r4, lr}
 8008e40:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e42:	d50f      	bpl.n	8008e64 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e44:	68da      	ldr	r2, [r3, #12]
 8008e46:	0792      	lsls	r2, r2, #30
 8008e48:	d50c      	bpl.n	8008e64 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e4a:	f06f 0202 	mvn.w	r2, #2
 8008e4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e50:	2201      	movs	r2, #1
 8008e52:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e54:	699b      	ldr	r3, [r3, #24]
 8008e56:	0799      	lsls	r1, r3, #30
 8008e58:	f000 8085 	beq.w	8008f66 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e5c:	f7ff ffe9 	bl	8008e32 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e60:	2300      	movs	r3, #0
 8008e62:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e64:	6823      	ldr	r3, [r4, #0]
 8008e66:	691a      	ldr	r2, [r3, #16]
 8008e68:	0752      	lsls	r2, r2, #29
 8008e6a:	d510      	bpl.n	8008e8e <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e6c:	68da      	ldr	r2, [r3, #12]
 8008e6e:	0750      	lsls	r0, r2, #29
 8008e70:	d50d      	bpl.n	8008e8e <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e72:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e76:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008e84:	d075      	beq.n	8008f72 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8008e86:	f7ff ffd4 	bl	8008e32 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	691a      	ldr	r2, [r3, #16]
 8008e92:	0711      	lsls	r1, r2, #28
 8008e94:	d50f      	bpl.n	8008eb6 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e96:	68da      	ldr	r2, [r3, #12]
 8008e98:	0712      	lsls	r2, r2, #28
 8008e9a:	d50c      	bpl.n	8008eb6 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e9c:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ea0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ea2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ea4:	2204      	movs	r2, #4
 8008ea6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ea8:	69db      	ldr	r3, [r3, #28]
 8008eaa:	079b      	lsls	r3, r3, #30
 8008eac:	d067      	beq.n	8008f7e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8008eae:	f7ff ffc0 	bl	8008e32 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008eb6:	6823      	ldr	r3, [r4, #0]
 8008eb8:	691a      	ldr	r2, [r3, #16]
 8008eba:	06d0      	lsls	r0, r2, #27
 8008ebc:	d510      	bpl.n	8008ee0 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ebe:	68da      	ldr	r2, [r3, #12]
 8008ec0:	06d1      	lsls	r1, r2, #27
 8008ec2:	d50d      	bpl.n	8008ee0 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ec4:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ec8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008eca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ecc:	2208      	movs	r2, #8
 8008ece:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ed0:	69db      	ldr	r3, [r3, #28]
 8008ed2:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008ed6:	d058      	beq.n	8008f8a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8008ed8:	f7ff ffab 	bl	8008e32 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008edc:	2300      	movs	r3, #0
 8008ede:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ee0:	6823      	ldr	r3, [r4, #0]
 8008ee2:	691a      	ldr	r2, [r3, #16]
 8008ee4:	07d2      	lsls	r2, r2, #31
 8008ee6:	d508      	bpl.n	8008efa <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ee8:	68da      	ldr	r2, [r3, #12]
 8008eea:	07d0      	lsls	r0, r2, #31
 8008eec:	d505      	bpl.n	8008efa <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008eee:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ef2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ef4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ef6:	f7fa fdd7 	bl	8003aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	691a      	ldr	r2, [r3, #16]
 8008efe:	0611      	lsls	r1, r2, #24
 8008f00:	d508      	bpl.n	8008f14 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f02:	68da      	ldr	r2, [r3, #12]
 8008f04:	0612      	lsls	r2, r2, #24
 8008f06:	d505      	bpl.n	8008f14 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f08:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f0c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f0e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008f10:	f000 f8d9 	bl	80090c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008f14:	6823      	ldr	r3, [r4, #0]
 8008f16:	691a      	ldr	r2, [r3, #16]
 8008f18:	05d0      	lsls	r0, r2, #23
 8008f1a:	d508      	bpl.n	8008f2e <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f1c:	68da      	ldr	r2, [r3, #12]
 8008f1e:	0611      	lsls	r1, r2, #24
 8008f20:	d505      	bpl.n	8008f2e <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008f22:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008f26:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008f28:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008f2a:	f000 f8cd 	bl	80090c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f2e:	6823      	ldr	r3, [r4, #0]
 8008f30:	691a      	ldr	r2, [r3, #16]
 8008f32:	0652      	lsls	r2, r2, #25
 8008f34:	d508      	bpl.n	8008f48 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f36:	68da      	ldr	r2, [r3, #12]
 8008f38:	0650      	lsls	r0, r2, #25
 8008f3a:	d505      	bpl.n	8008f48 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f40:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f42:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008f44:	f7ff ff77 	bl	8008e36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	691a      	ldr	r2, [r3, #16]
 8008f4c:	0691      	lsls	r1, r2, #26
 8008f4e:	d522      	bpl.n	8008f96 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f50:	68da      	ldr	r2, [r3, #12]
 8008f52:	0692      	lsls	r2, r2, #26
 8008f54:	d51f      	bpl.n	8008f96 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f56:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f5a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f5c:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8008f62:	f000 b8af 	b.w	80090c4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f66:	f7ff ff63 	bl	8008e30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f7ff ff62 	bl	8008e34 <HAL_TIM_PWM_PulseFinishedCallback>
 8008f70:	e776      	b.n	8008e60 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f72:	f7ff ff5d 	bl	8008e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f76:	4620      	mov	r0, r4
 8008f78:	f7ff ff5c 	bl	8008e34 <HAL_TIM_PWM_PulseFinishedCallback>
 8008f7c:	e785      	b.n	8008e8a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f7e:	f7ff ff57 	bl	8008e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f82:	4620      	mov	r0, r4
 8008f84:	f7ff ff56 	bl	8008e34 <HAL_TIM_PWM_PulseFinishedCallback>
 8008f88:	e793      	b.n	8008eb2 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f8a:	f7ff ff51 	bl	8008e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f7ff ff50 	bl	8008e34 <HAL_TIM_PWM_PulseFinishedCallback>
 8008f94:	e7a2      	b.n	8008edc <HAL_TIM_IRQHandler+0xa4>
}
 8008f96:	bd10      	pop	{r4, pc}

08008f98 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f98:	4a30      	ldr	r2, [pc, #192]	; (800905c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8008f9a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f9c:	4290      	cmp	r0, r2
 8008f9e:	d012      	beq.n	8008fc6 <TIM_Base_SetConfig+0x2e>
 8008fa0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008fa4:	d00f      	beq.n	8008fc6 <TIM_Base_SetConfig+0x2e>
 8008fa6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008faa:	4290      	cmp	r0, r2
 8008fac:	d00b      	beq.n	8008fc6 <TIM_Base_SetConfig+0x2e>
 8008fae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008fb2:	4290      	cmp	r0, r2
 8008fb4:	d007      	beq.n	8008fc6 <TIM_Base_SetConfig+0x2e>
 8008fb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008fba:	4290      	cmp	r0, r2
 8008fbc:	d003      	beq.n	8008fc6 <TIM_Base_SetConfig+0x2e>
 8008fbe:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008fc2:	4290      	cmp	r0, r2
 8008fc4:	d119      	bne.n	8008ffa <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8008fc6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008fcc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fce:	4a23      	ldr	r2, [pc, #140]	; (800905c <TIM_Base_SetConfig+0xc4>)
 8008fd0:	4290      	cmp	r0, r2
 8008fd2:	d029      	beq.n	8009028 <TIM_Base_SetConfig+0x90>
 8008fd4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008fd8:	d026      	beq.n	8009028 <TIM_Base_SetConfig+0x90>
 8008fda:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8008fde:	4290      	cmp	r0, r2
 8008fe0:	d022      	beq.n	8009028 <TIM_Base_SetConfig+0x90>
 8008fe2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008fe6:	4290      	cmp	r0, r2
 8008fe8:	d01e      	beq.n	8009028 <TIM_Base_SetConfig+0x90>
 8008fea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008fee:	4290      	cmp	r0, r2
 8008ff0:	d01a      	beq.n	8009028 <TIM_Base_SetConfig+0x90>
 8008ff2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8008ff6:	4290      	cmp	r0, r2
 8008ff8:	d016      	beq.n	8009028 <TIM_Base_SetConfig+0x90>
 8008ffa:	4a19      	ldr	r2, [pc, #100]	; (8009060 <TIM_Base_SetConfig+0xc8>)
 8008ffc:	4290      	cmp	r0, r2
 8008ffe:	d013      	beq.n	8009028 <TIM_Base_SetConfig+0x90>
 8009000:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009004:	4290      	cmp	r0, r2
 8009006:	d00f      	beq.n	8009028 <TIM_Base_SetConfig+0x90>
 8009008:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800900c:	4290      	cmp	r0, r2
 800900e:	d00b      	beq.n	8009028 <TIM_Base_SetConfig+0x90>
 8009010:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8009014:	4290      	cmp	r0, r2
 8009016:	d007      	beq.n	8009028 <TIM_Base_SetConfig+0x90>
 8009018:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800901c:	4290      	cmp	r0, r2
 800901e:	d003      	beq.n	8009028 <TIM_Base_SetConfig+0x90>
 8009020:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009024:	4290      	cmp	r0, r2
 8009026:	d103      	bne.n	8009030 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800902c:	68ca      	ldr	r2, [r1, #12]
 800902e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009030:	694a      	ldr	r2, [r1, #20]
 8009032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009036:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8009038:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800903a:	688b      	ldr	r3, [r1, #8]
 800903c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800903e:	680b      	ldr	r3, [r1, #0]
 8009040:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009042:	4b06      	ldr	r3, [pc, #24]	; (800905c <TIM_Base_SetConfig+0xc4>)
 8009044:	4298      	cmp	r0, r3
 8009046:	d003      	beq.n	8009050 <TIM_Base_SetConfig+0xb8>
 8009048:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800904c:	4298      	cmp	r0, r3
 800904e:	d101      	bne.n	8009054 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009050:	690b      	ldr	r3, [r1, #16]
 8009052:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009054:	2301      	movs	r3, #1
 8009056:	6143      	str	r3, [r0, #20]
}
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	40010000 	.word	0x40010000
 8009060:	40014000 	.word	0x40014000

08009064 <HAL_TIM_Base_Init>:
{
 8009064:	b510      	push	{r4, lr}
  if (htim == NULL)
 8009066:	4604      	mov	r4, r0
 8009068:	b350      	cbz	r0, 80090c0 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800906a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800906e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009072:	b91b      	cbnz	r3, 800907c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8009074:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009078:	f7ff fe9b 	bl	8008db2 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800907c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800907e:	6820      	ldr	r0, [r4, #0]
 8009080:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8009082:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009086:	f7ff ff87 	bl	8008f98 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800908a:	2301      	movs	r3, #1
  return HAL_OK;
 800908c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800908e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009092:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009096:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800909a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800909e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80090a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80090ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090b2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80090b6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80090ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80090be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80090c0:	2001      	movs	r0, #1
 80090c2:	e7fc      	b.n	80090be <HAL_TIM_Base_Init+0x5a>

080090c4 <HAL_TIMEx_CommutCallback>:
 80090c4:	4770      	bx	lr

080090c6 <HAL_TIMEx_BreakCallback>:
 80090c6:	4770      	bx	lr

080090c8 <HAL_TIMEx_Break2Callback>:
 80090c8:	4770      	bx	lr

080090ca <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80090ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80090ce:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80090d0:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 80090d4:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 80090d8:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 80090dc:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 80090e0:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 80090e4:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80090e6:	b9a2      	cbnz	r2, 8009112 <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80090e8:	ea43 0209 	orr.w	r2, r3, r9
 80090ec:	6801      	ldr	r1, [r0, #0]
 80090ee:	432a      	orrs	r2, r5
 80090f0:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80090f4:	ea42 0308 	orr.w	r3, r2, r8
 80090f8:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80090fc:	ea43 030e 	orr.w	r3, r3, lr
 8009100:	ea43 030c 	orr.w	r3, r3, ip
 8009104:	433b      	orrs	r3, r7
 8009106:	4333      	orrs	r3, r6
 8009108:	430b      	orrs	r3, r1
 800910a:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800910c:	2000      	movs	r0, #0
 800910e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009112:	6802      	ldr	r2, [r0, #0]
 8009114:	ea43 0309 	orr.w	r3, r3, r9
 8009118:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800911c:	4313      	orrs	r3, r2
 800911e:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009120:	ea45 0308 	orr.w	r3, r5, r8
 8009124:	6842      	ldr	r2, [r0, #4]
 8009126:	ea43 030e 	orr.w	r3, r3, lr
 800912a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800912e:	ea43 030c 	orr.w	r3, r3, ip
 8009132:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8009136:	433b      	orrs	r3, r7
 8009138:	4333      	orrs	r3, r6
 800913a:	4313      	orrs	r3, r2
 800913c:	6043      	str	r3, [r0, #4]
 800913e:	e7e5      	b.n	800910c <FMC_SDRAM_Init+0x42>

08009140 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009140:	68cb      	ldr	r3, [r1, #12]
 8009142:	f103 3cff 	add.w	ip, r3, #4294967295
 8009146:	694b      	ldr	r3, [r1, #20]
{
 8009148:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800914a:	3b01      	subs	r3, #1
 800914c:	680f      	ldr	r7, [r1, #0]
 800914e:	684c      	ldr	r4, [r1, #4]
 8009150:	688e      	ldr	r6, [r1, #8]
 8009152:	051b      	lsls	r3, r3, #20
 8009154:	690d      	ldr	r5, [r1, #16]
 8009156:	3c01      	subs	r4, #1
 8009158:	6989      	ldr	r1, [r1, #24]
 800915a:	3e01      	subs	r6, #1
 800915c:	3d01      	subs	r5, #1
 800915e:	3f01      	subs	r7, #1
 8009160:	3901      	subs	r1, #1
 8009162:	0124      	lsls	r4, r4, #4
 8009164:	0236      	lsls	r6, r6, #8
 8009166:	042d      	lsls	r5, r5, #16
 8009168:	0609      	lsls	r1, r1, #24
 800916a:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800916e:	b95a      	cbnz	r2, 8009188 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009170:	433b      	orrs	r3, r7
 8009172:	6882      	ldr	r2, [r0, #8]
 8009174:	4323      	orrs	r3, r4
 8009176:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800917a:	4333      	orrs	r3, r6
 800917c:	432b      	orrs	r3, r5
 800917e:	430b      	orrs	r3, r1
 8009180:	4313      	orrs	r3, r2
 8009182:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8009184:	2000      	movs	r0, #0
 8009186:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009188:	6882      	ldr	r2, [r0, #8]
 800918a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800918e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8009192:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009194:	ea44 0306 	orr.w	r3, r4, r6
 8009198:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800919a:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800919c:	68c2      	ldr	r2, [r0, #12]
 800919e:	432b      	orrs	r3, r5
 80091a0:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80091a4:	430b      	orrs	r3, r1
 80091a6:	4313      	orrs	r3, r2
 80091a8:	60c3      	str	r3, [r0, #12]
 80091aa:	e7eb      	b.n	8009184 <FMC_SDRAM_Timing_Init+0x44>

080091ac <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80091ac:	6902      	ldr	r2, [r0, #16]
{
 80091ae:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80091b0:	e9d1 3400 	ldrd	r3, r4, [r1]
 80091b4:	0d92      	lsrs	r2, r2, #22
 80091b6:	4323      	orrs	r3, r4
 80091b8:	68cc      	ldr	r4, [r1, #12]
 80091ba:	0592      	lsls	r2, r2, #22
 80091bc:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 80091c0:	4313      	orrs	r3, r2
 80091c2:	688a      	ldr	r2, [r1, #8]
 80091c4:	3a01      	subs	r2, #1
 80091c6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80091ca:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 80091cc:	2000      	movs	r0, #0
 80091ce:	bd10      	pop	{r4, pc}

080091d0 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80091d0:	6943      	ldr	r3, [r0, #20]
 80091d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80091d6:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80091da:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80091de:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 80091e0:	2000      	movs	r0, #0
 80091e2:	4770      	bx	lr

080091e4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091e4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80091e8:	b113      	cbz	r3, 80091f0 <osKernelInitialize+0xc>
    stat = osErrorISR;
 80091ea:	f06f 0005 	mvn.w	r0, #5
 80091ee:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091f0:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 80091f4:	4b07      	ldr	r3, [pc, #28]	; (8009214 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 80091f6:	b912      	cbnz	r2, 80091fe <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80091f8:	f3ef 8211 	mrs	r2, BASEPRI
 80091fc:	b112      	cbz	r2, 8009204 <osKernelInitialize+0x20>
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	2a02      	cmp	r2, #2
 8009202:	d0f2      	beq.n	80091ea <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009204:	6818      	ldr	r0, [r3, #0]
 8009206:	b910      	cbnz	r0, 800920e <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009208:	2201      	movs	r2, #1
 800920a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800920c:	4770      	bx	lr
    } else {
      stat = osError;
 800920e:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8009212:	4770      	bx	lr
 8009214:	2000f060 	.word	0x2000f060

08009218 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009218:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800921a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800921e:	b113      	cbz	r3, 8009226 <osKernelStart+0xe>
    stat = osErrorISR;
 8009220:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8009224:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009226:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800922a:	4b0a      	ldr	r3, [pc, #40]	; (8009254 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 800922c:	b912      	cbnz	r2, 8009234 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800922e:	f3ef 8211 	mrs	r2, BASEPRI
 8009232:	b112      	cbz	r2, 800923a <osKernelStart+0x22>
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	2a02      	cmp	r2, #2
 8009238:	d0f2      	beq.n	8009220 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	2a01      	cmp	r2, #1
 800923e:	d105      	bne.n	800924c <osKernelStart+0x34>
      KernelState = osKernelRunning;
 8009240:	2202      	movs	r2, #2
 8009242:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8009244:	f001 fe7c 	bl	800af40 <vTaskStartScheduler>
      stat = osOK;
 8009248:	2000      	movs	r0, #0
 800924a:	e7eb      	b.n	8009224 <osKernelStart+0xc>
      stat = osError;
 800924c:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8009250:	e7e8      	b.n	8009224 <osKernelStart+0xc>
 8009252:	bf00      	nop
 8009254:	2000f060 	.word	0x2000f060

08009258 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800925a:	4614      	mov	r4, r2
 800925c:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800925e:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009260:	460b      	mov	r3, r1
  hTask = NULL;
 8009262:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009264:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8009268:	bb22      	cbnz	r2, 80092b4 <osThreadNew+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800926a:	f3ef 8210 	mrs	r2, PRIMASK
 800926e:	b912      	cbnz	r2, 8009276 <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009270:	f3ef 8211 	mrs	r2, BASEPRI
 8009274:	b11a      	cbz	r2, 800927e <osThreadNew+0x26>
 8009276:	4a22      	ldr	r2, [pc, #136]	; (8009300 <osThreadNew+0xa8>)
 8009278:	6812      	ldr	r2, [r2, #0]
 800927a:	2a02      	cmp	r2, #2
 800927c:	d01a      	beq.n	80092b4 <osThreadNew+0x5c>
 800927e:	b1c8      	cbz	r0, 80092b4 <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8009280:	2c00      	cmp	r4, #0
 8009282:	d02f      	beq.n	80092e4 <osThreadNew+0x8c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8009284:	69a5      	ldr	r5, [r4, #24]
 8009286:	2d00      	cmp	r5, #0
 8009288:	bf08      	it	eq
 800928a:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800928c:	1e6a      	subs	r2, r5, #1
 800928e:	46ac      	mov	ip, r5
 8009290:	2a37      	cmp	r2, #55	; 0x37
 8009292:	d82b      	bhi.n	80092ec <osThreadNew+0x94>
 8009294:	6862      	ldr	r2, [r4, #4]
 8009296:	07d2      	lsls	r2, r2, #31
 8009298:	d428      	bmi.n	80092ec <osThreadNew+0x94>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800929a:	6966      	ldr	r6, [r4, #20]
 800929c:	b16e      	cbz	r6, 80092ba <osThreadNew+0x62>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800929e:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 80092a0:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80092a2:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 80092a6:	b157      	cbz	r7, 80092be <osThreadNew+0x66>
 80092a8:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 80092ac:	d902      	bls.n	80092b4 <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80092ae:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80092b0:	b104      	cbz	r4, 80092b4 <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80092b2:	b9ee      	cbnz	r6, 80092f0 <osThreadNew+0x98>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80092b4:	9805      	ldr	r0, [sp, #20]
}
 80092b6:	b007      	add	sp, #28
 80092b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 80092ba:	2280      	movs	r2, #128	; 0x80
 80092bc:	e7f0      	b.n	80092a0 <osThreadNew+0x48>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80092be:	f1be 0f00 	cmp.w	lr, #0
 80092c2:	d1f7      	bne.n	80092b4 <osThreadNew+0x5c>
      if (mem == 0) {
 80092c4:	6924      	ldr	r4, [r4, #16]
 80092c6:	2c00      	cmp	r4, #0
 80092c8:	d1f4      	bne.n	80092b4 <osThreadNew+0x5c>
 80092ca:	460c      	mov	r4, r1
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80092cc:	a905      	add	r1, sp, #20
 80092ce:	b292      	uxth	r2, r2
 80092d0:	e9cd c100 	strd	ip, r1, [sp]
 80092d4:	4621      	mov	r1, r4
 80092d6:	f001 fca8 	bl	800ac2a <xTaskCreate>
 80092da:	2801      	cmp	r0, #1
          hTask = NULL;
 80092dc:	bf1c      	itt	ne
 80092de:	2300      	movne	r3, #0
 80092e0:	9305      	strne	r3, [sp, #20]
 80092e2:	e7e7      	b.n	80092b4 <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;
 80092e4:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 80092e8:	2280      	movs	r2, #128	; 0x80
 80092ea:	e7ef      	b.n	80092cc <osThreadNew+0x74>
        return (NULL);
 80092ec:	2000      	movs	r0, #0
 80092ee:	e7e2      	b.n	80092b6 <osThreadNew+0x5e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80092f0:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80092f4:	9500      	str	r5, [sp, #0]
 80092f6:	f001 fc5a 	bl	800abae <xTaskCreateStatic>
 80092fa:	9005      	str	r0, [sp, #20]
 80092fc:	e7da      	b.n	80092b4 <osThreadNew+0x5c>
 80092fe:	bf00      	nop
 8009300:	2000f060 	.word	0x2000f060

08009304 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009304:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009306:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800930a:	b113      	cbz	r3, 8009312 <osDelay+0xe>
    stat = osErrorISR;
 800930c:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8009310:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009312:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8009316:	b913      	cbnz	r3, 800931e <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009318:	f3ef 8311 	mrs	r3, BASEPRI
 800931c:	b11b      	cbz	r3, 8009326 <osDelay+0x22>
 800931e:	4b05      	ldr	r3, [pc, #20]	; (8009334 <osDelay+0x30>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b02      	cmp	r3, #2
 8009324:	d0f2      	beq.n	800930c <osDelay+0x8>
    if (ticks != 0U) {
 8009326:	2800      	cmp	r0, #0
 8009328:	d0f2      	beq.n	8009310 <osDelay+0xc>
      vTaskDelay(ticks);
 800932a:	f001 fdc7 	bl	800aebc <vTaskDelay>
    stat = osOK;
 800932e:	2000      	movs	r0, #0
 8009330:	e7ee      	b.n	8009310 <osDelay+0xc>
 8009332:	bf00      	nop
 8009334:	2000f060 	.word	0x2000f060

08009338 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009338:	b570      	push	{r4, r5, r6, lr}
 800933a:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800933c:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8009340:	b116      	cbz	r6, 8009348 <osMutexNew+0x10>
  hMutex = NULL;
 8009342:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8009344:	4620      	mov	r0, r4
 8009346:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009348:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 800934c:	b912      	cbnz	r2, 8009354 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800934e:	f3ef 8211 	mrs	r2, BASEPRI
 8009352:	b11a      	cbz	r2, 800935c <osMutexNew+0x24>
 8009354:	4a18      	ldr	r2, [pc, #96]	; (80093b8 <osMutexNew+0x80>)
 8009356:	6812      	ldr	r2, [r2, #0]
 8009358:	2a02      	cmp	r2, #2
 800935a:	d0f2      	beq.n	8009342 <osMutexNew+0xa>
    if (attr != NULL) {
 800935c:	b115      	cbz	r5, 8009364 <osMutexNew+0x2c>
      type = attr->attr_bits;
 800935e:	686e      	ldr	r6, [r5, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 8009360:	0733      	lsls	r3, r6, #28
 8009362:	d4ee      	bmi.n	8009342 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009364:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 8009368:	b17d      	cbz	r5, 800938a <osMutexNew+0x52>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800936a:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800936e:	b151      	cbz	r1, 8009386 <osMutexNew+0x4e>
 8009370:	2b4f      	cmp	r3, #79	; 0x4f
 8009372:	d9e6      	bls.n	8009342 <osMutexNew+0xa>
        if (rmtx != 0U) {
 8009374:	b1de      	cbz	r6, 80093ae <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009376:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009378:	f000 ff50 	bl	800a21c <xQueueCreateMutexStatic>
 800937c:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800937e:	2800      	cmp	r0, #0
 8009380:	d0df      	beq.n	8009342 <osMutexNew+0xa>
          name = attr->name;
 8009382:	682d      	ldr	r5, [r5, #0]
 8009384:	e00a      	b.n	800939c <osMutexNew+0x64>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1db      	bne.n	8009342 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800938a:	b196      	cbz	r6, 80093b2 <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800938c:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 800938e:	f000 ff7a 	bl	800a286 <xQueueCreateMutex>
 8009392:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 8009394:	2800      	cmp	r0, #0
 8009396:	d0d4      	beq.n	8009342 <osMutexNew+0xa>
        if (attr != NULL) {
 8009398:	2d00      	cmp	r5, #0
 800939a:	d1f2      	bne.n	8009382 <osMutexNew+0x4a>
        vQueueAddToRegistry (hMutex, name);
 800939c:	4629      	mov	r1, r5
 800939e:	4620      	mov	r0, r4
 80093a0:	f001 fa3c 	bl	800a81c <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 80093a4:	2e00      	cmp	r6, #0
 80093a6:	d0cd      	beq.n	8009344 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80093a8:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 80093ac:	e7ca      	b.n	8009344 <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80093ae:	2001      	movs	r0, #1
 80093b0:	e7e2      	b.n	8009378 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 80093b2:	2001      	movs	r0, #1
 80093b4:	e7eb      	b.n	800938e <osMutexNew+0x56>
 80093b6:	bf00      	nop
 80093b8:	2000f060 	.word	0x2000f060

080093bc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80093bc:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80093be:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80093c2:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 80093c4:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80093c8:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093ca:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 80093ce:	b112      	cbz	r2, 80093d6 <osMutexAcquire+0x1a>
    stat = osErrorISR;
 80093d0:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 80093d4:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093d6:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 80093da:	b912      	cbnz	r2, 80093e2 <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80093dc:	f3ef 8211 	mrs	r2, BASEPRI
 80093e0:	b11a      	cbz	r2, 80093ea <osMutexAcquire+0x2e>
 80093e2:	4a0d      	ldr	r2, [pc, #52]	; (8009418 <osMutexAcquire+0x5c>)
 80093e4:	6812      	ldr	r2, [r2, #0]
 80093e6:	2a02      	cmp	r2, #2
 80093e8:	d0f2      	beq.n	80093d0 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 80093ea:	b188      	cbz	r0, 8009410 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80093ec:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 80093ee:	b163      	cbz	r3, 800940a <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80093f0:	f001 f99b 	bl	800a72a <xQueueTakeMutexRecursive>
 80093f4:	2801      	cmp	r0, #1
 80093f6:	d101      	bne.n	80093fc <osMutexAcquire+0x40>
  stat = osOK;
 80093f8:	2000      	movs	r0, #0
 80093fa:	e7eb      	b.n	80093d4 <osMutexAcquire+0x18>
          stat = osErrorResource;
 80093fc:	2c00      	cmp	r4, #0
 80093fe:	bf14      	ite	ne
 8009400:	f06f 0001 	mvnne.w	r0, #1
 8009404:	f06f 0002 	mvneq.w	r0, #2
 8009408:	e7e4      	b.n	80093d4 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800940a:	f001 f8c3 	bl	800a594 <xQueueSemaphoreTake>
 800940e:	e7f1      	b.n	80093f4 <osMutexAcquire+0x38>
    stat = osErrorParameter;
 8009410:	f06f 0003 	mvn.w	r0, #3
 8009414:	e7de      	b.n	80093d4 <osMutexAcquire+0x18>
 8009416:	bf00      	nop
 8009418:	2000f060 	.word	0x2000f060

0800941c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800941c:	b508      	push	{r3, lr}
 800941e:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009420:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8009424:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009428:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800942c:	b112      	cbz	r2, 8009434 <osMutexRelease+0x18>
    stat = osErrorISR;
 800942e:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8009432:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009434:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8009438:	b912      	cbnz	r2, 8009440 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800943a:	f3ef 8211 	mrs	r2, BASEPRI
 800943e:	b11a      	cbz	r2, 8009448 <osMutexRelease+0x2c>
 8009440:	4a0a      	ldr	r2, [pc, #40]	; (800946c <osMutexRelease+0x50>)
 8009442:	6812      	ldr	r2, [r2, #0]
 8009444:	2a02      	cmp	r2, #2
 8009446:	d0f2      	beq.n	800942e <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 8009448:	b168      	cbz	r0, 8009466 <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 800944a:	b13b      	cbz	r3, 800945c <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800944c:	f000 fefb 	bl	800a246 <xQueueGiveMutexRecursive>
 8009450:	2801      	cmp	r0, #1
  stat = osOK;
 8009452:	bf0c      	ite	eq
 8009454:	2000      	moveq	r0, #0
        stat = osErrorResource;
 8009456:	f06f 0002 	mvnne.w	r0, #2
 800945a:	e7ea      	b.n	8009432 <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800945c:	461a      	mov	r2, r3
 800945e:	4619      	mov	r1, r3
 8009460:	f000 fe21 	bl	800a0a6 <xQueueGenericSend>
 8009464:	e7f4      	b.n	8009450 <osMutexRelease+0x34>
    stat = osErrorParameter;
 8009466:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800946a:	e7e2      	b.n	8009432 <osMutexRelease+0x16>
 800946c:	2000f060 	.word	0x2000f060

08009470 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009470:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009472:	460e      	mov	r6, r1
 8009474:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009476:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800947a:	b11b      	cbz	r3, 8009484 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 800947c:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800947e:	4620      	mov	r0, r4
 8009480:	b002      	add	sp, #8
 8009482:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009484:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009488:	b913      	cbnz	r3, 8009490 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800948a:	f3ef 8311 	mrs	r3, BASEPRI
 800948e:	b11b      	cbz	r3, 8009498 <osSemaphoreNew+0x28>
 8009490:	4b21      	ldr	r3, [pc, #132]	; (8009518 <osSemaphoreNew+0xa8>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b02      	cmp	r3, #2
 8009496:	d0f1      	beq.n	800947c <osSemaphoreNew+0xc>
 8009498:	2800      	cmp	r0, #0
 800949a:	d0ef      	beq.n	800947c <osSemaphoreNew+0xc>
 800949c:	42b0      	cmp	r0, r6
 800949e:	d3ed      	bcc.n	800947c <osSemaphoreNew+0xc>
    if (attr != NULL) {
 80094a0:	b1ed      	cbz	r5, 80094de <osSemaphoreNew+0x6e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80094a2:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80094a6:	b1c3      	cbz	r3, 80094da <osSemaphoreNew+0x6a>
 80094a8:	2a4f      	cmp	r2, #79	; 0x4f
 80094aa:	d9e7      	bls.n	800947c <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 80094ac:	2801      	cmp	r0, #1
 80094ae:	d129      	bne.n	8009504 <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80094b0:	2203      	movs	r2, #3
 80094b2:	9200      	str	r2, [sp, #0]
 80094b4:	2200      	movs	r2, #0
 80094b6:	4611      	mov	r1, r2
 80094b8:	f000 fd70 	bl	8009f9c <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 80094bc:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80094be:	2800      	cmp	r0, #0
 80094c0:	d0dc      	beq.n	800947c <osSemaphoreNew+0xc>
 80094c2:	b1ce      	cbz	r6, 80094f8 <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80094c4:	2300      	movs	r3, #0
 80094c6:	461a      	mov	r2, r3
 80094c8:	4619      	mov	r1, r3
 80094ca:	f000 fdec 	bl	800a0a6 <xQueueGenericSend>
 80094ce:	2801      	cmp	r0, #1
 80094d0:	d012      	beq.n	80094f8 <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 80094d2:	4620      	mov	r0, r4
 80094d4:	f001 f9c8 	bl	800a868 <vQueueDelete>
 80094d8:	e7d0      	b.n	800947c <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80094da:	2a00      	cmp	r2, #0
 80094dc:	d1ce      	bne.n	800947c <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 80094de:	2801      	cmp	r0, #1
 80094e0:	d104      	bne.n	80094ec <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 80094e2:	2203      	movs	r2, #3
 80094e4:	2100      	movs	r1, #0
 80094e6:	f000 fd6d 	bl	8009fc4 <xQueueGenericCreate>
 80094ea:	e7e7      	b.n	80094bc <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80094ec:	4631      	mov	r1, r6
 80094ee:	f000 fdb8 	bl	800a062 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 80094f2:	4604      	mov	r4, r0
 80094f4:	2800      	cmp	r0, #0
 80094f6:	d0c1      	beq.n	800947c <osSemaphoreNew+0xc>
        if (attr != NULL) {
 80094f8:	b95d      	cbnz	r5, 8009512 <osSemaphoreNew+0xa2>
        vQueueAddToRegistry (hSemaphore, name);
 80094fa:	4629      	mov	r1, r5
 80094fc:	4620      	mov	r0, r4
 80094fe:	f001 f98d 	bl	800a81c <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8009502:	e7bc      	b.n	800947e <osSemaphoreNew+0xe>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009504:	461a      	mov	r2, r3
 8009506:	4631      	mov	r1, r6
 8009508:	f000 fd85 	bl	800a016 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800950c:	4604      	mov	r4, r0
 800950e:	2800      	cmp	r0, #0
 8009510:	d0b4      	beq.n	800947c <osSemaphoreNew+0xc>
          name = attr->name;
 8009512:	682d      	ldr	r5, [r5, #0]
 8009514:	e7f1      	b.n	80094fa <osSemaphoreNew+0x8a>
 8009516:	bf00      	nop
 8009518:	2000f060 	.word	0x2000f060

0800951c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800951c:	b513      	push	{r0, r1, r4, lr}
 800951e:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8009520:	b918      	cbnz	r0, 800952a <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 8009522:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8009526:	b002      	add	sp, #8
 8009528:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800952a:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 800952e:	b163      	cbz	r3, 800954a <osSemaphoreAcquire+0x2e>
    if (timeout != 0U) {
 8009530:	2c00      	cmp	r4, #0
 8009532:	d1f6      	bne.n	8009522 <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009534:	aa01      	add	r2, sp, #4
 8009536:	4621      	mov	r1, r4
      yield = pdFALSE;
 8009538:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800953a:	f001 f91a 	bl	800a772 <xQueueReceiveFromISR>
 800953e:	2801      	cmp	r0, #1
 8009540:	d113      	bne.n	800956a <osSemaphoreAcquire+0x4e>
        portYIELD_FROM_ISR (yield);
 8009542:	9b01      	ldr	r3, [sp, #4]
 8009544:	b9a3      	cbnz	r3, 8009570 <osSemaphoreAcquire+0x54>
  stat = osOK;
 8009546:	2000      	movs	r0, #0
 8009548:	e7ed      	b.n	8009526 <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800954a:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800954e:	b913      	cbnz	r3, 8009556 <osSemaphoreAcquire+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009550:	f3ef 8311 	mrs	r3, BASEPRI
 8009554:	b11b      	cbz	r3, 800955e <osSemaphoreAcquire+0x42>
 8009556:	4b0d      	ldr	r3, [pc, #52]	; (800958c <osSemaphoreAcquire+0x70>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2b02      	cmp	r3, #2
 800955c:	d0e8      	beq.n	8009530 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800955e:	4621      	mov	r1, r4
 8009560:	f001 f818 	bl	800a594 <xQueueSemaphoreTake>
 8009564:	2801      	cmp	r0, #1
 8009566:	d0ee      	beq.n	8009546 <osSemaphoreAcquire+0x2a>
      if (timeout != 0U) {
 8009568:	b96c      	cbnz	r4, 8009586 <osSemaphoreAcquire+0x6a>
        stat = osErrorResource;
 800956a:	f06f 0002 	mvn.w	r0, #2
 800956e:	e7da      	b.n	8009526 <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 8009570:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009578:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800957c:	f3bf 8f4f 	dsb	sy
 8009580:	f3bf 8f6f 	isb	sy
 8009584:	e7df      	b.n	8009546 <osSemaphoreAcquire+0x2a>
        stat = osErrorTimeout;
 8009586:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800958a:	e7cc      	b.n	8009526 <osSemaphoreAcquire+0xa>
 800958c:	2000f060 	.word	0x2000f060

08009590 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009590:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8009592:	b370      	cbz	r0, 80095f2 <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009594:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8009598:	b14b      	cbz	r3, 80095ae <osSemaphoreRelease+0x1e>
    yield = pdFALSE;
 800959a:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800959c:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800959e:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80095a0:	f000 fef7 	bl	800a392 <xQueueGiveFromISR>
 80095a4:	2801      	cmp	r0, #1
 80095a6:	d014      	beq.n	80095d2 <osSemaphoreRelease+0x42>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 80095a8:	f06f 0002 	mvn.w	r0, #2
 80095ac:	e014      	b.n	80095d8 <osSemaphoreRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095ae:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 80095b2:	b913      	cbnz	r3, 80095ba <osSemaphoreRelease+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80095b4:	f3ef 8311 	mrs	r3, BASEPRI
 80095b8:	b11b      	cbz	r3, 80095c2 <osSemaphoreRelease+0x32>
 80095ba:	4b0f      	ldr	r3, [pc, #60]	; (80095f8 <osSemaphoreRelease+0x68>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d0eb      	beq.n	800959a <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80095c2:	2300      	movs	r3, #0
 80095c4:	461a      	mov	r2, r3
 80095c6:	4619      	mov	r1, r3
 80095c8:	f000 fd6d 	bl	800a0a6 <xQueueGenericSend>
 80095cc:	2801      	cmp	r0, #1
 80095ce:	d002      	beq.n	80095d6 <osSemaphoreRelease+0x46>
 80095d0:	e7ea      	b.n	80095a8 <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 80095d2:	9b01      	ldr	r3, [sp, #4]
 80095d4:	b913      	cbnz	r3, 80095dc <osSemaphoreRelease+0x4c>
  stat = osOK;
 80095d6:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 80095d8:	b002      	add	sp, #8
 80095da:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 80095dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80095e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	e7f1      	b.n	80095d6 <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 80095f2:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80095f6:	e7ef      	b.n	80095d8 <osSemaphoreRelease+0x48>
 80095f8:	2000f060 	.word	0x2000f060

080095fc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80095fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095fe:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009600:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009604:	b11b      	cbz	r3, 800960e <osMessageQueueNew+0x12>
  hQueue = NULL;
 8009606:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8009608:	4628      	mov	r0, r5
 800960a:	b002      	add	sp, #8
 800960c:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800960e:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009612:	b913      	cbnz	r3, 800961a <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009614:	f3ef 8311 	mrs	r3, BASEPRI
 8009618:	b11b      	cbz	r3, 8009622 <osMessageQueueNew+0x26>
 800961a:	4b1a      	ldr	r3, [pc, #104]	; (8009684 <osMessageQueueNew+0x88>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2b02      	cmp	r3, #2
 8009620:	d0f1      	beq.n	8009606 <osMessageQueueNew+0xa>
 8009622:	2800      	cmp	r0, #0
 8009624:	d0ef      	beq.n	8009606 <osMessageQueueNew+0xa>
 8009626:	2900      	cmp	r1, #0
 8009628:	d0ed      	beq.n	8009606 <osMessageQueueNew+0xa>
    if (attr != NULL) {
 800962a:	b1ec      	cbz	r4, 8009668 <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800962c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8009630:	b193      	cbz	r3, 8009658 <osMessageQueueNew+0x5c>
 8009632:	2a4f      	cmp	r2, #79	; 0x4f
 8009634:	d9e7      	bls.n	8009606 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009636:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009638:	2a00      	cmp	r2, #0
 800963a:	d0e4      	beq.n	8009606 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800963c:	fb01 f500 	mul.w	r5, r1, r0
 8009640:	6966      	ldr	r6, [r4, #20]
 8009642:	42ae      	cmp	r6, r5
 8009644:	d3df      	bcc.n	8009606 <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009646:	2500      	movs	r5, #0
 8009648:	9500      	str	r5, [sp, #0]
 800964a:	f000 fca7 	bl	8009f9c <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800964e:	4605      	mov	r5, r0
 8009650:	2800      	cmp	r0, #0
 8009652:	d0d8      	beq.n	8009606 <osMessageQueueNew+0xa>
        name = attr->name;
 8009654:	6824      	ldr	r4, [r4, #0]
 8009656:	e00f      	b.n	8009678 <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009658:	2a00      	cmp	r2, #0
 800965a:	d1d4      	bne.n	8009606 <osMessageQueueNew+0xa>
 800965c:	6923      	ldr	r3, [r4, #16]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1d1      	bne.n	8009606 <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009662:	6963      	ldr	r3, [r4, #20]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1ce      	bne.n	8009606 <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009668:	2200      	movs	r2, #0
 800966a:	f000 fcab 	bl	8009fc4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800966e:	4605      	mov	r5, r0
 8009670:	2800      	cmp	r0, #0
 8009672:	d0c8      	beq.n	8009606 <osMessageQueueNew+0xa>
      if (attr != NULL) {
 8009674:	2c00      	cmp	r4, #0
 8009676:	d1ed      	bne.n	8009654 <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 8009678:	4621      	mov	r1, r4
 800967a:	4628      	mov	r0, r5
 800967c:	f001 f8ce 	bl	800a81c <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8009680:	e7c2      	b.n	8009608 <osMessageQueueNew+0xc>
 8009682:	bf00      	nop
 8009684:	2000f060 	.word	0x2000f060

08009688 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009688:	b513      	push	{r0, r1, r4, lr}
 800968a:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800968c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8009690:	b123      	cbz	r3, 800969c <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009692:	b9d8      	cbnz	r0, 80096cc <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 8009694:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8009698:	b002      	add	sp, #8
 800969a:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800969c:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80096a0:	b913      	cbnz	r3, 80096a8 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80096a2:	f3ef 8311 	mrs	r3, BASEPRI
 80096a6:	b11b      	cbz	r3, 80096b0 <osMessageQueuePut+0x28>
 80096a8:	4b17      	ldr	r3, [pc, #92]	; (8009708 <osMessageQueuePut+0x80>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d0f0      	beq.n	8009692 <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80096b0:	2800      	cmp	r0, #0
 80096b2:	d0ef      	beq.n	8009694 <osMessageQueuePut+0xc>
 80096b4:	2900      	cmp	r1, #0
 80096b6:	d0ed      	beq.n	8009694 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80096b8:	2300      	movs	r3, #0
 80096ba:	4622      	mov	r2, r4
 80096bc:	f000 fcf3 	bl	800a0a6 <xQueueGenericSend>
 80096c0:	2801      	cmp	r0, #1
 80096c2:	d010      	beq.n	80096e6 <osMessageQueuePut+0x5e>
        if (timeout != 0U) {
 80096c4:	b9e4      	cbnz	r4, 8009700 <osMessageQueuePut+0x78>
          stat = osErrorResource;
 80096c6:	f06f 0002 	mvn.w	r0, #2
 80096ca:	e7e5      	b.n	8009698 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80096cc:	2900      	cmp	r1, #0
 80096ce:	d0e1      	beq.n	8009694 <osMessageQueuePut+0xc>
 80096d0:	2c00      	cmp	r4, #0
 80096d2:	d1df      	bne.n	8009694 <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80096d4:	4623      	mov	r3, r4
 80096d6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80096d8:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80096da:	f000 fdf1 	bl	800a2c0 <xQueueGenericSendFromISR>
 80096de:	2801      	cmp	r0, #1
 80096e0:	d1f1      	bne.n	80096c6 <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 80096e2:	9b01      	ldr	r3, [sp, #4]
 80096e4:	b90b      	cbnz	r3, 80096ea <osMessageQueuePut+0x62>
  stat = osOK;
 80096e6:	2000      	movs	r0, #0
 80096e8:	e7d6      	b.n	8009698 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 80096ea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80096ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096f2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80096f6:	f3bf 8f4f 	dsb	sy
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	e7f2      	b.n	80096e6 <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 8009700:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8009704:	e7c8      	b.n	8009698 <osMessageQueuePut+0x10>
 8009706:	bf00      	nop
 8009708:	2000f060 	.word	0x2000f060

0800970c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800970c:	b513      	push	{r0, r1, r4, lr}
 800970e:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009710:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8009714:	b123      	cbz	r3, 8009720 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009716:	b9d0      	cbnz	r0, 800974e <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 8009718:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800971c:	b002      	add	sp, #8
 800971e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009720:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8009724:	b913      	cbnz	r3, 800972c <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009726:	f3ef 8311 	mrs	r3, BASEPRI
 800972a:	b11b      	cbz	r3, 8009734 <osMessageQueueGet+0x28>
 800972c:	4b16      	ldr	r3, [pc, #88]	; (8009788 <osMessageQueueGet+0x7c>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b02      	cmp	r3, #2
 8009732:	d0f0      	beq.n	8009716 <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009734:	2800      	cmp	r0, #0
 8009736:	d0ef      	beq.n	8009718 <osMessageQueueGet+0xc>
 8009738:	2900      	cmp	r1, #0
 800973a:	d0ed      	beq.n	8009718 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800973c:	4622      	mov	r2, r4
 800973e:	f000 fe84 	bl	800a44a <xQueueReceive>
 8009742:	2801      	cmp	r0, #1
 8009744:	d00f      	beq.n	8009766 <osMessageQueueGet+0x5a>
        if (timeout != 0U) {
 8009746:	b9dc      	cbnz	r4, 8009780 <osMessageQueueGet+0x74>
          stat = osErrorResource;
 8009748:	f06f 0002 	mvn.w	r0, #2
 800974c:	e7e6      	b.n	800971c <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800974e:	2900      	cmp	r1, #0
 8009750:	d0e2      	beq.n	8009718 <osMessageQueueGet+0xc>
 8009752:	2c00      	cmp	r4, #0
 8009754:	d1e0      	bne.n	8009718 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009756:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8009758:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800975a:	f001 f80a 	bl	800a772 <xQueueReceiveFromISR>
 800975e:	2801      	cmp	r0, #1
 8009760:	d1f2      	bne.n	8009748 <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 8009762:	9b01      	ldr	r3, [sp, #4]
 8009764:	b90b      	cbnz	r3, 800976a <osMessageQueueGet+0x5e>
  stat = osOK;
 8009766:	2000      	movs	r0, #0
 8009768:	e7d8      	b.n	800971c <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 800976a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800976e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009772:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	f3bf 8f6f 	isb	sy
 800977e:	e7f2      	b.n	8009766 <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 8009780:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8009784:	e7ca      	b.n	800971c <osMessageQueueGet+0x10>
 8009786:	bf00      	nop
 8009788:	2000f060 	.word	0x2000f060

0800978c <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800978c:	4b03      	ldr	r3, [pc, #12]	; (800979c <vApplicationGetIdleTaskMemory+0x10>)
 800978e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009790:	4b03      	ldr	r3, [pc, #12]	; (80097a0 <vApplicationGetIdleTaskMemory+0x14>)
 8009792:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009794:	2380      	movs	r3, #128	; 0x80
 8009796:	6013      	str	r3, [r2, #0]
}
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	2000f000 	.word	0x2000f000
 80097a0:	2000ee00 	.word	0x2000ee00

080097a4 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80097a4:	4b03      	ldr	r3, [pc, #12]	; (80097b4 <vApplicationGetTimerTaskMemory+0x10>)
 80097a6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80097a8:	4b03      	ldr	r3, [pc, #12]	; (80097b8 <vApplicationGetTimerTaskMemory+0x14>)
 80097aa:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80097ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097b0:	6013      	str	r3, [r2, #0]
}
 80097b2:	4770      	bx	lr
 80097b4:	2000f464 	.word	0x2000f464
 80097b8:	2000f064 	.word	0x2000f064

080097bc <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80097bc:	4b0f      	ldr	r3, [pc, #60]	; (80097fc <prvInsertBlockIntoFreeList+0x40>)
{
 80097be:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80097c0:	461a      	mov	r2, r3
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4283      	cmp	r3, r0
 80097c6:	d3fb      	bcc.n	80097c0 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80097c8:	6854      	ldr	r4, [r2, #4]
 80097ca:	1911      	adds	r1, r2, r4
 80097cc:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80097ce:	bf01      	itttt	eq
 80097d0:	6841      	ldreq	r1, [r0, #4]
 80097d2:	4610      	moveq	r0, r2
 80097d4:	1909      	addeq	r1, r1, r4
 80097d6:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80097d8:	6844      	ldr	r4, [r0, #4]
 80097da:	1901      	adds	r1, r0, r4
 80097dc:	428b      	cmp	r3, r1
 80097de:	d107      	bne.n	80097f0 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80097e0:	4907      	ldr	r1, [pc, #28]	; (8009800 <prvInsertBlockIntoFreeList+0x44>)
 80097e2:	6809      	ldr	r1, [r1, #0]
 80097e4:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80097e6:	bf1f      	itttt	ne
 80097e8:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80097ea:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80097ec:	1909      	addne	r1, r1, r4
 80097ee:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80097f0:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80097f2:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80097f4:	bf18      	it	ne
 80097f6:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097f8:	bd10      	pop	{r4, pc}
 80097fa:	bf00      	nop
 80097fc:	20022d54 	.word	0x20022d54
 8009800:	2000f4c4 	.word	0x2000f4c4

08009804 <pvPortMalloc>:
{
 8009804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8009808:	4f41      	ldr	r7, [pc, #260]	; (8009910 <pvPortMalloc+0x10c>)
{
 800980a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800980c:	f001 fa3a 	bl	800ac84 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009810:	4840      	ldr	r0, [pc, #256]	; (8009914 <pvPortMalloc+0x110>)
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	b9f3      	cbnz	r3, 8009854 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 8009816:	4940      	ldr	r1, [pc, #256]	; (8009918 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 8009818:	2300      	movs	r3, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800981a:	074d      	lsls	r5, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800981c:	4d3f      	ldr	r5, [pc, #252]	; (800991c <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800981e:	bf1b      	ittet	ne
 8009820:	3107      	addne	r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009822:	4a3f      	ldrne	r2, [pc, #252]	; (8009920 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009824:	4a3f      	ldreq	r2, [pc, #252]	; (8009924 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009826:	f021 0107 	bicne.w	r1, r1, #7
	xStart.xBlockSize = ( size_t ) 0;
 800982a:	606b      	str	r3, [r5, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800982c:	bf18      	it	ne
 800982e:	1a52      	subne	r2, r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009830:	6029      	str	r1, [r5, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009832:	440a      	add	r2, r1
	uxAddress -= xHeapStructSize;
 8009834:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009836:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 800983a:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800983e:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 8009840:	603a      	str	r2, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009842:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009846:	4a38      	ldr	r2, [pc, #224]	; (8009928 <pvPortMalloc+0x124>)
 8009848:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800984a:	4a38      	ldr	r2, [pc, #224]	; (800992c <pvPortMalloc+0x128>)
 800984c:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800984e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009852:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009854:	f8d0 8000 	ldr.w	r8, [r0]
 8009858:	ea18 0f04 	tst.w	r8, r4
 800985c:	d152      	bne.n	8009904 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 800985e:	2c00      	cmp	r4, #0
 8009860:	d041      	beq.n	80098e6 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 8009862:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009866:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009868:	bf1c      	itt	ne
 800986a:	f023 0307 	bicne.w	r3, r3, #7
 800986e:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009870:	2b00      	cmp	r3, #0
 8009872:	d047      	beq.n	8009904 <pvPortMalloc+0x100>
 8009874:	4c2d      	ldr	r4, [pc, #180]	; (800992c <pvPortMalloc+0x128>)
 8009876:	6826      	ldr	r6, [r4, #0]
 8009878:	429e      	cmp	r6, r3
 800987a:	d343      	bcc.n	8009904 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 800987c:	4a27      	ldr	r2, [pc, #156]	; (800991c <pvPortMalloc+0x118>)
 800987e:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009880:	6869      	ldr	r1, [r5, #4]
 8009882:	4299      	cmp	r1, r3
 8009884:	d201      	bcs.n	800988a <pvPortMalloc+0x86>
 8009886:	6828      	ldr	r0, [r5, #0]
 8009888:	b9b0      	cbnz	r0, 80098b8 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800988a:	6838      	ldr	r0, [r7, #0]
 800988c:	42a8      	cmp	r0, r5
 800988e:	d039      	beq.n	8009904 <pvPortMalloc+0x100>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009890:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009892:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009894:	6817      	ldr	r7, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009896:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009898:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800989a:	d914      	bls.n	80098c6 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800989c:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800989e:	0742      	lsls	r2, r0, #29
 80098a0:	d00d      	beq.n	80098be <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80098a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a6:	b672      	cpsid	i
 80098a8:	f383 8811 	msr	BASEPRI, r3
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	b662      	cpsie	i
 80098b6:	e7fe      	b.n	80098b6 <pvPortMalloc+0xb2>
 80098b8:	462a      	mov	r2, r5
 80098ba:	4605      	mov	r5, r0
 80098bc:	e7e0      	b.n	8009880 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80098be:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80098c0:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80098c2:	f7ff ff7b 	bl	80097bc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80098c6:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098c8:	4917      	ldr	r1, [pc, #92]	; (8009928 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80098ca:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098cc:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098d0:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80098d2:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80098d4:	f107 0408 	add.w	r4, r7, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098d8:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098da:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80098dc:	f04f 0300 	mov.w	r3, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80098e0:	bf38      	it	cc
 80098e2:	600e      	strcc	r6, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 80098e4:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80098e6:	f001 fa73 	bl	800add0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80098ea:	0763      	lsls	r3, r4, #29
 80098ec:	d00c      	beq.n	8009908 <pvPortMalloc+0x104>
 80098ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f2:	b672      	cpsid	i
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	b662      	cpsie	i
 8009902:	e7fe      	b.n	8009902 <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 8009904:	2400      	movs	r4, #0
 8009906:	e7ee      	b.n	80098e6 <pvPortMalloc+0xe2>
}
 8009908:	4620      	mov	r0, r4
 800990a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800990e:	bf00      	nop
 8009910:	2000f4c4 	.word	0x2000f4c4
 8009914:	20022d48 	.word	0x20022d48
 8009918:	2000f4c8 	.word	0x2000f4c8
 800991c:	20022d54 	.word	0x20022d54
 8009920:	20022d48 	.word	0x20022d48
 8009924:	00013880 	.word	0x00013880
 8009928:	20022d50 	.word	0x20022d50
 800992c:	20022d4c 	.word	0x20022d4c

08009930 <vPortFree>:
{
 8009930:	b510      	push	{r4, lr}
	if( pv != NULL )
 8009932:	4604      	mov	r4, r0
 8009934:	2800      	cmp	r0, #0
 8009936:	d032      	beq.n	800999e <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009938:	4a19      	ldr	r2, [pc, #100]	; (80099a0 <vPortFree+0x70>)
 800993a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800993e:	6812      	ldr	r2, [r2, #0]
 8009940:	4213      	tst	r3, r2
 8009942:	d10a      	bne.n	800995a <vPortFree+0x2a>
 8009944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009948:	b672      	cpsid	i
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	b662      	cpsie	i
 8009958:	e7fe      	b.n	8009958 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800995a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800995e:	b151      	cbz	r1, 8009976 <vPortFree+0x46>
 8009960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009964:	b672      	cpsid	i
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	b662      	cpsie	i
 8009974:	e7fe      	b.n	8009974 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009976:	ea23 0302 	bic.w	r3, r3, r2
 800997a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800997e:	f001 f981 	bl	800ac84 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009982:	4a08      	ldr	r2, [pc, #32]	; (80099a4 <vPortFree+0x74>)
 8009984:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009988:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800998c:	6811      	ldr	r1, [r2, #0]
 800998e:	440b      	add	r3, r1
 8009990:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009992:	f7ff ff13 	bl	80097bc <prvInsertBlockIntoFreeList>
}
 8009996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800999a:	f001 ba19 	b.w	800add0 <xTaskResumeAll>
}
 800999e:	bd10      	pop	{r4, pc}
 80099a0:	20022d48 	.word	0x20022d48
 80099a4:	20022d4c 	.word	0x20022d4c

080099a8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099a8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80099ac:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099b0:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099b2:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099b4:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80099b8:	2300      	movs	r3, #0
 80099ba:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80099bc:	4770      	bx	lr

080099be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80099be:	2300      	movs	r3, #0
 80099c0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80099c2:	4770      	bx	lr

080099c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80099c4:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80099c6:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80099c8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80099ca:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80099cc:	689a      	ldr	r2, [r3, #8]
 80099ce:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80099d0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80099d2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80099d4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80099d6:	3301      	adds	r3, #1
 80099d8:	6003      	str	r3, [r0, #0]
}
 80099da:	4770      	bx	lr

080099dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099dc:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80099de:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80099e0:	1c63      	adds	r3, r4, #1
 80099e2:	d10a      	bne.n	80099fa <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80099e4:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80099e6:	685a      	ldr	r2, [r3, #4]
 80099e8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80099ea:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80099ec:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80099ee:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80099f0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80099f2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80099f4:	3301      	adds	r3, #1
 80099f6:	6003      	str	r3, [r0, #0]
}
 80099f8:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80099fa:	f100 0208 	add.w	r2, r0, #8
 80099fe:	4613      	mov	r3, r2
 8009a00:	6852      	ldr	r2, [r2, #4]
 8009a02:	6815      	ldr	r5, [r2, #0]
 8009a04:	42a5      	cmp	r5, r4
 8009a06:	d9fa      	bls.n	80099fe <vListInsert+0x22>
 8009a08:	e7ed      	b.n	80099e6 <vListInsert+0xa>

08009a0a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009a0a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a0c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8009a10:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009a12:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a14:	6859      	ldr	r1, [r3, #4]
 8009a16:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a18:	bf08      	it	eq
 8009a1a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	3a01      	subs	r2, #1
 8009a24:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a26:	6818      	ldr	r0, [r3, #0]
}
 8009a28:	4770      	bx	lr
	...

08009a2c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a2c:	4808      	ldr	r0, [pc, #32]	; (8009a50 <prvPortStartFirstTask+0x24>)
 8009a2e:	6800      	ldr	r0, [r0, #0]
 8009a30:	6800      	ldr	r0, [r0, #0]
 8009a32:	f380 8808 	msr	MSP, r0
 8009a36:	f04f 0000 	mov.w	r0, #0
 8009a3a:	f380 8814 	msr	CONTROL, r0
 8009a3e:	b662      	cpsie	i
 8009a40:	b661      	cpsie	f
 8009a42:	f3bf 8f4f 	dsb	sy
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	df00      	svc	0
 8009a4c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a4e:	0000      	.short	0x0000
 8009a50:	e000ed08 	.word	0xe000ed08

08009a54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009a64 <vPortEnableVFP+0x10>
 8009a58:	6801      	ldr	r1, [r0, #0]
 8009a5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009a5e:	6001      	str	r1, [r0, #0]
 8009a60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a62:	0000      	.short	0x0000
 8009a64:	e000ed88 	.word	0xe000ed88

08009a68 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8009a68:	2300      	movs	r3, #0
{
 8009a6a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8009a6c:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8009a6e:	4b0f      	ldr	r3, [pc, #60]	; (8009aac <prvTaskExitError+0x44>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	3301      	adds	r3, #1
 8009a74:	d00a      	beq.n	8009a8c <prvTaskExitError+0x24>
 8009a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7a:	b672      	cpsid	i
 8009a7c:	f383 8811 	msr	BASEPRI, r3
 8009a80:	f3bf 8f6f 	isb	sy
 8009a84:	f3bf 8f4f 	dsb	sy
 8009a88:	b662      	cpsie	i
 8009a8a:	e7fe      	b.n	8009a8a <prvTaskExitError+0x22>
 8009a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a90:	b672      	cpsid	i
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	b662      	cpsie	i
	while( ulDummy == 0 )
 8009aa0:	9b01      	ldr	r3, [sp, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d0fc      	beq.n	8009aa0 <prvTaskExitError+0x38>
}
 8009aa6:	b002      	add	sp, #8
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	2000006c 	.word	0x2000006c

08009ab0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ab0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ab4:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ab8:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8009abc:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009abe:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ac0:	4b03      	ldr	r3, [pc, #12]	; (8009ad0 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ac2:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ac4:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ac6:	f06f 0302 	mvn.w	r3, #2
 8009aca:	6203      	str	r3, [r0, #32]
}
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	08009a69 	.word	0x08009a69
	...

08009ae0 <SVC_Handler>:
	__asm volatile (
 8009ae0:	4b07      	ldr	r3, [pc, #28]	; (8009b00 <pxCurrentTCBConst2>)
 8009ae2:	6819      	ldr	r1, [r3, #0]
 8009ae4:	6808      	ldr	r0, [r1, #0]
 8009ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aea:	f380 8809 	msr	PSP, r0
 8009aee:	f3bf 8f6f 	isb	sy
 8009af2:	f04f 0000 	mov.w	r0, #0
 8009af6:	f380 8811 	msr	BASEPRI, r0
 8009afa:	4770      	bx	lr
 8009afc:	f3af 8000 	nop.w

08009b00 <pxCurrentTCBConst2>:
 8009b00:	20022da4 	.word	0x20022da4

08009b04 <vPortEnterCritical>:
 8009b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b08:	b672      	cpsid	i
 8009b0a:	f383 8811 	msr	BASEPRI, r3
 8009b0e:	f3bf 8f6f 	isb	sy
 8009b12:	f3bf 8f4f 	dsb	sy
 8009b16:	b662      	cpsie	i
	uxCriticalNesting++;
 8009b18:	4a0b      	ldr	r2, [pc, #44]	; (8009b48 <vPortEnterCritical+0x44>)
 8009b1a:	6813      	ldr	r3, [r2, #0]
 8009b1c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8009b1e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8009b20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8009b22:	d110      	bne.n	8009b46 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b24:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009b28:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	b153      	cbz	r3, 8009b46 <vPortEnterCritical+0x42>
 8009b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b34:	b672      	cpsid	i
 8009b36:	f383 8811 	msr	BASEPRI, r3
 8009b3a:	f3bf 8f6f 	isb	sy
 8009b3e:	f3bf 8f4f 	dsb	sy
 8009b42:	b662      	cpsie	i
 8009b44:	e7fe      	b.n	8009b44 <vPortEnterCritical+0x40>
}
 8009b46:	4770      	bx	lr
 8009b48:	2000006c 	.word	0x2000006c

08009b4c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8009b4c:	4a09      	ldr	r2, [pc, #36]	; (8009b74 <vPortExitCritical+0x28>)
 8009b4e:	6813      	ldr	r3, [r2, #0]
 8009b50:	b953      	cbnz	r3, 8009b68 <vPortExitCritical+0x1c>
 8009b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b56:	b672      	cpsid	i
 8009b58:	f383 8811 	msr	BASEPRI, r3
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f3bf 8f4f 	dsb	sy
 8009b64:	b662      	cpsie	i
 8009b66:	e7fe      	b.n	8009b66 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b6c:	b90b      	cbnz	r3, 8009b72 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009b6e:	f383 8811 	msr	BASEPRI, r3
}
 8009b72:	4770      	bx	lr
 8009b74:	2000006c 	.word	0x2000006c
	...

08009b80 <PendSV_Handler>:
	__asm volatile
 8009b80:	f3ef 8009 	mrs	r0, PSP
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	4b15      	ldr	r3, [pc, #84]	; (8009be0 <pxCurrentTCBConst>)
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	f01e 0f10 	tst.w	lr, #16
 8009b90:	bf08      	it	eq
 8009b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b9a:	6010      	str	r0, [r2, #0]
 8009b9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ba0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ba4:	b672      	cpsid	i
 8009ba6:	f380 8811 	msr	BASEPRI, r0
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	f3bf 8f6f 	isb	sy
 8009bb2:	b662      	cpsie	i
 8009bb4:	f001 fa16 	bl	800afe4 <vTaskSwitchContext>
 8009bb8:	f04f 0000 	mov.w	r0, #0
 8009bbc:	f380 8811 	msr	BASEPRI, r0
 8009bc0:	bc09      	pop	{r0, r3}
 8009bc2:	6819      	ldr	r1, [r3, #0]
 8009bc4:	6808      	ldr	r0, [r1, #0]
 8009bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bca:	f01e 0f10 	tst.w	lr, #16
 8009bce:	bf08      	it	eq
 8009bd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009bd4:	f380 8809 	msr	PSP, r0
 8009bd8:	f3bf 8f6f 	isb	sy
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop

08009be0 <pxCurrentTCBConst>:
 8009be0:	20022da4 	.word	0x20022da4

08009be4 <SysTick_Handler>:
{
 8009be4:	b508      	push	{r3, lr}
	__asm volatile
 8009be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bea:	b672      	cpsid	i
 8009bec:	f383 8811 	msr	BASEPRI, r3
 8009bf0:	f3bf 8f6f 	isb	sy
 8009bf4:	f3bf 8f4f 	dsb	sy
 8009bf8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8009bfa:	f001 f851 	bl	800aca0 <xTaskIncrementTick>
 8009bfe:	b128      	cbz	r0, 8009c0c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c00:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c08:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	f383 8811 	msr	BASEPRI, r3
}
 8009c12:	bd08      	pop	{r3, pc}

08009c14 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c14:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8009c18:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c1e:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c20:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c22:	4b04      	ldr	r3, [pc, #16]	; (8009c34 <vPortSetupTimerInterrupt+0x20>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c2e:	2307      	movs	r3, #7
 8009c30:	6113      	str	r3, [r2, #16]
}
 8009c32:	4770      	bx	lr
 8009c34:	20000060 	.word	0x20000060

08009c38 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c38:	4b2e      	ldr	r3, [pc, #184]	; (8009cf4 <xPortStartScheduler+0xbc>)
{
 8009c3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c3c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c3e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c40:	b2d2      	uxtb	r2, r2
 8009c42:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c44:	22ff      	movs	r2, #255	; 0xff
 8009c46:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c48:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c4a:	4a2b      	ldr	r2, [pc, #172]	; (8009cf8 <xPortStartScheduler+0xc0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c52:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009c56:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c5a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c5c:	2307      	movs	r3, #7
 8009c5e:	4a27      	ldr	r2, [pc, #156]	; (8009cfc <xPortStartScheduler+0xc4>)
 8009c60:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c62:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8009c66:	1e5c      	subs	r4, r3, #1
 8009c68:	0600      	lsls	r0, r0, #24
 8009c6a:	d40e      	bmi.n	8009c8a <xPortStartScheduler+0x52>
 8009c6c:	b111      	cbz	r1, 8009c74 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c6e:	2b03      	cmp	r3, #3
 8009c70:	6013      	str	r3, [r2, #0]
 8009c72:	d013      	beq.n	8009c9c <xPortStartScheduler+0x64>
	__asm volatile
 8009c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c78:	b672      	cpsid	i
 8009c7a:	f383 8811 	msr	BASEPRI, r3
 8009c7e:	f3bf 8f6f 	isb	sy
 8009c82:	f3bf 8f4f 	dsb	sy
 8009c86:	b662      	cpsie	i
 8009c88:	e7fe      	b.n	8009c88 <xPortStartScheduler+0x50>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009c8a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009c8e:	2101      	movs	r1, #1
 8009c90:	005b      	lsls	r3, r3, #1
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	f88d 3003 	strb.w	r3, [sp, #3]
 8009c98:	4623      	mov	r3, r4
 8009c9a:	e7e2      	b.n	8009c62 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c9c:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ca0:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8009ca4:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ca6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ca8:	9b01      	ldr	r3, [sp, #4]
 8009caa:	4a12      	ldr	r2, [pc, #72]	; (8009cf4 <xPortStartScheduler+0xbc>)
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009cb0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8009cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009cb8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009cbc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8009cc0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009cc4:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8009cc8:	f7ff ffa4 	bl	8009c14 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8009ccc:	4b0c      	ldr	r3, [pc, #48]	; (8009d00 <xPortStartScheduler+0xc8>)
 8009cce:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8009cd0:	f7ff fec0 	bl	8009a54 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009cd4:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8009cd8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009cdc:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8009ce0:	f7ff fea4 	bl	8009a2c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009ce4:	f001 f97e 	bl	800afe4 <vTaskSwitchContext>
}
 8009ce8:	4628      	mov	r0, r5
	prvTaskExitError();
 8009cea:	f7ff febd 	bl	8009a68 <prvTaskExitError>
}
 8009cee:	b003      	add	sp, #12
 8009cf0:	bd30      	pop	{r4, r5, pc}
 8009cf2:	bf00      	nop
 8009cf4:	e000e400 	.word	0xe000e400
 8009cf8:	20022d5c 	.word	0x20022d5c
 8009cfc:	20022d60 	.word	0x20022d60
 8009d00:	2000006c 	.word	0x2000006c

08009d04 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d04:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d08:	2b0f      	cmp	r3, #15
 8009d0a:	d910      	bls.n	8009d2e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d0c:	4a13      	ldr	r2, [pc, #76]	; (8009d5c <vPortValidateInterruptPriority+0x58>)
 8009d0e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d10:	4a13      	ldr	r2, [pc, #76]	; (8009d60 <vPortValidateInterruptPriority+0x5c>)
 8009d12:	7812      	ldrb	r2, [r2, #0]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d90a      	bls.n	8009d2e <vPortValidateInterruptPriority+0x2a>
 8009d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1c:	b672      	cpsid	i
 8009d1e:	f383 8811 	msr	BASEPRI, r3
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	f3bf 8f4f 	dsb	sy
 8009d2a:	b662      	cpsie	i
 8009d2c:	e7fe      	b.n	8009d2c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d2e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009d32:	4a0c      	ldr	r2, [pc, #48]	; (8009d64 <vPortValidateInterruptPriority+0x60>)
 8009d34:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009d38:	6812      	ldr	r2, [r2, #0]
 8009d3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d90a      	bls.n	8009d58 <vPortValidateInterruptPriority+0x54>
 8009d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d46:	b672      	cpsid	i
 8009d48:	f383 8811 	msr	BASEPRI, r3
 8009d4c:	f3bf 8f6f 	isb	sy
 8009d50:	f3bf 8f4f 	dsb	sy
 8009d54:	b662      	cpsie	i
 8009d56:	e7fe      	b.n	8009d56 <vPortValidateInterruptPriority+0x52>
	}
 8009d58:	4770      	bx	lr
 8009d5a:	bf00      	nop
 8009d5c:	e000e3f0 	.word	0xe000e3f0
 8009d60:	20022d5c 	.word	0x20022d5c
 8009d64:	20022d60 	.word	0x20022d60

08009d68 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009d68:	b510      	push	{r4, lr}
 8009d6a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d6c:	f7ff feca 	bl	8009b04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009d70:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8009d72:	f7ff feeb 	bl	8009b4c <vPortExitCritical>

	return xReturn;
}
 8009d76:	fab4 f084 	clz	r0, r4
 8009d7a:	0940      	lsrs	r0, r0, #5
 8009d7c:	bd10      	pop	{r4, pc}

08009d7e <prvCopyDataToQueue>:
{
 8009d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d80:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009d82:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8009d84:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d86:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009d88:	b952      	cbnz	r2, 8009da0 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d8a:	6807      	ldr	r7, [r0, #0]
 8009d8c:	bb47      	cbnz	r7, 8009de0 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009d8e:	6880      	ldr	r0, [r0, #8]
 8009d90:	f001 fa98 	bl	800b2c4 <xTaskPriorityDisinherit>
 8009d94:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009d96:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d98:	3601      	adds	r6, #1
}
 8009d9a:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d9c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8009d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8009da0:	b965      	cbnz	r5, 8009dbc <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009da2:	6840      	ldr	r0, [r0, #4]
 8009da4:	f012 fe50 	bl	801ca48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009da8:	6863      	ldr	r3, [r4, #4]
 8009daa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009dac:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009dae:	68a2      	ldr	r2, [r4, #8]
 8009db0:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009db2:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009db4:	d3f0      	bcc.n	8009d98 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009db6:	6823      	ldr	r3, [r4, #0]
 8009db8:	6063      	str	r3, [r4, #4]
 8009dba:	e7ed      	b.n	8009d98 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009dbc:	68c0      	ldr	r0, [r0, #12]
 8009dbe:	f012 fe43 	bl	801ca48 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009dc2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009dc4:	68e3      	ldr	r3, [r4, #12]
 8009dc6:	4251      	negs	r1, r2
 8009dc8:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009dca:	6822      	ldr	r2, [r4, #0]
 8009dcc:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009dce:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009dd0:	bf3e      	ittt	cc
 8009dd2:	68a3      	ldrcc	r3, [r4, #8]
 8009dd4:	185b      	addcc	r3, r3, r1
 8009dd6:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8009dd8:	2d02      	cmp	r5, #2
 8009dda:	d101      	bne.n	8009de0 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ddc:	b116      	cbz	r6, 8009de4 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8009dde:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8009de0:	2500      	movs	r5, #0
 8009de2:	e7d9      	b.n	8009d98 <prvCopyDataToQueue+0x1a>
 8009de4:	4635      	mov	r5, r6
 8009de6:	e7d7      	b.n	8009d98 <prvCopyDataToQueue+0x1a>

08009de8 <prvCopyDataFromQueue>:
{
 8009de8:	4603      	mov	r3, r0
 8009dea:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8009dee:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009df0:	b162      	cbz	r2, 8009e0c <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009df2:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009df4:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009df6:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009df8:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009dfa:	60dc      	str	r4, [r3, #12]
}
 8009dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009e00:	bf24      	itt	cs
 8009e02:	6819      	ldrcs	r1, [r3, #0]
 8009e04:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e06:	68d9      	ldr	r1, [r3, #12]
 8009e08:	f012 be1e 	b.w	801ca48 <memcpy>
}
 8009e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <prvUnlockQueue>:
{
 8009e12:	b570      	push	{r4, r5, r6, lr}
 8009e14:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009e16:	f7ff fe75 	bl	8009b04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009e1a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e1e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8009e22:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e24:	2d00      	cmp	r5, #0
 8009e26:	dc14      	bgt.n	8009e52 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8009e28:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e2a:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8009e2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009e32:	f7ff fe8b 	bl	8009b4c <vPortExitCritical>
	taskENTER_CRITICAL();
 8009e36:	f7ff fe65 	bl	8009b04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009e3a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8009e3e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e40:	2d00      	cmp	r5, #0
 8009e42:	dc12      	bgt.n	8009e6a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8009e44:	23ff      	movs	r3, #255	; 0xff
 8009e46:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8009e4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8009e4e:	f7ff be7d 	b.w	8009b4c <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d0e7      	beq.n	8009e28 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e58:	4630      	mov	r0, r6
 8009e5a:	f001 f945 	bl	800b0e8 <xTaskRemoveFromEventList>
 8009e5e:	b108      	cbz	r0, 8009e64 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8009e60:	f001 f9d4 	bl	800b20c <vTaskMissedYield>
			--cTxLock;
 8009e64:	3d01      	subs	r5, #1
 8009e66:	b26d      	sxtb	r5, r5
 8009e68:	e7dc      	b.n	8009e24 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e6a:	6923      	ldr	r3, [r4, #16]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d0e9      	beq.n	8009e44 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e70:	4630      	mov	r0, r6
 8009e72:	f001 f939 	bl	800b0e8 <xTaskRemoveFromEventList>
 8009e76:	b108      	cbz	r0, 8009e7c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8009e78:	f001 f9c8 	bl	800b20c <vTaskMissedYield>
				--cRxLock;
 8009e7c:	3d01      	subs	r5, #1
 8009e7e:	b26d      	sxtb	r5, r5
 8009e80:	e7de      	b.n	8009e40 <prvUnlockQueue+0x2e>

08009e82 <xQueueGenericReset>:
{
 8009e82:	b538      	push	{r3, r4, r5, lr}
 8009e84:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8009e86:	4604      	mov	r4, r0
 8009e88:	b950      	cbnz	r0, 8009ea0 <xQueueGenericReset+0x1e>
 8009e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8e:	b672      	cpsid	i
 8009e90:	f383 8811 	msr	BASEPRI, r3
 8009e94:	f3bf 8f6f 	isb	sy
 8009e98:	f3bf 8f4f 	dsb	sy
 8009e9c:	b662      	cpsie	i
 8009e9e:	e7fe      	b.n	8009e9e <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8009ea0:	f7ff fe30 	bl	8009b04 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ea4:	6822      	ldr	r2, [r4, #0]
 8009ea6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009eaa:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009eac:	434b      	muls	r3, r1
 8009eae:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009eb0:	1a5b      	subs	r3, r3, r1
 8009eb2:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009eb4:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009eb6:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009eb8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009eba:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ebc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8009ebe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ec2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8009ec6:	b9a5      	cbnz	r5, 8009ef2 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ec8:	6923      	ldr	r3, [r4, #16]
 8009eca:	b173      	cbz	r3, 8009eea <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ecc:	f104 0010 	add.w	r0, r4, #16
 8009ed0:	f001 f90a 	bl	800b0e8 <xTaskRemoveFromEventList>
 8009ed4:	b148      	cbz	r0, 8009eea <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 8009ed6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ede:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009ee2:	f3bf 8f4f 	dsb	sy
 8009ee6:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8009eea:	f7ff fe2f 	bl	8009b4c <vPortExitCritical>
}
 8009eee:	2001      	movs	r0, #1
 8009ef0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ef2:	f104 0010 	add.w	r0, r4, #16
 8009ef6:	f7ff fd57 	bl	80099a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009efa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009efe:	f7ff fd53 	bl	80099a8 <vListInitialise>
 8009f02:	e7f2      	b.n	8009eea <xQueueGenericReset+0x68>

08009f04 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 8009f04:	b513      	push	{r0, r1, r4, lr}
		configASSERT( pxStaticQueue != NULL );
 8009f06:	461c      	mov	r4, r3
 8009f08:	b953      	cbnz	r3, 8009f20 <xQueueGenericCreateStatic.part.0+0x1c>
 8009f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0e:	b672      	cpsid	i
 8009f10:	f383 8811 	msr	BASEPRI, r3
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	b662      	cpsie	i
 8009f1e:	e7fe      	b.n	8009f1e <xQueueGenericCreateStatic.part.0+0x1a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009f20:	b15a      	cbz	r2, 8009f3a <xQueueGenericCreateStatic.part.0+0x36>
 8009f22:	b9b1      	cbnz	r1, 8009f52 <xQueueGenericCreateStatic.part.0+0x4e>
 8009f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f28:	b672      	cpsid	i
 8009f2a:	f383 8811 	msr	BASEPRI, r3
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	f3bf 8f4f 	dsb	sy
 8009f36:	b662      	cpsie	i
 8009f38:	e7fe      	b.n	8009f38 <xQueueGenericCreateStatic.part.0+0x34>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009f3a:	b151      	cbz	r1, 8009f52 <xQueueGenericCreateStatic.part.0+0x4e>
 8009f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f40:	b672      	cpsid	i
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	b662      	cpsie	i
 8009f50:	e7fe      	b.n	8009f50 <xQueueGenericCreateStatic.part.0+0x4c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009f52:	2350      	movs	r3, #80	; 0x50
 8009f54:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009f56:	9b01      	ldr	r3, [sp, #4]
 8009f58:	2b50      	cmp	r3, #80	; 0x50
 8009f5a:	d00a      	beq.n	8009f72 <xQueueGenericCreateStatic.part.0+0x6e>
 8009f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f60:	b672      	cpsid	i
 8009f62:	f383 8811 	msr	BASEPRI, r3
 8009f66:	f3bf 8f6f 	isb	sy
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	b662      	cpsie	i
 8009f70:	e7fe      	b.n	8009f70 <xQueueGenericCreateStatic.part.0+0x6c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f72:	2900      	cmp	r1, #0
 8009f74:	bf08      	it	eq
 8009f76:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009f78:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	6022      	str	r2, [r4, #0]
 8009f7e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8009f82:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f86:	4619      	mov	r1, r3
 8009f88:	4620      	mov	r0, r4
 8009f8a:	f7ff ff7a 	bl	8009e82 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8009f8e:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 8009f92:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8009f94:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8009f98:	b002      	add	sp, #8
 8009f9a:	bd10      	pop	{r4, pc}

08009f9c <xQueueGenericCreateStatic>:
	{
 8009f9c:	b410      	push	{r4}
 8009f9e:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009fa2:	b950      	cbnz	r0, 8009fba <xQueueGenericCreateStatic+0x1e>
 8009fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa8:	b672      	cpsid	i
 8009faa:	f383 8811 	msr	BASEPRI, r3
 8009fae:	f3bf 8f6f 	isb	sy
 8009fb2:	f3bf 8f4f 	dsb	sy
 8009fb6:	b662      	cpsie	i
 8009fb8:	e7fe      	b.n	8009fb8 <xQueueGenericCreateStatic+0x1c>
 8009fba:	9401      	str	r4, [sp, #4]
	}
 8009fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fc0:	f7ff bfa0 	b.w	8009f04 <xQueueGenericCreateStatic.part.0>

08009fc4 <xQueueGenericCreate>:
	{
 8009fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc6:	460d      	mov	r5, r1
 8009fc8:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009fca:	4606      	mov	r6, r0
 8009fcc:	b950      	cbnz	r0, 8009fe4 <xQueueGenericCreate+0x20>
 8009fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd2:	b672      	cpsid	i
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	b662      	cpsie	i
 8009fe2:	e7fe      	b.n	8009fe2 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fe4:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009fe6:	3050      	adds	r0, #80	; 0x50
 8009fe8:	f7ff fc0c 	bl	8009804 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8009fec:	4604      	mov	r4, r0
 8009fee:	b170      	cbz	r0, 800a00e <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8009ff6:	b165      	cbz	r5, 800a012 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ff8:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ffc:	2101      	movs	r1, #1
 8009ffe:	4620      	mov	r0, r4
 800a000:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800a002:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a006:	f7ff ff3c 	bl	8009e82 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800a00a:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800a00e:	4620      	mov	r0, r4
 800a010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a012:	4603      	mov	r3, r0
 800a014:	e7f2      	b.n	8009ffc <xQueueGenericCreate+0x38>

0800a016 <xQueueCreateCountingSemaphoreStatic>:
	{
 800a016:	b513      	push	{r0, r1, r4, lr}
 800a018:	4613      	mov	r3, r2
 800a01a:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800a01c:	b950      	cbnz	r0, 800a034 <xQueueCreateCountingSemaphoreStatic+0x1e>
 800a01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a022:	b672      	cpsid	i
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	b662      	cpsie	i
 800a032:	e7fe      	b.n	800a032 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a034:	4288      	cmp	r0, r1
 800a036:	d20a      	bcs.n	800a04e <xQueueCreateCountingSemaphoreStatic+0x38>
 800a038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03c:	b672      	cpsid	i
 800a03e:	f383 8811 	msr	BASEPRI, r3
 800a042:	f3bf 8f6f 	isb	sy
 800a046:	f3bf 8f4f 	dsb	sy
 800a04a:	b662      	cpsie	i
 800a04c:	e7fe      	b.n	800a04c <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a04e:	2202      	movs	r2, #2
 800a050:	9200      	str	r2, [sp, #0]
 800a052:	2200      	movs	r2, #0
 800a054:	4611      	mov	r1, r2
 800a056:	f7ff ffa1 	bl	8009f9c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800a05a:	b100      	cbz	r0, 800a05e <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a05c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800a05e:	b002      	add	sp, #8
 800a060:	bd10      	pop	{r4, pc}

0800a062 <xQueueCreateCountingSemaphore>:
	{
 800a062:	b510      	push	{r4, lr}
 800a064:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800a066:	b950      	cbnz	r0, 800a07e <xQueueCreateCountingSemaphore+0x1c>
 800a068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06c:	b672      	cpsid	i
 800a06e:	f383 8811 	msr	BASEPRI, r3
 800a072:	f3bf 8f6f 	isb	sy
 800a076:	f3bf 8f4f 	dsb	sy
 800a07a:	b662      	cpsie	i
 800a07c:	e7fe      	b.n	800a07c <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a07e:	4288      	cmp	r0, r1
 800a080:	d20a      	bcs.n	800a098 <xQueueCreateCountingSemaphore+0x36>
 800a082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a086:	b672      	cpsid	i
 800a088:	f383 8811 	msr	BASEPRI, r3
 800a08c:	f3bf 8f6f 	isb	sy
 800a090:	f3bf 8f4f 	dsb	sy
 800a094:	b662      	cpsie	i
 800a096:	e7fe      	b.n	800a096 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a098:	2202      	movs	r2, #2
 800a09a:	2100      	movs	r1, #0
 800a09c:	f7ff ff92 	bl	8009fc4 <xQueueGenericCreate>
		if( xHandle != NULL )
 800a0a0:	b100      	cbz	r0, 800a0a4 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a0a2:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800a0a4:	bd10      	pop	{r4, pc}

0800a0a6 <xQueueGenericSend>:
{
 800a0a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	4688      	mov	r8, r1
 800a0ae:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800a0b0:	4604      	mov	r4, r0
{
 800a0b2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800a0b4:	b950      	cbnz	r0, 800a0cc <xQueueGenericSend+0x26>
 800a0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ba:	b672      	cpsid	i
 800a0bc:	f383 8811 	msr	BASEPRI, r3
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	b662      	cpsie	i
 800a0ca:	e7fe      	b.n	800a0ca <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0cc:	b961      	cbnz	r1, 800a0e8 <xQueueGenericSend+0x42>
 800a0ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a0d0:	b153      	cbz	r3, 800a0e8 <xQueueGenericSend+0x42>
 800a0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d6:	b672      	cpsid	i
 800a0d8:	f383 8811 	msr	BASEPRI, r3
 800a0dc:	f3bf 8f6f 	isb	sy
 800a0e0:	f3bf 8f4f 	dsb	sy
 800a0e4:	b662      	cpsie	i
 800a0e6:	e7fe      	b.n	800a0e6 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0e8:	2f02      	cmp	r7, #2
 800a0ea:	d10d      	bne.n	800a108 <xQueueGenericSend+0x62>
 800a0ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d00a      	beq.n	800a108 <xQueueGenericSend+0x62>
 800a0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f6:	b672      	cpsid	i
 800a0f8:	f383 8811 	msr	BASEPRI, r3
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	b662      	cpsie	i
 800a106:	e7fe      	b.n	800a106 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a108:	f001 f88c 	bl	800b224 <xTaskGetSchedulerState>
 800a10c:	4606      	mov	r6, r0
 800a10e:	b960      	cbnz	r0, 800a12a <xQueueGenericSend+0x84>
 800a110:	9b01      	ldr	r3, [sp, #4]
 800a112:	b15b      	cbz	r3, 800a12c <xQueueGenericSend+0x86>
 800a114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a118:	b672      	cpsid	i
 800a11a:	f383 8811 	msr	BASEPRI, r3
 800a11e:	f3bf 8f6f 	isb	sy
 800a122:	f3bf 8f4f 	dsb	sy
 800a126:	b662      	cpsie	i
 800a128:	e7fe      	b.n	800a128 <xQueueGenericSend+0x82>
 800a12a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800a12c:	f04f 0900 	mov.w	r9, #0
 800a130:	e037      	b.n	800a1a2 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a132:	9d01      	ldr	r5, [sp, #4]
 800a134:	b91d      	cbnz	r5, 800a13e <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 800a136:	f7ff fd09 	bl	8009b4c <vPortExitCritical>
			return errQUEUE_FULL;
 800a13a:	2000      	movs	r0, #0
 800a13c:	e052      	b.n	800a1e4 <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 800a13e:	b916      	cbnz	r6, 800a146 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a140:	a802      	add	r0, sp, #8
 800a142:	f001 f817 	bl	800b174 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800a146:	f7ff fd01 	bl	8009b4c <vPortExitCritical>
		vTaskSuspendAll();
 800a14a:	f000 fd9b 	bl	800ac84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a14e:	f7ff fcd9 	bl	8009b04 <vPortEnterCritical>
 800a152:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a156:	2bff      	cmp	r3, #255	; 0xff
 800a158:	d101      	bne.n	800a15e <xQueueGenericSend+0xb8>
 800a15a:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800a15e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a162:	2bff      	cmp	r3, #255	; 0xff
 800a164:	d101      	bne.n	800a16a <xQueueGenericSend+0xc4>
 800a166:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800a16a:	f7ff fcef 	bl	8009b4c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a16e:	a901      	add	r1, sp, #4
 800a170:	a802      	add	r0, sp, #8
 800a172:	f001 f80b 	bl	800b18c <xTaskCheckForTimeOut>
 800a176:	2800      	cmp	r0, #0
 800a178:	d14a      	bne.n	800a210 <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a17a:	f7ff fcc3 	bl	8009b04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a17e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a180:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a182:	429a      	cmp	r2, r3
 800a184:	d131      	bne.n	800a1ea <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800a186:	f7ff fce1 	bl	8009b4c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a18a:	9901      	ldr	r1, [sp, #4]
 800a18c:	f104 0010 	add.w	r0, r4, #16
 800a190:	f000 ff6e 	bl	800b070 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a194:	4620      	mov	r0, r4
 800a196:	f7ff fe3c 	bl	8009e12 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a19a:	f000 fe19 	bl	800add0 <xTaskResumeAll>
 800a19e:	b360      	cbz	r0, 800a1fa <xQueueGenericSend+0x154>
 800a1a0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800a1a2:	f7ff fcaf 	bl	8009b04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a1a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d301      	bcc.n	800a1b2 <xQueueGenericSend+0x10c>
 800a1ae:	2f02      	cmp	r7, #2
 800a1b0:	d1bf      	bne.n	800a132 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1b2:	463a      	mov	r2, r7
 800a1b4:	4641      	mov	r1, r8
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	f7ff fde1 	bl	8009d7e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1be:	b11b      	cbz	r3, 800a1c8 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a1c4:	f000 ff90 	bl	800b0e8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800a1c8:	b148      	cbz	r0, 800a1de <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800a1ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a1ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1d2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a1d6:	f3bf 8f4f 	dsb	sy
 800a1da:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800a1de:	f7ff fcb5 	bl	8009b4c <vPortExitCritical>
				return pdPASS;
 800a1e2:	2001      	movs	r0, #1
}
 800a1e4:	b005      	add	sp, #20
 800a1e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800a1ea:	f7ff fcaf 	bl	8009b4c <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	f7ff fe0f 	bl	8009e12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1f4:	f000 fdec 	bl	800add0 <xTaskResumeAll>
 800a1f8:	e7d2      	b.n	800a1a0 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 800a1fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a1fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a202:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a206:	f3bf 8f4f 	dsb	sy
 800a20a:	f3bf 8f6f 	isb	sy
 800a20e:	e7c7      	b.n	800a1a0 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 800a210:	4620      	mov	r0, r4
 800a212:	f7ff fdfe 	bl	8009e12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a216:	f000 fddb 	bl	800add0 <xTaskResumeAll>
 800a21a:	e78e      	b.n	800a13a <xQueueGenericSend+0x94>

0800a21c <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a21c:	2200      	movs	r2, #0
	{
 800a21e:	460b      	mov	r3, r1
 800a220:	b513      	push	{r0, r1, r4, lr}
 800a222:	4611      	mov	r1, r2
 800a224:	9000      	str	r0, [sp, #0]
 800a226:	2001      	movs	r0, #1
 800a228:	f7ff fe6c 	bl	8009f04 <xQueueGenericCreateStatic.part.0>
		if( pxNewQueue != NULL )
 800a22c:	4604      	mov	r4, r0
 800a22e:	b138      	cbz	r0, 800a240 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a230:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a232:	461a      	mov	r2, r3
 800a234:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a236:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a238:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a23a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a23c:	f7ff ff33 	bl	800a0a6 <xQueueGenericSend>
	}
 800a240:	4620      	mov	r0, r4
 800a242:	b002      	add	sp, #8
 800a244:	bd10      	pop	{r4, pc}

0800a246 <xQueueGiveMutexRecursive>:
	{
 800a246:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800a248:	4604      	mov	r4, r0
 800a24a:	b950      	cbnz	r0, 800a262 <xQueueGiveMutexRecursive+0x1c>
 800a24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a250:	b672      	cpsid	i
 800a252:	f383 8811 	msr	BASEPRI, r3
 800a256:	f3bf 8f6f 	isb	sy
 800a25a:	f3bf 8f4f 	dsb	sy
 800a25e:	b662      	cpsie	i
 800a260:	e7fe      	b.n	800a260 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a262:	6885      	ldr	r5, [r0, #8]
 800a264:	f000 ffd8 	bl	800b218 <xTaskGetCurrentTaskHandle>
 800a268:	4285      	cmp	r5, r0
 800a26a:	d10a      	bne.n	800a282 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a26c:	68e3      	ldr	r3, [r4, #12]
 800a26e:	3b01      	subs	r3, #1
 800a270:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a272:	b923      	cbnz	r3, 800a27e <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a274:	461a      	mov	r2, r3
 800a276:	4619      	mov	r1, r3
 800a278:	4620      	mov	r0, r4
 800a27a:	f7ff ff14 	bl	800a0a6 <xQueueGenericSend>
			xReturn = pdPASS;
 800a27e:	2001      	movs	r0, #1
		return xReturn;
 800a280:	e000      	b.n	800a284 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 800a282:	2000      	movs	r0, #0
	}
 800a284:	bd38      	pop	{r3, r4, r5, pc}

0800a286 <xQueueCreateMutex>:
	{
 800a286:	b570      	push	{r4, r5, r6, lr}
 800a288:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a28a:	2050      	movs	r0, #80	; 0x50
 800a28c:	f7ff faba 	bl	8009804 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800a290:	4604      	mov	r4, r0
 800a292:	b198      	cbz	r0, 800a2bc <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a294:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800a296:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a298:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a29a:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800a29e:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a2a2:	f7ff fdee 	bl	8009e82 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a2a6:	462b      	mov	r3, r5
 800a2a8:	462a      	mov	r2, r5
 800a2aa:	4629      	mov	r1, r5
 800a2ac:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800a2ae:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a2b2:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a2b4:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a2b6:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a2b8:	f7ff fef5 	bl	800a0a6 <xQueueGenericSend>
	}
 800a2bc:	4620      	mov	r0, r4
 800a2be:	bd70      	pop	{r4, r5, r6, pc}

0800a2c0 <xQueueGenericSendFromISR>:
{
 800a2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2c4:	4689      	mov	r9, r1
 800a2c6:	4690      	mov	r8, r2
 800a2c8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	b950      	cbnz	r0, 800a2e4 <xQueueGenericSendFromISR+0x24>
 800a2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d2:	b672      	cpsid	i
 800a2d4:	f383 8811 	msr	BASEPRI, r3
 800a2d8:	f3bf 8f6f 	isb	sy
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	b662      	cpsie	i
 800a2e2:	e7fe      	b.n	800a2e2 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2e4:	b961      	cbnz	r1, 800a300 <xQueueGenericSendFromISR+0x40>
 800a2e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a2e8:	b153      	cbz	r3, 800a300 <xQueueGenericSendFromISR+0x40>
 800a2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ee:	b672      	cpsid	i
 800a2f0:	f383 8811 	msr	BASEPRI, r3
 800a2f4:	f3bf 8f6f 	isb	sy
 800a2f8:	f3bf 8f4f 	dsb	sy
 800a2fc:	b662      	cpsie	i
 800a2fe:	e7fe      	b.n	800a2fe <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a300:	2f02      	cmp	r7, #2
 800a302:	d10d      	bne.n	800a320 <xQueueGenericSendFromISR+0x60>
 800a304:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a306:	2b01      	cmp	r3, #1
 800a308:	d00a      	beq.n	800a320 <xQueueGenericSendFromISR+0x60>
 800a30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30e:	b672      	cpsid	i
 800a310:	f383 8811 	msr	BASEPRI, r3
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	f3bf 8f4f 	dsb	sy
 800a31c:	b662      	cpsie	i
 800a31e:	e7fe      	b.n	800a31e <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a320:	f7ff fcf0 	bl	8009d04 <vPortValidateInterruptPriority>
	__asm volatile
 800a324:	f3ef 8611 	mrs	r6, BASEPRI
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	b672      	cpsid	i
 800a32e:	f383 8811 	msr	BASEPRI, r3
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	f3bf 8f4f 	dsb	sy
 800a33a:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a33c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a33e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a340:	429a      	cmp	r2, r3
 800a342:	d301      	bcc.n	800a348 <xQueueGenericSendFromISR+0x88>
 800a344:	2f02      	cmp	r7, #2
 800a346:	d122      	bne.n	800a38e <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 800a348:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a34c:	463a      	mov	r2, r7
 800a34e:	4649      	mov	r1, r9
 800a350:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800a352:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a354:	f7ff fd13 	bl	8009d7e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800a358:	1c6b      	adds	r3, r5, #1
 800a35a:	d113      	bne.n	800a384 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a35c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a35e:	b90b      	cbnz	r3, 800a364 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 800a360:	2001      	movs	r0, #1
 800a362:	e00b      	b.n	800a37c <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a364:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a368:	f000 febe 	bl	800b0e8 <xTaskRemoveFromEventList>
 800a36c:	2800      	cmp	r0, #0
 800a36e:	d0f7      	beq.n	800a360 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 800a370:	f1b8 0f00 	cmp.w	r8, #0
 800a374:	d0f4      	beq.n	800a360 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a376:	2001      	movs	r0, #1
 800a378:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800a37c:	f386 8811 	msr	BASEPRI, r6
}
 800a380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a384:	3501      	adds	r5, #1
 800a386:	b26d      	sxtb	r5, r5
 800a388:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800a38c:	e7e8      	b.n	800a360 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 800a38e:	2000      	movs	r0, #0
 800a390:	e7f4      	b.n	800a37c <xQueueGenericSendFromISR+0xbc>

0800a392 <xQueueGiveFromISR>:
{
 800a392:	b570      	push	{r4, r5, r6, lr}
 800a394:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800a396:	4604      	mov	r4, r0
 800a398:	b950      	cbnz	r0, 800a3b0 <xQueueGiveFromISR+0x1e>
	__asm volatile
 800a39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39e:	b672      	cpsid	i
 800a3a0:	f383 8811 	msr	BASEPRI, r3
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	b662      	cpsie	i
 800a3ae:	e7fe      	b.n	800a3ae <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 800a3b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a3b2:	b153      	cbz	r3, 800a3ca <xQueueGiveFromISR+0x38>
 800a3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b8:	b672      	cpsid	i
 800a3ba:	f383 8811 	msr	BASEPRI, r3
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	f3bf 8f4f 	dsb	sy
 800a3c6:	b662      	cpsie	i
 800a3c8:	e7fe      	b.n	800a3c8 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a3ca:	6803      	ldr	r3, [r0, #0]
 800a3cc:	b963      	cbnz	r3, 800a3e8 <xQueueGiveFromISR+0x56>
 800a3ce:	6883      	ldr	r3, [r0, #8]
 800a3d0:	b153      	cbz	r3, 800a3e8 <xQueueGiveFromISR+0x56>
 800a3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d6:	b672      	cpsid	i
 800a3d8:	f383 8811 	msr	BASEPRI, r3
 800a3dc:	f3bf 8f6f 	isb	sy
 800a3e0:	f3bf 8f4f 	dsb	sy
 800a3e4:	b662      	cpsie	i
 800a3e6:	e7fe      	b.n	800a3e6 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3e8:	f7ff fc8c 	bl	8009d04 <vPortValidateInterruptPriority>
	__asm volatile
 800a3ec:	f3ef 8611 	mrs	r6, BASEPRI
 800a3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f4:	b672      	cpsid	i
 800a3f6:	f383 8811 	msr	BASEPRI, r3
 800a3fa:	f3bf 8f6f 	isb	sy
 800a3fe:	f3bf 8f4f 	dsb	sy
 800a402:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a404:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a406:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a408:	4293      	cmp	r3, r2
 800a40a:	d91c      	bls.n	800a446 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800a40c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a410:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800a412:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800a414:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a416:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800a418:	d110      	bne.n	800a43c <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a41a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a41c:	b90b      	cbnz	r3, 800a422 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800a41e:	2001      	movs	r0, #1
 800a420:	e009      	b.n	800a436 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a422:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a426:	f000 fe5f 	bl	800b0e8 <xTaskRemoveFromEventList>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d0f7      	beq.n	800a41e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800a42e:	2d00      	cmp	r5, #0
 800a430:	d0f5      	beq.n	800a41e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a432:	2001      	movs	r0, #1
 800a434:	6028      	str	r0, [r5, #0]
	__asm volatile
 800a436:	f386 8811 	msr	BASEPRI, r6
}
 800a43a:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a43c:	3301      	adds	r3, #1
 800a43e:	b25b      	sxtb	r3, r3
 800a440:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a444:	e7eb      	b.n	800a41e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800a446:	2000      	movs	r0, #0
 800a448:	e7f5      	b.n	800a436 <xQueueGiveFromISR+0xa4>

0800a44a <xQueueReceive>:
{
 800a44a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800a44e:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800a450:	4604      	mov	r4, r0
{
 800a452:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a454:	b950      	cbnz	r0, 800a46c <xQueueReceive+0x22>
	__asm volatile
 800a456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45a:	b672      	cpsid	i
 800a45c:	f383 8811 	msr	BASEPRI, r3
 800a460:	f3bf 8f6f 	isb	sy
 800a464:	f3bf 8f4f 	dsb	sy
 800a468:	b662      	cpsie	i
 800a46a:	e7fe      	b.n	800a46a <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a46c:	b961      	cbnz	r1, 800a488 <xQueueReceive+0x3e>
 800a46e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a470:	b153      	cbz	r3, 800a488 <xQueueReceive+0x3e>
 800a472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a476:	b672      	cpsid	i
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	b662      	cpsie	i
 800a486:	e7fe      	b.n	800a486 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a488:	f000 fecc 	bl	800b224 <xTaskGetSchedulerState>
 800a48c:	4606      	mov	r6, r0
 800a48e:	b960      	cbnz	r0, 800a4aa <xQueueReceive+0x60>
 800a490:	9b01      	ldr	r3, [sp, #4]
 800a492:	b15b      	cbz	r3, 800a4ac <xQueueReceive+0x62>
 800a494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a498:	b672      	cpsid	i
 800a49a:	f383 8811 	msr	BASEPRI, r3
 800a49e:	f3bf 8f6f 	isb	sy
 800a4a2:	f3bf 8f4f 	dsb	sy
 800a4a6:	b662      	cpsie	i
 800a4a8:	e7fe      	b.n	800a4a8 <xQueueReceive+0x5e>
 800a4aa:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800a4ac:	f04f 0800 	mov.w	r8, #0
 800a4b0:	e03d      	b.n	800a52e <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4b2:	9d01      	ldr	r5, [sp, #4]
 800a4b4:	b91d      	cbnz	r5, 800a4be <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 800a4b6:	f7ff fb49 	bl	8009b4c <vPortExitCritical>
				return errQUEUE_EMPTY;
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	e056      	b.n	800a56c <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 800a4be:	b916      	cbnz	r6, 800a4c6 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4c0:	a802      	add	r0, sp, #8
 800a4c2:	f000 fe57 	bl	800b174 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800a4c6:	f7ff fb41 	bl	8009b4c <vPortExitCritical>
		vTaskSuspendAll();
 800a4ca:	f000 fbdb 	bl	800ac84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4ce:	f7ff fb19 	bl	8009b04 <vPortEnterCritical>
 800a4d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a4d6:	2bff      	cmp	r3, #255	; 0xff
 800a4d8:	d101      	bne.n	800a4de <xQueueReceive+0x94>
 800a4da:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800a4de:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a4e2:	2bff      	cmp	r3, #255	; 0xff
 800a4e4:	d101      	bne.n	800a4ea <xQueueReceive+0xa0>
 800a4e6:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800a4ea:	f7ff fb2f 	bl	8009b4c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4ee:	a901      	add	r1, sp, #4
 800a4f0:	a802      	add	r0, sp, #8
 800a4f2:	f000 fe4b 	bl	800b18c <xTaskCheckForTimeOut>
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	d141      	bne.n	800a57e <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	f7ff fc34 	bl	8009d68 <prvIsQueueEmpty>
 800a500:	b3b8      	cbz	r0, 800a572 <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a502:	9901      	ldr	r1, [sp, #4]
 800a504:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a508:	f000 fdb2 	bl	800b070 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a50c:	4620      	mov	r0, r4
 800a50e:	f7ff fc80 	bl	8009e12 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a512:	f000 fc5d 	bl	800add0 <xTaskResumeAll>
 800a516:	b948      	cbnz	r0, 800a52c <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 800a518:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a51c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a520:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a524:	f3bf 8f4f 	dsb	sy
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800a52e:	f7ff fae9 	bl	8009b04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a532:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a534:	2d00      	cmp	r5, #0
 800a536:	d0bc      	beq.n	800a4b2 <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a538:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a53a:	4639      	mov	r1, r7
 800a53c:	4620      	mov	r0, r4
 800a53e:	f7ff fc53 	bl	8009de8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a542:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a544:	6923      	ldr	r3, [r4, #16]
 800a546:	b173      	cbz	r3, 800a566 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a548:	f104 0010 	add.w	r0, r4, #16
 800a54c:	f000 fdcc 	bl	800b0e8 <xTaskRemoveFromEventList>
 800a550:	b148      	cbz	r0, 800a566 <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 800a552:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a55a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800a566:	f7ff faf1 	bl	8009b4c <vPortExitCritical>
				return pdPASS;
 800a56a:	2001      	movs	r0, #1
}
 800a56c:	b004      	add	sp, #16
 800a56e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800a572:	4620      	mov	r0, r4
 800a574:	f7ff fc4d 	bl	8009e12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a578:	f000 fc2a 	bl	800add0 <xTaskResumeAll>
 800a57c:	e7d6      	b.n	800a52c <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 800a57e:	4620      	mov	r0, r4
 800a580:	f7ff fc47 	bl	8009e12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a584:	f000 fc24 	bl	800add0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a588:	4620      	mov	r0, r4
 800a58a:	f7ff fbed 	bl	8009d68 <prvIsQueueEmpty>
 800a58e:	2800      	cmp	r0, #0
 800a590:	d0cc      	beq.n	800a52c <xQueueReceive+0xe2>
 800a592:	e792      	b.n	800a4ba <xQueueReceive+0x70>

0800a594 <xQueueSemaphoreTake>:
{
 800a594:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a596:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800a598:	4604      	mov	r4, r0
{
 800a59a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a59c:	b950      	cbnz	r0, 800a5b4 <xQueueSemaphoreTake+0x20>
 800a59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a2:	b672      	cpsid	i
 800a5a4:	f383 8811 	msr	BASEPRI, r3
 800a5a8:	f3bf 8f6f 	isb	sy
 800a5ac:	f3bf 8f4f 	dsb	sy
 800a5b0:	b662      	cpsie	i
 800a5b2:	e7fe      	b.n	800a5b2 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 800a5b4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800a5b6:	b155      	cbz	r5, 800a5ce <xQueueSemaphoreTake+0x3a>
 800a5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5bc:	b672      	cpsid	i
 800a5be:	f383 8811 	msr	BASEPRI, r3
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	f3bf 8f4f 	dsb	sy
 800a5ca:	b662      	cpsie	i
 800a5cc:	e7fe      	b.n	800a5cc <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5ce:	f000 fe29 	bl	800b224 <xTaskGetSchedulerState>
 800a5d2:	4606      	mov	r6, r0
 800a5d4:	b960      	cbnz	r0, 800a5f0 <xQueueSemaphoreTake+0x5c>
 800a5d6:	9b01      	ldr	r3, [sp, #4]
 800a5d8:	b16b      	cbz	r3, 800a5f6 <xQueueSemaphoreTake+0x62>
 800a5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5de:	b672      	cpsid	i
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	b662      	cpsie	i
 800a5ee:	e7fe      	b.n	800a5ee <xQueueSemaphoreTake+0x5a>
 800a5f0:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800a5f2:	2700      	movs	r7, #0
 800a5f4:	e055      	b.n	800a6a2 <xQueueSemaphoreTake+0x10e>
 800a5f6:	4605      	mov	r5, r0
 800a5f8:	e7fb      	b.n	800a5f2 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5fa:	9b01      	ldr	r3, [sp, #4]
 800a5fc:	b973      	cbnz	r3, 800a61c <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a5fe:	b155      	cbz	r5, 800a616 <xQueueSemaphoreTake+0x82>
 800a600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a604:	b672      	cpsid	i
 800a606:	f383 8811 	msr	BASEPRI, r3
 800a60a:	f3bf 8f6f 	isb	sy
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	b662      	cpsie	i
 800a614:	e7fe      	b.n	800a614 <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 800a616:	f7ff fa99 	bl	8009b4c <vPortExitCritical>
					return errQUEUE_EMPTY;
 800a61a:	e062      	b.n	800a6e2 <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 800a61c:	b916      	cbnz	r6, 800a624 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a61e:	a802      	add	r0, sp, #8
 800a620:	f000 fda8 	bl	800b174 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800a624:	f7ff fa92 	bl	8009b4c <vPortExitCritical>
		vTaskSuspendAll();
 800a628:	f000 fb2c 	bl	800ac84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a62c:	f7ff fa6a 	bl	8009b04 <vPortEnterCritical>
 800a630:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a634:	2bff      	cmp	r3, #255	; 0xff
 800a636:	d101      	bne.n	800a63c <xQueueSemaphoreTake+0xa8>
 800a638:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800a63c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a640:	2bff      	cmp	r3, #255	; 0xff
 800a642:	d101      	bne.n	800a648 <xQueueSemaphoreTake+0xb4>
 800a644:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a648:	f7ff fa80 	bl	8009b4c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a64c:	a901      	add	r1, sp, #4
 800a64e:	a802      	add	r0, sp, #8
 800a650:	f000 fd9c 	bl	800b18c <xTaskCheckForTimeOut>
 800a654:	2800      	cmp	r0, #0
 800a656:	d14d      	bne.n	800a6f4 <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a658:	4620      	mov	r0, r4
 800a65a:	f7ff fb85 	bl	8009d68 <prvIsQueueEmpty>
 800a65e:	2800      	cmp	r0, #0
 800a660:	d042      	beq.n	800a6e8 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a662:	6823      	ldr	r3, [r4, #0]
 800a664:	b93b      	cbnz	r3, 800a676 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 800a666:	f7ff fa4d 	bl	8009b04 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a66a:	68a0      	ldr	r0, [r4, #8]
 800a66c:	f000 fdea 	bl	800b244 <xTaskPriorityInherit>
 800a670:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800a672:	f7ff fa6b 	bl	8009b4c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a676:	9901      	ldr	r1, [sp, #4]
 800a678:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a67c:	f000 fcf8 	bl	800b070 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a680:	4620      	mov	r0, r4
 800a682:	f7ff fbc6 	bl	8009e12 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a686:	f000 fba3 	bl	800add0 <xTaskResumeAll>
 800a68a:	b948      	cbnz	r0, 800a6a0 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 800a68c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a694:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a698:	f3bf 8f4f 	dsb	sy
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800a6a2:	f7ff fa2f 	bl	8009b04 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a6a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d0a6      	beq.n	800a5fa <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6b0:	6823      	ldr	r3, [r4, #0]
 800a6b2:	b913      	cbnz	r3, 800a6ba <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a6b4:	f000 fea4 	bl	800b400 <pvTaskIncrementMutexHeldCount>
 800a6b8:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6ba:	6923      	ldr	r3, [r4, #16]
 800a6bc:	b173      	cbz	r3, 800a6dc <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6be:	f104 0010 	add.w	r0, r4, #16
 800a6c2:	f000 fd11 	bl	800b0e8 <xTaskRemoveFromEventList>
 800a6c6:	b148      	cbz	r0, 800a6dc <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 800a6c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a6cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a6d4:	f3bf 8f4f 	dsb	sy
 800a6d8:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800a6dc:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800a6de:	f7ff fa35 	bl	8009b4c <vPortExitCritical>
}
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	b005      	add	sp, #20
 800a6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f7ff fb92 	bl	8009e12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6ee:	f000 fb6f 	bl	800add0 <xTaskResumeAll>
 800a6f2:	e7d5      	b.n	800a6a0 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	f7ff fb8c 	bl	8009e12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6fa:	f000 fb69 	bl	800add0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6fe:	4620      	mov	r0, r4
 800a700:	f7ff fb32 	bl	8009d68 <prvIsQueueEmpty>
 800a704:	2800      	cmp	r0, #0
 800a706:	d0cb      	beq.n	800a6a0 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 800a708:	2d00      	cmp	r5, #0
 800a70a:	d0ea      	beq.n	800a6e2 <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 800a70c:	f7ff f9fa 	bl	8009b04 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a710:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a712:	b119      	cbz	r1, 800a71c <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a714:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a716:	6819      	ldr	r1, [r3, #0]
 800a718:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a71c:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800a71e:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a720:	f000 fe18 	bl	800b354 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800a724:	f7ff fa12 	bl	8009b4c <vPortExitCritical>
 800a728:	e7db      	b.n	800a6e2 <xQueueSemaphoreTake+0x14e>

0800a72a <xQueueTakeMutexRecursive>:
	{
 800a72a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 800a72c:	4604      	mov	r4, r0
 800a72e:	b950      	cbnz	r0, 800a746 <xQueueTakeMutexRecursive+0x1c>
 800a730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a734:	b672      	cpsid	i
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	b662      	cpsie	i
 800a744:	e7fe      	b.n	800a744 <xQueueTakeMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a746:	6885      	ldr	r5, [r0, #8]
 800a748:	9101      	str	r1, [sp, #4]
 800a74a:	f000 fd65 	bl	800b218 <xTaskGetCurrentTaskHandle>
 800a74e:	4285      	cmp	r5, r0
 800a750:	9901      	ldr	r1, [sp, #4]
 800a752:	d105      	bne.n	800a760 <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a754:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800a756:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a758:	3301      	adds	r3, #1
 800a75a:	60e3      	str	r3, [r4, #12]
	}
 800a75c:	b003      	add	sp, #12
 800a75e:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a760:	4620      	mov	r0, r4
 800a762:	f7ff ff17 	bl	800a594 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800a766:	2800      	cmp	r0, #0
 800a768:	d0f8      	beq.n	800a75c <xQueueTakeMutexRecursive+0x32>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a76a:	68e3      	ldr	r3, [r4, #12]
 800a76c:	3301      	adds	r3, #1
 800a76e:	60e3      	str	r3, [r4, #12]
		return xReturn;
 800a770:	e7f4      	b.n	800a75c <xQueueTakeMutexRecursive+0x32>

0800a772 <xQueueReceiveFromISR>:
{
 800a772:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a776:	4689      	mov	r9, r1
 800a778:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800a77a:	4605      	mov	r5, r0
 800a77c:	b950      	cbnz	r0, 800a794 <xQueueReceiveFromISR+0x22>
 800a77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a782:	b672      	cpsid	i
 800a784:	f383 8811 	msr	BASEPRI, r3
 800a788:	f3bf 8f6f 	isb	sy
 800a78c:	f3bf 8f4f 	dsb	sy
 800a790:	b662      	cpsie	i
 800a792:	e7fe      	b.n	800a792 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a794:	b961      	cbnz	r1, 800a7b0 <xQueueReceiveFromISR+0x3e>
 800a796:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a798:	b153      	cbz	r3, 800a7b0 <xQueueReceiveFromISR+0x3e>
 800a79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79e:	b672      	cpsid	i
 800a7a0:	f383 8811 	msr	BASEPRI, r3
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	b662      	cpsie	i
 800a7ae:	e7fe      	b.n	800a7ae <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7b0:	f7ff faa8 	bl	8009d04 <vPortValidateInterruptPriority>
	__asm volatile
 800a7b4:	f3ef 8711 	mrs	r7, BASEPRI
 800a7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7bc:	b672      	cpsid	i
 800a7be:	f383 8811 	msr	BASEPRI, r3
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7cc:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7ce:	b31c      	cbz	r4, 800a818 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 800a7d0:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a7d4:	4649      	mov	r1, r9
 800a7d6:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a7d8:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800a7da:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a7dc:	f7ff fb04 	bl	8009de8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a7e0:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800a7e2:	1c73      	adds	r3, r6, #1
 800a7e4:	d113      	bne.n	800a80e <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7e6:	692b      	ldr	r3, [r5, #16]
 800a7e8:	b90b      	cbnz	r3, 800a7ee <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 800a7ea:	2001      	movs	r0, #1
 800a7ec:	e00b      	b.n	800a806 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7ee:	f105 0010 	add.w	r0, r5, #16
 800a7f2:	f000 fc79 	bl	800b0e8 <xTaskRemoveFromEventList>
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	d0f7      	beq.n	800a7ea <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 800a7fa:	f1b8 0f00 	cmp.w	r8, #0
 800a7fe:	d0f4      	beq.n	800a7ea <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a800:	2001      	movs	r0, #1
 800a802:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800a806:	f387 8811 	msr	BASEPRI, r7
}
 800a80a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a80e:	3601      	adds	r6, #1
 800a810:	b276      	sxtb	r6, r6
 800a812:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800a816:	e7e8      	b.n	800a7ea <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 800a818:	4620      	mov	r0, r4
 800a81a:	e7f4      	b.n	800a806 <xQueueReceiveFromISR+0x94>

0800a81c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a81c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a81e:	4a07      	ldr	r2, [pc, #28]	; (800a83c <vQueueAddToRegistry+0x20>)
	{
 800a820:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a822:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800a826:	b92c      	cbnz	r4, 800a834 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a828:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a82c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a830:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a832:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a834:	3301      	adds	r3, #1
 800a836:	2b08      	cmp	r3, #8
 800a838:	d1f3      	bne.n	800a822 <vQueueAddToRegistry+0x6>
 800a83a:	e7fa      	b.n	800a832 <vQueueAddToRegistry+0x16>
 800a83c:	20022d64 	.word	0x20022d64

0800a840 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a840:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a842:	4a08      	ldr	r2, [pc, #32]	; (800a864 <vQueueUnregisterQueue+0x24>)
	{
 800a844:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a846:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a84a:	684c      	ldr	r4, [r1, #4]
 800a84c:	4284      	cmp	r4, r0
 800a84e:	d104      	bne.n	800a85a <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a850:	2000      	movs	r0, #0
 800a852:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a856:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a858:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a85a:	3301      	adds	r3, #1
 800a85c:	2b08      	cmp	r3, #8
 800a85e:	d1f2      	bne.n	800a846 <vQueueUnregisterQueue+0x6>
 800a860:	e7fa      	b.n	800a858 <vQueueUnregisterQueue+0x18>
 800a862:	bf00      	nop
 800a864:	20022d64 	.word	0x20022d64

0800a868 <vQueueDelete>:
{
 800a868:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800a86a:	4604      	mov	r4, r0
 800a86c:	b950      	cbnz	r0, 800a884 <vQueueDelete+0x1c>
	__asm volatile
 800a86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a872:	b672      	cpsid	i
 800a874:	f383 8811 	msr	BASEPRI, r3
 800a878:	f3bf 8f6f 	isb	sy
 800a87c:	f3bf 8f4f 	dsb	sy
 800a880:	b662      	cpsie	i
 800a882:	e7fe      	b.n	800a882 <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 800a884:	f7ff ffdc 	bl	800a840 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a888:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a88c:	b923      	cbnz	r3, 800a898 <vQueueDelete+0x30>
			vPortFree( pxQueue );
 800a88e:	4620      	mov	r0, r4
}
 800a890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800a894:	f7ff b84c 	b.w	8009930 <vPortFree>
}
 800a898:	bd10      	pop	{r4, pc}

0800a89a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a89a:	b570      	push	{r4, r5, r6, lr}
 800a89c:	4604      	mov	r4, r0
 800a89e:	460d      	mov	r5, r1
 800a8a0:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a8a2:	f7ff f92f 	bl	8009b04 <vPortEnterCritical>
 800a8a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a8aa:	2bff      	cmp	r3, #255	; 0xff
 800a8ac:	d102      	bne.n	800a8b4 <vQueueWaitForMessageRestricted+0x1a>
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a8b4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a8b8:	2bff      	cmp	r3, #255	; 0xff
 800a8ba:	d102      	bne.n	800a8c2 <vQueueWaitForMessageRestricted+0x28>
 800a8bc:	2300      	movs	r3, #0
 800a8be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a8c2:	f7ff f943 	bl	8009b4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a8c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a8c8:	b92b      	cbnz	r3, 800a8d6 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a8ca:	4632      	mov	r2, r6
 800a8cc:	4629      	mov	r1, r5
 800a8ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a8d2:	f000 fbe9 	bl	800b0a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a8d6:	4620      	mov	r0, r4
	}
 800a8d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800a8dc:	f7ff ba99 	b.w	8009e12 <prvUnlockQueue>

0800a8e0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e4:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a8e6:	f7ff f90d 	bl	8009b04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a8ea:	4b2f      	ldr	r3, [pc, #188]	; (800a9a8 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800a8ec:	4e2f      	ldr	r6, [pc, #188]	; (800a9ac <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	4f2f      	ldr	r7, [pc, #188]	; (800a9b0 <prvAddNewTaskToReadyList+0xd0>)
 800a8f2:	3201      	adds	r2, #1
 800a8f4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800a8f6:	6835      	ldr	r5, [r6, #0]
 800a8f8:	2d00      	cmp	r5, #0
 800a8fa:	d14a      	bne.n	800a992 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a8fc:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2b01      	cmp	r3, #1
 800a902:	d11f      	bne.n	800a944 <prvAddNewTaskToReadyList+0x64>
 800a904:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a906:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a908:	4640      	mov	r0, r8
 800a90a:	f7ff f84d 	bl	80099a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a90e:	f108 0814 	add.w	r8, r8, #20
 800a912:	2d38      	cmp	r5, #56	; 0x38
 800a914:	d1f7      	bne.n	800a906 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a916:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800a9d8 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800a91a:	4d26      	ldr	r5, [pc, #152]	; (800a9b4 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800a91c:	4640      	mov	r0, r8
 800a91e:	f7ff f843 	bl	80099a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a922:	4628      	mov	r0, r5
 800a924:	f7ff f840 	bl	80099a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a928:	4823      	ldr	r0, [pc, #140]	; (800a9b8 <prvAddNewTaskToReadyList+0xd8>)
 800a92a:	f7ff f83d 	bl	80099a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a92e:	4823      	ldr	r0, [pc, #140]	; (800a9bc <prvAddNewTaskToReadyList+0xdc>)
 800a930:	f7ff f83a 	bl	80099a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a934:	4822      	ldr	r0, [pc, #136]	; (800a9c0 <prvAddNewTaskToReadyList+0xe0>)
 800a936:	f7ff f837 	bl	80099a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a93a:	4b22      	ldr	r3, [pc, #136]	; (800a9c4 <prvAddNewTaskToReadyList+0xe4>)
 800a93c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a940:	4b21      	ldr	r3, [pc, #132]	; (800a9c8 <prvAddNewTaskToReadyList+0xe8>)
 800a942:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800a944:	4a21      	ldr	r2, [pc, #132]	; (800a9cc <prvAddNewTaskToReadyList+0xec>)
 800a946:	6813      	ldr	r3, [r2, #0]
 800a948:	3301      	adds	r3, #1
 800a94a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800a94c:	4a20      	ldr	r2, [pc, #128]	; (800a9d0 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a94e:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800a950:	6811      	ldr	r1, [r2, #0]
 800a952:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a954:	428b      	cmp	r3, r1
 800a956:	d900      	bls.n	800a95a <prvAddNewTaskToReadyList+0x7a>
 800a958:	6013      	str	r3, [r2, #0]
 800a95a:	2014      	movs	r0, #20
 800a95c:	1d21      	adds	r1, r4, #4
 800a95e:	fb00 7003 	mla	r0, r0, r3, r7
 800a962:	f7ff f82f 	bl	80099c4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800a966:	f7ff f8f1 	bl	8009b4c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800a96a:	4b1a      	ldr	r3, [pc, #104]	; (800a9d4 <prvAddNewTaskToReadyList+0xf4>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	b173      	cbz	r3, 800a98e <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a970:	6833      	ldr	r3, [r6, #0]
 800a972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a974:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a976:	429a      	cmp	r2, r3
 800a978:	d209      	bcs.n	800a98e <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800a97a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a982:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a986:	f3bf 8f4f 	dsb	sy
 800a98a:	f3bf 8f6f 	isb	sy
}
 800a98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800a992:	4b10      	ldr	r3, [pc, #64]	; (800a9d4 <prvAddNewTaskToReadyList+0xf4>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d1d4      	bne.n	800a944 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a99a:	6833      	ldr	r3, [r6, #0]
 800a99c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a99e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d8cf      	bhi.n	800a944 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800a9a4:	6034      	str	r4, [r6, #0]
 800a9a6:	e7cd      	b.n	800a944 <prvAddNewTaskToReadyList+0x64>
 800a9a8:	20023210 	.word	0x20023210
 800a9ac:	20022da4 	.word	0x20022da4
 800a9b0:	20022db0 	.word	0x20022db0
 800a9b4:	2002323c 	.word	0x2002323c
 800a9b8:	20023258 	.word	0x20023258
 800a9bc:	20023284 	.word	0x20023284
 800a9c0:	20023270 	.word	0x20023270
 800a9c4:	20022da8 	.word	0x20022da8
 800a9c8:	20022dac 	.word	0x20022dac
 800a9cc:	20023220 	.word	0x20023220
 800a9d0:	20023224 	.word	0x20023224
 800a9d4:	2002326c 	.word	0x2002326c
 800a9d8:	20023228 	.word	0x20023228

0800a9dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a9de:	4b15      	ldr	r3, [pc, #84]	; (800aa34 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800a9e0:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9e2:	4e15      	ldr	r6, [pc, #84]	; (800aa38 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800a9e4:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800a9e6:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9e8:	6830      	ldr	r0, [r6, #0]
 800a9ea:	3004      	adds	r0, #4
 800a9ec:	f7ff f80d 	bl	8009a0a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a9f0:	1c63      	adds	r3, r4, #1
 800a9f2:	d107      	bne.n	800aa04 <prvAddCurrentTaskToDelayedList+0x28>
 800a9f4:	b137      	cbz	r7, 800aa04 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9f6:	6831      	ldr	r1, [r6, #0]
 800a9f8:	4810      	ldr	r0, [pc, #64]	; (800aa3c <prvAddCurrentTaskToDelayedList+0x60>)
 800a9fa:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a9fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa00:	f7fe bfe0 	b.w	80099c4 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aa04:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aa06:	6833      	ldr	r3, [r6, #0]
 800aa08:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aa0a:	d307      	bcc.n	800aa1c <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa0c:	4b0c      	ldr	r3, [pc, #48]	; (800aa40 <prvAddCurrentTaskToDelayedList+0x64>)
 800aa0e:	6818      	ldr	r0, [r3, #0]
 800aa10:	6831      	ldr	r1, [r6, #0]
}
 800aa12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa16:	3104      	adds	r1, #4
 800aa18:	f7fe bfe0 	b.w	80099dc <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa1c:	4b09      	ldr	r3, [pc, #36]	; (800aa44 <prvAddCurrentTaskToDelayedList+0x68>)
 800aa1e:	6818      	ldr	r0, [r3, #0]
 800aa20:	6831      	ldr	r1, [r6, #0]
 800aa22:	3104      	adds	r1, #4
 800aa24:	f7fe ffda 	bl	80099dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aa28:	4b07      	ldr	r3, [pc, #28]	; (800aa48 <prvAddCurrentTaskToDelayedList+0x6c>)
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	42a2      	cmp	r2, r4
 800aa2e:	d900      	bls.n	800aa32 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800aa30:	601c      	str	r4, [r3, #0]
}
 800aa32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa34:	20023298 	.word	0x20023298
 800aa38:	20022da4 	.word	0x20022da4
 800aa3c:	20023270 	.word	0x20023270
 800aa40:	20022dac 	.word	0x20022dac
 800aa44:	20022da8 	.word	0x20022da8
 800aa48:	20023250 	.word	0x20023250

0800aa4c <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa4c:	4a06      	ldr	r2, [pc, #24]	; (800aa68 <prvResetNextTaskUnblockTime+0x1c>)
 800aa4e:	6813      	ldr	r3, [r2, #0]
 800aa50:	6819      	ldr	r1, [r3, #0]
 800aa52:	4b06      	ldr	r3, [pc, #24]	; (800aa6c <prvResetNextTaskUnblockTime+0x20>)
 800aa54:	b919      	cbnz	r1, 800aa5e <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa56:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa5a:	601a      	str	r2, [r3, #0]
}
 800aa5c:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa5e:	6812      	ldr	r2, [r2, #0]
 800aa60:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa62:	68d2      	ldr	r2, [r2, #12]
 800aa64:	6852      	ldr	r2, [r2, #4]
 800aa66:	e7f8      	b.n	800aa5a <prvResetNextTaskUnblockTime+0xe>
 800aa68:	20022da8 	.word	0x20022da8
 800aa6c:	20023250 	.word	0x20023250

0800aa70 <prvDeleteTCB>:
	{
 800aa70:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa72:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 800aa76:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa78:	b93b      	cbnz	r3, 800aa8a <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800aa7a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800aa7c:	f7fe ff58 	bl	8009930 <vPortFree>
				vPortFree( pxTCB );
 800aa80:	4620      	mov	r0, r4
	}
 800aa82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800aa86:	f7fe bf53 	b.w	8009930 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d0f9      	beq.n	800aa82 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d00a      	beq.n	800aaa8 <prvDeleteTCB+0x38>
 800aa92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa96:	b672      	cpsid	i
 800aa98:	f383 8811 	msr	BASEPRI, r3
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	f3bf 8f4f 	dsb	sy
 800aaa4:	b662      	cpsie	i
 800aaa6:	e7fe      	b.n	800aaa6 <prvDeleteTCB+0x36>
	}
 800aaa8:	bd10      	pop	{r4, pc}
	...

0800aaac <prvIdleTask>:
{
 800aaac:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aaae:	4c14      	ldr	r4, [pc, #80]	; (800ab00 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aab0:	4f14      	ldr	r7, [pc, #80]	; (800ab04 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800aab2:	4d15      	ldr	r5, [pc, #84]	; (800ab08 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aab4:	6823      	ldr	r3, [r4, #0]
 800aab6:	b983      	cbnz	r3, 800aada <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aab8:	4b14      	ldr	r3, [pc, #80]	; (800ab0c <prvIdleTask+0x60>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d909      	bls.n	800aad4 <prvIdleTask+0x28>
				taskYIELD();
 800aac0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800aac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aac8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800aacc:	f3bf 8f4f 	dsb	sy
 800aad0:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800aad4:	f7f8 f9e6 	bl	8002ea4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800aad8:	e7eb      	b.n	800aab2 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800aada:	f7ff f813 	bl	8009b04 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aae2:	1d30      	adds	r0, r6, #4
 800aae4:	f7fe ff91 	bl	8009a0a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aae8:	682b      	ldr	r3, [r5, #0]
 800aaea:	3b01      	subs	r3, #1
 800aaec:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aaee:	6823      	ldr	r3, [r4, #0]
 800aaf0:	3b01      	subs	r3, #1
 800aaf2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800aaf4:	f7ff f82a 	bl	8009b4c <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800aaf8:	4630      	mov	r0, r6
 800aafa:	f7ff ffb9 	bl	800aa70 <prvDeleteTCB>
 800aafe:	e7d9      	b.n	800aab4 <prvIdleTask+0x8>
 800ab00:	20023214 	.word	0x20023214
 800ab04:	20023284 	.word	0x20023284
 800ab08:	20023210 	.word	0x20023210
 800ab0c:	20022db0 	.word	0x20022db0

0800ab10 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ab10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ab14:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ab18:	4606      	mov	r6, r0
 800ab1a:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ab1c:	21a5      	movs	r1, #165	; 0xa5
 800ab1e:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ab20:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ab22:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ab26:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ab2a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ab2c:	f011 ff9a 	bl	801ca64 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ab30:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ab32:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ab34:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800ab38:	b3b5      	cbz	r5, 800aba8 <prvInitialiseNewTask.constprop.0+0x98>
 800ab3a:	1e6b      	subs	r3, r5, #1
 800ab3c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800ab40:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ab42:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800ab46:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800ab4a:	b108      	cbz	r0, 800ab50 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab4c:	42ab      	cmp	r3, r5
 800ab4e:	d1f8      	bne.n	800ab42 <prvInitialiseNewTask.constprop.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab50:	2300      	movs	r3, #0
 800ab52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab56:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800ab58:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab5c:	1d20      	adds	r0, r4, #4
 800ab5e:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800ab60:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800ab64:	bf28      	it	cs
 800ab66:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800ab68:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800ab6a:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab6c:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab70:	f7fe ff25 	bl	80099be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab74:	f104 0018 	add.w	r0, r4, #24
 800ab78:	f7fe ff21 	bl	80099be <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800ab7c:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab80:	463a      	mov	r2, r7
 800ab82:	4631      	mov	r1, r6
 800ab84:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab86:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab88:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ab8a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800ab8c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab90:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab94:	f7fe ff8c 	bl	8009ab0 <pxPortInitialiseStack>
 800ab98:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800ab9a:	f1b8 0f00 	cmp.w	r8, #0
 800ab9e:	d001      	beq.n	800aba4 <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aba0:	f8c8 4000 	str.w	r4, [r8]
}
 800aba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aba8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800abac:	e7d3      	b.n	800ab56 <prvInitialiseNewTask.constprop.0+0x46>

0800abae <xTaskCreateStatic>:
	{
 800abae:	b570      	push	{r4, r5, r6, lr}
 800abb0:	b086      	sub	sp, #24
 800abb2:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800abb6:	b955      	cbnz	r5, 800abce <xTaskCreateStatic+0x20>
 800abb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbc:	b672      	cpsid	i
 800abbe:	f383 8811 	msr	BASEPRI, r3
 800abc2:	f3bf 8f6f 	isb	sy
 800abc6:	f3bf 8f4f 	dsb	sy
 800abca:	b662      	cpsie	i
 800abcc:	e7fe      	b.n	800abcc <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 800abce:	b954      	cbnz	r4, 800abe6 <xTaskCreateStatic+0x38>
 800abd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd4:	b672      	cpsid	i
 800abd6:	f383 8811 	msr	BASEPRI, r3
 800abda:	f3bf 8f6f 	isb	sy
 800abde:	f3bf 8f4f 	dsb	sy
 800abe2:	b662      	cpsie	i
 800abe4:	e7fe      	b.n	800abe4 <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 800abe6:	2660      	movs	r6, #96	; 0x60
 800abe8:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800abea:	9e05      	ldr	r6, [sp, #20]
 800abec:	2e60      	cmp	r6, #96	; 0x60
 800abee:	d00a      	beq.n	800ac06 <xTaskCreateStatic+0x58>
 800abf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf4:	b672      	cpsid	i
 800abf6:	f383 8811 	msr	BASEPRI, r3
 800abfa:	f3bf 8f6f 	isb	sy
 800abfe:	f3bf 8f4f 	dsb	sy
 800ac02:	b662      	cpsie	i
 800ac04:	e7fe      	b.n	800ac04 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac06:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac08:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ac0a:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac0c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ac10:	ad04      	add	r5, sp, #16
 800ac12:	9402      	str	r4, [sp, #8]
 800ac14:	9501      	str	r5, [sp, #4]
 800ac16:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ac18:	9500      	str	r5, [sp, #0]
 800ac1a:	f7ff ff79 	bl	800ab10 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f7ff fe5e 	bl	800a8e0 <prvAddNewTaskToReadyList>
	}
 800ac24:	9804      	ldr	r0, [sp, #16]
 800ac26:	b006      	add	sp, #24
 800ac28:	bd70      	pop	{r4, r5, r6, pc}

0800ac2a <xTaskCreate>:
	{
 800ac2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac2e:	4607      	mov	r7, r0
 800ac30:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac32:	0090      	lsls	r0, r2, #2
	{
 800ac34:	4688      	mov	r8, r1
 800ac36:	4616      	mov	r6, r2
 800ac38:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac3a:	f7fe fde3 	bl	8009804 <pvPortMalloc>
			if( pxStack != NULL )
 800ac3e:	4605      	mov	r5, r0
 800ac40:	b1e8      	cbz	r0, 800ac7e <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac42:	2060      	movs	r0, #96	; 0x60
 800ac44:	f7fe fdde 	bl	8009804 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800ac48:	4604      	mov	r4, r0
 800ac4a:	b1a8      	cbz	r0, 800ac78 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ac4c:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800ac4e:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ac50:	4632      	mov	r2, r6
 800ac52:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ac54:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ac58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac5a:	9002      	str	r0, [sp, #8]
 800ac5c:	4638      	mov	r0, r7
 800ac5e:	9301      	str	r3, [sp, #4]
 800ac60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	464b      	mov	r3, r9
 800ac66:	f7ff ff53 	bl	800ab10 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	f7ff fe38 	bl	800a8e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac70:	2001      	movs	r0, #1
	}
 800ac72:	b005      	add	sp, #20
 800ac74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800ac78:	4628      	mov	r0, r5
 800ac7a:	f7fe fe59 	bl	8009930 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac7e:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800ac82:	e7f6      	b.n	800ac72 <xTaskCreate+0x48>

0800ac84 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800ac84:	4a02      	ldr	r2, [pc, #8]	; (800ac90 <vTaskSuspendAll+0xc>)
 800ac86:	6813      	ldr	r3, [r2, #0]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	6013      	str	r3, [r2, #0]
}
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	2002321c 	.word	0x2002321c

0800ac94 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800ac94:	4b01      	ldr	r3, [pc, #4]	; (800ac9c <xTaskGetTickCount+0x8>)
 800ac96:	6818      	ldr	r0, [r3, #0]
}
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop
 800ac9c:	20023298 	.word	0x20023298

0800aca0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aca0:	4b40      	ldr	r3, [pc, #256]	; (800ada4 <xTaskIncrementTick+0x104>)
 800aca2:	681b      	ldr	r3, [r3, #0]
{
 800aca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d174      	bne.n	800ad96 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800acac:	4b3e      	ldr	r3, [pc, #248]	; (800ada8 <xTaskIncrementTick+0x108>)
 800acae:	681d      	ldr	r5, [r3, #0]
 800acb0:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800acb2:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800acb4:	b9cd      	cbnz	r5, 800acea <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 800acb6:	4b3d      	ldr	r3, [pc, #244]	; (800adac <xTaskIncrementTick+0x10c>)
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	6812      	ldr	r2, [r2, #0]
 800acbc:	b152      	cbz	r2, 800acd4 <xTaskIncrementTick+0x34>
 800acbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc2:	b672      	cpsid	i
 800acc4:	f383 8811 	msr	BASEPRI, r3
 800acc8:	f3bf 8f6f 	isb	sy
 800accc:	f3bf 8f4f 	dsb	sy
 800acd0:	b662      	cpsie	i
 800acd2:	e7fe      	b.n	800acd2 <xTaskIncrementTick+0x32>
 800acd4:	4a36      	ldr	r2, [pc, #216]	; (800adb0 <xTaskIncrementTick+0x110>)
 800acd6:	6819      	ldr	r1, [r3, #0]
 800acd8:	6810      	ldr	r0, [r2, #0]
 800acda:	6018      	str	r0, [r3, #0]
 800acdc:	6011      	str	r1, [r2, #0]
 800acde:	4a35      	ldr	r2, [pc, #212]	; (800adb4 <xTaskIncrementTick+0x114>)
 800ace0:	6813      	ldr	r3, [r2, #0]
 800ace2:	3301      	adds	r3, #1
 800ace4:	6013      	str	r3, [r2, #0]
 800ace6:	f7ff feb1 	bl	800aa4c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800acea:	4e33      	ldr	r6, [pc, #204]	; (800adb8 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 800acec:	2400      	movs	r4, #0
 800acee:	4f33      	ldr	r7, [pc, #204]	; (800adbc <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800acf0:	6833      	ldr	r3, [r6, #0]
 800acf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800adc8 <xTaskIncrementTick+0x128>
 800acf6:	42ab      	cmp	r3, r5
 800acf8:	d911      	bls.n	800ad1e <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800acfa:	f8d8 3000 	ldr.w	r3, [r8]
 800acfe:	2214      	movs	r2, #20
 800ad00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad02:	4353      	muls	r3, r2
 800ad04:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	bf28      	it	cs
 800ad0a:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 800ad0c:	4b2c      	ldr	r3, [pc, #176]	; (800adc0 <xTaskIncrementTick+0x120>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800ad10:	2b00      	cmp	r3, #0
}
 800ad12:	bf0c      	ite	eq
 800ad14:	4620      	moveq	r0, r4
 800ad16:	2001      	movne	r0, #1
 800ad18:	b003      	add	sp, #12
 800ad1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad1e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800adac <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 800ad22:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800adcc <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad26:	f8d9 3000 	ldr.w	r3, [r9]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	b91b      	cbnz	r3, 800ad36 <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad32:	6033      	str	r3, [r6, #0]
					break;
 800ad34:	e7e1      	b.n	800acfa <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad36:	f8d9 3000 	ldr.w	r3, [r9]
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ad40:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800ad44:	4295      	cmp	r5, r2
 800ad46:	d201      	bcs.n	800ad4c <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 800ad48:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ad4a:	e7d6      	b.n	800acfa <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad4c:	f10b 0104 	add.w	r1, fp, #4
 800ad50:	4608      	mov	r0, r1
 800ad52:	9101      	str	r1, [sp, #4]
 800ad54:	f7fe fe59 	bl	8009a0a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ad58:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800ad5c:	9901      	ldr	r1, [sp, #4]
 800ad5e:	b122      	cbz	r2, 800ad6a <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad60:	f10b 0018 	add.w	r0, fp, #24
 800ad64:	f7fe fe51 	bl	8009a0a <uxListRemove>
 800ad68:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800ad6a:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800ad6e:	f8da 2000 	ldr.w	r2, [sl]
 800ad72:	4290      	cmp	r0, r2
 800ad74:	d901      	bls.n	800ad7a <xTaskIncrementTick+0xda>
 800ad76:	f8ca 0000 	str.w	r0, [sl]
 800ad7a:	2314      	movs	r3, #20
 800ad7c:	fb03 7000 	mla	r0, r3, r0, r7
 800ad80:	f7fe fe20 	bl	80099c4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad84:	f8d8 1000 	ldr.w	r1, [r8]
 800ad88:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800ad8c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	bf28      	it	cs
 800ad92:	2401      	movcs	r4, #1
 800ad94:	e7c7      	b.n	800ad26 <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 800ad96:	4a0b      	ldr	r2, [pc, #44]	; (800adc4 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800ad98:	2400      	movs	r4, #0
		++uxPendedTicks;
 800ad9a:	6813      	ldr	r3, [r2, #0]
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	6013      	str	r3, [r2, #0]
 800ada0:	e7b4      	b.n	800ad0c <xTaskIncrementTick+0x6c>
 800ada2:	bf00      	nop
 800ada4:	2002321c 	.word	0x2002321c
 800ada8:	20023298 	.word	0x20023298
 800adac:	20022da8 	.word	0x20022da8
 800adb0:	20022dac 	.word	0x20022dac
 800adb4:	20023254 	.word	0x20023254
 800adb8:	20023250 	.word	0x20023250
 800adbc:	20022db0 	.word	0x20022db0
 800adc0:	2002329c 	.word	0x2002329c
 800adc4:	20023218 	.word	0x20023218
 800adc8:	20022da4 	.word	0x20022da4
 800adcc:	20023224 	.word	0x20023224

0800add0 <xTaskResumeAll>:
{
 800add0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800add2:	4c32      	ldr	r4, [pc, #200]	; (800ae9c <xTaskResumeAll+0xcc>)
 800add4:	6823      	ldr	r3, [r4, #0]
 800add6:	b953      	cbnz	r3, 800adee <xTaskResumeAll+0x1e>
 800add8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800addc:	b672      	cpsid	i
 800adde:	f383 8811 	msr	BASEPRI, r3
 800ade2:	f3bf 8f6f 	isb	sy
 800ade6:	f3bf 8f4f 	dsb	sy
 800adea:	b662      	cpsie	i
 800adec:	e7fe      	b.n	800adec <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 800adee:	f7fe fe89 	bl	8009b04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800adf2:	6823      	ldr	r3, [r4, #0]
 800adf4:	3b01      	subs	r3, #1
 800adf6:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adf8:	6824      	ldr	r4, [r4, #0]
 800adfa:	b12c      	cbz	r4, 800ae08 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 800adfc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800adfe:	f7fe fea5 	bl	8009b4c <vPortExitCritical>
}
 800ae02:	4620      	mov	r0, r4
 800ae04:	b003      	add	sp, #12
 800ae06:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ae08:	4b25      	ldr	r3, [pc, #148]	; (800aea0 <xTaskResumeAll+0xd0>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d0f5      	beq.n	800adfc <xTaskResumeAll+0x2c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae10:	4d24      	ldr	r5, [pc, #144]	; (800aea4 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 800ae12:	4e25      	ldr	r6, [pc, #148]	; (800aea8 <xTaskResumeAll+0xd8>)
 800ae14:	4f25      	ldr	r7, [pc, #148]	; (800aeac <xTaskResumeAll+0xdc>)
 800ae16:	e01e      	b.n	800ae56 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae18:	68eb      	ldr	r3, [r5, #12]
 800ae1a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae1c:	f104 0018 	add.w	r0, r4, #24
 800ae20:	f7fe fdf3 	bl	8009a0a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae24:	1d21      	adds	r1, r4, #4
 800ae26:	4608      	mov	r0, r1
 800ae28:	9101      	str	r1, [sp, #4]
 800ae2a:	f7fe fdee 	bl	8009a0a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ae2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ae30:	6832      	ldr	r2, [r6, #0]
 800ae32:	9901      	ldr	r1, [sp, #4]
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d900      	bls.n	800ae3a <xTaskResumeAll+0x6a>
 800ae38:	6033      	str	r3, [r6, #0]
 800ae3a:	2014      	movs	r0, #20
 800ae3c:	fb00 7003 	mla	r0, r0, r3, r7
 800ae40:	f7fe fdc0 	bl	80099c4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae44:	4b1a      	ldr	r3, [pc, #104]	; (800aeb0 <xTaskResumeAll+0xe0>)
 800ae46:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d302      	bcc.n	800ae56 <xTaskResumeAll+0x86>
						xYieldPending = pdTRUE;
 800ae50:	4b18      	ldr	r3, [pc, #96]	; (800aeb4 <xTaskResumeAll+0xe4>)
 800ae52:	2201      	movs	r2, #1
 800ae54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae56:	682b      	ldr	r3, [r5, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1dd      	bne.n	800ae18 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800ae5c:	b10c      	cbz	r4, 800ae62 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800ae5e:	f7ff fdf5 	bl	800aa4c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ae62:	4d15      	ldr	r5, [pc, #84]	; (800aeb8 <xTaskResumeAll+0xe8>)
 800ae64:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ae66:	b144      	cbz	r4, 800ae7a <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 800ae68:	4e12      	ldr	r6, [pc, #72]	; (800aeb4 <xTaskResumeAll+0xe4>)
 800ae6a:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800ae6c:	f7ff ff18 	bl	800aca0 <xTaskIncrementTick>
 800ae70:	b100      	cbz	r0, 800ae74 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 800ae72:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ae74:	3c01      	subs	r4, #1
 800ae76:	d1f9      	bne.n	800ae6c <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 800ae78:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800ae7a:	4b0e      	ldr	r3, [pc, #56]	; (800aeb4 <xTaskResumeAll+0xe4>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d0bc      	beq.n	800adfc <xTaskResumeAll+0x2c>
					taskYIELD_IF_USING_PREEMPTION();
 800ae82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ae86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae8a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ae8e:	f3bf 8f4f 	dsb	sy
 800ae92:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800ae96:	2401      	movs	r4, #1
 800ae98:	e7b1      	b.n	800adfe <xTaskResumeAll+0x2e>
 800ae9a:	bf00      	nop
 800ae9c:	2002321c 	.word	0x2002321c
 800aea0:	20023210 	.word	0x20023210
 800aea4:	20023258 	.word	0x20023258
 800aea8:	20023224 	.word	0x20023224
 800aeac:	20022db0 	.word	0x20022db0
 800aeb0:	20022da4 	.word	0x20022da4
 800aeb4:	2002329c 	.word	0x2002329c
 800aeb8:	20023218 	.word	0x20023218

0800aebc <vTaskDelay>:
	{
 800aebc:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aebe:	b950      	cbnz	r0, 800aed6 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800aec0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800aec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aec8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800aecc:	f3bf 8f4f 	dsb	sy
 800aed0:	f3bf 8f6f 	isb	sy
	}
 800aed4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800aed6:	4b0b      	ldr	r3, [pc, #44]	; (800af04 <vTaskDelay+0x48>)
 800aed8:	6819      	ldr	r1, [r3, #0]
 800aeda:	b151      	cbz	r1, 800aef2 <vTaskDelay+0x36>
 800aedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee0:	b672      	cpsid	i
 800aee2:	f383 8811 	msr	BASEPRI, r3
 800aee6:	f3bf 8f6f 	isb	sy
 800aeea:	f3bf 8f4f 	dsb	sy
 800aeee:	b662      	cpsie	i
 800aef0:	e7fe      	b.n	800aef0 <vTaskDelay+0x34>
			vTaskSuspendAll();
 800aef2:	f7ff fec7 	bl	800ac84 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aef6:	f7ff fd71 	bl	800a9dc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800aefa:	f7ff ff69 	bl	800add0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800aefe:	2800      	cmp	r0, #0
 800af00:	d0de      	beq.n	800aec0 <vTaskDelay+0x4>
 800af02:	e7e7      	b.n	800aed4 <vTaskDelay+0x18>
 800af04:	2002321c 	.word	0x2002321c

0800af08 <vTaskSetApplicationTaskTag>:
	{
 800af08:	b538      	push	{r3, r4, r5, lr}
 800af0a:	460d      	mov	r5, r1
		if( xTask == NULL )
 800af0c:	4604      	mov	r4, r0
 800af0e:	b908      	cbnz	r0, 800af14 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800af10:	4b04      	ldr	r3, [pc, #16]	; (800af24 <vTaskSetApplicationTaskTag+0x1c>)
 800af12:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800af14:	f7fe fdf6 	bl	8009b04 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800af18:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800af1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800af1e:	f7fe be15 	b.w	8009b4c <vPortExitCritical>
 800af22:	bf00      	nop
 800af24:	20022da4 	.word	0x20022da4

0800af28 <xTaskCallApplicationTaskHook>:
	{
 800af28:	4603      	mov	r3, r0
 800af2a:	4608      	mov	r0, r1
		if( xTask == NULL )
 800af2c:	b90b      	cbnz	r3, 800af32 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800af2e:	4b03      	ldr	r3, [pc, #12]	; (800af3c <xTaskCallApplicationTaskHook+0x14>)
 800af30:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800af32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af34:	b103      	cbz	r3, 800af38 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800af36:	4718      	bx	r3
	}
 800af38:	4618      	mov	r0, r3
 800af3a:	4770      	bx	lr
 800af3c:	20022da4 	.word	0x20022da4

0800af40 <vTaskStartScheduler>:
{
 800af40:	b510      	push	{r4, lr}
 800af42:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af44:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af46:	aa07      	add	r2, sp, #28
 800af48:	a906      	add	r1, sp, #24
 800af4a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af4c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af50:	f7fe fc1c 	bl	800978c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af54:	9b05      	ldr	r3, [sp, #20]
 800af56:	9a07      	ldr	r2, [sp, #28]
 800af58:	9302      	str	r3, [sp, #8]
 800af5a:	9b06      	ldr	r3, [sp, #24]
 800af5c:	491b      	ldr	r1, [pc, #108]	; (800afcc <vTaskStartScheduler+0x8c>)
 800af5e:	481c      	ldr	r0, [pc, #112]	; (800afd0 <vTaskStartScheduler+0x90>)
 800af60:	e9cd 4300 	strd	r4, r3, [sp]
 800af64:	4623      	mov	r3, r4
 800af66:	f7ff fe22 	bl	800abae <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800af6a:	b360      	cbz	r0, 800afc6 <vTaskStartScheduler+0x86>
			xReturn = xTimerCreateTimerTask();
 800af6c:	f000 faa6 	bl	800b4bc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800af70:	2801      	cmp	r0, #1
 800af72:	d11b      	bne.n	800afac <vTaskStartScheduler+0x6c>
 800af74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af78:	b672      	cpsid	i
 800af7a:	f383 8811 	msr	BASEPRI, r3
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f3bf 8f4f 	dsb	sy
 800af86:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 800af88:	f04f 32ff 	mov.w	r2, #4294967295
 800af8c:	4b11      	ldr	r3, [pc, #68]	; (800afd4 <vTaskStartScheduler+0x94>)
		traceTASK_SWITCHED_IN();
 800af8e:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800af90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800af92:	4b11      	ldr	r3, [pc, #68]	; (800afd8 <vTaskStartScheduler+0x98>)
 800af94:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800af96:	4b11      	ldr	r3, [pc, #68]	; (800afdc <vTaskStartScheduler+0x9c>)
 800af98:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800af9a:	4b11      	ldr	r3, [pc, #68]	; (800afe0 <vTaskStartScheduler+0xa0>)
 800af9c:	6818      	ldr	r0, [r3, #0]
 800af9e:	f7ff ffc3 	bl	800af28 <xTaskCallApplicationTaskHook>
}
 800afa2:	b008      	add	sp, #32
 800afa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800afa8:	f7fe be46 	b.w	8009c38 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800afac:	3001      	adds	r0, #1
 800afae:	d10a      	bne.n	800afc6 <vTaskStartScheduler+0x86>
 800afb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb4:	b672      	cpsid	i
 800afb6:	f383 8811 	msr	BASEPRI, r3
 800afba:	f3bf 8f6f 	isb	sy
 800afbe:	f3bf 8f4f 	dsb	sy
 800afc2:	b662      	cpsie	i
 800afc4:	e7fe      	b.n	800afc4 <vTaskStartScheduler+0x84>
}
 800afc6:	b008      	add	sp, #32
 800afc8:	bd10      	pop	{r4, pc}
 800afca:	bf00      	nop
 800afcc:	08020389 	.word	0x08020389
 800afd0:	0800aaad 	.word	0x0800aaad
 800afd4:	20023250 	.word	0x20023250
 800afd8:	2002326c 	.word	0x2002326c
 800afdc:	20023298 	.word	0x20023298
 800afe0:	20022da4 	.word	0x20022da4

0800afe4 <vTaskSwitchContext>:
{
 800afe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800afe6:	4b1d      	ldr	r3, [pc, #116]	; (800b05c <vTaskSwitchContext+0x78>)
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	4b1d      	ldr	r3, [pc, #116]	; (800b060 <vTaskSwitchContext+0x7c>)
 800afec:	b112      	cbz	r2, 800aff4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800afee:	2201      	movs	r2, #1
 800aff0:	601a      	str	r2, [r3, #0]
}
 800aff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800aff4:	4c1b      	ldr	r4, [pc, #108]	; (800b064 <vTaskSwitchContext+0x80>)
 800aff6:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aff8:	4e1b      	ldr	r6, [pc, #108]	; (800b068 <vTaskSwitchContext+0x84>)
 800affa:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800affc:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800affe:	6820      	ldr	r0, [r4, #0]
 800b000:	f7ff ff92 	bl	800af28 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b004:	6832      	ldr	r2, [r6, #0]
 800b006:	4919      	ldr	r1, [pc, #100]	; (800b06c <vTaskSwitchContext+0x88>)
 800b008:	fb07 f302 	mul.w	r3, r7, r2
 800b00c:	58cd      	ldr	r5, [r1, r3]
 800b00e:	18c8      	adds	r0, r1, r3
 800b010:	b1ad      	cbz	r5, 800b03e <vTaskSwitchContext+0x5a>
 800b012:	6845      	ldr	r5, [r0, #4]
 800b014:	3308      	adds	r3, #8
 800b016:	686d      	ldr	r5, [r5, #4]
 800b018:	440b      	add	r3, r1
 800b01a:	429d      	cmp	r5, r3
 800b01c:	6045      	str	r5, [r0, #4]
 800b01e:	bf04      	itt	eq
 800b020:	686b      	ldreq	r3, [r5, #4]
 800b022:	6043      	streq	r3, [r0, #4]
 800b024:	2314      	movs	r3, #20
 800b026:	fb03 1102 	mla	r1, r3, r2, r1
 800b02a:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800b02c:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b02e:	68db      	ldr	r3, [r3, #12]
 800b030:	6023      	str	r3, [r4, #0]
 800b032:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800b034:	6820      	ldr	r0, [r4, #0]
}
 800b036:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800b03a:	f7ff bf75 	b.w	800af28 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b03e:	b952      	cbnz	r2, 800b056 <vTaskSwitchContext+0x72>
 800b040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b044:	b672      	cpsid	i
 800b046:	f383 8811 	msr	BASEPRI, r3
 800b04a:	f3bf 8f6f 	isb	sy
 800b04e:	f3bf 8f4f 	dsb	sy
 800b052:	b662      	cpsie	i
 800b054:	e7fe      	b.n	800b054 <vTaskSwitchContext+0x70>
 800b056:	3a01      	subs	r2, #1
 800b058:	e7d6      	b.n	800b008 <vTaskSwitchContext+0x24>
 800b05a:	bf00      	nop
 800b05c:	2002321c 	.word	0x2002321c
 800b060:	2002329c 	.word	0x2002329c
 800b064:	20022da4 	.word	0x20022da4
 800b068:	20023224 	.word	0x20023224
 800b06c:	20022db0 	.word	0x20022db0

0800b070 <vTaskPlaceOnEventList>:
{
 800b070:	b510      	push	{r4, lr}
 800b072:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800b074:	b950      	cbnz	r0, 800b08c <vTaskPlaceOnEventList+0x1c>
 800b076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07a:	b672      	cpsid	i
 800b07c:	f383 8811 	msr	BASEPRI, r3
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	f3bf 8f4f 	dsb	sy
 800b088:	b662      	cpsie	i
 800b08a:	e7fe      	b.n	800b08a <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b08c:	4b05      	ldr	r3, [pc, #20]	; (800b0a4 <vTaskPlaceOnEventList+0x34>)
 800b08e:	6819      	ldr	r1, [r3, #0]
 800b090:	3118      	adds	r1, #24
 800b092:	f7fe fca3 	bl	80099dc <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b096:	4620      	mov	r0, r4
 800b098:	2101      	movs	r1, #1
}
 800b09a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b09e:	f7ff bc9d 	b.w	800a9dc <prvAddCurrentTaskToDelayedList>
 800b0a2:	bf00      	nop
 800b0a4:	20022da4 	.word	0x20022da4

0800b0a8 <vTaskPlaceOnEventListRestricted>:
	{
 800b0a8:	b538      	push	{r3, r4, r5, lr}
 800b0aa:	460d      	mov	r5, r1
 800b0ac:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800b0ae:	b950      	cbnz	r0, 800b0c6 <vTaskPlaceOnEventListRestricted+0x1e>
 800b0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b4:	b672      	cpsid	i
 800b0b6:	f383 8811 	msr	BASEPRI, r3
 800b0ba:	f3bf 8f6f 	isb	sy
 800b0be:	f3bf 8f4f 	dsb	sy
 800b0c2:	b662      	cpsie	i
 800b0c4:	e7fe      	b.n	800b0c4 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b0c6:	4b07      	ldr	r3, [pc, #28]	; (800b0e4 <vTaskPlaceOnEventListRestricted+0x3c>)
 800b0c8:	6819      	ldr	r1, [r3, #0]
 800b0ca:	3118      	adds	r1, #24
 800b0cc:	f7fe fc7a 	bl	80099c4 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800b0d0:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b0d2:	4621      	mov	r1, r4
 800b0d4:	bf0c      	ite	eq
 800b0d6:	4628      	moveq	r0, r5
 800b0d8:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800b0dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b0e0:	f7ff bc7c 	b.w	800a9dc <prvAddCurrentTaskToDelayedList>
 800b0e4:	20022da4 	.word	0x20022da4

0800b0e8 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0e8:	68c3      	ldr	r3, [r0, #12]
{
 800b0ea:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0ec:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800b0ee:	b954      	cbnz	r4, 800b106 <xTaskRemoveFromEventList+0x1e>
 800b0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f4:	b672      	cpsid	i
 800b0f6:	f383 8811 	msr	BASEPRI, r3
 800b0fa:	f3bf 8f6f 	isb	sy
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	b662      	cpsie	i
 800b104:	e7fe      	b.n	800b104 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b106:	f104 0118 	add.w	r1, r4, #24
 800b10a:	4608      	mov	r0, r1
 800b10c:	9101      	str	r1, [sp, #4]
 800b10e:	f7fe fc7c 	bl	8009a0a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b112:	4b12      	ldr	r3, [pc, #72]	; (800b15c <xTaskRemoveFromEventList+0x74>)
 800b114:	9901      	ldr	r1, [sp, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	b9e3      	cbnz	r3, 800b154 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b11a:	1d21      	adds	r1, r4, #4
 800b11c:	4608      	mov	r0, r1
 800b11e:	9101      	str	r1, [sp, #4]
 800b120:	f7fe fc73 	bl	8009a0a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b124:	4a0e      	ldr	r2, [pc, #56]	; (800b160 <xTaskRemoveFromEventList+0x78>)
 800b126:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b128:	6810      	ldr	r0, [r2, #0]
 800b12a:	9901      	ldr	r1, [sp, #4]
 800b12c:	4283      	cmp	r3, r0
 800b12e:	d900      	bls.n	800b132 <xTaskRemoveFromEventList+0x4a>
 800b130:	6013      	str	r3, [r2, #0]
 800b132:	4a0c      	ldr	r2, [pc, #48]	; (800b164 <xTaskRemoveFromEventList+0x7c>)
 800b134:	2014      	movs	r0, #20
 800b136:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b13a:	f7fe fc43 	bl	80099c4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b13e:	4b0a      	ldr	r3, [pc, #40]	; (800b168 <xTaskRemoveFromEventList+0x80>)
 800b140:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b146:	429a      	cmp	r2, r3
 800b148:	d906      	bls.n	800b158 <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 800b14a:	2001      	movs	r0, #1
 800b14c:	4b07      	ldr	r3, [pc, #28]	; (800b16c <xTaskRemoveFromEventList+0x84>)
 800b14e:	6018      	str	r0, [r3, #0]
}
 800b150:	b002      	add	sp, #8
 800b152:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b154:	4806      	ldr	r0, [pc, #24]	; (800b170 <xTaskRemoveFromEventList+0x88>)
 800b156:	e7f0      	b.n	800b13a <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 800b158:	2000      	movs	r0, #0
	return xReturn;
 800b15a:	e7f9      	b.n	800b150 <xTaskRemoveFromEventList+0x68>
 800b15c:	2002321c 	.word	0x2002321c
 800b160:	20023224 	.word	0x20023224
 800b164:	20022db0 	.word	0x20022db0
 800b168:	20022da4 	.word	0x20022da4
 800b16c:	2002329c 	.word	0x2002329c
 800b170:	20023258 	.word	0x20023258

0800b174 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b174:	4b03      	ldr	r3, [pc, #12]	; (800b184 <vTaskInternalSetTimeOutState+0x10>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b17a:	4b03      	ldr	r3, [pc, #12]	; (800b188 <vTaskInternalSetTimeOutState+0x14>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	6043      	str	r3, [r0, #4]
}
 800b180:	4770      	bx	lr
 800b182:	bf00      	nop
 800b184:	20023254 	.word	0x20023254
 800b188:	20023298 	.word	0x20023298

0800b18c <xTaskCheckForTimeOut>:
{
 800b18c:	b570      	push	{r4, r5, r6, lr}
 800b18e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800b190:	4605      	mov	r5, r0
 800b192:	b950      	cbnz	r0, 800b1aa <xTaskCheckForTimeOut+0x1e>
 800b194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b198:	b672      	cpsid	i
 800b19a:	f383 8811 	msr	BASEPRI, r3
 800b19e:	f3bf 8f6f 	isb	sy
 800b1a2:	f3bf 8f4f 	dsb	sy
 800b1a6:	b662      	cpsie	i
 800b1a8:	e7fe      	b.n	800b1a8 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800b1aa:	b951      	cbnz	r1, 800b1c2 <xTaskCheckForTimeOut+0x36>
 800b1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b0:	b672      	cpsid	i
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	b662      	cpsie	i
 800b1c0:	e7fe      	b.n	800b1c0 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800b1c2:	f7fe fc9f 	bl	8009b04 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800b1c6:	4b0f      	ldr	r3, [pc, #60]	; (800b204 <xTaskCheckForTimeOut+0x78>)
 800b1c8:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800b1ca:	6823      	ldr	r3, [r4, #0]
 800b1cc:	1c5a      	adds	r2, r3, #1
 800b1ce:	d010      	beq.n	800b1f2 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b1d0:	480d      	ldr	r0, [pc, #52]	; (800b208 <xTaskCheckForTimeOut+0x7c>)
 800b1d2:	682e      	ldr	r6, [r5, #0]
 800b1d4:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b1d6:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b1d8:	4286      	cmp	r6, r0
 800b1da:	d001      	beq.n	800b1e0 <xTaskCheckForTimeOut+0x54>
 800b1dc:	428a      	cmp	r2, r1
 800b1de:	d90f      	bls.n	800b200 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b1e0:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b1e2:	4283      	cmp	r3, r0
 800b1e4:	d90a      	bls.n	800b1fc <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 800b1e6:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b1e8:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800b1ea:	4413      	add	r3, r2
 800b1ec:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b1ee:	f7ff ffc1 	bl	800b174 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800b1f2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800b1f4:	f7fe fcaa 	bl	8009b4c <vPortExitCritical>
}
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800b200:	2401      	movs	r4, #1
 800b202:	e7f7      	b.n	800b1f4 <xTaskCheckForTimeOut+0x68>
 800b204:	20023298 	.word	0x20023298
 800b208:	20023254 	.word	0x20023254

0800b20c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800b20c:	4b01      	ldr	r3, [pc, #4]	; (800b214 <vTaskMissedYield+0x8>)
 800b20e:	2201      	movs	r2, #1
 800b210:	601a      	str	r2, [r3, #0]
}
 800b212:	4770      	bx	lr
 800b214:	2002329c 	.word	0x2002329c

0800b218 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800b218:	4b01      	ldr	r3, [pc, #4]	; (800b220 <xTaskGetCurrentTaskHandle+0x8>)
 800b21a:	6818      	ldr	r0, [r3, #0]
	}
 800b21c:	4770      	bx	lr
 800b21e:	bf00      	nop
 800b220:	20022da4 	.word	0x20022da4

0800b224 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800b224:	4b05      	ldr	r3, [pc, #20]	; (800b23c <xTaskGetSchedulerState+0x18>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	b133      	cbz	r3, 800b238 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b22a:	4b05      	ldr	r3, [pc, #20]	; (800b240 <xTaskGetSchedulerState+0x1c>)
 800b22c:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800b22e:	2b00      	cmp	r3, #0
 800b230:	bf0c      	ite	eq
 800b232:	2002      	moveq	r0, #2
 800b234:	2000      	movne	r0, #0
 800b236:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b238:	2001      	movs	r0, #1
	}
 800b23a:	4770      	bx	lr
 800b23c:	2002326c 	.word	0x2002326c
 800b240:	2002321c 	.word	0x2002321c

0800b244 <xTaskPriorityInherit>:
	{
 800b244:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800b246:	4604      	mov	r4, r0
 800b248:	b340      	cbz	r0, 800b29c <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b24a:	4d1b      	ldr	r5, [pc, #108]	; (800b2b8 <xTaskPriorityInherit+0x74>)
 800b24c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b24e:	682a      	ldr	r2, [r5, #0]
 800b250:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b252:	4293      	cmp	r3, r2
 800b254:	d228      	bcs.n	800b2a8 <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b256:	6982      	ldr	r2, [r0, #24]
 800b258:	2a00      	cmp	r2, #0
 800b25a:	db04      	blt.n	800b266 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b25c:	682a      	ldr	r2, [r5, #0]
 800b25e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b260:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800b264:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b266:	2214      	movs	r2, #20
 800b268:	4e14      	ldr	r6, [pc, #80]	; (800b2bc <xTaskPriorityInherit+0x78>)
 800b26a:	fb02 6303 	mla	r3, r2, r3, r6
 800b26e:	6962      	ldr	r2, [r4, #20]
 800b270:	429a      	cmp	r2, r3
 800b272:	d115      	bne.n	800b2a0 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b274:	1d21      	adds	r1, r4, #4
 800b276:	4608      	mov	r0, r1
 800b278:	9101      	str	r1, [sp, #4]
 800b27a:	f7fe fbc6 	bl	8009a0a <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b27e:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b280:	4a0f      	ldr	r2, [pc, #60]	; (800b2c0 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b284:	6810      	ldr	r0, [r2, #0]
 800b286:	9901      	ldr	r1, [sp, #4]
 800b288:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b28a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b28c:	d900      	bls.n	800b290 <xTaskPriorityInherit+0x4c>
 800b28e:	6013      	str	r3, [r2, #0]
 800b290:	2014      	movs	r0, #20
 800b292:	fb00 6003 	mla	r0, r0, r3, r6
 800b296:	f7fe fb95 	bl	80099c4 <vListInsertEnd>
				xReturn = pdTRUE;
 800b29a:	2001      	movs	r0, #1
	}
 800b29c:	b002      	add	sp, #8
 800b29e:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b2a0:	682b      	ldr	r3, [r5, #0]
 800b2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2a6:	e7f8      	b.n	800b29a <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b2a8:	682b      	ldr	r3, [r5, #0]
 800b2aa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800b2ac:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800b2ae:	42a0      	cmp	r0, r4
 800b2b0:	bf2c      	ite	cs
 800b2b2:	2000      	movcs	r0, #0
 800b2b4:	2001      	movcc	r0, #1
 800b2b6:	e7f1      	b.n	800b29c <xTaskPriorityInherit+0x58>
 800b2b8:	20022da4 	.word	0x20022da4
 800b2bc:	20022db0 	.word	0x20022db0
 800b2c0:	20023224 	.word	0x20023224

0800b2c4 <xTaskPriorityDisinherit>:
	{
 800b2c4:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800b2c6:	b910      	cbnz	r0, 800b2ce <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800b2c8:	2000      	movs	r0, #0
	}
 800b2ca:	b002      	add	sp, #8
 800b2cc:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800b2ce:	4b1e      	ldr	r3, [pc, #120]	; (800b348 <xTaskPriorityDisinherit+0x84>)
 800b2d0:	681c      	ldr	r4, [r3, #0]
 800b2d2:	4284      	cmp	r4, r0
 800b2d4:	d00a      	beq.n	800b2ec <xTaskPriorityDisinherit+0x28>
 800b2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2da:	b672      	cpsid	i
 800b2dc:	f383 8811 	msr	BASEPRI, r3
 800b2e0:	f3bf 8f6f 	isb	sy
 800b2e4:	f3bf 8f4f 	dsb	sy
 800b2e8:	b662      	cpsie	i
 800b2ea:	e7fe      	b.n	800b2ea <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 800b2ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b2ee:	b953      	cbnz	r3, 800b306 <xTaskPriorityDisinherit+0x42>
 800b2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f4:	b672      	cpsid	i
 800b2f6:	f383 8811 	msr	BASEPRI, r3
 800b2fa:	f3bf 8f6f 	isb	sy
 800b2fe:	f3bf 8f4f 	dsb	sy
 800b302:	b662      	cpsie	i
 800b304:	e7fe      	b.n	800b304 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b306:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800b308:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b30a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800b30c:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b30e:	4291      	cmp	r1, r2
 800b310:	d0da      	beq.n	800b2c8 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1d8      	bne.n	800b2c8 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b316:	1d21      	adds	r1, r4, #4
 800b318:	4608      	mov	r0, r1
 800b31a:	9101      	str	r1, [sp, #4]
 800b31c:	f7fe fb75 	bl	8009a0a <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b320:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800b322:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b324:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b328:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b32a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800b32c:	4a07      	ldr	r2, [pc, #28]	; (800b34c <xTaskPriorityDisinherit+0x88>)
 800b32e:	6810      	ldr	r0, [r2, #0]
 800b330:	4283      	cmp	r3, r0
 800b332:	d900      	bls.n	800b336 <xTaskPriorityDisinherit+0x72>
 800b334:	6013      	str	r3, [r2, #0]
 800b336:	4a06      	ldr	r2, [pc, #24]	; (800b350 <xTaskPriorityDisinherit+0x8c>)
 800b338:	2014      	movs	r0, #20
 800b33a:	fb00 2003 	mla	r0, r0, r3, r2
 800b33e:	f7fe fb41 	bl	80099c4 <vListInsertEnd>
					xReturn = pdTRUE;
 800b342:	2001      	movs	r0, #1
		return xReturn;
 800b344:	e7c1      	b.n	800b2ca <xTaskPriorityDisinherit+0x6>
 800b346:	bf00      	nop
 800b348:	20022da4 	.word	0x20022da4
 800b34c:	20023224 	.word	0x20023224
 800b350:	20022db0 	.word	0x20022db0

0800b354 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800b354:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800b356:	4604      	mov	r4, r0
 800b358:	2800      	cmp	r0, #0
 800b35a:	d048      	beq.n	800b3ee <vTaskPriorityDisinheritAfterTimeout+0x9a>
			configASSERT( pxTCB->uxMutexesHeld );
 800b35c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800b35e:	b952      	cbnz	r2, 800b376 <vTaskPriorityDisinheritAfterTimeout+0x22>
 800b360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b364:	b672      	cpsid	i
 800b366:	f383 8811 	msr	BASEPRI, r3
 800b36a:	f3bf 8f6f 	isb	sy
 800b36e:	f3bf 8f4f 	dsb	sy
 800b372:	b662      	cpsie	i
 800b374:	e7fe      	b.n	800b374 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b376:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b378:	4299      	cmp	r1, r3
 800b37a:	bf38      	it	cc
 800b37c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b37e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b380:	428b      	cmp	r3, r1
 800b382:	d034      	beq.n	800b3ee <vTaskPriorityDisinheritAfterTimeout+0x9a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b384:	2a01      	cmp	r2, #1
 800b386:	d132      	bne.n	800b3ee <vTaskPriorityDisinheritAfterTimeout+0x9a>
					configASSERT( pxTCB != pxCurrentTCB );
 800b388:	4a1a      	ldr	r2, [pc, #104]	; (800b3f4 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800b38a:	6812      	ldr	r2, [r2, #0]
 800b38c:	4282      	cmp	r2, r0
 800b38e:	d10a      	bne.n	800b3a6 <vTaskPriorityDisinheritAfterTimeout+0x52>
 800b390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b394:	b672      	cpsid	i
 800b396:	f383 8811 	msr	BASEPRI, r3
 800b39a:	f3bf 8f6f 	isb	sy
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	b662      	cpsie	i
 800b3a4:	e7fe      	b.n	800b3a4 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b3a6:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b3a8:	4d13      	ldr	r5, [pc, #76]	; (800b3f8 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b3aa:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b3ac:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800b3b0:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b3b2:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3b6:	bfa8      	it	ge
 800b3b8:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b3bc:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3be:	bfa8      	it	ge
 800b3c0:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d113      	bne.n	800b3ee <vTaskPriorityDisinheritAfterTimeout+0x9a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3c6:	1d01      	adds	r1, r0, #4
 800b3c8:	4608      	mov	r0, r1
 800b3ca:	9101      	str	r1, [sp, #4]
 800b3cc:	f7fe fb1d 	bl	8009a0a <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800b3d0:	4a0a      	ldr	r2, [pc, #40]	; (800b3fc <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 800b3d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b3d4:	6810      	ldr	r0, [r2, #0]
 800b3d6:	9901      	ldr	r1, [sp, #4]
 800b3d8:	4283      	cmp	r3, r0
 800b3da:	d900      	bls.n	800b3de <vTaskPriorityDisinheritAfterTimeout+0x8a>
 800b3dc:	6013      	str	r3, [r2, #0]
 800b3de:	2014      	movs	r0, #20
 800b3e0:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800b3e4:	b003      	add	sp, #12
 800b3e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800b3ea:	f7fe baeb 	b.w	80099c4 <vListInsertEnd>
	}
 800b3ee:	b003      	add	sp, #12
 800b3f0:	bd30      	pop	{r4, r5, pc}
 800b3f2:	bf00      	nop
 800b3f4:	20022da4 	.word	0x20022da4
 800b3f8:	20022db0 	.word	0x20022db0
 800b3fc:	20023224 	.word	0x20023224

0800b400 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800b400:	4b04      	ldr	r3, [pc, #16]	; (800b414 <pvTaskIncrementMutexHeldCount+0x14>)
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	b11a      	cbz	r2, 800b40e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800b406:	6819      	ldr	r1, [r3, #0]
 800b408:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800b40a:	3201      	adds	r2, #1
 800b40c:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800b40e:	6818      	ldr	r0, [r3, #0]
	}
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	20022da4 	.word	0x20022da4

0800b418 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800b41a:	4c11      	ldr	r4, [pc, #68]	; (800b460 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800b41c:	f7fe fb72 	bl	8009b04 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800b420:	6825      	ldr	r5, [r4, #0]
 800b422:	b9bd      	cbnz	r5, 800b454 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800b424:	4f0f      	ldr	r7, [pc, #60]	; (800b464 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800b426:	4e10      	ldr	r6, [pc, #64]	; (800b468 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800b428:	4638      	mov	r0, r7
 800b42a:	f7fe fabd 	bl	80099a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b42e:	4630      	mov	r0, r6
 800b430:	f7fe faba 	bl	80099a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b434:	4b0d      	ldr	r3, [pc, #52]	; (800b46c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b436:	4a0e      	ldr	r2, [pc, #56]	; (800b470 <prvCheckForValidListAndQueue+0x58>)
 800b438:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800b43a:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b43c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800b43e:	4b0d      	ldr	r3, [pc, #52]	; (800b474 <prvCheckForValidListAndQueue+0x5c>)
 800b440:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b442:	4b0d      	ldr	r3, [pc, #52]	; (800b478 <prvCheckForValidListAndQueue+0x60>)
 800b444:	9500      	str	r5, [sp, #0]
 800b446:	f7fe fda9 	bl	8009f9c <xQueueGenericCreateStatic>
 800b44a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b44c:	b110      	cbz	r0, 800b454 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b44e:	490b      	ldr	r1, [pc, #44]	; (800b47c <prvCheckForValidListAndQueue+0x64>)
 800b450:	f7ff f9e4 	bl	800a81c <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800b454:	b003      	add	sp, #12
 800b456:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800b45a:	f7fe bb77 	b.w	8009b4c <vPortExitCritical>
 800b45e:	bf00      	nop
 800b460:	200233c4 	.word	0x200233c4
 800b464:	20023348 	.word	0x20023348
 800b468:	2002335c 	.word	0x2002335c
 800b46c:	200232a0 	.word	0x200232a0
 800b470:	200232a8 	.word	0x200232a8
 800b474:	200232a4 	.word	0x200232a4
 800b478:	20023374 	.word	0x20023374
 800b47c:	0802038e 	.word	0x0802038e

0800b480 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800b480:	4291      	cmp	r1, r2
{
 800b482:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b484:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b486:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800b488:	d80a      	bhi.n	800b4a0 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b48a:	1ad2      	subs	r2, r2, r3
 800b48c:	6983      	ldr	r3, [r0, #24]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d20d      	bcs.n	800b4ae <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b492:	1d01      	adds	r1, r0, #4
 800b494:	4b07      	ldr	r3, [pc, #28]	; (800b4b4 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b496:	6818      	ldr	r0, [r3, #0]
 800b498:	f7fe faa0 	bl	80099dc <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800b49c:	2000      	movs	r0, #0
}
 800b49e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d201      	bcs.n	800b4a8 <prvInsertTimerInActiveList+0x28>
 800b4a4:	4299      	cmp	r1, r3
 800b4a6:	d202      	bcs.n	800b4ae <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b4a8:	1d01      	adds	r1, r0, #4
 800b4aa:	4b03      	ldr	r3, [pc, #12]	; (800b4b8 <prvInsertTimerInActiveList+0x38>)
 800b4ac:	e7f3      	b.n	800b496 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800b4ae:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800b4b0:	e7f5      	b.n	800b49e <prvInsertTimerInActiveList+0x1e>
 800b4b2:	bf00      	nop
 800b4b4:	200232a4 	.word	0x200232a4
 800b4b8:	200232a0 	.word	0x200232a0

0800b4bc <xTimerCreateTimerTask>:
{
 800b4bc:	b510      	push	{r4, lr}
 800b4be:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800b4c0:	f7ff ffaa 	bl	800b418 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800b4c4:	4b13      	ldr	r3, [pc, #76]	; (800b514 <xTimerCreateTimerTask+0x58>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	b1b3      	cbz	r3, 800b4f8 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b4ca:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b4cc:	aa07      	add	r2, sp, #28
 800b4ce:	a906      	add	r1, sp, #24
 800b4d0:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b4d2:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b4d6:	f7fe f965 	bl	80097a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b4da:	9b05      	ldr	r3, [sp, #20]
 800b4dc:	9a07      	ldr	r2, [sp, #28]
 800b4de:	9302      	str	r3, [sp, #8]
 800b4e0:	9b06      	ldr	r3, [sp, #24]
 800b4e2:	490d      	ldr	r1, [pc, #52]	; (800b518 <xTimerCreateTimerTask+0x5c>)
 800b4e4:	9301      	str	r3, [sp, #4]
 800b4e6:	2302      	movs	r3, #2
 800b4e8:	480c      	ldr	r0, [pc, #48]	; (800b51c <xTimerCreateTimerTask+0x60>)
 800b4ea:	9300      	str	r3, [sp, #0]
 800b4ec:	4623      	mov	r3, r4
 800b4ee:	f7ff fb5e 	bl	800abae <xTaskCreateStatic>
 800b4f2:	4b0b      	ldr	r3, [pc, #44]	; (800b520 <xTimerCreateTimerTask+0x64>)
 800b4f4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800b4f6:	b950      	cbnz	r0, 800b50e <xTimerCreateTimerTask+0x52>
 800b4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fc:	b672      	cpsid	i
 800b4fe:	f383 8811 	msr	BASEPRI, r3
 800b502:	f3bf 8f6f 	isb	sy
 800b506:	f3bf 8f4f 	dsb	sy
 800b50a:	b662      	cpsie	i
	configASSERT( xReturn );
 800b50c:	e7fe      	b.n	800b50c <xTimerCreateTimerTask+0x50>
}
 800b50e:	2001      	movs	r0, #1
 800b510:	b008      	add	sp, #32
 800b512:	bd10      	pop	{r4, pc}
 800b514:	200233c4 	.word	0x200233c4
 800b518:	08020393 	.word	0x08020393
 800b51c:	0800b62d 	.word	0x0800b62d
 800b520:	200233c8 	.word	0x200233c8

0800b524 <xTimerGenericCommand>:
{
 800b524:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b526:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800b528:	4604      	mov	r4, r0
{
 800b52a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800b52c:	b950      	cbnz	r0, 800b544 <xTimerGenericCommand+0x20>
 800b52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b532:	b672      	cpsid	i
 800b534:	f383 8811 	msr	BASEPRI, r3
 800b538:	f3bf 8f6f 	isb	sy
 800b53c:	f3bf 8f4f 	dsb	sy
 800b540:	b662      	cpsie	i
 800b542:	e7fe      	b.n	800b542 <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 800b544:	4d0c      	ldr	r5, [pc, #48]	; (800b578 <xTimerGenericCommand+0x54>)
 800b546:	6828      	ldr	r0, [r5, #0]
 800b548:	b178      	cbz	r0, 800b56a <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b54a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b54c:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b54e:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b552:	dc0c      	bgt.n	800b56e <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b554:	f7ff fe66 	bl	800b224 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b558:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b55a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b55c:	4669      	mov	r1, sp
 800b55e:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b560:	bf0c      	ite	eq
 800b562:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b564:	461a      	movne	r2, r3
 800b566:	f7fe fd9e 	bl	800a0a6 <xQueueGenericSend>
}
 800b56a:	b004      	add	sp, #16
 800b56c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b56e:	2300      	movs	r3, #0
 800b570:	4669      	mov	r1, sp
 800b572:	f7fe fea5 	bl	800a2c0 <xQueueGenericSendFromISR>
 800b576:	e7f8      	b.n	800b56a <xTimerGenericCommand+0x46>
 800b578:	200233c4 	.word	0x200233c4

0800b57c <prvSampleTimeNow>:
{
 800b57c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800b580:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800b628 <prvSampleTimeNow+0xac>
{
 800b584:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800b586:	f7ff fb85 	bl	800ac94 <xTaskGetTickCount>
 800b58a:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800b58c:	f8d8 3000 	ldr.w	r3, [r8]
 800b590:	4283      	cmp	r3, r0
 800b592:	d942      	bls.n	800b61a <prvSampleTimeNow+0x9e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b594:	4f22      	ldr	r7, [pc, #136]	; (800b620 <prvSampleTimeNow+0xa4>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b596:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	b95a      	cbnz	r2, 800b5b8 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800b5a0:	4a20      	ldr	r2, [pc, #128]	; (800b624 <prvSampleTimeNow+0xa8>)
 800b5a2:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b5a4:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800b5a6:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800b5a8:	6039      	str	r1, [r7, #0]
}
 800b5aa:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 800b5ac:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800b5ae:	f8c8 5000 	str.w	r5, [r8]
}
 800b5b2:	b004      	add	sp, #16
 800b5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b5b8:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5ba:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b5bc:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5c0:	1d21      	adds	r1, r4, #4
 800b5c2:	4608      	mov	r0, r1
 800b5c4:	9103      	str	r1, [sp, #12]
 800b5c6:	f7fe fa20 	bl	8009a0a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5ca:	6a23      	ldr	r3, [r4, #32]
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b5d0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b5d4:	9903      	ldr	r1, [sp, #12]
 800b5d6:	f013 0f04 	tst.w	r3, #4
 800b5da:	d0de      	beq.n	800b59a <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b5dc:	69a3      	ldr	r3, [r4, #24]
 800b5de:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800b5e0:	459a      	cmp	sl, r3
 800b5e2:	d205      	bcs.n	800b5f0 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b5e4:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b5e6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b5e8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b5ea:	f7fe f9f7 	bl	80099dc <vListInsert>
 800b5ee:	e7d4      	b.n	800b59a <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	4652      	mov	r2, sl
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	f8cd 9000 	str.w	r9, [sp]
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	f7ff ff92 	bl	800b524 <xTimerGenericCommand>
				configASSERT( xResult );
 800b600:	2800      	cmp	r0, #0
 800b602:	d1ca      	bne.n	800b59a <prvSampleTimeNow+0x1e>
 800b604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b608:	b672      	cpsid	i
 800b60a:	f383 8811 	msr	BASEPRI, r3
 800b60e:	f3bf 8f6f 	isb	sy
 800b612:	f3bf 8f4f 	dsb	sy
 800b616:	b662      	cpsie	i
 800b618:	e7fe      	b.n	800b618 <prvSampleTimeNow+0x9c>
		*pxTimerListsWereSwitched = pdFALSE;
 800b61a:	2300      	movs	r3, #0
 800b61c:	e7c5      	b.n	800b5aa <prvSampleTimeNow+0x2e>
 800b61e:	bf00      	nop
 800b620:	200232a0 	.word	0x200232a0
 800b624:	200232a4 	.word	0x200232a4
 800b628:	20023370 	.word	0x20023370

0800b62c <prvTimerTask>:
{
 800b62c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b630:	4d71      	ldr	r5, [pc, #452]	; (800b7f8 <prvTimerTask+0x1cc>)
{
 800b632:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b634:	4e71      	ldr	r6, [pc, #452]	; (800b7fc <prvTimerTask+0x1d0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b636:	682b      	ldr	r3, [r5, #0]
 800b638:	f8d3 8000 	ldr.w	r8, [r3]
 800b63c:	f1b8 0f00 	cmp.w	r8, #0
 800b640:	d037      	beq.n	800b6b2 <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b642:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b644:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b646:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800b64a:	f7ff fb1b 	bl	800ac84 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b64e:	a804      	add	r0, sp, #16
 800b650:	f7ff ff94 	bl	800b57c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800b654:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b656:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d16b      	bne.n	800b734 <prvTimerTask+0x108>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b65c:	2c00      	cmp	r4, #0
 800b65e:	d14e      	bne.n	800b6fe <prvTimerTask+0xd2>
 800b660:	4540      	cmp	r0, r8
 800b662:	d352      	bcc.n	800b70a <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 800b664:	f7ff fbb4 	bl	800add0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b668:	682b      	ldr	r3, [r5, #0]
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b66e:	1d38      	adds	r0, r7, #4
 800b670:	f7fe f9cb 	bl	8009a0a <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b674:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b678:	0758      	lsls	r0, r3, #29
 800b67a:	d51c      	bpl.n	800b6b6 <prvTimerTask+0x8a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b67c:	69b9      	ldr	r1, [r7, #24]
 800b67e:	4643      	mov	r3, r8
 800b680:	464a      	mov	r2, r9
 800b682:	4638      	mov	r0, r7
 800b684:	4441      	add	r1, r8
 800b686:	f7ff fefb 	bl	800b480 <prvInsertTimerInActiveList>
 800b68a:	b1c0      	cbz	r0, 800b6be <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b68c:	4623      	mov	r3, r4
 800b68e:	4642      	mov	r2, r8
 800b690:	4621      	mov	r1, r4
 800b692:	4638      	mov	r0, r7
 800b694:	9400      	str	r4, [sp, #0]
 800b696:	f7ff ff45 	bl	800b524 <xTimerGenericCommand>
			configASSERT( xResult );
 800b69a:	b980      	cbnz	r0, 800b6be <prvTimerTask+0x92>
 800b69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a0:	b672      	cpsid	i
 800b6a2:	f383 8811 	msr	BASEPRI, r3
 800b6a6:	f3bf 8f6f 	isb	sy
 800b6aa:	f3bf 8f4f 	dsb	sy
 800b6ae:	b662      	cpsie	i
 800b6b0:	e7fe      	b.n	800b6b0 <prvTimerTask+0x84>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b6b2:	2401      	movs	r4, #1
 800b6b4:	e7c9      	b.n	800b64a <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6b6:	f023 0301 	bic.w	r3, r3, #1
 800b6ba:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6be:	6a3b      	ldr	r3, [r7, #32]
 800b6c0:	4638      	mov	r0, r7
 800b6c2:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	a904      	add	r1, sp, #16
 800b6c8:	6830      	ldr	r0, [r6, #0]
 800b6ca:	f7fe febe 	bl	800a44a <xQueueReceive>
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	d0b1      	beq.n	800b636 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b6d2:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b6d4:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	db2f      	blt.n	800b73a <prvTimerTask+0x10e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b6da:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b6dc:	6963      	ldr	r3, [r4, #20]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d132      	bne.n	800b748 <prvTimerTask+0x11c>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b6e2:	a803      	add	r0, sp, #12
 800b6e4:	f7ff ff4a 	bl	800b57c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800b6e8:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b6ea:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800b6ec:	2b09      	cmp	r3, #9
 800b6ee:	d8e9      	bhi.n	800b6c4 <prvTimerTask+0x98>
 800b6f0:	e8df f003 	tbb	[pc, r3]
 800b6f4:	592e2e2e 	.word	0x592e2e2e
 800b6f8:	2e2e7a60 	.word	0x2e2e7a60
 800b6fc:	6059      	.short	0x6059
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b6fe:	4b40      	ldr	r3, [pc, #256]	; (800b800 <prvTimerTask+0x1d4>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	681c      	ldr	r4, [r3, #0]
 800b704:	fab4 f484 	clz	r4, r4
 800b708:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b70a:	4622      	mov	r2, r4
 800b70c:	eba8 0109 	sub.w	r1, r8, r9
 800b710:	6830      	ldr	r0, [r6, #0]
 800b712:	f7ff f8c2 	bl	800a89a <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b716:	f7ff fb5b 	bl	800add0 <xTaskResumeAll>
 800b71a:	2800      	cmp	r0, #0
 800b71c:	d1d2      	bne.n	800b6c4 <prvTimerTask+0x98>
					portYIELD_WITHIN_API();
 800b71e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b726:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	f3bf 8f6f 	isb	sy
 800b732:	e7c7      	b.n	800b6c4 <prvTimerTask+0x98>
			( void ) xTaskResumeAll();
 800b734:	f7ff fb4c 	bl	800add0 <xTaskResumeAll>
}
 800b738:	e7c4      	b.n	800b6c4 <prvTimerTask+0x98>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b73a:	9b05      	ldr	r3, [sp, #20]
 800b73c:	9907      	ldr	r1, [sp, #28]
 800b73e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b740:	9b04      	ldr	r3, [sp, #16]
 800b742:	2b00      	cmp	r3, #0
 800b744:	dbbe      	blt.n	800b6c4 <prvTimerTask+0x98>
 800b746:	e7c8      	b.n	800b6da <prvTimerTask+0xae>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b748:	1d20      	adds	r0, r4, #4
 800b74a:	f7fe f95e 	bl	8009a0a <uxListRemove>
 800b74e:	e7c8      	b.n	800b6e2 <prvTimerTask+0xb6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b750:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b754:	4620      	mov	r0, r4
 800b756:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b758:	f043 0301 	orr.w	r3, r3, #1
 800b75c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b760:	9b05      	ldr	r3, [sp, #20]
 800b762:	4419      	add	r1, r3
 800b764:	f7ff fe8c 	bl	800b480 <prvInsertTimerInActiveList>
 800b768:	2800      	cmp	r0, #0
 800b76a:	d0ab      	beq.n	800b6c4 <prvTimerTask+0x98>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b76c:	6a23      	ldr	r3, [r4, #32]
 800b76e:	4620      	mov	r0, r4
 800b770:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b772:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b776:	0759      	lsls	r1, r3, #29
 800b778:	d5a4      	bpl.n	800b6c4 <prvTimerTask+0x98>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b77a:	69a2      	ldr	r2, [r4, #24]
 800b77c:	2300      	movs	r3, #0
 800b77e:	9905      	ldr	r1, [sp, #20]
 800b780:	4620      	mov	r0, r4
 800b782:	9300      	str	r3, [sp, #0]
 800b784:	440a      	add	r2, r1
 800b786:	4619      	mov	r1, r3
 800b788:	f7ff fecc 	bl	800b524 <xTimerGenericCommand>
							configASSERT( xResult );
 800b78c:	2800      	cmp	r0, #0
 800b78e:	d199      	bne.n	800b6c4 <prvTimerTask+0x98>
 800b790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b794:	b672      	cpsid	i
 800b796:	f383 8811 	msr	BASEPRI, r3
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	b662      	cpsie	i
 800b7a4:	e7fe      	b.n	800b7a4 <prvTimerTask+0x178>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b7a6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b7aa:	f023 0301 	bic.w	r3, r3, #1
 800b7ae:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800b7b2:	e787      	b.n	800b6c4 <prvTimerTask+0x98>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7b4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b7b8:	f043 0301 	orr.w	r3, r3, #1
 800b7bc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b7c0:	9905      	ldr	r1, [sp, #20]
 800b7c2:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b7c4:	b951      	cbnz	r1, 800b7dc <prvTimerTask+0x1b0>
 800b7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ca:	b672      	cpsid	i
 800b7cc:	f383 8811 	msr	BASEPRI, r3
 800b7d0:	f3bf 8f6f 	isb	sy
 800b7d4:	f3bf 8f4f 	dsb	sy
 800b7d8:	b662      	cpsie	i
 800b7da:	e7fe      	b.n	800b7da <prvTimerTask+0x1ae>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b7dc:	4603      	mov	r3, r0
 800b7de:	4401      	add	r1, r0
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	f7ff fe4d 	bl	800b480 <prvInsertTimerInActiveList>
					break;
 800b7e6:	e76d      	b.n	800b6c4 <prvTimerTask+0x98>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b7e8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b7ec:	079a      	lsls	r2, r3, #30
 800b7ee:	d4dc      	bmi.n	800b7aa <prvTimerTask+0x17e>
							vPortFree( pxTimer );
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f7fe f89d 	bl	8009930 <vPortFree>
 800b7f6:	e765      	b.n	800b6c4 <prvTimerTask+0x98>
 800b7f8:	200232a0 	.word	0x200232a0
 800b7fc:	200233c4 	.word	0x200233c4
 800b800:	200232a4 	.word	0x200232a4

0800b804 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800b804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b808:	b093      	sub	sp, #76	; 0x4c
 800b80a:	9209      	str	r2, [sp, #36]	; 0x24
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800b80c:	f44f 72c0 	mov.w	r2, #384	; 0x180
  currentMCU = BlockIndex;
 800b810:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
{  
 800b814:	9111      	str	r1, [sp, #68]	; 0x44
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 800b816:	fbb3 f3f2 	udiv	r3, r3, r2
 800b81a:	9308      	str	r3, [sp, #32]
  

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800b81c:	4b73      	ldr	r3, [pc, #460]	; (800b9ec <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e8>)
 800b81e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b820:	9206      	str	r2, [sp, #24]
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800b822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800b824:	691b      	ldr	r3, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800b826:	9201      	str	r2, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800b828:	930c      	str	r3, [sp, #48]	; 0x30
          pLum += 64;                      
        }

        pLum = pLum - 128 + 16;
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800b82a:	0053      	lsls	r3, r2, #1
 800b82c:	930d      	str	r3, [sp, #52]	; 0x34
  while(currentMCU < (numberMCU + BlockIndex))
 800b82e:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800b832:	4413      	add	r3, r2
 800b834:	455b      	cmp	r3, fp
 800b836:	d803      	bhi.n	800b840 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3c>
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
  }
  return numberMCU;
}
 800b838:	9808      	ldr	r0, [sp, #32]
 800b83a:	b013      	add	sp, #76	; 0x4c
 800b83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800b840:	ea4f 120b 	mov.w	r2, fp, lsl #4
 800b844:	9b06      	ldr	r3, [sp, #24]
    currentMCU++;
 800b846:	f10b 0b01 	add.w	fp, fp, #1
    pLum = pInBuffer;
 800b84a:	4681      	mov	r9, r0
    for(i= 0; i <  16; i+=2)
 800b84c:	f04f 0800 	mov.w	r8, #0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 800b850:	fbb2 f1f3 	udiv	r1, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800b854:	9b01      	ldr	r3, [sp, #4]
 800b856:	fb03 f401 	mul.w	r4, r3, r1
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800b85a:	9b06      	ldr	r3, [sp, #24]
 800b85c:	fb03 2311 	mls	r3, r3, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800b860:	005b      	lsls	r3, r3, #1
 800b862:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800b866:	9300      	str	r3, [sp, #0]
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 800b868:	f500 7380 	add.w	r3, r0, #256	; 0x100
 800b86c:	9302      	str	r3, [sp, #8]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800b86e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b870:	9a00      	ldr	r2, [sp, #0]
 800b872:	4293      	cmp	r3, r2
 800b874:	f240 80ac 	bls.w	800b9d0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>
        pOutAddr = pOutBuffer + refline;
 800b878:	9b11      	ldr	r3, [sp, #68]	; 0x44
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800b87a:	f04f 0c00 	mov.w	ip, #0
 800b87e:	f8cd 900c 	str.w	r9, [sp, #12]
        pOutAddr = pOutBuffer + refline;
 800b882:	4413      	add	r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800b884:	9a01      	ldr	r2, [sp, #4]
        pOutAddr = pOutBuffer + refline;
 800b886:	9307      	str	r3, [sp, #28]
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 800b888:	4413      	add	r3, r2
 800b88a:	930e      	str	r3, [sp, #56]	; 0x38
 800b88c:	9b02      	ldr	r3, [sp, #8]
 800b88e:	9304      	str	r3, [sp, #16]
          for(j=0; j < 8; j+=2)
 800b890:	9b04      	ldr	r3, [sp, #16]
    for(i= 0; i <  16; i+=2)
 800b892:	2600      	movs	r6, #0
 800b894:	9f03      	ldr	r7, [sp, #12]
 800b896:	3b01      	subs	r3, #1
 800b898:	9305      	str	r3, [sp, #20]
 800b89a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b89c:	4463      	add	r3, ip
 800b89e:	930a      	str	r3, [sp, #40]	; 0x28
 800b8a0:	9b07      	ldr	r3, [sp, #28]
 800b8a2:	4463      	add	r3, ip
 800b8a4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          for(j=0; j < 8; j+=2)
 800b8a8:	3702      	adds	r7, #2
            ycomp = (int32_t)(*(pLum +j));
 800b8aa:	f817 ec02 	ldrb.w	lr, [r7, #-2]
 800b8ae:	4433      	add	r3, r6
 800b8b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8b4:	4433      	add	r3, r6
 800b8b6:	9310      	str	r3, [sp, #64]	; 0x40
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800b8b8:	9b05      	ldr	r3, [sp, #20]
 800b8ba:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800b8be:	9305      	str	r3, [sp, #20]
 800b8c0:	4b4b      	ldr	r3, [pc, #300]	; (800b9f0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1ec>)
 800b8c2:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800b8c6:	9b05      	ldr	r3, [sp, #20]
 800b8c8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b8cc:	4b49      	ldr	r3, [pc, #292]	; (800b9f4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f0>)
 800b8ce:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800b8d2:	4b49      	ldr	r3, [pc, #292]	; (800b9f8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f4>)
 800b8d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b8d8:	4b48      	ldr	r3, [pc, #288]	; (800b9fc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f8>)
 800b8da:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800b8de:	440a      	add	r2, r1
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800b8e0:	4947      	ldr	r1, [pc, #284]	; (800ba00 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1fc>)
 800b8e2:	440d      	add	r5, r1
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	eb05 010e 	add.w	r1, r5, lr
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800b8ea:	eb03 4222 	add.w	r2, r3, r2, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800b8ee:	441c      	add	r4, r3
            *(__IO uint16_t *)pOutAddr = 
 800b8f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800b8f2:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
 800b8f6:	ea4f 0ad1 	mov.w	sl, r1, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800b8fa:	eb02 010e 	add.w	r1, r2, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800b8fe:	44a6      	add	lr, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800b900:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
 800b904:	f89e e100 	ldrb.w	lr, [lr, #256]	; 0x100
 800b908:	0889      	lsrs	r1, r1, #2
 800b90a:	0149      	lsls	r1, r1, #5
 800b90c:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 800b910:	ea41 01de 	orr.w	r1, r1, lr, lsr #3
            *(__IO uint16_t *)pOutAddr = 
 800b914:	5399      	strh	r1, [r3, r6]
            ycomp = (int32_t)(*(pLum +j +1));
 800b916:	f817 ec01 	ldrb.w	lr, [r7, #-1]
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800b91a:	9b10      	ldr	r3, [sp, #64]	; 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800b91c:	eb05 010e 	add.w	r1, r5, lr
 800b920:	f891 a100 	ldrb.w	sl, [r1, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800b924:	eb02 010e 	add.w	r1, r2, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800b928:	44a6      	add	lr, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800b92a:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800b92e:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800b932:	0889      	lsrs	r1, r1, #2
 800b934:	0149      	lsls	r1, r1, #5
 800b936:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 800b93a:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
 800b93e:	ea41 01da 	orr.w	r1, r1, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800b942:	8059      	strh	r1, [r3, #2]
            ycomp = (int32_t)(*(pLum +j +8));
 800b944:	f897 e006 	ldrb.w	lr, [r7, #6]
            *(__IO uint16_t *)pOutAddr2 = 
 800b948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800b94a:	eb05 010e 	add.w	r1, r5, lr
 800b94e:	f891 a100 	ldrb.w	sl, [r1, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800b952:	eb02 010e 	add.w	r1, r2, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800b956:	44a6      	add	lr, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800b958:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800b95c:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800b960:	0889      	lsrs	r1, r1, #2
 800b962:	0149      	lsls	r1, r1, #5
 800b964:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 800b968:	f89e a100 	ldrb.w	sl, [lr, #256]	; 0x100
 800b96c:	ea41 01da 	orr.w	r1, r1, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 = 
 800b970:	5399      	strh	r1, [r3, r6]
          for(j=0; j < 8; j+=2)
 800b972:	3604      	adds	r6, #4
            ycomp = (int32_t)(*(pLum +j +8 +1));
 800b974:	79f9      	ldrb	r1, [r7, #7]
          for(j=0; j < 8; j+=2)
 800b976:	2e10      	cmp	r6, #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800b978:	440d      	add	r5, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800b97a:	440a      	add	r2, r1
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 800b97c:	4421      	add	r1, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800b97e:	f895 5100 	ldrb.w	r5, [r5, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800b982:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800b986:	ea4f 05d5 	mov.w	r5, r5, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 800b98a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800b98c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800b990:	ea4f 1242 	mov.w	r2, r2, lsl #5
 800b994:	ea42 22c5 	orr.w	r2, r2, r5, lsl #11
 800b998:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
 800b99c:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 800b9a0:	805a      	strh	r2, [r3, #2]
          for(j=0; j < 8; j+=2)
 800b9a2:	d180      	bne.n	800b8a6 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa2>
            pChrom++;
 800b9a4:	9b04      	ldr	r3, [sp, #16]
        for(k= 0; k<2; k++)
 800b9a6:	f10c 0c10 	add.w	ip, ip, #16
            pChrom++;
 800b9aa:	3304      	adds	r3, #4
        for(k= 0; k<2; k++)
 800b9ac:	f1bc 0f20 	cmp.w	ip, #32
            pChrom++;
 800b9b0:	9304      	str	r3, [sp, #16]
          pLum += 64;                      
 800b9b2:	9b03      	ldr	r3, [sp, #12]
 800b9b4:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800b9b8:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
 800b9ba:	f47f af69 	bne.w	800b890 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x8c>
            pChrom++;
 800b9be:	9b02      	ldr	r3, [sp, #8]
        pLum = pLum - 128 + 16;
 800b9c0:	f109 0910 	add.w	r9, r9, #16
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800b9c4:	9a00      	ldr	r2, [sp, #0]
            pChrom++;
 800b9c6:	3308      	adds	r3, #8
 800b9c8:	9302      	str	r3, [sp, #8]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 800b9ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9cc:	441a      	add	r2, r3
 800b9ce:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  16; i+=2)
 800b9d0:	f108 0802 	add.w	r8, r8, #2
 800b9d4:	f1b8 0f10 	cmp.w	r8, #16
 800b9d8:	d102      	bne.n	800b9e0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 800b9da:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 800b9de:	e726      	b.n	800b82e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a>
      if(i == 8)
 800b9e0:	f1b8 0f08 	cmp.w	r8, #8
        pLum = pInBuffer + 128;
 800b9e4:	bf08      	it	eq
 800b9e6:	f100 0980 	addeq.w	r9, r0, #128	; 0x80
 800b9ea:	e740      	b.n	800b86e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6a>
 800b9ec:	200243cc 	.word	0x200243cc
 800b9f0:	200233cc 	.word	0x200233cc
 800b9f4:	20023fcc 	.word	0x20023fcc
 800b9f8:	20023bcc 	.word	0x20023bcc
 800b9fc:	200237cc 	.word	0x200237cc
 800ba00:	0802039b 	.word	0x0802039b

0800ba04 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800ba04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 800ba08:	0a1b      	lsrs	r3, r3, #8
{  
 800ba0a:	b08d      	sub	sp, #52	; 0x34
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 800ba0c:	9305      	str	r3, [sp, #20]
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800ba0e:	4b4f      	ldr	r3, [pc, #316]	; (800bb4c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x148>)
{  
 800ba10:	9206      	str	r2, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800ba12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  currentMCU = BlockIndex;
 800ba14:	f8dd e018 	ldr.w	lr, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800ba18:	9202      	str	r2, [sp, #8]
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800ba1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800ba1c:	691b      	ldr	r3, [r3, #16]
{  
 800ba1e:	910a      	str	r1, [sp, #40]	; 0x28
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800ba20:	9203      	str	r2, [sp, #12]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800ba22:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
 800ba24:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800ba28:	4413      	add	r3, r2
 800ba2a:	4573      	cmp	r3, lr
 800ba2c:	d803      	bhi.n	800ba36 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x32>
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
  }
  return numberMCU;
}
 800ba2e:	9805      	ldr	r0, [sp, #20]
 800ba30:	b00d      	add	sp, #52	; 0x34
 800ba32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800ba36:	ea4f 120e 	mov.w	r2, lr, lsl #4
 800ba3a:	9b02      	ldr	r3, [sp, #8]
    currentMCU++;
 800ba3c:	f10e 0e01 	add.w	lr, lr, #1
 800ba40:	f100 0780 	add.w	r7, r0, #128	; 0x80
    pLum = pInBuffer;
 800ba44:	4682      	mov	sl, r0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 800ba46:	fbb2 f1f3 	udiv	r1, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800ba4a:	9b03      	ldr	r3, [sp, #12]
 800ba4c:	fb03 f401 	mul.w	r4, r3, r1
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 800ba50:	9b02      	ldr	r3, [sp, #8]
 800ba52:	fb03 2311 	mls	r3, r3, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800ba56:	005b      	lsls	r3, r3, #1
 800ba58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ba5c:	9300      	str	r3, [sp, #0]
    currentMCU++;
 800ba5e:	2308      	movs	r3, #8
 800ba60:	9304      	str	r3, [sp, #16]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800ba62:	9b07      	ldr	r3, [sp, #28]
 800ba64:	9a00      	ldr	r2, [sp, #0]
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d969      	bls.n	800bb3e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x13a>
        pOutAddr = pOutBuffer + refline;
 800ba6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba6c:	46d0      	mov	r8, sl
 800ba6e:	eb03 0902 	add.w	r9, r3, r2
        for(k= 0; k<2; k++)
 800ba72:	f107 0308 	add.w	r3, r7, #8
 800ba76:	9308      	str	r3, [sp, #32]
          for(j=0; j < 8; j+=2)
 800ba78:	1e7b      	subs	r3, r7, #1
    currentMCU++;
 800ba7a:	2400      	movs	r4, #0
 800ba7c:	9301      	str	r3, [sp, #4]
            ycomp = (int32_t)(*(pLum +j +1));
 800ba7e:	f108 0301 	add.w	r3, r8, #1
 800ba82:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba84:	eb09 0384 	add.w	r3, r9, r4, lsl #2
            ycomp = (int32_t)(*(pLum +j));
 800ba88:	f818 c014 	ldrb.w	ip, [r8, r4, lsl #1]
 800ba8c:	9309      	str	r3, [sp, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800ba8e:	9b01      	ldr	r3, [sp, #4]
 800ba90:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800ba94:	9301      	str	r3, [sp, #4]
 800ba96:	4b2e      	ldr	r3, [pc, #184]	; (800bb50 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14c>)
 800ba98:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800ba9c:	9b01      	ldr	r3, [sp, #4]
 800ba9e:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 800baa2:	4b2c      	ldr	r3, [pc, #176]	; (800bb54 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x150>)
 800baa4:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800baa8:	4b2b      	ldr	r3, [pc, #172]	; (800bb58 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x154>)
 800baaa:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800baae:	4b2b      	ldr	r3, [pc, #172]	; (800bb5c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x158>)
 800bab0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bab4:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800bab6:	4a2a      	ldr	r2, [pc, #168]	; (800bb60 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x15c>)
 800bab8:	4613      	mov	r3, r2
 800baba:	4416      	add	r6, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800babc:	eb03 4121 	add.w	r1, r3, r1, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800bac0:	eb06 020c 	add.w	r2, r6, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800bac4:	441d      	add	r5, r3
            ycomp = (int32_t)(*(pLum +j +1));
 800bac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800bac8:	f892 b100 	ldrb.w	fp, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800bacc:	eb01 020c 	add.w	r2, r1, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 800bad0:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800bad2:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800bad6:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800bada:	0892      	lsrs	r2, r2, #2
 800badc:	0152      	lsls	r2, r2, #5
 800bade:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
 800bae2:	f89c b100 	ldrb.w	fp, [ip, #256]	; 0x100
 800bae6:	ea42 02db 	orr.w	r2, r2, fp, lsr #3
            *(__IO uint16_t *)pOutAddr = 
 800baea:	f829 2024 	strh.w	r2, [r9, r4, lsl #2]
            ycomp = (int32_t)(*(pLum +j +1));
 800baee:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
          for(j=0; j < 8; j+=2)
 800baf2:	3401      	adds	r4, #1
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800baf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800baf6:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800baf8:	4416      	add	r6, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 800bafa:	4415      	add	r5, r2
          for(j=0; j < 8; j+=2)
 800bafc:	2c04      	cmp	r4, #4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800bafe:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800bb02:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800bb06:	ea4f 0191 	mov.w	r1, r1, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800bb0a:	ea4f 06d6 	mov.w	r6, r6, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800bb0e:	ea4f 1141 	mov.w	r1, r1, lsl #5
 800bb12:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 800bb16:	f895 6100 	ldrb.w	r6, [r5, #256]	; 0x100
 800bb1a:	ea41 01d6 	orr.w	r1, r1, r6, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 800bb1e:	8059      	strh	r1, [r3, #2]
          for(j=0; j < 8; j+=2)
 800bb20:	d1b0      	bne.n	800ba84 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
            pChrom++;
 800bb22:	3704      	adds	r7, #4
        for(k= 0; k<2; k++)
 800bb24:	9b08      	ldr	r3, [sp, #32]
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 800bb26:	f109 0910 	add.w	r9, r9, #16
          pLum += 64;                      
 800bb2a:	f108 0840 	add.w	r8, r8, #64	; 0x40
        for(k= 0; k<2; k++)
 800bb2e:	42bb      	cmp	r3, r7
 800bb30:	d1a2      	bne.n	800ba78 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x74>
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800bb32:	9a00      	ldr	r2, [sp, #0]
        pLum = pLum - 128 + 8;
 800bb34:	f10a 0a08 	add.w	sl, sl, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800bb38:	9b03      	ldr	r3, [sp, #12]
 800bb3a:	441a      	add	r2, r3
 800bb3c:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  8; i++)
 800bb3e:	9b04      	ldr	r3, [sp, #16]
 800bb40:	3b01      	subs	r3, #1
 800bb42:	9304      	str	r3, [sp, #16]
 800bb44:	d18d      	bne.n	800ba62 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x5e>
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 800bb46:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800bb4a:	e76b      	b.n	800ba24 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x20>
 800bb4c:	200243cc 	.word	0x200243cc
 800bb50:	200233cc 	.word	0x200233cc
 800bb54:	20023fcc 	.word	0x20023fcc
 800bb58:	20023bcc 	.word	0x20023bcc
 800bb5c:	200237cc 	.word	0x200237cc
 800bb60:	0802039b 	.word	0x0802039b

0800bb64 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800bb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb68:	4692      	mov	sl, r2
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800bb6a:	22c0      	movs	r2, #192	; 0xc0
{  
 800bb6c:	b089      	sub	sp, #36	; 0x24
  currentMCU = BlockIndex;
 800bb6e:	4654      	mov	r4, sl
{  
 800bb70:	9107      	str	r1, [sp, #28]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800bb72:	fbb3 f3f2 	udiv	r3, r3, r2
  

  while(currentMCU < (numberMCU + BlockIndex))
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800bb76:	4a35      	ldr	r2, [pc, #212]	; (800bc4c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 800bb78:	9304      	str	r3, [sp, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800bb7a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800bb7c:	9100      	str	r1, [sp, #0]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800bb7e:	6a91      	ldr	r1, [r2, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800bb80:	6912      	ldr	r2, [r2, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800bb82:	9101      	str	r1, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800bb84:	9205      	str	r2, [sp, #20]
  while(currentMCU < (numberMCU + BlockIndex))
 800bb86:	9b04      	ldr	r3, [sp, #16]
 800bb88:	eb03 020a 	add.w	r2, r3, sl
 800bb8c:	42a2      	cmp	r2, r4
 800bb8e:	d803      	bhi.n	800bb98 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x34>
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	b009      	add	sp, #36	; 0x24
 800bb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800bb98:	00e1      	lsls	r1, r4, #3
 800bb9a:	9a00      	ldr	r2, [sp, #0]
    currentMCU++;   
 800bb9c:	3401      	adds	r4, #1
    pLum = pInBuffer;
 800bb9e:	4684      	mov	ip, r0
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800bba0:	fbb1 f5f2 	udiv	r5, r1, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800bba4:	9a01      	ldr	r2, [sp, #4]
 800bba6:	fb02 f605 	mul.w	r6, r2, r5
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800bbaa:	9a00      	ldr	r2, [sp, #0]
 800bbac:	fb02 1215 	mls	r2, r2, r5, r1
    currentMCU++;   
 800bbb0:	2108      	movs	r1, #8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800bbb2:	0052      	lsls	r2, r2, #1
    currentMCU++;   
 800bbb4:	9103      	str	r1, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800bbb6:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 800bbba:	f100 0640 	add.w	r6, r0, #64	; 0x40
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800bbbe:	9905      	ldr	r1, [sp, #20]
 800bbc0:	4291      	cmp	r1, r2
 800bbc2:	d93d      	bls.n	800bc40 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xdc>
        pOutAddr = pOutBuffer+ refline;
 800bbc4:	9907      	ldr	r1, [sp, #28]
 800bbc6:	f106 3eff 	add.w	lr, r6, #4294967295
 800bbca:	188d      	adds	r5, r1, r2
          for(j=0; j < 8; j++)
 800bbcc:	f10c 31ff 	add.w	r1, ip, #4294967295
 800bbd0:	9102      	str	r1, [sp, #8]
 800bbd2:	f105 0110 	add.w	r1, r5, #16
 800bbd6:	9106      	str	r1, [sp, #24]
            ycomp = (int32_t)(*(pLum +j));
 800bbd8:	9f02      	ldr	r7, [sp, #8]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 800bbda:	f81e 8f01 	ldrb.w	r8, [lr, #1]!
            ycomp = (int32_t)(*(pLum +j));
 800bbde:	f817 1f01 	ldrb.w	r1, [r7, #1]!
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 800bbe2:	f89e 9040 	ldrb.w	r9, [lr, #64]	; 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800bbe6:	4b1a      	ldr	r3, [pc, #104]	; (800bc50 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
            ycomp = (int32_t)(*(pLum +j));
 800bbe8:	9702      	str	r7, [sp, #8]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800bbea:	4f1a      	ldr	r7, [pc, #104]	; (800bc54 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf0>)
 800bbec:	4419      	add	r1, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800bbee:	4b1a      	ldr	r3, [pc, #104]	; (800bc58 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf4>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800bbf0:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 800bbf4:	440f      	add	r7, r1
 800bbf6:	f897 b100 	ldrb.w	fp, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800bbfa:	f853 7028 	ldr.w	r7, [r3, r8, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800bbfe:	4b17      	ldr	r3, [pc, #92]	; (800bc5c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf8>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 800bc00:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 800bc04:	440f      	add	r7, r1
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800bc06:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 800bc0a:	4b15      	ldr	r3, [pc, #84]	; (800bc60 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xfc>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800bc0c:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800bc10:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800bc14:	08ff      	lsrs	r7, r7, #3
          for(j=0; j < 8; j++)
 800bc16:	9b06      	ldr	r3, [sp, #24]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 800bc18:	44c8      	add	r8, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 800bc1a:	ea47 27cb 	orr.w	r7, r7, fp, lsl #11
 800bc1e:	eb01 4828 	add.w	r8, r1, r8, asr #16
 800bc22:	f898 b100 	ldrb.w	fp, [r8, #256]	; 0x100
 800bc26:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 800bc2a:	ea47 174b 	orr.w	r7, r7, fp, lsl #5
            *(__IO uint16_t *)pOutAddr = 
 800bc2e:	f825 7b02 	strh.w	r7, [r5], #2
          for(j=0; j < 8; j++)
 800bc32:	429d      	cmp	r5, r3
 800bc34:	d1d0      	bne.n	800bbd8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x74>
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800bc36:	9b01      	ldr	r3, [sp, #4]
            pChrom++;
 800bc38:	3608      	adds	r6, #8
          pLum += 8;
 800bc3a:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800bc3e:	441a      	add	r2, r3
    for(i= 0; i <  8; i++)
 800bc40:	9b03      	ldr	r3, [sp, #12]
 800bc42:	3b01      	subs	r3, #1
 800bc44:	9303      	str	r3, [sp, #12]
 800bc46:	d1ba      	bne.n	800bbbe <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x5a>
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 800bc48:	30c0      	adds	r0, #192	; 0xc0
 800bc4a:	e79c      	b.n	800bb86 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x22>
 800bc4c:	200243cc 	.word	0x200243cc
 800bc50:	0802039b 	.word	0x0802039b
 800bc54:	20023fcc 	.word	0x20023fcc
 800bc58:	200233cc 	.word	0x200233cc
 800bc5c:	20023bcc 	.word	0x20023bcc
 800bc60:	200237cc 	.word	0x200237cc

0800bc64 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 800bc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc68:	b085      	sub	sp, #20
 800bc6a:	4604      	mov	r4, r0

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 800bc6c:	0998      	lsrs	r0, r3, #6
{
 800bc6e:	9102      	str	r1, [sp, #8]
  currentMCU = BlockIndex;
  
  while(currentMCU < (numberMCU + BlockIndex))
 800bc70:	eb02 1393 	add.w	r3, r2, r3, lsr #6
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800bc74:	491a      	ldr	r1, [pc, #104]	; (800bce0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
  while(currentMCU < (numberMCU + BlockIndex))
 800bc76:	9303      	str	r3, [sp, #12]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800bc78:	e9d1 8909 	ldrd	r8, r9, [r1, #36]	; 0x24
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    { 
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800bc7c:	6909      	ldr	r1, [r1, #16]
 800bc7e:	9101      	str	r1, [sp, #4]
  while(currentMCU < (numberMCU + BlockIndex))
 800bc80:	9b03      	ldr	r3, [sp, #12]
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d802      	bhi.n	800bc8c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x28>
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
  }
  return numberMCU;
}
 800bc86:	b005      	add	sp, #20
 800bc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800bc8c:	00d1      	lsls	r1, r2, #3
    pLum = pInBuffer;
 800bc8e:	46a4      	mov	ip, r4
    currentMCU++;
 800bc90:	3201      	adds	r2, #1
 800bc92:	2708      	movs	r7, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800bc94:	fbb1 f3f8 	udiv	r3, r1, r8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800bc98:	fb09 f503 	mul.w	r5, r9, r3
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800bc9c:	fb08 1313 	mls	r3, r8, r3, r1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800bca0:	005b      	lsls	r3, r3, #1
 800bca2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800bca6:	9901      	ldr	r1, [sp, #4]
 800bca8:	4299      	cmp	r1, r3
 800bcaa:	d914      	bls.n	800bcd6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x72>
      pOutAddr = pOutBuffer + refline;
 800bcac:	9902      	ldr	r1, [sp, #8]
 800bcae:	46e2      	mov	sl, ip
 800bcb0:	4419      	add	r1, r3
 800bcb2:	f101 0b10 	add.w	fp, r1, #16
          ySample =   (uint32_t)(*pLum);
 800bcb6:	f81a 6b01 	ldrb.w	r6, [sl], #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
 800bcba:	08f5      	lsrs	r5, r6, #3
 800bcbc:	08b6      	lsrs	r6, r6, #2
 800bcbe:	ea4f 2ec5 	mov.w	lr, r5, lsl #11
 800bcc2:	ea4e 1646 	orr.w	r6, lr, r6, lsl #5
 800bcc6:	432e      	orrs	r6, r5
 800bcc8:	f821 6b02 	strh.w	r6, [r1], #2
        for(j=0; j < 8; j++)
 800bccc:	4559      	cmp	r1, fp
 800bcce:	d1f2      	bne.n	800bcb6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x52>
          pLum++;
 800bcd0:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;        
 800bcd4:	444b      	add	r3, r9
    for(i= 0; i <  8; i++)
 800bcd6:	3f01      	subs	r7, #1
 800bcd8:	d1e5      	bne.n	800bca6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 800bcda:	3440      	adds	r4, #64	; 0x40
 800bcdc:	e7d0      	b.n	800bc80 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1c>
 800bcde:	bf00      	nop
 800bce0:	200243cc 	.word	0x200243cc

0800bce4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 800bce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce8:	b085      	sub	sp, #20
 800bcea:	4605      	mov	r5, r0
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800bcec:	27ff      	movs	r7, #255	; 0xff
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 800bcee:	0a18      	lsrs	r0, r3, #8
{  
 800bcf0:	9102      	str	r1, [sp, #8]
  while(currentMCU < (numberMCU + BlockIndex))
 800bcf2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800bcf6:	4928      	ldr	r1, [pc, #160]	; (800bd98 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb4>)
  while(currentMCU < (numberMCU + BlockIndex))
 800bcf8:	9303      	str	r3, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800bcfa:	e9d1 9a09 	ldrd	r9, sl, [r1, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800bcfe:	6909      	ldr	r1, [r1, #16]
 800bd00:	9100      	str	r1, [sp, #0]
  while(currentMCU < (numberMCU + BlockIndex))
 800bd02:	9b03      	ldr	r3, [sp, #12]
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d802      	bhi.n	800bd0e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 800bd08:	b005      	add	sp, #20
 800bd0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800bd0e:	00d3      	lsls	r3, r2, #3
    pChrom = pInBuffer;
 800bd10:	46ae      	mov	lr, r5
    currentMCU++;
 800bd12:	3201      	adds	r2, #1
 800bd14:	f04f 0c08 	mov.w	ip, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 800bd18:	fbb3 f1f9 	udiv	r1, r3, r9
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800bd1c:	fb0a f401 	mul.w	r4, sl, r1
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 800bd20:	fb09 3111 	mls	r1, r9, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 800bd24:	0049      	lsls	r1, r1, #1
 800bd26:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 800bd2a:	9b00      	ldr	r3, [sp, #0]
 800bd2c:	428b      	cmp	r3, r1
 800bd2e:	d92c      	bls.n	800bd8a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xa6>
        pOutAddr = pOutBuffer+ refline;        
 800bd30:	9b02      	ldr	r3, [sp, #8]
 800bd32:	4674      	mov	r4, lr
 800bd34:	185e      	adds	r6, r3, r1
          for(j=0; j < 8; j++)
 800bd36:	f106 0310 	add.w	r3, r6, #16
 800bd3a:	9301      	str	r3, [sp, #4]
            color_k = (int32_t)(*(pChrom + 192));
 800bd3c:	f894 80c0 	ldrb.w	r8, [r4, #192]	; 0xc0
            pChrom++;
 800bd40:	3401      	adds	r4, #1
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 800bd42:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800bd46:	fb13 f308 	smulbb	r3, r3, r8
 800bd4a:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 800bd4e:	ea4f 0be3 	mov.w	fp, r3, asr #3
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 800bd52:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800bd56:	fb13 f308 	smulbb	r3, r3, r8
 800bd5a:	fbb3 f3f7 	udiv	r3, r3, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800bd5e:	109b      	asrs	r3, r3, #2
 800bd60:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 800bd62:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 800bd66:	f894 b07f 	ldrb.w	fp, [r4, #127]	; 0x7f
 800bd6a:	fb1b fb08 	smulbb	fp, fp, r8
 800bd6e:	fbbb fbf7 	udiv	fp, fp, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800bd72:	ea43 0bdb 	orr.w	fp, r3, fp, lsr #3
          for(j=0; j < 8; j++)
 800bd76:	9b01      	ldr	r3, [sp, #4]
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 800bd78:	fa1f fb8b 	uxth.w	fp, fp
          *(__IO uint16_t *)pOutAddr = 
 800bd7c:	f826 bb02 	strh.w	fp, [r6], #2
          for(j=0; j < 8; j++)
 800bd80:	429e      	cmp	r6, r3
 800bd82:	d1db      	bne.n	800bd3c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x58>
            pChrom++;
 800bd84:	f10e 0e08 	add.w	lr, lr, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 800bd88:	4451      	add	r1, sl
    for(i= 0; i <  8; i++)
 800bd8a:	f1bc 0c01 	subs.w	ip, ip, #1
 800bd8e:	d1cc      	bne.n	800bd2a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x46>
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 800bd90:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800bd94:	e7b5      	b.n	800bd02 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1e>
 800bd96:	bf00      	nop
 800bd98:	200243cc 	.word	0x200243cc

0800bd9c <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 800bd9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 800bd9e:	68c4      	ldr	r4, [r0, #12]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800bda0:	6885      	ldr	r5, [r0, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800bda2:	6806      	ldr	r6, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800bda4:	fb05 f704 	mul.w	r7, r5, r4
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800bda8:	4b28      	ldr	r3, [pc, #160]	; (800be4c <JPEG_GetDecodeColorConvertFunc+0xb0>)
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 800bdaa:	6840      	ldr	r0, [r0, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800bdac:	2e10      	cmp	r6, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800bdae:	ea4f 0747 	mov.w	r7, r7, lsl #1
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800bdb2:	601e      	str	r6, [r3, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 800bdb4:	609c      	str	r4, [r3, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800bdb6:	60dd      	str	r5, [r3, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800bdb8:	611f      	str	r7, [r3, #16]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 800bdba:	6058      	str	r0, [r3, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 800bdbc:	d13c      	bne.n	800be38 <JPEG_GetDecodeColorConvertFunc+0x9c>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800bdbe:	2801      	cmp	r0, #1
 800bdc0:	d122      	bne.n	800be08 <JPEG_GetDecodeColorConvertFunc+0x6c>
    {
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 800bdc2:	4823      	ldr	r0, [pc, #140]	; (800be50 <JPEG_GetDecodeColorConvertFunc+0xb4>)
 800bdc4:	6008      	str	r0, [r1, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 800bdc6:	f014 010f 	ands.w	r1, r4, #15
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800bdca:	bf18      	it	ne
 800bdcc:	f1c1 0110 	rsbne	r1, r1, #16
 800bdd0:	6159      	str	r1, [r3, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 800bdd2:	2110      	movs	r1, #16
 800bdd4:	61d9      	str	r1, [r3, #28]
      if(JPEG_ConvertorParams.LineOffset != 0)
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
      }
      JPEG_ConvertorParams.H_factor = 16;
      JPEG_ConvertorParams.V_factor  = 8;
 800bdd6:	6219      	str	r1, [r3, #32]
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 800bdd8:	6959      	ldr	r1, [r3, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 800bdda:	69d8      	ldr	r0, [r3, #28]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 800bddc:	4421      	add	r1, r4
 800bdde:	6259      	str	r1, [r3, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 800bde0:	0061      	lsls	r1, r4, #1
 800bde2:	6299      	str	r1, [r3, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 800bde4:	fbb4 f1f0 	udiv	r1, r4, r0
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 800bde8:	fb00 4411 	mls	r4, r0, r1, r4
 800bdec:	b104      	cbz	r4, 800bdf0 <JPEG_GetDecodeColorConvertFunc+0x54>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 800bdee:	3101      	adds	r1, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 800bdf0:	6a1c      	ldr	r4, [r3, #32]
 800bdf2:	fbb5 f0f4 	udiv	r0, r5, r4
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 800bdf6:	fb04 5510 	mls	r5, r4, r0, r5
 800bdfa:	b105      	cbz	r5, 800bdfe <JPEG_GetDecodeColorConvertFunc+0x62>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
 800bdfc:	3001      	adds	r0, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 800bdfe:	4341      	muls	r1, r0
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
 800be00:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 800be02:	62d9      	str	r1, [r3, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 800be04:	6011      	str	r1, [r2, #0]
}
 800be06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800be08:	2802      	cmp	r0, #2
 800be0a:	d10b      	bne.n	800be24 <JPEG_GetDecodeColorConvertFunc+0x88>
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 800be0c:	4811      	ldr	r0, [pc, #68]	; (800be54 <JPEG_GetDecodeColorConvertFunc+0xb8>)
 800be0e:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
 800be10:	f014 010f 	ands.w	r1, r4, #15
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 800be14:	bf18      	it	ne
 800be16:	f1c1 0110 	rsbne	r1, r1, #16
 800be1a:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
 800be1c:	2110      	movs	r1, #16
 800be1e:	61d9      	str	r1, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 800be20:	2108      	movs	r1, #8
 800be22:	e7d8      	b.n	800bdd6 <JPEG_GetDecodeColorConvertFunc+0x3a>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 800be24:	480c      	ldr	r0, [pc, #48]	; (800be58 <JPEG_GetDecodeColorConvertFunc+0xbc>)
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 800be26:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
 800be28:	f014 0107 	ands.w	r1, r4, #7
 800be2c:	d001      	beq.n	800be32 <JPEG_GetDecodeColorConvertFunc+0x96>
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 800be2e:	f1c1 0108 	rsb	r1, r1, #8
 800be32:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.H_factor = 8;
 800be34:	2108      	movs	r1, #8
 800be36:	e7cd      	b.n	800bdd4 <JPEG_GetDecodeColorConvertFunc+0x38>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 800be38:	b90e      	cbnz	r6, 800be3e <JPEG_GetDecodeColorConvertFunc+0xa2>
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 800be3a:	4808      	ldr	r0, [pc, #32]	; (800be5c <JPEG_GetDecodeColorConvertFunc+0xc0>)
 800be3c:	e7f3      	b.n	800be26 <JPEG_GetDecodeColorConvertFunc+0x8a>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 800be3e:	2e30      	cmp	r6, #48	; 0x30
 800be40:	d101      	bne.n	800be46 <JPEG_GetDecodeColorConvertFunc+0xaa>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 800be42:	4807      	ldr	r0, [pc, #28]	; (800be60 <JPEG_GetDecodeColorConvertFunc+0xc4>)
 800be44:	e7ef      	b.n	800be26 <JPEG_GetDecodeColorConvertFunc+0x8a>
    return HAL_ERROR; /* Color space Not supported*/
 800be46:	2001      	movs	r0, #1
 800be48:	e7dd      	b.n	800be06 <JPEG_GetDecodeColorConvertFunc+0x6a>
 800be4a:	bf00      	nop
 800be4c:	200243cc 	.word	0x200243cc
 800be50:	0800b805 	.word	0x0800b805
 800be54:	0800ba05 	.word	0x0800ba05
 800be58:	0800bb65 	.word	0x0800bb65
 800be5c:	0800bc65 	.word	0x0800bc65
 800be60:	0800bce5 	.word	0x0800bce5

0800be64 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800be64:	8880      	ldrh	r0, [r0, #4]
 800be66:	4770      	bx	lr

0800be68 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800be68:	b570      	push	{r4, r5, r6, lr}
 800be6a:	6803      	ldr	r3, [r0, #0]
 800be6c:	460c      	mov	r4, r1
 800be6e:	2100      	movs	r1, #0
 800be70:	4605      	mov	r5, r0
 800be72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be74:	4798      	blx	r3
 800be76:	4606      	mov	r6, r0
 800be78:	682b      	ldr	r3, [r5, #0]
 800be7a:	4628      	mov	r0, r5
 800be7c:	1ba4      	subs	r4, r4, r6
 800be7e:	6a1b      	ldr	r3, [r3, #32]
 800be80:	b2a4      	uxth	r4, r4
 800be82:	4798      	blx	r3
 800be84:	fbb4 f0f0 	udiv	r0, r4, r0
 800be88:	bd70      	pop	{r4, r5, r6, pc}

0800be8a <_ZN8touchgfx17AbstractPartition5clearEv>:
 800be8a:	2300      	movs	r3, #0
 800be8c:	8083      	strh	r3, [r0, #4]
 800be8e:	4770      	bx	lr

0800be90 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800be90:	b510      	push	{r4, lr}
 800be92:	6803      	ldr	r3, [r0, #0]
 800be94:	4604      	mov	r4, r0
 800be96:	8881      	ldrh	r1, [r0, #4]
 800be98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9a:	4798      	blx	r3
 800be9c:	88a3      	ldrh	r3, [r4, #4]
 800be9e:	3301      	adds	r3, #1
 800bea0:	80a3      	strh	r3, [r4, #4]
 800bea2:	bd10      	pop	{r4, pc}

0800bea4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800bea4:	6803      	ldr	r3, [r0, #0]
 800bea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea8:	4718      	bx	r3

0800beaa <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800beaa:	4770      	bx	lr

0800beac <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800beac:	4a02      	ldr	r2, [pc, #8]	; (800beb8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800beae:	6002      	str	r2, [r0, #0]
 800beb0:	2200      	movs	r2, #0
 800beb2:	8082      	strh	r2, [r0, #4]
 800beb4:	4770      	bx	lr
 800beb6:	bf00      	nop
 800beb8:	080206a4 	.word	0x080206a4

0800bebc <_ZN8touchgfx9Container13getFirstChildEv>:
 800bebc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800bebe:	4770      	bx	lr

0800bec0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800bec0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bec2:	2000      	movs	r0, #0
 800bec4:	b12b      	cbz	r3, 800bed2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800bec6:	b920      	cbnz	r0, 800bed2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800bec8:	1a5a      	subs	r2, r3, r1
 800beca:	699b      	ldr	r3, [r3, #24]
 800becc:	4250      	negs	r0, r2
 800bece:	4150      	adcs	r0, r2
 800bed0:	e7f8      	b.n	800bec4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800bed2:	4770      	bx	lr

0800bed4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800bed4:	2300      	movs	r3, #0
 800bed6:	6148      	str	r0, [r1, #20]
 800bed8:	618b      	str	r3, [r1, #24]
 800beda:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bedc:	b913      	cbnz	r3, 800bee4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800bede:	6281      	str	r1, [r0, #40]	; 0x28
 800bee0:	4770      	bx	lr
 800bee2:	4613      	mov	r3, r2
 800bee4:	699a      	ldr	r2, [r3, #24]
 800bee6:	2a00      	cmp	r2, #0
 800bee8:	d1fb      	bne.n	800bee2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800beea:	6199      	str	r1, [r3, #24]
 800beec:	4770      	bx	lr

0800beee <_ZN8touchgfx9Container9removeAllEv>:
 800beee:	2200      	movs	r2, #0
 800bef0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bef2:	b123      	cbz	r3, 800befe <_ZN8touchgfx9Container9removeAllEv+0x10>
 800bef4:	6999      	ldr	r1, [r3, #24]
 800bef6:	6281      	str	r1, [r0, #40]	; 0x28
 800bef8:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800befc:	e7f8      	b.n	800bef0 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800befe:	4770      	bx	lr

0800bf00 <_ZN8touchgfx9Container6unlinkEv>:
 800bf00:	2300      	movs	r3, #0
 800bf02:	6283      	str	r3, [r0, #40]	; 0x28
 800bf04:	4770      	bx	lr

0800bf06 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800bf06:	2200      	movs	r2, #0
 800bf08:	8002      	strh	r2, [r0, #0]
 800bf0a:	8042      	strh	r2, [r0, #2]
 800bf0c:	8082      	strh	r2, [r0, #4]
 800bf0e:	80c2      	strh	r2, [r0, #6]
 800bf10:	4770      	bx	lr

0800bf12 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800bf12:	b570      	push	{r4, r5, r6, lr}
 800bf14:	460d      	mov	r5, r1
 800bf16:	4616      	mov	r6, r2
 800bf18:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800bf1a:	b13c      	cbz	r4, 800bf2c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800bf1c:	6823      	ldr	r3, [r4, #0]
 800bf1e:	4620      	mov	r0, r4
 800bf20:	4632      	mov	r2, r6
 800bf22:	4629      	mov	r1, r5
 800bf24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf26:	4798      	blx	r3
 800bf28:	69a4      	ldr	r4, [r4, #24]
 800bf2a:	e7f6      	b.n	800bf1a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800bf2c:	bd70      	pop	{r4, r5, r6, pc}

0800bf2e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800bf2e:	b538      	push	{r3, r4, r5, lr}
 800bf30:	460d      	mov	r5, r1
 800bf32:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800bf34:	b134      	cbz	r4, 800bf44 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800bf36:	682b      	ldr	r3, [r5, #0]
 800bf38:	4621      	mov	r1, r4
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	689b      	ldr	r3, [r3, #8]
 800bf3e:	4798      	blx	r3
 800bf40:	69a4      	ldr	r4, [r4, #24]
 800bf42:	e7f7      	b.n	800bf34 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800bf44:	bd38      	pop	{r3, r4, r5, pc}

0800bf46 <_ZN8touchgfx9ContainerD1Ev>:
 800bf46:	4770      	bx	lr

0800bf48 <_ZN8touchgfx9ContainerD0Ev>:
 800bf48:	b510      	push	{r4, lr}
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	212c      	movs	r1, #44	; 0x2c
 800bf4e:	f010 fccb 	bl	801c8e8 <_ZdlPvj>
 800bf52:	4620      	mov	r0, r4
 800bf54:	bd10      	pop	{r4, pc}

0800bf56 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800bf56:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bf58:	b19b      	cbz	r3, 800bf82 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800bf5a:	428b      	cmp	r3, r1
 800bf5c:	d109      	bne.n	800bf72 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800bf5e:	699a      	ldr	r2, [r3, #24]
 800bf60:	2100      	movs	r1, #0
 800bf62:	6159      	str	r1, [r3, #20]
 800bf64:	6282      	str	r2, [r0, #40]	; 0x28
 800bf66:	b902      	cbnz	r2, 800bf6a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800bf68:	4770      	bx	lr
 800bf6a:	6199      	str	r1, [r3, #24]
 800bf6c:	4770      	bx	lr
 800bf6e:	4613      	mov	r3, r2
 800bf70:	b13a      	cbz	r2, 800bf82 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800bf72:	699a      	ldr	r2, [r3, #24]
 800bf74:	428a      	cmp	r2, r1
 800bf76:	d1fa      	bne.n	800bf6e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800bf78:	698a      	ldr	r2, [r1, #24]
 800bf7a:	619a      	str	r2, [r3, #24]
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800bf82:	4770      	bx	lr

0800bf84 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800bf84:	b410      	push	{r4}
 800bf86:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bf88:	4604      	mov	r4, r0
 800bf8a:	b92b      	cbnz	r3, 800bf98 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800bf8c:	6803      	ldr	r3, [r0, #0]
 800bf8e:	4611      	mov	r1, r2
 800bf90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf96:	4718      	bx	r3
 800bf98:	b941      	cbnz	r1, 800bfac <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800bf9a:	6193      	str	r3, [r2, #24]
 800bf9c:	6282      	str	r2, [r0, #40]	; 0x28
 800bf9e:	6154      	str	r4, [r2, #20]
 800bfa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfa4:	4770      	bx	lr
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	d0f9      	beq.n	800bfa0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800bfac:	4299      	cmp	r1, r3
 800bfae:	6998      	ldr	r0, [r3, #24]
 800bfb0:	d1f9      	bne.n	800bfa6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800bfb2:	6190      	str	r0, [r2, #24]
 800bfb4:	618a      	str	r2, [r1, #24]
 800bfb6:	e7f2      	b.n	800bf9e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800bfb8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800bfb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfbc:	461f      	mov	r7, r3
 800bfbe:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800bfc2:	460d      	mov	r5, r1
 800bfc4:	4616      	mov	r6, r2
 800bfc6:	b103      	cbz	r3, 800bfca <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800bfc8:	6038      	str	r0, [r7, #0]
 800bfca:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800bfcc:	b314      	cbz	r4, 800c014 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800bfce:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800bfd2:	b1eb      	cbz	r3, 800c010 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800bfd4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800bfd8:	428d      	cmp	r5, r1
 800bfda:	db19      	blt.n	800c010 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800bfdc:	b289      	uxth	r1, r1
 800bfde:	8923      	ldrh	r3, [r4, #8]
 800bfe0:	440b      	add	r3, r1
 800bfe2:	b21b      	sxth	r3, r3
 800bfe4:	429d      	cmp	r5, r3
 800bfe6:	da13      	bge.n	800c010 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800bfe8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800bfec:	4296      	cmp	r6, r2
 800bfee:	db0f      	blt.n	800c010 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800bff0:	b292      	uxth	r2, r2
 800bff2:	8963      	ldrh	r3, [r4, #10]
 800bff4:	4413      	add	r3, r2
 800bff6:	b21b      	sxth	r3, r3
 800bff8:	429e      	cmp	r6, r3
 800bffa:	da09      	bge.n	800c010 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800bffc:	6823      	ldr	r3, [r4, #0]
 800bffe:	1ab2      	subs	r2, r6, r2
 800c000:	1a69      	subs	r1, r5, r1
 800c002:	4620      	mov	r0, r4
 800c004:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800c008:	b212      	sxth	r2, r2
 800c00a:	463b      	mov	r3, r7
 800c00c:	b209      	sxth	r1, r1
 800c00e:	47c0      	blx	r8
 800c010:	69a4      	ldr	r4, [r4, #24]
 800c012:	e7db      	b.n	800bfcc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800c014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c018 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800c018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c01c:	4c6d      	ldr	r4, [pc, #436]	; (800c1d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800c01e:	b0a1      	sub	sp, #132	; 0x84
 800c020:	4606      	mov	r6, r0
 800c022:	6824      	ldr	r4, [r4, #0]
 800c024:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800c026:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800c02a:	2400      	movs	r4, #0
 800c02c:	9303      	str	r3, [sp, #12]
 800c02e:	802c      	strh	r4, [r5, #0]
 800c030:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800c032:	802c      	strh	r4, [r5, #0]
 800c034:	601c      	str	r4, [r3, #0]
 800c036:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800c03a:	f7ff ffbd 	bl	800bfb8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800c03e:	f1b9 0f03 	cmp.w	r9, #3
 800c042:	f340 80c1 	ble.w	800c1c8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800c046:	4631      	mov	r1, r6
 800c048:	a80c      	add	r0, sp, #48	; 0x30
 800c04a:	f003 fadf 	bl	800f60c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c04e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800c052:	9306      	str	r3, [sp, #24]
 800c054:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800c058:	9307      	str	r3, [sp, #28]
 800c05a:	9b03      	ldr	r3, [sp, #12]
 800c05c:	f8d3 a000 	ldr.w	sl, [r3]
 800c060:	f1ba 0f00 	cmp.w	sl, #0
 800c064:	f000 80b3 	beq.w	800c1ce <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800c068:	4651      	mov	r1, sl
 800c06a:	a810      	add	r0, sp, #64	; 0x40
 800c06c:	f003 face 	bl	800f60c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c070:	2002      	movs	r0, #2
 800c072:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800c076:	9b01      	ldr	r3, [sp, #4]
 800c078:	9a06      	ldr	r2, [sp, #24]
 800c07a:	fb91 f1f0 	sdiv	r1, r1, r0
 800c07e:	189d      	adds	r5, r3, r2
 800c080:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800c084:	9a07      	ldr	r2, [sp, #28]
 800c086:	4419      	add	r1, r3
 800c088:	9b02      	ldr	r3, [sp, #8]
 800c08a:	4413      	add	r3, r2
 800c08c:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800c090:	1a6d      	subs	r5, r5, r1
 800c092:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800c096:	fb92 f2f0 	sdiv	r2, r2, r0
 800c09a:	440a      	add	r2, r1
 800c09c:	1a9b      	subs	r3, r3, r2
 800c09e:	435b      	muls	r3, r3
 800c0a0:	fb05 3505 	mla	r5, r5, r5, r3
 800c0a4:	4f4c      	ldr	r7, [pc, #304]	; (800c1d8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800c0a6:	ac10      	add	r4, sp, #64	; 0x40
 800c0a8:	f1b9 0f0c 	cmp.w	r9, #12
 800c0ac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c0ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c0b0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c0b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c0b4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c0b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c0b8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800c0bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c0c0:	f04f 0303 	mov.w	r3, #3
 800c0c4:	bfd8      	it	le
 800c0c6:	f109 32ff 	addle.w	r2, r9, #4294967295
 800c0ca:	f04f 0400 	mov.w	r4, #0
 800c0ce:	f8cd 9000 	str.w	r9, [sp]
 800c0d2:	bfcc      	ite	gt
 800c0d4:	4698      	movgt	r8, r3
 800c0d6:	fb92 f8f3 	sdivle	r8, r2, r3
 800c0da:	1c63      	adds	r3, r4, #1
 800c0dc:	aa10      	add	r2, sp, #64	; 0x40
 800c0de:	f004 0401 	and.w	r4, r4, #1
 800c0e2:	f04f 0b00 	mov.w	fp, #0
 800c0e6:	9308      	str	r3, [sp, #32]
 800c0e8:	9b00      	ldr	r3, [sp, #0]
 800c0ea:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800c0ee:	fb93 f3f8 	sdiv	r3, r3, r8
 800c0f2:	3404      	adds	r4, #4
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	9304      	str	r3, [sp, #16]
 800c0f8:	9a04      	ldr	r2, [sp, #16]
 800c0fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c0fe:	fb13 f302 	smulbb	r3, r3, r2
 800c102:	9a01      	ldr	r2, [sp, #4]
 800c104:	b29b      	uxth	r3, r3
 800c106:	1899      	adds	r1, r3, r2
 800c108:	9305      	str	r3, [sp, #20]
 800c10a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800c10e:	b209      	sxth	r1, r1
 800c110:	4299      	cmp	r1, r3
 800c112:	db4d      	blt.n	800c1b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c114:	8932      	ldrh	r2, [r6, #8]
 800c116:	4413      	add	r3, r2
 800c118:	b21b      	sxth	r3, r3
 800c11a:	4299      	cmp	r1, r3
 800c11c:	da48      	bge.n	800c1b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c11e:	9b04      	ldr	r3, [sp, #16]
 800c120:	6827      	ldr	r7, [r4, #0]
 800c122:	fb17 f703 	smulbb	r7, r7, r3
 800c126:	9b02      	ldr	r3, [sp, #8]
 800c128:	b2bf      	uxth	r7, r7
 800c12a:	18fa      	adds	r2, r7, r3
 800c12c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800c130:	b212      	sxth	r2, r2
 800c132:	429a      	cmp	r2, r3
 800c134:	db3c      	blt.n	800c1b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c136:	8970      	ldrh	r0, [r6, #10]
 800c138:	4403      	add	r3, r0
 800c13a:	b21b      	sxth	r3, r3
 800c13c:	429a      	cmp	r2, r3
 800c13e:	da37      	bge.n	800c1b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c140:	2300      	movs	r3, #0
 800c142:	4630      	mov	r0, r6
 800c144:	930b      	str	r3, [sp, #44]	; 0x2c
 800c146:	ab0b      	add	r3, sp, #44	; 0x2c
 800c148:	f7ff ff36 	bl	800bfb8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800c14c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c14e:	b37a      	cbz	r2, 800c1b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c150:	4552      	cmp	r2, sl
 800c152:	d02d      	beq.n	800c1b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c154:	4611      	mov	r1, r2
 800c156:	a80e      	add	r0, sp, #56	; 0x38
 800c158:	9209      	str	r2, [sp, #36]	; 0x24
 800c15a:	f003 fa57 	bl	800f60c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c15e:	f04f 0e02 	mov.w	lr, #2
 800c162:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800c166:	9a06      	ldr	r2, [sp, #24]
 800c168:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800c16c:	9b01      	ldr	r3, [sp, #4]
 800c16e:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800c172:	4413      	add	r3, r2
 800c174:	9a07      	ldr	r2, [sp, #28]
 800c176:	fb91 f1fe 	sdiv	r1, r1, lr
 800c17a:	fb9c fcfe 	sdiv	ip, ip, lr
 800c17e:	4401      	add	r1, r0
 800c180:	1a58      	subs	r0, r3, r1
 800c182:	9b02      	ldr	r3, [sp, #8]
 800c184:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800c188:	4413      	add	r3, r2
 800c18a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c18c:	448c      	add	ip, r1
 800c18e:	eba3 030c 	sub.w	r3, r3, ip
 800c192:	435b      	muls	r3, r3
 800c194:	fb00 3300 	mla	r3, r0, r0, r3
 800c198:	42ab      	cmp	r3, r5
 800c19a:	d208      	bcs.n	800c1ae <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800c19c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c19e:	461d      	mov	r5, r3
 800c1a0:	9803      	ldr	r0, [sp, #12]
 800c1a2:	6001      	str	r1, [r0, #0]
 800c1a4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800c1a6:	9805      	ldr	r0, [sp, #20]
 800c1a8:	8008      	strh	r0, [r1, #0]
 800c1aa:	992b      	ldr	r1, [sp, #172]	; 0xac
 800c1ac:	800f      	strh	r7, [r1, #0]
 800c1ae:	4692      	mov	sl, r2
 800c1b0:	f10b 0b01 	add.w	fp, fp, #1
 800c1b4:	3408      	adds	r4, #8
 800c1b6:	f1bb 0f04 	cmp.w	fp, #4
 800c1ba:	d19d      	bne.n	800c0f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800c1bc:	9b00      	ldr	r3, [sp, #0]
 800c1be:	9c08      	ldr	r4, [sp, #32]
 800c1c0:	444b      	add	r3, r9
 800c1c2:	4544      	cmp	r4, r8
 800c1c4:	9300      	str	r3, [sp, #0]
 800c1c6:	d188      	bne.n	800c0da <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800c1c8:	b021      	add	sp, #132	; 0x84
 800c1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ce:	f04f 35ff 	mov.w	r5, #4294967295
 800c1d2:	e767      	b.n	800c0a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800c1d4:	20024418 	.word	0x20024418
 800c1d8:	0801dae4 	.word	0x0801dae4

0800c1dc <_ZN8touchgfx4RectaNERKS0_>:
 800c1dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c1e0:	f9b1 7000 	ldrsh.w	r7, [r1]
 800c1e4:	888c      	ldrh	r4, [r1, #4]
 800c1e6:	f9b0 9000 	ldrsh.w	r9, [r0]
 800c1ea:	443c      	add	r4, r7
 800c1ec:	b2a4      	uxth	r4, r4
 800c1ee:	fa0f f884 	sxth.w	r8, r4
 800c1f2:	45c1      	cmp	r9, r8
 800c1f4:	da2f      	bge.n	800c256 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c1f6:	8882      	ldrh	r2, [r0, #4]
 800c1f8:	444a      	add	r2, r9
 800c1fa:	b292      	uxth	r2, r2
 800c1fc:	fa0f fe82 	sxth.w	lr, r2
 800c200:	4577      	cmp	r7, lr
 800c202:	da28      	bge.n	800c256 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c204:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800c208:	88cb      	ldrh	r3, [r1, #6]
 800c20a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800c20e:	442b      	add	r3, r5
 800c210:	b21b      	sxth	r3, r3
 800c212:	429e      	cmp	r6, r3
 800c214:	da1f      	bge.n	800c256 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c216:	88c3      	ldrh	r3, [r0, #6]
 800c218:	4433      	add	r3, r6
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	fa0f fc83 	sxth.w	ip, r3
 800c220:	4565      	cmp	r5, ip
 800c222:	da18      	bge.n	800c256 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c224:	454f      	cmp	r7, r9
 800c226:	bfb8      	it	lt
 800c228:	464f      	movlt	r7, r9
 800c22a:	42b5      	cmp	r5, r6
 800c22c:	bfb8      	it	lt
 800c22e:	4635      	movlt	r5, r6
 800c230:	45f0      	cmp	r8, lr
 800c232:	bfd8      	it	le
 800c234:	4622      	movle	r2, r4
 800c236:	1bd2      	subs	r2, r2, r7
 800c238:	8082      	strh	r2, [r0, #4]
 800c23a:	884a      	ldrh	r2, [r1, #2]
 800c23c:	88c9      	ldrh	r1, [r1, #6]
 800c23e:	8007      	strh	r7, [r0, #0]
 800c240:	440a      	add	r2, r1
 800c242:	8045      	strh	r5, [r0, #2]
 800c244:	b292      	uxth	r2, r2
 800c246:	b211      	sxth	r1, r2
 800c248:	458c      	cmp	ip, r1
 800c24a:	bfa8      	it	ge
 800c24c:	4613      	movge	r3, r2
 800c24e:	1b5b      	subs	r3, r3, r5
 800c250:	80c3      	strh	r3, [r0, #6]
 800c252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c256:	2300      	movs	r3, #0
 800c258:	8003      	strh	r3, [r0, #0]
 800c25a:	8043      	strh	r3, [r0, #2]
 800c25c:	8083      	strh	r3, [r0, #4]
 800c25e:	80c3      	strh	r3, [r0, #6]
 800c260:	e7f7      	b.n	800c252 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800c262 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800c262:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	dd06      	ble.n	800c278 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800c26a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800c26e:	2800      	cmp	r0, #0
 800c270:	bfcc      	ite	gt
 800c272:	2000      	movgt	r0, #0
 800c274:	2001      	movle	r0, #1
 800c276:	4770      	bx	lr
 800c278:	2001      	movs	r0, #1
 800c27a:	4770      	bx	lr

0800c27c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800c27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c280:	2300      	movs	r3, #0
 800c282:	4604      	mov	r4, r0
 800c284:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800c286:	8003      	strh	r3, [r0, #0]
 800c288:	8043      	strh	r3, [r0, #2]
 800c28a:	8083      	strh	r3, [r0, #4]
 800c28c:	80c3      	strh	r3, [r0, #6]
 800c28e:	2d00      	cmp	r5, #0
 800c290:	d040      	beq.n	800c314 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800c292:	1d28      	adds	r0, r5, #4
 800c294:	f7ff ffe5 	bl	800c262 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c298:	b988      	cbnz	r0, 800c2be <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800c29a:	4620      	mov	r0, r4
 800c29c:	f7ff ffe1 	bl	800c262 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c2a0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800c2a4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800c2a8:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800c2ac:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800c2b0:	b138      	cbz	r0, 800c2c2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800c2b2:	8022      	strh	r2, [r4, #0]
 800c2b4:	8063      	strh	r3, [r4, #2]
 800c2b6:	f8a4 e004 	strh.w	lr, [r4, #4]
 800c2ba:	f8a4 c006 	strh.w	ip, [r4, #6]
 800c2be:	69ad      	ldr	r5, [r5, #24]
 800c2c0:	e7e5      	b.n	800c28e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800c2c2:	f9b4 0000 	ldrsh.w	r0, [r4]
 800c2c6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800c2ca:	4290      	cmp	r0, r2
 800c2cc:	4607      	mov	r7, r0
 800c2ce:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800c2d2:	460e      	mov	r6, r1
 800c2d4:	bfa8      	it	ge
 800c2d6:	4617      	movge	r7, r2
 800c2d8:	4299      	cmp	r1, r3
 800c2da:	4472      	add	r2, lr
 800c2dc:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800c2e0:	bfa8      	it	ge
 800c2e2:	461e      	movge	r6, r3
 800c2e4:	4440      	add	r0, r8
 800c2e6:	4471      	add	r1, lr
 800c2e8:	4463      	add	r3, ip
 800c2ea:	b200      	sxth	r0, r0
 800c2ec:	8027      	strh	r7, [r4, #0]
 800c2ee:	b212      	sxth	r2, r2
 800c2f0:	8066      	strh	r6, [r4, #2]
 800c2f2:	b209      	sxth	r1, r1
 800c2f4:	b21b      	sxth	r3, r3
 800c2f6:	4290      	cmp	r0, r2
 800c2f8:	bfac      	ite	ge
 800c2fa:	ebc7 0200 	rsbge	r2, r7, r0
 800c2fe:	ebc7 0202 	rsblt	r2, r7, r2
 800c302:	4299      	cmp	r1, r3
 800c304:	bfac      	ite	ge
 800c306:	ebc6 0301 	rsbge	r3, r6, r1
 800c30a:	ebc6 0303 	rsblt	r3, r6, r3
 800c30e:	80a2      	strh	r2, [r4, #4]
 800c310:	80e3      	strh	r3, [r4, #6]
 800c312:	e7d4      	b.n	800c2be <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800c314:	4620      	mov	r0, r4
 800c316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c31a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800c31a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c31e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800c322:	b383      	cbz	r3, 800c386 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800c324:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c326:	b374      	cbz	r4, 800c386 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800c328:	f9b1 5000 	ldrsh.w	r5, [r1]
 800c32c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800c330:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800c334:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800c338:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800c33c:	b303      	cbz	r3, 800c380 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800c33e:	4668      	mov	r0, sp
 800c340:	1d21      	adds	r1, r4, #4
 800c342:	f8ad 5000 	strh.w	r5, [sp]
 800c346:	f8ad 6002 	strh.w	r6, [sp, #2]
 800c34a:	f8ad 7004 	strh.w	r7, [sp, #4]
 800c34e:	f8ad 8006 	strh.w	r8, [sp, #6]
 800c352:	f7ff ff43 	bl	800c1dc <_ZN8touchgfx4RectaNERKS0_>
 800c356:	4668      	mov	r0, sp
 800c358:	f7ff ff83 	bl	800c262 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c35c:	b980      	cbnz	r0, 800c380 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800c35e:	f8bd 3000 	ldrh.w	r3, [sp]
 800c362:	4669      	mov	r1, sp
 800c364:	88a2      	ldrh	r2, [r4, #4]
 800c366:	4620      	mov	r0, r4
 800c368:	1a9b      	subs	r3, r3, r2
 800c36a:	88e2      	ldrh	r2, [r4, #6]
 800c36c:	f8ad 3000 	strh.w	r3, [sp]
 800c370:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800c374:	1a9b      	subs	r3, r3, r2
 800c376:	f8ad 3002 	strh.w	r3, [sp, #2]
 800c37a:	6823      	ldr	r3, [r4, #0]
 800c37c:	689b      	ldr	r3, [r3, #8]
 800c37e:	4798      	blx	r3
 800c380:	69a4      	ldr	r4, [r4, #24]
 800c382:	2c00      	cmp	r4, #0
 800c384:	d1d8      	bne.n	800c338 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800c386:	b002      	add	sp, #8
 800c388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c38c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800c38c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c38e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800c392:	460d      	mov	r5, r1
 800c394:	4616      	mov	r6, r2
 800c396:	b323      	cbz	r3, 800c3e2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800c398:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c39a:	b314      	cbz	r4, 800c3e2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800c39c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800c3a0:	b1eb      	cbz	r3, 800c3de <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800c3a2:	6828      	ldr	r0, [r5, #0]
 800c3a4:	466b      	mov	r3, sp
 800c3a6:	6869      	ldr	r1, [r5, #4]
 800c3a8:	c303      	stmia	r3!, {r0, r1}
 800c3aa:	4668      	mov	r0, sp
 800c3ac:	1d21      	adds	r1, r4, #4
 800c3ae:	f7ff ff15 	bl	800c1dc <_ZN8touchgfx4RectaNERKS0_>
 800c3b2:	4668      	mov	r0, sp
 800c3b4:	f7ff ff55 	bl	800c262 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c3b8:	b988      	cbnz	r0, 800c3de <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800c3ba:	f8bd 3000 	ldrh.w	r3, [sp]
 800c3be:	4669      	mov	r1, sp
 800c3c0:	88a2      	ldrh	r2, [r4, #4]
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	1a9b      	subs	r3, r3, r2
 800c3c6:	88e2      	ldrh	r2, [r4, #6]
 800c3c8:	f8ad 3000 	strh.w	r3, [sp]
 800c3cc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800c3d0:	1a9b      	subs	r3, r3, r2
 800c3d2:	4632      	mov	r2, r6
 800c3d4:	f8ad 3002 	strh.w	r3, [sp, #2]
 800c3d8:	6823      	ldr	r3, [r4, #0]
 800c3da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3dc:	4798      	blx	r3
 800c3de:	69a4      	ldr	r4, [r4, #24]
 800c3e0:	e7db      	b.n	800c39a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800c3e2:	b002      	add	sp, #8
 800c3e4:	bd70      	pop	{r4, r5, r6, pc}

0800c3e6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800c3e6:	6803      	ldr	r3, [r0, #0]
 800c3e8:	b513      	push	{r0, r1, r4, lr}
 800c3ea:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	e9cd 3300 	strd	r3, r3, [sp]
 800c3f4:	466b      	mov	r3, sp
 800c3f6:	47a0      	blx	r4
 800c3f8:	b002      	add	sp, #8
 800c3fa:	bd10      	pop	{r4, pc}

0800c3fc <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800c402:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800c406:	4770      	bx	lr

0800c408 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800c408:	2301      	movs	r3, #1
 800c40a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800c40e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800c412:	4770      	bx	lr

0800c414 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800c414:	6843      	ldr	r3, [r0, #4]
 800c416:	2201      	movs	r2, #1
 800c418:	725a      	strb	r2, [r3, #9]
 800c41a:	6840      	ldr	r0, [r0, #4]
 800c41c:	6803      	ldr	r3, [r0, #0]
 800c41e:	691b      	ldr	r3, [r3, #16]
 800c420:	4718      	bx	r3

0800c422 <_ZN8touchgfx3HAL8flushDMAEv>:
 800c422:	6840      	ldr	r0, [r0, #4]
 800c424:	6803      	ldr	r3, [r0, #0]
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	4718      	bx	r3

0800c42a <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800c42a:	b530      	push	{r4, r5, lr}
 800c42c:	b08b      	sub	sp, #44	; 0x2c
 800c42e:	6804      	ldr	r4, [r0, #0]
 800c430:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800c434:	9509      	str	r5, [sp, #36]	; 0x24
 800c436:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800c43a:	9508      	str	r5, [sp, #32]
 800c43c:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800c440:	9507      	str	r5, [sp, #28]
 800c442:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800c446:	9506      	str	r5, [sp, #24]
 800c448:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800c44c:	9505      	str	r5, [sp, #20]
 800c44e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800c452:	9504      	str	r5, [sp, #16]
 800c454:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800c458:	9503      	str	r5, [sp, #12]
 800c45a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800c45e:	9502      	str	r5, [sp, #8]
 800c460:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800c464:	e9cd 3500 	strd	r3, r5, [sp]
 800c468:	4613      	mov	r3, r2
 800c46a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800c46c:	2200      	movs	r2, #0
 800c46e:	47a0      	blx	r4
 800c470:	b00b      	add	sp, #44	; 0x2c
 800c472:	bd30      	pop	{r4, r5, pc}

0800c474 <_ZN8touchgfx3HAL10beginFrameEv>:
 800c474:	4b04      	ldr	r3, [pc, #16]	; (800c488 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	b123      	cbz	r3, 800c484 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800c47a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800c47e:	f080 0001 	eor.w	r0, r0, #1
 800c482:	4770      	bx	lr
 800c484:	2001      	movs	r0, #1
 800c486:	4770      	bx	lr
 800c488:	20024416 	.word	0x20024416

0800c48c <_ZN8touchgfx3HAL8endFrameEv>:
 800c48c:	b510      	push	{r4, lr}
 800c48e:	4604      	mov	r4, r0
 800c490:	6840      	ldr	r0, [r0, #4]
 800c492:	6803      	ldr	r3, [r0, #0]
 800c494:	689b      	ldr	r3, [r3, #8]
 800c496:	4798      	blx	r3
 800c498:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800c49c:	b113      	cbz	r3, 800c4a4 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800c49e:	2301      	movs	r3, #1
 800c4a0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800c4a4:	bd10      	pop	{r4, pc}

0800c4a6 <_ZN8touchgfx3HAL10initializeEv>:
 800c4a6:	b510      	push	{r4, lr}
 800c4a8:	4604      	mov	r4, r0
 800c4aa:	f7f5 fac1 	bl	8001a30 <_ZN8touchgfx10OSWrappers10initializeEv>
 800c4ae:	f7f4 fb59 	bl	8000b64 <_ZN8touchgfx4GPIO4initEv>
 800c4b2:	6860      	ldr	r0, [r4, #4]
 800c4b4:	6803      	ldr	r3, [r0, #0]
 800c4b6:	68db      	ldr	r3, [r3, #12]
 800c4b8:	4798      	blx	r3
 800c4ba:	68e0      	ldr	r0, [r4, #12]
 800c4bc:	6803      	ldr	r3, [r0, #0]
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	4798      	blx	r3
 800c4c2:	6823      	ldr	r3, [r4, #0]
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4cc:	4718      	bx	r3
	...

0800c4d0 <_ZN8touchgfx3HAL4tickEv>:
 800c4d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c4d2:	6803      	ldr	r3, [r0, #0]
 800c4d4:	4604      	mov	r4, r0
 800c4d6:	4d5b      	ldr	r5, [pc, #364]	; (800c644 <_ZN8touchgfx3HAL4tickEv+0x174>)
 800c4d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c4dc:	4798      	blx	r3
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	f000 8095 	beq.w	800c60e <_ZN8touchgfx3HAL4tickEv+0x13e>
 800c4e4:	2001      	movs	r0, #1
 800c4e6:	2600      	movs	r6, #0
 800c4e8:	f7f4 faa2 	bl	8000a30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800c4ec:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800c4f0:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800c4f4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800c4f8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800c4fc:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800c500:	b133      	cbz	r3, 800c510 <_ZN8touchgfx3HAL4tickEv+0x40>
 800c502:	6823      	ldr	r3, [r4, #0]
 800c504:	4620      	mov	r0, r4
 800c506:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800c50a:	4798      	blx	r3
 800c50c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800c510:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800c514:	2601      	movs	r6, #1
 800c516:	6862      	ldr	r2, [r4, #4]
 800c518:	f083 0301 	eor.w	r3, r3, #1
 800c51c:	702e      	strb	r6, [r5, #0]
 800c51e:	7253      	strb	r3, [r2, #9]
 800c520:	f001 ff94 	bl	800e44c <_ZN8touchgfx11Application11getInstanceEv>
 800c524:	6803      	ldr	r3, [r0, #0]
 800c526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c528:	4798      	blx	r3
 800c52a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800c52e:	b90b      	cbnz	r3, 800c534 <_ZN8touchgfx3HAL4tickEv+0x64>
 800c530:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800c534:	f001 ff8a 	bl	800e44c <_ZN8touchgfx11Application11getInstanceEv>
 800c538:	6803      	ldr	r3, [r0, #0]
 800c53a:	695b      	ldr	r3, [r3, #20]
 800c53c:	4798      	blx	r3
 800c53e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c540:	6803      	ldr	r3, [r0, #0]
 800c542:	691b      	ldr	r3, [r3, #16]
 800c544:	4798      	blx	r3
 800c546:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800c54a:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800c54e:	3b01      	subs	r3, #1
 800c550:	b2db      	uxtb	r3, r3
 800c552:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800c556:	b10a      	cbz	r2, 800c55c <_ZN8touchgfx3HAL4tickEv+0x8c>
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d1eb      	bne.n	800c534 <_ZN8touchgfx3HAL4tickEv+0x64>
 800c55c:	4a3a      	ldr	r2, [pc, #232]	; (800c648 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800c55e:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800c562:	7813      	ldrb	r3, [r2, #0]
 800c564:	3301      	adds	r3, #1
 800c566:	b25b      	sxtb	r3, r3
 800c568:	4299      	cmp	r1, r3
 800c56a:	7013      	strb	r3, [r2, #0]
 800c56c:	dc10      	bgt.n	800c590 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800c56e:	2300      	movs	r3, #0
 800c570:	68e0      	ldr	r0, [r4, #12]
 800c572:	a902      	add	r1, sp, #8
 800c574:	7013      	strb	r3, [r2, #0]
 800c576:	aa03      	add	r2, sp, #12
 800c578:	6803      	ldr	r3, [r0, #0]
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	4798      	blx	r3
 800c57e:	6823      	ldr	r3, [r4, #0]
 800c580:	2800      	cmp	r0, #0
 800c582:	d050      	beq.n	800c626 <_ZN8touchgfx3HAL4tickEv+0x156>
 800c584:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c588:	4620      	mov	r0, r4
 800c58a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800c58e:	4798      	blx	r3
 800c590:	2300      	movs	r3, #0
 800c592:	6960      	ldr	r0, [r4, #20]
 800c594:	f88d 3007 	strb.w	r3, [sp, #7]
 800c598:	b158      	cbz	r0, 800c5b2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800c59a:	6803      	ldr	r3, [r0, #0]
 800c59c:	f10d 0107 	add.w	r1, sp, #7
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	4798      	blx	r3
 800c5a4:	b128      	cbz	r0, 800c5b2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800c5a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5a8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800c5ac:	6803      	ldr	r3, [r0, #0]
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	4798      	blx	r3
 800c5b2:	f104 001c 	add.w	r0, r4, #28
 800c5b6:	f010 f8c3 	bl	801c740 <_ZN8touchgfx8Gestures4tickEv>
 800c5ba:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800c5be:	b30b      	cbz	r3, 800c604 <_ZN8touchgfx3HAL4tickEv+0x134>
 800c5c0:	6920      	ldr	r0, [r4, #16]
 800c5c2:	6803      	ldr	r3, [r0, #0]
 800c5c4:	691b      	ldr	r3, [r3, #16]
 800c5c6:	4798      	blx	r3
 800c5c8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c5ca:	4606      	mov	r6, r0
 800c5cc:	b903      	cbnz	r3, 800c5d0 <_ZN8touchgfx3HAL4tickEv+0x100>
 800c5ce:	6720      	str	r0, [r4, #112]	; 0x70
 800c5d0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c5d2:	4a1e      	ldr	r2, [pc, #120]	; (800c64c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800c5d4:	1af3      	subs	r3, r6, r3
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d914      	bls.n	800c604 <_ZN8touchgfx3HAL4tickEv+0x134>
 800c5da:	6920      	ldr	r0, [r4, #16]
 800c5dc:	6803      	ldr	r3, [r0, #0]
 800c5de:	699b      	ldr	r3, [r3, #24]
 800c5e0:	4798      	blx	r3
 800c5e2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c5e4:	2264      	movs	r2, #100	; 0x64
 800c5e6:	1af3      	subs	r3, r6, r3
 800c5e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5ec:	fbb0 f0f3 	udiv	r0, r0, r3
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	dc1d      	bgt.n	800c630 <_ZN8touchgfx3HAL4tickEv+0x160>
 800c5f4:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800c5f8:	6920      	ldr	r0, [r4, #16]
 800c5fa:	2100      	movs	r1, #0
 800c5fc:	6803      	ldr	r3, [r0, #0]
 800c5fe:	69db      	ldr	r3, [r3, #28]
 800c600:	4798      	blx	r3
 800c602:	6726      	str	r6, [r4, #112]	; 0x70
 800c604:	f001 ff22 	bl	800e44c <_ZN8touchgfx11Application11getInstanceEv>
 800c608:	6803      	ldr	r3, [r0, #0]
 800c60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c60c:	4798      	blx	r3
 800c60e:	6823      	ldr	r3, [r4, #0]
 800c610:	4620      	mov	r0, r4
 800c612:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c616:	4798      	blx	r3
 800c618:	2001      	movs	r0, #1
 800c61a:	f7f4 fa39 	bl	8000a90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800c61e:	2300      	movs	r3, #0
 800c620:	702b      	strb	r3, [r5, #0]
 800c622:	b004      	add	sp, #16
 800c624:	bd70      	pop	{r4, r5, r6, pc}
 800c626:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c62a:	4620      	mov	r0, r4
 800c62c:	4798      	blx	r3
 800c62e:	e7af      	b.n	800c590 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800c630:	2863      	cmp	r0, #99	; 0x63
 800c632:	bfcb      	itete	gt
 800c634:	2300      	movgt	r3, #0
 800c636:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800c63a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800c63e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800c642:	e7d9      	b.n	800c5f8 <_ZN8touchgfx3HAL4tickEv+0x128>
 800c644:	2002441c 	.word	0x2002441c
 800c648:	2002441d 	.word	0x2002441d
 800c64c:	05f5e100 	.word	0x05f5e100

0800c650 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800c650:	f7f5 ba1e 	b.w	8001a90 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800c654 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800c654:	6581      	str	r1, [r0, #88]	; 0x58
 800c656:	301c      	adds	r0, #28
 800c658:	f010 b870 	b.w	801c73c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800c65c <_ZN8touchgfx3HAL5touchEll>:
 800c65c:	b530      	push	{r4, r5, lr}
 800c65e:	b087      	sub	sp, #28
 800c660:	4604      	mov	r4, r0
 800c662:	a804      	add	r0, sp, #16
 800c664:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800c668:	f001 fcf0 	bl	800e04c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800c66c:	9b04      	ldr	r3, [sp, #16]
 800c66e:	a906      	add	r1, sp, #24
 800c670:	a803      	add	r0, sp, #12
 800c672:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c676:	9b05      	ldr	r3, [sp, #20]
 800c678:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800c67c:	f001 fd38 	bl	800e0f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800c680:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800c684:	f104 001c 	add.w	r0, r4, #28
 800c688:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800c68c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800c690:	b189      	cbz	r1, 800c6b6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800c692:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800c696:	9300      	str	r3, [sp, #0]
 800c698:	4613      	mov	r3, r2
 800c69a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800c69e:	462a      	mov	r2, r5
 800c6a0:	f010 f85c 	bl	801c75c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800c6a4:	b128      	cbz	r0, 800c6b2 <_ZN8touchgfx3HAL5touchEll+0x56>
 800c6a6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800c6aa:	65e3      	str	r3, [r4, #92]	; 0x5c
 800c6ac:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800c6b0:	6623      	str	r3, [r4, #96]	; 0x60
 800c6b2:	b007      	add	sp, #28
 800c6b4:	bd30      	pop	{r4, r5, pc}
 800c6b6:	f010 f891 	bl	801c7dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800c6c0:	e7f1      	b.n	800c6a6 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800c6c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800c6c2:	b510      	push	{r4, lr}
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d046      	beq.n	800c756 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800c6c8:	ea81 0002 	eor.w	r0, r1, r2
 800c6cc:	07c4      	lsls	r4, r0, #31
 800c6ce:	d508      	bpl.n	800c6e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800c6d0:	440b      	add	r3, r1
 800c6d2:	3a01      	subs	r2, #1
 800c6d4:	428b      	cmp	r3, r1
 800c6d6:	d93e      	bls.n	800c756 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800c6d8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800c6dc:	f801 0b01 	strb.w	r0, [r1], #1
 800c6e0:	e7f8      	b.n	800c6d4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800c6e2:	07d0      	lsls	r0, r2, #31
 800c6e4:	bf42      	ittt	mi
 800c6e6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800c6ea:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800c6ee:	f801 0b01 	strbmi.w	r0, [r1], #1
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	d911      	bls.n	800c71a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800c6f6:	ea81 0402 	eor.w	r4, r1, r2
 800c6fa:	4610      	mov	r0, r2
 800c6fc:	07a4      	lsls	r4, r4, #30
 800c6fe:	d022      	beq.n	800c746 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800c700:	f023 0401 	bic.w	r4, r3, #1
 800c704:	440c      	add	r4, r1
 800c706:	428c      	cmp	r4, r1
 800c708:	4602      	mov	r2, r0
 800c70a:	d904      	bls.n	800c716 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800c70c:	8812      	ldrh	r2, [r2, #0]
 800c70e:	3002      	adds	r0, #2
 800c710:	f821 2b02 	strh.w	r2, [r1], #2
 800c714:	e7f7      	b.n	800c706 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800c716:	f003 0301 	and.w	r3, r3, #1
 800c71a:	f023 0003 	bic.w	r0, r3, #3
 800c71e:	4408      	add	r0, r1
 800c720:	4288      	cmp	r0, r1
 800c722:	4614      	mov	r4, r2
 800c724:	d904      	bls.n	800c730 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800c726:	6824      	ldr	r4, [r4, #0]
 800c728:	3204      	adds	r2, #4
 800c72a:	f841 4b04 	str.w	r4, [r1], #4
 800c72e:	e7f7      	b.n	800c720 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800c730:	f003 0303 	and.w	r3, r3, #3
 800c734:	3a01      	subs	r2, #1
 800c736:	440b      	add	r3, r1
 800c738:	428b      	cmp	r3, r1
 800c73a:	d90c      	bls.n	800c756 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800c73c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800c740:	f801 0b01 	strb.w	r0, [r1], #1
 800c744:	e7f8      	b.n	800c738 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800c746:	0790      	lsls	r0, r2, #30
 800c748:	d0e7      	beq.n	800c71a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800c74a:	f832 0b02 	ldrh.w	r0, [r2], #2
 800c74e:	3b02      	subs	r3, #2
 800c750:	f821 0b02 	strh.w	r0, [r1], #2
 800c754:	e7e1      	b.n	800c71a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800c756:	2001      	movs	r0, #1
 800c758:	bd10      	pop	{r4, pc}

0800c75a <_ZN8touchgfx3HAL7noTouchEv>:
 800c75a:	b510      	push	{r4, lr}
 800c75c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800c760:	4604      	mov	r4, r0
 800c762:	b153      	cbz	r3, 800c77a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800c764:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800c768:	2101      	movs	r1, #1
 800c76a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800c76e:	301c      	adds	r0, #28
 800c770:	f010 f834 	bl	801c7dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800c774:	2300      	movs	r3, #0
 800c776:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800c77a:	bd10      	pop	{r4, pc}

0800c77c <_ZN8touchgfx3HAL3lcdEv>:
 800c77c:	4b04      	ldr	r3, [pc, #16]	; (800c790 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800c784:	b10a      	cbz	r2, 800c78a <_ZN8touchgfx3HAL3lcdEv+0xe>
 800c786:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c788:	b900      	cbnz	r0, 800c78c <_ZN8touchgfx3HAL3lcdEv+0x10>
 800c78a:	6898      	ldr	r0, [r3, #8]
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop
 800c790:	20024418 	.word	0x20024418

0800c794 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800c794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c798:	b085      	sub	sp, #20
 800c79a:	4604      	mov	r4, r0
 800c79c:	2000      	movs	r0, #0
 800c79e:	4699      	mov	r9, r3
 800c7a0:	ad04      	add	r5, sp, #16
 800c7a2:	460f      	mov	r7, r1
 800c7a4:	4690      	mov	r8, r2
 800c7a6:	f845 0d04 	str.w	r0, [r5, #-4]!
 800c7aa:	69a0      	ldr	r0, [r4, #24]
 800c7ac:	6806      	ldr	r6, [r0, #0]
 800c7ae:	9501      	str	r5, [sp, #4]
 800c7b0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800c7b4:	9500      	str	r5, [sp, #0]
 800c7b6:	6835      	ldr	r5, [r6, #0]
 800c7b8:	47a8      	blx	r5
 800c7ba:	4d10      	ldr	r5, [pc, #64]	; (800c7fc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800c7bc:	4606      	mov	r6, r0
 800c7be:	f8a5 9000 	strh.w	r9, [r5]
 800c7c2:	f7ff ffdb 	bl	800c77c <_ZN8touchgfx3HAL3lcdEv>
 800c7c6:	6803      	ldr	r3, [r0, #0]
 800c7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ca:	4798      	blx	r3
 800c7cc:	b128      	cbz	r0, 800c7da <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800c7ce:	2801      	cmp	r0, #1
 800c7d0:	d00b      	beq.n	800c7ea <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800c7d2:	4630      	mov	r0, r6
 800c7d4:	b005      	add	sp, #20
 800c7d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7da:	882b      	ldrh	r3, [r5, #0]
 800c7dc:	fb08 7203 	mla	r2, r8, r3, r7
 800c7e0:	9b03      	ldr	r3, [sp, #12]
 800c7e2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800c7e6:	63e3      	str	r3, [r4, #60]	; 0x3c
 800c7e8:	e7f3      	b.n	800c7d2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800c7ea:	882a      	ldrh	r2, [r5, #0]
 800c7ec:	9b03      	ldr	r3, [sp, #12]
 800c7ee:	fb08 7202 	mla	r2, r8, r2, r7
 800c7f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800c7f6:	1a9a      	subs	r2, r3, r2
 800c7f8:	63e2      	str	r2, [r4, #60]	; 0x3c
 800c7fa:	e7ea      	b.n	800c7d2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800c7fc:	20024412 	.word	0x20024412

0800c800 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800c800:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c802:	b08b      	sub	sp, #44	; 0x2c
 800c804:	4617      	mov	r7, r2
 800c806:	4604      	mov	r4, r0
 800c808:	460e      	mov	r6, r1
 800c80a:	461d      	mov	r5, r3
 800c80c:	f7ff ffb6 	bl	800c77c <_ZN8touchgfx3HAL3lcdEv>
 800c810:	6803      	ldr	r3, [r0, #0]
 800c812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c814:	4798      	blx	r3
 800c816:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800c81a:	9007      	str	r0, [sp, #28]
 800c81c:	4631      	mov	r1, r6
 800c81e:	6822      	ldr	r2, [r4, #0]
 800c820:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800c824:	4b0c      	ldr	r3, [pc, #48]	; (800c858 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800c826:	4620      	mov	r0, r4
 800c828:	881b      	ldrh	r3, [r3, #0]
 800c82a:	9306      	str	r3, [sp, #24]
 800c82c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800c830:	9305      	str	r3, [sp, #20]
 800c832:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800c836:	9304      	str	r3, [sp, #16]
 800c838:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800c83c:	9303      	str	r3, [sp, #12]
 800c83e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800c842:	9302      	str	r3, [sp, #8]
 800c844:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800c848:	e9cd 5300 	strd	r5, r3, [sp]
 800c84c:	463b      	mov	r3, r7
 800c84e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800c850:	2200      	movs	r2, #0
 800c852:	47a8      	blx	r5
 800c854:	b00b      	add	sp, #44	; 0x2c
 800c856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c858:	20024412 	.word	0x20024412

0800c85c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800c85c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c860:	4698      	mov	r8, r3
 800c862:	6803      	ldr	r3, [r0, #0]
 800c864:	b08b      	sub	sp, #44	; 0x2c
 800c866:	4617      	mov	r7, r2
 800c868:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800c86a:	460e      	mov	r6, r1
 800c86c:	4b13      	ldr	r3, [pc, #76]	; (800c8bc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800c86e:	4604      	mov	r4, r0
 800c870:	f8b3 9000 	ldrh.w	r9, [r3]
 800c874:	f7ff ff82 	bl	800c77c <_ZN8touchgfx3HAL3lcdEv>
 800c878:	6803      	ldr	r3, [r0, #0]
 800c87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c87c:	4798      	blx	r3
 800c87e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800c882:	2200      	movs	r2, #0
 800c884:	4631      	mov	r1, r6
 800c886:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800c88a:	2302      	movs	r3, #2
 800c88c:	4620      	mov	r0, r4
 800c88e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800c892:	2301      	movs	r3, #1
 800c894:	9305      	str	r3, [sp, #20]
 800c896:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800c89a:	9304      	str	r3, [sp, #16]
 800c89c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800c8a0:	9303      	str	r3, [sp, #12]
 800c8a2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800c8a6:	9302      	str	r3, [sp, #8]
 800c8a8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800c8ac:	e9cd 8300 	strd	r8, r3, [sp]
 800c8b0:	463b      	mov	r3, r7
 800c8b2:	47a8      	blx	r5
 800c8b4:	b00b      	add	sp, #44	; 0x2c
 800c8b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8ba:	bf00      	nop
 800c8bc:	20024412 	.word	0x20024412

0800c8c0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800c8c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8c4:	4698      	mov	r8, r3
 800c8c6:	6803      	ldr	r3, [r0, #0]
 800c8c8:	b087      	sub	sp, #28
 800c8ca:	460e      	mov	r6, r1
 800c8cc:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800c8ce:	4617      	mov	r7, r2
 800c8d0:	4b0f      	ldr	r3, [pc, #60]	; (800c910 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	f8b3 9000 	ldrh.w	r9, [r3]
 800c8d8:	f7ff ff50 	bl	800c77c <_ZN8touchgfx3HAL3lcdEv>
 800c8dc:	6803      	ldr	r3, [r0, #0]
 800c8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e0:	4798      	blx	r3
 800c8e2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800c8e6:	463a      	mov	r2, r7
 800c8e8:	4631      	mov	r1, r6
 800c8ea:	f8cd 900c 	str.w	r9, [sp, #12]
 800c8ee:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800c8f2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	9302      	str	r3, [sp, #8]
 800c8fa:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800c8fe:	9301      	str	r3, [sp, #4]
 800c900:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800c904:	9300      	str	r3, [sp, #0]
 800c906:	4643      	mov	r3, r8
 800c908:	47a8      	blx	r5
 800c90a:	b007      	add	sp, #28
 800c90c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c910:	20024412 	.word	0x20024412

0800c914 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800c914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c918:	4604      	mov	r4, r0
 800c91a:	b08f      	sub	sp, #60	; 0x3c
 800c91c:	4610      	mov	r0, r2
 800c91e:	460d      	mov	r5, r1
 800c920:	4691      	mov	r9, r2
 800c922:	461e      	mov	r6, r3
 800c924:	f004 f94a 	bl	8010bbc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800c928:	2800      	cmp	r0, #0
 800c92a:	f000 809d 	beq.w	800ca68 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800c92e:	6823      	ldr	r3, [r4, #0]
 800c930:	4620      	mov	r0, r4
 800c932:	f8df b198 	ldr.w	fp, [pc, #408]	; 800cacc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800c936:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800c93a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c93c:	4798      	blx	r3
 800c93e:	6823      	ldr	r3, [r4, #0]
 800c940:	4620      	mov	r0, r4
 800c942:	f8df a18c 	ldr.w	sl, [pc, #396]	; 800cad0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800c946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c948:	4798      	blx	r3
 800c94a:	f8bb 3000 	ldrh.w	r3, [fp]
 800c94e:	4f5c      	ldr	r7, [pc, #368]	; (800cac0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800c950:	9301      	str	r3, [sp, #4]
 800c952:	f8ba 3000 	ldrh.w	r3, [sl]
 800c956:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800c95a:	4640      	mov	r0, r8
 800c95c:	9302      	str	r3, [sp, #8]
 800c95e:	883b      	ldrh	r3, [r7, #0]
 800c960:	9303      	str	r3, [sp, #12]
 800c962:	4b58      	ldr	r3, [pc, #352]	; (800cac4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800c964:	881a      	ldrh	r2, [r3, #0]
 800c966:	9305      	str	r3, [sp, #20]
 800c968:	9204      	str	r2, [sp, #16]
 800c96a:	f004 f9bb 	bl	8010ce4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800c96e:	8038      	strh	r0, [r7, #0]
 800c970:	4640      	mov	r0, r8
 800c972:	f004 f9eb 	bl	8010d4c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800c976:	9b05      	ldr	r3, [sp, #20]
 800c978:	b280      	uxth	r0, r0
 800c97a:	8018      	strh	r0, [r3, #0]
 800c97c:	4b52      	ldr	r3, [pc, #328]	; (800cac8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d174      	bne.n	800ca6e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800c984:	883b      	ldrh	r3, [r7, #0]
 800c986:	f8aa 0000 	strh.w	r0, [sl]
 800c98a:	f8ab 3000 	strh.w	r3, [fp]
 800c98e:	4648      	mov	r0, r9
 800c990:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800c994:	f004 f912 	bl	8010bbc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800c998:	2200      	movs	r2, #0
 800c99a:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800c99e:	4611      	mov	r1, r2
 800c9a0:	4628      	mov	r0, r5
 800c9a2:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800c9a6:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800c9aa:	f7f7 fe23 	bl	80045f4 <_ZN8touchgfx8Drawable5setXYEss>
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800c9b4:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800c9b8:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	dd5c      	ble.n	800ca7a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800c9c0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	dd58      	ble.n	800ca7a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800c9c8:	462a      	mov	r2, r5
 800c9ca:	ab0a      	add	r3, sp, #40	; 0x28
 800c9cc:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800c9d0:	6851      	ldr	r1, [r2, #4]
 800c9d2:	c303      	stmia	r3!, {r0, r1}
 800c9d4:	4631      	mov	r1, r6
 800c9d6:	a80a      	add	r0, sp, #40	; 0x28
 800c9d8:	f7ff fc00 	bl	800c1dc <_ZN8touchgfx4RectaNERKS0_>
 800c9dc:	4b38      	ldr	r3, [pc, #224]	; (800cac0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800c9de:	2100      	movs	r1, #0
 800c9e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c9e4:	4b37      	ldr	r3, [pc, #220]	; (800cac4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800c9e6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800c9ea:	aa0a      	add	r2, sp, #40	; 0x28
 800c9ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9f0:	910c      	str	r1, [sp, #48]	; 0x30
 800c9f2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800c9f6:	ab08      	add	r3, sp, #32
 800c9f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c9fc:	e883 0003 	stmia.w	r3, {r0, r1}
 800ca00:	4618      	mov	r0, r3
 800ca02:	a90c      	add	r1, sp, #48	; 0x30
 800ca04:	f7ff fbea 	bl	800c1dc <_ZN8touchgfx4RectaNERKS0_>
 800ca08:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d13c      	bne.n	800ca88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800ca0e:	2000      	movs	r0, #0
 800ca10:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800ca14:	2600      	movs	r6, #0
 800ca16:	696b      	ldr	r3, [r5, #20]
 800ca18:	a908      	add	r1, sp, #32
 800ca1a:	682a      	ldr	r2, [r5, #0]
 800ca1c:	4628      	mov	r0, r5
 800ca1e:	9305      	str	r3, [sp, #20]
 800ca20:	616e      	str	r6, [r5, #20]
 800ca22:	6892      	ldr	r2, [r2, #8]
 800ca24:	4790      	blx	r2
 800ca26:	9b05      	ldr	r3, [sp, #20]
 800ca28:	4652      	mov	r2, sl
 800ca2a:	4649      	mov	r1, r9
 800ca2c:	616b      	str	r3, [r5, #20]
 800ca2e:	4628      	mov	r0, r5
 800ca30:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800ca34:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800ca38:	f7f7 fddc 	bl	80045f4 <_ZN8touchgfx8Drawable5setXYEss>
 800ca3c:	9a01      	ldr	r2, [sp, #4]
 800ca3e:	4b23      	ldr	r3, [pc, #140]	; (800cacc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800ca40:	4620      	mov	r0, r4
 800ca42:	801a      	strh	r2, [r3, #0]
 800ca44:	9a02      	ldr	r2, [sp, #8]
 800ca46:	4b22      	ldr	r3, [pc, #136]	; (800cad0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800ca48:	801a      	strh	r2, [r3, #0]
 800ca4a:	9a03      	ldr	r2, [sp, #12]
 800ca4c:	4b1c      	ldr	r3, [pc, #112]	; (800cac0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800ca4e:	801a      	strh	r2, [r3, #0]
 800ca50:	4b1c      	ldr	r3, [pc, #112]	; (800cac4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800ca52:	9a04      	ldr	r2, [sp, #16]
 800ca54:	801a      	strh	r2, [r3, #0]
 800ca56:	6823      	ldr	r3, [r4, #0]
 800ca58:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800ca5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca5e:	4798      	blx	r3
 800ca60:	6823      	ldr	r3, [r4, #0]
 800ca62:	4620      	mov	r0, r4
 800ca64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca66:	4798      	blx	r3
 800ca68:	b00f      	add	sp, #60	; 0x3c
 800ca6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca6e:	883b      	ldrh	r3, [r7, #0]
 800ca70:	f8ab 0000 	strh.w	r0, [fp]
 800ca74:	f8aa 3000 	strh.w	r3, [sl]
 800ca78:	e789      	b.n	800c98e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800ca7a:	462a      	mov	r2, r5
 800ca7c:	ab0a      	add	r3, sp, #40	; 0x28
 800ca7e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800ca82:	6851      	ldr	r1, [r2, #4]
 800ca84:	c303      	stmia	r3!, {r0, r1}
 800ca86:	e7a9      	b.n	800c9dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800ca88:	a807      	add	r0, sp, #28
 800ca8a:	f004 fa9b 	bl	8010fc4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800ca8e:	4606      	mov	r6, r0
 800ca90:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800ca92:	6803      	ldr	r3, [r0, #0]
 800ca94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca96:	4798      	blx	r3
 800ca98:	4286      	cmp	r6, r0
 800ca9a:	d1b8      	bne.n	800ca0e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800ca9c:	f7ff fe6e 	bl	800c77c <_ZN8touchgfx3HAL3lcdEv>
 800caa0:	6803      	ldr	r3, [r0, #0]
 800caa2:	4606      	mov	r6, r0
 800caa4:	a807      	add	r0, sp, #28
 800caa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caa8:	9305      	str	r3, [sp, #20]
 800caaa:	f004 fa8b 	bl	8010fc4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800caae:	9b05      	ldr	r3, [sp, #20]
 800cab0:	4601      	mov	r1, r0
 800cab2:	4630      	mov	r0, r6
 800cab4:	4798      	blx	r3
 800cab6:	f080 0001 	eor.w	r0, r0, #1
 800caba:	b2c0      	uxtb	r0, r0
 800cabc:	e7a8      	b.n	800ca10 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800cabe:	bf00      	nop
 800cac0:	2002440c 	.word	0x2002440c
 800cac4:	2002440e 	.word	0x2002440e
 800cac8:	20024410 	.word	0x20024410
 800cacc:	20024412 	.word	0x20024412
 800cad0:	20024414 	.word	0x20024414

0800cad4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800cad4:	4b07      	ldr	r3, [pc, #28]	; (800caf4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800cad6:	b510      	push	{r4, lr}
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	4604      	mov	r4, r0
 800cadc:	b13b      	cbz	r3, 800caee <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800cade:	6803      	ldr	r3, [r0, #0]
 800cae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cae2:	4798      	blx	r3
 800cae4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cae6:	4283      	cmp	r3, r0
 800cae8:	d101      	bne.n	800caee <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800caea:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800caec:	bd10      	pop	{r4, pc}
 800caee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800caf0:	e7fc      	b.n	800caec <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800caf2:	bf00      	nop
 800caf4:	20024416 	.word	0x20024416

0800caf8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800caf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cafc:	461d      	mov	r5, r3
 800cafe:	b08a      	sub	sp, #40	; 0x28
 800cb00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb04:	4690      	mov	r8, r2
 800cb06:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800cb0a:	2400      	movs	r4, #0
 800cb0c:	4607      	mov	r7, r0
 800cb0e:	fb06 8505 	mla	r5, r6, r5, r8
 800cb12:	9404      	str	r4, [sp, #16]
 800cb14:	f88d 4020 	strb.w	r4, [sp, #32]
 800cb18:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800cb1c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800cb20:	f8ad 3018 	strh.w	r3, [sp, #24]
 800cb24:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800cb28:	f8ad 301a 	strh.w	r3, [sp, #26]
 800cb2c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800cb30:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cb34:	f7ff ffce 	bl	800cad4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800cb38:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f8ad 601e 	strh.w	r6, [sp, #30]
 800cb42:	a901      	add	r1, sp, #4
 800cb44:	9505      	str	r5, [sp, #20]
 800cb46:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800cb4a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 800cb4e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800cb52:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800cb56:	6803      	ldr	r3, [r0, #0]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	4798      	blx	r3
 800cb5c:	b00a      	add	sp, #40	; 0x28
 800cb5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cb62 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800cb62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb66:	b08b      	sub	sp, #44	; 0x2c
 800cb68:	2400      	movs	r4, #0
 800cb6a:	4691      	mov	r9, r2
 800cb6c:	461d      	mov	r5, r3
 800cb6e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800cb72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb76:	4688      	mov	r8, r1
 800cb78:	4607      	mov	r7, r0
 800cb7a:	9404      	str	r4, [sp, #16]
 800cb7c:	fb06 9505 	mla	r5, r6, r5, r9
 800cb80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb84:	f7ff ffa6 	bl	800cad4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800cb88:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800cb8c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f8ad 3018 	strh.w	r3, [sp, #24]
 800cb96:	a901      	add	r1, sp, #4
 800cb98:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800cb9c:	9505      	str	r5, [sp, #20]
 800cb9e:	f8ad 301a 	strh.w	r3, [sp, #26]
 800cba2:	f8ad 401c 	strh.w	r4, [sp, #28]
 800cba6:	f8ad 601e 	strh.w	r6, [sp, #30]
 800cbaa:	f8cd 8010 	str.w	r8, [sp, #16]
 800cbae:	f8ad 4020 	strh.w	r4, [sp, #32]
 800cbb2:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800cbb6:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800cbba:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800cbbe:	6803      	ldr	r3, [r0, #0]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	4798      	blx	r3
 800cbc4:	b00b      	add	sp, #44	; 0x2c
 800cbc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800cbcc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800cbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd0:	b08a      	sub	sp, #40	; 0x28
 800cbd2:	4698      	mov	r8, r3
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	4606      	mov	r6, r0
 800cbd8:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800cbdc:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 800cbe0:	2d0b      	cmp	r5, #11
 800cbe2:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 800cbe6:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 800cbea:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 800cbee:	9304      	str	r3, [sp, #16]
 800cbf0:	d137      	bne.n	800cc62 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800cbf2:	2380      	movs	r3, #128	; 0x80
 800cbf4:	f88d 0020 	strb.w	r0, [sp, #32]
 800cbf8:	4630      	mov	r0, r6
 800cbfa:	9203      	str	r2, [sp, #12]
 800cbfc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800cc00:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800cc04:	f8ad 3018 	strh.w	r3, [sp, #24]
 800cc08:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800cc0c:	f8ad 301a 	strh.w	r3, [sp, #26]
 800cc10:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800cc14:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cc18:	f7ff ff5c 	bl	800cad4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800cc1c:	2c0b      	cmp	r4, #11
 800cc1e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800cc22:	f8ad 701e 	strh.w	r7, [sp, #30]
 800cc26:	bf94      	ite	ls
 800cc28:	4b19      	ldrls	r3, [pc, #100]	; (800cc90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800cc2a:	2100      	movhi	r1, #0
 800cc2c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800cc30:	bf98      	it	ls
 800cc32:	5d19      	ldrbls	r1, [r3, r4]
 800cc34:	fb02 8307 	mla	r3, r2, r7, r8
 800cc38:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800cc3c:	10c9      	asrs	r1, r1, #3
 800cc3e:	fb01 0003 	mla	r0, r1, r3, r0
 800cc42:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800cc46:	a901      	add	r1, sp, #4
 800cc48:	9005      	str	r0, [sp, #20]
 800cc4a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800cc4e:	2300      	movs	r3, #0
 800cc50:	6870      	ldr	r0, [r6, #4]
 800cc52:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800cc56:	6803      	ldr	r3, [r0, #0]
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	4798      	blx	r3
 800cc5c:	b00a      	add	sp, #40	; 0x28
 800cc5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc62:	2d02      	cmp	r5, #2
 800cc64:	d109      	bne.n	800cc7a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800cc66:	28ff      	cmp	r0, #255	; 0xff
 800cc68:	d105      	bne.n	800cc76 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800cc6a:	f1bc 0f00 	cmp.w	ip, #0
 800cc6e:	bf14      	ite	ne
 800cc70:	2340      	movne	r3, #64	; 0x40
 800cc72:	2320      	moveq	r3, #32
 800cc74:	e7be      	b.n	800cbf4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800cc76:	2340      	movs	r3, #64	; 0x40
 800cc78:	e7bc      	b.n	800cbf4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800cc7a:	28ff      	cmp	r0, #255	; 0xff
 800cc7c:	d105      	bne.n	800cc8a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800cc7e:	f1bc 0f00 	cmp.w	ip, #0
 800cc82:	bf14      	ite	ne
 800cc84:	2304      	movne	r3, #4
 800cc86:	2301      	moveq	r3, #1
 800cc88:	e7b4      	b.n	800cbf4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800cc8a:	2304      	movs	r3, #4
 800cc8c:	e7b2      	b.n	800cbf4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800cc8e:	bf00      	nop
 800cc90:	08020760 	.word	0x08020760

0800cc94 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800cc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc98:	b08b      	sub	sp, #44	; 0x2c
 800cc9a:	461d      	mov	r5, r3
 800cc9c:	2400      	movs	r4, #0
 800cc9e:	4688      	mov	r8, r1
 800cca0:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 800cca4:	4693      	mov	fp, r2
 800cca6:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 800ccaa:	4607      	mov	r7, r0
 800ccac:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800ccb0:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 800ccb4:	9404      	str	r4, [sp, #16]
 800ccb6:	bf14      	ite	ne
 800ccb8:	2308      	movne	r3, #8
 800ccba:	2302      	moveq	r3, #2
 800ccbc:	fb05 b50a 	mla	r5, r5, sl, fp
 800ccc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ccc4:	f7ff ff06 	bl	800cad4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ccc8:	2e0b      	cmp	r6, #11
 800ccca:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800ccce:	a901      	add	r1, sp, #4
 800ccd0:	bf98      	it	ls
 800ccd2:	4b13      	ldrls	r3, [pc, #76]	; (800cd20 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800ccd4:	f8ad a01e 	strh.w	sl, [sp, #30]
 800ccd8:	bf98      	it	ls
 800ccda:	5d9c      	ldrbls	r4, [r3, r6]
 800ccdc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800cce0:	10e4      	asrs	r4, r4, #3
 800cce2:	f8cd 8010 	str.w	r8, [sp, #16]
 800cce6:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ccea:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800ccee:	fb04 0405 	mla	r4, r4, r5, r0
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	9405      	str	r4, [sp, #20]
 800ccfc:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cd00:	f88d 9020 	strb.w	r9, [sp, #32]
 800cd04:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 800cd08:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800cd0c:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 800cd10:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 800cd14:	6803      	ldr	r3, [r0, #0]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	4798      	blx	r3
 800cd1a:	b00b      	add	sp, #44	; 0x2c
 800cd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd20:	08020760 	.word	0x08020760

0800cd24 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800cd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd28:	461e      	mov	r6, r3
 800cd2a:	4b0a      	ldr	r3, [pc, #40]	; (800cd54 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800cd2c:	460f      	mov	r7, r1
 800cd2e:	4690      	mov	r8, r2
 800cd30:	881d      	ldrh	r5, [r3, #0]
 800cd32:	f7ff fd23 	bl	800c77c <_ZN8touchgfx3HAL3lcdEv>
 800cd36:	6803      	ldr	r3, [r0, #0]
 800cd38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd3a:	4798      	blx	r3
 800cd3c:	280b      	cmp	r0, #11
 800cd3e:	bf96      	itet	ls
 800cd40:	4b05      	ldrls	r3, [pc, #20]	; (800cd58 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800cd42:	2400      	movhi	r4, #0
 800cd44:	5c1c      	ldrbls	r4, [r3, r0]
 800cd46:	fb08 7005 	mla	r0, r8, r5, r7
 800cd4a:	10e4      	asrs	r4, r4, #3
 800cd4c:	fb04 6000 	mla	r0, r4, r0, r6
 800cd50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd54:	20024412 	.word	0x20024412
 800cd58:	08020760 	.word	0x08020760

0800cd5c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800cd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd5e:	b08b      	sub	sp, #44	; 0x2c
 800cd60:	461f      	mov	r7, r3
 800cd62:	4604      	mov	r4, r0
 800cd64:	4616      	mov	r6, r2
 800cd66:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800cd6a:	2500      	movs	r5, #0
 800cd6c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800cd70:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800cd74:	9504      	str	r5, [sp, #16]
 800cd76:	f8ad 3018 	strh.w	r3, [sp, #24]
 800cd7a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800cd7e:	f8ad 301a 	strh.w	r3, [sp, #26]
 800cd82:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800cd86:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cd8a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800cd8e:	f88d 3020 	strb.w	r3, [sp, #32]
 800cd92:	f7ff fe9f 	bl	800cad4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800cd96:	463a      	mov	r2, r7
 800cd98:	4631      	mov	r1, r6
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	4620      	mov	r0, r4
 800cd9e:	f7ff ffc1 	bl	800cd24 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800cda2:	4b0e      	ldr	r3, [pc, #56]	; (800cddc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800cda4:	9005      	str	r0, [sp, #20]
 800cda6:	881b      	ldrh	r3, [r3, #0]
 800cda8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cdac:	f7ff fce6 	bl	800c77c <_ZN8touchgfx3HAL3lcdEv>
 800cdb0:	6803      	ldr	r3, [r0, #0]
 800cdb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdb4:	4798      	blx	r3
 800cdb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cdb8:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800cdbc:	a901      	add	r1, sp, #4
 800cdbe:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800cdc2:	9304      	str	r3, [sp, #16]
 800cdc4:	6860      	ldr	r0, [r4, #4]
 800cdc6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800cdca:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800cdce:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800cdd2:	6803      	ldr	r3, [r0, #0]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	4798      	blx	r3
 800cdd8:	b00b      	add	sp, #44	; 0x2c
 800cdda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cddc:	20024412 	.word	0x20024412

0800cde0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800cde0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cde2:	b08d      	sub	sp, #52	; 0x34
 800cde4:	2501      	movs	r5, #1
 800cde6:	4604      	mov	r4, r0
 800cde8:	466b      	mov	r3, sp
 800cdea:	9503      	str	r5, [sp, #12]
 800cdec:	e883 0006 	stmia.w	r3, {r1, r2}
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	f8bd 6000 	ldrh.w	r6, [sp]
 800cdf6:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800cdfa:	9306      	str	r3, [sp, #24]
 800cdfc:	6803      	ldr	r3, [r0, #0]
 800cdfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce00:	4798      	blx	r3
 800ce02:	463a      	mov	r2, r7
 800ce04:	4631      	mov	r1, r6
 800ce06:	4603      	mov	r3, r0
 800ce08:	4620      	mov	r0, r4
 800ce0a:	f7ff ff8b 	bl	800cd24 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ce0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ce10:	9004      	str	r0, [sp, #16]
 800ce12:	9307      	str	r3, [sp, #28]
 800ce14:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800ce18:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ce1c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ce20:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800ce24:	4b0e      	ldr	r3, [pc, #56]	; (800ce60 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800ce26:	881b      	ldrh	r3, [r3, #0]
 800ce28:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800ce2c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800ce30:	f7ff fca4 	bl	800c77c <_ZN8touchgfx3HAL3lcdEv>
 800ce34:	6803      	ldr	r3, [r0, #0]
 800ce36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce38:	4798      	blx	r3
 800ce3a:	23ff      	movs	r3, #255	; 0xff
 800ce3c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800ce40:	a903      	add	r1, sp, #12
 800ce42:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800ce46:	6860      	ldr	r0, [r4, #4]
 800ce48:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800ce4c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800ce50:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800ce54:	6803      	ldr	r3, [r0, #0]
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	4798      	blx	r3
 800ce5a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800ce5c:	b00d      	add	sp, #52	; 0x34
 800ce5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce60:	20024412 	.word	0x20024412

0800ce64 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800ce64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce68:	b08c      	sub	sp, #48	; 0x30
 800ce6a:	461e      	mov	r6, r3
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	4604      	mov	r4, r0
 800ce70:	466d      	mov	r5, sp
 800ce72:	9306      	str	r3, [sp, #24]
 800ce74:	6803      	ldr	r3, [r0, #0]
 800ce76:	e885 0006 	stmia.w	r5, {r1, r2}
 800ce7a:	2501      	movs	r5, #1
 800ce7c:	f8bd 7000 	ldrh.w	r7, [sp]
 800ce80:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800ce84:	9503      	str	r5, [sp, #12]
 800ce86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce88:	4798      	blx	r3
 800ce8a:	4642      	mov	r2, r8
 800ce8c:	4639      	mov	r1, r7
 800ce8e:	4603      	mov	r3, r0
 800ce90:	4620      	mov	r0, r4
 800ce92:	f7ff ff47 	bl	800cd24 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ce96:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800ce9a:	9004      	str	r0, [sp, #16]
 800ce9c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800cea0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800cea4:	9607      	str	r6, [sp, #28]
 800cea6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800ceaa:	4b10      	ldr	r3, [pc, #64]	; (800ceec <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800ceac:	881b      	ldrh	r3, [r3, #0]
 800ceae:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800ceb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ceb4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800ceb8:	f7ff fc60 	bl	800c77c <_ZN8touchgfx3HAL3lcdEv>
 800cebc:	6803      	ldr	r3, [r0, #0]
 800cebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec0:	4798      	blx	r3
 800cec2:	23ff      	movs	r3, #255	; 0xff
 800cec4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800cec8:	a903      	add	r1, sp, #12
 800ceca:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800cece:	6860      	ldr	r0, [r4, #4]
 800ced0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800ced4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800ced8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800cedc:	6803      	ldr	r3, [r0, #0]
 800cede:	685b      	ldr	r3, [r3, #4]
 800cee0:	4798      	blx	r3
 800cee2:	4630      	mov	r0, r6
 800cee4:	b00c      	add	sp, #48	; 0x30
 800cee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceea:	bf00      	nop
 800ceec:	20024412 	.word	0x20024412

0800cef0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800cef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cef2:	b085      	sub	sp, #20
 800cef4:	4605      	mov	r5, r0
 800cef6:	ac02      	add	r4, sp, #8
 800cef8:	e884 0006 	stmia.w	r4, {r1, r2}
 800cefc:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800cf00:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800cf04:	f7ff fde6 	bl	800cad4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800cf08:	4631      	mov	r1, r6
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	463a      	mov	r2, r7
 800cf0e:	4628      	mov	r0, r5
 800cf10:	f7ff ff08 	bl	800cd24 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800cf14:	4a05      	ldr	r2, [pc, #20]	; (800cf2c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800cf16:	682b      	ldr	r3, [r5, #0]
 800cf18:	8812      	ldrh	r2, [r2, #0]
 800cf1a:	9200      	str	r2, [sp, #0]
 800cf1c:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 800cf1e:	4603      	mov	r3, r0
 800cf20:	4628      	mov	r0, r5
 800cf22:	e894 0006 	ldmia.w	r4, {r1, r2}
 800cf26:	47b0      	blx	r6
 800cf28:	b005      	add	sp, #20
 800cf2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf2c:	20024412 	.word	0x20024412

0800cf30 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800cf30:	b570      	push	{r4, r5, r6, lr}
 800cf32:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800cf36:	4604      	mov	r4, r0
 800cf38:	b19b      	cbz	r3, 800cf62 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800cf3a:	2002      	movs	r0, #2
 800cf3c:	f7f3 fdd8 	bl	8000af0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800cf40:	2300      	movs	r3, #0
 800cf42:	4620      	mov	r0, r4
 800cf44:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800cf48:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800cf4c:	6823      	ldr	r3, [r4, #0]
 800cf4e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 800cf52:	f7ff fdbf 	bl	800cad4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800cf56:	4601      	mov	r1, r0
 800cf58:	4620      	mov	r0, r4
 800cf5a:	462b      	mov	r3, r5
 800cf5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf60:	4718      	bx	r3
 800cf62:	bd70      	pop	{r4, r5, r6, pc}

0800cf64 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800cf64:	b570      	push	{r4, r5, r6, lr}
 800cf66:	4605      	mov	r5, r0
 800cf68:	460c      	mov	r4, r1
 800cf6a:	2003      	movs	r0, #3
 800cf6c:	b149      	cbz	r1, 800cf82 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800cf6e:	f7f3 fd5f 	bl	8000a30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800cf72:	6928      	ldr	r0, [r5, #16]
 800cf74:	b168      	cbz	r0, 800cf92 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800cf76:	6803      	ldr	r3, [r0, #0]
 800cf78:	2101      	movs	r1, #1
 800cf7a:	695b      	ldr	r3, [r3, #20]
 800cf7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf80:	4718      	bx	r3
 800cf82:	f7f3 fd85 	bl	8000a90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800cf86:	6928      	ldr	r0, [r5, #16]
 800cf88:	b118      	cbz	r0, 800cf92 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800cf8a:	6803      	ldr	r3, [r0, #0]
 800cf8c:	4621      	mov	r1, r4
 800cf8e:	695b      	ldr	r3, [r3, #20]
 800cf90:	e7f4      	b.n	800cf7c <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800cf92:	bd70      	pop	{r4, r5, r6, pc}

0800cf94 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800cf94:	b538      	push	{r3, r4, r5, lr}
 800cf96:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	460d      	mov	r5, r1
 800cf9e:	428b      	cmp	r3, r1
 800cfa0:	d006      	beq.n	800cfb0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800cfa2:	6803      	ldr	r3, [r0, #0]
 800cfa4:	b929      	cbnz	r1, 800cfb2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800cfa6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800cfaa:	4798      	blx	r3
 800cfac:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800cfb0:	bd38      	pop	{r3, r4, r5, pc}
 800cfb2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800cfb6:	e7f8      	b.n	800cfaa <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800cfb8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800cfb8:	4b0d      	ldr	r3, [pc, #52]	; (800cff0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800cfba:	b510      	push	{r4, lr}
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	4604      	mov	r4, r0
 800cfc0:	b95b      	cbnz	r3, 800cfda <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800cfc2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800cfc6:	2b02      	cmp	r3, #2
 800cfc8:	d007      	beq.n	800cfda <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800cfca:	6840      	ldr	r0, [r0, #4]
 800cfcc:	f000 f912 	bl	800d1f4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800cfd0:	b118      	cbz	r0, 800cfda <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800cfd2:	6862      	ldr	r2, [r4, #4]
 800cfd4:	7a53      	ldrb	r3, [r2, #9]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d0fc      	beq.n	800cfd4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800cfda:	f7f4 fd51 	bl	8001a80 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800cfde:	4620      	mov	r0, r4
 800cfe0:	2100      	movs	r1, #0
 800cfe2:	f7ff ffd7 	bl	800cf94 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	f7ff fd74 	bl	800cad4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800cfec:	bd10      	pop	{r4, pc}
 800cfee:	bf00      	nop
 800cff0:	20024416 	.word	0x20024416

0800cff4 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800cff4:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800cff8:	1a13      	subs	r3, r2, r0
 800cffa:	4258      	negs	r0, r3
 800cffc:	4158      	adcs	r0, r3
 800cffe:	4770      	bx	lr

0800d000 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800d000:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800d004:	1a9b      	subs	r3, r3, r2
 800d006:	2b00      	cmp	r3, #0
 800d008:	bfdc      	itt	le
 800d00a:	6882      	ldrle	r2, [r0, #8]
 800d00c:	189b      	addle	r3, r3, r2
 800d00e:	2b01      	cmp	r3, #1
 800d010:	bfcc      	ite	gt
 800d012:	2000      	movgt	r0, #0
 800d014:	2001      	movle	r0, #1
 800d016:	4770      	bx	lr

0800d018 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800d018:	6902      	ldr	r2, [r0, #16]
 800d01a:	6843      	ldr	r3, [r0, #4]
 800d01c:	2024      	movs	r0, #36	; 0x24
 800d01e:	fb00 3002 	mla	r0, r0, r2, r3
 800d022:	4770      	bx	lr

0800d024 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800d024:	6803      	ldr	r3, [r0, #0]
 800d026:	691b      	ldr	r3, [r3, #16]
 800d028:	4718      	bx	r3

0800d02a <_ZN8touchgfx13DMA_Interface7executeEv>:
 800d02a:	2301      	movs	r3, #1
 800d02c:	b570      	push	{r4, r5, r6, lr}
 800d02e:	7203      	strb	r3, [r0, #8]
 800d030:	4604      	mov	r4, r0
 800d032:	6840      	ldr	r0, [r0, #4]
 800d034:	6803      	ldr	r3, [r0, #0]
 800d036:	699b      	ldr	r3, [r3, #24]
 800d038:	4798      	blx	r3
 800d03a:	6803      	ldr	r3, [r0, #0]
 800d03c:	4605      	mov	r5, r0
 800d03e:	2b40      	cmp	r3, #64	; 0x40
 800d040:	d00c      	beq.n	800d05c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800d042:	d810      	bhi.n	800d066 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800d044:	2b04      	cmp	r3, #4
 800d046:	d01d      	beq.n	800d084 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800d048:	d804      	bhi.n	800d054 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	d006      	beq.n	800d05c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800d04e:	2b02      	cmp	r3, #2
 800d050:	d02c      	beq.n	800d0ac <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800d052:	bd70      	pop	{r4, r5, r6, pc}
 800d054:	2b08      	cmp	r3, #8
 800d056:	d01d      	beq.n	800d094 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800d058:	2b20      	cmp	r3, #32
 800d05a:	d1fa      	bne.n	800d052 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800d05c:	6823      	ldr	r3, [r4, #0]
 800d05e:	4620      	mov	r0, r4
 800d060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d062:	4798      	blx	r3
 800d064:	e013      	b.n	800d08e <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800d066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d06a:	d0f7      	beq.n	800d05c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800d06c:	d804      	bhi.n	800d078 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800d06e:	2b80      	cmp	r3, #128	; 0x80
 800d070:	d0f4      	beq.n	800d05c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800d072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d076:	e7f0      	b.n	800d05a <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800d078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d07c:	d0ee      	beq.n	800d05c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800d07e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d082:	e7e5      	b.n	800d050 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800d084:	6823      	ldr	r3, [r4, #0]
 800d086:	7f01      	ldrb	r1, [r0, #28]
 800d088:	4620      	mov	r0, r4
 800d08a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d08c:	4798      	blx	r3
 800d08e:	6823      	ldr	r3, [r4, #0]
 800d090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d092:	e006      	b.n	800d0a2 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800d094:	6823      	ldr	r3, [r4, #0]
 800d096:	7f01      	ldrb	r1, [r0, #28]
 800d098:	4620      	mov	r0, r4
 800d09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d09c:	4798      	blx	r3
 800d09e:	6823      	ldr	r3, [r4, #0]
 800d0a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0a2:	4629      	mov	r1, r5
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0aa:	4718      	bx	r3
 800d0ac:	6823      	ldr	r3, [r4, #0]
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0b2:	4798      	blx	r3
 800d0b4:	e7f3      	b.n	800d09e <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800d0b6 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800d0b6:	4770      	bx	lr

0800d0b8 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800d0b8:	4770      	bx	lr

0800d0ba <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800d0ba:	4770      	bx	lr

0800d0bc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800d0bc:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800d0c0:	b510      	push	{r4, lr}
 800d0c2:	1ad2      	subs	r2, r2, r3
 800d0c4:	2a00      	cmp	r2, #0
 800d0c6:	bfdc      	itt	le
 800d0c8:	6884      	ldrle	r4, [r0, #8]
 800d0ca:	1912      	addle	r2, r2, r4
 800d0cc:	2a01      	cmp	r2, #1
 800d0ce:	dd16      	ble.n	800d0fe <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800d0d0:	6842      	ldr	r2, [r0, #4]
 800d0d2:	2424      	movs	r4, #36	; 0x24
 800d0d4:	fb04 2303 	mla	r3, r4, r3, r2
 800d0d8:	f101 0220 	add.w	r2, r1, #32
 800d0dc:	f851 4b04 	ldr.w	r4, [r1], #4
 800d0e0:	4291      	cmp	r1, r2
 800d0e2:	f843 4b04 	str.w	r4, [r3], #4
 800d0e6:	d1f9      	bne.n	800d0dc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800d0e8:	780a      	ldrb	r2, [r1, #0]
 800d0ea:	701a      	strb	r2, [r3, #0]
 800d0ec:	68c3      	ldr	r3, [r0, #12]
 800d0ee:	6882      	ldr	r2, [r0, #8]
 800d0f0:	f3bf 8f5b 	dmb	ish
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	bfd8      	it	le
 800d0fa:	1a9b      	suble	r3, r3, r2
 800d0fc:	60c3      	str	r3, [r0, #12]
 800d0fe:	bd10      	pop	{r4, pc}

0800d100 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800d100:	6903      	ldr	r3, [r0, #16]
 800d102:	6882      	ldr	r2, [r0, #8]
 800d104:	f3bf 8f5b 	dmb	ish
 800d108:	3301      	adds	r3, #1
 800d10a:	429a      	cmp	r2, r3
 800d10c:	bfd8      	it	le
 800d10e:	1a9b      	suble	r3, r3, r2
 800d110:	6103      	str	r3, [r0, #16]
 800d112:	4770      	bx	lr

0800d114 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800d114:	b570      	push	{r4, r5, r6, lr}
 800d116:	4604      	mov	r4, r0
 800d118:	460e      	mov	r6, r1
 800d11a:	6860      	ldr	r0, [r4, #4]
 800d11c:	6803      	ldr	r3, [r0, #0]
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	4798      	blx	r3
 800d122:	2800      	cmp	r0, #0
 800d124:	d1f9      	bne.n	800d11a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800d126:	4d0d      	ldr	r5, [pc, #52]	; (800d15c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800d128:	6828      	ldr	r0, [r5, #0]
 800d12a:	6803      	ldr	r3, [r0, #0]
 800d12c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d12e:	4798      	blx	r3
 800d130:	f7f4 fcb4 	bl	8001a9c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800d134:	6828      	ldr	r0, [r5, #0]
 800d136:	2101      	movs	r1, #1
 800d138:	f7ff ff2c 	bl	800cf94 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800d13c:	6860      	ldr	r0, [r4, #4]
 800d13e:	4631      	mov	r1, r6
 800d140:	6803      	ldr	r3, [r0, #0]
 800d142:	689b      	ldr	r3, [r3, #8]
 800d144:	4798      	blx	r3
 800d146:	6823      	ldr	r3, [r4, #0]
 800d148:	4620      	mov	r0, r4
 800d14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d14c:	4798      	blx	r3
 800d14e:	6828      	ldr	r0, [r5, #0]
 800d150:	6803      	ldr	r3, [r0, #0]
 800d152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d156:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d158:	4718      	bx	r3
 800d15a:	bf00      	nop
 800d15c:	20024418 	.word	0x20024418

0800d160 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800d160:	b508      	push	{r3, lr}
 800d162:	f7f4 fc8d 	bl	8001a80 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800d166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d16a:	f7f4 bc91 	b.w	8001a90 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800d16e <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800d16e:	b510      	push	{r4, lr}
 800d170:	4604      	mov	r4, r0
 800d172:	2114      	movs	r1, #20
 800d174:	f00f fbb8 	bl	801c8e8 <_ZdlPvj>
 800d178:	4620      	mov	r0, r4
 800d17a:	bd10      	pop	{r4, pc}

0800d17c <_ZN8touchgfx13DMA_Interface5startEv>:
 800d17c:	b510      	push	{r4, lr}
 800d17e:	4604      	mov	r4, r0
 800d180:	6840      	ldr	r0, [r0, #4]
 800d182:	6803      	ldr	r3, [r0, #0]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	4798      	blx	r3
 800d188:	b948      	cbnz	r0, 800d19e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800d18a:	7a63      	ldrb	r3, [r4, #9]
 800d18c:	b13b      	cbz	r3, 800d19e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800d18e:	7a23      	ldrb	r3, [r4, #8]
 800d190:	b92b      	cbnz	r3, 800d19e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800d192:	6823      	ldr	r3, [r4, #0]
 800d194:	4620      	mov	r0, r4
 800d196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d19c:	4718      	bx	r3
 800d19e:	bd10      	pop	{r4, pc}

0800d1a0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800d1a0:	b570      	push	{r4, r5, r6, lr}
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	6840      	ldr	r0, [r0, #4]
 800d1a6:	6803      	ldr	r3, [r0, #0]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	4798      	blx	r3
 800d1ac:	4605      	mov	r5, r0
 800d1ae:	b930      	cbnz	r0, 800d1be <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800d1b0:	7a23      	ldrb	r3, [r4, #8]
 800d1b2:	b123      	cbz	r3, 800d1be <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800d1b4:	6860      	ldr	r0, [r4, #4]
 800d1b6:	6803      	ldr	r3, [r0, #0]
 800d1b8:	695b      	ldr	r3, [r3, #20]
 800d1ba:	4798      	blx	r3
 800d1bc:	7225      	strb	r5, [r4, #8]
 800d1be:	6860      	ldr	r0, [r4, #4]
 800d1c0:	6803      	ldr	r3, [r0, #0]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4798      	blx	r3
 800d1c6:	b928      	cbnz	r0, 800d1d4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800d1c8:	6823      	ldr	r3, [r4, #0]
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d1d2:	4718      	bx	r3
 800d1d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d1d8:	f7f4 bc68 	b.w	8001aac <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800d1dc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800d1dc:	b510      	push	{r4, lr}
 800d1de:	6082      	str	r2, [r0, #8]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	4c03      	ldr	r4, [pc, #12]	; (800d1f0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800d1e4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800d1e8:	e9c0 4100 	strd	r4, r1, [r0]
 800d1ec:	bd10      	pop	{r4, pc}
 800d1ee:	bf00      	nop
 800d1f0:	08020774 	.word	0x08020774

0800d1f4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800d1f4:	6840      	ldr	r0, [r0, #4]
 800d1f6:	6803      	ldr	r3, [r0, #0]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	4718      	bx	r3

0800d1fc <_ZNK8touchgfx3Box12getSolidRectEv>:
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	8083      	strh	r3, [r0, #4]
 800d200:	80c3      	strh	r3, [r0, #6]
 800d202:	8003      	strh	r3, [r0, #0]
 800d204:	8043      	strh	r3, [r0, #2]
 800d206:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800d20a:	2bff      	cmp	r3, #255	; 0xff
 800d20c:	bf01      	itttt	eq
 800d20e:	890b      	ldrheq	r3, [r1, #8]
 800d210:	8083      	strheq	r3, [r0, #4]
 800d212:	894b      	ldrheq	r3, [r1, #10]
 800d214:	80c3      	strheq	r3, [r0, #6]
 800d216:	4770      	bx	lr

0800d218 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800d218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d21a:	4604      	mov	r4, r0
 800d21c:	466b      	mov	r3, sp
 800d21e:	6808      	ldr	r0, [r1, #0]
 800d220:	6849      	ldr	r1, [r1, #4]
 800d222:	c303      	stmia	r3!, {r0, r1}
 800d224:	6823      	ldr	r3, [r4, #0]
 800d226:	4669      	mov	r1, sp
 800d228:	4620      	mov	r0, r4
 800d22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d22c:	4798      	blx	r3
 800d22e:	4b08      	ldr	r3, [pc, #32]	; (800d250 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800d236:	b10a      	cbz	r2, 800d23c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800d238:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d23a:	b900      	cbnz	r0, 800d23e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800d23c:	6898      	ldr	r0, [r3, #8]
 800d23e:	6803      	ldr	r3, [r0, #0]
 800d240:	4669      	mov	r1, sp
 800d242:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d244:	6a1d      	ldr	r5, [r3, #32]
 800d246:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800d24a:	47a8      	blx	r5
 800d24c:	b003      	add	sp, #12
 800d24e:	bd30      	pop	{r4, r5, pc}
 800d250:	20024418 	.word	0x20024418

0800d254 <_ZN8touchgfx3BoxD1Ev>:
 800d254:	4770      	bx	lr

0800d256 <_ZN8touchgfx3BoxD0Ev>:
 800d256:	b510      	push	{r4, lr}
 800d258:	4604      	mov	r4, r0
 800d25a:	212c      	movs	r1, #44	; 0x2c
 800d25c:	f00f fb44 	bl	801c8e8 <_ZdlPvj>
 800d260:	4620      	mov	r0, r4
 800d262:	bd10      	pop	{r4, pc}

0800d264 <_ZNK8touchgfx3Box17invalidateContentEv>:
 800d264:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 800d268:	b12a      	cbz	r2, 800d276 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800d26a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800d26e:	b112      	cbz	r2, 800d276 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800d270:	6803      	ldr	r3, [r0, #0]
 800d272:	695b      	ldr	r3, [r3, #20]
 800d274:	4718      	bx	r3
 800d276:	4770      	bx	lr

0800d278 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800d278:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800d27c:	4770      	bx	lr

0800d27e <_ZN8touchgfx6ButtonD1Ev>:
 800d27e:	4770      	bx	lr

0800d280 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800d280:	b570      	push	{r4, r5, r6, lr}
 800d282:	880b      	ldrh	r3, [r1, #0]
 800d284:	4605      	mov	r5, r0
 800d286:	4604      	mov	r4, r0
 800d288:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800d28a:	8813      	ldrh	r3, [r2, #0]
 800d28c:	f825 3f30 	strh.w	r3, [r5, #48]!
 800d290:	4628      	mov	r0, r5
 800d292:	f003 fd27 	bl	8010ce4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d296:	4606      	mov	r6, r0
 800d298:	4628      	mov	r0, r5
 800d29a:	f003 fd57 	bl	8010d4c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d29e:	6823      	ldr	r3, [r4, #0]
 800d2a0:	4605      	mov	r5, r0
 800d2a2:	4631      	mov	r1, r6
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a8:	4798      	blx	r3
 800d2aa:	6823      	ldr	r3, [r4, #0]
 800d2ac:	4629      	mov	r1, r5
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d2b6:	4718      	bx	r3

0800d2b8 <_ZN8touchgfx6ButtonD0Ev>:
 800d2b8:	b510      	push	{r4, lr}
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	2134      	movs	r1, #52	; 0x34
 800d2be:	f00f fb13 	bl	801c8e8 <_ZdlPvj>
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	bd10      	pop	{r4, pc}

0800d2c6 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800d2c6:	b510      	push	{r4, lr}
 800d2c8:	4604      	mov	r4, r0
 800d2ca:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800d2cc:	b150      	cbz	r0, 800d2e4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800d2ce:	6803      	ldr	r3, [r0, #0]
 800d2d0:	68db      	ldr	r3, [r3, #12]
 800d2d2:	4798      	blx	r3
 800d2d4:	b130      	cbz	r0, 800d2e4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800d2d6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800d2d8:	4621      	mov	r1, r4
 800d2da:	6803      	ldr	r3, [r0, #0]
 800d2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2e0:	689b      	ldr	r3, [r3, #8]
 800d2e2:	4718      	bx	r3
 800d2e4:	bd10      	pop	{r4, pc}

0800d2e6 <_ZNK8touchgfx6Button12getSolidRectEv>:
 800d2e6:	b510      	push	{r4, lr}
 800d2e8:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 800d2ec:	4604      	mov	r4, r0
 800d2ee:	2bff      	cmp	r3, #255	; 0xff
 800d2f0:	d006      	beq.n	800d300 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	8003      	strh	r3, [r0, #0]
 800d2f6:	8043      	strh	r3, [r0, #2]
 800d2f8:	8083      	strh	r3, [r0, #4]
 800d2fa:	80c3      	strh	r3, [r0, #6]
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	bd10      	pop	{r4, pc}
 800d300:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 800d304:	b11b      	cbz	r3, 800d30e <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800d306:	3130      	adds	r1, #48	; 0x30
 800d308:	f003 fd54 	bl	8010db4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800d30c:	e7f6      	b.n	800d2fc <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800d30e:	312e      	adds	r1, #46	; 0x2e
 800d310:	e7fa      	b.n	800d308 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0800d314 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800d314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d318:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800d31c:	b08a      	sub	sp, #40	; 0x28
 800d31e:	4604      	mov	r4, r0
 800d320:	4688      	mov	r8, r1
 800d322:	2b00      	cmp	r3, #0
 800d324:	d066      	beq.n	800d3f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800d326:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800d328:	a805      	add	r0, sp, #20
 800d32a:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d32e:	f003 fcd9 	bl	8010ce4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d332:	4607      	mov	r7, r0
 800d334:	a805      	add	r0, sp, #20
 800d336:	f003 fd09 	bl	8010d4c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d33a:	f9b8 6000 	ldrsh.w	r6, [r8]
 800d33e:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800d342:	2300      	movs	r3, #0
 800d344:	4432      	add	r2, r6
 800d346:	9306      	str	r3, [sp, #24]
 800d348:	b292      	uxth	r2, r2
 800d34a:	fa0f fc82 	sxth.w	ip, r2
 800d34e:	459c      	cmp	ip, r3
 800d350:	dd52      	ble.n	800d3f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800d352:	42b7      	cmp	r7, r6
 800d354:	dd50      	ble.n	800d3f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800d356:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 800d35a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800d35e:	442b      	add	r3, r5
 800d360:	b29b      	uxth	r3, r3
 800d362:	b219      	sxth	r1, r3
 800d364:	2900      	cmp	r1, #0
 800d366:	dd47      	ble.n	800d3f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800d368:	42a8      	cmp	r0, r5
 800d36a:	dd45      	ble.n	800d3f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800d36c:	4567      	cmp	r7, ip
 800d36e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800d372:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800d376:	bfb8      	it	lt
 800d378:	b2ba      	uxthlt	r2, r7
 800d37a:	4288      	cmp	r0, r1
 800d37c:	f8ad 6018 	strh.w	r6, [sp, #24]
 800d380:	bfb8      	it	lt
 800d382:	b283      	uxthlt	r3, r0
 800d384:	1b92      	subs	r2, r2, r6
 800d386:	f8ad 501a 	strh.w	r5, [sp, #26]
 800d38a:	1b5b      	subs	r3, r3, r5
 800d38c:	f8ad 201c 	strh.w	r2, [sp, #28]
 800d390:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d394:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800d398:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d026      	beq.n	800d3ee <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800d3a0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	dd22      	ble.n	800d3ee <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800d3a8:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	dd1e      	ble.n	800d3ee <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	a908      	add	r1, sp, #32
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800d3ba:	6823      	ldr	r3, [r4, #0]
 800d3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3be:	4798      	blx	r3
 800d3c0:	4b0f      	ldr	r3, [pc, #60]	; (800d400 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800d3c8:	b10a      	cbz	r2, 800d3ce <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 800d3ca:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d3cc:	b900      	cbnz	r0, 800d3d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 800d3ce:	6898      	ldr	r0, [r3, #8]
 800d3d0:	2501      	movs	r5, #1
 800d3d2:	6801      	ldr	r1, [r0, #0]
 800d3d4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800d3d8:	9502      	str	r5, [sp, #8]
 800d3da:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 800d3de:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800d3e2:	9401      	str	r4, [sp, #4]
 800d3e4:	ac06      	add	r4, sp, #24
 800d3e6:	9400      	str	r4, [sp, #0]
 800d3e8:	688c      	ldr	r4, [r1, #8]
 800d3ea:	a905      	add	r1, sp, #20
 800d3ec:	47a0      	blx	r4
 800d3ee:	b00a      	add	sp, #40	; 0x28
 800d3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3f4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800d3f6:	e797      	b.n	800d328 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	9307      	str	r3, [sp, #28]
 800d3fc:	e7ca      	b.n	800d394 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 800d3fe:	bf00      	nop
 800d400:	20024418 	.word	0x20024418

0800d404 <_ZNK8touchgfx6Button17invalidateContentEv>:
 800d404:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 800d408:	b12a      	cbz	r2, 800d416 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800d40a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800d40e:	b112      	cbz	r2, 800d416 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800d410:	6803      	ldr	r3, [r0, #0]
 800d412:	695b      	ldr	r3, [r3, #20]
 800d414:	4718      	bx	r3
 800d416:	4770      	bx	lr

0800d418 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800d418:	b510      	push	{r4, lr}
 800d41a:	6803      	ldr	r3, [r0, #0]
 800d41c:	460c      	mov	r4, r1
 800d41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d420:	4798      	blx	r3
 800d422:	1b03      	subs	r3, r0, r4
 800d424:	4258      	negs	r0, r3
 800d426:	4158      	adcs	r0, r3
 800d428:	bd10      	pop	{r4, pc}
	...

0800d42c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800d42c:	4b01      	ldr	r3, [pc, #4]	; (800d434 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800d42e:	6019      	str	r1, [r3, #0]
 800d430:	4770      	bx	lr
 800d432:	bf00      	nop
 800d434:	20024420 	.word	0x20024420

0800d438 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800d438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d43c:	4696      	mov	lr, r2
 800d43e:	b097      	sub	sp, #92	; 0x5c
 800d440:	4605      	mov	r5, r0
 800d442:	4614      	mov	r4, r2
 800d444:	460e      	mov	r6, r1
 800d446:	461f      	mov	r7, r3
 800d448:	f10d 0c1c 	add.w	ip, sp, #28
 800d44c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800d450:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 800d454:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800d458:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d45c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d460:	f8de 3000 	ldr.w	r3, [lr]
 800d464:	f104 0e14 	add.w	lr, r4, #20
 800d468:	f8cc 3000 	str.w	r3, [ip]
 800d46c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800d470:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d474:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d478:	f8de 3000 	ldr.w	r3, [lr]
 800d47c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800d480:	f8cc 3000 	str.w	r3, [ip]
 800d484:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800d488:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d48c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d490:	f8de 3000 	ldr.w	r3, [lr]
 800d494:	4631      	mov	r1, r6
 800d496:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d498:	4628      	mov	r0, r5
 800d49a:	f8cc 3000 	str.w	r3, [ip]
 800d49e:	682b      	ldr	r3, [r5, #0]
 800d4a0:	9201      	str	r2, [sp, #4]
 800d4a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d4a4:	f8cd 8008 	str.w	r8, [sp, #8]
 800d4a8:	9200      	str	r2, [sp, #0]
 800d4aa:	aa07      	add	r2, sp, #28
 800d4ac:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800d4b0:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 800d4b4:	463b      	mov	r3, r7
 800d4b6:	47d8      	blx	fp
 800d4b8:	46a6      	mov	lr, r4
 800d4ba:	f10d 0c1c 	add.w	ip, sp, #28
 800d4be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d4c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d4c6:	f8de 3000 	ldr.w	r3, [lr]
 800d4ca:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800d4ce:	343c      	adds	r4, #60	; 0x3c
 800d4d0:	f8cc 3000 	str.w	r3, [ip]
 800d4d4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800d4d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d4dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d4e0:	f8de 3000 	ldr.w	r3, [lr]
 800d4e4:	f8cc 3000 	str.w	r3, [ip]
 800d4e8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800d4ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d4ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d4f2:	6823      	ldr	r3, [r4, #0]
 800d4f4:	4631      	mov	r1, r6
 800d4f6:	4628      	mov	r0, r5
 800d4f8:	f8cc 3000 	str.w	r3, [ip]
 800d4fc:	682b      	ldr	r3, [r5, #0]
 800d4fe:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800d502:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d504:	f8cd 8008 	str.w	r8, [sp, #8]
 800d508:	9201      	str	r2, [sp, #4]
 800d50a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d50c:	9200      	str	r2, [sp, #0]
 800d50e:	aa07      	add	r2, sp, #28
 800d510:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800d512:	463b      	mov	r3, r7
 800d514:	47a0      	blx	r4
 800d516:	b017      	add	sp, #92	; 0x5c
 800d518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d51c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800d51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d520:	b08d      	sub	sp, #52	; 0x34
 800d522:	4688      	mov	r8, r1
 800d524:	f8d3 c000 	ldr.w	ip, [r3]
 800d528:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d52a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800d52e:	680f      	ldr	r7, [r1, #0]
 800d530:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800d534:	eba7 070c 	sub.w	r7, r7, ip
 800d538:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800d53c:	edd3 6a07 	vldr	s13, [r3, #28]
 800d540:	42bc      	cmp	r4, r7
 800d542:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d544:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800d548:	bfa8      	it	ge
 800d54a:	463c      	movge	r4, r7
 800d54c:	f9b1 9000 	ldrsh.w	r9, [r1]
 800d550:	f9ba 1000 	ldrsh.w	r1, [sl]
 800d554:	ee07 4a90 	vmov	s15, r4
 800d558:	eb09 0e0c 	add.w	lr, r9, ip
 800d55c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800d560:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800d564:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800d568:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800d56c:	4571      	cmp	r1, lr
 800d56e:	ee25 4a04 	vmul.f32	s8, s10, s8
 800d572:	ee65 4a24 	vmul.f32	s9, s10, s9
 800d576:	ee25 5a27 	vmul.f32	s10, s10, s15
 800d57a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d57e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800d582:	ee32 1a05 	vadd.f32	s2, s4, s10
 800d586:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d58a:	ee36 0a84 	vadd.f32	s0, s13, s8
 800d58e:	ee61 1a87 	vmul.f32	s3, s3, s14
 800d592:	ee22 2a07 	vmul.f32	s4, s4, s14
 800d596:	f340 808c 	ble.w	800d6b2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800d59a:	eba1 060e 	sub.w	r6, r1, lr
 800d59e:	fb96 f5f4 	sdiv	r5, r6, r4
 800d5a2:	ee07 5a10 	vmov	s14, r5
 800d5a6:	2d00      	cmp	r5, #0
 800d5a8:	fb04 6615 	mls	r6, r4, r5, r6
 800d5ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d5b0:	eea7 0a04 	vfma.f32	s0, s14, s8
 800d5b4:	eee7 0a24 	vfma.f32	s1, s14, s9
 800d5b8:	eea7 1a05 	vfma.f32	s2, s14, s10
 800d5bc:	dd12      	ble.n	800d5e4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800d5be:	ee70 6a44 	vsub.f32	s13, s0, s8
 800d5c2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800d5c6:	ee31 2a45 	vsub.f32	s4, s2, s10
 800d5ca:	eef5 6a40 	vcmp.f32	s13, #0.0
 800d5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5d2:	bf14      	ite	ne
 800d5d4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800d5d8:	eeb0 7a67 	vmoveq.f32	s14, s15
 800d5dc:	ee61 1a87 	vmul.f32	s3, s3, s14
 800d5e0:	ee22 2a07 	vmul.f32	s4, s4, s14
 800d5e4:	fb05 f204 	mul.w	r2, r5, r4
 800d5e8:	1abf      	subs	r7, r7, r2
 800d5ea:	4494      	add	ip, r2
 800d5ec:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800d5f0:	4411      	add	r1, r2
 800d5f2:	eb09 020c 	add.w	r2, r9, ip
 800d5f6:	b209      	sxth	r1, r1
 800d5f8:	443a      	add	r2, r7
 800d5fa:	428a      	cmp	r2, r1
 800d5fc:	bfc4      	itt	gt
 800d5fe:	eba1 0209 	subgt.w	r2, r1, r9
 800d602:	eba2 070c 	subgt.w	r7, r2, ip
 800d606:	2f00      	cmp	r7, #0
 800d608:	dd50      	ble.n	800d6ac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800d60a:	fb97 f1f4 	sdiv	r1, r7, r4
 800d60e:	fb04 7211 	mls	r2, r4, r1, r7
 800d612:	b90a      	cbnz	r2, 800d618 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800d614:	3901      	subs	r1, #1
 800d616:	4622      	mov	r2, r4
 800d618:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800d61c:	6840      	ldr	r0, [r0, #4]
 800d61e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800d622:	44b6      	add	lr, r6
 800d624:	f8d0 a000 	ldr.w	sl, [r0]
 800d628:	2900      	cmp	r1, #0
 800d62a:	bfcc      	ite	gt
 800d62c:	46a1      	movgt	r9, r4
 800d62e:	4691      	movle	r9, r2
 800d630:	900b      	str	r0, [sp, #44]	; 0x2c
 800d632:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d634:	fb04 e505 	mla	r5, r4, r5, lr
 800d638:	eef0 6a42 	vmov.f32	s13, s4
 800d63c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800d640:	9008      	str	r0, [sp, #32]
 800d642:	eeb0 7a61 	vmov.f32	s14, s3
 800d646:	9818      	ldr	r0, [sp, #96]	; 0x60
 800d648:	695b      	ldr	r3, [r3, #20]
 800d64a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800d64e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800d652:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800d656:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d658:	445b      	add	r3, fp
 800d65a:	9307      	str	r3, [sp, #28]
 800d65c:	ee16 3a90 	vmov	r3, s13
 800d660:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800d664:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800d668:	ee21 3a23 	vmul.f32	s6, s2, s7
 800d66c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800d670:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800d674:	ee17 7a90 	vmov	r7, s15
 800d678:	ee73 7a42 	vsub.f32	s15, s6, s4
 800d67c:	fb97 f7f4 	sdiv	r7, r7, r4
 800d680:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800d684:	ee17 ca90 	vmov	ip, s15
 800d688:	fb9c fcf4 	sdiv	ip, ip, r4
 800d68c:	fb0c 3306 	mla	r3, ip, r6, r3
 800d690:	9302      	str	r3, [sp, #8]
 800d692:	ee17 3a10 	vmov	r3, s14
 800d696:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800d69a:	fb07 3706 	mla	r7, r7, r6, r3
 800d69e:	eba9 0306 	sub.w	r3, r9, r6
 800d6a2:	e9cd 4700 	strd	r4, r7, [sp]
 800d6a6:	f8da 4008 	ldr.w	r4, [sl, #8]
 800d6aa:	47a0      	blx	r4
 800d6ac:	b00d      	add	sp, #52	; 0x34
 800d6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b2:	2500      	movs	r5, #0
 800d6b4:	462e      	mov	r6, r5
 800d6b6:	e799      	b.n	800d5ec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800d6b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800d6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6bc:	b0db      	sub	sp, #364	; 0x16c
 800d6be:	461d      	mov	r5, r3
 800d6c0:	4614      	mov	r4, r2
 800d6c2:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800d6c6:	910f      	str	r1, [sp, #60]	; 0x3c
 800d6c8:	4629      	mov	r1, r5
 800d6ca:	930a      	str	r3, [sp, #40]	; 0x28
 800d6cc:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800d6d0:	9009      	str	r0, [sp, #36]	; 0x24
 800d6d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6d4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800d6d8:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800d6dc:	9310      	str	r3, [sp, #64]	; 0x40
 800d6de:	6803      	ldr	r3, [r0, #0]
 800d6e0:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 800d6e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d6e6:	47b8      	blx	r7
 800d6e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6ea:	6058      	str	r0, [r3, #4]
 800d6ec:	2800      	cmp	r0, #0
 800d6ee:	f000 83a1 	beq.w	800de34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d6f2:	682b      	ldr	r3, [r5, #0]
 800d6f4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800d6f8:	ed94 7a02 	vldr	s14, [r4, #8]
 800d6fc:	9314      	str	r3, [sp, #80]	; 0x50
 800d6fe:	686b      	ldr	r3, [r5, #4]
 800d700:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d704:	9315      	str	r3, [sp, #84]	; 0x54
 800d706:	4bc1      	ldr	r3, [pc, #772]	; (800da0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800d708:	7819      	ldrb	r1, [r3, #0]
 800d70a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800d70e:	2900      	cmp	r1, #0
 800d710:	bf16      	itet	ne
 800d712:	4619      	movne	r1, r3
 800d714:	4611      	moveq	r1, r2
 800d716:	4613      	movne	r3, r2
 800d718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d71c:	9116      	str	r1, [sp, #88]	; 0x58
 800d71e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800d722:	f240 8387 	bls.w	800de34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d726:	ed94 7a07 	vldr	s14, [r4, #28]
 800d72a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d72e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d732:	f240 837f 	bls.w	800de34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d736:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800d73a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d742:	f240 8377 	bls.w	800de34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d746:	6822      	ldr	r2, [r4, #0]
 800d748:	4bb1      	ldr	r3, [pc, #708]	; (800da10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800d74a:	429a      	cmp	r2, r3
 800d74c:	f2c0 8372 	blt.w	800de34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d750:	49b0      	ldr	r1, [pc, #704]	; (800da14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800d752:	6963      	ldr	r3, [r4, #20]
 800d754:	428a      	cmp	r2, r1
 800d756:	f300 836d 	bgt.w	800de34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d75a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800d75e:	48ae      	ldr	r0, [pc, #696]	; (800da18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800d760:	33ff      	adds	r3, #255	; 0xff
 800d762:	4283      	cmp	r3, r0
 800d764:	f200 8366 	bhi.w	800de34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d768:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d76a:	4dac      	ldr	r5, [pc, #688]	; (800da1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800d76c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800d770:	33ff      	adds	r3, #255	; 0xff
 800d772:	42ab      	cmp	r3, r5
 800d774:	f200 835e 	bhi.w	800de34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d778:	6862      	ldr	r2, [r4, #4]
 800d77a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800d77e:	33ff      	adds	r3, #255	; 0xff
 800d780:	4283      	cmp	r3, r0
 800d782:	f200 8357 	bhi.w	800de34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d786:	69a1      	ldr	r1, [r4, #24]
 800d788:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800d78c:	33ff      	adds	r3, #255	; 0xff
 800d78e:	4283      	cmp	r3, r0
 800d790:	f200 8350 	bhi.w	800de34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d794:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d796:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800d79a:	30ff      	adds	r0, #255	; 0xff
 800d79c:	42a8      	cmp	r0, r5
 800d79e:	f200 8349 	bhi.w	800de34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d7a2:	428a      	cmp	r2, r1
 800d7a4:	f280 8110 	bge.w	800d9c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	f300 8119 	bgt.w	800d9e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800d7ae:	4299      	cmp	r1, r3
 800d7b0:	f280 811d 	bge.w	800d9ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800d7b4:	2502      	movs	r5, #2
 800d7b6:	2701      	movs	r7, #1
 800d7b8:	46a9      	mov	r9, r5
 800d7ba:	46b8      	mov	r8, r7
 800d7bc:	f04f 0a00 	mov.w	sl, #0
 800d7c0:	4621      	mov	r1, r4
 800d7c2:	a849      	add	r0, sp, #292	; 0x124
 800d7c4:	f002 ffc6 	bl	8010754 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800d7c8:	4622      	mov	r2, r4
 800d7ca:	4653      	mov	r3, sl
 800d7cc:	a949      	add	r1, sp, #292	; 0x124
 800d7ce:	f8cd 9000 	str.w	r9, [sp]
 800d7d2:	a819      	add	r0, sp, #100	; 0x64
 800d7d4:	f003 f8ee 	bl	80109b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800d7d8:	4622      	mov	r2, r4
 800d7da:	4653      	mov	r3, sl
 800d7dc:	a949      	add	r1, sp, #292	; 0x124
 800d7de:	f8cd 8000 	str.w	r8, [sp]
 800d7e2:	a829      	add	r0, sp, #164	; 0xa4
 800d7e4:	f003 f8e6 	bl	80109b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800d7e8:	4643      	mov	r3, r8
 800d7ea:	4622      	mov	r2, r4
 800d7ec:	a949      	add	r1, sp, #292	; 0x124
 800d7ee:	f8cd 9000 	str.w	r9, [sp]
 800d7f2:	a839      	add	r0, sp, #228	; 0xe4
 800d7f4:	f003 f8de 	bl	80109b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800d7f8:	42af      	cmp	r7, r5
 800d7fa:	af12      	add	r7, sp, #72	; 0x48
 800d7fc:	bfb7      	itett	lt
 800d7fe:	2300      	movlt	r3, #0
 800d800:	2301      	movge	r3, #1
 800d802:	ad29      	addlt	r5, sp, #164	; 0xa4
 800d804:	ac19      	addlt	r4, sp, #100	; 0x64
 800d806:	bfb1      	iteee	lt
 800d808:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d80a:	ad19      	addge	r5, sp, #100	; 0x64
 800d80c:	930e      	strge	r3, [sp, #56]	; 0x38
 800d80e:	ac29      	addge	r4, sp, #164	; 0xa4
 800d810:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d812:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d816:	e887 0003 	stmia.w	r7, {r0, r1}
 800d81a:	b928      	cbnz	r0, 800d828 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800d81c:	4b80      	ldr	r3, [pc, #512]	; (800da20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800d81e:	6818      	ldr	r0, [r3, #0]
 800d820:	6803      	ldr	r3, [r0, #0]
 800d822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d824:	4798      	blx	r3
 800d826:	6038      	str	r0, [r7, #0]
 800d828:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800d82a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800d82e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d832:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800d834:	930c      	str	r3, [sp, #48]	; 0x30
 800d836:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d838:	6963      	ldr	r3, [r4, #20]
 800d83a:	440b      	add	r3, r1
 800d83c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800d840:	4408      	add	r0, r1
 800d842:	b200      	sxth	r0, r0
 800d844:	4283      	cmp	r3, r0
 800d846:	900d      	str	r0, [sp, #52]	; 0x34
 800d848:	f280 80dd 	bge.w	800da06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800d84c:	428b      	cmp	r3, r1
 800d84e:	da08      	bge.n	800d862 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800d850:	2a00      	cmp	r2, #0
 800d852:	dd06      	ble.n	800d862 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800d854:	1acb      	subs	r3, r1, r3
 800d856:	429a      	cmp	r2, r3
 800d858:	f2c0 80e4 	blt.w	800da24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	f300 80e2 	bgt.w	800da26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800d862:	6967      	ldr	r7, [r4, #20]
 800d864:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800d868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d86a:	443b      	add	r3, r7
 800d86c:	461f      	mov	r7, r3
 800d86e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d870:	1bdf      	subs	r7, r3, r7
 800d872:	4297      	cmp	r7, r2
 800d874:	bfa8      	it	ge
 800d876:	4617      	movge	r7, r2
 800d878:	2f00      	cmp	r7, #0
 800d87a:	f340 8166 	ble.w	800db4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800d87e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800d880:	6829      	ldr	r1, [r5, #0]
 800d882:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d886:	f9bb 3000 	ldrsh.w	r3, [fp]
 800d88a:	4411      	add	r1, r2
 800d88c:	6820      	ldr	r0, [r4, #0]
 800d88e:	4299      	cmp	r1, r3
 800d890:	dd1a      	ble.n	800d8c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800d892:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800d896:	4402      	add	r2, r0
 800d898:	440b      	add	r3, r1
 800d89a:	b21b      	sxth	r3, r3
 800d89c:	429a      	cmp	r2, r3
 800d89e:	dc13      	bgt.n	800d8c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800d8a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d8a2:	a912      	add	r1, sp, #72	; 0x48
 800d8a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	9206      	str	r2, [sp, #24]
 800d8ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d8ae:	9500      	str	r5, [sp, #0]
 800d8b0:	9205      	str	r2, [sp, #20]
 800d8b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8b4:	e9cd b203 	strd	fp, r2, [sp, #12]
 800d8b8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800d8ba:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800d8be:	aa49      	add	r2, sp, #292	; 0x124
 800d8c0:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800d8c4:	4623      	mov	r3, r4
 800d8c6:	47c8      	blx	r9
 800d8c8:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800d8cc:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800d8d0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800d8d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d8d8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800d8dc:	68a1      	ldr	r1, [r4, #8]
 800d8de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8e2:	ed94 6a08 	vldr	s12, [r4, #32]
 800d8e6:	edd4 6a07 	vldr	s13, [r4, #28]
 800d8ea:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800d8ee:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d8f2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800d8f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d8fa:	edc4 6a07 	vstr	s13, [r4, #28]
 800d8fe:	441a      	add	r2, r3
 800d900:	6963      	ldr	r3, [r4, #20]
 800d902:	3301      	adds	r3, #1
 800d904:	6022      	str	r2, [r4, #0]
 800d906:	6163      	str	r3, [r4, #20]
 800d908:	69a3      	ldr	r3, [r4, #24]
 800d90a:	3b01      	subs	r3, #1
 800d90c:	61a3      	str	r3, [r4, #24]
 800d90e:	6923      	ldr	r3, [r4, #16]
 800d910:	440b      	add	r3, r1
 800d912:	68e1      	ldr	r1, [r4, #12]
 800d914:	428b      	cmp	r3, r1
 800d916:	6123      	str	r3, [r4, #16]
 800d918:	db15      	blt.n	800d946 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800d91a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800d91e:	3201      	adds	r2, #1
 800d920:	1a5b      	subs	r3, r3, r1
 800d922:	ee76 6a26 	vadd.f32	s13, s12, s13
 800d926:	6022      	str	r2, [r4, #0]
 800d928:	6123      	str	r3, [r4, #16]
 800d92a:	edc4 6a07 	vstr	s13, [r4, #28]
 800d92e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800d932:	ee36 7a87 	vadd.f32	s14, s13, s14
 800d936:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800d93a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800d93e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d942:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800d946:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800d94a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800d94e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800d952:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d956:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800d95a:	68a9      	ldr	r1, [r5, #8]
 800d95c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d960:	ed95 6a08 	vldr	s12, [r5, #32]
 800d964:	edd5 6a07 	vldr	s13, [r5, #28]
 800d968:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800d96c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d970:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800d974:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d978:	edc5 6a07 	vstr	s13, [r5, #28]
 800d97c:	441a      	add	r2, r3
 800d97e:	696b      	ldr	r3, [r5, #20]
 800d980:	3301      	adds	r3, #1
 800d982:	602a      	str	r2, [r5, #0]
 800d984:	616b      	str	r3, [r5, #20]
 800d986:	69ab      	ldr	r3, [r5, #24]
 800d988:	3b01      	subs	r3, #1
 800d98a:	61ab      	str	r3, [r5, #24]
 800d98c:	692b      	ldr	r3, [r5, #16]
 800d98e:	440b      	add	r3, r1
 800d990:	68e9      	ldr	r1, [r5, #12]
 800d992:	428b      	cmp	r3, r1
 800d994:	612b      	str	r3, [r5, #16]
 800d996:	db15      	blt.n	800d9c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800d998:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800d99c:	3201      	adds	r2, #1
 800d99e:	1a5b      	subs	r3, r3, r1
 800d9a0:	ee76 6a26 	vadd.f32	s13, s12, s13
 800d9a4:	602a      	str	r2, [r5, #0]
 800d9a6:	612b      	str	r3, [r5, #16]
 800d9a8:	edc5 6a07 	vstr	s13, [r5, #28]
 800d9ac:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800d9b0:	ee36 7a87 	vadd.f32	s14, s13, s14
 800d9b4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800d9b8:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800d9bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d9c0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800d9c4:	3f01      	subs	r7, #1
 800d9c6:	e757      	b.n	800d878 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800d9c8:	4299      	cmp	r1, r3
 800d9ca:	dc13      	bgt.n	800d9f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	da14      	bge.n	800d9fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800d9d0:	2502      	movs	r5, #2
 800d9d2:	2703      	movs	r7, #3
 800d9d4:	f04f 0800 	mov.w	r8, #0
 800d9d8:	46a9      	mov	r9, r5
 800d9da:	f04f 0a01 	mov.w	sl, #1
 800d9de:	e6ef      	b.n	800d7c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800d9e0:	2501      	movs	r5, #1
 800d9e2:	2700      	movs	r7, #0
 800d9e4:	46a9      	mov	r9, r5
 800d9e6:	46b8      	mov	r8, r7
 800d9e8:	f04f 0a02 	mov.w	sl, #2
 800d9ec:	e6e8      	b.n	800d7c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800d9ee:	2501      	movs	r5, #1
 800d9f0:	2702      	movs	r7, #2
 800d9f2:	e6e1      	b.n	800d7b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800d9f4:	2500      	movs	r5, #0
 800d9f6:	2701      	movs	r7, #1
 800d9f8:	e7f4      	b.n	800d9e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800d9fa:	2702      	movs	r7, #2
 800d9fc:	2503      	movs	r5, #3
 800d9fe:	f04f 0900 	mov.w	r9, #0
 800da02:	46b8      	mov	r8, r7
 800da04:	e7e9      	b.n	800d9da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800da06:	4613      	mov	r3, r2
 800da08:	e728      	b.n	800d85c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800da0a:	bf00      	nop
 800da0c:	20024410 	.word	0x20024410
 800da10:	fffd8f01 	.word	0xfffd8f01
 800da14:	00027100 	.word	0x00027100
 800da18:	0004e1ff 	.word	0x0004e1ff
 800da1c:	0004e1fe 	.word	0x0004e1fe
 800da20:	20024418 	.word	0x20024418
 800da24:	4613      	mov	r3, r2
 800da26:	992b      	ldr	r1, [sp, #172]	; 0xac
 800da28:	469e      	mov	lr, r3
 800da2a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800da2c:	469c      	mov	ip, r3
 800da2e:	9111      	str	r1, [sp, #68]	; 0x44
 800da30:	f04f 0900 	mov.w	r9, #0
 800da34:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 800da38:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800da3c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800da40:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800da44:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 800da48:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800da4c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800da50:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800da54:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 800da58:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800da5c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800da60:	f1bc 0f00 	cmp.w	ip, #0
 800da64:	d147      	bne.n	800daf6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800da66:	eb03 0c07 	add.w	ip, r3, r7
 800da6a:	1ad7      	subs	r7, r2, r3
 800da6c:	f1b9 0f00 	cmp.w	r9, #0
 800da70:	d009      	beq.n	800da86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800da72:	9029      	str	r0, [sp, #164]	; 0xa4
 800da74:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800da78:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800da7c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 800da80:	912d      	str	r1, [sp, #180]	; 0xb4
 800da82:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 800da86:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800da88:	f04f 0800 	mov.w	r8, #0
 800da8c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800da90:	9111      	str	r1, [sp, #68]	; 0x44
 800da92:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800da96:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800da9a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800da9e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800daa2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800daa6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800daaa:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800daae:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800dab2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800dab6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800daba:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800dabe:	f1be 0f00 	cmp.w	lr, #0
 800dac2:	d031      	beq.n	800db28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800dac4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800dac6:	4450      	add	r0, sl
 800dac8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800dacc:	4431      	add	r1, r6
 800dace:	ee37 7a04 	vadd.f32	s14, s14, s8
 800dad2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800dad6:	4549      	cmp	r1, r9
 800dad8:	db08      	blt.n	800daec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800dada:	ee77 7a85 	vadd.f32	s15, s15, s10
 800dade:	3001      	adds	r0, #1
 800dae0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800dae4:	eba1 0109 	sub.w	r1, r1, r9
 800dae8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800daec:	f10e 3eff 	add.w	lr, lr, #4294967295
 800daf0:	f04f 0801 	mov.w	r8, #1
 800daf4:	e7e3      	b.n	800dabe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800daf6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800daf8:	4450      	add	r0, sl
 800dafa:	ee37 7a24 	vadd.f32	s14, s14, s9
 800dafe:	4431      	add	r1, r6
 800db00:	ee77 7a84 	vadd.f32	s15, s15, s8
 800db04:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800db08:	4541      	cmp	r1, r8
 800db0a:	db08      	blt.n	800db1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800db0c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800db10:	3001      	adds	r0, #1
 800db12:	ee37 7a25 	vadd.f32	s14, s14, s11
 800db16:	eba1 0108 	sub.w	r1, r1, r8
 800db1a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800db1e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800db22:	f04f 0901 	mov.w	r9, #1
 800db26:	e79b      	b.n	800da60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800db28:	449c      	add	ip, r3
 800db2a:	1aff      	subs	r7, r7, r3
 800db2c:	f1b8 0f00 	cmp.w	r8, #0
 800db30:	d009      	beq.n	800db46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800db32:	9019      	str	r0, [sp, #100]	; 0x64
 800db34:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800db38:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800db3c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800db40:	911d      	str	r1, [sp, #116]	; 0x74
 800db42:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800db46:	1ad2      	subs	r2, r2, r3
 800db48:	e68b      	b.n	800d862 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800db4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db4c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800db4e:	2b00      	cmp	r3, #0
 800db50:	f000 80d1 	beq.w	800dcf6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800db54:	ad19      	add	r5, sp, #100	; 0x64
 800db56:	ac39      	add	r4, sp, #228	; 0xe4
 800db58:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800db5a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800db5e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800db62:	930c      	str	r3, [sp, #48]	; 0x30
 800db64:	990c      	ldr	r1, [sp, #48]	; 0x30
 800db66:	6963      	ldr	r3, [r4, #20]
 800db68:	440b      	add	r3, r1
 800db6a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800db6e:	4408      	add	r0, r1
 800db70:	b200      	sxth	r0, r0
 800db72:	4283      	cmp	r3, r0
 800db74:	900d      	str	r0, [sp, #52]	; 0x34
 800db76:	f280 80c1 	bge.w	800dcfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800db7a:	428b      	cmp	r3, r1
 800db7c:	da08      	bge.n	800db90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800db7e:	2a00      	cmp	r2, #0
 800db80:	dd06      	ble.n	800db90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800db82:	1acb      	subs	r3, r1, r3
 800db84:	429a      	cmp	r2, r3
 800db86:	f2c0 80bb 	blt.w	800dd00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	f300 80b9 	bgt.w	800dd02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800db90:	6967      	ldr	r7, [r4, #20]
 800db92:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800db96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db98:	443b      	add	r3, r7
 800db9a:	461f      	mov	r7, r3
 800db9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db9e:	1bdf      	subs	r7, r3, r7
 800dba0:	4297      	cmp	r7, r2
 800dba2:	bfa8      	it	ge
 800dba4:	4617      	movge	r7, r2
 800dba6:	2f00      	cmp	r7, #0
 800dba8:	f340 813c 	ble.w	800de24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800dbac:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800dbae:	6829      	ldr	r1, [r5, #0]
 800dbb0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dbb4:	f9bb 3000 	ldrsh.w	r3, [fp]
 800dbb8:	4411      	add	r1, r2
 800dbba:	6820      	ldr	r0, [r4, #0]
 800dbbc:	4299      	cmp	r1, r3
 800dbbe:	dd1a      	ble.n	800dbf6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800dbc0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800dbc4:	4402      	add	r2, r0
 800dbc6:	440b      	add	r3, r1
 800dbc8:	b21b      	sxth	r3, r3
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	dc13      	bgt.n	800dbf6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800dbce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dbd0:	a912      	add	r1, sp, #72	; 0x48
 800dbd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	9206      	str	r2, [sp, #24]
 800dbda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dbdc:	9500      	str	r5, [sp, #0]
 800dbde:	9205      	str	r2, [sp, #20]
 800dbe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbe2:	e9cd b203 	strd	fp, r2, [sp, #12]
 800dbe6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800dbe8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800dbec:	aa49      	add	r2, sp, #292	; 0x124
 800dbee:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800dbf2:	4623      	mov	r3, r4
 800dbf4:	47c8      	blx	r9
 800dbf6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800dbfa:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800dbfe:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800dc02:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc06:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800dc0a:	68a1      	ldr	r1, [r4, #8]
 800dc0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc10:	ed94 6a08 	vldr	s12, [r4, #32]
 800dc14:	edd4 6a07 	vldr	s13, [r4, #28]
 800dc18:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800dc1c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800dc20:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800dc24:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dc28:	edc4 6a07 	vstr	s13, [r4, #28]
 800dc2c:	441a      	add	r2, r3
 800dc2e:	6963      	ldr	r3, [r4, #20]
 800dc30:	3301      	adds	r3, #1
 800dc32:	6022      	str	r2, [r4, #0]
 800dc34:	6163      	str	r3, [r4, #20]
 800dc36:	69a3      	ldr	r3, [r4, #24]
 800dc38:	3b01      	subs	r3, #1
 800dc3a:	61a3      	str	r3, [r4, #24]
 800dc3c:	6923      	ldr	r3, [r4, #16]
 800dc3e:	440b      	add	r3, r1
 800dc40:	68e1      	ldr	r1, [r4, #12]
 800dc42:	428b      	cmp	r3, r1
 800dc44:	6123      	str	r3, [r4, #16]
 800dc46:	db15      	blt.n	800dc74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800dc48:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800dc4c:	3201      	adds	r2, #1
 800dc4e:	1a5b      	subs	r3, r3, r1
 800dc50:	ee76 6a26 	vadd.f32	s13, s12, s13
 800dc54:	6022      	str	r2, [r4, #0]
 800dc56:	6123      	str	r3, [r4, #16]
 800dc58:	edc4 6a07 	vstr	s13, [r4, #28]
 800dc5c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800dc60:	ee36 7a87 	vadd.f32	s14, s13, s14
 800dc64:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800dc68:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800dc6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc70:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800dc74:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800dc78:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800dc7c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800dc80:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc84:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800dc88:	68a9      	ldr	r1, [r5, #8]
 800dc8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc8e:	ed95 6a08 	vldr	s12, [r5, #32]
 800dc92:	edd5 6a07 	vldr	s13, [r5, #28]
 800dc96:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800dc9a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800dc9e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800dca2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dca6:	edc5 6a07 	vstr	s13, [r5, #28]
 800dcaa:	441a      	add	r2, r3
 800dcac:	696b      	ldr	r3, [r5, #20]
 800dcae:	3301      	adds	r3, #1
 800dcb0:	602a      	str	r2, [r5, #0]
 800dcb2:	616b      	str	r3, [r5, #20]
 800dcb4:	69ab      	ldr	r3, [r5, #24]
 800dcb6:	3b01      	subs	r3, #1
 800dcb8:	61ab      	str	r3, [r5, #24]
 800dcba:	692b      	ldr	r3, [r5, #16]
 800dcbc:	440b      	add	r3, r1
 800dcbe:	68e9      	ldr	r1, [r5, #12]
 800dcc0:	428b      	cmp	r3, r1
 800dcc2:	612b      	str	r3, [r5, #16]
 800dcc4:	db15      	blt.n	800dcf2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800dcc6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800dcca:	3201      	adds	r2, #1
 800dccc:	1a5b      	subs	r3, r3, r1
 800dcce:	ee76 6a26 	vadd.f32	s13, s12, s13
 800dcd2:	602a      	str	r2, [r5, #0]
 800dcd4:	612b      	str	r3, [r5, #16]
 800dcd6:	edc5 6a07 	vstr	s13, [r5, #28]
 800dcda:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800dcde:	ee36 7a87 	vadd.f32	s14, s13, s14
 800dce2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800dce6:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800dcea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dcee:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800dcf2:	3f01      	subs	r7, #1
 800dcf4:	e757      	b.n	800dba6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800dcf6:	ad39      	add	r5, sp, #228	; 0xe4
 800dcf8:	ac19      	add	r4, sp, #100	; 0x64
 800dcfa:	e72d      	b.n	800db58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800dcfc:	4613      	mov	r3, r2
 800dcfe:	e744      	b.n	800db8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800dd00:	4613      	mov	r3, r2
 800dd02:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800dd04:	469e      	mov	lr, r3
 800dd06:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 800dd0a:	461f      	mov	r7, r3
 800dd0c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800dd10:	f04f 0900 	mov.w	r9, #0
 800dd14:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 800dd18:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 800dd1c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 800dd20:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800dd24:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 800dd28:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800dd2a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 800dd2e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800dd32:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800dd36:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 800dd3a:	960e      	str	r6, [sp, #56]	; 0x38
 800dd3c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 800dd40:	2f00      	cmp	r7, #0
 800dd42:	d146      	bne.n	800ddd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800dd44:	449c      	add	ip, r3
 800dd46:	1ad7      	subs	r7, r2, r3
 800dd48:	f1b9 0f00 	cmp.w	r9, #0
 800dd4c:	d009      	beq.n	800dd62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800dd4e:	9039      	str	r0, [sp, #228]	; 0xe4
 800dd50:	913d      	str	r1, [sp, #244]	; 0xf4
 800dd52:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800dd56:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800dd5a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800dd5e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 800dd62:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800dd64:	f04f 0800 	mov.w	r8, #0
 800dd68:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800dd6c:	910e      	str	r1, [sp, #56]	; 0x38
 800dd6e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800dd72:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800dd76:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800dd7a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800dd7e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800dd82:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800dd86:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800dd8a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800dd8e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800dd92:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800dd96:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800dd9a:	f1be 0f00 	cmp.w	lr, #0
 800dd9e:	d030      	beq.n	800de02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800dda0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800dda2:	4450      	add	r0, sl
 800dda4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800dda8:	4431      	add	r1, r6
 800ddaa:	ee37 7a04 	vadd.f32	s14, s14, s8
 800ddae:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800ddb2:	4549      	cmp	r1, r9
 800ddb4:	db08      	blt.n	800ddc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800ddb6:	ee77 7a85 	vadd.f32	s15, s15, s10
 800ddba:	3001      	adds	r0, #1
 800ddbc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800ddc0:	eba1 0109 	sub.w	r1, r1, r9
 800ddc4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ddc8:	f10e 3eff 	add.w	lr, lr, #4294967295
 800ddcc:	f04f 0801 	mov.w	r8, #1
 800ddd0:	e7e3      	b.n	800dd9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800ddd2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ddd4:	4450      	add	r0, sl
 800ddd6:	ee37 7a24 	vadd.f32	s14, s14, s9
 800ddda:	4431      	add	r1, r6
 800dddc:	ee77 7a84 	vadd.f32	s15, s15, s8
 800dde0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800dde4:	4541      	cmp	r1, r8
 800dde6:	db08      	blt.n	800ddfa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800dde8:	ee76 6a85 	vadd.f32	s13, s13, s10
 800ddec:	3001      	adds	r0, #1
 800ddee:	ee37 7a25 	vadd.f32	s14, s14, s11
 800ddf2:	eba1 0108 	sub.w	r1, r1, r8
 800ddf6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ddfa:	3f01      	subs	r7, #1
 800ddfc:	f04f 0901 	mov.w	r9, #1
 800de00:	e79e      	b.n	800dd40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800de02:	449c      	add	ip, r3
 800de04:	1aff      	subs	r7, r7, r3
 800de06:	f1b8 0f00 	cmp.w	r8, #0
 800de0a:	d009      	beq.n	800de20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800de0c:	9019      	str	r0, [sp, #100]	; 0x64
 800de0e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800de12:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800de16:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800de1a:	911d      	str	r1, [sp, #116]	; 0x74
 800de1c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800de20:	1ad2      	subs	r2, r2, r3
 800de22:	e6b5      	b.n	800db90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800de24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	b923      	cbnz	r3, 800de34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800de2a:	4b04      	ldr	r3, [pc, #16]	; (800de3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800de2c:	6818      	ldr	r0, [r3, #0]
 800de2e:	6803      	ldr	r3, [r0, #0]
 800de30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de32:	4798      	blx	r3
 800de34:	b05b      	add	sp, #364	; 0x16c
 800de36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de3a:	bf00      	nop
 800de3c:	20024418 	.word	0x20024418

0800de40 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800de40:	2b03      	cmp	r3, #3
 800de42:	d818      	bhi.n	800de76 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 800de44:	e8df f003 	tbb	[pc, r3]
 800de48:	130d0602 	.word	0x130d0602
 800de4c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800de50:	1850      	adds	r0, r2, r1
 800de52:	4770      	bx	lr
 800de54:	8803      	ldrh	r3, [r0, #0]
 800de56:	8880      	ldrh	r0, [r0, #4]
 800de58:	4418      	add	r0, r3
 800de5a:	b200      	sxth	r0, r0
 800de5c:	1a80      	subs	r0, r0, r2
 800de5e:	3801      	subs	r0, #1
 800de60:	4770      	bx	lr
 800de62:	8803      	ldrh	r3, [r0, #0]
 800de64:	8880      	ldrh	r0, [r0, #4]
 800de66:	4418      	add	r0, r3
 800de68:	b200      	sxth	r0, r0
 800de6a:	1a40      	subs	r0, r0, r1
 800de6c:	e7f7      	b.n	800de5e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800de6e:	f9b0 0000 	ldrsh.w	r0, [r0]
 800de72:	4410      	add	r0, r2
 800de74:	4770      	bx	lr
 800de76:	2000      	movs	r0, #0
 800de78:	4770      	bx	lr

0800de7a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800de7a:	2b03      	cmp	r3, #3
 800de7c:	d817      	bhi.n	800deae <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 800de7e:	e8df f003 	tbb	[pc, r3]
 800de82:	0602      	.short	0x0602
 800de84:	1009      	.short	0x1009
 800de86:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800de8a:	1850      	adds	r0, r2, r1
 800de8c:	4770      	bx	lr
 800de8e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800de92:	e7fa      	b.n	800de8a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 800de94:	8843      	ldrh	r3, [r0, #2]
 800de96:	88c0      	ldrh	r0, [r0, #6]
 800de98:	4418      	add	r0, r3
 800de9a:	b200      	sxth	r0, r0
 800de9c:	1a80      	subs	r0, r0, r2
 800de9e:	3801      	subs	r0, #1
 800dea0:	4770      	bx	lr
 800dea2:	8843      	ldrh	r3, [r0, #2]
 800dea4:	88c0      	ldrh	r0, [r0, #6]
 800dea6:	4418      	add	r0, r3
 800dea8:	b200      	sxth	r0, r0
 800deaa:	1a40      	subs	r0, r0, r1
 800deac:	e7f7      	b.n	800de9e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800deae:	2000      	movs	r0, #0
 800deb0:	4770      	bx	lr
	...

0800deb4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800deb4:	4b01      	ldr	r3, [pc, #4]	; (800debc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800deb6:	2200      	movs	r2, #0
 800deb8:	601a      	str	r2, [r3, #0]
 800deba:	4770      	bx	lr
 800debc:	20024420 	.word	0x20024420

0800dec0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800dec0:	4603      	mov	r3, r0
 800dec2:	b1c8      	cbz	r0, 800def8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800dec4:	0c02      	lsrs	r2, r0, #16
 800dec6:	0412      	lsls	r2, r2, #16
 800dec8:	b9a2      	cbnz	r2, 800def4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800deca:	0403      	lsls	r3, r0, #16
 800decc:	2010      	movs	r0, #16
 800dece:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ded2:	bf04      	itt	eq
 800ded4:	021b      	lsleq	r3, r3, #8
 800ded6:	3008      	addeq	r0, #8
 800ded8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800dedc:	bf04      	itt	eq
 800dede:	011b      	lsleq	r3, r3, #4
 800dee0:	3004      	addeq	r0, #4
 800dee2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800dee6:	bf04      	itt	eq
 800dee8:	009b      	lsleq	r3, r3, #2
 800deea:	3002      	addeq	r0, #2
 800deec:	2b00      	cmp	r3, #0
 800deee:	db04      	blt.n	800defa <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800def0:	3001      	adds	r0, #1
 800def2:	4770      	bx	lr
 800def4:	2000      	movs	r0, #0
 800def6:	e7ea      	b.n	800dece <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800def8:	2020      	movs	r0, #32
 800defa:	4770      	bx	lr

0800defc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800defc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df00:	b087      	sub	sp, #28
 800df02:	4681      	mov	r9, r0
 800df04:	4698      	mov	r8, r3
 800df06:	4610      	mov	r0, r2
 800df08:	460d      	mov	r5, r1
 800df0a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 800df0e:	b981      	cbnz	r1, 800df32 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 800df10:	b14b      	cbz	r3, 800df26 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 800df12:	460b      	mov	r3, r1
 800df14:	464a      	mov	r2, r9
 800df16:	4641      	mov	r1, r8
 800df18:	e9cd 4700 	strd	r4, r7, [sp]
 800df1c:	f7ff ffee 	bl	800defc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800df20:	b007      	add	sp, #28
 800df22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df26:	f04f 33ff 	mov.w	r3, #4294967295
 800df2a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800df2e:	603b      	str	r3, [r7, #0]
 800df30:	e7f6      	b.n	800df20 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800df32:	fa32 fa01 	lsrs.w	sl, r2, r1
 800df36:	d107      	bne.n	800df48 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 800df38:	fb09 f602 	mul.w	r6, r9, r2
 800df3c:	fbb6 f0f4 	udiv	r0, r6, r4
 800df40:	fb04 6610 	mls	r6, r4, r0, r6
 800df44:	603e      	str	r6, [r7, #0]
 800df46:	e7eb      	b.n	800df20 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800df48:	2601      	movs	r6, #1
 800df4a:	fa09 fb01 	lsl.w	fp, r9, r1
 800df4e:	408e      	lsls	r6, r1
 800df50:	fbbb f3f4 	udiv	r3, fp, r4
 800df54:	3e01      	subs	r6, #1
 800df56:	9302      	str	r3, [sp, #8]
 800df58:	fb0a f303 	mul.w	r3, sl, r3
 800df5c:	4016      	ands	r6, r2
 800df5e:	9303      	str	r3, [sp, #12]
 800df60:	4630      	mov	r0, r6
 800df62:	f7ff ffad 	bl	800dec0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800df66:	464a      	mov	r2, r9
 800df68:	460b      	mov	r3, r1
 800df6a:	4601      	mov	r1, r0
 800df6c:	4630      	mov	r0, r6
 800df6e:	e9cd 4700 	strd	r4, r7, [sp]
 800df72:	f7ff ffc3 	bl	800defc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800df76:	9b02      	ldr	r3, [sp, #8]
 800df78:	4606      	mov	r6, r0
 800df7a:	eb05 0108 	add.w	r1, r5, r8
 800df7e:	fb04 bb13 	mls	fp, r4, r3, fp
 800df82:	4658      	mov	r0, fp
 800df84:	f7ff ff9c 	bl	800dec0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800df88:	ab05      	add	r3, sp, #20
 800df8a:	465a      	mov	r2, fp
 800df8c:	e9cd 4300 	strd	r4, r3, [sp]
 800df90:	4603      	mov	r3, r0
 800df92:	4650      	mov	r0, sl
 800df94:	f7ff ffb2 	bl	800defc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800df98:	6839      	ldr	r1, [r7, #0]
 800df9a:	9a05      	ldr	r2, [sp, #20]
 800df9c:	9b03      	ldr	r3, [sp, #12]
 800df9e:	4411      	add	r1, r2
 800dfa0:	fbb1 f2f4 	udiv	r2, r1, r4
 800dfa4:	18d3      	adds	r3, r2, r3
 800dfa6:	fb04 1412 	mls	r4, r4, r2, r1
 800dfaa:	441e      	add	r6, r3
 800dfac:	603c      	str	r4, [r7, #0]
 800dfae:	4430      	add	r0, r6
 800dfb0:	e7b6      	b.n	800df20 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0800dfb2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800dfb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfb6:	b085      	sub	sp, #20
 800dfb8:	f1b0 0900 	subs.w	r9, r0, #0
 800dfbc:	461d      	mov	r5, r3
 800dfbe:	4617      	mov	r7, r2
 800dfc0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800dfc2:	bfbb      	ittet	lt
 800dfc4:	f1c9 0900 	rsblt	r9, r9, #0
 800dfc8:	f04f 36ff 	movlt.w	r6, #4294967295
 800dfcc:	2601      	movge	r6, #1
 800dfce:	6823      	ldrlt	r3, [r4, #0]
 800dfd0:	bfbc      	itt	lt
 800dfd2:	425b      	neglt	r3, r3
 800dfd4:	6023      	strlt	r3, [r4, #0]
 800dfd6:	2a00      	cmp	r2, #0
 800dfd8:	da04      	bge.n	800dfe4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800dfda:	6823      	ldr	r3, [r4, #0]
 800dfdc:	4257      	negs	r7, r2
 800dfde:	4276      	negs	r6, r6
 800dfe0:	425b      	negs	r3, r3
 800dfe2:	6023      	str	r3, [r4, #0]
 800dfe4:	2d00      	cmp	r5, #0
 800dfe6:	4638      	mov	r0, r7
 800dfe8:	bfba      	itte	lt
 800dfea:	426d      	neglt	r5, r5
 800dfec:	f04f 38ff 	movlt.w	r8, #4294967295
 800dff0:	f04f 0801 	movge.w	r8, #1
 800dff4:	f7ff ff64 	bl	800dec0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800dff8:	ab03      	add	r3, sp, #12
 800dffa:	463a      	mov	r2, r7
 800dffc:	e9cd 5300 	strd	r5, r3, [sp]
 800e000:	4603      	mov	r3, r0
 800e002:	4648      	mov	r0, r9
 800e004:	f7ff ff7a 	bl	800defc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800e008:	6823      	ldr	r3, [r4, #0]
 800e00a:	9a03      	ldr	r2, [sp, #12]
 800e00c:	4546      	cmp	r6, r8
 800e00e:	441a      	add	r2, r3
 800e010:	fb92 f3f5 	sdiv	r3, r2, r5
 800e014:	4418      	add	r0, r3
 800e016:	fb05 2313 	mls	r3, r5, r3, r2
 800e01a:	bf18      	it	ne
 800e01c:	4240      	negne	r0, r0
 800e01e:	1c72      	adds	r2, r6, #1
 800e020:	6023      	str	r3, [r4, #0]
 800e022:	d105      	bne.n	800e030 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800e024:	2b00      	cmp	r3, #0
 800e026:	f1c3 0200 	rsb	r2, r3, #0
 800e02a:	db0b      	blt.n	800e044 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800e02c:	6022      	str	r2, [r4, #0]
 800e02e:	e006      	b.n	800e03e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800e030:	2e01      	cmp	r6, #1
 800e032:	d104      	bne.n	800e03e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800e034:	2b00      	cmp	r3, #0
 800e036:	da02      	bge.n	800e03e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800e038:	442b      	add	r3, r5
 800e03a:	3801      	subs	r0, #1
 800e03c:	6023      	str	r3, [r4, #0]
 800e03e:	b005      	add	sp, #20
 800e040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e044:	3801      	subs	r0, #1
 800e046:	1b52      	subs	r2, r2, r5
 800e048:	e7f0      	b.n	800e02c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0800e04c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800e04c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800e050:	4c1c      	ldr	r4, [pc, #112]	; (800e0c4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800e052:	4605      	mov	r5, r0
 800e054:	6807      	ldr	r7, [r0, #0]
 800e056:	69a3      	ldr	r3, [r4, #24]
 800e058:	b92b      	cbnz	r3, 800e066 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800e05a:	6840      	ldr	r0, [r0, #4]
 800e05c:	e9c5 7000 	strd	r7, r0, [r5]
 800e060:	b004      	add	sp, #16
 800e062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e066:	f04f 0802 	mov.w	r8, #2
 800e06a:	68a2      	ldr	r2, [r4, #8]
 800e06c:	ae04      	add	r6, sp, #16
 800e06e:	6820      	ldr	r0, [r4, #0]
 800e070:	fb93 f1f8 	sdiv	r1, r3, r8
 800e074:	440a      	add	r2, r1
 800e076:	69e1      	ldr	r1, [r4, #28]
 800e078:	f846 2d04 	str.w	r2, [r6, #-4]!
 800e07c:	463a      	mov	r2, r7
 800e07e:	9600      	str	r6, [sp, #0]
 800e080:	f7ff ff97 	bl	800dfb2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800e084:	69a3      	ldr	r3, [r4, #24]
 800e086:	4607      	mov	r7, r0
 800e088:	686a      	ldr	r2, [r5, #4]
 800e08a:	6a21      	ldr	r1, [r4, #32]
 800e08c:	9600      	str	r6, [sp, #0]
 800e08e:	6860      	ldr	r0, [r4, #4]
 800e090:	f7ff ff8f 	bl	800dfb2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800e094:	69a3      	ldr	r3, [r4, #24]
 800e096:	6962      	ldr	r2, [r4, #20]
 800e098:	4407      	add	r7, r0
 800e09a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e09c:	9600      	str	r6, [sp, #0]
 800e09e:	68e0      	ldr	r0, [r4, #12]
 800e0a0:	fb93 f8f8 	sdiv	r8, r3, r8
 800e0a4:	4442      	add	r2, r8
 800e0a6:	9203      	str	r2, [sp, #12]
 800e0a8:	682a      	ldr	r2, [r5, #0]
 800e0aa:	f7ff ff82 	bl	800dfb2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800e0ae:	4680      	mov	r8, r0
 800e0b0:	9600      	str	r6, [sp, #0]
 800e0b2:	69a3      	ldr	r3, [r4, #24]
 800e0b4:	686a      	ldr	r2, [r5, #4]
 800e0b6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e0b8:	6920      	ldr	r0, [r4, #16]
 800e0ba:	f7ff ff7a 	bl	800dfb2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800e0be:	4440      	add	r0, r8
 800e0c0:	e7cc      	b.n	800e05c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800e0c2:	bf00      	nop
 800e0c4:	20024424 	.word	0x20024424

0800e0c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800e0c8:	4b07      	ldr	r3, [pc, #28]	; (800e0e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800e0ca:	781b      	ldrb	r3, [r3, #0]
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d109      	bne.n	800e0e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800e0d0:	f9b1 3000 	ldrsh.w	r3, [r1]
 800e0d4:	f9b0 2000 	ldrsh.w	r2, [r0]
 800e0d8:	8003      	strh	r3, [r0, #0]
 800e0da:	4b04      	ldr	r3, [pc, #16]	; (800e0ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800e0dc:	881b      	ldrh	r3, [r3, #0]
 800e0de:	3b01      	subs	r3, #1
 800e0e0:	1a9b      	subs	r3, r3, r2
 800e0e2:	800b      	strh	r3, [r1, #0]
 800e0e4:	4770      	bx	lr
 800e0e6:	bf00      	nop
 800e0e8:	20024410 	.word	0x20024410
 800e0ec:	2002440c 	.word	0x2002440c

0800e0f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800e0f0:	4b07      	ldr	r3, [pc, #28]	; (800e110 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800e0f2:	b510      	push	{r4, lr}
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	d108      	bne.n	800e10c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800e0fa:	4b06      	ldr	r3, [pc, #24]	; (800e114 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800e0fc:	880c      	ldrh	r4, [r1, #0]
 800e0fe:	881b      	ldrh	r3, [r3, #0]
 800e100:	f9b0 2000 	ldrsh.w	r2, [r0]
 800e104:	3b01      	subs	r3, #1
 800e106:	1b1b      	subs	r3, r3, r4
 800e108:	8003      	strh	r3, [r0, #0]
 800e10a:	800a      	strh	r2, [r1, #0]
 800e10c:	bd10      	pop	{r4, pc}
 800e10e:	bf00      	nop
 800e110:	20024410 	.word	0x20024410
 800e114:	2002440c 	.word	0x2002440c

0800e118 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800e118:	4b0a      	ldr	r3, [pc, #40]	; (800e144 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800e11a:	b510      	push	{r4, lr}
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	2b01      	cmp	r3, #1
 800e120:	d10e      	bne.n	800e140 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800e122:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800e126:	8843      	ldrh	r3, [r0, #2]
 800e128:	f9b0 4000 	ldrsh.w	r4, [r0]
 800e12c:	18ca      	adds	r2, r1, r3
 800e12e:	4b06      	ldr	r3, [pc, #24]	; (800e148 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800e130:	8044      	strh	r4, [r0, #2]
 800e132:	881b      	ldrh	r3, [r3, #0]
 800e134:	1a9b      	subs	r3, r3, r2
 800e136:	8003      	strh	r3, [r0, #0]
 800e138:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800e13c:	8081      	strh	r1, [r0, #4]
 800e13e:	80c3      	strh	r3, [r0, #6]
 800e140:	bd10      	pop	{r4, pc}
 800e142:	bf00      	nop
 800e144:	20024410 	.word	0x20024410
 800e148:	2002440c 	.word	0x2002440c

0800e14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800e14c:	4b08      	ldr	r3, [pc, #32]	; (800e170 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	2b01      	cmp	r3, #1
 800e152:	d10c      	bne.n	800e16e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800e154:	8803      	ldrh	r3, [r0, #0]
 800e156:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800e15a:	8842      	ldrh	r2, [r0, #2]
 800e15c:	8002      	strh	r2, [r0, #0]
 800e15e:	185a      	adds	r2, r3, r1
 800e160:	4b04      	ldr	r3, [pc, #16]	; (800e174 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800e162:	881b      	ldrh	r3, [r3, #0]
 800e164:	1a9b      	subs	r3, r3, r2
 800e166:	8043      	strh	r3, [r0, #2]
 800e168:	88c3      	ldrh	r3, [r0, #6]
 800e16a:	80c1      	strh	r1, [r0, #6]
 800e16c:	8083      	strh	r3, [r0, #4]
 800e16e:	4770      	bx	lr
 800e170:	20024410 	.word	0x20024410
 800e174:	2002440c 	.word	0x2002440c

0800e178 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800e178:	4b07      	ldr	r3, [pc, #28]	; (800e198 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800e17a:	b510      	push	{r4, lr}
 800e17c:	781b      	ldrb	r3, [r3, #0]
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d108      	bne.n	800e194 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800e182:	f9b1 3000 	ldrsh.w	r3, [r1]
 800e186:	f9b0 4000 	ldrsh.w	r4, [r0]
 800e18a:	8003      	strh	r3, [r0, #0]
 800e18c:	8893      	ldrh	r3, [r2, #4]
 800e18e:	3b01      	subs	r3, #1
 800e190:	1b1b      	subs	r3, r3, r4
 800e192:	800b      	strh	r3, [r1, #0]
 800e194:	bd10      	pop	{r4, pc}
 800e196:	bf00      	nop
 800e198:	20024410 	.word	0x20024410

0800e19c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800e19c:	4b0a      	ldr	r3, [pc, #40]	; (800e1c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800e19e:	460a      	mov	r2, r1
 800e1a0:	b510      	push	{r4, lr}
 800e1a2:	781b      	ldrb	r3, [r3, #0]
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d10d      	bne.n	800e1c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800e1a8:	8881      	ldrh	r1, [r0, #4]
 800e1aa:	8803      	ldrh	r3, [r0, #0]
 800e1ac:	440b      	add	r3, r1
 800e1ae:	4601      	mov	r1, r0
 800e1b0:	3b01      	subs	r3, #1
 800e1b2:	f821 3b02 	strh.w	r3, [r1], #2
 800e1b6:	f7ff ffdf 	bl	800e178 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800e1ba:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800e1be:	88c2      	ldrh	r2, [r0, #6]
 800e1c0:	80c3      	strh	r3, [r0, #6]
 800e1c2:	8082      	strh	r2, [r0, #4]
 800e1c4:	bd10      	pop	{r4, pc}
 800e1c6:	bf00      	nop
 800e1c8:	20024410 	.word	0x20024410

0800e1cc <_ZN8touchgfx11Application13requestRedrawEv>:
 800e1cc:	4b06      	ldr	r3, [pc, #24]	; (800e1e8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800e1ce:	2100      	movs	r1, #0
 800e1d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e1d4:	4b05      	ldr	r3, [pc, #20]	; (800e1ec <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800e1d6:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 800e1da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e1de:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 800e1e2:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 800e1e6:	4770      	bx	lr
 800e1e8:	2002440c 	.word	0x2002440c
 800e1ec:	2002440e 	.word	0x2002440e

0800e1f0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800e1f0:	4b03      	ldr	r3, [pc, #12]	; (800e200 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800e1f2:	6818      	ldr	r0, [r3, #0]
 800e1f4:	b110      	cbz	r0, 800e1fc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800e1f6:	6803      	ldr	r3, [r0, #0]
 800e1f8:	699b      	ldr	r3, [r3, #24]
 800e1fa:	4718      	bx	r3
 800e1fc:	4770      	bx	lr
 800e1fe:	bf00      	nop
 800e200:	20024454 	.word	0x20024454

0800e204 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800e204:	4770      	bx	lr
	...

0800e208 <_ZN8touchgfx11Application4drawEv>:
 800e208:	4b09      	ldr	r3, [pc, #36]	; (800e230 <_ZN8touchgfx11Application4drawEv+0x28>)
 800e20a:	b507      	push	{r0, r1, r2, lr}
 800e20c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e210:	2100      	movs	r1, #0
 800e212:	4b08      	ldr	r3, [pc, #32]	; (800e234 <_ZN8touchgfx11Application4drawEv+0x2c>)
 800e214:	9100      	str	r1, [sp, #0]
 800e216:	4669      	mov	r1, sp
 800e218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e21c:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e220:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e224:	6803      	ldr	r3, [r0, #0]
 800e226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e228:	4798      	blx	r3
 800e22a:	b003      	add	sp, #12
 800e22c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e230:	2002440c 	.word	0x2002440c
 800e234:	2002440e 	.word	0x2002440e

0800e238 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800e238:	4b03      	ldr	r3, [pc, #12]	; (800e248 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800e23a:	6818      	ldr	r0, [r3, #0]
 800e23c:	b110      	cbz	r0, 800e244 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800e23e:	6803      	ldr	r3, [r0, #0]
 800e240:	69db      	ldr	r3, [r3, #28]
 800e242:	4718      	bx	r3
 800e244:	4770      	bx	lr
 800e246:	bf00      	nop
 800e248:	20024454 	.word	0x20024454

0800e24c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800e24c:	4b03      	ldr	r3, [pc, #12]	; (800e25c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800e24e:	6818      	ldr	r0, [r3, #0]
 800e250:	b110      	cbz	r0, 800e258 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800e252:	6803      	ldr	r3, [r0, #0]
 800e254:	6a1b      	ldr	r3, [r3, #32]
 800e256:	4718      	bx	r3
 800e258:	4770      	bx	lr
 800e25a:	bf00      	nop
 800e25c:	20024454 	.word	0x20024454

0800e260 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800e260:	2300      	movs	r3, #0
 800e262:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 800e266:	4770      	bx	lr

0800e268 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800e268:	4b03      	ldr	r3, [pc, #12]	; (800e278 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800e26a:	6818      	ldr	r0, [r3, #0]
 800e26c:	b110      	cbz	r0, 800e274 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800e26e:	6803      	ldr	r3, [r0, #0]
 800e270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e272:	4718      	bx	r3
 800e274:	4770      	bx	lr
 800e276:	bf00      	nop
 800e278:	20024454 	.word	0x20024454

0800e27c <_ZN8touchgfx11ApplicationD1Ev>:
 800e27c:	4770      	bx	lr

0800e27e <_ZN8touchgfx11ApplicationD0Ev>:
 800e27e:	b510      	push	{r4, lr}
 800e280:	4604      	mov	r4, r0
 800e282:	f44f 719e 	mov.w	r1, #316	; 0x13c
 800e286:	f00e fb2f 	bl	801c8e8 <_ZdlPvj>
 800e28a:	4620      	mov	r0, r4
 800e28c:	bd10      	pop	{r4, pc}

0800e28e <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800e28e:	b510      	push	{r4, lr}
 800e290:	f9b1 4000 	ldrsh.w	r4, [r1]
 800e294:	888a      	ldrh	r2, [r1, #4]
 800e296:	f9b0 3000 	ldrsh.w	r3, [r0]
 800e29a:	4422      	add	r2, r4
 800e29c:	b212      	sxth	r2, r2
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	da15      	bge.n	800e2ce <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800e2a2:	8882      	ldrh	r2, [r0, #4]
 800e2a4:	4413      	add	r3, r2
 800e2a6:	b21b      	sxth	r3, r3
 800e2a8:	429c      	cmp	r4, r3
 800e2aa:	da10      	bge.n	800e2ce <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800e2ac:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800e2b0:	88c9      	ldrh	r1, [r1, #6]
 800e2b2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800e2b6:	4419      	add	r1, r3
 800e2b8:	b209      	sxth	r1, r1
 800e2ba:	428a      	cmp	r2, r1
 800e2bc:	da07      	bge.n	800e2ce <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800e2be:	88c0      	ldrh	r0, [r0, #6]
 800e2c0:	4410      	add	r0, r2
 800e2c2:	b200      	sxth	r0, r0
 800e2c4:	4283      	cmp	r3, r0
 800e2c6:	bfac      	ite	ge
 800e2c8:	2000      	movge	r0, #0
 800e2ca:	2001      	movlt	r0, #1
 800e2cc:	bd10      	pop	{r4, pc}
 800e2ce:	2000      	movs	r0, #0
 800e2d0:	e7fc      	b.n	800e2cc <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800e2d2 <_ZN8touchgfx4Rect10restrictToEss>:
 800e2d2:	f9b0 3000 	ldrsh.w	r3, [r0]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	b510      	push	{r4, lr}
 800e2da:	da04      	bge.n	800e2e6 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800e2dc:	8884      	ldrh	r4, [r0, #4]
 800e2de:	4423      	add	r3, r4
 800e2e0:	8083      	strh	r3, [r0, #4]
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	8003      	strh	r3, [r0, #0]
 800e2e6:	f9b0 4000 	ldrsh.w	r4, [r0]
 800e2ea:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800e2ee:	1b09      	subs	r1, r1, r4
 800e2f0:	428b      	cmp	r3, r1
 800e2f2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800e2f6:	bfc8      	it	gt
 800e2f8:	8081      	strhgt	r1, [r0, #4]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	da04      	bge.n	800e308 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800e2fe:	88c1      	ldrh	r1, [r0, #6]
 800e300:	440b      	add	r3, r1
 800e302:	80c3      	strh	r3, [r0, #6]
 800e304:	2300      	movs	r3, #0
 800e306:	8043      	strh	r3, [r0, #2]
 800e308:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800e30c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800e310:	1a52      	subs	r2, r2, r1
 800e312:	4293      	cmp	r3, r2
 800e314:	bfc8      	it	gt
 800e316:	80c2      	strhgt	r2, [r0, #6]
 800e318:	bd10      	pop	{r4, pc}
	...

0800e31c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800e31c:	4b10      	ldr	r3, [pc, #64]	; (800e360 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800e31e:	b510      	push	{r4, lr}
 800e320:	460c      	mov	r4, r1
 800e322:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e326:	4b0f      	ldr	r3, [pc, #60]	; (800e364 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800e328:	4620      	mov	r0, r4
 800e32a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e32e:	f7ff ffd0 	bl	800e2d2 <_ZN8touchgfx4Rect10restrictToEss>
 800e332:	4b0d      	ldr	r3, [pc, #52]	; (800e368 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800e334:	6818      	ldr	r0, [r3, #0]
 800e336:	b190      	cbz	r0, 800e35e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800e338:	6803      	ldr	r3, [r0, #0]
 800e33a:	4621      	mov	r1, r4
 800e33c:	689b      	ldr	r3, [r3, #8]
 800e33e:	4798      	blx	r3
 800e340:	4b0a      	ldr	r3, [pc, #40]	; (800e36c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800e342:	6818      	ldr	r0, [r3, #0]
 800e344:	b118      	cbz	r0, 800e34e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800e346:	6803      	ldr	r3, [r0, #0]
 800e348:	4621      	mov	r1, r4
 800e34a:	689b      	ldr	r3, [r3, #8]
 800e34c:	4798      	blx	r3
 800e34e:	4b08      	ldr	r3, [pc, #32]	; (800e370 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800e350:	4621      	mov	r1, r4
 800e352:	6818      	ldr	r0, [r3, #0]
 800e354:	6803      	ldr	r3, [r0, #0]
 800e356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e35a:	69db      	ldr	r3, [r3, #28]
 800e35c:	4718      	bx	r3
 800e35e:	bd10      	pop	{r4, pc}
 800e360:	2002440e 	.word	0x2002440e
 800e364:	2002440c 	.word	0x2002440c
 800e368:	20024454 	.word	0x20024454
 800e36c:	20024450 	.word	0x20024450
 800e370:	20024418 	.word	0x20024418

0800e374 <_ZNK8touchgfx4Rect8includesERKS0_>:
 800e374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e376:	4606      	mov	r6, r0
 800e378:	4608      	mov	r0, r1
 800e37a:	460f      	mov	r7, r1
 800e37c:	f7fd ff71 	bl	800c262 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e380:	b9e8      	cbnz	r0, 800e3be <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800e382:	f9b7 5000 	ldrsh.w	r5, [r7]
 800e386:	f9b6 4000 	ldrsh.w	r4, [r6]
 800e38a:	42a5      	cmp	r5, r4
 800e38c:	db17      	blt.n	800e3be <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800e38e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e392:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800e396:	429a      	cmp	r2, r3
 800e398:	db11      	blt.n	800e3be <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800e39a:	88b9      	ldrh	r1, [r7, #4]
 800e39c:	440d      	add	r5, r1
 800e39e:	88b1      	ldrh	r1, [r6, #4]
 800e3a0:	440c      	add	r4, r1
 800e3a2:	b22d      	sxth	r5, r5
 800e3a4:	b224      	sxth	r4, r4
 800e3a6:	42a5      	cmp	r5, r4
 800e3a8:	dc09      	bgt.n	800e3be <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800e3aa:	88f8      	ldrh	r0, [r7, #6]
 800e3ac:	4410      	add	r0, r2
 800e3ae:	88f2      	ldrh	r2, [r6, #6]
 800e3b0:	4413      	add	r3, r2
 800e3b2:	b200      	sxth	r0, r0
 800e3b4:	b21b      	sxth	r3, r3
 800e3b6:	4298      	cmp	r0, r3
 800e3b8:	bfcc      	ite	gt
 800e3ba:	2000      	movgt	r0, #0
 800e3bc:	2001      	movle	r0, #1
 800e3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e3c0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800e3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3c2:	4604      	mov	r4, r0
 800e3c4:	4608      	mov	r0, r1
 800e3c6:	460d      	mov	r5, r1
 800e3c8:	f7fd ff4b 	bl	800c262 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e3cc:	b978      	cbnz	r0, 800e3ee <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800e3ce:	4620      	mov	r0, r4
 800e3d0:	f7fd ff47 	bl	800c262 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e3d4:	f9b5 6000 	ldrsh.w	r6, [r5]
 800e3d8:	b150      	cbz	r0, 800e3f0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800e3da:	8026      	strh	r6, [r4, #0]
 800e3dc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800e3e0:	8063      	strh	r3, [r4, #2]
 800e3e2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800e3e6:	80a3      	strh	r3, [r4, #4]
 800e3e8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800e3ec:	80e3      	strh	r3, [r4, #6]
 800e3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3f0:	f9b4 1000 	ldrsh.w	r1, [r4]
 800e3f4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800e3f8:	42b1      	cmp	r1, r6
 800e3fa:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800e3fe:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800e402:	460f      	mov	r7, r1
 800e404:	88ed      	ldrh	r5, [r5, #6]
 800e406:	bfa8      	it	ge
 800e408:	4637      	movge	r7, r6
 800e40a:	4293      	cmp	r3, r2
 800e40c:	4618      	mov	r0, r3
 800e40e:	4466      	add	r6, ip
 800e410:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800e414:	bfa8      	it	ge
 800e416:	4610      	movge	r0, r2
 800e418:	442a      	add	r2, r5
 800e41a:	88e5      	ldrh	r5, [r4, #6]
 800e41c:	4461      	add	r1, ip
 800e41e:	b236      	sxth	r6, r6
 800e420:	8027      	strh	r7, [r4, #0]
 800e422:	442b      	add	r3, r5
 800e424:	b209      	sxth	r1, r1
 800e426:	b212      	sxth	r2, r2
 800e428:	8060      	strh	r0, [r4, #2]
 800e42a:	b21b      	sxth	r3, r3
 800e42c:	428e      	cmp	r6, r1
 800e42e:	bfac      	ite	ge
 800e430:	ebc7 0106 	rsbge	r1, r7, r6
 800e434:	ebc7 0101 	rsblt	r1, r7, r1
 800e438:	429a      	cmp	r2, r3
 800e43a:	bfac      	ite	ge
 800e43c:	ebc0 0202 	rsbge	r2, r0, r2
 800e440:	ebc0 0203 	rsblt	r2, r0, r3
 800e444:	80a1      	strh	r1, [r4, #4]
 800e446:	80e2      	strh	r2, [r4, #6]
 800e448:	e7d1      	b.n	800e3ee <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800e44c <_ZN8touchgfx11Application11getInstanceEv>:
 800e44c:	4b01      	ldr	r3, [pc, #4]	; (800e454 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800e44e:	6818      	ldr	r0, [r3, #0]
 800e450:	4770      	bx	lr
 800e452:	bf00      	nop
 800e454:	20024464 	.word	0x20024464

0800e458 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 800e458:	2300      	movs	r3, #0
 800e45a:	b510      	push	{r4, lr}
 800e45c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 800e460:	4604      	mov	r4, r0
 800e462:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 800e466:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 800e46a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 800e46e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 800e472:	429a      	cmp	r2, r3
 800e474:	d90e      	bls.n	800e494 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 800e476:	18e2      	adds	r2, r4, r3
 800e478:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 800e47c:	b122      	cbz	r2, 800e488 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 800e47e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800e482:	6803      	ldr	r3, [r0, #0]
 800e484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e486:	4798      	blx	r3
 800e488:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 800e48c:	3301      	adds	r3, #1
 800e48e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 800e492:	e7ea      	b.n	800e46a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 800e494:	bd10      	pop	{r4, pc}

0800e496 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 800e496:	2300      	movs	r3, #0
 800e498:	f100 0284 	add.w	r2, r0, #132	; 0x84
 800e49c:	30a4      	adds	r0, #164	; 0xa4
 800e49e:	f820 3c24 	strh.w	r3, [r0, #-36]
 800e4a2:	f802 3b01 	strb.w	r3, [r2], #1
 800e4a6:	4282      	cmp	r2, r0
 800e4a8:	d1fb      	bne.n	800e4a2 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 800e4aa:	4770      	bx	lr

0800e4ac <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800e4ac:	b570      	push	{r4, r5, r6, lr}
 800e4ae:	4c0b      	ldr	r4, [pc, #44]	; (800e4dc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800e4b0:	4605      	mov	r5, r0
 800e4b2:	460e      	mov	r6, r1
 800e4b4:	6820      	ldr	r0, [r4, #0]
 800e4b6:	b110      	cbz	r0, 800e4be <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 800e4b8:	6803      	ldr	r3, [r0, #0]
 800e4ba:	695b      	ldr	r3, [r3, #20]
 800e4bc:	4798      	blx	r3
 800e4be:	1d28      	adds	r0, r5, #4
 800e4c0:	f7ff ffe9 	bl	800e496 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800e4c4:	6026      	str	r6, [r4, #0]
 800e4c6:	6833      	ldr	r3, [r6, #0]
 800e4c8:	4630      	mov	r0, r6
 800e4ca:	68db      	ldr	r3, [r3, #12]
 800e4cc:	4798      	blx	r3
 800e4ce:	682b      	ldr	r3, [r5, #0]
 800e4d0:	4628      	mov	r0, r5
 800e4d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e4d8:	4718      	bx	r3
 800e4da:	bf00      	nop
 800e4dc:	20024454 	.word	0x20024454

0800e4e0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 800e4e6:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4ee:	461c      	mov	r4, r3
 800e4f0:	461d      	mov	r5, r3
 800e4f2:	459c      	cmp	ip, r3
 800e4f4:	dd1a      	ble.n	800e52c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 800e4f6:	18c6      	adds	r6, r0, r3
 800e4f8:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 800e4fc:	b16e      	cbz	r6, 800e51a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d008      	beq.n	800e514 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 800e502:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 800e506:	fa1f fe82 	uxth.w	lr, r2
 800e50a:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 800e50e:	1887      	adds	r7, r0, r2
 800e510:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 800e514:	3201      	adds	r2, #1
 800e516:	3301      	adds	r3, #1
 800e518:	e7eb      	b.n	800e4f2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 800e51a:	4299      	cmp	r1, r3
 800e51c:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 800e520:	bfa8      	it	ge
 800e522:	3501      	addge	r5, #1
 800e524:	429e      	cmp	r6, r3
 800e526:	bfc8      	it	gt
 800e528:	3401      	addgt	r4, #1
 800e52a:	e7f4      	b.n	800e516 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 800e52c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 800e530:	1b49      	subs	r1, r1, r5
 800e532:	1b1b      	subs	r3, r3, r4
 800e534:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 800e538:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 800e53c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 800e540:	4293      	cmp	r3, r2
 800e542:	dd03      	ble.n	800e54c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 800e544:	3b01      	subs	r3, #1
 800e546:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 800e54a:	e7f7      	b.n	800e53c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 800e54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800e550 <_ZN8touchgfx11Application15handleTickEventEv>:
 800e550:	b570      	push	{r4, r5, r6, lr}
 800e552:	4d16      	ldr	r5, [pc, #88]	; (800e5ac <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 800e554:	4604      	mov	r4, r0
 800e556:	6828      	ldr	r0, [r5, #0]
 800e558:	b140      	cbz	r0, 800e56c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800e55a:	7a03      	ldrb	r3, [r0, #8]
 800e55c:	b933      	cbnz	r3, 800e56c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800e55e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800e562:	6803      	ldr	r3, [r0, #0]
 800e564:	689b      	ldr	r3, [r3, #8]
 800e566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e56a:	4718      	bx	r3
 800e56c:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 800e570:	4e0f      	ldr	r6, [pc, #60]	; (800e5b0 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 800e572:	b973      	cbnz	r3, 800e592 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800e574:	b168      	cbz	r0, 800e592 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800e576:	7a03      	ldrb	r3, [r0, #8]
 800e578:	b15b      	cbz	r3, 800e592 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800e57a:	6830      	ldr	r0, [r6, #0]
 800e57c:	b110      	cbz	r0, 800e584 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800e57e:	6803      	ldr	r3, [r0, #0]
 800e580:	691b      	ldr	r3, [r3, #16]
 800e582:	4798      	blx	r3
 800e584:	6828      	ldr	r0, [r5, #0]
 800e586:	6803      	ldr	r3, [r0, #0]
 800e588:	68db      	ldr	r3, [r3, #12]
 800e58a:	4798      	blx	r3
 800e58c:	2301      	movs	r3, #1
 800e58e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800e592:	3404      	adds	r4, #4
 800e594:	4620      	mov	r0, r4
 800e596:	f7ff ff5f 	bl	800e458 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 800e59a:	4620      	mov	r0, r4
 800e59c:	f7ff ffa0 	bl	800e4e0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 800e5a0:	6830      	ldr	r0, [r6, #0]
 800e5a2:	b110      	cbz	r0, 800e5aa <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 800e5a4:	6803      	ldr	r3, [r0, #0]
 800e5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5a8:	e7dd      	b.n	800e566 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800e5aa:	bd70      	pop	{r4, r5, r6, pc}
 800e5ac:	20024458 	.word	0x20024458
 800e5b0:	20024454 	.word	0x20024454

0800e5b4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	801a      	strh	r2, [r3, #0]
 800e5be:	3308      	adds	r3, #8
 800e5c0:	f823 2c06 	strh.w	r2, [r3, #-6]
 800e5c4:	f823 2c04 	strh.w	r2, [r3, #-4]
 800e5c8:	f823 2c02 	strh.w	r2, [r3, #-2]
 800e5cc:	428b      	cmp	r3, r1
 800e5ce:	d1f5      	bne.n	800e5bc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800e5d0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800e5d4:	4770      	bx	lr
	...

0800e5d8 <_ZN8touchgfx11ApplicationC1Ev>:
 800e5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5da:	4b1d      	ldr	r3, [pc, #116]	; (800e650 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800e5dc:	4606      	mov	r6, r0
 800e5de:	4604      	mov	r4, r0
 800e5e0:	2500      	movs	r5, #0
 800e5e2:	f846 3b04 	str.w	r3, [r6], #4
 800e5e6:	22a8      	movs	r2, #168	; 0xa8
 800e5e8:	2100      	movs	r1, #0
 800e5ea:	4630      	mov	r0, r6
 800e5ec:	f00e fa3a 	bl	801ca64 <memset>
 800e5f0:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 800e5f4:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 800e5f8:	4f16      	ldr	r7, [pc, #88]	; (800e654 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800e5fa:	f7ff ffdb 	bl	800e5b4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800e5fe:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 800e602:	f7ff ffd7 	bl	800e5b4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800e606:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 800e60a:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 800e60e:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 800e612:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 800e616:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 800e61a:	490f      	ldr	r1, [pc, #60]	; (800e658 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800e61c:	480f      	ldr	r0, [pc, #60]	; (800e65c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800e61e:	f00e f83b 	bl	801c698 <CRC_Lock>
 800e622:	4b0f      	ldr	r3, [pc, #60]	; (800e660 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 800e624:	b158      	cbz	r0, 800e63e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 800e626:	801d      	strh	r5, [r3, #0]
 800e628:	2300      	movs	r3, #0
 800e62a:	4a0e      	ldr	r2, [pc, #56]	; (800e664 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 800e62c:	4630      	mov	r0, r6
 800e62e:	6013      	str	r3, [r2, #0]
 800e630:	4a0d      	ldr	r2, [pc, #52]	; (800e668 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 800e632:	603b      	str	r3, [r7, #0]
 800e634:	6013      	str	r3, [r2, #0]
 800e636:	f7ff ff2e 	bl	800e496 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800e63a:	4620      	mov	r0, r4
 800e63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e63e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e642:	2002      	movs	r0, #2
 800e644:	801a      	strh	r2, [r3, #0]
 800e646:	6038      	str	r0, [r7, #0]
 800e648:	f001 fa24 	bl	800fa94 <_ZN8touchgfx6Screen4drawEv>
 800e64c:	e7ec      	b.n	800e628 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 800e64e:	bf00      	nop
 800e650:	08020874 	.word	0x08020874
 800e654:	20024454 	.word	0x20024454
 800e658:	b5e8b5cd 	.word	0xb5e8b5cd
 800e65c:	f407a5c2 	.word	0xf407a5c2
 800e660:	20000070 	.word	0x20000070
 800e664:	20024464 	.word	0x20024464
 800e668:	20024458 	.word	0x20024458

0800e66c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800e66c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800e670:	3b01      	subs	r3, #1
 800e672:	b29b      	uxth	r3, r3
 800e674:	428b      	cmp	r3, r1
 800e676:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800e67a:	b510      	push	{r4, lr}
 800e67c:	d908      	bls.n	800e690 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 800e67e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800e682:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800e68c:	685a      	ldr	r2, [r3, #4]
 800e68e:	6062      	str	r2, [r4, #4]
 800e690:	bd10      	pop	{r4, pc}
	...

0800e694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800e694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e698:	b08f      	sub	sp, #60	; 0x3c
 800e69a:	4b8f      	ldr	r3, [pc, #572]	; (800e8d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 800e69c:	4683      	mov	fp, r0
 800e69e:	ac0a      	add	r4, sp, #40	; 0x28
 800e6a0:	e884 0006 	stmia.w	r4, {r1, r2}
 800e6a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e6a8:	4620      	mov	r0, r4
 800e6aa:	4b8c      	ldr	r3, [pc, #560]	; (800e8dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 800e6ac:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e6b0:	f7ff fe0f 	bl	800e2d2 <_ZN8touchgfx4Rect10restrictToEss>
 800e6b4:	4620      	mov	r0, r4
 800e6b6:	f7fd fdd4 	bl	800c262 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	d16a      	bne.n	800e794 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800e6be:	9403      	str	r4, [sp, #12]
 800e6c0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 800e6c4:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 800e6c8:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 800e6cc:	9301      	str	r3, [sp, #4]
 800e6ce:	35a4      	adds	r5, #164	; 0xa4
 800e6d0:	b15c      	cbz	r4, 800e6ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 800e6d2:	4629      	mov	r1, r5
 800e6d4:	9803      	ldr	r0, [sp, #12]
 800e6d6:	f7ff fe4d 	bl	800e374 <_ZNK8touchgfx4Rect8includesERKS0_>
 800e6da:	3c01      	subs	r4, #1
 800e6dc:	b118      	cbz	r0, 800e6e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 800e6de:	b2a1      	uxth	r1, r4
 800e6e0:	9801      	ldr	r0, [sp, #4]
 800e6e2:	f7ff ffc3 	bl	800e66c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800e6e6:	3d08      	subs	r5, #8
 800e6e8:	e7f2      	b.n	800e6d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 800e6ea:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 800e6ee:	f108 33ff 	add.w	r3, r8, #4294967295
 800e6f2:	f8cd 8010 	str.w	r8, [sp, #16]
 800e6f6:	9302      	str	r3, [sp, #8]
 800e6f8:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800e6fc:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 800e700:	9306      	str	r3, [sp, #24]
 800e702:	445c      	add	r4, fp
 800e704:	2500      	movs	r5, #0
 800e706:	4626      	mov	r6, r4
 800e708:	f8cd 8014 	str.w	r8, [sp, #20]
 800e70c:	462f      	mov	r7, r5
 800e70e:	9b05      	ldr	r3, [sp, #20]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d073      	beq.n	800e7fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800e714:	9903      	ldr	r1, [sp, #12]
 800e716:	4630      	mov	r0, r6
 800e718:	f7ff fdb9 	bl	800e28e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e71c:	b350      	cbz	r0, 800e774 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800e71e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 800e722:	f9b6 c000 	ldrsh.w	ip, [r6]
 800e726:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 800e72a:	45e6      	cmp	lr, ip
 800e72c:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 800e730:	db33      	blt.n	800e79a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800e732:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800e736:	88b3      	ldrh	r3, [r6, #4]
 800e738:	4472      	add	r2, lr
 800e73a:	4463      	add	r3, ip
 800e73c:	b212      	sxth	r2, r2
 800e73e:	b21b      	sxth	r3, r3
 800e740:	429a      	cmp	r2, r3
 800e742:	dc2a      	bgt.n	800e79a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800e744:	fa1f f289 	uxth.w	r2, r9
 800e748:	88f3      	ldrh	r3, [r6, #6]
 800e74a:	45ca      	cmp	sl, r9
 800e74c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800e750:	4413      	add	r3, r2
 800e752:	fa1f fc8a 	uxth.w	ip, sl
 800e756:	b29b      	uxth	r3, r3
 800e758:	fa0f fe83 	sxth.w	lr, r3
 800e75c:	db0f      	blt.n	800e77e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800e75e:	eba3 030c 	sub.w	r3, r3, ip
 800e762:	1ac9      	subs	r1, r1, r3
 800e764:	b209      	sxth	r1, r1
 800e766:	2900      	cmp	r1, #0
 800e768:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800e76c:	dd12      	ble.n	800e794 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800e76e:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 800e772:	4605      	mov	r5, r0
 800e774:	9b05      	ldr	r3, [sp, #20]
 800e776:	3e08      	subs	r6, #8
 800e778:	3b01      	subs	r3, #1
 800e77a:	9305      	str	r3, [sp, #20]
 800e77c:	e7c7      	b.n	800e70e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 800e77e:	4461      	add	r1, ip
 800e780:	b209      	sxth	r1, r1
 800e782:	4571      	cmp	r1, lr
 800e784:	dc38      	bgt.n	800e7f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800e786:	eba2 020c 	sub.w	r2, r2, ip
 800e78a:	b212      	sxth	r2, r2
 800e78c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800e790:	2a00      	cmp	r2, #0
 800e792:	dcee      	bgt.n	800e772 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800e794:	b00f      	add	sp, #60	; 0x3c
 800e796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e79a:	45ca      	cmp	sl, r9
 800e79c:	db2c      	blt.n	800e7f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800e79e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800e7a2:	449a      	add	sl, r3
 800e7a4:	88f3      	ldrh	r3, [r6, #6]
 800e7a6:	4499      	add	r9, r3
 800e7a8:	fa0f fa8a 	sxth.w	sl, sl
 800e7ac:	fa0f f989 	sxth.w	r9, r9
 800e7b0:	45ca      	cmp	sl, r9
 800e7b2:	dc21      	bgt.n	800e7f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800e7b4:	fa1f f28c 	uxth.w	r2, ip
 800e7b8:	88b3      	ldrh	r3, [r6, #4]
 800e7ba:	45e6      	cmp	lr, ip
 800e7bc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800e7c0:	4413      	add	r3, r2
 800e7c2:	fa1f f98e 	uxth.w	r9, lr
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	fa0f fa83 	sxth.w	sl, r3
 800e7cc:	db0a      	blt.n	800e7e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 800e7ce:	eba3 0309 	sub.w	r3, r3, r9
 800e7d2:	1ac9      	subs	r1, r1, r3
 800e7d4:	b209      	sxth	r1, r1
 800e7d6:	2900      	cmp	r1, #0
 800e7d8:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 800e7dc:	ddda      	ble.n	800e794 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800e7de:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 800e7e2:	e7c6      	b.n	800e772 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800e7e4:	4449      	add	r1, r9
 800e7e6:	b209      	sxth	r1, r1
 800e7e8:	4551      	cmp	r1, sl
 800e7ea:	dc05      	bgt.n	800e7f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800e7ec:	eba2 0209 	sub.w	r2, r2, r9
 800e7f0:	b212      	sxth	r2, r2
 800e7f2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800e7f6:	e7cb      	b.n	800e790 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 800e7f8:	4607      	mov	r7, r0
 800e7fa:	e7bb      	b.n	800e774 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800e7fc:	2d00      	cmp	r5, #0
 800e7fe:	d181      	bne.n	800e704 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 800e800:	2f00      	cmp	r7, #0
 800e802:	f000 81dd 	beq.w	800ebc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800e806:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 800e80a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 800e80e:	b2b3      	uxth	r3, r6
 800e810:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800e814:	b2b9      	uxth	r1, r7
 800e816:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 800e81a:	441a      	add	r2, r3
 800e81c:	448a      	add	sl, r1
 800e81e:	9105      	str	r1, [sp, #20]
 800e820:	b292      	uxth	r2, r2
 800e822:	fa1f fa8a 	uxth.w	sl, sl
 800e826:	fa0f f882 	sxth.w	r8, r2
 800e82a:	fa0f f98a 	sxth.w	r9, sl
 800e82e:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800e832:	9b04      	ldr	r3, [sp, #16]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d053      	beq.n	800e8e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 800e838:	9903      	ldr	r1, [sp, #12]
 800e83a:	4620      	mov	r0, r4
 800e83c:	f7ff fd27 	bl	800e28e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e840:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e844:	b1c0      	cbz	r0, 800e878 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800e846:	f9b4 e000 	ldrsh.w	lr, [r4]
 800e84a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800e84e:	4576      	cmp	r6, lr
 800e850:	dc23      	bgt.n	800e89a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800e852:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800e856:	44f4      	add	ip, lr
 800e858:	fa0f fc8c 	sxth.w	ip, ip
 800e85c:	45e0      	cmp	r8, ip
 800e85e:	db1c      	blt.n	800e89a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800e860:	428f      	cmp	r7, r1
 800e862:	fa1f fc81 	uxth.w	ip, r1
 800e866:	88e1      	ldrh	r1, [r4, #6]
 800e868:	dc0d      	bgt.n	800e886 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 800e86a:	ebaa 0c0c 	sub.w	ip, sl, ip
 800e86e:	f8a4 9002 	strh.w	r9, [r4, #2]
 800e872:	eba1 010c 	sub.w	r1, r1, ip
 800e876:	80e1      	strh	r1, [r4, #6]
 800e878:	4628      	mov	r0, r5
 800e87a:	9904      	ldr	r1, [sp, #16]
 800e87c:	3c08      	subs	r4, #8
 800e87e:	4605      	mov	r5, r0
 800e880:	3901      	subs	r1, #1
 800e882:	9104      	str	r1, [sp, #16]
 800e884:	e7d3      	b.n	800e82e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 800e886:	4461      	add	r1, ip
 800e888:	b209      	sxth	r1, r1
 800e88a:	4549      	cmp	r1, r9
 800e88c:	dcf5      	bgt.n	800e87a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800e88e:	9905      	ldr	r1, [sp, #20]
 800e890:	eba1 0c0c 	sub.w	ip, r1, ip
 800e894:	f8a4 c006 	strh.w	ip, [r4, #6]
 800e898:	e7ee      	b.n	800e878 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800e89a:	428f      	cmp	r7, r1
 800e89c:	dced      	bgt.n	800e87a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800e89e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 800e8a2:	4461      	add	r1, ip
 800e8a4:	b209      	sxth	r1, r1
 800e8a6:	4589      	cmp	r9, r1
 800e8a8:	dbe7      	blt.n	800e87a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800e8aa:	4576      	cmp	r6, lr
 800e8ac:	fa1f fc8e 	uxth.w	ip, lr
 800e8b0:	88a1      	ldrh	r1, [r4, #4]
 800e8b2:	dc07      	bgt.n	800e8c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 800e8b4:	eba2 0c0c 	sub.w	ip, r2, ip
 800e8b8:	f8a4 8000 	strh.w	r8, [r4]
 800e8bc:	eba1 010c 	sub.w	r1, r1, ip
 800e8c0:	80a1      	strh	r1, [r4, #4]
 800e8c2:	e7d9      	b.n	800e878 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800e8c4:	4461      	add	r1, ip
 800e8c6:	b209      	sxth	r1, r1
 800e8c8:	4588      	cmp	r8, r1
 800e8ca:	dbd6      	blt.n	800e87a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800e8cc:	eba3 0c0c 	sub.w	ip, r3, ip
 800e8d0:	f8a4 c004 	strh.w	ip, [r4, #4]
 800e8d4:	e7d0      	b.n	800e878 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800e8d6:	bf00      	nop
 800e8d8:	2002440e 	.word	0x2002440e
 800e8dc:	2002440c 	.word	0x2002440c
 800e8e0:	2d00      	cmp	r5, #0
 800e8e2:	f000 816d 	beq.w	800ebc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800e8e6:	9b06      	ldr	r3, [sp, #24]
 800e8e8:	445b      	add	r3, fp
 800e8ea:	461c      	mov	r4, r3
 800e8ec:	9b02      	ldr	r3, [sp, #8]
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	f000 8166 	beq.w	800ebc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800e8f4:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 800e8f8:	9803      	ldr	r0, [sp, #12]
 800e8fa:	4629      	mov	r1, r5
 800e8fc:	f7ff fd3a 	bl	800e374 <_ZNK8touchgfx4Rect8includesERKS0_>
 800e900:	b120      	cbz	r0, 800e90c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 800e902:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800e906:	9801      	ldr	r0, [sp, #4]
 800e908:	f7ff feb0 	bl	800e66c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800e90c:	9903      	ldr	r1, [sp, #12]
 800e90e:	4628      	mov	r0, r5
 800e910:	f7ff fcbd 	bl	800e28e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e914:	2800      	cmp	r0, #0
 800e916:	f000 809c 	beq.w	800ea52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800e91a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 800e91e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 800e922:	fa1f f189 	uxth.w	r1, r9
 800e926:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 800e92a:	9309      	str	r3, [sp, #36]	; 0x24
 800e92c:	eb01 0c03 	add.w	ip, r1, r3
 800e930:	b283      	uxth	r3, r0
 800e932:	4548      	cmp	r0, r9
 800e934:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 800e938:	fa1f fa8c 	uxth.w	sl, ip
 800e93c:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 800e940:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 800e944:	eb03 050c 	add.w	r5, r3, ip
 800e948:	b2ad      	uxth	r5, r5
 800e94a:	9505      	str	r5, [sp, #20]
 800e94c:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 800e950:	9504      	str	r5, [sp, #16]
 800e952:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 800e956:	f340 8099 	ble.w	800ea8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 800e95a:	1a5b      	subs	r3, r3, r1
 800e95c:	4596      	cmp	lr, r2
 800e95e:	fa0f f08a 	sxth.w	r0, sl
 800e962:	b29b      	uxth	r3, r3
 800e964:	b21e      	sxth	r6, r3
 800e966:	dd2e      	ble.n	800e9c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 800e968:	9f02      	ldr	r7, [sp, #8]
 800e96a:	fa1f fe8e 	uxth.w	lr, lr
 800e96e:	b292      	uxth	r2, r2
 800e970:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 800e974:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 800e978:	9f04      	ldr	r7, [sp, #16]
 800e97a:	ebae 0102 	sub.w	r1, lr, r2
 800e97e:	44a6      	add	lr, r4
 800e980:	1a3f      	subs	r7, r7, r0
 800e982:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 800e986:	b289      	uxth	r1, r1
 800e988:	4402      	add	r2, r0
 800e98a:	fa0f fe8e 	sxth.w	lr, lr
 800e98e:	b20d      	sxth	r5, r1
 800e990:	b212      	sxth	r2, r2
 800e992:	436f      	muls	r7, r5
 800e994:	ebae 0202 	sub.w	r2, lr, r2
 800e998:	4372      	muls	r2, r6
 800e99a:	4297      	cmp	r7, r2
 800e99c:	db09      	blt.n	800e9b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 800e99e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 800e9a2:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 800e9a6:	449c      	add	ip, r3
 800e9a8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800e9ac:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 800e9b0:	e686      	b.n	800e6c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800e9b2:	4421      	add	r1, r4
 800e9b4:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 800e9b8:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 800e9bc:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800e9c0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800e9c4:	e67c      	b.n	800e6c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800e9c6:	9f04      	ldr	r7, [sp, #16]
 800e9c8:	42b8      	cmp	r0, r7
 800e9ca:	da27      	bge.n	800ea1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 800e9cc:	9902      	ldr	r1, [sp, #8]
 800e9ce:	1a3f      	subs	r7, r7, r0
 800e9d0:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 800e9d4:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 800e9d8:	eb05 010e 	add.w	r1, r5, lr
 800e9dc:	fa1f f881 	uxth.w	r8, r1
 800e9e0:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 800e9e4:	4411      	add	r1, r2
 800e9e6:	fa0f f988 	sxth.w	r9, r8
 800e9ea:	eba2 020e 	sub.w	r2, r2, lr
 800e9ee:	eba1 0108 	sub.w	r1, r1, r8
 800e9f2:	4372      	muls	r2, r6
 800e9f4:	b289      	uxth	r1, r1
 800e9f6:	fa0f f881 	sxth.w	r8, r1
 800e9fa:	fb08 f707 	mul.w	r7, r8, r7
 800e9fe:	42ba      	cmp	r2, r7
 800ea00:	dc06      	bgt.n	800ea10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 800ea02:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 800ea06:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 800ea0a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 800ea0e:	e7ca      	b.n	800e9a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 800ea10:	4429      	add	r1, r5
 800ea12:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 800ea16:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800ea1a:	e651      	b.n	800e6c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800ea1c:	9805      	ldr	r0, [sp, #20]
 800ea1e:	2d06      	cmp	r5, #6
 800ea20:	ebaa 0000 	sub.w	r0, sl, r0
 800ea24:	b280      	uxth	r0, r0
 800ea26:	fa0f fe80 	sxth.w	lr, r0
 800ea2a:	d817      	bhi.n	800ea5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 800ea2c:	9b04      	ldr	r3, [sp, #16]
 800ea2e:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 800ea32:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 800ea36:	1c6b      	adds	r3, r5, #1
 800ea38:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 800ea3c:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 800ea40:	9b01      	ldr	r3, [sp, #4]
 800ea42:	9801      	ldr	r0, [sp, #4]
 800ea44:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ea48:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 800ea4c:	805a      	strh	r2, [r3, #2]
 800ea4e:	809e      	strh	r6, [r3, #4]
 800ea50:	80d9      	strh	r1, [r3, #6]
 800ea52:	9b02      	ldr	r3, [sp, #8]
 800ea54:	3c08      	subs	r4, #8
 800ea56:	3b01      	subs	r3, #1
 800ea58:	9302      	str	r3, [sp, #8]
 800ea5a:	e747      	b.n	800e8ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 800ea5c:	9a02      	ldr	r2, [sp, #8]
 800ea5e:	45b6      	cmp	lr, r6
 800ea60:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800ea64:	db0d      	blt.n	800ea82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 800ea66:	449c      	add	ip, r3
 800ea68:	445a      	add	r2, fp
 800ea6a:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 800ea6e:	fa1f fc8c 	uxth.w	ip, ip
 800ea72:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 800ea76:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 800ea7a:	448c      	add	ip, r1
 800ea7c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 800ea80:	e61e      	b.n	800e6c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800ea82:	445a      	add	r2, fp
 800ea84:	4484      	add	ip, r0
 800ea86:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 800ea8a:	e78f      	b.n	800e9ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800ea8c:	fa1f f18e 	uxth.w	r1, lr
 800ea90:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 800ea94:	b293      	uxth	r3, r2
 800ea96:	4596      	cmp	lr, r2
 800ea98:	eb01 0806 	add.w	r8, r1, r6
 800ea9c:	9306      	str	r3, [sp, #24]
 800ea9e:	fa1f f888 	uxth.w	r8, r8
 800eaa2:	9f06      	ldr	r7, [sp, #24]
 800eaa4:	fa0f f388 	sxth.w	r3, r8
 800eaa8:	9307      	str	r3, [sp, #28]
 800eaaa:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 800eaae:	443b      	add	r3, r7
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	9308      	str	r3, [sp, #32]
 800eab4:	da24      	bge.n	800eb00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 800eab6:	9905      	ldr	r1, [sp, #20]
 800eab8:	eba3 0308 	sub.w	r3, r3, r8
 800eabc:	eba2 020e 	sub.w	r2, r2, lr
 800eac0:	eba9 0000 	sub.w	r0, r9, r0
 800eac4:	ebaa 0401 	sub.w	r4, sl, r1
 800eac8:	b29b      	uxth	r3, r3
 800eaca:	b2a4      	uxth	r4, r4
 800eacc:	b219      	sxth	r1, r3
 800eace:	b225      	sxth	r5, r4
 800ead0:	4348      	muls	r0, r1
 800ead2:	436a      	muls	r2, r5
 800ead4:	4282      	cmp	r2, r0
 800ead6:	9a02      	ldr	r2, [sp, #8]
 800ead8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800eadc:	445a      	add	r2, fp
 800eade:	dc06      	bgt.n	800eaee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 800eae0:	9b07      	ldr	r3, [sp, #28]
 800eae2:	44a4      	add	ip, r4
 800eae4:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 800eae8:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 800eaec:	e75e      	b.n	800e9ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800eaee:	9904      	ldr	r1, [sp, #16]
 800eaf0:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 800eaf4:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 800eaf8:	4433      	add	r3, r6
 800eafa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800eafe:	e5df      	b.n	800e6c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800eb00:	9f06      	ldr	r7, [sp, #24]
 800eb02:	9b04      	ldr	r3, [sp, #16]
 800eb04:	1bc9      	subs	r1, r1, r7
 800eb06:	fa0f f78a 	sxth.w	r7, sl
 800eb0a:	b289      	uxth	r1, r1
 800eb0c:	429f      	cmp	r7, r3
 800eb0e:	fa0f fe81 	sxth.w	lr, r1
 800eb12:	dd23      	ble.n	800eb5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 800eb14:	9a05      	ldr	r2, [sp, #20]
 800eb16:	eba9 0000 	sub.w	r0, r9, r0
 800eb1a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800eb1e:	ebaa 0202 	sub.w	r2, sl, r2
 800eb22:	9d07      	ldr	r5, [sp, #28]
 800eb24:	fb0e f000 	mul.w	r0, lr, r0
 800eb28:	b292      	uxth	r2, r2
 800eb2a:	eba5 0a03 	sub.w	sl, r5, r3
 800eb2e:	9b02      	ldr	r3, [sp, #8]
 800eb30:	b214      	sxth	r4, r2
 800eb32:	00db      	lsls	r3, r3, #3
 800eb34:	fb04 fa0a 	mul.w	sl, r4, sl
 800eb38:	445b      	add	r3, fp
 800eb3a:	4550      	cmp	r0, sl
 800eb3c:	db03      	blt.n	800eb46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 800eb3e:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 800eb42:	4494      	add	ip, r2
 800eb44:	e732      	b.n	800e9ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800eb46:	9a04      	ldr	r2, [sp, #16]
 800eb48:	4431      	add	r1, r6
 800eb4a:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 800eb4e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800eb52:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 800eb56:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800eb5a:	e75c      	b.n	800ea16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 800eb5c:	9b08      	ldr	r3, [sp, #32]
 800eb5e:	2d06      	cmp	r5, #6
 800eb60:	eba3 0308 	sub.w	r3, r3, r8
 800eb64:	b29b      	uxth	r3, r3
 800eb66:	b218      	sxth	r0, r3
 800eb68:	d813      	bhi.n	800eb92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 800eb6a:	9b07      	ldr	r3, [sp, #28]
 800eb6c:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 800eb70:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 800eb74:	1c6b      	adds	r3, r5, #1
 800eb76:	9901      	ldr	r1, [sp, #4]
 800eb78:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 800eb7c:	9b01      	ldr	r3, [sp, #4]
 800eb7e:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 800eb82:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800eb86:	805a      	strh	r2, [r3, #2]
 800eb88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb8a:	f8a3 e006 	strh.w	lr, [r3, #6]
 800eb8e:	809a      	strh	r2, [r3, #4]
 800eb90:	e75f      	b.n	800ea52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800eb92:	9c02      	ldr	r4, [sp, #8]
 800eb94:	4570      	cmp	r0, lr
 800eb96:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800eb9a:	db0d      	blt.n	800ebb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 800eb9c:	4431      	add	r1, r6
 800eb9e:	9b06      	ldr	r3, [sp, #24]
 800eba0:	445c      	add	r4, fp
 800eba2:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800eba6:	b289      	uxth	r1, r1
 800eba8:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 800ebac:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 800ebb0:	4419      	add	r1, r3
 800ebb2:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 800ebb6:	e583      	b.n	800e6c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800ebb8:	445c      	add	r4, fp
 800ebba:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 800ebbe:	e79b      	b.n	800eaf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 800ebc0:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 800ebc4:	2e07      	cmp	r6, #7
 800ebc6:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 800ebca:	d812      	bhi.n	800ebf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 800ebcc:	1c75      	adds	r5, r6, #1
 800ebce:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 800ebd2:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 800ebd6:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 800ebda:	9d01      	ldr	r5, [sp, #4]
 800ebdc:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 800ebe0:	442c      	add	r4, r5
 800ebe2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 800ebe6:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 800ebea:	8061      	strh	r1, [r4, #2]
 800ebec:	80a2      	strh	r2, [r4, #4]
 800ebee:	80e3      	strh	r3, [r4, #6]
 800ebf0:	e5d0      	b.n	800e794 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800ebf2:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 800ebf6:	3e01      	subs	r6, #1
 800ebf8:	445c      	add	r4, fp
 800ebfa:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800ebfe:	f04f 37ff 	mov.w	r7, #4294967295
 800ec02:	2500      	movs	r5, #0
 800ec04:	9305      	str	r3, [sp, #20]
 800ec06:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 800ec0a:	1e72      	subs	r2, r6, #1
 800ec0c:	9302      	str	r3, [sp, #8]
 800ec0e:	4691      	mov	r9, r2
 800ec10:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 800ec14:	9304      	str	r3, [sp, #16]
 800ec16:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 800ec1a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800ec1e:	6818      	ldr	r0, [r3, #0]
 800ec20:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800ec24:	9207      	str	r2, [sp, #28]
 800ec26:	bf16      	itet	ne
 800ec28:	9905      	ldrne	r1, [sp, #20]
 800ec2a:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 800ec2e:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 800ec32:	9306      	str	r3, [sp, #24]
 800ec34:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800ec38:	f8be 8004 	ldrh.w	r8, [lr, #4]
 800ec3c:	fb18 f801 	smulbb	r8, r8, r1
 800ec40:	6859      	ldr	r1, [r3, #4]
 800ec42:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800ec46:	4671      	mov	r1, lr
 800ec48:	a80c      	add	r0, sp, #48	; 0x30
 800ec4a:	f7ff fbb9 	bl	800e3c0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800ec4e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 800ec52:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800ec56:	f04f 0c08 	mov.w	ip, #8
 800ec5a:	9b04      	ldr	r3, [sp, #16]
 800ec5c:	9a02      	ldr	r2, [sp, #8]
 800ec5e:	fb10 f001 	smulbb	r0, r0, r1
 800ec62:	fb02 8803 	mla	r8, r2, r3, r8
 800ec66:	eba0 0108 	sub.w	r1, r0, r8
 800ec6a:	fb90 f0fc 	sdiv	r0, r0, ip
 800ec6e:	4288      	cmp	r0, r1
 800ec70:	dc20      	bgt.n	800ecb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 800ec72:	4551      	cmp	r1, sl
 800ec74:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ec78:	da03      	bge.n	800ec82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 800ec7a:	b1d9      	cbz	r1, 800ecb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 800ec7c:	468a      	mov	sl, r1
 800ec7e:	464f      	mov	r7, r9
 800ec80:	4635      	mov	r5, r6
 800ec82:	f109 39ff 	add.w	r9, r9, #4294967295
 800ec86:	f119 0f02 	cmn.w	r9, #2
 800ec8a:	d1c6      	bne.n	800ec1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 800ec8c:	4616      	mov	r6, r2
 800ec8e:	3201      	adds	r2, #1
 800ec90:	f1a4 0408 	sub.w	r4, r4, #8
 800ec94:	d1b7      	bne.n	800ec06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 800ec96:	9b01      	ldr	r3, [sp, #4]
 800ec98:	b2ac      	uxth	r4, r5
 800ec9a:	00ed      	lsls	r5, r5, #3
 800ec9c:	1958      	adds	r0, r3, r5
 800ec9e:	1c7b      	adds	r3, r7, #1
 800eca0:	d10b      	bne.n	800ecba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 800eca2:	4601      	mov	r1, r0
 800eca4:	9803      	ldr	r0, [sp, #12]
 800eca6:	f7ff fb8b 	bl	800e3c0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800ecaa:	4621      	mov	r1, r4
 800ecac:	9801      	ldr	r0, [sp, #4]
 800ecae:	f7ff fcdd 	bl	800e66c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800ecb2:	e505      	b.n	800e6c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800ecb4:	464f      	mov	r7, r9
 800ecb6:	4635      	mov	r5, r6
 800ecb8:	e7ed      	b.n	800ec96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 800ecba:	9b01      	ldr	r3, [sp, #4]
 800ecbc:	00ff      	lsls	r7, r7, #3
 800ecbe:	445d      	add	r5, fp
 800ecc0:	19d9      	adds	r1, r3, r7
 800ecc2:	445f      	add	r7, fp
 800ecc4:	f7ff fb7c 	bl	800e3c0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800ecc8:	9b03      	ldr	r3, [sp, #12]
 800ecca:	cb03      	ldmia	r3!, {r0, r1}
 800eccc:	9b03      	ldr	r3, [sp, #12]
 800ecce:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 800ecd2:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800ecd6:	f855 0fac 	ldr.w	r0, [r5, #172]!
 800ecda:	6869      	ldr	r1, [r5, #4]
 800ecdc:	c303      	stmia	r3!, {r0, r1}
 800ecde:	e7e4      	b.n	800ecaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

0800ece0 <_ZN8touchgfx11Application10invalidateEv>:
 800ece0:	4b09      	ldr	r3, [pc, #36]	; (800ed08 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800ece2:	b082      	sub	sp, #8
 800ece4:	2100      	movs	r1, #0
 800ece6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ecea:	4b08      	ldr	r3, [pc, #32]	; (800ed0c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800ecec:	9100      	str	r1, [sp, #0]
 800ecee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ecf2:	f8ad 2004 	strh.w	r2, [sp, #4]
 800ecf6:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ecfa:	ab02      	add	r3, sp, #8
 800ecfc:	e913 0006 	ldmdb	r3, {r1, r2}
 800ed00:	b002      	add	sp, #8
 800ed02:	f7ff bcc7 	b.w	800e694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800ed06:	bf00      	nop
 800ed08:	2002440c 	.word	0x2002440c
 800ed0c:	2002440e 	.word	0x2002440e

0800ed10 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800ed10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed14:	f500 7698 	add.w	r6, r0, #304	; 0x130
 800ed18:	b09b      	sub	sp, #108	; 0x6c
 800ed1a:	4604      	mov	r4, r0
 800ed1c:	4630      	mov	r0, r6
 800ed1e:	f7fd faa0 	bl	800c262 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ed22:	4605      	mov	r5, r0
 800ed24:	b940      	cbnz	r0, 800ed38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 800ed26:	4620      	mov	r0, r4
 800ed28:	e896 0006 	ldmia.w	r6, {r1, r2}
 800ed2c:	f7ff fcb2 	bl	800e694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800ed30:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800ed34:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 800ed38:	4bc8      	ldr	r3, [pc, #800]	; (800f05c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d03e      	beq.n	800edbe <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 800ed40:	4dc7      	ldr	r5, [pc, #796]	; (800f060 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800ed42:	4628      	mov	r0, r5
 800ed44:	f7fd fa8d 	bl	800c262 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ed48:	4606      	mov	r6, r0
 800ed4a:	2800      	cmp	r0, #0
 800ed4c:	d137      	bne.n	800edbe <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 800ed4e:	4628      	mov	r0, r5
 800ed50:	f7ff f9e2 	bl	800e118 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800ed54:	6829      	ldr	r1, [r5, #0]
 800ed56:	686a      	ldr	r2, [r5, #4]
 800ed58:	4620      	mov	r0, r4
 800ed5a:	f7ff fc9b 	bl	800e694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800ed5e:	802e      	strh	r6, [r5, #0]
 800ed60:	806e      	strh	r6, [r5, #2]
 800ed62:	80ae      	strh	r6, [r5, #4]
 800ed64:	80ee      	strh	r6, [r5, #6]
 800ed66:	ae09      	add	r6, sp, #36	; 0x24
 800ed68:	4630      	mov	r0, r6
 800ed6a:	f7ff fc23 	bl	800e5b4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800ed6e:	4abd      	ldr	r2, [pc, #756]	; (800f064 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 800ed70:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 800ed74:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 800ed78:	8815      	ldrh	r5, [r2, #0]
 800ed7a:	9202      	str	r2, [sp, #8]
 800ed7c:	462b      	mov	r3, r5
 800ed7e:	429f      	cmp	r7, r3
 800ed80:	d924      	bls.n	800edcc <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 800ed82:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 800ed86:	2907      	cmp	r1, #7
 800ed88:	d816      	bhi.n	800edb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 800ed8a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800ed8e:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 800ed92:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 800ed96:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 800ed9a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 800ed9e:	1c4a      	adds	r2, r1, #1
 800eda0:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 800eda4:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 800eda8:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 800edac:	f8a2 9002 	strh.w	r9, [r2, #2]
 800edb0:	f8a2 e004 	strh.w	lr, [r2, #4]
 800edb4:	f8a2 c006 	strh.w	ip, [r2, #6]
 800edb8:	3301      	adds	r3, #1
 800edba:	b29b      	uxth	r3, r3
 800edbc:	e7df      	b.n	800ed7e <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 800edbe:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d1cf      	bne.n	800ed66 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 800edc6:	b01b      	add	sp, #108	; 0x6c
 800edc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edcc:	462f      	mov	r7, r5
 800edce:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 800edd2:	42bb      	cmp	r3, r7
 800edd4:	d90b      	bls.n	800edee <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 800edd6:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 800edda:	3701      	adds	r7, #1
 800eddc:	4620      	mov	r0, r4
 800edde:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 800ede2:	b2bf      	uxth	r7, r7
 800ede4:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 800ede8:	f7ff fc54 	bl	800e694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800edec:	e7ef      	b.n	800edce <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 800edee:	4a9e      	ldr	r2, [pc, #632]	; (800f068 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 800edf0:	6813      	ldr	r3, [r2, #0]
 800edf2:	4690      	mov	r8, r2
 800edf4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	f040 80e4 	bne.w	800efc6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 800edfe:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 800ee02:	4629      	mov	r1, r5
 800ee04:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 800ee08:	2500      	movs	r5, #0
 800ee0a:	33ae      	adds	r3, #174	; 0xae
 800ee0c:	428f      	cmp	r7, r1
 800ee0e:	f103 0308 	add.w	r3, r3, #8
 800ee12:	dd0a      	ble.n	800ee2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 800ee14:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 800ee18:	3101      	adds	r1, #1
 800ee1a:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 800ee1e:	4402      	add	r2, r0
 800ee20:	b212      	sxth	r2, r2
 800ee22:	4295      	cmp	r5, r2
 800ee24:	bfb8      	it	lt
 800ee26:	4615      	movlt	r5, r2
 800ee28:	e7f0      	b.n	800ee0c <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 800ee2a:	4b90      	ldr	r3, [pc, #576]	; (800f06c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 800ee2c:	f8df b238 	ldr.w	fp, [pc, #568]	; 800f068 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 800ee30:	881b      	ldrh	r3, [r3, #0]
 800ee32:	46d8      	mov	r8, fp
 800ee34:	2b0f      	cmp	r3, #15
 800ee36:	bf8c      	ite	hi
 800ee38:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 800ee3c:	f04f 0a01 	movls.w	sl, #1
 800ee40:	2300      	movs	r3, #0
 800ee42:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ee46:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 800ee4a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800ee4e:	4438      	add	r0, r7
 800ee50:	b207      	sxth	r7, r0
 800ee52:	f8db 0000 	ldr.w	r0, [fp]
 800ee56:	42bd      	cmp	r5, r7
 800ee58:	6803      	ldr	r3, [r0, #0]
 800ee5a:	f340 8084 	ble.w	800ef66 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 800ee5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ee62:	4798      	blx	r3
 800ee64:	eb07 030a 	add.w	r3, r7, sl
 800ee68:	4298      	cmp	r0, r3
 800ee6a:	da07      	bge.n	800ee7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 800ee6c:	4285      	cmp	r5, r0
 800ee6e:	dd05      	ble.n	800ee7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 800ee70:	4287      	cmp	r7, r0
 800ee72:	dd6d      	ble.n	800ef50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 800ee74:	2f00      	cmp	r7, #0
 800ee76:	dd6b      	ble.n	800ef50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 800ee78:	4628      	mov	r0, r5
 800ee7a:	e004      	b.n	800ee86 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 800ee7c:	4287      	cmp	r7, r0
 800ee7e:	dcfb      	bgt.n	800ee78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 800ee80:	42a8      	cmp	r0, r5
 800ee82:	bfa8      	it	ge
 800ee84:	4628      	movge	r0, r5
 800ee86:	4b7a      	ldr	r3, [pc, #488]	; (800f070 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 800ee88:	1bc0      	subs	r0, r0, r7
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	f8ad 7016 	strh.w	r7, [sp, #22]
 800ee90:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee94:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ee98:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ee9c:	9b02      	ldr	r3, [sp, #8]
 800ee9e:	f8ad 001a 	strh.w	r0, [sp, #26]
 800eea2:	881f      	ldrh	r7, [r3, #0]
 800eea4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 800eea8:	42bb      	cmp	r3, r7
 800eeaa:	d9cc      	bls.n	800ee46 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 800eeac:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 800eeb0:	ab07      	add	r3, sp, #28
 800eeb2:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800eeb6:	6851      	ldr	r1, [r2, #4]
 800eeb8:	c303      	stmia	r3!, {r0, r1}
 800eeba:	a905      	add	r1, sp, #20
 800eebc:	a807      	add	r0, sp, #28
 800eebe:	f7ff f9e6 	bl	800e28e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800eec2:	2800      	cmp	r0, #0
 800eec4:	d04c      	beq.n	800ef60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 800eec6:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800eeca:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800eece:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 800eed2:	4686      	mov	lr, r0
 800eed4:	4290      	cmp	r0, r2
 800eed6:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800eeda:	4448      	add	r0, r9
 800eedc:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 800eee0:	bfb8      	it	lt
 800eee2:	4696      	movlt	lr, r2
 800eee4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800eee8:	444a      	add	r2, r9
 800eeea:	b280      	uxth	r0, r0
 800eeec:	4299      	cmp	r1, r3
 800eeee:	468c      	mov	ip, r1
 800eef0:	b292      	uxth	r2, r2
 800eef2:	9303      	str	r3, [sp, #12]
 800eef4:	bfb8      	it	lt
 800eef6:	469c      	movlt	ip, r3
 800eef8:	b203      	sxth	r3, r0
 800eefa:	fa0f f982 	sxth.w	r9, r2
 800eefe:	f8ad e01c 	strh.w	lr, [sp, #28]
 800ef02:	f8ad c01e 	strh.w	ip, [sp, #30]
 800ef06:	454b      	cmp	r3, r9
 800ef08:	bfb8      	it	lt
 800ef0a:	4602      	movlt	r2, r0
 800ef0c:	9b03      	ldr	r3, [sp, #12]
 800ef0e:	eba2 020e 	sub.w	r2, r2, lr
 800ef12:	f8ad 2020 	strh.w	r2, [sp, #32]
 800ef16:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 800ef1a:	4411      	add	r1, r2
 800ef1c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800ef20:	4413      	add	r3, r2
 800ef22:	b289      	uxth	r1, r1
 800ef24:	b29b      	uxth	r3, r3
 800ef26:	b208      	sxth	r0, r1
 800ef28:	b21a      	sxth	r2, r3
 800ef2a:	4290      	cmp	r0, r2
 800ef2c:	bfb8      	it	lt
 800ef2e:	460b      	movlt	r3, r1
 800ef30:	eba3 030c 	sub.w	r3, r3, ip
 800ef34:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800ef38:	a807      	add	r0, sp, #28
 800ef3a:	f7fd f992 	bl	800c262 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ef3e:	b920      	cbnz	r0, 800ef4a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 800ef40:	6823      	ldr	r3, [r4, #0]
 800ef42:	a907      	add	r1, sp, #28
 800ef44:	4620      	mov	r0, r4
 800ef46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef48:	4798      	blx	r3
 800ef4a:	3701      	adds	r7, #1
 800ef4c:	b2bf      	uxth	r7, r7
 800ef4e:	e7a9      	b.n	800eea4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 800ef50:	f8d8 0000 	ldr.w	r0, [r8]
 800ef54:	2101      	movs	r1, #1
 800ef56:	6803      	ldr	r3, [r0, #0]
 800ef58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ef5c:	4798      	blx	r3
 800ef5e:	e772      	b.n	800ee46 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 800ef60:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800ef64:	e7e8      	b.n	800ef38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 800ef66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef68:	4798      	blx	r3
 800ef6a:	4b42      	ldr	r3, [pc, #264]	; (800f074 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	f43f af29 	beq.w	800edc6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 800ef74:	2300      	movs	r3, #0
 800ef76:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 800ef7a:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 800ef7e:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 800ef82:	9b02      	ldr	r3, [sp, #8]
 800ef84:	881b      	ldrh	r3, [r3, #0]
 800ef86:	429d      	cmp	r5, r3
 800ef88:	f67f af1d 	bls.w	800edc6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 800ef8c:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 800ef90:	2907      	cmp	r1, #7
 800ef92:	d815      	bhi.n	800efc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 800ef94:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800ef98:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 800ef9c:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 800efa0:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 800efa4:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 800efa8:	1c4a      	adds	r2, r1, #1
 800efaa:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 800efae:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800efb2:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 800efb6:	f8a2 e002 	strh.w	lr, [r2, #2]
 800efba:	f8a2 c004 	strh.w	ip, [r2, #4]
 800efbe:	80d7      	strh	r7, [r2, #6]
 800efc0:	3301      	adds	r3, #1
 800efc2:	b29b      	uxth	r3, r3
 800efc4:	e7df      	b.n	800ef86 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 800efc6:	2b02      	cmp	r3, #2
 800efc8:	f040 8135 	bne.w	800f236 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 800efcc:	4b2a      	ldr	r3, [pc, #168]	; (800f078 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 800efce:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 800efd2:	781b      	ldrb	r3, [r3, #0]
 800efd4:	2b01      	cmp	r3, #1
 800efd6:	f000 809c 	beq.w	800f112 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 800efda:	9b02      	ldr	r3, [sp, #8]
 800efdc:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 800efe0:	f8b3 b000 	ldrh.w	fp, [r3]
 800efe4:	f10b 0b01 	add.w	fp, fp, #1
 800efe8:	fa1f fb8b 	uxth.w	fp, fp
 800efec:	2a00      	cmp	r2, #0
 800efee:	d0bc      	beq.n	800ef6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800eff0:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 800eff4:	4659      	mov	r1, fp
 800eff6:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 800effa:	f04f 0800 	mov.w	r8, #0
 800effe:	441d      	add	r5, r3
 800f000:	b22d      	sxth	r5, r5
 800f002:	b28b      	uxth	r3, r1
 800f004:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 800f008:	429a      	cmp	r2, r3
 800f00a:	f240 80c0 	bls.w	800f18e <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 800f00e:	4427      	add	r7, r4
 800f010:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 800f014:	4608      	mov	r0, r1
 800f016:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 800f01a:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 800f01e:	4563      	cmp	r3, ip
 800f020:	f340 80a2 	ble.w	800f168 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 800f024:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 800f028:	4465      	add	r5, ip
 800f02a:	b22d      	sxth	r5, r5
 800f02c:	429d      	cmp	r5, r3
 800f02e:	bfa8      	it	ge
 800f030:	461d      	movge	r5, r3
 800f032:	3101      	adds	r1, #1
 800f034:	4680      	mov	r8, r0
 800f036:	e7e4      	b.n	800f002 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 800f038:	d10b      	bne.n	800f052 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 800f03a:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 800f03e:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 800f042:	458c      	cmp	ip, r1
 800f044:	bfb4      	ite	lt
 800f046:	469c      	movlt	ip, r3
 800f048:	46bc      	movge	ip, r7
 800f04a:	4572      	cmp	r2, lr
 800f04c:	bfb8      	it	lt
 800f04e:	4672      	movlt	r2, lr
 800f050:	e087      	b.n	800f162 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 800f052:	428a      	cmp	r2, r1
 800f054:	46bc      	mov	ip, r7
 800f056:	bfb8      	it	lt
 800f058:	460a      	movlt	r2, r1
 800f05a:	e082      	b.n	800f162 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 800f05c:	20024450 	.word	0x20024450
 800f060:	2002445c 	.word	0x2002445c
 800f064:	20000070 	.word	0x20000070
 800f068:	20024418 	.word	0x20024418
 800f06c:	2002440e 	.word	0x2002440e
 800f070:	2002440c 	.word	0x2002440c
 800f074:	20024416 	.word	0x20024416
 800f078:	20024410 	.word	0x20024410
 800f07c:	1961      	adds	r1, r4, r5
 800f07e:	ab07      	add	r3, sp, #28
 800f080:	f851 0fac 	ldr.w	r0, [r1, #172]!
 800f084:	6849      	ldr	r1, [r1, #4]
 800f086:	c303      	stmia	r3!, {r0, r1}
 800f088:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800f08c:	a807      	add	r0, sp, #28
 800f08e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800f092:	2b13      	cmp	r3, #19
 800f094:	440b      	add	r3, r1
 800f096:	bfd8      	it	le
 800f098:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800f09c:	1a9b      	subs	r3, r3, r2
 800f09e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800f0a2:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f0a6:	f7ff f851 	bl	800e14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800f0aa:	a807      	add	r0, sp, #28
 800f0ac:	f7fd f8d9 	bl	800c262 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f0b0:	bb78      	cbnz	r0, 800f112 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 800f0b2:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 800f0b6:	4425      	add	r5, r4
 800f0b8:	f8d8 0000 	ldr.w	r0, [r8]
 800f0bc:	f1bc 0f14 	cmp.w	ip, #20
 800f0c0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800f0c4:	f8d0 e000 	ldr.w	lr, [r0]
 800f0c8:	bfa8      	it	ge
 800f0ca:	f04f 0c14 	movge.w	ip, #20
 800f0ce:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800f0d2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800f0d6:	fa1f fc8c 	uxth.w	ip, ip
 800f0da:	f8cd c000 	str.w	ip, [sp]
 800f0de:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 800f0e2:	47d0      	blx	sl
 800f0e4:	4682      	mov	sl, r0
 800f0e6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800f0ea:	a807      	add	r0, sp, #28
 800f0ec:	f7ff f814 	bl	800e118 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800f0f0:	6823      	ldr	r3, [r4, #0]
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	a907      	add	r1, sp, #28
 800f0f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0f8:	4798      	blx	r3
 800f0fa:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 800f0fe:	eba0 000a 	sub.w	r0, r0, sl
 800f102:	b200      	sxth	r0, r0
 800f104:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 800f108:	b918      	cbnz	r0, 800f112 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 800f10a:	b2b9      	uxth	r1, r7
 800f10c:	4648      	mov	r0, r9
 800f10e:	f7ff faad 	bl	800e66c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800f112:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 800f116:	f1bb 0f00 	cmp.w	fp, #0
 800f11a:	f43f af26 	beq.w	800ef6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800f11e:	9b02      	ldr	r3, [sp, #8]
 800f120:	2700      	movs	r7, #0
 800f122:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 800f126:	881b      	ldrh	r3, [r3, #0]
 800f128:	3301      	adds	r3, #1
 800f12a:	b29b      	uxth	r3, r3
 800f12c:	b299      	uxth	r1, r3
 800f12e:	00fd      	lsls	r5, r7, #3
 800f130:	458b      	cmp	fp, r1
 800f132:	d9a3      	bls.n	800f07c <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 800f134:	4425      	add	r5, r4
 800f136:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 800f13a:	469c      	mov	ip, r3
 800f13c:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 800f140:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 800f144:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 800f148:	4408      	add	r0, r1
 800f14a:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 800f14e:	4471      	add	r1, lr
 800f150:	b200      	sxth	r0, r0
 800f152:	b209      	sxth	r1, r1
 800f154:	4288      	cmp	r0, r1
 800f156:	f6bf af6f 	bge.w	800f038 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 800f15a:	4586      	cmp	lr, r0
 800f15c:	4672      	mov	r2, lr
 800f15e:	bfb8      	it	lt
 800f160:	4602      	movlt	r2, r0
 800f162:	3301      	adds	r3, #1
 800f164:	4667      	mov	r7, ip
 800f166:	e7e1      	b.n	800f12c <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 800f168:	d10c      	bne.n	800f184 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 800f16a:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 800f16e:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 800f172:	4287      	cmp	r7, r0
 800f174:	bfb4      	ite	lt
 800f176:	4608      	movlt	r0, r1
 800f178:	4640      	movge	r0, r8
 800f17a:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 800f17e:	443b      	add	r3, r7
 800f180:	b21b      	sxth	r3, r3
 800f182:	e753      	b.n	800f02c <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800f184:	4565      	cmp	r5, ip
 800f186:	4640      	mov	r0, r8
 800f188:	bfa8      	it	ge
 800f18a:	4665      	movge	r5, ip
 800f18c:	e751      	b.n	800f032 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 800f18e:	eb09 0007 	add.w	r0, r9, r7
 800f192:	4427      	add	r7, r4
 800f194:	9203      	str	r2, [sp, #12]
 800f196:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 800f19a:	f1ba 0f13 	cmp.w	sl, #19
 800f19e:	bfde      	ittt	le
 800f1a0:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 800f1a4:	4455      	addle	r5, sl
 800f1a6:	b22d      	sxthle	r5, r5
 800f1a8:	f7fd f85b 	bl	800c262 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f1ac:	9a03      	ldr	r2, [sp, #12]
 800f1ae:	2800      	cmp	r0, #0
 800f1b0:	f47f af1c 	bne.w	800efec <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 800f1b4:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 800f1b8:	fa1f fa8a 	uxth.w	sl, sl
 800f1bc:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800f1c0:	1aad      	subs	r5, r5, r2
 800f1c2:	4829      	ldr	r0, [pc, #164]	; (800f268 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 800f1c4:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 800f1c8:	2d14      	cmp	r5, #20
 800f1ca:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 800f1ce:	6800      	ldr	r0, [r0, #0]
 800f1d0:	bfa8      	it	ge
 800f1d2:	2514      	movge	r5, #20
 800f1d4:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f1d8:	f8ad 201e 	strh.w	r2, [sp, #30]
 800f1dc:	b289      	uxth	r1, r1
 800f1de:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f1e2:	b2ad      	uxth	r5, r5
 800f1e4:	f8d0 c000 	ldr.w	ip, [r0]
 800f1e8:	b292      	uxth	r2, r2
 800f1ea:	4555      	cmp	r5, sl
 800f1ec:	bf94      	ite	ls
 800f1ee:	9500      	strls	r5, [sp, #0]
 800f1f0:	f8cd a000 	strhi.w	sl, [sp]
 800f1f4:	b29b      	uxth	r3, r3
 800f1f6:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 800f1fa:	47a8      	blx	r5
 800f1fc:	6823      	ldr	r3, [r4, #0]
 800f1fe:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800f202:	a907      	add	r1, sp, #28
 800f204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f206:	4620      	mov	r0, r4
 800f208:	4798      	blx	r3
 800f20a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800f20e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800f212:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 800f216:	1a5b      	subs	r3, r3, r1
 800f218:	440a      	add	r2, r1
 800f21a:	b21b      	sxth	r3, r3
 800f21c:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 800f220:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 800f224:	2b00      	cmp	r3, #0
 800f226:	f47f aed8 	bne.w	800efda <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800f22a:	fa1f f188 	uxth.w	r1, r8
 800f22e:	4648      	mov	r0, r9
 800f230:	f7ff fa1c 	bl	800e66c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800f234:	e6d1      	b.n	800efda <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800f236:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 800f23a:	42ab      	cmp	r3, r5
 800f23c:	f67f ae95 	bls.w	800ef6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800f240:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 800f244:	ab07      	add	r3, sp, #28
 800f246:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800f24a:	6851      	ldr	r1, [r2, #4]
 800f24c:	c303      	stmia	r3!, {r0, r1}
 800f24e:	a807      	add	r0, sp, #28
 800f250:	f7fd f807 	bl	800c262 <_ZNK8touchgfx4Rect7isEmptyEv>
 800f254:	b920      	cbnz	r0, 800f260 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 800f256:	6823      	ldr	r3, [r4, #0]
 800f258:	a907      	add	r1, sp, #28
 800f25a:	4620      	mov	r0, r4
 800f25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f25e:	4798      	blx	r3
 800f260:	3501      	adds	r5, #1
 800f262:	b2ad      	uxth	r5, r5
 800f264:	e7e7      	b.n	800f236 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 800f266:	bf00      	nop
 800f268:	20024418 	.word	0x20024418

0800f26c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800f26c:	4b03      	ldr	r3, [pc, #12]	; (800f27c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800f26e:	2200      	movs	r2, #0
 800f270:	801a      	strh	r2, [r3, #0]
 800f272:	805a      	strh	r2, [r3, #2]
 800f274:	809a      	strh	r2, [r3, #4]
 800f276:	80da      	strh	r2, [r3, #6]
 800f278:	4770      	bx	lr
 800f27a:	bf00      	nop
 800f27c:	2002445c 	.word	0x2002445c

0800f280 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800f280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f284:	b09d      	sub	sp, #116	; 0x74
 800f286:	4606      	mov	r6, r0
 800f288:	4614      	mov	r4, r2
 800f28a:	468a      	mov	sl, r1
 800f28c:	a803      	add	r0, sp, #12
 800f28e:	461d      	mov	r5, r3
 800f290:	f000 fd7a 	bl	800fd88 <_ZN8touchgfx12TextProviderC1Ev>
 800f294:	6833      	ldr	r3, [r6, #0]
 800f296:	4630      	mov	r0, r6
 800f298:	f242 0b0b 	movw	fp, #8203	; 0x200b
 800f29c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f29e:	4798      	blx	r3
 800f2a0:	6833      	ldr	r3, [r6, #0]
 800f2a2:	4607      	mov	r7, r0
 800f2a4:	4630      	mov	r0, r6
 800f2a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2a8:	4798      	blx	r3
 800f2aa:	462a      	mov	r2, r5
 800f2ac:	2500      	movs	r5, #0
 800f2ae:	4621      	mov	r1, r4
 800f2b0:	9000      	str	r0, [sp, #0]
 800f2b2:	463b      	mov	r3, r7
 800f2b4:	462c      	mov	r4, r5
 800f2b6:	46a9      	mov	r9, r5
 800f2b8:	46a8      	mov	r8, r5
 800f2ba:	a803      	add	r0, sp, #12
 800f2bc:	f000 fdb7 	bl	800fe2e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	9302      	str	r3, [sp, #8]
 800f2c4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800f2c8:	429c      	cmp	r4, r3
 800f2ca:	d002      	beq.n	800f2d2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800f2cc:	455c      	cmp	r4, fp
 800f2ce:	bf18      	it	ne
 800f2d0:	4625      	movne	r5, r4
 800f2d2:	ab02      	add	r3, sp, #8
 800f2d4:	4632      	mov	r2, r6
 800f2d6:	4651      	mov	r1, sl
 800f2d8:	a803      	add	r0, sp, #12
 800f2da:	f001 f89d 	bl	8010418 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f2de:	4604      	mov	r4, r0
 800f2e0:	b108      	cbz	r0, 800f2e6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800f2e2:	280a      	cmp	r0, #10
 800f2e4:	d10a      	bne.n	800f2fc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800f2e6:	45c1      	cmp	r9, r8
 800f2e8:	bf38      	it	cc
 800f2ea:	46c1      	movcc	r9, r8
 800f2ec:	f04f 0800 	mov.w	r8, #0
 800f2f0:	2c00      	cmp	r4, #0
 800f2f2:	d1e5      	bne.n	800f2c0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800f2f4:	4648      	mov	r0, r9
 800f2f6:	b01d      	add	sp, #116	; 0x74
 800f2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2fc:	9a02      	ldr	r2, [sp, #8]
 800f2fe:	2a00      	cmp	r2, #0
 800f300:	d0de      	beq.n	800f2c0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800f302:	7b57      	ldrb	r7, [r2, #13]
 800f304:	4629      	mov	r1, r5
 800f306:	6833      	ldr	r3, [r6, #0]
 800f308:	007f      	lsls	r7, r7, #1
 800f30a:	8894      	ldrh	r4, [r2, #4]
 800f30c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f30e:	f407 7080 	and.w	r0, r7, #256	; 0x100
 800f312:	7a97      	ldrb	r7, [r2, #10]
 800f314:	4307      	orrs	r7, r0
 800f316:	4630      	mov	r0, r6
 800f318:	4798      	blx	r3
 800f31a:	4438      	add	r0, r7
 800f31c:	4480      	add	r8, r0
 800f31e:	fa1f f888 	uxth.w	r8, r8
 800f322:	e7e5      	b.n	800f2f0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800f324 <_ZNK8touchgfx4Font12getCharWidthEt>:
 800f324:	b508      	push	{r3, lr}
 800f326:	6803      	ldr	r3, [r0, #0]
 800f328:	68db      	ldr	r3, [r3, #12]
 800f32a:	4798      	blx	r3
 800f32c:	b128      	cbz	r0, 800f33a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800f32e:	7b43      	ldrb	r3, [r0, #13]
 800f330:	7a80      	ldrb	r0, [r0, #10]
 800f332:	005b      	lsls	r3, r3, #1
 800f334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f338:	4318      	orrs	r0, r3
 800f33a:	bd08      	pop	{r3, pc}

0800f33c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800f33c:	b40e      	push	{r1, r2, r3}
 800f33e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f340:	b09e      	sub	sp, #120	; 0x78
 800f342:	4605      	mov	r5, r0
 800f344:	ab23      	add	r3, sp, #140	; 0x8c
 800f346:	a805      	add	r0, sp, #20
 800f348:	f853 4b04 	ldr.w	r4, [r3], #4
 800f34c:	9303      	str	r3, [sp, #12]
 800f34e:	f000 fd1b 	bl	800fd88 <_ZN8touchgfx12TextProviderC1Ev>
 800f352:	682b      	ldr	r3, [r5, #0]
 800f354:	4628      	mov	r0, r5
 800f356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f358:	4798      	blx	r3
 800f35a:	682b      	ldr	r3, [r5, #0]
 800f35c:	4606      	mov	r6, r0
 800f35e:	4628      	mov	r0, r5
 800f360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f362:	4798      	blx	r3
 800f364:	4633      	mov	r3, r6
 800f366:	4621      	mov	r1, r4
 800f368:	ae1e      	add	r6, sp, #120	; 0x78
 800f36a:	2400      	movs	r4, #0
 800f36c:	9000      	str	r0, [sp, #0]
 800f36e:	9a03      	ldr	r2, [sp, #12]
 800f370:	a805      	add	r0, sp, #20
 800f372:	f000 fd5c 	bl	800fe2e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800f376:	f846 4d68 	str.w	r4, [r6, #-104]!
 800f37a:	462a      	mov	r2, r5
 800f37c:	4633      	mov	r3, r6
 800f37e:	4621      	mov	r1, r4
 800f380:	a805      	add	r0, sp, #20
 800f382:	f001 f849 	bl	8010418 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f386:	b300      	cbz	r0, 800f3ca <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 800f388:	280a      	cmp	r0, #10
 800f38a:	d01a      	beq.n	800f3c2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800f38c:	9f04      	ldr	r7, [sp, #16]
 800f38e:	b1c7      	cbz	r7, 800f3c2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800f390:	7b78      	ldrb	r0, [r7, #13]
 800f392:	7a3b      	ldrb	r3, [r7, #8]
 800f394:	00c1      	lsls	r1, r0, #3
 800f396:	88ea      	ldrh	r2, [r5, #6]
 800f398:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800f39c:	4319      	orrs	r1, r3
 800f39e:	0643      	lsls	r3, r0, #25
 800f3a0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800f3a4:	bf48      	it	mi
 800f3a6:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 800f3aa:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800f3ae:	bf48      	it	mi
 800f3b0:	b219      	sxthmi	r1, r3
 800f3b2:	79fb      	ldrb	r3, [r7, #7]
 800f3b4:	4303      	orrs	r3, r0
 800f3b6:	4413      	add	r3, r2
 800f3b8:	1a5b      	subs	r3, r3, r1
 800f3ba:	b21b      	sxth	r3, r3
 800f3bc:	429c      	cmp	r4, r3
 800f3be:	bfb8      	it	lt
 800f3c0:	461c      	movlt	r4, r3
 800f3c2:	4633      	mov	r3, r6
 800f3c4:	462a      	mov	r2, r5
 800f3c6:	2100      	movs	r1, #0
 800f3c8:	e7da      	b.n	800f380 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800f3ca:	b2a0      	uxth	r0, r4
 800f3cc:	b01e      	add	sp, #120	; 0x78
 800f3ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f3d2:	b003      	add	sp, #12
 800f3d4:	4770      	bx	lr

0800f3d6 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 800f3d6:	7a43      	ldrb	r3, [r0, #9]
 800f3d8:	8880      	ldrh	r0, [r0, #4]
 800f3da:	4418      	add	r0, r3
 800f3dc:	b280      	uxth	r0, r0
 800f3de:	4770      	bx	lr

0800f3e0 <_ZNK8touchgfx4Font13getFontHeightEv>:
 800f3e0:	6803      	ldr	r3, [r0, #0]
 800f3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3e4:	4718      	bx	r3

0800f3e6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800f3e6:	b40e      	push	{r1, r2, r3}
 800f3e8:	b570      	push	{r4, r5, r6, lr}
 800f3ea:	b09d      	sub	sp, #116	; 0x74
 800f3ec:	4604      	mov	r4, r0
 800f3ee:	ab21      	add	r3, sp, #132	; 0x84
 800f3f0:	a803      	add	r0, sp, #12
 800f3f2:	f853 5b04 	ldr.w	r5, [r3], #4
 800f3f6:	9302      	str	r3, [sp, #8]
 800f3f8:	f000 fcc6 	bl	800fd88 <_ZN8touchgfx12TextProviderC1Ev>
 800f3fc:	6823      	ldr	r3, [r4, #0]
 800f3fe:	4620      	mov	r0, r4
 800f400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f402:	4798      	blx	r3
 800f404:	6823      	ldr	r3, [r4, #0]
 800f406:	4606      	mov	r6, r0
 800f408:	4620      	mov	r0, r4
 800f40a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f40c:	2401      	movs	r4, #1
 800f40e:	4798      	blx	r3
 800f410:	4633      	mov	r3, r6
 800f412:	9000      	str	r0, [sp, #0]
 800f414:	4629      	mov	r1, r5
 800f416:	9a02      	ldr	r2, [sp, #8]
 800f418:	a803      	add	r0, sp, #12
 800f41a:	f000 fd08 	bl	800fe2e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800f41e:	a803      	add	r0, sp, #12
 800f420:	f001 f87a 	bl	8010518 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800f424:	b2a3      	uxth	r3, r4
 800f426:	b138      	cbz	r0, 800f438 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 800f428:	280a      	cmp	r0, #10
 800f42a:	a803      	add	r0, sp, #12
 800f42c:	bf04      	itt	eq
 800f42e:	3301      	addeq	r3, #1
 800f430:	b21c      	sxtheq	r4, r3
 800f432:	f001 f871 	bl	8010518 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800f436:	e7f5      	b.n	800f424 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800f438:	4618      	mov	r0, r3
 800f43a:	b01d      	add	sp, #116	; 0x74
 800f43c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f440:	b003      	add	sp, #12
 800f442:	4770      	bx	lr

0800f444 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800f444:	b40e      	push	{r1, r2, r3}
 800f446:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f448:	b09e      	sub	sp, #120	; 0x78
 800f44a:	4604      	mov	r4, r0
 800f44c:	ab23      	add	r3, sp, #140	; 0x8c
 800f44e:	a805      	add	r0, sp, #20
 800f450:	f853 5b04 	ldr.w	r5, [r3], #4
 800f454:	9303      	str	r3, [sp, #12]
 800f456:	f000 fc97 	bl	800fd88 <_ZN8touchgfx12TextProviderC1Ev>
 800f45a:	6823      	ldr	r3, [r4, #0]
 800f45c:	4620      	mov	r0, r4
 800f45e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f460:	4798      	blx	r3
 800f462:	6823      	ldr	r3, [r4, #0]
 800f464:	4606      	mov	r6, r0
 800f466:	4620      	mov	r0, r4
 800f468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f46a:	4798      	blx	r3
 800f46c:	4633      	mov	r3, r6
 800f46e:	4629      	mov	r1, r5
 800f470:	9000      	str	r0, [sp, #0]
 800f472:	9a03      	ldr	r2, [sp, #12]
 800f474:	a805      	add	r0, sp, #20
 800f476:	f000 fcda 	bl	800fe2e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800f47a:	ad1e      	add	r5, sp, #120	; 0x78
 800f47c:	2100      	movs	r1, #0
 800f47e:	f647 76ff 	movw	r6, #32767	; 0x7fff
 800f482:	4622      	mov	r2, r4
 800f484:	a805      	add	r0, sp, #20
 800f486:	f845 1d68 	str.w	r1, [r5, #-104]!
 800f48a:	462b      	mov	r3, r5
 800f48c:	f000 ffc4 	bl	8010418 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f490:	b1d8      	cbz	r0, 800f4ca <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 800f492:	280a      	cmp	r0, #10
 800f494:	d012      	beq.n	800f4bc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800f496:	9804      	ldr	r0, [sp, #16]
 800f498:	b180      	cbz	r0, 800f4bc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800f49a:	7b47      	ldrb	r7, [r0, #13]
 800f49c:	88e2      	ldrh	r2, [r4, #6]
 800f49e:	00fb      	lsls	r3, r7, #3
 800f4a0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800f4a4:	7a03      	ldrb	r3, [r0, #8]
 800f4a6:	430b      	orrs	r3, r1
 800f4a8:	0679      	lsls	r1, r7, #25
 800f4aa:	bf44      	itt	mi
 800f4ac:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800f4b0:	b21b      	sxthmi	r3, r3
 800f4b2:	1ad3      	subs	r3, r2, r3
 800f4b4:	b21b      	sxth	r3, r3
 800f4b6:	429e      	cmp	r6, r3
 800f4b8:	bfa8      	it	ge
 800f4ba:	461e      	movge	r6, r3
 800f4bc:	462b      	mov	r3, r5
 800f4be:	4622      	mov	r2, r4
 800f4c0:	2100      	movs	r1, #0
 800f4c2:	a805      	add	r0, sp, #20
 800f4c4:	f000 ffa8 	bl	8010418 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f4c8:	e7e2      	b.n	800f490 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 800f4ca:	4630      	mov	r0, r6
 800f4cc:	b01e      	add	sp, #120	; 0x78
 800f4ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f4d2:	b003      	add	sp, #12
 800f4d4:	4770      	bx	lr

0800f4d6 <_ZNK8touchgfx8Drawable10invalidateEv>:
 800f4d6:	b513      	push	{r0, r1, r4, lr}
 800f4d8:	6803      	ldr	r3, [r0, #0]
 800f4da:	2400      	movs	r4, #0
 800f4dc:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800f4e0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800f4e4:	f8ad 1004 	strh.w	r1, [sp, #4]
 800f4e8:	4669      	mov	r1, sp
 800f4ea:	691b      	ldr	r3, [r3, #16]
 800f4ec:	9400      	str	r4, [sp, #0]
 800f4ee:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f4f2:	4798      	blx	r3
 800f4f4:	b002      	add	sp, #8
 800f4f6:	bd10      	pop	{r4, pc}

0800f4f8 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800f4f8:	b538      	push	{r3, r4, r5, lr}
 800f4fa:	680b      	ldr	r3, [r1, #0]
 800f4fc:	460c      	mov	r4, r1
 800f4fe:	4605      	mov	r5, r0
 800f500:	68db      	ldr	r3, [r3, #12]
 800f502:	4798      	blx	r3
 800f504:	6823      	ldr	r3, [r4, #0]
 800f506:	4620      	mov	r0, r4
 800f508:	4629      	mov	r1, r5
 800f50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f50c:	4798      	blx	r3
 800f50e:	4628      	mov	r0, r5
 800f510:	bd38      	pop	{r3, r4, r5, pc}

0800f512 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800f512:	b410      	push	{r4}
 800f514:	880a      	ldrh	r2, [r1, #0]
 800f516:	8884      	ldrh	r4, [r0, #4]
 800f518:	4422      	add	r2, r4
 800f51a:	800a      	strh	r2, [r1, #0]
 800f51c:	884a      	ldrh	r2, [r1, #2]
 800f51e:	88c4      	ldrh	r4, [r0, #6]
 800f520:	4422      	add	r2, r4
 800f522:	804a      	strh	r2, [r1, #2]
 800f524:	6940      	ldr	r0, [r0, #20]
 800f526:	b120      	cbz	r0, 800f532 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800f528:	6803      	ldr	r3, [r0, #0]
 800f52a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f530:	4718      	bx	r3
 800f532:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f536:	4770      	bx	lr

0800f538 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800f538:	b570      	push	{r4, r5, r6, lr}
 800f53a:	8882      	ldrh	r2, [r0, #4]
 800f53c:	460c      	mov	r4, r1
 800f53e:	880b      	ldrh	r3, [r1, #0]
 800f540:	4605      	mov	r5, r0
 800f542:	4413      	add	r3, r2
 800f544:	800b      	strh	r3, [r1, #0]
 800f546:	884b      	ldrh	r3, [r1, #2]
 800f548:	88c2      	ldrh	r2, [r0, #6]
 800f54a:	4413      	add	r3, r2
 800f54c:	804b      	strh	r3, [r1, #2]
 800f54e:	1d01      	adds	r1, r0, #4
 800f550:	4620      	mov	r0, r4
 800f552:	f7fc fe43 	bl	800c1dc <_ZN8touchgfx4RectaNERKS0_>
 800f556:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	dd0b      	ble.n	800f576 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800f55e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800f562:	2b00      	cmp	r3, #0
 800f564:	dd07      	ble.n	800f576 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800f566:	6968      	ldr	r0, [r5, #20]
 800f568:	b128      	cbz	r0, 800f576 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800f56a:	6803      	ldr	r3, [r0, #0]
 800f56c:	4621      	mov	r1, r4
 800f56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f570:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f574:	4718      	bx	r3
 800f576:	bd70      	pop	{r4, r5, r6, pc}

0800f578 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800f578:	b570      	push	{r4, r5, r6, lr}
 800f57a:	8882      	ldrh	r2, [r0, #4]
 800f57c:	460c      	mov	r4, r1
 800f57e:	880b      	ldrh	r3, [r1, #0]
 800f580:	4605      	mov	r5, r0
 800f582:	4413      	add	r3, r2
 800f584:	800b      	strh	r3, [r1, #0]
 800f586:	884b      	ldrh	r3, [r1, #2]
 800f588:	88c2      	ldrh	r2, [r0, #6]
 800f58a:	4413      	add	r3, r2
 800f58c:	804b      	strh	r3, [r1, #2]
 800f58e:	1d01      	adds	r1, r0, #4
 800f590:	4620      	mov	r0, r4
 800f592:	f7fc fe23 	bl	800c1dc <_ZN8touchgfx4RectaNERKS0_>
 800f596:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	dd18      	ble.n	800f5d0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800f59e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	dd14      	ble.n	800f5d0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800f5a6:	6968      	ldr	r0, [r5, #20]
 800f5a8:	b128      	cbz	r0, 800f5b6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 800f5aa:	6803      	ldr	r3, [r0, #0]
 800f5ac:	4621      	mov	r1, r4
 800f5ae:	691b      	ldr	r3, [r3, #16]
 800f5b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f5b4:	4718      	bx	r3
 800f5b6:	4b07      	ldr	r3, [pc, #28]	; (800f5d4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	3304      	adds	r3, #4
 800f5bc:	429d      	cmp	r5, r3
 800f5be:	d107      	bne.n	800f5d0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800f5c0:	f7fe ff44 	bl	800e44c <_ZN8touchgfx11Application11getInstanceEv>
 800f5c4:	6821      	ldr	r1, [r4, #0]
 800f5c6:	6862      	ldr	r2, [r4, #4]
 800f5c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f5cc:	f7ff b862 	b.w	800e694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800f5d0:	bd70      	pop	{r4, r5, r6, pc}
 800f5d2:	bf00      	nop
 800f5d4:	20024454 	.word	0x20024454

0800f5d8 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800f5d8:	b570      	push	{r4, r5, r6, lr}
 800f5da:	4604      	mov	r4, r0
 800f5dc:	4616      	mov	r6, r2
 800f5de:	460d      	mov	r5, r1
 800f5e0:	b901      	cbnz	r1, 800f5e4 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800f5e2:	b192      	cbz	r2, 800f60a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 800f5e4:	6823      	ldr	r3, [r4, #0]
 800f5e6:	4620      	mov	r0, r4
 800f5e8:	699b      	ldr	r3, [r3, #24]
 800f5ea:	4798      	blx	r3
 800f5ec:	88e2      	ldrh	r2, [r4, #6]
 800f5ee:	88a1      	ldrh	r1, [r4, #4]
 800f5f0:	4620      	mov	r0, r4
 800f5f2:	4432      	add	r2, r6
 800f5f4:	4429      	add	r1, r5
 800f5f6:	b212      	sxth	r2, r2
 800f5f8:	b209      	sxth	r1, r1
 800f5fa:	f7f4 fffb 	bl	80045f4 <_ZN8touchgfx8Drawable5setXYEss>
 800f5fe:	6823      	ldr	r3, [r4, #0]
 800f600:	4620      	mov	r0, r4
 800f602:	699b      	ldr	r3, [r3, #24]
 800f604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f608:	4718      	bx	r3
 800f60a:	bd70      	pop	{r4, r5, r6, pc}

0800f60c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800f60c:	b510      	push	{r4, lr}
 800f60e:	2300      	movs	r3, #0
 800f610:	4604      	mov	r4, r0
 800f612:	4608      	mov	r0, r1
 800f614:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800f618:	8023      	strh	r3, [r4, #0]
 800f61a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800f61e:	8063      	strh	r3, [r4, #2]
 800f620:	6803      	ldr	r3, [r0, #0]
 800f622:	80a1      	strh	r1, [r4, #4]
 800f624:	4621      	mov	r1, r4
 800f626:	80e2      	strh	r2, [r4, #6]
 800f628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f62a:	4798      	blx	r3
 800f62c:	4620      	mov	r0, r4
 800f62e:	bd10      	pop	{r4, pc}

0800f630 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 800f630:	b530      	push	{r4, r5, lr}
 800f632:	8083      	strh	r3, [r0, #4]
 800f634:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f638:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800f63c:	80c3      	strh	r3, [r0, #6]
 800f63e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800f642:	6141      	str	r1, [r0, #20]
 800f644:	7203      	strb	r3, [r0, #8]
 800f646:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800f64a:	8302      	strh	r2, [r0, #24]
 800f64c:	7243      	strb	r3, [r0, #9]
 800f64e:	7a83      	ldrb	r3, [r0, #10]
 800f650:	f365 0306 	bfi	r3, r5, #0, #7
 800f654:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800f658:	f365 13c7 	bfi	r3, r5, #7, #1
 800f65c:	7283      	strb	r3, [r0, #10]
 800f65e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800f662:	72c3      	strb	r3, [r0, #11]
 800f664:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800f668:	7303      	strb	r3, [r0, #12]
 800f66a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800f66e:	81c3      	strh	r3, [r0, #14]
 800f670:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800f674:	8203      	strh	r3, [r0, #16]
 800f676:	4b01      	ldr	r3, [pc, #4]	; (800f67c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 800f678:	6003      	str	r3, [r0, #0]
 800f67a:	bd30      	pop	{r4, r5, pc}
 800f67c:	080208c0 	.word	0x080208c0

0800f680 <_ZNK8touchgfx9ConstFont4findEt>:
 800f680:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f682:	6944      	ldr	r4, [r0, #20]
 800f684:	b3bc      	cbz	r4, 800f6f6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800f686:	88a3      	ldrh	r3, [r4, #4]
 800f688:	8b02      	ldrh	r2, [r0, #24]
 800f68a:	1acb      	subs	r3, r1, r3
 800f68c:	f102 32ff 	add.w	r2, r2, #4294967295
 800f690:	d431      	bmi.n	800f6f6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800f692:	4293      	cmp	r3, r2
 800f694:	dd0c      	ble.n	800f6b0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800f696:	230e      	movs	r3, #14
 800f698:	fb03 4302 	mla	r3, r3, r2, r4
 800f69c:	889b      	ldrh	r3, [r3, #4]
 800f69e:	1a5b      	subs	r3, r3, r1
 800f6a0:	1ad3      	subs	r3, r2, r3
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	db27      	blt.n	800f6f6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	bfbc      	itt	lt
 800f6aa:	2302      	movlt	r3, #2
 800f6ac:	fb92 f3f3 	sdivlt	r3, r2, r3
 800f6b0:	2500      	movs	r5, #0
 800f6b2:	260e      	movs	r6, #14
 800f6b4:	4295      	cmp	r5, r2
 800f6b6:	dc1e      	bgt.n	800f6f6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800f6b8:	fb06 4003 	mla	r0, r6, r3, r4
 800f6bc:	8887      	ldrh	r7, [r0, #4]
 800f6be:	42b9      	cmp	r1, r7
 800f6c0:	d01a      	beq.n	800f6f8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800f6c2:	d20d      	bcs.n	800f6e0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800f6c4:	1e5a      	subs	r2, r3, #1
 800f6c6:	4295      	cmp	r5, r2
 800f6c8:	dc15      	bgt.n	800f6f6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800f6ca:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800f6ce:	1a5b      	subs	r3, r3, r1
 800f6d0:	1ad3      	subs	r3, r2, r3
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	db0f      	blt.n	800f6f6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800f6d6:	429d      	cmp	r5, r3
 800f6d8:	ddec      	ble.n	800f6b4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800f6da:	1953      	adds	r3, r2, r5
 800f6dc:	105b      	asrs	r3, r3, #1
 800f6de:	e7e9      	b.n	800f6b4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800f6e0:	1c5d      	adds	r5, r3, #1
 800f6e2:	42aa      	cmp	r2, r5
 800f6e4:	db07      	blt.n	800f6f6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800f6e6:	8a43      	ldrh	r3, [r0, #18]
 800f6e8:	1acb      	subs	r3, r1, r3
 800f6ea:	442b      	add	r3, r5
 800f6ec:	429d      	cmp	r5, r3
 800f6ee:	dc02      	bgt.n	800f6f6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800f6f0:	429a      	cmp	r2, r3
 800f6f2:	dadf      	bge.n	800f6b4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800f6f4:	e7f1      	b.n	800f6da <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800f6f6:	2000      	movs	r0, #0
 800f6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f6fa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800f6fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6fc:	4604      	mov	r4, r0
 800f6fe:	4617      	mov	r7, r2
 800f700:	461e      	mov	r6, r3
 800f702:	b911      	cbnz	r1, 800f70a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800f704:	2500      	movs	r5, #0
 800f706:	4628      	mov	r0, r5
 800f708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f70a:	290a      	cmp	r1, #10
 800f70c:	d0fa      	beq.n	800f704 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800f70e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800f712:	4291      	cmp	r1, r2
 800f714:	d0f6      	beq.n	800f704 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800f716:	f242 020b 	movw	r2, #8203	; 0x200b
 800f71a:	4291      	cmp	r1, r2
 800f71c:	d0f2      	beq.n	800f704 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800f71e:	f7ff ffaf 	bl	800f680 <_ZNK8touchgfx9ConstFont4findEt>
 800f722:	4605      	mov	r5, r0
 800f724:	b950      	cbnz	r0, 800f73c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800f726:	6823      	ldr	r3, [r4, #0]
 800f728:	4620      	mov	r0, r4
 800f72a:	691b      	ldr	r3, [r3, #16]
 800f72c:	4798      	blx	r3
 800f72e:	4601      	mov	r1, r0
 800f730:	4620      	mov	r0, r4
 800f732:	f7ff ffa5 	bl	800f680 <_ZNK8touchgfx9ConstFont4findEt>
 800f736:	4605      	mov	r5, r0
 800f738:	2800      	cmp	r0, #0
 800f73a:	d0e3      	beq.n	800f704 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800f73c:	6823      	ldr	r3, [r4, #0]
 800f73e:	4629      	mov	r1, r5
 800f740:	4620      	mov	r0, r4
 800f742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f744:	4798      	blx	r3
 800f746:	6038      	str	r0, [r7, #0]
 800f748:	6823      	ldr	r3, [r4, #0]
 800f74a:	4620      	mov	r0, r4
 800f74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f74e:	4798      	blx	r3
 800f750:	7030      	strb	r0, [r6, #0]
 800f752:	e7d8      	b.n	800f706 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800f754 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 800f754:	2000      	movs	r0, #0
 800f756:	4770      	bx	lr

0800f758 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 800f758:	2001      	movs	r0, #1
 800f75a:	4770      	bx	lr

0800f75c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 800f75c:	2002      	movs	r0, #2
 800f75e:	4770      	bx	lr

0800f760 <_ZN8touchgfx6ScreenD1Ev>:
 800f760:	4770      	bx	lr

0800f762 <_ZN8touchgfx12GestureEventD1Ev>:
 800f762:	4770      	bx	lr

0800f764 <_ZN8touchgfx9DragEventD1Ev>:
 800f764:	4770      	bx	lr

0800f766 <_ZN8touchgfx10ClickEventD1Ev>:
 800f766:	4770      	bx	lr

0800f768 <_ZN8touchgfx10ClickEventD0Ev>:
 800f768:	b510      	push	{r4, lr}
 800f76a:	4604      	mov	r4, r0
 800f76c:	210c      	movs	r1, #12
 800f76e:	f00d f8bb 	bl	801c8e8 <_ZdlPvj>
 800f772:	4620      	mov	r0, r4
 800f774:	bd10      	pop	{r4, pc}

0800f776 <_ZN8touchgfx9DragEventD0Ev>:
 800f776:	b510      	push	{r4, lr}
 800f778:	4604      	mov	r4, r0
 800f77a:	2110      	movs	r1, #16
 800f77c:	f00d f8b4 	bl	801c8e8 <_ZdlPvj>
 800f780:	4620      	mov	r0, r4
 800f782:	bd10      	pop	{r4, pc}

0800f784 <_ZN8touchgfx12GestureEventD0Ev>:
 800f784:	b510      	push	{r4, lr}
 800f786:	4604      	mov	r4, r0
 800f788:	210c      	movs	r1, #12
 800f78a:	f00d f8ad 	bl	801c8e8 <_ZdlPvj>
 800f78e:	4620      	mov	r0, r4
 800f790:	bd10      	pop	{r4, pc}

0800f792 <_ZN8touchgfx6ScreenD0Ev>:
 800f792:	b510      	push	{r4, lr}
 800f794:	4604      	mov	r4, r0
 800f796:	213c      	movs	r1, #60	; 0x3c
 800f798:	f00d f8a6 	bl	801c8e8 <_ZdlPvj>
 800f79c:	4620      	mov	r0, r4
 800f79e:	bd10      	pop	{r4, pc}

0800f7a0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800f7a0:	b530      	push	{r4, r5, lr}
 800f7a2:	460d      	mov	r5, r1
 800f7a4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800f7a6:	b087      	sub	sp, #28
 800f7a8:	4604      	mov	r4, r0
 800f7aa:	b301      	cbz	r1, 800f7ee <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800f7ac:	a801      	add	r0, sp, #4
 800f7ae:	f7ff ff2d 	bl	800f60c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f7b2:	892a      	ldrh	r2, [r5, #8]
 800f7b4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f7b8:	7928      	ldrb	r0, [r5, #4]
 800f7ba:	1ad2      	subs	r2, r2, r3
 800f7bc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800f7be:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800f7c2:	441a      	add	r2, r3
 800f7c4:	896b      	ldrh	r3, [r5, #10]
 800f7c6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800f7ca:	f88d 0010 	strb.w	r0, [sp, #16]
 800f7ce:	1b5b      	subs	r3, r3, r5
 800f7d0:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 800f7d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f7d4:	442b      	add	r3, r5
 800f7d6:	4d07      	ldr	r5, [pc, #28]	; (800f7f4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800f7d8:	f8ad 1012 	strh.w	r1, [sp, #18]
 800f7dc:	a903      	add	r1, sp, #12
 800f7de:	9503      	str	r5, [sp, #12]
 800f7e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f7e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f7e8:	6803      	ldr	r3, [r0, #0]
 800f7ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f7ec:	4798      	blx	r3
 800f7ee:	b007      	add	sp, #28
 800f7f0:	bd30      	pop	{r4, r5, pc}
 800f7f2:	bf00      	nop
 800f7f4:	08020948 	.word	0x08020948

0800f7f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800f7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f7fe:	b08a      	sub	sp, #40	; 0x28
 800f800:	4604      	mov	r4, r0
 800f802:	460d      	mov	r5, r1
 800f804:	b113      	cbz	r3, 800f80c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 800f806:	790b      	ldrb	r3, [r1, #4]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d044      	beq.n	800f896 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800f80c:	f104 0804 	add.w	r8, r4, #4
 800f810:	a803      	add	r0, sp, #12
 800f812:	4641      	mov	r1, r8
 800f814:	f7ff fefa 	bl	800f60c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f818:	792b      	ldrb	r3, [r5, #4]
 800f81a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800f81e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800f822:	b983      	cbnz	r3, 800f846 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 800f824:	f104 0336 	add.w	r3, r4, #54	; 0x36
 800f828:	892a      	ldrh	r2, [r5, #8]
 800f82a:	88e9      	ldrh	r1, [r5, #6]
 800f82c:	4640      	mov	r0, r8
 800f82e:	1b92      	subs	r2, r2, r6
 800f830:	9301      	str	r3, [sp, #4]
 800f832:	1bc9      	subs	r1, r1, r7
 800f834:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800f838:	b212      	sxth	r2, r2
 800f83a:	9300      	str	r3, [sp, #0]
 800f83c:	b209      	sxth	r1, r1
 800f83e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800f842:	f7fc fbe9 	bl	800c018 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 800f846:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f848:	b329      	cbz	r1, 800f896 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800f84a:	a805      	add	r0, sp, #20
 800f84c:	f7ff fede 	bl	800f60c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f850:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800f854:	792b      	ldrb	r3, [r5, #4]
 800f856:	a907      	add	r1, sp, #28
 800f858:	1abf      	subs	r7, r7, r2
 800f85a:	88ea      	ldrh	r2, [r5, #6]
 800f85c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f85e:	4417      	add	r7, r2
 800f860:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 800f862:	f88d 3020 	strb.w	r3, [sp, #32]
 800f866:	4417      	add	r7, r2
 800f868:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800f86c:	1ab6      	subs	r6, r6, r2
 800f86e:	892a      	ldrh	r2, [r5, #8]
 800f870:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800f874:	4416      	add	r6, r2
 800f876:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800f878:	4416      	add	r6, r2
 800f87a:	4a08      	ldr	r2, [pc, #32]	; (800f89c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 800f87c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800f880:	2600      	movs	r6, #0
 800f882:	9207      	str	r2, [sp, #28]
 800f884:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 800f888:	6803      	ldr	r3, [r0, #0]
 800f88a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f88c:	4798      	blx	r3
 800f88e:	792b      	ldrb	r3, [r5, #4]
 800f890:	b10b      	cbz	r3, 800f896 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800f892:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 800f896:	b00a      	add	sp, #40	; 0x28
 800f898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f89c:	08020920 	.word	0x08020920

0800f8a0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800f8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8a4:	460c      	mov	r4, r1
 800f8a6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800f8a8:	b088      	sub	sp, #32
 800f8aa:	4605      	mov	r5, r0
 800f8ac:	2900      	cmp	r1, #0
 800f8ae:	d06d      	beq.n	800f98c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 800f8b0:	4668      	mov	r0, sp
 800f8b2:	f7ff feab 	bl	800f60c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f8b6:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 800f8b8:	88e3      	ldrh	r3, [r4, #6]
 800f8ba:	f9bd 8000 	ldrsh.w	r8, [sp]
 800f8be:	440b      	add	r3, r1
 800f8c0:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 800f8c4:	b21b      	sxth	r3, r3
 800f8c6:	4543      	cmp	r3, r8
 800f8c8:	db31      	blt.n	800f92e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f8ca:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800f8ce:	44c4      	add	ip, r8
 800f8d0:	fa0f fc8c 	sxth.w	ip, ip
 800f8d4:	4563      	cmp	r3, ip
 800f8d6:	da2a      	bge.n	800f92e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f8d8:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 800f8da:	8926      	ldrh	r6, [r4, #8]
 800f8dc:	4416      	add	r6, r2
 800f8de:	b236      	sxth	r6, r6
 800f8e0:	42be      	cmp	r6, r7
 800f8e2:	db24      	blt.n	800f92e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f8e4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800f8e8:	4438      	add	r0, r7
 800f8ea:	b200      	sxth	r0, r0
 800f8ec:	4286      	cmp	r6, r0
 800f8ee:	da1e      	bge.n	800f92e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f8f0:	8963      	ldrh	r3, [r4, #10]
 800f8f2:	4419      	add	r1, r3
 800f8f4:	b209      	sxth	r1, r1
 800f8f6:	4541      	cmp	r1, r8
 800f8f8:	db08      	blt.n	800f90c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800f8fa:	4561      	cmp	r1, ip
 800f8fc:	da06      	bge.n	800f90c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800f8fe:	89a3      	ldrh	r3, [r4, #12]
 800f900:	441a      	add	r2, r3
 800f902:	b212      	sxth	r2, r2
 800f904:	42ba      	cmp	r2, r7
 800f906:	db01      	blt.n	800f90c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800f908:	4282      	cmp	r2, r0
 800f90a:	db10      	blt.n	800f92e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f90c:	4b21      	ldr	r3, [pc, #132]	; (800f994 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 800f90e:	a904      	add	r1, sp, #16
 800f910:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800f912:	9304      	str	r3, [sp, #16]
 800f914:	2302      	movs	r3, #2
 800f916:	f88d 3014 	strb.w	r3, [sp, #20]
 800f91a:	2300      	movs	r3, #0
 800f91c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f920:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f924:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f928:	6803      	ldr	r3, [r0, #0]
 800f92a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f92c:	4798      	blx	r3
 800f92e:	1d29      	adds	r1, r5, #4
 800f930:	a802      	add	r0, sp, #8
 800f932:	f7ff fe6b 	bl	800f60c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f936:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f93a:	88e0      	ldrh	r0, [r4, #6]
 800f93c:	eba3 0808 	sub.w	r8, r3, r8
 800f940:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800f944:	7921      	ldrb	r1, [r4, #4]
 800f946:	fa1f f888 	uxth.w	r8, r8
 800f94a:	1bdf      	subs	r7, r3, r7
 800f94c:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 800f950:	b2bb      	uxth	r3, r7
 800f952:	4440      	add	r0, r8
 800f954:	8922      	ldrh	r2, [r4, #8]
 800f956:	8967      	ldrh	r7, [r4, #10]
 800f958:	4460      	add	r0, ip
 800f95a:	89a4      	ldrh	r4, [r4, #12]
 800f95c:	441a      	add	r2, r3
 800f95e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 800f960:	44b8      	add	r8, r7
 800f962:	4423      	add	r3, r4
 800f964:	f8ad 0016 	strh.w	r0, [sp, #22]
 800f968:	4432      	add	r2, r6
 800f96a:	44e0      	add	r8, ip
 800f96c:	4433      	add	r3, r6
 800f96e:	4c0a      	ldr	r4, [pc, #40]	; (800f998 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 800f970:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800f972:	f88d 1014 	strb.w	r1, [sp, #20]
 800f976:	a904      	add	r1, sp, #16
 800f978:	9404      	str	r4, [sp, #16]
 800f97a:	f8ad 2018 	strh.w	r2, [sp, #24]
 800f97e:	f8ad 801a 	strh.w	r8, [sp, #26]
 800f982:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f986:	6803      	ldr	r3, [r0, #0]
 800f988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f98a:	4798      	blx	r3
 800f98c:	b008      	add	sp, #32
 800f98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f992:	bf00      	nop
 800f994:	08020920 	.word	0x08020920
 800f998:	08020934 	.word	0x08020934

0800f99c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800f99c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f99e:	4604      	mov	r4, r0
 800f9a0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800f9a4:	3201      	adds	r2, #1
 800f9a6:	d112      	bne.n	800f9ce <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800f9a8:	2500      	movs	r5, #0
 800f9aa:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800f9ae:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800f9b2:	6803      	ldr	r3, [r0, #0]
 800f9b4:	9500      	str	r5, [sp, #0]
 800f9b6:	466d      	mov	r5, sp
 800f9b8:	f8ad 1004 	strh.w	r1, [sp, #4]
 800f9bc:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f9c0:	4629      	mov	r1, r5
 800f9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9c4:	4798      	blx	r3
 800f9c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f9ca:	e884 0003 	stmia.w	r4, {r0, r1}
 800f9ce:	4620      	mov	r0, r4
 800f9d0:	b003      	add	sp, #12
 800f9d2:	bd30      	pop	{r4, r5, pc}

0800f9d4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800f9d4:	b513      	push	{r0, r1, r4, lr}
 800f9d6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800f9da:	4604      	mov	r4, r0
 800f9dc:	3301      	adds	r3, #1
 800f9de:	d109      	bne.n	800f9f4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800f9e0:	4601      	mov	r1, r0
 800f9e2:	4668      	mov	r0, sp
 800f9e4:	f7ff fe12 	bl	800f60c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f9e8:	f8bd 3000 	ldrh.w	r3, [sp]
 800f9ec:	8423      	strh	r3, [r4, #32]
 800f9ee:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f9f2:	8463      	strh	r3, [r4, #34]	; 0x22
 800f9f4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800f9f8:	b002      	add	sp, #8
 800f9fa:	bd10      	pop	{r4, pc}

0800f9fc <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800f9fc:	b513      	push	{r0, r1, r4, lr}
 800f9fe:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800fa02:	4604      	mov	r4, r0
 800fa04:	3301      	adds	r3, #1
 800fa06:	d109      	bne.n	800fa1c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800fa08:	4601      	mov	r1, r0
 800fa0a:	4668      	mov	r0, sp
 800fa0c:	f7ff fdfe 	bl	800f60c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fa10:	f8bd 3000 	ldrh.w	r3, [sp]
 800fa14:	8423      	strh	r3, [r4, #32]
 800fa16:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800fa1a:	8463      	strh	r3, [r4, #34]	; 0x22
 800fa1c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 800fa20:	b002      	add	sp, #8
 800fa22:	bd10      	pop	{r4, pc}

0800fa24 <_ZN8touchgfx6ScreenC1Ev>:
 800fa24:	b570      	push	{r4, r5, r6, lr}
 800fa26:	4b17      	ldr	r3, [pc, #92]	; (800fa84 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800fa28:	4605      	mov	r5, r0
 800fa2a:	4a17      	ldr	r2, [pc, #92]	; (800fa88 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800fa2c:	2101      	movs	r1, #1
 800fa2e:	f845 3b04 	str.w	r3, [r5], #4
 800fa32:	2300      	movs	r3, #0
 800fa34:	6042      	str	r2, [r0, #4]
 800fa36:	4604      	mov	r4, r0
 800fa38:	8103      	strh	r3, [r0, #8]
 800fa3a:	8143      	strh	r3, [r0, #10]
 800fa3c:	8183      	strh	r3, [r0, #12]
 800fa3e:	81c3      	strh	r3, [r0, #14]
 800fa40:	8203      	strh	r3, [r0, #16]
 800fa42:	8243      	strh	r3, [r0, #18]
 800fa44:	8283      	strh	r3, [r0, #20]
 800fa46:	82c3      	strh	r3, [r0, #22]
 800fa48:	6203      	str	r3, [r0, #32]
 800fa4a:	8483      	strh	r3, [r0, #36]	; 0x24
 800fa4c:	84c3      	strh	r3, [r0, #38]	; 0x26
 800fa4e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 800fa52:	6343      	str	r3, [r0, #52]	; 0x34
 800fa54:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 800fa58:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 800fa5c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800fa60:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 800fa64:	4b09      	ldr	r3, [pc, #36]	; (800fa8c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800fa66:	4628      	mov	r0, r5
 800fa68:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fa6c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800fa6e:	4a08      	ldr	r2, [pc, #32]	; (800fa90 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800fa70:	f9b2 1000 	ldrsh.w	r1, [r2]
 800fa74:	4798      	blx	r3
 800fa76:	6863      	ldr	r3, [r4, #4]
 800fa78:	4628      	mov	r0, r5
 800fa7a:	4631      	mov	r1, r6
 800fa7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa7e:	4798      	blx	r3
 800fa80:	4620      	mov	r0, r4
 800fa82:	bd70      	pop	{r4, r5, r6, pc}
 800fa84:	0802095c 	.word	0x0802095c
 800fa88:	080206d8 	.word	0x080206d8
 800fa8c:	2002440e 	.word	0x2002440e
 800fa90:	2002440c 	.word	0x2002440c

0800fa94 <_ZN8touchgfx6Screen4drawEv>:
 800fa94:	4b09      	ldr	r3, [pc, #36]	; (800fabc <_ZN8touchgfx6Screen4drawEv+0x28>)
 800fa96:	b507      	push	{r0, r1, r2, lr}
 800fa98:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fa9c:	2100      	movs	r1, #0
 800fa9e:	4b08      	ldr	r3, [pc, #32]	; (800fac0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800faa0:	9100      	str	r1, [sp, #0]
 800faa2:	4669      	mov	r1, sp
 800faa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800faa8:	f8ad 2004 	strh.w	r2, [sp, #4]
 800faac:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fab0:	6803      	ldr	r3, [r0, #0]
 800fab2:	689b      	ldr	r3, [r3, #8]
 800fab4:	4798      	blx	r3
 800fab6:	b003      	add	sp, #12
 800fab8:	f85d fb04 	ldr.w	pc, [sp], #4
 800fabc:	2002440c 	.word	0x2002440c
 800fac0:	2002440e 	.word	0x2002440e

0800fac4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800fac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fac8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800facc:	b089      	sub	sp, #36	; 0x24
 800face:	4680      	mov	r8, r0
 800fad0:	460c      	mov	r4, r1
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	4615      	mov	r5, r2
 800fad6:	dd0e      	ble.n	800faf6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800fad8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	dd0a      	ble.n	800faf6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800fae0:	4628      	mov	r0, r5
 800fae2:	f7ff ff5b 	bl	800f99c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800fae6:	4621      	mov	r1, r4
 800fae8:	f7fe fbd1 	bl	800e28e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800faec:	69eb      	ldr	r3, [r5, #28]
 800faee:	b928      	cbnz	r0, 800fafc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 800faf0:	461d      	mov	r5, r3
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d1f4      	bne.n	800fae0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 800faf6:	b009      	add	sp, #36	; 0x24
 800faf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fafc:	ae04      	add	r6, sp, #16
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	f000 80b5 	beq.w	800fc6e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800fb04:	682b      	ldr	r3, [r5, #0]
 800fb06:	4629      	mov	r1, r5
 800fb08:	a802      	add	r0, sp, #8
 800fb0a:	68db      	ldr	r3, [r3, #12]
 800fb0c:	4798      	blx	r3
 800fb0e:	4628      	mov	r0, r5
 800fb10:	f7ff ff60 	bl	800f9d4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800fb14:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800fb18:	4407      	add	r7, r0
 800fb1a:	4628      	mov	r0, r5
 800fb1c:	f7ff ff6e 	bl	800f9fc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800fb20:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800fb24:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800fb28:	b23f      	sxth	r7, r7
 800fb2a:	4418      	add	r0, r3
 800fb2c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800fb30:	4621      	mov	r1, r4
 800fb32:	f8ad 2014 	strh.w	r2, [sp, #20]
 800fb36:	f8ad 0012 	strh.w	r0, [sp, #18]
 800fb3a:	4630      	mov	r0, r6
 800fb3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fb40:	f8ad 7010 	strh.w	r7, [sp, #16]
 800fb44:	f7fc fb4a 	bl	800c1dc <_ZN8touchgfx4RectaNERKS0_>
 800fb48:	4628      	mov	r0, r5
 800fb4a:	f7ff ff27 	bl	800f99c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800fb4e:	ab06      	add	r3, sp, #24
 800fb50:	4602      	mov	r2, r0
 800fb52:	e896 0003 	ldmia.w	r6, {r0, r1}
 800fb56:	e883 0003 	stmia.w	r3, {r0, r1}
 800fb5a:	4611      	mov	r1, r2
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7fc fb3d 	bl	800c1dc <_ZN8touchgfx4RectaNERKS0_>
 800fb62:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800fb66:	f9b4 1000 	ldrsh.w	r1, [r4]
 800fb6a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800fb6e:	4299      	cmp	r1, r3
 800fb70:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800fb74:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800fb78:	d10b      	bne.n	800fb92 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800fb7a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800fb7e:	4552      	cmp	r2, sl
 800fb80:	d107      	bne.n	800fb92 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800fb82:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800fb86:	455a      	cmp	r2, fp
 800fb88:	d103      	bne.n	800fb92 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800fb8a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800fb8e:	454a      	cmp	r2, r9
 800fb90:	d06d      	beq.n	800fc6e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800fb92:	f1bb 0f00 	cmp.w	fp, #0
 800fb96:	dd65      	ble.n	800fc64 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800fb98:	f1b9 0f00 	cmp.w	r9, #0
 800fb9c:	dd62      	ble.n	800fc64 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800fb9e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800fba2:	fa1f f08a 	uxth.w	r0, sl
 800fba6:	4552      	cmp	r2, sl
 800fba8:	9000      	str	r0, [sp, #0]
 800fbaa:	da12      	bge.n	800fbd2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 800fbac:	9301      	str	r3, [sp, #4]
 800fbae:	9b00      	ldr	r3, [sp, #0]
 800fbb0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800fbb4:	f8ad 2012 	strh.w	r2, [sp, #18]
 800fbb8:	1a9a      	subs	r2, r3, r2
 800fbba:	f8ad 1010 	strh.w	r1, [sp, #16]
 800fbbe:	4631      	mov	r1, r6
 800fbc0:	f8ad 0014 	strh.w	r0, [sp, #20]
 800fbc4:	4640      	mov	r0, r8
 800fbc6:	f8ad 2016 	strh.w	r2, [sp, #22]
 800fbca:	69ea      	ldr	r2, [r5, #28]
 800fbcc:	f7ff ff7a 	bl	800fac4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800fbd0:	9b01      	ldr	r3, [sp, #4]
 800fbd2:	f9b4 2000 	ldrsh.w	r2, [r4]
 800fbd6:	b29f      	uxth	r7, r3
 800fbd8:	429a      	cmp	r2, r3
 800fbda:	da0d      	bge.n	800fbf8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 800fbdc:	f8ad 2010 	strh.w	r2, [sp, #16]
 800fbe0:	1aba      	subs	r2, r7, r2
 800fbe2:	f8ad a012 	strh.w	sl, [sp, #18]
 800fbe6:	4631      	mov	r1, r6
 800fbe8:	f8ad 2014 	strh.w	r2, [sp, #20]
 800fbec:	4640      	mov	r0, r8
 800fbee:	f8ad 9016 	strh.w	r9, [sp, #22]
 800fbf2:	69ea      	ldr	r2, [r5, #28]
 800fbf4:	f7ff ff66 	bl	800fac4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800fbf8:	8822      	ldrh	r2, [r4, #0]
 800fbfa:	445f      	add	r7, fp
 800fbfc:	88a3      	ldrh	r3, [r4, #4]
 800fbfe:	b2bf      	uxth	r7, r7
 800fc00:	4413      	add	r3, r2
 800fc02:	b23a      	sxth	r2, r7
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	b219      	sxth	r1, r3
 800fc08:	4291      	cmp	r1, r2
 800fc0a:	dd0d      	ble.n	800fc28 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800fc0c:	1bdb      	subs	r3, r3, r7
 800fc0e:	f8ad 2010 	strh.w	r2, [sp, #16]
 800fc12:	f8ad a012 	strh.w	sl, [sp, #18]
 800fc16:	4631      	mov	r1, r6
 800fc18:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fc1c:	4640      	mov	r0, r8
 800fc1e:	f8ad 9016 	strh.w	r9, [sp, #22]
 800fc22:	69ea      	ldr	r2, [r5, #28]
 800fc24:	f7ff ff4e 	bl	800fac4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800fc28:	88e2      	ldrh	r2, [r4, #6]
 800fc2a:	8863      	ldrh	r3, [r4, #2]
 800fc2c:	4413      	add	r3, r2
 800fc2e:	9a00      	ldr	r2, [sp, #0]
 800fc30:	444a      	add	r2, r9
 800fc32:	b29b      	uxth	r3, r3
 800fc34:	fa1f f982 	uxth.w	r9, r2
 800fc38:	b219      	sxth	r1, r3
 800fc3a:	fa0f f289 	sxth.w	r2, r9
 800fc3e:	428a      	cmp	r2, r1
 800fc40:	da15      	bge.n	800fc6e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800fc42:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800fc46:	eba3 0309 	sub.w	r3, r3, r9
 800fc4a:	f9b4 0000 	ldrsh.w	r0, [r4]
 800fc4e:	f8ad 1014 	strh.w	r1, [sp, #20]
 800fc52:	4631      	mov	r1, r6
 800fc54:	f8ad 0010 	strh.w	r0, [sp, #16]
 800fc58:	f8ad 2012 	strh.w	r2, [sp, #18]
 800fc5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fc60:	69ea      	ldr	r2, [r5, #28]
 800fc62:	e001      	b.n	800fc68 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 800fc64:	69ea      	ldr	r2, [r5, #28]
 800fc66:	4621      	mov	r1, r4
 800fc68:	4640      	mov	r0, r8
 800fc6a:	f7ff ff2b 	bl	800fac4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800fc6e:	4628      	mov	r0, r5
 800fc70:	f7ff fe94 	bl	800f99c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800fc74:	6861      	ldr	r1, [r4, #4]
 800fc76:	4602      	mov	r2, r0
 800fc78:	4633      	mov	r3, r6
 800fc7a:	6820      	ldr	r0, [r4, #0]
 800fc7c:	c303      	stmia	r3!, {r0, r1}
 800fc7e:	4611      	mov	r1, r2
 800fc80:	4630      	mov	r0, r6
 800fc82:	f7fc faab 	bl	800c1dc <_ZN8touchgfx4RectaNERKS0_>
 800fc86:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	f77f af33 	ble.w	800faf6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800fc90:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	f77f af2e 	ble.w	800faf6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800fc9a:	4628      	mov	r0, r5
 800fc9c:	f7ff fe9a 	bl	800f9d4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800fca0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800fca4:	1a18      	subs	r0, r3, r0
 800fca6:	f8ad 0010 	strh.w	r0, [sp, #16]
 800fcaa:	4628      	mov	r0, r5
 800fcac:	f7ff fea6 	bl	800f9fc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800fcb0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800fcb4:	4631      	mov	r1, r6
 800fcb6:	1a18      	subs	r0, r3, r0
 800fcb8:	f8ad 0012 	strh.w	r0, [sp, #18]
 800fcbc:	4628      	mov	r0, r5
 800fcbe:	682b      	ldr	r3, [r5, #0]
 800fcc0:	689b      	ldr	r3, [r3, #8]
 800fcc2:	4798      	blx	r3
 800fcc4:	e717      	b.n	800faf6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0800fcc6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800fcc6:	b570      	push	{r4, r5, r6, lr}
 800fcc8:	1d06      	adds	r6, r0, #4
 800fcca:	b086      	sub	sp, #24
 800fccc:	460c      	mov	r4, r1
 800fcce:	2300      	movs	r3, #0
 800fcd0:	4631      	mov	r1, r6
 800fcd2:	4605      	mov	r5, r0
 800fcd4:	a802      	add	r0, sp, #8
 800fcd6:	9301      	str	r3, [sp, #4]
 800fcd8:	f7ff fc98 	bl	800f60c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fcdc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800fce0:	8822      	ldrh	r2, [r4, #0]
 800fce2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800fce6:	1ad2      	subs	r2, r2, r3
 800fce8:	8863      	ldrh	r3, [r4, #2]
 800fcea:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800fcee:	1a5b      	subs	r3, r3, r1
 800fcf0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800fcf4:	f8ad 2010 	strh.w	r2, [sp, #16]
 800fcf8:	aa01      	add	r2, sp, #4
 800fcfa:	f8ad 0014 	strh.w	r0, [sp, #20]
 800fcfe:	4630      	mov	r0, r6
 800fd00:	f8ad 1016 	strh.w	r1, [sp, #22]
 800fd04:	a904      	add	r1, sp, #16
 800fd06:	f8ad 3012 	strh.w	r3, [sp, #18]
 800fd0a:	f7fc fb3f 	bl	800c38c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800fd0e:	9a01      	ldr	r2, [sp, #4]
 800fd10:	b11a      	cbz	r2, 800fd1a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 800fd12:	4621      	mov	r1, r4
 800fd14:	4628      	mov	r0, r5
 800fd16:	f7ff fed5 	bl	800fac4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800fd1a:	b006      	add	sp, #24
 800fd1c:	bd70      	pop	{r4, r5, r6, pc}

0800fd1e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800fd1e:	4602      	mov	r2, r0
 800fd20:	b530      	push	{r4, r5, lr}
 800fd22:	4604      	mov	r4, r0
 800fd24:	b085      	sub	sp, #20
 800fd26:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800fd2a:	460d      	mov	r5, r1
 800fd2c:	466b      	mov	r3, sp
 800fd2e:	6851      	ldr	r1, [r2, #4]
 800fd30:	c303      	stmia	r3!, {r0, r1}
 800fd32:	4629      	mov	r1, r5
 800fd34:	4668      	mov	r0, sp
 800fd36:	f7fc fa51 	bl	800c1dc <_ZN8touchgfx4RectaNERKS0_>
 800fd3a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800fd3e:	b12b      	cbz	r3, 800fd4c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 800fd40:	4669      	mov	r1, sp
 800fd42:	4620      	mov	r0, r4
 800fd44:	f7ff ffbf 	bl	800fcc6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800fd48:	b005      	add	sp, #20
 800fd4a:	bd30      	pop	{r4, r5, pc}
 800fd4c:	3404      	adds	r4, #4
 800fd4e:	a802      	add	r0, sp, #8
 800fd50:	4621      	mov	r1, r4
 800fd52:	f7ff fc5b 	bl	800f60c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fd56:	f8bd 3000 	ldrh.w	r3, [sp]
 800fd5a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800fd5e:	4669      	mov	r1, sp
 800fd60:	4620      	mov	r0, r4
 800fd62:	1a9b      	subs	r3, r3, r2
 800fd64:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800fd68:	f8ad 3000 	strh.w	r3, [sp]
 800fd6c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800fd70:	1a9b      	subs	r3, r3, r2
 800fd72:	f8ad 3002 	strh.w	r3, [sp, #2]
 800fd76:	f7fc fad0 	bl	800c31a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800fd7a:	e7e5      	b.n	800fd48 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0800fd7c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800fd7c:	460b      	mov	r3, r1
 800fd7e:	680a      	ldr	r2, [r1, #0]
 800fd80:	1d01      	adds	r1, r0, #4
 800fd82:	6992      	ldr	r2, [r2, #24]
 800fd84:	4618      	mov	r0, r3
 800fd86:	4710      	bx	r2

0800fd88 <_ZN8touchgfx12TextProviderC1Ev>:
 800fd88:	b538      	push	{r3, r4, r5, lr}
 800fd8a:	2500      	movs	r5, #0
 800fd8c:	2302      	movs	r3, #2
 800fd8e:	4604      	mov	r4, r0
 800fd90:	220e      	movs	r2, #14
 800fd92:	7403      	strb	r3, [r0, #16]
 800fd94:	4629      	mov	r1, r5
 800fd96:	6145      	str	r5, [r0, #20]
 800fd98:	7605      	strb	r5, [r0, #24]
 800fd9a:	83c5      	strh	r5, [r0, #30]
 800fd9c:	8405      	strh	r5, [r0, #32]
 800fd9e:	86c5      	strh	r5, [r0, #54]	; 0x36
 800fda0:	8705      	strh	r5, [r0, #56]	; 0x38
 800fda2:	87c5      	strh	r5, [r0, #62]	; 0x3e
 800fda4:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 800fda8:	e9c0 5500 	strd	r5, r5, [r0]
 800fdac:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 800fdb0:	304c      	adds	r0, #76	; 0x4c
 800fdb2:	f00c fe57 	bl	801ca64 <memset>
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	4620      	mov	r0, r4
 800fdba:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 800fdbe:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800fdc2:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 800fdc6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 800fdca:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800fdce:	f7f4 fda3 	bl	8004918 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800fdd2:	4620      	mov	r0, r4
 800fdd4:	bd38      	pop	{r3, r4, r5, pc}

0800fdd6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800fdd6:	b530      	push	{r4, r5, lr}
 800fdd8:	2500      	movs	r5, #0
 800fdda:	2401      	movs	r4, #1
 800fddc:	6843      	ldr	r3, [r0, #4]
 800fdde:	b913      	cbnz	r3, 800fde6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800fde0:	6803      	ldr	r3, [r0, #0]
 800fde2:	b313      	cbz	r3, 800fe2a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800fde4:	6043      	str	r3, [r0, #4]
 800fde6:	7e03      	ldrb	r3, [r0, #24]
 800fde8:	b143      	cbz	r3, 800fdfc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800fdea:	6943      	ldr	r3, [r0, #20]
 800fdec:	b12b      	cbz	r3, 800fdfa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800fdee:	881a      	ldrh	r2, [r3, #0]
 800fdf0:	b11a      	cbz	r2, 800fdfa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800fdf2:	1c9a      	adds	r2, r3, #2
 800fdf4:	6142      	str	r2, [r0, #20]
 800fdf6:	8818      	ldrh	r0, [r3, #0]
 800fdf8:	bd30      	pop	{r4, r5, pc}
 800fdfa:	7605      	strb	r5, [r0, #24]
 800fdfc:	6843      	ldr	r3, [r0, #4]
 800fdfe:	8819      	ldrh	r1, [r3, #0]
 800fe00:	b199      	cbz	r1, 800fe2a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800fe02:	1c9a      	adds	r2, r3, #2
 800fe04:	2902      	cmp	r1, #2
 800fe06:	6042      	str	r2, [r0, #4]
 800fe08:	d1f5      	bne.n	800fdf6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800fe0a:	7c03      	ldrb	r3, [r0, #16]
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d8e5      	bhi.n	800fddc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800fe10:	1c5a      	adds	r2, r3, #1
 800fe12:	3302      	adds	r3, #2
 800fe14:	7402      	strb	r2, [r0, #16]
 800fe16:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800fe1a:	6143      	str	r3, [r0, #20]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d0dd      	beq.n	800fddc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800fe20:	881b      	ldrh	r3, [r3, #0]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d0da      	beq.n	800fddc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800fe26:	7604      	strb	r4, [r0, #24]
 800fe28:	e7d8      	b.n	800fddc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800fe2a:	2000      	movs	r0, #0
 800fe2c:	e7e4      	b.n	800fdf8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800fe2e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800fe2e:	6001      	str	r1, [r0, #0]
 800fe30:	2100      	movs	r1, #0
 800fe32:	b430      	push	{r4, r5}
 800fe34:	6041      	str	r1, [r0, #4]
 800fe36:	6815      	ldr	r5, [r2, #0]
 800fe38:	6085      	str	r5, [r0, #8]
 800fe3a:	6852      	ldr	r2, [r2, #4]
 800fe3c:	6443      	str	r3, [r0, #68]	; 0x44
 800fe3e:	9b02      	ldr	r3, [sp, #8]
 800fe40:	60c2      	str	r2, [r0, #12]
 800fe42:	7401      	strb	r1, [r0, #16]
 800fe44:	6141      	str	r1, [r0, #20]
 800fe46:	7601      	strb	r1, [r0, #24]
 800fe48:	8701      	strh	r1, [r0, #56]	; 0x38
 800fe4a:	8401      	strh	r1, [r0, #32]
 800fe4c:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800fe50:	6483      	str	r3, [r0, #72]	; 0x48
 800fe52:	bc30      	pop	{r4, r5}
 800fe54:	f7f4 bd60 	b.w	8004918 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800fe58 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800fe58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe5a:	4605      	mov	r5, r0
 800fe5c:	4608      	mov	r0, r1
 800fe5e:	b1f1      	cbz	r1, 800fe9e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 800fe60:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 800fe64:	460b      	mov	r3, r1
 800fe66:	f101 0708 	add.w	r7, r1, #8
 800fe6a:	4622      	mov	r2, r4
 800fe6c:	6818      	ldr	r0, [r3, #0]
 800fe6e:	3308      	adds	r3, #8
 800fe70:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800fe74:	4626      	mov	r6, r4
 800fe76:	42bb      	cmp	r3, r7
 800fe78:	c603      	stmia	r6!, {r0, r1}
 800fe7a:	4634      	mov	r4, r6
 800fe7c:	d1f6      	bne.n	800fe6c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800fe7e:	6818      	ldr	r0, [r3, #0]
 800fe80:	6030      	str	r0, [r6, #0]
 800fe82:	4610      	mov	r0, r2
 800fe84:	889b      	ldrh	r3, [r3, #4]
 800fe86:	80b3      	strh	r3, [r6, #4]
 800fe88:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 800fe8c:	015b      	lsls	r3, r3, #5
 800fe8e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800fe92:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 800fe96:	430b      	orrs	r3, r1
 800fe98:	425b      	negs	r3, r3
 800fe9a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 800fe9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fea0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800fea0:	b538      	push	{r3, r4, r5, lr}
 800fea2:	460c      	mov	r4, r1
 800fea4:	6811      	ldr	r1, [r2, #0]
 800fea6:	4610      	mov	r0, r2
 800fea8:	68cd      	ldr	r5, [r1, #12]
 800feaa:	4619      	mov	r1, r3
 800feac:	47a8      	blx	r5
 800feae:	2800      	cmp	r0, #0
 800feb0:	bf08      	it	eq
 800feb2:	4620      	moveq	r0, r4
 800feb4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800feb8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800feb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feba:	4604      	mov	r4, r0
 800febc:	4615      	mov	r5, r2
 800febe:	4608      	mov	r0, r1
 800fec0:	b93a      	cbnz	r2, 800fed2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 800fec2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800fec6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800feca:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 800fece:	4628      	mov	r0, r5
 800fed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fed2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800fed6:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 800feda:	8893      	ldrh	r3, [r2, #4]
 800fedc:	ea4f 160c 	mov.w	r6, ip, lsl #4
 800fee0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800fee4:	79ee      	ldrb	r6, [r5, #7]
 800fee6:	4316      	orrs	r6, r2
 800fee8:	19da      	adds	r2, r3, r7
 800feea:	b291      	uxth	r1, r2
 800feec:	b2b7      	uxth	r7, r6
 800feee:	291d      	cmp	r1, #29
 800fef0:	d87b      	bhi.n	800ffea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 800fef2:	2201      	movs	r2, #1
 800fef4:	10f6      	asrs	r6, r6, #3
 800fef6:	408a      	lsls	r2, r1
 800fef8:	4974      	ldr	r1, [pc, #464]	; (80100cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 800fefa:	420a      	tst	r2, r1
 800fefc:	d12e      	bne.n	800ff5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800fefe:	f412 7f60 	tst.w	r2, #896	; 0x380
 800ff02:	d072      	beq.n	800ffea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 800ff04:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800ff08:	462b      	mov	r3, r5
 800ff0a:	f105 0e08 	add.w	lr, r5, #8
 800ff0e:	4615      	mov	r5, r2
 800ff10:	6818      	ldr	r0, [r3, #0]
 800ff12:	3308      	adds	r3, #8
 800ff14:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800ff18:	4694      	mov	ip, r2
 800ff1a:	4573      	cmp	r3, lr
 800ff1c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800ff20:	4662      	mov	r2, ip
 800ff22:	d1f5      	bne.n	800ff10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 800ff24:	6818      	ldr	r0, [r3, #0]
 800ff26:	f8cc 0000 	str.w	r0, [ip]
 800ff2a:	889b      	ldrh	r3, [r3, #4]
 800ff2c:	f8ac 3004 	strh.w	r3, [ip, #4]
 800ff30:	b2b3      	uxth	r3, r6
 800ff32:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800ff36:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 800ff3a:	1aca      	subs	r2, r1, r3
 800ff3c:	1bcf      	subs	r7, r1, r7
 800ff3e:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 800ff42:	b292      	uxth	r2, r2
 800ff44:	1afb      	subs	r3, r7, r3
 800ff46:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 800ff4a:	10d2      	asrs	r2, r2, #3
 800ff4c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800ff50:	4302      	orrs	r2, r0
 800ff52:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 800ff56:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800ff5a:	e7b8      	b.n	800fece <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800ff5c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800ff5e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800ff62:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800ff64:	f640 6333 	movw	r3, #3635	; 0xe33
 800ff68:	4299      	cmp	r1, r3
 800ff6a:	d110      	bne.n	800ff8e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 800ff6c:	6803      	ldr	r3, [r0, #0]
 800ff6e:	68db      	ldr	r3, [r3, #12]
 800ff70:	4798      	blx	r3
 800ff72:	7b41      	ldrb	r1, [r0, #13]
 800ff74:	00cb      	lsls	r3, r1, #3
 800ff76:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800ff7a:	7a03      	ldrb	r3, [r0, #8]
 800ff7c:	0648      	lsls	r0, r1, #25
 800ff7e:	ea43 0302 	orr.w	r3, r3, r2
 800ff82:	bf44      	itt	mi
 800ff84:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800ff88:	b21b      	sxthmi	r3, r3
 800ff8a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800ff8e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800ff92:	462a      	mov	r2, r5
 800ff94:	f105 0c08 	add.w	ip, r5, #8
 800ff98:	443b      	add	r3, r7
 800ff9a:	4433      	add	r3, r6
 800ff9c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 800ffa0:	b29b      	uxth	r3, r3
 800ffa2:	4635      	mov	r5, r6
 800ffa4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800ffa8:	6810      	ldr	r0, [r2, #0]
 800ffaa:	3208      	adds	r2, #8
 800ffac:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800ffb0:	4637      	mov	r7, r6
 800ffb2:	4562      	cmp	r2, ip
 800ffb4:	c703      	stmia	r7!, {r0, r1}
 800ffb6:	463e      	mov	r6, r7
 800ffb8:	d1f6      	bne.n	800ffa8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 800ffba:	6810      	ldr	r0, [r2, #0]
 800ffbc:	6038      	str	r0, [r7, #0]
 800ffbe:	8892      	ldrh	r2, [r2, #4]
 800ffc0:	80ba      	strh	r2, [r7, #4]
 800ffc2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800ffc6:	10db      	asrs	r3, r3, #3
 800ffc8:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800ffcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ffd0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800ffd4:	4313      	orrs	r3, r2
 800ffd6:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 800ffda:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800ffde:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 800ffe2:	1a9b      	subs	r3, r3, r2
 800ffe4:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 800ffe8:	e771      	b.n	800fece <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800ffea:	f023 0204 	bic.w	r2, r3, #4
 800ffee:	f640 611b 	movw	r1, #3611	; 0xe1b
 800fff2:	428a      	cmp	r2, r1
 800fff4:	d003      	beq.n	800fffe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 800fff6:	f640 621d 	movw	r2, #3613	; 0xe1d
 800fffa:	4293      	cmp	r3, r2
 800fffc:	d120      	bne.n	8010040 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 800fffe:	3b01      	subs	r3, #1
 8010000:	4602      	mov	r2, r0
 8010002:	4629      	mov	r1, r5
 8010004:	4620      	mov	r0, r4
 8010006:	b29b      	uxth	r3, r3
 8010008:	f7ff ff4a 	bl	800fea0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801000c:	7b41      	ldrb	r1, [r0, #13]
 801000e:	00cb      	lsls	r3, r1, #3
 8010010:	0649      	lsls	r1, r1, #25
 8010012:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8010016:	7a03      	ldrb	r3, [r0, #8]
 8010018:	ea43 0302 	orr.w	r3, r3, r2
 801001c:	bf44      	itt	mi
 801001e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8010022:	b21b      	sxthmi	r3, r3
 8010024:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8010028:	7b6b      	ldrb	r3, [r5, #13]
 801002a:	7aaa      	ldrb	r2, [r5, #10]
 801002c:	005b      	lsls	r3, r3, #1
 801002e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010032:	4313      	orrs	r3, r2
 8010034:	115a      	asrs	r2, r3, #5
 8010036:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801003a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801003e:	e035      	b.n	80100ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8010040:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8010044:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8010048:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801004c:	7a2a      	ldrb	r2, [r5, #8]
 801004e:	ea42 0201 	orr.w	r2, r2, r1
 8010052:	f640 6109 	movw	r1, #3593	; 0xe09
 8010056:	bf1c      	itt	ne
 8010058:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801005c:	b212      	sxthne	r2, r2
 801005e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8010062:	f023 0210 	bic.w	r2, r3, #16
 8010066:	428a      	cmp	r2, r1
 8010068:	d003      	beq.n	8010072 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801006a:	f640 6213 	movw	r2, #3603	; 0xe13
 801006e:	4293      	cmp	r3, r2
 8010070:	d129      	bne.n	80100c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8010072:	7b6e      	ldrb	r6, [r5, #13]
 8010074:	4629      	mov	r1, r5
 8010076:	0076      	lsls	r6, r6, #1
 8010078:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801007c:	7aae      	ldrb	r6, [r5, #10]
 801007e:	4316      	orrs	r6, r2
 8010080:	f640 6213 	movw	r2, #3603	; 0xe13
 8010084:	4293      	cmp	r3, r2
 8010086:	4602      	mov	r2, r0
 8010088:	4620      	mov	r0, r4
 801008a:	bf16      	itet	ne
 801008c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8010090:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8010094:	b29b      	uxthne	r3, r3
 8010096:	f7ff ff03 	bl	800fea0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801009a:	7b43      	ldrb	r3, [r0, #13]
 801009c:	7a82      	ldrb	r2, [r0, #10]
 801009e:	005b      	lsls	r3, r3, #1
 80100a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80100a4:	4313      	orrs	r3, r2
 80100a6:	1af6      	subs	r6, r6, r3
 80100a8:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 80100ac:	7b69      	ldrb	r1, [r5, #13]
 80100ae:	00cb      	lsls	r3, r1, #3
 80100b0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80100b4:	7a2b      	ldrb	r3, [r5, #8]
 80100b6:	4313      	orrs	r3, r2
 80100b8:	064a      	lsls	r2, r1, #25
 80100ba:	bf44      	itt	mi
 80100bc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80100c0:	b21b      	sxthmi	r3, r3
 80100c2:	1bdb      	subs	r3, r3, r7
 80100c4:	e747      	b.n	800ff56 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 80100c6:	2300      	movs	r3, #0
 80100c8:	e7b7      	b.n	801003a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 80100ca:	bf00      	nop
 80100cc:	3fc00079 	.word	0x3fc00079

080100d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80100d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100d4:	4604      	mov	r4, r0
 80100d6:	b942      	cbnz	r2, 80100ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80100d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80100dc:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80100e0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80100e4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80100e8:	e047      	b.n	801017a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80100ea:	7b51      	ldrb	r1, [r2, #13]
 80100ec:	8893      	ldrh	r3, [r2, #4]
 80100ee:	010d      	lsls	r5, r1, #4
 80100f0:	f405 7080 	and.w	r0, r5, #256	; 0x100
 80100f4:	79d5      	ldrb	r5, [r2, #7]
 80100f6:	4305      	orrs	r5, r0
 80100f8:	2d04      	cmp	r5, #4
 80100fa:	bfcc      	ite	gt
 80100fc:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8010100:	f04f 0e01 	movle.w	lr, #1
 8010104:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8010108:	f200 80ab 	bhi.w	8010262 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801010c:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8010110:	4283      	cmp	r3, r0
 8010112:	d216      	bcs.n	8010142 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8010114:	f240 605b 	movw	r0, #1627	; 0x65b
 8010118:	4283      	cmp	r3, r0
 801011a:	d859      	bhi.n	80101d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801011c:	f240 6057 	movw	r0, #1623	; 0x657
 8010120:	4283      	cmp	r3, r0
 8010122:	d20e      	bcs.n	8010142 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8010124:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8010128:	d24a      	bcs.n	80101c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801012a:	f240 604e 	movw	r0, #1614	; 0x64e
 801012e:	4283      	cmp	r3, r0
 8010130:	d207      	bcs.n	8010142 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8010132:	f240 601a 	movw	r0, #1562	; 0x61a
 8010136:	4283      	cmp	r3, r0
 8010138:	d02a      	beq.n	8010190 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801013a:	d821      	bhi.n	8010180 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801013c:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8010140:	d35b      	bcc.n	80101fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8010142:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8010146:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801014a:	f040 80d0 	bne.w	80102ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801014e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8010152:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8010156:	f040 80ca 	bne.w	80102ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801015a:	00cb      	lsls	r3, r1, #3
 801015c:	0649      	lsls	r1, r1, #25
 801015e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8010162:	7a13      	ldrb	r3, [r2, #8]
 8010164:	ea43 0300 	orr.w	r3, r3, r0
 8010168:	bf44      	itt	mi
 801016a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801016e:	b21b      	sxthmi	r3, r3
 8010170:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8010174:	1b5d      	subs	r5, r3, r5
 8010176:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801017a:	4610      	mov	r0, r2
 801017c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010180:	f240 604b 	movw	r0, #1611	; 0x64b
 8010184:	4283      	cmp	r3, r0
 8010186:	d338      	bcc.n	80101fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8010188:	f240 604c 	movw	r0, #1612	; 0x64c
 801018c:	4283      	cmp	r3, r0
 801018e:	d9d8      	bls.n	8010142 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8010190:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8010194:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8010198:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801019c:	f040 80f3 	bne.w	8010386 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80101a0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80101a4:	f040 80ef 	bne.w	8010386 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80101a8:	00cb      	lsls	r3, r1, #3
 80101aa:	064e      	lsls	r6, r1, #25
 80101ac:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80101b0:	7a13      	ldrb	r3, [r2, #8]
 80101b2:	ea43 0300 	orr.w	r3, r3, r0
 80101b6:	bf44      	itt	mi
 80101b8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80101bc:	b21b      	sxthmi	r3, r3
 80101be:	e7d9      	b.n	8010174 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 80101c0:	f240 6054 	movw	r0, #1620	; 0x654
 80101c4:	4283      	cmp	r3, r0
 80101c6:	d8e3      	bhi.n	8010190 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80101c8:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80101cc:	d9e0      	bls.n	8010190 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80101ce:	e7b8      	b.n	8010142 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80101d0:	f240 6074 	movw	r0, #1652	; 0x674
 80101d4:	4283      	cmp	r3, r0
 80101d6:	d0b4      	beq.n	8010142 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80101d8:	d82d      	bhi.n	8010236 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 80101da:	f240 605e 	movw	r0, #1630	; 0x65e
 80101de:	4283      	cmp	r3, r0
 80101e0:	d804      	bhi.n	80101ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80101e2:	f240 605d 	movw	r0, #1629	; 0x65d
 80101e6:	4283      	cmp	r3, r0
 80101e8:	d3d2      	bcc.n	8010190 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80101ea:	e7aa      	b.n	8010142 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80101ec:	f240 605f 	movw	r0, #1631	; 0x65f
 80101f0:	4283      	cmp	r3, r0
 80101f2:	d0cd      	beq.n	8010190 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80101f4:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80101f8:	d0a3      	beq.n	8010142 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80101fa:	00cb      	lsls	r3, r1, #3
 80101fc:	0649      	lsls	r1, r1, #25
 80101fe:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8010202:	7a13      	ldrb	r3, [r2, #8]
 8010204:	ea43 0300 	orr.w	r3, r3, r0
 8010208:	bf44      	itt	mi
 801020a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801020e:	b21b      	sxthmi	r3, r3
 8010210:	1b5d      	subs	r5, r3, r5
 8010212:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8010216:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801021a:	7b53      	ldrb	r3, [r2, #13]
 801021c:	015b      	lsls	r3, r3, #5
 801021e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8010222:	7993      	ldrb	r3, [r2, #6]
 8010224:	430b      	orrs	r3, r1
 8010226:	2105      	movs	r1, #5
 8010228:	005b      	lsls	r3, r3, #1
 801022a:	fb93 f3f1 	sdiv	r3, r3, r1
 801022e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8010232:	440b      	add	r3, r1
 8010234:	e756      	b.n	80100e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8010236:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801023a:	4283      	cmp	r3, r0
 801023c:	d809      	bhi.n	8010252 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801023e:	f240 60df 	movw	r0, #1759	; 0x6df
 8010242:	4283      	cmp	r3, r0
 8010244:	f4bf af7d 	bcs.w	8010142 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8010248:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801024c:	2b05      	cmp	r3, #5
 801024e:	d8d4      	bhi.n	80101fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8010250:	e777      	b.n	8010142 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8010252:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8010256:	4283      	cmp	r3, r0
 8010258:	d09a      	beq.n	8010190 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801025a:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801025e:	4283      	cmp	r3, r0
 8010260:	e7ca      	b.n	80101f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8010262:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8010266:	d22b      	bcs.n	80102c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8010268:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801026c:	4283      	cmp	r3, r0
 801026e:	d28f      	bcs.n	8010190 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8010270:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8010274:	4283      	cmp	r3, r0
 8010276:	d816      	bhi.n	80102a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8010278:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801027c:	4283      	cmp	r3, r0
 801027e:	f4bf af60 	bcs.w	8010142 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8010282:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8010286:	4283      	cmp	r3, r0
 8010288:	d80a      	bhi.n	80102a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801028a:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801028e:	4283      	cmp	r3, r0
 8010290:	f4bf af57 	bcs.w	8010142 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8010294:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8010298:	4283      	cmp	r3, r0
 801029a:	f43f af79 	beq.w	8010190 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801029e:	e7ac      	b.n	80101fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80102a0:	f240 60ed 	movw	r0, #1773	; 0x6ed
 80102a4:	e7f8      	b.n	8010298 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 80102a6:	f640 00e8 	movw	r0, #2280	; 0x8e8
 80102aa:	4283      	cmp	r3, r0
 80102ac:	d802      	bhi.n	80102b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 80102ae:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80102b2:	e798      	b.n	80101e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 80102b4:	f640 00e9 	movw	r0, #2281	; 0x8e9
 80102b8:	4283      	cmp	r3, r0
 80102ba:	f47f af42 	bne.w	8010142 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80102be:	e767      	b.n	8010190 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80102c0:	f640 00f6 	movw	r0, #2294	; 0x8f6
 80102c4:	4283      	cmp	r3, r0
 80102c6:	f43f af63 	beq.w	8010190 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80102ca:	d802      	bhi.n	80102d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 80102cc:	f640 00f2 	movw	r0, #2290	; 0x8f2
 80102d0:	e7f2      	b.n	80102b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80102d2:	f640 00fa 	movw	r0, #2298	; 0x8fa
 80102d6:	4283      	cmp	r3, r0
 80102d8:	d805      	bhi.n	80102e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 80102da:	f640 00f9 	movw	r0, #2297	; 0x8f9
 80102de:	4283      	cmp	r3, r0
 80102e0:	f4ff af2f 	bcc.w	8010142 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80102e4:	e754      	b.n	8010190 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80102e6:	f640 00fe 	movw	r0, #2302	; 0x8fe
 80102ea:	4283      	cmp	r3, r0
 80102ec:	e7af      	b.n	801024e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80102ee:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80102f2:	4617      	mov	r7, r2
 80102f4:	f102 0808 	add.w	r8, r2, #8
 80102f8:	4666      	mov	r6, ip
 80102fa:	6838      	ldr	r0, [r7, #0]
 80102fc:	3708      	adds	r7, #8
 80102fe:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8010302:	46e6      	mov	lr, ip
 8010304:	4547      	cmp	r7, r8
 8010306:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801030a:	46f4      	mov	ip, lr
 801030c:	d1f5      	bne.n	80102fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801030e:	6838      	ldr	r0, [r7, #0]
 8010310:	f8ce 0000 	str.w	r0, [lr]
 8010314:	88b9      	ldrh	r1, [r7, #4]
 8010316:	f8ae 1004 	strh.w	r1, [lr, #4]
 801031a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801031e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8010322:	d009      	beq.n	8010338 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8010324:	7b51      	ldrb	r1, [r2, #13]
 8010326:	7992      	ldrb	r2, [r2, #6]
 8010328:	0149      	lsls	r1, r1, #5
 801032a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801032e:	4311      	orrs	r1, r2
 8010330:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8010334:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8010338:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801033c:	b2ad      	uxth	r5, r5
 801033e:	d00d      	beq.n	801035c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8010340:	442b      	add	r3, r5
 8010342:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8010346:	b29b      	uxth	r3, r3
 8010348:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801034c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8010350:	10db      	asrs	r3, r3, #3
 8010352:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010356:	4313      	orrs	r3, r2
 8010358:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801035c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8010360:	00cb      	lsls	r3, r1, #3
 8010362:	064f      	lsls	r7, r1, #25
 8010364:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8010368:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801036c:	ea43 0302 	orr.w	r3, r3, r2
 8010370:	bf44      	itt	mi
 8010372:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8010376:	b21b      	sxthmi	r3, r3
 8010378:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801037c:	1b5b      	subs	r3, r3, r5
 801037e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8010382:	4632      	mov	r2, r6
 8010384:	e6f9      	b.n	801017a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8010386:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801038a:	4617      	mov	r7, r2
 801038c:	f102 0908 	add.w	r9, r2, #8
 8010390:	4666      	mov	r6, ip
 8010392:	6838      	ldr	r0, [r7, #0]
 8010394:	3708      	adds	r7, #8
 8010396:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801039a:	46e0      	mov	r8, ip
 801039c:	454f      	cmp	r7, r9
 801039e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 80103a2:	46c4      	mov	ip, r8
 80103a4:	d1f5      	bne.n	8010392 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 80103a6:	6838      	ldr	r0, [r7, #0]
 80103a8:	f8c8 0000 	str.w	r0, [r8]
 80103ac:	88b9      	ldrh	r1, [r7, #4]
 80103ae:	f8a8 1004 	strh.w	r1, [r8, #4]
 80103b2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80103b6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80103ba:	d009      	beq.n	80103d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 80103bc:	7b51      	ldrb	r1, [r2, #13]
 80103be:	7992      	ldrb	r2, [r2, #6]
 80103c0:	0149      	lsls	r1, r1, #5
 80103c2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80103c6:	4311      	orrs	r1, r2
 80103c8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80103cc:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80103d0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80103d4:	d00e      	beq.n	80103f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 80103d6:	eba3 030e 	sub.w	r3, r3, lr
 80103da:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80103de:	b29b      	uxth	r3, r3
 80103e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80103e4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80103e8:	10db      	asrs	r3, r3, #3
 80103ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80103ee:	4313      	orrs	r3, r2
 80103f0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80103f4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80103f8:	00cb      	lsls	r3, r1, #3
 80103fa:	0648      	lsls	r0, r1, #25
 80103fc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8010400:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8010404:	ea43 0302 	orr.w	r3, r3, r2
 8010408:	bf44      	itt	mi
 801040a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801040e:	b21b      	sxthmi	r3, r3
 8010410:	1b5d      	subs	r5, r3, r5
 8010412:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8010416:	e7b4      	b.n	8010382 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08010418 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8010418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801041c:	461e      	mov	r6, r3
 801041e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8010420:	4604      	mov	r4, r0
 8010422:	4617      	mov	r7, r2
 8010424:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8010428:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801042c:	f7f4 fa32 	bl	8004894 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8010430:	4605      	mov	r5, r0
 8010432:	b918      	cbnz	r0, 801043c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8010434:	6030      	str	r0, [r6, #0]
 8010436:	4628      	mov	r0, r5
 8010438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	4601      	mov	r1, r0
 8010440:	4638      	mov	r0, r7
 8010442:	68db      	ldr	r3, [r3, #12]
 8010444:	4798      	blx	r3
 8010446:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801044a:	4602      	mov	r2, r0
 801044c:	6030      	str	r0, [r6, #0]
 801044e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010452:	d213      	bcs.n	801047c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8010454:	4643      	mov	r3, r8
 8010456:	4639      	mov	r1, r7
 8010458:	4620      	mov	r0, r4
 801045a:	f7ff fe39 	bl	80100d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801045e:	6030      	str	r0, [r6, #0]
 8010460:	6833      	ldr	r3, [r6, #0]
 8010462:	b143      	cbz	r3, 8010476 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8010464:	7b5a      	ldrb	r2, [r3, #13]
 8010466:	7a9b      	ldrb	r3, [r3, #10]
 8010468:	0052      	lsls	r2, r2, #1
 801046a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801046e:	4313      	orrs	r3, r2
 8010470:	bf0c      	ite	eq
 8010472:	2301      	moveq	r3, #1
 8010474:	2300      	movne	r3, #0
 8010476:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801047a:	e7dc      	b.n	8010436 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801047c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8010480:	b29b      	uxth	r3, r3
 8010482:	2b7f      	cmp	r3, #127	; 0x7f
 8010484:	d804      	bhi.n	8010490 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8010486:	4639      	mov	r1, r7
 8010488:	4620      	mov	r0, r4
 801048a:	f7ff fd15 	bl	800feb8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801048e:	e7e6      	b.n	801045e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8010490:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8010494:	2b00      	cmp	r3, #0
 8010496:	d0e3      	beq.n	8010460 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8010498:	f640 1302 	movw	r3, #2306	; 0x902
 801049c:	429d      	cmp	r5, r3
 801049e:	d1df      	bne.n	8010460 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80104a0:	4601      	mov	r1, r0
 80104a2:	4620      	mov	r0, r4
 80104a4:	f7ff fcd8 	bl	800fe58 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80104a8:	e7d9      	b.n	801045e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

080104aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80104aa:	b510      	push	{r4, lr}
 80104ac:	4604      	mov	r4, r0
 80104ae:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80104b2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80104b4:	b1e1      	cbz	r1, 80104f0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80104b6:	2b0a      	cmp	r3, #10
 80104b8:	d02d      	beq.n	8010516 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80104ba:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80104bc:	3901      	subs	r1, #1
 80104be:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80104c2:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 80104c4:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 80104c8:	1c51      	adds	r1, r2, #1
 80104ca:	b289      	uxth	r1, r1
 80104cc:	2901      	cmp	r1, #1
 80104ce:	bf8a      	itet	hi
 80104d0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80104d4:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 80104d6:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 80104d8:	1c5a      	adds	r2, r3, #1
 80104da:	8722      	strh	r2, [r4, #56]	; 0x38
 80104dc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80104de:	4413      	add	r3, r2
 80104e0:	b29b      	uxth	r3, r3
 80104e2:	2b09      	cmp	r3, #9
 80104e4:	bf88      	it	hi
 80104e6:	3b0a      	subhi	r3, #10
 80104e8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80104ec:	8458      	strh	r0, [r3, #34]	; 0x22
 80104ee:	e7de      	b.n	80104ae <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80104f0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80104f2:	2b0a      	cmp	r3, #10
 80104f4:	d00f      	beq.n	8010516 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80104f6:	4620      	mov	r0, r4
 80104f8:	f7ff fc6d 	bl	800fdd6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80104fc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80104fe:	1c5a      	adds	r2, r3, #1
 8010500:	8722      	strh	r2, [r4, #56]	; 0x38
 8010502:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8010504:	4413      	add	r3, r2
 8010506:	b29b      	uxth	r3, r3
 8010508:	2b09      	cmp	r3, #9
 801050a:	bf88      	it	hi
 801050c:	3b0a      	subhi	r3, #10
 801050e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8010512:	8458      	strh	r0, [r3, #34]	; 0x22
 8010514:	e7ec      	b.n	80104f0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8010516:	bd10      	pop	{r4, pc}

08010518 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8010518:	b538      	push	{r3, r4, r5, lr}
 801051a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801051c:	4604      	mov	r4, r0
 801051e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8010522:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8010524:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8010526:	3a01      	subs	r2, #1
 8010528:	8702      	strh	r2, [r0, #56]	; 0x38
 801052a:	1c5a      	adds	r2, r3, #1
 801052c:	b292      	uxth	r2, r2
 801052e:	2a09      	cmp	r2, #9
 8010530:	bf8a      	itet	hi
 8010532:	3b09      	subhi	r3, #9
 8010534:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8010536:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8010538:	f7ff ffb7 	bl	80104aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801053c:	8c23      	ldrh	r3, [r4, #32]
 801053e:	2b01      	cmp	r3, #1
 8010540:	bf9c      	itt	ls
 8010542:	3301      	addls	r3, #1
 8010544:	8423      	strhls	r3, [r4, #32]
 8010546:	8be3      	ldrh	r3, [r4, #30]
 8010548:	b90b      	cbnz	r3, 801054e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801054a:	2302      	movs	r3, #2
 801054c:	83e3      	strh	r3, [r4, #30]
 801054e:	8be3      	ldrh	r3, [r4, #30]
 8010550:	4628      	mov	r0, r5
 8010552:	3b01      	subs	r3, #1
 8010554:	b29b      	uxth	r3, r3
 8010556:	83e3      	strh	r3, [r4, #30]
 8010558:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801055c:	8365      	strh	r5, [r4, #26]
 801055e:	bd38      	pop	{r3, r4, r5, pc}

08010560 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8010560:	428a      	cmp	r2, r1
 8010562:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010566:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8010568:	d932      	bls.n	80105d0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801056a:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801056c:	1a54      	subs	r4, r2, r1
 801056e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8010572:	19ee      	adds	r6, r5, r7
 8010574:	fa1f fe84 	uxth.w	lr, r4
 8010578:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801057c:	3e01      	subs	r6, #1
 801057e:	b2b4      	uxth	r4, r6
 8010580:	eba4 090e 	sub.w	r9, r4, lr
 8010584:	fa1f f989 	uxth.w	r9, r9
 8010588:	2c09      	cmp	r4, #9
 801058a:	4626      	mov	r6, r4
 801058c:	bf88      	it	hi
 801058e:	f1a4 060a 	subhi.w	r6, r4, #10
 8010592:	f1bc 0f00 	cmp.w	ip, #0
 8010596:	f104 34ff 	add.w	r4, r4, #4294967295
 801059a:	bf08      	it	eq
 801059c:	f04f 0c02 	moveq.w	ip, #2
 80105a0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80105a4:	b2a4      	uxth	r4, r4
 80105a6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80105aa:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 80105ae:	454c      	cmp	r4, r9
 80105b0:	fa1f fc8c 	uxth.w	ip, ip
 80105b4:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 80105b8:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 80105bc:	d1e4      	bne.n	8010588 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 80105be:	eba5 050e 	sub.w	r5, r5, lr
 80105c2:	eb0e 0408 	add.w	r4, lr, r8
 80105c6:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 80105ca:	8705      	strh	r5, [r0, #56]	; 0x38
 80105cc:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 80105d0:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 80105d2:	250a      	movs	r5, #10
 80105d4:	1a64      	subs	r4, r4, r1
 80105d6:	4439      	add	r1, r7
 80105d8:	b289      	uxth	r1, r1
 80105da:	8704      	strh	r4, [r0, #56]	; 0x38
 80105dc:	2909      	cmp	r1, #9
 80105de:	bf88      	it	hi
 80105e0:	390a      	subhi	r1, #10
 80105e2:	86c1      	strh	r1, [r0, #54]	; 0x36
 80105e4:	b18a      	cbz	r2, 801060a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 80105e6:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 80105e8:	3a01      	subs	r2, #1
 80105ea:	3101      	adds	r1, #1
 80105ec:	b292      	uxth	r2, r2
 80105ee:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80105f2:	8701      	strh	r1, [r0, #56]	; 0x38
 80105f4:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80105f6:	b901      	cbnz	r1, 80105fa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 80105f8:	86c5      	strh	r5, [r0, #54]	; 0x36
 80105fa:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80105fc:	3901      	subs	r1, #1
 80105fe:	b289      	uxth	r1, r1
 8010600:	86c1      	strh	r1, [r0, #54]	; 0x36
 8010602:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8010606:	844c      	strh	r4, [r1, #34]	; 0x22
 8010608:	e7ec      	b.n	80105e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801060a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801060e:	f7ff bf4c 	b.w	80104aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08010612 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8010612:	b570      	push	{r4, r5, r6, lr}
 8010614:	2500      	movs	r5, #0
 8010616:	4295      	cmp	r5, r2
 8010618:	d011      	beq.n	801063e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801061a:	8bc4      	ldrh	r4, [r0, #30]
 801061c:	f831 6b02 	ldrh.w	r6, [r1], #2
 8010620:	4414      	add	r4, r2
 8010622:	3c01      	subs	r4, #1
 8010624:	1b64      	subs	r4, r4, r5
 8010626:	b2a4      	uxth	r4, r4
 8010628:	2c01      	cmp	r4, #1
 801062a:	bf88      	it	hi
 801062c:	3c02      	subhi	r4, #2
 801062e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8010632:	8b64      	ldrh	r4, [r4, #26]
 8010634:	42b4      	cmp	r4, r6
 8010636:	d117      	bne.n	8010668 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8010638:	3501      	adds	r5, #1
 801063a:	b2ad      	uxth	r5, r5
 801063c:	e7eb      	b.n	8010616 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801063e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8010642:	2400      	movs	r4, #0
 8010644:	4413      	add	r3, r2
 8010646:	b2a2      	uxth	r2, r4
 8010648:	429a      	cmp	r2, r3
 801064a:	da0f      	bge.n	801066c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801064c:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801064e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8010652:	3401      	adds	r4, #1
 8010654:	4432      	add	r2, r6
 8010656:	b292      	uxth	r2, r2
 8010658:	2a09      	cmp	r2, #9
 801065a:	bf88      	it	hi
 801065c:	3a0a      	subhi	r2, #10
 801065e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8010662:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8010664:	42aa      	cmp	r2, r5
 8010666:	d0ee      	beq.n	8010646 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8010668:	2000      	movs	r0, #0
 801066a:	bd70      	pop	{r4, r5, r6, pc}
 801066c:	2001      	movs	r0, #1
 801066e:	e7fc      	b.n	801066a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08010670 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8010670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010674:	4605      	mov	r5, r0
 8010676:	4616      	mov	r6, r2
 8010678:	1c8c      	adds	r4, r1, #2
 801067a:	8809      	ldrh	r1, [r1, #0]
 801067c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8010680:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8010684:	42b3      	cmp	r3, r6
 8010686:	d124      	bne.n	80106d2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8010688:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801068c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8010690:	f001 070f 	and.w	r7, r1, #15
 8010694:	4652      	mov	r2, sl
 8010696:	f8cd 8000 	str.w	r8, [sp]
 801069a:	464b      	mov	r3, r9
 801069c:	4621      	mov	r1, r4
 801069e:	4628      	mov	r0, r5
 80106a0:	f7ff ffb7 	bl	8010612 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80106a4:	4683      	mov	fp, r0
 80106a6:	b168      	cbz	r0, 80106c4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80106a8:	eb0a 0109 	add.w	r1, sl, r9
 80106ac:	463a      	mov	r2, r7
 80106ae:	4628      	mov	r0, r5
 80106b0:	4441      	add	r1, r8
 80106b2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80106b6:	4649      	mov	r1, r9
 80106b8:	f7ff ff52 	bl	8010560 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80106bc:	4658      	mov	r0, fp
 80106be:	b003      	add	sp, #12
 80106c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106c4:	eb07 010a 	add.w	r1, r7, sl
 80106c8:	4449      	add	r1, r9
 80106ca:	4441      	add	r1, r8
 80106cc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80106d0:	e7d2      	b.n	8010678 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80106d2:	f04f 0b00 	mov.w	fp, #0
 80106d6:	e7f1      	b.n	80106bc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080106d8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80106d8:	b570      	push	{r4, r5, r6, lr}
 80106da:	8810      	ldrh	r0, [r2, #0]
 80106dc:	4298      	cmp	r0, r3
 80106de:	d817      	bhi.n	8010710 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80106e0:	1e48      	subs	r0, r1, #1
 80106e2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80106e6:	4298      	cmp	r0, r3
 80106e8:	d312      	bcc.n	8010710 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80106ea:	2400      	movs	r4, #0
 80106ec:	428c      	cmp	r4, r1
 80106ee:	d20f      	bcs.n	8010710 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80106f0:	1860      	adds	r0, r4, r1
 80106f2:	1040      	asrs	r0, r0, #1
 80106f4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80106f8:	0085      	lsls	r5, r0, #2
 80106fa:	42b3      	cmp	r3, r6
 80106fc:	d902      	bls.n	8010704 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80106fe:	3001      	adds	r0, #1
 8010700:	b284      	uxth	r4, r0
 8010702:	e7f3      	b.n	80106ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8010704:	d201      	bcs.n	801070a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8010706:	b281      	uxth	r1, r0
 8010708:	e7f0      	b.n	80106ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801070a:	442a      	add	r2, r5
 801070c:	8850      	ldrh	r0, [r2, #2]
 801070e:	bd70      	pop	{r4, r5, r6, pc}
 8010710:	2000      	movs	r0, #0
 8010712:	e7fc      	b.n	801070e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08010714 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8010714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010718:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801071a:	4604      	mov	r4, r0
 801071c:	260b      	movs	r6, #11
 801071e:	886f      	ldrh	r7, [r5, #2]
 8010720:	087f      	lsrs	r7, r7, #1
 8010722:	3e01      	subs	r6, #1
 8010724:	d013      	beq.n	801074e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8010726:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8010728:	462a      	mov	r2, r5
 801072a:	4639      	mov	r1, r7
 801072c:	4620      	mov	r0, r4
 801072e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8010732:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8010736:	4643      	mov	r3, r8
 8010738:	f7ff ffce 	bl	80106d8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801073c:	b138      	cbz	r0, 801074e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801073e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8010742:	4642      	mov	r2, r8
 8010744:	4620      	mov	r0, r4
 8010746:	f7ff ff93 	bl	8010670 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801074a:	2800      	cmp	r0, #0
 801074c:	d1e9      	bne.n	8010722 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801074e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08010754 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8010754:	b570      	push	{r4, r5, r6, lr}
 8010756:	694a      	ldr	r2, [r1, #20]
 8010758:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801075a:	684b      	ldr	r3, [r1, #4]
 801075c:	1b54      	subs	r4, r2, r5
 801075e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8010760:	f000 8106 	beq.w	8010970 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8010764:	1b9b      	subs	r3, r3, r6
 8010766:	d003      	beq.n	8010770 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8010768:	4363      	muls	r3, r4
 801076a:	2210      	movs	r2, #16
 801076c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010770:	680c      	ldr	r4, [r1, #0]
 8010772:	698a      	ldr	r2, [r1, #24]
 8010774:	1b65      	subs	r5, r4, r5
 8010776:	f000 80fd 	beq.w	8010974 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801077a:	1b92      	subs	r2, r2, r6
 801077c:	d003      	beq.n	8010786 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801077e:	436a      	muls	r2, r5
 8010780:	2410      	movs	r4, #16
 8010782:	fb92 f2f4 	sdiv	r2, r2, r4
 8010786:	1a9b      	subs	r3, r3, r2
 8010788:	ed9f 4a89 	vldr	s8, [pc, #548]	; 80109b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801078c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010790:	460a      	mov	r2, r1
 8010792:	ee07 3a90 	vmov	s15, r3
 8010796:	f100 040c 	add.w	r4, r0, #12
 801079a:	4603      	mov	r3, r0
 801079c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80107a0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80107a4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80107a8:	eeb1 6a43 	vneg.f32	s12, s6
 80107ac:	edd2 7a02 	vldr	s15, [r2, #8]
 80107b0:	3214      	adds	r2, #20
 80107b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80107b6:	ece3 6a01 	vstmia	r3!, {s13}
 80107ba:	429c      	cmp	r4, r3
 80107bc:	ed52 7a02 	vldr	s15, [r2, #-8]
 80107c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80107c4:	edc3 7a02 	vstr	s15, [r3, #8]
 80107c8:	ed52 7a01 	vldr	s15, [r2, #-4]
 80107cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80107d0:	edc3 7a05 	vstr	s15, [r3, #20]
 80107d4:	d1ea      	bne.n	80107ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80107d6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80107d8:	698b      	ldr	r3, [r1, #24]
 80107da:	edd0 4a02 	vldr	s9, [r0, #8]
 80107de:	1a9b      	subs	r3, r3, r2
 80107e0:	edd0 3a00 	vldr	s7, [r0]
 80107e4:	edd0 6a01 	vldr	s13, [r0, #4]
 80107e8:	ee07 3a90 	vmov	s15, r3
 80107ec:	684b      	ldr	r3, [r1, #4]
 80107ee:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80107f2:	ed90 5a05 	vldr	s10, [r0, #20]
 80107f6:	1a9b      	subs	r3, r3, r2
 80107f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80107fc:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8010800:	ed90 2a03 	vldr	s4, [r0, #12]
 8010804:	ee07 3a10 	vmov	s14, r3
 8010808:	edd0 5a04 	vldr	s11, [r0, #16]
 801080c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010810:	ed90 1a07 	vldr	s2, [r0, #28]
 8010814:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010818:	edd0 2a06 	vldr	s5, [r0, #24]
 801081c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8010820:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8010824:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010828:	ee32 5a45 	vsub.f32	s10, s4, s10
 801082c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010830:	ee67 7a83 	vmul.f32	s15, s15, s6
 8010834:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8010838:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801083a:	694a      	ldr	r2, [r1, #20]
 801083c:	1b13      	subs	r3, r2, r4
 801083e:	ee07 3a10 	vmov	s14, r3
 8010842:	680b      	ldr	r3, [r1, #0]
 8010844:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010848:	1b1b      	subs	r3, r3, r4
 801084a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801084e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8010852:	ee07 3a10 	vmov	s14, r3
 8010856:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801085a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801085e:	eee6 4a87 	vfma.f32	s9, s13, s14
 8010862:	ee64 4a86 	vmul.f32	s9, s9, s12
 8010866:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801086a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801086c:	698b      	ldr	r3, [r1, #24]
 801086e:	1a9b      	subs	r3, r3, r2
 8010870:	ee06 3a90 	vmov	s13, r3
 8010874:	684b      	ldr	r3, [r1, #4]
 8010876:	1a9b      	subs	r3, r3, r2
 8010878:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801087c:	ee07 3a10 	vmov	s14, r3
 8010880:	ee66 6a84 	vmul.f32	s13, s13, s8
 8010884:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010888:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801088c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010890:	eee5 6a87 	vfma.f32	s13, s11, s14
 8010894:	ee66 6a83 	vmul.f32	s13, s13, s6
 8010898:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801089c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801089e:	694a      	ldr	r2, [r1, #20]
 80108a0:	1b13      	subs	r3, r2, r4
 80108a2:	ee07 3a10 	vmov	s14, r3
 80108a6:	680b      	ldr	r3, [r1, #0]
 80108a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80108ac:	1b1b      	subs	r3, r3, r4
 80108ae:	ee27 7a04 	vmul.f32	s14, s14, s8
 80108b2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80108b6:	ee07 3a10 	vmov	s14, r3
 80108ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80108be:	ee27 7a04 	vmul.f32	s14, s14, s8
 80108c2:	eea5 5a87 	vfma.f32	s10, s11, s14
 80108c6:	edd0 5a08 	vldr	s11, [r0, #32]
 80108ca:	ee31 1a65 	vsub.f32	s2, s2, s11
 80108ce:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80108d2:	ee25 5a06 	vmul.f32	s10, s10, s12
 80108d6:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 80108da:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80108dc:	698b      	ldr	r3, [r1, #24]
 80108de:	1a9b      	subs	r3, r3, r2
 80108e0:	ee07 3a10 	vmov	s14, r3
 80108e4:	684b      	ldr	r3, [r1, #4]
 80108e6:	1a9b      	subs	r3, r3, r2
 80108e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80108ec:	ee01 3a90 	vmov	s3, r3
 80108f0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80108f4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80108f8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80108fc:	ee61 1a84 	vmul.f32	s3, s3, s8
 8010900:	eea1 7a21 	vfma.f32	s14, s2, s3
 8010904:	ee27 7a03 	vmul.f32	s14, s14, s6
 8010908:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801090c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801090e:	694a      	ldr	r2, [r1, #20]
 8010910:	1b13      	subs	r3, r2, r4
 8010912:	ee03 3a10 	vmov	s6, r3
 8010916:	680b      	ldr	r3, [r1, #0]
 8010918:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801091c:	1b1b      	subs	r3, r3, r4
 801091e:	ee23 3a04 	vmul.f32	s6, s6, s8
 8010922:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8010926:	ee03 3a10 	vmov	s6, r3
 801092a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801092e:	ee23 4a04 	vmul.f32	s8, s6, s8
 8010932:	eee1 5a04 	vfma.f32	s11, s2, s8
 8010936:	ee25 6a86 	vmul.f32	s12, s11, s12
 801093a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801093e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8010942:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8010946:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801094a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801094e:	dd13      	ble.n	8010978 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8010950:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010954:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8010958:	63c3      	str	r3, [r0, #60]	; 0x3c
 801095a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801095e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010966:	dd15      	ble.n	8010994 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8010968:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801096c:	6403      	str	r3, [r0, #64]	; 0x40
 801096e:	bd70      	pop	{r4, r5, r6, pc}
 8010970:	4623      	mov	r3, r4
 8010972:	e6fd      	b.n	8010770 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8010974:	462a      	mov	r2, r5
 8010976:	e706      	b.n	8010786 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8010978:	d502      	bpl.n	8010980 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801097a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801097e:	e7e9      	b.n	8010954 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8010980:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8010984:	eea3 2a85 	vfma.f32	s4, s7, s10
 8010988:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801098c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010990:	dade      	bge.n	8010950 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8010992:	e7f2      	b.n	801097a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8010994:	d502      	bpl.n	801099c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8010996:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801099a:	e7e7      	b.n	801096c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801099c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80109a0:	eee3 4a86 	vfma.f32	s9, s7, s12
 80109a4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80109a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ac:	dadc      	bge.n	8010968 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 80109ae:	e7f2      	b.n	8010996 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80109b0:	3d800000 	.word	0x3d800000

080109b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80109b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109b8:	2714      	movs	r7, #20
 80109ba:	435f      	muls	r7, r3
 80109bc:	eb02 0c07 	add.w	ip, r2, r7
 80109c0:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80109c4:	f115 0e0f 	adds.w	lr, r5, #15
 80109c8:	f100 80a2 	bmi.w	8010b10 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80109cc:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 80109d0:	9c08      	ldr	r4, [sp, #32]
 80109d2:	2614      	movs	r6, #20
 80109d4:	f8c0 e014 	str.w	lr, [r0, #20]
 80109d8:	4366      	muls	r6, r4
 80109da:	eb02 0806 	add.w	r8, r2, r6
 80109de:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80109e2:	f115 040f 	adds.w	r4, r5, #15
 80109e6:	f100 809f 	bmi.w	8010b28 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 80109ea:	1124      	asrs	r4, r4, #4
 80109ec:	eba4 040e 	sub.w	r4, r4, lr
 80109f0:	6184      	str	r4, [r0, #24]
 80109f2:	2c00      	cmp	r4, #0
 80109f4:	f000 808a 	beq.w	8010b0c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80109f8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80109fc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8010a00:	5995      	ldr	r5, [r2, r6]
 8010a02:	eba4 0809 	sub.w	r8, r4, r9
 8010a06:	59d4      	ldr	r4, [r2, r7]
 8010a08:	eba5 0a04 	sub.w	sl, r5, r4
 8010a0c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8010a10:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8010a14:	fb0e fe05 	mul.w	lr, lr, r5
 8010a18:	fb0a ee19 	mls	lr, sl, r9, lr
 8010a1c:	fb08 e404 	mla	r4, r8, r4, lr
 8010a20:	3c01      	subs	r4, #1
 8010a22:	19a4      	adds	r4, r4, r6
 8010a24:	f100 808c 	bmi.w	8010b40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8010a28:	fb94 fef6 	sdiv	lr, r4, r6
 8010a2c:	fb06 441e 	mls	r4, r6, lr, r4
 8010a30:	f8c0 e000 	str.w	lr, [r0]
 8010a34:	6104      	str	r4, [r0, #16]
 8010a36:	2d00      	cmp	r5, #0
 8010a38:	f2c0 8095 	blt.w	8010b66 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8010a3c:	fb95 f4f6 	sdiv	r4, r5, r6
 8010a40:	fb06 5514 	mls	r5, r6, r4, r5
 8010a44:	6044      	str	r4, [r0, #4]
 8010a46:	6085      	str	r5, [r0, #8]
 8010a48:	60c6      	str	r6, [r0, #12]
 8010a4a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010a4e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8010a52:	6945      	ldr	r5, [r0, #20]
 8010a54:	59d2      	ldr	r2, [r2, r7]
 8010a56:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8010a5a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8010b88 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8010a5e:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8010a62:	ee07 4a10 	vmov	s14, r4
 8010a66:	6804      	ldr	r4, [r0, #0]
 8010a68:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8010a6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010a70:	ee07 2a90 	vmov	s15, r2
 8010a74:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010a7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010a80:	edd3 6a00 	vldr	s13, [r3]
 8010a84:	eee6 6a07 	vfma.f32	s13, s12, s14
 8010a88:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8010a8c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010a90:	edc0 6a07 	vstr	s13, [r0, #28]
 8010a94:	edd0 6a01 	vldr	s13, [r0, #4]
 8010a98:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8010a9c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010aa0:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8010aa4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8010aa8:	ed80 6a08 	vstr	s12, [r0, #32]
 8010aac:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8010aae:	6242      	str	r2, [r0, #36]	; 0x24
 8010ab0:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8010ab4:	ed93 6a03 	vldr	s12, [r3, #12]
 8010ab8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8010abc:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8010ac0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8010ac4:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8010ac8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8010acc:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8010ad0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8010ad4:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8010ad8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010ada:	6302      	str	r2, [r0, #48]	; 0x30
 8010adc:	ed93 6a06 	vldr	s12, [r3, #24]
 8010ae0:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8010ae4:	eea5 6a87 	vfma.f32	s12, s11, s14
 8010ae8:	eeb0 7a46 	vmov.f32	s14, s12
 8010aec:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8010af0:	eea6 7a27 	vfma.f32	s14, s12, s15
 8010af4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8010af8:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8010afc:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8010b00:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010b04:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8010b08:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8010b0a:	63c3      	str	r3, [r0, #60]	; 0x3c
 8010b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b10:	2410      	movs	r4, #16
 8010b12:	f1c5 0501 	rsb	r5, r5, #1
 8010b16:	fb9e fef4 	sdiv	lr, lr, r4
 8010b1a:	f015 050f 	ands.w	r5, r5, #15
 8010b1e:	bf18      	it	ne
 8010b20:	2501      	movne	r5, #1
 8010b22:	ebae 0e05 	sub.w	lr, lr, r5
 8010b26:	e753      	b.n	80109d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8010b28:	f04f 0910 	mov.w	r9, #16
 8010b2c:	f1c5 0501 	rsb	r5, r5, #1
 8010b30:	fb94 f4f9 	sdiv	r4, r4, r9
 8010b34:	f015 050f 	ands.w	r5, r5, #15
 8010b38:	bf18      	it	ne
 8010b3a:	2501      	movne	r5, #1
 8010b3c:	1b64      	subs	r4, r4, r5
 8010b3e:	e755      	b.n	80109ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8010b40:	4264      	negs	r4, r4
 8010b42:	fb94 fef6 	sdiv	lr, r4, r6
 8010b46:	f1ce 0800 	rsb	r8, lr, #0
 8010b4a:	fb06 441e 	mls	r4, r6, lr, r4
 8010b4e:	f8c0 8000 	str.w	r8, [r0]
 8010b52:	6104      	str	r4, [r0, #16]
 8010b54:	2c00      	cmp	r4, #0
 8010b56:	f43f af6e 	beq.w	8010a36 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8010b5a:	ea6f 0e0e 	mvn.w	lr, lr
 8010b5e:	1b34      	subs	r4, r6, r4
 8010b60:	f8c0 e000 	str.w	lr, [r0]
 8010b64:	e766      	b.n	8010a34 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8010b66:	426d      	negs	r5, r5
 8010b68:	fb95 f4f6 	sdiv	r4, r5, r6
 8010b6c:	f1c4 0e00 	rsb	lr, r4, #0
 8010b70:	fb06 5514 	mls	r5, r6, r4, r5
 8010b74:	f8c0 e004 	str.w	lr, [r0, #4]
 8010b78:	6085      	str	r5, [r0, #8]
 8010b7a:	2d00      	cmp	r5, #0
 8010b7c:	f43f af64 	beq.w	8010a48 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8010b80:	43e4      	mvns	r4, r4
 8010b82:	1b75      	subs	r5, r6, r5
 8010b84:	6044      	str	r4, [r0, #4]
 8010b86:	e75e      	b.n	8010a46 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8010b88:	3d800000 	.word	0x3d800000

08010b8c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8010b8c:	4b01      	ldr	r3, [pc, #4]	; (8010b94 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8010b8e:	6018      	str	r0, [r3, #0]
 8010b90:	4770      	bx	lr
 8010b92:	bf00      	nop
 8010b94:	20024478 	.word	0x20024478

08010b98 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8010b98:	4b06      	ldr	r3, [pc, #24]	; (8010bb4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8010b9a:	881a      	ldrh	r2, [r3, #0]
 8010b9c:	4282      	cmp	r2, r0
 8010b9e:	d807      	bhi.n	8010bb0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8010ba0:	4b05      	ldr	r3, [pc, #20]	; (8010bb8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8010ba2:	881b      	ldrh	r3, [r3, #0]
 8010ba4:	4413      	add	r3, r2
 8010ba6:	4298      	cmp	r0, r3
 8010ba8:	bfac      	ite	ge
 8010baa:	2000      	movge	r0, #0
 8010bac:	2001      	movlt	r0, #1
 8010bae:	4770      	bx	lr
 8010bb0:	2000      	movs	r0, #0
 8010bb2:	4770      	bx	lr
 8010bb4:	20024498 	.word	0x20024498
 8010bb8:	2002449c 	.word	0x2002449c

08010bbc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8010bbc:	b508      	push	{r3, lr}
 8010bbe:	4601      	mov	r1, r0
 8010bc0:	f7ff ffea 	bl	8010b98 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8010bc4:	b118      	cbz	r0, 8010bce <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8010bc6:	4b02      	ldr	r3, [pc, #8]	; (8010bd0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8010bce:	bd08      	pop	{r3, pc}
 8010bd0:	2002447c 	.word	0x2002447c

08010bd4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8010bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bd6:	4c24      	ldr	r4, [pc, #144]	; (8010c68 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8010bd8:	6823      	ldr	r3, [r4, #0]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d042      	beq.n	8010c64 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8010bde:	4a23      	ldr	r2, [pc, #140]	; (8010c6c <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8010be0:	4d23      	ldr	r5, [pc, #140]	; (8010c70 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8010be2:	8811      	ldrh	r1, [r2, #0]
 8010be4:	f8b5 c000 	ldrh.w	ip, [r5]
 8010be8:	4822      	ldr	r0, [pc, #136]	; (8010c74 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8010bea:	4461      	add	r1, ip
 8010bec:	1c4a      	adds	r2, r1, #1
 8010bee:	008f      	lsls	r7, r1, #2
 8010bf0:	f022 0201 	bic.w	r2, r2, #1
 8010bf4:	19de      	adds	r6, r3, r7
 8010bf6:	0412      	lsls	r2, r2, #16
 8010bf8:	6006      	str	r6, [r0, #0]
 8010bfa:	4e1f      	ldr	r6, [pc, #124]	; (8010c78 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8010bfc:	0c12      	lsrs	r2, r2, #16
 8010bfe:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8010c02:	19da      	adds	r2, r3, r7
 8010c04:	6032      	str	r2, [r6, #0]
 8010c06:	220e      	movs	r2, #14
 8010c08:	fb02 f20c 	mul.w	r2, r2, ip
 8010c0c:	3203      	adds	r2, #3
 8010c0e:	f022 0203 	bic.w	r2, r2, #3
 8010c12:	443a      	add	r2, r7
 8010c14:	4f19      	ldr	r7, [pc, #100]	; (8010c7c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8010c16:	4413      	add	r3, r2
 8010c18:	603b      	str	r3, [r7, #0]
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	4f18      	ldr	r7, [pc, #96]	; (8010c80 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8010c1e:	469c      	mov	ip, r3
 8010c20:	803b      	strh	r3, [r7, #0]
 8010c22:	4f18      	ldr	r7, [pc, #96]	; (8010c84 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8010c24:	683f      	ldr	r7, [r7, #0]
 8010c26:	1aba      	subs	r2, r7, r2
 8010c28:	4f17      	ldr	r7, [pc, #92]	; (8010c88 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8010c2a:	603a      	str	r2, [r7, #0]
 8010c2c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8010c30:	4a16      	ldr	r2, [pc, #88]	; (8010c8c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8010c32:	8013      	strh	r3, [r2, #0]
 8010c34:	428b      	cmp	r3, r1
 8010c36:	d10d      	bne.n	8010c54 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8010c38:	882d      	ldrh	r5, [r5, #0]
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	6830      	ldr	r0, [r6, #0]
 8010c3e:	240e      	movs	r4, #14
 8010c40:	429d      	cmp	r5, r3
 8010c42:	d90f      	bls.n	8010c64 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8010c44:	fb04 0203 	mla	r2, r4, r3, r0
 8010c48:	3301      	adds	r3, #1
 8010c4a:	7b11      	ldrb	r1, [r2, #12]
 8010c4c:	f36f 1145 	bfc	r1, #5, #1
 8010c50:	7311      	strb	r1, [r2, #12]
 8010c52:	e7f5      	b.n	8010c40 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8010c54:	6822      	ldr	r2, [r4, #0]
 8010c56:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8010c5a:	6802      	ldr	r2, [r0, #0]
 8010c5c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8010c60:	3301      	adds	r3, #1
 8010c62:	e7e7      	b.n	8010c34 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8010c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c66:	bf00      	nop
 8010c68:	2002447c 	.word	0x2002447c
 8010c6c:	20024498 	.word	0x20024498
 8010c70:	2002449c 	.word	0x2002449c
 8010c74:	20024490 	.word	0x20024490
 8010c78:	20024480 	.word	0x20024480
 8010c7c:	20024488 	.word	0x20024488
 8010c80:	2002449a 	.word	0x2002449a
 8010c84:	20024484 	.word	0x20024484
 8010c88:	20024494 	.word	0x20024494
 8010c8c:	2002448c 	.word	0x2002448c

08010c90 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8010c90:	4b06      	ldr	r3, [pc, #24]	; (8010cac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	b943      	cbnz	r3, 8010ca8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8010c96:	b139      	cbz	r1, 8010ca8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8010c98:	4b05      	ldr	r3, [pc, #20]	; (8010cb0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8010c9a:	801a      	strh	r2, [r3, #0]
 8010c9c:	4b05      	ldr	r3, [pc, #20]	; (8010cb4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8010c9e:	6019      	str	r1, [r3, #0]
 8010ca0:	4b05      	ldr	r3, [pc, #20]	; (8010cb8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8010ca2:	6018      	str	r0, [r3, #0]
 8010ca4:	f7ff bf96 	b.w	8010bd4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8010ca8:	4770      	bx	lr
 8010caa:	bf00      	nop
 8010cac:	20024488 	.word	0x20024488
 8010cb0:	2002449c 	.word	0x2002449c
 8010cb4:	20024484 	.word	0x20024484
 8010cb8:	2002447c 	.word	0x2002447c

08010cbc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8010cbc:	b470      	push	{r4, r5, r6}
 8010cbe:	4c07      	ldr	r4, [pc, #28]	; (8010cdc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8010cc0:	4605      	mov	r5, r0
 8010cc2:	4610      	mov	r0, r2
 8010cc4:	9a03      	ldr	r2, [sp, #12]
 8010cc6:	6826      	ldr	r6, [r4, #0]
 8010cc8:	b936      	cbnz	r6, 8010cd8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8010cca:	6025      	str	r5, [r4, #0]
 8010ccc:	4c04      	ldr	r4, [pc, #16]	; (8010ce0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8010cce:	8021      	strh	r1, [r4, #0]
 8010cd0:	4619      	mov	r1, r3
 8010cd2:	bc70      	pop	{r4, r5, r6}
 8010cd4:	f7ff bfdc 	b.w	8010c90 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8010cd8:	bc70      	pop	{r4, r5, r6}
 8010cda:	4770      	bx	lr
 8010cdc:	200244a0 	.word	0x200244a0
 8010ce0:	20024498 	.word	0x20024498

08010ce4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8010ce4:	4a12      	ldr	r2, [pc, #72]	; (8010d30 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8010ce6:	8803      	ldrh	r3, [r0, #0]
 8010ce8:	8812      	ldrh	r2, [r2, #0]
 8010cea:	4293      	cmp	r3, r2
 8010cec:	d207      	bcs.n	8010cfe <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8010cee:	4a11      	ldr	r2, [pc, #68]	; (8010d34 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8010cf0:	2114      	movs	r1, #20
 8010cf2:	6812      	ldr	r2, [r2, #0]
 8010cf4:	fb01 2303 	mla	r3, r1, r3, r2
 8010cf8:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8010cfc:	4770      	bx	lr
 8010cfe:	490e      	ldr	r1, [pc, #56]	; (8010d38 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8010d00:	8809      	ldrh	r1, [r1, #0]
 8010d02:	4411      	add	r1, r2
 8010d04:	428b      	cmp	r3, r1
 8010d06:	da04      	bge.n	8010d12 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8010d08:	1a9b      	subs	r3, r3, r2
 8010d0a:	4a0c      	ldr	r2, [pc, #48]	; (8010d3c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8010d0c:	210e      	movs	r1, #14
 8010d0e:	6812      	ldr	r2, [r2, #0]
 8010d10:	e7f0      	b.n	8010cf4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8010d12:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010d16:	4293      	cmp	r3, r2
 8010d18:	d108      	bne.n	8010d2c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8010d1a:	4b09      	ldr	r3, [pc, #36]	; (8010d40 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8010d1c:	781b      	ldrb	r3, [r3, #0]
 8010d1e:	b91b      	cbnz	r3, 8010d28 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8010d20:	4b08      	ldr	r3, [pc, #32]	; (8010d44 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8010d22:	f9b3 0000 	ldrsh.w	r0, [r3]
 8010d26:	4770      	bx	lr
 8010d28:	4b07      	ldr	r3, [pc, #28]	; (8010d48 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8010d2a:	e7fa      	b.n	8010d22 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8010d2c:	2000      	movs	r0, #0
 8010d2e:	4770      	bx	lr
 8010d30:	20024498 	.word	0x20024498
 8010d34:	200244a0 	.word	0x200244a0
 8010d38:	2002449c 	.word	0x2002449c
 8010d3c:	20024480 	.word	0x20024480
 8010d40:	20024410 	.word	0x20024410
 8010d44:	20024412 	.word	0x20024412
 8010d48:	20024414 	.word	0x20024414

08010d4c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8010d4c:	4a12      	ldr	r2, [pc, #72]	; (8010d98 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8010d4e:	8803      	ldrh	r3, [r0, #0]
 8010d50:	8812      	ldrh	r2, [r2, #0]
 8010d52:	4293      	cmp	r3, r2
 8010d54:	d207      	bcs.n	8010d66 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8010d56:	4a11      	ldr	r2, [pc, #68]	; (8010d9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8010d58:	2114      	movs	r1, #20
 8010d5a:	6812      	ldr	r2, [r2, #0]
 8010d5c:	fb01 2303 	mla	r3, r1, r3, r2
 8010d60:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8010d64:	4770      	bx	lr
 8010d66:	490e      	ldr	r1, [pc, #56]	; (8010da0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8010d68:	8809      	ldrh	r1, [r1, #0]
 8010d6a:	4411      	add	r1, r2
 8010d6c:	428b      	cmp	r3, r1
 8010d6e:	da04      	bge.n	8010d7a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8010d70:	1a9b      	subs	r3, r3, r2
 8010d72:	4a0c      	ldr	r2, [pc, #48]	; (8010da4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8010d74:	210e      	movs	r1, #14
 8010d76:	6812      	ldr	r2, [r2, #0]
 8010d78:	e7f0      	b.n	8010d5c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8010d7a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010d7e:	4293      	cmp	r3, r2
 8010d80:	d108      	bne.n	8010d94 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8010d82:	4b09      	ldr	r3, [pc, #36]	; (8010da8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8010d84:	781b      	ldrb	r3, [r3, #0]
 8010d86:	b91b      	cbnz	r3, 8010d90 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8010d88:	4b08      	ldr	r3, [pc, #32]	; (8010dac <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8010d8a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8010d8e:	4770      	bx	lr
 8010d90:	4b07      	ldr	r3, [pc, #28]	; (8010db0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8010d92:	e7fa      	b.n	8010d8a <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8010d94:	2000      	movs	r0, #0
 8010d96:	4770      	bx	lr
 8010d98:	20024498 	.word	0x20024498
 8010d9c:	200244a0 	.word	0x200244a0
 8010da0:	2002449c 	.word	0x2002449c
 8010da4:	20024480 	.word	0x20024480
 8010da8:	20024410 	.word	0x20024410
 8010dac:	20024414 	.word	0x20024414
 8010db0:	20024412 	.word	0x20024412

08010db4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8010db4:	4a1f      	ldr	r2, [pc, #124]	; (8010e34 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8010db6:	b510      	push	{r4, lr}
 8010db8:	880b      	ldrh	r3, [r1, #0]
 8010dba:	8812      	ldrh	r2, [r2, #0]
 8010dbc:	4293      	cmp	r3, r2
 8010dbe:	d213      	bcs.n	8010de8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8010dc0:	4a1d      	ldr	r2, [pc, #116]	; (8010e38 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8010dc2:	2114      	movs	r1, #20
 8010dc4:	6812      	ldr	r2, [r2, #0]
 8010dc6:	fb01 2303 	mla	r3, r1, r3, r2
 8010dca:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8010dce:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8010dd2:	8a1a      	ldrh	r2, [r3, #16]
 8010dd4:	8a5b      	ldrh	r3, [r3, #18]
 8010dd6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8010dda:	8004      	strh	r4, [r0, #0]
 8010ddc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010de0:	8041      	strh	r1, [r0, #2]
 8010de2:	8082      	strh	r2, [r0, #4]
 8010de4:	80c3      	strh	r3, [r0, #6]
 8010de6:	e00e      	b.n	8010e06 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8010de8:	4914      	ldr	r1, [pc, #80]	; (8010e3c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8010dea:	8809      	ldrh	r1, [r1, #0]
 8010dec:	4411      	add	r1, r2
 8010dee:	428b      	cmp	r3, r1
 8010df0:	da0a      	bge.n	8010e08 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 8010df2:	1a9b      	subs	r3, r3, r2
 8010df4:	4a12      	ldr	r2, [pc, #72]	; (8010e40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8010df6:	210e      	movs	r1, #14
 8010df8:	6812      	ldr	r2, [r2, #0]
 8010dfa:	fb01 2303 	mla	r3, r1, r3, r2
 8010dfe:	681a      	ldr	r2, [r3, #0]
 8010e00:	6002      	str	r2, [r0, #0]
 8010e02:	685a      	ldr	r2, [r3, #4]
 8010e04:	6042      	str	r2, [r0, #4]
 8010e06:	bd10      	pop	{r4, pc}
 8010e08:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	d10b      	bne.n	8010e28 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8010e10:	4b0c      	ldr	r3, [pc, #48]	; (8010e44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8010e12:	f9b3 1000 	ldrsh.w	r1, [r3]
 8010e16:	4b0c      	ldr	r3, [pc, #48]	; (8010e48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8010e18:	8081      	strh	r1, [r0, #4]
 8010e1a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010e1e:	2300      	movs	r3, #0
 8010e20:	80c2      	strh	r2, [r0, #6]
 8010e22:	8003      	strh	r3, [r0, #0]
 8010e24:	8043      	strh	r3, [r0, #2]
 8010e26:	e7ee      	b.n	8010e06 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8010e28:	2300      	movs	r3, #0
 8010e2a:	8003      	strh	r3, [r0, #0]
 8010e2c:	8043      	strh	r3, [r0, #2]
 8010e2e:	8083      	strh	r3, [r0, #4]
 8010e30:	e7d8      	b.n	8010de4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8010e32:	bf00      	nop
 8010e34:	20024498 	.word	0x20024498
 8010e38:	200244a0 	.word	0x200244a0
 8010e3c:	2002449c 	.word	0x2002449c
 8010e40:	20024480 	.word	0x20024480
 8010e44:	2002440c 	.word	0x2002440c
 8010e48:	2002440e 	.word	0x2002440e

08010e4c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8010e4c:	4a17      	ldr	r2, [pc, #92]	; (8010eac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8010e4e:	8803      	ldrh	r3, [r0, #0]
 8010e50:	8812      	ldrh	r2, [r2, #0]
 8010e52:	4293      	cmp	r3, r2
 8010e54:	d213      	bcs.n	8010e7e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8010e56:	4a16      	ldr	r2, [pc, #88]	; (8010eb0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8010e58:	2114      	movs	r1, #20
 8010e5a:	6812      	ldr	r2, [r2, #0]
 8010e5c:	fb01 2303 	mla	r3, r1, r3, r2
 8010e60:	8a1a      	ldrh	r2, [r3, #16]
 8010e62:	8919      	ldrh	r1, [r3, #8]
 8010e64:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8010e68:	428a      	cmp	r2, r1
 8010e6a:	db1d      	blt.n	8010ea8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8010e6c:	8a58      	ldrh	r0, [r3, #18]
 8010e6e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8010e72:	895b      	ldrh	r3, [r3, #10]
 8010e74:	4298      	cmp	r0, r3
 8010e76:	bfac      	ite	ge
 8010e78:	2000      	movge	r0, #0
 8010e7a:	2001      	movlt	r0, #1
 8010e7c:	4770      	bx	lr
 8010e7e:	490d      	ldr	r1, [pc, #52]	; (8010eb4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8010e80:	8809      	ldrh	r1, [r1, #0]
 8010e82:	4411      	add	r1, r2
 8010e84:	428b      	cmp	r3, r1
 8010e86:	da0d      	bge.n	8010ea4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8010e88:	1a9b      	subs	r3, r3, r2
 8010e8a:	4a0b      	ldr	r2, [pc, #44]	; (8010eb8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8010e8c:	210e      	movs	r1, #14
 8010e8e:	6812      	ldr	r2, [r2, #0]
 8010e90:	fb01 2303 	mla	r3, r1, r3, r2
 8010e94:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8010e98:	891a      	ldrh	r2, [r3, #8]
 8010e9a:	4291      	cmp	r1, r2
 8010e9c:	db04      	blt.n	8010ea8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8010e9e:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8010ea2:	e7e6      	b.n	8010e72 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8010ea4:	2000      	movs	r0, #0
 8010ea6:	4770      	bx	lr
 8010ea8:	2001      	movs	r0, #1
 8010eaa:	4770      	bx	lr
 8010eac:	20024498 	.word	0x20024498
 8010eb0:	200244a0 	.word	0x200244a0
 8010eb4:	2002449c 	.word	0x2002449c
 8010eb8:	20024480 	.word	0x20024480

08010ebc <_ZNK8touchgfx6Bitmap7getDataEv>:
 8010ebc:	4a12      	ldr	r2, [pc, #72]	; (8010f08 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8010ebe:	8803      	ldrh	r3, [r0, #0]
 8010ec0:	8811      	ldrh	r1, [r2, #0]
 8010ec2:	428b      	cmp	r3, r1
 8010ec4:	d20b      	bcs.n	8010ede <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8010ec6:	4a11      	ldr	r2, [pc, #68]	; (8010f0c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8010ec8:	6812      	ldr	r2, [r2, #0]
 8010eca:	b112      	cbz	r2, 8010ed2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8010ecc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010ed0:	b9c0      	cbnz	r0, 8010f04 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8010ed2:	4a0f      	ldr	r2, [pc, #60]	; (8010f10 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8010ed4:	6811      	ldr	r1, [r2, #0]
 8010ed6:	2214      	movs	r2, #20
 8010ed8:	4353      	muls	r3, r2
 8010eda:	58c8      	ldr	r0, [r1, r3]
 8010edc:	4770      	bx	lr
 8010ede:	4a0d      	ldr	r2, [pc, #52]	; (8010f14 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8010ee0:	8812      	ldrh	r2, [r2, #0]
 8010ee2:	440a      	add	r2, r1
 8010ee4:	4293      	cmp	r3, r2
 8010ee6:	da04      	bge.n	8010ef2 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8010ee8:	4a08      	ldr	r2, [pc, #32]	; (8010f0c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8010eea:	6812      	ldr	r2, [r2, #0]
 8010eec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010ef0:	4770      	bx	lr
 8010ef2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010ef6:	4293      	cmp	r3, r2
 8010ef8:	d103      	bne.n	8010f02 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8010efa:	4b07      	ldr	r3, [pc, #28]	; (8010f18 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8010f00:	4770      	bx	lr
 8010f02:	2000      	movs	r0, #0
 8010f04:	4770      	bx	lr
 8010f06:	bf00      	nop
 8010f08:	20024498 	.word	0x20024498
 8010f0c:	2002447c 	.word	0x2002447c
 8010f10:	200244a0 	.word	0x200244a0
 8010f14:	2002449c 	.word	0x2002449c
 8010f18:	20024418 	.word	0x20024418

08010f1c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8010f1c:	4b24      	ldr	r3, [pc, #144]	; (8010fb0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8010f1e:	8802      	ldrh	r2, [r0, #0]
 8010f20:	8818      	ldrh	r0, [r3, #0]
 8010f22:	4282      	cmp	r2, r0
 8010f24:	d221      	bcs.n	8010f6a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8010f26:	4b23      	ldr	r3, [pc, #140]	; (8010fb4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8010f28:	6819      	ldr	r1, [r3, #0]
 8010f2a:	2314      	movs	r3, #20
 8010f2c:	fb03 1302 	mla	r3, r3, r2, r1
 8010f30:	6858      	ldr	r0, [r3, #4]
 8010f32:	2800      	cmp	r0, #0
 8010f34:	d03a      	beq.n	8010fac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8010f36:	4920      	ldr	r1, [pc, #128]	; (8010fb8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8010f38:	6809      	ldr	r1, [r1, #0]
 8010f3a:	2900      	cmp	r1, #0
 8010f3c:	d036      	beq.n	8010fac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8010f3e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010f42:	2900      	cmp	r1, #0
 8010f44:	d032      	beq.n	8010fac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8010f46:	891a      	ldrh	r2, [r3, #8]
 8010f48:	8958      	ldrh	r0, [r3, #10]
 8010f4a:	4350      	muls	r0, r2
 8010f4c:	7c5a      	ldrb	r2, [r3, #17]
 8010f4e:	7cdb      	ldrb	r3, [r3, #19]
 8010f50:	0952      	lsrs	r2, r2, #5
 8010f52:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010f56:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8010f5a:	2b0b      	cmp	r3, #11
 8010f5c:	bf18      	it	ne
 8010f5e:	0040      	lslne	r0, r0, #1
 8010f60:	3003      	adds	r0, #3
 8010f62:	f020 0003 	bic.w	r0, r0, #3
 8010f66:	4408      	add	r0, r1
 8010f68:	4770      	bx	lr
 8010f6a:	4b14      	ldr	r3, [pc, #80]	; (8010fbc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8010f6c:	881b      	ldrh	r3, [r3, #0]
 8010f6e:	4403      	add	r3, r0
 8010f70:	429a      	cmp	r2, r3
 8010f72:	da1a      	bge.n	8010faa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8010f74:	4b12      	ldr	r3, [pc, #72]	; (8010fc0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8010f76:	1a10      	subs	r0, r2, r0
 8010f78:	210e      	movs	r1, #14
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	fb01 3000 	mla	r0, r1, r0, r3
 8010f80:	7b03      	ldrb	r3, [r0, #12]
 8010f82:	f003 031f 	and.w	r3, r3, #31
 8010f86:	2b0b      	cmp	r3, #11
 8010f88:	d10b      	bne.n	8010fa2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8010f8a:	8903      	ldrh	r3, [r0, #8]
 8010f8c:	8940      	ldrh	r0, [r0, #10]
 8010f8e:	4358      	muls	r0, r3
 8010f90:	4b09      	ldr	r3, [pc, #36]	; (8010fb8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8010f92:	3003      	adds	r0, #3
 8010f94:	6819      	ldr	r1, [r3, #0]
 8010f96:	f020 0303 	bic.w	r3, r0, #3
 8010f9a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8010f9e:	4418      	add	r0, r3
 8010fa0:	4770      	bx	lr
 8010fa2:	2b0d      	cmp	r3, #13
 8010fa4:	d101      	bne.n	8010faa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8010fa6:	300d      	adds	r0, #13
 8010fa8:	4770      	bx	lr
 8010faa:	2000      	movs	r0, #0
 8010fac:	4770      	bx	lr
 8010fae:	bf00      	nop
 8010fb0:	20024498 	.word	0x20024498
 8010fb4:	200244a0 	.word	0x200244a0
 8010fb8:	2002447c 	.word	0x2002447c
 8010fbc:	2002449c 	.word	0x2002449c
 8010fc0:	20024480 	.word	0x20024480

08010fc4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8010fc4:	4a17      	ldr	r2, [pc, #92]	; (8011024 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8010fc6:	b510      	push	{r4, lr}
 8010fc8:	8803      	ldrh	r3, [r0, #0]
 8010fca:	8812      	ldrh	r2, [r2, #0]
 8010fcc:	4293      	cmp	r3, r2
 8010fce:	d20c      	bcs.n	8010fea <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8010fd0:	4a15      	ldr	r2, [pc, #84]	; (8011028 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8010fd2:	2114      	movs	r1, #20
 8010fd4:	6812      	ldr	r2, [r2, #0]
 8010fd6:	fb01 2303 	mla	r3, r1, r3, r2
 8010fda:	7c58      	ldrb	r0, [r3, #17]
 8010fdc:	0942      	lsrs	r2, r0, #5
 8010fde:	7cd8      	ldrb	r0, [r3, #19]
 8010fe0:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8010fe4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8010fe8:	bd10      	pop	{r4, pc}
 8010fea:	4910      	ldr	r1, [pc, #64]	; (801102c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8010fec:	8809      	ldrh	r1, [r1, #0]
 8010fee:	4411      	add	r1, r2
 8010ff0:	428b      	cmp	r3, r1
 8010ff2:	da09      	bge.n	8011008 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8010ff4:	1a9b      	subs	r3, r3, r2
 8010ff6:	4a0e      	ldr	r2, [pc, #56]	; (8011030 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8010ff8:	210e      	movs	r1, #14
 8010ffa:	6812      	ldr	r2, [r2, #0]
 8010ffc:	fb01 2303 	mla	r3, r1, r3, r2
 8011000:	7b18      	ldrb	r0, [r3, #12]
 8011002:	f000 001f 	and.w	r0, r0, #31
 8011006:	e7ef      	b.n	8010fe8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8011008:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801100c:	4293      	cmp	r3, r2
 801100e:	d106      	bne.n	801101e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8011010:	f7fb fbb4 	bl	800c77c <_ZN8touchgfx3HAL3lcdEv>
 8011014:	6803      	ldr	r3, [r0, #0]
 8011016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801101a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801101c:	4718      	bx	r3
 801101e:	2000      	movs	r0, #0
 8011020:	e7e2      	b.n	8010fe8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8011022:	bf00      	nop
 8011024:	20024498 	.word	0x20024498
 8011028:	200244a0 	.word	0x200244a0
 801102c:	2002449c 	.word	0x2002449c
 8011030:	20024480 	.word	0x20024480

08011034 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8011034:	2010      	movs	r0, #16
 8011036:	4770      	bx	lr

08011038 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8011038:	2000      	movs	r0, #0
 801103a:	4770      	bx	lr

0801103c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801103c:	4b02      	ldr	r3, [pc, #8]	; (8011048 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801103e:	8818      	ldrh	r0, [r3, #0]
 8011040:	0040      	lsls	r0, r0, #1
 8011042:	b280      	uxth	r0, r0
 8011044:	4770      	bx	lr
 8011046:	bf00      	nop
 8011048:	20024412 	.word	0x20024412

0801104c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801104c:	2bff      	cmp	r3, #255	; 0xff
 801104e:	d050      	beq.n	80110f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8011050:	2a0b      	cmp	r2, #11
 8011052:	d04a      	beq.n	80110ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8011054:	d80e      	bhi.n	8011074 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8011056:	2a03      	cmp	r2, #3
 8011058:	d03f      	beq.n	80110da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801105a:	d804      	bhi.n	8011066 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801105c:	2a01      	cmp	r2, #1
 801105e:	d03e      	beq.n	80110de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8011060:	d93f      	bls.n	80110e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8011062:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8011064:	4770      	bx	lr
 8011066:	2a09      	cmp	r2, #9
 8011068:	d03f      	beq.n	80110ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801106a:	d83c      	bhi.n	80110e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801106c:	2a08      	cmp	r2, #8
 801106e:	d03a      	beq.n	80110e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8011070:	2000      	movs	r0, #0
 8011072:	4770      	bx	lr
 8011074:	2a2f      	cmp	r2, #47	; 0x2f
 8011076:	d024      	beq.n	80110c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8011078:	d80d      	bhi.n	8011096 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801107a:	2a2d      	cmp	r2, #45	; 0x2d
 801107c:	d014      	beq.n	80110a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801107e:	d826      	bhi.n	80110ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8011080:	2a2c      	cmp	r2, #44	; 0x2c
 8011082:	d1f5      	bne.n	8011070 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011084:	684b      	ldr	r3, [r1, #4]
 8011086:	781b      	ldrb	r3, [r3, #0]
 8011088:	2b01      	cmp	r3, #1
 801108a:	d018      	beq.n	80110be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801108c:	d323      	bcc.n	80110d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801108e:	2b02      	cmp	r3, #2
 8011090:	d1ee      	bne.n	8011070 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011092:	6880      	ldr	r0, [r0, #8]
 8011094:	4770      	bx	lr
 8011096:	2a31      	cmp	r2, #49	; 0x31
 8011098:	d004      	beq.n	80110a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801109a:	d328      	bcc.n	80110ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801109c:	2a32      	cmp	r2, #50	; 0x32
 801109e:	d026      	beq.n	80110ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80110a0:	2a33      	cmp	r2, #51	; 0x33
 80110a2:	d1e5      	bne.n	8011070 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80110a4:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80110a6:	4770      	bx	lr
 80110a8:	684b      	ldr	r3, [r1, #4]
 80110aa:	781b      	ldrb	r3, [r3, #0]
 80110ac:	2b01      	cmp	r3, #1
 80110ae:	d004      	beq.n	80110ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80110b0:	d30b      	bcc.n	80110ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80110b2:	2b02      	cmp	r3, #2
 80110b4:	d1dc      	bne.n	8011070 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80110b6:	6900      	ldr	r0, [r0, #16]
 80110b8:	4770      	bx	lr
 80110ba:	6a00      	ldr	r0, [r0, #32]
 80110bc:	4770      	bx	lr
 80110be:	6980      	ldr	r0, [r0, #24]
 80110c0:	4770      	bx	lr
 80110c2:	684b      	ldr	r3, [r1, #4]
 80110c4:	781b      	ldrb	r3, [r3, #0]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d1d2      	bne.n	8011070 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80110ca:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80110cc:	4770      	bx	lr
 80110ce:	684b      	ldr	r3, [r1, #4]
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d1cc      	bne.n	8011070 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80110d6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80110d8:	4770      	bx	lr
 80110da:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80110dc:	4770      	bx	lr
 80110de:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80110e0:	4770      	bx	lr
 80110e2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80110e4:	4770      	bx	lr
 80110e6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80110e8:	4770      	bx	lr
 80110ea:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80110ec:	4770      	bx	lr
 80110ee:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80110f0:	4770      	bx	lr
 80110f2:	2a0b      	cmp	r2, #11
 80110f4:	d049      	beq.n	801118a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80110f6:	d80e      	bhi.n	8011116 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 80110f8:	2a03      	cmp	r2, #3
 80110fa:	d040      	beq.n	801117e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 80110fc:	d804      	bhi.n	8011108 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 80110fe:	2a01      	cmp	r2, #1
 8011100:	d03f      	beq.n	8011182 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8011102:	d940      	bls.n	8011186 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8011104:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8011106:	4770      	bx	lr
 8011108:	2a09      	cmp	r2, #9
 801110a:	d03e      	beq.n	801118a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801110c:	d801      	bhi.n	8011112 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801110e:	2a08      	cmp	r2, #8
 8011110:	d1ae      	bne.n	8011070 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011112:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8011114:	4770      	bx	lr
 8011116:	2a2f      	cmp	r2, #47	; 0x2f
 8011118:	d024      	beq.n	8011164 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801111a:	d80d      	bhi.n	8011138 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801111c:	2a2d      	cmp	r2, #45	; 0x2d
 801111e:	d014      	beq.n	801114a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8011120:	d826      	bhi.n	8011170 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8011122:	2a2c      	cmp	r2, #44	; 0x2c
 8011124:	d1a4      	bne.n	8011070 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011126:	684b      	ldr	r3, [r1, #4]
 8011128:	781b      	ldrb	r3, [r3, #0]
 801112a:	2b01      	cmp	r3, #1
 801112c:	d018      	beq.n	8011160 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801112e:	d324      	bcc.n	801117a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8011130:	2b02      	cmp	r3, #2
 8011132:	d19d      	bne.n	8011070 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011134:	68c0      	ldr	r0, [r0, #12]
 8011136:	4770      	bx	lr
 8011138:	2a31      	cmp	r2, #49	; 0x31
 801113a:	d004      	beq.n	8011146 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801113c:	d327      	bcc.n	801118e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801113e:	2a32      	cmp	r2, #50	; 0x32
 8011140:	d025      	beq.n	801118e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8011142:	2a33      	cmp	r2, #51	; 0x33
 8011144:	d194      	bne.n	8011070 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011146:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8011148:	4770      	bx	lr
 801114a:	684b      	ldr	r3, [r1, #4]
 801114c:	781b      	ldrb	r3, [r3, #0]
 801114e:	2b01      	cmp	r3, #1
 8011150:	d004      	beq.n	801115c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8011152:	d30b      	bcc.n	801116c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8011154:	2b02      	cmp	r3, #2
 8011156:	d18b      	bne.n	8011070 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011158:	6940      	ldr	r0, [r0, #20]
 801115a:	4770      	bx	lr
 801115c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801115e:	4770      	bx	lr
 8011160:	69c0      	ldr	r0, [r0, #28]
 8011162:	4770      	bx	lr
 8011164:	684b      	ldr	r3, [r1, #4]
 8011166:	781b      	ldrb	r3, [r3, #0]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d181      	bne.n	8011070 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801116c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801116e:	4770      	bx	lr
 8011170:	684b      	ldr	r3, [r1, #4]
 8011172:	781b      	ldrb	r3, [r3, #0]
 8011174:	2b00      	cmp	r3, #0
 8011176:	f47f af7b 	bne.w	8011070 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801117a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801117c:	4770      	bx	lr
 801117e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8011180:	4770      	bx	lr
 8011182:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8011184:	4770      	bx	lr
 8011186:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8011188:	4770      	bx	lr
 801118a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801118c:	4770      	bx	lr
 801118e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8011190:	4770      	bx	lr

08011192 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011192:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011196:	b087      	sub	sp, #28
 8011198:	9815      	ldr	r0, [sp, #84]	; 0x54
 801119a:	9205      	str	r2, [sp, #20]
 801119c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80111a0:	9101      	str	r1, [sp, #4]
 80111a2:	9202      	str	r2, [sp, #8]
 80111a4:	6841      	ldr	r1, [r0, #4]
 80111a6:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 80111aa:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80111ae:	fb01 2404 	mla	r4, r1, r4, r2
 80111b2:	6802      	ldr	r2, [r0, #0]
 80111b4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80111b8:	f8de 2000 	ldr.w	r2, [lr]
 80111bc:	9203      	str	r2, [sp, #12]
 80111be:	f8de 2004 	ldr.w	r2, [lr, #4]
 80111c2:	3204      	adds	r2, #4
 80111c4:	9204      	str	r2, [sp, #16]
 80111c6:	9a02      	ldr	r2, [sp, #8]
 80111c8:	43d6      	mvns	r6, r2
 80111ca:	b2f6      	uxtb	r6, r6
 80111cc:	9a01      	ldr	r2, [sp, #4]
 80111ce:	2a00      	cmp	r2, #0
 80111d0:	dc03      	bgt.n	80111da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80111d2:	9a05      	ldr	r2, [sp, #20]
 80111d4:	2a00      	cmp	r2, #0
 80111d6:	f340 8129 	ble.w	801142c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80111da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80111dc:	f9be c008 	ldrsh.w	ip, [lr, #8]
 80111e0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80111e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80111e6:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 80111ea:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	dd0e      	ble.n	8011210 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80111f2:	1408      	asrs	r0, r1, #16
 80111f4:	d405      	bmi.n	8011202 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80111f6:	4560      	cmp	r0, ip
 80111f8:	da03      	bge.n	8011202 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80111fa:	1410      	asrs	r0, r2, #16
 80111fc:	d401      	bmi.n	8011202 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80111fe:	42b8      	cmp	r0, r7
 8011200:	db07      	blt.n	8011212 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8011202:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8011204:	3b01      	subs	r3, #1
 8011206:	3402      	adds	r4, #2
 8011208:	4401      	add	r1, r0
 801120a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801120c:	4402      	add	r2, r0
 801120e:	e7ee      	b.n	80111ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8011210:	d071      	beq.n	80112f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8011212:	1e58      	subs	r0, r3, #1
 8011214:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8011216:	fb05 1500 	mla	r5, r5, r0, r1
 801121a:	142d      	asrs	r5, r5, #16
 801121c:	d45f      	bmi.n	80112de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801121e:	4565      	cmp	r5, ip
 8011220:	da5d      	bge.n	80112de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8011222:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8011224:	fb05 2000 	mla	r0, r5, r0, r2
 8011228:	1400      	asrs	r0, r0, #16
 801122a:	d458      	bmi.n	80112de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801122c:	42b8      	cmp	r0, r7
 801122e:	da56      	bge.n	80112de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8011230:	4699      	mov	r9, r3
 8011232:	46a2      	mov	sl, r4
 8011234:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8011238:	f1b9 0f00 	cmp.w	r9, #0
 801123c:	dd57      	ble.n	80112ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801123e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011242:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8011246:	9803      	ldr	r0, [sp, #12]
 8011248:	140d      	asrs	r5, r1, #16
 801124a:	f109 39ff 	add.w	r9, r9, #4294967295
 801124e:	fb07 000c 	mla	r0, r7, ip, r0
 8011252:	5d40      	ldrb	r0, [r0, r5]
 8011254:	9d04      	ldr	r5, [sp, #16]
 8011256:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801125a:	f8ba 5000 	ldrh.w	r5, [sl]
 801125e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8011262:	122f      	asrs	r7, r5, #8
 8011264:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8011268:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801126c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8011270:	00ed      	lsls	r5, r5, #3
 8011272:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8011276:	fb17 f706 	smulbb	r7, r7, r6
 801127a:	b2ed      	uxtb	r5, r5
 801127c:	fb18 f806 	smulbb	r8, r8, r6
 8011280:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8011284:	10c7      	asrs	r7, r0, #3
 8011286:	fb15 f506 	smulbb	r5, r5, r6
 801128a:	00c0      	lsls	r0, r0, #3
 801128c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8011290:	fa1f fc8c 	uxth.w	ip, ip
 8011294:	b2c0      	uxtb	r0, r0
 8011296:	fb07 870b 	mla	r7, r7, fp, r8
 801129a:	fb00 500b 	mla	r0, r0, fp, r5
 801129e:	f10c 0501 	add.w	r5, ip, #1
 80112a2:	b2bf      	uxth	r7, r7
 80112a4:	b280      	uxth	r0, r0
 80112a6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80112aa:	f107 0801 	add.w	r8, r7, #1
 80112ae:	1c45      	adds	r5, r0, #1
 80112b0:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 80112b4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80112b8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80112bc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80112be:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80112c2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80112c6:	4401      	add	r1, r0
 80112c8:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80112cc:	9814      	ldr	r0, [sp, #80]	; 0x50
 80112ce:	ea45 0c0c 	orr.w	ip, r5, ip
 80112d2:	4402      	add	r2, r0
 80112d4:	ea4c 0c08 	orr.w	ip, ip, r8
 80112d8:	f82a cb02 	strh.w	ip, [sl], #2
 80112dc:	e7ac      	b.n	8011238 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80112de:	f04f 0800 	mov.w	r8, #0
 80112e2:	f8bd a008 	ldrh.w	sl, [sp, #8]
 80112e6:	eb03 0008 	add.w	r0, r3, r8
 80112ea:	2800      	cmp	r0, #0
 80112ec:	dc41      	bgt.n	8011372 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80112ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80112f2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80112f6:	9b01      	ldr	r3, [sp, #4]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	f340 8097 	ble.w	801142c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80112fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011302:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011304:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011308:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801130c:	eef0 6a62 	vmov.f32	s13, s5
 8011310:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011314:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011318:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801131c:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8011320:	eef0 6a43 	vmov.f32	s13, s6
 8011324:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8011328:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801132c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011330:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011334:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011338:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801133c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011340:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011344:	ee12 2a90 	vmov	r2, s5
 8011348:	eef0 2a47 	vmov.f32	s5, s14
 801134c:	fb92 f3f3 	sdiv	r3, r2, r3
 8011350:	ee13 2a10 	vmov	r2, s6
 8011354:	9313      	str	r3, [sp, #76]	; 0x4c
 8011356:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011358:	eeb0 3a67 	vmov.f32	s6, s15
 801135c:	fb92 f3f3 	sdiv	r3, r2, r3
 8011360:	9314      	str	r3, [sp, #80]	; 0x50
 8011362:	9b01      	ldr	r3, [sp, #4]
 8011364:	9a05      	ldr	r2, [sp, #20]
 8011366:	3b01      	subs	r3, #1
 8011368:	9301      	str	r3, [sp, #4]
 801136a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801136c:	bf08      	it	eq
 801136e:	4613      	moveq	r3, r2
 8011370:	e72c      	b.n	80111cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8011372:	140f      	asrs	r7, r1, #16
 8011374:	d453      	bmi.n	801141e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8011376:	f8de 5008 	ldr.w	r5, [lr, #8]
 801137a:	42bd      	cmp	r5, r7
 801137c:	dd4f      	ble.n	801141e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801137e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8011382:	d44c      	bmi.n	801141e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8011384:	f8de 000c 	ldr.w	r0, [lr, #12]
 8011388:	4560      	cmp	r0, ip
 801138a:	dd48      	ble.n	801141e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801138c:	9803      	ldr	r0, [sp, #12]
 801138e:	b22d      	sxth	r5, r5
 8011390:	fb0c 0505 	mla	r5, ip, r5, r0
 8011394:	5de8      	ldrb	r0, [r5, r7]
 8011396:	9d04      	ldr	r5, [sp, #16]
 8011398:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801139c:	f06f 0501 	mvn.w	r5, #1
 80113a0:	fb05 fb08 	mul.w	fp, r5, r8
 80113a4:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80113a8:	f834 500b 	ldrh.w	r5, [r4, fp]
 80113ac:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80113b0:	122f      	asrs	r7, r5, #8
 80113b2:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80113b6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80113ba:	00ed      	lsls	r5, r5, #3
 80113bc:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80113c0:	fb17 f706 	smulbb	r7, r7, r6
 80113c4:	b2ed      	uxtb	r5, r5
 80113c6:	fb19 f906 	smulbb	r9, r9, r6
 80113ca:	fb0c 7c0a 	mla	ip, ip, sl, r7
 80113ce:	10c7      	asrs	r7, r0, #3
 80113d0:	fb15 f506 	smulbb	r5, r5, r6
 80113d4:	00c0      	lsls	r0, r0, #3
 80113d6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80113da:	fa1f fc8c 	uxth.w	ip, ip
 80113de:	b2c0      	uxtb	r0, r0
 80113e0:	fb07 970a 	mla	r7, r7, sl, r9
 80113e4:	fb00 500a 	mla	r0, r0, sl, r5
 80113e8:	f10c 0501 	add.w	r5, ip, #1
 80113ec:	b2bf      	uxth	r7, r7
 80113ee:	b280      	uxth	r0, r0
 80113f0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80113f4:	f107 0901 	add.w	r9, r7, #1
 80113f8:	1c45      	adds	r5, r0, #1
 80113fa:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 80113fe:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8011402:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8011406:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801140a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801140e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8011412:	ea45 0c0c 	orr.w	ip, r5, ip
 8011416:	ea4c 0c09 	orr.w	ip, ip, r9
 801141a:	f824 c00b 	strh.w	ip, [r4, fp]
 801141e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8011420:	f108 38ff 	add.w	r8, r8, #4294967295
 8011424:	4401      	add	r1, r0
 8011426:	9814      	ldr	r0, [sp, #80]	; 0x50
 8011428:	4402      	add	r2, r0
 801142a:	e75c      	b.n	80112e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801142c:	b007      	add	sp, #28
 801142e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011432 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011432:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011436:	b085      	sub	sp, #20
 8011438:	4693      	mov	fp, r2
 801143a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801143e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8011440:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8011442:	6870      	ldr	r0, [r6, #4]
 8011444:	9100      	str	r1, [sp, #0]
 8011446:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801144a:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801144e:	fb00 2404 	mla	r4, r0, r4, r2
 8011452:	6832      	ldr	r2, [r6, #0]
 8011454:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8011458:	682a      	ldr	r2, [r5, #0]
 801145a:	9201      	str	r2, [sp, #4]
 801145c:	686a      	ldr	r2, [r5, #4]
 801145e:	3204      	adds	r2, #4
 8011460:	9202      	str	r2, [sp, #8]
 8011462:	9a00      	ldr	r2, [sp, #0]
 8011464:	2a00      	cmp	r2, #0
 8011466:	dc03      	bgt.n	8011470 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8011468:	f1bb 0f00 	cmp.w	fp, #0
 801146c:	f340 80a0 	ble.w	80115b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8011470:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011472:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8011476:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801147a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801147c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8011480:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8011484:	2b00      	cmp	r3, #0
 8011486:	dd0c      	ble.n	80114a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8011488:	1406      	asrs	r6, r0, #16
 801148a:	d405      	bmi.n	8011498 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801148c:	454e      	cmp	r6, r9
 801148e:	da03      	bge.n	8011498 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8011490:	1416      	asrs	r6, r2, #16
 8011492:	d401      	bmi.n	8011498 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8011494:	4546      	cmp	r6, r8
 8011496:	db05      	blt.n	80114a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8011498:	4470      	add	r0, lr
 801149a:	4462      	add	r2, ip
 801149c:	3b01      	subs	r3, #1
 801149e:	3402      	adds	r4, #2
 80114a0:	e7f0      	b.n	8011484 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80114a2:	d00f      	beq.n	80114c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80114a4:	1e5e      	subs	r6, r3, #1
 80114a6:	fb0e 0706 	mla	r7, lr, r6, r0
 80114aa:	143f      	asrs	r7, r7, #16
 80114ac:	d541      	bpl.n	8011532 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 80114ae:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 80114b2:	4698      	mov	r8, r3
 80114b4:	9603      	str	r6, [sp, #12]
 80114b6:	f1b8 0f00 	cmp.w	r8, #0
 80114ba:	dc59      	bgt.n	8011570 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80114bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80114c0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80114c4:	9b00      	ldr	r3, [sp, #0]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	dd72      	ble.n	80115b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 80114ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 80114ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114d0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80114d4:	eeb0 6a62 	vmov.f32	s12, s5
 80114d8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80114dc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80114e0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80114e4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80114e8:	eeb0 6a43 	vmov.f32	s12, s6
 80114ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80114f0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80114f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80114f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80114fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011500:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011504:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011508:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801150c:	ee12 2a90 	vmov	r2, s5
 8011510:	eef0 2a47 	vmov.f32	s5, s14
 8011514:	fb92 fef3 	sdiv	lr, r2, r3
 8011518:	ee13 2a10 	vmov	r2, s6
 801151c:	eeb0 3a67 	vmov.f32	s6, s15
 8011520:	fb92 fcf3 	sdiv	ip, r2, r3
 8011524:	9b00      	ldr	r3, [sp, #0]
 8011526:	3b01      	subs	r3, #1
 8011528:	9300      	str	r3, [sp, #0]
 801152a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801152c:	bf08      	it	eq
 801152e:	465b      	moveq	r3, fp
 8011530:	e797      	b.n	8011462 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8011532:	454f      	cmp	r7, r9
 8011534:	dabb      	bge.n	80114ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8011536:	fb0c 2606 	mla	r6, ip, r6, r2
 801153a:	1436      	asrs	r6, r6, #16
 801153c:	d4b7      	bmi.n	80114ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801153e:	4546      	cmp	r6, r8
 8011540:	dab5      	bge.n	80114ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8011542:	461e      	mov	r6, r3
 8011544:	46a0      	mov	r8, r4
 8011546:	2e00      	cmp	r6, #0
 8011548:	ddb8      	ble.n	80114bc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801154a:	1417      	asrs	r7, r2, #16
 801154c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8011550:	9901      	ldr	r1, [sp, #4]
 8011552:	ea4f 4920 	mov.w	r9, r0, asr #16
 8011556:	4462      	add	r2, ip
 8011558:	4470      	add	r0, lr
 801155a:	fb0a 1707 	mla	r7, sl, r7, r1
 801155e:	9902      	ldr	r1, [sp, #8]
 8011560:	3e01      	subs	r6, #1
 8011562:	f817 7009 	ldrb.w	r7, [r7, r9]
 8011566:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801156a:	f828 7b02 	strh.w	r7, [r8], #2
 801156e:	e7ea      	b.n	8011546 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8011570:	ea5f 4920 	movs.w	r9, r0, asr #16
 8011574:	d417      	bmi.n	80115a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8011576:	68ae      	ldr	r6, [r5, #8]
 8011578:	454e      	cmp	r6, r9
 801157a:	dd14      	ble.n	80115a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801157c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8011580:	d411      	bmi.n	80115a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8011582:	68ef      	ldr	r7, [r5, #12]
 8011584:	4557      	cmp	r7, sl
 8011586:	dd0e      	ble.n	80115a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8011588:	9f01      	ldr	r7, [sp, #4]
 801158a:	b236      	sxth	r6, r6
 801158c:	f06f 0101 	mvn.w	r1, #1
 8011590:	fb0a 7606 	mla	r6, sl, r6, r7
 8011594:	9f02      	ldr	r7, [sp, #8]
 8011596:	f816 6009 	ldrb.w	r6, [r6, r9]
 801159a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801159e:	fb01 f608 	mul.w	r6, r1, r8
 80115a2:	9903      	ldr	r1, [sp, #12]
 80115a4:	538f      	strh	r7, [r1, r6]
 80115a6:	4470      	add	r0, lr
 80115a8:	4462      	add	r2, ip
 80115aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80115ae:	e782      	b.n	80114b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80115b0:	b005      	add	sp, #20
 80115b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080115b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80115b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115ba:	b087      	sub	sp, #28
 80115bc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80115be:	9205      	str	r2, [sp, #20]
 80115c0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80115c4:	9102      	str	r1, [sp, #8]
 80115c6:	9203      	str	r2, [sp, #12]
 80115c8:	6861      	ldr	r1, [r4, #4]
 80115ca:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80115ce:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 80115d2:	fb01 2000 	mla	r0, r1, r0, r2
 80115d6:	6822      	ldr	r2, [r4, #0]
 80115d8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80115dc:	9200      	str	r2, [sp, #0]
 80115de:	f8dc 2000 	ldr.w	r2, [ip]
 80115e2:	9204      	str	r2, [sp, #16]
 80115e4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80115e8:	3204      	adds	r2, #4
 80115ea:	9201      	str	r2, [sp, #4]
 80115ec:	9a03      	ldr	r2, [sp, #12]
 80115ee:	43d5      	mvns	r5, r2
 80115f0:	b2ed      	uxtb	r5, r5
 80115f2:	9a02      	ldr	r2, [sp, #8]
 80115f4:	2a00      	cmp	r2, #0
 80115f6:	dc03      	bgt.n	8011600 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80115f8:	9a05      	ldr	r2, [sp, #20]
 80115fa:	2a00      	cmp	r2, #0
 80115fc:	f340 812c 	ble.w	8011858 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8011600:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011602:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8011606:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801160a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801160c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8011610:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8011614:	2b00      	cmp	r3, #0
 8011616:	dd10      	ble.n	801163a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8011618:	140c      	asrs	r4, r1, #16
 801161a:	d405      	bmi.n	8011628 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801161c:	4574      	cmp	r4, lr
 801161e:	da03      	bge.n	8011628 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8011620:	1414      	asrs	r4, r2, #16
 8011622:	d401      	bmi.n	8011628 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8011624:	42bc      	cmp	r4, r7
 8011626:	db09      	blt.n	801163c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8011628:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801162a:	3b01      	subs	r3, #1
 801162c:	9800      	ldr	r0, [sp, #0]
 801162e:	4421      	add	r1, r4
 8011630:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8011632:	3002      	adds	r0, #2
 8011634:	4422      	add	r2, r4
 8011636:	9000      	str	r0, [sp, #0]
 8011638:	e7ec      	b.n	8011614 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801163a:	d071      	beq.n	8011720 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801163c:	1e5c      	subs	r4, r3, #1
 801163e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8011640:	fb06 1604 	mla	r6, r6, r4, r1
 8011644:	1436      	asrs	r6, r6, #16
 8011646:	d45d      	bmi.n	8011704 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8011648:	4576      	cmp	r6, lr
 801164a:	da5b      	bge.n	8011704 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801164c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801164e:	fb06 2404 	mla	r4, r6, r4, r2
 8011652:	1424      	asrs	r4, r4, #16
 8011654:	d456      	bmi.n	8011704 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8011656:	42bc      	cmp	r4, r7
 8011658:	da54      	bge.n	8011704 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801165a:	4698      	mov	r8, r3
 801165c:	f8dd 9000 	ldr.w	r9, [sp]
 8011660:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8011664:	f1b8 0f00 	cmp.w	r8, #0
 8011668:	dd54      	ble.n	8011714 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801166a:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801166e:	1414      	asrs	r4, r2, #16
 8011670:	9804      	ldr	r0, [sp, #16]
 8011672:	140e      	asrs	r6, r1, #16
 8011674:	f108 38ff 	add.w	r8, r8, #4294967295
 8011678:	fb07 0404 	mla	r4, r7, r4, r0
 801167c:	9801      	ldr	r0, [sp, #4]
 801167e:	f814 e006 	ldrb.w	lr, [r4, r6]
 8011682:	f8b9 4000 	ldrh.w	r4, [r9]
 8011686:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801168a:	1227      	asrs	r7, r4, #8
 801168c:	eb00 0b0e 	add.w	fp, r0, lr
 8011690:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8011694:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8011698:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801169a:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801169e:	f89b b001 	ldrb.w	fp, [fp, #1]
 80116a2:	4401      	add	r1, r0
 80116a4:	fb16 f60a 	smulbb	r6, r6, sl
 80116a8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80116aa:	fb1b fb0a 	smulbb	fp, fp, sl
 80116ae:	fb07 6705 	mla	r7, r7, r5, r6
 80116b2:	10e6      	asrs	r6, r4, #3
 80116b4:	00e4      	lsls	r4, r4, #3
 80116b6:	4402      	add	r2, r0
 80116b8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80116bc:	b2bf      	uxth	r7, r7
 80116be:	b2e4      	uxtb	r4, r4
 80116c0:	fb06 b605 	mla	r6, r6, r5, fp
 80116c4:	fb14 f405 	smulbb	r4, r4, r5
 80116c8:	b2b6      	uxth	r6, r6
 80116ca:	fb0e 4e0a 	mla	lr, lr, sl, r4
 80116ce:	1c7c      	adds	r4, r7, #1
 80116d0:	f106 0b01 	add.w	fp, r6, #1
 80116d4:	fa1f fe8e 	uxth.w	lr, lr
 80116d8:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 80116dc:	f10e 0401 	add.w	r4, lr, #1
 80116e0:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80116e4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80116e8:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 80116ec:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80116f0:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80116f4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80116f8:	4327      	orrs	r7, r4
 80116fa:	ea47 070b 	orr.w	r7, r7, fp
 80116fe:	f829 7b02 	strh.w	r7, [r9], #2
 8011702:	e7af      	b.n	8011664 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8011704:	f04f 0e00 	mov.w	lr, #0
 8011708:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801170c:	eb03 040e 	add.w	r4, r3, lr
 8011710:	2c00      	cmp	r4, #0
 8011712:	dc43      	bgt.n	801179c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8011714:	9a00      	ldr	r2, [sp, #0]
 8011716:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801171a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801171e:	9300      	str	r3, [sp, #0]
 8011720:	9b02      	ldr	r3, [sp, #8]
 8011722:	2b00      	cmp	r3, #0
 8011724:	f340 8098 	ble.w	8011858 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8011728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801172c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801172e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011732:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011736:	eef0 6a62 	vmov.f32	s13, s5
 801173a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801173e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011742:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8011746:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801174a:	eef0 6a43 	vmov.f32	s13, s6
 801174e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8011752:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8011756:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801175a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801175e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011762:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011766:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801176a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801176e:	ee12 2a90 	vmov	r2, s5
 8011772:	eef0 2a47 	vmov.f32	s5, s14
 8011776:	fb92 f3f3 	sdiv	r3, r2, r3
 801177a:	ee13 2a10 	vmov	r2, s6
 801177e:	9313      	str	r3, [sp, #76]	; 0x4c
 8011780:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011782:	eeb0 3a67 	vmov.f32	s6, s15
 8011786:	fb92 f3f3 	sdiv	r3, r2, r3
 801178a:	9314      	str	r3, [sp, #80]	; 0x50
 801178c:	9b02      	ldr	r3, [sp, #8]
 801178e:	9a05      	ldr	r2, [sp, #20]
 8011790:	3b01      	subs	r3, #1
 8011792:	9302      	str	r3, [sp, #8]
 8011794:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011796:	bf08      	it	eq
 8011798:	4613      	moveq	r3, r2
 801179a:	e72a      	b.n	80115f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801179c:	140f      	asrs	r7, r1, #16
 801179e:	d454      	bmi.n	801184a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80117a0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80117a4:	42be      	cmp	r6, r7
 80117a6:	dd50      	ble.n	801184a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80117a8:	ea5f 4822 	movs.w	r8, r2, asr #16
 80117ac:	d44d      	bmi.n	801184a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80117ae:	f8dc 400c 	ldr.w	r4, [ip, #12]
 80117b2:	4544      	cmp	r4, r8
 80117b4:	dd49      	ble.n	801184a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80117b6:	9c04      	ldr	r4, [sp, #16]
 80117b8:	b236      	sxth	r6, r6
 80117ba:	f06f 0001 	mvn.w	r0, #1
 80117be:	fb08 4606 	mla	r6, r8, r6, r4
 80117c2:	9c01      	ldr	r4, [sp, #4]
 80117c4:	fb00 fa0e 	mul.w	sl, r0, lr
 80117c8:	9800      	ldr	r0, [sp, #0]
 80117ca:	f816 8007 	ldrb.w	r8, [r6, r7]
 80117ce:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80117d2:	eb04 0b08 	add.w	fp, r4, r8
 80117d6:	f830 400a 	ldrh.w	r4, [r0, sl]
 80117da:	9801      	ldr	r0, [sp, #4]
 80117dc:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80117e0:	1227      	asrs	r7, r4, #8
 80117e2:	f89b b001 	ldrb.w	fp, [fp, #1]
 80117e6:	fb16 f609 	smulbb	r6, r6, r9
 80117ea:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80117ee:	f810 8008 	ldrb.w	r8, [r0, r8]
 80117f2:	fb1b fb09 	smulbb	fp, fp, r9
 80117f6:	fb07 6705 	mla	r7, r7, r5, r6
 80117fa:	10e6      	asrs	r6, r4, #3
 80117fc:	00e4      	lsls	r4, r4, #3
 80117fe:	9800      	ldr	r0, [sp, #0]
 8011800:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8011804:	b2bf      	uxth	r7, r7
 8011806:	b2e4      	uxtb	r4, r4
 8011808:	fb06 b605 	mla	r6, r6, r5, fp
 801180c:	fb14 f405 	smulbb	r4, r4, r5
 8011810:	b2b6      	uxth	r6, r6
 8011812:	fb08 4809 	mla	r8, r8, r9, r4
 8011816:	1c7c      	adds	r4, r7, #1
 8011818:	f106 0b01 	add.w	fp, r6, #1
 801181c:	fa1f f888 	uxth.w	r8, r8
 8011820:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8011824:	f108 0401 	add.w	r4, r8, #1
 8011828:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801182c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8011830:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 8011834:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8011838:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801183c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8011840:	4327      	orrs	r7, r4
 8011842:	ea47 070b 	orr.w	r7, r7, fp
 8011846:	f820 700a 	strh.w	r7, [r0, sl]
 801184a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801184c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011850:	4401      	add	r1, r0
 8011852:	9814      	ldr	r0, [sp, #80]	; 0x50
 8011854:	4402      	add	r2, r0
 8011856:	e759      	b.n	801170c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8011858:	b007      	add	sp, #28
 801185a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08011860 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011864:	b085      	sub	sp, #20
 8011866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801186a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801186c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801186e:	9203      	str	r2, [sp, #12]
 8011870:	6870      	ldr	r0, [r6, #4]
 8011872:	686f      	ldr	r7, [r5, #4]
 8011874:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8011878:	3704      	adds	r7, #4
 801187a:	9101      	str	r1, [sp, #4]
 801187c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8011880:	fb00 2404 	mla	r4, r0, r4, r2
 8011884:	6832      	ldr	r2, [r6, #0]
 8011886:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801188a:	682a      	ldr	r2, [r5, #0]
 801188c:	9202      	str	r2, [sp, #8]
 801188e:	9a01      	ldr	r2, [sp, #4]
 8011890:	2a00      	cmp	r2, #0
 8011892:	dc03      	bgt.n	801189c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8011894:	9a03      	ldr	r2, [sp, #12]
 8011896:	2a00      	cmp	r2, #0
 8011898:	f340 80cc 	ble.w	8011a34 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801189c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801189e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80118a2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80118a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80118a8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80118ac:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	dd0d      	ble.n	80118d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80118b4:	1406      	asrs	r6, r0, #16
 80118b6:	d405      	bmi.n	80118c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80118b8:	454e      	cmp	r6, r9
 80118ba:	da03      	bge.n	80118c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80118bc:	1416      	asrs	r6, r2, #16
 80118be:	d401      	bmi.n	80118c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80118c0:	4546      	cmp	r6, r8
 80118c2:	db06      	blt.n	80118d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80118c4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80118c6:	4460      	add	r0, ip
 80118c8:	3b01      	subs	r3, #1
 80118ca:	3402      	adds	r4, #2
 80118cc:	4432      	add	r2, r6
 80118ce:	e7ef      	b.n	80118b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80118d0:	d00f      	beq.n	80118f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80118d2:	1e5e      	subs	r6, r3, #1
 80118d4:	fb0c 0e06 	mla	lr, ip, r6, r0
 80118d8:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 80118dc:	d543      	bpl.n	8011966 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 80118de:	4698      	mov	r8, r3
 80118e0:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 80118e4:	f1b8 0f00 	cmp.w	r8, #0
 80118e8:	dc71      	bgt.n	80119ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 80118ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80118ee:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80118f2:	9b01      	ldr	r3, [sp, #4]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	f340 809d 	ble.w	8011a34 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80118fa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80118fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011900:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011904:	eeb0 6a62 	vmov.f32	s12, s5
 8011908:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801190c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011910:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011914:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8011918:	eeb0 6a43 	vmov.f32	s12, s6
 801191c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011920:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8011924:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011928:	ee61 7a27 	vmul.f32	s15, s2, s15
 801192c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011930:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011934:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011938:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801193c:	ee12 2a90 	vmov	r2, s5
 8011940:	eef0 2a47 	vmov.f32	s5, s14
 8011944:	fb92 fcf3 	sdiv	ip, r2, r3
 8011948:	ee13 2a10 	vmov	r2, s6
 801194c:	eeb0 3a67 	vmov.f32	s6, s15
 8011950:	fb92 f3f3 	sdiv	r3, r2, r3
 8011954:	9312      	str	r3, [sp, #72]	; 0x48
 8011956:	9b01      	ldr	r3, [sp, #4]
 8011958:	9a03      	ldr	r2, [sp, #12]
 801195a:	3b01      	subs	r3, #1
 801195c:	9301      	str	r3, [sp, #4]
 801195e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011960:	bf08      	it	eq
 8011962:	4613      	moveq	r3, r2
 8011964:	e793      	b.n	801188e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8011966:	45ce      	cmp	lr, r9
 8011968:	dab9      	bge.n	80118de <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801196a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801196c:	fb01 2606 	mla	r6, r1, r6, r2
 8011970:	1436      	asrs	r6, r6, #16
 8011972:	d4b4      	bmi.n	80118de <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8011974:	4546      	cmp	r6, r8
 8011976:	dab2      	bge.n	80118de <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8011978:	4698      	mov	r8, r3
 801197a:	46a2      	mov	sl, r4
 801197c:	f1b8 0f00 	cmp.w	r8, #0
 8011980:	ddb3      	ble.n	80118ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8011982:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8011986:	1416      	asrs	r6, r2, #16
 8011988:	9902      	ldr	r1, [sp, #8]
 801198a:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801198e:	f108 38ff 	add.w	r8, r8, #4294967295
 8011992:	4460      	add	r0, ip
 8011994:	fb09 1606 	mla	r6, r9, r6, r1
 8011998:	4928      	ldr	r1, [pc, #160]	; (8011a3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801199a:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801199e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80119a2:	eb07 0b0e 	add.w	fp, r7, lr
 80119a6:	f89b 6001 	ldrb.w	r6, [fp, #1]
 80119aa:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80119ae:	00f6      	lsls	r6, r6, #3
 80119b0:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 80119b4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80119b6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80119ba:	440a      	add	r2, r1
 80119bc:	ea49 0606 	orr.w	r6, r9, r6
 80119c0:	f817 900e 	ldrb.w	r9, [r7, lr]
 80119c4:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 80119c8:	f82a 6b02 	strh.w	r6, [sl], #2
 80119cc:	e7d6      	b.n	801197c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80119ce:	ea5f 4920 	movs.w	r9, r0, asr #16
 80119d2:	d429      	bmi.n	8011a28 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80119d4:	68ae      	ldr	r6, [r5, #8]
 80119d6:	454e      	cmp	r6, r9
 80119d8:	dd26      	ble.n	8011a28 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80119da:	ea5f 4b22 	movs.w	fp, r2, asr #16
 80119de:	d423      	bmi.n	8011a28 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80119e0:	68e9      	ldr	r1, [r5, #12]
 80119e2:	4559      	cmp	r1, fp
 80119e4:	dd20      	ble.n	8011a28 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80119e6:	fa0f fe86 	sxth.w	lr, r6
 80119ea:	9902      	ldr	r1, [sp, #8]
 80119ec:	fb0b 1e0e 	mla	lr, fp, lr, r1
 80119f0:	f06f 0101 	mvn.w	r1, #1
 80119f4:	f81e e009 	ldrb.w	lr, [lr, r9]
 80119f8:	fb01 f908 	mul.w	r9, r1, r8
 80119fc:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 8011a00:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8011a04:	eb07 060e 	add.w	r6, r7, lr
 8011a08:	f896 b002 	ldrb.w	fp, [r6, #2]
 8011a0c:	7876      	ldrb	r6, [r6, #1]
 8011a0e:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 8011a12:	00f6      	lsls	r6, r6, #3
 8011a14:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8011a18:	ea4b 0606 	orr.w	r6, fp, r6
 8011a1c:	f817 b00e 	ldrb.w	fp, [r7, lr]
 8011a20:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 8011a24:	f82a 6009 	strh.w	r6, [sl, r9]
 8011a28:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011a2a:	4460      	add	r0, ip
 8011a2c:	f108 38ff 	add.w	r8, r8, #4294967295
 8011a30:	440a      	add	r2, r1
 8011a32:	e757      	b.n	80118e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8011a34:	b005      	add	sp, #20
 8011a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a3a:	bf00      	nop
 8011a3c:	fffff800 	.word	0xfffff800

08011a40 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a44:	b087      	sub	sp, #28
 8011a46:	468b      	mov	fp, r1
 8011a48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011a4c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011a4e:	9204      	str	r2, [sp, #16]
 8011a50:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8011a54:	6841      	ldr	r1, [r0, #4]
 8011a56:	9205      	str	r2, [sp, #20]
 8011a58:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8011a5c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8011a60:	fb01 2404 	mla	r4, r1, r4, r2
 8011a64:	6802      	ldr	r2, [r0, #0]
 8011a66:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8011a6a:	f8dc 2000 	ldr.w	r2, [ip]
 8011a6e:	9201      	str	r2, [sp, #4]
 8011a70:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8011a74:	3204      	adds	r2, #4
 8011a76:	9202      	str	r2, [sp, #8]
 8011a78:	f1bb 0f00 	cmp.w	fp, #0
 8011a7c:	dc03      	bgt.n	8011a86 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8011a7e:	9a04      	ldr	r2, [sp, #16]
 8011a80:	2a00      	cmp	r2, #0
 8011a82:	f340 8138 	ble.w	8011cf6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8011a86:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011a88:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8011a8c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8011a90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011a92:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 8011a96:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	dd0e      	ble.n	8011abc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8011a9e:	1402      	asrs	r2, r0, #16
 8011aa0:	d405      	bmi.n	8011aae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8011aa2:	42ba      	cmp	r2, r7
 8011aa4:	da03      	bge.n	8011aae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8011aa6:	140a      	asrs	r2, r1, #16
 8011aa8:	d401      	bmi.n	8011aae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8011aaa:	42b2      	cmp	r2, r6
 8011aac:	db07      	blt.n	8011abe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8011aae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011ab0:	3b01      	subs	r3, #1
 8011ab2:	3402      	adds	r4, #2
 8011ab4:	4410      	add	r0, r2
 8011ab6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011ab8:	4411      	add	r1, r2
 8011aba:	e7ee      	b.n	8011a9a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8011abc:	d019      	beq.n	8011af2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8011abe:	1e5a      	subs	r2, r3, #1
 8011ac0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8011ac2:	fb05 0502 	mla	r5, r5, r2, r0
 8011ac6:	142d      	asrs	r5, r5, #16
 8011ac8:	d409      	bmi.n	8011ade <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8011aca:	42bd      	cmp	r5, r7
 8011acc:	da07      	bge.n	8011ade <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8011ace:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8011ad0:	fb05 1202 	mla	r2, r5, r2, r1
 8011ad4:	1412      	asrs	r2, r2, #16
 8011ad6:	d402      	bmi.n	8011ade <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8011ad8:	42b2      	cmp	r2, r6
 8011ada:	f2c0 80ac 	blt.w	8011c36 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8011ade:	f04f 0e00 	mov.w	lr, #0
 8011ae2:	eb03 020e 	add.w	r2, r3, lr
 8011ae6:	2a00      	cmp	r2, #0
 8011ae8:	dc3e      	bgt.n	8011b68 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8011aea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011aee:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8011af2:	f1bb 0f00 	cmp.w	fp, #0
 8011af6:	f340 80fe 	ble.w	8011cf6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8011afa:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011afe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011b00:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011b04:	f1bb 0b01 	subs.w	fp, fp, #1
 8011b08:	eeb0 6a62 	vmov.f32	s12, s5
 8011b0c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011b10:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011b14:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011b18:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8011b1c:	eeb0 6a43 	vmov.f32	s12, s6
 8011b20:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011b24:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8011b28:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011b2c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011b30:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011b34:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011b38:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011b3c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011b40:	ee12 2a90 	vmov	r2, s5
 8011b44:	eef0 2a47 	vmov.f32	s5, s14
 8011b48:	fb92 f3f3 	sdiv	r3, r2, r3
 8011b4c:	ee13 2a10 	vmov	r2, s6
 8011b50:	9313      	str	r3, [sp, #76]	; 0x4c
 8011b52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011b54:	eeb0 3a67 	vmov.f32	s6, s15
 8011b58:	fb92 f3f3 	sdiv	r3, r2, r3
 8011b5c:	9a04      	ldr	r2, [sp, #16]
 8011b5e:	9314      	str	r3, [sp, #80]	; 0x50
 8011b60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011b62:	bf08      	it	eq
 8011b64:	4613      	moveq	r3, r2
 8011b66:	e787      	b.n	8011a78 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8011b68:	1406      	asrs	r6, r0, #16
 8011b6a:	d45d      	bmi.n	8011c28 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8011b6c:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8011b70:	42b5      	cmp	r5, r6
 8011b72:	dd59      	ble.n	8011c28 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8011b74:	140f      	asrs	r7, r1, #16
 8011b76:	d457      	bmi.n	8011c28 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8011b78:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8011b7c:	42ba      	cmp	r2, r7
 8011b7e:	dd53      	ble.n	8011c28 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8011b80:	9a01      	ldr	r2, [sp, #4]
 8011b82:	b22d      	sxth	r5, r5
 8011b84:	fb07 2505 	mla	r5, r7, r5, r2
 8011b88:	5daa      	ldrb	r2, [r5, r6]
 8011b8a:	9d02      	ldr	r5, [sp, #8]
 8011b8c:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8011b90:	0e2e      	lsrs	r6, r5, #24
 8011b92:	d049      	beq.n	8011c28 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8011b94:	f06f 0201 	mvn.w	r2, #1
 8011b98:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8011b9c:	fb02 f20e 	mul.w	r2, r2, lr
 8011ba0:	f834 8002 	ldrh.w	r8, [r4, r2]
 8011ba4:	9203      	str	r2, [sp, #12]
 8011ba6:	9a05      	ldr	r2, [sp, #20]
 8011ba8:	ea4f 2728 	mov.w	r7, r8, asr #8
 8011bac:	4356      	muls	r6, r2
 8011bae:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8011bb2:	1c72      	adds	r2, r6, #1
 8011bb4:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8011bb8:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8011bbc:	b2ed      	uxtb	r5, r5
 8011bbe:	1212      	asrs	r2, r2, #8
 8011bc0:	fa1f f982 	uxth.w	r9, r2
 8011bc4:	43d2      	mvns	r2, r2
 8011bc6:	fb16 f609 	smulbb	r6, r6, r9
 8011bca:	b2d2      	uxtb	r2, r2
 8011bcc:	fb15 f509 	smulbb	r5, r5, r9
 8011bd0:	fb07 6702 	mla	r7, r7, r2, r6
 8011bd4:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8011bd8:	fb1a fa09 	smulbb	sl, sl, r9
 8011bdc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8011be0:	b2bf      	uxth	r7, r7
 8011be2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8011be6:	fa5f f888 	uxtb.w	r8, r8
 8011bea:	fb06 a602 	mla	r6, r6, r2, sl
 8011bee:	fb08 5502 	mla	r5, r8, r2, r5
 8011bf2:	1c7a      	adds	r2, r7, #1
 8011bf4:	b2b6      	uxth	r6, r6
 8011bf6:	b2ad      	uxth	r5, r5
 8011bf8:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8011bfc:	9a03      	ldr	r2, [sp, #12]
 8011bfe:	f105 0a01 	add.w	sl, r5, #1
 8011c02:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8011c06:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8011c0a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8011c0e:	ea4a 0707 	orr.w	r7, sl, r7
 8011c12:	f106 0a01 	add.w	sl, r6, #1
 8011c16:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8011c1a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8011c1e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8011c22:	ea47 070a 	orr.w	r7, r7, sl
 8011c26:	52a7      	strh	r7, [r4, r2]
 8011c28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011c2a:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011c2e:	4410      	add	r0, r2
 8011c30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011c32:	4411      	add	r1, r2
 8011c34:	e755      	b.n	8011ae2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8011c36:	f04f 0800 	mov.w	r8, #0
 8011c3a:	eba3 0208 	sub.w	r2, r3, r8
 8011c3e:	2a00      	cmp	r2, #0
 8011c40:	f77f af53 	ble.w	8011aea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8011c44:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8011c48:	140a      	asrs	r2, r1, #16
 8011c4a:	9f01      	ldr	r7, [sp, #4]
 8011c4c:	1405      	asrs	r5, r0, #16
 8011c4e:	fb06 7202 	mla	r2, r6, r2, r7
 8011c52:	5d52      	ldrb	r2, [r2, r5]
 8011c54:	9d02      	ldr	r5, [sp, #8]
 8011c56:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8011c5a:	0e2e      	lsrs	r6, r5, #24
 8011c5c:	d044      	beq.n	8011ce8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8011c5e:	9a05      	ldr	r2, [sp, #20]
 8011c60:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8011c64:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8011c68:	4356      	muls	r6, r2
 8011c6a:	ea4f 272e 	mov.w	r7, lr, asr #8
 8011c6e:	1c72      	adds	r2, r6, #1
 8011c70:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8011c74:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8011c78:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8011c7c:	b2ed      	uxtb	r5, r5
 8011c7e:	1212      	asrs	r2, r2, #8
 8011c80:	fa1f f982 	uxth.w	r9, r2
 8011c84:	43d2      	mvns	r2, r2
 8011c86:	fb16 f609 	smulbb	r6, r6, r9
 8011c8a:	b2d2      	uxtb	r2, r2
 8011c8c:	fb15 f509 	smulbb	r5, r5, r9
 8011c90:	fb07 6702 	mla	r7, r7, r2, r6
 8011c94:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8011c98:	fb1a fa09 	smulbb	sl, sl, r9
 8011c9c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8011ca0:	b2bf      	uxth	r7, r7
 8011ca2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8011ca6:	fa5f fe8e 	uxtb.w	lr, lr
 8011caa:	fb06 a602 	mla	r6, r6, r2, sl
 8011cae:	fb0e 5502 	mla	r5, lr, r2, r5
 8011cb2:	1c7a      	adds	r2, r7, #1
 8011cb4:	b2b6      	uxth	r6, r6
 8011cb6:	b2ad      	uxth	r5, r5
 8011cb8:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8011cbc:	f105 0a01 	add.w	sl, r5, #1
 8011cc0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8011cc4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8011cc8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8011ccc:	ea4a 0707 	orr.w	r7, sl, r7
 8011cd0:	f106 0a01 	add.w	sl, r6, #1
 8011cd4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8011cd8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8011cdc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8011ce0:	ea47 070a 	orr.w	r7, r7, sl
 8011ce4:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8011ce8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011cea:	f108 0801 	add.w	r8, r8, #1
 8011cee:	4410      	add	r0, r2
 8011cf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011cf2:	4411      	add	r1, r2
 8011cf4:	e7a1      	b.n	8011c3a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8011cf6:	b007      	add	sp, #28
 8011cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011cfc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d00:	b085      	sub	sp, #20
 8011d02:	468b      	mov	fp, r1
 8011d04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011d08:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8011d0a:	9203      	str	r2, [sp, #12]
 8011d0c:	6841      	ldr	r1, [r0, #4]
 8011d0e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8011d12:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8011d16:	fb01 2404 	mla	r4, r1, r4, r2
 8011d1a:	6802      	ldr	r2, [r0, #0]
 8011d1c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8011d20:	f8de 2000 	ldr.w	r2, [lr]
 8011d24:	9200      	str	r2, [sp, #0]
 8011d26:	f8de 2004 	ldr.w	r2, [lr, #4]
 8011d2a:	3204      	adds	r2, #4
 8011d2c:	9201      	str	r2, [sp, #4]
 8011d2e:	f1bb 0f00 	cmp.w	fp, #0
 8011d32:	dc03      	bgt.n	8011d3c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8011d34:	9a03      	ldr	r2, [sp, #12]
 8011d36:	2a00      	cmp	r2, #0
 8011d38:	f340 8153 	ble.w	8011fe2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8011d3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011d3e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8011d42:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8011d46:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011d48:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8011d4c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	dd0e      	ble.n	8011d72 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8011d54:	1408      	asrs	r0, r1, #16
 8011d56:	d405      	bmi.n	8011d64 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8011d58:	42b8      	cmp	r0, r7
 8011d5a:	da03      	bge.n	8011d64 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8011d5c:	1410      	asrs	r0, r2, #16
 8011d5e:	d401      	bmi.n	8011d64 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8011d60:	42b0      	cmp	r0, r6
 8011d62:	db07      	blt.n	8011d74 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8011d64:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011d66:	3b01      	subs	r3, #1
 8011d68:	3402      	adds	r4, #2
 8011d6a:	4401      	add	r1, r0
 8011d6c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011d6e:	4402      	add	r2, r0
 8011d70:	e7ee      	b.n	8011d50 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8011d72:	d017      	beq.n	8011da4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8011d74:	1e58      	subs	r0, r3, #1
 8011d76:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8011d78:	fb05 1500 	mla	r5, r5, r0, r1
 8011d7c:	142d      	asrs	r5, r5, #16
 8011d7e:	d409      	bmi.n	8011d94 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8011d80:	42bd      	cmp	r5, r7
 8011d82:	da07      	bge.n	8011d94 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8011d84:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8011d86:	fb05 2000 	mla	r0, r5, r0, r2
 8011d8a:	1400      	asrs	r0, r0, #16
 8011d8c:	d402      	bmi.n	8011d94 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8011d8e:	42b0      	cmp	r0, r6
 8011d90:	f2c0 80bc 	blt.w	8011f0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8011d94:	2600      	movs	r6, #0
 8011d96:	1998      	adds	r0, r3, r6
 8011d98:	2800      	cmp	r0, #0
 8011d9a:	dc3e      	bgt.n	8011e1a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8011d9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011da0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8011da4:	f1bb 0f00 	cmp.w	fp, #0
 8011da8:	f340 811b 	ble.w	8011fe2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8011dac:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011db0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011db2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011db6:	f1bb 0b01 	subs.w	fp, fp, #1
 8011dba:	eeb0 6a62 	vmov.f32	s12, s5
 8011dbe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011dc2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011dc6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011dca:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8011dce:	eeb0 6a43 	vmov.f32	s12, s6
 8011dd2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011dd6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8011dda:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011dde:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011de2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011de6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011dea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011dee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011df2:	ee12 2a90 	vmov	r2, s5
 8011df6:	eef0 2a47 	vmov.f32	s5, s14
 8011dfa:	fb92 f3f3 	sdiv	r3, r2, r3
 8011dfe:	ee13 2a10 	vmov	r2, s6
 8011e02:	9311      	str	r3, [sp, #68]	; 0x44
 8011e04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e06:	eeb0 3a67 	vmov.f32	s6, s15
 8011e0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8011e0e:	9a03      	ldr	r2, [sp, #12]
 8011e10:	9312      	str	r3, [sp, #72]	; 0x48
 8011e12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e14:	bf08      	it	eq
 8011e16:	4613      	moveq	r3, r2
 8011e18:	e789      	b.n	8011d2e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8011e1a:	140f      	asrs	r7, r1, #16
 8011e1c:	d426      	bmi.n	8011e6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8011e1e:	f8de 5008 	ldr.w	r5, [lr, #8]
 8011e22:	42bd      	cmp	r5, r7
 8011e24:	dd22      	ble.n	8011e6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8011e26:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8011e2a:	d41f      	bmi.n	8011e6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8011e2c:	f8de 000c 	ldr.w	r0, [lr, #12]
 8011e30:	4560      	cmp	r0, ip
 8011e32:	dd1b      	ble.n	8011e6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8011e34:	9800      	ldr	r0, [sp, #0]
 8011e36:	b22d      	sxth	r5, r5
 8011e38:	fb0c 0505 	mla	r5, ip, r5, r0
 8011e3c:	5de8      	ldrb	r0, [r5, r7]
 8011e3e:	9d01      	ldr	r5, [sp, #4]
 8011e40:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8011e44:	0e07      	lsrs	r7, r0, #24
 8011e46:	2fff      	cmp	r7, #255	; 0xff
 8011e48:	d116      	bne.n	8011e78 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8011e4a:	f06f 0501 	mvn.w	r5, #1
 8011e4e:	fb05 f706 	mul.w	r7, r5, r6
 8011e52:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8011e56:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8011e5a:	0945      	lsrs	r5, r0, #5
 8011e5c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8011e60:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8011e64:	ea4c 0505 	orr.w	r5, ip, r5
 8011e68:	4305      	orrs	r5, r0
 8011e6a:	53e5      	strh	r5, [r4, r7]
 8011e6c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011e6e:	3e01      	subs	r6, #1
 8011e70:	4401      	add	r1, r0
 8011e72:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011e74:	4402      	add	r2, r0
 8011e76:	e78e      	b.n	8011d96 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8011e78:	b2fd      	uxtb	r5, r7
 8011e7a:	2f00      	cmp	r7, #0
 8011e7c:	d0f6      	beq.n	8011e6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8011e7e:	f06f 0701 	mvn.w	r7, #1
 8011e82:	fa1f f985 	uxth.w	r9, r5
 8011e86:	43ed      	mvns	r5, r5
 8011e88:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8011e8c:	4377      	muls	r7, r6
 8011e8e:	fb1a fa09 	smulbb	sl, sl, r9
 8011e92:	b2ed      	uxtb	r5, r5
 8011e94:	f834 8007 	ldrh.w	r8, [r4, r7]
 8011e98:	9702      	str	r7, [sp, #8]
 8011e9a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011e9e:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8011ea2:	fb17 f709 	smulbb	r7, r7, r9
 8011ea6:	b2c0      	uxtb	r0, r0
 8011ea8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8011eac:	fb10 f009 	smulbb	r0, r0, r9
 8011eb0:	fb0c 7c05 	mla	ip, ip, r5, r7
 8011eb4:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8011eb8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8011ebc:	fa1f fc8c 	uxth.w	ip, ip
 8011ec0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8011ec4:	fa5f f888 	uxtb.w	r8, r8
 8011ec8:	fb07 a705 	mla	r7, r7, r5, sl
 8011ecc:	fb08 0005 	mla	r0, r8, r5, r0
 8011ed0:	f10c 0501 	add.w	r5, ip, #1
 8011ed4:	b2bf      	uxth	r7, r7
 8011ed6:	b280      	uxth	r0, r0
 8011ed8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8011edc:	f100 0a01 	add.w	sl, r0, #1
 8011ee0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8011ee4:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8011ee8:	9802      	ldr	r0, [sp, #8]
 8011eea:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8011eee:	ea4a 0c0c 	orr.w	ip, sl, ip
 8011ef2:	f107 0a01 	add.w	sl, r7, #1
 8011ef6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8011efa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8011efe:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8011f02:	ea4c 0c0a 	orr.w	ip, ip, sl
 8011f06:	f824 c000 	strh.w	ip, [r4, r0]
 8011f0a:	e7af      	b.n	8011e6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8011f0c:	f04f 0800 	mov.w	r8, #0
 8011f10:	eba3 0008 	sub.w	r0, r3, r8
 8011f14:	2800      	cmp	r0, #0
 8011f16:	f77f af41 	ble.w	8011d9c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8011f1a:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8011f1e:	1410      	asrs	r0, r2, #16
 8011f20:	9f00      	ldr	r7, [sp, #0]
 8011f22:	140d      	asrs	r5, r1, #16
 8011f24:	fb06 7000 	mla	r0, r6, r0, r7
 8011f28:	5d40      	ldrb	r0, [r0, r5]
 8011f2a:	9d01      	ldr	r5, [sp, #4]
 8011f2c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8011f30:	0e2e      	lsrs	r6, r5, #24
 8011f32:	2eff      	cmp	r6, #255	; 0xff
 8011f34:	d112      	bne.n	8011f5c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8011f36:	482c      	ldr	r0, [pc, #176]	; (8011fe8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8011f38:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8011f3c:	0968      	lsrs	r0, r5, #5
 8011f3e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8011f42:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8011f46:	4330      	orrs	r0, r6
 8011f48:	4328      	orrs	r0, r5
 8011f4a:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 8011f4e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011f50:	f108 0801 	add.w	r8, r8, #1
 8011f54:	4401      	add	r1, r0
 8011f56:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011f58:	4402      	add	r2, r0
 8011f5a:	e7d9      	b.n	8011f10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8011f5c:	b2f0      	uxtb	r0, r6
 8011f5e:	2e00      	cmp	r6, #0
 8011f60:	d0f5      	beq.n	8011f4e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8011f62:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8011f66:	fa1f f980 	uxth.w	r9, r0
 8011f6a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8011f6e:	43c0      	mvns	r0, r0
 8011f70:	ea4f 272c 	mov.w	r7, ip, asr #8
 8011f74:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8011f78:	fb16 f609 	smulbb	r6, r6, r9
 8011f7c:	b2c0      	uxtb	r0, r0
 8011f7e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8011f82:	b2ed      	uxtb	r5, r5
 8011f84:	fb1a fa09 	smulbb	sl, sl, r9
 8011f88:	fb07 6700 	mla	r7, r7, r0, r6
 8011f8c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8011f90:	fb15 f509 	smulbb	r5, r5, r9
 8011f94:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8011f98:	b2bf      	uxth	r7, r7
 8011f9a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8011f9e:	fa5f fc8c 	uxtb.w	ip, ip
 8011fa2:	fb06 a600 	mla	r6, r6, r0, sl
 8011fa6:	fb0c 5500 	mla	r5, ip, r0, r5
 8011faa:	1c78      	adds	r0, r7, #1
 8011fac:	b2b6      	uxth	r6, r6
 8011fae:	b2ad      	uxth	r5, r5
 8011fb0:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8011fb4:	f105 0a01 	add.w	sl, r5, #1
 8011fb8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8011fbc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8011fc0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8011fc4:	ea4a 0707 	orr.w	r7, sl, r7
 8011fc8:	f106 0a01 	add.w	sl, r6, #1
 8011fcc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8011fd0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8011fd4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8011fd8:	ea47 070a 	orr.w	r7, r7, sl
 8011fdc:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8011fe0:	e7b5      	b.n	8011f4e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8011fe2:	b005      	add	sp, #20
 8011fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fe8:	fffff800 	.word	0xfffff800

08011fec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ff0:	b087      	sub	sp, #28
 8011ff2:	468b      	mov	fp, r1
 8011ff4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011ff8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8011ffa:	9204      	str	r2, [sp, #16]
 8011ffc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8012000:	6861      	ldr	r1, [r4, #4]
 8012002:	9205      	str	r2, [sp, #20]
 8012004:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8012008:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801200c:	fb01 2000 	mla	r0, r1, r0, r2
 8012010:	6822      	ldr	r2, [r4, #0]
 8012012:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8012016:	f8de 2000 	ldr.w	r2, [lr]
 801201a:	9201      	str	r2, [sp, #4]
 801201c:	f8de 2004 	ldr.w	r2, [lr, #4]
 8012020:	9202      	str	r2, [sp, #8]
 8012022:	f1bb 0f00 	cmp.w	fp, #0
 8012026:	dc03      	bgt.n	8012030 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8012028:	9a04      	ldr	r2, [sp, #16]
 801202a:	2a00      	cmp	r2, #0
 801202c:	f340 8142 	ble.w	80122b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8012030:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012032:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8012036:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801203a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801203c:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8012040:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012044:	2b00      	cmp	r3, #0
 8012046:	dd0e      	ble.n	8012066 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8012048:	140c      	asrs	r4, r1, #16
 801204a:	d405      	bmi.n	8012058 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801204c:	42bc      	cmp	r4, r7
 801204e:	da03      	bge.n	8012058 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8012050:	1414      	asrs	r4, r2, #16
 8012052:	d401      	bmi.n	8012058 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8012054:	42b4      	cmp	r4, r6
 8012056:	db07      	blt.n	8012068 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8012058:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801205a:	3b01      	subs	r3, #1
 801205c:	3002      	adds	r0, #2
 801205e:	4421      	add	r1, r4
 8012060:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8012062:	4422      	add	r2, r4
 8012064:	e7ee      	b.n	8012044 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8012066:	d019      	beq.n	801209c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8012068:	1e5c      	subs	r4, r3, #1
 801206a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801206c:	fb05 1504 	mla	r5, r5, r4, r1
 8012070:	142d      	asrs	r5, r5, #16
 8012072:	d409      	bmi.n	8012088 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8012074:	42bd      	cmp	r5, r7
 8012076:	da07      	bge.n	8012088 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8012078:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801207a:	fb05 2404 	mla	r4, r5, r4, r2
 801207e:	1424      	asrs	r4, r4, #16
 8012080:	d402      	bmi.n	8012088 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8012082:	42b4      	cmp	r4, r6
 8012084:	f2c0 80b1 	blt.w	80121ea <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8012088:	f04f 0800 	mov.w	r8, #0
 801208c:	eb03 0408 	add.w	r4, r3, r8
 8012090:	2c00      	cmp	r4, #0
 8012092:	dc3e      	bgt.n	8012112 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8012094:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012098:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801209c:	f1bb 0f00 	cmp.w	fp, #0
 80120a0:	f340 8108 	ble.w	80122b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80120a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80120a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80120aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80120ae:	f1bb 0b01 	subs.w	fp, fp, #1
 80120b2:	eeb0 6a62 	vmov.f32	s12, s5
 80120b6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80120ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 80120be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80120c2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80120c6:	eeb0 6a43 	vmov.f32	s12, s6
 80120ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80120ce:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80120d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80120d6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80120da:	ee77 2a62 	vsub.f32	s5, s14, s5
 80120de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80120e2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80120e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80120ea:	ee12 2a90 	vmov	r2, s5
 80120ee:	eef0 2a47 	vmov.f32	s5, s14
 80120f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80120f6:	ee13 2a10 	vmov	r2, s6
 80120fa:	9313      	str	r3, [sp, #76]	; 0x4c
 80120fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80120fe:	eeb0 3a67 	vmov.f32	s6, s15
 8012102:	fb92 f3f3 	sdiv	r3, r2, r3
 8012106:	9a04      	ldr	r2, [sp, #16]
 8012108:	9314      	str	r3, [sp, #80]	; 0x50
 801210a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801210c:	bf08      	it	eq
 801210e:	4613      	moveq	r3, r2
 8012110:	e787      	b.n	8012022 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8012112:	140e      	asrs	r6, r1, #16
 8012114:	d462      	bmi.n	80121dc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8012116:	f8de 5008 	ldr.w	r5, [lr, #8]
 801211a:	42b5      	cmp	r5, r6
 801211c:	dd5e      	ble.n	80121dc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801211e:	1417      	asrs	r7, r2, #16
 8012120:	d45c      	bmi.n	80121dc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8012122:	f8de 400c 	ldr.w	r4, [lr, #12]
 8012126:	42bc      	cmp	r4, r7
 8012128:	dd58      	ble.n	80121dc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801212a:	b22d      	sxth	r5, r5
 801212c:	9c02      	ldr	r4, [sp, #8]
 801212e:	fb07 6505 	mla	r5, r7, r5, r6
 8012132:	5d66      	ldrb	r6, [r4, r5]
 8012134:	2e00      	cmp	r6, #0
 8012136:	d051      	beq.n	80121dc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8012138:	9c01      	ldr	r4, [sp, #4]
 801213a:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801213e:	f06f 0401 	mvn.w	r4, #1
 8012142:	fb04 f408 	mul.w	r4, r4, r8
 8012146:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801214a:	5b05      	ldrh	r5, [r0, r4]
 801214c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8012150:	9403      	str	r4, [sp, #12]
 8012152:	9c05      	ldr	r4, [sp, #20]
 8012154:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8012158:	4366      	muls	r6, r4
 801215a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801215e:	1c74      	adds	r4, r6, #1
 8012160:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8012164:	122e      	asrs	r6, r5, #8
 8012166:	1224      	asrs	r4, r4, #8
 8012168:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801216c:	00ed      	lsls	r5, r5, #3
 801216e:	b2a7      	uxth	r7, r4
 8012170:	43e4      	mvns	r4, r4
 8012172:	b2ed      	uxtb	r5, r5
 8012174:	b2e4      	uxtb	r4, r4
 8012176:	fb16 f604 	smulbb	r6, r6, r4
 801217a:	fb15 f504 	smulbb	r5, r5, r4
 801217e:	fb0c 6c07 	mla	ip, ip, r7, r6
 8012182:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8012186:	fb1a fa04 	smulbb	sl, sl, r4
 801218a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801218e:	fa1f fc8c 	uxth.w	ip, ip
 8012192:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8012196:	fa5f f989 	uxtb.w	r9, r9
 801219a:	fb06 a607 	mla	r6, r6, r7, sl
 801219e:	f10c 0401 	add.w	r4, ip, #1
 80121a2:	fb09 5507 	mla	r5, r9, r7, r5
 80121a6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80121aa:	9c03      	ldr	r4, [sp, #12]
 80121ac:	b2ad      	uxth	r5, r5
 80121ae:	b2b6      	uxth	r6, r6
 80121b0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80121b4:	f105 0a01 	add.w	sl, r5, #1
 80121b8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80121bc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80121c0:	ea4a 0c0c 	orr.w	ip, sl, ip
 80121c4:	f106 0a01 	add.w	sl, r6, #1
 80121c8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80121cc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80121d0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80121d4:	ea4c 0c0a 	orr.w	ip, ip, sl
 80121d8:	f820 c004 	strh.w	ip, [r0, r4]
 80121dc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80121de:	f108 38ff 	add.w	r8, r8, #4294967295
 80121e2:	4421      	add	r1, r4
 80121e4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80121e6:	4422      	add	r2, r4
 80121e8:	e750      	b.n	801208c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80121ea:	f04f 0900 	mov.w	r9, #0
 80121ee:	eba3 0409 	sub.w	r4, r3, r9
 80121f2:	2c00      	cmp	r4, #0
 80121f4:	f77f af4e 	ble.w	8012094 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80121f8:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 80121fc:	140d      	asrs	r5, r1, #16
 80121fe:	1414      	asrs	r4, r2, #16
 8012200:	fb06 5404 	mla	r4, r6, r4, r5
 8012204:	9d02      	ldr	r5, [sp, #8]
 8012206:	5d2e      	ldrb	r6, [r5, r4]
 8012208:	2e00      	cmp	r6, #0
 801220a:	d04c      	beq.n	80122a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801220c:	9d01      	ldr	r5, [sp, #4]
 801220e:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 8012212:	9c05      	ldr	r4, [sp, #20]
 8012214:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8012218:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801221c:	4366      	muls	r6, r4
 801221e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8012222:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8012226:	1c74      	adds	r4, r6, #1
 8012228:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801222c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8012230:	122e      	asrs	r6, r5, #8
 8012232:	1224      	asrs	r4, r4, #8
 8012234:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8012238:	00ed      	lsls	r5, r5, #3
 801223a:	b2a7      	uxth	r7, r4
 801223c:	43e4      	mvns	r4, r4
 801223e:	b2ed      	uxtb	r5, r5
 8012240:	b2e4      	uxtb	r4, r4
 8012242:	fb16 f604 	smulbb	r6, r6, r4
 8012246:	fb15 f504 	smulbb	r5, r5, r4
 801224a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801224e:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8012252:	fb1a fa04 	smulbb	sl, sl, r4
 8012256:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801225a:	fa1f fc8c 	uxth.w	ip, ip
 801225e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8012262:	fa5f f888 	uxtb.w	r8, r8
 8012266:	fb06 a607 	mla	r6, r6, r7, sl
 801226a:	f10c 0401 	add.w	r4, ip, #1
 801226e:	fb08 5507 	mla	r5, r8, r7, r5
 8012272:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8012276:	b2ad      	uxth	r5, r5
 8012278:	b2b6      	uxth	r6, r6
 801227a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801227e:	f105 0a01 	add.w	sl, r5, #1
 8012282:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8012286:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801228a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801228e:	f106 0a01 	add.w	sl, r6, #1
 8012292:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8012296:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801229a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801229e:	ea4c 0c0a 	orr.w	ip, ip, sl
 80122a2:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 80122a6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80122a8:	f109 0901 	add.w	r9, r9, #1
 80122ac:	4421      	add	r1, r4
 80122ae:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80122b0:	4422      	add	r2, r4
 80122b2:	e79c      	b.n	80121ee <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 80122b4:	b007      	add	sp, #28
 80122b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080122ba <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80122ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122be:	b085      	sub	sp, #20
 80122c0:	468b      	mov	fp, r1
 80122c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80122c6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80122c8:	9203      	str	r2, [sp, #12]
 80122ca:	6861      	ldr	r1, [r4, #4]
 80122cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80122d0:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 80122d4:	fb01 2000 	mla	r0, r1, r0, r2
 80122d8:	6822      	ldr	r2, [r4, #0]
 80122da:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80122de:	f8d8 2000 	ldr.w	r2, [r8]
 80122e2:	9200      	str	r2, [sp, #0]
 80122e4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80122e8:	9201      	str	r2, [sp, #4]
 80122ea:	f1bb 0f00 	cmp.w	fp, #0
 80122ee:	dc03      	bgt.n	80122f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80122f0:	9a03      	ldr	r2, [sp, #12]
 80122f2:	2a00      	cmp	r2, #0
 80122f4:	f340 8146 	ble.w	8012584 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80122f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80122fa:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 80122fe:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8012302:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012304:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8012308:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801230c:	2b00      	cmp	r3, #0
 801230e:	dd0e      	ble.n	801232e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8012310:	140c      	asrs	r4, r1, #16
 8012312:	d405      	bmi.n	8012320 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8012314:	42bc      	cmp	r4, r7
 8012316:	da03      	bge.n	8012320 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8012318:	1414      	asrs	r4, r2, #16
 801231a:	d401      	bmi.n	8012320 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801231c:	42b4      	cmp	r4, r6
 801231e:	db07      	blt.n	8012330 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8012320:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8012322:	3b01      	subs	r3, #1
 8012324:	3002      	adds	r0, #2
 8012326:	4421      	add	r1, r4
 8012328:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801232a:	4422      	add	r2, r4
 801232c:	e7ee      	b.n	801230c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801232e:	d017      	beq.n	8012360 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8012330:	1e5c      	subs	r4, r3, #1
 8012332:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8012334:	fb05 1504 	mla	r5, r5, r4, r1
 8012338:	142d      	asrs	r5, r5, #16
 801233a:	d409      	bmi.n	8012350 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801233c:	42bd      	cmp	r5, r7
 801233e:	da07      	bge.n	8012350 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8012340:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8012342:	fb05 2404 	mla	r4, r5, r4, r2
 8012346:	1424      	asrs	r4, r4, #16
 8012348:	d402      	bmi.n	8012350 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801234a:	42b4      	cmp	r4, r6
 801234c:	f2c0 80b3 	blt.w	80124b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8012350:	2600      	movs	r6, #0
 8012352:	199c      	adds	r4, r3, r6
 8012354:	2c00      	cmp	r4, #0
 8012356:	dc3e      	bgt.n	80123d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8012358:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801235c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8012360:	f1bb 0f00 	cmp.w	fp, #0
 8012364:	f340 810e 	ble.w	8012584 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8012368:	ee30 0a04 	vadd.f32	s0, s0, s8
 801236c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801236e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012372:	f1bb 0b01 	subs.w	fp, fp, #1
 8012376:	eeb0 6a62 	vmov.f32	s12, s5
 801237a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801237e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012382:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012386:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801238a:	eeb0 6a43 	vmov.f32	s12, s6
 801238e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012392:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8012396:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801239a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801239e:	ee77 2a62 	vsub.f32	s5, s14, s5
 80123a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80123a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80123aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80123ae:	ee12 2a90 	vmov	r2, s5
 80123b2:	eef0 2a47 	vmov.f32	s5, s14
 80123b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80123ba:	ee13 2a10 	vmov	r2, s6
 80123be:	9311      	str	r3, [sp, #68]	; 0x44
 80123c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80123c2:	eeb0 3a67 	vmov.f32	s6, s15
 80123c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80123ca:	9a03      	ldr	r2, [sp, #12]
 80123cc:	9312      	str	r3, [sp, #72]	; 0x48
 80123ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80123d0:	bf08      	it	eq
 80123d2:	4613      	moveq	r3, r2
 80123d4:	e789      	b.n	80122ea <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80123d6:	140f      	asrs	r7, r1, #16
 80123d8:	d418      	bmi.n	801240c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80123da:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80123de:	42bd      	cmp	r5, r7
 80123e0:	dd14      	ble.n	801240c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80123e2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80123e6:	d411      	bmi.n	801240c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80123e8:	f8d8 400c 	ldr.w	r4, [r8, #12]
 80123ec:	4564      	cmp	r4, ip
 80123ee:	dd0d      	ble.n	801240c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80123f0:	b22d      	sxth	r5, r5
 80123f2:	9c01      	ldr	r4, [sp, #4]
 80123f4:	fb0c 7505 	mla	r5, ip, r5, r7
 80123f8:	5d64      	ldrb	r4, [r4, r5]
 80123fa:	2cff      	cmp	r4, #255	; 0xff
 80123fc:	d10c      	bne.n	8012418 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80123fe:	9c00      	ldr	r4, [sp, #0]
 8012400:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8012404:	f06f 0401 	mvn.w	r4, #1
 8012408:	4374      	muls	r4, r6
 801240a:	5305      	strh	r5, [r0, r4]
 801240c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801240e:	3e01      	subs	r6, #1
 8012410:	4421      	add	r1, r4
 8012412:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8012414:	4422      	add	r2, r4
 8012416:	e79c      	b.n	8012352 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8012418:	2c00      	cmp	r4, #0
 801241a:	d0f7      	beq.n	801240c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801241c:	9f00      	ldr	r7, [sp, #0]
 801241e:	fa1f fc84 	uxth.w	ip, r4
 8012422:	43e4      	mvns	r4, r4
 8012424:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 8012428:	f06f 0501 	mvn.w	r5, #1
 801242c:	b2e4      	uxtb	r4, r4
 801242e:	4375      	muls	r5, r6
 8012430:	ea4f 2e29 	mov.w	lr, r9, asr #8
 8012434:	9502      	str	r5, [sp, #8]
 8012436:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801243a:	5b45      	ldrh	r5, [r0, r5]
 801243c:	122f      	asrs	r7, r5, #8
 801243e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8012442:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8012446:	00ed      	lsls	r5, r5, #3
 8012448:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801244c:	fb17 f704 	smulbb	r7, r7, r4
 8012450:	b2ed      	uxtb	r5, r5
 8012452:	fb1a fa04 	smulbb	sl, sl, r4
 8012456:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801245a:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801245e:	fb15 f504 	smulbb	r5, r5, r4
 8012462:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8012466:	fa1f fe8e 	uxth.w	lr, lr
 801246a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801246e:	fa5f f989 	uxtb.w	r9, r9
 8012472:	fb07 a70c 	mla	r7, r7, ip, sl
 8012476:	f10e 0401 	add.w	r4, lr, #1
 801247a:	fb09 550c 	mla	r5, r9, ip, r5
 801247e:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8012482:	9c02      	ldr	r4, [sp, #8]
 8012484:	b2ad      	uxth	r5, r5
 8012486:	b2bf      	uxth	r7, r7
 8012488:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801248c:	f105 0a01 	add.w	sl, r5, #1
 8012490:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8012494:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8012498:	ea4a 0e0e 	orr.w	lr, sl, lr
 801249c:	f107 0a01 	add.w	sl, r7, #1
 80124a0:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80124a4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80124a8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80124ac:	ea4e 0e0a 	orr.w	lr, lr, sl
 80124b0:	f820 e004 	strh.w	lr, [r0, r4]
 80124b4:	e7aa      	b.n	801240c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80124b6:	f04f 0900 	mov.w	r9, #0
 80124ba:	eba3 0409 	sub.w	r4, r3, r9
 80124be:	2c00      	cmp	r4, #0
 80124c0:	f77f af4a 	ble.w	8012358 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80124c4:	1414      	asrs	r4, r2, #16
 80124c6:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 80124ca:	140d      	asrs	r5, r1, #16
 80124cc:	fb06 5504 	mla	r5, r6, r4, r5
 80124d0:	9c01      	ldr	r4, [sp, #4]
 80124d2:	5d64      	ldrb	r4, [r4, r5]
 80124d4:	2cff      	cmp	r4, #255	; 0xff
 80124d6:	d10b      	bne.n	80124f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80124d8:	9c00      	ldr	r4, [sp, #0]
 80124da:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 80124de:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 80124e2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80124e4:	f109 0901 	add.w	r9, r9, #1
 80124e8:	4421      	add	r1, r4
 80124ea:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80124ec:	4422      	add	r2, r4
 80124ee:	e7e4      	b.n	80124ba <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80124f0:	2c00      	cmp	r4, #0
 80124f2:	d0f6      	beq.n	80124e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80124f4:	9e00      	ldr	r6, [sp, #0]
 80124f6:	b2a7      	uxth	r7, r4
 80124f8:	43e4      	mvns	r4, r4
 80124fa:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 80124fe:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8012502:	b2e4      	uxtb	r4, r4
 8012504:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8012508:	122e      	asrs	r6, r5, #8
 801250a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801250e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8012512:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8012516:	00ed      	lsls	r5, r5, #3
 8012518:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801251c:	fb16 f604 	smulbb	r6, r6, r4
 8012520:	b2ed      	uxtb	r5, r5
 8012522:	fb1a fa04 	smulbb	sl, sl, r4
 8012526:	fb0c 6c07 	mla	ip, ip, r7, r6
 801252a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801252e:	fb15 f504 	smulbb	r5, r5, r4
 8012532:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8012536:	fa1f fc8c 	uxth.w	ip, ip
 801253a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801253e:	fa5f fe8e 	uxtb.w	lr, lr
 8012542:	fb06 a607 	mla	r6, r6, r7, sl
 8012546:	f10c 0401 	add.w	r4, ip, #1
 801254a:	fb0e 5507 	mla	r5, lr, r7, r5
 801254e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8012552:	b2ad      	uxth	r5, r5
 8012554:	b2b6      	uxth	r6, r6
 8012556:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801255a:	f105 0a01 	add.w	sl, r5, #1
 801255e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8012562:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8012566:	ea4a 0c0c 	orr.w	ip, sl, ip
 801256a:	f106 0a01 	add.w	sl, r6, #1
 801256e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8012572:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8012576:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801257a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801257e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8012582:	e7ae      	b.n	80124e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8012584:	b005      	add	sp, #20
 8012586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801258a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801258a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801258e:	b085      	sub	sp, #20
 8012590:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8012592:	9203      	str	r2, [sp, #12]
 8012594:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8012598:	9100      	str	r1, [sp, #0]
 801259a:	9201      	str	r2, [sp, #4]
 801259c:	6841      	ldr	r1, [r0, #4]
 801259e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 80125a2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80125a6:	fb01 2404 	mla	r4, r1, r4, r2
 80125aa:	6802      	ldr	r2, [r0, #0]
 80125ac:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80125b0:	f8de 2000 	ldr.w	r2, [lr]
 80125b4:	9202      	str	r2, [sp, #8]
 80125b6:	9a01      	ldr	r2, [sp, #4]
 80125b8:	43d6      	mvns	r6, r2
 80125ba:	b2f6      	uxtb	r6, r6
 80125bc:	9a00      	ldr	r2, [sp, #0]
 80125be:	2a00      	cmp	r2, #0
 80125c0:	dc03      	bgt.n	80125ca <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80125c2:	9a03      	ldr	r2, [sp, #12]
 80125c4:	2a00      	cmp	r2, #0
 80125c6:	f340 8124 	ble.w	8012812 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80125ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80125cc:	f9be c008 	ldrsh.w	ip, [lr, #8]
 80125d0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80125d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80125d6:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 80125da:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80125de:	2b00      	cmp	r3, #0
 80125e0:	dd0e      	ble.n	8012600 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80125e2:	1408      	asrs	r0, r1, #16
 80125e4:	d405      	bmi.n	80125f2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80125e6:	4560      	cmp	r0, ip
 80125e8:	da03      	bge.n	80125f2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80125ea:	1410      	asrs	r0, r2, #16
 80125ec:	d401      	bmi.n	80125f2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80125ee:	42b8      	cmp	r0, r7
 80125f0:	db07      	blt.n	8012602 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80125f2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80125f4:	3b01      	subs	r3, #1
 80125f6:	3402      	adds	r4, #2
 80125f8:	4401      	add	r1, r0
 80125fa:	9812      	ldr	r0, [sp, #72]	; 0x48
 80125fc:	4402      	add	r2, r0
 80125fe:	e7ee      	b.n	80125de <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8012600:	d06e      	beq.n	80126e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8012602:	1e58      	subs	r0, r3, #1
 8012604:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8012606:	fb05 1500 	mla	r5, r5, r0, r1
 801260a:	142d      	asrs	r5, r5, #16
 801260c:	d45c      	bmi.n	80126c8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801260e:	4565      	cmp	r5, ip
 8012610:	da5a      	bge.n	80126c8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8012612:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8012614:	fb05 2000 	mla	r0, r5, r0, r2
 8012618:	1400      	asrs	r0, r0, #16
 801261a:	d455      	bmi.n	80126c8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801261c:	42b8      	cmp	r0, r7
 801261e:	da53      	bge.n	80126c8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8012620:	4699      	mov	r9, r3
 8012622:	46a2      	mov	sl, r4
 8012624:	f8bd b004 	ldrh.w	fp, [sp, #4]
 8012628:	f1b9 0f00 	cmp.w	r9, #0
 801262c:	dd54      	ble.n	80126d8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801262e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8012632:	140d      	asrs	r5, r1, #16
 8012634:	1410      	asrs	r0, r2, #16
 8012636:	f109 39ff 	add.w	r9, r9, #4294967295
 801263a:	fb07 5000 	mla	r0, r7, r0, r5
 801263e:	9d02      	ldr	r5, [sp, #8]
 8012640:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8012644:	f8ba 5000 	ldrh.w	r5, [sl]
 8012648:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801264c:	122f      	asrs	r7, r5, #8
 801264e:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8012652:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8012656:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801265a:	00ed      	lsls	r5, r5, #3
 801265c:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8012660:	fb17 f706 	smulbb	r7, r7, r6
 8012664:	b2ed      	uxtb	r5, r5
 8012666:	fb18 f806 	smulbb	r8, r8, r6
 801266a:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801266e:	10c7      	asrs	r7, r0, #3
 8012670:	fb15 f506 	smulbb	r5, r5, r6
 8012674:	00c0      	lsls	r0, r0, #3
 8012676:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801267a:	fa1f fc8c 	uxth.w	ip, ip
 801267e:	b2c0      	uxtb	r0, r0
 8012680:	fb07 870b 	mla	r7, r7, fp, r8
 8012684:	fb00 500b 	mla	r0, r0, fp, r5
 8012688:	f10c 0501 	add.w	r5, ip, #1
 801268c:	b2bf      	uxth	r7, r7
 801268e:	b280      	uxth	r0, r0
 8012690:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8012694:	f107 0801 	add.w	r8, r7, #1
 8012698:	1c45      	adds	r5, r0, #1
 801269a:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801269e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80126a2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80126a6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80126a8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80126ac:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80126b0:	4401      	add	r1, r0
 80126b2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80126b6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80126b8:	ea45 0c0c 	orr.w	ip, r5, ip
 80126bc:	4402      	add	r2, r0
 80126be:	ea4c 0c08 	orr.w	ip, ip, r8
 80126c2:	f82a cb02 	strh.w	ip, [sl], #2
 80126c6:	e7af      	b.n	8012628 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80126c8:	f04f 0800 	mov.w	r8, #0
 80126cc:	f8bd a004 	ldrh.w	sl, [sp, #4]
 80126d0:	eb03 0008 	add.w	r0, r3, r8
 80126d4:	2800      	cmp	r0, #0
 80126d6:	dc41      	bgt.n	801275c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80126d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80126dc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80126e0:	9b00      	ldr	r3, [sp, #0]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	f340 8095 	ble.w	8012812 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80126e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80126ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80126ee:	ee30 0a04 	vadd.f32	s0, s0, s8
 80126f2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80126f6:	eef0 6a62 	vmov.f32	s13, s5
 80126fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80126fe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012702:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8012706:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801270a:	eef0 6a43 	vmov.f32	s13, s6
 801270e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8012712:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8012716:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801271a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801271e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012722:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012726:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801272a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801272e:	ee12 2a90 	vmov	r2, s5
 8012732:	eef0 2a47 	vmov.f32	s5, s14
 8012736:	fb92 f3f3 	sdiv	r3, r2, r3
 801273a:	ee13 2a10 	vmov	r2, s6
 801273e:	9311      	str	r3, [sp, #68]	; 0x44
 8012740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012742:	eeb0 3a67 	vmov.f32	s6, s15
 8012746:	fb92 f3f3 	sdiv	r3, r2, r3
 801274a:	9312      	str	r3, [sp, #72]	; 0x48
 801274c:	9b00      	ldr	r3, [sp, #0]
 801274e:	9a03      	ldr	r2, [sp, #12]
 8012750:	3b01      	subs	r3, #1
 8012752:	9300      	str	r3, [sp, #0]
 8012754:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012756:	bf08      	it	eq
 8012758:	4613      	moveq	r3, r2
 801275a:	e72f      	b.n	80125bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801275c:	140f      	asrs	r7, r1, #16
 801275e:	d451      	bmi.n	8012804 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8012760:	f8de 5008 	ldr.w	r5, [lr, #8]
 8012764:	42bd      	cmp	r5, r7
 8012766:	dd4d      	ble.n	8012804 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8012768:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801276c:	d44a      	bmi.n	8012804 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801276e:	f8de 000c 	ldr.w	r0, [lr, #12]
 8012772:	4560      	cmp	r0, ip
 8012774:	dd46      	ble.n	8012804 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8012776:	b22d      	sxth	r5, r5
 8012778:	9802      	ldr	r0, [sp, #8]
 801277a:	fb0c 7505 	mla	r5, ip, r5, r7
 801277e:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 8012782:	f06f 0501 	mvn.w	r5, #1
 8012786:	fb05 fb08 	mul.w	fp, r5, r8
 801278a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801278e:	f834 500b 	ldrh.w	r5, [r4, fp]
 8012792:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8012796:	122f      	asrs	r7, r5, #8
 8012798:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801279c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80127a0:	00ed      	lsls	r5, r5, #3
 80127a2:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80127a6:	fb17 f706 	smulbb	r7, r7, r6
 80127aa:	b2ed      	uxtb	r5, r5
 80127ac:	fb19 f906 	smulbb	r9, r9, r6
 80127b0:	fb0c 7c0a 	mla	ip, ip, sl, r7
 80127b4:	10c7      	asrs	r7, r0, #3
 80127b6:	fb15 f506 	smulbb	r5, r5, r6
 80127ba:	00c0      	lsls	r0, r0, #3
 80127bc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80127c0:	fa1f fc8c 	uxth.w	ip, ip
 80127c4:	b2c0      	uxtb	r0, r0
 80127c6:	fb07 970a 	mla	r7, r7, sl, r9
 80127ca:	fb00 500a 	mla	r0, r0, sl, r5
 80127ce:	f10c 0501 	add.w	r5, ip, #1
 80127d2:	b2bf      	uxth	r7, r7
 80127d4:	b280      	uxth	r0, r0
 80127d6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80127da:	f107 0901 	add.w	r9, r7, #1
 80127de:	1c45      	adds	r5, r0, #1
 80127e0:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 80127e4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80127e8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80127ec:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80127f0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80127f4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80127f8:	ea45 0c0c 	orr.w	ip, r5, ip
 80127fc:	ea4c 0c09 	orr.w	ip, ip, r9
 8012800:	f824 c00b 	strh.w	ip, [r4, fp]
 8012804:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012806:	f108 38ff 	add.w	r8, r8, #4294967295
 801280a:	4401      	add	r1, r0
 801280c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801280e:	4402      	add	r2, r0
 8012810:	e75e      	b.n	80126d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8012812:	b005      	add	sp, #20
 8012814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012818 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8012818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801281c:	b085      	sub	sp, #20
 801281e:	4693      	mov	fp, r2
 8012820:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012824:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8012826:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8012828:	6870      	ldr	r0, [r6, #4]
 801282a:	9101      	str	r1, [sp, #4]
 801282c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8012830:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8012834:	fb00 2404 	mla	r4, r0, r4, r2
 8012838:	6832      	ldr	r2, [r6, #0]
 801283a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801283e:	682a      	ldr	r2, [r5, #0]
 8012840:	9202      	str	r2, [sp, #8]
 8012842:	9a01      	ldr	r2, [sp, #4]
 8012844:	2a00      	cmp	r2, #0
 8012846:	dc03      	bgt.n	8012850 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8012848:	f1bb 0f00 	cmp.w	fp, #0
 801284c:	f340 809a 	ble.w	8012984 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8012850:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012852:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8012856:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801285a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801285c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8012860:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012864:	2b00      	cmp	r3, #0
 8012866:	dd0c      	ble.n	8012882 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8012868:	1406      	asrs	r6, r0, #16
 801286a:	d405      	bmi.n	8012878 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801286c:	454e      	cmp	r6, r9
 801286e:	da03      	bge.n	8012878 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8012870:	1416      	asrs	r6, r2, #16
 8012872:	d401      	bmi.n	8012878 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8012874:	4546      	cmp	r6, r8
 8012876:	db05      	blt.n	8012884 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8012878:	4470      	add	r0, lr
 801287a:	4462      	add	r2, ip
 801287c:	3b01      	subs	r3, #1
 801287e:	3402      	adds	r4, #2
 8012880:	e7f0      	b.n	8012864 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8012882:	d00f      	beq.n	80128a4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8012884:	1e5e      	subs	r6, r3, #1
 8012886:	fb0e 0706 	mla	r7, lr, r6, r0
 801288a:	143f      	asrs	r7, r7, #16
 801288c:	d541      	bpl.n	8012912 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801288e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8012892:	4698      	mov	r8, r3
 8012894:	9603      	str	r6, [sp, #12]
 8012896:	f1b8 0f00 	cmp.w	r8, #0
 801289a:	dc56      	bgt.n	801294a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801289c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80128a0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80128a4:	9b01      	ldr	r3, [sp, #4]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	dd6c      	ble.n	8012984 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80128aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80128ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80128b0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80128b4:	eeb0 6a62 	vmov.f32	s12, s5
 80128b8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80128bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80128c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80128c4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80128c8:	eeb0 6a43 	vmov.f32	s12, s6
 80128cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80128d0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80128d4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80128d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80128dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80128e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80128e4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80128e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80128ec:	ee12 2a90 	vmov	r2, s5
 80128f0:	eef0 2a47 	vmov.f32	s5, s14
 80128f4:	fb92 fef3 	sdiv	lr, r2, r3
 80128f8:	ee13 2a10 	vmov	r2, s6
 80128fc:	eeb0 3a67 	vmov.f32	s6, s15
 8012900:	fb92 fcf3 	sdiv	ip, r2, r3
 8012904:	9b01      	ldr	r3, [sp, #4]
 8012906:	3b01      	subs	r3, #1
 8012908:	9301      	str	r3, [sp, #4]
 801290a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801290c:	bf08      	it	eq
 801290e:	465b      	moveq	r3, fp
 8012910:	e797      	b.n	8012842 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8012912:	454f      	cmp	r7, r9
 8012914:	dabb      	bge.n	801288e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8012916:	fb0c 2606 	mla	r6, ip, r6, r2
 801291a:	1436      	asrs	r6, r6, #16
 801291c:	d4b7      	bmi.n	801288e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801291e:	4546      	cmp	r6, r8
 8012920:	dab5      	bge.n	801288e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8012922:	461e      	mov	r6, r3
 8012924:	46a0      	mov	r8, r4
 8012926:	2e00      	cmp	r6, #0
 8012928:	ddb8      	ble.n	801289c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801292a:	1417      	asrs	r7, r2, #16
 801292c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8012930:	ea4f 4920 	mov.w	r9, r0, asr #16
 8012934:	9902      	ldr	r1, [sp, #8]
 8012936:	4470      	add	r0, lr
 8012938:	4462      	add	r2, ip
 801293a:	fb0a 9707 	mla	r7, sl, r7, r9
 801293e:	3e01      	subs	r6, #1
 8012940:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8012944:	f828 7b02 	strh.w	r7, [r8], #2
 8012948:	e7ed      	b.n	8012926 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801294a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801294e:	d414      	bmi.n	801297a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8012950:	68ae      	ldr	r6, [r5, #8]
 8012952:	454e      	cmp	r6, r9
 8012954:	dd11      	ble.n	801297a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8012956:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801295a:	d40e      	bmi.n	801297a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801295c:	68ef      	ldr	r7, [r5, #12]
 801295e:	4557      	cmp	r7, sl
 8012960:	dd0b      	ble.n	801297a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8012962:	b236      	sxth	r6, r6
 8012964:	f06f 0101 	mvn.w	r1, #1
 8012968:	9f02      	ldr	r7, [sp, #8]
 801296a:	fb0a 9606 	mla	r6, sl, r6, r9
 801296e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8012972:	fb01 f608 	mul.w	r6, r1, r8
 8012976:	9903      	ldr	r1, [sp, #12]
 8012978:	538f      	strh	r7, [r1, r6]
 801297a:	4470      	add	r0, lr
 801297c:	4462      	add	r2, ip
 801297e:	f108 38ff 	add.w	r8, r8, #4294967295
 8012982:	e788      	b.n	8012896 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8012984:	b005      	add	sp, #20
 8012986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801298a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801298a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801298e:	b087      	sub	sp, #28
 8012990:	468b      	mov	fp, r1
 8012992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012996:	9815      	ldr	r0, [sp, #84]	; 0x54
 8012998:	9203      	str	r2, [sp, #12]
 801299a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801299e:	6841      	ldr	r1, [r0, #4]
 80129a0:	9204      	str	r2, [sp, #16]
 80129a2:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80129a6:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 80129aa:	fb01 2505 	mla	r5, r1, r5, r2
 80129ae:	6802      	ldr	r2, [r0, #0]
 80129b0:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 80129b4:	f8d9 2000 	ldr.w	r2, [r9]
 80129b8:	9201      	str	r2, [sp, #4]
 80129ba:	f1bb 0f00 	cmp.w	fp, #0
 80129be:	dc03      	bgt.n	80129c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80129c0:	9a03      	ldr	r2, [sp, #12]
 80129c2:	2a00      	cmp	r2, #0
 80129c4:	f340 8158 	ble.w	8012c78 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 80129c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80129ca:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 80129ce:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80129d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80129d4:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 80129d8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80129dc:	2b00      	cmp	r3, #0
 80129de:	dd0e      	ble.n	80129fe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80129e0:	1402      	asrs	r2, r0, #16
 80129e2:	d405      	bmi.n	80129f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80129e4:	42ba      	cmp	r2, r7
 80129e6:	da03      	bge.n	80129f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80129e8:	140a      	asrs	r2, r1, #16
 80129ea:	d401      	bmi.n	80129f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80129ec:	42b2      	cmp	r2, r6
 80129ee:	db07      	blt.n	8012a00 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80129f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80129f2:	3b01      	subs	r3, #1
 80129f4:	3502      	adds	r5, #2
 80129f6:	4410      	add	r0, r2
 80129f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80129fa:	4411      	add	r1, r2
 80129fc:	e7ee      	b.n	80129dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80129fe:	d017      	beq.n	8012a30 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8012a00:	1e5a      	subs	r2, r3, #1
 8012a02:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8012a04:	fb04 0402 	mla	r4, r4, r2, r0
 8012a08:	1424      	asrs	r4, r4, #16
 8012a0a:	d409      	bmi.n	8012a20 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8012a0c:	42bc      	cmp	r4, r7
 8012a0e:	da07      	bge.n	8012a20 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8012a10:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8012a12:	fb04 1202 	mla	r2, r4, r2, r1
 8012a16:	1412      	asrs	r2, r2, #16
 8012a18:	d402      	bmi.n	8012a20 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8012a1a:	42b2      	cmp	r2, r6
 8012a1c:	f2c0 80bf 	blt.w	8012b9e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8012a20:	2700      	movs	r7, #0
 8012a22:	19da      	adds	r2, r3, r7
 8012a24:	2a00      	cmp	r2, #0
 8012a26:	dc3e      	bgt.n	8012aa6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8012a28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012a2c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8012a30:	f1bb 0f00 	cmp.w	fp, #0
 8012a34:	f340 8120 	ble.w	8012c78 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8012a38:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012a3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012a3e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012a42:	f1bb 0b01 	subs.w	fp, fp, #1
 8012a46:	eeb0 6a62 	vmov.f32	s12, s5
 8012a4a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8012a4e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012a52:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012a56:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8012a5a:	eeb0 6a43 	vmov.f32	s12, s6
 8012a5e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012a62:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8012a66:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012a6a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012a6e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012a72:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012a76:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012a7a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012a7e:	ee12 2a90 	vmov	r2, s5
 8012a82:	eef0 2a47 	vmov.f32	s5, s14
 8012a86:	fb92 f3f3 	sdiv	r3, r2, r3
 8012a8a:	ee13 2a10 	vmov	r2, s6
 8012a8e:	9313      	str	r3, [sp, #76]	; 0x4c
 8012a90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012a92:	eeb0 3a67 	vmov.f32	s6, s15
 8012a96:	fb92 f3f3 	sdiv	r3, r2, r3
 8012a9a:	9a03      	ldr	r2, [sp, #12]
 8012a9c:	9314      	str	r3, [sp, #80]	; 0x50
 8012a9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012aa0:	bf08      	it	eq
 8012aa2:	4613      	moveq	r3, r2
 8012aa4:	e789      	b.n	80129ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8012aa6:	1406      	asrs	r6, r0, #16
 8012aa8:	d42d      	bmi.n	8012b06 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8012aaa:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8012aae:	42b4      	cmp	r4, r6
 8012ab0:	dd29      	ble.n	8012b06 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8012ab2:	ea5f 4c21 	movs.w	ip, r1, asr #16
 8012ab6:	d426      	bmi.n	8012b06 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8012ab8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8012abc:	4562      	cmp	r2, ip
 8012abe:	dd22      	ble.n	8012b06 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8012ac0:	b224      	sxth	r4, r4
 8012ac2:	9a01      	ldr	r2, [sp, #4]
 8012ac4:	fb0c 6404 	mla	r4, ip, r4, r6
 8012ac8:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8012acc:	0e22      	lsrs	r2, r4, #24
 8012ace:	d01a      	beq.n	8012b06 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8012ad0:	9e04      	ldr	r6, [sp, #16]
 8012ad2:	4372      	muls	r2, r6
 8012ad4:	1c56      	adds	r6, r2, #1
 8012ad6:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8012ada:	0a26      	lsrs	r6, r4, #8
 8012adc:	1212      	asrs	r2, r2, #8
 8012ade:	9605      	str	r6, [sp, #20]
 8012ae0:	2aff      	cmp	r2, #255	; 0xff
 8012ae2:	d116      	bne.n	8012b12 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8012ae4:	f06f 0201 	mvn.w	r2, #1
 8012ae8:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8012aec:	fb02 fc07 	mul.w	ip, r2, r7
 8012af0:	0962      	lsrs	r2, r4, #5
 8012af2:	f026 0607 	bic.w	r6, r6, #7
 8012af6:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8012afa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8012afe:	4316      	orrs	r6, r2
 8012b00:	4326      	orrs	r6, r4
 8012b02:	f825 600c 	strh.w	r6, [r5, ip]
 8012b06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012b08:	3f01      	subs	r7, #1
 8012b0a:	4410      	add	r0, r2
 8012b0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012b0e:	4411      	add	r1, r2
 8012b10:	e787      	b.n	8012a22 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8012b12:	f06f 0601 	mvn.w	r6, #1
 8012b16:	fa1f fa82 	uxth.w	sl, r2
 8012b1a:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 8012b1e:	43d2      	mvns	r2, r2
 8012b20:	437e      	muls	r6, r7
 8012b22:	b2e4      	uxtb	r4, r4
 8012b24:	fb1c fc0a 	smulbb	ip, ip, sl
 8012b28:	b2d2      	uxtb	r2, r2
 8012b2a:	f835 8006 	ldrh.w	r8, [r5, r6]
 8012b2e:	fb14 f40a 	smulbb	r4, r4, sl
 8012b32:	9602      	str	r6, [sp, #8]
 8012b34:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8012b38:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8012b3c:	fb16 f60a 	smulbb	r6, r6, sl
 8012b40:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8012b44:	fb0e ce02 	mla	lr, lr, r2, ip
 8012b48:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8012b4c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8012b50:	fa1f fe8e 	uxth.w	lr, lr
 8012b54:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8012b58:	fa5f f888 	uxtb.w	r8, r8
 8012b5c:	fb0c 6c02 	mla	ip, ip, r2, r6
 8012b60:	fb08 4402 	mla	r4, r8, r2, r4
 8012b64:	f10e 0201 	add.w	r2, lr, #1
 8012b68:	fa1f fc8c 	uxth.w	ip, ip
 8012b6c:	b2a4      	uxth	r4, r4
 8012b6e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8012b72:	9a02      	ldr	r2, [sp, #8]
 8012b74:	1c66      	adds	r6, r4, #1
 8012b76:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8012b7a:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8012b7e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8012b82:	ea46 0e0e 	orr.w	lr, r6, lr
 8012b86:	f10c 0601 	add.w	r6, ip, #1
 8012b8a:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8012b8e:	0976      	lsrs	r6, r6, #5
 8012b90:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8012b94:	ea4e 0e06 	orr.w	lr, lr, r6
 8012b98:	f825 e002 	strh.w	lr, [r5, r2]
 8012b9c:	e7b3      	b.n	8012b06 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8012b9e:	f04f 0800 	mov.w	r8, #0
 8012ba2:	eba3 0208 	sub.w	r2, r3, r8
 8012ba6:	2a00      	cmp	r2, #0
 8012ba8:	f77f af3e 	ble.w	8012a28 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8012bac:	1404      	asrs	r4, r0, #16
 8012bae:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8012bb2:	140a      	asrs	r2, r1, #16
 8012bb4:	fb06 4202 	mla	r2, r6, r2, r4
 8012bb8:	9c01      	ldr	r4, [sp, #4]
 8012bba:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8012bbe:	0e22      	lsrs	r2, r4, #24
 8012bc0:	d015      	beq.n	8012bee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8012bc2:	9e04      	ldr	r6, [sp, #16]
 8012bc4:	4372      	muls	r2, r6
 8012bc6:	1c56      	adds	r6, r2, #1
 8012bc8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8012bcc:	0a26      	lsrs	r6, r4, #8
 8012bce:	1212      	asrs	r2, r2, #8
 8012bd0:	2aff      	cmp	r2, #255	; 0xff
 8012bd2:	d113      	bne.n	8012bfc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8012bd4:	0962      	lsrs	r2, r4, #5
 8012bd6:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8012bda:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8012bde:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8012be2:	f026 0607 	bic.w	r6, r6, #7
 8012be6:	4316      	orrs	r6, r2
 8012be8:	4326      	orrs	r6, r4
 8012bea:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8012bee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012bf0:	f108 0801 	add.w	r8, r8, #1
 8012bf4:	4410      	add	r0, r2
 8012bf6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012bf8:	4411      	add	r1, r2
 8012bfa:	e7d2      	b.n	8012ba2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8012bfc:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8012c00:	fa1f fa82 	uxth.w	sl, r2
 8012c04:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8012c08:	43d2      	mvns	r2, r2
 8012c0a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8012c0e:	fb17 f70a 	smulbb	r7, r7, sl
 8012c12:	b2d2      	uxtb	r2, r2
 8012c14:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8012c18:	b2e4      	uxtb	r4, r4
 8012c1a:	b2f6      	uxtb	r6, r6
 8012c1c:	fb0c 7c02 	mla	ip, ip, r2, r7
 8012c20:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8012c24:	fb14 f40a 	smulbb	r4, r4, sl
 8012c28:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8012c2c:	fa1f fc8c 	uxth.w	ip, ip
 8012c30:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8012c34:	fb16 f60a 	smulbb	r6, r6, sl
 8012c38:	fa5f fe8e 	uxtb.w	lr, lr
 8012c3c:	fb0e 4402 	mla	r4, lr, r2, r4
 8012c40:	fb07 6702 	mla	r7, r7, r2, r6
 8012c44:	f10c 0201 	add.w	r2, ip, #1
 8012c48:	b2a4      	uxth	r4, r4
 8012c4a:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8012c4e:	1c66      	adds	r6, r4, #1
 8012c50:	b2bf      	uxth	r7, r7
 8012c52:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8012c56:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8012c5a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8012c5e:	ea46 0c0c 	orr.w	ip, r6, ip
 8012c62:	1c7e      	adds	r6, r7, #1
 8012c64:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8012c68:	0976      	lsrs	r6, r6, #5
 8012c6a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8012c6e:	ea4c 0c06 	orr.w	ip, ip, r6
 8012c72:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8012c76:	e7ba      	b.n	8012bee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8012c78:	b007      	add	sp, #28
 8012c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08012c80 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8012c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c84:	b085      	sub	sp, #20
 8012c86:	468b      	mov	fp, r1
 8012c88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012c8c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8012c8e:	9203      	str	r2, [sp, #12]
 8012c90:	6841      	ldr	r1, [r0, #4]
 8012c92:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012c96:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8012c9a:	fb01 2404 	mla	r4, r1, r4, r2
 8012c9e:	6802      	ldr	r2, [r0, #0]
 8012ca0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8012ca4:	f8d8 2000 	ldr.w	r2, [r8]
 8012ca8:	9201      	str	r2, [sp, #4]
 8012caa:	f1bb 0f00 	cmp.w	fp, #0
 8012cae:	dc03      	bgt.n	8012cb8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8012cb0:	9a03      	ldr	r2, [sp, #12]
 8012cb2:	2a00      	cmp	r2, #0
 8012cb4:	f340 814f 	ble.w	8012f56 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8012cb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012cba:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8012cbe:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8012cc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012cc4:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8012cc8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	dd0e      	ble.n	8012cee <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8012cd0:	1408      	asrs	r0, r1, #16
 8012cd2:	d405      	bmi.n	8012ce0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8012cd4:	42b8      	cmp	r0, r7
 8012cd6:	da03      	bge.n	8012ce0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8012cd8:	1410      	asrs	r0, r2, #16
 8012cda:	d401      	bmi.n	8012ce0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8012cdc:	42b0      	cmp	r0, r6
 8012cde:	db07      	blt.n	8012cf0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8012ce0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012ce2:	3b01      	subs	r3, #1
 8012ce4:	3402      	adds	r4, #2
 8012ce6:	4401      	add	r1, r0
 8012ce8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012cea:	4402      	add	r2, r0
 8012cec:	e7ee      	b.n	8012ccc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8012cee:	d017      	beq.n	8012d20 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8012cf0:	1e58      	subs	r0, r3, #1
 8012cf2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8012cf4:	fb05 1500 	mla	r5, r5, r0, r1
 8012cf8:	142d      	asrs	r5, r5, #16
 8012cfa:	d409      	bmi.n	8012d10 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8012cfc:	42bd      	cmp	r5, r7
 8012cfe:	da07      	bge.n	8012d10 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8012d00:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8012d02:	fb05 2000 	mla	r0, r5, r0, r2
 8012d06:	1400      	asrs	r0, r0, #16
 8012d08:	d402      	bmi.n	8012d10 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8012d0a:	42b0      	cmp	r0, r6
 8012d0c:	f2c0 80ba 	blt.w	8012e84 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8012d10:	2600      	movs	r6, #0
 8012d12:	1998      	adds	r0, r3, r6
 8012d14:	2800      	cmp	r0, #0
 8012d16:	dc3e      	bgt.n	8012d96 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8012d18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012d1c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8012d20:	f1bb 0f00 	cmp.w	fp, #0
 8012d24:	f340 8117 	ble.w	8012f56 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8012d28:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012d2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d2e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012d32:	f1bb 0b01 	subs.w	fp, fp, #1
 8012d36:	eeb0 6a62 	vmov.f32	s12, s5
 8012d3a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8012d3e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012d42:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012d46:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8012d4a:	eeb0 6a43 	vmov.f32	s12, s6
 8012d4e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012d52:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8012d56:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012d5a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012d5e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012d62:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012d66:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012d6a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012d6e:	ee12 2a90 	vmov	r2, s5
 8012d72:	eef0 2a47 	vmov.f32	s5, s14
 8012d76:	fb92 f3f3 	sdiv	r3, r2, r3
 8012d7a:	ee13 2a10 	vmov	r2, s6
 8012d7e:	9311      	str	r3, [sp, #68]	; 0x44
 8012d80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d82:	eeb0 3a67 	vmov.f32	s6, s15
 8012d86:	fb92 f3f3 	sdiv	r3, r2, r3
 8012d8a:	9a03      	ldr	r2, [sp, #12]
 8012d8c:	9312      	str	r3, [sp, #72]	; 0x48
 8012d8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d90:	bf08      	it	eq
 8012d92:	4613      	moveq	r3, r2
 8012d94:	e789      	b.n	8012caa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8012d96:	140f      	asrs	r7, r1, #16
 8012d98:	d424      	bmi.n	8012de4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8012d9a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8012d9e:	42bd      	cmp	r5, r7
 8012da0:	dd20      	ble.n	8012de4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8012da2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8012da6:	d41d      	bmi.n	8012de4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8012da8:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8012dac:	4560      	cmp	r0, ip
 8012dae:	dd19      	ble.n	8012de4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8012db0:	b22d      	sxth	r5, r5
 8012db2:	9801      	ldr	r0, [sp, #4]
 8012db4:	fb0c 7505 	mla	r5, ip, r5, r7
 8012db8:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8012dbc:	0e07      	lsrs	r7, r0, #24
 8012dbe:	2fff      	cmp	r7, #255	; 0xff
 8012dc0:	d116      	bne.n	8012df0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8012dc2:	f06f 0501 	mvn.w	r5, #1
 8012dc6:	fb05 f706 	mul.w	r7, r5, r6
 8012dca:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8012dce:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8012dd2:	0945      	lsrs	r5, r0, #5
 8012dd4:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8012dd8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8012ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8012de0:	4305      	orrs	r5, r0
 8012de2:	53e5      	strh	r5, [r4, r7]
 8012de4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012de6:	3e01      	subs	r6, #1
 8012de8:	4401      	add	r1, r0
 8012dea:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012dec:	4402      	add	r2, r0
 8012dee:	e790      	b.n	8012d12 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8012df0:	b2fd      	uxtb	r5, r7
 8012df2:	2f00      	cmp	r7, #0
 8012df4:	d0f6      	beq.n	8012de4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8012df6:	f06f 0701 	mvn.w	r7, #1
 8012dfa:	fa1f f985 	uxth.w	r9, r5
 8012dfe:	43ed      	mvns	r5, r5
 8012e00:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8012e04:	4377      	muls	r7, r6
 8012e06:	fb1a fa09 	smulbb	sl, sl, r9
 8012e0a:	b2ed      	uxtb	r5, r5
 8012e0c:	f834 e007 	ldrh.w	lr, [r4, r7]
 8012e10:	9702      	str	r7, [sp, #8]
 8012e12:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012e16:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8012e1a:	fb17 f709 	smulbb	r7, r7, r9
 8012e1e:	b2c0      	uxtb	r0, r0
 8012e20:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8012e24:	fb10 f009 	smulbb	r0, r0, r9
 8012e28:	fb0c 7c05 	mla	ip, ip, r5, r7
 8012e2c:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8012e30:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8012e34:	fa1f fc8c 	uxth.w	ip, ip
 8012e38:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8012e3c:	fa5f fe8e 	uxtb.w	lr, lr
 8012e40:	fb07 a705 	mla	r7, r7, r5, sl
 8012e44:	fb0e 0005 	mla	r0, lr, r5, r0
 8012e48:	f10c 0501 	add.w	r5, ip, #1
 8012e4c:	b2bf      	uxth	r7, r7
 8012e4e:	b280      	uxth	r0, r0
 8012e50:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8012e54:	f100 0a01 	add.w	sl, r0, #1
 8012e58:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8012e5c:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8012e60:	9802      	ldr	r0, [sp, #8]
 8012e62:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8012e66:	ea4a 0c0c 	orr.w	ip, sl, ip
 8012e6a:	f107 0a01 	add.w	sl, r7, #1
 8012e6e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8012e72:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8012e76:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8012e7a:	ea4c 0c0a 	orr.w	ip, ip, sl
 8012e7e:	f824 c000 	strh.w	ip, [r4, r0]
 8012e82:	e7af      	b.n	8012de4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8012e84:	f04f 0e00 	mov.w	lr, #0
 8012e88:	eba3 000e 	sub.w	r0, r3, lr
 8012e8c:	2800      	cmp	r0, #0
 8012e8e:	f77f af43 	ble.w	8012d18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8012e92:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8012e96:	140d      	asrs	r5, r1, #16
 8012e98:	1410      	asrs	r0, r2, #16
 8012e9a:	fb06 5000 	mla	r0, r6, r0, r5
 8012e9e:	9d01      	ldr	r5, [sp, #4]
 8012ea0:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8012ea4:	0e2e      	lsrs	r6, r5, #24
 8012ea6:	2eff      	cmp	r6, #255	; 0xff
 8012ea8:	d112      	bne.n	8012ed0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8012eaa:	482c      	ldr	r0, [pc, #176]	; (8012f5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8012eac:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8012eb0:	0968      	lsrs	r0, r5, #5
 8012eb2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8012eb6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8012eba:	4330      	orrs	r0, r6
 8012ebc:	4328      	orrs	r0, r5
 8012ebe:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8012ec2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012ec4:	f10e 0e01 	add.w	lr, lr, #1
 8012ec8:	4401      	add	r1, r0
 8012eca:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012ecc:	4402      	add	r2, r0
 8012ece:	e7db      	b.n	8012e88 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8012ed0:	b2f0      	uxtb	r0, r6
 8012ed2:	2e00      	cmp	r6, #0
 8012ed4:	d0f5      	beq.n	8012ec2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8012ed6:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8012eda:	fa1f f980 	uxth.w	r9, r0
 8012ede:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8012ee2:	43c0      	mvns	r0, r0
 8012ee4:	ea4f 272c 	mov.w	r7, ip, asr #8
 8012ee8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8012eec:	fb16 f609 	smulbb	r6, r6, r9
 8012ef0:	b2c0      	uxtb	r0, r0
 8012ef2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8012ef6:	b2ed      	uxtb	r5, r5
 8012ef8:	fb1a fa09 	smulbb	sl, sl, r9
 8012efc:	fb07 6700 	mla	r7, r7, r0, r6
 8012f00:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8012f04:	fb15 f509 	smulbb	r5, r5, r9
 8012f08:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8012f0c:	b2bf      	uxth	r7, r7
 8012f0e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8012f12:	fa5f fc8c 	uxtb.w	ip, ip
 8012f16:	fb06 a600 	mla	r6, r6, r0, sl
 8012f1a:	fb0c 5500 	mla	r5, ip, r0, r5
 8012f1e:	1c78      	adds	r0, r7, #1
 8012f20:	b2b6      	uxth	r6, r6
 8012f22:	b2ad      	uxth	r5, r5
 8012f24:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8012f28:	f105 0a01 	add.w	sl, r5, #1
 8012f2c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8012f30:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8012f34:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8012f38:	ea4a 0707 	orr.w	r7, sl, r7
 8012f3c:	f106 0a01 	add.w	sl, r6, #1
 8012f40:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8012f44:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8012f48:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8012f4c:	ea47 070a 	orr.w	r7, r7, sl
 8012f50:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8012f54:	e7b5      	b.n	8012ec2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8012f56:	b005      	add	sp, #20
 8012f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f5c:	fffff800 	.word	0xfffff800

08012f60 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8012f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f64:	b087      	sub	sp, #28
 8012f66:	468b      	mov	fp, r1
 8012f68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012f6c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8012f6e:	9203      	str	r2, [sp, #12]
 8012f70:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8012f74:	6841      	ldr	r1, [r0, #4]
 8012f76:	9204      	str	r2, [sp, #16]
 8012f78:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8012f7c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8012f80:	fb01 2404 	mla	r4, r1, r4, r2
 8012f84:	6802      	ldr	r2, [r0, #0]
 8012f86:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8012f8a:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8012f8e:	3201      	adds	r2, #1
 8012f90:	f022 0201 	bic.w	r2, r2, #1
 8012f94:	9200      	str	r2, [sp, #0]
 8012f96:	f8d9 2000 	ldr.w	r2, [r9]
 8012f9a:	9201      	str	r2, [sp, #4]
 8012f9c:	f1bb 0f00 	cmp.w	fp, #0
 8012fa0:	dc03      	bgt.n	8012faa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8012fa2:	9a03      	ldr	r2, [sp, #12]
 8012fa4:	2a00      	cmp	r2, #0
 8012fa6:	f340 816a 	ble.w	801327e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8012faa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012fac:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8012fb0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8012fb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012fb6:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8012fba:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	dd0e      	ble.n	8012fe0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8012fc2:	1402      	asrs	r2, r0, #16
 8012fc4:	d405      	bmi.n	8012fd2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8012fc6:	42ba      	cmp	r2, r7
 8012fc8:	da03      	bge.n	8012fd2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8012fca:	140a      	asrs	r2, r1, #16
 8012fcc:	d401      	bmi.n	8012fd2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8012fce:	42b2      	cmp	r2, r6
 8012fd0:	db07      	blt.n	8012fe2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8012fd2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012fd4:	3b01      	subs	r3, #1
 8012fd6:	3402      	adds	r4, #2
 8012fd8:	4410      	add	r0, r2
 8012fda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012fdc:	4411      	add	r1, r2
 8012fde:	e7ee      	b.n	8012fbe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8012fe0:	d017      	beq.n	8013012 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8012fe2:	1e5a      	subs	r2, r3, #1
 8012fe4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8012fe6:	fb05 0502 	mla	r5, r5, r2, r0
 8012fea:	142d      	asrs	r5, r5, #16
 8012fec:	d409      	bmi.n	8013002 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8012fee:	42bd      	cmp	r5, r7
 8012ff0:	da07      	bge.n	8013002 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8012ff2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8012ff4:	fb05 1202 	mla	r2, r5, r2, r1
 8012ff8:	1412      	asrs	r2, r2, #16
 8012ffa:	d402      	bmi.n	8013002 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8012ffc:	42b2      	cmp	r2, r6
 8012ffe:	f2c0 80c8 	blt.w	8013192 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8013002:	2700      	movs	r7, #0
 8013004:	19da      	adds	r2, r3, r7
 8013006:	2a00      	cmp	r2, #0
 8013008:	dc3e      	bgt.n	8013088 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801300a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801300e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013012:	f1bb 0f00 	cmp.w	fp, #0
 8013016:	f340 8132 	ble.w	801327e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801301a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801301e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013020:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013024:	f1bb 0b01 	subs.w	fp, fp, #1
 8013028:	eeb0 6a62 	vmov.f32	s12, s5
 801302c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013030:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013034:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013038:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801303c:	eeb0 6a43 	vmov.f32	s12, s6
 8013040:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013044:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8013048:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801304c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013050:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013054:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013058:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801305c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013060:	ee12 2a90 	vmov	r2, s5
 8013064:	eef0 2a47 	vmov.f32	s5, s14
 8013068:	fb92 f3f3 	sdiv	r3, r2, r3
 801306c:	ee13 2a10 	vmov	r2, s6
 8013070:	9313      	str	r3, [sp, #76]	; 0x4c
 8013072:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013074:	eeb0 3a67 	vmov.f32	s6, s15
 8013078:	fb92 f3f3 	sdiv	r3, r2, r3
 801307c:	9a03      	ldr	r2, [sp, #12]
 801307e:	9314      	str	r3, [sp, #80]	; 0x50
 8013080:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013082:	bf08      	it	eq
 8013084:	4613      	moveq	r3, r2
 8013086:	e789      	b.n	8012f9c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8013088:	1405      	asrs	r5, r0, #16
 801308a:	d436      	bmi.n	80130fa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801308c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8013090:	42aa      	cmp	r2, r5
 8013092:	dd32      	ble.n	80130fa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8013094:	140e      	asrs	r6, r1, #16
 8013096:	d430      	bmi.n	80130fa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8013098:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801309c:	42b2      	cmp	r2, r6
 801309e:	dd2c      	ble.n	80130fa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80130a0:	9a00      	ldr	r2, [sp, #0]
 80130a2:	fb06 5502 	mla	r5, r6, r2, r5
 80130a6:	9e01      	ldr	r6, [sp, #4]
 80130a8:	086a      	lsrs	r2, r5, #1
 80130aa:	5cb2      	ldrb	r2, [r6, r2]
 80130ac:	07ee      	lsls	r6, r5, #31
 80130ae:	bf54      	ite	pl
 80130b0:	f002 020f 	andpl.w	r2, r2, #15
 80130b4:	1112      	asrmi	r2, r2, #4
 80130b6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80130ba:	b2d2      	uxtb	r2, r2
 80130bc:	b1ea      	cbz	r2, 80130fa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80130be:	9d04      	ldr	r5, [sp, #16]
 80130c0:	436a      	muls	r2, r5
 80130c2:	1c55      	adds	r5, r2, #1
 80130c4:	eb05 2222 	add.w	r2, r5, r2, asr #8
 80130c8:	4d6e      	ldr	r5, [pc, #440]	; (8013284 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 80130ca:	1212      	asrs	r2, r2, #8
 80130cc:	682d      	ldr	r5, [r5, #0]
 80130ce:	2aff      	cmp	r2, #255	; 0xff
 80130d0:	ea4f 2615 	mov.w	r6, r5, lsr #8
 80130d4:	9605      	str	r6, [sp, #20]
 80130d6:	d116      	bne.n	8013106 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80130d8:	f06f 0201 	mvn.w	r2, #1
 80130dc:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 80130e0:	fb02 fc07 	mul.w	ip, r2, r7
 80130e4:	096a      	lsrs	r2, r5, #5
 80130e6:	f026 0607 	bic.w	r6, r6, #7
 80130ea:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80130ee:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80130f2:	4316      	orrs	r6, r2
 80130f4:	432e      	orrs	r6, r5
 80130f6:	f824 600c 	strh.w	r6, [r4, ip]
 80130fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80130fc:	3f01      	subs	r7, #1
 80130fe:	4410      	add	r0, r2
 8013100:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013102:	4411      	add	r1, r2
 8013104:	e77e      	b.n	8013004 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8013106:	f06f 0601 	mvn.w	r6, #1
 801310a:	fa1f fa82 	uxth.w	sl, r2
 801310e:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8013112:	43d2      	mvns	r2, r2
 8013114:	437e      	muls	r6, r7
 8013116:	b2ed      	uxtb	r5, r5
 8013118:	fb1c fc0a 	smulbb	ip, ip, sl
 801311c:	b2d2      	uxtb	r2, r2
 801311e:	f834 8006 	ldrh.w	r8, [r4, r6]
 8013122:	fb15 f50a 	smulbb	r5, r5, sl
 8013126:	9602      	str	r6, [sp, #8]
 8013128:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801312c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8013130:	fb16 f60a 	smulbb	r6, r6, sl
 8013134:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8013138:	fb0e ce02 	mla	lr, lr, r2, ip
 801313c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8013140:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8013144:	fa1f fe8e 	uxth.w	lr, lr
 8013148:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801314c:	fa5f f888 	uxtb.w	r8, r8
 8013150:	fb0c 6c02 	mla	ip, ip, r2, r6
 8013154:	fb08 5502 	mla	r5, r8, r2, r5
 8013158:	f10e 0201 	add.w	r2, lr, #1
 801315c:	fa1f fc8c 	uxth.w	ip, ip
 8013160:	b2ad      	uxth	r5, r5
 8013162:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8013166:	9a02      	ldr	r2, [sp, #8]
 8013168:	1c6e      	adds	r6, r5, #1
 801316a:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801316e:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 8013172:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8013176:	ea46 0e0e 	orr.w	lr, r6, lr
 801317a:	f10c 0601 	add.w	r6, ip, #1
 801317e:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8013182:	0976      	lsrs	r6, r6, #5
 8013184:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8013188:	ea4e 0e06 	orr.w	lr, lr, r6
 801318c:	f824 e002 	strh.w	lr, [r4, r2]
 8013190:	e7b3      	b.n	80130fa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8013192:	f04f 0800 	mov.w	r8, #0
 8013196:	eba3 0208 	sub.w	r2, r3, r8
 801319a:	2a00      	cmp	r2, #0
 801319c:	f77f af35 	ble.w	801300a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80131a0:	1402      	asrs	r2, r0, #16
 80131a2:	9e00      	ldr	r6, [sp, #0]
 80131a4:	140d      	asrs	r5, r1, #16
 80131a6:	fb06 2505 	mla	r5, r6, r5, r2
 80131aa:	9e01      	ldr	r6, [sp, #4]
 80131ac:	086a      	lsrs	r2, r5, #1
 80131ae:	07ed      	lsls	r5, r5, #31
 80131b0:	5cb2      	ldrb	r2, [r6, r2]
 80131b2:	bf54      	ite	pl
 80131b4:	f002 020f 	andpl.w	r2, r2, #15
 80131b8:	1112      	asrmi	r2, r2, #4
 80131ba:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80131be:	b2d2      	uxtb	r2, r2
 80131c0:	b1c2      	cbz	r2, 80131f4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80131c2:	9d04      	ldr	r5, [sp, #16]
 80131c4:	436a      	muls	r2, r5
 80131c6:	1c55      	adds	r5, r2, #1
 80131c8:	eb05 2222 	add.w	r2, r5, r2, asr #8
 80131cc:	4d2d      	ldr	r5, [pc, #180]	; (8013284 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 80131ce:	1212      	asrs	r2, r2, #8
 80131d0:	682e      	ldr	r6, [r5, #0]
 80131d2:	2aff      	cmp	r2, #255	; 0xff
 80131d4:	ea4f 2516 	mov.w	r5, r6, lsr #8
 80131d8:	d113      	bne.n	8013202 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80131da:	0972      	lsrs	r2, r6, #5
 80131dc:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 80131e0:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80131e4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80131e8:	f025 0507 	bic.w	r5, r5, #7
 80131ec:	4315      	orrs	r5, r2
 80131ee:	4335      	orrs	r5, r6
 80131f0:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 80131f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80131f6:	f108 0801 	add.w	r8, r8, #1
 80131fa:	4410      	add	r0, r2
 80131fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80131fe:	4411      	add	r1, r2
 8013200:	e7c9      	b.n	8013196 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8013202:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8013206:	fa1f fa82 	uxth.w	sl, r2
 801320a:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801320e:	43d2      	mvns	r2, r2
 8013210:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8013214:	fb17 f70a 	smulbb	r7, r7, sl
 8013218:	b2d2      	uxtb	r2, r2
 801321a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801321e:	b2f6      	uxtb	r6, r6
 8013220:	b2ed      	uxtb	r5, r5
 8013222:	fb0c 7c02 	mla	ip, ip, r2, r7
 8013226:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801322a:	fb16 f60a 	smulbb	r6, r6, sl
 801322e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8013232:	fa1f fc8c 	uxth.w	ip, ip
 8013236:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801323a:	fb15 f50a 	smulbb	r5, r5, sl
 801323e:	fa5f fe8e 	uxtb.w	lr, lr
 8013242:	fb0e 6602 	mla	r6, lr, r2, r6
 8013246:	fb07 5702 	mla	r7, r7, r2, r5
 801324a:	f10c 0201 	add.w	r2, ip, #1
 801324e:	b2b6      	uxth	r6, r6
 8013250:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8013254:	1c75      	adds	r5, r6, #1
 8013256:	b2bf      	uxth	r7, r7
 8013258:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801325c:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8013260:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8013264:	ea45 0c0c 	orr.w	ip, r5, ip
 8013268:	1c7d      	adds	r5, r7, #1
 801326a:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801326e:	096d      	lsrs	r5, r5, #5
 8013270:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8013274:	ea4c 0c05 	orr.w	ip, ip, r5
 8013278:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801327c:	e7ba      	b.n	80131f4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801327e:	b007      	add	sp, #28
 8013280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013284:	20024420 	.word	0x20024420

08013288 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801328c:	b087      	sub	sp, #28
 801328e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013292:	f8df 8308 	ldr.w	r8, [pc, #776]	; 801359c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8013296:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013298:	9101      	str	r1, [sp, #4]
 801329a:	9205      	str	r2, [sp, #20]
 801329c:	6841      	ldr	r1, [r0, #4]
 801329e:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 80132a2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80132a6:	fb01 2404 	mla	r4, r1, r4, r2
 80132aa:	6802      	ldr	r2, [r0, #0]
 80132ac:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80132b0:	f8db 2008 	ldr.w	r2, [fp, #8]
 80132b4:	3201      	adds	r2, #1
 80132b6:	f022 0201 	bic.w	r2, r2, #1
 80132ba:	9202      	str	r2, [sp, #8]
 80132bc:	f8db 2000 	ldr.w	r2, [fp]
 80132c0:	9203      	str	r2, [sp, #12]
 80132c2:	9a01      	ldr	r2, [sp, #4]
 80132c4:	2a00      	cmp	r2, #0
 80132c6:	dc03      	bgt.n	80132d0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80132c8:	9a05      	ldr	r2, [sp, #20]
 80132ca:	2a00      	cmp	r2, #0
 80132cc:	f340 8162 	ble.w	8013594 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80132d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80132d2:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 80132d6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80132da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80132dc:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 80132e0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	dd0e      	ble.n	8013306 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80132e8:	1402      	asrs	r2, r0, #16
 80132ea:	d405      	bmi.n	80132f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80132ec:	42ba      	cmp	r2, r7
 80132ee:	da03      	bge.n	80132f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80132f0:	140a      	asrs	r2, r1, #16
 80132f2:	d401      	bmi.n	80132f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80132f4:	42b2      	cmp	r2, r6
 80132f6:	db07      	blt.n	8013308 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80132f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80132fa:	3b01      	subs	r3, #1
 80132fc:	3402      	adds	r4, #2
 80132fe:	4410      	add	r0, r2
 8013300:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013302:	4411      	add	r1, r2
 8013304:	e7ee      	b.n	80132e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013306:	d017      	beq.n	8013338 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8013308:	1e5a      	subs	r2, r3, #1
 801330a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801330c:	fb05 0502 	mla	r5, r5, r2, r0
 8013310:	142d      	asrs	r5, r5, #16
 8013312:	d409      	bmi.n	8013328 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8013314:	42bd      	cmp	r5, r7
 8013316:	da07      	bge.n	8013328 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8013318:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801331a:	fb05 1202 	mla	r2, r5, r2, r1
 801331e:	1412      	asrs	r2, r2, #16
 8013320:	d402      	bmi.n	8013328 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8013322:	42b2      	cmp	r2, r6
 8013324:	f2c0 80c3 	blt.w	80134ae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8013328:	2500      	movs	r5, #0
 801332a:	195a      	adds	r2, r3, r5
 801332c:	2a00      	cmp	r2, #0
 801332e:	dc3f      	bgt.n	80133b0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8013330:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013334:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013338:	9b01      	ldr	r3, [sp, #4]
 801333a:	2b00      	cmp	r3, #0
 801333c:	f340 812a 	ble.w	8013594 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8013340:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013344:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013346:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801334a:	eeb0 6a62 	vmov.f32	s12, s5
 801334e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013352:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013356:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801335a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801335e:	eeb0 6a43 	vmov.f32	s12, s6
 8013362:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013366:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801336a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801336e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013372:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013376:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801337a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801337e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013382:	ee12 2a90 	vmov	r2, s5
 8013386:	eef0 2a47 	vmov.f32	s5, s14
 801338a:	fb92 f3f3 	sdiv	r3, r2, r3
 801338e:	ee13 2a10 	vmov	r2, s6
 8013392:	9313      	str	r3, [sp, #76]	; 0x4c
 8013394:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013396:	eeb0 3a67 	vmov.f32	s6, s15
 801339a:	fb92 f3f3 	sdiv	r3, r2, r3
 801339e:	9314      	str	r3, [sp, #80]	; 0x50
 80133a0:	9b01      	ldr	r3, [sp, #4]
 80133a2:	9a05      	ldr	r2, [sp, #20]
 80133a4:	3b01      	subs	r3, #1
 80133a6:	9301      	str	r3, [sp, #4]
 80133a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80133aa:	bf08      	it	eq
 80133ac:	4613      	moveq	r3, r2
 80133ae:	e788      	b.n	80132c2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80133b0:	1406      	asrs	r6, r0, #16
 80133b2:	d42c      	bmi.n	801340e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80133b4:	f8db 2008 	ldr.w	r2, [fp, #8]
 80133b8:	42b2      	cmp	r2, r6
 80133ba:	dd28      	ble.n	801340e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80133bc:	140f      	asrs	r7, r1, #16
 80133be:	d426      	bmi.n	801340e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80133c0:	f8db 200c 	ldr.w	r2, [fp, #12]
 80133c4:	42ba      	cmp	r2, r7
 80133c6:	dd22      	ble.n	801340e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80133c8:	9a02      	ldr	r2, [sp, #8]
 80133ca:	fb07 6602 	mla	r6, r7, r2, r6
 80133ce:	9f03      	ldr	r7, [sp, #12]
 80133d0:	0872      	lsrs	r2, r6, #1
 80133d2:	07f6      	lsls	r6, r6, #31
 80133d4:	5cba      	ldrb	r2, [r7, r2]
 80133d6:	bf54      	ite	pl
 80133d8:	f002 020f 	andpl.w	r2, r2, #15
 80133dc:	1112      	asrmi	r2, r2, #4
 80133de:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80133e2:	b2d2      	uxtb	r2, r2
 80133e4:	2aff      	cmp	r2, #255	; 0xff
 80133e6:	d118      	bne.n	801341a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80133e8:	f06f 0601 	mvn.w	r6, #1
 80133ec:	f8d8 2000 	ldr.w	r2, [r8]
 80133f0:	fb06 f705 	mul.w	r7, r6, r5
 80133f4:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 80133f8:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 80133fc:	0956      	lsrs	r6, r2, #5
 80133fe:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8013402:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8013406:	ea4c 0606 	orr.w	r6, ip, r6
 801340a:	4316      	orrs	r6, r2
 801340c:	53e6      	strh	r6, [r4, r7]
 801340e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013410:	3d01      	subs	r5, #1
 8013412:	4410      	add	r0, r2
 8013414:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013416:	4411      	add	r1, r2
 8013418:	e787      	b.n	801332a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801341a:	2a00      	cmp	r2, #0
 801341c:	d0f7      	beq.n	801340e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801341e:	f06f 0601 	mvn.w	r6, #1
 8013422:	f8d8 c000 	ldr.w	ip, [r8]
 8013426:	fa1f f982 	uxth.w	r9, r2
 801342a:	43d2      	mvns	r2, r2
 801342c:	436e      	muls	r6, r5
 801342e:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8013432:	b2d2      	uxtb	r2, r2
 8013434:	f834 e006 	ldrh.w	lr, [r4, r6]
 8013438:	fb1a fa09 	smulbb	sl, sl, r9
 801343c:	9604      	str	r6, [sp, #16]
 801343e:	f3cc 4607 	ubfx	r6, ip, #16, #8
 8013442:	ea4f 272e 	mov.w	r7, lr, asr #8
 8013446:	fb16 f609 	smulbb	r6, r6, r9
 801344a:	fa5f fc8c 	uxtb.w	ip, ip
 801344e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8013452:	fb1c fc09 	smulbb	ip, ip, r9
 8013456:	fb07 6702 	mla	r7, r7, r2, r6
 801345a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801345e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8013462:	b2bf      	uxth	r7, r7
 8013464:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8013468:	fa5f fe8e 	uxtb.w	lr, lr
 801346c:	fb06 a602 	mla	r6, r6, r2, sl
 8013470:	fb0e cc02 	mla	ip, lr, r2, ip
 8013474:	1c7a      	adds	r2, r7, #1
 8013476:	b2b6      	uxth	r6, r6
 8013478:	fa1f fc8c 	uxth.w	ip, ip
 801347c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8013480:	9a04      	ldr	r2, [sp, #16]
 8013482:	f10c 0a01 	add.w	sl, ip, #1
 8013486:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801348a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801348e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8013492:	ea4a 0707 	orr.w	r7, sl, r7
 8013496:	f106 0a01 	add.w	sl, r6, #1
 801349a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801349e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80134a2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80134a6:	ea47 070a 	orr.w	r7, r7, sl
 80134aa:	52a7      	strh	r7, [r4, r2]
 80134ac:	e7af      	b.n	801340e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80134ae:	f04f 0e00 	mov.w	lr, #0
 80134b2:	eba3 020e 	sub.w	r2, r3, lr
 80134b6:	2a00      	cmp	r2, #0
 80134b8:	f77f af3a 	ble.w	8013330 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80134bc:	1402      	asrs	r2, r0, #16
 80134be:	9e02      	ldr	r6, [sp, #8]
 80134c0:	140d      	asrs	r5, r1, #16
 80134c2:	fb06 2505 	mla	r5, r6, r5, r2
 80134c6:	9e03      	ldr	r6, [sp, #12]
 80134c8:	086a      	lsrs	r2, r5, #1
 80134ca:	07ed      	lsls	r5, r5, #31
 80134cc:	5cb2      	ldrb	r2, [r6, r2]
 80134ce:	bf54      	ite	pl
 80134d0:	f002 020f 	andpl.w	r2, r2, #15
 80134d4:	1112      	asrmi	r2, r2, #4
 80134d6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80134da:	b2d2      	uxtb	r2, r2
 80134dc:	2aff      	cmp	r2, #255	; 0xff
 80134de:	d115      	bne.n	801350c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80134e0:	f8d8 5000 	ldr.w	r5, [r8]
 80134e4:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 80134e8:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 80134ec:	096a      	lsrs	r2, r5, #5
 80134ee:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80134f2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80134f6:	4332      	orrs	r2, r6
 80134f8:	432a      	orrs	r2, r5
 80134fa:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 80134fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013500:	f10e 0e01 	add.w	lr, lr, #1
 8013504:	4410      	add	r0, r2
 8013506:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013508:	4411      	add	r1, r2
 801350a:	e7d2      	b.n	80134b2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801350c:	2a00      	cmp	r2, #0
 801350e:	d0f6      	beq.n	80134fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8013510:	f8d8 7000 	ldr.w	r7, [r8]
 8013514:	fa1f f982 	uxth.w	r9, r2
 8013518:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801351c:	43d2      	mvns	r2, r2
 801351e:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8013522:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8013526:	ea4f 262c 	mov.w	r6, ip, asr #8
 801352a:	fb15 f509 	smulbb	r5, r5, r9
 801352e:	b2d2      	uxtb	r2, r2
 8013530:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8013534:	b2ff      	uxtb	r7, r7
 8013536:	fb1a fa09 	smulbb	sl, sl, r9
 801353a:	fb06 5602 	mla	r6, r6, r2, r5
 801353e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8013542:	fb17 f709 	smulbb	r7, r7, r9
 8013546:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801354a:	b2b6      	uxth	r6, r6
 801354c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8013550:	fa5f fc8c 	uxtb.w	ip, ip
 8013554:	fb05 a502 	mla	r5, r5, r2, sl
 8013558:	fb0c 7702 	mla	r7, ip, r2, r7
 801355c:	1c72      	adds	r2, r6, #1
 801355e:	b2ad      	uxth	r5, r5
 8013560:	b2bf      	uxth	r7, r7
 8013562:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8013566:	f107 0a01 	add.w	sl, r7, #1
 801356a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801356e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8013572:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8013576:	ea4a 0606 	orr.w	r6, sl, r6
 801357a:	f105 0a01 	add.w	sl, r5, #1
 801357e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8013582:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8013586:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801358a:	ea46 060a 	orr.w	r6, r6, sl
 801358e:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 8013592:	e7b4      	b.n	80134fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8013594:	b007      	add	sp, #28
 8013596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801359a:	bf00      	nop
 801359c:	20024420 	.word	0x20024420

080135a0 <_ZN8touchgfx8LCD16bppD1Ev>:
 80135a0:	4770      	bx	lr

080135a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80135a2:	4770      	bx	lr

080135a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80135a4:	4770      	bx	lr

080135a6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80135a6:	4770      	bx	lr

080135a8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80135a8:	4770      	bx	lr

080135aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80135aa:	4770      	bx	lr

080135ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80135ac:	4770      	bx	lr

080135ae <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80135ae:	4770      	bx	lr

080135b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80135b0:	4770      	bx	lr

080135b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80135b2:	4770      	bx	lr

080135b4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80135b4:	4770      	bx	lr

080135b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80135b6:	4770      	bx	lr

080135b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80135b8:	4770      	bx	lr

080135ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80135ba:	4770      	bx	lr

080135bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80135bc:	4770      	bx	lr

080135be <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80135be:	4770      	bx	lr

080135c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 80135c0:	4770      	bx	lr

080135c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80135c2:	4770      	bx	lr

080135c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80135c4:	4770      	bx	lr

080135c6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80135c6:	4770      	bx	lr

080135c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80135c8:	4770      	bx	lr

080135ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80135ca:	4770      	bx	lr

080135cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80135cc:	4770      	bx	lr

080135ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80135ce:	4770      	bx	lr

080135d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80135d0:	4770      	bx	lr

080135d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80135d2:	4770      	bx	lr

080135d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80135d4:	4770      	bx	lr

080135d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80135d6:	4770      	bx	lr

080135d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80135d8:	4770      	bx	lr

080135da <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80135da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135de:	b088      	sub	sp, #32
 80135e0:	4606      	mov	r6, r0
 80135e2:	4688      	mov	r8, r1
 80135e4:	4691      	mov	r9, r2
 80135e6:	ac08      	add	r4, sp, #32
 80135e8:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80135ec:	4620      	mov	r0, r4
 80135ee:	f7fd fc65 	bl	8010ebc <_ZNK8touchgfx6Bitmap7getDataEv>
 80135f2:	6833      	ldr	r3, [r6, #0]
 80135f4:	4605      	mov	r5, r0
 80135f6:	4620      	mov	r0, r4
 80135f8:	699f      	ldr	r7, [r3, #24]
 80135fa:	f7fd fb73 	bl	8010ce4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80135fe:	4682      	mov	sl, r0
 8013600:	4620      	mov	r0, r4
 8013602:	f7fd fba3 	bl	8010d4c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013606:	9500      	str	r5, [sp, #0]
 8013608:	464b      	mov	r3, r9
 801360a:	4642      	mov	r2, r8
 801360c:	4631      	mov	r1, r6
 801360e:	e9cd a001 	strd	sl, r0, [sp, #4]
 8013612:	a806      	add	r0, sp, #24
 8013614:	47b8      	blx	r7
 8013616:	4628      	mov	r0, r5
 8013618:	b008      	add	sp, #32
 801361a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08013620 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8013620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013624:	2300      	movs	r3, #0
 8013626:	9300      	str	r3, [sp, #0]
 8013628:	4b3d      	ldr	r3, [pc, #244]	; (8013720 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801362a:	781b      	ldrb	r3, [r3, #0]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d137      	bne.n	80136a0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8013630:	4a3c      	ldr	r2, [pc, #240]	; (8013724 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8013632:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013636:	f8ad 2004 	strh.w	r2, [sp, #4]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d132      	bne.n	80136a4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801363e:	4b3a      	ldr	r3, [pc, #232]	; (8013728 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8013640:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013644:	ac02      	add	r4, sp, #8
 8013646:	6808      	ldr	r0, [r1, #0]
 8013648:	f8ad 3006 	strh.w	r3, [sp, #6]
 801364c:	ab02      	add	r3, sp, #8
 801364e:	6849      	ldr	r1, [r1, #4]
 8013650:	4d36      	ldr	r5, [pc, #216]	; (801372c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 8013652:	c303      	stmia	r3!, {r0, r1}
 8013654:	4669      	mov	r1, sp
 8013656:	4620      	mov	r0, r4
 8013658:	f7fa fda0 	bl	800e19c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801365c:	4668      	mov	r0, sp
 801365e:	f7fa fd75 	bl	800e14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013662:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8013666:	f8bd 2000 	ldrh.w	r2, [sp]
 801366a:	462f      	mov	r7, r5
 801366c:	6828      	ldr	r0, [r5, #0]
 801366e:	4413      	add	r3, r2
 8013670:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013674:	f8ad 3008 	strh.w	r3, [sp, #8]
 8013678:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801367c:	4413      	add	r3, r2
 801367e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8013682:	6803      	ldr	r3, [r0, #0]
 8013684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013686:	4798      	blx	r3
 8013688:	f010 0f01 	tst.w	r0, #1
 801368c:	d00c      	beq.n	80136a8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801368e:	6828      	ldr	r0, [r5, #0]
 8013690:	6803      	ldr	r3, [r0, #0]
 8013692:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013698:	4798      	blx	r3
 801369a:	b004      	add	sp, #16
 801369c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136a0:	4a21      	ldr	r2, [pc, #132]	; (8013728 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 80136a2:	e7c6      	b.n	8013632 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 80136a4:	4b1f      	ldr	r3, [pc, #124]	; (8013724 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80136a6:	e7cb      	b.n	8013640 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 80136a8:	6838      	ldr	r0, [r7, #0]
 80136aa:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 80136ae:	6803      	ldr	r3, [r0, #0]
 80136b0:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 80136b4:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80136b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136ba:	4798      	blx	r3
 80136bc:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80136c0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80136c4:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 80136c8:	fb16 3602 	smlabb	r6, r6, r2, r3
 80136cc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80136d0:	6838      	ldr	r0, [r7, #0]
 80136d2:	6803      	ldr	r3, [r0, #0]
 80136d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136d6:	4798      	blx	r3
 80136d8:	4a12      	ldr	r2, [pc, #72]	; (8013724 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80136da:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 80136de:	8813      	ldrh	r3, [r2, #0]
 80136e0:	4691      	mov	r9, r2
 80136e2:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80136e6:	435d      	muls	r5, r3
 80136e8:	fb03 1404 	mla	r4, r3, r4, r1
 80136ec:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80136f0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80136f4:	6838      	ldr	r0, [r7, #0]
 80136f6:	42ac      	cmp	r4, r5
 80136f8:	6803      	ldr	r3, [r0, #0]
 80136fa:	d20e      	bcs.n	801371a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 80136fc:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8013700:	4632      	mov	r2, r6
 8013702:	4643      	mov	r3, r8
 8013704:	4621      	mov	r1, r4
 8013706:	47d0      	blx	sl
 8013708:	f8b9 3000 	ldrh.w	r3, [r9]
 801370c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013710:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8013714:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8013718:	e7ec      	b.n	80136f4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801371c:	4798      	blx	r3
 801371e:	e7bc      	b.n	801369a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8013720:	20024410 	.word	0x20024410
 8013724:	20024412 	.word	0x20024412
 8013728:	20024414 	.word	0x20024414
 801372c:	20024418 	.word	0x20024418

08013730 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8013730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013734:	b08b      	sub	sp, #44	; 0x2c
 8013736:	460f      	mov	r7, r1
 8013738:	4616      	mov	r6, r2
 801373a:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801373e:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8013742:	f1bb 0f00 	cmp.w	fp, #0
 8013746:	d049      	beq.n	80137dc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8013748:	6810      	ldr	r0, [r2, #0]
 801374a:	ad06      	add	r5, sp, #24
 801374c:	6851      	ldr	r1, [r2, #4]
 801374e:	c503      	stmia	r5!, {r0, r1}
 8013750:	6818      	ldr	r0, [r3, #0]
 8013752:	ad08      	add	r5, sp, #32
 8013754:	6859      	ldr	r1, [r3, #4]
 8013756:	c503      	stmia	r5!, {r0, r1}
 8013758:	a806      	add	r0, sp, #24
 801375a:	f7fa fcf7 	bl	800e14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801375e:	4631      	mov	r1, r6
 8013760:	a808      	add	r0, sp, #32
 8013762:	f7fa fd1b 	bl	800e19c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8013766:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801376a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801376e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8013772:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8013776:	fb16 2103 	smlabb	r1, r6, r3, r2
 801377a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801377e:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8013782:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8013786:	4f5f      	ldr	r7, [pc, #380]	; (8013904 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8013788:	440a      	add	r2, r1
 801378a:	6838      	ldr	r0, [r7, #0]
 801378c:	46b9      	mov	r9, r7
 801378e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8013792:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8013796:	4413      	add	r3, r2
 8013798:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801379c:	6803      	ldr	r3, [r0, #0]
 801379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137a0:	4798      	blx	r3
 80137a2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80137a6:	d01c      	beq.n	80137e2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 80137a8:	f010 0f04 	tst.w	r0, #4
 80137ac:	d01d      	beq.n	80137ea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80137ae:	f8d9 0000 	ldr.w	r0, [r9]
 80137b2:	2700      	movs	r7, #0
 80137b4:	b2ad      	uxth	r5, r5
 80137b6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80137ba:	6801      	ldr	r1, [r0, #0]
 80137bc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80137c0:	f8cd b00c 	str.w	fp, [sp, #12]
 80137c4:	9501      	str	r5, [sp, #4]
 80137c6:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80137ca:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80137ce:	9402      	str	r4, [sp, #8]
 80137d0:	fa1f f488 	uxth.w	r4, r8
 80137d4:	9400      	str	r4, [sp, #0]
 80137d6:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 80137d8:	4631      	mov	r1, r6
 80137da:	47a0      	blx	r4
 80137dc:	b00b      	add	sp, #44	; 0x2c
 80137de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137e2:	b914      	cbnz	r4, 80137ea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80137e4:	f010 0f01 	tst.w	r0, #1
 80137e8:	e7e0      	b.n	80137ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 80137ea:	f8d9 0000 	ldr.w	r0, [r9]
 80137ee:	ea4f 0748 	mov.w	r7, r8, lsl #1
 80137f2:	6803      	ldr	r3, [r0, #0]
 80137f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137f6:	4798      	blx	r3
 80137f8:	4b43      	ldr	r3, [pc, #268]	; (8013908 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 80137fa:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 80137fe:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8013802:	881a      	ldrh	r2, [r3, #0]
 8013804:	469a      	mov	sl, r3
 8013806:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801380a:	fb05 f502 	mul.w	r5, r5, r2
 801380e:	fb02 1404 	mla	r4, r2, r4, r1
 8013812:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8013816:	d059      	beq.n	80138cc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8013818:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801381c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8013820:	fa1f f28b 	uxth.w	r2, fp
 8013824:	469e      	mov	lr, r3
 8013826:	fa1f f989 	uxth.w	r9, r9
 801382a:	42ac      	cmp	r4, r5
 801382c:	d264      	bcs.n	80138f8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801382e:	eb04 0a07 	add.w	sl, r4, r7
 8013832:	4554      	cmp	r4, sl
 8013834:	d23d      	bcs.n	80138b2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8013836:	8821      	ldrh	r1, [r4, #0]
 8013838:	f836 3b02 	ldrh.w	r3, [r6], #2
 801383c:	1208      	asrs	r0, r1, #8
 801383e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8013842:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8013846:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801384a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801384e:	00c9      	lsls	r1, r1, #3
 8013850:	fb10 f009 	smulbb	r0, r0, r9
 8013854:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8013858:	b2c9      	uxtb	r1, r1
 801385a:	fb0c 0c02 	mla	ip, ip, r2, r0
 801385e:	10d8      	asrs	r0, r3, #3
 8013860:	fb1b fb09 	smulbb	fp, fp, r9
 8013864:	00db      	lsls	r3, r3, #3
 8013866:	fa1f fc8c 	uxth.w	ip, ip
 801386a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801386e:	fb11 f109 	smulbb	r1, r1, r9
 8013872:	b2db      	uxtb	r3, r3
 8013874:	fb00 b002 	mla	r0, r0, r2, fp
 8013878:	f10c 0b01 	add.w	fp, ip, #1
 801387c:	fb03 1302 	mla	r3, r3, r2, r1
 8013880:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8013884:	b29b      	uxth	r3, r3
 8013886:	b280      	uxth	r0, r0
 8013888:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801388c:	f103 0c01 	add.w	ip, r3, #1
 8013890:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8013894:	1c43      	adds	r3, r0, #1
 8013896:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801389a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801389e:	0940      	lsrs	r0, r0, #5
 80138a0:	ea4c 0c0b 	orr.w	ip, ip, fp
 80138a4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80138a8:	ea4c 0c00 	orr.w	ip, ip, r0
 80138ac:	f824 cb02 	strh.w	ip, [r4], #2
 80138b0:	e7bf      	b.n	8013832 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 80138b2:	f8be 3000 	ldrh.w	r3, [lr]
 80138b6:	eba3 0308 	sub.w	r3, r3, r8
 80138ba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80138be:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80138c2:	eba3 0308 	sub.w	r3, r3, r8
 80138c6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80138ca:	e7ae      	b.n	801382a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 80138cc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80138d0:	f8d9 0000 	ldr.w	r0, [r9]
 80138d4:	42ac      	cmp	r4, r5
 80138d6:	6803      	ldr	r3, [r0, #0]
 80138d8:	d20e      	bcs.n	80138f8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80138da:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80138de:	4632      	mov	r2, r6
 80138e0:	463b      	mov	r3, r7
 80138e2:	4621      	mov	r1, r4
 80138e4:	47c0      	blx	r8
 80138e6:	f8ba 3000 	ldrh.w	r3, [sl]
 80138ea:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80138ee:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80138f2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80138f6:	e7eb      	b.n	80138d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 80138f8:	4b02      	ldr	r3, [pc, #8]	; (8013904 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80138fa:	6818      	ldr	r0, [r3, #0]
 80138fc:	6803      	ldr	r3, [r0, #0]
 80138fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013900:	4798      	blx	r3
 8013902:	e76b      	b.n	80137dc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8013904:	20024418 	.word	0x20024418
 8013908:	20024412 	.word	0x20024412

0801390c <_ZN8touchgfx8LCD16bppD0Ev>:
 801390c:	b510      	push	{r4, lr}
 801390e:	4604      	mov	r4, r0
 8013910:	2178      	movs	r1, #120	; 0x78
 8013912:	f008 ffe9 	bl	801c8e8 <_ZdlPvj>
 8013916:	4620      	mov	r0, r4
 8013918:	bd10      	pop	{r4, pc}

0801391a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801391a:	b510      	push	{r4, lr}
 801391c:	4604      	mov	r4, r0
 801391e:	2104      	movs	r1, #4
 8013920:	f008 ffe2 	bl	801c8e8 <_ZdlPvj>
 8013924:	4620      	mov	r0, r4
 8013926:	bd10      	pop	{r4, pc}

08013928 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8013928:	b510      	push	{r4, lr}
 801392a:	4604      	mov	r4, r0
 801392c:	2104      	movs	r1, #4
 801392e:	f008 ffdb 	bl	801c8e8 <_ZdlPvj>
 8013932:	4620      	mov	r0, r4
 8013934:	bd10      	pop	{r4, pc}

08013936 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8013936:	b510      	push	{r4, lr}
 8013938:	4604      	mov	r4, r0
 801393a:	2104      	movs	r1, #4
 801393c:	f008 ffd4 	bl	801c8e8 <_ZdlPvj>
 8013940:	4620      	mov	r0, r4
 8013942:	bd10      	pop	{r4, pc}

08013944 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8013944:	b510      	push	{r4, lr}
 8013946:	4604      	mov	r4, r0
 8013948:	2104      	movs	r1, #4
 801394a:	f008 ffcd 	bl	801c8e8 <_ZdlPvj>
 801394e:	4620      	mov	r0, r4
 8013950:	bd10      	pop	{r4, pc}

08013952 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8013952:	b510      	push	{r4, lr}
 8013954:	4604      	mov	r4, r0
 8013956:	2104      	movs	r1, #4
 8013958:	f008 ffc6 	bl	801c8e8 <_ZdlPvj>
 801395c:	4620      	mov	r0, r4
 801395e:	bd10      	pop	{r4, pc}

08013960 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8013960:	b510      	push	{r4, lr}
 8013962:	4604      	mov	r4, r0
 8013964:	2104      	movs	r1, #4
 8013966:	f008 ffbf 	bl	801c8e8 <_ZdlPvj>
 801396a:	4620      	mov	r0, r4
 801396c:	bd10      	pop	{r4, pc}

0801396e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801396e:	b510      	push	{r4, lr}
 8013970:	4604      	mov	r4, r0
 8013972:	2104      	movs	r1, #4
 8013974:	f008 ffb8 	bl	801c8e8 <_ZdlPvj>
 8013978:	4620      	mov	r0, r4
 801397a:	bd10      	pop	{r4, pc}

0801397c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801397c:	b510      	push	{r4, lr}
 801397e:	4604      	mov	r4, r0
 8013980:	2104      	movs	r1, #4
 8013982:	f008 ffb1 	bl	801c8e8 <_ZdlPvj>
 8013986:	4620      	mov	r0, r4
 8013988:	bd10      	pop	{r4, pc}

0801398a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801398a:	b510      	push	{r4, lr}
 801398c:	4604      	mov	r4, r0
 801398e:	2104      	movs	r1, #4
 8013990:	f008 ffaa 	bl	801c8e8 <_ZdlPvj>
 8013994:	4620      	mov	r0, r4
 8013996:	bd10      	pop	{r4, pc}

08013998 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8013998:	b510      	push	{r4, lr}
 801399a:	4604      	mov	r4, r0
 801399c:	2104      	movs	r1, #4
 801399e:	f008 ffa3 	bl	801c8e8 <_ZdlPvj>
 80139a2:	4620      	mov	r0, r4
 80139a4:	bd10      	pop	{r4, pc}

080139a6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80139a6:	b510      	push	{r4, lr}
 80139a8:	4604      	mov	r4, r0
 80139aa:	2104      	movs	r1, #4
 80139ac:	f008 ff9c 	bl	801c8e8 <_ZdlPvj>
 80139b0:	4620      	mov	r0, r4
 80139b2:	bd10      	pop	{r4, pc}

080139b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80139b4:	b510      	push	{r4, lr}
 80139b6:	4604      	mov	r4, r0
 80139b8:	2104      	movs	r1, #4
 80139ba:	f008 ff95 	bl	801c8e8 <_ZdlPvj>
 80139be:	4620      	mov	r0, r4
 80139c0:	bd10      	pop	{r4, pc}

080139c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80139c2:	b510      	push	{r4, lr}
 80139c4:	4604      	mov	r4, r0
 80139c6:	2104      	movs	r1, #4
 80139c8:	f008 ff8e 	bl	801c8e8 <_ZdlPvj>
 80139cc:	4620      	mov	r0, r4
 80139ce:	bd10      	pop	{r4, pc}

080139d0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80139d0:	b510      	push	{r4, lr}
 80139d2:	4604      	mov	r4, r0
 80139d4:	2104      	movs	r1, #4
 80139d6:	f008 ff87 	bl	801c8e8 <_ZdlPvj>
 80139da:	4620      	mov	r0, r4
 80139dc:	bd10      	pop	{r4, pc}

080139de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80139de:	b510      	push	{r4, lr}
 80139e0:	4604      	mov	r4, r0
 80139e2:	2104      	movs	r1, #4
 80139e4:	f008 ff80 	bl	801c8e8 <_ZdlPvj>
 80139e8:	4620      	mov	r0, r4
 80139ea:	bd10      	pop	{r4, pc}

080139ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80139ec:	b510      	push	{r4, lr}
 80139ee:	4604      	mov	r4, r0
 80139f0:	2104      	movs	r1, #4
 80139f2:	f008 ff79 	bl	801c8e8 <_ZdlPvj>
 80139f6:	4620      	mov	r0, r4
 80139f8:	bd10      	pop	{r4, pc}

080139fa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80139fa:	b510      	push	{r4, lr}
 80139fc:	4604      	mov	r4, r0
 80139fe:	2104      	movs	r1, #4
 8013a00:	f008 ff72 	bl	801c8e8 <_ZdlPvj>
 8013a04:	4620      	mov	r0, r4
 8013a06:	bd10      	pop	{r4, pc}

08013a08 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8013a08:	b510      	push	{r4, lr}
 8013a0a:	4604      	mov	r4, r0
 8013a0c:	2104      	movs	r1, #4
 8013a0e:	f008 ff6b 	bl	801c8e8 <_ZdlPvj>
 8013a12:	4620      	mov	r0, r4
 8013a14:	bd10      	pop	{r4, pc}

08013a16 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8013a16:	b510      	push	{r4, lr}
 8013a18:	4604      	mov	r4, r0
 8013a1a:	2104      	movs	r1, #4
 8013a1c:	f008 ff64 	bl	801c8e8 <_ZdlPvj>
 8013a20:	4620      	mov	r0, r4
 8013a22:	bd10      	pop	{r4, pc}

08013a24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8013a24:	b510      	push	{r4, lr}
 8013a26:	4604      	mov	r4, r0
 8013a28:	2104      	movs	r1, #4
 8013a2a:	f008 ff5d 	bl	801c8e8 <_ZdlPvj>
 8013a2e:	4620      	mov	r0, r4
 8013a30:	bd10      	pop	{r4, pc}

08013a32 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8013a32:	b510      	push	{r4, lr}
 8013a34:	4604      	mov	r4, r0
 8013a36:	2104      	movs	r1, #4
 8013a38:	f008 ff56 	bl	801c8e8 <_ZdlPvj>
 8013a3c:	4620      	mov	r0, r4
 8013a3e:	bd10      	pop	{r4, pc}

08013a40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8013a40:	b510      	push	{r4, lr}
 8013a42:	4604      	mov	r4, r0
 8013a44:	2104      	movs	r1, #4
 8013a46:	f008 ff4f 	bl	801c8e8 <_ZdlPvj>
 8013a4a:	4620      	mov	r0, r4
 8013a4c:	bd10      	pop	{r4, pc}

08013a4e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8013a4e:	b510      	push	{r4, lr}
 8013a50:	4604      	mov	r4, r0
 8013a52:	2104      	movs	r1, #4
 8013a54:	f008 ff48 	bl	801c8e8 <_ZdlPvj>
 8013a58:	4620      	mov	r0, r4
 8013a5a:	bd10      	pop	{r4, pc}

08013a5c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8013a5c:	b510      	push	{r4, lr}
 8013a5e:	4604      	mov	r4, r0
 8013a60:	2104      	movs	r1, #4
 8013a62:	f008 ff41 	bl	801c8e8 <_ZdlPvj>
 8013a66:	4620      	mov	r0, r4
 8013a68:	bd10      	pop	{r4, pc}

08013a6a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8013a6a:	b510      	push	{r4, lr}
 8013a6c:	4604      	mov	r4, r0
 8013a6e:	2104      	movs	r1, #4
 8013a70:	f008 ff3a 	bl	801c8e8 <_ZdlPvj>
 8013a74:	4620      	mov	r0, r4
 8013a76:	bd10      	pop	{r4, pc}

08013a78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8013a78:	b510      	push	{r4, lr}
 8013a7a:	4604      	mov	r4, r0
 8013a7c:	2104      	movs	r1, #4
 8013a7e:	f008 ff33 	bl	801c8e8 <_ZdlPvj>
 8013a82:	4620      	mov	r0, r4
 8013a84:	bd10      	pop	{r4, pc}

08013a86 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8013a86:	b510      	push	{r4, lr}
 8013a88:	4604      	mov	r4, r0
 8013a8a:	2104      	movs	r1, #4
 8013a8c:	f008 ff2c 	bl	801c8e8 <_ZdlPvj>
 8013a90:	4620      	mov	r0, r4
 8013a92:	bd10      	pop	{r4, pc}

08013a94 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8013a94:	b510      	push	{r4, lr}
 8013a96:	4604      	mov	r4, r0
 8013a98:	2104      	movs	r1, #4
 8013a9a:	f008 ff25 	bl	801c8e8 <_ZdlPvj>
 8013a9e:	4620      	mov	r0, r4
 8013aa0:	bd10      	pop	{r4, pc}
	...

08013aa4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8013aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aa8:	b091      	sub	sp, #68	; 0x44
 8013aaa:	469b      	mov	fp, r3
 8013aac:	4616      	mov	r6, r2
 8013aae:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013ab2:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8013ab6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013aba:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 8013abe:	4604      	mov	r4, r0
 8013ac0:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 8013ac4:	4640      	mov	r0, r8
 8013ac6:	460d      	mov	r5, r1
 8013ac8:	4659      	mov	r1, fp
 8013aca:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8013ace:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8013ad2:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 8013ad6:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 8013ada:	f7f8 fb7f 	bl	800c1dc <_ZN8touchgfx4RectaNERKS0_>
 8013ade:	4631      	mov	r1, r6
 8013ae0:	4640      	mov	r0, r8
 8013ae2:	f7f8 fb7b 	bl	800c1dc <_ZN8touchgfx4RectaNERKS0_>
 8013ae6:	4b74      	ldr	r3, [pc, #464]	; (8013cb8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8013ae8:	8818      	ldrh	r0, [r3, #0]
 8013aea:	4b74      	ldr	r3, [pc, #464]	; (8013cbc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8013aec:	b202      	sxth	r2, r0
 8013aee:	8819      	ldrh	r1, [r3, #0]
 8013af0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8013af4:	b20e      	sxth	r6, r1
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	da07      	bge.n	8013b0a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8013afa:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8013afe:	4463      	add	r3, ip
 8013b00:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8013b04:	2300      	movs	r3, #0
 8013b06:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8013b0a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8013b0e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8013b12:	1ad2      	subs	r2, r2, r3
 8013b14:	4594      	cmp	ip, r2
 8013b16:	bfc4      	itt	gt
 8013b18:	1ac2      	subgt	r2, r0, r3
 8013b1a:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 8013b1e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8013b22:	2a00      	cmp	r2, #0
 8013b24:	da07      	bge.n	8013b36 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8013b26:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 8013b2a:	4462      	add	r2, ip
 8013b2c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8013b30:	2200      	movs	r2, #0
 8013b32:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8013b36:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8013b3a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8013b3e:	eba6 060a 	sub.w	r6, r6, sl
 8013b42:	42b2      	cmp	r2, r6
 8013b44:	bfc4      	itt	gt
 8013b46:	eba1 020a 	subgt.w	r2, r1, sl
 8013b4a:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 8013b4e:	4a5c      	ldr	r2, [pc, #368]	; (8013cc0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8013b50:	7812      	ldrb	r2, [r2, #0]
 8013b52:	b9a2      	cbnz	r2, 8013b7e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8013b54:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8013b58:	4286      	cmp	r6, r0
 8013b5a:	4640      	mov	r0, r8
 8013b5c:	9303      	str	r3, [sp, #12]
 8013b5e:	bf14      	ite	ne
 8013b60:	2600      	movne	r6, #0
 8013b62:	2601      	moveq	r6, #1
 8013b64:	f7f8 fb7d 	bl	800c262 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013b68:	9b03      	ldr	r3, [sp, #12]
 8013b6a:	b160      	cbz	r0, 8013b86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	8023      	strh	r3, [r4, #0]
 8013b70:	8063      	strh	r3, [r4, #2]
 8013b72:	80a3      	strh	r3, [r4, #4]
 8013b74:	4620      	mov	r0, r4
 8013b76:	80e3      	strh	r3, [r4, #6]
 8013b78:	b011      	add	sp, #68	; 0x44
 8013b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b7e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8013b82:	428e      	cmp	r6, r1
 8013b84:	e7e9      	b.n	8013b5a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8013b86:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8013b8a:	a90e      	add	r1, sp, #56	; 0x38
 8013b8c:	900e      	str	r0, [sp, #56]	; 0x38
 8013b8e:	a80c      	add	r0, sp, #48	; 0x30
 8013b90:	9205      	str	r2, [sp, #20]
 8013b92:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8013b96:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 8013b9a:	9206      	str	r2, [sp, #24]
 8013b9c:	f8bb 2000 	ldrh.w	r2, [fp]
 8013ba0:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 8013ba4:	1a9b      	subs	r3, r3, r2
 8013ba6:	b21b      	sxth	r3, r3
 8013ba8:	9303      	str	r3, [sp, #12]
 8013baa:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8013bae:	f8df b118 	ldr.w	fp, [pc, #280]	; 8013cc8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8013bb2:	ebaa 0a03 	sub.w	sl, sl, r3
 8013bb6:	fa0f f38a 	sxth.w	r3, sl
 8013bba:	9304      	str	r3, [sp, #16]
 8013bbc:	9b03      	ldr	r3, [sp, #12]
 8013bbe:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8013bc2:	9b04      	ldr	r3, [sp, #16]
 8013bc4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8013bc8:	9b05      	ldr	r3, [sp, #20]
 8013bca:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8013bce:	9b06      	ldr	r3, [sp, #24]
 8013bd0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8013bd4:	f7fa fae2 	bl	800e19c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8013bd8:	4640      	mov	r0, r8
 8013bda:	f7fa fab7 	bl	800e14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013bde:	a80e      	add	r0, sp, #56	; 0x38
 8013be0:	f7fa fab4 	bl	800e14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013be4:	4b37      	ldr	r3, [pc, #220]	; (8013cc4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8013be6:	4628      	mov	r0, r5
 8013be8:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8013bec:	881b      	ldrh	r3, [r3, #0]
 8013bee:	9307      	str	r3, [sp, #28]
 8013bf0:	682b      	ldr	r3, [r5, #0]
 8013bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bf4:	4798      	blx	r3
 8013bf6:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 8013bfa:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8013bfe:	4681      	mov	r9, r0
 8013c00:	f8db 0000 	ldr.w	r0, [fp]
 8013c04:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8013c08:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8013c0a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8013c0e:	6803      	ldr	r3, [r0, #0]
 8013c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c12:	4798      	blx	r3
 8013c14:	4607      	mov	r7, r0
 8013c16:	f8db 0000 	ldr.w	r0, [fp]
 8013c1a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8013c1e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8013c22:	6803      	ldr	r3, [r0, #0]
 8013c24:	9109      	str	r1, [sp, #36]	; 0x24
 8013c26:	9208      	str	r2, [sp, #32]
 8013c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c2a:	4798      	blx	r3
 8013c2c:	f010 0f01 	tst.w	r0, #1
 8013c30:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8013c34:	d012      	beq.n	8013c5c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8013c36:	f8db 0000 	ldr.w	r0, [fp]
 8013c3a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8013c3e:	6803      	ldr	r3, [r0, #0]
 8013c40:	9200      	str	r2, [sp, #0]
 8013c42:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8013c44:	462b      	mov	r3, r5
 8013c46:	e898 0006 	ldmia.w	r8, {r1, r2}
 8013c4a:	47b0      	blx	r6
 8013c4c:	9b03      	ldr	r3, [sp, #12]
 8013c4e:	8023      	strh	r3, [r4, #0]
 8013c50:	9b04      	ldr	r3, [sp, #16]
 8013c52:	8063      	strh	r3, [r4, #2]
 8013c54:	9b05      	ldr	r3, [sp, #20]
 8013c56:	80a3      	strh	r3, [r4, #4]
 8013c58:	9b06      	ldr	r3, [sp, #24]
 8013c5a:	e78b      	b.n	8013b74 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8013c5c:	fb09 f202 	mul.w	r2, r9, r2
 8013c60:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8013c64:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8013c68:	440f      	add	r7, r1
 8013c6a:	b166      	cbz	r6, 8013c86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8013c6c:	9a07      	ldr	r2, [sp, #28]
 8013c6e:	4592      	cmp	sl, r2
 8013c70:	d109      	bne.n	8013c86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8013c72:	f8db 0000 	ldr.w	r0, [fp]
 8013c76:	fb09 f303 	mul.w	r3, r9, r3
 8013c7a:	4629      	mov	r1, r5
 8013c7c:	6802      	ldr	r2, [r0, #0]
 8013c7e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8013c80:	463a      	mov	r2, r7
 8013c82:	47b0      	blx	r6
 8013c84:	e7e2      	b.n	8013c4c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8013c86:	fb0a f303 	mul.w	r3, sl, r3
 8013c8a:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8013c8e:	f8df b038 	ldr.w	fp, [pc, #56]	; 8013cc8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8013c92:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8013c96:	4545      	cmp	r5, r8
 8013c98:	d2d8      	bcs.n	8013c4c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8013c9a:	f8db 0000 	ldr.w	r0, [fp]
 8013c9e:	4629      	mov	r1, r5
 8013ca0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8013ca4:	4435      	add	r5, r6
 8013ca6:	6802      	ldr	r2, [r0, #0]
 8013ca8:	005b      	lsls	r3, r3, #1
 8013caa:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8013cae:	463a      	mov	r2, r7
 8013cb0:	47d0      	blx	sl
 8013cb2:	444f      	add	r7, r9
 8013cb4:	e7ef      	b.n	8013c96 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8013cb6:	bf00      	nop
 8013cb8:	2002440c 	.word	0x2002440c
 8013cbc:	2002440e 	.word	0x2002440e
 8013cc0:	20024410 	.word	0x20024410
 8013cc4:	20024412 	.word	0x20024412
 8013cc8:	20024418 	.word	0x20024418

08013ccc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8013ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cce:	4606      	mov	r6, r0
 8013cd0:	b087      	sub	sp, #28
 8013cd2:	460c      	mov	r4, r1
 8013cd4:	4617      	mov	r7, r2
 8013cd6:	461d      	mov	r5, r3
 8013cd8:	b333      	cbz	r3, 8013d28 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8013cda:	4608      	mov	r0, r1
 8013cdc:	f7f8 fac1 	bl	800c262 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013ce0:	bb10      	cbnz	r0, 8013d28 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8013ce2:	6820      	ldr	r0, [r4, #0]
 8013ce4:	ab04      	add	r3, sp, #16
 8013ce6:	6861      	ldr	r1, [r4, #4]
 8013ce8:	4c1b      	ldr	r4, [pc, #108]	; (8013d58 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8013cea:	c303      	stmia	r3!, {r0, r1}
 8013cec:	a804      	add	r0, sp, #16
 8013cee:	f7fa fa2d 	bl	800e14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013cf2:	6820      	ldr	r0, [r4, #0]
 8013cf4:	6803      	ldr	r3, [r0, #0]
 8013cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cf8:	4798      	blx	r3
 8013cfa:	2dff      	cmp	r5, #255	; 0xff
 8013cfc:	d016      	beq.n	8013d2c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8013cfe:	f010 0f08 	tst.w	r0, #8
 8013d02:	6820      	ldr	r0, [r4, #0]
 8013d04:	d015      	beq.n	8013d32 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8013d06:	2400      	movs	r4, #0
 8013d08:	6801      	ldr	r1, [r0, #0]
 8013d0a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8013d0e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8013d12:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8013d16:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8013d1a:	9401      	str	r4, [sp, #4]
 8013d1c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8013d20:	9400      	str	r4, [sp, #0]
 8013d22:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8013d24:	4639      	mov	r1, r7
 8013d26:	47a0      	blx	r4
 8013d28:	b007      	add	sp, #28
 8013d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d2c:	f010 0f02 	tst.w	r0, #2
 8013d30:	e7e7      	b.n	8013d02 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8013d32:	6803      	ldr	r3, [r0, #0]
 8013d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d36:	4798      	blx	r3
 8013d38:	4b08      	ldr	r3, [pc, #32]	; (8013d5c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8013d3a:	4601      	mov	r1, r0
 8013d3c:	4630      	mov	r0, r6
 8013d3e:	881a      	ldrh	r2, [r3, #0]
 8013d40:	6833      	ldr	r3, [r6, #0]
 8013d42:	e9cd 7500 	strd	r7, r5, [sp]
 8013d46:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8013d48:	ab04      	add	r3, sp, #16
 8013d4a:	47a8      	blx	r5
 8013d4c:	6820      	ldr	r0, [r4, #0]
 8013d4e:	6803      	ldr	r3, [r0, #0]
 8013d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d52:	4798      	blx	r3
 8013d54:	e7e8      	b.n	8013d28 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8013d56:	bf00      	nop
 8013d58:	20024418 	.word	0x20024418
 8013d5c:	20024412 	.word	0x20024412

08013d60 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8013d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d64:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8013d68:	4688      	mov	r8, r1
 8013d6a:	4614      	mov	r4, r2
 8013d6c:	461d      	mov	r5, r3
 8013d6e:	9e08      	ldr	r6, [sp, #32]
 8013d70:	2f00      	cmp	r7, #0
 8013d72:	f000 80ab 	beq.w	8013ecc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8013d76:	4618      	mov	r0, r3
 8013d78:	f7f8 fa73 	bl	800c262 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013d7c:	2800      	cmp	r0, #0
 8013d7e:	f040 80a5 	bne.w	8013ecc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8013d82:	f9b5 1000 	ldrsh.w	r1, [r5]
 8013d86:	2fff      	cmp	r7, #255	; 0xff
 8013d88:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8013d8c:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8013d90:	fb04 1303 	mla	r3, r4, r3, r1
 8013d94:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8013d98:	eba4 0200 	sub.w	r2, r4, r0
 8013d9c:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8013da0:	fb04 f505 	mul.w	r5, r4, r5
 8013da4:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8013da8:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8013dac:	d04a      	beq.n	8013e44 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 8013dae:	b2bc      	uxth	r4, r7
 8013db0:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8013db4:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8013db8:	fa5f f788 	uxtb.w	r7, r8
 8013dbc:	b2f3      	uxtb	r3, r6
 8013dbe:	0040      	lsls	r0, r0, #1
 8013dc0:	fb0e fe04 	mul.w	lr, lr, r4
 8013dc4:	4367      	muls	r7, r4
 8013dc6:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8013dca:	4363      	muls	r3, r4
 8013dcc:	fa1f fc8c 	uxth.w	ip, ip
 8013dd0:	42a9      	cmp	r1, r5
 8013dd2:	d27b      	bcs.n	8013ecc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8013dd4:	eb01 0900 	add.w	r9, r1, r0
 8013dd8:	4549      	cmp	r1, r9
 8013dda:	d231      	bcs.n	8013e40 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 8013ddc:	880a      	ldrh	r2, [r1, #0]
 8013dde:	1214      	asrs	r4, r2, #8
 8013de0:	10d6      	asrs	r6, r2, #3
 8013de2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8013de6:	00d2      	lsls	r2, r2, #3
 8013de8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8013dec:	b2d2      	uxtb	r2, r2
 8013dee:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8013df2:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8013df6:	fb14 f40c 	smulbb	r4, r4, ip
 8013dfa:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8013dfe:	fb12 f20c 	smulbb	r2, r2, ip
 8013e02:	fb16 f60c 	smulbb	r6, r6, ip
 8013e06:	4474      	add	r4, lr
 8013e08:	441a      	add	r2, r3
 8013e0a:	b2a4      	uxth	r4, r4
 8013e0c:	443e      	add	r6, r7
 8013e0e:	b292      	uxth	r2, r2
 8013e10:	f104 0a01 	add.w	sl, r4, #1
 8013e14:	b2b6      	uxth	r6, r6
 8013e16:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8013e1a:	f102 0a01 	add.w	sl, r2, #1
 8013e1e:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8013e22:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8013e26:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8013e2a:	4322      	orrs	r2, r4
 8013e2c:	1c74      	adds	r4, r6, #1
 8013e2e:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8013e32:	0976      	lsrs	r6, r6, #5
 8013e34:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8013e38:	4332      	orrs	r2, r6
 8013e3a:	f821 2b02 	strh.w	r2, [r1], #2
 8013e3e:	e7cb      	b.n	8013dd8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 8013e40:	4441      	add	r1, r8
 8013e42:	e7c5      	b.n	8013dd0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 8013e44:	0973      	lsrs	r3, r6, #5
 8013e46:	4f22      	ldr	r7, [pc, #136]	; (8013ed0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 8013e48:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8013e4c:	ea08 0707 	and.w	r7, r8, r7
 8013e50:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8013e54:	433b      	orrs	r3, r7
 8013e56:	07e7      	lsls	r7, r4, #31
 8013e58:	ea43 0306 	orr.w	r3, r3, r6
 8013e5c:	b29b      	uxth	r3, r3
 8013e5e:	d50b      	bpl.n	8013e78 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 8013e60:	0040      	lsls	r0, r0, #1
 8013e62:	0052      	lsls	r2, r2, #1
 8013e64:	42a9      	cmp	r1, r5
 8013e66:	d231      	bcs.n	8013ecc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8013e68:	180c      	adds	r4, r1, r0
 8013e6a:	42a1      	cmp	r1, r4
 8013e6c:	d202      	bcs.n	8013e74 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8013e6e:	f821 3b02 	strh.w	r3, [r1], #2
 8013e72:	e7fa      	b.n	8013e6a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 8013e74:	4411      	add	r1, r2
 8013e76:	e7f5      	b.n	8013e64 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 8013e78:	078e      	lsls	r6, r1, #30
 8013e7a:	d008      	beq.n	8013e8e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 8013e7c:	0066      	lsls	r6, r4, #1
 8013e7e:	460a      	mov	r2, r1
 8013e80:	42aa      	cmp	r2, r5
 8013e82:	d202      	bcs.n	8013e8a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8013e84:	8013      	strh	r3, [r2, #0]
 8013e86:	4432      	add	r2, r6
 8013e88:	e7fa      	b.n	8013e80 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 8013e8a:	3102      	adds	r1, #2
 8013e8c:	3801      	subs	r0, #1
 8013e8e:	07c2      	lsls	r2, r0, #31
 8013e90:	d50b      	bpl.n	8013eaa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 8013e92:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8013e96:	0066      	lsls	r6, r4, #1
 8013e98:	3a01      	subs	r2, #1
 8013e9a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8013e9e:	42aa      	cmp	r2, r5
 8013ea0:	d202      	bcs.n	8013ea8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8013ea2:	8013      	strh	r3, [r2, #0]
 8013ea4:	4432      	add	r2, r6
 8013ea6:	e7fa      	b.n	8013e9e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 8013ea8:	3801      	subs	r0, #1
 8013eaa:	b178      	cbz	r0, 8013ecc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8013eac:	1040      	asrs	r0, r0, #1
 8013eae:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8013eb2:	0080      	lsls	r0, r0, #2
 8013eb4:	0064      	lsls	r4, r4, #1
 8013eb6:	42a9      	cmp	r1, r5
 8013eb8:	d208      	bcs.n	8013ecc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8013eba:	180e      	adds	r6, r1, r0
 8013ebc:	460a      	mov	r2, r1
 8013ebe:	42b2      	cmp	r2, r6
 8013ec0:	d202      	bcs.n	8013ec8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8013ec2:	f842 3b04 	str.w	r3, [r2], #4
 8013ec6:	e7fa      	b.n	8013ebe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 8013ec8:	4421      	add	r1, r4
 8013eca:	e7f4      	b.n	8013eb6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 8013ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ed0:	00fff800 	.word	0x00fff800

08013ed4 <_ZN8touchgfx8LCD16bppC1Ev>:
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	4910      	ldr	r1, [pc, #64]	; (8013f18 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8013ed8:	6042      	str	r2, [r0, #4]
 8013eda:	6001      	str	r1, [r0, #0]
 8013edc:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8013ee0:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8013ee4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8013ee8:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8013eec:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8013ef0:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8013ef4:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8013ef8:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8013efc:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8013f00:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8013f04:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8013f08:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8013f0c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8013f10:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8013f14:	4770      	bx	lr
 8013f16:	bf00      	nop
 8013f18:	08020bc0 	.word	0x08020bc0

08013f1c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8013f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f20:	b08d      	sub	sp, #52	; 0x34
 8013f22:	460d      	mov	r5, r1
 8013f24:	4604      	mov	r4, r0
 8013f26:	4699      	mov	r9, r3
 8013f28:	6808      	ldr	r0, [r1, #0]
 8013f2a:	ab08      	add	r3, sp, #32
 8013f2c:	6849      	ldr	r1, [r1, #4]
 8013f2e:	c303      	stmia	r3!, {r0, r1}
 8013f30:	6810      	ldr	r0, [r2, #0]
 8013f32:	ab0a      	add	r3, sp, #40	; 0x28
 8013f34:	6851      	ldr	r1, [r2, #4]
 8013f36:	c303      	stmia	r3!, {r0, r1}
 8013f38:	a808      	add	r0, sp, #32
 8013f3a:	f7fa f907 	bl	800e14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013f3e:	4629      	mov	r1, r5
 8013f40:	a80a      	add	r0, sp, #40	; 0x28
 8013f42:	4d67      	ldr	r5, [pc, #412]	; (80140e0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8013f44:	f7fa f92a 	bl	800e19c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8013f48:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8013f4c:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8013f50:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8013f54:	6828      	ldr	r0, [r5, #0]
 8013f56:	fb11 2103 	smlabb	r1, r1, r3, r2
 8013f5a:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8013f5e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8013f62:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8013f66:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8013f6a:	440a      	add	r2, r1
 8013f6c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8013f70:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8013f74:	4413      	add	r3, r2
 8013f76:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8013f7a:	6803      	ldr	r3, [r0, #0]
 8013f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f7e:	4798      	blx	r3
 8013f80:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8013f84:	d119      	bne.n	8013fba <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8013f86:	f010 0f20 	tst.w	r0, #32
 8013f8a:	6828      	ldr	r0, [r5, #0]
 8013f8c:	d018      	beq.n	8013fc0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8013f8e:	2500      	movs	r5, #0
 8013f90:	6801      	ldr	r1, [r0, #0]
 8013f92:	b2b6      	uxth	r6, r6
 8013f94:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8013f98:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8013f9c:	9601      	str	r6, [sp, #4]
 8013f9e:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8013fa2:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8013fa6:	9502      	str	r5, [sp, #8]
 8013fa8:	fa1f f588 	uxth.w	r5, r8
 8013fac:	9500      	str	r5, [sp, #0]
 8013fae:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8013fb0:	4621      	mov	r1, r4
 8013fb2:	47a8      	blx	r5
 8013fb4:	b00d      	add	sp, #52	; 0x34
 8013fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013fbe:	e7e4      	b.n	8013f8a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8013fc0:	6803      	ldr	r3, [r0, #0]
 8013fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fc4:	4798      	blx	r3
 8013fc6:	4947      	ldr	r1, [pc, #284]	; (80140e4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8013fc8:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8013fcc:	880b      	ldrh	r3, [r1, #0]
 8013fce:	468a      	mov	sl, r1
 8013fd0:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8013fd4:	fb03 5202 	mla	r2, r3, r2, r5
 8013fd8:	4373      	muls	r3, r6
 8013fda:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8013fde:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8013fe2:	9307      	str	r3, [sp, #28]
 8013fe4:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8013fe8:	9306      	str	r3, [sp, #24]
 8013fea:	9b07      	ldr	r3, [sp, #28]
 8013fec:	4298      	cmp	r0, r3
 8013fee:	d270      	bcs.n	80140d2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8013ff0:	9b06      	ldr	r3, [sp, #24]
 8013ff2:	4621      	mov	r1, r4
 8013ff4:	eb00 0b03 	add.w	fp, r0, r3
 8013ff8:	4558      	cmp	r0, fp
 8013ffa:	d25d      	bcs.n	80140b8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8013ffc:	f851 4b04 	ldr.w	r4, [r1], #4
 8014000:	0e23      	lsrs	r3, r4, #24
 8014002:	d014      	beq.n	801402e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8014004:	2bff      	cmp	r3, #255	; 0xff
 8014006:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801400a:	d112      	bne.n	8014032 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801400c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8014010:	d10f      	bne.n	8014032 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8014012:	0963      	lsrs	r3, r4, #5
 8014014:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8014018:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801401c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8014020:	f02c 0c07 	bic.w	ip, ip, #7
 8014024:	ea43 0c0c 	orr.w	ip, r3, ip
 8014028:	ea4c 0404 	orr.w	r4, ip, r4
 801402c:	8004      	strh	r4, [r0, #0]
 801402e:	3002      	adds	r0, #2
 8014030:	e7e2      	b.n	8013ff8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8014032:	fb09 f303 	mul.w	r3, r9, r3
 8014036:	8807      	ldrh	r7, [r0, #0]
 8014038:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801403c:	fa5f fc8c 	uxtb.w	ip, ip
 8014040:	1c5a      	adds	r2, r3, #1
 8014042:	123e      	asrs	r6, r7, #8
 8014044:	10fd      	asrs	r5, r7, #3
 8014046:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801404a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801404e:	00ff      	lsls	r7, r7, #3
 8014050:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8014054:	1212      	asrs	r2, r2, #8
 8014056:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801405a:	b293      	uxth	r3, r2
 801405c:	43d2      	mvns	r2, r2
 801405e:	b2ff      	uxtb	r7, r7
 8014060:	fb1e fe03 	smulbb	lr, lr, r3
 8014064:	b2d2      	uxtb	r2, r2
 8014066:	fb1c fc03 	smulbb	ip, ip, r3
 801406a:	b2e4      	uxtb	r4, r4
 801406c:	fb06 e602 	mla	r6, r6, r2, lr
 8014070:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8014074:	fb14 f403 	smulbb	r4, r4, r3
 8014078:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801407c:	b2b6      	uxth	r6, r6
 801407e:	fb05 c502 	mla	r5, r5, r2, ip
 8014082:	fb07 4702 	mla	r7, r7, r2, r4
 8014086:	f106 0e01 	add.w	lr, r6, #1
 801408a:	b2ad      	uxth	r5, r5
 801408c:	b2bf      	uxth	r7, r7
 801408e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8014092:	f105 0c01 	add.w	ip, r5, #1
 8014096:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801409a:	1c7e      	adds	r6, r7, #1
 801409c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80140a0:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80140a4:	096d      	lsrs	r5, r5, #5
 80140a6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80140aa:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80140ae:	ea46 060e 	orr.w	r6, r6, lr
 80140b2:	432e      	orrs	r6, r5
 80140b4:	8006      	strh	r6, [r0, #0]
 80140b6:	e7ba      	b.n	801402e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 80140b8:	f8ba 3000 	ldrh.w	r3, [sl]
 80140bc:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 80140c0:	eba3 0308 	sub.w	r3, r3, r8
 80140c4:	eba4 0408 	sub.w	r4, r4, r8
 80140c8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80140cc:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80140d0:	e78b      	b.n	8013fea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 80140d2:	4b03      	ldr	r3, [pc, #12]	; (80140e0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80140d4:	6818      	ldr	r0, [r3, #0]
 80140d6:	6803      	ldr	r3, [r0, #0]
 80140d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140da:	4798      	blx	r3
 80140dc:	e76a      	b.n	8013fb4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 80140de:	bf00      	nop
 80140e0:	20024418 	.word	0x20024418
 80140e4:	20024412 	.word	0x20024412

080140e8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 80140e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80140ec:	b085      	sub	sp, #20
 80140ee:	6810      	ldr	r0, [r2, #0]
 80140f0:	460c      	mov	r4, r1
 80140f2:	6851      	ldr	r1, [r2, #4]
 80140f4:	466d      	mov	r5, sp
 80140f6:	4616      	mov	r6, r2
 80140f8:	c503      	stmia	r5!, {r0, r1}
 80140fa:	6818      	ldr	r0, [r3, #0]
 80140fc:	6859      	ldr	r1, [r3, #4]
 80140fe:	c503      	stmia	r5!, {r0, r1}
 8014100:	4668      	mov	r0, sp
 8014102:	4d2e      	ldr	r5, [pc, #184]	; (80141bc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8014104:	f7fa f822 	bl	800e14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014108:	4631      	mov	r1, r6
 801410a:	a802      	add	r0, sp, #8
 801410c:	4e2c      	ldr	r6, [pc, #176]	; (80141c0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801410e:	f7fa f845 	bl	800e19c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014112:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8014116:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801411a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801411e:	6828      	ldr	r0, [r5, #0]
 8014120:	fb11 2103 	smlabb	r1, r1, r3, r2
 8014124:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8014128:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801412c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8014130:	f8bd 1000 	ldrh.w	r1, [sp]
 8014134:	440a      	add	r2, r1
 8014136:	f8ad 2008 	strh.w	r2, [sp, #8]
 801413a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801413e:	4413      	add	r3, r2
 8014140:	f8ad 300a 	strh.w	r3, [sp, #10]
 8014144:	6803      	ldr	r3, [r0, #0]
 8014146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014148:	4798      	blx	r3
 801414a:	8833      	ldrh	r3, [r6, #0]
 801414c:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8014150:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8014154:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8014158:	f8df e068 	ldr.w	lr, [pc, #104]	; 80141c4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801415c:	fb03 1202 	mla	r2, r3, r2, r1
 8014160:	fb08 f303 	mul.w	r3, r8, r3
 8014164:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8014168:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801416c:	4298      	cmp	r0, r3
 801416e:	d21d      	bcs.n	80141ac <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8014170:	eb00 080c 	add.w	r8, r0, ip
 8014174:	4540      	cmp	r0, r8
 8014176:	d20f      	bcs.n	8014198 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8014178:	f854 1b04 	ldr.w	r1, [r4], #4
 801417c:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8014180:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8014184:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8014188:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801418c:	ea42 0209 	orr.w	r2, r2, r9
 8014190:	430a      	orrs	r2, r1
 8014192:	f820 2b02 	strh.w	r2, [r0], #2
 8014196:	e7ed      	b.n	8014174 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8014198:	8832      	ldrh	r2, [r6, #0]
 801419a:	1bd2      	subs	r2, r2, r7
 801419c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80141a0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80141a4:	1bd2      	subs	r2, r2, r7
 80141a6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80141aa:	e7df      	b.n	801416c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 80141ac:	6828      	ldr	r0, [r5, #0]
 80141ae:	6803      	ldr	r3, [r0, #0]
 80141b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141b2:	4798      	blx	r3
 80141b4:	b005      	add	sp, #20
 80141b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141ba:	bf00      	nop
 80141bc:	20024418 	.word	0x20024418
 80141c0:	20024412 	.word	0x20024412
 80141c4:	fffff800 	.word	0xfffff800

080141c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 80141c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141cc:	b08e      	sub	sp, #56	; 0x38
 80141ce:	460e      	mov	r6, r1
 80141d0:	4604      	mov	r4, r0
 80141d2:	461d      	mov	r5, r3
 80141d4:	6808      	ldr	r0, [r1, #0]
 80141d6:	ab0a      	add	r3, sp, #40	; 0x28
 80141d8:	6849      	ldr	r1, [r1, #4]
 80141da:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 80143b0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 80141de:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 80143b4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 80141e2:	c303      	stmia	r3!, {r0, r1}
 80141e4:	6810      	ldr	r0, [r2, #0]
 80141e6:	ab0c      	add	r3, sp, #48	; 0x30
 80141e8:	6851      	ldr	r1, [r2, #4]
 80141ea:	c303      	stmia	r3!, {r0, r1}
 80141ec:	a80a      	add	r0, sp, #40	; 0x28
 80141ee:	f7f9 ffad 	bl	800e14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80141f2:	4631      	mov	r1, r6
 80141f4:	a80c      	add	r0, sp, #48	; 0x30
 80141f6:	f7f9 ffd1 	bl	800e19c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80141fa:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80141fe:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8014202:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8014206:	f8d8 0000 	ldr.w	r0, [r8]
 801420a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801420e:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8014212:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8014216:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801421a:	440c      	add	r4, r1
 801421c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8014220:	440a      	add	r2, r1
 8014222:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8014226:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801422a:	4413      	add	r3, r2
 801422c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8014230:	6803      	ldr	r3, [r0, #0]
 8014232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014234:	4798      	blx	r3
 8014236:	2dff      	cmp	r5, #255	; 0xff
 8014238:	d124      	bne.n	8014284 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801423a:	f010 0f01 	tst.w	r0, #1
 801423e:	f8d8 0000 	ldr.w	r0, [r8]
 8014242:	d022      	beq.n	801428a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8014244:	2100      	movs	r1, #0
 8014246:	f04f 0e01 	mov.w	lr, #1
 801424a:	f8d0 c000 	ldr.w	ip, [r0]
 801424e:	b2b6      	uxth	r6, r6
 8014250:	f8cd e018 	str.w	lr, [sp, #24]
 8014254:	b2bf      	uxth	r7, r7
 8014256:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801425a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801425e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8014262:	f8b9 e000 	ldrh.w	lr, [r9]
 8014266:	9503      	str	r5, [sp, #12]
 8014268:	9601      	str	r6, [sp, #4]
 801426a:	9700      	str	r7, [sp, #0]
 801426c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8014270:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8014274:	9102      	str	r1, [sp, #8]
 8014276:	4621      	mov	r1, r4
 8014278:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801427c:	47a8      	blx	r5
 801427e:	b00e      	add	sp, #56	; 0x38
 8014280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014284:	f010 0f04 	tst.w	r0, #4
 8014288:	e7d9      	b.n	801423e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801428a:	6803      	ldr	r3, [r0, #0]
 801428c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801428e:	4798      	blx	r3
 8014290:	f8b9 3000 	ldrh.w	r3, [r9]
 8014294:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8014298:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801429c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80142a0:	435e      	muls	r6, r3
 80142a2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 80142a6:	2dff      	cmp	r5, #255	; 0xff
 80142a8:	fb03 1202 	mla	r2, r3, r2, r1
 80142ac:	ebac 0c07 	sub.w	ip, ip, r7
 80142b0:	eba3 0707 	sub.w	r7, r3, r7
 80142b4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80142b8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80142bc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80142c0:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80142c4:	d049      	beq.n	801435a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80142c6:	43eb      	mvns	r3, r5
 80142c8:	fa1f f985 	uxth.w	r9, r5
 80142cc:	b2db      	uxtb	r3, r3
 80142ce:	42b0      	cmp	r0, r6
 80142d0:	d266      	bcs.n	80143a0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80142d2:	eb00 0a0e 	add.w	sl, r0, lr
 80142d6:	4550      	cmp	r0, sl
 80142d8:	4621      	mov	r1, r4
 80142da:	f104 0403 	add.w	r4, r4, #3
 80142de:	d25b      	bcs.n	8014398 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 80142e0:	8802      	ldrh	r2, [r0, #0]
 80142e2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80142e6:	ea4f 2822 	mov.w	r8, r2, asr #8
 80142ea:	fb11 f109 	smulbb	r1, r1, r9
 80142ee:	10d5      	asrs	r5, r2, #3
 80142f0:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 80142f4:	00d2      	lsls	r2, r2, #3
 80142f6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80142fa:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80142fe:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8014302:	fb08 1803 	mla	r8, r8, r3, r1
 8014306:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801430a:	b2d2      	uxtb	r2, r2
 801430c:	fb11 f109 	smulbb	r1, r1, r9
 8014310:	fa1f f888 	uxth.w	r8, r8
 8014314:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8014318:	fb05 1503 	mla	r5, r5, r3, r1
 801431c:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8014320:	fb11 f109 	smulbb	r1, r1, r9
 8014324:	b2ad      	uxth	r5, r5
 8014326:	fb02 1203 	mla	r2, r2, r3, r1
 801432a:	f108 0101 	add.w	r1, r8, #1
 801432e:	b292      	uxth	r2, r2
 8014330:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8014334:	1c51      	adds	r1, r2, #1
 8014336:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801433a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801433e:	1c69      	adds	r1, r5, #1
 8014340:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8014344:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8014348:	096d      	lsrs	r5, r5, #5
 801434a:	ea42 0208 	orr.w	r2, r2, r8
 801434e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8014352:	432a      	orrs	r2, r5
 8014354:	f820 2b02 	strh.w	r2, [r0], #2
 8014358:	e7bd      	b.n	80142d6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801435a:	4a14      	ldr	r2, [pc, #80]	; (80143ac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801435c:	42b0      	cmp	r0, r6
 801435e:	d21f      	bcs.n	80143a0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8014360:	eb00 050e 	add.w	r5, r0, lr
 8014364:	42a8      	cmp	r0, r5
 8014366:	4621      	mov	r1, r4
 8014368:	f104 0403 	add.w	r4, r4, #3
 801436c:	d210      	bcs.n	8014390 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801436e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8014372:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8014376:	00db      	lsls	r3, r3, #3
 8014378:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801437c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8014380:	430b      	orrs	r3, r1
 8014382:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8014386:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801438a:	f820 3b02 	strh.w	r3, [r0], #2
 801438e:	e7e9      	b.n	8014364 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8014390:	4438      	add	r0, r7
 8014392:	eb01 040c 	add.w	r4, r1, ip
 8014396:	e7e1      	b.n	801435c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8014398:	4438      	add	r0, r7
 801439a:	eb01 040c 	add.w	r4, r1, ip
 801439e:	e796      	b.n	80142ce <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 80143a0:	4b03      	ldr	r3, [pc, #12]	; (80143b0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 80143a2:	6818      	ldr	r0, [r3, #0]
 80143a4:	6803      	ldr	r3, [r0, #0]
 80143a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143a8:	4798      	blx	r3
 80143aa:	e768      	b.n	801427e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80143ac:	fffff800 	.word	0xfffff800
 80143b0:	20024418 	.word	0x20024418
 80143b4:	20024412 	.word	0x20024412

080143b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80143b8:	b4f0      	push	{r4, r5, r6, r7}
 80143ba:	4616      	mov	r6, r2
 80143bc:	461c      	mov	r4, r3
 80143be:	460d      	mov	r5, r1
 80143c0:	9a04      	ldr	r2, [sp, #16]
 80143c2:	2e01      	cmp	r6, #1
 80143c4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80143c8:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80143cc:	d012      	beq.n	80143f4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 80143ce:	d303      	bcc.n	80143d8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 80143d0:	2e02      	cmp	r6, #2
 80143d2:	d00a      	beq.n	80143ea <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 80143d4:	bcf0      	pop	{r4, r5, r6, r7}
 80143d6:	4770      	bx	lr
 80143d8:	6805      	ldr	r5, [r0, #0]
 80143da:	e9cd 3704 	strd	r3, r7, [sp, #16]
 80143de:	68ed      	ldr	r5, [r5, #12]
 80143e0:	4613      	mov	r3, r2
 80143e2:	4622      	mov	r2, r4
 80143e4:	46ac      	mov	ip, r5
 80143e6:	bcf0      	pop	{r4, r5, r6, r7}
 80143e8:	4760      	bx	ip
 80143ea:	4621      	mov	r1, r4
 80143ec:	4628      	mov	r0, r5
 80143ee:	bcf0      	pop	{r4, r5, r6, r7}
 80143f0:	f7ff bd94 	b.w	8013f1c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80143f4:	4621      	mov	r1, r4
 80143f6:	4628      	mov	r0, r5
 80143f8:	bcf0      	pop	{r4, r5, r6, r7}
 80143fa:	f7ff bee5 	b.w	80141c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08014400 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8014400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014404:	b093      	sub	sp, #76	; 0x4c
 8014406:	4681      	mov	r9, r0
 8014408:	4688      	mov	r8, r1
 801440a:	6810      	ldr	r0, [r2, #0]
 801440c:	6851      	ldr	r1, [r2, #4]
 801440e:	ac0e      	add	r4, sp, #56	; 0x38
 8014410:	4616      	mov	r6, r2
 8014412:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8014416:	4f6b      	ldr	r7, [pc, #428]	; (80145c4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8014418:	c403      	stmia	r4!, {r0, r1}
 801441a:	6818      	ldr	r0, [r3, #0]
 801441c:	ac10      	add	r4, sp, #64	; 0x40
 801441e:	6859      	ldr	r1, [r3, #4]
 8014420:	c403      	stmia	r4!, {r0, r1}
 8014422:	a80e      	add	r0, sp, #56	; 0x38
 8014424:	f7f9 fe92 	bl	800e14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014428:	4631      	mov	r1, r6
 801442a:	a810      	add	r0, sp, #64	; 0x40
 801442c:	4e66      	ldr	r6, [pc, #408]	; (80145c8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801442e:	f7f9 feb5 	bl	800e19c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014432:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8014436:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801443a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801443e:	6830      	ldr	r0, [r6, #0]
 8014440:	fb11 2103 	smlabb	r1, r1, r3, r2
 8014444:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8014448:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801444c:	4489      	add	r9, r1
 801444e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8014452:	440a      	add	r2, r1
 8014454:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8014458:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801445c:	4413      	add	r3, r2
 801445e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8014462:	6803      	ldr	r3, [r0, #0]
 8014464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014466:	4798      	blx	r3
 8014468:	f010 0f80 	tst.w	r0, #128	; 0x80
 801446c:	6830      	ldr	r0, [r6, #0]
 801446e:	d01d      	beq.n	80144ac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8014470:	2200      	movs	r2, #0
 8014472:	6801      	ldr	r1, [r0, #0]
 8014474:	b2a4      	uxth	r4, r4
 8014476:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801447a:	b2ad      	uxth	r5, r5
 801447c:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8014480:	220b      	movs	r2, #11
 8014482:	9207      	str	r2, [sp, #28]
 8014484:	883a      	ldrh	r2, [r7, #0]
 8014486:	9502      	str	r5, [sp, #8]
 8014488:	9206      	str	r2, [sp, #24]
 801448a:	2201      	movs	r2, #1
 801448c:	9401      	str	r4, [sp, #4]
 801448e:	e9cd a204 	strd	sl, r2, [sp, #16]
 8014492:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8014496:	9203      	str	r2, [sp, #12]
 8014498:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801449c:	9200      	str	r2, [sp, #0]
 801449e:	4642      	mov	r2, r8
 80144a0:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80144a2:	4649      	mov	r1, r9
 80144a4:	47a0      	blx	r4
 80144a6:	b013      	add	sp, #76	; 0x4c
 80144a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144ac:	6803      	ldr	r3, [r0, #0]
 80144ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144b0:	4798      	blx	r3
 80144b2:	883b      	ldrh	r3, [r7, #0]
 80144b4:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80144b8:	f04f 0e04 	mov.w	lr, #4
 80144bc:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80144c0:	435d      	muls	r5, r3
 80144c2:	fb03 1202 	mla	r2, r3, r2, r1
 80144c6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80144ca:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80144ce:	920c      	str	r2, [sp, #48]	; 0x30
 80144d0:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80144d4:	1b12      	subs	r2, r2, r4
 80144d6:	920d      	str	r2, [sp, #52]	; 0x34
 80144d8:	0062      	lsls	r2, r4, #1
 80144da:	1b1c      	subs	r4, r3, r4
 80144dc:	920a      	str	r2, [sp, #40]	; 0x28
 80144de:	0063      	lsls	r3, r4, #1
 80144e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80144e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80144e4:	4298      	cmp	r0, r3
 80144e6:	d266      	bcs.n	80145b6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 80144e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144ea:	eb00 0b03 	add.w	fp, r0, r3
 80144ee:	4558      	cmp	r0, fp
 80144f0:	d25c      	bcs.n	80145ac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 80144f2:	f819 3b01 	ldrb.w	r3, [r9], #1
 80144f6:	fb1e e303 	smlabb	r3, lr, r3, lr
 80144fa:	f858 2003 	ldr.w	r2, [r8, r3]
 80144fe:	0e11      	lsrs	r1, r2, #24
 8014500:	d012      	beq.n	8014528 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8014502:	29ff      	cmp	r1, #255	; 0xff
 8014504:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8014508:	d110      	bne.n	801452c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801450a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801450e:	d10d      	bne.n	801452c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8014510:	0953      	lsrs	r3, r2, #5
 8014512:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8014516:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801451a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801451e:	f027 0707 	bic.w	r7, r7, #7
 8014522:	431f      	orrs	r7, r3
 8014524:	433a      	orrs	r2, r7
 8014526:	8002      	strh	r2, [r0, #0]
 8014528:	3002      	adds	r0, #2
 801452a:	e7e0      	b.n	80144ee <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801452c:	fb0a f101 	mul.w	r1, sl, r1
 8014530:	8806      	ldrh	r6, [r0, #0]
 8014532:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8014536:	b2d2      	uxtb	r2, r2
 8014538:	1c4b      	adds	r3, r1, #1
 801453a:	1235      	asrs	r5, r6, #8
 801453c:	10f4      	asrs	r4, r6, #3
 801453e:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8014542:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8014546:	00f6      	lsls	r6, r6, #3
 8014548:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801454c:	121b      	asrs	r3, r3, #8
 801454e:	b2f6      	uxtb	r6, r6
 8014550:	b299      	uxth	r1, r3
 8014552:	43db      	mvns	r3, r3
 8014554:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8014558:	fb1c fc01 	smulbb	ip, ip, r1
 801455c:	b2db      	uxtb	r3, r3
 801455e:	fb12 f201 	smulbb	r2, r2, r1
 8014562:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8014566:	fb05 c503 	mla	r5, r5, r3, ip
 801456a:	b2ff      	uxtb	r7, r7
 801456c:	fb06 2203 	mla	r2, r6, r3, r2
 8014570:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8014574:	fb17 f701 	smulbb	r7, r7, r1
 8014578:	b2ad      	uxth	r5, r5
 801457a:	b292      	uxth	r2, r2
 801457c:	fb04 7403 	mla	r4, r4, r3, r7
 8014580:	f105 0c01 	add.w	ip, r5, #1
 8014584:	1c57      	adds	r7, r2, #1
 8014586:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801458a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801458e:	b2a4      	uxth	r4, r4
 8014590:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8014594:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8014598:	433d      	orrs	r5, r7
 801459a:	1c67      	adds	r7, r4, #1
 801459c:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80145a0:	0964      	lsrs	r4, r4, #5
 80145a2:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80145a6:	4325      	orrs	r5, r4
 80145a8:	8005      	strh	r5, [r0, #0]
 80145aa:	e7bd      	b.n	8014528 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80145ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80145ae:	4418      	add	r0, r3
 80145b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80145b2:	4499      	add	r9, r3
 80145b4:	e795      	b.n	80144e2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 80145b6:	4b04      	ldr	r3, [pc, #16]	; (80145c8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80145b8:	6818      	ldr	r0, [r3, #0]
 80145ba:	6803      	ldr	r3, [r0, #0]
 80145bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145be:	4798      	blx	r3
 80145c0:	e771      	b.n	80144a6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 80145c2:	bf00      	nop
 80145c4:	20024412 	.word	0x20024412
 80145c8:	20024418 	.word	0x20024418

080145cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80145cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145d0:	b087      	sub	sp, #28
 80145d2:	4680      	mov	r8, r0
 80145d4:	460d      	mov	r5, r1
 80145d6:	4614      	mov	r4, r2
 80145d8:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 80145dc:	2e00      	cmp	r6, #0
 80145de:	f000 80b9 	beq.w	8014754 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 80145e2:	6810      	ldr	r0, [r2, #0]
 80145e4:	af02      	add	r7, sp, #8
 80145e6:	6851      	ldr	r1, [r2, #4]
 80145e8:	c703      	stmia	r7!, {r0, r1}
 80145ea:	6818      	ldr	r0, [r3, #0]
 80145ec:	af04      	add	r7, sp, #16
 80145ee:	6859      	ldr	r1, [r3, #4]
 80145f0:	c703      	stmia	r7!, {r0, r1}
 80145f2:	a802      	add	r0, sp, #8
 80145f4:	f7f9 fdaa 	bl	800e14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80145f8:	4621      	mov	r1, r4
 80145fa:	a804      	add	r0, sp, #16
 80145fc:	f7f9 fdce 	bl	800e19c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014600:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8014604:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8014608:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801460c:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8014610:	fb14 2103 	smlabb	r1, r4, r3, r2
 8014614:	eb08 0401 	add.w	r4, r8, r1
 8014618:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801461c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8014620:	440a      	add	r2, r1
 8014622:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8014626:	f8ad 2010 	strh.w	r2, [sp, #16]
 801462a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801462e:	4413      	add	r3, r2
 8014630:	f8ad 3012 	strh.w	r3, [sp, #18]
 8014634:	4b49      	ldr	r3, [pc, #292]	; (801475c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8014636:	6818      	ldr	r0, [r3, #0]
 8014638:	6803      	ldr	r3, [r0, #0]
 801463a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801463c:	4798      	blx	r3
 801463e:	4b48      	ldr	r3, [pc, #288]	; (8014760 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8014640:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8014644:	2eff      	cmp	r6, #255	; 0xff
 8014646:	881a      	ldrh	r2, [r3, #0]
 8014648:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801464c:	fb02 c101 	mla	r1, r2, r1, ip
 8014650:	fb02 f207 	mul.w	r2, r2, r7
 8014654:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8014658:	f105 0104 	add.w	r1, r5, #4
 801465c:	461d      	mov	r5, r3
 801465e:	d05a      	beq.n	8014716 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8014660:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8014664:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8014668:	b2b6      	uxth	r6, r6
 801466a:	9301      	str	r3, [sp, #4]
 801466c:	fa1f fe8e 	uxth.w	lr, lr
 8014670:	4282      	cmp	r2, r0
 8014672:	d96a      	bls.n	801474a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8014674:	eb00 0b0a 	add.w	fp, r0, sl
 8014678:	4583      	cmp	fp, r0
 801467a:	d940      	bls.n	80146fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801467c:	8805      	ldrh	r5, [r0, #0]
 801467e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014682:	122f      	asrs	r7, r5, #8
 8014684:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014688:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801468c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8014690:	00ed      	lsls	r5, r5, #3
 8014692:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8014696:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801469a:	fb17 f70e 	smulbb	r7, r7, lr
 801469e:	b2ed      	uxtb	r5, r5
 80146a0:	fb19 f90e 	smulbb	r9, r9, lr
 80146a4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80146a8:	fb15 f50e 	smulbb	r5, r5, lr
 80146ac:	fb0c 7c06 	mla	ip, ip, r6, r7
 80146b0:	10df      	asrs	r7, r3, #3
 80146b2:	00db      	lsls	r3, r3, #3
 80146b4:	fa1f fc8c 	uxth.w	ip, ip
 80146b8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80146bc:	b2db      	uxtb	r3, r3
 80146be:	fb07 9706 	mla	r7, r7, r6, r9
 80146c2:	f10c 0901 	add.w	r9, ip, #1
 80146c6:	fb03 5306 	mla	r3, r3, r6, r5
 80146ca:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80146ce:	b29b      	uxth	r3, r3
 80146d0:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 80146d4:	b2bf      	uxth	r7, r7
 80146d6:	f103 0c01 	add.w	ip, r3, #1
 80146da:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80146de:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80146e2:	ea4c 0c09 	orr.w	ip, ip, r9
 80146e6:	f107 0901 	add.w	r9, r7, #1
 80146ea:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80146ee:	097f      	lsrs	r7, r7, #5
 80146f0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80146f4:	ea4c 0c07 	orr.w	ip, ip, r7
 80146f8:	f820 cb02 	strh.w	ip, [r0], #2
 80146fc:	e7bc      	b.n	8014678 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 80146fe:	9b01      	ldr	r3, [sp, #4]
 8014700:	881b      	ldrh	r3, [r3, #0]
 8014702:	eba3 0308 	sub.w	r3, r3, r8
 8014706:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801470a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801470e:	eba3 0308 	sub.w	r3, r3, r8
 8014712:	441c      	add	r4, r3
 8014714:	e7ac      	b.n	8014670 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 8014716:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801471a:	4282      	cmp	r2, r0
 801471c:	d915      	bls.n	801474a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801471e:	eb00 060a 	add.w	r6, r0, sl
 8014722:	4286      	cmp	r6, r0
 8014724:	d906      	bls.n	8014734 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 8014726:	f814 3b01 	ldrb.w	r3, [r4], #1
 801472a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801472e:	f820 3b02 	strh.w	r3, [r0], #2
 8014732:	e7f6      	b.n	8014722 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8014734:	882b      	ldrh	r3, [r5, #0]
 8014736:	eba3 0308 	sub.w	r3, r3, r8
 801473a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801473e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8014742:	eba3 0308 	sub.w	r3, r3, r8
 8014746:	441c      	add	r4, r3
 8014748:	e7e7      	b.n	801471a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801474a:	4b04      	ldr	r3, [pc, #16]	; (801475c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801474c:	6818      	ldr	r0, [r3, #0]
 801474e:	6803      	ldr	r3, [r0, #0]
 8014750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014752:	4798      	blx	r3
 8014754:	b007      	add	sp, #28
 8014756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801475a:	bf00      	nop
 801475c:	20024418 	.word	0x20024418
 8014760:	20024412 	.word	0x20024412

08014764 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8014764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014768:	b091      	sub	sp, #68	; 0x44
 801476a:	4680      	mov	r8, r0
 801476c:	460f      	mov	r7, r1
 801476e:	4614      	mov	r4, r2
 8014770:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8014774:	2d00      	cmp	r5, #0
 8014776:	d051      	beq.n	801481c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8014778:	6810      	ldr	r0, [r2, #0]
 801477a:	ae0c      	add	r6, sp, #48	; 0x30
 801477c:	6851      	ldr	r1, [r2, #4]
 801477e:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8014980 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8014782:	c603      	stmia	r6!, {r0, r1}
 8014784:	6818      	ldr	r0, [r3, #0]
 8014786:	ae0e      	add	r6, sp, #56	; 0x38
 8014788:	6859      	ldr	r1, [r3, #4]
 801478a:	c603      	stmia	r6!, {r0, r1}
 801478c:	a80c      	add	r0, sp, #48	; 0x30
 801478e:	f7f9 fcdd 	bl	800e14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014792:	4621      	mov	r1, r4
 8014794:	a80e      	add	r0, sp, #56	; 0x38
 8014796:	f7f9 fd01 	bl	800e19c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801479a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801479e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80147a2:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80147a6:	f8d9 0000 	ldr.w	r0, [r9]
 80147aa:	fb11 2103 	smlabb	r1, r1, r3, r2
 80147ae:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 80147b2:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80147b6:	eb08 0401 	add.w	r4, r8, r1
 80147ba:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80147be:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8014984 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 80147c2:	440a      	add	r2, r1
 80147c4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80147c8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80147cc:	4413      	add	r3, r2
 80147ce:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80147d2:	6803      	ldr	r3, [r0, #0]
 80147d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147d6:	4798      	blx	r3
 80147d8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80147dc:	f8d9 0000 	ldr.w	r0, [r9]
 80147e0:	d01f      	beq.n	8014822 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 80147e2:	2200      	movs	r2, #0
 80147e4:	6801      	ldr	r1, [r0, #0]
 80147e6:	b2b6      	uxth	r6, r6
 80147e8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80147ec:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80147f0:	220b      	movs	r2, #11
 80147f2:	9207      	str	r2, [sp, #28]
 80147f4:	f8b8 2000 	ldrh.w	r2, [r8]
 80147f8:	9601      	str	r6, [sp, #4]
 80147fa:	9206      	str	r2, [sp, #24]
 80147fc:	2201      	movs	r2, #1
 80147fe:	e9cd 5204 	strd	r5, r2, [sp, #16]
 8014802:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8014806:	9203      	str	r2, [sp, #12]
 8014808:	fa1f f28a 	uxth.w	r2, sl
 801480c:	9202      	str	r2, [sp, #8]
 801480e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8014812:	9200      	str	r2, [sp, #0]
 8014814:	463a      	mov	r2, r7
 8014816:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8014818:	4621      	mov	r1, r4
 801481a:	47a8      	blx	r5
 801481c:	b011      	add	sp, #68	; 0x44
 801481e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014822:	6803      	ldr	r3, [r0, #0]
 8014824:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8014828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801482a:	4798      	blx	r3
 801482c:	f8b8 2000 	ldrh.w	r2, [r8]
 8014830:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8014834:	2dff      	cmp	r5, #255	; 0xff
 8014836:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801483a:	fb0a fa02 	mul.w	sl, sl, r2
 801483e:	fb02 1303 	mla	r3, r2, r3, r1
 8014842:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014846:	d062      	beq.n	801490e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8014848:	ea6f 0c05 	mvn.w	ip, r5
 801484c:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8014850:	b2ad      	uxth	r5, r5
 8014852:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8014856:	fa5f fc8c 	uxtb.w	ip, ip
 801485a:	930a      	str	r3, [sp, #40]	; 0x28
 801485c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801485e:	4298      	cmp	r0, r3
 8014860:	f080 8085 	bcs.w	801496e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8014864:	eb00 0b09 	add.w	fp, r0, r9
 8014868:	4558      	cmp	r0, fp
 801486a:	d246      	bcs.n	80148fa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801486c:	f814 eb01 	ldrb.w	lr, [r4], #1
 8014870:	2303      	movs	r3, #3
 8014872:	2204      	movs	r2, #4
 8014874:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8014878:	8803      	ldrh	r3, [r0, #0]
 801487a:	eb07 0a0e 	add.w	sl, r7, lr
 801487e:	1219      	asrs	r1, r3, #8
 8014880:	10da      	asrs	r2, r3, #3
 8014882:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8014886:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801488a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801488e:	00db      	lsls	r3, r3, #3
 8014890:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8014894:	fb18 f805 	smulbb	r8, r8, r5
 8014898:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801489c:	fb1e fe05 	smulbb	lr, lr, r5
 80148a0:	b2db      	uxtb	r3, r3
 80148a2:	fb01 810c 	mla	r1, r1, ip, r8
 80148a6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80148aa:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80148ae:	fb18 f805 	smulbb	r8, r8, r5
 80148b2:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80148b6:	b289      	uxth	r1, r1
 80148b8:	fb02 820c 	mla	r2, r2, ip, r8
 80148bc:	fb03 e30c 	mla	r3, r3, ip, lr
 80148c0:	f101 0801 	add.w	r8, r1, #1
 80148c4:	b292      	uxth	r2, r2
 80148c6:	b29b      	uxth	r3, r3
 80148c8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80148cc:	f102 0801 	add.w	r8, r2, #1
 80148d0:	f103 0e01 	add.w	lr, r3, #1
 80148d4:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 80148d8:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80148dc:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80148e0:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80148e4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80148e8:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80148ec:	ea4e 0101 	orr.w	r1, lr, r1
 80148f0:	ea41 0108 	orr.w	r1, r1, r8
 80148f4:	f820 1b02 	strh.w	r1, [r0], #2
 80148f8:	e7b6      	b.n	8014868 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 80148fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80148fc:	881b      	ldrh	r3, [r3, #0]
 80148fe:	1b9b      	subs	r3, r3, r6
 8014900:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014904:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8014908:	1b9b      	subs	r3, r3, r6
 801490a:	441c      	add	r4, r3
 801490c:	e7a6      	b.n	801485c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801490e:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8014912:	2203      	movs	r2, #3
 8014914:	2504      	movs	r5, #4
 8014916:	4919      	ldr	r1, [pc, #100]	; (801497c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8014918:	4550      	cmp	r0, sl
 801491a:	d228      	bcs.n	801496e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801491c:	eb00 0c09 	add.w	ip, r0, r9
 8014920:	4560      	cmp	r0, ip
 8014922:	4623      	mov	r3, r4
 8014924:	d219      	bcs.n	801495a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 8014926:	f893 e000 	ldrb.w	lr, [r3]
 801492a:	3401      	adds	r4, #1
 801492c:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8014930:	eb07 0b0e 	add.w	fp, r7, lr
 8014934:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8014938:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801493c:	f89b b001 	ldrb.w	fp, [fp, #1]
 8014940:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8014944:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8014948:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801494c:	ea43 030b 	orr.w	r3, r3, fp
 8014950:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8014954:	f820 3b02 	strh.w	r3, [r0], #2
 8014958:	e7e2      	b.n	8014920 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801495a:	f8b8 3000 	ldrh.w	r3, [r8]
 801495e:	1b9b      	subs	r3, r3, r6
 8014960:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014964:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8014968:	1b9b      	subs	r3, r3, r6
 801496a:	441c      	add	r4, r3
 801496c:	e7d4      	b.n	8014918 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801496e:	4b04      	ldr	r3, [pc, #16]	; (8014980 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8014970:	6818      	ldr	r0, [r3, #0]
 8014972:	6803      	ldr	r3, [r0, #0]
 8014974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014976:	4798      	blx	r3
 8014978:	e750      	b.n	801481c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801497a:	bf00      	nop
 801497c:	fffff800 	.word	0xfffff800
 8014980:	20024418 	.word	0x20024418
 8014984:	20024412 	.word	0x20024412

08014988 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8014988:	b430      	push	{r4, r5}
 801498a:	780d      	ldrb	r5, [r1, #0]
 801498c:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8014990:	2d01      	cmp	r5, #1
 8014992:	d00a      	beq.n	80149aa <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8014994:	d305      	bcc.n	80149a2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8014996:	2d02      	cmp	r5, #2
 8014998:	d10b      	bne.n	80149b2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801499a:	9402      	str	r4, [sp, #8]
 801499c:	bc30      	pop	{r4, r5}
 801499e:	f7ff be15 	b.w	80145cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80149a2:	9402      	str	r4, [sp, #8]
 80149a4:	bc30      	pop	{r4, r5}
 80149a6:	f7ff bd2b 	b.w	8014400 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80149aa:	9402      	str	r4, [sp, #8]
 80149ac:	bc30      	pop	{r4, r5}
 80149ae:	f7ff bed9 	b.w	8014764 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80149b2:	bc30      	pop	{r4, r5}
 80149b4:	4770      	bx	lr
	...

080149b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 80149b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149bc:	b087      	sub	sp, #28
 80149be:	4604      	mov	r4, r0
 80149c0:	460e      	mov	r6, r1
 80149c2:	6810      	ldr	r0, [r2, #0]
 80149c4:	6851      	ldr	r1, [r2, #4]
 80149c6:	ad02      	add	r5, sp, #8
 80149c8:	4617      	mov	r7, r2
 80149ca:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80149ce:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8014c00 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 80149d2:	c503      	stmia	r5!, {r0, r1}
 80149d4:	6818      	ldr	r0, [r3, #0]
 80149d6:	ad04      	add	r5, sp, #16
 80149d8:	6859      	ldr	r1, [r3, #4]
 80149da:	c503      	stmia	r5!, {r0, r1}
 80149dc:	a802      	add	r0, sp, #8
 80149de:	f7f9 fbb5 	bl	800e14c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80149e2:	4639      	mov	r1, r7
 80149e4:	a804      	add	r0, sp, #16
 80149e6:	f7f9 fbd9 	bl	800e19c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80149ea:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80149ee:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80149f2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80149f6:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80149fa:	fb11 2103 	smlabb	r1, r1, r3, r2
 80149fe:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8014a02:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8014a06:	440e      	add	r6, r1
 8014a08:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8014a0c:	440a      	add	r2, r1
 8014a0e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014a12:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8014a16:	4413      	add	r3, r2
 8014a18:	f8ad 3012 	strh.w	r3, [sp, #18]
 8014a1c:	4b77      	ldr	r3, [pc, #476]	; (8014bfc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8014a1e:	6818      	ldr	r0, [r3, #0]
 8014a20:	6803      	ldr	r3, [r0, #0]
 8014a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a24:	4798      	blx	r3
 8014a26:	f8b9 b000 	ldrh.w	fp, [r9]
 8014a2a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8014a2e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8014a32:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8014a36:	fb05 f50b 	mul.w	r5, r5, fp
 8014a3a:	fb0b 2303 	mla	r3, fp, r3, r2
 8014a3e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014a42:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8014a46:	9300      	str	r3, [sp, #0]
 8014a48:	d069      	beq.n	8014b1e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8014a4a:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8014a4e:	4558      	cmp	r0, fp
 8014a50:	f080 80cc 	bcs.w	8014bec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8014a54:	9b00      	ldr	r3, [sp, #0]
 8014a56:	4631      	mov	r1, r6
 8014a58:	18c3      	adds	r3, r0, r3
 8014a5a:	9301      	str	r3, [sp, #4]
 8014a5c:	9b01      	ldr	r3, [sp, #4]
 8014a5e:	4298      	cmp	r0, r3
 8014a60:	d24f      	bcs.n	8014b02 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8014a62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014a66:	2a00      	cmp	r2, #0
 8014a68:	d048      	beq.n	8014afc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8014a6a:	fb0a f202 	mul.w	r2, sl, r2
 8014a6e:	1c53      	adds	r3, r2, #1
 8014a70:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8014a74:	121b      	asrs	r3, r3, #8
 8014a76:	d041      	beq.n	8014afc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8014a78:	8802      	ldrh	r2, [r0, #0]
 8014a7a:	b29e      	uxth	r6, r3
 8014a7c:	f8b4 c000 	ldrh.w	ip, [r4]
 8014a80:	43db      	mvns	r3, r3
 8014a82:	1215      	asrs	r5, r2, #8
 8014a84:	b2db      	uxtb	r3, r3
 8014a86:	ea4f 272c 	mov.w	r7, ip, asr #8
 8014a8a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8014a8e:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8014a92:	fb15 f503 	smulbb	r5, r5, r3
 8014a96:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8014a9a:	00d2      	lsls	r2, r2, #3
 8014a9c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8014aa0:	fb07 5706 	mla	r7, r7, r6, r5
 8014aa4:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8014aa8:	b2d2      	uxtb	r2, r2
 8014aaa:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8014aae:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8014ab2:	fb1e fe03 	smulbb	lr, lr, r3
 8014ab6:	b2bf      	uxth	r7, r7
 8014ab8:	fb12 f203 	smulbb	r2, r2, r3
 8014abc:	fa5f fc8c 	uxtb.w	ip, ip
 8014ac0:	fb05 e506 	mla	r5, r5, r6, lr
 8014ac4:	f107 0e01 	add.w	lr, r7, #1
 8014ac8:	fb0c 2c06 	mla	ip, ip, r6, r2
 8014acc:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8014ad0:	fa1f fc8c 	uxth.w	ip, ip
 8014ad4:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8014ad8:	b2ad      	uxth	r5, r5
 8014ada:	f10c 0701 	add.w	r7, ip, #1
 8014ade:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8014ae2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8014ae6:	ea47 070e 	orr.w	r7, r7, lr
 8014aea:	f105 0e01 	add.w	lr, r5, #1
 8014aee:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8014af2:	096d      	lsrs	r5, r5, #5
 8014af4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8014af8:	432f      	orrs	r7, r5
 8014afa:	8007      	strh	r7, [r0, #0]
 8014afc:	3002      	adds	r0, #2
 8014afe:	3402      	adds	r4, #2
 8014b00:	e7ac      	b.n	8014a5c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8014b02:	f8b9 3000 	ldrh.w	r3, [r9]
 8014b06:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8014b0a:	eba3 0308 	sub.w	r3, r3, r8
 8014b0e:	eba6 0608 	sub.w	r6, r6, r8
 8014b12:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014b16:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8014b1a:	440e      	add	r6, r1
 8014b1c:	e797      	b.n	8014a4e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8014b1e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014b22:	42a8      	cmp	r0, r5
 8014b24:	d262      	bcs.n	8014bec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8014b26:	9b00      	ldr	r3, [sp, #0]
 8014b28:	4631      	mov	r1, r6
 8014b2a:	eb00 0b03 	add.w	fp, r0, r3
 8014b2e:	4558      	cmp	r0, fp
 8014b30:	d24e      	bcs.n	8014bd0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8014b32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b36:	b12b      	cbz	r3, 8014b44 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8014b38:	2bff      	cmp	r3, #255	; 0xff
 8014b3a:	f8b4 e000 	ldrh.w	lr, [r4]
 8014b3e:	d104      	bne.n	8014b4a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8014b40:	f8a0 e000 	strh.w	lr, [r0]
 8014b44:	3002      	adds	r0, #2
 8014b46:	3402      	adds	r4, #2
 8014b48:	e7f1      	b.n	8014b2e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8014b4a:	8802      	ldrh	r2, [r0, #0]
 8014b4c:	b29f      	uxth	r7, r3
 8014b4e:	43db      	mvns	r3, r3
 8014b50:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8014b54:	1216      	asrs	r6, r2, #8
 8014b56:	b2db      	uxtb	r3, r3
 8014b58:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8014b5c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8014b60:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8014b64:	00d2      	lsls	r2, r2, #3
 8014b66:	fb16 f603 	smulbb	r6, r6, r3
 8014b6a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8014b6e:	b2d2      	uxtb	r2, r2
 8014b70:	fb0c 6c07 	mla	ip, ip, r7, r6
 8014b74:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8014b78:	fb1a fa03 	smulbb	sl, sl, r3
 8014b7c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8014b80:	fa1f fc8c 	uxth.w	ip, ip
 8014b84:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8014b88:	fb12 f303 	smulbb	r3, r2, r3
 8014b8c:	fa5f fe8e 	uxtb.w	lr, lr
 8014b90:	fb06 a607 	mla	r6, r6, r7, sl
 8014b94:	f10c 0201 	add.w	r2, ip, #1
 8014b98:	fb0e 3307 	mla	r3, lr, r7, r3
 8014b9c:	b2b6      	uxth	r6, r6
 8014b9e:	b29b      	uxth	r3, r3
 8014ba0:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8014ba4:	f106 0a01 	add.w	sl, r6, #1
 8014ba8:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8014bac:	f103 0c01 	add.w	ip, r3, #1
 8014bb0:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8014bb4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8014bb8:	0976      	lsrs	r6, r6, #5
 8014bba:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8014bbe:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8014bc2:	ea4c 0c02 	orr.w	ip, ip, r2
 8014bc6:	ea4c 0c06 	orr.w	ip, ip, r6
 8014bca:	f8a0 c000 	strh.w	ip, [r0]
 8014bce:	e7b9      	b.n	8014b44 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8014bd0:	f8b9 3000 	ldrh.w	r3, [r9]
 8014bd4:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8014bd8:	eba3 0308 	sub.w	r3, r3, r8
 8014bdc:	eba6 0608 	sub.w	r6, r6, r8
 8014be0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014be4:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8014be8:	440e      	add	r6, r1
 8014bea:	e79a      	b.n	8014b22 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8014bec:	4b03      	ldr	r3, [pc, #12]	; (8014bfc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8014bee:	6818      	ldr	r0, [r3, #0]
 8014bf0:	6803      	ldr	r3, [r0, #0]
 8014bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bf4:	4798      	blx	r3
 8014bf6:	b007      	add	sp, #28
 8014bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bfc:	20024418 	.word	0x20024418
 8014c00:	20024412 	.word	0x20024412

08014c04 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8014c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c08:	b089      	sub	sp, #36	; 0x24
 8014c0a:	4682      	mov	sl, r0
 8014c0c:	460f      	mov	r7, r1
 8014c0e:	4691      	mov	r9, r2
 8014c10:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8014c14:	4698      	mov	r8, r3
 8014c16:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014c18:	2e00      	cmp	r6, #0
 8014c1a:	d036      	beq.n	8014c8a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8014c1c:	4608      	mov	r0, r1
 8014c1e:	f7fc f861 	bl	8010ce4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014c22:	4605      	mov	r5, r0
 8014c24:	4638      	mov	r0, r7
 8014c26:	f7fc f891 	bl	8010d4c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014c2a:	f8ad 000e 	strh.w	r0, [sp, #14]
 8014c2e:	4638      	mov	r0, r7
 8014c30:	f8ad 9008 	strh.w	r9, [sp, #8]
 8014c34:	f8ad 500c 	strh.w	r5, [sp, #12]
 8014c38:	f8ad 800a 	strh.w	r8, [sp, #10]
 8014c3c:	f7fc f93e 	bl	8010ebc <_ZNK8touchgfx6Bitmap7getDataEv>
 8014c40:	4605      	mov	r5, r0
 8014c42:	4638      	mov	r0, r7
 8014c44:	f7fc f96a 	bl	8010f1c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8014c48:	4681      	mov	r9, r0
 8014c4a:	4638      	mov	r0, r7
 8014c4c:	f7fc f9ba 	bl	8010fc4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014c50:	280b      	cmp	r0, #11
 8014c52:	d81a      	bhi.n	8014c8a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8014c54:	e8df f000 	tbb	[pc, r0]
 8014c58:	1906aebd 	.word	0x1906aebd
 8014c5c:	19191919 	.word	0x19191919
 8014c60:	b5191919 	.word	0xb5191919
 8014c64:	4bb0      	ldr	r3, [pc, #704]	; (8014f28 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 8014c66:	6818      	ldr	r0, [r3, #0]
 8014c68:	6803      	ldr	r3, [r0, #0]
 8014c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c6c:	4798      	blx	r3
 8014c6e:	2eff      	cmp	r6, #255	; 0xff
 8014c70:	d121      	bne.n	8014cb6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8014c72:	0683      	lsls	r3, r0, #26
 8014c74:	d41f      	bmi.n	8014cb6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8014c76:	4638      	mov	r0, r7
 8014c78:	f7fc f8e8 	bl	8010e4c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8014c7c:	b940      	cbnz	r0, 8014c90 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8014c7e:	4623      	mov	r3, r4
 8014c80:	aa02      	add	r2, sp, #8
 8014c82:	4629      	mov	r1, r5
 8014c84:	4650      	mov	r0, sl
 8014c86:	f7ff fa2f 	bl	80140e8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8014c8a:	b009      	add	sp, #36	; 0x24
 8014c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c90:	f10d 0818 	add.w	r8, sp, #24
 8014c94:	4639      	mov	r1, r7
 8014c96:	af04      	add	r7, sp, #16
 8014c98:	4640      	mov	r0, r8
 8014c9a:	f7fc f88b 	bl	8010db4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8014c9e:	e898 0003 	ldmia.w	r8, {r0, r1}
 8014ca2:	e887 0003 	stmia.w	r7, {r0, r1}
 8014ca6:	4638      	mov	r0, r7
 8014ca8:	4621      	mov	r1, r4
 8014caa:	f7f7 fa97 	bl	800c1dc <_ZN8touchgfx4RectaNERKS0_>
 8014cae:	4638      	mov	r0, r7
 8014cb0:	f7f7 fad7 	bl	800c262 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014cb4:	b130      	cbz	r0, 8014cc4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8014cb6:	4633      	mov	r3, r6
 8014cb8:	4622      	mov	r2, r4
 8014cba:	a902      	add	r1, sp, #8
 8014cbc:	4628      	mov	r0, r5
 8014cbe:	f7ff f92d 	bl	8013f1c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8014cc2:	e7e2      	b.n	8014c8a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8014cc4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8014cc8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8014ccc:	4293      	cmp	r3, r2
 8014cce:	dd12      	ble.n	8014cf6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 8014cd0:	1a9b      	subs	r3, r3, r2
 8014cd2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8014cd6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014cda:	f8ad 0018 	strh.w	r0, [sp, #24]
 8014cde:	4628      	mov	r0, r5
 8014ce0:	f8ad 201a 	strh.w	r2, [sp, #26]
 8014ce4:	4642      	mov	r2, r8
 8014ce6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8014cea:	a902      	add	r1, sp, #8
 8014cec:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014cf0:	4633      	mov	r3, r6
 8014cf2:	f7ff f913 	bl	8013f1c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8014cf6:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8014cfa:	f9b4 2000 	ldrsh.w	r2, [r4]
 8014cfe:	4293      	cmp	r3, r2
 8014d00:	dd12      	ble.n	8014d28 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 8014d02:	1a9b      	subs	r3, r3, r2
 8014d04:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8014d08:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8014d0c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8014d10:	4642      	mov	r2, r8
 8014d12:	f8ad 001a 	strh.w	r0, [sp, #26]
 8014d16:	4628      	mov	r0, r5
 8014d18:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014d1c:	23ff      	movs	r3, #255	; 0xff
 8014d1e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8014d22:	a902      	add	r1, sp, #8
 8014d24:	f7ff f8fa 	bl	8013f1c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8014d28:	463b      	mov	r3, r7
 8014d2a:	aa02      	add	r2, sp, #8
 8014d2c:	4629      	mov	r1, r5
 8014d2e:	4650      	mov	r0, sl
 8014d30:	f7ff f9da 	bl	80140e8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8014d34:	88a2      	ldrh	r2, [r4, #4]
 8014d36:	8823      	ldrh	r3, [r4, #0]
 8014d38:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8014d3c:	4413      	add	r3, r2
 8014d3e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8014d42:	440a      	add	r2, r1
 8014d44:	b29b      	uxth	r3, r3
 8014d46:	b292      	uxth	r2, r2
 8014d48:	b218      	sxth	r0, r3
 8014d4a:	b211      	sxth	r1, r2
 8014d4c:	4288      	cmp	r0, r1
 8014d4e:	dd12      	ble.n	8014d76 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 8014d50:	1a9b      	subs	r3, r3, r2
 8014d52:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8014d56:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8014d5a:	4642      	mov	r2, r8
 8014d5c:	f8ad 1018 	strh.w	r1, [sp, #24]
 8014d60:	a902      	add	r1, sp, #8
 8014d62:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014d66:	23ff      	movs	r3, #255	; 0xff
 8014d68:	f8ad 001e 	strh.w	r0, [sp, #30]
 8014d6c:	4628      	mov	r0, r5
 8014d6e:	f8ad 601a 	strh.w	r6, [sp, #26]
 8014d72:	f7ff f8d3 	bl	8013f1c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8014d76:	88e2      	ldrh	r2, [r4, #6]
 8014d78:	8863      	ldrh	r3, [r4, #2]
 8014d7a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8014d7e:	4413      	add	r3, r2
 8014d80:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8014d84:	440a      	add	r2, r1
 8014d86:	b29b      	uxth	r3, r3
 8014d88:	b292      	uxth	r2, r2
 8014d8a:	b218      	sxth	r0, r3
 8014d8c:	b211      	sxth	r1, r2
 8014d8e:	4288      	cmp	r0, r1
 8014d90:	f77f af7b 	ble.w	8014c8a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8014d94:	1a9b      	subs	r3, r3, r2
 8014d96:	f9b4 6000 	ldrsh.w	r6, [r4]
 8014d9a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8014d9e:	4642      	mov	r2, r8
 8014da0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014da4:	23ff      	movs	r3, #255	; 0xff
 8014da6:	f8ad 6018 	strh.w	r6, [sp, #24]
 8014daa:	f8ad 101a 	strh.w	r1, [sp, #26]
 8014dae:	f8ad 001c 	strh.w	r0, [sp, #28]
 8014db2:	e782      	b.n	8014cba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 8014db4:	4633      	mov	r3, r6
 8014db6:	4622      	mov	r2, r4
 8014db8:	a902      	add	r1, sp, #8
 8014dba:	4628      	mov	r0, r5
 8014dbc:	f7ff fa04 	bl	80141c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8014dc0:	e763      	b.n	8014c8a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8014dc2:	9600      	str	r6, [sp, #0]
 8014dc4:	4623      	mov	r3, r4
 8014dc6:	aa02      	add	r2, sp, #8
 8014dc8:	4649      	mov	r1, r9
 8014dca:	4628      	mov	r0, r5
 8014dcc:	f7ff fddc 	bl	8014988 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8014dd0:	e75b      	b.n	8014c8a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8014dd2:	4638      	mov	r0, r7
 8014dd4:	f7fc f83a 	bl	8010e4c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8014dd8:	b950      	cbnz	r0, 8014df0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 8014dda:	f8da 3000 	ldr.w	r3, [sl]
 8014dde:	aa02      	add	r2, sp, #8
 8014de0:	4629      	mov	r1, r5
 8014de2:	e9cd 6000 	strd	r6, r0, [sp]
 8014de6:	4650      	mov	r0, sl
 8014de8:	68de      	ldr	r6, [r3, #12]
 8014dea:	4623      	mov	r3, r4
 8014dec:	47b0      	blx	r6
 8014dee:	e74c      	b.n	8014c8a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8014df0:	f10d 0818 	add.w	r8, sp, #24
 8014df4:	4639      	mov	r1, r7
 8014df6:	af04      	add	r7, sp, #16
 8014df8:	4640      	mov	r0, r8
 8014dfa:	f7fb ffdb 	bl	8010db4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8014dfe:	e898 0003 	ldmia.w	r8, {r0, r1}
 8014e02:	e887 0003 	stmia.w	r7, {r0, r1}
 8014e06:	4638      	mov	r0, r7
 8014e08:	4621      	mov	r1, r4
 8014e0a:	f7f7 f9e7 	bl	800c1dc <_ZN8touchgfx4RectaNERKS0_>
 8014e0e:	4638      	mov	r0, r7
 8014e10:	f7f7 fa27 	bl	800c262 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014e14:	b138      	cbz	r0, 8014e26 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 8014e16:	4623      	mov	r3, r4
 8014e18:	9600      	str	r6, [sp, #0]
 8014e1a:	aa02      	add	r2, sp, #8
 8014e1c:	4649      	mov	r1, r9
 8014e1e:	4628      	mov	r0, r5
 8014e20:	f7ff fdca 	bl	80149b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8014e24:	e731      	b.n	8014c8a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8014e26:	f8da 3000 	ldr.w	r3, [sl]
 8014e2a:	aa02      	add	r2, sp, #8
 8014e2c:	4629      	mov	r1, r5
 8014e2e:	e9cd 6000 	strd	r6, r0, [sp]
 8014e32:	4650      	mov	r0, sl
 8014e34:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8014e38:	463b      	mov	r3, r7
 8014e3a:	47d8      	blx	fp
 8014e3c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8014e40:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8014e44:	4293      	cmp	r3, r2
 8014e46:	dd13      	ble.n	8014e70 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 8014e48:	f9b4 0000 	ldrsh.w	r0, [r4]
 8014e4c:	1a9b      	subs	r3, r3, r2
 8014e4e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014e52:	f8ad 0018 	strh.w	r0, [sp, #24]
 8014e56:	4628      	mov	r0, r5
 8014e58:	f8ad 201a 	strh.w	r2, [sp, #26]
 8014e5c:	aa02      	add	r2, sp, #8
 8014e5e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8014e62:	4649      	mov	r1, r9
 8014e64:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014e68:	4643      	mov	r3, r8
 8014e6a:	9600      	str	r6, [sp, #0]
 8014e6c:	f7ff fda4 	bl	80149b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8014e70:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8014e74:	f9b4 2000 	ldrsh.w	r2, [r4]
 8014e78:	4293      	cmp	r3, r2
 8014e7a:	dd13      	ble.n	8014ea4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 8014e7c:	1a9b      	subs	r3, r3, r2
 8014e7e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8014e82:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8014e86:	f8ad 2018 	strh.w	r2, [sp, #24]
 8014e8a:	aa02      	add	r2, sp, #8
 8014e8c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8014e90:	4628      	mov	r0, r5
 8014e92:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014e96:	4643      	mov	r3, r8
 8014e98:	f8ad 101e 	strh.w	r1, [sp, #30]
 8014e9c:	4649      	mov	r1, r9
 8014e9e:	9600      	str	r6, [sp, #0]
 8014ea0:	f7ff fd8a 	bl	80149b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8014ea4:	88a2      	ldrh	r2, [r4, #4]
 8014ea6:	8823      	ldrh	r3, [r4, #0]
 8014ea8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8014eac:	4413      	add	r3, r2
 8014eae:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8014eb2:	440a      	add	r2, r1
 8014eb4:	b29b      	uxth	r3, r3
 8014eb6:	b292      	uxth	r2, r2
 8014eb8:	b218      	sxth	r0, r3
 8014eba:	b211      	sxth	r1, r2
 8014ebc:	4288      	cmp	r0, r1
 8014ebe:	dd13      	ble.n	8014ee8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 8014ec0:	1a9b      	subs	r3, r3, r2
 8014ec2:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8014ec6:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8014eca:	aa02      	add	r2, sp, #8
 8014ecc:	f8ad 1018 	strh.w	r1, [sp, #24]
 8014ed0:	4649      	mov	r1, r9
 8014ed2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014ed6:	4643      	mov	r3, r8
 8014ed8:	f8ad 001e 	strh.w	r0, [sp, #30]
 8014edc:	4628      	mov	r0, r5
 8014ede:	9600      	str	r6, [sp, #0]
 8014ee0:	f8ad 701a 	strh.w	r7, [sp, #26]
 8014ee4:	f7ff fd68 	bl	80149b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8014ee8:	88e2      	ldrh	r2, [r4, #6]
 8014eea:	8863      	ldrh	r3, [r4, #2]
 8014eec:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8014ef0:	4413      	add	r3, r2
 8014ef2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8014ef6:	440a      	add	r2, r1
 8014ef8:	b29b      	uxth	r3, r3
 8014efa:	b292      	uxth	r2, r2
 8014efc:	b218      	sxth	r0, r3
 8014efe:	b211      	sxth	r1, r2
 8014f00:	4288      	cmp	r0, r1
 8014f02:	f77f aec2 	ble.w	8014c8a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8014f06:	f9b4 7000 	ldrsh.w	r7, [r4]
 8014f0a:	1a9b      	subs	r3, r3, r2
 8014f0c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8014f10:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014f14:	4643      	mov	r3, r8
 8014f16:	f8ad 7018 	strh.w	r7, [sp, #24]
 8014f1a:	f8ad 101a 	strh.w	r1, [sp, #26]
 8014f1e:	f8ad 001c 	strh.w	r0, [sp, #28]
 8014f22:	9600      	str	r6, [sp, #0]
 8014f24:	e779      	b.n	8014e1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 8014f26:	bf00      	nop
 8014f28:	20024418 	.word	0x20024418

08014f2c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8014f2c:	b180      	cbz	r0, 8014f50 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8014f2e:	2903      	cmp	r1, #3
 8014f30:	d81c      	bhi.n	8014f6c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8014f32:	e8df f001 	tbb	[pc, r1]
 8014f36:	1d02      	.short	0x1d02
 8014f38:	1f08      	.short	0x1f08
 8014f3a:	4b10      	ldr	r3, [pc, #64]	; (8014f7c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8014f3c:	8818      	ldrh	r0, [r3, #0]
 8014f3e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8014f42:	4240      	negs	r0, r0
 8014f44:	4770      	bx	lr
 8014f46:	4b0d      	ldr	r3, [pc, #52]	; (8014f7c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8014f48:	8818      	ldrh	r0, [r3, #0]
 8014f4a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8014f4e:	4770      	bx	lr
 8014f50:	2903      	cmp	r1, #3
 8014f52:	d80b      	bhi.n	8014f6c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8014f54:	a301      	add	r3, pc, #4	; (adr r3, 8014f5c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8014f56:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8014f5a:	bf00      	nop
 8014f5c:	08014f71 	.word	0x08014f71
 8014f60:	08014f47 	.word	0x08014f47
 8014f64:	08014f75 	.word	0x08014f75
 8014f68:	08014f3b 	.word	0x08014f3b
 8014f6c:	2000      	movs	r0, #0
 8014f6e:	4770      	bx	lr
 8014f70:	2001      	movs	r0, #1
 8014f72:	4770      	bx	lr
 8014f74:	f04f 30ff 	mov.w	r0, #4294967295
 8014f78:	4770      	bx	lr
 8014f7a:	bf00      	nop
 8014f7c:	20024412 	.word	0x20024412

08014f80 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8014f80:	b180      	cbz	r0, 8014fa4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8014f82:	2903      	cmp	r1, #3
 8014f84:	d81c      	bhi.n	8014fc0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8014f86:	e8df f001 	tbb	[pc, r1]
 8014f8a:	021d      	.short	0x021d
 8014f8c:	071f      	.short	0x071f
 8014f8e:	4b10      	ldr	r3, [pc, #64]	; (8014fd0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8014f90:	8818      	ldrh	r0, [r3, #0]
 8014f92:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8014f96:	4770      	bx	lr
 8014f98:	4b0d      	ldr	r3, [pc, #52]	; (8014fd0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8014f9a:	8818      	ldrh	r0, [r3, #0]
 8014f9c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8014fa0:	4240      	negs	r0, r0
 8014fa2:	4770      	bx	lr
 8014fa4:	2903      	cmp	r1, #3
 8014fa6:	d80b      	bhi.n	8014fc0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8014fa8:	a301      	add	r3, pc, #4	; (adr r3, 8014fb0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8014faa:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8014fae:	bf00      	nop
 8014fb0:	08014f8f 	.word	0x08014f8f
 8014fb4:	08014fc9 	.word	0x08014fc9
 8014fb8:	08014f99 	.word	0x08014f99
 8014fbc:	08014fc5 	.word	0x08014fc5
 8014fc0:	2000      	movs	r0, #0
 8014fc2:	4770      	bx	lr
 8014fc4:	2001      	movs	r0, #1
 8014fc6:	4770      	bx	lr
 8014fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8014fcc:	4770      	bx	lr
 8014fce:	bf00      	nop
 8014fd0:	20024412 	.word	0x20024412

08014fd4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8014fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fd8:	b099      	sub	sp, #100	; 0x64
 8014fda:	910b      	str	r1, [sp, #44]	; 0x2c
 8014fdc:	a914      	add	r1, sp, #80	; 0x50
 8014fde:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 8014fe2:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 8014fe6:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 8014fea:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8014fee:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8014ff2:	e881 000c 	stmia.w	r1, {r2, r3}
 8014ff6:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8014ffa:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8014ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8015000:	f891 900d 	ldrb.w	r9, [r1, #13]
 8015004:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8015008:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801500c:	9310      	str	r3, [sp, #64]	; 0x40
 801500e:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8015012:	930c      	str	r3, [sp, #48]	; 0x30
 8015014:	f407 7380 	and.w	r3, r7, #256	; 0x100
 8015018:	798f      	ldrb	r7, [r1, #6]
 801501a:	431f      	orrs	r7, r3
 801501c:	f000 8195 	beq.w	801534a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8015020:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8015024:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8015028:	f891 9007 	ldrb.w	r9, [r1, #7]
 801502c:	ea59 0903 	orrs.w	r9, r9, r3
 8015030:	f000 818b 	beq.w	801534a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8015034:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8015038:	b29b      	uxth	r3, r3
 801503a:	2d00      	cmp	r5, #0
 801503c:	f000 812e 	beq.w	801529c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 8015040:	1aed      	subs	r5, r5, r3
 8015042:	b2ad      	uxth	r5, r5
 8015044:	042b      	lsls	r3, r5, #16
 8015046:	d502      	bpl.n	801504e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8015048:	1b64      	subs	r4, r4, r5
 801504a:	2500      	movs	r5, #0
 801504c:	b224      	sxth	r4, r4
 801504e:	f9b2 1000 	ldrsh.w	r1, [r2]
 8015052:	a814      	add	r0, sp, #80	; 0x50
 8015054:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8015058:	428c      	cmp	r4, r1
 801505a:	b28b      	uxth	r3, r1
 801505c:	bfbf      	itttt	lt
 801505e:	18ed      	addlt	r5, r5, r3
 8015060:	1b2c      	sublt	r4, r5, r4
 8015062:	b2a5      	uxthlt	r5, r4
 8015064:	460c      	movlt	r4, r1
 8015066:	8891      	ldrh	r1, [r2, #4]
 8015068:	440b      	add	r3, r1
 801506a:	4621      	mov	r1, r4
 801506c:	b21b      	sxth	r3, r3
 801506e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015070:	88d3      	ldrh	r3, [r2, #6]
 8015072:	8852      	ldrh	r2, [r2, #2]
 8015074:	4413      	add	r3, r2
 8015076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015078:	b21b      	sxth	r3, r3
 801507a:	930d      	str	r3, [sp, #52]	; 0x34
 801507c:	4bbd      	ldr	r3, [pc, #756]	; (8015374 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801507e:	f893 b000 	ldrb.w	fp, [r3]
 8015082:	f10b 3cff 	add.w	ip, fp, #4294967295
 8015086:	f1dc 0300 	rsbs	r3, ip, #0
 801508a:	eb43 030c 	adc.w	r3, r3, ip
 801508e:	930e      	str	r3, [sp, #56]	; 0x38
 8015090:	4653      	mov	r3, sl
 8015092:	f7f8 fed5 	bl	800de40 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8015096:	4621      	mov	r1, r4
 8015098:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801509c:	4653      	mov	r3, sl
 801509e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80150a0:	a814      	add	r0, sp, #80	; 0x50
 80150a2:	f7f8 feea 	bl	800de7a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80150a6:	a918      	add	r1, sp, #96	; 0x60
 80150a8:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80150ac:	a817      	add	r0, sp, #92	; 0x5c
 80150ae:	f7f9 f80b 	bl	800e0c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80150b2:	f1ba 0f00 	cmp.w	sl, #0
 80150b6:	f040 80f4 	bne.w	80152a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 80150ba:	f1bb 0f01 	cmp.w	fp, #1
 80150be:	f040 80f8 	bne.w	80152b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 80150c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	f040 8145 	bne.w	8015354 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 80150ca:	b2ba      	uxth	r2, r7
 80150cc:	b905      	cbnz	r5, 80150d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 80150ce:	b16e      	cbz	r6, 80150ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 80150d0:	fb06 5302 	mla	r3, r6, r2, r5
 80150d4:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80150d6:	4631      	mov	r1, r6
 80150d8:	fb08 f303 	mul.w	r3, r8, r3
 80150dc:	f003 0607 	and.w	r6, r3, #7
 80150e0:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 80150e4:	9328      	str	r3, [sp, #160]	; 0xa0
 80150e6:	eba9 0301 	sub.w	r3, r9, r1
 80150ea:	930a      	str	r3, [sp, #40]	; 0x28
 80150ec:	4651      	mov	r1, sl
 80150ee:	980e      	ldr	r0, [sp, #56]	; 0x38
 80150f0:	f7ff ff1c 	bl	8014f2c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 80150f4:	4681      	mov	r9, r0
 80150f6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80150f8:	f7ff ff42 	bl	8014f80 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 80150fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80150fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015100:	4683      	mov	fp, r0
 8015102:	eba3 0a01 	sub.w	sl, r3, r1
 8015106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015108:	459a      	cmp	sl, r3
 801510a:	bfa8      	it	ge
 801510c:	469a      	movge	sl, r3
 801510e:	f1ba 0f00 	cmp.w	sl, #0
 8015112:	f340 811a 	ble.w	801534a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8015116:	1b64      	subs	r4, r4, r5
 8015118:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801511a:	1b1c      	subs	r4, r3, r4
 801511c:	42bc      	cmp	r4, r7
 801511e:	bfd4      	ite	le
 8015120:	ebc5 0504 	rsble	r5, r5, r4
 8015124:	ebc5 0507 	rsbgt	r5, r5, r7
 8015128:	2d00      	cmp	r5, #0
 801512a:	f340 810e 	ble.w	801534a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801512e:	1b52      	subs	r2, r2, r5
 8015130:	fb08 f302 	mul.w	r3, r8, r2
 8015134:	930f      	str	r3, [sp, #60]	; 0x3c
 8015136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015138:	2b00      	cmp	r3, #0
 801513a:	f040 8116 	bne.w	801536a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801513e:	4b8e      	ldr	r3, [pc, #568]	; (8015378 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8015140:	6818      	ldr	r0, [r3, #0]
 8015142:	6803      	ldr	r3, [r0, #0]
 8015144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015146:	4798      	blx	r3
 8015148:	2301      	movs	r3, #1
 801514a:	4a8c      	ldr	r2, [pc, #560]	; (801537c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801514c:	fa03 f308 	lsl.w	r3, r3, r8
 8015150:	8811      	ldrh	r1, [r2, #0]
 8015152:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8015156:	3b01      	subs	r3, #1
 8015158:	b2db      	uxtb	r3, r3
 801515a:	930e      	str	r3, [sp, #56]	; 0x38
 801515c:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8015160:	fb01 2303 	mla	r3, r1, r3, r2
 8015164:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015168:	930a      	str	r3, [sp, #40]	; 0x28
 801516a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801516c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8015170:	9313      	str	r3, [sp, #76]	; 0x4c
 8015172:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015174:	0a19      	lsrs	r1, r3, #8
 8015176:	b2cb      	uxtb	r3, r1
 8015178:	9312      	str	r3, [sp, #72]	; 0x48
 801517a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801517c:	b2db      	uxtb	r3, r3
 801517e:	9311      	str	r3, [sp, #68]	; 0x44
 8015180:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015182:	095a      	lsrs	r2, r3, #5
 8015184:	4b7e      	ldr	r3, [pc, #504]	; (8015380 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8015186:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801518a:	400b      	ands	r3, r1
 801518c:	4313      	orrs	r3, r2
 801518e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8015190:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8015194:	4313      	orrs	r3, r2
 8015196:	b29b      	uxth	r3, r3
 8015198:	9310      	str	r3, [sp, #64]	; 0x40
 801519a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801519c:	781a      	ldrb	r2, [r3, #0]
 801519e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80151a2:	fb05 b919 	mls	r9, r5, r9, fp
 80151a6:	4132      	asrs	r2, r6
 80151a8:	fb03 fb05 	mul.w	fp, r3, r5
 80151ac:	930d      	str	r3, [sp, #52]	; 0x34
 80151ae:	b2d2      	uxtb	r2, r2
 80151b0:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 80151b4:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80151b8:	f0c0 80f5 	bcc.w	80153a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 80151bc:	46ae      	mov	lr, r5
 80151be:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80151c2:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80151c6:	f0c0 80dd 	bcc.w	8015384 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 80151ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80151cc:	4013      	ands	r3, r2
 80151ce:	d055      	beq.n	801527c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 80151d0:	20ff      	movs	r0, #255	; 0xff
 80151d2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80151d4:	fb90 f1f1 	sdiv	r1, r0, r1
 80151d8:	434b      	muls	r3, r1
 80151da:	2bfe      	cmp	r3, #254	; 0xfe
 80151dc:	dd03      	ble.n	80151e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 80151de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80151e0:	4281      	cmp	r1, r0
 80151e2:	f000 80c4 	beq.w	801536e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 80151e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80151e8:	f8bc 4000 	ldrh.w	r4, [ip]
 80151ec:	fb11 f303 	smulbb	r3, r1, r3
 80151f0:	1220      	asrs	r0, r4, #8
 80151f2:	b29b      	uxth	r3, r3
 80151f4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80151f8:	1c59      	adds	r1, r3, #1
 80151fa:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80151fe:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8015202:	10e1      	asrs	r1, r4, #3
 8015204:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015208:	00e4      	lsls	r4, r4, #3
 801520a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801520e:	b29f      	uxth	r7, r3
 8015210:	43db      	mvns	r3, r3
 8015212:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8015216:	b2db      	uxtb	r3, r3
 8015218:	b2e4      	uxtb	r4, r4
 801521a:	9309      	str	r3, [sp, #36]	; 0x24
 801521c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801521e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8015222:	fb13 f907 	smulbb	r9, r3, r7
 8015226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015228:	fb00 9003 	mla	r0, r0, r3, r9
 801522c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801522e:	fb13 f907 	smulbb	r9, r3, r7
 8015232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015234:	b280      	uxth	r0, r0
 8015236:	fb01 9103 	mla	r1, r1, r3, r9
 801523a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801523c:	fb13 f707 	smulbb	r7, r3, r7
 8015240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015242:	b289      	uxth	r1, r1
 8015244:	fb04 7403 	mla	r4, r4, r3, r7
 8015248:	1c43      	adds	r3, r0, #1
 801524a:	b2a4      	uxth	r4, r4
 801524c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8015250:	f104 0901 	add.w	r9, r4, #1
 8015254:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8015258:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801525c:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8015260:	ea49 0000 	orr.w	r0, r9, r0
 8015264:	f101 0901 	add.w	r9, r1, #1
 8015268:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801526c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8015270:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8015274:	ea40 0009 	orr.w	r0, r0, r9
 8015278:	f8ac 0000 	strh.w	r0, [ip]
 801527c:	4446      	add	r6, r8
 801527e:	b2b6      	uxth	r6, r6
 8015280:	2e07      	cmp	r6, #7
 8015282:	bf89      	itett	hi
 8015284:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8015286:	fa42 f208 	asrls.w	r2, r2, r8
 801528a:	2600      	movhi	r6, #0
 801528c:	785a      	ldrbhi	r2, [r3, #1]
 801528e:	bf8a      	itet	hi
 8015290:	3301      	addhi	r3, #1
 8015292:	b2d2      	uxtbls	r2, r2
 8015294:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8015296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015298:	449c      	add	ip, r3
 801529a:	e792      	b.n	80151c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801529c:	441c      	add	r4, r3
 801529e:	b224      	sxth	r4, r4
 80152a0:	e6d5      	b.n	801504e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 80152a2:	f1ba 0f01 	cmp.w	sl, #1
 80152a6:	f47f af0c 	bne.w	80150c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80152aa:	f1bb 0f01 	cmp.w	fp, #1
 80152ae:	f47f af08 	bne.w	80150c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80152b2:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8015378 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 80152b6:	f8db 0000 	ldr.w	r0, [fp]
 80152ba:	6803      	ldr	r3, [r0, #0]
 80152bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80152be:	4798      	blx	r3
 80152c0:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80152c4:	465a      	mov	r2, fp
 80152c6:	d006      	beq.n	80152d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 80152c8:	f1b8 0f04 	cmp.w	r8, #4
 80152cc:	d140      	bne.n	8015350 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 80152ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80152d0:	3300      	adds	r3, #0
 80152d2:	bf18      	it	ne
 80152d4:	2301      	movne	r3, #1
 80152d6:	0580      	lsls	r0, r0, #22
 80152d8:	d56e      	bpl.n	80153b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 80152da:	f1b8 0f08 	cmp.w	r8, #8
 80152de:	d16b      	bne.n	80153b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	bf0c      	ite	eq
 80152e4:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80152e8:	f44f 7180 	movne.w	r1, #256	; 0x100
 80152ec:	2d00      	cmp	r5, #0
 80152ee:	f47f aee8 	bne.w	80150c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80152f2:	2e00      	cmp	r6, #0
 80152f4:	f47f aee5 	bne.w	80150c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80152f8:	19e3      	adds	r3, r4, r7
 80152fa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80152fc:	4283      	cmp	r3, r0
 80152fe:	f73f aee0 	bgt.w	80150c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8015302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015304:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015306:	444b      	add	r3, r9
 8015308:	4283      	cmp	r3, r0
 801530a:	f73f aeda 	bgt.w	80150c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801530e:	b2bf      	uxth	r7, r7
 8015310:	f1b8 0f08 	cmp.w	r8, #8
 8015314:	6810      	ldr	r0, [r2, #0]
 8015316:	f04f 0500 	mov.w	r5, #0
 801531a:	bf18      	it	ne
 801531c:	3701      	addne	r7, #1
 801531e:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8015322:	6804      	ldr	r4, [r0, #0]
 8015324:	bf18      	it	ne
 8015326:	f027 0701 	bicne.w	r7, r7, #1
 801532a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801532e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8015332:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015334:	bf18      	it	ne
 8015336:	b2bf      	uxthne	r7, r7
 8015338:	9104      	str	r1, [sp, #16]
 801533a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801533c:	e9cd 7900 	strd	r7, r9, [sp]
 8015340:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8015344:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8015346:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8015348:	47a0      	blx	r4
 801534a:	b019      	add	sp, #100	; 0x64
 801534c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015350:	2300      	movs	r3, #0
 8015352:	e7c0      	b.n	80152d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8015354:	2208      	movs	r2, #8
 8015356:	fb92 f3f8 	sdiv	r3, r2, r8
 801535a:	1e5a      	subs	r2, r3, #1
 801535c:	443a      	add	r2, r7
 801535e:	fb92 f2f3 	sdiv	r2, r2, r3
 8015362:	fb12 f203 	smulbb	r2, r2, r3
 8015366:	b292      	uxth	r2, r2
 8015368:	e6b0      	b.n	80150cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801536a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801536c:	e6ec      	b.n	8015148 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801536e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015370:	e782      	b.n	8015278 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 8015372:	bf00      	nop
 8015374:	20024410 	.word	0x20024410
 8015378:	20024418 	.word	0x20024418
 801537c:	20024412 	.word	0x20024412
 8015380:	00fff800 	.word	0x00fff800
 8015384:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015386:	b153      	cbz	r3, 801539e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8015388:	441e      	add	r6, r3
 801538a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801538c:	b2b6      	uxth	r6, r6
 801538e:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 8015392:	f006 0607 	and.w	r6, r6, #7
 8015396:	781a      	ldrb	r2, [r3, #0]
 8015398:	9328      	str	r3, [sp, #160]	; 0xa0
 801539a:	4132      	asrs	r2, r6
 801539c:	b2d2      	uxtb	r2, r2
 801539e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153a0:	445b      	add	r3, fp
 80153a2:	930a      	str	r3, [sp, #40]	; 0x28
 80153a4:	e706      	b.n	80151b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 80153a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d1ce      	bne.n	801534a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80153ac:	4b05      	ldr	r3, [pc, #20]	; (80153c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 80153ae:	6818      	ldr	r0, [r3, #0]
 80153b0:	6803      	ldr	r3, [r0, #0]
 80153b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153b4:	4798      	blx	r3
 80153b6:	e7c8      	b.n	801534a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	f43f ae82 	beq.w	80150c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80153be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80153c2:	e793      	b.n	80152ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 80153c4:	20024418 	.word	0x20024418

080153c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 80153c8:	b538      	push	{r3, r4, r5, lr}
 80153ca:	4c15      	ldr	r4, [pc, #84]	; (8015420 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 80153cc:	4605      	mov	r5, r0
 80153ce:	7823      	ldrb	r3, [r4, #0]
 80153d0:	f3bf 8f5b 	dmb	ish
 80153d4:	07da      	lsls	r2, r3, #31
 80153d6:	d40b      	bmi.n	80153f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80153d8:	4620      	mov	r0, r4
 80153da:	f007 fa87 	bl	801c8ec <__cxa_guard_acquire>
 80153de:	b138      	cbz	r0, 80153f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80153e0:	4620      	mov	r0, r4
 80153e2:	f007 fa8f 	bl	801c904 <__cxa_guard_release>
 80153e6:	4a0f      	ldr	r2, [pc, #60]	; (8015424 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80153e8:	490f      	ldr	r1, [pc, #60]	; (8015428 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80153ea:	4810      	ldr	r0, [pc, #64]	; (801542c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80153ec:	f007 fa77 	bl	801c8de <__aeabi_atexit>
 80153f0:	4c0f      	ldr	r4, [pc, #60]	; (8015430 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 80153f2:	7823      	ldrb	r3, [r4, #0]
 80153f4:	f3bf 8f5b 	dmb	ish
 80153f8:	07db      	lsls	r3, r3, #31
 80153fa:	d40b      	bmi.n	8015414 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80153fc:	4620      	mov	r0, r4
 80153fe:	f007 fa75 	bl	801c8ec <__cxa_guard_acquire>
 8015402:	b138      	cbz	r0, 8015414 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8015404:	4620      	mov	r0, r4
 8015406:	f007 fa7d 	bl	801c904 <__cxa_guard_release>
 801540a:	4a06      	ldr	r2, [pc, #24]	; (8015424 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801540c:	4909      	ldr	r1, [pc, #36]	; (8015434 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801540e:	480a      	ldr	r0, [pc, #40]	; (8015438 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8015410:	f007 fa65 	bl	801c8de <__aeabi_atexit>
 8015414:	4b05      	ldr	r3, [pc, #20]	; (801542c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8015416:	612b      	str	r3, [r5, #16]
 8015418:	4b07      	ldr	r3, [pc, #28]	; (8015438 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801541a:	616b      	str	r3, [r5, #20]
 801541c:	bd38      	pop	{r3, r4, r5, pc}
 801541e:	bf00      	nop
 8015420:	200244e4 	.word	0x200244e4
 8015424:	20000000 	.word	0x20000000
 8015428:	080135d5 	.word	0x080135d5
 801542c:	200000b4 	.word	0x200000b4
 8015430:	200244e8 	.word	0x200244e8
 8015434:	080135d3 	.word	0x080135d3
 8015438:	200000b8 	.word	0x200000b8

0801543c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801543c:	b538      	push	{r3, r4, r5, lr}
 801543e:	4c15      	ldr	r4, [pc, #84]	; (8015494 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8015440:	4605      	mov	r5, r0
 8015442:	7823      	ldrb	r3, [r4, #0]
 8015444:	f3bf 8f5b 	dmb	ish
 8015448:	07da      	lsls	r2, r3, #31
 801544a:	d40b      	bmi.n	8015464 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801544c:	4620      	mov	r0, r4
 801544e:	f007 fa4d 	bl	801c8ec <__cxa_guard_acquire>
 8015452:	b138      	cbz	r0, 8015464 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8015454:	4620      	mov	r0, r4
 8015456:	f007 fa55 	bl	801c904 <__cxa_guard_release>
 801545a:	4a0f      	ldr	r2, [pc, #60]	; (8015498 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801545c:	490f      	ldr	r1, [pc, #60]	; (801549c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801545e:	4810      	ldr	r0, [pc, #64]	; (80154a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8015460:	f007 fa3d 	bl	801c8de <__aeabi_atexit>
 8015464:	4c0f      	ldr	r4, [pc, #60]	; (80154a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8015466:	7823      	ldrb	r3, [r4, #0]
 8015468:	f3bf 8f5b 	dmb	ish
 801546c:	07db      	lsls	r3, r3, #31
 801546e:	d40b      	bmi.n	8015488 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8015470:	4620      	mov	r0, r4
 8015472:	f007 fa3b 	bl	801c8ec <__cxa_guard_acquire>
 8015476:	b138      	cbz	r0, 8015488 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8015478:	4620      	mov	r0, r4
 801547a:	f007 fa43 	bl	801c904 <__cxa_guard_release>
 801547e:	4a06      	ldr	r2, [pc, #24]	; (8015498 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8015480:	4909      	ldr	r1, [pc, #36]	; (80154a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8015482:	480a      	ldr	r0, [pc, #40]	; (80154ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8015484:	f007 fa2b 	bl	801c8de <__aeabi_atexit>
 8015488:	4b05      	ldr	r3, [pc, #20]	; (80154a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801548a:	60ab      	str	r3, [r5, #8]
 801548c:	4b07      	ldr	r3, [pc, #28]	; (80154ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801548e:	60eb      	str	r3, [r5, #12]
 8015490:	bd38      	pop	{r3, r4, r5, pc}
 8015492:	bf00      	nop
 8015494:	200244bc 	.word	0x200244bc
 8015498:	20000000 	.word	0x20000000
 801549c:	080135d9 	.word	0x080135d9
 80154a0:	2000008c 	.word	0x2000008c
 80154a4:	200244c0 	.word	0x200244c0
 80154a8:	080135d7 	.word	0x080135d7
 80154ac:	20000090 	.word	0x20000090

080154b0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 80154b0:	b510      	push	{r4, lr}
 80154b2:	4604      	mov	r4, r0
 80154b4:	f7ff ff88 	bl	80153c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 80154b8:	4620      	mov	r0, r4
 80154ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80154be:	f7ff bfbd 	b.w	801543c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

080154c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80154c4:	b538      	push	{r3, r4, r5, lr}
 80154c6:	4c15      	ldr	r4, [pc, #84]	; (801551c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80154c8:	4605      	mov	r5, r0
 80154ca:	7823      	ldrb	r3, [r4, #0]
 80154cc:	f3bf 8f5b 	dmb	ish
 80154d0:	07da      	lsls	r2, r3, #31
 80154d2:	d40b      	bmi.n	80154ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80154d4:	4620      	mov	r0, r4
 80154d6:	f007 fa09 	bl	801c8ec <__cxa_guard_acquire>
 80154da:	b138      	cbz	r0, 80154ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80154dc:	4620      	mov	r0, r4
 80154de:	f007 fa11 	bl	801c904 <__cxa_guard_release>
 80154e2:	4a0f      	ldr	r2, [pc, #60]	; (8015520 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80154e4:	490f      	ldr	r1, [pc, #60]	; (8015524 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80154e6:	4810      	ldr	r0, [pc, #64]	; (8015528 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80154e8:	f007 f9f9 	bl	801c8de <__aeabi_atexit>
 80154ec:	4c0f      	ldr	r4, [pc, #60]	; (801552c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80154ee:	7823      	ldrb	r3, [r4, #0]
 80154f0:	f3bf 8f5b 	dmb	ish
 80154f4:	07db      	lsls	r3, r3, #31
 80154f6:	d40b      	bmi.n	8015510 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80154f8:	4620      	mov	r0, r4
 80154fa:	f007 f9f7 	bl	801c8ec <__cxa_guard_acquire>
 80154fe:	b138      	cbz	r0, 8015510 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8015500:	4620      	mov	r0, r4
 8015502:	f007 f9ff 	bl	801c904 <__cxa_guard_release>
 8015506:	4a06      	ldr	r2, [pc, #24]	; (8015520 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8015508:	4909      	ldr	r1, [pc, #36]	; (8015530 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801550a:	480a      	ldr	r0, [pc, #40]	; (8015534 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801550c:	f007 f9e7 	bl	801c8de <__aeabi_atexit>
 8015510:	4b05      	ldr	r3, [pc, #20]	; (8015528 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8015512:	622b      	str	r3, [r5, #32]
 8015514:	4b07      	ldr	r3, [pc, #28]	; (8015534 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8015516:	626b      	str	r3, [r5, #36]	; 0x24
 8015518:	bd38      	pop	{r3, r4, r5, pc}
 801551a:	bf00      	nop
 801551c:	200244ec 	.word	0x200244ec
 8015520:	20000000 	.word	0x20000000
 8015524:	080135cd 	.word	0x080135cd
 8015528:	200000bc 	.word	0x200000bc
 801552c:	200244f0 	.word	0x200244f0
 8015530:	080135cb 	.word	0x080135cb
 8015534:	200000c0 	.word	0x200000c0

08015538 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8015538:	b538      	push	{r3, r4, r5, lr}
 801553a:	4c15      	ldr	r4, [pc, #84]	; (8015590 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801553c:	4605      	mov	r5, r0
 801553e:	7823      	ldrb	r3, [r4, #0]
 8015540:	f3bf 8f5b 	dmb	ish
 8015544:	07da      	lsls	r2, r3, #31
 8015546:	d40b      	bmi.n	8015560 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8015548:	4620      	mov	r0, r4
 801554a:	f007 f9cf 	bl	801c8ec <__cxa_guard_acquire>
 801554e:	b138      	cbz	r0, 8015560 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8015550:	4620      	mov	r0, r4
 8015552:	f007 f9d7 	bl	801c904 <__cxa_guard_release>
 8015556:	4a0f      	ldr	r2, [pc, #60]	; (8015594 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8015558:	490f      	ldr	r1, [pc, #60]	; (8015598 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801555a:	4810      	ldr	r0, [pc, #64]	; (801559c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801555c:	f007 f9bf 	bl	801c8de <__aeabi_atexit>
 8015560:	4c0f      	ldr	r4, [pc, #60]	; (80155a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8015562:	7823      	ldrb	r3, [r4, #0]
 8015564:	f3bf 8f5b 	dmb	ish
 8015568:	07db      	lsls	r3, r3, #31
 801556a:	d40b      	bmi.n	8015584 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801556c:	4620      	mov	r0, r4
 801556e:	f007 f9bd 	bl	801c8ec <__cxa_guard_acquire>
 8015572:	b138      	cbz	r0, 8015584 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8015574:	4620      	mov	r0, r4
 8015576:	f007 f9c5 	bl	801c904 <__cxa_guard_release>
 801557a:	4a06      	ldr	r2, [pc, #24]	; (8015594 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801557c:	4909      	ldr	r1, [pc, #36]	; (80155a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801557e:	480a      	ldr	r0, [pc, #40]	; (80155a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8015580:	f007 f9ad 	bl	801c8de <__aeabi_atexit>
 8015584:	4b05      	ldr	r3, [pc, #20]	; (801559c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8015586:	61ab      	str	r3, [r5, #24]
 8015588:	4b07      	ldr	r3, [pc, #28]	; (80155a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801558a:	61eb      	str	r3, [r5, #28]
 801558c:	bd38      	pop	{r3, r4, r5, pc}
 801558e:	bf00      	nop
 8015590:	200244c4 	.word	0x200244c4
 8015594:	20000000 	.word	0x20000000
 8015598:	080135d1 	.word	0x080135d1
 801559c:	20000094 	.word	0x20000094
 80155a0:	200244c8 	.word	0x200244c8
 80155a4:	080135cf 	.word	0x080135cf
 80155a8:	20000098 	.word	0x20000098

080155ac <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 80155ac:	b510      	push	{r4, lr}
 80155ae:	4604      	mov	r4, r0
 80155b0:	f7ff ff88 	bl	80154c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80155b4:	4620      	mov	r0, r4
 80155b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80155ba:	f7ff bfbd 	b.w	8015538 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080155c0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80155c0:	b538      	push	{r3, r4, r5, lr}
 80155c2:	4c15      	ldr	r4, [pc, #84]	; (8015618 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80155c4:	4605      	mov	r5, r0
 80155c6:	7823      	ldrb	r3, [r4, #0]
 80155c8:	f3bf 8f5b 	dmb	ish
 80155cc:	07da      	lsls	r2, r3, #31
 80155ce:	d40b      	bmi.n	80155e8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80155d0:	4620      	mov	r0, r4
 80155d2:	f007 f98b 	bl	801c8ec <__cxa_guard_acquire>
 80155d6:	b138      	cbz	r0, 80155e8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80155d8:	4620      	mov	r0, r4
 80155da:	f007 f993 	bl	801c904 <__cxa_guard_release>
 80155de:	4a0f      	ldr	r2, [pc, #60]	; (801561c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80155e0:	490f      	ldr	r1, [pc, #60]	; (8015620 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80155e2:	4810      	ldr	r0, [pc, #64]	; (8015624 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80155e4:	f007 f97b 	bl	801c8de <__aeabi_atexit>
 80155e8:	4c0f      	ldr	r4, [pc, #60]	; (8015628 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80155ea:	7823      	ldrb	r3, [r4, #0]
 80155ec:	f3bf 8f5b 	dmb	ish
 80155f0:	07db      	lsls	r3, r3, #31
 80155f2:	d40b      	bmi.n	801560c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80155f4:	4620      	mov	r0, r4
 80155f6:	f007 f979 	bl	801c8ec <__cxa_guard_acquire>
 80155fa:	b138      	cbz	r0, 801560c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80155fc:	4620      	mov	r0, r4
 80155fe:	f007 f981 	bl	801c904 <__cxa_guard_release>
 8015602:	4a06      	ldr	r2, [pc, #24]	; (801561c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8015604:	4909      	ldr	r1, [pc, #36]	; (801562c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8015606:	480a      	ldr	r0, [pc, #40]	; (8015630 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8015608:	f007 f969 	bl	801c8de <__aeabi_atexit>
 801560c:	4b05      	ldr	r3, [pc, #20]	; (8015624 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801560e:	632b      	str	r3, [r5, #48]	; 0x30
 8015610:	4b07      	ldr	r3, [pc, #28]	; (8015630 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8015612:	636b      	str	r3, [r5, #52]	; 0x34
 8015614:	bd38      	pop	{r3, r4, r5, pc}
 8015616:	bf00      	nop
 8015618:	200244fc 	.word	0x200244fc
 801561c:	20000000 	.word	0x20000000
 8015620:	080135c5 	.word	0x080135c5
 8015624:	200000cc 	.word	0x200000cc
 8015628:	20024500 	.word	0x20024500
 801562c:	080135c3 	.word	0x080135c3
 8015630:	200000d0 	.word	0x200000d0

08015634 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8015634:	b538      	push	{r3, r4, r5, lr}
 8015636:	4c15      	ldr	r4, [pc, #84]	; (801568c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8015638:	4605      	mov	r5, r0
 801563a:	7823      	ldrb	r3, [r4, #0]
 801563c:	f3bf 8f5b 	dmb	ish
 8015640:	07da      	lsls	r2, r3, #31
 8015642:	d40b      	bmi.n	801565c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8015644:	4620      	mov	r0, r4
 8015646:	f007 f951 	bl	801c8ec <__cxa_guard_acquire>
 801564a:	b138      	cbz	r0, 801565c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801564c:	4620      	mov	r0, r4
 801564e:	f007 f959 	bl	801c904 <__cxa_guard_release>
 8015652:	4a0f      	ldr	r2, [pc, #60]	; (8015690 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8015654:	490f      	ldr	r1, [pc, #60]	; (8015694 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8015656:	4810      	ldr	r0, [pc, #64]	; (8015698 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8015658:	f007 f941 	bl	801c8de <__aeabi_atexit>
 801565c:	4c0f      	ldr	r4, [pc, #60]	; (801569c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801565e:	7823      	ldrb	r3, [r4, #0]
 8015660:	f3bf 8f5b 	dmb	ish
 8015664:	07db      	lsls	r3, r3, #31
 8015666:	d40b      	bmi.n	8015680 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8015668:	4620      	mov	r0, r4
 801566a:	f007 f93f 	bl	801c8ec <__cxa_guard_acquire>
 801566e:	b138      	cbz	r0, 8015680 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8015670:	4620      	mov	r0, r4
 8015672:	f007 f947 	bl	801c904 <__cxa_guard_release>
 8015676:	4a06      	ldr	r2, [pc, #24]	; (8015690 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8015678:	4909      	ldr	r1, [pc, #36]	; (80156a0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801567a:	480a      	ldr	r0, [pc, #40]	; (80156a4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801567c:	f007 f92f 	bl	801c8de <__aeabi_atexit>
 8015680:	4b05      	ldr	r3, [pc, #20]	; (8015698 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8015682:	62ab      	str	r3, [r5, #40]	; 0x28
 8015684:	4b07      	ldr	r3, [pc, #28]	; (80156a4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8015686:	62eb      	str	r3, [r5, #44]	; 0x2c
 8015688:	bd38      	pop	{r3, r4, r5, pc}
 801568a:	bf00      	nop
 801568c:	200244cc 	.word	0x200244cc
 8015690:	20000000 	.word	0x20000000
 8015694:	080135c9 	.word	0x080135c9
 8015698:	2000009c 	.word	0x2000009c
 801569c:	200244d0 	.word	0x200244d0
 80156a0:	080135c7 	.word	0x080135c7
 80156a4:	200000a0 	.word	0x200000a0

080156a8 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 80156a8:	b510      	push	{r4, lr}
 80156aa:	4604      	mov	r4, r0
 80156ac:	f7ff ff88 	bl	80155c0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80156b0:	4620      	mov	r0, r4
 80156b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80156b6:	f7ff bfbd 	b.w	8015634 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080156bc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 80156bc:	b538      	push	{r3, r4, r5, lr}
 80156be:	4c15      	ldr	r4, [pc, #84]	; (8015714 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 80156c0:	4605      	mov	r5, r0
 80156c2:	7823      	ldrb	r3, [r4, #0]
 80156c4:	f3bf 8f5b 	dmb	ish
 80156c8:	07da      	lsls	r2, r3, #31
 80156ca:	d40b      	bmi.n	80156e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80156cc:	4620      	mov	r0, r4
 80156ce:	f007 f90d 	bl	801c8ec <__cxa_guard_acquire>
 80156d2:	b138      	cbz	r0, 80156e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80156d4:	4620      	mov	r0, r4
 80156d6:	f007 f915 	bl	801c904 <__cxa_guard_release>
 80156da:	4a0f      	ldr	r2, [pc, #60]	; (8015718 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80156dc:	490f      	ldr	r1, [pc, #60]	; (801571c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 80156de:	4810      	ldr	r0, [pc, #64]	; (8015720 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80156e0:	f007 f8fd 	bl	801c8de <__aeabi_atexit>
 80156e4:	4c0f      	ldr	r4, [pc, #60]	; (8015724 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 80156e6:	7823      	ldrb	r3, [r4, #0]
 80156e8:	f3bf 8f5b 	dmb	ish
 80156ec:	07db      	lsls	r3, r3, #31
 80156ee:	d40b      	bmi.n	8015708 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80156f0:	4620      	mov	r0, r4
 80156f2:	f007 f8fb 	bl	801c8ec <__cxa_guard_acquire>
 80156f6:	b138      	cbz	r0, 8015708 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80156f8:	4620      	mov	r0, r4
 80156fa:	f007 f903 	bl	801c904 <__cxa_guard_release>
 80156fe:	4a06      	ldr	r2, [pc, #24]	; (8015718 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8015700:	4909      	ldr	r1, [pc, #36]	; (8015728 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8015702:	480a      	ldr	r0, [pc, #40]	; (801572c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8015704:	f007 f8eb 	bl	801c8de <__aeabi_atexit>
 8015708:	4b05      	ldr	r3, [pc, #20]	; (8015720 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801570a:	652b      	str	r3, [r5, #80]	; 0x50
 801570c:	4b07      	ldr	r3, [pc, #28]	; (801572c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801570e:	656b      	str	r3, [r5, #84]	; 0x54
 8015710:	bd38      	pop	{r3, r4, r5, pc}
 8015712:	bf00      	nop
 8015714:	20024504 	.word	0x20024504
 8015718:	20000000 	.word	0x20000000
 801571c:	080135b5 	.word	0x080135b5
 8015720:	200000d4 	.word	0x200000d4
 8015724:	20024508 	.word	0x20024508
 8015728:	080135b3 	.word	0x080135b3
 801572c:	200000d8 	.word	0x200000d8

08015730 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8015730:	b538      	push	{r3, r4, r5, lr}
 8015732:	4c15      	ldr	r4, [pc, #84]	; (8015788 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8015734:	4605      	mov	r5, r0
 8015736:	7823      	ldrb	r3, [r4, #0]
 8015738:	f3bf 8f5b 	dmb	ish
 801573c:	07da      	lsls	r2, r3, #31
 801573e:	d40b      	bmi.n	8015758 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8015740:	4620      	mov	r0, r4
 8015742:	f007 f8d3 	bl	801c8ec <__cxa_guard_acquire>
 8015746:	b138      	cbz	r0, 8015758 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8015748:	4620      	mov	r0, r4
 801574a:	f007 f8db 	bl	801c904 <__cxa_guard_release>
 801574e:	4a0f      	ldr	r2, [pc, #60]	; (801578c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8015750:	490f      	ldr	r1, [pc, #60]	; (8015790 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8015752:	4810      	ldr	r0, [pc, #64]	; (8015794 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8015754:	f007 f8c3 	bl	801c8de <__aeabi_atexit>
 8015758:	4c0f      	ldr	r4, [pc, #60]	; (8015798 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801575a:	7823      	ldrb	r3, [r4, #0]
 801575c:	f3bf 8f5b 	dmb	ish
 8015760:	07db      	lsls	r3, r3, #31
 8015762:	d40b      	bmi.n	801577c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8015764:	4620      	mov	r0, r4
 8015766:	f007 f8c1 	bl	801c8ec <__cxa_guard_acquire>
 801576a:	b138      	cbz	r0, 801577c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801576c:	4620      	mov	r0, r4
 801576e:	f007 f8c9 	bl	801c904 <__cxa_guard_release>
 8015772:	4a06      	ldr	r2, [pc, #24]	; (801578c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8015774:	4909      	ldr	r1, [pc, #36]	; (801579c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8015776:	480a      	ldr	r0, [pc, #40]	; (80157a0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8015778:	f007 f8b1 	bl	801c8de <__aeabi_atexit>
 801577c:	4b05      	ldr	r3, [pc, #20]	; (8015794 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801577e:	64ab      	str	r3, [r5, #72]	; 0x48
 8015780:	4b07      	ldr	r3, [pc, #28]	; (80157a0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8015782:	64eb      	str	r3, [r5, #76]	; 0x4c
 8015784:	bd38      	pop	{r3, r4, r5, pc}
 8015786:	bf00      	nop
 8015788:	2002450c 	.word	0x2002450c
 801578c:	20000000 	.word	0x20000000
 8015790:	080135b9 	.word	0x080135b9
 8015794:	200000dc 	.word	0x200000dc
 8015798:	20024510 	.word	0x20024510
 801579c:	080135b7 	.word	0x080135b7
 80157a0:	200000e0 	.word	0x200000e0

080157a4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 80157a4:	b538      	push	{r3, r4, r5, lr}
 80157a6:	4c15      	ldr	r4, [pc, #84]	; (80157fc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 80157a8:	4605      	mov	r5, r0
 80157aa:	7823      	ldrb	r3, [r4, #0]
 80157ac:	f3bf 8f5b 	dmb	ish
 80157b0:	07da      	lsls	r2, r3, #31
 80157b2:	d40b      	bmi.n	80157cc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 80157b4:	4620      	mov	r0, r4
 80157b6:	f007 f899 	bl	801c8ec <__cxa_guard_acquire>
 80157ba:	b138      	cbz	r0, 80157cc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 80157bc:	4620      	mov	r0, r4
 80157be:	f007 f8a1 	bl	801c904 <__cxa_guard_release>
 80157c2:	4a0f      	ldr	r2, [pc, #60]	; (8015800 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80157c4:	490f      	ldr	r1, [pc, #60]	; (8015804 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 80157c6:	4810      	ldr	r0, [pc, #64]	; (8015808 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80157c8:	f007 f889 	bl	801c8de <__aeabi_atexit>
 80157cc:	4c0f      	ldr	r4, [pc, #60]	; (801580c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 80157ce:	7823      	ldrb	r3, [r4, #0]
 80157d0:	f3bf 8f5b 	dmb	ish
 80157d4:	07db      	lsls	r3, r3, #31
 80157d6:	d40b      	bmi.n	80157f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80157d8:	4620      	mov	r0, r4
 80157da:	f007 f887 	bl	801c8ec <__cxa_guard_acquire>
 80157de:	b138      	cbz	r0, 80157f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80157e0:	4620      	mov	r0, r4
 80157e2:	f007 f88f 	bl	801c904 <__cxa_guard_release>
 80157e6:	4a06      	ldr	r2, [pc, #24]	; (8015800 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80157e8:	4909      	ldr	r1, [pc, #36]	; (8015810 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 80157ea:	480a      	ldr	r0, [pc, #40]	; (8015814 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80157ec:	f007 f877 	bl	801c8de <__aeabi_atexit>
 80157f0:	4b05      	ldr	r3, [pc, #20]	; (8015808 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80157f2:	642b      	str	r3, [r5, #64]	; 0x40
 80157f4:	4b07      	ldr	r3, [pc, #28]	; (8015814 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80157f6:	646b      	str	r3, [r5, #68]	; 0x44
 80157f8:	bd38      	pop	{r3, r4, r5, pc}
 80157fa:	bf00      	nop
 80157fc:	200244d4 	.word	0x200244d4
 8015800:	20000000 	.word	0x20000000
 8015804:	080135bd 	.word	0x080135bd
 8015808:	200000a4 	.word	0x200000a4
 801580c:	200244d8 	.word	0x200244d8
 8015810:	080135bb 	.word	0x080135bb
 8015814:	200000a8 	.word	0x200000a8

08015818 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8015818:	b538      	push	{r3, r4, r5, lr}
 801581a:	4c15      	ldr	r4, [pc, #84]	; (8015870 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801581c:	4605      	mov	r5, r0
 801581e:	7823      	ldrb	r3, [r4, #0]
 8015820:	f3bf 8f5b 	dmb	ish
 8015824:	07da      	lsls	r2, r3, #31
 8015826:	d40b      	bmi.n	8015840 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8015828:	4620      	mov	r0, r4
 801582a:	f007 f85f 	bl	801c8ec <__cxa_guard_acquire>
 801582e:	b138      	cbz	r0, 8015840 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8015830:	4620      	mov	r0, r4
 8015832:	f007 f867 	bl	801c904 <__cxa_guard_release>
 8015836:	4a0f      	ldr	r2, [pc, #60]	; (8015874 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8015838:	490f      	ldr	r1, [pc, #60]	; (8015878 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801583a:	4810      	ldr	r0, [pc, #64]	; (801587c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801583c:	f007 f84f 	bl	801c8de <__aeabi_atexit>
 8015840:	4c0f      	ldr	r4, [pc, #60]	; (8015880 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8015842:	7823      	ldrb	r3, [r4, #0]
 8015844:	f3bf 8f5b 	dmb	ish
 8015848:	07db      	lsls	r3, r3, #31
 801584a:	d40b      	bmi.n	8015864 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801584c:	4620      	mov	r0, r4
 801584e:	f007 f84d 	bl	801c8ec <__cxa_guard_acquire>
 8015852:	b138      	cbz	r0, 8015864 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8015854:	4620      	mov	r0, r4
 8015856:	f007 f855 	bl	801c904 <__cxa_guard_release>
 801585a:	4a06      	ldr	r2, [pc, #24]	; (8015874 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801585c:	4909      	ldr	r1, [pc, #36]	; (8015884 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801585e:	480a      	ldr	r0, [pc, #40]	; (8015888 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8015860:	f007 f83d 	bl	801c8de <__aeabi_atexit>
 8015864:	4b05      	ldr	r3, [pc, #20]	; (801587c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8015866:	63ab      	str	r3, [r5, #56]	; 0x38
 8015868:	4b07      	ldr	r3, [pc, #28]	; (8015888 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801586a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801586c:	bd38      	pop	{r3, r4, r5, pc}
 801586e:	bf00      	nop
 8015870:	200244f4 	.word	0x200244f4
 8015874:	20000000 	.word	0x20000000
 8015878:	080135c1 	.word	0x080135c1
 801587c:	200000c4 	.word	0x200000c4
 8015880:	200244f8 	.word	0x200244f8
 8015884:	080135bf 	.word	0x080135bf
 8015888:	200000c8 	.word	0x200000c8

0801588c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801588c:	b510      	push	{r4, lr}
 801588e:	4604      	mov	r4, r0
 8015890:	f7ff ff14 	bl	80156bc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8015894:	4620      	mov	r0, r4
 8015896:	f7ff ff85 	bl	80157a4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801589a:	4620      	mov	r0, r4
 801589c:	f7ff ff48 	bl	8015730 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 80158a0:	4620      	mov	r0, r4
 80158a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80158a6:	f7ff bfb7 	b.w	8015818 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

080158ac <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80158ac:	b538      	push	{r3, r4, r5, lr}
 80158ae:	4c15      	ldr	r4, [pc, #84]	; (8015904 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80158b0:	4605      	mov	r5, r0
 80158b2:	7823      	ldrb	r3, [r4, #0]
 80158b4:	f3bf 8f5b 	dmb	ish
 80158b8:	07da      	lsls	r2, r3, #31
 80158ba:	d40b      	bmi.n	80158d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80158bc:	4620      	mov	r0, r4
 80158be:	f007 f815 	bl	801c8ec <__cxa_guard_acquire>
 80158c2:	b138      	cbz	r0, 80158d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80158c4:	4620      	mov	r0, r4
 80158c6:	f007 f81d 	bl	801c904 <__cxa_guard_release>
 80158ca:	4a0f      	ldr	r2, [pc, #60]	; (8015908 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80158cc:	490f      	ldr	r1, [pc, #60]	; (801590c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80158ce:	4810      	ldr	r0, [pc, #64]	; (8015910 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80158d0:	f007 f805 	bl	801c8de <__aeabi_atexit>
 80158d4:	4c0f      	ldr	r4, [pc, #60]	; (8015914 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80158d6:	7823      	ldrb	r3, [r4, #0]
 80158d8:	f3bf 8f5b 	dmb	ish
 80158dc:	07db      	lsls	r3, r3, #31
 80158de:	d40b      	bmi.n	80158f8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80158e0:	4620      	mov	r0, r4
 80158e2:	f007 f803 	bl	801c8ec <__cxa_guard_acquire>
 80158e6:	b138      	cbz	r0, 80158f8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80158e8:	4620      	mov	r0, r4
 80158ea:	f007 f80b 	bl	801c904 <__cxa_guard_release>
 80158ee:	4a06      	ldr	r2, [pc, #24]	; (8015908 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80158f0:	4909      	ldr	r1, [pc, #36]	; (8015918 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 80158f2:	480a      	ldr	r0, [pc, #40]	; (801591c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80158f4:	f006 fff3 	bl	801c8de <__aeabi_atexit>
 80158f8:	4b05      	ldr	r3, [pc, #20]	; (8015910 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80158fa:	662b      	str	r3, [r5, #96]	; 0x60
 80158fc:	4b07      	ldr	r3, [pc, #28]	; (801591c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80158fe:	666b      	str	r3, [r5, #100]	; 0x64
 8015900:	bd38      	pop	{r3, r4, r5, pc}
 8015902:	bf00      	nop
 8015904:	200244dc 	.word	0x200244dc
 8015908:	20000000 	.word	0x20000000
 801590c:	080135ad 	.word	0x080135ad
 8015910:	200000ac 	.word	0x200000ac
 8015914:	200244e0 	.word	0x200244e0
 8015918:	080135ab 	.word	0x080135ab
 801591c:	200000b0 	.word	0x200000b0

08015920 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8015920:	b538      	push	{r3, r4, r5, lr}
 8015922:	4c15      	ldr	r4, [pc, #84]	; (8015978 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8015924:	4605      	mov	r5, r0
 8015926:	7823      	ldrb	r3, [r4, #0]
 8015928:	f3bf 8f5b 	dmb	ish
 801592c:	07da      	lsls	r2, r3, #31
 801592e:	d40b      	bmi.n	8015948 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8015930:	4620      	mov	r0, r4
 8015932:	f006 ffdb 	bl	801c8ec <__cxa_guard_acquire>
 8015936:	b138      	cbz	r0, 8015948 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8015938:	4620      	mov	r0, r4
 801593a:	f006 ffe3 	bl	801c904 <__cxa_guard_release>
 801593e:	4a0f      	ldr	r2, [pc, #60]	; (801597c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8015940:	490f      	ldr	r1, [pc, #60]	; (8015980 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8015942:	4810      	ldr	r0, [pc, #64]	; (8015984 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8015944:	f006 ffcb 	bl	801c8de <__aeabi_atexit>
 8015948:	4c0f      	ldr	r4, [pc, #60]	; (8015988 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801594a:	7823      	ldrb	r3, [r4, #0]
 801594c:	f3bf 8f5b 	dmb	ish
 8015950:	07db      	lsls	r3, r3, #31
 8015952:	d40b      	bmi.n	801596c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8015954:	4620      	mov	r0, r4
 8015956:	f006 ffc9 	bl	801c8ec <__cxa_guard_acquire>
 801595a:	b138      	cbz	r0, 801596c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801595c:	4620      	mov	r0, r4
 801595e:	f006 ffd1 	bl	801c904 <__cxa_guard_release>
 8015962:	4a06      	ldr	r2, [pc, #24]	; (801597c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8015964:	4909      	ldr	r1, [pc, #36]	; (801598c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8015966:	480a      	ldr	r0, [pc, #40]	; (8015990 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8015968:	f006 ffb9 	bl	801c8de <__aeabi_atexit>
 801596c:	4b05      	ldr	r3, [pc, #20]	; (8015984 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801596e:	65ab      	str	r3, [r5, #88]	; 0x58
 8015970:	4b07      	ldr	r3, [pc, #28]	; (8015990 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8015972:	65eb      	str	r3, [r5, #92]	; 0x5c
 8015974:	bd38      	pop	{r3, r4, r5, pc}
 8015976:	bf00      	nop
 8015978:	200244b4 	.word	0x200244b4
 801597c:	20000000 	.word	0x20000000
 8015980:	080135b1 	.word	0x080135b1
 8015984:	20000084 	.word	0x20000084
 8015988:	200244b8 	.word	0x200244b8
 801598c:	080135af 	.word	0x080135af
 8015990:	20000088 	.word	0x20000088

08015994 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8015994:	b510      	push	{r4, lr}
 8015996:	4604      	mov	r4, r0
 8015998:	f7ff ff88 	bl	80158ac <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801599c:	4620      	mov	r0, r4
 801599e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159a2:	f7ff bfbd 	b.w	8015920 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080159a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80159a8:	b538      	push	{r3, r4, r5, lr}
 80159aa:	4c15      	ldr	r4, [pc, #84]	; (8015a00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80159ac:	4605      	mov	r5, r0
 80159ae:	7823      	ldrb	r3, [r4, #0]
 80159b0:	f3bf 8f5b 	dmb	ish
 80159b4:	07da      	lsls	r2, r3, #31
 80159b6:	d40b      	bmi.n	80159d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80159b8:	4620      	mov	r0, r4
 80159ba:	f006 ff97 	bl	801c8ec <__cxa_guard_acquire>
 80159be:	b138      	cbz	r0, 80159d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80159c0:	4620      	mov	r0, r4
 80159c2:	f006 ff9f 	bl	801c904 <__cxa_guard_release>
 80159c6:	4a0f      	ldr	r2, [pc, #60]	; (8015a04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80159c8:	490f      	ldr	r1, [pc, #60]	; (8015a08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80159ca:	4810      	ldr	r0, [pc, #64]	; (8015a0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80159cc:	f006 ff87 	bl	801c8de <__aeabi_atexit>
 80159d0:	4c0f      	ldr	r4, [pc, #60]	; (8015a10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80159d2:	7823      	ldrb	r3, [r4, #0]
 80159d4:	f3bf 8f5b 	dmb	ish
 80159d8:	07db      	lsls	r3, r3, #31
 80159da:	d40b      	bmi.n	80159f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80159dc:	4620      	mov	r0, r4
 80159de:	f006 ff85 	bl	801c8ec <__cxa_guard_acquire>
 80159e2:	b138      	cbz	r0, 80159f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80159e4:	4620      	mov	r0, r4
 80159e6:	f006 ff8d 	bl	801c904 <__cxa_guard_release>
 80159ea:	4a06      	ldr	r2, [pc, #24]	; (8015a04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80159ec:	4909      	ldr	r1, [pc, #36]	; (8015a14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 80159ee:	480a      	ldr	r0, [pc, #40]	; (8015a18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80159f0:	f006 ff75 	bl	801c8de <__aeabi_atexit>
 80159f4:	4b05      	ldr	r3, [pc, #20]	; (8015a0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80159f6:	672b      	str	r3, [r5, #112]	; 0x70
 80159f8:	4b07      	ldr	r3, [pc, #28]	; (8015a18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80159fa:	676b      	str	r3, [r5, #116]	; 0x74
 80159fc:	bd38      	pop	{r3, r4, r5, pc}
 80159fe:	bf00      	nop
 8015a00:	200244ac 	.word	0x200244ac
 8015a04:	20000000 	.word	0x20000000
 8015a08:	080135a5 	.word	0x080135a5
 8015a0c:	2000007c 	.word	0x2000007c
 8015a10:	200244b0 	.word	0x200244b0
 8015a14:	080135a3 	.word	0x080135a3
 8015a18:	20000080 	.word	0x20000080

08015a1c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8015a1c:	b538      	push	{r3, r4, r5, lr}
 8015a1e:	4c15      	ldr	r4, [pc, #84]	; (8015a74 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8015a20:	4605      	mov	r5, r0
 8015a22:	7823      	ldrb	r3, [r4, #0]
 8015a24:	f3bf 8f5b 	dmb	ish
 8015a28:	07da      	lsls	r2, r3, #31
 8015a2a:	d40b      	bmi.n	8015a44 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8015a2c:	4620      	mov	r0, r4
 8015a2e:	f006 ff5d 	bl	801c8ec <__cxa_guard_acquire>
 8015a32:	b138      	cbz	r0, 8015a44 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8015a34:	4620      	mov	r0, r4
 8015a36:	f006 ff65 	bl	801c904 <__cxa_guard_release>
 8015a3a:	4a0f      	ldr	r2, [pc, #60]	; (8015a78 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8015a3c:	490f      	ldr	r1, [pc, #60]	; (8015a7c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8015a3e:	4810      	ldr	r0, [pc, #64]	; (8015a80 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8015a40:	f006 ff4d 	bl	801c8de <__aeabi_atexit>
 8015a44:	4c0f      	ldr	r4, [pc, #60]	; (8015a84 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8015a46:	7823      	ldrb	r3, [r4, #0]
 8015a48:	f3bf 8f5b 	dmb	ish
 8015a4c:	07db      	lsls	r3, r3, #31
 8015a4e:	d40b      	bmi.n	8015a68 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8015a50:	4620      	mov	r0, r4
 8015a52:	f006 ff4b 	bl	801c8ec <__cxa_guard_acquire>
 8015a56:	b138      	cbz	r0, 8015a68 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8015a58:	4620      	mov	r0, r4
 8015a5a:	f006 ff53 	bl	801c904 <__cxa_guard_release>
 8015a5e:	4a06      	ldr	r2, [pc, #24]	; (8015a78 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8015a60:	4909      	ldr	r1, [pc, #36]	; (8015a88 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8015a62:	480a      	ldr	r0, [pc, #40]	; (8015a8c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8015a64:	f006 ff3b 	bl	801c8de <__aeabi_atexit>
 8015a68:	4b05      	ldr	r3, [pc, #20]	; (8015a80 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8015a6a:	66ab      	str	r3, [r5, #104]	; 0x68
 8015a6c:	4b07      	ldr	r3, [pc, #28]	; (8015a8c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8015a6e:	66eb      	str	r3, [r5, #108]	; 0x6c
 8015a70:	bd38      	pop	{r3, r4, r5, pc}
 8015a72:	bf00      	nop
 8015a74:	200244a4 	.word	0x200244a4
 8015a78:	20000000 	.word	0x20000000
 8015a7c:	080135a9 	.word	0x080135a9
 8015a80:	20000074 	.word	0x20000074
 8015a84:	200244a8 	.word	0x200244a8
 8015a88:	080135a7 	.word	0x080135a7
 8015a8c:	20000078 	.word	0x20000078

08015a90 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8015a90:	b510      	push	{r4, lr}
 8015a92:	4604      	mov	r4, r0
 8015a94:	f7ff ff88 	bl	80159a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8015a98:	4620      	mov	r0, r4
 8015a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a9e:	f7ff bfbd 	b.w	8015a1c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08015aa2 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8015aa2:	b510      	push	{r4, lr}
 8015aa4:	4604      	mov	r4, r0
 8015aa6:	f7ff fff3 	bl	8015a90 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8015aaa:	4620      	mov	r0, r4
 8015aac:	f7ff ff72 	bl	8015994 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8015ab0:	4620      	mov	r0, r4
 8015ab2:	f7ff fdf9 	bl	80156a8 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8015ab6:	4620      	mov	r0, r4
 8015ab8:	f7ff fcfa 	bl	80154b0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8015abc:	4620      	mov	r0, r4
 8015abe:	f7ff fd75 	bl	80155ac <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8015ac2:	4620      	mov	r0, r4
 8015ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ac8:	f7ff bee0 	b.w	801588c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08015acc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8015acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ad0:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 8015ad4:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 8015ad8:	2d00      	cmp	r5, #0
 8015ada:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 8015ade:	fb05 4c0e 	mla	ip, r5, lr, r4
 8015ae2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8015ae6:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8015aea:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8015aee:	eb02 0a0c 	add.w	sl, r2, ip
 8015af2:	8808      	ldrh	r0, [r1, #0]
 8015af4:	f2c0 80b0 	blt.w	8015c58 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8015af8:	45ab      	cmp	fp, r5
 8015afa:	f340 80ad 	ble.w	8015c58 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8015afe:	2c00      	cmp	r4, #0
 8015b00:	f2c0 80a8 	blt.w	8015c54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8015b04:	45a6      	cmp	lr, r4
 8015b06:	f340 80a5 	ble.w	8015c54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8015b0a:	f812 200c 	ldrb.w	r2, [r2, ip]
 8015b0e:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8015b12:	1c62      	adds	r2, r4, #1
 8015b14:	f100 80a3 	bmi.w	8015c5e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8015b18:	4596      	cmp	lr, r2
 8015b1a:	f340 80a0 	ble.w	8015c5e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8015b1e:	f1b9 0f00 	cmp.w	r9, #0
 8015b22:	f000 809c 	beq.w	8015c5e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8015b26:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8015b2a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8015b2e:	3501      	adds	r5, #1
 8015b30:	f100 8099 	bmi.w	8015c66 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8015b34:	45ab      	cmp	fp, r5
 8015b36:	f340 8096 	ble.w	8015c66 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8015b3a:	2f00      	cmp	r7, #0
 8015b3c:	f000 8093 	beq.w	8015c66 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8015b40:	2c00      	cmp	r4, #0
 8015b42:	f2c0 808e 	blt.w	8015c62 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8015b46:	45a6      	cmp	lr, r4
 8015b48:	f340 808b 	ble.w	8015c62 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8015b4c:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8015b50:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8015b54:	3401      	adds	r4, #1
 8015b56:	f100 8089 	bmi.w	8015c6c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8015b5a:	45a6      	cmp	lr, r4
 8015b5c:	f340 8086 	ble.w	8015c6c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8015b60:	f1b9 0f00 	cmp.w	r9, #0
 8015b64:	f000 8082 	beq.w	8015c6c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8015b68:	44d6      	add	lr, sl
 8015b6a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8015b6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8015b72:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8015b76:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8015b7a:	fb19 fe07 	smulbb	lr, r9, r7
 8015b7e:	f1c7 0210 	rsb	r2, r7, #16
 8015b82:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8015b86:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8015b8a:	eba2 0209 	sub.w	r2, r2, r9
 8015b8e:	ea44 0808 	orr.w	r8, r4, r8
 8015b92:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8015b96:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8015b9a:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8015b9e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8015ba2:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8015ba6:	ea44 0c0c 	orr.w	ip, r4, ip
 8015baa:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8015bae:	fb04 f40c 	mul.w	r4, r4, ip
 8015bb2:	fb02 4808 	mla	r8, r2, r8, r4
 8015bb6:	041a      	lsls	r2, r3, #16
 8015bb8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8015bbc:	b2b4      	uxth	r4, r6
 8015bbe:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8015bc2:	43f6      	mvns	r6, r6
 8015bc4:	4313      	orrs	r3, r2
 8015bc6:	042a      	lsls	r2, r5, #16
 8015bc8:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8015bcc:	b2f6      	uxtb	r6, r6
 8015bce:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8015bd2:	fb0e 8303 	mla	r3, lr, r3, r8
 8015bd6:	432a      	orrs	r2, r5
 8015bd8:	fb07 3202 	mla	r2, r7, r2, r3
 8015bdc:	10c7      	asrs	r7, r0, #3
 8015bde:	0d53      	lsrs	r3, r2, #21
 8015be0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8015be4:	0952      	lsrs	r2, r2, #5
 8015be6:	fb17 f706 	smulbb	r7, r7, r6
 8015bea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8015bee:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8015bf2:	431a      	orrs	r2, r3
 8015bf4:	b293      	uxth	r3, r2
 8015bf6:	1202      	asrs	r2, r0, #8
 8015bf8:	121d      	asrs	r5, r3, #8
 8015bfa:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8015bfe:	00c0      	lsls	r0, r0, #3
 8015c00:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8015c04:	fb12 f206 	smulbb	r2, r2, r6
 8015c08:	b2c0      	uxtb	r0, r0
 8015c0a:	fb05 2504 	mla	r5, r5, r4, r2
 8015c0e:	10da      	asrs	r2, r3, #3
 8015c10:	fb10 f006 	smulbb	r0, r0, r6
 8015c14:	00db      	lsls	r3, r3, #3
 8015c16:	b2ad      	uxth	r5, r5
 8015c18:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8015c1c:	b2db      	uxtb	r3, r3
 8015c1e:	fb02 7204 	mla	r2, r2, r4, r7
 8015c22:	fb03 0004 	mla	r0, r3, r4, r0
 8015c26:	1c6b      	adds	r3, r5, #1
 8015c28:	b292      	uxth	r2, r2
 8015c2a:	b280      	uxth	r0, r0
 8015c2c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8015c30:	1c43      	adds	r3, r0, #1
 8015c32:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8015c36:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8015c3a:	1c50      	adds	r0, r2, #1
 8015c3c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8015c40:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8015c44:	0952      	lsrs	r2, r2, #5
 8015c46:	432b      	orrs	r3, r5
 8015c48:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8015c4c:	4313      	orrs	r3, r2
 8015c4e:	800b      	strh	r3, [r1, #0]
 8015c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c54:	4680      	mov	r8, r0
 8015c56:	e75c      	b.n	8015b12 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8015c58:	4684      	mov	ip, r0
 8015c5a:	4680      	mov	r8, r0
 8015c5c:	e767      	b.n	8015b2e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8015c5e:	4684      	mov	ip, r0
 8015c60:	e765      	b.n	8015b2e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8015c62:	4605      	mov	r5, r0
 8015c64:	e776      	b.n	8015b54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8015c66:	4603      	mov	r3, r0
 8015c68:	4605      	mov	r5, r0
 8015c6a:	e782      	b.n	8015b72 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	e780      	b.n	8015b72 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08015c70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c74:	b099      	sub	sp, #100	; 0x64
 8015c76:	9215      	str	r2, [sp, #84]	; 0x54
 8015c78:	9309      	str	r3, [sp, #36]	; 0x24
 8015c7a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8015c7c:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 8015c80:	9016      	str	r0, [sp, #88]	; 0x58
 8015c82:	930d      	str	r3, [sp, #52]	; 0x34
 8015c84:	6850      	ldr	r0, [r2, #4]
 8015c86:	910c      	str	r1, [sp, #48]	; 0x30
 8015c88:	6812      	ldr	r2, [r2, #0]
 8015c8a:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8015c8e:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 8015c92:	fb00 1303 	mla	r3, r0, r3, r1
 8015c96:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8015c9a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ca0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015ca2:	685e      	ldr	r6, [r3, #4]
 8015ca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ca6:	3604      	adds	r6, #4
 8015ca8:	43db      	mvns	r3, r3
 8015caa:	b2db      	uxtb	r3, r3
 8015cac:	930a      	str	r3, [sp, #40]	; 0x28
 8015cae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	dc03      	bgt.n	8015cbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8015cb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	f340 8225 	ble.w	8016106 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8015cbc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015cbe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015cc2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8015cc6:	1e48      	subs	r0, r1, #1
 8015cc8:	1e57      	subs	r7, r2, #1
 8015cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	f340 80e3 	ble.w	8015e98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8015cd2:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8015cd6:	ea4f 4325 	mov.w	r3, r5, asr #16
 8015cda:	d406      	bmi.n	8015cea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8015cdc:	4584      	cmp	ip, r0
 8015cde:	da04      	bge.n	8015cea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	db02      	blt.n	8015cea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8015ce4:	42bb      	cmp	r3, r7
 8015ce6:	f2c0 80d8 	blt.w	8015e9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8015cea:	f11c 0c01 	adds.w	ip, ip, #1
 8015cee:	f100 80c9 	bmi.w	8015e84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8015cf2:	4561      	cmp	r1, ip
 8015cf4:	f2c0 80c6 	blt.w	8015e84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8015cf8:	3301      	adds	r3, #1
 8015cfa:	f100 80c3 	bmi.w	8015e84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8015cfe:	429a      	cmp	r2, r3
 8015d00:	f2c0 80c0 	blt.w	8015e84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8015d04:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8015d08:	4647      	mov	r7, r8
 8015d0a:	f1bb 0f00 	cmp.w	fp, #0
 8015d0e:	f340 80e3 	ble.w	8015ed8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8015d12:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8015d14:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8015d18:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015d1a:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8015d1e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8015d22:	ea5f 422a 	movs.w	r2, sl, asr #16
 8015d26:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8015d2a:	689b      	ldr	r3, [r3, #8]
 8015d2c:	f100 8121 	bmi.w	8015f72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8015d30:	f103 39ff 	add.w	r9, r3, #4294967295
 8015d34:	454a      	cmp	r2, r9
 8015d36:	f280 811c 	bge.w	8015f72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8015d3a:	f1bc 0f00 	cmp.w	ip, #0
 8015d3e:	f2c0 8118 	blt.w	8015f72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8015d42:	f10e 39ff 	add.w	r9, lr, #4294967295
 8015d46:	45cc      	cmp	ip, r9
 8015d48:	f280 8113 	bge.w	8015f72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8015d4c:	b21b      	sxth	r3, r3
 8015d4e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015d50:	fb0c 2203 	mla	r2, ip, r3, r2
 8015d54:	eb04 0902 	add.w	r9, r4, r2
 8015d58:	5ca2      	ldrb	r2, [r4, r2]
 8015d5a:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8015d5e:	2800      	cmp	r0, #0
 8015d60:	f000 80fe 	beq.w	8015f60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8015d64:	f899 2001 	ldrb.w	r2, [r9, #1]
 8015d68:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8015d6c:	9211      	str	r2, [sp, #68]	; 0x44
 8015d6e:	b151      	cbz	r1, 8015d86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8015d70:	eb09 0203 	add.w	r2, r9, r3
 8015d74:	f819 3003 	ldrb.w	r3, [r9, r3]
 8015d78:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8015d7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8015d7e:	7853      	ldrb	r3, [r2, #1]
 8015d80:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8015d84:	9312      	str	r3, [sp, #72]	; 0x48
 8015d86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015d88:	fb10 f201 	smulbb	r2, r0, r1
 8015d8c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015d8e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8015d92:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8015d96:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8015d9a:	10d2      	asrs	r2, r2, #3
 8015d9c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8015da0:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8015da4:	ea4c 0c03 	orr.w	ip, ip, r3
 8015da8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015daa:	041b      	lsls	r3, r3, #16
 8015dac:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8015db0:	4323      	orrs	r3, r4
 8015db2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015db4:	4353      	muls	r3, r2
 8015db6:	fb09 330c 	mla	r3, r9, ip, r3
 8015dba:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8015dbe:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8015dc2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8015dc6:	ea4c 0e0e 	orr.w	lr, ip, lr
 8015dca:	f1c1 0c10 	rsb	ip, r1, #16
 8015dce:	ebac 0c00 	sub.w	ip, ip, r0
 8015dd2:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8015dd6:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8015dda:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8015dde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015de0:	0418      	lsls	r0, r3, #16
 8015de2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8015de6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8015dea:	4318      	orrs	r0, r3
 8015dec:	fb02 c200 	mla	r2, r2, r0, ip
 8015df0:	8838      	ldrh	r0, [r7, #0]
 8015df2:	0d53      	lsrs	r3, r2, #21
 8015df4:	0952      	lsrs	r2, r2, #5
 8015df6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8015dfa:	1201      	asrs	r1, r0, #8
 8015dfc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8015e00:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8015e04:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8015e08:	00c0      	lsls	r0, r0, #3
 8015e0a:	431a      	orrs	r2, r3
 8015e0c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8015e10:	fb11 f104 	smulbb	r1, r1, r4
 8015e14:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8015e18:	b292      	uxth	r2, r2
 8015e1a:	fb1e fe04 	smulbb	lr, lr, r4
 8015e1e:	b2c0      	uxtb	r0, r0
 8015e20:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8015e24:	fb10 f004 	smulbb	r0, r0, r4
 8015e28:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8015e2c:	fb0c 1c03 	mla	ip, ip, r3, r1
 8015e30:	10d1      	asrs	r1, r2, #3
 8015e32:	00d2      	lsls	r2, r2, #3
 8015e34:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8015e38:	fa1f fc8c 	uxth.w	ip, ip
 8015e3c:	b2d2      	uxtb	r2, r2
 8015e3e:	fb01 e103 	mla	r1, r1, r3, lr
 8015e42:	fb02 0303 	mla	r3, r2, r3, r0
 8015e46:	b289      	uxth	r1, r1
 8015e48:	b29a      	uxth	r2, r3
 8015e4a:	f10c 0301 	add.w	r3, ip, #1
 8015e4e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8015e52:	1c53      	adds	r3, r2, #1
 8015e54:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8015e58:	1c4a      	adds	r2, r1, #1
 8015e5a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8015e5e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8015e62:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8015e66:	0949      	lsrs	r1, r1, #5
 8015e68:	ea43 030c 	orr.w	r3, r3, ip
 8015e6c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8015e70:	430b      	orrs	r3, r1
 8015e72:	803b      	strh	r3, [r7, #0]
 8015e74:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015e76:	3702      	adds	r7, #2
 8015e78:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015e7c:	449a      	add	sl, r3
 8015e7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015e80:	441d      	add	r5, r3
 8015e82:	e742      	b.n	8015d0a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8015e84:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015e86:	f108 0802 	add.w	r8, r8, #2
 8015e8a:	449a      	add	sl, r3
 8015e8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015e8e:	441d      	add	r5, r3
 8015e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e92:	3b01      	subs	r3, #1
 8015e94:	9309      	str	r3, [sp, #36]	; 0x24
 8015e96:	e718      	b.n	8015cca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8015e98:	d023      	beq.n	8015ee2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8015e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e9c:	9825      	ldr	r0, [sp, #148]	; 0x94
 8015e9e:	3b01      	subs	r3, #1
 8015ea0:	fb00 a003 	mla	r0, r0, r3, sl
 8015ea4:	1400      	asrs	r0, r0, #16
 8015ea6:	f53f af2d 	bmi.w	8015d04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8015eaa:	3901      	subs	r1, #1
 8015eac:	4288      	cmp	r0, r1
 8015eae:	f6bf af29 	bge.w	8015d04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8015eb2:	9926      	ldr	r1, [sp, #152]	; 0x98
 8015eb4:	fb01 5303 	mla	r3, r1, r3, r5
 8015eb8:	141b      	asrs	r3, r3, #16
 8015eba:	f53f af23 	bmi.w	8015d04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8015ebe:	3a01      	subs	r2, #1
 8015ec0:	4293      	cmp	r3, r2
 8015ec2:	f6bf af1f 	bge.w	8015d04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8015ec6:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8015eca:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8015ece:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8015ed2:	f1be 0f00 	cmp.w	lr, #0
 8015ed6:	dc6c      	bgt.n	8015fb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8015ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015eda:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8015ede:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8015ee2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	f340 810e 	ble.w	8016106 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8015eea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015eee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015ef0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015ef4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015ef8:	eef0 6a62 	vmov.f32	s13, s5
 8015efc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015f00:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015f04:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015f08:	ee16 aa90 	vmov	sl, s13
 8015f0c:	eef0 6a43 	vmov.f32	s13, s6
 8015f10:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015f14:	ee16 5a90 	vmov	r5, s13
 8015f18:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015f1c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015f20:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015f24:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015f28:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015f2c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015f30:	ee12 2a90 	vmov	r2, s5
 8015f34:	eef0 2a47 	vmov.f32	s5, s14
 8015f38:	fb92 f3f3 	sdiv	r3, r2, r3
 8015f3c:	ee13 2a10 	vmov	r2, s6
 8015f40:	9325      	str	r3, [sp, #148]	; 0x94
 8015f42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015f44:	eeb0 3a67 	vmov.f32	s6, s15
 8015f48:	fb92 f3f3 	sdiv	r3, r2, r3
 8015f4c:	9326      	str	r3, [sp, #152]	; 0x98
 8015f4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f50:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015f52:	3b01      	subs	r3, #1
 8015f54:	930c      	str	r3, [sp, #48]	; 0x30
 8015f56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015f58:	bf08      	it	eq
 8015f5a:	4613      	moveq	r3, r2
 8015f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8015f5e:	e6a6      	b.n	8015cae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8015f60:	2900      	cmp	r1, #0
 8015f62:	f43f af10 	beq.w	8015d86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8015f66:	f819 3003 	ldrb.w	r3, [r9, r3]
 8015f6a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8015f6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015f70:	e709      	b.n	8015d86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8015f72:	f112 0901 	adds.w	r9, r2, #1
 8015f76:	f53f af7d 	bmi.w	8015e74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8015f7a:	454b      	cmp	r3, r9
 8015f7c:	f6ff af7a 	blt.w	8015e74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8015f80:	f11c 0901 	adds.w	r9, ip, #1
 8015f84:	f53f af76 	bmi.w	8015e74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8015f88:	45ce      	cmp	lr, r9
 8015f8a:	f6ff af73 	blt.w	8015e74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8015f8e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015f90:	b21b      	sxth	r3, r3
 8015f92:	9202      	str	r2, [sp, #8]
 8015f94:	fa0f f28e 	sxth.w	r2, lr
 8015f98:	9300      	str	r3, [sp, #0]
 8015f9a:	4633      	mov	r3, r6
 8015f9c:	9201      	str	r2, [sp, #4]
 8015f9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015fa0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8015fa4:	e9cd c003 	strd	ip, r0, [sp, #12]
 8015fa8:	4639      	mov	r1, r7
 8015faa:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015fac:	f7ff fd8e 	bl	8015acc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8015fb0:	e760      	b.n	8015e74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8015fb2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015fb4:	ea4f 422a 	mov.w	r2, sl, asr #16
 8015fb8:	1429      	asrs	r1, r5, #16
 8015fba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015fbc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8015fc0:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8015fc4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8015fc8:	fb03 2101 	mla	r1, r3, r1, r2
 8015fcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015fce:	440a      	add	r2, r1
 8015fd0:	5c61      	ldrb	r1, [r4, r1]
 8015fd2:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8015fd6:	f1bc 0f00 	cmp.w	ip, #0
 8015fda:	f000 808c 	beq.w	80160f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8015fde:	7857      	ldrb	r7, [r2, #1]
 8015fe0:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8015fe4:	9413      	str	r4, [sp, #76]	; 0x4c
 8015fe6:	b140      	cbz	r0, 8015ffa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8015fe8:	18d7      	adds	r7, r2, r3
 8015fea:	5cd3      	ldrb	r3, [r2, r3]
 8015fec:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8015ff0:	9310      	str	r3, [sp, #64]	; 0x40
 8015ff2:	787b      	ldrb	r3, [r7, #1]
 8015ff4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8015ff8:	9314      	str	r3, [sp, #80]	; 0x50
 8015ffa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015ffc:	fb1c f200 	smulbb	r2, ip, r0
 8016000:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016002:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016006:	041f      	lsls	r7, r3, #16
 8016008:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801600c:	10d2      	asrs	r2, r2, #3
 801600e:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 8016012:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8016016:	431f      	orrs	r7, r3
 8016018:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801601c:	9317      	str	r3, [sp, #92]	; 0x5c
 801601e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016020:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8016022:	041b      	lsls	r3, r3, #16
 8016024:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8016028:	ea43 030b 	orr.w	r3, r3, fp
 801602c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8016030:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8016034:	4353      	muls	r3, r2
 8016036:	fb04 3707 	mla	r7, r4, r7, r3
 801603a:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801603e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016040:	ea43 0b01 	orr.w	fp, r3, r1
 8016044:	f1c0 0110 	rsb	r1, r0, #16
 8016048:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801604a:	eba1 0c0c 	sub.w	ip, r1, ip
 801604e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8016052:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8016056:	fb0c 770b 	mla	r7, ip, fp, r7
 801605a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801605e:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8016062:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8016066:	ea4c 0c0b 	orr.w	ip, ip, fp
 801606a:	fb02 770c 	mla	r7, r2, ip, r7
 801606e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016070:	0d79      	lsrs	r1, r7, #21
 8016072:	8812      	ldrh	r2, [r2, #0]
 8016074:	097f      	lsrs	r7, r7, #5
 8016076:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801607a:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801607e:	430f      	orrs	r7, r1
 8016080:	1211      	asrs	r1, r2, #8
 8016082:	b2bb      	uxth	r3, r7
 8016084:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8016088:	10d7      	asrs	r7, r2, #3
 801608a:	fb11 f104 	smulbb	r1, r1, r4
 801608e:	1218      	asrs	r0, r3, #8
 8016090:	00d2      	lsls	r2, r2, #3
 8016092:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8016096:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801609a:	fb17 f704 	smulbb	r7, r7, r4
 801609e:	b2d2      	uxtb	r2, r2
 80160a0:	fb00 1009 	mla	r0, r0, r9, r1
 80160a4:	10d9      	asrs	r1, r3, #3
 80160a6:	fb12 f204 	smulbb	r2, r2, r4
 80160aa:	00db      	lsls	r3, r3, #3
 80160ac:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80160b0:	b280      	uxth	r0, r0
 80160b2:	b2db      	uxtb	r3, r3
 80160b4:	fb01 7109 	mla	r1, r1, r9, r7
 80160b8:	fb03 2309 	mla	r3, r3, r9, r2
 80160bc:	1c42      	adds	r2, r0, #1
 80160be:	b289      	uxth	r1, r1
 80160c0:	b29b      	uxth	r3, r3
 80160c2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80160c6:	1c4f      	adds	r7, r1, #1
 80160c8:	1c5a      	adds	r2, r3, #1
 80160ca:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80160ce:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80160d2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80160d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80160d8:	0949      	lsrs	r1, r1, #5
 80160da:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80160de:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80160e2:	4310      	orrs	r0, r2
 80160e4:	4308      	orrs	r0, r1
 80160e6:	f823 0b02 	strh.w	r0, [r3], #2
 80160ea:	930e      	str	r3, [sp, #56]	; 0x38
 80160ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80160ee:	449a      	add	sl, r3
 80160f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80160f2:	441d      	add	r5, r3
 80160f4:	e6ed      	b.n	8015ed2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 80160f6:	2800      	cmp	r0, #0
 80160f8:	f43f af7f 	beq.w	8015ffa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80160fc:	5cd3      	ldrb	r3, [r2, r3]
 80160fe:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8016102:	9310      	str	r3, [sp, #64]	; 0x40
 8016104:	e779      	b.n	8015ffa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8016106:	b019      	add	sp, #100	; 0x64
 8016108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801610c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801610c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016110:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 8016114:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8016118:	f1b8 0f00 	cmp.w	r8, #0
 801611c:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 8016120:	fb08 470e 	mla	r7, r8, lr, r4
 8016124:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8016128:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801612c:	eb02 0907 	add.w	r9, r2, r7
 8016130:	8808      	ldrh	r0, [r1, #0]
 8016132:	db67      	blt.n	8016204 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8016134:	45c2      	cmp	sl, r8
 8016136:	dd65      	ble.n	8016204 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8016138:	2c00      	cmp	r4, #0
 801613a:	db61      	blt.n	8016200 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801613c:	45a6      	cmp	lr, r4
 801613e:	dd5f      	ble.n	8016200 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8016140:	5dd2      	ldrb	r2, [r2, r7]
 8016142:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8016146:	1c62      	adds	r2, r4, #1
 8016148:	d45f      	bmi.n	801620a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801614a:	4596      	cmp	lr, r2
 801614c:	dd5d      	ble.n	801620a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801614e:	2d00      	cmp	r5, #0
 8016150:	d05b      	beq.n	801620a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8016152:	f899 2001 	ldrb.w	r2, [r9, #1]
 8016156:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801615a:	f118 0801 	adds.w	r8, r8, #1
 801615e:	d458      	bmi.n	8016212 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8016160:	45c2      	cmp	sl, r8
 8016162:	dd56      	ble.n	8016212 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8016164:	2e00      	cmp	r6, #0
 8016166:	d054      	beq.n	8016212 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8016168:	2c00      	cmp	r4, #0
 801616a:	db50      	blt.n	801620e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801616c:	45a6      	cmp	lr, r4
 801616e:	dd4e      	ble.n	801620e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8016170:	f819 200e 	ldrb.w	r2, [r9, lr]
 8016174:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8016178:	3401      	adds	r4, #1
 801617a:	d407      	bmi.n	801618c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801617c:	45a6      	cmp	lr, r4
 801617e:	dd05      	ble.n	801618c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8016180:	b125      	cbz	r5, 801618c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8016182:	44ce      	add	lr, r9
 8016184:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8016188:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801618c:	fb15 f406 	smulbb	r4, r5, r6
 8016190:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8016194:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8016198:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801619c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80161a0:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 80161a4:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80161a8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80161ac:	ea43 0c0c 	orr.w	ip, r3, ip
 80161b0:	f1c6 0310 	rsb	r3, r6, #16
 80161b4:	ea4e 0707 	orr.w	r7, lr, r7
 80161b8:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 80161bc:	1b5b      	subs	r3, r3, r5
 80161be:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 80161c2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80161c6:	437d      	muls	r5, r7
 80161c8:	fb03 5c0c 	mla	ip, r3, ip, r5
 80161cc:	0403      	lsls	r3, r0, #16
 80161ce:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80161d2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80161d6:	4318      	orrs	r0, r3
 80161d8:	0413      	lsls	r3, r2, #16
 80161da:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80161de:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80161e2:	fb04 c000 	mla	r0, r4, r0, ip
 80161e6:	4313      	orrs	r3, r2
 80161e8:	fb06 0003 	mla	r0, r6, r3, r0
 80161ec:	0d43      	lsrs	r3, r0, #21
 80161ee:	0940      	lsrs	r0, r0, #5
 80161f0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80161f4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80161f8:	4318      	orrs	r0, r3
 80161fa:	8008      	strh	r0, [r1, #0]
 80161fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016200:	4684      	mov	ip, r0
 8016202:	e7a0      	b.n	8016146 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 8016204:	4607      	mov	r7, r0
 8016206:	4684      	mov	ip, r0
 8016208:	e7a7      	b.n	801615a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801620a:	4607      	mov	r7, r0
 801620c:	e7a5      	b.n	801615a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801620e:	4602      	mov	r2, r0
 8016210:	e7b2      	b.n	8016178 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 8016212:	4602      	mov	r2, r0
 8016214:	e7ba      	b.n	801618c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

08016216 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016216:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801621a:	b093      	sub	sp, #76	; 0x4c
 801621c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016220:	920f      	str	r2, [sp, #60]	; 0x3c
 8016222:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016224:	9010      	str	r0, [sp, #64]	; 0x40
 8016226:	9108      	str	r1, [sp, #32]
 8016228:	6850      	ldr	r0, [r2, #4]
 801622a:	9306      	str	r3, [sp, #24]
 801622c:	6812      	ldr	r2, [r2, #0]
 801622e:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8016232:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8016236:	fb00 1303 	mla	r3, r0, r3, r1
 801623a:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801623e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	9307      	str	r3, [sp, #28]
 8016244:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016246:	685f      	ldr	r7, [r3, #4]
 8016248:	3704      	adds	r7, #4
 801624a:	9b08      	ldr	r3, [sp, #32]
 801624c:	2b00      	cmp	r3, #0
 801624e:	dc03      	bgt.n	8016258 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8016250:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016252:	2b00      	cmp	r3, #0
 8016254:	f340 81b2 	ble.w	80165bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8016258:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801625a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801625e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8016262:	1e48      	subs	r0, r1, #1
 8016264:	f102 3cff 	add.w	ip, r2, #4294967295
 8016268:	9b06      	ldr	r3, [sp, #24]
 801626a:	2b00      	cmp	r3, #0
 801626c:	f340 80a9 	ble.w	80163c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8016270:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8016274:	ea4f 4326 	mov.w	r3, r6, asr #16
 8016278:	d406      	bmi.n	8016288 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801627a:	4586      	cmp	lr, r0
 801627c:	da04      	bge.n	8016288 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801627e:	2b00      	cmp	r3, #0
 8016280:	db02      	blt.n	8016288 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8016282:	4563      	cmp	r3, ip
 8016284:	f2c0 809e 	blt.w	80163c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8016288:	f11e 0e01 	adds.w	lr, lr, #1
 801628c:	f100 808f 	bmi.w	80163ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8016290:	4571      	cmp	r1, lr
 8016292:	f2c0 808c 	blt.w	80163ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8016296:	3301      	adds	r3, #1
 8016298:	f100 8089 	bmi.w	80163ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801629c:	429a      	cmp	r2, r3
 801629e:	f2c0 8086 	blt.w	80163ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80162a2:	f8dd b018 	ldr.w	fp, [sp, #24]
 80162a6:	46c8      	mov	r8, r9
 80162a8:	f1bb 0f00 	cmp.w	fp, #0
 80162ac:	f340 80a6 	ble.w	80163fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80162b0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80162b2:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80162b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80162b8:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80162bc:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80162c0:	1422      	asrs	r2, r4, #16
 80162c2:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80162c6:	689b      	ldr	r3, [r3, #8]
 80162c8:	f100 80e3 	bmi.w	8016492 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80162cc:	f103 3aff 	add.w	sl, r3, #4294967295
 80162d0:	4552      	cmp	r2, sl
 80162d2:	f280 80de 	bge.w	8016492 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80162d6:	f1bc 0f00 	cmp.w	ip, #0
 80162da:	f2c0 80da 	blt.w	8016492 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80162de:	f10e 3aff 	add.w	sl, lr, #4294967295
 80162e2:	45d4      	cmp	ip, sl
 80162e4:	f280 80d5 	bge.w	8016492 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80162e8:	b21b      	sxth	r3, r3
 80162ea:	9d07      	ldr	r5, [sp, #28]
 80162ec:	fb0c 2203 	mla	r2, ip, r3, r2
 80162f0:	eb05 0a02 	add.w	sl, r5, r2
 80162f4:	5caa      	ldrb	r2, [r5, r2]
 80162f6:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 80162fa:	2800      	cmp	r0, #0
 80162fc:	f000 80c0 	beq.w	8016480 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8016300:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8016304:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8016308:	920b      	str	r2, [sp, #44]	; 0x2c
 801630a:	b151      	cbz	r1, 8016322 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801630c:	eb0a 0203 	add.w	r2, sl, r3
 8016310:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8016314:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8016318:	9309      	str	r3, [sp, #36]	; 0x24
 801631a:	7853      	ldrb	r3, [r2, #1]
 801631c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8016320:	930c      	str	r3, [sp, #48]	; 0x30
 8016322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016324:	fb10 f201 	smulbb	r2, r0, r1
 8016328:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801632a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801632e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8016332:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8016336:	10d2      	asrs	r2, r2, #3
 8016338:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801633c:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8016340:	ea4c 0c03 	orr.w	ip, ip, r3
 8016344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016346:	041b      	lsls	r3, r3, #16
 8016348:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801634c:	432b      	orrs	r3, r5
 801634e:	4353      	muls	r3, r2
 8016350:	fb0a 330c 	mla	r3, sl, ip, r3
 8016354:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8016358:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801635c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8016360:	ea4c 0e0e 	orr.w	lr, ip, lr
 8016364:	f1c1 0c10 	rsb	ip, r1, #16
 8016368:	ebac 0c00 	sub.w	ip, ip, r0
 801636c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8016370:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8016374:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8016378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801637a:	0418      	lsls	r0, r3, #16
 801637c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8016380:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8016384:	4318      	orrs	r0, r3
 8016386:	fb02 c200 	mla	r2, r2, r0, ip
 801638a:	0d53      	lsrs	r3, r2, #21
 801638c:	0952      	lsrs	r2, r2, #5
 801638e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8016392:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8016396:	431a      	orrs	r2, r3
 8016398:	f8a8 2000 	strh.w	r2, [r8]
 801639c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801639e:	f108 0802 	add.w	r8, r8, #2
 80163a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80163a6:	441c      	add	r4, r3
 80163a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80163aa:	441e      	add	r6, r3
 80163ac:	e77c      	b.n	80162a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80163ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80163b0:	f109 0902 	add.w	r9, r9, #2
 80163b4:	441c      	add	r4, r3
 80163b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80163b8:	441e      	add	r6, r3
 80163ba:	9b06      	ldr	r3, [sp, #24]
 80163bc:	3b01      	subs	r3, #1
 80163be:	9306      	str	r3, [sp, #24]
 80163c0:	e752      	b.n	8016268 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80163c2:	d020      	beq.n	8016406 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80163c4:	9b06      	ldr	r3, [sp, #24]
 80163c6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80163c8:	3b01      	subs	r3, #1
 80163ca:	fb00 4003 	mla	r0, r0, r3, r4
 80163ce:	1400      	asrs	r0, r0, #16
 80163d0:	f53f af67 	bmi.w	80162a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80163d4:	3901      	subs	r1, #1
 80163d6:	4288      	cmp	r0, r1
 80163d8:	f6bf af63 	bge.w	80162a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80163dc:	9920      	ldr	r1, [sp, #128]	; 0x80
 80163de:	fb01 6303 	mla	r3, r1, r3, r6
 80163e2:	141b      	asrs	r3, r3, #16
 80163e4:	f53f af5d 	bmi.w	80162a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80163e8:	3a01      	subs	r2, #1
 80163ea:	4293      	cmp	r3, r2
 80163ec:	f6bf af59 	bge.w	80162a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80163f0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80163f4:	46ca      	mov	sl, r9
 80163f6:	f1b8 0f00 	cmp.w	r8, #0
 80163fa:	dc67      	bgt.n	80164cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80163fc:	9b06      	ldr	r3, [sp, #24]
 80163fe:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8016402:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8016406:	9b08      	ldr	r3, [sp, #32]
 8016408:	2b00      	cmp	r3, #0
 801640a:	f340 80d7 	ble.w	80165bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801640e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016412:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016414:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016418:	eeb0 6a62 	vmov.f32	s12, s5
 801641c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016420:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016424:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016428:	ee16 4a10 	vmov	r4, s12
 801642c:	eeb0 6a43 	vmov.f32	s12, s6
 8016430:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016434:	ee16 6a10 	vmov	r6, s12
 8016438:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801643c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016440:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016444:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016448:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801644c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016450:	ee12 2a90 	vmov	r2, s5
 8016454:	eef0 2a47 	vmov.f32	s5, s14
 8016458:	fb92 f3f3 	sdiv	r3, r2, r3
 801645c:	ee13 2a10 	vmov	r2, s6
 8016460:	931f      	str	r3, [sp, #124]	; 0x7c
 8016462:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016464:	eeb0 3a67 	vmov.f32	s6, s15
 8016468:	fb92 f3f3 	sdiv	r3, r2, r3
 801646c:	9320      	str	r3, [sp, #128]	; 0x80
 801646e:	9b08      	ldr	r3, [sp, #32]
 8016470:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016472:	3b01      	subs	r3, #1
 8016474:	9308      	str	r3, [sp, #32]
 8016476:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016478:	bf08      	it	eq
 801647a:	4613      	moveq	r3, r2
 801647c:	9306      	str	r3, [sp, #24]
 801647e:	e6e4      	b.n	801624a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016480:	2900      	cmp	r1, #0
 8016482:	f43f af4e 	beq.w	8016322 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8016486:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801648a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801648e:	9309      	str	r3, [sp, #36]	; 0x24
 8016490:	e747      	b.n	8016322 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8016492:	f112 0a01 	adds.w	sl, r2, #1
 8016496:	d481      	bmi.n	801639c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8016498:	4553      	cmp	r3, sl
 801649a:	f6ff af7f 	blt.w	801639c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801649e:	f11c 0a01 	adds.w	sl, ip, #1
 80164a2:	f53f af7b 	bmi.w	801639c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80164a6:	45d6      	cmp	lr, sl
 80164a8:	f6ff af78 	blt.w	801639c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80164ac:	b21b      	sxth	r3, r3
 80164ae:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 80164b2:	fa0f f28e 	sxth.w	r2, lr
 80164b6:	9300      	str	r3, [sp, #0]
 80164b8:	463b      	mov	r3, r7
 80164ba:	9201      	str	r2, [sp, #4]
 80164bc:	9a07      	ldr	r2, [sp, #28]
 80164be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80164c2:	4641      	mov	r1, r8
 80164c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80164c6:	f7ff fe21 	bl	801610c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80164ca:	e767      	b.n	801639c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80164cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80164ce:	1422      	asrs	r2, r4, #16
 80164d0:	1431      	asrs	r1, r6, #16
 80164d2:	9d07      	ldr	r5, [sp, #28]
 80164d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80164d8:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80164dc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80164e0:	fb03 2101 	mla	r1, r3, r1, r2
 80164e4:	9a07      	ldr	r2, [sp, #28]
 80164e6:	440a      	add	r2, r1
 80164e8:	5c69      	ldrb	r1, [r5, r1]
 80164ea:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 80164ee:	f1be 0f00 	cmp.w	lr, #0
 80164f2:	d05c      	beq.n	80165ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 80164f4:	f892 c001 	ldrb.w	ip, [r2, #1]
 80164f8:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 80164fc:	950d      	str	r5, [sp, #52]	; 0x34
 80164fe:	b150      	cbz	r0, 8016516 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8016500:	eb02 0c03 	add.w	ip, r2, r3
 8016504:	5cd3      	ldrb	r3, [r2, r3]
 8016506:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801650a:	930a      	str	r3, [sp, #40]	; 0x28
 801650c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8016510:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8016514:	930e      	str	r3, [sp, #56]	; 0x38
 8016516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016518:	fb1e f200 	smulbb	r2, lr, r0
 801651c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801651e:	f108 38ff 	add.w	r8, r8, #4294967295
 8016522:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8016526:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801652a:	10d2      	asrs	r2, r2, #3
 801652c:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8016530:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8016534:	ea4c 0c03 	orr.w	ip, ip, r3
 8016538:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801653c:	9311      	str	r3, [sp, #68]	; 0x44
 801653e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016540:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8016542:	041b      	lsls	r3, r3, #16
 8016544:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8016548:	ea43 030b 	orr.w	r3, r3, fp
 801654c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8016550:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8016554:	4353      	muls	r3, r2
 8016556:	fb05 3c0c 	mla	ip, r5, ip, r3
 801655a:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801655e:	ea43 0b01 	orr.w	fp, r3, r1
 8016562:	f1c0 0110 	rsb	r1, r0, #16
 8016566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016568:	eba1 0e0e 	sub.w	lr, r1, lr
 801656c:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8016570:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8016574:	fb0e cc0b 	mla	ip, lr, fp, ip
 8016578:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801657c:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8016580:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8016584:	ea4b 0e0e 	orr.w	lr, fp, lr
 8016588:	fb02 cc0e 	mla	ip, r2, lr, ip
 801658c:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8016590:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8016594:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8016598:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801659c:	ea43 0c0c 	orr.w	ip, r3, ip
 80165a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80165a2:	441c      	add	r4, r3
 80165a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80165a6:	f82a cb02 	strh.w	ip, [sl], #2
 80165aa:	441e      	add	r6, r3
 80165ac:	e723      	b.n	80163f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80165ae:	2800      	cmp	r0, #0
 80165b0:	d0b1      	beq.n	8016516 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80165b2:	5cd3      	ldrb	r3, [r2, r3]
 80165b4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80165b8:	930a      	str	r3, [sp, #40]	; 0x28
 80165ba:	e7ac      	b.n	8016516 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80165bc:	b013      	add	sp, #76	; 0x4c
 80165be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080165c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 80165c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165c6:	880d      	ldrh	r5, [r1, #0]
 80165c8:	b087      	sub	sp, #28
 80165ca:	10ef      	asrs	r7, r5, #3
 80165cc:	9103      	str	r1, [sp, #12]
 80165ce:	ea4f 2a25 	mov.w	sl, r5, asr #8
 80165d2:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 80165d6:	00ed      	lsls	r5, r5, #3
 80165d8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80165dc:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 80165e0:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80165e4:	b2ed      	uxtb	r5, r5
 80165e6:	9701      	str	r7, [sp, #4]
 80165e8:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 80165ec:	9502      	str	r5, [sp, #8]
 80165ee:	9d01      	ldr	r5, [sp, #4]
 80165f0:	9902      	ldr	r1, [sp, #8]
 80165f2:	022d      	lsls	r5, r5, #8
 80165f4:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 80165f8:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 80165fc:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8016600:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8016604:	430d      	orrs	r5, r1
 8016606:	fb06 0709 	mla	r7, r6, r9, r0
 801660a:	2e00      	cmp	r6, #0
 801660c:	9505      	str	r5, [sp, #20]
 801660e:	eb02 0c07 	add.w	ip, r2, r7
 8016612:	f2c0 80b6 	blt.w	8016782 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8016616:	45b3      	cmp	fp, r6
 8016618:	f340 80b3 	ble.w	8016782 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801661c:	2800      	cmp	r0, #0
 801661e:	f2c0 80ae 	blt.w	801677e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8016622:	4581      	cmp	r9, r0
 8016624:	f340 80ab 	ble.w	801677e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8016628:	5dd7      	ldrb	r7, [r2, r7]
 801662a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801662e:	441f      	add	r7, r3
 8016630:	1c42      	adds	r2, r0, #1
 8016632:	f100 80a9 	bmi.w	8016788 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8016636:	4591      	cmp	r9, r2
 8016638:	f340 80a6 	ble.w	8016788 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801663c:	2c00      	cmp	r4, #0
 801663e:	f000 80a3 	beq.w	8016788 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8016642:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8016646:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801664a:	441d      	add	r5, r3
 801664c:	3601      	adds	r6, #1
 801664e:	f100 809f 	bmi.w	8016790 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8016652:	45b3      	cmp	fp, r6
 8016654:	f340 809c 	ble.w	8016790 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8016658:	f1be 0f00 	cmp.w	lr, #0
 801665c:	f000 8098 	beq.w	8016790 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8016660:	2800      	cmp	r0, #0
 8016662:	f2c0 8093 	blt.w	801678c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8016666:	4581      	cmp	r9, r0
 8016668:	f340 8090 	ble.w	801678c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801666c:	f81c 6009 	ldrb.w	r6, [ip, r9]
 8016670:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016674:	441e      	add	r6, r3
 8016676:	3001      	adds	r0, #1
 8016678:	f100 808d 	bmi.w	8016796 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801667c:	4581      	cmp	r9, r0
 801667e:	f340 808a 	ble.w	8016796 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8016682:	2c00      	cmp	r4, #0
 8016684:	f000 8087 	beq.w	8016796 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8016688:	44e1      	add	r9, ip
 801668a:	f899 2001 	ldrb.w	r2, [r9, #1]
 801668e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016692:	4413      	add	r3, r2
 8016694:	b2a4      	uxth	r4, r4
 8016696:	f897 c002 	ldrb.w	ip, [r7, #2]
 801669a:	fa1f fe8e 	uxth.w	lr, lr
 801669e:	9901      	ldr	r1, [sp, #4]
 80166a0:	fb04 fb0e 	mul.w	fp, r4, lr
 80166a4:	0124      	lsls	r4, r4, #4
 80166a6:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 80166aa:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 80166ae:	eba4 040b 	sub.w	r4, r4, fp
 80166b2:	fa1f f08e 	uxth.w	r0, lr
 80166b6:	b2a2      	uxth	r2, r4
 80166b8:	78ac      	ldrb	r4, [r5, #2]
 80166ba:	eba9 0900 	sub.w	r9, r9, r0
 80166be:	fa1f fe88 	uxth.w	lr, r8
 80166c2:	4354      	muls	r4, r2
 80166c4:	ea6f 0808 	mvn.w	r8, r8
 80166c8:	fa1f f989 	uxth.w	r9, r9
 80166cc:	fa5f f888 	uxtb.w	r8, r8
 80166d0:	fb09 440c 	mla	r4, r9, ip, r4
 80166d4:	f896 c002 	ldrb.w	ip, [r6, #2]
 80166d8:	fb1a fa08 	smulbb	sl, sl, r8
 80166dc:	fb00 440c 	mla	r4, r0, ip, r4
 80166e0:	f893 c002 	ldrb.w	ip, [r3, #2]
 80166e4:	fb0b 4c0c 	mla	ip, fp, ip, r4
 80166e8:	787c      	ldrb	r4, [r7, #1]
 80166ea:	783f      	ldrb	r7, [r7, #0]
 80166ec:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80166f0:	fb0c ac0e 	mla	ip, ip, lr, sl
 80166f4:	f895 a001 	ldrb.w	sl, [r5, #1]
 80166f8:	782d      	ldrb	r5, [r5, #0]
 80166fa:	fb02 fa0a 	mul.w	sl, r2, sl
 80166fe:	fa1f fc8c 	uxth.w	ip, ip
 8016702:	436a      	muls	r2, r5
 8016704:	7835      	ldrb	r5, [r6, #0]
 8016706:	fb09 aa04 	mla	sl, r9, r4, sl
 801670a:	7874      	ldrb	r4, [r6, #1]
 801670c:	fb09 2207 	mla	r2, r9, r7, r2
 8016710:	fb00 aa04 	mla	sl, r0, r4, sl
 8016714:	785c      	ldrb	r4, [r3, #1]
 8016716:	fb00 2005 	mla	r0, r0, r5, r2
 801671a:	781b      	ldrb	r3, [r3, #0]
 801671c:	fb0b a404 	mla	r4, fp, r4, sl
 8016720:	fb11 fa08 	smulbb	sl, r1, r8
 8016724:	fb0b 0b03 	mla	fp, fp, r3, r0
 8016728:	9b02      	ldr	r3, [sp, #8]
 801672a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801672e:	fb13 f808 	smulbb	r8, r3, r8
 8016732:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8016736:	fb04 a40e 	mla	r4, r4, lr, sl
 801673a:	f10c 0301 	add.w	r3, ip, #1
 801673e:	fb0b 8e0e 	mla	lr, fp, lr, r8
 8016742:	b2a4      	uxth	r4, r4
 8016744:	fa1f fe8e 	uxth.w	lr, lr
 8016748:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801674c:	f104 0a01 	add.w	sl, r4, #1
 8016750:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 8016754:	f10e 0c01 	add.w	ip, lr, #1
 8016758:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801675c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8016760:	0964      	lsrs	r4, r4, #5
 8016762:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8016766:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801676a:	ea4c 0c03 	orr.w	ip, ip, r3
 801676e:	9b03      	ldr	r3, [sp, #12]
 8016770:	ea4c 0c04 	orr.w	ip, ip, r4
 8016774:	f8a3 c000 	strh.w	ip, [r3]
 8016778:	b007      	add	sp, #28
 801677a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801677e:	af05      	add	r7, sp, #20
 8016780:	e756      	b.n	8016630 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 8016782:	ad05      	add	r5, sp, #20
 8016784:	462f      	mov	r7, r5
 8016786:	e761      	b.n	801664c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8016788:	ad05      	add	r5, sp, #20
 801678a:	e75f      	b.n	801664c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801678c:	ae05      	add	r6, sp, #20
 801678e:	e772      	b.n	8016676 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8016790:	ab05      	add	r3, sp, #20
 8016792:	461e      	mov	r6, r3
 8016794:	e77e      	b.n	8016694 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 8016796:	ab05      	add	r3, sp, #20
 8016798:	e77c      	b.n	8016694 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801679a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801679a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801679e:	b095      	sub	sp, #84	; 0x54
 80167a0:	9212      	str	r2, [sp, #72]	; 0x48
 80167a2:	9309      	str	r3, [sp, #36]	; 0x24
 80167a4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80167a6:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 80167aa:	9013      	str	r0, [sp, #76]	; 0x4c
 80167ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80167ae:	6850      	ldr	r0, [r2, #4]
 80167b0:	910e      	str	r1, [sp, #56]	; 0x38
 80167b2:	6812      	ldr	r2, [r2, #0]
 80167b4:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 80167b8:	fb00 1303 	mla	r3, r0, r3, r1
 80167bc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80167c0:	930a      	str	r3, [sp, #40]	; 0x28
 80167c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	930d      	str	r3, [sp, #52]	; 0x34
 80167c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80167ca:	685c      	ldr	r4, [r3, #4]
 80167cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80167ce:	3404      	adds	r4, #4
 80167d0:	43db      	mvns	r3, r3
 80167d2:	b2db      	uxtb	r3, r3
 80167d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80167d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80167d8:	2b00      	cmp	r3, #0
 80167da:	dc03      	bgt.n	80167e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80167dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80167de:	2b00      	cmp	r3, #0
 80167e0:	f340 8255 	ble.w	8016c8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 80167e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80167e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80167ea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80167ee:	1e48      	subs	r0, r1, #1
 80167f0:	1e55      	subs	r5, r2, #1
 80167f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	f340 80f9 	ble.w	80169ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80167fa:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80167fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80167fe:	1436      	asrs	r6, r6, #16
 8016800:	ea4f 4323 	mov.w	r3, r3, asr #16
 8016804:	d406      	bmi.n	8016814 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8016806:	4286      	cmp	r6, r0
 8016808:	da04      	bge.n	8016814 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801680a:	2b00      	cmp	r3, #0
 801680c:	db02      	blt.n	8016814 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801680e:	42ab      	cmp	r3, r5
 8016810:	f2c0 80ed 	blt.w	80169ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8016814:	3601      	adds	r6, #1
 8016816:	f100 80da 	bmi.w	80169ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801681a:	42b1      	cmp	r1, r6
 801681c:	f2c0 80d7 	blt.w	80169ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8016820:	3301      	adds	r3, #1
 8016822:	f100 80d4 	bmi.w	80169ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8016826:	429a      	cmp	r2, r3
 8016828:	f2c0 80d1 	blt.w	80169ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801682c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801682e:	9311      	str	r3, [sp, #68]	; 0x44
 8016830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016832:	930c      	str	r3, [sp, #48]	; 0x30
 8016834:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016836:	2b00      	cmp	r3, #0
 8016838:	f340 80fa 	ble.w	8016a30 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801683c:	9826      	ldr	r0, [sp, #152]	; 0x98
 801683e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016840:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016842:	68c6      	ldr	r6, [r0, #12]
 8016844:	141d      	asrs	r5, r3, #16
 8016846:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8016848:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801684c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801684e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016850:	1400      	asrs	r0, r0, #16
 8016852:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8016856:	6892      	ldr	r2, [r2, #8]
 8016858:	f100 813e 	bmi.w	8016ad8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801685c:	1e57      	subs	r7, r2, #1
 801685e:	42b8      	cmp	r0, r7
 8016860:	f280 813a 	bge.w	8016ad8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8016864:	2d00      	cmp	r5, #0
 8016866:	f2c0 8137 	blt.w	8016ad8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801686a:	1e77      	subs	r7, r6, #1
 801686c:	42bd      	cmp	r5, r7
 801686e:	f280 8133 	bge.w	8016ad8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8016872:	b212      	sxth	r2, r2
 8016874:	fb05 0002 	mla	r0, r5, r2, r0
 8016878:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801687a:	f815 a000 	ldrb.w	sl, [r5, r0]
 801687e:	182e      	adds	r6, r5, r0
 8016880:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8016884:	eb04 050a 	add.w	r5, r4, sl
 8016888:	2b00      	cmp	r3, #0
 801688a:	f000 8117 	beq.w	8016abc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801688e:	f896 c001 	ldrb.w	ip, [r6, #1]
 8016892:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8016896:	44a4      	add	ip, r4
 8016898:	2900      	cmp	r1, #0
 801689a:	f000 8117 	beq.w	8016acc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801689e:	18b0      	adds	r0, r6, r2
 80168a0:	5cb2      	ldrb	r2, [r6, r2]
 80168a2:	7840      	ldrb	r0, [r0, #1]
 80168a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80168a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80168ac:	4422      	add	r2, r4
 80168ae:	4420      	add	r0, r4
 80168b0:	b29b      	uxth	r3, r3
 80168b2:	f89c 7002 	ldrb.w	r7, [ip, #2]
 80168b6:	b289      	uxth	r1, r1
 80168b8:	f895 b002 	ldrb.w	fp, [r5, #2]
 80168bc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80168be:	fb03 f901 	mul.w	r9, r3, r1
 80168c2:	011b      	lsls	r3, r3, #4
 80168c4:	f8b6 e000 	ldrh.w	lr, [r6]
 80168c8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80168cc:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80168d0:	eba3 0309 	sub.w	r3, r3, r9
 80168d4:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 80168d8:	b289      	uxth	r1, r1
 80168da:	f814 a00a 	ldrb.w	sl, [r4, sl]
 80168de:	b29b      	uxth	r3, r3
 80168e0:	eba8 0801 	sub.w	r8, r8, r1
 80168e4:	435f      	muls	r7, r3
 80168e6:	fa1f f888 	uxth.w	r8, r8
 80168ea:	9310      	str	r3, [sp, #64]	; 0x40
 80168ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80168ee:	fb08 770b 	mla	r7, r8, fp, r7
 80168f2:	f892 b002 	ldrb.w	fp, [r2, #2]
 80168f6:	fb01 770b 	mla	r7, r1, fp, r7
 80168fa:	f890 b002 	ldrb.w	fp, [r0, #2]
 80168fe:	fb09 770b 	mla	r7, r9, fp, r7
 8016902:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8016906:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801690a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801690e:	fb1b fb03 	smulbb	fp, fp, r3
 8016912:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016914:	fb07 b706 	mla	r7, r7, r6, fp
 8016918:	f895 b001 	ldrb.w	fp, [r5, #1]
 801691c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8016920:	f89c c000 	ldrb.w	ip, [ip]
 8016924:	b2bf      	uxth	r7, r7
 8016926:	435d      	muls	r5, r3
 8016928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801692a:	fb08 550b 	mla	r5, r8, fp, r5
 801692e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8016932:	fb01 550b 	mla	r5, r1, fp, r5
 8016936:	f890 b001 	ldrb.w	fp, [r0, #1]
 801693a:	fb09 550b 	mla	r5, r9, fp, r5
 801693e:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8016942:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8016946:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801694a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801694e:	fa5f fe8e 	uxtb.w	lr, lr
 8016952:	fb1b fb03 	smulbb	fp, fp, r3
 8016956:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016958:	fb03 f30c 	mul.w	r3, r3, ip
 801695c:	f892 c000 	ldrb.w	ip, [r2]
 8016960:	fb05 b506 	mla	r5, r5, r6, fp
 8016964:	fb08 330a 	mla	r3, r8, sl, r3
 8016968:	b2ad      	uxth	r5, r5
 801696a:	fb01 330c 	mla	r3, r1, ip, r3
 801696e:	f890 c000 	ldrb.w	ip, [r0]
 8016972:	f105 0b01 	add.w	fp, r5, #1
 8016976:	fb09 3c0c 	mla	ip, r9, ip, r3
 801697a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801697c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8016980:	fb1e fe03 	smulbb	lr, lr, r3
 8016984:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8016988:	1c7b      	adds	r3, r7, #1
 801698a:	096d      	lsrs	r5, r5, #5
 801698c:	fb0c e606 	mla	r6, ip, r6, lr
 8016990:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8016994:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8016998:	b2b6      	uxth	r6, r6
 801699a:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801699e:	1c77      	adds	r7, r6, #1
 80169a0:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80169a4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80169a8:	431f      	orrs	r7, r3
 80169aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169ac:	433d      	orrs	r5, r7
 80169ae:	801d      	strh	r5, [r3, #0]
 80169b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169b2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80169b4:	3302      	adds	r3, #2
 80169b6:	930c      	str	r3, [sp, #48]	; 0x30
 80169b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80169ba:	4413      	add	r3, r2
 80169bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80169be:	931f      	str	r3, [sp, #124]	; 0x7c
 80169c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80169c2:	4413      	add	r3, r2
 80169c4:	9320      	str	r3, [sp, #128]	; 0x80
 80169c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80169c8:	3b01      	subs	r3, #1
 80169ca:	9311      	str	r3, [sp, #68]	; 0x44
 80169cc:	e732      	b.n	8016834 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80169ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80169d0:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80169d2:	4433      	add	r3, r6
 80169d4:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80169d6:	931f      	str	r3, [sp, #124]	; 0x7c
 80169d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80169da:	4433      	add	r3, r6
 80169dc:	9320      	str	r3, [sp, #128]	; 0x80
 80169de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169e0:	3b01      	subs	r3, #1
 80169e2:	9309      	str	r3, [sp, #36]	; 0x24
 80169e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169e6:	3302      	adds	r3, #2
 80169e8:	930a      	str	r3, [sp, #40]	; 0x28
 80169ea:	e702      	b.n	80167f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80169ec:	d027      	beq.n	8016a3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 80169ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169f0:	9821      	ldr	r0, [sp, #132]	; 0x84
 80169f2:	3b01      	subs	r3, #1
 80169f4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80169f6:	fb00 5003 	mla	r0, r0, r3, r5
 80169fa:	1400      	asrs	r0, r0, #16
 80169fc:	f53f af16 	bmi.w	801682c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8016a00:	3901      	subs	r1, #1
 8016a02:	4288      	cmp	r0, r1
 8016a04:	f6bf af12 	bge.w	801682c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8016a08:	9922      	ldr	r1, [sp, #136]	; 0x88
 8016a0a:	9820      	ldr	r0, [sp, #128]	; 0x80
 8016a0c:	fb01 0303 	mla	r3, r1, r3, r0
 8016a10:	141b      	asrs	r3, r3, #16
 8016a12:	f53f af0b 	bmi.w	801682c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8016a16:	3a01      	subs	r2, #1
 8016a18:	4293      	cmp	r3, r2
 8016a1a:	f6bf af07 	bge.w	801682c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8016a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a20:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8016a24:	9311      	str	r3, [sp, #68]	; 0x44
 8016a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a28:	930c      	str	r3, [sp, #48]	; 0x30
 8016a2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	dc70      	bgt.n	8016b12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8016a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016a34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016a38:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8016a3c:	930a      	str	r3, [sp, #40]	; 0x28
 8016a3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	f340 8124 	ble.w	8016c8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8016a46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016a4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016a4c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016a50:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016a54:	eef0 6a62 	vmov.f32	s13, s5
 8016a58:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016a5c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016a60:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016a64:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8016a68:	eef0 6a43 	vmov.f32	s13, s6
 8016a6c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016a70:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8016a74:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016a78:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016a7c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016a80:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016a84:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016a88:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016a8c:	ee12 2a90 	vmov	r2, s5
 8016a90:	eef0 2a47 	vmov.f32	s5, s14
 8016a94:	fb92 f3f3 	sdiv	r3, r2, r3
 8016a98:	ee13 2a10 	vmov	r2, s6
 8016a9c:	9321      	str	r3, [sp, #132]	; 0x84
 8016a9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016aa0:	eeb0 3a67 	vmov.f32	s6, s15
 8016aa4:	fb92 f3f3 	sdiv	r3, r2, r3
 8016aa8:	9322      	str	r3, [sp, #136]	; 0x88
 8016aaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016aac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016aae:	3b01      	subs	r3, #1
 8016ab0:	930e      	str	r3, [sp, #56]	; 0x38
 8016ab2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016ab4:	bf08      	it	eq
 8016ab6:	4613      	moveq	r3, r2
 8016ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8016aba:	e68c      	b.n	80167d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8016abc:	b149      	cbz	r1, 8016ad2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8016abe:	5cb2      	ldrb	r2, [r6, r2]
 8016ac0:	4628      	mov	r0, r5
 8016ac2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016ac6:	4422      	add	r2, r4
 8016ac8:	46ac      	mov	ip, r5
 8016aca:	e6f1      	b.n	80168b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8016acc:	4628      	mov	r0, r5
 8016ace:	462a      	mov	r2, r5
 8016ad0:	e6ee      	b.n	80168b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8016ad2:	4628      	mov	r0, r5
 8016ad4:	462a      	mov	r2, r5
 8016ad6:	e7f7      	b.n	8016ac8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8016ad8:	1c47      	adds	r7, r0, #1
 8016ada:	f53f af69 	bmi.w	80169b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8016ade:	42ba      	cmp	r2, r7
 8016ae0:	f6ff af66 	blt.w	80169b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8016ae4:	1c6f      	adds	r7, r5, #1
 8016ae6:	f53f af63 	bmi.w	80169b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8016aea:	42be      	cmp	r6, r7
 8016aec:	f6ff af60 	blt.w	80169b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8016af0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8016af2:	b236      	sxth	r6, r6
 8016af4:	b212      	sxth	r2, r2
 8016af6:	9002      	str	r0, [sp, #8]
 8016af8:	9601      	str	r6, [sp, #4]
 8016afa:	9200      	str	r2, [sp, #0]
 8016afc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016afe:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8016b02:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8016b06:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8016b0a:	4623      	mov	r3, r4
 8016b0c:	f7ff fd59 	bl	80165c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8016b10:	e74e      	b.n	80169b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8016b12:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016b14:	9820      	ldr	r0, [sp, #128]	; 0x80
 8016b16:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8016b1a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8016b1c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016b1e:	1400      	asrs	r0, r0, #16
 8016b20:	142d      	asrs	r5, r5, #16
 8016b22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016b24:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8016b28:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8016b2c:	fb02 5000 	mla	r0, r2, r0, r5
 8016b30:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8016b32:	f815 9000 	ldrb.w	r9, [r5, r0]
 8016b36:	182e      	adds	r6, r5, r0
 8016b38:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8016b3c:	eb04 0509 	add.w	r5, r4, r9
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	f000 8096 	beq.w	8016c72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8016b46:	7877      	ldrb	r7, [r6, #1]
 8016b48:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016b4c:	4427      	add	r7, r4
 8016b4e:	2900      	cmp	r1, #0
 8016b50:	f000 8097 	beq.w	8016c82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8016b54:	18b0      	adds	r0, r6, r2
 8016b56:	5cb2      	ldrb	r2, [r6, r2]
 8016b58:	7840      	ldrb	r0, [r0, #1]
 8016b5a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016b5e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016b62:	4422      	add	r2, r4
 8016b64:	4420      	add	r0, r4
 8016b66:	b29b      	uxth	r3, r3
 8016b68:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8016b6a:	b289      	uxth	r1, r1
 8016b6c:	f895 b002 	ldrb.w	fp, [r5, #2]
 8016b70:	f8b6 c000 	ldrh.w	ip, [r6]
 8016b74:	fb03 f801 	mul.w	r8, r3, r1
 8016b78:	011b      	lsls	r3, r3, #4
 8016b7a:	78be      	ldrb	r6, [r7, #2]
 8016b7c:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8016b80:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8016b84:	eba3 0308 	sub.w	r3, r3, r8
 8016b88:	f814 9009 	ldrb.w	r9, [r4, r9]
 8016b8c:	b289      	uxth	r1, r1
 8016b8e:	b29b      	uxth	r3, r3
 8016b90:	ebae 0e01 	sub.w	lr, lr, r1
 8016b94:	435e      	muls	r6, r3
 8016b96:	fa1f fe8e 	uxth.w	lr, lr
 8016b9a:	9310      	str	r3, [sp, #64]	; 0x40
 8016b9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b9e:	fb0e 660b 	mla	r6, lr, fp, r6
 8016ba2:	f892 b002 	ldrb.w	fp, [r2, #2]
 8016ba6:	fb01 660b 	mla	r6, r1, fp, r6
 8016baa:	f890 b002 	ldrb.w	fp, [r0, #2]
 8016bae:	fb08 660b 	mla	r6, r8, fp, r6
 8016bb2:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8016bb6:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8016bba:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8016bbe:	fb1b fb03 	smulbb	fp, fp, r3
 8016bc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016bc4:	fb06 b60a 	mla	r6, r6, sl, fp
 8016bc8:	f895 b001 	ldrb.w	fp, [r5, #1]
 8016bcc:	787d      	ldrb	r5, [r7, #1]
 8016bce:	783f      	ldrb	r7, [r7, #0]
 8016bd0:	b2b6      	uxth	r6, r6
 8016bd2:	435d      	muls	r5, r3
 8016bd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016bd6:	fb0e 550b 	mla	r5, lr, fp, r5
 8016bda:	f892 b001 	ldrb.w	fp, [r2, #1]
 8016bde:	fb01 550b 	mla	r5, r1, fp, r5
 8016be2:	f890 b001 	ldrb.w	fp, [r0, #1]
 8016be6:	fb08 550b 	mla	r5, r8, fp, r5
 8016bea:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8016bee:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8016bf2:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8016bf6:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8016bfa:	fa5f fc8c 	uxtb.w	ip, ip
 8016bfe:	fb1b fb03 	smulbb	fp, fp, r3
 8016c02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016c04:	437b      	muls	r3, r7
 8016c06:	7817      	ldrb	r7, [r2, #0]
 8016c08:	fb05 b50a 	mla	r5, r5, sl, fp
 8016c0c:	fb0e 3309 	mla	r3, lr, r9, r3
 8016c10:	b2ad      	uxth	r5, r5
 8016c12:	fb01 3307 	mla	r3, r1, r7, r3
 8016c16:	7807      	ldrb	r7, [r0, #0]
 8016c18:	f105 0b01 	add.w	fp, r5, #1
 8016c1c:	fb08 3707 	mla	r7, r8, r7, r3
 8016c20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016c22:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8016c26:	fb1c fc03 	smulbb	ip, ip, r3
 8016c2a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8016c2e:	1c73      	adds	r3, r6, #1
 8016c30:	096d      	lsrs	r5, r5, #5
 8016c32:	fb07 c70a 	mla	r7, r7, sl, ip
 8016c36:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8016c3a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8016c3e:	b2bf      	uxth	r7, r7
 8016c40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c42:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8016c46:	1c7a      	adds	r2, r7, #1
 8016c48:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8016c4c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8016c50:	4316      	orrs	r6, r2
 8016c52:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016c54:	432e      	orrs	r6, r5
 8016c56:	f823 6b02 	strh.w	r6, [r3], #2
 8016c5a:	930c      	str	r3, [sp, #48]	; 0x30
 8016c5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016c5e:	4413      	add	r3, r2
 8016c60:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8016c62:	931f      	str	r3, [sp, #124]	; 0x7c
 8016c64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016c66:	4413      	add	r3, r2
 8016c68:	9320      	str	r3, [sp, #128]	; 0x80
 8016c6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016c6c:	3b01      	subs	r3, #1
 8016c6e:	9311      	str	r3, [sp, #68]	; 0x44
 8016c70:	e6db      	b.n	8016a2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8016c72:	b149      	cbz	r1, 8016c88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8016c74:	5cb2      	ldrb	r2, [r6, r2]
 8016c76:	4628      	mov	r0, r5
 8016c78:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016c7c:	4422      	add	r2, r4
 8016c7e:	462f      	mov	r7, r5
 8016c80:	e771      	b.n	8016b66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8016c82:	4628      	mov	r0, r5
 8016c84:	462a      	mov	r2, r5
 8016c86:	e76e      	b.n	8016b66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8016c88:	4628      	mov	r0, r5
 8016c8a:	462a      	mov	r2, r5
 8016c8c:	e7f7      	b.n	8016c7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8016c8e:	b015      	add	sp, #84	; 0x54
 8016c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016c94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8016c94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c98:	880f      	ldrh	r7, [r1, #0]
 8016c9a:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8016c9e:	023c      	lsls	r4, r7, #8
 8016ca0:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8016ca4:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8016ca8:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 8016cac:	017c      	lsls	r4, r7, #5
 8016cae:	00ff      	lsls	r7, r7, #3
 8016cb0:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8016cb4:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 8016cb8:	b2ff      	uxtb	r7, r7
 8016cba:	ea4b 0404 	orr.w	r4, fp, r4
 8016cbe:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 8016cc2:	4327      	orrs	r7, r4
 8016cc4:	fb05 ca0e 	mla	sl, r5, lr, ip
 8016cc8:	2d00      	cmp	r5, #0
 8016cca:	9701      	str	r7, [sp, #4]
 8016ccc:	eb02 080a 	add.w	r8, r2, sl
 8016cd0:	db7e      	blt.n	8016dd0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8016cd2:	45a9      	cmp	r9, r5
 8016cd4:	dd7c      	ble.n	8016dd0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8016cd6:	f1bc 0f00 	cmp.w	ip, #0
 8016cda:	db77      	blt.n	8016dcc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8016cdc:	45e6      	cmp	lr, ip
 8016cde:	dd75      	ble.n	8016dcc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8016ce0:	f812 700a 	ldrb.w	r7, [r2, sl]
 8016ce4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016ce8:	441f      	add	r7, r3
 8016cea:	f11c 0201 	adds.w	r2, ip, #1
 8016cee:	d472      	bmi.n	8016dd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8016cf0:	4596      	cmp	lr, r2
 8016cf2:	dd70      	ble.n	8016dd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8016cf4:	2800      	cmp	r0, #0
 8016cf6:	d06e      	beq.n	8016dd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8016cf8:	f898 4001 	ldrb.w	r4, [r8, #1]
 8016cfc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016d00:	441c      	add	r4, r3
 8016d02:	3501      	adds	r5, #1
 8016d04:	d46b      	bmi.n	8016dde <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8016d06:	45a9      	cmp	r9, r5
 8016d08:	dd69      	ble.n	8016dde <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8016d0a:	2e00      	cmp	r6, #0
 8016d0c:	d067      	beq.n	8016dde <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8016d0e:	f1bc 0f00 	cmp.w	ip, #0
 8016d12:	db62      	blt.n	8016dda <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8016d14:	45e6      	cmp	lr, ip
 8016d16:	dd60      	ble.n	8016dda <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8016d18:	f818 500e 	ldrb.w	r5, [r8, lr]
 8016d1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016d20:	441d      	add	r5, r3
 8016d22:	f11c 0201 	adds.w	r2, ip, #1
 8016d26:	d45d      	bmi.n	8016de4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8016d28:	4596      	cmp	lr, r2
 8016d2a:	dd5b      	ble.n	8016de4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8016d2c:	2800      	cmp	r0, #0
 8016d2e:	d059      	beq.n	8016de4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8016d30:	44c6      	add	lr, r8
 8016d32:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8016d36:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016d3a:	4413      	add	r3, r2
 8016d3c:	b280      	uxth	r0, r0
 8016d3e:	f897 e002 	ldrb.w	lr, [r7, #2]
 8016d42:	b2b2      	uxth	r2, r6
 8016d44:	f897 9000 	ldrb.w	r9, [r7]
 8016d48:	787f      	ldrb	r7, [r7, #1]
 8016d4a:	fb00 f602 	mul.w	r6, r0, r2
 8016d4e:	0100      	lsls	r0, r0, #4
 8016d50:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8016d54:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 8016d58:	1b80      	subs	r0, r0, r6
 8016d5a:	fa1f fc82 	uxth.w	ip, r2
 8016d5e:	b282      	uxth	r2, r0
 8016d60:	78a0      	ldrb	r0, [r4, #2]
 8016d62:	eba8 080c 	sub.w	r8, r8, ip
 8016d66:	4350      	muls	r0, r2
 8016d68:	fa1f f888 	uxth.w	r8, r8
 8016d6c:	fb08 0e0e 	mla	lr, r8, lr, r0
 8016d70:	78a8      	ldrb	r0, [r5, #2]
 8016d72:	fb0c e000 	mla	r0, ip, r0, lr
 8016d76:	f893 e002 	ldrb.w	lr, [r3, #2]
 8016d7a:	fb06 0e0e 	mla	lr, r6, lr, r0
 8016d7e:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 8016d82:	f894 e000 	ldrb.w	lr, [r4]
 8016d86:	fb02 fe0e 	mul.w	lr, r2, lr
 8016d8a:	fb08 e909 	mla	r9, r8, r9, lr
 8016d8e:	f895 e000 	ldrb.w	lr, [r5]
 8016d92:	fb0c 990e 	mla	r9, ip, lr, r9
 8016d96:	f893 e000 	ldrb.w	lr, [r3]
 8016d9a:	785b      	ldrb	r3, [r3, #1]
 8016d9c:	fb06 9e0e 	mla	lr, r6, lr, r9
 8016da0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8016da4:	ea4e 0e00 	orr.w	lr, lr, r0
 8016da8:	7860      	ldrb	r0, [r4, #1]
 8016daa:	4350      	muls	r0, r2
 8016dac:	786a      	ldrb	r2, [r5, #1]
 8016dae:	fb08 0007 	mla	r0, r8, r7, r0
 8016db2:	fb0c 0202 	mla	r2, ip, r2, r0
 8016db6:	fb06 2303 	mla	r3, r6, r3, r2
 8016dba:	095b      	lsrs	r3, r3, #5
 8016dbc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8016dc0:	ea4e 0303 	orr.w	r3, lr, r3
 8016dc4:	800b      	strh	r3, [r1, #0]
 8016dc6:	b003      	add	sp, #12
 8016dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dcc:	af01      	add	r7, sp, #4
 8016dce:	e78c      	b.n	8016cea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8016dd0:	ac01      	add	r4, sp, #4
 8016dd2:	4627      	mov	r7, r4
 8016dd4:	e795      	b.n	8016d02 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8016dd6:	ac01      	add	r4, sp, #4
 8016dd8:	e793      	b.n	8016d02 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8016dda:	ad01      	add	r5, sp, #4
 8016ddc:	e7a1      	b.n	8016d22 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 8016dde:	ab01      	add	r3, sp, #4
 8016de0:	461d      	mov	r5, r3
 8016de2:	e7ab      	b.n	8016d3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8016de4:	ab01      	add	r3, sp, #4
 8016de6:	e7a9      	b.n	8016d3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08016de8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dec:	b08f      	sub	sp, #60	; 0x3c
 8016dee:	920c      	str	r2, [sp, #48]	; 0x30
 8016df0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016df2:	900d      	str	r0, [sp, #52]	; 0x34
 8016df4:	910a      	str	r1, [sp, #40]	; 0x28
 8016df6:	6850      	ldr	r0, [r2, #4]
 8016df8:	9306      	str	r3, [sp, #24]
 8016dfa:	6812      	ldr	r2, [r2, #0]
 8016dfc:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 8016e00:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8016e04:	fb00 1303 	mla	r3, r0, r3, r1
 8016e08:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8016e0c:	9307      	str	r3, [sp, #28]
 8016e0e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	9308      	str	r3, [sp, #32]
 8016e14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016e16:	685c      	ldr	r4, [r3, #4]
 8016e18:	3404      	adds	r4, #4
 8016e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	dc03      	bgt.n	8016e28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8016e20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	f340 81d5 	ble.w	80171d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8016e28:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016e2a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8016e2e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8016e32:	1e48      	subs	r0, r1, #1
 8016e34:	1e56      	subs	r6, r2, #1
 8016e36:	9b06      	ldr	r3, [sp, #24]
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	f340 80b6 	ble.w	8016faa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8016e3e:	ea5f 472b 	movs.w	r7, fp, asr #16
 8016e42:	ea4f 4325 	mov.w	r3, r5, asr #16
 8016e46:	d406      	bmi.n	8016e56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016e48:	4287      	cmp	r7, r0
 8016e4a:	da04      	bge.n	8016e56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	db02      	blt.n	8016e56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016e50:	42b3      	cmp	r3, r6
 8016e52:	f2c0 80ab 	blt.w	8016fac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8016e56:	3701      	adds	r7, #1
 8016e58:	f100 809c 	bmi.w	8016f94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8016e5c:	42b9      	cmp	r1, r7
 8016e5e:	f2c0 8099 	blt.w	8016f94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8016e62:	3301      	adds	r3, #1
 8016e64:	f100 8096 	bmi.w	8016f94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8016e68:	429a      	cmp	r2, r3
 8016e6a:	f2c0 8093 	blt.w	8016f94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8016e6e:	9b06      	ldr	r3, [sp, #24]
 8016e70:	930b      	str	r3, [sp, #44]	; 0x2c
 8016e72:	9b07      	ldr	r3, [sp, #28]
 8016e74:	9309      	str	r3, [sp, #36]	; 0x24
 8016e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	f340 80b4 	ble.w	8016fe6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8016e7e:	9820      	ldr	r0, [sp, #128]	; 0x80
 8016e80:	142e      	asrs	r6, r5, #16
 8016e82:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016e84:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8016e88:	68c7      	ldr	r7, [r0, #12]
 8016e8a:	ea5f 402b 	movs.w	r0, fp, asr #16
 8016e8e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8016e92:	6892      	ldr	r2, [r2, #8]
 8016e94:	f100 80fb 	bmi.w	801708e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8016e98:	f102 3cff 	add.w	ip, r2, #4294967295
 8016e9c:	4560      	cmp	r0, ip
 8016e9e:	f280 80f6 	bge.w	801708e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8016ea2:	2e00      	cmp	r6, #0
 8016ea4:	f2c0 80f3 	blt.w	801708e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8016ea8:	f107 3cff 	add.w	ip, r7, #4294967295
 8016eac:	4566      	cmp	r6, ip
 8016eae:	f280 80ee 	bge.w	801708e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8016eb2:	b212      	sxth	r2, r2
 8016eb4:	fb06 0002 	mla	r0, r6, r2, r0
 8016eb8:	9e08      	ldr	r6, [sp, #32]
 8016eba:	1837      	adds	r7, r6, r0
 8016ebc:	5c30      	ldrb	r0, [r6, r0]
 8016ebe:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8016ec2:	eb04 0c08 	add.w	ip, r4, r8
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	f000 80d3 	beq.w	8017072 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016ecc:	787e      	ldrb	r6, [r7, #1]
 8016ece:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016ed2:	4426      	add	r6, r4
 8016ed4:	2900      	cmp	r1, #0
 8016ed6:	f000 80d4 	beq.w	8017082 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8016eda:	18b8      	adds	r0, r7, r2
 8016edc:	5cba      	ldrb	r2, [r7, r2]
 8016ede:	7840      	ldrb	r0, [r0, #1]
 8016ee0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016ee4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016ee8:	4422      	add	r2, r4
 8016eea:	4420      	add	r0, r4
 8016eec:	b29b      	uxth	r3, r3
 8016eee:	78b7      	ldrb	r7, [r6, #2]
 8016ef0:	b289      	uxth	r1, r1
 8016ef2:	f89c a002 	ldrb.w	sl, [ip, #2]
 8016ef6:	f89c c001 	ldrb.w	ip, [ip, #1]
 8016efa:	fb03 f901 	mul.w	r9, r3, r1
 8016efe:	011b      	lsls	r3, r3, #4
 8016f00:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8016f04:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8016f08:	eba3 0309 	sub.w	r3, r3, r9
 8016f0c:	b289      	uxth	r1, r1
 8016f0e:	b29b      	uxth	r3, r3
 8016f10:	ebae 0e01 	sub.w	lr, lr, r1
 8016f14:	435f      	muls	r7, r3
 8016f16:	fa1f fe8e 	uxth.w	lr, lr
 8016f1a:	fb0e 770a 	mla	r7, lr, sl, r7
 8016f1e:	f892 a002 	ldrb.w	sl, [r2, #2]
 8016f22:	fb01 770a 	mla	r7, r1, sl, r7
 8016f26:	f890 a002 	ldrb.w	sl, [r0, #2]
 8016f2a:	fb09 7a0a 	mla	sl, r9, sl, r7
 8016f2e:	f814 7008 	ldrb.w	r7, [r4, r8]
 8016f32:	f896 8000 	ldrb.w	r8, [r6]
 8016f36:	7876      	ldrb	r6, [r6, #1]
 8016f38:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8016f3c:	fb03 f808 	mul.w	r8, r3, r8
 8016f40:	4373      	muls	r3, r6
 8016f42:	fb0e 8807 	mla	r8, lr, r7, r8
 8016f46:	7817      	ldrb	r7, [r2, #0]
 8016f48:	fb0e 330c 	mla	r3, lr, ip, r3
 8016f4c:	fb01 8807 	mla	r8, r1, r7, r8
 8016f50:	7807      	ldrb	r7, [r0, #0]
 8016f52:	fb09 8707 	mla	r7, r9, r7, r8
 8016f56:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8016f5a:	ea47 070a 	orr.w	r7, r7, sl
 8016f5e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8016f62:	fb01 310a 	mla	r1, r1, sl, r3
 8016f66:	f890 a001 	ldrb.w	sl, [r0, #1]
 8016f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f6c:	fb09 1a0a 	mla	sl, r9, sl, r1
 8016f70:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016f74:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8016f78:	ea47 070a 	orr.w	r7, r7, sl
 8016f7c:	801f      	strh	r7, [r3, #0]
 8016f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f80:	3302      	adds	r3, #2
 8016f82:	9309      	str	r3, [sp, #36]	; 0x24
 8016f84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f86:	449b      	add	fp, r3
 8016f88:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016f8a:	441d      	add	r5, r3
 8016f8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f8e:	3b01      	subs	r3, #1
 8016f90:	930b      	str	r3, [sp, #44]	; 0x2c
 8016f92:	e770      	b.n	8016e76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8016f94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f96:	449b      	add	fp, r3
 8016f98:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016f9a:	441d      	add	r5, r3
 8016f9c:	9b06      	ldr	r3, [sp, #24]
 8016f9e:	3b01      	subs	r3, #1
 8016fa0:	9306      	str	r3, [sp, #24]
 8016fa2:	9b07      	ldr	r3, [sp, #28]
 8016fa4:	3302      	adds	r3, #2
 8016fa6:	9307      	str	r3, [sp, #28]
 8016fa8:	e745      	b.n	8016e36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8016faa:	d023      	beq.n	8016ff4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8016fac:	9b06      	ldr	r3, [sp, #24]
 8016fae:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016fb0:	3b01      	subs	r3, #1
 8016fb2:	fb00 b003 	mla	r0, r0, r3, fp
 8016fb6:	1400      	asrs	r0, r0, #16
 8016fb8:	f53f af59 	bmi.w	8016e6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8016fbc:	3901      	subs	r1, #1
 8016fbe:	4288      	cmp	r0, r1
 8016fc0:	f6bf af55 	bge.w	8016e6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8016fc4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016fc6:	fb01 5303 	mla	r3, r1, r3, r5
 8016fca:	141b      	asrs	r3, r3, #16
 8016fcc:	f53f af4f 	bmi.w	8016e6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8016fd0:	3a01      	subs	r2, #1
 8016fd2:	4293      	cmp	r3, r2
 8016fd4:	f6bf af4b 	bge.w	8016e6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8016fd8:	9b06      	ldr	r3, [sp, #24]
 8016fda:	9309      	str	r3, [sp, #36]	; 0x24
 8016fdc:	9b07      	ldr	r3, [sp, #28]
 8016fde:	930b      	str	r3, [sp, #44]	; 0x2c
 8016fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	dc70      	bgt.n	80170c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8016fe6:	9b06      	ldr	r3, [sp, #24]
 8016fe8:	9a07      	ldr	r2, [sp, #28]
 8016fea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016fee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8016ff2:	9307      	str	r3, [sp, #28]
 8016ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	f340 80eb 	ble.w	80171d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8016ffc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017000:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017002:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017006:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801700a:	eef0 6a62 	vmov.f32	s13, s5
 801700e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017012:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017016:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801701a:	ee16 ba90 	vmov	fp, s13
 801701e:	eef0 6a43 	vmov.f32	s13, s6
 8017022:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017026:	ee16 5a90 	vmov	r5, s13
 801702a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801702e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017032:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017036:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801703a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801703e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017042:	ee12 2a90 	vmov	r2, s5
 8017046:	eef0 2a47 	vmov.f32	s5, s14
 801704a:	fb92 f3f3 	sdiv	r3, r2, r3
 801704e:	ee13 2a10 	vmov	r2, s6
 8017052:	931b      	str	r3, [sp, #108]	; 0x6c
 8017054:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017056:	eeb0 3a67 	vmov.f32	s6, s15
 801705a:	fb92 f3f3 	sdiv	r3, r2, r3
 801705e:	931c      	str	r3, [sp, #112]	; 0x70
 8017060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017062:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017064:	3b01      	subs	r3, #1
 8017066:	930a      	str	r3, [sp, #40]	; 0x28
 8017068:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801706a:	bf08      	it	eq
 801706c:	4613      	moveq	r3, r2
 801706e:	9306      	str	r3, [sp, #24]
 8017070:	e6d3      	b.n	8016e1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8017072:	b149      	cbz	r1, 8017088 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8017074:	5cba      	ldrb	r2, [r7, r2]
 8017076:	4660      	mov	r0, ip
 8017078:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801707c:	4422      	add	r2, r4
 801707e:	4666      	mov	r6, ip
 8017080:	e734      	b.n	8016eec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8017082:	4660      	mov	r0, ip
 8017084:	4662      	mov	r2, ip
 8017086:	e731      	b.n	8016eec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8017088:	4660      	mov	r0, ip
 801708a:	4662      	mov	r2, ip
 801708c:	e7f7      	b.n	801707e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801708e:	f110 0c01 	adds.w	ip, r0, #1
 8017092:	f53f af74 	bmi.w	8016f7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8017096:	4562      	cmp	r2, ip
 8017098:	f6ff af71 	blt.w	8016f7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801709c:	f116 0c01 	adds.w	ip, r6, #1
 80170a0:	f53f af6d 	bmi.w	8016f7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80170a4:	4567      	cmp	r7, ip
 80170a6:	f6ff af6a 	blt.w	8016f7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80170aa:	b23f      	sxth	r7, r7
 80170ac:	b212      	sxth	r2, r2
 80170ae:	9701      	str	r7, [sp, #4]
 80170b0:	9200      	str	r2, [sp, #0]
 80170b2:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80170b6:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80170ba:	4623      	mov	r3, r4
 80170bc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80170be:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80170c2:	f7ff fde7 	bl	8016c94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 80170c6:	e75a      	b.n	8016f7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80170c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80170ca:	ea4f 462b 	mov.w	r6, fp, asr #16
 80170ce:	1428      	asrs	r0, r5, #16
 80170d0:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80170d4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80170d8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80170dc:	fb02 6000 	mla	r0, r2, r0, r6
 80170e0:	9e08      	ldr	r6, [sp, #32]
 80170e2:	f816 8000 	ldrb.w	r8, [r6, r0]
 80170e6:	1837      	adds	r7, r6, r0
 80170e8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80170ec:	eb04 0c08 	add.w	ip, r4, r8
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d060      	beq.n	80171b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 80170f4:	787e      	ldrb	r6, [r7, #1]
 80170f6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80170fa:	4426      	add	r6, r4
 80170fc:	2900      	cmp	r1, #0
 80170fe:	d062      	beq.n	80171c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8017100:	18b8      	adds	r0, r7, r2
 8017102:	5cba      	ldrb	r2, [r7, r2]
 8017104:	7840      	ldrb	r0, [r0, #1]
 8017106:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801710a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801710e:	4422      	add	r2, r4
 8017110:	4420      	add	r0, r4
 8017112:	b29b      	uxth	r3, r3
 8017114:	78b7      	ldrb	r7, [r6, #2]
 8017116:	b289      	uxth	r1, r1
 8017118:	f89c a002 	ldrb.w	sl, [ip, #2]
 801711c:	f89c c001 	ldrb.w	ip, [ip, #1]
 8017120:	fb03 f901 	mul.w	r9, r3, r1
 8017124:	011b      	lsls	r3, r3, #4
 8017126:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801712a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801712e:	eba3 0309 	sub.w	r3, r3, r9
 8017132:	b289      	uxth	r1, r1
 8017134:	b29b      	uxth	r3, r3
 8017136:	ebae 0e01 	sub.w	lr, lr, r1
 801713a:	435f      	muls	r7, r3
 801713c:	fa1f fe8e 	uxth.w	lr, lr
 8017140:	fb0e 770a 	mla	r7, lr, sl, r7
 8017144:	f892 a002 	ldrb.w	sl, [r2, #2]
 8017148:	fb01 770a 	mla	r7, r1, sl, r7
 801714c:	f890 a002 	ldrb.w	sl, [r0, #2]
 8017150:	fb09 7a0a 	mla	sl, r9, sl, r7
 8017154:	f814 7008 	ldrb.w	r7, [r4, r8]
 8017158:	f896 8000 	ldrb.w	r8, [r6]
 801715c:	7876      	ldrb	r6, [r6, #1]
 801715e:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8017162:	fb03 f808 	mul.w	r8, r3, r8
 8017166:	4373      	muls	r3, r6
 8017168:	7856      	ldrb	r6, [r2, #1]
 801716a:	fb0e 8807 	mla	r8, lr, r7, r8
 801716e:	7817      	ldrb	r7, [r2, #0]
 8017170:	fb0e 330c 	mla	r3, lr, ip, r3
 8017174:	fb01 8807 	mla	r8, r1, r7, r8
 8017178:	7807      	ldrb	r7, [r0, #0]
 801717a:	fb01 3306 	mla	r3, r1, r6, r3
 801717e:	fb09 8707 	mla	r7, r9, r7, r8
 8017182:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8017186:	ea47 070a 	orr.w	r7, r7, sl
 801718a:	f890 a001 	ldrb.w	sl, [r0, #1]
 801718e:	fb09 3a0a 	mla	sl, r9, sl, r3
 8017192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017194:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017198:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801719c:	ea47 070a 	orr.w	r7, r7, sl
 80171a0:	f823 7b02 	strh.w	r7, [r3], #2
 80171a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80171a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80171a8:	449b      	add	fp, r3
 80171aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80171ac:	441d      	add	r5, r3
 80171ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171b0:	3b01      	subs	r3, #1
 80171b2:	9309      	str	r3, [sp, #36]	; 0x24
 80171b4:	e714      	b.n	8016fe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 80171b6:	b149      	cbz	r1, 80171cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80171b8:	5cba      	ldrb	r2, [r7, r2]
 80171ba:	4660      	mov	r0, ip
 80171bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80171c0:	4422      	add	r2, r4
 80171c2:	4666      	mov	r6, ip
 80171c4:	e7a5      	b.n	8017112 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80171c6:	4660      	mov	r0, ip
 80171c8:	4662      	mov	r2, ip
 80171ca:	e7a2      	b.n	8017112 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80171cc:	4660      	mov	r0, ip
 80171ce:	4662      	mov	r2, ip
 80171d0:	e7f7      	b.n	80171c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 80171d2:	b00f      	add	sp, #60	; 0x3c
 80171d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080171d8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 80171d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171dc:	b085      	sub	sp, #20
 80171de:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 80171e2:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80171e6:	9102      	str	r1, [sp, #8]
 80171e8:	2c00      	cmp	r4, #0
 80171ea:	fb04 710c 	mla	r1, r4, ip, r7
 80171ee:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80171f2:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 80171f6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80171fa:	eb02 0e01 	add.w	lr, r2, r1
 80171fe:	f2c0 8122 	blt.w	8017446 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8017202:	45a0      	cmp	r8, r4
 8017204:	f340 811f 	ble.w	8017446 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8017208:	2f00      	cmp	r7, #0
 801720a:	f2c0 811a 	blt.w	8017442 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801720e:	45bc      	cmp	ip, r7
 8017210:	f340 8117 	ble.w	8017442 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8017214:	5c52      	ldrb	r2, [r2, r1]
 8017216:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801721a:	1c7a      	adds	r2, r7, #1
 801721c:	f100 8116 	bmi.w	801744c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8017220:	4594      	cmp	ip, r2
 8017222:	f340 8113 	ble.w	801744c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8017226:	2e00      	cmp	r6, #0
 8017228:	f000 8112 	beq.w	8017450 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 801722c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8017230:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017234:	3401      	adds	r4, #1
 8017236:	f100 810f 	bmi.w	8017458 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801723a:	45a0      	cmp	r8, r4
 801723c:	f340 810c 	ble.w	8017458 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8017240:	2800      	cmp	r0, #0
 8017242:	f000 810c 	beq.w	801745e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 8017246:	2f00      	cmp	r7, #0
 8017248:	f2c0 8104 	blt.w	8017454 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801724c:	45bc      	cmp	ip, r7
 801724e:	f340 8101 	ble.w	8017454 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8017252:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8017256:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801725a:	3701      	adds	r7, #1
 801725c:	f100 8102 	bmi.w	8017464 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8017260:	45bc      	cmp	ip, r7
 8017262:	f340 80ff 	ble.w	8017464 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8017266:	2e00      	cmp	r6, #0
 8017268:	f000 80fe 	beq.w	8017468 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 801726c:	44f4      	add	ip, lr
 801726e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8017272:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017276:	b2b6      	uxth	r6, r6
 8017278:	b280      	uxth	r0, r0
 801727a:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801727e:	fb00 fe06 	mul.w	lr, r0, r6
 8017282:	0136      	lsls	r6, r6, #4
 8017284:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8017288:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801728c:	eba6 070e 	sub.w	r7, r6, lr
 8017290:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8017294:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8017298:	b280      	uxth	r0, r0
 801729a:	b2bf      	uxth	r7, r7
 801729c:	1a1b      	subs	r3, r3, r0
 801729e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80172a2:	fb0a f607 	mul.w	r6, sl, r7
 80172a6:	b29b      	uxth	r3, r3
 80172a8:	fb0b 6603 	mla	r6, fp, r3, r6
 80172ac:	fb00 6609 	mla	r6, r0, r9, r6
 80172b0:	fb0e 6608 	mla	r6, lr, r8, r6
 80172b4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80172b8:	9600      	str	r6, [sp, #0]
 80172ba:	2e00      	cmp	r6, #0
 80172bc:	f000 80be 	beq.w	801743c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 80172c0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80172c4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80172c8:	9e02      	ldr	r6, [sp, #8]
 80172ca:	fb0b fc0c 	mul.w	ip, fp, ip
 80172ce:	fb0b f505 	mul.w	r5, fp, r5
 80172d2:	8836      	ldrh	r6, [r6, #0]
 80172d4:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80172d8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80172dc:	9501      	str	r5, [sp, #4]
 80172de:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80172e2:	44dc      	add	ip, fp
 80172e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80172e8:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80172ec:	9503      	str	r5, [sp, #12]
 80172ee:	9d01      	ldr	r5, [sp, #4]
 80172f0:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80172f4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80172f8:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80172fc:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8017300:	fb0a fc0c 	mul.w	ip, sl, ip
 8017304:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8017308:	fb0a fa01 	mul.w	sl, sl, r1
 801730c:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8017310:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8017314:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8017318:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801731c:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8017320:	4465      	add	r5, ip
 8017322:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017326:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801732a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801732e:	fb09 fc0c 	mul.w	ip, r9, ip
 8017332:	0a2d      	lsrs	r5, r5, #8
 8017334:	fb09 f904 	mul.w	r9, r9, r4
 8017338:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801733c:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8017340:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8017344:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8017348:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801734c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8017350:	437d      	muls	r5, r7
 8017352:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8017356:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801735a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801735e:	4461      	add	r1, ip
 8017360:	fb08 f404 	mul.w	r4, r8, r4
 8017364:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8017368:	fb08 f802 	mul.w	r8, r8, r2
 801736c:	0a09      	lsrs	r1, r1, #8
 801736e:	0a22      	lsrs	r2, r4, #8
 8017370:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8017374:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8017378:	fb07 f70a 	mul.w	r7, r7, sl
 801737c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8017380:	4414      	add	r4, r2
 8017382:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8017386:	0a24      	lsrs	r4, r4, #8
 8017388:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801738c:	9a03      	ldr	r2, [sp, #12]
 801738e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017392:	fb02 5503 	mla	r5, r2, r3, r5
 8017396:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801739a:	9a00      	ldr	r2, [sp, #0]
 801739c:	fb04 540e 	mla	r4, r4, lr, r5
 80173a0:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80173a4:	1235      	asrs	r5, r6, #8
 80173a6:	fb01 4100 	mla	r1, r1, r0, r4
 80173aa:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80173ae:	0a09      	lsrs	r1, r1, #8
 80173b0:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80173b4:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80173b8:	fb03 7101 	mla	r1, r3, r1, r7
 80173bc:	fb0e 1e08 	mla	lr, lr, r8, r1
 80173c0:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80173c4:	fb00 e101 	mla	r1, r0, r1, lr
 80173c8:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80173cc:	b287      	uxth	r7, r0
 80173ce:	0a09      	lsrs	r1, r1, #8
 80173d0:	437a      	muls	r2, r7
 80173d2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80173d6:	1c53      	adds	r3, r2, #1
 80173d8:	4321      	orrs	r1, r4
 80173da:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80173de:	0c0a      	lsrs	r2, r1, #16
 80173e0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80173e4:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80173e8:	b2c8      	uxtb	r0, r1
 80173ea:	fb12 f207 	smulbb	r2, r2, r7
 80173ee:	fb14 f407 	smulbb	r4, r4, r7
 80173f2:	b2db      	uxtb	r3, r3
 80173f4:	fb10 f007 	smulbb	r0, r0, r7
 80173f8:	fb05 2503 	mla	r5, r5, r3, r2
 80173fc:	10f2      	asrs	r2, r6, #3
 80173fe:	00f6      	lsls	r6, r6, #3
 8017400:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8017404:	b2ad      	uxth	r5, r5
 8017406:	b2f6      	uxtb	r6, r6
 8017408:	fb02 4203 	mla	r2, r2, r3, r4
 801740c:	fb06 0303 	mla	r3, r6, r3, r0
 8017410:	b294      	uxth	r4, r2
 8017412:	b299      	uxth	r1, r3
 8017414:	1c6b      	adds	r3, r5, #1
 8017416:	1c62      	adds	r2, r4, #1
 8017418:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801741c:	1c4b      	adds	r3, r1, #1
 801741e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8017422:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8017426:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801742a:	0952      	lsrs	r2, r2, #5
 801742c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8017430:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8017434:	432b      	orrs	r3, r5
 8017436:	4313      	orrs	r3, r2
 8017438:	9a02      	ldr	r2, [sp, #8]
 801743a:	8013      	strh	r3, [r2, #0]
 801743c:	b005      	add	sp, #20
 801743e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017442:	2500      	movs	r5, #0
 8017444:	e6e9      	b.n	801721a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 8017446:	2100      	movs	r1, #0
 8017448:	460d      	mov	r5, r1
 801744a:	e6f3      	b.n	8017234 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801744c:	2100      	movs	r1, #0
 801744e:	e6f1      	b.n	8017234 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8017450:	4631      	mov	r1, r6
 8017452:	e6ef      	b.n	8017234 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8017454:	2400      	movs	r4, #0
 8017456:	e700      	b.n	801725a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8017458:	2200      	movs	r2, #0
 801745a:	4614      	mov	r4, r2
 801745c:	e70b      	b.n	8017276 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801745e:	4602      	mov	r2, r0
 8017460:	4604      	mov	r4, r0
 8017462:	e708      	b.n	8017276 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8017464:	2200      	movs	r2, #0
 8017466:	e706      	b.n	8017276 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8017468:	4632      	mov	r2, r6
 801746a:	e704      	b.n	8017276 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0801746c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801746c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017470:	b09f      	sub	sp, #124	; 0x7c
 8017472:	921b      	str	r2, [sp, #108]	; 0x6c
 8017474:	9309      	str	r3, [sp, #36]	; 0x24
 8017476:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017478:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801747c:	901d      	str	r0, [sp, #116]	; 0x74
 801747e:	931c      	str	r3, [sp, #112]	; 0x70
 8017480:	6850      	ldr	r0, [r2, #4]
 8017482:	9119      	str	r1, [sp, #100]	; 0x64
 8017484:	6812      	ldr	r2, [r2, #0]
 8017486:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8017488:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801748c:	fb00 1303 	mla	r3, r0, r3, r1
 8017490:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8017494:	930c      	str	r3, [sp, #48]	; 0x30
 8017496:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	9312      	str	r3, [sp, #72]	; 0x48
 801749c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801749e:	685e      	ldr	r6, [r3, #4]
 80174a0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80174a4:	3604      	adds	r6, #4
 80174a6:	930d      	str	r3, [sp, #52]	; 0x34
 80174a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	dc03      	bgt.n	80174b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80174ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	f340 8387 	ble.w	8017bc4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 80174b6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80174b8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80174bc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80174c0:	1e48      	subs	r0, r1, #1
 80174c2:	1e57      	subs	r7, r2, #1
 80174c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	f340 8194 	ble.w	80177f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80174cc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80174ce:	142b      	asrs	r3, r5, #16
 80174d0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80174d4:	d406      	bmi.n	80174e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80174d6:	4584      	cmp	ip, r0
 80174d8:	da04      	bge.n	80174e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80174da:	2b00      	cmp	r3, #0
 80174dc:	db02      	blt.n	80174e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80174de:	42bb      	cmp	r3, r7
 80174e0:	f2c0 8189 	blt.w	80177f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80174e4:	f11c 0c01 	adds.w	ip, ip, #1
 80174e8:	f100 8177 	bmi.w	80177da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80174ec:	4561      	cmp	r1, ip
 80174ee:	f2c0 8174 	blt.w	80177da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80174f2:	3301      	adds	r3, #1
 80174f4:	f100 8171 	bmi.w	80177da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80174f8:	429a      	cmp	r2, r3
 80174fa:	f2c0 816e 	blt.w	80177da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80174fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017500:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8017502:	931a      	str	r3, [sp, #104]	; 0x68
 8017504:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017506:	2b00      	cmp	r3, #0
 8017508:	f340 8193 	ble.w	8017832 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801750c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801750e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8017512:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8017516:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801751a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801751c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8017520:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017522:	141b      	asrs	r3, r3, #16
 8017524:	f100 81d6 	bmi.w	80178d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8017528:	f100 38ff 	add.w	r8, r0, #4294967295
 801752c:	4543      	cmp	r3, r8
 801752e:	f280 81d1 	bge.w	80178d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8017532:	f1bc 0f00 	cmp.w	ip, #0
 8017536:	f2c0 81cd 	blt.w	80178d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801753a:	f10e 38ff 	add.w	r8, lr, #4294967295
 801753e:	45c4      	cmp	ip, r8
 8017540:	f280 81c8 	bge.w	80178d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8017544:	b200      	sxth	r0, r0
 8017546:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017548:	fb0c 3300 	mla	r3, ip, r0, r3
 801754c:	eb04 0803 	add.w	r8, r4, r3
 8017550:	5ce3      	ldrb	r3, [r4, r3]
 8017552:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8017556:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801755a:	2a00      	cmp	r2, #0
 801755c:	f000 81af 	beq.w	80178be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8017560:	f898 c001 	ldrb.w	ip, [r8, #1]
 8017564:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8017568:	940e      	str	r4, [sp, #56]	; 0x38
 801756a:	0e24      	lsrs	r4, r4, #24
 801756c:	9415      	str	r4, [sp, #84]	; 0x54
 801756e:	b179      	cbz	r1, 8017590 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8017570:	eb08 0c00 	add.w	ip, r8, r0
 8017574:	f818 0000 	ldrb.w	r0, [r8, r0]
 8017578:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801757c:	900a      	str	r0, [sp, #40]	; 0x28
 801757e:	0e00      	lsrs	r0, r0, #24
 8017580:	9013      	str	r0, [sp, #76]	; 0x4c
 8017582:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8017586:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801758a:	900f      	str	r0, [sp, #60]	; 0x3c
 801758c:	0e00      	lsrs	r0, r0, #24
 801758e:	9016      	str	r0, [sp, #88]	; 0x58
 8017590:	b292      	uxth	r2, r2
 8017592:	9815      	ldr	r0, [sp, #84]	; 0x54
 8017594:	b289      	uxth	r1, r1
 8017596:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017598:	fb02 f901 	mul.w	r9, r2, r1
 801759c:	0112      	lsls	r2, r2, #4
 801759e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80175a2:	eba2 0809 	sub.w	r8, r2, r9
 80175a6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80175aa:	b289      	uxth	r1, r1
 80175ac:	fa1f f888 	uxth.w	r8, r8
 80175b0:	1a52      	subs	r2, r2, r1
 80175b2:	fb08 f000 	mul.w	r0, r8, r0
 80175b6:	b292      	uxth	r2, r2
 80175b8:	fb02 000e 	mla	r0, r2, lr, r0
 80175bc:	fb01 0004 	mla	r0, r1, r4, r0
 80175c0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80175c2:	fb09 0004 	mla	r0, r9, r4, r0
 80175c6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80175ca:	2800      	cmp	r0, #0
 80175cc:	f000 80fa 	beq.w	80177c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80175d0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80175d4:	d01b      	beq.n	801760e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80175d6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80175da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80175de:	fb0e fa0a 	mul.w	sl, lr, sl
 80175e2:	fb0e fe03 	mul.w	lr, lr, r3
 80175e6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80175ea:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80175ee:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80175f2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80175f6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80175fa:	4453      	add	r3, sl
 80175fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017600:	0a1b      	lsrs	r3, r3, #8
 8017602:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8017606:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801760a:	ea43 030c 	orr.w	r3, r3, ip
 801760e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017610:	2cff      	cmp	r4, #255	; 0xff
 8017612:	d021      	beq.n	8017658 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8017614:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017616:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801761a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801761c:	fb04 fb0b 	mul.w	fp, r4, fp
 8017620:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017622:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017626:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017628:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801762c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017630:	fb04 fa0a 	mul.w	sl, r4, sl
 8017634:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017638:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801763c:	44de      	add	lr, fp
 801763e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017642:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017646:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801764a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801764e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017652:	ea4e 040a 	orr.w	r4, lr, sl
 8017656:	940e      	str	r4, [sp, #56]	; 0x38
 8017658:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801765a:	2cff      	cmp	r4, #255	; 0xff
 801765c:	d021      	beq.n	80176a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801765e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017660:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017664:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017666:	fb04 fb0b 	mul.w	fp, r4, fp
 801766a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801766c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017670:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017672:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8017676:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801767a:	fb04 fa0a 	mul.w	sl, r4, sl
 801767e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017682:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017686:	44de      	add	lr, fp
 8017688:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801768c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017690:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017694:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017698:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801769c:	ea4e 040a 	orr.w	r4, lr, sl
 80176a0:	940a      	str	r4, [sp, #40]	; 0x28
 80176a2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80176a4:	2cff      	cmp	r4, #255	; 0xff
 80176a6:	d021      	beq.n	80176ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 80176a8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80176aa:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80176ae:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80176b0:	fb04 fb0b 	mul.w	fp, r4, fp
 80176b4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80176b6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80176ba:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80176bc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80176c0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80176c4:	fb04 fa0a 	mul.w	sl, r4, sl
 80176c8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80176cc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80176d0:	44de      	add	lr, fp
 80176d2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80176d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80176da:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80176de:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80176e2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80176e6:	ea4e 040a 	orr.w	r4, lr, sl
 80176ea:	940f      	str	r4, [sp, #60]	; 0x3c
 80176ec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80176ee:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80176f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80176f6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80176fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80176fc:	fb08 fc0c 	mul.w	ip, r8, ip
 8017700:	fb02 cc0e 	mla	ip, r2, lr, ip
 8017704:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8017708:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801770a:	fb01 cc0e 	mla	ip, r1, lr, ip
 801770e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8017712:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017714:	fb09 cc0e 	mla	ip, r9, lr, ip
 8017718:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801771c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801771e:	fb08 f80e 	mul.w	r8, r8, lr
 8017722:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017726:	fb02 8303 	mla	r3, r2, r3, r8
 801772a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801772c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017730:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8017734:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017736:	fb01 330a 	mla	r3, r1, sl, r3
 801773a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801773e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017740:	fb09 3901 	mla	r9, r9, r1, r3
 8017744:	883b      	ldrh	r3, [r7, #0]
 8017746:	4342      	muls	r2, r0
 8017748:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801774c:	1c50      	adds	r0, r2, #1
 801774e:	1219      	asrs	r1, r3, #8
 8017750:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8017754:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8017758:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801775c:	ea4c 0c09 	orr.w	ip, ip, r9
 8017760:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8017764:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8017768:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801776c:	b2c0      	uxtb	r0, r0
 801776e:	fb12 f204 	smulbb	r2, r2, r4
 8017772:	fa5f fc8c 	uxtb.w	ip, ip
 8017776:	fb1e fe04 	smulbb	lr, lr, r4
 801777a:	fb01 2100 	mla	r1, r1, r0, r2
 801777e:	10da      	asrs	r2, r3, #3
 8017780:	fb1c fc04 	smulbb	ip, ip, r4
 8017784:	00db      	lsls	r3, r3, #3
 8017786:	b289      	uxth	r1, r1
 8017788:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801778c:	b2db      	uxtb	r3, r3
 801778e:	fb02 e200 	mla	r2, r2, r0, lr
 8017792:	fb03 c300 	mla	r3, r3, r0, ip
 8017796:	b292      	uxth	r2, r2
 8017798:	fa1f fc83 	uxth.w	ip, r3
 801779c:	1c4b      	adds	r3, r1, #1
 801779e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80177a2:	f10c 0301 	add.w	r3, ip, #1
 80177a6:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80177aa:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80177ae:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80177b2:	430b      	orrs	r3, r1
 80177b4:	1c51      	adds	r1, r2, #1
 80177b6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80177ba:	0952      	lsrs	r2, r2, #5
 80177bc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80177c0:	4313      	orrs	r3, r2
 80177c2:	803b      	strh	r3, [r7, #0]
 80177c4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80177c6:	3702      	adds	r7, #2
 80177c8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80177ca:	441a      	add	r2, r3
 80177cc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80177ce:	441d      	add	r5, r3
 80177d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80177d2:	9229      	str	r2, [sp, #164]	; 0xa4
 80177d4:	3b01      	subs	r3, #1
 80177d6:	931a      	str	r3, [sp, #104]	; 0x68
 80177d8:	e694      	b.n	8017504 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80177da:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80177dc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80177de:	441c      	add	r4, r3
 80177e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80177e2:	441d      	add	r5, r3
 80177e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177e6:	9429      	str	r4, [sp, #164]	; 0xa4
 80177e8:	3b01      	subs	r3, #1
 80177ea:	9309      	str	r3, [sp, #36]	; 0x24
 80177ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80177ee:	3302      	adds	r3, #2
 80177f0:	930c      	str	r3, [sp, #48]	; 0x30
 80177f2:	e667      	b.n	80174c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80177f4:	d024      	beq.n	8017840 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 80177f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177f8:	982b      	ldr	r0, [sp, #172]	; 0xac
 80177fa:	3b01      	subs	r3, #1
 80177fc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80177fe:	fb00 4003 	mla	r0, r0, r3, r4
 8017802:	1400      	asrs	r0, r0, #16
 8017804:	f53f ae7b 	bmi.w	80174fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8017808:	3901      	subs	r1, #1
 801780a:	4288      	cmp	r0, r1
 801780c:	f6bf ae77 	bge.w	80174fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8017810:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8017812:	fb01 5303 	mla	r3, r1, r3, r5
 8017816:	141b      	asrs	r3, r3, #16
 8017818:	f53f ae71 	bmi.w	80174fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801781c:	3a01      	subs	r2, #1
 801781e:	4293      	cmp	r3, r2
 8017820:	f6bf ae6d 	bge.w	80174fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8017824:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8017828:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801782c:	f1bb 0f00 	cmp.w	fp, #0
 8017830:	dc70      	bgt.n	8017914 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8017832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017834:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8017838:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801783a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801783e:	930c      	str	r3, [sp, #48]	; 0x30
 8017840:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017842:	2b00      	cmp	r3, #0
 8017844:	f340 81be 	ble.w	8017bc4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8017848:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801784c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801784e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017852:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017856:	eef0 6a62 	vmov.f32	s13, s5
 801785a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801785e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017862:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017866:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801786a:	eef0 6a43 	vmov.f32	s13, s6
 801786e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017872:	ee16 5a90 	vmov	r5, s13
 8017876:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801787a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801787e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017882:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017886:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801788a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801788e:	ee12 2a90 	vmov	r2, s5
 8017892:	eef0 2a47 	vmov.f32	s5, s14
 8017896:	fb92 f3f3 	sdiv	r3, r2, r3
 801789a:	ee13 2a10 	vmov	r2, s6
 801789e:	932b      	str	r3, [sp, #172]	; 0xac
 80178a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80178a2:	eeb0 3a67 	vmov.f32	s6, s15
 80178a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80178aa:	932c      	str	r3, [sp, #176]	; 0xb0
 80178ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80178ae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80178b0:	3b01      	subs	r3, #1
 80178b2:	9319      	str	r3, [sp, #100]	; 0x64
 80178b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80178b6:	bf08      	it	eq
 80178b8:	4613      	moveq	r3, r2
 80178ba:	9309      	str	r3, [sp, #36]	; 0x24
 80178bc:	e5f4      	b.n	80174a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80178be:	2900      	cmp	r1, #0
 80178c0:	f43f ae66 	beq.w	8017590 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80178c4:	f818 0000 	ldrb.w	r0, [r8, r0]
 80178c8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80178cc:	900a      	str	r0, [sp, #40]	; 0x28
 80178ce:	0e00      	lsrs	r0, r0, #24
 80178d0:	9013      	str	r0, [sp, #76]	; 0x4c
 80178d2:	e65d      	b.n	8017590 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80178d4:	f113 0801 	adds.w	r8, r3, #1
 80178d8:	f53f af74 	bmi.w	80177c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80178dc:	4540      	cmp	r0, r8
 80178de:	f6ff af71 	blt.w	80177c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80178e2:	f11c 0801 	adds.w	r8, ip, #1
 80178e6:	f53f af6d 	bmi.w	80177c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80178ea:	45c6      	cmp	lr, r8
 80178ec:	f6ff af6a 	blt.w	80177c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80178f0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80178f2:	b200      	sxth	r0, r0
 80178f4:	9302      	str	r3, [sp, #8]
 80178f6:	fa0f f38e 	sxth.w	r3, lr
 80178fa:	9000      	str	r0, [sp, #0]
 80178fc:	9301      	str	r3, [sp, #4]
 80178fe:	4633      	mov	r3, r6
 8017900:	981d      	ldr	r0, [sp, #116]	; 0x74
 8017902:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8017906:	e9cd c203 	strd	ip, r2, [sp, #12]
 801790a:	4639      	mov	r1, r7
 801790c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801790e:	f7ff fc63 	bl	80171d8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8017912:	e757      	b.n	80177c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8017914:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017916:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801791a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801791c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8017920:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8017922:	1427      	asrs	r7, r4, #16
 8017924:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017926:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801792a:	142b      	asrs	r3, r5, #16
 801792c:	fb01 7303 	mla	r3, r1, r3, r7
 8017930:	18e7      	adds	r7, r4, r3
 8017932:	5ce3      	ldrb	r3, [r4, r3]
 8017934:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8017938:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801793c:	2a00      	cmp	r2, #0
 801793e:	f000 8137 	beq.w	8017bb0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8017942:	f897 e001 	ldrb.w	lr, [r7, #1]
 8017946:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801794a:	9410      	str	r4, [sp, #64]	; 0x40
 801794c:	0e24      	lsrs	r4, r4, #24
 801794e:	9417      	str	r4, [sp, #92]	; 0x5c
 8017950:	b170      	cbz	r0, 8017970 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8017952:	eb07 0e01 	add.w	lr, r7, r1
 8017956:	5c79      	ldrb	r1, [r7, r1]
 8017958:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801795c:	910b      	str	r1, [sp, #44]	; 0x2c
 801795e:	0e09      	lsrs	r1, r1, #24
 8017960:	9114      	str	r1, [sp, #80]	; 0x50
 8017962:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8017966:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801796a:	9111      	str	r1, [sp, #68]	; 0x44
 801796c:	0e09      	lsrs	r1, r1, #24
 801796e:	9118      	str	r1, [sp, #96]	; 0x60
 8017970:	b292      	uxth	r2, r2
 8017972:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8017974:	b280      	uxth	r0, r0
 8017976:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017978:	fb02 f800 	mul.w	r8, r2, r0
 801797c:	0112      	lsls	r2, r2, #4
 801797e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8017982:	eba2 0e08 	sub.w	lr, r2, r8
 8017986:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801798a:	b280      	uxth	r0, r0
 801798c:	fa1f fe8e 	uxth.w	lr, lr
 8017990:	1a12      	subs	r2, r2, r0
 8017992:	fb0e f101 	mul.w	r1, lr, r1
 8017996:	b292      	uxth	r2, r2
 8017998:	fb02 110c 	mla	r1, r2, ip, r1
 801799c:	fb00 1104 	mla	r1, r0, r4, r1
 80179a0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80179a2:	fb08 1104 	mla	r1, r8, r4, r1
 80179a6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80179aa:	2900      	cmp	r1, #0
 80179ac:	f000 80f5 	beq.w	8017b9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 80179b0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80179b4:	d019      	beq.n	80179ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 80179b6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80179ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80179be:	fb0c fa0a 	mul.w	sl, ip, sl
 80179c2:	fb0c fc03 	mul.w	ip, ip, r3
 80179c6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80179ca:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80179ce:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80179d2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80179d6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80179da:	4453      	add	r3, sl
 80179dc:	0a3f      	lsrs	r7, r7, #8
 80179de:	0a1b      	lsrs	r3, r3, #8
 80179e0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80179e4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80179e8:	433b      	orrs	r3, r7
 80179ea:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80179ec:	2cff      	cmp	r4, #255	; 0xff
 80179ee:	d020      	beq.n	8017a32 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 80179f0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80179f2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80179f6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80179f8:	4367      	muls	r7, r4
 80179fa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80179fc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017a00:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017a04:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8017a06:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017a0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017a0e:	fb04 fa0a 	mul.w	sl, r4, sl
 8017a12:	44bc      	add	ip, r7
 8017a14:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8017a18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017a1c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017a20:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017a24:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017a28:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017a2c:	ea4c 040a 	orr.w	r4, ip, sl
 8017a30:	9410      	str	r4, [sp, #64]	; 0x40
 8017a32:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017a34:	2cff      	cmp	r4, #255	; 0xff
 8017a36:	d020      	beq.n	8017a7a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8017a38:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017a3a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017a3e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017a40:	4367      	muls	r7, r4
 8017a42:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017a44:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017a48:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017a4c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017a4e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017a52:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017a56:	fb04 fa0a 	mul.w	sl, r4, sl
 8017a5a:	44bc      	add	ip, r7
 8017a5c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8017a60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017a64:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017a68:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017a6c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017a70:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017a74:	ea4c 040a 	orr.w	r4, ip, sl
 8017a78:	940b      	str	r4, [sp, #44]	; 0x2c
 8017a7a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8017a7c:	2cff      	cmp	r4, #255	; 0xff
 8017a7e:	d020      	beq.n	8017ac2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8017a80:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017a82:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017a86:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8017a88:	4367      	muls	r7, r4
 8017a8a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017a8c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017a90:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017a94:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8017a96:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017a9a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017a9e:	fb04 fa0a 	mul.w	sl, r4, sl
 8017aa2:	44bc      	add	ip, r7
 8017aa4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8017aa8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017aac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017ab0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017ab4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017ab8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017abc:	ea4c 040a 	orr.w	r4, ip, sl
 8017ac0:	9411      	str	r4, [sp, #68]	; 0x44
 8017ac2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017ac4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8017ac8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017acc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017ad0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017ad2:	fb0e f707 	mul.w	r7, lr, r7
 8017ad6:	fb02 770c 	mla	r7, r2, ip, r7
 8017ada:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017ade:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017ae0:	fb00 770c 	mla	r7, r0, ip, r7
 8017ae4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017ae8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017aea:	fb08 770c 	mla	r7, r8, ip, r7
 8017aee:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8017af2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017af4:	fb0e fe0c 	mul.w	lr, lr, ip
 8017af8:	0a3f      	lsrs	r7, r7, #8
 8017afa:	fb02 e303 	mla	r3, r2, r3, lr
 8017afe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017b00:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8017b04:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8017b08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017b0a:	fb00 330a 	mla	r3, r0, sl, r3
 8017b0e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8017b12:	f8b9 0000 	ldrh.w	r0, [r9]
 8017b16:	fb08 3c0c 	mla	ip, r8, ip, r3
 8017b1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b1c:	1202      	asrs	r2, r0, #8
 8017b1e:	434b      	muls	r3, r1
 8017b20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017b24:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8017b28:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8017b2c:	1c59      	adds	r1, r3, #1
 8017b2e:	ea47 070c 	orr.w	r7, r7, ip
 8017b32:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8017b36:	0c3b      	lsrs	r3, r7, #16
 8017b38:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8017b3c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8017b40:	b2ff      	uxtb	r7, r7
 8017b42:	fb13 f304 	smulbb	r3, r3, r4
 8017b46:	b2c9      	uxtb	r1, r1
 8017b48:	fb1c fc04 	smulbb	ip, ip, r4
 8017b4c:	fb02 3201 	mla	r2, r2, r1, r3
 8017b50:	10c3      	asrs	r3, r0, #3
 8017b52:	fb17 f704 	smulbb	r7, r7, r4
 8017b56:	00c0      	lsls	r0, r0, #3
 8017b58:	b292      	uxth	r2, r2
 8017b5a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8017b5e:	b2c0      	uxtb	r0, r0
 8017b60:	fb03 c301 	mla	r3, r3, r1, ip
 8017b64:	f102 0c01 	add.w	ip, r2, #1
 8017b68:	fb00 7001 	mla	r0, r0, r1, r7
 8017b6c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8017b70:	b280      	uxth	r0, r0
 8017b72:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8017b76:	b29b      	uxth	r3, r3
 8017b78:	1c42      	adds	r2, r0, #1
 8017b7a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8017b7e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8017b82:	ea42 020c 	orr.w	r2, r2, ip
 8017b86:	f103 0c01 	add.w	ip, r3, #1
 8017b8a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8017b8e:	095b      	lsrs	r3, r3, #5
 8017b90:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8017b94:	431a      	orrs	r2, r3
 8017b96:	f8a9 2000 	strh.w	r2, [r9]
 8017b9a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8017b9c:	f109 0902 	add.w	r9, r9, #2
 8017ba0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8017ba2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017ba6:	441a      	add	r2, r3
 8017ba8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017baa:	9229      	str	r2, [sp, #164]	; 0xa4
 8017bac:	441d      	add	r5, r3
 8017bae:	e63d      	b.n	801782c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8017bb0:	2800      	cmp	r0, #0
 8017bb2:	f43f aedd 	beq.w	8017970 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8017bb6:	5c79      	ldrb	r1, [r7, r1]
 8017bb8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017bbc:	910b      	str	r1, [sp, #44]	; 0x2c
 8017bbe:	0e09      	lsrs	r1, r1, #24
 8017bc0:	9114      	str	r1, [sp, #80]	; 0x50
 8017bc2:	e6d5      	b.n	8017970 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8017bc4:	b01f      	add	sp, #124	; 0x7c
 8017bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017bca <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8017bca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bce:	b089      	sub	sp, #36	; 0x24
 8017bd0:	9101      	str	r1, [sp, #4]
 8017bd2:	9801      	ldr	r0, [sp, #4]
 8017bd4:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 8017bd8:	8800      	ldrh	r0, [r0, #0]
 8017bda:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8017bde:	1206      	asrs	r6, r0, #8
 8017be0:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8017be4:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8017be8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8017bec:	9602      	str	r6, [sp, #8]
 8017bee:	10c6      	asrs	r6, r0, #3
 8017bf0:	00c0      	lsls	r0, r0, #3
 8017bf2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017bf6:	b2c0      	uxtb	r0, r0
 8017bf8:	9603      	str	r6, [sp, #12]
 8017bfa:	9004      	str	r0, [sp, #16]
 8017bfc:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 8017c00:	fb07 100c 	mla	r0, r7, ip, r1
 8017c04:	2f00      	cmp	r7, #0
 8017c06:	eb02 0e00 	add.w	lr, r2, r0
 8017c0a:	f2c0 810a 	blt.w	8017e22 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8017c0e:	45b8      	cmp	r8, r7
 8017c10:	f340 8107 	ble.w	8017e22 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8017c14:	2900      	cmp	r1, #0
 8017c16:	f2c0 8102 	blt.w	8017e1e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8017c1a:	458c      	cmp	ip, r1
 8017c1c:	f340 80ff 	ble.w	8017e1e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8017c20:	5c12      	ldrb	r2, [r2, r0]
 8017c22:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8017c26:	1c4a      	adds	r2, r1, #1
 8017c28:	f100 80fe 	bmi.w	8017e28 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8017c2c:	4594      	cmp	ip, r2
 8017c2e:	f340 80fb 	ble.w	8017e28 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8017c32:	2d00      	cmp	r5, #0
 8017c34:	f000 80fa 	beq.w	8017e2c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8017c38:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8017c3c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8017c40:	3701      	adds	r7, #1
 8017c42:	f100 80f7 	bmi.w	8017e34 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8017c46:	45b8      	cmp	r8, r7
 8017c48:	f340 80f4 	ble.w	8017e34 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8017c4c:	2c00      	cmp	r4, #0
 8017c4e:	f000 80f4 	beq.w	8017e3a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8017c52:	2900      	cmp	r1, #0
 8017c54:	eb0e 020c 	add.w	r2, lr, ip
 8017c58:	f2c0 80ea 	blt.w	8017e30 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8017c5c:	458c      	cmp	ip, r1
 8017c5e:	f340 80e7 	ble.w	8017e30 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8017c62:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8017c66:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8017c6a:	3101      	adds	r1, #1
 8017c6c:	f100 80e8 	bmi.w	8017e40 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8017c70:	458c      	cmp	ip, r1
 8017c72:	f340 80e5 	ble.w	8017e40 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8017c76:	2d00      	cmp	r5, #0
 8017c78:	f000 80e4 	beq.w	8017e44 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8017c7c:	7852      	ldrb	r2, [r2, #1]
 8017c7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017c82:	0e0b      	lsrs	r3, r1, #24
 8017c84:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8017c88:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8017c8c:	9300      	str	r3, [sp, #0]
 8017c8e:	b2a4      	uxth	r4, r4
 8017c90:	b2ab      	uxth	r3, r5
 8017c92:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8017c96:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8017c9a:	fb03 f904 	mul.w	r9, r3, r4
 8017c9e:	011b      	lsls	r3, r3, #4
 8017ca0:	fb0a f505 	mul.w	r5, sl, r5
 8017ca4:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8017ca8:	eba3 0e09 	sub.w	lr, r3, r9
 8017cac:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8017cb0:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8017cb4:	0a28      	lsrs	r0, r5, #8
 8017cb6:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8017cba:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8017cbe:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8017cc2:	fb0a f303 	mul.w	r3, sl, r3
 8017cc6:	fb08 f707 	mul.w	r7, r8, r7
 8017cca:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8017cce:	4405      	add	r5, r0
 8017cd0:	fb08 fc0c 	mul.w	ip, r8, ip
 8017cd4:	b2a4      	uxth	r4, r4
 8017cd6:	0a2d      	lsrs	r5, r5, #8
 8017cd8:	fa1f fe8e 	uxth.w	lr, lr
 8017cdc:	1b12      	subs	r2, r2, r4
 8017cde:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8017ce2:	b292      	uxth	r2, r2
 8017ce4:	9005      	str	r0, [sp, #20]
 8017ce6:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8017cea:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8017cee:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8017cf2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8017cf6:	0a1b      	lsrs	r3, r3, #8
 8017cf8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8017cfc:	9306      	str	r3, [sp, #24]
 8017cfe:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8017d02:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8017d06:	4460      	add	r0, ip
 8017d08:	fb0b f303 	mul.w	r3, fp, r3
 8017d0c:	fb0b f606 	mul.w	r6, fp, r6
 8017d10:	0a00      	lsrs	r0, r0, #8
 8017d12:	0a1d      	lsrs	r5, r3, #8
 8017d14:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8017d18:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8017d1c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8017d20:	441d      	add	r5, r3
 8017d22:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8017d26:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8017d2a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8017d2e:	0a2d      	lsrs	r5, r5, #8
 8017d30:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8017d34:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8017d38:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8017d3c:	0a36      	lsrs	r6, r6, #8
 8017d3e:	0a1b      	lsrs	r3, r3, #8
 8017d40:	fb05 f50e 	mul.w	r5, r5, lr
 8017d44:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8017d48:	9307      	str	r3, [sp, #28]
 8017d4a:	0e0b      	lsrs	r3, r1, #24
 8017d4c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8017d50:	fb0e f606 	mul.w	r6, lr, r6
 8017d54:	435f      	muls	r7, r3
 8017d56:	4359      	muls	r1, r3
 8017d58:	9b05      	ldr	r3, [sp, #20]
 8017d5a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017d5e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017d62:	fb03 5502 	mla	r5, r3, r2, r5
 8017d66:	9b06      	ldr	r3, [sp, #24]
 8017d68:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017d6c:	fb0e fe0b 	mul.w	lr, lr, fp
 8017d70:	44bc      	add	ip, r7
 8017d72:	f501 7780 	add.w	r7, r1, #256	; 0x100
 8017d76:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017d7a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8017d7e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017d82:	0a09      	lsrs	r1, r1, #8
 8017d84:	fb0c 5509 	mla	r5, ip, r9, r5
 8017d88:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8017d8c:	fb00 5504 	mla	r5, r0, r4, r5
 8017d90:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8017d94:	9b07      	ldr	r3, [sp, #28]
 8017d96:	fb02 6000 	mla	r0, r2, r0, r6
 8017d9a:	0a2d      	lsrs	r5, r5, #8
 8017d9c:	fb02 e20a 	mla	r2, r2, sl, lr
 8017da0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017da4:	fb09 0001 	mla	r0, r9, r1, r0
 8017da8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8017dac:	fb04 0003 	mla	r0, r4, r3, r0
 8017db0:	9b00      	ldr	r3, [sp, #0]
 8017db2:	fb04 2408 	mla	r4, r4, r8, r2
 8017db6:	9a04      	ldr	r2, [sp, #16]
 8017db8:	0a00      	lsrs	r0, r0, #8
 8017dba:	fb09 4903 	mla	r9, r9, r3, r4
 8017dbe:	9b02      	ldr	r3, [sp, #8]
 8017dc0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8017dc4:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8017dc8:	4305      	orrs	r5, r0
 8017dca:	fa5f f989 	uxtb.w	r9, r9
 8017dce:	fb03 f109 	mul.w	r1, r3, r9
 8017dd2:	9b03      	ldr	r3, [sp, #12]
 8017dd4:	fb03 f309 	mul.w	r3, r3, r9
 8017dd8:	fb02 f909 	mul.w	r9, r2, r9
 8017ddc:	1c4a      	adds	r2, r1, #1
 8017dde:	1c58      	adds	r0, r3, #1
 8017de0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8017de4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8017de8:	0c2a      	lsrs	r2, r5, #16
 8017dea:	0a2b      	lsrs	r3, r5, #8
 8017dec:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8017df0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8017df4:	0212      	lsls	r2, r2, #8
 8017df6:	00db      	lsls	r3, r3, #3
 8017df8:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8017dfc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8017e00:	4313      	orrs	r3, r2
 8017e02:	f109 0201 	add.w	r2, r9, #1
 8017e06:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8017e0a:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8017e0e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8017e12:	431d      	orrs	r5, r3
 8017e14:	9b01      	ldr	r3, [sp, #4]
 8017e16:	801d      	strh	r5, [r3, #0]
 8017e18:	b009      	add	sp, #36	; 0x24
 8017e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e1e:	2000      	movs	r0, #0
 8017e20:	e701      	b.n	8017c26 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8017e22:	2600      	movs	r6, #0
 8017e24:	4630      	mov	r0, r6
 8017e26:	e70b      	b.n	8017c40 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8017e28:	2600      	movs	r6, #0
 8017e2a:	e709      	b.n	8017c40 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8017e2c:	462e      	mov	r6, r5
 8017e2e:	e707      	b.n	8017c40 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8017e30:	2700      	movs	r7, #0
 8017e32:	e71a      	b.n	8017c6a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8017e34:	2100      	movs	r1, #0
 8017e36:	460f      	mov	r7, r1
 8017e38:	e723      	b.n	8017c82 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8017e3a:	4621      	mov	r1, r4
 8017e3c:	4627      	mov	r7, r4
 8017e3e:	e720      	b.n	8017c82 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8017e40:	2100      	movs	r1, #0
 8017e42:	e71e      	b.n	8017c82 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8017e44:	4629      	mov	r1, r5
 8017e46:	e71c      	b.n	8017c82 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

08017e48 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e4c:	b09b      	sub	sp, #108	; 0x6c
 8017e4e:	9218      	str	r2, [sp, #96]	; 0x60
 8017e50:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8017e52:	9019      	str	r0, [sp, #100]	; 0x64
 8017e54:	9116      	str	r1, [sp, #88]	; 0x58
 8017e56:	6850      	ldr	r0, [r2, #4]
 8017e58:	9307      	str	r3, [sp, #28]
 8017e5a:	6812      	ldr	r2, [r2, #0]
 8017e5c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8017e5e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8017e62:	fb00 1303 	mla	r3, r0, r3, r1
 8017e66:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8017e6a:	930a      	str	r3, [sp, #40]	; 0x28
 8017e6c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	930f      	str	r3, [sp, #60]	; 0x3c
 8017e72:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017e74:	685e      	ldr	r6, [r3, #4]
 8017e76:	3604      	adds	r6, #4
 8017e78:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	dc03      	bgt.n	8017e86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8017e7e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	f340 8373 	ble.w	801856c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8017e86:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017e88:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017e8c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8017e90:	1e48      	subs	r0, r1, #1
 8017e92:	1e57      	subs	r7, r2, #1
 8017e94:	9b07      	ldr	r3, [sp, #28]
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	f340 818f 	ble.w	80181ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8017e9c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8017e9e:	142b      	asrs	r3, r5, #16
 8017ea0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8017ea4:	d406      	bmi.n	8017eb4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8017ea6:	4584      	cmp	ip, r0
 8017ea8:	da04      	bge.n	8017eb4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	db02      	blt.n	8017eb4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8017eae:	42bb      	cmp	r3, r7
 8017eb0:	f2c0 8184 	blt.w	80181bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8017eb4:	f11c 0c01 	adds.w	ip, ip, #1
 8017eb8:	f100 8172 	bmi.w	80181a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8017ebc:	4561      	cmp	r1, ip
 8017ebe:	f2c0 816f 	blt.w	80181a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8017ec2:	3301      	adds	r3, #1
 8017ec4:	f100 816c 	bmi.w	80181a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8017ec8:	429a      	cmp	r2, r3
 8017eca:	f2c0 8169 	blt.w	80181a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8017ece:	9b07      	ldr	r3, [sp, #28]
 8017ed0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8017ed2:	9317      	str	r3, [sp, #92]	; 0x5c
 8017ed4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	f340 818e 	ble.w	80181f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8017edc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017ede:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8017ee2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8017ee6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8017eea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017eec:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8017ef0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017ef2:	141b      	asrs	r3, r3, #16
 8017ef4:	f100 81d1 	bmi.w	801829a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8017ef8:	f101 38ff 	add.w	r8, r1, #4294967295
 8017efc:	4543      	cmp	r3, r8
 8017efe:	f280 81cc 	bge.w	801829a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8017f02:	f1bc 0f00 	cmp.w	ip, #0
 8017f06:	f2c0 81c8 	blt.w	801829a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8017f0a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8017f0e:	45c4      	cmp	ip, r8
 8017f10:	f280 81c3 	bge.w	801829a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8017f14:	b209      	sxth	r1, r1
 8017f16:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017f18:	fb0c 3301 	mla	r3, ip, r1, r3
 8017f1c:	eb04 0803 	add.w	r8, r4, r3
 8017f20:	5ce3      	ldrb	r3, [r4, r3]
 8017f22:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8017f26:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8017f2a:	2a00      	cmp	r2, #0
 8017f2c:	f000 81aa 	beq.w	8018284 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8017f30:	f898 c001 	ldrb.w	ip, [r8, #1]
 8017f34:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8017f38:	940b      	str	r4, [sp, #44]	; 0x2c
 8017f3a:	0e24      	lsrs	r4, r4, #24
 8017f3c:	9412      	str	r4, [sp, #72]	; 0x48
 8017f3e:	b178      	cbz	r0, 8017f60 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8017f40:	eb08 0c01 	add.w	ip, r8, r1
 8017f44:	f818 1001 	ldrb.w	r1, [r8, r1]
 8017f48:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017f4c:	9108      	str	r1, [sp, #32]
 8017f4e:	0e09      	lsrs	r1, r1, #24
 8017f50:	9110      	str	r1, [sp, #64]	; 0x40
 8017f52:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8017f56:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017f5a:	910c      	str	r1, [sp, #48]	; 0x30
 8017f5c:	0e09      	lsrs	r1, r1, #24
 8017f5e:	9113      	str	r1, [sp, #76]	; 0x4c
 8017f60:	b292      	uxth	r2, r2
 8017f62:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017f64:	b280      	uxth	r0, r0
 8017f66:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017f68:	fb02 f900 	mul.w	r9, r2, r0
 8017f6c:	0112      	lsls	r2, r2, #4
 8017f6e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8017f72:	eba2 0809 	sub.w	r8, r2, r9
 8017f76:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8017f7a:	b280      	uxth	r0, r0
 8017f7c:	fa1f f888 	uxth.w	r8, r8
 8017f80:	1a12      	subs	r2, r2, r0
 8017f82:	fb08 f101 	mul.w	r1, r8, r1
 8017f86:	b292      	uxth	r2, r2
 8017f88:	fb02 110e 	mla	r1, r2, lr, r1
 8017f8c:	fb00 1104 	mla	r1, r0, r4, r1
 8017f90:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017f92:	fb09 1104 	mla	r1, r9, r4, r1
 8017f96:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8017f9a:	2900      	cmp	r1, #0
 8017f9c:	f000 80f5 	beq.w	801818a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8017fa0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8017fa4:	d01b      	beq.n	8017fde <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8017fa6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8017faa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017fae:	fb0e fa0a 	mul.w	sl, lr, sl
 8017fb2:	fb0e fe03 	mul.w	lr, lr, r3
 8017fb6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8017fba:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8017fbe:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8017fc2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017fc6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8017fca:	4453      	add	r3, sl
 8017fcc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017fd0:	0a1b      	lsrs	r3, r3, #8
 8017fd2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8017fd6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017fda:	ea43 030c 	orr.w	r3, r3, ip
 8017fde:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017fe0:	2cff      	cmp	r4, #255	; 0xff
 8017fe2:	d021      	beq.n	8018028 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8017fe4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017fe6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017fea:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017fec:	fb04 fb0b 	mul.w	fp, r4, fp
 8017ff0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017ff2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017ff6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017ff8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8017ffc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018000:	fb04 fa0a 	mul.w	sl, r4, sl
 8018004:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018008:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801800c:	44de      	add	lr, fp
 801800e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018012:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018016:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801801a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801801e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018022:	ea4e 040a 	orr.w	r4, lr, sl
 8018026:	940b      	str	r4, [sp, #44]	; 0x2c
 8018028:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801802a:	2cff      	cmp	r4, #255	; 0xff
 801802c:	d021      	beq.n	8018072 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801802e:	9c08      	ldr	r4, [sp, #32]
 8018030:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018034:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018036:	fb04 fb0b 	mul.w	fp, r4, fp
 801803a:	9c08      	ldr	r4, [sp, #32]
 801803c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018040:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018042:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018046:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801804a:	fb04 fa0a 	mul.w	sl, r4, sl
 801804e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018052:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018056:	44de      	add	lr, fp
 8018058:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801805c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018060:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018064:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018068:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801806c:	ea4e 040a 	orr.w	r4, lr, sl
 8018070:	9408      	str	r4, [sp, #32]
 8018072:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018074:	2cff      	cmp	r4, #255	; 0xff
 8018076:	d021      	beq.n	80180bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8018078:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801807a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801807e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018080:	fb04 fb0b 	mul.w	fp, r4, fp
 8018084:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018086:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801808a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801808c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018090:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018094:	fb04 fa0a 	mul.w	sl, r4, sl
 8018098:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801809c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80180a0:	44de      	add	lr, fp
 80180a2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80180a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80180aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80180ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80180b2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80180b6:	ea4e 040a 	orr.w	r4, lr, sl
 80180ba:	940c      	str	r4, [sp, #48]	; 0x30
 80180bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80180be:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80180c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80180c6:	43c9      	mvns	r1, r1
 80180c8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80180cc:	9c08      	ldr	r4, [sp, #32]
 80180ce:	fb08 fc0c 	mul.w	ip, r8, ip
 80180d2:	fb02 cc0e 	mla	ip, r2, lr, ip
 80180d6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80180da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80180dc:	fb00 cc0e 	mla	ip, r0, lr, ip
 80180e0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80180e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80180e6:	fb09 cc0e 	mla	ip, r9, lr, ip
 80180ea:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80180ee:	fb08 f80e 	mul.w	r8, r8, lr
 80180f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80180f6:	fa5f fe81 	uxtb.w	lr, r1
 80180fa:	fb02 8303 	mla	r3, r2, r3, r8
 80180fe:	9a08      	ldr	r2, [sp, #32]
 8018100:	f8b7 8000 	ldrh.w	r8, [r7]
 8018104:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018108:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801810c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801810e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8018112:	fb00 330a 	mla	r3, r0, sl, r3
 8018116:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801811a:	ea4f 2228 	mov.w	r2, r8, asr #8
 801811e:	fb09 3900 	mla	r9, r9, r0, r3
 8018122:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8018126:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801812a:	b2c9      	uxtb	r1, r1
 801812c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8018130:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8018134:	fb02 f20e 	mul.w	r2, r2, lr
 8018138:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801813c:	fb00 f00e 	mul.w	r0, r0, lr
 8018140:	1c53      	adds	r3, r2, #1
 8018142:	fb01 f10e 	mul.w	r1, r1, lr
 8018146:	ea4c 0c09 	orr.w	ip, ip, r9
 801814a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801814e:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8018152:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8018156:	4a60      	ldr	r2, [pc, #384]	; (80182d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8018158:	b2db      	uxtb	r3, r3
 801815a:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 801815e:	1c43      	adds	r3, r0, #1
 8018160:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8018164:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8018168:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801816c:	00db      	lsls	r3, r3, #3
 801816e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8018172:	4313      	orrs	r3, r2
 8018174:	1c4a      	adds	r2, r1, #1
 8018176:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801817a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801817e:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8018182:	ea4c 0c03 	orr.w	ip, ip, r3
 8018186:	f8a7 c000 	strh.w	ip, [r7]
 801818a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801818c:	3702      	adds	r7, #2
 801818e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8018190:	441a      	add	r2, r3
 8018192:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018194:	441d      	add	r5, r3
 8018196:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018198:	9225      	str	r2, [sp, #148]	; 0x94
 801819a:	3b01      	subs	r3, #1
 801819c:	9317      	str	r3, [sp, #92]	; 0x5c
 801819e:	e699      	b.n	8017ed4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80181a0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80181a2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80181a4:	441c      	add	r4, r3
 80181a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80181a8:	441d      	add	r5, r3
 80181aa:	9b07      	ldr	r3, [sp, #28]
 80181ac:	9425      	str	r4, [sp, #148]	; 0x94
 80181ae:	3b01      	subs	r3, #1
 80181b0:	9307      	str	r3, [sp, #28]
 80181b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181b4:	3302      	adds	r3, #2
 80181b6:	930a      	str	r3, [sp, #40]	; 0x28
 80181b8:	e66c      	b.n	8017e94 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80181ba:	d024      	beq.n	8018206 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 80181bc:	9b07      	ldr	r3, [sp, #28]
 80181be:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80181c0:	3b01      	subs	r3, #1
 80181c2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80181c4:	fb00 4003 	mla	r0, r0, r3, r4
 80181c8:	1400      	asrs	r0, r0, #16
 80181ca:	f53f ae80 	bmi.w	8017ece <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80181ce:	3901      	subs	r1, #1
 80181d0:	4288      	cmp	r0, r1
 80181d2:	f6bf ae7c 	bge.w	8017ece <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80181d6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80181d8:	fb01 5303 	mla	r3, r1, r3, r5
 80181dc:	141b      	asrs	r3, r3, #16
 80181de:	f53f ae76 	bmi.w	8017ece <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80181e2:	3a01      	subs	r2, #1
 80181e4:	4293      	cmp	r3, r2
 80181e6:	f6bf ae72 	bge.w	8017ece <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80181ea:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80181ee:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80181f2:	f1bb 0f00 	cmp.w	fp, #0
 80181f6:	dc71      	bgt.n	80182dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80181f8:	9b07      	ldr	r3, [sp, #28]
 80181fa:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80181fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018200:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8018204:	930a      	str	r3, [sp, #40]	; 0x28
 8018206:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018208:	2b00      	cmp	r3, #0
 801820a:	f340 81af 	ble.w	801856c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801820e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018212:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018214:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018218:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801821c:	eef0 6a62 	vmov.f32	s13, s5
 8018220:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018224:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018228:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801822c:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8018230:	eef0 6a43 	vmov.f32	s13, s6
 8018234:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018238:	ee16 5a90 	vmov	r5, s13
 801823c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018240:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018244:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018248:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801824c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018250:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018254:	ee12 2a90 	vmov	r2, s5
 8018258:	eef0 2a47 	vmov.f32	s5, s14
 801825c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018260:	ee13 2a10 	vmov	r2, s6
 8018264:	9327      	str	r3, [sp, #156]	; 0x9c
 8018266:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018268:	eeb0 3a67 	vmov.f32	s6, s15
 801826c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018270:	9328      	str	r3, [sp, #160]	; 0xa0
 8018272:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018274:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018276:	3b01      	subs	r3, #1
 8018278:	9316      	str	r3, [sp, #88]	; 0x58
 801827a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801827c:	bf08      	it	eq
 801827e:	4613      	moveq	r3, r2
 8018280:	9307      	str	r3, [sp, #28]
 8018282:	e5f9      	b.n	8017e78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8018284:	2800      	cmp	r0, #0
 8018286:	f43f ae6b 	beq.w	8017f60 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801828a:	f818 1001 	ldrb.w	r1, [r8, r1]
 801828e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018292:	9108      	str	r1, [sp, #32]
 8018294:	0e09      	lsrs	r1, r1, #24
 8018296:	9110      	str	r1, [sp, #64]	; 0x40
 8018298:	e662      	b.n	8017f60 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801829a:	f113 0801 	adds.w	r8, r3, #1
 801829e:	f53f af74 	bmi.w	801818a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80182a2:	4541      	cmp	r1, r8
 80182a4:	f6ff af71 	blt.w	801818a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80182a8:	f11c 0801 	adds.w	r8, ip, #1
 80182ac:	f53f af6d 	bmi.w	801818a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80182b0:	45c6      	cmp	lr, r8
 80182b2:	f6ff af6a 	blt.w	801818a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80182b6:	b209      	sxth	r1, r1
 80182b8:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80182bc:	fa0f f38e 	sxth.w	r3, lr
 80182c0:	9100      	str	r1, [sp, #0]
 80182c2:	4639      	mov	r1, r7
 80182c4:	9301      	str	r3, [sp, #4]
 80182c6:	4633      	mov	r3, r6
 80182c8:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80182cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80182ce:	9819      	ldr	r0, [sp, #100]	; 0x64
 80182d0:	f7ff fc7b 	bl	8017bca <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80182d4:	e759      	b.n	801818a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80182d6:	bf00      	nop
 80182d8:	fffff800 	.word	0xfffff800
 80182dc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80182de:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80182e2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80182e4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80182e8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80182ea:	1427      	asrs	r7, r4, #16
 80182ec:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80182ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80182f2:	142b      	asrs	r3, r5, #16
 80182f4:	fb01 7303 	mla	r3, r1, r3, r7
 80182f8:	18e7      	adds	r7, r4, r3
 80182fa:	5ce3      	ldrb	r3, [r4, r3]
 80182fc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8018300:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8018304:	2a00      	cmp	r2, #0
 8018306:	f000 8127 	beq.w	8018558 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801830a:	f897 e001 	ldrb.w	lr, [r7, #1]
 801830e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8018312:	940d      	str	r4, [sp, #52]	; 0x34
 8018314:	0e24      	lsrs	r4, r4, #24
 8018316:	9414      	str	r4, [sp, #80]	; 0x50
 8018318:	b170      	cbz	r0, 8018338 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801831a:	eb07 0e01 	add.w	lr, r7, r1
 801831e:	5c79      	ldrb	r1, [r7, r1]
 8018320:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018324:	9109      	str	r1, [sp, #36]	; 0x24
 8018326:	0e09      	lsrs	r1, r1, #24
 8018328:	9111      	str	r1, [sp, #68]	; 0x44
 801832a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801832e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018332:	910e      	str	r1, [sp, #56]	; 0x38
 8018334:	0e09      	lsrs	r1, r1, #24
 8018336:	9115      	str	r1, [sp, #84]	; 0x54
 8018338:	b292      	uxth	r2, r2
 801833a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801833c:	b280      	uxth	r0, r0
 801833e:	fb02 f800 	mul.w	r8, r2, r0
 8018342:	0112      	lsls	r2, r2, #4
 8018344:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8018348:	eba2 0e08 	sub.w	lr, r2, r8
 801834c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8018350:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018352:	b280      	uxth	r0, r0
 8018354:	fa1f fe8e 	uxth.w	lr, lr
 8018358:	1a09      	subs	r1, r1, r0
 801835a:	fb0e f202 	mul.w	r2, lr, r2
 801835e:	b289      	uxth	r1, r1
 8018360:	fb01 220c 	mla	r2, r1, ip, r2
 8018364:	fb00 2204 	mla	r2, r0, r4, r2
 8018368:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801836a:	fb08 2204 	mla	r2, r8, r4, r2
 801836e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8018372:	2a00      	cmp	r2, #0
 8018374:	f000 80e5 	beq.w	8018542 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8018378:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801837c:	d019      	beq.n	80183b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 801837e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8018382:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018386:	fb0c fa0a 	mul.w	sl, ip, sl
 801838a:	fb0c fc03 	mul.w	ip, ip, r3
 801838e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018392:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018396:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801839a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801839e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80183a2:	4453      	add	r3, sl
 80183a4:	0a3f      	lsrs	r7, r7, #8
 80183a6:	0a1b      	lsrs	r3, r3, #8
 80183a8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80183ac:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80183b0:	433b      	orrs	r3, r7
 80183b2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80183b4:	2cff      	cmp	r4, #255	; 0xff
 80183b6:	d020      	beq.n	80183fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 80183b8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80183ba:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80183be:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80183c0:	4367      	muls	r7, r4
 80183c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80183c4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80183c8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80183cc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80183ce:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80183d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80183d6:	fb04 fa0a 	mul.w	sl, r4, sl
 80183da:	44bc      	add	ip, r7
 80183dc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80183e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80183e4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80183e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80183ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80183f0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80183f4:	ea4c 040a 	orr.w	r4, ip, sl
 80183f8:	940d      	str	r4, [sp, #52]	; 0x34
 80183fa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80183fc:	2cff      	cmp	r4, #255	; 0xff
 80183fe:	d020      	beq.n	8018442 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8018400:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018402:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018406:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018408:	4367      	muls	r7, r4
 801840a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801840c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018410:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018414:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018416:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801841a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801841e:	fb04 fa0a 	mul.w	sl, r4, sl
 8018422:	44bc      	add	ip, r7
 8018424:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8018428:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801842c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018430:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018434:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018438:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801843c:	ea4c 040a 	orr.w	r4, ip, sl
 8018440:	9409      	str	r4, [sp, #36]	; 0x24
 8018442:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8018444:	2cff      	cmp	r4, #255	; 0xff
 8018446:	d020      	beq.n	801848a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8018448:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801844a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801844e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8018450:	4367      	muls	r7, r4
 8018452:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018454:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018458:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801845c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801845e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018462:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018466:	fb04 fa0a 	mul.w	sl, r4, sl
 801846a:	44bc      	add	ip, r7
 801846c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8018470:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018474:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018478:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801847c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018480:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018484:	ea4c 040a 	orr.w	r4, ip, sl
 8018488:	940e      	str	r4, [sp, #56]	; 0x38
 801848a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801848c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8018490:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018494:	43d2      	mvns	r2, r2
 8018496:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801849a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801849c:	b2d2      	uxtb	r2, r2
 801849e:	fb0e f707 	mul.w	r7, lr, r7
 80184a2:	fb01 770c 	mla	r7, r1, ip, r7
 80184a6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80184aa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80184ac:	fb00 770c 	mla	r7, r0, ip, r7
 80184b0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80184b4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80184b6:	fb08 770c 	mla	r7, r8, ip, r7
 80184ba:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80184be:	fb0e fe0c 	mul.w	lr, lr, ip
 80184c2:	0a3f      	lsrs	r7, r7, #8
 80184c4:	fb01 e303 	mla	r3, r1, r3, lr
 80184c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80184ca:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80184ce:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80184d2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80184d4:	fb00 330a 	mla	r3, r0, sl, r3
 80184d8:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80184dc:	fb08 3c0c 	mla	ip, r8, ip, r3
 80184e0:	f8b9 3000 	ldrh.w	r3, [r9]
 80184e4:	1218      	asrs	r0, r3, #8
 80184e6:	10d9      	asrs	r1, r3, #3
 80184e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80184ec:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80184f0:	00db      	lsls	r3, r3, #3
 80184f2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80184f6:	4350      	muls	r0, r2
 80184f8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80184fc:	b2db      	uxtb	r3, r3
 80184fe:	4351      	muls	r1, r2
 8018500:	ea47 070c 	orr.w	r7, r7, ip
 8018504:	4353      	muls	r3, r2
 8018506:	1c42      	adds	r2, r0, #1
 8018508:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801850c:	0c3a      	lsrs	r2, r7, #16
 801850e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8018512:	4a18      	ldr	r2, [pc, #96]	; (8018574 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8018514:	b2c0      	uxtb	r0, r0
 8018516:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801851a:	1c4a      	adds	r2, r1, #1
 801851c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8018520:	0a3a      	lsrs	r2, r7, #8
 8018522:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8018526:	00c9      	lsls	r1, r1, #3
 8018528:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801852c:	4301      	orrs	r1, r0
 801852e:	1c58      	adds	r0, r3, #1
 8018530:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8018534:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8018538:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 801853c:	4308      	orrs	r0, r1
 801853e:	f8a9 0000 	strh.w	r0, [r9]
 8018542:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018544:	f109 0902 	add.w	r9, r9, #2
 8018548:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801854a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801854e:	441a      	add	r2, r3
 8018550:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018552:	9225      	str	r2, [sp, #148]	; 0x94
 8018554:	441d      	add	r5, r3
 8018556:	e64c      	b.n	80181f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8018558:	2800      	cmp	r0, #0
 801855a:	f43f aeed 	beq.w	8018338 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801855e:	5c79      	ldrb	r1, [r7, r1]
 8018560:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018564:	9109      	str	r1, [sp, #36]	; 0x24
 8018566:	0e09      	lsrs	r1, r1, #24
 8018568:	9111      	str	r1, [sp, #68]	; 0x44
 801856a:	e6e5      	b.n	8018338 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801856c:	b01b      	add	sp, #108	; 0x6c
 801856e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018572:	bf00      	nop
 8018574:	fffff800 	.word	0xfffff800

08018578 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8018578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801857c:	b085      	sub	sp, #20
 801857e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8018582:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8018586:	2800      	cmp	r0, #0
 8018588:	9103      	str	r1, [sp, #12]
 801858a:	fb00 7406 	mla	r4, r0, r6, r7
 801858e:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8018592:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8018596:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 801859a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801859e:	eb03 0904 	add.w	r9, r3, r4
 80185a2:	9501      	str	r5, [sp, #4]
 80185a4:	f2c0 8150 	blt.w	8018848 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80185a8:	4583      	cmp	fp, r0
 80185aa:	f340 814d 	ble.w	8018848 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80185ae:	2f00      	cmp	r7, #0
 80185b0:	f2c0 8146 	blt.w	8018840 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80185b4:	42be      	cmp	r6, r7
 80185b6:	f340 8143 	ble.w	8018840 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80185ba:	f813 c004 	ldrb.w	ip, [r3, r4]
 80185be:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 80185c2:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80185c6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80185ca:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 80185ce:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80185d2:	4355      	muls	r5, r2
 80185d4:	fb0c f203 	mul.w	r2, ip, r3
 80185d8:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80185dc:	f605 0501 	addw	r5, r5, #2049	; 0x801
 80185e0:	441d      	add	r5, r3
 80185e2:	f102 0320 	add.w	r3, r2, #32
 80185e6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80185ea:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 80185ee:	0a1b      	lsrs	r3, r3, #8
 80185f0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80185f4:	431c      	orrs	r4, r3
 80185f6:	1c7b      	adds	r3, r7, #1
 80185f8:	f100 812b 	bmi.w	8018852 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 80185fc:	429e      	cmp	r6, r3
 80185fe:	f340 8128 	ble.w	8018852 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8018602:	2900      	cmp	r1, #0
 8018604:	f000 8128 	beq.w	8018858 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8018608:	9a01      	ldr	r2, [sp, #4]
 801860a:	f899 3001 	ldrb.w	r3, [r9, #1]
 801860e:	8855      	ldrh	r5, [r2, #2]
 8018610:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8018614:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8018618:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801861c:	fb08 f802 	mul.w	r8, r8, r2
 8018620:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8018624:	435d      	muls	r5, r3
 8018626:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801862a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801862e:	44d0      	add	r8, sl
 8018630:	f105 0a20 	add.w	sl, r5, #32
 8018634:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8018638:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801863c:	0a2d      	lsrs	r5, r5, #8
 801863e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018642:	432a      	orrs	r2, r5
 8018644:	3001      	adds	r0, #1
 8018646:	f100 810d 	bmi.w	8018864 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801864a:	4583      	cmp	fp, r0
 801864c:	f340 810a 	ble.w	8018864 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8018650:	f1be 0f00 	cmp.w	lr, #0
 8018654:	f000 810b 	beq.w	801886e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8018658:	2f00      	cmp	r7, #0
 801865a:	f2c0 8100 	blt.w	801885e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801865e:	42be      	cmp	r6, r7
 8018660:	f340 80fd 	ble.w	801885e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8018664:	9801      	ldr	r0, [sp, #4]
 8018666:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801866a:	f819 5006 	ldrb.w	r5, [r9, r6]
 801866e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8018672:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8018676:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 801867a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801867e:	fb0a fa00 	mul.w	sl, sl, r0
 8018682:	fb05 f808 	mul.w	r8, r5, r8
 8018686:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801868a:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801868e:	4482      	add	sl, r0
 8018690:	f108 0020 	add.w	r0, r8, #32
 8018694:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8018698:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801869c:	0a00      	lsrs	r0, r0, #8
 801869e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80186a2:	ea4b 0b00 	orr.w	fp, fp, r0
 80186a6:	3701      	adds	r7, #1
 80186a8:	f100 80e6 	bmi.w	8018878 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80186ac:	42be      	cmp	r6, r7
 80186ae:	f340 80e3 	ble.w	8018878 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80186b2:	2900      	cmp	r1, #0
 80186b4:	f000 80e3 	beq.w	801887e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 80186b8:	3601      	adds	r6, #1
 80186ba:	9801      	ldr	r0, [sp, #4]
 80186bc:	f819 7006 	ldrb.w	r7, [r9, r6]
 80186c0:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80186c4:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80186c8:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 80186cc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80186d0:	fb09 f906 	mul.w	r9, r9, r6
 80186d4:	fb07 f800 	mul.w	r8, r7, r0
 80186d8:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80186dc:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80186e0:	f609 0901 	addw	r9, r9, #2049	; 0x801
 80186e4:	44d1      	add	r9, sl
 80186e6:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80186ea:	f108 0020 	add.w	r0, r8, #32
 80186ee:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80186f2:	0a00      	lsrs	r0, r0, #8
 80186f4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80186f8:	4330      	orrs	r0, r6
 80186fa:	b28e      	uxth	r6, r1
 80186fc:	fa1f f98e 	uxth.w	r9, lr
 8018700:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8018704:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8018708:	fb06 f809 	mul.w	r8, r6, r9
 801870c:	0136      	lsls	r6, r6, #4
 801870e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8018712:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8018716:	9601      	str	r6, [sp, #4]
 8018718:	ea4a 0404 	orr.w	r4, sl, r4
 801871c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8018720:	fa1f f689 	uxth.w	r6, r9
 8018724:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8018728:	fb11 f90e 	smulbb	r9, r1, lr
 801872c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8018730:	9602      	str	r6, [sp, #8]
 8018732:	4626      	mov	r6, r4
 8018734:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8018738:	f1ce 0410 	rsb	r4, lr, #16
 801873c:	ea4a 0202 	orr.w	r2, sl, r2
 8018740:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8018744:	1a64      	subs	r4, r4, r1
 8018746:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801874a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801874e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8018752:	434a      	muls	r2, r1
 8018754:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8018758:	ea4a 0000 	orr.w	r0, sl, r0
 801875c:	9903      	ldr	r1, [sp, #12]
 801875e:	fb04 2406 	mla	r4, r4, r6, r2
 8018762:	9e02      	ldr	r6, [sp, #8]
 8018764:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8018768:	fb09 4200 	mla	r2, r9, r0, r4
 801876c:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8018770:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8018774:	8808      	ldrh	r0, [r1, #0]
 8018776:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801877a:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 801877e:	ea44 0b0b 	orr.w	fp, r4, fp
 8018782:	9c01      	ldr	r4, [sp, #4]
 8018784:	b289      	uxth	r1, r1
 8018786:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 801878a:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801878e:	1ba4      	subs	r4, r4, r6
 8018790:	9e01      	ldr	r6, [sp, #4]
 8018792:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8018796:	eba6 0608 	sub.w	r6, r6, r8
 801879a:	b2a4      	uxth	r4, r4
 801879c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80187a0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80187a4:	b2b6      	uxth	r6, r6
 80187a6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80187aa:	4373      	muls	r3, r6
 80187ac:	ea42 0e0e 	orr.w	lr, r2, lr
 80187b0:	fb0c 3304 	mla	r3, ip, r4, r3
 80187b4:	9c02      	ldr	r4, [sp, #8]
 80187b6:	fa1f f28e 	uxth.w	r2, lr
 80187ba:	fb04 3505 	mla	r5, r4, r5, r3
 80187be:	10d4      	asrs	r4, r2, #3
 80187c0:	fb08 5707 	mla	r7, r8, r7, r5
 80187c4:	1215      	asrs	r5, r2, #8
 80187c6:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80187ca:	00d2      	lsls	r2, r2, #3
 80187cc:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80187d0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80187d4:	b2d2      	uxtb	r2, r2
 80187d6:	434f      	muls	r7, r1
 80187d8:	1c7b      	adds	r3, r7, #1
 80187da:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80187de:	1203      	asrs	r3, r0, #8
 80187e0:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 80187e4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80187e8:	b2ff      	uxtb	r7, r7
 80187ea:	fb13 f307 	smulbb	r3, r3, r7
 80187ee:	fb05 3501 	mla	r5, r5, r1, r3
 80187f2:	10c3      	asrs	r3, r0, #3
 80187f4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80187f8:	b2ad      	uxth	r5, r5
 80187fa:	fb13 f307 	smulbb	r3, r3, r7
 80187fe:	fb04 3401 	mla	r4, r4, r1, r3
 8018802:	00c3      	lsls	r3, r0, #3
 8018804:	b2db      	uxtb	r3, r3
 8018806:	b2a4      	uxth	r4, r4
 8018808:	fb13 f307 	smulbb	r3, r3, r7
 801880c:	fb02 3101 	mla	r1, r2, r1, r3
 8018810:	1c6b      	adds	r3, r5, #1
 8018812:	1c62      	adds	r2, r4, #1
 8018814:	b289      	uxth	r1, r1
 8018816:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801881a:	1c4b      	adds	r3, r1, #1
 801881c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8018820:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8018824:	9a03      	ldr	r2, [sp, #12]
 8018826:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801882a:	0964      	lsrs	r4, r4, #5
 801882c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8018830:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8018834:	432b      	orrs	r3, r5
 8018836:	4323      	orrs	r3, r4
 8018838:	8013      	strh	r3, [r2, #0]
 801883a:	b005      	add	sp, #20
 801883c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018840:	f04f 0c00 	mov.w	ip, #0
 8018844:	4664      	mov	r4, ip
 8018846:	e6d6      	b.n	80185f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8018848:	2300      	movs	r3, #0
 801884a:	469c      	mov	ip, r3
 801884c:	461a      	mov	r2, r3
 801884e:	461c      	mov	r4, r3
 8018850:	e6f8      	b.n	8018644 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8018852:	2300      	movs	r3, #0
 8018854:	461a      	mov	r2, r3
 8018856:	e6f5      	b.n	8018644 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8018858:	460b      	mov	r3, r1
 801885a:	460a      	mov	r2, r1
 801885c:	e6f2      	b.n	8018644 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801885e:	2500      	movs	r5, #0
 8018860:	46ab      	mov	fp, r5
 8018862:	e720      	b.n	80186a6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8018864:	2700      	movs	r7, #0
 8018866:	463d      	mov	r5, r7
 8018868:	4638      	mov	r0, r7
 801886a:	46bb      	mov	fp, r7
 801886c:	e745      	b.n	80186fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801886e:	4677      	mov	r7, lr
 8018870:	4675      	mov	r5, lr
 8018872:	4670      	mov	r0, lr
 8018874:	46f3      	mov	fp, lr
 8018876:	e740      	b.n	80186fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8018878:	2700      	movs	r7, #0
 801887a:	4638      	mov	r0, r7
 801887c:	e73d      	b.n	80186fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801887e:	460f      	mov	r7, r1
 8018880:	4608      	mov	r0, r1
 8018882:	e73a      	b.n	80186fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08018884 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018888:	b097      	sub	sp, #92	; 0x5c
 801888a:	9214      	str	r2, [sp, #80]	; 0x50
 801888c:	9308      	str	r3, [sp, #32]
 801888e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8018890:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8018894:	9015      	str	r0, [sp, #84]	; 0x54
 8018896:	9312      	str	r3, [sp, #72]	; 0x48
 8018898:	6850      	ldr	r0, [r2, #4]
 801889a:	9111      	str	r1, [sp, #68]	; 0x44
 801889c:	6812      	ldr	r2, [r2, #0]
 801889e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80188a2:	fb00 1303 	mla	r3, r0, r3, r1
 80188a6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80188aa:	9309      	str	r3, [sp, #36]	; 0x24
 80188ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80188b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80188b4:	685b      	ldr	r3, [r3, #4]
 80188b6:	930c      	str	r3, [sp, #48]	; 0x30
 80188b8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80188bc:	930a      	str	r3, [sp, #40]	; 0x28
 80188be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	dc03      	bgt.n	80188cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80188c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	f340 83cd 	ble.w	8019066 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 80188cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80188ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80188d2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80188d6:	1e48      	subs	r0, r1, #1
 80188d8:	1e55      	subs	r5, r2, #1
 80188da:	9b08      	ldr	r3, [sp, #32]
 80188dc:	2b00      	cmp	r3, #0
 80188de:	f340 81a5 	ble.w	8018c2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 80188e2:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80188e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80188e6:	1436      	asrs	r6, r6, #16
 80188e8:	ea4f 4323 	mov.w	r3, r3, asr #16
 80188ec:	d406      	bmi.n	80188fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80188ee:	4286      	cmp	r6, r0
 80188f0:	da04      	bge.n	80188fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	db02      	blt.n	80188fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80188f6:	42ab      	cmp	r3, r5
 80188f8:	f2c0 8199 	blt.w	8018c2e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80188fc:	3601      	adds	r6, #1
 80188fe:	f100 8186 	bmi.w	8018c0e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8018902:	42b1      	cmp	r1, r6
 8018904:	f2c0 8183 	blt.w	8018c0e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8018908:	3301      	adds	r3, #1
 801890a:	f100 8180 	bmi.w	8018c0e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801890e:	429a      	cmp	r2, r3
 8018910:	f2c0 817d 	blt.w	8018c0e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8018914:	9b08      	ldr	r3, [sp, #32]
 8018916:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801891a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801891c:	9313      	str	r3, [sp, #76]	; 0x4c
 801891e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018920:	2b00      	cmp	r3, #0
 8018922:	f340 81a6 	ble.w	8018c72 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8018926:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018928:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801892a:	1418      	asrs	r0, r3, #16
 801892c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801892e:	142d      	asrs	r5, r5, #16
 8018930:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8018934:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018936:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801893a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801893c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018940:	f100 81fa 	bmi.w	8018d38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8018944:	f102 3eff 	add.w	lr, r2, #4294967295
 8018948:	4575      	cmp	r5, lr
 801894a:	f280 81f5 	bge.w	8018d38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801894e:	2800      	cmp	r0, #0
 8018950:	f2c0 81f2 	blt.w	8018d38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8018954:	f103 3eff 	add.w	lr, r3, #4294967295
 8018958:	4570      	cmp	r0, lr
 801895a:	f280 81ed 	bge.w	8018d38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801895e:	b212      	sxth	r2, r2
 8018960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018962:	fa1f fe81 	uxth.w	lr, r1
 8018966:	fb00 5002 	mla	r0, r0, r2, r5
 801896a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801896e:	eb03 0a00 	add.w	sl, r3, r0
 8018972:	f813 9000 	ldrb.w	r9, [r3, r0]
 8018976:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801897a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801897e:	b29b      	uxth	r3, r3
 8018980:	f1bc 0f00 	cmp.w	ip, #0
 8018984:	f000 81bb 	beq.w	8018cfe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8018988:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801898c:	eb0a 0b02 	add.w	fp, sl, r2
 8018990:	fa1f fa8c 	uxth.w	sl, ip
 8018994:	940d      	str	r4, [sp, #52]	; 0x34
 8018996:	fb0a fe0e 	mul.w	lr, sl, lr
 801899a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801899e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80189a2:	eba5 050e 	sub.w	r5, r5, lr
 80189a6:	940e      	str	r4, [sp, #56]	; 0x38
 80189a8:	fa1f fa8a 	uxth.w	sl, sl
 80189ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80189ae:	b2ad      	uxth	r5, r5
 80189b0:	eba3 030a 	sub.w	r3, r3, sl
 80189b4:	fb08 f505 	mul.w	r5, r8, r5
 80189b8:	b29b      	uxth	r3, r3
 80189ba:	fb09 5303 	mla	r3, r9, r3, r5
 80189be:	fb0a 3304 	mla	r3, sl, r4, r3
 80189c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80189c4:	fb0e 3304 	mla	r3, lr, r4, r3
 80189c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	f000 8111 	beq.w	8018bf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80189d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80189d4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80189d8:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80189dc:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80189e0:	f000 8192 	beq.w	8018d08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 80189e4:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80189e8:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80189ec:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80189f0:	fb0a fe0e 	mul.w	lr, sl, lr
 80189f4:	fb09 f000 	mul.w	r0, r9, r0
 80189f8:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80189fc:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8018a00:	f100 0b20 	add.w	fp, r0, #32
 8018a04:	44ce      	add	lr, r9
 8018a06:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8018a0a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8018a0e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8018a12:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8018a16:	ea4e 0909 	orr.w	r9, lr, r9
 8018a1a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8018a1e:	8868      	ldrh	r0, [r5, #2]
 8018a20:	d019      	beq.n	8018a56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8018a22:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8018a26:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8018a2a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8018a2e:	fb0a fe0e 	mul.w	lr, sl, lr
 8018a32:	fb08 f800 	mul.w	r8, r8, r0
 8018a36:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8018a3a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8018a3e:	f108 0b20 	add.w	fp, r8, #32
 8018a42:	4486      	add	lr, r0
 8018a44:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8018a48:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8018a4c:	0a00      	lsrs	r0, r0, #8
 8018a4e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8018a52:	ea4e 0000 	orr.w	r0, lr, r0
 8018a56:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8018a5a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8018a5e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8018a62:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8018a66:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8018a6a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8018a6e:	ea4e 0909 	orr.w	r9, lr, r9
 8018a72:	ea4a 0000 	orr.w	r0, sl, r0
 8018a76:	f1bc 0f00 	cmp.w	ip, #0
 8018a7a:	f000 8147 	beq.w	8018d0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8018a7e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8018a82:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018a84:	3a01      	subs	r2, #1
 8018a86:	2cff      	cmp	r4, #255	; 0xff
 8018a88:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8018a8c:	f102 0202 	add.w	r2, r2, #2
 8018a90:	eb05 0e02 	add.w	lr, r5, r2
 8018a94:	5aaa      	ldrh	r2, [r5, r2]
 8018a96:	d018      	beq.n	8018aca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8018a98:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8018a9c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018aa0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8018aa4:	fb04 fa02 	mul.w	sl, r4, r2
 8018aa8:	fb08 f805 	mul.w	r8, r8, r5
 8018aac:	f10a 0520 	add.w	r5, sl, #32
 8018ab0:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8018ab4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8018ab8:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8018abc:	4442      	add	r2, r8
 8018abe:	0a2d      	lsrs	r5, r5, #8
 8018ac0:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8018ac4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018ac8:	432a      	orrs	r2, r5
 8018aca:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018acc:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8018ad0:	2cff      	cmp	r4, #255	; 0xff
 8018ad2:	d01a      	beq.n	8018b0a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8018ad4:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8018ad8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018adc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8018ae0:	fb04 fa05 	mul.w	sl, r4, r5
 8018ae4:	fb08 f80e 	mul.w	r8, r8, lr
 8018ae8:	f10a 0e20 	add.w	lr, sl, #32
 8018aec:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8018af0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8018af4:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8018af8:	4445      	add	r5, r8
 8018afa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018afe:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8018b02:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8018b06:	ea45 050e 	orr.w	r5, r5, lr
 8018b0a:	fb1c fe01 	smulbb	lr, ip, r1
 8018b0e:	f1cc 0810 	rsb	r8, ip, #16
 8018b12:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8018b16:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8018b1a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8018b1e:	eba8 0801 	sub.w	r8, r8, r1
 8018b22:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8018b26:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8018b2a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8018b2e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8018b32:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8018b36:	ea4a 0202 	orr.w	r2, sl, r2
 8018b3a:	4341      	muls	r1, r0
 8018b3c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8018b40:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8018b44:	fb09 1108 	mla	r1, r9, r8, r1
 8018b48:	ea4b 0505 	orr.w	r5, fp, r5
 8018b4c:	fb0c 1102 	mla	r1, ip, r2, r1
 8018b50:	fb0e 1e05 	mla	lr, lr, r5, r1
 8018b54:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8018b58:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8018b5c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018b60:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8018b64:	ea42 0e0e 	orr.w	lr, r2, lr
 8018b68:	fa1f f28e 	uxth.w	r2, lr
 8018b6c:	2bff      	cmp	r3, #255	; 0xff
 8018b6e:	d103      	bne.n	8018b78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8018b70:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018b72:	29ff      	cmp	r1, #255	; 0xff
 8018b74:	f000 80de 	beq.w	8018d34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8018b78:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018b7a:	1215      	asrs	r5, r2, #8
 8018b7c:	8838      	ldrh	r0, [r7, #0]
 8018b7e:	434b      	muls	r3, r1
 8018b80:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8018b84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018b86:	f103 0c01 	add.w	ip, r3, #1
 8018b8a:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8018b8e:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8018b92:	fa5f fc83 	uxtb.w	ip, r3
 8018b96:	1203      	asrs	r3, r0, #8
 8018b98:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8018b9c:	fb13 f30c 	smulbb	r3, r3, ip
 8018ba0:	fb05 3501 	mla	r5, r5, r1, r3
 8018ba4:	10c3      	asrs	r3, r0, #3
 8018ba6:	10d1      	asrs	r1, r2, #3
 8018ba8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8018bac:	00d2      	lsls	r2, r2, #3
 8018bae:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8018bb2:	b2ad      	uxth	r5, r5
 8018bb4:	fb13 f30c 	smulbb	r3, r3, ip
 8018bb8:	b2d2      	uxtb	r2, r2
 8018bba:	fb01 3104 	mla	r1, r1, r4, r3
 8018bbe:	00c3      	lsls	r3, r0, #3
 8018bc0:	b2db      	uxtb	r3, r3
 8018bc2:	b289      	uxth	r1, r1
 8018bc4:	fb13 f30c 	smulbb	r3, r3, ip
 8018bc8:	fb02 3304 	mla	r3, r2, r4, r3
 8018bcc:	b29a      	uxth	r2, r3
 8018bce:	1c6b      	adds	r3, r5, #1
 8018bd0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8018bd4:	1c53      	adds	r3, r2, #1
 8018bd6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8018bda:	1c4a      	adds	r2, r1, #1
 8018bdc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8018be0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8018be4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8018be8:	0949      	lsrs	r1, r1, #5
 8018bea:	432b      	orrs	r3, r5
 8018bec:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8018bf0:	430b      	orrs	r3, r1
 8018bf2:	803b      	strh	r3, [r7, #0]
 8018bf4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018bf6:	3702      	adds	r7, #2
 8018bf8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8018bfa:	4413      	add	r3, r2
 8018bfc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8018bfe:	9321      	str	r3, [sp, #132]	; 0x84
 8018c00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018c02:	441a      	add	r2, r3
 8018c04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018c06:	3b01      	subs	r3, #1
 8018c08:	9222      	str	r2, [sp, #136]	; 0x88
 8018c0a:	9313      	str	r3, [sp, #76]	; 0x4c
 8018c0c:	e687      	b.n	801891e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8018c0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018c10:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8018c12:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8018c14:	4433      	add	r3, r6
 8018c16:	9321      	str	r3, [sp, #132]	; 0x84
 8018c18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018c1a:	441c      	add	r4, r3
 8018c1c:	9b08      	ldr	r3, [sp, #32]
 8018c1e:	3b01      	subs	r3, #1
 8018c20:	9422      	str	r4, [sp, #136]	; 0x88
 8018c22:	9308      	str	r3, [sp, #32]
 8018c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c26:	3302      	adds	r3, #2
 8018c28:	9309      	str	r3, [sp, #36]	; 0x24
 8018c2a:	e656      	b.n	80188da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8018c2c:	d028      	beq.n	8018c80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8018c2e:	9b08      	ldr	r3, [sp, #32]
 8018c30:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8018c32:	3b01      	subs	r3, #1
 8018c34:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8018c36:	fb00 5003 	mla	r0, r0, r3, r5
 8018c3a:	1400      	asrs	r0, r0, #16
 8018c3c:	f53f ae6a 	bmi.w	8018914 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018c40:	3901      	subs	r1, #1
 8018c42:	4288      	cmp	r0, r1
 8018c44:	f6bf ae66 	bge.w	8018914 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018c48:	9924      	ldr	r1, [sp, #144]	; 0x90
 8018c4a:	9822      	ldr	r0, [sp, #136]	; 0x88
 8018c4c:	fb01 0303 	mla	r3, r1, r3, r0
 8018c50:	141b      	asrs	r3, r3, #16
 8018c52:	f53f ae5f 	bmi.w	8018914 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018c56:	3a01      	subs	r2, #1
 8018c58:	4293      	cmp	r3, r2
 8018c5a:	f6bf ae5b 	bge.w	8018914 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018c5e:	9b08      	ldr	r3, [sp, #32]
 8018c60:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8018c64:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8018c68:	9313      	str	r3, [sp, #76]	; 0x4c
 8018c6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	f300 8082 	bgt.w	8018d76 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8018c72:	9b08      	ldr	r3, [sp, #32]
 8018c74:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8018c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c7a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8018c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8018c80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	f340 81ef 	ble.w	8019066 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8018c88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018c8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018c8e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018c92:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018c96:	eef0 6a62 	vmov.f32	s13, s5
 8018c9a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018c9e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018ca2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018ca6:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8018caa:	eef0 6a43 	vmov.f32	s13, s6
 8018cae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018cb2:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8018cb6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018cba:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018cbe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018cc2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018cc6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018cca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018cce:	ee12 2a90 	vmov	r2, s5
 8018cd2:	eef0 2a47 	vmov.f32	s5, s14
 8018cd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8018cda:	ee13 2a10 	vmov	r2, s6
 8018cde:	9323      	str	r3, [sp, #140]	; 0x8c
 8018ce0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018ce2:	eeb0 3a67 	vmov.f32	s6, s15
 8018ce6:	fb92 f3f3 	sdiv	r3, r2, r3
 8018cea:	9324      	str	r3, [sp, #144]	; 0x90
 8018cec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018cee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018cf0:	3b01      	subs	r3, #1
 8018cf2:	9311      	str	r3, [sp, #68]	; 0x44
 8018cf4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018cf6:	bf08      	it	eq
 8018cf8:	4613      	moveq	r3, r2
 8018cfa:	9308      	str	r3, [sp, #32]
 8018cfc:	e5df      	b.n	80188be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8018cfe:	fb08 f505 	mul.w	r5, r8, r5
 8018d02:	fb09 5303 	mla	r3, r9, r3, r5
 8018d06:	e65f      	b.n	80189c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8018d08:	4681      	mov	r9, r0
 8018d0a:	e686      	b.n	8018a1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8018d0c:	f1c1 0210 	rsb	r2, r1, #16
 8018d10:	4341      	muls	r1, r0
 8018d12:	fb09 1902 	mla	r9, r9, r2, r1
 8018d16:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8018d1a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8018d1e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8018d22:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018d26:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8018d2a:	ea42 0909 	orr.w	r9, r2, r9
 8018d2e:	fa1f f289 	uxth.w	r2, r9
 8018d32:	e71b      	b.n	8018b6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8018d34:	803a      	strh	r2, [r7, #0]
 8018d36:	e75d      	b.n	8018bf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8018d38:	f115 0e01 	adds.w	lr, r5, #1
 8018d3c:	f53f af5a 	bmi.w	8018bf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8018d40:	4572      	cmp	r2, lr
 8018d42:	f6ff af57 	blt.w	8018bf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8018d46:	f110 0e01 	adds.w	lr, r0, #1
 8018d4a:	f53f af53 	bmi.w	8018bf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8018d4e:	4573      	cmp	r3, lr
 8018d50:	f6ff af50 	blt.w	8018bf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8018d54:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018d56:	b21b      	sxth	r3, r3
 8018d58:	b212      	sxth	r2, r2
 8018d5a:	9502      	str	r5, [sp, #8]
 8018d5c:	9301      	str	r3, [sp, #4]
 8018d5e:	9200      	str	r2, [sp, #0]
 8018d60:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8018d64:	e9cd c405 	strd	ip, r4, [sp, #20]
 8018d68:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8018d6c:	4639      	mov	r1, r7
 8018d6e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018d70:	f7ff fc02 	bl	8018578 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8018d74:	e73e      	b.n	8018bf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8018d76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018d78:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8018d7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018d7e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8018d82:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018d84:	fa1f fc82 	uxth.w	ip, r2
 8018d88:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018d8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018d8e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8018d92:	141f      	asrs	r7, r3, #16
 8018d94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018d96:	141b      	asrs	r3, r3, #16
 8018d98:	fb01 3707 	mla	r7, r1, r7, r3
 8018d9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018d9e:	eb03 0a07 	add.w	sl, r3, r7
 8018da2:	f813 9007 	ldrb.w	r9, [r3, r7]
 8018da6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8018daa:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8018dae:	b29b      	uxth	r3, r3
 8018db0:	2d00      	cmp	r5, #0
 8018db2:	f000 813d 	beq.w	8019030 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 8018db6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8018dba:	eb0a 0b01 	add.w	fp, sl, r1
 8018dbe:	fa1f fa85 	uxth.w	sl, r5
 8018dc2:	940f      	str	r4, [sp, #60]	; 0x3c
 8018dc4:	fb0a fc0c 	mul.w	ip, sl, ip
 8018dc8:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8018dcc:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8018dd0:	eba0 000c 	sub.w	r0, r0, ip
 8018dd4:	9410      	str	r4, [sp, #64]	; 0x40
 8018dd6:	fa1f fa8a 	uxth.w	sl, sl
 8018dda:	b280      	uxth	r0, r0
 8018ddc:	eba3 030a 	sub.w	r3, r3, sl
 8018de0:	fb08 f000 	mul.w	r0, r8, r0
 8018de4:	b29b      	uxth	r3, r3
 8018de6:	fb09 0303 	mla	r3, r9, r3, r0
 8018dea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018dec:	fb0a 3300 	mla	r3, sl, r0, r3
 8018df0:	fb0c 3304 	mla	r3, ip, r4, r3
 8018df4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	f000 810b 	beq.w	8019014 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8018dfe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018e00:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8018e04:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018e06:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8018e0a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8018e0e:	f000 8114 	beq.w	801903a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8018e12:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8018e16:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8018e1a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8018e1e:	fb0a fc0c 	mul.w	ip, sl, ip
 8018e22:	fb09 f707 	mul.w	r7, r9, r7
 8018e26:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8018e2a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8018e2e:	f107 0b20 	add.w	fp, r7, #32
 8018e32:	44cc      	add	ip, r9
 8018e34:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8018e38:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8018e3c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8018e40:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8018e44:	ea4c 0909 	orr.w	r9, ip, r9
 8018e48:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8018e4c:	8847      	ldrh	r7, [r0, #2]
 8018e4e:	d019      	beq.n	8018e84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8018e50:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8018e54:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8018e58:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8018e5c:	fb0a fc0c 	mul.w	ip, sl, ip
 8018e60:	fb08 f807 	mul.w	r8, r8, r7
 8018e64:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8018e68:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8018e6c:	f108 0b20 	add.w	fp, r8, #32
 8018e70:	44bc      	add	ip, r7
 8018e72:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8018e76:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8018e7a:	0a3f      	lsrs	r7, r7, #8
 8018e7c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8018e80:	ea4c 0707 	orr.w	r7, ip, r7
 8018e84:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8018e88:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8018e8c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8018e90:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8018e94:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8018e98:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8018e9c:	ea4c 0909 	orr.w	r9, ip, r9
 8018ea0:	ea4a 0707 	orr.w	r7, sl, r7
 8018ea4:	2d00      	cmp	r5, #0
 8018ea6:	f000 80ca 	beq.w	801903e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 8018eaa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8018eae:	3901      	subs	r1, #1
 8018eb0:	0049      	lsls	r1, r1, #1
 8018eb2:	3102      	adds	r1, #2
 8018eb4:	eb00 0c01 	add.w	ip, r0, r1
 8018eb8:	5a41      	ldrh	r1, [r0, r1]
 8018eba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018ebc:	28ff      	cmp	r0, #255	; 0xff
 8018ebe:	d019      	beq.n	8018ef4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8018ec0:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8018ec4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018ec6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8018eca:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8018ece:	fb04 fa01 	mul.w	sl, r4, r1
 8018ed2:	fb08 f800 	mul.w	r8, r8, r0
 8018ed6:	f10a 0020 	add.w	r0, sl, #32
 8018eda:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8018ede:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8018ee2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8018ee6:	4441      	add	r1, r8
 8018ee8:	0a00      	lsrs	r0, r0, #8
 8018eea:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8018eee:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8018ef2:	4301      	orrs	r1, r0
 8018ef4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018ef6:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8018efa:	2cff      	cmp	r4, #255	; 0xff
 8018efc:	d01a      	beq.n	8018f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8018efe:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8018f02:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8018f06:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8018f0a:	fb04 fa00 	mul.w	sl, r4, r0
 8018f0e:	fb08 f80c 	mul.w	r8, r8, ip
 8018f12:	f10a 0c20 	add.w	ip, sl, #32
 8018f16:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8018f1a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8018f1e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8018f22:	4440      	add	r0, r8
 8018f24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018f28:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8018f2c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8018f30:	ea40 000c 	orr.w	r0, r0, ip
 8018f34:	fb15 fc02 	smulbb	ip, r5, r2
 8018f38:	f1c5 0810 	rsb	r8, r5, #16
 8018f3c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8018f40:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8018f44:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8018f48:	eba8 0802 	sub.w	r8, r8, r2
 8018f4c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8018f50:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8018f54:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8018f58:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8018f5c:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8018f60:	ea4a 0101 	orr.w	r1, sl, r1
 8018f64:	437a      	muls	r2, r7
 8018f66:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8018f6a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8018f6e:	fb09 2208 	mla	r2, r9, r8, r2
 8018f72:	ea4b 0000 	orr.w	r0, fp, r0
 8018f76:	fb05 2201 	mla	r2, r5, r1, r2
 8018f7a:	fb0c 2200 	mla	r2, ip, r0, r2
 8018f7e:	0d57      	lsrs	r7, r2, #21
 8018f80:	0952      	lsrs	r2, r2, #5
 8018f82:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8018f86:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8018f8a:	433a      	orrs	r2, r7
 8018f8c:	2bff      	cmp	r3, #255	; 0xff
 8018f8e:	b292      	uxth	r2, r2
 8018f90:	d102      	bne.n	8018f98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8018f92:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018f94:	29ff      	cmp	r1, #255	; 0xff
 8018f96:	d063      	beq.n	8019060 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 8018f98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018f9a:	1215      	asrs	r5, r2, #8
 8018f9c:	f8be 1000 	ldrh.w	r1, [lr]
 8018fa0:	4343      	muls	r3, r0
 8018fa2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018fa4:	10cf      	asrs	r7, r1, #3
 8018fa6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8018faa:	1c58      	adds	r0, r3, #1
 8018fac:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018fb0:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8018fb4:	1208      	asrs	r0, r1, #8
 8018fb6:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8018fba:	00c9      	lsls	r1, r1, #3
 8018fbc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8018fc0:	b2db      	uxtb	r3, r3
 8018fc2:	b2c9      	uxtb	r1, r1
 8018fc4:	fb10 f003 	smulbb	r0, r0, r3
 8018fc8:	fb11 f103 	smulbb	r1, r1, r3
 8018fcc:	fb05 0504 	mla	r5, r5, r4, r0
 8018fd0:	10d0      	asrs	r0, r2, #3
 8018fd2:	fb17 f703 	smulbb	r7, r7, r3
 8018fd6:	00d2      	lsls	r2, r2, #3
 8018fd8:	b2ad      	uxth	r5, r5
 8018fda:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8018fde:	b2d2      	uxtb	r2, r2
 8018fe0:	fb00 7004 	mla	r0, r0, r4, r7
 8018fe4:	1c6b      	adds	r3, r5, #1
 8018fe6:	fb02 1204 	mla	r2, r2, r4, r1
 8018fea:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8018fee:	b292      	uxth	r2, r2
 8018ff0:	b280      	uxth	r0, r0
 8018ff2:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8018ff6:	1c57      	adds	r7, r2, #1
 8018ff8:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8018ffc:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8019000:	433d      	orrs	r5, r7
 8019002:	1c47      	adds	r7, r0, #1
 8019004:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8019008:	097f      	lsrs	r7, r7, #5
 801900a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801900e:	433d      	orrs	r5, r7
 8019010:	f8ae 5000 	strh.w	r5, [lr]
 8019014:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019016:	f10e 0e02 	add.w	lr, lr, #2
 801901a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801901c:	4413      	add	r3, r2
 801901e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8019020:	9321      	str	r3, [sp, #132]	; 0x84
 8019022:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019024:	441a      	add	r2, r3
 8019026:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019028:	3b01      	subs	r3, #1
 801902a:	9222      	str	r2, [sp, #136]	; 0x88
 801902c:	9313      	str	r3, [sp, #76]	; 0x4c
 801902e:	e61c      	b.n	8018c6a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8019030:	fb08 f000 	mul.w	r0, r8, r0
 8019034:	fb09 0303 	mla	r3, r9, r3, r0
 8019038:	e6dc      	b.n	8018df4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 801903a:	46b9      	mov	r9, r7
 801903c:	e704      	b.n	8018e48 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 801903e:	f1c2 0110 	rsb	r1, r2, #16
 8019042:	437a      	muls	r2, r7
 8019044:	fb09 2901 	mla	r9, r9, r1, r2
 8019048:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801904c:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8019050:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8019054:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019058:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801905c:	4302      	orrs	r2, r0
 801905e:	e795      	b.n	8018f8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8019060:	f8ae 2000 	strh.w	r2, [lr]
 8019064:	e7d6      	b.n	8019014 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8019066:	b017      	add	sp, #92	; 0x5c
 8019068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801906c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801906c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019070:	b085      	sub	sp, #20
 8019072:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8019076:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801907a:	2800      	cmp	r0, #0
 801907c:	9103      	str	r1, [sp, #12]
 801907e:	fb00 7406 	mla	r4, r0, r6, r7
 8019082:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8019086:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801908a:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 801908e:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8019092:	eb02 0904 	add.w	r9, r2, r4
 8019096:	9501      	str	r5, [sp, #4]
 8019098:	f2c0 8141 	blt.w	801931e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801909c:	4583      	cmp	fp, r0
 801909e:	f340 813e 	ble.w	801931e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 80190a2:	2f00      	cmp	r7, #0
 80190a4:	f2c0 8137 	blt.w	8019316 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80190a8:	42be      	cmp	r6, r7
 80190aa:	f340 8134 	ble.w	8019316 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80190ae:	f812 c004 	ldrb.w	ip, [r2, r4]
 80190b2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80190b6:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80190ba:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80190be:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 80190c2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80190c6:	4355      	muls	r5, r2
 80190c8:	fb0c f203 	mul.w	r2, ip, r3
 80190cc:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80190d0:	f605 0501 	addw	r5, r5, #2049	; 0x801
 80190d4:	441d      	add	r5, r3
 80190d6:	f102 0320 	add.w	r3, r2, #32
 80190da:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80190de:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 80190e2:	0a1b      	lsrs	r3, r3, #8
 80190e4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80190e8:	431c      	orrs	r4, r3
 80190ea:	1c7b      	adds	r3, r7, #1
 80190ec:	f100 811c 	bmi.w	8019328 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 80190f0:	429e      	cmp	r6, r3
 80190f2:	f340 8119 	ble.w	8019328 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 80190f6:	2900      	cmp	r1, #0
 80190f8:	f000 8119 	beq.w	801932e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 80190fc:	9a01      	ldr	r2, [sp, #4]
 80190fe:	f899 3001 	ldrb.w	r3, [r9, #1]
 8019102:	8855      	ldrh	r5, [r2, #2]
 8019104:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8019108:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 801910c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019110:	fb08 f802 	mul.w	r8, r8, r2
 8019114:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8019118:	435d      	muls	r5, r3
 801911a:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801911e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8019122:	44d0      	add	r8, sl
 8019124:	f105 0a20 	add.w	sl, r5, #32
 8019128:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801912c:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8019130:	0a2d      	lsrs	r5, r5, #8
 8019132:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019136:	432a      	orrs	r2, r5
 8019138:	3001      	adds	r0, #1
 801913a:	f100 80fe 	bmi.w	801933a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801913e:	4583      	cmp	fp, r0
 8019140:	f340 80fb 	ble.w	801933a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8019144:	f1be 0f00 	cmp.w	lr, #0
 8019148:	f000 80fc 	beq.w	8019344 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 801914c:	2f00      	cmp	r7, #0
 801914e:	f2c0 80f1 	blt.w	8019334 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8019152:	42be      	cmp	r6, r7
 8019154:	f340 80ee 	ble.w	8019334 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8019158:	9801      	ldr	r0, [sp, #4]
 801915a:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801915e:	f819 5006 	ldrb.w	r5, [r9, r6]
 8019162:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8019166:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801916a:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 801916e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8019172:	fb0a fa00 	mul.w	sl, sl, r0
 8019176:	fb05 f808 	mul.w	r8, r5, r8
 801917a:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801917e:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8019182:	4482      	add	sl, r0
 8019184:	f108 0020 	add.w	r0, r8, #32
 8019188:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801918c:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8019190:	0a00      	lsrs	r0, r0, #8
 8019192:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019196:	ea4b 0b00 	orr.w	fp, fp, r0
 801919a:	3701      	adds	r7, #1
 801919c:	f100 80d7 	bmi.w	801934e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 80191a0:	42be      	cmp	r6, r7
 80191a2:	f340 80d4 	ble.w	801934e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 80191a6:	2900      	cmp	r1, #0
 80191a8:	f000 80d4 	beq.w	8019354 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 80191ac:	3601      	adds	r6, #1
 80191ae:	9801      	ldr	r0, [sp, #4]
 80191b0:	f819 7006 	ldrb.w	r7, [r9, r6]
 80191b4:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80191b8:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80191bc:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 80191c0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80191c4:	fb09 f906 	mul.w	r9, r9, r6
 80191c8:	fb07 f800 	mul.w	r8, r7, r0
 80191cc:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80191d0:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80191d4:	f609 0901 	addw	r9, r9, #2049	; 0x801
 80191d8:	44d1      	add	r9, sl
 80191da:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80191de:	f108 0020 	add.w	r0, r8, #32
 80191e2:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80191e6:	0a00      	lsrs	r0, r0, #8
 80191e8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80191ec:	4330      	orrs	r0, r6
 80191ee:	b28e      	uxth	r6, r1
 80191f0:	fa1f f98e 	uxth.w	r9, lr
 80191f4:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80191f8:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80191fc:	fb06 f809 	mul.w	r8, r6, r9
 8019200:	0136      	lsls	r6, r6, #4
 8019202:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8019206:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801920a:	9601      	str	r6, [sp, #4]
 801920c:	ea4a 0404 	orr.w	r4, sl, r4
 8019210:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8019214:	fa1f f689 	uxth.w	r6, r9
 8019218:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801921c:	fb11 f90e 	smulbb	r9, r1, lr
 8019220:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8019224:	9602      	str	r6, [sp, #8]
 8019226:	4626      	mov	r6, r4
 8019228:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801922c:	f1ce 0410 	rsb	r4, lr, #16
 8019230:	ea4a 0202 	orr.w	r2, sl, r2
 8019234:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8019238:	1a64      	subs	r4, r4, r1
 801923a:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801923e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8019242:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8019246:	434a      	muls	r2, r1
 8019248:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801924c:	ea4a 0000 	orr.w	r0, sl, r0
 8019250:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8019254:	fb04 2406 	mla	r4, r4, r6, r2
 8019258:	9903      	ldr	r1, [sp, #12]
 801925a:	fb09 4200 	mla	r2, r9, r0, r4
 801925e:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8019262:	9801      	ldr	r0, [sp, #4]
 8019264:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8019268:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801926c:	8809      	ldrh	r1, [r1, #0]
 801926e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8019272:	ea44 0b0b 	orr.w	fp, r4, fp
 8019276:	9c02      	ldr	r4, [sp, #8]
 8019278:	1b00      	subs	r0, r0, r4
 801927a:	9c01      	ldr	r4, [sp, #4]
 801927c:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8019280:	eba4 0608 	sub.w	r6, r4, r8
 8019284:	b280      	uxth	r0, r0
 8019286:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801928a:	b2b6      	uxth	r6, r6
 801928c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8019290:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019294:	4373      	muls	r3, r6
 8019296:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801929a:	fb0c 3300 	mla	r3, ip, r0, r3
 801929e:	9802      	ldr	r0, [sp, #8]
 80192a0:	ea42 0e0e 	orr.w	lr, r2, lr
 80192a4:	fb00 3505 	mla	r5, r0, r5, r3
 80192a8:	120b      	asrs	r3, r1, #8
 80192aa:	10c8      	asrs	r0, r1, #3
 80192ac:	fb08 5707 	mla	r7, r8, r7, r5
 80192b0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80192b4:	00c9      	lsls	r1, r1, #3
 80192b6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80192ba:	ea6f 2727 	mvn.w	r7, r7, asr #8
 80192be:	fa1f f28e 	uxth.w	r2, lr
 80192c2:	b2c9      	uxtb	r1, r1
 80192c4:	b2ff      	uxtb	r7, r7
 80192c6:	437b      	muls	r3, r7
 80192c8:	4378      	muls	r0, r7
 80192ca:	434f      	muls	r7, r1
 80192cc:	1c59      	adds	r1, r3, #1
 80192ce:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80192d2:	1213      	asrs	r3, r2, #8
 80192d4:	f023 0307 	bic.w	r3, r3, #7
 80192d8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80192dc:	1c41      	adds	r1, r0, #1
 80192de:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80192e2:	10d1      	asrs	r1, r2, #3
 80192e4:	021b      	lsls	r3, r3, #8
 80192e6:	f021 0103 	bic.w	r1, r1, #3
 80192ea:	00d2      	lsls	r2, r2, #3
 80192ec:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80192f0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80192f4:	00c9      	lsls	r1, r1, #3
 80192f6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80192fa:	430b      	orrs	r3, r1
 80192fc:	1c79      	adds	r1, r7, #1
 80192fe:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8019302:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8019306:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801930a:	431a      	orrs	r2, r3
 801930c:	9b03      	ldr	r3, [sp, #12]
 801930e:	801a      	strh	r2, [r3, #0]
 8019310:	b005      	add	sp, #20
 8019312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019316:	f04f 0c00 	mov.w	ip, #0
 801931a:	4664      	mov	r4, ip
 801931c:	e6e5      	b.n	80190ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 801931e:	2300      	movs	r3, #0
 8019320:	469c      	mov	ip, r3
 8019322:	461a      	mov	r2, r3
 8019324:	461c      	mov	r4, r3
 8019326:	e707      	b.n	8019138 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8019328:	2300      	movs	r3, #0
 801932a:	461a      	mov	r2, r3
 801932c:	e704      	b.n	8019138 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801932e:	460b      	mov	r3, r1
 8019330:	460a      	mov	r2, r1
 8019332:	e701      	b.n	8019138 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8019334:	2500      	movs	r5, #0
 8019336:	46ab      	mov	fp, r5
 8019338:	e72f      	b.n	801919a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 801933a:	2700      	movs	r7, #0
 801933c:	463d      	mov	r5, r7
 801933e:	4638      	mov	r0, r7
 8019340:	46bb      	mov	fp, r7
 8019342:	e754      	b.n	80191ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8019344:	4677      	mov	r7, lr
 8019346:	4675      	mov	r5, lr
 8019348:	4670      	mov	r0, lr
 801934a:	46f3      	mov	fp, lr
 801934c:	e74f      	b.n	80191ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801934e:	2700      	movs	r7, #0
 8019350:	4638      	mov	r0, r7
 8019352:	e74c      	b.n	80191ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8019354:	460f      	mov	r7, r1
 8019356:	4608      	mov	r0, r1
 8019358:	e749      	b.n	80191ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

0801935c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801935c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019360:	b093      	sub	sp, #76	; 0x4c
 8019362:	9210      	str	r2, [sp, #64]	; 0x40
 8019364:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019366:	9011      	str	r0, [sp, #68]	; 0x44
 8019368:	910e      	str	r1, [sp, #56]	; 0x38
 801936a:	6850      	ldr	r0, [r2, #4]
 801936c:	9306      	str	r3, [sp, #24]
 801936e:	6812      	ldr	r2, [r2, #0]
 8019370:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8019374:	fb00 1303 	mla	r3, r0, r3, r1
 8019378:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801937c:	9307      	str	r3, [sp, #28]
 801937e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	9308      	str	r3, [sp, #32]
 8019384:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019386:	685b      	ldr	r3, [r3, #4]
 8019388:	9309      	str	r3, [sp, #36]	; 0x24
 801938a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801938c:	2b00      	cmp	r3, #0
 801938e:	dc03      	bgt.n	8019398 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019390:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019392:	2b00      	cmp	r3, #0
 8019394:	f340 83b6 	ble.w	8019b04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8019398:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801939a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801939e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80193a2:	1e48      	subs	r0, r1, #1
 80193a4:	1e55      	subs	r5, r2, #1
 80193a6:	9b06      	ldr	r3, [sp, #24]
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	f340 8165 	ble.w	8019678 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80193ae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80193b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80193b2:	1436      	asrs	r6, r6, #16
 80193b4:	ea4f 4323 	mov.w	r3, r3, asr #16
 80193b8:	d406      	bmi.n	80193c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80193ba:	4286      	cmp	r6, r0
 80193bc:	da04      	bge.n	80193c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80193be:	2b00      	cmp	r3, #0
 80193c0:	db02      	blt.n	80193c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80193c2:	42ab      	cmp	r3, r5
 80193c4:	f2c0 8159 	blt.w	801967a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80193c8:	3601      	adds	r6, #1
 80193ca:	f100 8146 	bmi.w	801965a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80193ce:	42b1      	cmp	r1, r6
 80193d0:	f2c0 8143 	blt.w	801965a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80193d4:	3301      	adds	r3, #1
 80193d6:	f100 8140 	bmi.w	801965a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80193da:	429a      	cmp	r2, r3
 80193dc:	f2c0 813d 	blt.w	801965a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80193e0:	9b06      	ldr	r3, [sp, #24]
 80193e2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80193e6:	9f07      	ldr	r7, [sp, #28]
 80193e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80193ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	f340 8166 	ble.w	80196be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80193f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80193f4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80193f6:	1418      	asrs	r0, r3, #16
 80193f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80193fa:	142d      	asrs	r5, r5, #16
 80193fc:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8019400:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019402:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8019406:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019408:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801940c:	f100 81f0 	bmi.w	80197f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8019410:	f102 3eff 	add.w	lr, r2, #4294967295
 8019414:	4575      	cmp	r5, lr
 8019416:	f280 81eb 	bge.w	80197f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801941a:	2800      	cmp	r0, #0
 801941c:	f2c0 81e8 	blt.w	80197f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8019420:	f103 3eff 	add.w	lr, r3, #4294967295
 8019424:	4570      	cmp	r0, lr
 8019426:	f280 81e3 	bge.w	80197f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801942a:	b212      	sxth	r2, r2
 801942c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801942e:	fa1f fe81 	uxth.w	lr, r1
 8019432:	fb00 5002 	mla	r0, r0, r2, r5
 8019436:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801943a:	eb03 0a00 	add.w	sl, r3, r0
 801943e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8019442:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8019446:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801944a:	b29b      	uxth	r3, r3
 801944c:	f1bc 0f00 	cmp.w	ip, #0
 8019450:	f000 817b 	beq.w	801974a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8019454:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8019458:	eb0a 0b02 	add.w	fp, sl, r2
 801945c:	fa1f fa8c 	uxth.w	sl, ip
 8019460:	940a      	str	r4, [sp, #40]	; 0x28
 8019462:	fb0a fe0e 	mul.w	lr, sl, lr
 8019466:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801946a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801946e:	eba5 050e 	sub.w	r5, r5, lr
 8019472:	940b      	str	r4, [sp, #44]	; 0x2c
 8019474:	fa1f fa8a 	uxth.w	sl, sl
 8019478:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801947a:	b2ad      	uxth	r5, r5
 801947c:	eba3 030a 	sub.w	r3, r3, sl
 8019480:	fb08 f505 	mul.w	r5, r8, r5
 8019484:	b29b      	uxth	r3, r3
 8019486:	fb09 5303 	mla	r3, r9, r3, r5
 801948a:	fb0a 3304 	mla	r3, sl, r4, r3
 801948e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019490:	fb0e 3304 	mla	r3, lr, r4, r3
 8019494:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019498:	2b00      	cmp	r3, #0
 801949a:	f000 80d1 	beq.w	8019640 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801949e:	9c08      	ldr	r4, [sp, #32]
 80194a0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80194a4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80194a8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80194ac:	f000 8152 	beq.w	8019754 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80194b0:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80194b4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80194b8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80194bc:	fb0a fe0e 	mul.w	lr, sl, lr
 80194c0:	fb09 f000 	mul.w	r0, r9, r0
 80194c4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80194c8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80194cc:	f100 0b20 	add.w	fp, r0, #32
 80194d0:	44ce      	add	lr, r9
 80194d2:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80194d6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80194da:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80194de:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80194e2:	ea4e 0909 	orr.w	r9, lr, r9
 80194e6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80194ea:	8868      	ldrh	r0, [r5, #2]
 80194ec:	d019      	beq.n	8019522 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80194ee:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80194f2:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80194f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80194fa:	fb0a fe0e 	mul.w	lr, sl, lr
 80194fe:	fb08 f800 	mul.w	r8, r8, r0
 8019502:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8019506:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801950a:	f108 0b20 	add.w	fp, r8, #32
 801950e:	4486      	add	lr, r0
 8019510:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8019514:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8019518:	0a00      	lsrs	r0, r0, #8
 801951a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801951e:	ea4e 0000 	orr.w	r0, lr, r0
 8019522:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8019526:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801952a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801952e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8019532:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8019536:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801953a:	ea4e 0909 	orr.w	r9, lr, r9
 801953e:	ea4a 0000 	orr.w	r0, sl, r0
 8019542:	f1bc 0f00 	cmp.w	ip, #0
 8019546:	f000 8107 	beq.w	8019758 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 801954a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801954e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019550:	3a01      	subs	r2, #1
 8019552:	2cff      	cmp	r4, #255	; 0xff
 8019554:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8019558:	f102 0202 	add.w	r2, r2, #2
 801955c:	eb05 0e02 	add.w	lr, r5, r2
 8019560:	5aaa      	ldrh	r2, [r5, r2]
 8019562:	d018      	beq.n	8019596 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8019564:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8019568:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801956c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8019570:	fb04 fa02 	mul.w	sl, r4, r2
 8019574:	fb08 f805 	mul.w	r8, r8, r5
 8019578:	f10a 0520 	add.w	r5, sl, #32
 801957c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8019580:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8019584:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8019588:	4442      	add	r2, r8
 801958a:	0a2d      	lsrs	r5, r5, #8
 801958c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8019590:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019594:	432a      	orrs	r2, r5
 8019596:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019598:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801959c:	2cff      	cmp	r4, #255	; 0xff
 801959e:	d01a      	beq.n	80195d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80195a0:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80195a4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80195a8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80195ac:	fb04 fa05 	mul.w	sl, r4, r5
 80195b0:	fb08 f80e 	mul.w	r8, r8, lr
 80195b4:	f10a 0e20 	add.w	lr, sl, #32
 80195b8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80195bc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80195c0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80195c4:	4445      	add	r5, r8
 80195c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80195ca:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80195ce:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80195d2:	ea45 050e 	orr.w	r5, r5, lr
 80195d6:	fb1c fe01 	smulbb	lr, ip, r1
 80195da:	f1cc 0810 	rsb	r8, ip, #16
 80195de:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80195e2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80195e6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80195ea:	eba8 0801 	sub.w	r8, r8, r1
 80195ee:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80195f2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80195f6:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80195fa:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80195fe:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8019602:	ea4a 0202 	orr.w	r2, sl, r2
 8019606:	4341      	muls	r1, r0
 8019608:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801960c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8019610:	fb09 1108 	mla	r1, r9, r8, r1
 8019614:	ea4b 0505 	orr.w	r5, fp, r5
 8019618:	fb0c 1102 	mla	r1, ip, r2, r1
 801961c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8019620:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8019624:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8019628:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801962c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8019630:	ea42 0e0e 	orr.w	lr, r2, lr
 8019634:	fa1f f28e 	uxth.w	r2, lr
 8019638:	2bff      	cmp	r3, #255	; 0xff
 801963a:	f040 80a1 	bne.w	8019780 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801963e:	803a      	strh	r2, [r7, #0]
 8019640:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019642:	3702      	adds	r7, #2
 8019644:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8019646:	4413      	add	r3, r2
 8019648:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801964a:	931d      	str	r3, [sp, #116]	; 0x74
 801964c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801964e:	441a      	add	r2, r3
 8019650:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019652:	3b01      	subs	r3, #1
 8019654:	921e      	str	r2, [sp, #120]	; 0x78
 8019656:	930f      	str	r3, [sp, #60]	; 0x3c
 8019658:	e6c7      	b.n	80193ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801965a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801965c:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801965e:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8019660:	4433      	add	r3, r6
 8019662:	931d      	str	r3, [sp, #116]	; 0x74
 8019664:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019666:	441c      	add	r4, r3
 8019668:	9b06      	ldr	r3, [sp, #24]
 801966a:	3b01      	subs	r3, #1
 801966c:	941e      	str	r4, [sp, #120]	; 0x78
 801966e:	9306      	str	r3, [sp, #24]
 8019670:	9b07      	ldr	r3, [sp, #28]
 8019672:	3302      	adds	r3, #2
 8019674:	9307      	str	r3, [sp, #28]
 8019676:	e696      	b.n	80193a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019678:	d028      	beq.n	80196cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801967a:	9b06      	ldr	r3, [sp, #24]
 801967c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801967e:	3b01      	subs	r3, #1
 8019680:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8019682:	fb00 5003 	mla	r0, r0, r3, r5
 8019686:	1400      	asrs	r0, r0, #16
 8019688:	f53f aeaa 	bmi.w	80193e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801968c:	3901      	subs	r1, #1
 801968e:	4288      	cmp	r0, r1
 8019690:	f6bf aea6 	bge.w	80193e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019694:	9920      	ldr	r1, [sp, #128]	; 0x80
 8019696:	981e      	ldr	r0, [sp, #120]	; 0x78
 8019698:	fb01 0303 	mla	r3, r1, r3, r0
 801969c:	141b      	asrs	r3, r3, #16
 801969e:	f53f ae9f 	bmi.w	80193e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80196a2:	3a01      	subs	r2, #1
 80196a4:	4293      	cmp	r3, r2
 80196a6:	f6bf ae9b 	bge.w	80193e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80196aa:	9b06      	ldr	r3, [sp, #24]
 80196ac:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80196b0:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80196b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80196b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	f300 80b6 	bgt.w	801982a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 80196be:	9b06      	ldr	r3, [sp, #24]
 80196c0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80196c4:	9b07      	ldr	r3, [sp, #28]
 80196c6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80196ca:	9307      	str	r3, [sp, #28]
 80196cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	f340 8218 	ble.w	8019b04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 80196d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80196d8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80196da:	ee30 0a04 	vadd.f32	s0, s0, s8
 80196de:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80196e2:	eef0 6a62 	vmov.f32	s13, s5
 80196e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80196ea:	ee31 1a05 	vadd.f32	s2, s2, s10
 80196ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80196f2:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80196f6:	eef0 6a43 	vmov.f32	s13, s6
 80196fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80196fe:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8019702:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019706:	ee61 7a27 	vmul.f32	s15, s2, s15
 801970a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801970e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019712:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019716:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801971a:	ee12 2a90 	vmov	r2, s5
 801971e:	eef0 2a47 	vmov.f32	s5, s14
 8019722:	fb92 f3f3 	sdiv	r3, r2, r3
 8019726:	ee13 2a10 	vmov	r2, s6
 801972a:	931f      	str	r3, [sp, #124]	; 0x7c
 801972c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801972e:	eeb0 3a67 	vmov.f32	s6, s15
 8019732:	fb92 f3f3 	sdiv	r3, r2, r3
 8019736:	9320      	str	r3, [sp, #128]	; 0x80
 8019738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801973a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801973c:	3b01      	subs	r3, #1
 801973e:	930e      	str	r3, [sp, #56]	; 0x38
 8019740:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019742:	bf08      	it	eq
 8019744:	4613      	moveq	r3, r2
 8019746:	9306      	str	r3, [sp, #24]
 8019748:	e61f      	b.n	801938a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801974a:	fb08 f505 	mul.w	r5, r8, r5
 801974e:	fb09 5303 	mla	r3, r9, r3, r5
 8019752:	e69f      	b.n	8019494 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019754:	4681      	mov	r9, r0
 8019756:	e6c6      	b.n	80194e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8019758:	f1c1 0210 	rsb	r2, r1, #16
 801975c:	4341      	muls	r1, r0
 801975e:	fb09 1902 	mla	r9, r9, r2, r1
 8019762:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019766:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801976a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801976e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019772:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8019776:	ea42 0909 	orr.w	r9, r2, r9
 801977a:	fa1f f289 	uxth.w	r2, r9
 801977e:	e75b      	b.n	8019638 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8019780:	f8b7 c000 	ldrh.w	ip, [r7]
 8019784:	43db      	mvns	r3, r3
 8019786:	ea4f 202c 	mov.w	r0, ip, asr #8
 801978a:	fa5f fe83 	uxtb.w	lr, r3
 801978e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8019792:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8019796:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 801979a:	fb00 f00e 	mul.w	r0, r0, lr
 801979e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80197a2:	b2db      	uxtb	r3, r3
 80197a4:	1c41      	adds	r1, r0, #1
 80197a6:	fb05 f50e 	mul.w	r5, r5, lr
 80197aa:	fb03 f30e 	mul.w	r3, r3, lr
 80197ae:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80197b2:	1211      	asrs	r1, r2, #8
 80197b4:	f021 0107 	bic.w	r1, r1, #7
 80197b8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80197bc:	48d3      	ldr	r0, [pc, #844]	; (8019b0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 80197be:	b2c9      	uxtb	r1, r1
 80197c0:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 80197c4:	1c69      	adds	r1, r5, #1
 80197c6:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80197ca:	10d1      	asrs	r1, r2, #3
 80197cc:	00d2      	lsls	r2, r2, #3
 80197ce:	f021 0103 	bic.w	r1, r1, #3
 80197d2:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80197d6:	00c9      	lsls	r1, r1, #3
 80197d8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80197dc:	4301      	orrs	r1, r0
 80197de:	1c58      	adds	r0, r3, #1
 80197e0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80197e4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80197e8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80197ec:	430a      	orrs	r2, r1
 80197ee:	e726      	b.n	801963e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 80197f0:	f115 0e01 	adds.w	lr, r5, #1
 80197f4:	f53f af24 	bmi.w	8019640 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80197f8:	4572      	cmp	r2, lr
 80197fa:	f6ff af21 	blt.w	8019640 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80197fe:	f110 0e01 	adds.w	lr, r0, #1
 8019802:	f53f af1d 	bmi.w	8019640 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8019806:	4573      	cmp	r3, lr
 8019808:	f6ff af1a 	blt.w	8019640 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801980c:	b21b      	sxth	r3, r3
 801980e:	b212      	sxth	r2, r2
 8019810:	9301      	str	r3, [sp, #4]
 8019812:	9200      	str	r2, [sp, #0]
 8019814:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8019818:	e9cd 5002 	strd	r5, r0, [sp, #8]
 801981c:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8019820:	4639      	mov	r1, r7
 8019822:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019824:	f7ff fc22 	bl	801906c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8019828:	e70a      	b.n	8019640 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801982a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801982c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8019830:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019832:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8019836:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019838:	fa1f fc82 	uxth.w	ip, r2
 801983c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019840:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019842:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8019846:	141f      	asrs	r7, r3, #16
 8019848:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801984a:	141b      	asrs	r3, r3, #16
 801984c:	fb01 3707 	mla	r7, r1, r7, r3
 8019850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019852:	eb03 0a07 	add.w	sl, r3, r7
 8019856:	f813 9007 	ldrb.w	r9, [r3, r7]
 801985a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801985e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8019862:	b29b      	uxth	r3, r3
 8019864:	2d00      	cmp	r5, #0
 8019866:	f000 80fe 	beq.w	8019a66 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 801986a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801986e:	eb0a 0b01 	add.w	fp, sl, r1
 8019872:	fa1f fa85 	uxth.w	sl, r5
 8019876:	940c      	str	r4, [sp, #48]	; 0x30
 8019878:	fb0a fc0c 	mul.w	ip, sl, ip
 801987c:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8019880:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8019884:	eba0 000c 	sub.w	r0, r0, ip
 8019888:	940d      	str	r4, [sp, #52]	; 0x34
 801988a:	fa1f fa8a 	uxth.w	sl, sl
 801988e:	b280      	uxth	r0, r0
 8019890:	eba3 030a 	sub.w	r3, r3, sl
 8019894:	fb08 f000 	mul.w	r0, r8, r0
 8019898:	b29b      	uxth	r3, r3
 801989a:	fb09 0303 	mla	r3, r9, r3, r0
 801989e:	980c      	ldr	r0, [sp, #48]	; 0x30
 80198a0:	fb0a 3300 	mla	r3, sl, r0, r3
 80198a4:	fb0c 3304 	mla	r3, ip, r4, r3
 80198a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	f000 80cc 	beq.w	8019a4a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 80198b2:	9808      	ldr	r0, [sp, #32]
 80198b4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80198b8:	9c08      	ldr	r4, [sp, #32]
 80198ba:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80198be:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80198c2:	f000 80d5 	beq.w	8019a70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 80198c6:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80198ca:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80198ce:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80198d2:	fb0a fc0c 	mul.w	ip, sl, ip
 80198d6:	fb09 f707 	mul.w	r7, r9, r7
 80198da:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80198de:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80198e2:	f107 0b20 	add.w	fp, r7, #32
 80198e6:	44cc      	add	ip, r9
 80198e8:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80198ec:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80198f0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80198f4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80198f8:	ea4c 0909 	orr.w	r9, ip, r9
 80198fc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8019900:	8847      	ldrh	r7, [r0, #2]
 8019902:	d019      	beq.n	8019938 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 8019904:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8019908:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801990c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8019910:	fb0a fc0c 	mul.w	ip, sl, ip
 8019914:	fb08 f807 	mul.w	r8, r8, r7
 8019918:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801991c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8019920:	f108 0b20 	add.w	fp, r8, #32
 8019924:	44bc      	add	ip, r7
 8019926:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801992a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801992e:	0a3f      	lsrs	r7, r7, #8
 8019930:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8019934:	ea4c 0707 	orr.w	r7, ip, r7
 8019938:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801993c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8019940:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8019944:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8019948:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801994c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8019950:	ea4c 0909 	orr.w	r9, ip, r9
 8019954:	ea4a 0707 	orr.w	r7, sl, r7
 8019958:	2d00      	cmp	r5, #0
 801995a:	f000 808b 	beq.w	8019a74 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801995e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8019962:	3901      	subs	r1, #1
 8019964:	0049      	lsls	r1, r1, #1
 8019966:	3102      	adds	r1, #2
 8019968:	eb00 0c01 	add.w	ip, r0, r1
 801996c:	5a41      	ldrh	r1, [r0, r1]
 801996e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8019970:	28ff      	cmp	r0, #255	; 0xff
 8019972:	d019      	beq.n	80199a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8019974:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8019978:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801997a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801997e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8019982:	fb04 fa01 	mul.w	sl, r4, r1
 8019986:	fb08 f800 	mul.w	r8, r8, r0
 801998a:	f10a 0020 	add.w	r0, sl, #32
 801998e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8019992:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8019996:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801999a:	4441      	add	r1, r8
 801999c:	0a00      	lsrs	r0, r0, #8
 801999e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80199a2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80199a6:	4301      	orrs	r1, r0
 80199a8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80199aa:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80199ae:	2cff      	cmp	r4, #255	; 0xff
 80199b0:	d01a      	beq.n	80199e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 80199b2:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80199b6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80199ba:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80199be:	fb04 fa00 	mul.w	sl, r4, r0
 80199c2:	fb08 f80c 	mul.w	r8, r8, ip
 80199c6:	f10a 0c20 	add.w	ip, sl, #32
 80199ca:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80199ce:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80199d2:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80199d6:	4440      	add	r0, r8
 80199d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80199dc:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80199e0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80199e4:	ea40 000c 	orr.w	r0, r0, ip
 80199e8:	fb15 fc02 	smulbb	ip, r5, r2
 80199ec:	f1c5 0810 	rsb	r8, r5, #16
 80199f0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80199f4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80199f8:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80199fc:	eba8 0802 	sub.w	r8, r8, r2
 8019a00:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8019a04:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8019a08:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8019a0c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8019a10:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8019a14:	ea4a 0101 	orr.w	r1, sl, r1
 8019a18:	437a      	muls	r2, r7
 8019a1a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8019a1e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8019a22:	fb09 2208 	mla	r2, r9, r8, r2
 8019a26:	ea4b 0000 	orr.w	r0, fp, r0
 8019a2a:	fb05 2201 	mla	r2, r5, r1, r2
 8019a2e:	fb0c 2200 	mla	r2, ip, r0, r2
 8019a32:	0d57      	lsrs	r7, r2, #21
 8019a34:	0952      	lsrs	r2, r2, #5
 8019a36:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8019a3a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8019a3e:	433a      	orrs	r2, r7
 8019a40:	2bff      	cmp	r3, #255	; 0xff
 8019a42:	b292      	uxth	r2, r2
 8019a44:	d127      	bne.n	8019a96 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8019a46:	f8ae 2000 	strh.w	r2, [lr]
 8019a4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019a4c:	f10e 0e02 	add.w	lr, lr, #2
 8019a50:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8019a52:	4413      	add	r3, r2
 8019a54:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8019a56:	931d      	str	r3, [sp, #116]	; 0x74
 8019a58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019a5a:	441a      	add	r2, r3
 8019a5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019a5e:	3b01      	subs	r3, #1
 8019a60:	921e      	str	r2, [sp, #120]	; 0x78
 8019a62:	930f      	str	r3, [sp, #60]	; 0x3c
 8019a64:	e627      	b.n	80196b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8019a66:	fb08 f000 	mul.w	r0, r8, r0
 8019a6a:	fb09 0303 	mla	r3, r9, r3, r0
 8019a6e:	e71b      	b.n	80198a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 8019a70:	46b9      	mov	r9, r7
 8019a72:	e743      	b.n	80198fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 8019a74:	f1c2 0110 	rsb	r1, r2, #16
 8019a78:	437a      	muls	r2, r7
 8019a7a:	fb09 2901 	mla	r9, r9, r1, r2
 8019a7e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019a82:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8019a86:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8019a8a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019a8e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8019a92:	4302      	orrs	r2, r0
 8019a94:	e7d4      	b.n	8019a40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 8019a96:	f8be 7000 	ldrh.w	r7, [lr]
 8019a9a:	43db      	mvns	r3, r3
 8019a9c:	4c1b      	ldr	r4, [pc, #108]	; (8019b0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8019a9e:	1238      	asrs	r0, r7, #8
 8019aa0:	fa5f fc83 	uxtb.w	ip, r3
 8019aa4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8019aa8:	10fd      	asrs	r5, r7, #3
 8019aaa:	00fb      	lsls	r3, r7, #3
 8019aac:	fb00 f00c 	mul.w	r0, r0, ip
 8019ab0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8019ab4:	b2db      	uxtb	r3, r3
 8019ab6:	fb05 f10c 	mul.w	r1, r5, ip
 8019aba:	1c45      	adds	r5, r0, #1
 8019abc:	fb03 f30c 	mul.w	r3, r3, ip
 8019ac0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8019ac4:	1215      	asrs	r5, r2, #8
 8019ac6:	f025 0507 	bic.w	r5, r5, #7
 8019aca:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8019ace:	1c4d      	adds	r5, r1, #1
 8019ad0:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8019ad4:	10d1      	asrs	r1, r2, #3
 8019ad6:	b2c0      	uxtb	r0, r0
 8019ad8:	f021 0103 	bic.w	r1, r1, #3
 8019adc:	00d2      	lsls	r2, r2, #3
 8019ade:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8019ae2:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8019ae6:	00c9      	lsls	r1, r1, #3
 8019ae8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019aec:	4308      	orrs	r0, r1
 8019aee:	1c59      	adds	r1, r3, #1
 8019af0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8019af4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019af8:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8019afc:	4318      	orrs	r0, r3
 8019afe:	f8ae 0000 	strh.w	r0, [lr]
 8019b02:	e7a2      	b.n	8019a4a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8019b04:	b013      	add	sp, #76	; 0x4c
 8019b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b0a:	bf00      	nop
 8019b0c:	fffff800 	.word	0xfffff800

08019b10 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8019b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b14:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8019b18:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8019b1c:	fb05 4c03 	mla	ip, r5, r3, r4
 8019b20:	2d00      	cmp	r5, #0
 8019b22:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8019b26:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8019b2a:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8019b2e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8019b32:	8808      	ldrh	r0, [r1, #0]
 8019b34:	f2c0 80a7 	blt.w	8019c86 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8019b38:	45aa      	cmp	sl, r5
 8019b3a:	f340 80a4 	ble.w	8019c86 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8019b3e:	2c00      	cmp	r4, #0
 8019b40:	f2c0 809f 	blt.w	8019c82 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8019b44:	42a3      	cmp	r3, r4
 8019b46:	f340 809c 	ble.w	8019c82 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8019b4a:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8019b4e:	1c62      	adds	r2, r4, #1
 8019b50:	f100 809c 	bmi.w	8019c8c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8019b54:	4293      	cmp	r3, r2
 8019b56:	f340 8099 	ble.w	8019c8c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8019b5a:	f1b9 0f00 	cmp.w	r9, #0
 8019b5e:	f000 8095 	beq.w	8019c8c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8019b62:	f8be c002 	ldrh.w	ip, [lr, #2]
 8019b66:	3501      	adds	r5, #1
 8019b68:	f100 8094 	bmi.w	8019c94 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8019b6c:	45aa      	cmp	sl, r5
 8019b6e:	f340 8091 	ble.w	8019c94 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8019b72:	2f00      	cmp	r7, #0
 8019b74:	f000 808e 	beq.w	8019c94 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8019b78:	2c00      	cmp	r4, #0
 8019b7a:	f2c0 8089 	blt.w	8019c90 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8019b7e:	42a3      	cmp	r3, r4
 8019b80:	f340 8086 	ble.w	8019c90 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8019b84:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8019b88:	3401      	adds	r4, #1
 8019b8a:	f100 8086 	bmi.w	8019c9a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8019b8e:	42a3      	cmp	r3, r4
 8019b90:	f340 8083 	ble.w	8019c9a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8019b94:	f1b9 0f00 	cmp.w	r9, #0
 8019b98:	d07f      	beq.n	8019c9a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8019b9a:	3301      	adds	r3, #1
 8019b9c:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8019ba0:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8019ba4:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8019ba8:	fb19 fe07 	smulbb	lr, r9, r7
 8019bac:	f1c7 0210 	rsb	r2, r7, #16
 8019bb0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8019bb4:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8019bb8:	eba2 0209 	sub.w	r2, r2, r9
 8019bbc:	ea44 0808 	orr.w	r8, r4, r8
 8019bc0:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8019bc4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8019bc8:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8019bcc:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8019bd0:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8019bd4:	ea44 0c0c 	orr.w	ip, r4, ip
 8019bd8:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8019bdc:	fb04 f40c 	mul.w	r4, r4, ip
 8019be0:	fb02 4808 	mla	r8, r2, r8, r4
 8019be4:	041a      	lsls	r2, r3, #16
 8019be6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8019bea:	b2b4      	uxth	r4, r6
 8019bec:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8019bf0:	43f6      	mvns	r6, r6
 8019bf2:	4313      	orrs	r3, r2
 8019bf4:	042a      	lsls	r2, r5, #16
 8019bf6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8019bfa:	b2f6      	uxtb	r6, r6
 8019bfc:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8019c00:	fb0e 8303 	mla	r3, lr, r3, r8
 8019c04:	432a      	orrs	r2, r5
 8019c06:	fb07 3202 	mla	r2, r7, r2, r3
 8019c0a:	10c7      	asrs	r7, r0, #3
 8019c0c:	0d53      	lsrs	r3, r2, #21
 8019c0e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019c12:	0952      	lsrs	r2, r2, #5
 8019c14:	fb17 f706 	smulbb	r7, r7, r6
 8019c18:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019c1c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8019c20:	431a      	orrs	r2, r3
 8019c22:	b293      	uxth	r3, r2
 8019c24:	1202      	asrs	r2, r0, #8
 8019c26:	121d      	asrs	r5, r3, #8
 8019c28:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8019c2c:	00c0      	lsls	r0, r0, #3
 8019c2e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8019c32:	fb12 f206 	smulbb	r2, r2, r6
 8019c36:	b2c0      	uxtb	r0, r0
 8019c38:	fb05 2504 	mla	r5, r5, r4, r2
 8019c3c:	10da      	asrs	r2, r3, #3
 8019c3e:	fb10 f006 	smulbb	r0, r0, r6
 8019c42:	00db      	lsls	r3, r3, #3
 8019c44:	b2ad      	uxth	r5, r5
 8019c46:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8019c4a:	b2db      	uxtb	r3, r3
 8019c4c:	fb02 7204 	mla	r2, r2, r4, r7
 8019c50:	fb03 0004 	mla	r0, r3, r4, r0
 8019c54:	1c6b      	adds	r3, r5, #1
 8019c56:	b292      	uxth	r2, r2
 8019c58:	b280      	uxth	r0, r0
 8019c5a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8019c5e:	1c43      	adds	r3, r0, #1
 8019c60:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8019c64:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8019c68:	1c50      	adds	r0, r2, #1
 8019c6a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8019c6e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8019c72:	0952      	lsrs	r2, r2, #5
 8019c74:	432b      	orrs	r3, r5
 8019c76:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019c7a:	4313      	orrs	r3, r2
 8019c7c:	800b      	strh	r3, [r1, #0]
 8019c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c82:	4680      	mov	r8, r0
 8019c84:	e763      	b.n	8019b4e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8019c86:	4684      	mov	ip, r0
 8019c88:	4680      	mov	r8, r0
 8019c8a:	e76c      	b.n	8019b66 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8019c8c:	4684      	mov	ip, r0
 8019c8e:	e76a      	b.n	8019b66 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8019c90:	4605      	mov	r5, r0
 8019c92:	e779      	b.n	8019b88 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8019c94:	4603      	mov	r3, r0
 8019c96:	4605      	mov	r5, r0
 8019c98:	e782      	b.n	8019ba0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8019c9a:	4603      	mov	r3, r0
 8019c9c:	e780      	b.n	8019ba0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08019c9e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019c9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ca2:	b093      	sub	sp, #76	; 0x4c
 8019ca4:	461d      	mov	r5, r3
 8019ca6:	9210      	str	r2, [sp, #64]	; 0x40
 8019ca8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019caa:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 8019cae:	910a      	str	r1, [sp, #40]	; 0x28
 8019cb0:	920b      	str	r2, [sp, #44]	; 0x2c
 8019cb2:	6859      	ldr	r1, [r3, #4]
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	9011      	str	r0, [sp, #68]	; 0x44
 8019cb8:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8019cbc:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8019cc0:	fb01 2707 	mla	r7, r1, r7, r2
 8019cc4:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8019cc8:	9307      	str	r3, [sp, #28]
 8019cca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	9309      	str	r3, [sp, #36]	; 0x24
 8019cd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019cd2:	43db      	mvns	r3, r3
 8019cd4:	b2db      	uxtb	r3, r3
 8019cd6:	9308      	str	r3, [sp, #32]
 8019cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019cda:	2b00      	cmp	r3, #0
 8019cdc:	dc03      	bgt.n	8019ce6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019cde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	f340 8205 	ble.w	801a0f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8019ce6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019ce8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019cec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019cf0:	1e48      	subs	r0, r1, #1
 8019cf2:	f102 3cff 	add.w	ip, r2, #4294967295
 8019cf6:	2d00      	cmp	r5, #0
 8019cf8:	f340 80da 	ble.w	8019eb0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8019cfc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8019d00:	ea4f 4326 	mov.w	r3, r6, asr #16
 8019d04:	d406      	bmi.n	8019d14 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019d06:	4586      	cmp	lr, r0
 8019d08:	da04      	bge.n	8019d14 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	db02      	blt.n	8019d14 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019d0e:	4563      	cmp	r3, ip
 8019d10:	f2c0 80cf 	blt.w	8019eb2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8019d14:	f11e 0e01 	adds.w	lr, lr, #1
 8019d18:	f100 80c1 	bmi.w	8019e9e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8019d1c:	4571      	cmp	r1, lr
 8019d1e:	f2c0 80be 	blt.w	8019e9e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8019d22:	3301      	adds	r3, #1
 8019d24:	f100 80bb 	bmi.w	8019e9e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8019d28:	429a      	cmp	r2, r3
 8019d2a:	f2c0 80b8 	blt.w	8019e9e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8019d2e:	46a9      	mov	r9, r5
 8019d30:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8019d34:	f1b9 0f00 	cmp.w	r9, #0
 8019d38:	f340 80d8 	ble.w	8019eec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8019d3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019d3e:	1421      	asrs	r1, r4, #16
 8019d40:	ea4f 4026 	mov.w	r0, r6, asr #16
 8019d44:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8019d48:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8019d4c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8019d50:	f100 8112 	bmi.w	8019f78 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8019d54:	f10e 3aff 	add.w	sl, lr, #4294967295
 8019d58:	4551      	cmp	r1, sl
 8019d5a:	f280 810d 	bge.w	8019f78 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8019d5e:	2800      	cmp	r0, #0
 8019d60:	f2c0 810a 	blt.w	8019f78 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8019d64:	f103 3aff 	add.w	sl, r3, #4294967295
 8019d68:	4550      	cmp	r0, sl
 8019d6a:	f280 8105 	bge.w	8019f78 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8019d6e:	fa0f f38e 	sxth.w	r3, lr
 8019d72:	fb00 1103 	mla	r1, r0, r3, r1
 8019d76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019d78:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8019d7c:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8019d80:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8019d84:	f1bc 0f00 	cmp.w	ip, #0
 8019d88:	d007      	beq.n	8019d9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8019d8a:	005b      	lsls	r3, r3, #1
 8019d8c:	eb0a 0003 	add.w	r0, sl, r3
 8019d90:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8019d94:	930c      	str	r3, [sp, #48]	; 0x30
 8019d96:	8843      	ldrh	r3, [r0, #2]
 8019d98:	930d      	str	r3, [sp, #52]	; 0x34
 8019d9a:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8019d9e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8019da2:	fb12 f30c 	smulbb	r3, r2, ip
 8019da6:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8019daa:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8019dae:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8019db2:	10db      	asrs	r3, r3, #3
 8019db4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8019db8:	ea40 000e 	orr.w	r0, r0, lr
 8019dbc:	f1cc 0e10 	rsb	lr, ip, #16
 8019dc0:	ea4a 0101 	orr.w	r1, sl, r1
 8019dc4:	9f08      	ldr	r7, [sp, #32]
 8019dc6:	ebae 0e02 	sub.w	lr, lr, r2
 8019dca:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8019dce:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8019dd2:	4351      	muls	r1, r2
 8019dd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019dd6:	fb0e 1e00 	mla	lr, lr, r0, r1
 8019dda:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019ddc:	0410      	lsls	r0, r2, #16
 8019dde:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8019de2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8019de6:	4310      	orrs	r0, r2
 8019de8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019dea:	0412      	lsls	r2, r2, #16
 8019dec:	fb03 e000 	mla	r0, r3, r0, lr
 8019df0:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8019df4:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8019df8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8019dfc:	ea42 020e 	orr.w	r2, r2, lr
 8019e00:	fb03 0302 	mla	r3, r3, r2, r0
 8019e04:	f8b8 0000 	ldrh.w	r0, [r8]
 8019e08:	0d5a      	lsrs	r2, r3, #21
 8019e0a:	095b      	lsrs	r3, r3, #5
 8019e0c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019e10:	1201      	asrs	r1, r0, #8
 8019e12:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8019e16:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8019e1a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8019e1e:	00c0      	lsls	r0, r0, #3
 8019e20:	4313      	orrs	r3, r2
 8019e22:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8019e26:	fb11 f107 	smulbb	r1, r1, r7
 8019e2a:	b2c0      	uxtb	r0, r0
 8019e2c:	b29b      	uxth	r3, r3
 8019e2e:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8019e32:	fb10 f007 	smulbb	r0, r0, r7
 8019e36:	fb1e fe07 	smulbb	lr, lr, r7
 8019e3a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8019e3e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019e42:	fb0c 1c02 	mla	ip, ip, r2, r1
 8019e46:	10d9      	asrs	r1, r3, #3
 8019e48:	00db      	lsls	r3, r3, #3
 8019e4a:	fa1f fc8c 	uxth.w	ip, ip
 8019e4e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8019e52:	b2db      	uxtb	r3, r3
 8019e54:	fb01 e102 	mla	r1, r1, r2, lr
 8019e58:	fb03 0302 	mla	r3, r3, r2, r0
 8019e5c:	b289      	uxth	r1, r1
 8019e5e:	b29a      	uxth	r2, r3
 8019e60:	f10c 0301 	add.w	r3, ip, #1
 8019e64:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8019e68:	1c53      	adds	r3, r2, #1
 8019e6a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8019e6e:	1c4a      	adds	r2, r1, #1
 8019e70:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019e74:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8019e78:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8019e7c:	0949      	lsrs	r1, r1, #5
 8019e7e:	ea43 030c 	orr.w	r3, r3, ip
 8019e82:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019e86:	430b      	orrs	r3, r1
 8019e88:	f8a8 3000 	strh.w	r3, [r8]
 8019e8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8019e8e:	f108 0802 	add.w	r8, r8, #2
 8019e92:	f109 39ff 	add.w	r9, r9, #4294967295
 8019e96:	441c      	add	r4, r3
 8019e98:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019e9a:	441e      	add	r6, r3
 8019e9c:	e74a      	b.n	8019d34 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8019e9e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8019ea0:	3d01      	subs	r5, #1
 8019ea2:	441c      	add	r4, r3
 8019ea4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019ea6:	441e      	add	r6, r3
 8019ea8:	9b07      	ldr	r3, [sp, #28]
 8019eaa:	3302      	adds	r3, #2
 8019eac:	9307      	str	r3, [sp, #28]
 8019eae:	e722      	b.n	8019cf6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8019eb0:	d022      	beq.n	8019ef8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8019eb2:	1e6b      	subs	r3, r5, #1
 8019eb4:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8019eb6:	fb00 4003 	mla	r0, r0, r3, r4
 8019eba:	1400      	asrs	r0, r0, #16
 8019ebc:	f53f af37 	bmi.w	8019d2e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8019ec0:	3901      	subs	r1, #1
 8019ec2:	4288      	cmp	r0, r1
 8019ec4:	f6bf af33 	bge.w	8019d2e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8019ec8:	9920      	ldr	r1, [sp, #128]	; 0x80
 8019eca:	fb01 6303 	mla	r3, r1, r3, r6
 8019ece:	141b      	asrs	r3, r3, #16
 8019ed0:	f53f af2d 	bmi.w	8019d2e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8019ed4:	3a01      	subs	r2, #1
 8019ed6:	4293      	cmp	r3, r2
 8019ed8:	f6bf af29 	bge.w	8019d2e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8019edc:	46a8      	mov	r8, r5
 8019ede:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8019ee2:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8019ee6:	f1b8 0f00 	cmp.w	r8, #0
 8019eea:	dc60      	bgt.n	8019fae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8019eec:	9b07      	ldr	r3, [sp, #28]
 8019eee:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8019ef2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8019ef6:	9307      	str	r3, [sp, #28]
 8019ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	f340 80f8 	ble.w	801a0f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8019f00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019f04:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019f06:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019f0a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019f0e:	eef0 6a62 	vmov.f32	s13, s5
 8019f12:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019f16:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019f1a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019f1e:	ee16 4a90 	vmov	r4, s13
 8019f22:	eef0 6a43 	vmov.f32	s13, s6
 8019f26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019f2a:	ee16 6a90 	vmov	r6, s13
 8019f2e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019f32:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019f36:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019f3a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019f3e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019f42:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019f46:	ee12 2a90 	vmov	r2, s5
 8019f4a:	eef0 2a47 	vmov.f32	s5, s14
 8019f4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019f52:	ee13 2a10 	vmov	r2, s6
 8019f56:	931f      	str	r3, [sp, #124]	; 0x7c
 8019f58:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019f5a:	eeb0 3a67 	vmov.f32	s6, s15
 8019f5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019f62:	9320      	str	r3, [sp, #128]	; 0x80
 8019f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019f66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019f68:	3b01      	subs	r3, #1
 8019f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8019f6c:	bf08      	it	eq
 8019f6e:	4615      	moveq	r5, r2
 8019f70:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019f72:	bf18      	it	ne
 8019f74:	461d      	movne	r5, r3
 8019f76:	e6af      	b.n	8019cd8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8019f78:	f111 0a01 	adds.w	sl, r1, #1
 8019f7c:	d486      	bmi.n	8019e8c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8019f7e:	45d6      	cmp	lr, sl
 8019f80:	db84      	blt.n	8019e8c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8019f82:	f110 0a01 	adds.w	sl, r0, #1
 8019f86:	d481      	bmi.n	8019e8c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8019f88:	4553      	cmp	r3, sl
 8019f8a:	f6ff af7f 	blt.w	8019e8c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8019f8e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8019f90:	b21b      	sxth	r3, r3
 8019f92:	9101      	str	r1, [sp, #4]
 8019f94:	4641      	mov	r1, r8
 8019f96:	9300      	str	r3, [sp, #0]
 8019f98:	fa0f f38e 	sxth.w	r3, lr
 8019f9c:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8019fa0:	e9cd c704 	strd	ip, r7, [sp, #16]
 8019fa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019fa6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019fa8:	f7ff fdb2 	bl	8019b10 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8019fac:	e76e      	b.n	8019e8c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8019fae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019fb0:	1430      	asrs	r0, r6, #16
 8019fb2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019fb4:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8019fb8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019fbc:	1423      	asrs	r3, r4, #16
 8019fbe:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8019fc2:	fb01 3000 	mla	r0, r1, r0, r3
 8019fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019fc8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8019fcc:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8019fd0:	8858      	ldrh	r0, [r3, #2]
 8019fd2:	f1be 0f00 	cmp.w	lr, #0
 8019fd6:	d00b      	beq.n	8019ff0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8019fd8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8019fdc:	3901      	subs	r1, #1
 8019fde:	0049      	lsls	r1, r1, #1
 8019fe0:	3102      	adds	r1, #2
 8019fe2:	eb03 0b01 	add.w	fp, r3, r1
 8019fe6:	5a5b      	ldrh	r3, [r3, r1]
 8019fe8:	930e      	str	r3, [sp, #56]	; 0x38
 8019fea:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8019fee:	930f      	str	r3, [sp, #60]	; 0x3c
 8019ff0:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8019ff4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8019ff8:	fb12 f30e 	smulbb	r3, r2, lr
 8019ffc:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801a000:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 801a004:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801a008:	10db      	asrs	r3, r3, #3
 801a00a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801a00e:	ea41 010c 	orr.w	r1, r1, ip
 801a012:	f1ce 0c10 	rsb	ip, lr, #16
 801a016:	ea4b 0000 	orr.w	r0, fp, r0
 801a01a:	9f08      	ldr	r7, [sp, #32]
 801a01c:	ebac 0c02 	sub.w	ip, ip, r2
 801a020:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801a024:	f108 38ff 	add.w	r8, r8, #4294967295
 801a028:	4350      	muls	r0, r2
 801a02a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 801a02e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a030:	fb0c 0c01 	mla	ip, ip, r1, r0
 801a034:	980e      	ldr	r0, [sp, #56]	; 0x38
 801a036:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801a03a:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 801a03e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a040:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801a044:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801a048:	0412      	lsls	r2, r2, #16
 801a04a:	ea4b 0101 	orr.w	r1, fp, r1
 801a04e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801a052:	fb03 c101 	mla	r1, r3, r1, ip
 801a056:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 801a05a:	4302      	orrs	r2, r0
 801a05c:	fb03 1202 	mla	r2, r3, r2, r1
 801a060:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 801a064:	0952      	lsrs	r2, r2, #5
 801a066:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801a06a:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 801a06e:	f8b9 2000 	ldrh.w	r2, [r9]
 801a072:	ea4b 0303 	orr.w	r3, fp, r3
 801a076:	1211      	asrs	r1, r2, #8
 801a078:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 801a07c:	b29b      	uxth	r3, r3
 801a07e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801a082:	00d2      	lsls	r2, r2, #3
 801a084:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801a088:	fb11 f107 	smulbb	r1, r1, r7
 801a08c:	1218      	asrs	r0, r3, #8
 801a08e:	fb1c fc07 	smulbb	ip, ip, r7
 801a092:	b2d2      	uxtb	r2, r2
 801a094:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a098:	fb12 f207 	smulbb	r2, r2, r7
 801a09c:	fb00 100a 	mla	r0, r0, sl, r1
 801a0a0:	10d9      	asrs	r1, r3, #3
 801a0a2:	00db      	lsls	r3, r3, #3
 801a0a4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801a0a8:	b280      	uxth	r0, r0
 801a0aa:	b2db      	uxtb	r3, r3
 801a0ac:	fb01 c10a 	mla	r1, r1, sl, ip
 801a0b0:	fb03 230a 	mla	r3, r3, sl, r2
 801a0b4:	1c42      	adds	r2, r0, #1
 801a0b6:	b289      	uxth	r1, r1
 801a0b8:	b29b      	uxth	r3, r3
 801a0ba:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801a0be:	f101 0c01 	add.w	ip, r1, #1
 801a0c2:	1c5a      	adds	r2, r3, #1
 801a0c4:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801a0c8:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801a0cc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801a0d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801a0d2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801a0d6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a0da:	441c      	add	r4, r3
 801a0dc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801a0e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a0e2:	4310      	orrs	r0, r2
 801a0e4:	441e      	add	r6, r3
 801a0e6:	ea40 000c 	orr.w	r0, r0, ip
 801a0ea:	f829 0b02 	strh.w	r0, [r9], #2
 801a0ee:	e6fa      	b.n	8019ee6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801a0f0:	b013      	add	sp, #76	; 0x4c
 801a0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a0f6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 801a0f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a0fa:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 801a0fe:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 801a102:	fb0e 4703 	mla	r7, lr, r3, r4
 801a106:	f1be 0f00 	cmp.w	lr, #0
 801a10a:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 801a10e:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 801a112:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 801a116:	8808      	ldrh	r0, [r1, #0]
 801a118:	db60      	blt.n	801a1dc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 801a11a:	45f1      	cmp	r9, lr
 801a11c:	dd5e      	ble.n	801a1dc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 801a11e:	2c00      	cmp	r4, #0
 801a120:	db5a      	blt.n	801a1d8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 801a122:	42a3      	cmp	r3, r4
 801a124:	dd58      	ble.n	801a1d8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 801a126:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 801a12a:	1c62      	adds	r2, r4, #1
 801a12c:	d459      	bmi.n	801a1e2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801a12e:	4293      	cmp	r3, r2
 801a130:	dd57      	ble.n	801a1e2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801a132:	2d00      	cmp	r5, #0
 801a134:	d055      	beq.n	801a1e2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801a136:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 801a13a:	f11e 0e01 	adds.w	lr, lr, #1
 801a13e:	d454      	bmi.n	801a1ea <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801a140:	45f1      	cmp	r9, lr
 801a142:	dd52      	ble.n	801a1ea <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801a144:	2e00      	cmp	r6, #0
 801a146:	d050      	beq.n	801a1ea <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801a148:	2c00      	cmp	r4, #0
 801a14a:	db4c      	blt.n	801a1e6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 801a14c:	42a3      	cmp	r3, r4
 801a14e:	dd4a      	ble.n	801a1e6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 801a150:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 801a154:	3401      	adds	r4, #1
 801a156:	d405      	bmi.n	801a164 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801a158:	42a3      	cmp	r3, r4
 801a15a:	dd03      	ble.n	801a164 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801a15c:	b115      	cbz	r5, 801a164 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801a15e:	3301      	adds	r3, #1
 801a160:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 801a164:	fb15 f406 	smulbb	r4, r5, r6
 801a168:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801a16c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801a170:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801a174:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801a178:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801a17c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801a180:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801a184:	ea43 0c0c 	orr.w	ip, r3, ip
 801a188:	f1c6 0310 	rsb	r3, r6, #16
 801a18c:	ea4e 0707 	orr.w	r7, lr, r7
 801a190:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801a194:	1b5b      	subs	r3, r3, r5
 801a196:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801a19a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a19e:	437d      	muls	r5, r7
 801a1a0:	fb03 5c0c 	mla	ip, r3, ip, r5
 801a1a4:	0403      	lsls	r3, r0, #16
 801a1a6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801a1aa:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801a1ae:	4318      	orrs	r0, r3
 801a1b0:	0413      	lsls	r3, r2, #16
 801a1b2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801a1b6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801a1ba:	fb04 c000 	mla	r0, r4, r0, ip
 801a1be:	4313      	orrs	r3, r2
 801a1c0:	fb06 0003 	mla	r0, r6, r3, r0
 801a1c4:	0d43      	lsrs	r3, r0, #21
 801a1c6:	0940      	lsrs	r0, r0, #5
 801a1c8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a1cc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801a1d0:	4318      	orrs	r0, r3
 801a1d2:	8008      	strh	r0, [r1, #0]
 801a1d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a1d8:	4684      	mov	ip, r0
 801a1da:	e7a6      	b.n	801a12a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 801a1dc:	4607      	mov	r7, r0
 801a1de:	4684      	mov	ip, r0
 801a1e0:	e7ab      	b.n	801a13a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 801a1e2:	4607      	mov	r7, r0
 801a1e4:	e7a9      	b.n	801a13a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 801a1e6:	4602      	mov	r2, r0
 801a1e8:	e7b4      	b.n	801a154 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 801a1ea:	4602      	mov	r2, r0
 801a1ec:	e7ba      	b.n	801a164 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

0801a1ee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a1ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1f2:	b08f      	sub	sp, #60	; 0x3c
 801a1f4:	461d      	mov	r5, r3
 801a1f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a1f8:	9107      	str	r1, [sp, #28]
 801a1fa:	920c      	str	r2, [sp, #48]	; 0x30
 801a1fc:	6859      	ldr	r1, [r3, #4]
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	900d      	str	r0, [sp, #52]	; 0x34
 801a202:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 801a206:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 801a20a:	fb01 2707 	mla	r7, r1, r7, r2
 801a20e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 801a212:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a214:	f8d3 8000 	ldr.w	r8, [r3]
 801a218:	9b07      	ldr	r3, [sp, #28]
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	dc03      	bgt.n	801a226 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801a21e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a220:	2b00      	cmp	r3, #0
 801a222:	f340 8182 	ble.w	801a52a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 801a226:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a228:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a22c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a230:	1e48      	subs	r0, r1, #1
 801a232:	f102 3cff 	add.w	ip, r2, #4294967295
 801a236:	2d00      	cmp	r5, #0
 801a238:	f340 809b 	ble.w	801a372 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 801a23c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801a240:	ea4f 4326 	mov.w	r3, r6, asr #16
 801a244:	d406      	bmi.n	801a254 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a246:	4586      	cmp	lr, r0
 801a248:	da04      	bge.n	801a254 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	db02      	blt.n	801a254 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a24e:	4563      	cmp	r3, ip
 801a250:	f2c0 8090 	blt.w	801a374 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801a254:	f11e 0e01 	adds.w	lr, lr, #1
 801a258:	f100 8084 	bmi.w	801a364 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801a25c:	4571      	cmp	r1, lr
 801a25e:	f2c0 8081 	blt.w	801a364 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801a262:	3301      	adds	r3, #1
 801a264:	d47e      	bmi.n	801a364 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801a266:	429a      	cmp	r2, r3
 801a268:	db7c      	blt.n	801a364 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801a26a:	46aa      	mov	sl, r5
 801a26c:	46b9      	mov	r9, r7
 801a26e:	f1ba 0f00 	cmp.w	sl, #0
 801a272:	f340 8099 	ble.w	801a3a8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801a276:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a278:	1421      	asrs	r1, r4, #16
 801a27a:	ea4f 4026 	mov.w	r0, r6, asr #16
 801a27e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801a282:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801a286:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801a28a:	f100 80d1 	bmi.w	801a430 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801a28e:	f10e 3bff 	add.w	fp, lr, #4294967295
 801a292:	4559      	cmp	r1, fp
 801a294:	f280 80cc 	bge.w	801a430 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801a298:	2800      	cmp	r0, #0
 801a29a:	f2c0 80c9 	blt.w	801a430 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801a29e:	f103 3bff 	add.w	fp, r3, #4294967295
 801a2a2:	4558      	cmp	r0, fp
 801a2a4:	f280 80c4 	bge.w	801a430 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801a2a8:	fa0f fe8e 	sxth.w	lr, lr
 801a2ac:	fb00 110e 	mla	r1, r0, lr, r1
 801a2b0:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 801a2b4:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 801a2b8:	8841      	ldrh	r1, [r0, #2]
 801a2ba:	f1bc 0f00 	cmp.w	ip, #0
 801a2be:	d00b      	beq.n	801a2d8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801a2c0:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 801a2c4:	3b01      	subs	r3, #1
 801a2c6:	005b      	lsls	r3, r3, #1
 801a2c8:	3302      	adds	r3, #2
 801a2ca:	eb00 0e03 	add.w	lr, r0, r3
 801a2ce:	5ac3      	ldrh	r3, [r0, r3]
 801a2d0:	9308      	str	r3, [sp, #32]
 801a2d2:	f8be 3002 	ldrh.w	r3, [lr, #2]
 801a2d6:	9309      	str	r3, [sp, #36]	; 0x24
 801a2d8:	ea4f 400b 	mov.w	r0, fp, lsl #16
 801a2dc:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801a2e0:	fb12 f30c 	smulbb	r3, r2, ip
 801a2e4:	f1cc 0e10 	rsb	lr, ip, #16
 801a2e8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801a2ec:	10db      	asrs	r3, r3, #3
 801a2ee:	ebae 0e02 	sub.w	lr, lr, r2
 801a2f2:	ea40 000b 	orr.w	r0, r0, fp
 801a2f6:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801a2fa:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801a2fe:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801a302:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801a306:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 801a30a:	ea4b 0101 	orr.w	r1, fp, r1
 801a30e:	4351      	muls	r1, r2
 801a310:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a312:	fb0e 1e00 	mla	lr, lr, r0, r1
 801a316:	0410      	lsls	r0, r2, #16
 801a318:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801a31c:	9908      	ldr	r1, [sp, #32]
 801a31e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801a322:	4310      	orrs	r0, r2
 801a324:	9a08      	ldr	r2, [sp, #32]
 801a326:	0412      	lsls	r2, r2, #16
 801a328:	fb03 e000 	mla	r0, r3, r0, lr
 801a32c:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801a330:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801a334:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801a338:	ea42 020e 	orr.w	r2, r2, lr
 801a33c:	fb03 0302 	mla	r3, r3, r2, r0
 801a340:	0d5a      	lsrs	r2, r3, #21
 801a342:	095b      	lsrs	r3, r3, #5
 801a344:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a348:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801a34c:	4313      	orrs	r3, r2
 801a34e:	f8a9 3000 	strh.w	r3, [r9]
 801a352:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a354:	f109 0902 	add.w	r9, r9, #2
 801a358:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a35c:	441c      	add	r4, r3
 801a35e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a360:	441e      	add	r6, r3
 801a362:	e784      	b.n	801a26e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801a364:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a366:	3d01      	subs	r5, #1
 801a368:	3702      	adds	r7, #2
 801a36a:	441c      	add	r4, r3
 801a36c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a36e:	441e      	add	r6, r3
 801a370:	e761      	b.n	801a236 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801a372:	d01d      	beq.n	801a3b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801a374:	1e6b      	subs	r3, r5, #1
 801a376:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801a378:	fb00 4003 	mla	r0, r0, r3, r4
 801a37c:	1400      	asrs	r0, r0, #16
 801a37e:	f53f af74 	bmi.w	801a26a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a382:	3901      	subs	r1, #1
 801a384:	4288      	cmp	r0, r1
 801a386:	f6bf af70 	bge.w	801a26a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a38a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801a38c:	fb01 6303 	mla	r3, r1, r3, r6
 801a390:	141b      	asrs	r3, r3, #16
 801a392:	f53f af6a 	bmi.w	801a26a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a396:	3a01      	subs	r2, #1
 801a398:	4293      	cmp	r3, r2
 801a39a:	f6bf af66 	bge.w	801a26a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a39e:	46a9      	mov	r9, r5
 801a3a0:	46ba      	mov	sl, r7
 801a3a2:	f1b9 0f00 	cmp.w	r9, #0
 801a3a6:	dc5b      	bgt.n	801a460 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801a3a8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801a3ac:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 801a3b0:	9b07      	ldr	r3, [sp, #28]
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	f340 80b9 	ble.w	801a52a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 801a3b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a3bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a3be:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a3c2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a3c6:	eef0 6a62 	vmov.f32	s13, s5
 801a3ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a3ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a3d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a3d6:	ee16 4a90 	vmov	r4, s13
 801a3da:	eef0 6a43 	vmov.f32	s13, s6
 801a3de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a3e2:	ee16 6a90 	vmov	r6, s13
 801a3e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a3ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a3ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a3f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a3f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a3fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a3fe:	ee12 2a90 	vmov	r2, s5
 801a402:	eef0 2a47 	vmov.f32	s5, s14
 801a406:	fb92 f3f3 	sdiv	r3, r2, r3
 801a40a:	ee13 2a10 	vmov	r2, s6
 801a40e:	931b      	str	r3, [sp, #108]	; 0x6c
 801a410:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a412:	eeb0 3a67 	vmov.f32	s6, s15
 801a416:	fb92 f3f3 	sdiv	r3, r2, r3
 801a41a:	931c      	str	r3, [sp, #112]	; 0x70
 801a41c:	9b07      	ldr	r3, [sp, #28]
 801a41e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a420:	3b01      	subs	r3, #1
 801a422:	9307      	str	r3, [sp, #28]
 801a424:	bf08      	it	eq
 801a426:	4615      	moveq	r5, r2
 801a428:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a42a:	bf18      	it	ne
 801a42c:	461d      	movne	r5, r3
 801a42e:	e6f3      	b.n	801a218 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801a430:	f111 0b01 	adds.w	fp, r1, #1
 801a434:	d48d      	bmi.n	801a352 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a436:	45de      	cmp	lr, fp
 801a438:	db8b      	blt.n	801a352 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a43a:	f110 0b01 	adds.w	fp, r0, #1
 801a43e:	d488      	bmi.n	801a352 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a440:	455b      	cmp	r3, fp
 801a442:	db86      	blt.n	801a352 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a444:	b21b      	sxth	r3, r3
 801a446:	e9cd 1001 	strd	r1, r0, [sp, #4]
 801a44a:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 801a44e:	9300      	str	r3, [sp, #0]
 801a450:	4642      	mov	r2, r8
 801a452:	fa0f f38e 	sxth.w	r3, lr
 801a456:	4649      	mov	r1, r9
 801a458:	980d      	ldr	r0, [sp, #52]	; 0x34
 801a45a:	f7ff fe4c 	bl	801a0f6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 801a45e:	e778      	b.n	801a352 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801a460:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a462:	1420      	asrs	r0, r4, #16
 801a464:	1431      	asrs	r1, r6, #16
 801a466:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801a46a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801a46e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801a472:	fb03 0101 	mla	r1, r3, r1, r0
 801a476:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 801a47a:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 801a47e:	8841      	ldrh	r1, [r0, #2]
 801a480:	f1be 0f00 	cmp.w	lr, #0
 801a484:	d00b      	beq.n	801a49e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801a486:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a48a:	3b01      	subs	r3, #1
 801a48c:	005b      	lsls	r3, r3, #1
 801a48e:	3302      	adds	r3, #2
 801a490:	eb00 0b03 	add.w	fp, r0, r3
 801a494:	5ac3      	ldrh	r3, [r0, r3]
 801a496:	930a      	str	r3, [sp, #40]	; 0x28
 801a498:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801a49c:	930b      	str	r3, [sp, #44]	; 0x2c
 801a49e:	ea4f 400c 	mov.w	r0, ip, lsl #16
 801a4a2:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801a4a6:	fb12 f30e 	smulbb	r3, r2, lr
 801a4aa:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801a4ae:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801a4b2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801a4b6:	10db      	asrs	r3, r3, #3
 801a4b8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801a4bc:	ea40 000c 	orr.w	r0, r0, ip
 801a4c0:	f1ce 0c10 	rsb	ip, lr, #16
 801a4c4:	ea4b 0101 	orr.w	r1, fp, r1
 801a4c8:	f109 39ff 	add.w	r9, r9, #4294967295
 801a4cc:	ebac 0c02 	sub.w	ip, ip, r2
 801a4d0:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801a4d4:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 801a4d8:	4351      	muls	r1, r2
 801a4da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a4dc:	fb0c 1c00 	mla	ip, ip, r0, r1
 801a4e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a4e2:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801a4e6:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 801a4ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a4ec:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801a4f0:	0412      	lsls	r2, r2, #16
 801a4f2:	ea4b 0000 	orr.w	r0, fp, r0
 801a4f6:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 801a4fa:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801a4fe:	fb03 c000 	mla	r0, r3, r0, ip
 801a502:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 801a506:	ea42 0b0b 	orr.w	fp, r2, fp
 801a50a:	fb03 000b 	mla	r0, r3, fp, r0
 801a50e:	0d43      	lsrs	r3, r0, #21
 801a510:	0940      	lsrs	r0, r0, #5
 801a512:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a516:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801a51a:	4318      	orrs	r0, r3
 801a51c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a51e:	441c      	add	r4, r3
 801a520:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a522:	f82a 0b02 	strh.w	r0, [sl], #2
 801a526:	441e      	add	r6, r3
 801a528:	e73b      	b.n	801a3a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801a52a:	b00f      	add	sp, #60	; 0x3c
 801a52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a530 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 801a530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a534:	b085      	sub	sp, #20
 801a536:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 801a53a:	9102      	str	r1, [sp, #8]
 801a53c:	2c00      	cmp	r4, #0
 801a53e:	fb04 7103 	mla	r1, r4, r3, r7
 801a542:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 801a546:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801a54a:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 801a54e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801a552:	f2c0 811b 	blt.w	801a78c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 801a556:	45a6      	cmp	lr, r4
 801a558:	f340 8118 	ble.w	801a78c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 801a55c:	2f00      	cmp	r7, #0
 801a55e:	f2c0 8113 	blt.w	801a788 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 801a562:	42bb      	cmp	r3, r7
 801a564:	f340 8110 	ble.w	801a788 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 801a568:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 801a56c:	1c7a      	adds	r2, r7, #1
 801a56e:	f100 8110 	bmi.w	801a792 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 801a572:	4293      	cmp	r3, r2
 801a574:	f340 810d 	ble.w	801a792 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 801a578:	2e00      	cmp	r6, #0
 801a57a:	f000 810c 	beq.w	801a796 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 801a57e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801a582:	3401      	adds	r4, #1
 801a584:	f100 810b 	bmi.w	801a79e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 801a588:	45a6      	cmp	lr, r4
 801a58a:	f340 8108 	ble.w	801a79e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 801a58e:	2800      	cmp	r0, #0
 801a590:	f000 8108 	beq.w	801a7a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 801a594:	2f00      	cmp	r7, #0
 801a596:	f2c0 8100 	blt.w	801a79a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 801a59a:	42bb      	cmp	r3, r7
 801a59c:	f340 80fd 	ble.w	801a79a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 801a5a0:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801a5a4:	3701      	adds	r7, #1
 801a5a6:	f100 8100 	bmi.w	801a7aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 801a5aa:	42bb      	cmp	r3, r7
 801a5ac:	f340 80fd 	ble.w	801a7aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 801a5b0:	2e00      	cmp	r6, #0
 801a5b2:	f000 80fc 	beq.w	801a7ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 801a5b6:	3301      	adds	r3, #1
 801a5b8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a5bc:	b2b6      	uxth	r6, r6
 801a5be:	b280      	uxth	r0, r0
 801a5c0:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801a5c4:	fb00 fe06 	mul.w	lr, r0, r6
 801a5c8:	0136      	lsls	r6, r6, #4
 801a5ca:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801a5ce:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801a5d2:	eba6 070e 	sub.w	r7, r6, lr
 801a5d6:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 801a5da:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801a5de:	b280      	uxth	r0, r0
 801a5e0:	b2bf      	uxth	r7, r7
 801a5e2:	1a1b      	subs	r3, r3, r0
 801a5e4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801a5e8:	fb0a f607 	mul.w	r6, sl, r7
 801a5ec:	b29b      	uxth	r3, r3
 801a5ee:	fb0b 6603 	mla	r6, fp, r3, r6
 801a5f2:	fb00 6609 	mla	r6, r0, r9, r6
 801a5f6:	fb0e 6608 	mla	r6, lr, r8, r6
 801a5fa:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801a5fe:	9600      	str	r6, [sp, #0]
 801a600:	2e00      	cmp	r6, #0
 801a602:	f000 80be 	beq.w	801a782 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 801a606:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801a60a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801a60e:	9e02      	ldr	r6, [sp, #8]
 801a610:	fb0b fc0c 	mul.w	ip, fp, ip
 801a614:	fb0b f505 	mul.w	r5, fp, r5
 801a618:	8836      	ldrh	r6, [r6, #0]
 801a61a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801a61e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a622:	9501      	str	r5, [sp, #4]
 801a624:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801a628:	44dc      	add	ip, fp
 801a62a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a62e:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801a632:	9503      	str	r5, [sp, #12]
 801a634:	9d01      	ldr	r5, [sp, #4]
 801a636:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801a63a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801a63e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 801a642:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801a646:	fb0a fc0c 	mul.w	ip, sl, ip
 801a64a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801a64e:	fb0a fa01 	mul.w	sl, sl, r1
 801a652:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801a656:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a65a:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 801a65e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801a662:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801a666:	4465      	add	r5, ip
 801a668:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a66c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801a670:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a674:	fb09 fc0c 	mul.w	ip, r9, ip
 801a678:	0a2d      	lsrs	r5, r5, #8
 801a67a:	fb09 f904 	mul.w	r9, r9, r4
 801a67e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a682:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801a686:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801a68a:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801a68e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a692:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801a696:	437d      	muls	r5, r7
 801a698:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801a69c:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801a6a0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a6a4:	4461      	add	r1, ip
 801a6a6:	fb08 f404 	mul.w	r4, r8, r4
 801a6aa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a6ae:	fb08 f802 	mul.w	r8, r8, r2
 801a6b2:	0a09      	lsrs	r1, r1, #8
 801a6b4:	0a22      	lsrs	r2, r4, #8
 801a6b6:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801a6ba:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801a6be:	fb07 f70a 	mul.w	r7, r7, sl
 801a6c2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a6c6:	4414      	add	r4, r2
 801a6c8:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801a6cc:	0a24      	lsrs	r4, r4, #8
 801a6ce:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801a6d2:	9a03      	ldr	r2, [sp, #12]
 801a6d4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a6d8:	fb02 5503 	mla	r5, r2, r3, r5
 801a6dc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801a6e0:	9a00      	ldr	r2, [sp, #0]
 801a6e2:	fb04 540e 	mla	r4, r4, lr, r5
 801a6e6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801a6ea:	1235      	asrs	r5, r6, #8
 801a6ec:	fb01 4100 	mla	r1, r1, r0, r4
 801a6f0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801a6f4:	0a09      	lsrs	r1, r1, #8
 801a6f6:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 801a6fa:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 801a6fe:	fb03 7101 	mla	r1, r3, r1, r7
 801a702:	fb0e 1e08 	mla	lr, lr, r8, r1
 801a706:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 801a70a:	fb00 e101 	mla	r1, r0, r1, lr
 801a70e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801a712:	b287      	uxth	r7, r0
 801a714:	0a09      	lsrs	r1, r1, #8
 801a716:	437a      	muls	r2, r7
 801a718:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801a71c:	1c53      	adds	r3, r2, #1
 801a71e:	4321      	orrs	r1, r4
 801a720:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a724:	0c0a      	lsrs	r2, r1, #16
 801a726:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801a72a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801a72e:	b2c8      	uxtb	r0, r1
 801a730:	fb12 f207 	smulbb	r2, r2, r7
 801a734:	fb14 f407 	smulbb	r4, r4, r7
 801a738:	b2db      	uxtb	r3, r3
 801a73a:	fb10 f007 	smulbb	r0, r0, r7
 801a73e:	fb05 2503 	mla	r5, r5, r3, r2
 801a742:	10f2      	asrs	r2, r6, #3
 801a744:	00f6      	lsls	r6, r6, #3
 801a746:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801a74a:	b2ad      	uxth	r5, r5
 801a74c:	b2f6      	uxtb	r6, r6
 801a74e:	fb02 4203 	mla	r2, r2, r3, r4
 801a752:	fb06 0303 	mla	r3, r6, r3, r0
 801a756:	b294      	uxth	r4, r2
 801a758:	b299      	uxth	r1, r3
 801a75a:	1c6b      	adds	r3, r5, #1
 801a75c:	1c62      	adds	r2, r4, #1
 801a75e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801a762:	1c4b      	adds	r3, r1, #1
 801a764:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801a768:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801a76c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801a770:	0952      	lsrs	r2, r2, #5
 801a772:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801a776:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a77a:	432b      	orrs	r3, r5
 801a77c:	4313      	orrs	r3, r2
 801a77e:	9a02      	ldr	r2, [sp, #8]
 801a780:	8013      	strh	r3, [r2, #0]
 801a782:	b005      	add	sp, #20
 801a784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a788:	2500      	movs	r5, #0
 801a78a:	e6ef      	b.n	801a56c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 801a78c:	2100      	movs	r1, #0
 801a78e:	460d      	mov	r5, r1
 801a790:	e6f7      	b.n	801a582 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 801a792:	2100      	movs	r1, #0
 801a794:	e6f5      	b.n	801a582 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 801a796:	4631      	mov	r1, r6
 801a798:	e6f3      	b.n	801a582 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 801a79a:	2400      	movs	r4, #0
 801a79c:	e702      	b.n	801a5a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 801a79e:	2200      	movs	r2, #0
 801a7a0:	4614      	mov	r4, r2
 801a7a2:	e70b      	b.n	801a5bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 801a7a4:	4602      	mov	r2, r0
 801a7a6:	4604      	mov	r4, r0
 801a7a8:	e708      	b.n	801a5bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 801a7aa:	2200      	movs	r2, #0
 801a7ac:	e706      	b.n	801a5bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 801a7ae:	4632      	mov	r2, r6
 801a7b0:	e704      	b.n	801a5bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

0801a7b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a7b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7b6:	b09d      	sub	sp, #116	; 0x74
 801a7b8:	9219      	str	r2, [sp, #100]	; 0x64
 801a7ba:	9307      	str	r3, [sp, #28]
 801a7bc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801a7be:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801a7c2:	901b      	str	r0, [sp, #108]	; 0x6c
 801a7c4:	931a      	str	r3, [sp, #104]	; 0x68
 801a7c6:	6850      	ldr	r0, [r2, #4]
 801a7c8:	9117      	str	r1, [sp, #92]	; 0x5c
 801a7ca:	6812      	ldr	r2, [r2, #0]
 801a7cc:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801a7d0:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801a7d4:	fb00 1303 	mla	r3, r0, r3, r1
 801a7d8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801a7dc:	930a      	str	r3, [sp, #40]	; 0x28
 801a7de:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	9310      	str	r3, [sp, #64]	; 0x40
 801a7e4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801a7e8:	930b      	str	r3, [sp, #44]	; 0x2c
 801a7ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	dc03      	bgt.n	801a7f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801a7f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	f340 8375 	ble.w	801aee2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 801a7f8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a7fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a7fe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a802:	1e48      	subs	r0, r1, #1
 801a804:	1e57      	subs	r7, r2, #1
 801a806:	9b07      	ldr	r3, [sp, #28]
 801a808:	2b00      	cmp	r3, #0
 801a80a:	f340 818e 	ble.w	801ab2a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801a80e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801a812:	ea4f 4326 	mov.w	r3, r6, asr #16
 801a816:	d406      	bmi.n	801a826 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801a818:	4584      	cmp	ip, r0
 801a81a:	da04      	bge.n	801a826 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	db02      	blt.n	801a826 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801a820:	42bb      	cmp	r3, r7
 801a822:	f2c0 8183 	blt.w	801ab2c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801a826:	f11c 0c01 	adds.w	ip, ip, #1
 801a82a:	f100 8173 	bmi.w	801ab14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801a82e:	4561      	cmp	r1, ip
 801a830:	f2c0 8170 	blt.w	801ab14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801a834:	3301      	adds	r3, #1
 801a836:	f100 816d 	bmi.w	801ab14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801a83a:	429a      	cmp	r2, r3
 801a83c:	f2c0 816a 	blt.w	801ab14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801a840:	9b07      	ldr	r3, [sp, #28]
 801a842:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801a844:	9318      	str	r3, [sp, #96]	; 0x60
 801a846:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a848:	2b00      	cmp	r3, #0
 801a84a:	f340 818c 	ble.w	801ab66 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801a84e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801a850:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801a854:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a856:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801a85a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801a85e:	1422      	asrs	r2, r4, #16
 801a860:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801a864:	689b      	ldr	r3, [r3, #8]
 801a866:	f100 81cd 	bmi.w	801ac04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801a86a:	f103 38ff 	add.w	r8, r3, #4294967295
 801a86e:	4542      	cmp	r2, r8
 801a870:	f280 81c8 	bge.w	801ac04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801a874:	f1bc 0f00 	cmp.w	ip, #0
 801a878:	f2c0 81c4 	blt.w	801ac04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801a87c:	f10e 38ff 	add.w	r8, lr, #4294967295
 801a880:	45c4      	cmp	ip, r8
 801a882:	f280 81bf 	bge.w	801ac04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801a886:	b21b      	sxth	r3, r3
 801a888:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801a88a:	fb0c 2203 	mla	r2, ip, r3, r2
 801a88e:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 801a892:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801a896:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801a89a:	2800      	cmp	r0, #0
 801a89c:	f000 81a9 	beq.w	801abf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 801a8a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801a8a4:	950c      	str	r5, [sp, #48]	; 0x30
 801a8a6:	0e2d      	lsrs	r5, r5, #24
 801a8a8:	9513      	str	r5, [sp, #76]	; 0x4c
 801a8aa:	b181      	cbz	r1, 801a8ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a8ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801a8b0:	3b01      	subs	r3, #1
 801a8b2:	009b      	lsls	r3, r3, #2
 801a8b4:	3304      	adds	r3, #4
 801a8b6:	eb08 0c03 	add.w	ip, r8, r3
 801a8ba:	f858 3003 	ldr.w	r3, [r8, r3]
 801a8be:	9308      	str	r3, [sp, #32]
 801a8c0:	0e1b      	lsrs	r3, r3, #24
 801a8c2:	9311      	str	r3, [sp, #68]	; 0x44
 801a8c4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801a8c8:	930d      	str	r3, [sp, #52]	; 0x34
 801a8ca:	0e1b      	lsrs	r3, r3, #24
 801a8cc:	9314      	str	r3, [sp, #80]	; 0x50
 801a8ce:	b280      	uxth	r0, r0
 801a8d0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a8d2:	b289      	uxth	r1, r1
 801a8d4:	fb00 f901 	mul.w	r9, r0, r1
 801a8d8:	0100      	lsls	r0, r0, #4
 801a8da:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801a8de:	eba0 0809 	sub.w	r8, r0, r9
 801a8e2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801a8e6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a8e8:	b289      	uxth	r1, r1
 801a8ea:	fa1f f888 	uxth.w	r8, r8
 801a8ee:	1a5b      	subs	r3, r3, r1
 801a8f0:	fb08 f000 	mul.w	r0, r8, r0
 801a8f4:	b29b      	uxth	r3, r3
 801a8f6:	fb03 000e 	mla	r0, r3, lr, r0
 801a8fa:	fb01 0005 	mla	r0, r1, r5, r0
 801a8fe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a900:	fb09 0005 	mla	r0, r9, r5, r0
 801a904:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801a908:	2800      	cmp	r0, #0
 801a90a:	f000 80fa 	beq.w	801ab02 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801a90e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a912:	d01b      	beq.n	801a94c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801a914:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801a918:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a91c:	fb0e fa0a 	mul.w	sl, lr, sl
 801a920:	fb0e fe02 	mul.w	lr, lr, r2
 801a924:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801a928:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a92c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801a930:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a934:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801a938:	4452      	add	r2, sl
 801a93a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a93e:	0a12      	lsrs	r2, r2, #8
 801a940:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a944:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a948:	ea42 020c 	orr.w	r2, r2, ip
 801a94c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a94e:	2dff      	cmp	r5, #255	; 0xff
 801a950:	d021      	beq.n	801a996 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801a952:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a954:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801a958:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a95a:	fb05 fb0b 	mul.w	fp, r5, fp
 801a95e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a960:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801a964:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a966:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a96a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a96e:	fb05 fa0a 	mul.w	sl, r5, sl
 801a972:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a976:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a97a:	44de      	add	lr, fp
 801a97c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a980:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a984:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a988:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a98c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a990:	ea4e 050a 	orr.w	r5, lr, sl
 801a994:	950c      	str	r5, [sp, #48]	; 0x30
 801a996:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a998:	2dff      	cmp	r5, #255	; 0xff
 801a99a:	d021      	beq.n	801a9e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801a99c:	9d08      	ldr	r5, [sp, #32]
 801a99e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801a9a2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a9a4:	fb05 fb0b 	mul.w	fp, r5, fp
 801a9a8:	9d08      	ldr	r5, [sp, #32]
 801a9aa:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801a9ae:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a9b0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a9b4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a9b8:	fb05 fa0a 	mul.w	sl, r5, sl
 801a9bc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a9c0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a9c4:	44de      	add	lr, fp
 801a9c6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a9ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a9ce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a9d2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a9d6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a9da:	ea4e 050a 	orr.w	r5, lr, sl
 801a9de:	9508      	str	r5, [sp, #32]
 801a9e0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a9e2:	2dff      	cmp	r5, #255	; 0xff
 801a9e4:	d021      	beq.n	801aa2a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801a9e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801a9e8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801a9ec:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a9ee:	fb05 fb0b 	mul.w	fp, r5, fp
 801a9f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801a9f4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801a9f8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a9fa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a9fe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801aa02:	fb05 fa0a 	mul.w	sl, r5, sl
 801aa06:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801aa0a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801aa0e:	44de      	add	lr, fp
 801aa10:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801aa14:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801aa18:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801aa1c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801aa20:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801aa24:	ea4e 050a 	orr.w	r5, lr, sl
 801aa28:	950d      	str	r5, [sp, #52]	; 0x34
 801aa2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801aa2c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801aa30:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801aa34:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801aa38:	9d08      	ldr	r5, [sp, #32]
 801aa3a:	fb08 fc0c 	mul.w	ip, r8, ip
 801aa3e:	fb03 cc0e 	mla	ip, r3, lr, ip
 801aa42:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801aa46:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801aa48:	fb01 cc0e 	mla	ip, r1, lr, ip
 801aa4c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801aa50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801aa52:	fb09 cc0e 	mla	ip, r9, lr, ip
 801aa56:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801aa5a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801aa5c:	fb08 f80e 	mul.w	r8, r8, lr
 801aa60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801aa64:	fb03 8202 	mla	r2, r3, r2, r8
 801aa68:	9b08      	ldr	r3, [sp, #32]
 801aa6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801aa6e:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801aa72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aa74:	fb01 220a 	mla	r2, r1, sl, r2
 801aa78:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801aa7c:	883b      	ldrh	r3, [r7, #0]
 801aa7e:	fb09 2901 	mla	r9, r9, r1, r2
 801aa82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801aa84:	1219      	asrs	r1, r3, #8
 801aa86:	4342      	muls	r2, r0
 801aa88:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801aa8c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801aa90:	1c50      	adds	r0, r2, #1
 801aa92:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801aa96:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801aa9a:	ea4c 0c09 	orr.w	ip, ip, r9
 801aa9e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801aaa2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801aaa6:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801aaaa:	fa5f fc8c 	uxtb.w	ip, ip
 801aaae:	fb12 f205 	smulbb	r2, r2, r5
 801aab2:	b2c0      	uxtb	r0, r0
 801aab4:	fb1c fc05 	smulbb	ip, ip, r5
 801aab8:	fb01 2100 	mla	r1, r1, r0, r2
 801aabc:	10da      	asrs	r2, r3, #3
 801aabe:	fb1e fe05 	smulbb	lr, lr, r5
 801aac2:	00db      	lsls	r3, r3, #3
 801aac4:	b289      	uxth	r1, r1
 801aac6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801aaca:	b2db      	uxtb	r3, r3
 801aacc:	fb02 e200 	mla	r2, r2, r0, lr
 801aad0:	fb03 c300 	mla	r3, r3, r0, ip
 801aad4:	b292      	uxth	r2, r2
 801aad6:	fa1f fc83 	uxth.w	ip, r3
 801aada:	1c4b      	adds	r3, r1, #1
 801aadc:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801aae0:	f10c 0301 	add.w	r3, ip, #1
 801aae4:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801aae8:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801aaec:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801aaf0:	430b      	orrs	r3, r1
 801aaf2:	1c51      	adds	r1, r2, #1
 801aaf4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801aaf8:	0952      	lsrs	r2, r2, #5
 801aafa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801aafe:	4313      	orrs	r3, r2
 801ab00:	803b      	strh	r3, [r7, #0]
 801ab02:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ab04:	3702      	adds	r7, #2
 801ab06:	441c      	add	r4, r3
 801ab08:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ab0a:	441e      	add	r6, r3
 801ab0c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ab0e:	3b01      	subs	r3, #1
 801ab10:	9318      	str	r3, [sp, #96]	; 0x60
 801ab12:	e698      	b.n	801a846 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ab14:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ab16:	441c      	add	r4, r3
 801ab18:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ab1a:	441e      	add	r6, r3
 801ab1c:	9b07      	ldr	r3, [sp, #28]
 801ab1e:	3b01      	subs	r3, #1
 801ab20:	9307      	str	r3, [sp, #28]
 801ab22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab24:	3302      	adds	r3, #2
 801ab26:	930a      	str	r3, [sp, #40]	; 0x28
 801ab28:	e66d      	b.n	801a806 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801ab2a:	d023      	beq.n	801ab74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 801ab2c:	9b07      	ldr	r3, [sp, #28]
 801ab2e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801ab30:	3b01      	subs	r3, #1
 801ab32:	fb00 4003 	mla	r0, r0, r3, r4
 801ab36:	1400      	asrs	r0, r0, #16
 801ab38:	f53f ae82 	bmi.w	801a840 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ab3c:	3901      	subs	r1, #1
 801ab3e:	4288      	cmp	r0, r1
 801ab40:	f6bf ae7e 	bge.w	801a840 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ab44:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801ab46:	fb01 6303 	mla	r3, r1, r3, r6
 801ab4a:	141b      	asrs	r3, r3, #16
 801ab4c:	f53f ae78 	bmi.w	801a840 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ab50:	3a01      	subs	r2, #1
 801ab52:	4293      	cmp	r3, r2
 801ab54:	f6bf ae74 	bge.w	801a840 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ab58:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801ab5c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801ab60:	f1bb 0f00 	cmp.w	fp, #0
 801ab64:	dc6c      	bgt.n	801ac40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 801ab66:	9b07      	ldr	r3, [sp, #28]
 801ab68:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801ab6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab6e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801ab72:	930a      	str	r3, [sp, #40]	; 0x28
 801ab74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	f340 81b3 	ble.w	801aee2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 801ab7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ab80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ab82:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ab86:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ab8a:	eef0 6a62 	vmov.f32	s13, s5
 801ab8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ab92:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ab96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ab9a:	ee16 4a90 	vmov	r4, s13
 801ab9e:	eef0 6a43 	vmov.f32	s13, s6
 801aba2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801aba6:	ee16 6a90 	vmov	r6, s13
 801abaa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801abae:	ee61 7a27 	vmul.f32	s15, s2, s15
 801abb2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801abb6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801abba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801abbe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801abc2:	ee12 2a90 	vmov	r2, s5
 801abc6:	eef0 2a47 	vmov.f32	s5, s14
 801abca:	fb92 f3f3 	sdiv	r3, r2, r3
 801abce:	ee13 2a10 	vmov	r2, s6
 801abd2:	9329      	str	r3, [sp, #164]	; 0xa4
 801abd4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801abd6:	eeb0 3a67 	vmov.f32	s6, s15
 801abda:	fb92 f3f3 	sdiv	r3, r2, r3
 801abde:	932a      	str	r3, [sp, #168]	; 0xa8
 801abe0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801abe2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801abe4:	3b01      	subs	r3, #1
 801abe6:	9317      	str	r3, [sp, #92]	; 0x5c
 801abe8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801abea:	bf08      	it	eq
 801abec:	4613      	moveq	r3, r2
 801abee:	9307      	str	r3, [sp, #28]
 801abf0:	e5fb      	b.n	801a7ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801abf2:	2900      	cmp	r1, #0
 801abf4:	f43f ae6b 	beq.w	801a8ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801abf8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801abfc:	9308      	str	r3, [sp, #32]
 801abfe:	0e1b      	lsrs	r3, r3, #24
 801ac00:	9311      	str	r3, [sp, #68]	; 0x44
 801ac02:	e664      	b.n	801a8ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ac04:	f112 0801 	adds.w	r8, r2, #1
 801ac08:	f53f af7b 	bmi.w	801ab02 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801ac0c:	4543      	cmp	r3, r8
 801ac0e:	f6ff af78 	blt.w	801ab02 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801ac12:	f11c 0801 	adds.w	r8, ip, #1
 801ac16:	f53f af74 	bmi.w	801ab02 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801ac1a:	45c6      	cmp	lr, r8
 801ac1c:	f6ff af71 	blt.w	801ab02 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801ac20:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801ac22:	b21b      	sxth	r3, r3
 801ac24:	9201      	str	r2, [sp, #4]
 801ac26:	fa0f f28e 	sxth.w	r2, lr
 801ac2a:	e9cd 1504 	strd	r1, r5, [sp, #16]
 801ac2e:	e9cd c002 	strd	ip, r0, [sp, #8]
 801ac32:	9200      	str	r2, [sp, #0]
 801ac34:	4639      	mov	r1, r7
 801ac36:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ac38:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801ac3a:	f7ff fc79 	bl	801a530 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 801ac3e:	e760      	b.n	801ab02 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801ac40:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ac42:	1427      	asrs	r7, r4, #16
 801ac44:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801ac46:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801ac4a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ac4e:	1433      	asrs	r3, r6, #16
 801ac50:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ac54:	fb01 7303 	mla	r3, r1, r3, r7
 801ac58:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 801ac5c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801ac60:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801ac64:	2a00      	cmp	r2, #0
 801ac66:	f000 8133 	beq.w	801aed0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 801ac6a:	687d      	ldr	r5, [r7, #4]
 801ac6c:	950e      	str	r5, [sp, #56]	; 0x38
 801ac6e:	0e2d      	lsrs	r5, r5, #24
 801ac70:	9515      	str	r5, [sp, #84]	; 0x54
 801ac72:	b178      	cbz	r0, 801ac94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 801ac74:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 801ac78:	3901      	subs	r1, #1
 801ac7a:	0089      	lsls	r1, r1, #2
 801ac7c:	3104      	adds	r1, #4
 801ac7e:	eb07 0e01 	add.w	lr, r7, r1
 801ac82:	5879      	ldr	r1, [r7, r1]
 801ac84:	9109      	str	r1, [sp, #36]	; 0x24
 801ac86:	0e09      	lsrs	r1, r1, #24
 801ac88:	9112      	str	r1, [sp, #72]	; 0x48
 801ac8a:	f8de 1004 	ldr.w	r1, [lr, #4]
 801ac8e:	910f      	str	r1, [sp, #60]	; 0x3c
 801ac90:	0e09      	lsrs	r1, r1, #24
 801ac92:	9116      	str	r1, [sp, #88]	; 0x58
 801ac94:	b292      	uxth	r2, r2
 801ac96:	9915      	ldr	r1, [sp, #84]	; 0x54
 801ac98:	b280      	uxth	r0, r0
 801ac9a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ac9c:	fb02 f800 	mul.w	r8, r2, r0
 801aca0:	0112      	lsls	r2, r2, #4
 801aca2:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801aca6:	eba2 0e08 	sub.w	lr, r2, r8
 801acaa:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801acae:	b280      	uxth	r0, r0
 801acb0:	fa1f fe8e 	uxth.w	lr, lr
 801acb4:	1a12      	subs	r2, r2, r0
 801acb6:	fb0e f101 	mul.w	r1, lr, r1
 801acba:	b292      	uxth	r2, r2
 801acbc:	fb02 110c 	mla	r1, r2, ip, r1
 801acc0:	fb00 1105 	mla	r1, r0, r5, r1
 801acc4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801acc6:	fb08 1105 	mla	r1, r8, r5, r1
 801acca:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801acce:	2900      	cmp	r1, #0
 801acd0:	f000 80f5 	beq.w	801aebe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 801acd4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801acd8:	d019      	beq.n	801ad0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 801acda:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801acde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ace2:	fb0c fa0a 	mul.w	sl, ip, sl
 801ace6:	fb0c fc03 	mul.w	ip, ip, r3
 801acea:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801acee:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801acf2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801acf6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801acfa:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801acfe:	4453      	add	r3, sl
 801ad00:	0a3f      	lsrs	r7, r7, #8
 801ad02:	0a1b      	lsrs	r3, r3, #8
 801ad04:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ad08:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ad0c:	433b      	orrs	r3, r7
 801ad0e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801ad10:	2dff      	cmp	r5, #255	; 0xff
 801ad12:	d020      	beq.n	801ad56 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 801ad14:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ad16:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801ad1a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801ad1c:	436f      	muls	r7, r5
 801ad1e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ad20:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ad24:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801ad28:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801ad2a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ad2e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ad32:	fb05 fa0a 	mul.w	sl, r5, sl
 801ad36:	44bc      	add	ip, r7
 801ad38:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ad3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ad40:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ad44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ad48:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ad4c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ad50:	ea4c 050a 	orr.w	r5, ip, sl
 801ad54:	950e      	str	r5, [sp, #56]	; 0x38
 801ad56:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ad58:	2dff      	cmp	r5, #255	; 0xff
 801ad5a:	d020      	beq.n	801ad9e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 801ad5c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801ad5e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801ad62:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ad64:	436f      	muls	r7, r5
 801ad66:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801ad68:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ad6c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801ad70:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ad72:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ad76:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ad7a:	fb05 fa0a 	mul.w	sl, r5, sl
 801ad7e:	44bc      	add	ip, r7
 801ad80:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ad84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ad88:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ad8c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ad90:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ad94:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ad98:	ea4c 050a 	orr.w	r5, ip, sl
 801ad9c:	9509      	str	r5, [sp, #36]	; 0x24
 801ad9e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ada0:	2dff      	cmp	r5, #255	; 0xff
 801ada2:	d020      	beq.n	801ade6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 801ada4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801ada6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801adaa:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801adac:	436f      	muls	r7, r5
 801adae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801adb0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801adb4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801adb8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801adba:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801adbe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801adc2:	fb05 fa0a 	mul.w	sl, r5, sl
 801adc6:	44bc      	add	ip, r7
 801adc8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801adcc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801add0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801add4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801add8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801addc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ade0:	ea4c 050a 	orr.w	r5, ip, sl
 801ade4:	950f      	str	r5, [sp, #60]	; 0x3c
 801ade6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ade8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801adec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801adf0:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801adf4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801adf6:	fb0e f707 	mul.w	r7, lr, r7
 801adfa:	fb02 770c 	mla	r7, r2, ip, r7
 801adfe:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801ae02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801ae04:	fb00 770c 	mla	r7, r0, ip, r7
 801ae08:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801ae0c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ae0e:	fb08 770c 	mla	r7, r8, ip, r7
 801ae12:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 801ae16:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801ae18:	fb0e fe0c 	mul.w	lr, lr, ip
 801ae1c:	0a3f      	lsrs	r7, r7, #8
 801ae1e:	fb02 e303 	mla	r3, r2, r3, lr
 801ae22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ae24:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ae28:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801ae2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ae2e:	fb00 330a 	mla	r3, r0, sl, r3
 801ae32:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801ae36:	f8b9 0000 	ldrh.w	r0, [r9]
 801ae3a:	fb08 3c0c 	mla	ip, r8, ip, r3
 801ae3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ae40:	1202      	asrs	r2, r0, #8
 801ae42:	4359      	muls	r1, r3
 801ae44:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ae48:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801ae4c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ae50:	1c4b      	adds	r3, r1, #1
 801ae52:	ea47 070c 	orr.w	r7, r7, ip
 801ae56:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801ae5a:	0c3b      	lsrs	r3, r7, #16
 801ae5c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801ae60:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801ae64:	b2ff      	uxtb	r7, r7
 801ae66:	fb13 f305 	smulbb	r3, r3, r5
 801ae6a:	b2c9      	uxtb	r1, r1
 801ae6c:	fb17 f705 	smulbb	r7, r7, r5
 801ae70:	fb02 3201 	mla	r2, r2, r1, r3
 801ae74:	10c3      	asrs	r3, r0, #3
 801ae76:	fb1c fc05 	smulbb	ip, ip, r5
 801ae7a:	00c0      	lsls	r0, r0, #3
 801ae7c:	b292      	uxth	r2, r2
 801ae7e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801ae82:	b2c0      	uxtb	r0, r0
 801ae84:	fb03 c301 	mla	r3, r3, r1, ip
 801ae88:	fb00 7001 	mla	r0, r0, r1, r7
 801ae8c:	1c51      	adds	r1, r2, #1
 801ae8e:	b29b      	uxth	r3, r3
 801ae90:	b280      	uxth	r0, r0
 801ae92:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ae96:	f100 0c01 	add.w	ip, r0, #1
 801ae9a:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801ae9e:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 801aea2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801aea6:	ea4c 0202 	orr.w	r2, ip, r2
 801aeaa:	f103 0c01 	add.w	ip, r3, #1
 801aeae:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801aeb2:	095b      	lsrs	r3, r3, #5
 801aeb4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801aeb8:	431a      	orrs	r2, r3
 801aeba:	f8a9 2000 	strh.w	r2, [r9]
 801aebe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801aec0:	f109 0902 	add.w	r9, r9, #2
 801aec4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801aec8:	441c      	add	r4, r3
 801aeca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801aecc:	441e      	add	r6, r3
 801aece:	e647      	b.n	801ab60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801aed0:	2800      	cmp	r0, #0
 801aed2:	f43f aedf 	beq.w	801ac94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 801aed6:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 801aeda:	9109      	str	r1, [sp, #36]	; 0x24
 801aedc:	0e09      	lsrs	r1, r1, #24
 801aede:	9112      	str	r1, [sp, #72]	; 0x48
 801aee0:	e6d8      	b.n	801ac94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 801aee2:	b01d      	add	sp, #116	; 0x74
 801aee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aee8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 801aee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aeec:	b085      	sub	sp, #20
 801aeee:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 801aef2:	9102      	str	r1, [sp, #8]
 801aef4:	2c00      	cmp	r4, #0
 801aef6:	fb04 7103 	mla	r1, r4, r3, r7
 801aefa:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 801aefe:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801af02:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 801af06:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801af0a:	f2c0 810c 	blt.w	801b126 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 801af0e:	45a6      	cmp	lr, r4
 801af10:	f340 8109 	ble.w	801b126 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 801af14:	2f00      	cmp	r7, #0
 801af16:	f2c0 8104 	blt.w	801b122 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 801af1a:	42bb      	cmp	r3, r7
 801af1c:	f340 8101 	ble.w	801b122 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 801af20:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 801af24:	1c7a      	adds	r2, r7, #1
 801af26:	f100 8101 	bmi.w	801b12c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 801af2a:	4293      	cmp	r3, r2
 801af2c:	f340 80fe 	ble.w	801b12c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 801af30:	2e00      	cmp	r6, #0
 801af32:	f000 80fd 	beq.w	801b130 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 801af36:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801af3a:	3401      	adds	r4, #1
 801af3c:	f100 80fc 	bmi.w	801b138 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 801af40:	45a6      	cmp	lr, r4
 801af42:	f340 80f9 	ble.w	801b138 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 801af46:	2800      	cmp	r0, #0
 801af48:	f000 80f9 	beq.w	801b13e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 801af4c:	2f00      	cmp	r7, #0
 801af4e:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 801af52:	f2c0 80ef 	blt.w	801b134 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 801af56:	42bb      	cmp	r3, r7
 801af58:	f340 80ec 	ble.w	801b134 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 801af5c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801af60:	3701      	adds	r7, #1
 801af62:	f100 80ef 	bmi.w	801b144 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 801af66:	42bb      	cmp	r3, r7
 801af68:	f340 80ec 	ble.w	801b144 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 801af6c:	2e00      	cmp	r6, #0
 801af6e:	f000 80eb 	beq.w	801b148 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 801af72:	6852      	ldr	r2, [r2, #4]
 801af74:	b2b6      	uxth	r6, r6
 801af76:	b280      	uxth	r0, r0
 801af78:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801af7c:	fb00 fe06 	mul.w	lr, r0, r6
 801af80:	0136      	lsls	r6, r6, #4
 801af82:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801af86:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801af8a:	eba6 070e 	sub.w	r7, r6, lr
 801af8e:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 801af92:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801af96:	b280      	uxth	r0, r0
 801af98:	b2bf      	uxth	r7, r7
 801af9a:	1a1b      	subs	r3, r3, r0
 801af9c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801afa0:	fb07 f60a 	mul.w	r6, r7, sl
 801afa4:	b29b      	uxth	r3, r3
 801afa6:	fb0b 6603 	mla	r6, fp, r3, r6
 801afaa:	fb00 6609 	mla	r6, r0, r9, r6
 801afae:	fb0e 6608 	mla	r6, lr, r8, r6
 801afb2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801afb6:	9600      	str	r6, [sp, #0]
 801afb8:	2e00      	cmp	r6, #0
 801afba:	f000 80af 	beq.w	801b11c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 801afbe:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801afc2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801afc6:	9e02      	ldr	r6, [sp, #8]
 801afc8:	fb0b fc0c 	mul.w	ip, fp, ip
 801afcc:	fb0b f505 	mul.w	r5, fp, r5
 801afd0:	8836      	ldrh	r6, [r6, #0]
 801afd2:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801afd6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801afda:	9501      	str	r5, [sp, #4]
 801afdc:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801afe0:	44dc      	add	ip, fp
 801afe2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801afe6:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801afea:	9503      	str	r5, [sp, #12]
 801afec:	9d01      	ldr	r5, [sp, #4]
 801afee:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801aff2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801aff6:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 801affa:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801affe:	fb0a fc0c 	mul.w	ip, sl, ip
 801b002:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801b006:	fb0a fa01 	mul.w	sl, sl, r1
 801b00a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801b00e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801b012:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 801b016:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801b01a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801b01e:	4465      	add	r5, ip
 801b020:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b024:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801b028:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b02c:	fb09 fc0c 	mul.w	ip, r9, ip
 801b030:	0a2d      	lsrs	r5, r5, #8
 801b032:	fb09 f904 	mul.w	r9, r9, r4
 801b036:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b03a:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801b03e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801b042:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801b046:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801b04a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801b04e:	437d      	muls	r5, r7
 801b050:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801b054:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801b058:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b05c:	4461      	add	r1, ip
 801b05e:	fb08 f404 	mul.w	r4, r8, r4
 801b062:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b066:	fb08 f802 	mul.w	r8, r8, r2
 801b06a:	0a09      	lsrs	r1, r1, #8
 801b06c:	0a22      	lsrs	r2, r4, #8
 801b06e:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801b072:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801b076:	fb07 f70a 	mul.w	r7, r7, sl
 801b07a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801b07e:	4414      	add	r4, r2
 801b080:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801b084:	0a24      	lsrs	r4, r4, #8
 801b086:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801b08a:	9a03      	ldr	r2, [sp, #12]
 801b08c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801b090:	fb02 5503 	mla	r5, r2, r3, r5
 801b094:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801b098:	fb04 540e 	mla	r4, r4, lr, r5
 801b09c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801b0a0:	fb01 4100 	mla	r1, r1, r0, r4
 801b0a4:	0a09      	lsrs	r1, r1, #8
 801b0a6:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 801b0aa:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 801b0ae:	fb03 7101 	mla	r1, r3, r1, r7
 801b0b2:	9b00      	ldr	r3, [sp, #0]
 801b0b4:	fb0e 1e08 	mla	lr, lr, r8, r1
 801b0b8:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 801b0bc:	43da      	mvns	r2, r3
 801b0be:	1233      	asrs	r3, r6, #8
 801b0c0:	fb00 e101 	mla	r1, r0, r1, lr
 801b0c4:	10f0      	asrs	r0, r6, #3
 801b0c6:	b2d2      	uxtb	r2, r2
 801b0c8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801b0cc:	0a09      	lsrs	r1, r1, #8
 801b0ce:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801b0d2:	00f6      	lsls	r6, r6, #3
 801b0d4:	4353      	muls	r3, r2
 801b0d6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801b0da:	4350      	muls	r0, r2
 801b0dc:	b2f6      	uxtb	r6, r6
 801b0de:	4321      	orrs	r1, r4
 801b0e0:	4356      	muls	r6, r2
 801b0e2:	1c5a      	adds	r2, r3, #1
 801b0e4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801b0e8:	0c0b      	lsrs	r3, r1, #16
 801b0ea:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801b0ee:	1c42      	adds	r2, r0, #1
 801b0f0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801b0f4:	0a0a      	lsrs	r2, r1, #8
 801b0f6:	021b      	lsls	r3, r3, #8
 801b0f8:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801b0fc:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801b100:	00d2      	lsls	r2, r2, #3
 801b102:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b106:	4313      	orrs	r3, r2
 801b108:	1c72      	adds	r2, r6, #1
 801b10a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801b10e:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 801b112:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801b116:	4319      	orrs	r1, r3
 801b118:	9b02      	ldr	r3, [sp, #8]
 801b11a:	8019      	strh	r1, [r3, #0]
 801b11c:	b005      	add	sp, #20
 801b11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b122:	2500      	movs	r5, #0
 801b124:	e6fe      	b.n	801af24 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 801b126:	2100      	movs	r1, #0
 801b128:	460d      	mov	r5, r1
 801b12a:	e706      	b.n	801af3a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 801b12c:	2100      	movs	r1, #0
 801b12e:	e704      	b.n	801af3a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 801b130:	4631      	mov	r1, r6
 801b132:	e702      	b.n	801af3a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 801b134:	2400      	movs	r4, #0
 801b136:	e713      	b.n	801af60 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 801b138:	2200      	movs	r2, #0
 801b13a:	4614      	mov	r4, r2
 801b13c:	e71a      	b.n	801af74 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 801b13e:	4602      	mov	r2, r0
 801b140:	4604      	mov	r4, r0
 801b142:	e717      	b.n	801af74 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 801b144:	2200      	movs	r2, #0
 801b146:	e715      	b.n	801af74 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 801b148:	4632      	mov	r2, r6
 801b14a:	e713      	b.n	801af74 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

0801b14c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b150:	b09b      	sub	sp, #108	; 0x6c
 801b152:	9218      	str	r2, [sp, #96]	; 0x60
 801b154:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b156:	9019      	str	r0, [sp, #100]	; 0x64
 801b158:	9116      	str	r1, [sp, #88]	; 0x58
 801b15a:	6850      	ldr	r0, [r2, #4]
 801b15c:	9307      	str	r3, [sp, #28]
 801b15e:	6812      	ldr	r2, [r2, #0]
 801b160:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801b164:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 801b168:	fb00 1303 	mla	r3, r0, r3, r1
 801b16c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b170:	930a      	str	r3, [sp, #40]	; 0x28
 801b172:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b174:	681b      	ldr	r3, [r3, #0]
 801b176:	930f      	str	r3, [sp, #60]	; 0x3c
 801b178:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	dc03      	bgt.n	801b186 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801b17e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b180:	2b00      	cmp	r3, #0
 801b182:	f340 8387 	ble.w	801b894 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 801b186:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b188:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b18c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b190:	1e48      	subs	r0, r1, #1
 801b192:	1e57      	subs	r7, r2, #1
 801b194:	9b07      	ldr	r3, [sp, #28]
 801b196:	2b00      	cmp	r3, #0
 801b198:	f340 8166 	ble.w	801b468 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801b19c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801b1a0:	ea4f 4326 	mov.w	r3, r6, asr #16
 801b1a4:	d406      	bmi.n	801b1b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b1a6:	4584      	cmp	ip, r0
 801b1a8:	da04      	bge.n	801b1b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b1aa:	2b00      	cmp	r3, #0
 801b1ac:	db02      	blt.n	801b1b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b1ae:	42bb      	cmp	r3, r7
 801b1b0:	f2c0 815b 	blt.w	801b46a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801b1b4:	f11c 0c01 	adds.w	ip, ip, #1
 801b1b8:	f100 814b 	bmi.w	801b452 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 801b1bc:	4561      	cmp	r1, ip
 801b1be:	f2c0 8148 	blt.w	801b452 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 801b1c2:	3301      	adds	r3, #1
 801b1c4:	f100 8145 	bmi.w	801b452 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 801b1c8:	429a      	cmp	r2, r3
 801b1ca:	f2c0 8142 	blt.w	801b452 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 801b1ce:	9b07      	ldr	r3, [sp, #28]
 801b1d0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801b1d2:	9317      	str	r3, [sp, #92]	; 0x5c
 801b1d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b1d6:	2b00      	cmp	r3, #0
 801b1d8:	f340 8165 	ble.w	801b4a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 801b1dc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801b1de:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801b1e2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b1e4:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801b1e8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801b1ec:	1422      	asrs	r2, r4, #16
 801b1ee:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801b1f2:	689b      	ldr	r3, [r3, #8]
 801b1f4:	f100 81d5 	bmi.w	801b5a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 801b1f8:	f103 38ff 	add.w	r8, r3, #4294967295
 801b1fc:	4542      	cmp	r2, r8
 801b1fe:	f280 81d0 	bge.w	801b5a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 801b202:	f1bc 0f00 	cmp.w	ip, #0
 801b206:	f2c0 81cc 	blt.w	801b5a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 801b20a:	f10e 38ff 	add.w	r8, lr, #4294967295
 801b20e:	45c4      	cmp	ip, r8
 801b210:	f280 81c7 	bge.w	801b5a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 801b214:	b21b      	sxth	r3, r3
 801b216:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801b218:	fb0c 2203 	mla	r2, ip, r3, r2
 801b21c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 801b220:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801b224:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801b228:	2900      	cmp	r1, #0
 801b22a:	f000 8182 	beq.w	801b532 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 801b22e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b232:	950b      	str	r5, [sp, #44]	; 0x2c
 801b234:	0e2d      	lsrs	r5, r5, #24
 801b236:	9512      	str	r5, [sp, #72]	; 0x48
 801b238:	b180      	cbz	r0, 801b25c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 801b23a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801b23e:	3b01      	subs	r3, #1
 801b240:	009b      	lsls	r3, r3, #2
 801b242:	3304      	adds	r3, #4
 801b244:	eb08 0c03 	add.w	ip, r8, r3
 801b248:	f858 3003 	ldr.w	r3, [r8, r3]
 801b24c:	9308      	str	r3, [sp, #32]
 801b24e:	0e1b      	lsrs	r3, r3, #24
 801b250:	9310      	str	r3, [sp, #64]	; 0x40
 801b252:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801b256:	930c      	str	r3, [sp, #48]	; 0x30
 801b258:	0e1b      	lsrs	r3, r3, #24
 801b25a:	9313      	str	r3, [sp, #76]	; 0x4c
 801b25c:	b289      	uxth	r1, r1
 801b25e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b260:	b280      	uxth	r0, r0
 801b262:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801b264:	fb01 f900 	mul.w	r9, r1, r0
 801b268:	0109      	lsls	r1, r1, #4
 801b26a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801b26e:	eba1 0809 	sub.w	r8, r1, r9
 801b272:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801b276:	b280      	uxth	r0, r0
 801b278:	fa1f f888 	uxth.w	r8, r8
 801b27c:	1a09      	subs	r1, r1, r0
 801b27e:	fb08 f303 	mul.w	r3, r8, r3
 801b282:	b289      	uxth	r1, r1
 801b284:	fb01 330e 	mla	r3, r1, lr, r3
 801b288:	fb00 3305 	mla	r3, r0, r5, r3
 801b28c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b28e:	fb09 3305 	mla	r3, r9, r5, r3
 801b292:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b296:	2b00      	cmp	r3, #0
 801b298:	f000 80d2 	beq.w	801b440 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801b29c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801b2a0:	d01b      	beq.n	801b2da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 801b2a2:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801b2a6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b2aa:	fb0e fa0a 	mul.w	sl, lr, sl
 801b2ae:	fb0e fe02 	mul.w	lr, lr, r2
 801b2b2:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801b2b6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801b2ba:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801b2be:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801b2c2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801b2c6:	4452      	add	r2, sl
 801b2c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b2cc:	0a12      	lsrs	r2, r2, #8
 801b2ce:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801b2d2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801b2d6:	ea42 020c 	orr.w	r2, r2, ip
 801b2da:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b2dc:	2dff      	cmp	r5, #255	; 0xff
 801b2de:	d021      	beq.n	801b324 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801b2e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801b2e2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801b2e6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b2e8:	fb05 fb0b 	mul.w	fp, r5, fp
 801b2ec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801b2ee:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801b2f2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b2f4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b2f8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b2fc:	fb05 fa0a 	mul.w	sl, r5, sl
 801b300:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b304:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b308:	44de      	add	lr, fp
 801b30a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b30e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b312:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b316:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b31a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b31e:	ea4e 050a 	orr.w	r5, lr, sl
 801b322:	950b      	str	r5, [sp, #44]	; 0x2c
 801b324:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801b326:	2dff      	cmp	r5, #255	; 0xff
 801b328:	d021      	beq.n	801b36e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 801b32a:	9d08      	ldr	r5, [sp, #32]
 801b32c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801b330:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801b332:	fb05 fb0b 	mul.w	fp, r5, fp
 801b336:	9d08      	ldr	r5, [sp, #32]
 801b338:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801b33c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801b33e:	fb05 fa0e 	mul.w	sl, r5, lr
 801b342:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b346:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b34a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b34e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b352:	44de      	add	lr, fp
 801b354:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b358:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b35c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b360:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b364:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b368:	ea4e 050a 	orr.w	r5, lr, sl
 801b36c:	9508      	str	r5, [sp, #32]
 801b36e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b370:	2dff      	cmp	r5, #255	; 0xff
 801b372:	d021      	beq.n	801b3b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801b374:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b376:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801b37a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b37c:	fb05 fb0b 	mul.w	fp, r5, fp
 801b380:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b382:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801b386:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b388:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b38c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b390:	fb05 fa0a 	mul.w	sl, r5, sl
 801b394:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b398:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b39c:	44de      	add	lr, fp
 801b39e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b3a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b3a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b3aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b3ae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b3b2:	ea4e 050a 	orr.w	r5, lr, sl
 801b3b6:	950c      	str	r5, [sp, #48]	; 0x30
 801b3b8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801b3ba:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801b3be:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b3c2:	2bff      	cmp	r3, #255	; 0xff
 801b3c4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801b3c8:	9d08      	ldr	r5, [sp, #32]
 801b3ca:	fb08 fc0c 	mul.w	ip, r8, ip
 801b3ce:	fb01 cc0e 	mla	ip, r1, lr, ip
 801b3d2:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801b3d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b3d8:	fb00 cc0e 	mla	ip, r0, lr, ip
 801b3dc:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801b3e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801b3e2:	fb09 cc0e 	mla	ip, r9, lr, ip
 801b3e6:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801b3ea:	fb08 f80e 	mul.w	r8, r8, lr
 801b3ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b3f2:	fb01 8202 	mla	r2, r1, r2, r8
 801b3f6:	9908      	ldr	r1, [sp, #32]
 801b3f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b3fc:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801b400:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b402:	fb00 220a 	mla	r2, r0, sl, r2
 801b406:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801b40a:	fb09 2900 	mla	r9, r9, r0, r2
 801b40e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b412:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801b416:	ea4c 0c09 	orr.w	ip, ip, r9
 801b41a:	ea4f 221c 	mov.w	r2, ip, lsr #8
 801b41e:	f040 8091 	bne.w	801b544 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801b422:	ea4f 135c 	mov.w	r3, ip, lsr #5
 801b426:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 801b42a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b42e:	f022 0207 	bic.w	r2, r2, #7
 801b432:	431a      	orrs	r2, r3
 801b434:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801b438:	ea4c 0c02 	orr.w	ip, ip, r2
 801b43c:	f8a7 c000 	strh.w	ip, [r7]
 801b440:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b442:	3702      	adds	r7, #2
 801b444:	441c      	add	r4, r3
 801b446:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b448:	441e      	add	r6, r3
 801b44a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b44c:	3b01      	subs	r3, #1
 801b44e:	9317      	str	r3, [sp, #92]	; 0x5c
 801b450:	e6c0      	b.n	801b1d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801b452:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b454:	441c      	add	r4, r3
 801b456:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b458:	441e      	add	r6, r3
 801b45a:	9b07      	ldr	r3, [sp, #28]
 801b45c:	3b01      	subs	r3, #1
 801b45e:	9307      	str	r3, [sp, #28]
 801b460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b462:	3302      	adds	r3, #2
 801b464:	930a      	str	r3, [sp, #40]	; 0x28
 801b466:	e695      	b.n	801b194 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b468:	d024      	beq.n	801b4b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801b46a:	9b07      	ldr	r3, [sp, #28]
 801b46c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801b46e:	3b01      	subs	r3, #1
 801b470:	fb00 4003 	mla	r0, r0, r3, r4
 801b474:	1400      	asrs	r0, r0, #16
 801b476:	f53f aeaa 	bmi.w	801b1ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b47a:	3901      	subs	r1, #1
 801b47c:	4288      	cmp	r0, r1
 801b47e:	f6bf aea6 	bge.w	801b1ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b482:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801b484:	fb01 6303 	mla	r3, r1, r3, r6
 801b488:	141b      	asrs	r3, r3, #16
 801b48a:	f53f aea0 	bmi.w	801b1ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b48e:	3a01      	subs	r2, #1
 801b490:	4293      	cmp	r3, r2
 801b492:	f6bf ae9c 	bge.w	801b1ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b496:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801b49a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 801b49e:	f1bb 0f00 	cmp.w	fp, #0
 801b4a2:	f300 809a 	bgt.w	801b5da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 801b4a6:	9b07      	ldr	r3, [sp, #28]
 801b4a8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801b4ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b4ae:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801b4b2:	930a      	str	r3, [sp, #40]	; 0x28
 801b4b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	f340 81ec 	ble.w	801b894 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 801b4bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b4c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b4c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b4c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b4ca:	eef0 6a62 	vmov.f32	s13, s5
 801b4ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b4d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b4d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b4da:	ee16 4a90 	vmov	r4, s13
 801b4de:	eef0 6a43 	vmov.f32	s13, s6
 801b4e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b4e6:	ee16 6a90 	vmov	r6, s13
 801b4ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b4ee:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b4f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b4f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b4fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b4fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b502:	ee12 2a90 	vmov	r2, s5
 801b506:	eef0 2a47 	vmov.f32	s5, s14
 801b50a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b50e:	ee13 2a10 	vmov	r2, s6
 801b512:	9327      	str	r3, [sp, #156]	; 0x9c
 801b514:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b516:	eeb0 3a67 	vmov.f32	s6, s15
 801b51a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b51e:	9328      	str	r3, [sp, #160]	; 0xa0
 801b520:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b522:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b524:	3b01      	subs	r3, #1
 801b526:	9316      	str	r3, [sp, #88]	; 0x58
 801b528:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b52a:	bf08      	it	eq
 801b52c:	4613      	moveq	r3, r2
 801b52e:	9307      	str	r3, [sp, #28]
 801b530:	e622      	b.n	801b178 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 801b532:	2800      	cmp	r0, #0
 801b534:	f43f ae92 	beq.w	801b25c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 801b538:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801b53c:	9308      	str	r3, [sp, #32]
 801b53e:	0e1b      	lsrs	r3, r3, #24
 801b540:	9310      	str	r3, [sp, #64]	; 0x40
 801b542:	e68b      	b.n	801b25c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 801b544:	8839      	ldrh	r1, [r7, #0]
 801b546:	43db      	mvns	r3, r3
 801b548:	4dd4      	ldr	r5, [pc, #848]	; (801b89c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 801b54a:	ea4f 2e21 	mov.w	lr, r1, asr #8
 801b54e:	fa5f f883 	uxtb.w	r8, r3
 801b552:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801b556:	10c8      	asrs	r0, r1, #3
 801b558:	00cb      	lsls	r3, r1, #3
 801b55a:	fb0e fe08 	mul.w	lr, lr, r8
 801b55e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801b562:	b2db      	uxtb	r3, r3
 801b564:	f10e 0101 	add.w	r1, lr, #1
 801b568:	fb00 f008 	mul.w	r0, r0, r8
 801b56c:	fb03 f308 	mul.w	r3, r3, r8
 801b570:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 801b574:	ea4f 411c 	mov.w	r1, ip, lsr #16
 801b578:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 801b57c:	f100 0e01 	add.w	lr, r0, #1
 801b580:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 801b584:	b2c9      	uxtb	r1, r1
 801b586:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801b58a:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 801b58e:	00d2      	lsls	r2, r2, #3
 801b590:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b594:	430a      	orrs	r2, r1
 801b596:	1c59      	adds	r1, r3, #1
 801b598:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801b59c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801b5a0:	e748      	b.n	801b434 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 801b5a2:	f112 0801 	adds.w	r8, r2, #1
 801b5a6:	f53f af4b 	bmi.w	801b440 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801b5aa:	4543      	cmp	r3, r8
 801b5ac:	f6ff af48 	blt.w	801b440 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801b5b0:	f11c 0801 	adds.w	r8, ip, #1
 801b5b4:	f53f af44 	bmi.w	801b440 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801b5b8:	45c6      	cmp	lr, r8
 801b5ba:	f6ff af41 	blt.w	801b440 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801b5be:	b21b      	sxth	r3, r3
 801b5c0:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801b5c4:	fa0f f28e 	sxth.w	r2, lr
 801b5c8:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801b5cc:	9200      	str	r2, [sp, #0]
 801b5ce:	4639      	mov	r1, r7
 801b5d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b5d2:	9819      	ldr	r0, [sp, #100]	; 0x64
 801b5d4:	f7ff fc88 	bl	801aee8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 801b5d8:	e732      	b.n	801b440 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801b5da:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b5dc:	1421      	asrs	r1, r4, #16
 801b5de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801b5e0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801b5e4:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 801b5e8:	1433      	asrs	r3, r6, #16
 801b5ea:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801b5ee:	fb07 1303 	mla	r3, r7, r3, r1
 801b5f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801b5f4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801b5f8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801b5fc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801b600:	2a00      	cmp	r2, #0
 801b602:	f000 8108 	beq.w	801b816 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 801b606:	684d      	ldr	r5, [r1, #4]
 801b608:	950d      	str	r5, [sp, #52]	; 0x34
 801b60a:	0e2d      	lsrs	r5, r5, #24
 801b60c:	9514      	str	r5, [sp, #80]	; 0x50
 801b60e:	b178      	cbz	r0, 801b630 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801b610:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 801b614:	3f01      	subs	r7, #1
 801b616:	00bf      	lsls	r7, r7, #2
 801b618:	3704      	adds	r7, #4
 801b61a:	eb01 0e07 	add.w	lr, r1, r7
 801b61e:	59c9      	ldr	r1, [r1, r7]
 801b620:	9109      	str	r1, [sp, #36]	; 0x24
 801b622:	0e09      	lsrs	r1, r1, #24
 801b624:	9111      	str	r1, [sp, #68]	; 0x44
 801b626:	f8de 1004 	ldr.w	r1, [lr, #4]
 801b62a:	910e      	str	r1, [sp, #56]	; 0x38
 801b62c:	0e09      	lsrs	r1, r1, #24
 801b62e:	9115      	str	r1, [sp, #84]	; 0x54
 801b630:	b292      	uxth	r2, r2
 801b632:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b634:	b280      	uxth	r0, r0
 801b636:	fb02 f900 	mul.w	r9, r2, r0
 801b63a:	0112      	lsls	r2, r2, #4
 801b63c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801b640:	eba2 0e09 	sub.w	lr, r2, r9
 801b644:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801b648:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b64a:	b280      	uxth	r0, r0
 801b64c:	fa1f fe8e 	uxth.w	lr, lr
 801b650:	1a09      	subs	r1, r1, r0
 801b652:	fb0e f202 	mul.w	r2, lr, r2
 801b656:	b289      	uxth	r1, r1
 801b658:	fb01 220c 	mla	r2, r1, ip, r2
 801b65c:	fb00 2205 	mla	r2, r0, r5, r2
 801b660:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801b662:	fb09 2205 	mla	r2, r9, r5, r2
 801b666:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801b66a:	2a00      	cmp	r2, #0
 801b66c:	f000 80ca 	beq.w	801b804 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801b670:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801b674:	d019      	beq.n	801b6aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 801b676:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801b67a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b67e:	fb0c fa0a 	mul.w	sl, ip, sl
 801b682:	fb0c fc03 	mul.w	ip, ip, r3
 801b686:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801b68a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801b68e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801b692:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b696:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801b69a:	4453      	add	r3, sl
 801b69c:	0a3f      	lsrs	r7, r7, #8
 801b69e:	0a1b      	lsrs	r3, r3, #8
 801b6a0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801b6a4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b6a8:	433b      	orrs	r3, r7
 801b6aa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b6ac:	2dff      	cmp	r5, #255	; 0xff
 801b6ae:	d020      	beq.n	801b6f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 801b6b0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b6b2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801b6b6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b6b8:	436f      	muls	r7, r5
 801b6ba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b6bc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b6c0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801b6c4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b6c6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801b6ca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b6ce:	fb05 fa0a 	mul.w	sl, r5, sl
 801b6d2:	44bc      	add	ip, r7
 801b6d4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801b6d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b6dc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b6e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b6e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b6e8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b6ec:	ea4c 050a 	orr.w	r5, ip, sl
 801b6f0:	950d      	str	r5, [sp, #52]	; 0x34
 801b6f2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b6f4:	2dff      	cmp	r5, #255	; 0xff
 801b6f6:	d020      	beq.n	801b73a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 801b6f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801b6fa:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801b6fe:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b700:	436f      	muls	r7, r5
 801b702:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801b704:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 801b708:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b70a:	fb05 fa0c 	mul.w	sl, r5, ip
 801b70e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b712:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801b716:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b71a:	44bc      	add	ip, r7
 801b71c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801b720:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b724:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b728:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b72c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b730:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b734:	ea4c 050a 	orr.w	r5, ip, sl
 801b738:	9509      	str	r5, [sp, #36]	; 0x24
 801b73a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801b73c:	2dff      	cmp	r5, #255	; 0xff
 801b73e:	d020      	beq.n	801b782 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 801b740:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801b742:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801b746:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801b748:	436f      	muls	r7, r5
 801b74a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801b74c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b750:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801b754:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801b756:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801b75a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b75e:	fb05 fa0a 	mul.w	sl, r5, sl
 801b762:	44bc      	add	ip, r7
 801b764:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801b768:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b76c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b770:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b774:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b778:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b77c:	ea4c 050a 	orr.w	r5, ip, sl
 801b780:	950e      	str	r5, [sp, #56]	; 0x38
 801b782:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b784:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801b788:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b78c:	2aff      	cmp	r2, #255	; 0xff
 801b78e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801b792:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801b794:	fb0e f707 	mul.w	r7, lr, r7
 801b798:	fb01 770c 	mla	r7, r1, ip, r7
 801b79c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801b7a0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801b7a2:	fb00 770c 	mla	r7, r0, ip, r7
 801b7a6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801b7aa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b7ac:	fb09 770c 	mla	r7, r9, ip, r7
 801b7b0:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 801b7b4:	fb0e fe0c 	mul.w	lr, lr, ip
 801b7b8:	ea4f 2717 	mov.w	r7, r7, lsr #8
 801b7bc:	fb01 e303 	mla	r3, r1, r3, lr
 801b7c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b7c2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801b7c6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801b7ca:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b7cc:	fb00 330a 	mla	r3, r0, sl, r3
 801b7d0:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801b7d4:	fb09 3c0c 	mla	ip, r9, ip, r3
 801b7d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b7dc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801b7e0:	ea47 070c 	orr.w	r7, r7, ip
 801b7e4:	ea4f 2317 	mov.w	r3, r7, lsr #8
 801b7e8:	d11e      	bne.n	801b828 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 801b7ea:	097a      	lsrs	r2, r7, #5
 801b7ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801b7f0:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 801b7f4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b7f8:	f023 0307 	bic.w	r3, r3, #7
 801b7fc:	4313      	orrs	r3, r2
 801b7fe:	431f      	orrs	r7, r3
 801b800:	f8a8 7000 	strh.w	r7, [r8]
 801b804:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b806:	f108 0802 	add.w	r8, r8, #2
 801b80a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b80e:	441c      	add	r4, r3
 801b810:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b812:	441e      	add	r6, r3
 801b814:	e643      	b.n	801b49e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 801b816:	2800      	cmp	r0, #0
 801b818:	f43f af0a 	beq.w	801b630 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801b81c:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801b820:	9109      	str	r1, [sp, #36]	; 0x24
 801b822:	0e09      	lsrs	r1, r1, #24
 801b824:	9111      	str	r1, [sp, #68]	; 0x44
 801b826:	e703      	b.n	801b630 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801b828:	f8b8 1000 	ldrh.w	r1, [r8]
 801b82c:	43d2      	mvns	r2, r2
 801b82e:	ea4f 2c21 	mov.w	ip, r1, asr #8
 801b832:	fa5f fe82 	uxtb.w	lr, r2
 801b836:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b83a:	10c8      	asrs	r0, r1, #3
 801b83c:	00ca      	lsls	r2, r1, #3
 801b83e:	fb0c fc0e 	mul.w	ip, ip, lr
 801b842:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801b846:	b2d2      	uxtb	r2, r2
 801b848:	f10c 0101 	add.w	r1, ip, #1
 801b84c:	fb00 f00e 	mul.w	r0, r0, lr
 801b850:	fb02 f20e 	mul.w	r2, r2, lr
 801b854:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801b858:	0c39      	lsrs	r1, r7, #16
 801b85a:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801b85e:	490f      	ldr	r1, [pc, #60]	; (801b89c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 801b860:	fa5f fc8c 	uxtb.w	ip, ip
 801b864:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 801b868:	1c41      	adds	r1, r0, #1
 801b86a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801b86e:	1c51      	adds	r1, r2, #1
 801b870:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801b874:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801b878:	00c0      	lsls	r0, r0, #3
 801b87a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801b87e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b882:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 801b886:	ea4c 0c00 	orr.w	ip, ip, r0
 801b88a:	ea47 0c0c 	orr.w	ip, r7, ip
 801b88e:	f8a8 c000 	strh.w	ip, [r8]
 801b892:	e7b7      	b.n	801b804 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801b894:	b01b      	add	sp, #108	; 0x6c
 801b896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b89a:	bf00      	nop
 801b89c:	fffff800 	.word	0xfffff800

0801b8a0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 801b8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b8a4:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 801b8a8:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801b8ac:	2d00      	cmp	r5, #0
 801b8ae:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801b8b2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 801b8b6:	fb05 0e03 	mla	lr, r5, r3, r0
 801b8ba:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801b8be:	f2c0 808c 	blt.w	801b9da <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 801b8c2:	45a9      	cmp	r9, r5
 801b8c4:	f340 8089 	ble.w	801b9da <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 801b8c8:	2800      	cmp	r0, #0
 801b8ca:	f2c0 8084 	blt.w	801b9d6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 801b8ce:	4580      	cmp	r8, r0
 801b8d0:	f340 8081 	ble.w	801b9d6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 801b8d4:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801b8d8:	f01e 0f01 	tst.w	lr, #1
 801b8dc:	5d16      	ldrb	r6, [r2, r4]
 801b8de:	bf0c      	ite	eq
 801b8e0:	f006 060f 	andeq.w	r6, r6, #15
 801b8e4:	1136      	asrne	r6, r6, #4
 801b8e6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801b8ea:	b2f6      	uxtb	r6, r6
 801b8ec:	1c44      	adds	r4, r0, #1
 801b8ee:	d477      	bmi.n	801b9e0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 801b8f0:	45a0      	cmp	r8, r4
 801b8f2:	dd75      	ble.n	801b9e0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 801b8f4:	2f00      	cmp	r7, #0
 801b8f6:	d075      	beq.n	801b9e4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 801b8f8:	f10e 0a01 	add.w	sl, lr, #1
 801b8fc:	ea4f 045a 	mov.w	r4, sl, lsr #1
 801b900:	f01a 0f01 	tst.w	sl, #1
 801b904:	5d14      	ldrb	r4, [r2, r4]
 801b906:	bf0c      	ite	eq
 801b908:	f004 040f 	andeq.w	r4, r4, #15
 801b90c:	1124      	asrne	r4, r4, #4
 801b90e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801b912:	b2e4      	uxtb	r4, r4
 801b914:	3501      	adds	r5, #1
 801b916:	d469      	bmi.n	801b9ec <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 801b918:	45a9      	cmp	r9, r5
 801b91a:	dd67      	ble.n	801b9ec <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 801b91c:	f1bc 0f00 	cmp.w	ip, #0
 801b920:	d067      	beq.n	801b9f2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 801b922:	2800      	cmp	r0, #0
 801b924:	db60      	blt.n	801b9e8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 801b926:	4580      	cmp	r8, r0
 801b928:	dd5e      	ble.n	801b9e8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 801b92a:	eb03 090e 	add.w	r9, r3, lr
 801b92e:	ea4f 0559 	mov.w	r5, r9, lsr #1
 801b932:	f019 0f01 	tst.w	r9, #1
 801b936:	5d55      	ldrb	r5, [r2, r5]
 801b938:	bf0c      	ite	eq
 801b93a:	f005 050f 	andeq.w	r5, r5, #15
 801b93e:	112d      	asrne	r5, r5, #4
 801b940:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801b944:	b2ed      	uxtb	r5, r5
 801b946:	3001      	adds	r0, #1
 801b948:	d456      	bmi.n	801b9f8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 801b94a:	4580      	cmp	r8, r0
 801b94c:	dd54      	ble.n	801b9f8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 801b94e:	2f00      	cmp	r7, #0
 801b950:	d054      	beq.n	801b9fc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 801b952:	3301      	adds	r3, #1
 801b954:	449e      	add	lr, r3
 801b956:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801b95a:	f01e 0f01 	tst.w	lr, #1
 801b95e:	5cd0      	ldrb	r0, [r2, r3]
 801b960:	bf0c      	ite	eq
 801b962:	f000 000f 	andeq.w	r0, r0, #15
 801b966:	1100      	asrne	r0, r0, #4
 801b968:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b96c:	b2c3      	uxtb	r3, r0
 801b96e:	b2ba      	uxth	r2, r7
 801b970:	fa1f fc8c 	uxth.w	ip, ip
 801b974:	fb02 f00c 	mul.w	r0, r2, ip
 801b978:	0112      	lsls	r2, r2, #4
 801b97a:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801b97e:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801b982:	1a12      	subs	r2, r2, r0
 801b984:	fa1f fc8c 	uxth.w	ip, ip
 801b988:	b292      	uxth	r2, r2
 801b98a:	eba7 070c 	sub.w	r7, r7, ip
 801b98e:	4362      	muls	r2, r4
 801b990:	b2bf      	uxth	r7, r7
 801b992:	fb06 2207 	mla	r2, r6, r7, r2
 801b996:	fb0c 2505 	mla	r5, ip, r5, r2
 801b99a:	fb00 5303 	mla	r3, r0, r3, r5
 801b99e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b9a2:	b1b3      	cbz	r3, 801b9d2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 801b9a4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 801b9a8:	435a      	muls	r2, r3
 801b9aa:	1c53      	adds	r3, r2, #1
 801b9ac:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801b9b0:	4a2d      	ldr	r2, [pc, #180]	; (801ba68 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 801b9b2:	121b      	asrs	r3, r3, #8
 801b9b4:	6812      	ldr	r2, [r2, #0]
 801b9b6:	2bff      	cmp	r3, #255	; 0xff
 801b9b8:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801b9bc:	d120      	bne.n	801ba00 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 801b9be:	0950      	lsrs	r0, r2, #5
 801b9c0:	4b2a      	ldr	r3, [pc, #168]	; (801ba6c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 801b9c2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801b9c6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b9ca:	4033      	ands	r3, r6
 801b9cc:	4318      	orrs	r0, r3
 801b9ce:	4302      	orrs	r2, r0
 801b9d0:	800a      	strh	r2, [r1, #0]
 801b9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b9d6:	2600      	movs	r6, #0
 801b9d8:	e788      	b.n	801b8ec <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 801b9da:	2400      	movs	r4, #0
 801b9dc:	4626      	mov	r6, r4
 801b9de:	e799      	b.n	801b914 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 801b9e0:	2400      	movs	r4, #0
 801b9e2:	e797      	b.n	801b914 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 801b9e4:	463c      	mov	r4, r7
 801b9e6:	e795      	b.n	801b914 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 801b9e8:	2500      	movs	r5, #0
 801b9ea:	e7ac      	b.n	801b946 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 801b9ec:	2300      	movs	r3, #0
 801b9ee:	461d      	mov	r5, r3
 801b9f0:	e7bd      	b.n	801b96e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 801b9f2:	4663      	mov	r3, ip
 801b9f4:	4665      	mov	r5, ip
 801b9f6:	e7ba      	b.n	801b96e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 801b9f8:	2300      	movs	r3, #0
 801b9fa:	e7b8      	b.n	801b96e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 801b9fc:	463b      	mov	r3, r7
 801b9fe:	e7b6      	b.n	801b96e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 801ba00:	880d      	ldrh	r5, [r1, #0]
 801ba02:	b29f      	uxth	r7, r3
 801ba04:	f3c2 4007 	ubfx	r0, r2, #16, #8
 801ba08:	43db      	mvns	r3, r3
 801ba0a:	122c      	asrs	r4, r5, #8
 801ba0c:	fb10 f007 	smulbb	r0, r0, r7
 801ba10:	b2db      	uxtb	r3, r3
 801ba12:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801ba16:	b2f6      	uxtb	r6, r6
 801ba18:	b2d2      	uxtb	r2, r2
 801ba1a:	fb04 0403 	mla	r4, r4, r3, r0
 801ba1e:	10e8      	asrs	r0, r5, #3
 801ba20:	fb12 f207 	smulbb	r2, r2, r7
 801ba24:	00ed      	lsls	r5, r5, #3
 801ba26:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801ba2a:	b2a4      	uxth	r4, r4
 801ba2c:	fb16 f607 	smulbb	r6, r6, r7
 801ba30:	b2ed      	uxtb	r5, r5
 801ba32:	fb00 6603 	mla	r6, r0, r3, r6
 801ba36:	fb05 2303 	mla	r3, r5, r3, r2
 801ba3a:	b2b0      	uxth	r0, r6
 801ba3c:	b29a      	uxth	r2, r3
 801ba3e:	1c63      	adds	r3, r4, #1
 801ba40:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801ba44:	1c53      	adds	r3, r2, #1
 801ba46:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ba4a:	1c42      	adds	r2, r0, #1
 801ba4c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801ba50:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ba54:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ba58:	0940      	lsrs	r0, r0, #5
 801ba5a:	4323      	orrs	r3, r4
 801ba5c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ba60:	4303      	orrs	r3, r0
 801ba62:	800b      	strh	r3, [r1, #0]
 801ba64:	e7b5      	b.n	801b9d2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 801ba66:	bf00      	nop
 801ba68:	20024420 	.word	0x20024420
 801ba6c:	00fff800 	.word	0x00fff800

0801ba70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ba70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba74:	b097      	sub	sp, #92	; 0x5c
 801ba76:	9214      	str	r2, [sp, #80]	; 0x50
 801ba78:	9309      	str	r3, [sp, #36]	; 0x24
 801ba7a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ba7c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801ba80:	9015      	str	r0, [sp, #84]	; 0x54
 801ba82:	910d      	str	r1, [sp, #52]	; 0x34
 801ba84:	6850      	ldr	r0, [r2, #4]
 801ba86:	930f      	str	r3, [sp, #60]	; 0x3c
 801ba88:	6812      	ldr	r2, [r2, #0]
 801ba8a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801ba8e:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 801ba92:	fb00 1303 	mla	r3, r0, r3, r1
 801ba96:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801ba9a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ba9c:	689b      	ldr	r3, [r3, #8]
 801ba9e:	3301      	adds	r3, #1
 801baa0:	f023 0301 	bic.w	r3, r3, #1
 801baa4:	930a      	str	r3, [sp, #40]	; 0x28
 801baa6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801baa8:	681f      	ldr	r7, [r3, #0]
 801baaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801baac:	2b00      	cmp	r3, #0
 801baae:	dc03      	bgt.n	801bab8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801bab0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801bab2:	2b00      	cmp	r3, #0
 801bab4:	f340 8289 	ble.w	801bfca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 801bab8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801baba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801babe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bac2:	1e48      	subs	r0, r1, #1
 801bac4:	f102 3cff 	add.w	ip, r2, #4294967295
 801bac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801baca:	2b00      	cmp	r3, #0
 801bacc:	f340 80c5 	ble.w	801bc5a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801bad0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801bad4:	ea4f 4326 	mov.w	r3, r6, asr #16
 801bad8:	d406      	bmi.n	801bae8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801bada:	4586      	cmp	lr, r0
 801badc:	da04      	bge.n	801bae8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801bade:	2b00      	cmp	r3, #0
 801bae0:	db02      	blt.n	801bae8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801bae2:	4563      	cmp	r3, ip
 801bae4:	f2c0 80ba 	blt.w	801bc5c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801bae8:	f11e 0e01 	adds.w	lr, lr, #1
 801baec:	f100 80ab 	bmi.w	801bc46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801baf0:	4571      	cmp	r1, lr
 801baf2:	f2c0 80a8 	blt.w	801bc46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801baf6:	3301      	adds	r3, #1
 801baf8:	f100 80a5 	bmi.w	801bc46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801bafc:	429a      	cmp	r2, r3
 801bafe:	f2c0 80a2 	blt.w	801bc46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801bb02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb04:	46c8      	mov	r8, r9
 801bb06:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 801bb0a:	930e      	str	r3, [sp, #56]	; 0x38
 801bb0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bb0e:	2b00      	cmp	r3, #0
 801bb10:	f340 80c4 	ble.w	801bc9c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801bb14:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bb16:	1430      	asrs	r0, r6, #16
 801bb18:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801bb1c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801bb20:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801bb24:	1423      	asrs	r3, r4, #16
 801bb26:	f100 814f 	bmi.w	801bdc8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801bb2a:	f10c 3bff 	add.w	fp, ip, #4294967295
 801bb2e:	455b      	cmp	r3, fp
 801bb30:	f280 814a 	bge.w	801bdc8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801bb34:	2800      	cmp	r0, #0
 801bb36:	f2c0 8147 	blt.w	801bdc8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801bb3a:	f10e 3bff 	add.w	fp, lr, #4294967295
 801bb3e:	4558      	cmp	r0, fp
 801bb40:	f280 8142 	bge.w	801bdc8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801bb44:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801bb46:	fb00 3305 	mla	r3, r0, r5, r3
 801bb4a:	0858      	lsrs	r0, r3, #1
 801bb4c:	07dd      	lsls	r5, r3, #31
 801bb4e:	f817 c000 	ldrb.w	ip, [r7, r0]
 801bb52:	bf54      	ite	pl
 801bb54:	f00c 0c0f 	andpl.w	ip, ip, #15
 801bb58:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801bb5c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801bb60:	fa5f fc8c 	uxtb.w	ip, ip
 801bb64:	2a00      	cmp	r2, #0
 801bb66:	f000 80dd 	beq.w	801bd24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 801bb6a:	1c58      	adds	r0, r3, #1
 801bb6c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801bb70:	07c0      	lsls	r0, r0, #31
 801bb72:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801bb76:	bf54      	ite	pl
 801bb78:	f00e 0e0f 	andpl.w	lr, lr, #15
 801bb7c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801bb80:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801bb84:	fa5f f08e 	uxtb.w	r0, lr
 801bb88:	9010      	str	r0, [sp, #64]	; 0x40
 801bb8a:	b1d9      	cbz	r1, 801bbc4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801bb8c:	4453      	add	r3, sl
 801bb8e:	0858      	lsrs	r0, r3, #1
 801bb90:	07dd      	lsls	r5, r3, #31
 801bb92:	f103 0301 	add.w	r3, r3, #1
 801bb96:	5c38      	ldrb	r0, [r7, r0]
 801bb98:	bf54      	ite	pl
 801bb9a:	f000 000f 	andpl.w	r0, r0, #15
 801bb9e:	1100      	asrmi	r0, r0, #4
 801bba0:	07dd      	lsls	r5, r3, #31
 801bba2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801bba6:	b2c0      	uxtb	r0, r0
 801bba8:	900b      	str	r0, [sp, #44]	; 0x2c
 801bbaa:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801bbae:	f817 e000 	ldrb.w	lr, [r7, r0]
 801bbb2:	bf54      	ite	pl
 801bbb4:	f00e 030f 	andpl.w	r3, lr, #15
 801bbb8:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801bbbc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801bbc0:	b2db      	uxtb	r3, r3
 801bbc2:	9311      	str	r3, [sp, #68]	; 0x44
 801bbc4:	b292      	uxth	r2, r2
 801bbc6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801bbc8:	b289      	uxth	r1, r1
 801bbca:	fb02 f301 	mul.w	r3, r2, r1
 801bbce:	0112      	lsls	r2, r2, #4
 801bbd0:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801bbd4:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801bbd8:	1ad2      	subs	r2, r2, r3
 801bbda:	b289      	uxth	r1, r1
 801bbdc:	b292      	uxth	r2, r2
 801bbde:	1a40      	subs	r0, r0, r1
 801bbe0:	436a      	muls	r2, r5
 801bbe2:	b280      	uxth	r0, r0
 801bbe4:	fb0c 2c00 	mla	ip, ip, r0, r2
 801bbe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bbea:	fb01 c102 	mla	r1, r1, r2, ip
 801bbee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bbf0:	fb03 1302 	mla	r3, r3, r2, r1
 801bbf4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bbf8:	b1db      	cbz	r3, 801bc32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801bbfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bbfc:	4353      	muls	r3, r2
 801bbfe:	1c5a      	adds	r2, r3, #1
 801bc00:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801bc04:	4ac6      	ldr	r2, [pc, #792]	; (801bf20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801bc06:	121b      	asrs	r3, r3, #8
 801bc08:	6812      	ldr	r2, [r2, #0]
 801bc0a:	2bff      	cmp	r3, #255	; 0xff
 801bc0c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 801bc10:	f040 8099 	bne.w	801bd46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801bc14:	0953      	lsrs	r3, r2, #5
 801bc16:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801bc1a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801bc1e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bc22:	f02c 0c07 	bic.w	ip, ip, #7
 801bc26:	ea43 0c0c 	orr.w	ip, r3, ip
 801bc2a:	ea4c 0202 	orr.w	r2, ip, r2
 801bc2e:	f8a8 2000 	strh.w	r2, [r8]
 801bc32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801bc34:	f108 0802 	add.w	r8, r8, #2
 801bc38:	441c      	add	r4, r3
 801bc3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bc3c:	441e      	add	r6, r3
 801bc3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bc40:	3b01      	subs	r3, #1
 801bc42:	930e      	str	r3, [sp, #56]	; 0x38
 801bc44:	e762      	b.n	801bb0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801bc46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801bc48:	f109 0902 	add.w	r9, r9, #2
 801bc4c:	441c      	add	r4, r3
 801bc4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bc50:	441e      	add	r6, r3
 801bc52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc54:	3b01      	subs	r3, #1
 801bc56:	9309      	str	r3, [sp, #36]	; 0x24
 801bc58:	e736      	b.n	801bac8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801bc5a:	d024      	beq.n	801bca6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801bc5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc5e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801bc60:	3b01      	subs	r3, #1
 801bc62:	fb00 4003 	mla	r0, r0, r3, r4
 801bc66:	1400      	asrs	r0, r0, #16
 801bc68:	f53f af4b 	bmi.w	801bb02 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bc6c:	3901      	subs	r1, #1
 801bc6e:	4288      	cmp	r0, r1
 801bc70:	f6bf af47 	bge.w	801bb02 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bc74:	9924      	ldr	r1, [sp, #144]	; 0x90
 801bc76:	fb01 6303 	mla	r3, r1, r3, r6
 801bc7a:	141b      	asrs	r3, r3, #16
 801bc7c:	f53f af41 	bmi.w	801bb02 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bc80:	3a01      	subs	r2, #1
 801bc82:	4293      	cmp	r3, r2
 801bc84:	f6bf af3d 	bge.w	801bb02 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bc88:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801bc8c:	46c8      	mov	r8, r9
 801bc8e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801bc92:	930e      	str	r3, [sp, #56]	; 0x38
 801bc94:	f1bb 0f00 	cmp.w	fp, #0
 801bc98:	f300 80b7 	bgt.w	801be0a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801bc9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc9e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801bca2:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801bca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bca8:	2b00      	cmp	r3, #0
 801bcaa:	f340 818e 	ble.w	801bfca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 801bcae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bcb2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bcb4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bcb8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bcbc:	eef0 6a62 	vmov.f32	s13, s5
 801bcc0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bcc4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bcc8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bccc:	ee16 4a90 	vmov	r4, s13
 801bcd0:	eef0 6a43 	vmov.f32	s13, s6
 801bcd4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bcd8:	ee16 6a90 	vmov	r6, s13
 801bcdc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bce0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bce4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bce8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bcec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bcf0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bcf4:	ee12 2a90 	vmov	r2, s5
 801bcf8:	eef0 2a47 	vmov.f32	s5, s14
 801bcfc:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd00:	ee13 2a10 	vmov	r2, s6
 801bd04:	9323      	str	r3, [sp, #140]	; 0x8c
 801bd06:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bd08:	eeb0 3a67 	vmov.f32	s6, s15
 801bd0c:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd10:	9324      	str	r3, [sp, #144]	; 0x90
 801bd12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bd14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bd16:	3b01      	subs	r3, #1
 801bd18:	930d      	str	r3, [sp, #52]	; 0x34
 801bd1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bd1c:	bf08      	it	eq
 801bd1e:	4613      	moveq	r3, r2
 801bd20:	9309      	str	r3, [sp, #36]	; 0x24
 801bd22:	e6c2      	b.n	801baaa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801bd24:	2900      	cmp	r1, #0
 801bd26:	f43f af4d 	beq.w	801bbc4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801bd2a:	eb0a 0003 	add.w	r0, sl, r3
 801bd2e:	0843      	lsrs	r3, r0, #1
 801bd30:	07c0      	lsls	r0, r0, #31
 801bd32:	5cfb      	ldrb	r3, [r7, r3]
 801bd34:	bf54      	ite	pl
 801bd36:	f003 030f 	andpl.w	r3, r3, #15
 801bd3a:	111b      	asrmi	r3, r3, #4
 801bd3c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801bd40:	b2db      	uxtb	r3, r3
 801bd42:	930b      	str	r3, [sp, #44]	; 0x2c
 801bd44:	e73e      	b.n	801bbc4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801bd46:	f8b8 e000 	ldrh.w	lr, [r8]
 801bd4a:	fa1f fb83 	uxth.w	fp, r3
 801bd4e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801bd52:	43db      	mvns	r3, r3
 801bd54:	ea4f 202e 	mov.w	r0, lr, asr #8
 801bd58:	fb11 f10b 	smulbb	r1, r1, fp
 801bd5c:	b2db      	uxtb	r3, r3
 801bd5e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801bd62:	fa5f fc8c 	uxtb.w	ip, ip
 801bd66:	b2d2      	uxtb	r2, r2
 801bd68:	fb00 1003 	mla	r0, r0, r3, r1
 801bd6c:	ea4f 01ee 	mov.w	r1, lr, asr #3
 801bd70:	fb1c fc0b 	smulbb	ip, ip, fp
 801bd74:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801bd78:	b280      	uxth	r0, r0
 801bd7a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801bd7e:	fb12 fb0b 	smulbb	fp, r2, fp
 801bd82:	fa5f fe8e 	uxtb.w	lr, lr
 801bd86:	fb01 cc03 	mla	ip, r1, r3, ip
 801bd8a:	fb0e bb03 	mla	fp, lr, r3, fp
 801bd8e:	1c43      	adds	r3, r0, #1
 801bd90:	fa1f fc8c 	uxth.w	ip, ip
 801bd94:	fa1f fb8b 	uxth.w	fp, fp
 801bd98:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801bd9c:	f10c 0101 	add.w	r1, ip, #1
 801bda0:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 801bda4:	f10b 0001 	add.w	r0, fp, #1
 801bda8:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801bdac:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801bdb0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801bdb4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801bdb8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801bdbc:	4318      	orrs	r0, r3
 801bdbe:	ea40 000c 	orr.w	r0, r0, ip
 801bdc2:	f8a8 0000 	strh.w	r0, [r8]
 801bdc6:	e734      	b.n	801bc32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801bdc8:	f113 0b01 	adds.w	fp, r3, #1
 801bdcc:	f53f af31 	bmi.w	801bc32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801bdd0:	45dc      	cmp	ip, fp
 801bdd2:	f6ff af2e 	blt.w	801bc32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801bdd6:	f110 0b01 	adds.w	fp, r0, #1
 801bdda:	f53f af2a 	bmi.w	801bc32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801bdde:	45de      	cmp	lr, fp
 801bde0:	f6ff af27 	blt.w	801bc32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801bde4:	9302      	str	r3, [sp, #8]
 801bde6:	fa0f f38e 	sxth.w	r3, lr
 801bdea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801bdec:	9301      	str	r3, [sp, #4]
 801bdee:	fa0f f38c 	sxth.w	r3, ip
 801bdf2:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801bdf6:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801bdfa:	9300      	str	r3, [sp, #0]
 801bdfc:	463a      	mov	r2, r7
 801bdfe:	4653      	mov	r3, sl
 801be00:	4641      	mov	r1, r8
 801be02:	9815      	ldr	r0, [sp, #84]	; 0x54
 801be04:	f7ff fd4c 	bl	801b8a0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 801be08:	e713      	b.n	801bc32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801be0a:	1422      	asrs	r2, r4, #16
 801be0c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801be0e:	1433      	asrs	r3, r6, #16
 801be10:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801be14:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801be18:	fb05 2303 	mla	r3, r5, r3, r2
 801be1c:	085a      	lsrs	r2, r3, #1
 801be1e:	07dd      	lsls	r5, r3, #31
 801be20:	5cba      	ldrb	r2, [r7, r2]
 801be22:	bf54      	ite	pl
 801be24:	f002 020f 	andpl.w	r2, r2, #15
 801be28:	1112      	asrmi	r2, r2, #4
 801be2a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801be2e:	b2d2      	uxtb	r2, r2
 801be30:	2900      	cmp	r1, #0
 801be32:	d077      	beq.n	801bf24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801be34:	f103 0e01 	add.w	lr, r3, #1
 801be38:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801be3c:	f01e 0f01 	tst.w	lr, #1
 801be40:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801be44:	bf0c      	ite	eq
 801be46:	f00c 0c0f 	andeq.w	ip, ip, #15
 801be4a:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801be4e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801be52:	fa5f f58c 	uxtb.w	r5, ip
 801be56:	9512      	str	r5, [sp, #72]	; 0x48
 801be58:	b308      	cbz	r0, 801be9e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 801be5a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801be5c:	442b      	add	r3, r5
 801be5e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801be62:	07dd      	lsls	r5, r3, #31
 801be64:	f103 0301 	add.w	r3, r3, #1
 801be68:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801be6c:	bf54      	ite	pl
 801be6e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801be72:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801be76:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801be7a:	fa5f f58c 	uxtb.w	r5, ip
 801be7e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801be82:	950c      	str	r5, [sp, #48]	; 0x30
 801be84:	07dd      	lsls	r5, r3, #31
 801be86:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801be8a:	bf54      	ite	pl
 801be8c:	f00c 0c0f 	andpl.w	ip, ip, #15
 801be90:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801be94:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801be98:	fa5f f38c 	uxtb.w	r3, ip
 801be9c:	9313      	str	r3, [sp, #76]	; 0x4c
 801be9e:	b289      	uxth	r1, r1
 801bea0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bea2:	b280      	uxth	r0, r0
 801bea4:	fb01 f300 	mul.w	r3, r1, r0
 801bea8:	0109      	lsls	r1, r1, #4
 801beaa:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801beae:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801beb2:	1ac9      	subs	r1, r1, r3
 801beb4:	b280      	uxth	r0, r0
 801beb6:	b289      	uxth	r1, r1
 801beb8:	ebac 0c00 	sub.w	ip, ip, r0
 801bebc:	4369      	muls	r1, r5
 801bebe:	fa1f fc8c 	uxth.w	ip, ip
 801bec2:	fb02 120c 	mla	r2, r2, ip, r1
 801bec6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bec8:	fb00 2001 	mla	r0, r0, r1, r2
 801becc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bece:	fb03 0302 	mla	r3, r3, r2, r0
 801bed2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bed6:	b1d3      	cbz	r3, 801bf0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801bed8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801beda:	4353      	muls	r3, r2
 801bedc:	1c5a      	adds	r2, r3, #1
 801bede:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801bee2:	4a0f      	ldr	r2, [pc, #60]	; (801bf20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801bee4:	121b      	asrs	r3, r3, #8
 801bee6:	6812      	ldr	r2, [r2, #0]
 801bee8:	2bff      	cmp	r3, #255	; 0xff
 801beea:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 801beee:	d12d      	bne.n	801bf4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801bef0:	0953      	lsrs	r3, r2, #5
 801bef2:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801bef6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801befa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801befe:	f02c 0c07 	bic.w	ip, ip, #7
 801bf02:	ea43 0c0c 	orr.w	ip, r3, ip
 801bf06:	ea4c 0202 	orr.w	r2, ip, r2
 801bf0a:	f8a8 2000 	strh.w	r2, [r8]
 801bf0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801bf10:	f108 0802 	add.w	r8, r8, #2
 801bf14:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bf18:	441c      	add	r4, r3
 801bf1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bf1c:	441e      	add	r6, r3
 801bf1e:	e6b9      	b.n	801bc94 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801bf20:	20024420 	.word	0x20024420
 801bf24:	2800      	cmp	r0, #0
 801bf26:	d0ba      	beq.n	801be9e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 801bf28:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801bf2a:	442b      	add	r3, r5
 801bf2c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801bf30:	07db      	lsls	r3, r3, #31
 801bf32:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801bf36:	bf54      	ite	pl
 801bf38:	f00c 0c0f 	andpl.w	ip, ip, #15
 801bf3c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801bf40:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801bf44:	fa5f f38c 	uxtb.w	r3, ip
 801bf48:	930c      	str	r3, [sp, #48]	; 0x30
 801bf4a:	e7a8      	b.n	801be9e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 801bf4c:	f8b8 e000 	ldrh.w	lr, [r8]
 801bf50:	fa1f fa83 	uxth.w	sl, r3
 801bf54:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801bf58:	43db      	mvns	r3, r3
 801bf5a:	ea4f 202e 	mov.w	r0, lr, asr #8
 801bf5e:	fb11 f10a 	smulbb	r1, r1, sl
 801bf62:	b2db      	uxtb	r3, r3
 801bf64:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801bf68:	b2d2      	uxtb	r2, r2
 801bf6a:	fa5f fc8c 	uxtb.w	ip, ip
 801bf6e:	fb00 1003 	mla	r0, r0, r3, r1
 801bf72:	ea4f 01ee 	mov.w	r1, lr, asr #3
 801bf76:	fb12 f20a 	smulbb	r2, r2, sl
 801bf7a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801bf7e:	b280      	uxth	r0, r0
 801bf80:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801bf84:	fb1c fc0a 	smulbb	ip, ip, sl
 801bf88:	fa5f fe8e 	uxtb.w	lr, lr
 801bf8c:	fb0e 2203 	mla	r2, lr, r3, r2
 801bf90:	fb01 cc03 	mla	ip, r1, r3, ip
 801bf94:	1c43      	adds	r3, r0, #1
 801bf96:	b292      	uxth	r2, r2
 801bf98:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801bf9c:	1c51      	adds	r1, r2, #1
 801bf9e:	fa1f fc8c 	uxth.w	ip, ip
 801bfa2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801bfa6:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801bfaa:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801bfae:	4308      	orrs	r0, r1
 801bfb0:	f10c 0101 	add.w	r1, ip, #1
 801bfb4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801bfb8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801bfbc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801bfc0:	ea40 000c 	orr.w	r0, r0, ip
 801bfc4:	f8a8 0000 	strh.w	r0, [r8]
 801bfc8:	e7a1      	b.n	801bf0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801bfca:	b017      	add	sp, #92	; 0x5c
 801bfcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bfd0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 801bfd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bfd4:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 801bfd8:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801bfdc:	2d00      	cmp	r5, #0
 801bfde:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801bfe2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 801bfe6:	fb05 0e03 	mla	lr, r5, r3, r0
 801bfea:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801bfee:	f2c0 80b0 	blt.w	801c152 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 801bff2:	45a9      	cmp	r9, r5
 801bff4:	f340 80ad 	ble.w	801c152 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 801bff8:	2800      	cmp	r0, #0
 801bffa:	f2c0 80a8 	blt.w	801c14e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 801bffe:	4580      	cmp	r8, r0
 801c000:	f340 80a5 	ble.w	801c14e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 801c004:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801c008:	f01e 0f01 	tst.w	lr, #1
 801c00c:	5d16      	ldrb	r6, [r2, r4]
 801c00e:	bf0c      	ite	eq
 801c010:	f006 060f 	andeq.w	r6, r6, #15
 801c014:	1136      	asrne	r6, r6, #4
 801c016:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801c01a:	b2f6      	uxtb	r6, r6
 801c01c:	1c44      	adds	r4, r0, #1
 801c01e:	f100 809b 	bmi.w	801c158 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 801c022:	45a0      	cmp	r8, r4
 801c024:	f340 8098 	ble.w	801c158 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 801c028:	2f00      	cmp	r7, #0
 801c02a:	f000 8097 	beq.w	801c15c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 801c02e:	f10e 0a01 	add.w	sl, lr, #1
 801c032:	ea4f 045a 	mov.w	r4, sl, lsr #1
 801c036:	f01a 0f01 	tst.w	sl, #1
 801c03a:	5d14      	ldrb	r4, [r2, r4]
 801c03c:	bf0c      	ite	eq
 801c03e:	f004 040f 	andeq.w	r4, r4, #15
 801c042:	1124      	asrne	r4, r4, #4
 801c044:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801c048:	b2e4      	uxtb	r4, r4
 801c04a:	3501      	adds	r5, #1
 801c04c:	f100 808a 	bmi.w	801c164 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 801c050:	45a9      	cmp	r9, r5
 801c052:	f340 8087 	ble.w	801c164 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 801c056:	f1bc 0f00 	cmp.w	ip, #0
 801c05a:	f000 8086 	beq.w	801c16a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 801c05e:	2800      	cmp	r0, #0
 801c060:	db7e      	blt.n	801c160 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 801c062:	4580      	cmp	r8, r0
 801c064:	dd7c      	ble.n	801c160 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 801c066:	eb03 090e 	add.w	r9, r3, lr
 801c06a:	ea4f 0559 	mov.w	r5, r9, lsr #1
 801c06e:	f019 0f01 	tst.w	r9, #1
 801c072:	5d55      	ldrb	r5, [r2, r5]
 801c074:	bf0c      	ite	eq
 801c076:	f005 050f 	andeq.w	r5, r5, #15
 801c07a:	112d      	asrne	r5, r5, #4
 801c07c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801c080:	b2ed      	uxtb	r5, r5
 801c082:	3001      	adds	r0, #1
 801c084:	d474      	bmi.n	801c170 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 801c086:	4580      	cmp	r8, r0
 801c088:	dd72      	ble.n	801c170 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 801c08a:	2f00      	cmp	r7, #0
 801c08c:	d072      	beq.n	801c174 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 801c08e:	3301      	adds	r3, #1
 801c090:	449e      	add	lr, r3
 801c092:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801c096:	f01e 0f01 	tst.w	lr, #1
 801c09a:	5cd0      	ldrb	r0, [r2, r3]
 801c09c:	bf0c      	ite	eq
 801c09e:	f000 000f 	andeq.w	r0, r0, #15
 801c0a2:	1100      	asrne	r0, r0, #4
 801c0a4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801c0a8:	b2c3      	uxtb	r3, r0
 801c0aa:	b2ba      	uxth	r2, r7
 801c0ac:	fa1f fc8c 	uxth.w	ip, ip
 801c0b0:	fb02 f00c 	mul.w	r0, r2, ip
 801c0b4:	0112      	lsls	r2, r2, #4
 801c0b6:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801c0ba:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801c0be:	1a12      	subs	r2, r2, r0
 801c0c0:	fa1f fc8c 	uxth.w	ip, ip
 801c0c4:	b292      	uxth	r2, r2
 801c0c6:	eba7 070c 	sub.w	r7, r7, ip
 801c0ca:	4362      	muls	r2, r4
 801c0cc:	b2bf      	uxth	r7, r7
 801c0ce:	fb06 2207 	mla	r2, r6, r7, r2
 801c0d2:	fb0c 2505 	mla	r5, ip, r5, r2
 801c0d6:	fb00 5303 	mla	r3, r0, r3, r5
 801c0da:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c0de:	b3a3      	cbz	r3, 801c14a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 801c0e0:	4a25      	ldr	r2, [pc, #148]	; (801c178 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 801c0e2:	880e      	ldrh	r6, [r1, #0]
 801c0e4:	6815      	ldr	r5, [r2, #0]
 801c0e6:	b29a      	uxth	r2, r3
 801c0e8:	1234      	asrs	r4, r6, #8
 801c0ea:	43db      	mvns	r3, r3
 801c0ec:	f3c5 4007 	ubfx	r0, r5, #16, #8
 801c0f0:	f3c5 2707 	ubfx	r7, r5, #8, #8
 801c0f4:	b2db      	uxtb	r3, r3
 801c0f6:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801c0fa:	fb10 f002 	smulbb	r0, r0, r2
 801c0fe:	b2ed      	uxtb	r5, r5
 801c100:	fb17 f702 	smulbb	r7, r7, r2
 801c104:	fb04 0403 	mla	r4, r4, r3, r0
 801c108:	10f0      	asrs	r0, r6, #3
 801c10a:	fb15 f202 	smulbb	r2, r5, r2
 801c10e:	00f6      	lsls	r6, r6, #3
 801c110:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801c114:	b2a4      	uxth	r4, r4
 801c116:	b2f6      	uxtb	r6, r6
 801c118:	fb00 7003 	mla	r0, r0, r3, r7
 801c11c:	fb06 2303 	mla	r3, r6, r3, r2
 801c120:	b280      	uxth	r0, r0
 801c122:	b29a      	uxth	r2, r3
 801c124:	1c63      	adds	r3, r4, #1
 801c126:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801c12a:	1c53      	adds	r3, r2, #1
 801c12c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c130:	1c42      	adds	r2, r0, #1
 801c132:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801c136:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801c13a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c13e:	0940      	lsrs	r0, r0, #5
 801c140:	4323      	orrs	r3, r4
 801c142:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c146:	4303      	orrs	r3, r0
 801c148:	800b      	strh	r3, [r1, #0]
 801c14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c14e:	2600      	movs	r6, #0
 801c150:	e764      	b.n	801c01c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 801c152:	2400      	movs	r4, #0
 801c154:	4626      	mov	r6, r4
 801c156:	e778      	b.n	801c04a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 801c158:	2400      	movs	r4, #0
 801c15a:	e776      	b.n	801c04a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 801c15c:	463c      	mov	r4, r7
 801c15e:	e774      	b.n	801c04a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 801c160:	2500      	movs	r5, #0
 801c162:	e78e      	b.n	801c082 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 801c164:	2300      	movs	r3, #0
 801c166:	461d      	mov	r5, r3
 801c168:	e79f      	b.n	801c0aa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 801c16a:	4663      	mov	r3, ip
 801c16c:	4665      	mov	r5, ip
 801c16e:	e79c      	b.n	801c0aa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 801c170:	2300      	movs	r3, #0
 801c172:	e79a      	b.n	801c0aa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 801c174:	463b      	mov	r3, r7
 801c176:	e798      	b.n	801c0aa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 801c178:	20024420 	.word	0x20024420

0801c17c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c180:	b093      	sub	sp, #76	; 0x4c
 801c182:	461d      	mov	r5, r3
 801c184:	920c      	str	r2, [sp, #48]	; 0x30
 801c186:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c188:	9011      	str	r0, [sp, #68]	; 0x44
 801c18a:	9107      	str	r1, [sp, #28]
 801c18c:	6850      	ldr	r0, [r2, #4]
 801c18e:	6812      	ldr	r2, [r2, #0]
 801c190:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801c194:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801c198:	fb00 1303 	mla	r3, r0, r3, r1
 801c19c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801c1a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c1a2:	689b      	ldr	r3, [r3, #8]
 801c1a4:	3301      	adds	r3, #1
 801c1a6:	f023 0301 	bic.w	r3, r3, #1
 801c1aa:	9306      	str	r3, [sp, #24]
 801c1ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c1ae:	681f      	ldr	r7, [r3, #0]
 801c1b0:	9b07      	ldr	r3, [sp, #28]
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	dc03      	bgt.n	801c1be <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801c1b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c1b8:	2b00      	cmp	r3, #0
 801c1ba:	f340 8267 	ble.w	801c68c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 801c1be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c1c0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c1c4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c1c8:	1e48      	subs	r0, r1, #1
 801c1ca:	f102 3cff 	add.w	ip, r2, #4294967295
 801c1ce:	2d00      	cmp	r5, #0
 801c1d0:	f340 80b7 	ble.w	801c342 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801c1d4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801c1d8:	ea4f 4326 	mov.w	r3, r6, asr #16
 801c1dc:	d406      	bmi.n	801c1ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c1de:	4586      	cmp	lr, r0
 801c1e0:	da04      	bge.n	801c1ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	db02      	blt.n	801c1ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c1e6:	4563      	cmp	r3, ip
 801c1e8:	f2c0 80ac 	blt.w	801c344 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c1ec:	f11e 0e01 	adds.w	lr, lr, #1
 801c1f0:	f100 809f 	bmi.w	801c332 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801c1f4:	4571      	cmp	r1, lr
 801c1f6:	f2c0 809c 	blt.w	801c332 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801c1fa:	3301      	adds	r3, #1
 801c1fc:	f100 8099 	bmi.w	801c332 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801c200:	429a      	cmp	r2, r3
 801c202:	f2c0 8096 	blt.w	801c332 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801c206:	46c8      	mov	r8, r9
 801c208:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 801c20c:	9509      	str	r5, [sp, #36]	; 0x24
 801c20e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c210:	2b00      	cmp	r3, #0
 801c212:	f340 80b5 	ble.w	801c380 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801c216:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801c21a:	1430      	asrs	r0, r6, #16
 801c21c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801c220:	9308      	str	r3, [sp, #32]
 801c222:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c224:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801c228:	1423      	asrs	r3, r4, #16
 801c22a:	f100 813f 	bmi.w	801c4ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801c22e:	f10c 3bff 	add.w	fp, ip, #4294967295
 801c232:	455b      	cmp	r3, fp
 801c234:	f280 813a 	bge.w	801c4ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801c238:	2800      	cmp	r0, #0
 801c23a:	f2c0 8137 	blt.w	801c4ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801c23e:	f10e 3bff 	add.w	fp, lr, #4294967295
 801c242:	4558      	cmp	r0, fp
 801c244:	f280 8132 	bge.w	801c4ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801c248:	9a06      	ldr	r2, [sp, #24]
 801c24a:	fb00 3302 	mla	r3, r0, r2, r3
 801c24e:	0858      	lsrs	r0, r3, #1
 801c250:	07da      	lsls	r2, r3, #31
 801c252:	9a08      	ldr	r2, [sp, #32]
 801c254:	f817 c000 	ldrb.w	ip, [r7, r0]
 801c258:	bf54      	ite	pl
 801c25a:	f00c 0c0f 	andpl.w	ip, ip, #15
 801c25e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801c262:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801c266:	fa5f fc8c 	uxtb.w	ip, ip
 801c26a:	2a00      	cmp	r2, #0
 801c26c:	f000 80cc 	beq.w	801c408 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801c270:	1c58      	adds	r0, r3, #1
 801c272:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801c276:	07c0      	lsls	r0, r0, #31
 801c278:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801c27c:	bf54      	ite	pl
 801c27e:	f00e 0e0f 	andpl.w	lr, lr, #15
 801c282:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801c286:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801c28a:	fa5f fe8e 	uxtb.w	lr, lr
 801c28e:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801c292:	b1b9      	cbz	r1, 801c2c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c294:	4453      	add	r3, sl
 801c296:	0858      	lsrs	r0, r3, #1
 801c298:	07da      	lsls	r2, r3, #31
 801c29a:	5c38      	ldrb	r0, [r7, r0]
 801c29c:	bf54      	ite	pl
 801c29e:	f000 000f 	andpl.w	r0, r0, #15
 801c2a2:	1100      	asrmi	r0, r0, #4
 801c2a4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801c2a8:	b2c0      	uxtb	r0, r0
 801c2aa:	900a      	str	r0, [sp, #40]	; 0x28
 801c2ac:	1c58      	adds	r0, r3, #1
 801c2ae:	0843      	lsrs	r3, r0, #1
 801c2b0:	07c2      	lsls	r2, r0, #31
 801c2b2:	5cfb      	ldrb	r3, [r7, r3]
 801c2b4:	bf54      	ite	pl
 801c2b6:	f003 030f 	andpl.w	r3, r3, #15
 801c2ba:	111b      	asrmi	r3, r3, #4
 801c2bc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801c2c0:	b2db      	uxtb	r3, r3
 801c2c2:	930e      	str	r3, [sp, #56]	; 0x38
 801c2c4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c2c8:	b289      	uxth	r1, r1
 801c2ca:	fb02 f301 	mul.w	r3, r2, r1
 801c2ce:	0112      	lsls	r2, r2, #4
 801c2d0:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801c2d4:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801c2d8:	1ad2      	subs	r2, r2, r3
 801c2da:	b289      	uxth	r1, r1
 801c2dc:	b292      	uxth	r2, r2
 801c2de:	1a40      	subs	r0, r0, r1
 801c2e0:	fa1f fe80 	uxth.w	lr, r0
 801c2e4:	980d      	ldr	r0, [sp, #52]	; 0x34
 801c2e6:	4342      	muls	r2, r0
 801c2e8:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801c2ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c2ee:	fb01 c102 	mla	r1, r1, r2, ip
 801c2f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c2f4:	fb03 1302 	mla	r3, r3, r2, r1
 801c2f8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c2fc:	2bff      	cmp	r3, #255	; 0xff
 801c2fe:	f040 8094 	bne.w	801c42a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 801c302:	4bbf      	ldr	r3, [pc, #764]	; (801c600 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 801c304:	681a      	ldr	r2, [r3, #0]
 801c306:	4bbf      	ldr	r3, [pc, #764]	; (801c604 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 801c308:	0951      	lsrs	r1, r2, #5
 801c30a:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 801c30e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801c312:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c316:	430b      	orrs	r3, r1
 801c318:	4313      	orrs	r3, r2
 801c31a:	f8a8 3000 	strh.w	r3, [r8]
 801c31e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c320:	f108 0802 	add.w	r8, r8, #2
 801c324:	441c      	add	r4, r3
 801c326:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c328:	441e      	add	r6, r3
 801c32a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c32c:	3b01      	subs	r3, #1
 801c32e:	9309      	str	r3, [sp, #36]	; 0x24
 801c330:	e76d      	b.n	801c20e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c332:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c334:	3d01      	subs	r5, #1
 801c336:	f109 0902 	add.w	r9, r9, #2
 801c33a:	441c      	add	r4, r3
 801c33c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c33e:	441e      	add	r6, r3
 801c340:	e745      	b.n	801c1ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c342:	d021      	beq.n	801c388 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801c344:	1e6b      	subs	r3, r5, #1
 801c346:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801c348:	fb00 4003 	mla	r0, r0, r3, r4
 801c34c:	1400      	asrs	r0, r0, #16
 801c34e:	f53f af5a 	bmi.w	801c206 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c352:	3901      	subs	r1, #1
 801c354:	4288      	cmp	r0, r1
 801c356:	f6bf af56 	bge.w	801c206 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c35a:	9920      	ldr	r1, [sp, #128]	; 0x80
 801c35c:	fb01 6303 	mla	r3, r1, r3, r6
 801c360:	141b      	asrs	r3, r3, #16
 801c362:	f53f af50 	bmi.w	801c206 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c366:	3a01      	subs	r2, #1
 801c368:	4293      	cmp	r3, r2
 801c36a:	f6bf af4c 	bge.w	801c206 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c36e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801c372:	46a8      	mov	r8, r5
 801c374:	46ce      	mov	lr, r9
 801c376:	9308      	str	r3, [sp, #32]
 801c378:	f1b8 0f00 	cmp.w	r8, #0
 801c37c:	f300 80b6 	bgt.w	801c4ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801c380:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801c384:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801c388:	9b07      	ldr	r3, [sp, #28]
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	f340 817e 	ble.w	801c68c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 801c390:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c394:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c396:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c39a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c39e:	eef0 6a62 	vmov.f32	s13, s5
 801c3a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c3a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c3aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c3ae:	ee16 4a90 	vmov	r4, s13
 801c3b2:	eef0 6a43 	vmov.f32	s13, s6
 801c3b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c3ba:	ee16 6a90 	vmov	r6, s13
 801c3be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c3c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c3c6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c3ca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c3ce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c3d2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c3d6:	ee12 2a90 	vmov	r2, s5
 801c3da:	eef0 2a47 	vmov.f32	s5, s14
 801c3de:	fb92 f3f3 	sdiv	r3, r2, r3
 801c3e2:	ee13 2a10 	vmov	r2, s6
 801c3e6:	931f      	str	r3, [sp, #124]	; 0x7c
 801c3e8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c3ea:	eeb0 3a67 	vmov.f32	s6, s15
 801c3ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801c3f2:	9320      	str	r3, [sp, #128]	; 0x80
 801c3f4:	9b07      	ldr	r3, [sp, #28]
 801c3f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c3f8:	3b01      	subs	r3, #1
 801c3fa:	9307      	str	r3, [sp, #28]
 801c3fc:	bf08      	it	eq
 801c3fe:	4615      	moveq	r5, r2
 801c400:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c402:	bf18      	it	ne
 801c404:	461d      	movne	r5, r3
 801c406:	e6d3      	b.n	801c1b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801c408:	2900      	cmp	r1, #0
 801c40a:	f43f af5b 	beq.w	801c2c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c40e:	eb0a 0003 	add.w	r0, sl, r3
 801c412:	0843      	lsrs	r3, r0, #1
 801c414:	07c0      	lsls	r0, r0, #31
 801c416:	5cfb      	ldrb	r3, [r7, r3]
 801c418:	bf54      	ite	pl
 801c41a:	f003 030f 	andpl.w	r3, r3, #15
 801c41e:	111b      	asrmi	r3, r3, #4
 801c420:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801c424:	b2db      	uxtb	r3, r3
 801c426:	930a      	str	r3, [sp, #40]	; 0x28
 801c428:	e74c      	b.n	801c2c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c42a:	2b00      	cmp	r3, #0
 801c42c:	f43f af77 	beq.w	801c31e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801c430:	4a73      	ldr	r2, [pc, #460]	; (801c600 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 801c432:	fa1f fe83 	uxth.w	lr, r3
 801c436:	f8b8 c000 	ldrh.w	ip, [r8]
 801c43a:	43db      	mvns	r3, r3
 801c43c:	6810      	ldr	r0, [r2, #0]
 801c43e:	ea4f 212c 	mov.w	r1, ip, asr #8
 801c442:	f3c0 4207 	ubfx	r2, r0, #16, #8
 801c446:	b2db      	uxtb	r3, r3
 801c448:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801c44c:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 801c450:	fb12 f20e 	smulbb	r2, r2, lr
 801c454:	b2c0      	uxtb	r0, r0
 801c456:	fb1b fb0e 	smulbb	fp, fp, lr
 801c45a:	fb01 2103 	mla	r1, r1, r3, r2
 801c45e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801c462:	fb10 fe0e 	smulbb	lr, r0, lr
 801c466:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c46a:	b289      	uxth	r1, r1
 801c46c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801c470:	fa5f fc8c 	uxtb.w	ip, ip
 801c474:	fb02 b203 	mla	r2, r2, r3, fp
 801c478:	1c48      	adds	r0, r1, #1
 801c47a:	fb0c e303 	mla	r3, ip, r3, lr
 801c47e:	b292      	uxth	r2, r2
 801c480:	b29b      	uxth	r3, r3
 801c482:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801c486:	f102 0b01 	add.w	fp, r2, #1
 801c48a:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 801c48e:	1c59      	adds	r1, r3, #1
 801c490:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801c494:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801c498:	0952      	lsrs	r2, r2, #5
 801c49a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801c49e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c4a2:	4301      	orrs	r1, r0
 801c4a4:	4311      	orrs	r1, r2
 801c4a6:	f8a8 1000 	strh.w	r1, [r8]
 801c4aa:	e738      	b.n	801c31e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801c4ac:	f113 0b01 	adds.w	fp, r3, #1
 801c4b0:	f53f af35 	bmi.w	801c31e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801c4b4:	45dc      	cmp	ip, fp
 801c4b6:	f6ff af32 	blt.w	801c31e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801c4ba:	f110 0b01 	adds.w	fp, r0, #1
 801c4be:	f53f af2e 	bmi.w	801c31e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801c4c2:	45de      	cmp	lr, fp
 801c4c4:	f6ff af2b 	blt.w	801c31e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801c4c8:	9302      	str	r3, [sp, #8]
 801c4ca:	fa0f f38e 	sxth.w	r3, lr
 801c4ce:	9a08      	ldr	r2, [sp, #32]
 801c4d0:	9301      	str	r3, [sp, #4]
 801c4d2:	fa0f f38c 	sxth.w	r3, ip
 801c4d6:	9105      	str	r1, [sp, #20]
 801c4d8:	4641      	mov	r1, r8
 801c4da:	9300      	str	r3, [sp, #0]
 801c4dc:	4653      	mov	r3, sl
 801c4de:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801c4e2:	463a      	mov	r2, r7
 801c4e4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c4e6:	f7ff fd73 	bl	801bfd0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 801c4ea:	e718      	b.n	801c31e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801c4ec:	1422      	asrs	r2, r4, #16
 801c4ee:	9906      	ldr	r1, [sp, #24]
 801c4f0:	1433      	asrs	r3, r6, #16
 801c4f2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801c4f6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801c4fa:	fb01 2303 	mla	r3, r1, r3, r2
 801c4fe:	085a      	lsrs	r2, r3, #1
 801c500:	07d9      	lsls	r1, r3, #31
 801c502:	5cba      	ldrb	r2, [r7, r2]
 801c504:	bf54      	ite	pl
 801c506:	f002 020f 	andpl.w	r2, r2, #15
 801c50a:	1112      	asrmi	r2, r2, #4
 801c50c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c510:	b2d2      	uxtb	r2, r2
 801c512:	2800      	cmp	r0, #0
 801c514:	d063      	beq.n	801c5de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801c516:	f103 0a01 	add.w	sl, r3, #1
 801c51a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801c51e:	f01a 0f01 	tst.w	sl, #1
 801c522:	5c79      	ldrb	r1, [r7, r1]
 801c524:	bf0c      	ite	eq
 801c526:	f001 010f 	andeq.w	r1, r1, #15
 801c52a:	1109      	asrne	r1, r1, #4
 801c52c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801c530:	b2c9      	uxtb	r1, r1
 801c532:	910f      	str	r1, [sp, #60]	; 0x3c
 801c534:	f1bc 0f00 	cmp.w	ip, #0
 801c538:	d01a      	beq.n	801c570 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 801c53a:	9908      	ldr	r1, [sp, #32]
 801c53c:	440b      	add	r3, r1
 801c53e:	0859      	lsrs	r1, r3, #1
 801c540:	f013 0f01 	tst.w	r3, #1
 801c544:	f103 0301 	add.w	r3, r3, #1
 801c548:	5c79      	ldrb	r1, [r7, r1]
 801c54a:	bf0c      	ite	eq
 801c54c:	f001 010f 	andeq.w	r1, r1, #15
 801c550:	1109      	asrne	r1, r1, #4
 801c552:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801c556:	b2c9      	uxtb	r1, r1
 801c558:	910b      	str	r1, [sp, #44]	; 0x2c
 801c55a:	0859      	lsrs	r1, r3, #1
 801c55c:	07db      	lsls	r3, r3, #31
 801c55e:	5c79      	ldrb	r1, [r7, r1]
 801c560:	bf54      	ite	pl
 801c562:	f001 010f 	andpl.w	r1, r1, #15
 801c566:	1109      	asrmi	r1, r1, #4
 801c568:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801c56c:	b2c9      	uxtb	r1, r1
 801c56e:	9110      	str	r1, [sp, #64]	; 0x40
 801c570:	b280      	uxth	r0, r0
 801c572:	fa1f fc8c 	uxth.w	ip, ip
 801c576:	fb00 f30c 	mul.w	r3, r0, ip
 801c57a:	0100      	lsls	r0, r0, #4
 801c57c:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 801c580:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801c584:	1ac0      	subs	r0, r0, r3
 801c586:	fa1f fc8c 	uxth.w	ip, ip
 801c58a:	b280      	uxth	r0, r0
 801c58c:	eba1 010c 	sub.w	r1, r1, ip
 801c590:	fa1f fa81 	uxth.w	sl, r1
 801c594:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801c596:	4348      	muls	r0, r1
 801c598:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c59a:	fb02 020a 	mla	r2, r2, sl, r0
 801c59e:	fb0c 2c01 	mla	ip, ip, r1, r2
 801c5a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c5a4:	fb03 c302 	mla	r3, r3, r2, ip
 801c5a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c5ac:	2bff      	cmp	r3, #255	; 0xff
 801c5ae:	d12b      	bne.n	801c608 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 801c5b0:	4b13      	ldr	r3, [pc, #76]	; (801c600 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 801c5b2:	681a      	ldr	r2, [r3, #0]
 801c5b4:	4b13      	ldr	r3, [pc, #76]	; (801c604 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 801c5b6:	0951      	lsrs	r1, r2, #5
 801c5b8:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 801c5bc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801c5c0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c5c4:	430b      	orrs	r3, r1
 801c5c6:	4313      	orrs	r3, r2
 801c5c8:	f8ae 3000 	strh.w	r3, [lr]
 801c5cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c5ce:	f10e 0e02 	add.w	lr, lr, #2
 801c5d2:	f108 38ff 	add.w	r8, r8, #4294967295
 801c5d6:	441c      	add	r4, r3
 801c5d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c5da:	441e      	add	r6, r3
 801c5dc:	e6cc      	b.n	801c378 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801c5de:	f1bc 0f00 	cmp.w	ip, #0
 801c5e2:	d0c5      	beq.n	801c570 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 801c5e4:	9908      	ldr	r1, [sp, #32]
 801c5e6:	440b      	add	r3, r1
 801c5e8:	0859      	lsrs	r1, r3, #1
 801c5ea:	07db      	lsls	r3, r3, #31
 801c5ec:	5c79      	ldrb	r1, [r7, r1]
 801c5ee:	bf54      	ite	pl
 801c5f0:	f001 010f 	andpl.w	r1, r1, #15
 801c5f4:	1109      	asrmi	r1, r1, #4
 801c5f6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801c5fa:	b2c9      	uxtb	r1, r1
 801c5fc:	910b      	str	r1, [sp, #44]	; 0x2c
 801c5fe:	e7b7      	b.n	801c570 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 801c600:	20024420 	.word	0x20024420
 801c604:	fffff800 	.word	0xfffff800
 801c608:	2b00      	cmp	r3, #0
 801c60a:	d0df      	beq.n	801c5cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 801c60c:	4a21      	ldr	r2, [pc, #132]	; (801c694 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 801c60e:	fa1f fa83 	uxth.w	sl, r3
 801c612:	f8be c000 	ldrh.w	ip, [lr]
 801c616:	43db      	mvns	r3, r3
 801c618:	6810      	ldr	r0, [r2, #0]
 801c61a:	ea4f 212c 	mov.w	r1, ip, asr #8
 801c61e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 801c622:	b2db      	uxtb	r3, r3
 801c624:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801c628:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 801c62c:	fb12 f20a 	smulbb	r2, r2, sl
 801c630:	b2c0      	uxtb	r0, r0
 801c632:	fb1b fb0a 	smulbb	fp, fp, sl
 801c636:	fb01 2103 	mla	r1, r1, r3, r2
 801c63a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801c63e:	fb10 f00a 	smulbb	r0, r0, sl
 801c642:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c646:	b289      	uxth	r1, r1
 801c648:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801c64c:	fa5f fc8c 	uxtb.w	ip, ip
 801c650:	fb02 b203 	mla	r2, r2, r3, fp
 801c654:	fb0c 0003 	mla	r0, ip, r3, r0
 801c658:	1c4b      	adds	r3, r1, #1
 801c65a:	b292      	uxth	r2, r2
 801c65c:	b280      	uxth	r0, r0
 801c65e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801c662:	f100 0b01 	add.w	fp, r0, #1
 801c666:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801c66a:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 801c66e:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 801c672:	ea4b 0101 	orr.w	r1, fp, r1
 801c676:	f102 0b01 	add.w	fp, r2, #1
 801c67a:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801c67e:	0952      	lsrs	r2, r2, #5
 801c680:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c684:	4311      	orrs	r1, r2
 801c686:	f8ae 1000 	strh.w	r1, [lr]
 801c68a:	e79f      	b.n	801c5cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 801c68c:	b013      	add	sp, #76	; 0x4c
 801c68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c692:	bf00      	nop
 801c694:	20024420 	.word	0x20024420

0801c698 <CRC_Lock>:
 801c698:	4a20      	ldr	r2, [pc, #128]	; (801c71c <CRC_Lock+0x84>)
 801c69a:	b530      	push	{r4, r5, lr}
 801c69c:	6813      	ldr	r3, [r2, #0]
 801c69e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801c6a2:	f24c 2540 	movw	r5, #49728	; 0xc240
 801c6a6:	f023 0301 	bic.w	r3, r3, #1
 801c6aa:	6013      	str	r3, [r2, #0]
 801c6ac:	4b1c      	ldr	r3, [pc, #112]	; (801c720 <CRC_Lock+0x88>)
 801c6ae:	681a      	ldr	r2, [r3, #0]
 801c6b0:	4022      	ands	r2, r4
 801c6b2:	42aa      	cmp	r2, r5
 801c6b4:	d005      	beq.n	801c6c2 <CRC_Lock+0x2a>
 801c6b6:	681b      	ldr	r3, [r3, #0]
 801c6b8:	f24c 2270 	movw	r2, #49776	; 0xc270
 801c6bc:	4023      	ands	r3, r4
 801c6be:	4293      	cmp	r3, r2
 801c6c0:	d124      	bne.n	801c70c <CRC_Lock+0x74>
 801c6c2:	4b18      	ldr	r3, [pc, #96]	; (801c724 <CRC_Lock+0x8c>)
 801c6c4:	681b      	ldr	r3, [r3, #0]
 801c6c6:	bb0b      	cbnz	r3, 801c70c <CRC_Lock+0x74>
 801c6c8:	4b17      	ldr	r3, [pc, #92]	; (801c728 <CRC_Lock+0x90>)
 801c6ca:	681a      	ldr	r2, [r3, #0]
 801c6cc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801c6d0:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801c6d4:	d00d      	beq.n	801c6f2 <CRC_Lock+0x5a>
 801c6d6:	681a      	ldr	r2, [r3, #0]
 801c6d8:	f240 4483 	movw	r4, #1155	; 0x483
 801c6dc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801c6e0:	42a2      	cmp	r2, r4
 801c6e2:	d006      	beq.n	801c6f2 <CRC_Lock+0x5a>
 801c6e4:	681b      	ldr	r3, [r3, #0]
 801c6e6:	f240 4285 	movw	r2, #1157	; 0x485
 801c6ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c6ee:	4293      	cmp	r3, r2
 801c6f0:	d10c      	bne.n	801c70c <CRC_Lock+0x74>
 801c6f2:	4b0e      	ldr	r3, [pc, #56]	; (801c72c <CRC_Lock+0x94>)
 801c6f4:	2201      	movs	r2, #1
 801c6f6:	601a      	str	r2, [r3, #0]
 801c6f8:	681a      	ldr	r2, [r3, #0]
 801c6fa:	2a00      	cmp	r2, #0
 801c6fc:	d1fc      	bne.n	801c6f8 <CRC_Lock+0x60>
 801c6fe:	4b0c      	ldr	r3, [pc, #48]	; (801c730 <CRC_Lock+0x98>)
 801c700:	6018      	str	r0, [r3, #0]
 801c702:	6818      	ldr	r0, [r3, #0]
 801c704:	1a43      	subs	r3, r0, r1
 801c706:	4258      	negs	r0, r3
 801c708:	4158      	adcs	r0, r3
 801c70a:	bd30      	pop	{r4, r5, pc}
 801c70c:	4b09      	ldr	r3, [pc, #36]	; (801c734 <CRC_Lock+0x9c>)
 801c70e:	2201      	movs	r2, #1
 801c710:	601a      	str	r2, [r3, #0]
 801c712:	681a      	ldr	r2, [r3, #0]
 801c714:	2a00      	cmp	r2, #0
 801c716:	d1fc      	bne.n	801c712 <CRC_Lock+0x7a>
 801c718:	4b07      	ldr	r3, [pc, #28]	; (801c738 <CRC_Lock+0xa0>)
 801c71a:	e7f1      	b.n	801c700 <CRC_Lock+0x68>
 801c71c:	e0002000 	.word	0xe0002000
 801c720:	e000ed00 	.word	0xe000ed00
 801c724:	e0042000 	.word	0xe0042000
 801c728:	5c001000 	.word	0x5c001000
 801c72c:	58024c08 	.word	0x58024c08
 801c730:	58024c00 	.word	0x58024c00
 801c734:	40023008 	.word	0x40023008
 801c738:	40023000 	.word	0x40023000

0801c73c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801c73c:	6101      	str	r1, [r0, #16]
 801c73e:	4770      	bx	lr

0801c740 <_ZN8touchgfx8Gestures4tickEv>:
 801c740:	7b83      	ldrb	r3, [r0, #14]
 801c742:	b14b      	cbz	r3, 801c758 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801c744:	8903      	ldrh	r3, [r0, #8]
 801c746:	3301      	adds	r3, #1
 801c748:	b29b      	uxth	r3, r3
 801c74a:	2b07      	cmp	r3, #7
 801c74c:	8103      	strh	r3, [r0, #8]
 801c74e:	bf81      	itttt	hi
 801c750:	2300      	movhi	r3, #0
 801c752:	8143      	strhhi	r3, [r0, #10]
 801c754:	8183      	strhhi	r3, [r0, #12]
 801c756:	7383      	strbhi	r3, [r0, #14]
 801c758:	4770      	bx	lr
	...

0801c75c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801c75c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801c760:	4698      	mov	r8, r3
 801c762:	8883      	ldrh	r3, [r0, #4]
 801c764:	4604      	mov	r4, r0
 801c766:	4617      	mov	r7, r2
 801c768:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c76c:	eba8 0303 	sub.w	r3, r8, r3
 801c770:	4a19      	ldr	r2, [pc, #100]	; (801c7d8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801c772:	460e      	mov	r6, r1
 801c774:	b21b      	sxth	r3, r3
 801c776:	88c1      	ldrh	r1, [r0, #6]
 801c778:	9200      	str	r2, [sp, #0]
 801c77a:	2000      	movs	r0, #0
 801c77c:	2b00      	cmp	r3, #0
 801c77e:	8aa2      	ldrh	r2, [r4, #20]
 801c780:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801c784:	bfb8      	it	lt
 801c786:	425b      	neglt	r3, r3
 801c788:	f88d 0004 	strb.w	r0, [sp, #4]
 801c78c:	f8ad 1008 	strh.w	r1, [sp, #8]
 801c790:	b21b      	sxth	r3, r3
 801c792:	f8ad 800a 	strh.w	r8, [sp, #10]
 801c796:	f8ad 500c 	strh.w	r5, [sp, #12]
 801c79a:	4293      	cmp	r3, r2
 801c79c:	dc07      	bgt.n	801c7ae <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801c79e:	1a69      	subs	r1, r5, r1
 801c7a0:	b209      	sxth	r1, r1
 801c7a2:	2900      	cmp	r1, #0
 801c7a4:	bfb8      	it	lt
 801c7a6:	4249      	neglt	r1, r1
 801c7a8:	b209      	sxth	r1, r1
 801c7aa:	428a      	cmp	r2, r1
 801c7ac:	da10      	bge.n	801c7d0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801c7ae:	6920      	ldr	r0, [r4, #16]
 801c7b0:	4669      	mov	r1, sp
 801c7b2:	eba8 0606 	sub.w	r6, r8, r6
 801c7b6:	1bef      	subs	r7, r5, r7
 801c7b8:	6803      	ldr	r3, [r0, #0]
 801c7ba:	685b      	ldr	r3, [r3, #4]
 801c7bc:	4798      	blx	r3
 801c7be:	2300      	movs	r3, #0
 801c7c0:	2001      	movs	r0, #1
 801c7c2:	8166      	strh	r6, [r4, #10]
 801c7c4:	8123      	strh	r3, [r4, #8]
 801c7c6:	81a7      	strh	r7, [r4, #12]
 801c7c8:	f8a4 8004 	strh.w	r8, [r4, #4]
 801c7cc:	80e5      	strh	r5, [r4, #6]
 801c7ce:	73a0      	strb	r0, [r4, #14]
 801c7d0:	b004      	add	sp, #16
 801c7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7d6:	bf00      	nop
 801c7d8:	08020934 	.word	0x08020934

0801c7dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801c7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c7de:	461e      	mov	r6, r3
 801c7e0:	1e4b      	subs	r3, r1, #1
 801c7e2:	b085      	sub	sp, #20
 801c7e4:	4604      	mov	r4, r0
 801c7e6:	2b01      	cmp	r3, #1
 801c7e8:	460d      	mov	r5, r1
 801c7ea:	4617      	mov	r7, r2
 801c7ec:	d84b      	bhi.n	801c886 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801c7ee:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c7f2:	1cd3      	adds	r3, r2, #3
 801c7f4:	b29b      	uxth	r3, r3
 801c7f6:	2b06      	cmp	r3, #6
 801c7f8:	d916      	bls.n	801c828 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801c7fa:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801c89c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801c7fe:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c802:	f8cd c004 	str.w	ip, [sp, #4]
 801c806:	f04f 0c00 	mov.w	ip, #0
 801c80a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c80e:	6900      	ldr	r0, [r0, #16]
 801c810:	f8ad 100c 	strh.w	r1, [sp, #12]
 801c814:	a901      	add	r1, sp, #4
 801c816:	f88d c008 	strb.w	ip, [sp, #8]
 801c81a:	f8ad 200a 	strh.w	r2, [sp, #10]
 801c81e:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c822:	6803      	ldr	r3, [r0, #0]
 801c824:	689b      	ldr	r3, [r3, #8]
 801c826:	4798      	blx	r3
 801c828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c82c:	1cd3      	adds	r3, r2, #3
 801c82e:	b29b      	uxth	r3, r3
 801c830:	2b06      	cmp	r3, #6
 801c832:	d916      	bls.n	801c862 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801c834:	f8df c064 	ldr.w	ip, [pc, #100]	; 801c89c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801c838:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c83c:	f8cd c004 	str.w	ip, [sp, #4]
 801c840:	f04f 0c01 	mov.w	ip, #1
 801c844:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c848:	6920      	ldr	r0, [r4, #16]
 801c84a:	f8ad 100c 	strh.w	r1, [sp, #12]
 801c84e:	a901      	add	r1, sp, #4
 801c850:	f88d c008 	strb.w	ip, [sp, #8]
 801c854:	f8ad 200a 	strh.w	r2, [sp, #10]
 801c858:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c85c:	6803      	ldr	r3, [r0, #0]
 801c85e:	689b      	ldr	r3, [r3, #8]
 801c860:	4798      	blx	r3
 801c862:	4b0d      	ldr	r3, [pc, #52]	; (801c898 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801c864:	a901      	add	r1, sp, #4
 801c866:	6920      	ldr	r0, [r4, #16]
 801c868:	9301      	str	r3, [sp, #4]
 801c86a:	2300      	movs	r3, #0
 801c86c:	f88d 5008 	strb.w	r5, [sp, #8]
 801c870:	f8ad 700a 	strh.w	r7, [sp, #10]
 801c874:	f8ad 600c 	strh.w	r6, [sp, #12]
 801c878:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c87c:	6803      	ldr	r3, [r0, #0]
 801c87e:	681b      	ldr	r3, [r3, #0]
 801c880:	4798      	blx	r3
 801c882:	b005      	add	sp, #20
 801c884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c886:	2900      	cmp	r1, #0
 801c888:	d1eb      	bne.n	801c862 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801c88a:	80a2      	strh	r2, [r4, #4]
 801c88c:	80c6      	strh	r6, [r0, #6]
 801c88e:	60a1      	str	r1, [r4, #8]
 801c890:	81a1      	strh	r1, [r4, #12]
 801c892:	73a1      	strb	r1, [r4, #14]
 801c894:	e7e5      	b.n	801c862 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801c896:	bf00      	nop
 801c898:	08020920 	.word	0x08020920
 801c89c:	08020948 	.word	0x08020948

0801c8a0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801c8a0:	790b      	ldrb	r3, [r1, #4]
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	bf0c      	ite	eq
 801c8a6:	2301      	moveq	r3, #1
 801c8a8:	2300      	movne	r3, #0
 801c8aa:	b570      	push	{r4, r5, r6, lr}
 801c8ac:	4604      	mov	r4, r0
 801c8ae:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801c8b2:	460e      	mov	r6, r1
 801c8b4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801c8b8:	d109      	bne.n	801c8ce <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801c8ba:	b14d      	cbz	r5, 801c8d0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801c8bc:	7933      	ldrb	r3, [r6, #4]
 801c8be:	2b01      	cmp	r3, #1
 801c8c0:	d10c      	bne.n	801c8dc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801c8c2:	6823      	ldr	r3, [r4, #0]
 801c8c4:	4620      	mov	r0, r4
 801c8c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c8c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c8cc:	4718      	bx	r3
 801c8ce:	b12d      	cbz	r5, 801c8dc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801c8d0:	6823      	ldr	r3, [r4, #0]
 801c8d2:	4620      	mov	r0, r4
 801c8d4:	695b      	ldr	r3, [r3, #20]
 801c8d6:	4798      	blx	r3
 801c8d8:	2d00      	cmp	r5, #0
 801c8da:	d1ef      	bne.n	801c8bc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801c8dc:	bd70      	pop	{r4, r5, r6, pc}

0801c8de <__aeabi_atexit>:
 801c8de:	460b      	mov	r3, r1
 801c8e0:	4601      	mov	r1, r0
 801c8e2:	4618      	mov	r0, r3
 801c8e4:	f000 b852 	b.w	801c98c <__cxa_atexit>

0801c8e8 <_ZdlPvj>:
 801c8e8:	f000 b812 	b.w	801c910 <_ZdlPv>

0801c8ec <__cxa_guard_acquire>:
 801c8ec:	6803      	ldr	r3, [r0, #0]
 801c8ee:	07db      	lsls	r3, r3, #31
 801c8f0:	d406      	bmi.n	801c900 <__cxa_guard_acquire+0x14>
 801c8f2:	7843      	ldrb	r3, [r0, #1]
 801c8f4:	b103      	cbz	r3, 801c8f8 <__cxa_guard_acquire+0xc>
 801c8f6:	deff      	udf	#255	; 0xff
 801c8f8:	2301      	movs	r3, #1
 801c8fa:	7043      	strb	r3, [r0, #1]
 801c8fc:	4618      	mov	r0, r3
 801c8fe:	4770      	bx	lr
 801c900:	2000      	movs	r0, #0
 801c902:	4770      	bx	lr

0801c904 <__cxa_guard_release>:
 801c904:	2301      	movs	r3, #1
 801c906:	6003      	str	r3, [r0, #0]
 801c908:	4770      	bx	lr

0801c90a <__cxa_pure_virtual>:
 801c90a:	b508      	push	{r3, lr}
 801c90c:	f000 f80e 	bl	801c92c <_ZSt9terminatev>

0801c910 <_ZdlPv>:
 801c910:	f000 b892 	b.w	801ca38 <free>

0801c914 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801c914:	b508      	push	{r3, lr}
 801c916:	4780      	blx	r0
 801c918:	f000 f80d 	bl	801c936 <abort>

0801c91c <_ZSt13get_terminatev>:
 801c91c:	4b02      	ldr	r3, [pc, #8]	; (801c928 <_ZSt13get_terminatev+0xc>)
 801c91e:	6818      	ldr	r0, [r3, #0]
 801c920:	f3bf 8f5b 	dmb	ish
 801c924:	4770      	bx	lr
 801c926:	bf00      	nop
 801c928:	200000e4 	.word	0x200000e4

0801c92c <_ZSt9terminatev>:
 801c92c:	b508      	push	{r3, lr}
 801c92e:	f7ff fff5 	bl	801c91c <_ZSt13get_terminatev>
 801c932:	f7ff ffef 	bl	801c914 <_ZN10__cxxabiv111__terminateEPFvvE>

0801c936 <abort>:
 801c936:	b508      	push	{r3, lr}
 801c938:	2006      	movs	r0, #6
 801c93a:	f000 fca1 	bl	801d280 <raise>
 801c93e:	2001      	movs	r0, #1
 801c940:	f7e7 fc0e 	bl	8004160 <_exit>

0801c944 <__assert_func>:
 801c944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c946:	4614      	mov	r4, r2
 801c948:	461a      	mov	r2, r3
 801c94a:	4b09      	ldr	r3, [pc, #36]	; (801c970 <__assert_func+0x2c>)
 801c94c:	681b      	ldr	r3, [r3, #0]
 801c94e:	4605      	mov	r5, r0
 801c950:	68d8      	ldr	r0, [r3, #12]
 801c952:	b14c      	cbz	r4, 801c968 <__assert_func+0x24>
 801c954:	4b07      	ldr	r3, [pc, #28]	; (801c974 <__assert_func+0x30>)
 801c956:	9100      	str	r1, [sp, #0]
 801c958:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c95c:	4906      	ldr	r1, [pc, #24]	; (801c978 <__assert_func+0x34>)
 801c95e:	462b      	mov	r3, r5
 801c960:	f000 f828 	bl	801c9b4 <fiprintf>
 801c964:	f7ff ffe7 	bl	801c936 <abort>
 801c968:	4b04      	ldr	r3, [pc, #16]	; (801c97c <__assert_func+0x38>)
 801c96a:	461c      	mov	r4, r3
 801c96c:	e7f3      	b.n	801c956 <__assert_func+0x12>
 801c96e:	bf00      	nop
 801c970:	200000e8 	.word	0x200000e8
 801c974:	08020c10 	.word	0x08020c10
 801c978:	08020c1d 	.word	0x08020c1d
 801c97c:	08020c4b 	.word	0x08020c4b

0801c980 <atexit>:
 801c980:	2300      	movs	r3, #0
 801c982:	4601      	mov	r1, r0
 801c984:	461a      	mov	r2, r3
 801c986:	4618      	mov	r0, r3
 801c988:	f000 bd6a 	b.w	801d460 <__register_exitproc>

0801c98c <__cxa_atexit>:
 801c98c:	b510      	push	{r4, lr}
 801c98e:	4c05      	ldr	r4, [pc, #20]	; (801c9a4 <__cxa_atexit+0x18>)
 801c990:	4613      	mov	r3, r2
 801c992:	b12c      	cbz	r4, 801c9a0 <__cxa_atexit+0x14>
 801c994:	460a      	mov	r2, r1
 801c996:	4601      	mov	r1, r0
 801c998:	2002      	movs	r0, #2
 801c99a:	f000 fd61 	bl	801d460 <__register_exitproc>
 801c99e:	bd10      	pop	{r4, pc}
 801c9a0:	4620      	mov	r0, r4
 801c9a2:	e7fc      	b.n	801c99e <__cxa_atexit+0x12>
 801c9a4:	0801d461 	.word	0x0801d461

0801c9a8 <__errno>:
 801c9a8:	4b01      	ldr	r3, [pc, #4]	; (801c9b0 <__errno+0x8>)
 801c9aa:	6818      	ldr	r0, [r3, #0]
 801c9ac:	4770      	bx	lr
 801c9ae:	bf00      	nop
 801c9b0:	200000e8 	.word	0x200000e8

0801c9b4 <fiprintf>:
 801c9b4:	b40e      	push	{r1, r2, r3}
 801c9b6:	b503      	push	{r0, r1, lr}
 801c9b8:	4601      	mov	r1, r0
 801c9ba:	ab03      	add	r3, sp, #12
 801c9bc:	4805      	ldr	r0, [pc, #20]	; (801c9d4 <fiprintf+0x20>)
 801c9be:	f853 2b04 	ldr.w	r2, [r3], #4
 801c9c2:	6800      	ldr	r0, [r0, #0]
 801c9c4:	9301      	str	r3, [sp, #4]
 801c9c6:	f000 f95f 	bl	801cc88 <_vfiprintf_r>
 801c9ca:	b002      	add	sp, #8
 801c9cc:	f85d eb04 	ldr.w	lr, [sp], #4
 801c9d0:	b003      	add	sp, #12
 801c9d2:	4770      	bx	lr
 801c9d4:	200000e8 	.word	0x200000e8

0801c9d8 <__libc_init_array>:
 801c9d8:	b570      	push	{r4, r5, r6, lr}
 801c9da:	4d0d      	ldr	r5, [pc, #52]	; (801ca10 <__libc_init_array+0x38>)
 801c9dc:	4c0d      	ldr	r4, [pc, #52]	; (801ca14 <__libc_init_array+0x3c>)
 801c9de:	1b64      	subs	r4, r4, r5
 801c9e0:	10a4      	asrs	r4, r4, #2
 801c9e2:	2600      	movs	r6, #0
 801c9e4:	42a6      	cmp	r6, r4
 801c9e6:	d109      	bne.n	801c9fc <__libc_init_array+0x24>
 801c9e8:	4d0b      	ldr	r5, [pc, #44]	; (801ca18 <__libc_init_array+0x40>)
 801c9ea:	4c0c      	ldr	r4, [pc, #48]	; (801ca1c <__libc_init_array+0x44>)
 801c9ec:	f001 f86e 	bl	801dacc <_init>
 801c9f0:	1b64      	subs	r4, r4, r5
 801c9f2:	10a4      	asrs	r4, r4, #2
 801c9f4:	2600      	movs	r6, #0
 801c9f6:	42a6      	cmp	r6, r4
 801c9f8:	d105      	bne.n	801ca06 <__libc_init_array+0x2e>
 801c9fa:	bd70      	pop	{r4, r5, r6, pc}
 801c9fc:	f855 3b04 	ldr.w	r3, [r5], #4
 801ca00:	4798      	blx	r3
 801ca02:	3601      	adds	r6, #1
 801ca04:	e7ee      	b.n	801c9e4 <__libc_init_array+0xc>
 801ca06:	f855 3b04 	ldr.w	r3, [r5], #4
 801ca0a:	4798      	blx	r3
 801ca0c:	3601      	adds	r6, #1
 801ca0e:	e7f2      	b.n	801c9f6 <__libc_init_array+0x1e>
 801ca10:	08020d08 	.word	0x08020d08
 801ca14:	08020d08 	.word	0x08020d08
 801ca18:	08020d08 	.word	0x08020d08
 801ca1c:	08020d24 	.word	0x08020d24

0801ca20 <__retarget_lock_init_recursive>:
 801ca20:	4770      	bx	lr

0801ca22 <__retarget_lock_acquire_recursive>:
 801ca22:	4770      	bx	lr

0801ca24 <__retarget_lock_release>:
 801ca24:	4770      	bx	lr

0801ca26 <__retarget_lock_release_recursive>:
 801ca26:	4770      	bx	lr

0801ca28 <malloc>:
 801ca28:	4b02      	ldr	r3, [pc, #8]	; (801ca34 <malloc+0xc>)
 801ca2a:	4601      	mov	r1, r0
 801ca2c:	6818      	ldr	r0, [r3, #0]
 801ca2e:	f000 b88d 	b.w	801cb4c <_malloc_r>
 801ca32:	bf00      	nop
 801ca34:	200000e8 	.word	0x200000e8

0801ca38 <free>:
 801ca38:	4b02      	ldr	r3, [pc, #8]	; (801ca44 <free+0xc>)
 801ca3a:	4601      	mov	r1, r0
 801ca3c:	6818      	ldr	r0, [r3, #0]
 801ca3e:	f000 b819 	b.w	801ca74 <_free_r>
 801ca42:	bf00      	nop
 801ca44:	200000e8 	.word	0x200000e8

0801ca48 <memcpy>:
 801ca48:	440a      	add	r2, r1
 801ca4a:	4291      	cmp	r1, r2
 801ca4c:	f100 33ff 	add.w	r3, r0, #4294967295
 801ca50:	d100      	bne.n	801ca54 <memcpy+0xc>
 801ca52:	4770      	bx	lr
 801ca54:	b510      	push	{r4, lr}
 801ca56:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ca5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ca5e:	4291      	cmp	r1, r2
 801ca60:	d1f9      	bne.n	801ca56 <memcpy+0xe>
 801ca62:	bd10      	pop	{r4, pc}

0801ca64 <memset>:
 801ca64:	4402      	add	r2, r0
 801ca66:	4603      	mov	r3, r0
 801ca68:	4293      	cmp	r3, r2
 801ca6a:	d100      	bne.n	801ca6e <memset+0xa>
 801ca6c:	4770      	bx	lr
 801ca6e:	f803 1b01 	strb.w	r1, [r3], #1
 801ca72:	e7f9      	b.n	801ca68 <memset+0x4>

0801ca74 <_free_r>:
 801ca74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ca76:	2900      	cmp	r1, #0
 801ca78:	d044      	beq.n	801cb04 <_free_r+0x90>
 801ca7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ca7e:	9001      	str	r0, [sp, #4]
 801ca80:	2b00      	cmp	r3, #0
 801ca82:	f1a1 0404 	sub.w	r4, r1, #4
 801ca86:	bfb8      	it	lt
 801ca88:	18e4      	addlt	r4, r4, r3
 801ca8a:	f000 ff67 	bl	801d95c <__malloc_lock>
 801ca8e:	4a1e      	ldr	r2, [pc, #120]	; (801cb08 <_free_r+0x94>)
 801ca90:	9801      	ldr	r0, [sp, #4]
 801ca92:	6813      	ldr	r3, [r2, #0]
 801ca94:	b933      	cbnz	r3, 801caa4 <_free_r+0x30>
 801ca96:	6063      	str	r3, [r4, #4]
 801ca98:	6014      	str	r4, [r2, #0]
 801ca9a:	b003      	add	sp, #12
 801ca9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801caa0:	f000 bf62 	b.w	801d968 <__malloc_unlock>
 801caa4:	42a3      	cmp	r3, r4
 801caa6:	d908      	bls.n	801caba <_free_r+0x46>
 801caa8:	6825      	ldr	r5, [r4, #0]
 801caaa:	1961      	adds	r1, r4, r5
 801caac:	428b      	cmp	r3, r1
 801caae:	bf01      	itttt	eq
 801cab0:	6819      	ldreq	r1, [r3, #0]
 801cab2:	685b      	ldreq	r3, [r3, #4]
 801cab4:	1949      	addeq	r1, r1, r5
 801cab6:	6021      	streq	r1, [r4, #0]
 801cab8:	e7ed      	b.n	801ca96 <_free_r+0x22>
 801caba:	461a      	mov	r2, r3
 801cabc:	685b      	ldr	r3, [r3, #4]
 801cabe:	b10b      	cbz	r3, 801cac4 <_free_r+0x50>
 801cac0:	42a3      	cmp	r3, r4
 801cac2:	d9fa      	bls.n	801caba <_free_r+0x46>
 801cac4:	6811      	ldr	r1, [r2, #0]
 801cac6:	1855      	adds	r5, r2, r1
 801cac8:	42a5      	cmp	r5, r4
 801caca:	d10b      	bne.n	801cae4 <_free_r+0x70>
 801cacc:	6824      	ldr	r4, [r4, #0]
 801cace:	4421      	add	r1, r4
 801cad0:	1854      	adds	r4, r2, r1
 801cad2:	42a3      	cmp	r3, r4
 801cad4:	6011      	str	r1, [r2, #0]
 801cad6:	d1e0      	bne.n	801ca9a <_free_r+0x26>
 801cad8:	681c      	ldr	r4, [r3, #0]
 801cada:	685b      	ldr	r3, [r3, #4]
 801cadc:	6053      	str	r3, [r2, #4]
 801cade:	4421      	add	r1, r4
 801cae0:	6011      	str	r1, [r2, #0]
 801cae2:	e7da      	b.n	801ca9a <_free_r+0x26>
 801cae4:	d902      	bls.n	801caec <_free_r+0x78>
 801cae6:	230c      	movs	r3, #12
 801cae8:	6003      	str	r3, [r0, #0]
 801caea:	e7d6      	b.n	801ca9a <_free_r+0x26>
 801caec:	6825      	ldr	r5, [r4, #0]
 801caee:	1961      	adds	r1, r4, r5
 801caf0:	428b      	cmp	r3, r1
 801caf2:	bf04      	itt	eq
 801caf4:	6819      	ldreq	r1, [r3, #0]
 801caf6:	685b      	ldreq	r3, [r3, #4]
 801caf8:	6063      	str	r3, [r4, #4]
 801cafa:	bf04      	itt	eq
 801cafc:	1949      	addeq	r1, r1, r5
 801cafe:	6021      	streq	r1, [r4, #0]
 801cb00:	6054      	str	r4, [r2, #4]
 801cb02:	e7ca      	b.n	801ca9a <_free_r+0x26>
 801cb04:	b003      	add	sp, #12
 801cb06:	bd30      	pop	{r4, r5, pc}
 801cb08:	20024518 	.word	0x20024518

0801cb0c <sbrk_aligned>:
 801cb0c:	b570      	push	{r4, r5, r6, lr}
 801cb0e:	4e0e      	ldr	r6, [pc, #56]	; (801cb48 <sbrk_aligned+0x3c>)
 801cb10:	460c      	mov	r4, r1
 801cb12:	6831      	ldr	r1, [r6, #0]
 801cb14:	4605      	mov	r5, r0
 801cb16:	b911      	cbnz	r1, 801cb1e <sbrk_aligned+0x12>
 801cb18:	f000 fb7a 	bl	801d210 <_sbrk_r>
 801cb1c:	6030      	str	r0, [r6, #0]
 801cb1e:	4621      	mov	r1, r4
 801cb20:	4628      	mov	r0, r5
 801cb22:	f000 fb75 	bl	801d210 <_sbrk_r>
 801cb26:	1c43      	adds	r3, r0, #1
 801cb28:	d00a      	beq.n	801cb40 <sbrk_aligned+0x34>
 801cb2a:	1cc4      	adds	r4, r0, #3
 801cb2c:	f024 0403 	bic.w	r4, r4, #3
 801cb30:	42a0      	cmp	r0, r4
 801cb32:	d007      	beq.n	801cb44 <sbrk_aligned+0x38>
 801cb34:	1a21      	subs	r1, r4, r0
 801cb36:	4628      	mov	r0, r5
 801cb38:	f000 fb6a 	bl	801d210 <_sbrk_r>
 801cb3c:	3001      	adds	r0, #1
 801cb3e:	d101      	bne.n	801cb44 <sbrk_aligned+0x38>
 801cb40:	f04f 34ff 	mov.w	r4, #4294967295
 801cb44:	4620      	mov	r0, r4
 801cb46:	bd70      	pop	{r4, r5, r6, pc}
 801cb48:	2002451c 	.word	0x2002451c

0801cb4c <_malloc_r>:
 801cb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb50:	1ccd      	adds	r5, r1, #3
 801cb52:	f025 0503 	bic.w	r5, r5, #3
 801cb56:	3508      	adds	r5, #8
 801cb58:	2d0c      	cmp	r5, #12
 801cb5a:	bf38      	it	cc
 801cb5c:	250c      	movcc	r5, #12
 801cb5e:	2d00      	cmp	r5, #0
 801cb60:	4607      	mov	r7, r0
 801cb62:	db01      	blt.n	801cb68 <_malloc_r+0x1c>
 801cb64:	42a9      	cmp	r1, r5
 801cb66:	d905      	bls.n	801cb74 <_malloc_r+0x28>
 801cb68:	230c      	movs	r3, #12
 801cb6a:	603b      	str	r3, [r7, #0]
 801cb6c:	2600      	movs	r6, #0
 801cb6e:	4630      	mov	r0, r6
 801cb70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cb74:	4e2e      	ldr	r6, [pc, #184]	; (801cc30 <_malloc_r+0xe4>)
 801cb76:	f000 fef1 	bl	801d95c <__malloc_lock>
 801cb7a:	6833      	ldr	r3, [r6, #0]
 801cb7c:	461c      	mov	r4, r3
 801cb7e:	bb34      	cbnz	r4, 801cbce <_malloc_r+0x82>
 801cb80:	4629      	mov	r1, r5
 801cb82:	4638      	mov	r0, r7
 801cb84:	f7ff ffc2 	bl	801cb0c <sbrk_aligned>
 801cb88:	1c43      	adds	r3, r0, #1
 801cb8a:	4604      	mov	r4, r0
 801cb8c:	d14d      	bne.n	801cc2a <_malloc_r+0xde>
 801cb8e:	6834      	ldr	r4, [r6, #0]
 801cb90:	4626      	mov	r6, r4
 801cb92:	2e00      	cmp	r6, #0
 801cb94:	d140      	bne.n	801cc18 <_malloc_r+0xcc>
 801cb96:	6823      	ldr	r3, [r4, #0]
 801cb98:	4631      	mov	r1, r6
 801cb9a:	4638      	mov	r0, r7
 801cb9c:	eb04 0803 	add.w	r8, r4, r3
 801cba0:	f000 fb36 	bl	801d210 <_sbrk_r>
 801cba4:	4580      	cmp	r8, r0
 801cba6:	d13a      	bne.n	801cc1e <_malloc_r+0xd2>
 801cba8:	6821      	ldr	r1, [r4, #0]
 801cbaa:	3503      	adds	r5, #3
 801cbac:	1a6d      	subs	r5, r5, r1
 801cbae:	f025 0503 	bic.w	r5, r5, #3
 801cbb2:	3508      	adds	r5, #8
 801cbb4:	2d0c      	cmp	r5, #12
 801cbb6:	bf38      	it	cc
 801cbb8:	250c      	movcc	r5, #12
 801cbba:	4629      	mov	r1, r5
 801cbbc:	4638      	mov	r0, r7
 801cbbe:	f7ff ffa5 	bl	801cb0c <sbrk_aligned>
 801cbc2:	3001      	adds	r0, #1
 801cbc4:	d02b      	beq.n	801cc1e <_malloc_r+0xd2>
 801cbc6:	6823      	ldr	r3, [r4, #0]
 801cbc8:	442b      	add	r3, r5
 801cbca:	6023      	str	r3, [r4, #0]
 801cbcc:	e00e      	b.n	801cbec <_malloc_r+0xa0>
 801cbce:	6822      	ldr	r2, [r4, #0]
 801cbd0:	1b52      	subs	r2, r2, r5
 801cbd2:	d41e      	bmi.n	801cc12 <_malloc_r+0xc6>
 801cbd4:	2a0b      	cmp	r2, #11
 801cbd6:	d916      	bls.n	801cc06 <_malloc_r+0xba>
 801cbd8:	1961      	adds	r1, r4, r5
 801cbda:	42a3      	cmp	r3, r4
 801cbdc:	6025      	str	r5, [r4, #0]
 801cbde:	bf18      	it	ne
 801cbe0:	6059      	strne	r1, [r3, #4]
 801cbe2:	6863      	ldr	r3, [r4, #4]
 801cbe4:	bf08      	it	eq
 801cbe6:	6031      	streq	r1, [r6, #0]
 801cbe8:	5162      	str	r2, [r4, r5]
 801cbea:	604b      	str	r3, [r1, #4]
 801cbec:	4638      	mov	r0, r7
 801cbee:	f104 060b 	add.w	r6, r4, #11
 801cbf2:	f000 feb9 	bl	801d968 <__malloc_unlock>
 801cbf6:	f026 0607 	bic.w	r6, r6, #7
 801cbfa:	1d23      	adds	r3, r4, #4
 801cbfc:	1af2      	subs	r2, r6, r3
 801cbfe:	d0b6      	beq.n	801cb6e <_malloc_r+0x22>
 801cc00:	1b9b      	subs	r3, r3, r6
 801cc02:	50a3      	str	r3, [r4, r2]
 801cc04:	e7b3      	b.n	801cb6e <_malloc_r+0x22>
 801cc06:	6862      	ldr	r2, [r4, #4]
 801cc08:	42a3      	cmp	r3, r4
 801cc0a:	bf0c      	ite	eq
 801cc0c:	6032      	streq	r2, [r6, #0]
 801cc0e:	605a      	strne	r2, [r3, #4]
 801cc10:	e7ec      	b.n	801cbec <_malloc_r+0xa0>
 801cc12:	4623      	mov	r3, r4
 801cc14:	6864      	ldr	r4, [r4, #4]
 801cc16:	e7b2      	b.n	801cb7e <_malloc_r+0x32>
 801cc18:	4634      	mov	r4, r6
 801cc1a:	6876      	ldr	r6, [r6, #4]
 801cc1c:	e7b9      	b.n	801cb92 <_malloc_r+0x46>
 801cc1e:	230c      	movs	r3, #12
 801cc20:	603b      	str	r3, [r7, #0]
 801cc22:	4638      	mov	r0, r7
 801cc24:	f000 fea0 	bl	801d968 <__malloc_unlock>
 801cc28:	e7a1      	b.n	801cb6e <_malloc_r+0x22>
 801cc2a:	6025      	str	r5, [r4, #0]
 801cc2c:	e7de      	b.n	801cbec <_malloc_r+0xa0>
 801cc2e:	bf00      	nop
 801cc30:	20024518 	.word	0x20024518

0801cc34 <__sfputc_r>:
 801cc34:	6893      	ldr	r3, [r2, #8]
 801cc36:	3b01      	subs	r3, #1
 801cc38:	2b00      	cmp	r3, #0
 801cc3a:	b410      	push	{r4}
 801cc3c:	6093      	str	r3, [r2, #8]
 801cc3e:	da08      	bge.n	801cc52 <__sfputc_r+0x1e>
 801cc40:	6994      	ldr	r4, [r2, #24]
 801cc42:	42a3      	cmp	r3, r4
 801cc44:	db01      	blt.n	801cc4a <__sfputc_r+0x16>
 801cc46:	290a      	cmp	r1, #10
 801cc48:	d103      	bne.n	801cc52 <__sfputc_r+0x1e>
 801cc4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cc4e:	f000 bb47 	b.w	801d2e0 <__swbuf_r>
 801cc52:	6813      	ldr	r3, [r2, #0]
 801cc54:	1c58      	adds	r0, r3, #1
 801cc56:	6010      	str	r0, [r2, #0]
 801cc58:	7019      	strb	r1, [r3, #0]
 801cc5a:	4608      	mov	r0, r1
 801cc5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cc60:	4770      	bx	lr

0801cc62 <__sfputs_r>:
 801cc62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc64:	4606      	mov	r6, r0
 801cc66:	460f      	mov	r7, r1
 801cc68:	4614      	mov	r4, r2
 801cc6a:	18d5      	adds	r5, r2, r3
 801cc6c:	42ac      	cmp	r4, r5
 801cc6e:	d101      	bne.n	801cc74 <__sfputs_r+0x12>
 801cc70:	2000      	movs	r0, #0
 801cc72:	e007      	b.n	801cc84 <__sfputs_r+0x22>
 801cc74:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cc78:	463a      	mov	r2, r7
 801cc7a:	4630      	mov	r0, r6
 801cc7c:	f7ff ffda 	bl	801cc34 <__sfputc_r>
 801cc80:	1c43      	adds	r3, r0, #1
 801cc82:	d1f3      	bne.n	801cc6c <__sfputs_r+0xa>
 801cc84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cc88 <_vfiprintf_r>:
 801cc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc8c:	460d      	mov	r5, r1
 801cc8e:	b09d      	sub	sp, #116	; 0x74
 801cc90:	4614      	mov	r4, r2
 801cc92:	4698      	mov	r8, r3
 801cc94:	4606      	mov	r6, r0
 801cc96:	b118      	cbz	r0, 801cca0 <_vfiprintf_r+0x18>
 801cc98:	6983      	ldr	r3, [r0, #24]
 801cc9a:	b90b      	cbnz	r3, 801cca0 <_vfiprintf_r+0x18>
 801cc9c:	f000 fd5c 	bl	801d758 <__sinit>
 801cca0:	4b89      	ldr	r3, [pc, #548]	; (801cec8 <_vfiprintf_r+0x240>)
 801cca2:	429d      	cmp	r5, r3
 801cca4:	d11b      	bne.n	801ccde <_vfiprintf_r+0x56>
 801cca6:	6875      	ldr	r5, [r6, #4]
 801cca8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ccaa:	07d9      	lsls	r1, r3, #31
 801ccac:	d405      	bmi.n	801ccba <_vfiprintf_r+0x32>
 801ccae:	89ab      	ldrh	r3, [r5, #12]
 801ccb0:	059a      	lsls	r2, r3, #22
 801ccb2:	d402      	bmi.n	801ccba <_vfiprintf_r+0x32>
 801ccb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ccb6:	f7ff feb4 	bl	801ca22 <__retarget_lock_acquire_recursive>
 801ccba:	89ab      	ldrh	r3, [r5, #12]
 801ccbc:	071b      	lsls	r3, r3, #28
 801ccbe:	d501      	bpl.n	801ccc4 <_vfiprintf_r+0x3c>
 801ccc0:	692b      	ldr	r3, [r5, #16]
 801ccc2:	b9eb      	cbnz	r3, 801cd00 <_vfiprintf_r+0x78>
 801ccc4:	4629      	mov	r1, r5
 801ccc6:	4630      	mov	r0, r6
 801ccc8:	f000 fb5c 	bl	801d384 <__swsetup_r>
 801cccc:	b1c0      	cbz	r0, 801cd00 <_vfiprintf_r+0x78>
 801ccce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ccd0:	07dc      	lsls	r4, r3, #31
 801ccd2:	d50e      	bpl.n	801ccf2 <_vfiprintf_r+0x6a>
 801ccd4:	f04f 30ff 	mov.w	r0, #4294967295
 801ccd8:	b01d      	add	sp, #116	; 0x74
 801ccda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccde:	4b7b      	ldr	r3, [pc, #492]	; (801cecc <_vfiprintf_r+0x244>)
 801cce0:	429d      	cmp	r5, r3
 801cce2:	d101      	bne.n	801cce8 <_vfiprintf_r+0x60>
 801cce4:	68b5      	ldr	r5, [r6, #8]
 801cce6:	e7df      	b.n	801cca8 <_vfiprintf_r+0x20>
 801cce8:	4b79      	ldr	r3, [pc, #484]	; (801ced0 <_vfiprintf_r+0x248>)
 801ccea:	429d      	cmp	r5, r3
 801ccec:	bf08      	it	eq
 801ccee:	68f5      	ldreq	r5, [r6, #12]
 801ccf0:	e7da      	b.n	801cca8 <_vfiprintf_r+0x20>
 801ccf2:	89ab      	ldrh	r3, [r5, #12]
 801ccf4:	0598      	lsls	r0, r3, #22
 801ccf6:	d4ed      	bmi.n	801ccd4 <_vfiprintf_r+0x4c>
 801ccf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ccfa:	f7ff fe94 	bl	801ca26 <__retarget_lock_release_recursive>
 801ccfe:	e7e9      	b.n	801ccd4 <_vfiprintf_r+0x4c>
 801cd00:	2300      	movs	r3, #0
 801cd02:	9309      	str	r3, [sp, #36]	; 0x24
 801cd04:	2320      	movs	r3, #32
 801cd06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cd0a:	f8cd 800c 	str.w	r8, [sp, #12]
 801cd0e:	2330      	movs	r3, #48	; 0x30
 801cd10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ced4 <_vfiprintf_r+0x24c>
 801cd14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cd18:	f04f 0901 	mov.w	r9, #1
 801cd1c:	4623      	mov	r3, r4
 801cd1e:	469a      	mov	sl, r3
 801cd20:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cd24:	b10a      	cbz	r2, 801cd2a <_vfiprintf_r+0xa2>
 801cd26:	2a25      	cmp	r2, #37	; 0x25
 801cd28:	d1f9      	bne.n	801cd1e <_vfiprintf_r+0x96>
 801cd2a:	ebba 0b04 	subs.w	fp, sl, r4
 801cd2e:	d00b      	beq.n	801cd48 <_vfiprintf_r+0xc0>
 801cd30:	465b      	mov	r3, fp
 801cd32:	4622      	mov	r2, r4
 801cd34:	4629      	mov	r1, r5
 801cd36:	4630      	mov	r0, r6
 801cd38:	f7ff ff93 	bl	801cc62 <__sfputs_r>
 801cd3c:	3001      	adds	r0, #1
 801cd3e:	f000 80aa 	beq.w	801ce96 <_vfiprintf_r+0x20e>
 801cd42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cd44:	445a      	add	r2, fp
 801cd46:	9209      	str	r2, [sp, #36]	; 0x24
 801cd48:	f89a 3000 	ldrb.w	r3, [sl]
 801cd4c:	2b00      	cmp	r3, #0
 801cd4e:	f000 80a2 	beq.w	801ce96 <_vfiprintf_r+0x20e>
 801cd52:	2300      	movs	r3, #0
 801cd54:	f04f 32ff 	mov.w	r2, #4294967295
 801cd58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cd5c:	f10a 0a01 	add.w	sl, sl, #1
 801cd60:	9304      	str	r3, [sp, #16]
 801cd62:	9307      	str	r3, [sp, #28]
 801cd64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cd68:	931a      	str	r3, [sp, #104]	; 0x68
 801cd6a:	4654      	mov	r4, sl
 801cd6c:	2205      	movs	r2, #5
 801cd6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cd72:	4858      	ldr	r0, [pc, #352]	; (801ced4 <_vfiprintf_r+0x24c>)
 801cd74:	f7e3 fa64 	bl	8000240 <memchr>
 801cd78:	9a04      	ldr	r2, [sp, #16]
 801cd7a:	b9d8      	cbnz	r0, 801cdb4 <_vfiprintf_r+0x12c>
 801cd7c:	06d1      	lsls	r1, r2, #27
 801cd7e:	bf44      	itt	mi
 801cd80:	2320      	movmi	r3, #32
 801cd82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cd86:	0713      	lsls	r3, r2, #28
 801cd88:	bf44      	itt	mi
 801cd8a:	232b      	movmi	r3, #43	; 0x2b
 801cd8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cd90:	f89a 3000 	ldrb.w	r3, [sl]
 801cd94:	2b2a      	cmp	r3, #42	; 0x2a
 801cd96:	d015      	beq.n	801cdc4 <_vfiprintf_r+0x13c>
 801cd98:	9a07      	ldr	r2, [sp, #28]
 801cd9a:	4654      	mov	r4, sl
 801cd9c:	2000      	movs	r0, #0
 801cd9e:	f04f 0c0a 	mov.w	ip, #10
 801cda2:	4621      	mov	r1, r4
 801cda4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cda8:	3b30      	subs	r3, #48	; 0x30
 801cdaa:	2b09      	cmp	r3, #9
 801cdac:	d94e      	bls.n	801ce4c <_vfiprintf_r+0x1c4>
 801cdae:	b1b0      	cbz	r0, 801cdde <_vfiprintf_r+0x156>
 801cdb0:	9207      	str	r2, [sp, #28]
 801cdb2:	e014      	b.n	801cdde <_vfiprintf_r+0x156>
 801cdb4:	eba0 0308 	sub.w	r3, r0, r8
 801cdb8:	fa09 f303 	lsl.w	r3, r9, r3
 801cdbc:	4313      	orrs	r3, r2
 801cdbe:	9304      	str	r3, [sp, #16]
 801cdc0:	46a2      	mov	sl, r4
 801cdc2:	e7d2      	b.n	801cd6a <_vfiprintf_r+0xe2>
 801cdc4:	9b03      	ldr	r3, [sp, #12]
 801cdc6:	1d19      	adds	r1, r3, #4
 801cdc8:	681b      	ldr	r3, [r3, #0]
 801cdca:	9103      	str	r1, [sp, #12]
 801cdcc:	2b00      	cmp	r3, #0
 801cdce:	bfbb      	ittet	lt
 801cdd0:	425b      	neglt	r3, r3
 801cdd2:	f042 0202 	orrlt.w	r2, r2, #2
 801cdd6:	9307      	strge	r3, [sp, #28]
 801cdd8:	9307      	strlt	r3, [sp, #28]
 801cdda:	bfb8      	it	lt
 801cddc:	9204      	strlt	r2, [sp, #16]
 801cdde:	7823      	ldrb	r3, [r4, #0]
 801cde0:	2b2e      	cmp	r3, #46	; 0x2e
 801cde2:	d10c      	bne.n	801cdfe <_vfiprintf_r+0x176>
 801cde4:	7863      	ldrb	r3, [r4, #1]
 801cde6:	2b2a      	cmp	r3, #42	; 0x2a
 801cde8:	d135      	bne.n	801ce56 <_vfiprintf_r+0x1ce>
 801cdea:	9b03      	ldr	r3, [sp, #12]
 801cdec:	1d1a      	adds	r2, r3, #4
 801cdee:	681b      	ldr	r3, [r3, #0]
 801cdf0:	9203      	str	r2, [sp, #12]
 801cdf2:	2b00      	cmp	r3, #0
 801cdf4:	bfb8      	it	lt
 801cdf6:	f04f 33ff 	movlt.w	r3, #4294967295
 801cdfa:	3402      	adds	r4, #2
 801cdfc:	9305      	str	r3, [sp, #20]
 801cdfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801cee4 <_vfiprintf_r+0x25c>
 801ce02:	7821      	ldrb	r1, [r4, #0]
 801ce04:	2203      	movs	r2, #3
 801ce06:	4650      	mov	r0, sl
 801ce08:	f7e3 fa1a 	bl	8000240 <memchr>
 801ce0c:	b140      	cbz	r0, 801ce20 <_vfiprintf_r+0x198>
 801ce0e:	2340      	movs	r3, #64	; 0x40
 801ce10:	eba0 000a 	sub.w	r0, r0, sl
 801ce14:	fa03 f000 	lsl.w	r0, r3, r0
 801ce18:	9b04      	ldr	r3, [sp, #16]
 801ce1a:	4303      	orrs	r3, r0
 801ce1c:	3401      	adds	r4, #1
 801ce1e:	9304      	str	r3, [sp, #16]
 801ce20:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ce24:	482c      	ldr	r0, [pc, #176]	; (801ced8 <_vfiprintf_r+0x250>)
 801ce26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ce2a:	2206      	movs	r2, #6
 801ce2c:	f7e3 fa08 	bl	8000240 <memchr>
 801ce30:	2800      	cmp	r0, #0
 801ce32:	d03f      	beq.n	801ceb4 <_vfiprintf_r+0x22c>
 801ce34:	4b29      	ldr	r3, [pc, #164]	; (801cedc <_vfiprintf_r+0x254>)
 801ce36:	bb1b      	cbnz	r3, 801ce80 <_vfiprintf_r+0x1f8>
 801ce38:	9b03      	ldr	r3, [sp, #12]
 801ce3a:	3307      	adds	r3, #7
 801ce3c:	f023 0307 	bic.w	r3, r3, #7
 801ce40:	3308      	adds	r3, #8
 801ce42:	9303      	str	r3, [sp, #12]
 801ce44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce46:	443b      	add	r3, r7
 801ce48:	9309      	str	r3, [sp, #36]	; 0x24
 801ce4a:	e767      	b.n	801cd1c <_vfiprintf_r+0x94>
 801ce4c:	fb0c 3202 	mla	r2, ip, r2, r3
 801ce50:	460c      	mov	r4, r1
 801ce52:	2001      	movs	r0, #1
 801ce54:	e7a5      	b.n	801cda2 <_vfiprintf_r+0x11a>
 801ce56:	2300      	movs	r3, #0
 801ce58:	3401      	adds	r4, #1
 801ce5a:	9305      	str	r3, [sp, #20]
 801ce5c:	4619      	mov	r1, r3
 801ce5e:	f04f 0c0a 	mov.w	ip, #10
 801ce62:	4620      	mov	r0, r4
 801ce64:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ce68:	3a30      	subs	r2, #48	; 0x30
 801ce6a:	2a09      	cmp	r2, #9
 801ce6c:	d903      	bls.n	801ce76 <_vfiprintf_r+0x1ee>
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	d0c5      	beq.n	801cdfe <_vfiprintf_r+0x176>
 801ce72:	9105      	str	r1, [sp, #20]
 801ce74:	e7c3      	b.n	801cdfe <_vfiprintf_r+0x176>
 801ce76:	fb0c 2101 	mla	r1, ip, r1, r2
 801ce7a:	4604      	mov	r4, r0
 801ce7c:	2301      	movs	r3, #1
 801ce7e:	e7f0      	b.n	801ce62 <_vfiprintf_r+0x1da>
 801ce80:	ab03      	add	r3, sp, #12
 801ce82:	9300      	str	r3, [sp, #0]
 801ce84:	462a      	mov	r2, r5
 801ce86:	4b16      	ldr	r3, [pc, #88]	; (801cee0 <_vfiprintf_r+0x258>)
 801ce88:	a904      	add	r1, sp, #16
 801ce8a:	4630      	mov	r0, r6
 801ce8c:	f3af 8000 	nop.w
 801ce90:	4607      	mov	r7, r0
 801ce92:	1c78      	adds	r0, r7, #1
 801ce94:	d1d6      	bne.n	801ce44 <_vfiprintf_r+0x1bc>
 801ce96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ce98:	07d9      	lsls	r1, r3, #31
 801ce9a:	d405      	bmi.n	801cea8 <_vfiprintf_r+0x220>
 801ce9c:	89ab      	ldrh	r3, [r5, #12]
 801ce9e:	059a      	lsls	r2, r3, #22
 801cea0:	d402      	bmi.n	801cea8 <_vfiprintf_r+0x220>
 801cea2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cea4:	f7ff fdbf 	bl	801ca26 <__retarget_lock_release_recursive>
 801cea8:	89ab      	ldrh	r3, [r5, #12]
 801ceaa:	065b      	lsls	r3, r3, #25
 801ceac:	f53f af12 	bmi.w	801ccd4 <_vfiprintf_r+0x4c>
 801ceb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ceb2:	e711      	b.n	801ccd8 <_vfiprintf_r+0x50>
 801ceb4:	ab03      	add	r3, sp, #12
 801ceb6:	9300      	str	r3, [sp, #0]
 801ceb8:	462a      	mov	r2, r5
 801ceba:	4b09      	ldr	r3, [pc, #36]	; (801cee0 <_vfiprintf_r+0x258>)
 801cebc:	a904      	add	r1, sp, #16
 801cebe:	4630      	mov	r0, r6
 801cec0:	f000 f880 	bl	801cfc4 <_printf_i>
 801cec4:	e7e4      	b.n	801ce90 <_vfiprintf_r+0x208>
 801cec6:	bf00      	nop
 801cec8:	08020ca8 	.word	0x08020ca8
 801cecc:	08020cc8 	.word	0x08020cc8
 801ced0:	08020c88 	.word	0x08020c88
 801ced4:	08020c50 	.word	0x08020c50
 801ced8:	08020c5a 	.word	0x08020c5a
 801cedc:	00000000 	.word	0x00000000
 801cee0:	0801cc63 	.word	0x0801cc63
 801cee4:	08020c56 	.word	0x08020c56

0801cee8 <_printf_common>:
 801cee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ceec:	4616      	mov	r6, r2
 801ceee:	4699      	mov	r9, r3
 801cef0:	688a      	ldr	r2, [r1, #8]
 801cef2:	690b      	ldr	r3, [r1, #16]
 801cef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801cef8:	4293      	cmp	r3, r2
 801cefa:	bfb8      	it	lt
 801cefc:	4613      	movlt	r3, r2
 801cefe:	6033      	str	r3, [r6, #0]
 801cf00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801cf04:	4607      	mov	r7, r0
 801cf06:	460c      	mov	r4, r1
 801cf08:	b10a      	cbz	r2, 801cf0e <_printf_common+0x26>
 801cf0a:	3301      	adds	r3, #1
 801cf0c:	6033      	str	r3, [r6, #0]
 801cf0e:	6823      	ldr	r3, [r4, #0]
 801cf10:	0699      	lsls	r1, r3, #26
 801cf12:	bf42      	ittt	mi
 801cf14:	6833      	ldrmi	r3, [r6, #0]
 801cf16:	3302      	addmi	r3, #2
 801cf18:	6033      	strmi	r3, [r6, #0]
 801cf1a:	6825      	ldr	r5, [r4, #0]
 801cf1c:	f015 0506 	ands.w	r5, r5, #6
 801cf20:	d106      	bne.n	801cf30 <_printf_common+0x48>
 801cf22:	f104 0a19 	add.w	sl, r4, #25
 801cf26:	68e3      	ldr	r3, [r4, #12]
 801cf28:	6832      	ldr	r2, [r6, #0]
 801cf2a:	1a9b      	subs	r3, r3, r2
 801cf2c:	42ab      	cmp	r3, r5
 801cf2e:	dc26      	bgt.n	801cf7e <_printf_common+0x96>
 801cf30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801cf34:	1e13      	subs	r3, r2, #0
 801cf36:	6822      	ldr	r2, [r4, #0]
 801cf38:	bf18      	it	ne
 801cf3a:	2301      	movne	r3, #1
 801cf3c:	0692      	lsls	r2, r2, #26
 801cf3e:	d42b      	bmi.n	801cf98 <_printf_common+0xb0>
 801cf40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801cf44:	4649      	mov	r1, r9
 801cf46:	4638      	mov	r0, r7
 801cf48:	47c0      	blx	r8
 801cf4a:	3001      	adds	r0, #1
 801cf4c:	d01e      	beq.n	801cf8c <_printf_common+0xa4>
 801cf4e:	6823      	ldr	r3, [r4, #0]
 801cf50:	68e5      	ldr	r5, [r4, #12]
 801cf52:	6832      	ldr	r2, [r6, #0]
 801cf54:	f003 0306 	and.w	r3, r3, #6
 801cf58:	2b04      	cmp	r3, #4
 801cf5a:	bf08      	it	eq
 801cf5c:	1aad      	subeq	r5, r5, r2
 801cf5e:	68a3      	ldr	r3, [r4, #8]
 801cf60:	6922      	ldr	r2, [r4, #16]
 801cf62:	bf0c      	ite	eq
 801cf64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cf68:	2500      	movne	r5, #0
 801cf6a:	4293      	cmp	r3, r2
 801cf6c:	bfc4      	itt	gt
 801cf6e:	1a9b      	subgt	r3, r3, r2
 801cf70:	18ed      	addgt	r5, r5, r3
 801cf72:	2600      	movs	r6, #0
 801cf74:	341a      	adds	r4, #26
 801cf76:	42b5      	cmp	r5, r6
 801cf78:	d11a      	bne.n	801cfb0 <_printf_common+0xc8>
 801cf7a:	2000      	movs	r0, #0
 801cf7c:	e008      	b.n	801cf90 <_printf_common+0xa8>
 801cf7e:	2301      	movs	r3, #1
 801cf80:	4652      	mov	r2, sl
 801cf82:	4649      	mov	r1, r9
 801cf84:	4638      	mov	r0, r7
 801cf86:	47c0      	blx	r8
 801cf88:	3001      	adds	r0, #1
 801cf8a:	d103      	bne.n	801cf94 <_printf_common+0xac>
 801cf8c:	f04f 30ff 	mov.w	r0, #4294967295
 801cf90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf94:	3501      	adds	r5, #1
 801cf96:	e7c6      	b.n	801cf26 <_printf_common+0x3e>
 801cf98:	18e1      	adds	r1, r4, r3
 801cf9a:	1c5a      	adds	r2, r3, #1
 801cf9c:	2030      	movs	r0, #48	; 0x30
 801cf9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801cfa2:	4422      	add	r2, r4
 801cfa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801cfa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801cfac:	3302      	adds	r3, #2
 801cfae:	e7c7      	b.n	801cf40 <_printf_common+0x58>
 801cfb0:	2301      	movs	r3, #1
 801cfb2:	4622      	mov	r2, r4
 801cfb4:	4649      	mov	r1, r9
 801cfb6:	4638      	mov	r0, r7
 801cfb8:	47c0      	blx	r8
 801cfba:	3001      	adds	r0, #1
 801cfbc:	d0e6      	beq.n	801cf8c <_printf_common+0xa4>
 801cfbe:	3601      	adds	r6, #1
 801cfc0:	e7d9      	b.n	801cf76 <_printf_common+0x8e>
	...

0801cfc4 <_printf_i>:
 801cfc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cfc8:	7e0f      	ldrb	r7, [r1, #24]
 801cfca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801cfcc:	2f78      	cmp	r7, #120	; 0x78
 801cfce:	4691      	mov	r9, r2
 801cfd0:	4680      	mov	r8, r0
 801cfd2:	460c      	mov	r4, r1
 801cfd4:	469a      	mov	sl, r3
 801cfd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801cfda:	d807      	bhi.n	801cfec <_printf_i+0x28>
 801cfdc:	2f62      	cmp	r7, #98	; 0x62
 801cfde:	d80a      	bhi.n	801cff6 <_printf_i+0x32>
 801cfe0:	2f00      	cmp	r7, #0
 801cfe2:	f000 80d8 	beq.w	801d196 <_printf_i+0x1d2>
 801cfe6:	2f58      	cmp	r7, #88	; 0x58
 801cfe8:	f000 80a3 	beq.w	801d132 <_printf_i+0x16e>
 801cfec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cff0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801cff4:	e03a      	b.n	801d06c <_printf_i+0xa8>
 801cff6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801cffa:	2b15      	cmp	r3, #21
 801cffc:	d8f6      	bhi.n	801cfec <_printf_i+0x28>
 801cffe:	a101      	add	r1, pc, #4	; (adr r1, 801d004 <_printf_i+0x40>)
 801d000:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d004:	0801d05d 	.word	0x0801d05d
 801d008:	0801d071 	.word	0x0801d071
 801d00c:	0801cfed 	.word	0x0801cfed
 801d010:	0801cfed 	.word	0x0801cfed
 801d014:	0801cfed 	.word	0x0801cfed
 801d018:	0801cfed 	.word	0x0801cfed
 801d01c:	0801d071 	.word	0x0801d071
 801d020:	0801cfed 	.word	0x0801cfed
 801d024:	0801cfed 	.word	0x0801cfed
 801d028:	0801cfed 	.word	0x0801cfed
 801d02c:	0801cfed 	.word	0x0801cfed
 801d030:	0801d17d 	.word	0x0801d17d
 801d034:	0801d0a1 	.word	0x0801d0a1
 801d038:	0801d15f 	.word	0x0801d15f
 801d03c:	0801cfed 	.word	0x0801cfed
 801d040:	0801cfed 	.word	0x0801cfed
 801d044:	0801d19f 	.word	0x0801d19f
 801d048:	0801cfed 	.word	0x0801cfed
 801d04c:	0801d0a1 	.word	0x0801d0a1
 801d050:	0801cfed 	.word	0x0801cfed
 801d054:	0801cfed 	.word	0x0801cfed
 801d058:	0801d167 	.word	0x0801d167
 801d05c:	682b      	ldr	r3, [r5, #0]
 801d05e:	1d1a      	adds	r2, r3, #4
 801d060:	681b      	ldr	r3, [r3, #0]
 801d062:	602a      	str	r2, [r5, #0]
 801d064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d06c:	2301      	movs	r3, #1
 801d06e:	e0a3      	b.n	801d1b8 <_printf_i+0x1f4>
 801d070:	6820      	ldr	r0, [r4, #0]
 801d072:	6829      	ldr	r1, [r5, #0]
 801d074:	0606      	lsls	r6, r0, #24
 801d076:	f101 0304 	add.w	r3, r1, #4
 801d07a:	d50a      	bpl.n	801d092 <_printf_i+0xce>
 801d07c:	680e      	ldr	r6, [r1, #0]
 801d07e:	602b      	str	r3, [r5, #0]
 801d080:	2e00      	cmp	r6, #0
 801d082:	da03      	bge.n	801d08c <_printf_i+0xc8>
 801d084:	232d      	movs	r3, #45	; 0x2d
 801d086:	4276      	negs	r6, r6
 801d088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d08c:	485e      	ldr	r0, [pc, #376]	; (801d208 <_printf_i+0x244>)
 801d08e:	230a      	movs	r3, #10
 801d090:	e019      	b.n	801d0c6 <_printf_i+0x102>
 801d092:	680e      	ldr	r6, [r1, #0]
 801d094:	602b      	str	r3, [r5, #0]
 801d096:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d09a:	bf18      	it	ne
 801d09c:	b236      	sxthne	r6, r6
 801d09e:	e7ef      	b.n	801d080 <_printf_i+0xbc>
 801d0a0:	682b      	ldr	r3, [r5, #0]
 801d0a2:	6820      	ldr	r0, [r4, #0]
 801d0a4:	1d19      	adds	r1, r3, #4
 801d0a6:	6029      	str	r1, [r5, #0]
 801d0a8:	0601      	lsls	r1, r0, #24
 801d0aa:	d501      	bpl.n	801d0b0 <_printf_i+0xec>
 801d0ac:	681e      	ldr	r6, [r3, #0]
 801d0ae:	e002      	b.n	801d0b6 <_printf_i+0xf2>
 801d0b0:	0646      	lsls	r6, r0, #25
 801d0b2:	d5fb      	bpl.n	801d0ac <_printf_i+0xe8>
 801d0b4:	881e      	ldrh	r6, [r3, #0]
 801d0b6:	4854      	ldr	r0, [pc, #336]	; (801d208 <_printf_i+0x244>)
 801d0b8:	2f6f      	cmp	r7, #111	; 0x6f
 801d0ba:	bf0c      	ite	eq
 801d0bc:	2308      	moveq	r3, #8
 801d0be:	230a      	movne	r3, #10
 801d0c0:	2100      	movs	r1, #0
 801d0c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d0c6:	6865      	ldr	r5, [r4, #4]
 801d0c8:	60a5      	str	r5, [r4, #8]
 801d0ca:	2d00      	cmp	r5, #0
 801d0cc:	bfa2      	ittt	ge
 801d0ce:	6821      	ldrge	r1, [r4, #0]
 801d0d0:	f021 0104 	bicge.w	r1, r1, #4
 801d0d4:	6021      	strge	r1, [r4, #0]
 801d0d6:	b90e      	cbnz	r6, 801d0dc <_printf_i+0x118>
 801d0d8:	2d00      	cmp	r5, #0
 801d0da:	d04d      	beq.n	801d178 <_printf_i+0x1b4>
 801d0dc:	4615      	mov	r5, r2
 801d0de:	fbb6 f1f3 	udiv	r1, r6, r3
 801d0e2:	fb03 6711 	mls	r7, r3, r1, r6
 801d0e6:	5dc7      	ldrb	r7, [r0, r7]
 801d0e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801d0ec:	4637      	mov	r7, r6
 801d0ee:	42bb      	cmp	r3, r7
 801d0f0:	460e      	mov	r6, r1
 801d0f2:	d9f4      	bls.n	801d0de <_printf_i+0x11a>
 801d0f4:	2b08      	cmp	r3, #8
 801d0f6:	d10b      	bne.n	801d110 <_printf_i+0x14c>
 801d0f8:	6823      	ldr	r3, [r4, #0]
 801d0fa:	07de      	lsls	r6, r3, #31
 801d0fc:	d508      	bpl.n	801d110 <_printf_i+0x14c>
 801d0fe:	6923      	ldr	r3, [r4, #16]
 801d100:	6861      	ldr	r1, [r4, #4]
 801d102:	4299      	cmp	r1, r3
 801d104:	bfde      	ittt	le
 801d106:	2330      	movle	r3, #48	; 0x30
 801d108:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d10c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801d110:	1b52      	subs	r2, r2, r5
 801d112:	6122      	str	r2, [r4, #16]
 801d114:	f8cd a000 	str.w	sl, [sp]
 801d118:	464b      	mov	r3, r9
 801d11a:	aa03      	add	r2, sp, #12
 801d11c:	4621      	mov	r1, r4
 801d11e:	4640      	mov	r0, r8
 801d120:	f7ff fee2 	bl	801cee8 <_printf_common>
 801d124:	3001      	adds	r0, #1
 801d126:	d14c      	bne.n	801d1c2 <_printf_i+0x1fe>
 801d128:	f04f 30ff 	mov.w	r0, #4294967295
 801d12c:	b004      	add	sp, #16
 801d12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d132:	4835      	ldr	r0, [pc, #212]	; (801d208 <_printf_i+0x244>)
 801d134:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801d138:	6829      	ldr	r1, [r5, #0]
 801d13a:	6823      	ldr	r3, [r4, #0]
 801d13c:	f851 6b04 	ldr.w	r6, [r1], #4
 801d140:	6029      	str	r1, [r5, #0]
 801d142:	061d      	lsls	r5, r3, #24
 801d144:	d514      	bpl.n	801d170 <_printf_i+0x1ac>
 801d146:	07df      	lsls	r7, r3, #31
 801d148:	bf44      	itt	mi
 801d14a:	f043 0320 	orrmi.w	r3, r3, #32
 801d14e:	6023      	strmi	r3, [r4, #0]
 801d150:	b91e      	cbnz	r6, 801d15a <_printf_i+0x196>
 801d152:	6823      	ldr	r3, [r4, #0]
 801d154:	f023 0320 	bic.w	r3, r3, #32
 801d158:	6023      	str	r3, [r4, #0]
 801d15a:	2310      	movs	r3, #16
 801d15c:	e7b0      	b.n	801d0c0 <_printf_i+0xfc>
 801d15e:	6823      	ldr	r3, [r4, #0]
 801d160:	f043 0320 	orr.w	r3, r3, #32
 801d164:	6023      	str	r3, [r4, #0]
 801d166:	2378      	movs	r3, #120	; 0x78
 801d168:	4828      	ldr	r0, [pc, #160]	; (801d20c <_printf_i+0x248>)
 801d16a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d16e:	e7e3      	b.n	801d138 <_printf_i+0x174>
 801d170:	0659      	lsls	r1, r3, #25
 801d172:	bf48      	it	mi
 801d174:	b2b6      	uxthmi	r6, r6
 801d176:	e7e6      	b.n	801d146 <_printf_i+0x182>
 801d178:	4615      	mov	r5, r2
 801d17a:	e7bb      	b.n	801d0f4 <_printf_i+0x130>
 801d17c:	682b      	ldr	r3, [r5, #0]
 801d17e:	6826      	ldr	r6, [r4, #0]
 801d180:	6961      	ldr	r1, [r4, #20]
 801d182:	1d18      	adds	r0, r3, #4
 801d184:	6028      	str	r0, [r5, #0]
 801d186:	0635      	lsls	r5, r6, #24
 801d188:	681b      	ldr	r3, [r3, #0]
 801d18a:	d501      	bpl.n	801d190 <_printf_i+0x1cc>
 801d18c:	6019      	str	r1, [r3, #0]
 801d18e:	e002      	b.n	801d196 <_printf_i+0x1d2>
 801d190:	0670      	lsls	r0, r6, #25
 801d192:	d5fb      	bpl.n	801d18c <_printf_i+0x1c8>
 801d194:	8019      	strh	r1, [r3, #0]
 801d196:	2300      	movs	r3, #0
 801d198:	6123      	str	r3, [r4, #16]
 801d19a:	4615      	mov	r5, r2
 801d19c:	e7ba      	b.n	801d114 <_printf_i+0x150>
 801d19e:	682b      	ldr	r3, [r5, #0]
 801d1a0:	1d1a      	adds	r2, r3, #4
 801d1a2:	602a      	str	r2, [r5, #0]
 801d1a4:	681d      	ldr	r5, [r3, #0]
 801d1a6:	6862      	ldr	r2, [r4, #4]
 801d1a8:	2100      	movs	r1, #0
 801d1aa:	4628      	mov	r0, r5
 801d1ac:	f7e3 f848 	bl	8000240 <memchr>
 801d1b0:	b108      	cbz	r0, 801d1b6 <_printf_i+0x1f2>
 801d1b2:	1b40      	subs	r0, r0, r5
 801d1b4:	6060      	str	r0, [r4, #4]
 801d1b6:	6863      	ldr	r3, [r4, #4]
 801d1b8:	6123      	str	r3, [r4, #16]
 801d1ba:	2300      	movs	r3, #0
 801d1bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d1c0:	e7a8      	b.n	801d114 <_printf_i+0x150>
 801d1c2:	6923      	ldr	r3, [r4, #16]
 801d1c4:	462a      	mov	r2, r5
 801d1c6:	4649      	mov	r1, r9
 801d1c8:	4640      	mov	r0, r8
 801d1ca:	47d0      	blx	sl
 801d1cc:	3001      	adds	r0, #1
 801d1ce:	d0ab      	beq.n	801d128 <_printf_i+0x164>
 801d1d0:	6823      	ldr	r3, [r4, #0]
 801d1d2:	079b      	lsls	r3, r3, #30
 801d1d4:	d413      	bmi.n	801d1fe <_printf_i+0x23a>
 801d1d6:	68e0      	ldr	r0, [r4, #12]
 801d1d8:	9b03      	ldr	r3, [sp, #12]
 801d1da:	4298      	cmp	r0, r3
 801d1dc:	bfb8      	it	lt
 801d1de:	4618      	movlt	r0, r3
 801d1e0:	e7a4      	b.n	801d12c <_printf_i+0x168>
 801d1e2:	2301      	movs	r3, #1
 801d1e4:	4632      	mov	r2, r6
 801d1e6:	4649      	mov	r1, r9
 801d1e8:	4640      	mov	r0, r8
 801d1ea:	47d0      	blx	sl
 801d1ec:	3001      	adds	r0, #1
 801d1ee:	d09b      	beq.n	801d128 <_printf_i+0x164>
 801d1f0:	3501      	adds	r5, #1
 801d1f2:	68e3      	ldr	r3, [r4, #12]
 801d1f4:	9903      	ldr	r1, [sp, #12]
 801d1f6:	1a5b      	subs	r3, r3, r1
 801d1f8:	42ab      	cmp	r3, r5
 801d1fa:	dcf2      	bgt.n	801d1e2 <_printf_i+0x21e>
 801d1fc:	e7eb      	b.n	801d1d6 <_printf_i+0x212>
 801d1fe:	2500      	movs	r5, #0
 801d200:	f104 0619 	add.w	r6, r4, #25
 801d204:	e7f5      	b.n	801d1f2 <_printf_i+0x22e>
 801d206:	bf00      	nop
 801d208:	08020c61 	.word	0x08020c61
 801d20c:	08020c72 	.word	0x08020c72

0801d210 <_sbrk_r>:
 801d210:	b538      	push	{r3, r4, r5, lr}
 801d212:	4d06      	ldr	r5, [pc, #24]	; (801d22c <_sbrk_r+0x1c>)
 801d214:	2300      	movs	r3, #0
 801d216:	4604      	mov	r4, r0
 801d218:	4608      	mov	r0, r1
 801d21a:	602b      	str	r3, [r5, #0]
 801d21c:	f7e6 ffce 	bl	80041bc <_sbrk>
 801d220:	1c43      	adds	r3, r0, #1
 801d222:	d102      	bne.n	801d22a <_sbrk_r+0x1a>
 801d224:	682b      	ldr	r3, [r5, #0]
 801d226:	b103      	cbz	r3, 801d22a <_sbrk_r+0x1a>
 801d228:	6023      	str	r3, [r4, #0]
 801d22a:	bd38      	pop	{r3, r4, r5, pc}
 801d22c:	200246b8 	.word	0x200246b8

0801d230 <_raise_r>:
 801d230:	291f      	cmp	r1, #31
 801d232:	b538      	push	{r3, r4, r5, lr}
 801d234:	4604      	mov	r4, r0
 801d236:	460d      	mov	r5, r1
 801d238:	d904      	bls.n	801d244 <_raise_r+0x14>
 801d23a:	2316      	movs	r3, #22
 801d23c:	6003      	str	r3, [r0, #0]
 801d23e:	f04f 30ff 	mov.w	r0, #4294967295
 801d242:	bd38      	pop	{r3, r4, r5, pc}
 801d244:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d246:	b112      	cbz	r2, 801d24e <_raise_r+0x1e>
 801d248:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d24c:	b94b      	cbnz	r3, 801d262 <_raise_r+0x32>
 801d24e:	4620      	mov	r0, r4
 801d250:	f000 f830 	bl	801d2b4 <_getpid_r>
 801d254:	462a      	mov	r2, r5
 801d256:	4601      	mov	r1, r0
 801d258:	4620      	mov	r0, r4
 801d25a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d25e:	f000 b817 	b.w	801d290 <_kill_r>
 801d262:	2b01      	cmp	r3, #1
 801d264:	d00a      	beq.n	801d27c <_raise_r+0x4c>
 801d266:	1c59      	adds	r1, r3, #1
 801d268:	d103      	bne.n	801d272 <_raise_r+0x42>
 801d26a:	2316      	movs	r3, #22
 801d26c:	6003      	str	r3, [r0, #0]
 801d26e:	2001      	movs	r0, #1
 801d270:	e7e7      	b.n	801d242 <_raise_r+0x12>
 801d272:	2400      	movs	r4, #0
 801d274:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d278:	4628      	mov	r0, r5
 801d27a:	4798      	blx	r3
 801d27c:	2000      	movs	r0, #0
 801d27e:	e7e0      	b.n	801d242 <_raise_r+0x12>

0801d280 <raise>:
 801d280:	4b02      	ldr	r3, [pc, #8]	; (801d28c <raise+0xc>)
 801d282:	4601      	mov	r1, r0
 801d284:	6818      	ldr	r0, [r3, #0]
 801d286:	f7ff bfd3 	b.w	801d230 <_raise_r>
 801d28a:	bf00      	nop
 801d28c:	200000e8 	.word	0x200000e8

0801d290 <_kill_r>:
 801d290:	b538      	push	{r3, r4, r5, lr}
 801d292:	4d07      	ldr	r5, [pc, #28]	; (801d2b0 <_kill_r+0x20>)
 801d294:	2300      	movs	r3, #0
 801d296:	4604      	mov	r4, r0
 801d298:	4608      	mov	r0, r1
 801d29a:	4611      	mov	r1, r2
 801d29c:	602b      	str	r3, [r5, #0]
 801d29e:	f7e6 ff57 	bl	8004150 <_kill>
 801d2a2:	1c43      	adds	r3, r0, #1
 801d2a4:	d102      	bne.n	801d2ac <_kill_r+0x1c>
 801d2a6:	682b      	ldr	r3, [r5, #0]
 801d2a8:	b103      	cbz	r3, 801d2ac <_kill_r+0x1c>
 801d2aa:	6023      	str	r3, [r4, #0]
 801d2ac:	bd38      	pop	{r3, r4, r5, pc}
 801d2ae:	bf00      	nop
 801d2b0:	200246b8 	.word	0x200246b8

0801d2b4 <_getpid_r>:
 801d2b4:	f7e6 bf4a 	b.w	800414c <_getpid>

0801d2b8 <strncmp>:
 801d2b8:	b510      	push	{r4, lr}
 801d2ba:	b17a      	cbz	r2, 801d2dc <strncmp+0x24>
 801d2bc:	4603      	mov	r3, r0
 801d2be:	3901      	subs	r1, #1
 801d2c0:	1884      	adds	r4, r0, r2
 801d2c2:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d2c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d2ca:	4290      	cmp	r0, r2
 801d2cc:	d101      	bne.n	801d2d2 <strncmp+0x1a>
 801d2ce:	42a3      	cmp	r3, r4
 801d2d0:	d101      	bne.n	801d2d6 <strncmp+0x1e>
 801d2d2:	1a80      	subs	r0, r0, r2
 801d2d4:	bd10      	pop	{r4, pc}
 801d2d6:	2800      	cmp	r0, #0
 801d2d8:	d1f3      	bne.n	801d2c2 <strncmp+0xa>
 801d2da:	e7fa      	b.n	801d2d2 <strncmp+0x1a>
 801d2dc:	4610      	mov	r0, r2
 801d2de:	e7f9      	b.n	801d2d4 <strncmp+0x1c>

0801d2e0 <__swbuf_r>:
 801d2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d2e2:	460e      	mov	r6, r1
 801d2e4:	4614      	mov	r4, r2
 801d2e6:	4605      	mov	r5, r0
 801d2e8:	b118      	cbz	r0, 801d2f2 <__swbuf_r+0x12>
 801d2ea:	6983      	ldr	r3, [r0, #24]
 801d2ec:	b90b      	cbnz	r3, 801d2f2 <__swbuf_r+0x12>
 801d2ee:	f000 fa33 	bl	801d758 <__sinit>
 801d2f2:	4b21      	ldr	r3, [pc, #132]	; (801d378 <__swbuf_r+0x98>)
 801d2f4:	429c      	cmp	r4, r3
 801d2f6:	d12b      	bne.n	801d350 <__swbuf_r+0x70>
 801d2f8:	686c      	ldr	r4, [r5, #4]
 801d2fa:	69a3      	ldr	r3, [r4, #24]
 801d2fc:	60a3      	str	r3, [r4, #8]
 801d2fe:	89a3      	ldrh	r3, [r4, #12]
 801d300:	071a      	lsls	r2, r3, #28
 801d302:	d52f      	bpl.n	801d364 <__swbuf_r+0x84>
 801d304:	6923      	ldr	r3, [r4, #16]
 801d306:	b36b      	cbz	r3, 801d364 <__swbuf_r+0x84>
 801d308:	6923      	ldr	r3, [r4, #16]
 801d30a:	6820      	ldr	r0, [r4, #0]
 801d30c:	1ac0      	subs	r0, r0, r3
 801d30e:	6963      	ldr	r3, [r4, #20]
 801d310:	b2f6      	uxtb	r6, r6
 801d312:	4283      	cmp	r3, r0
 801d314:	4637      	mov	r7, r6
 801d316:	dc04      	bgt.n	801d322 <__swbuf_r+0x42>
 801d318:	4621      	mov	r1, r4
 801d31a:	4628      	mov	r0, r5
 801d31c:	f000 f988 	bl	801d630 <_fflush_r>
 801d320:	bb30      	cbnz	r0, 801d370 <__swbuf_r+0x90>
 801d322:	68a3      	ldr	r3, [r4, #8]
 801d324:	3b01      	subs	r3, #1
 801d326:	60a3      	str	r3, [r4, #8]
 801d328:	6823      	ldr	r3, [r4, #0]
 801d32a:	1c5a      	adds	r2, r3, #1
 801d32c:	6022      	str	r2, [r4, #0]
 801d32e:	701e      	strb	r6, [r3, #0]
 801d330:	6963      	ldr	r3, [r4, #20]
 801d332:	3001      	adds	r0, #1
 801d334:	4283      	cmp	r3, r0
 801d336:	d004      	beq.n	801d342 <__swbuf_r+0x62>
 801d338:	89a3      	ldrh	r3, [r4, #12]
 801d33a:	07db      	lsls	r3, r3, #31
 801d33c:	d506      	bpl.n	801d34c <__swbuf_r+0x6c>
 801d33e:	2e0a      	cmp	r6, #10
 801d340:	d104      	bne.n	801d34c <__swbuf_r+0x6c>
 801d342:	4621      	mov	r1, r4
 801d344:	4628      	mov	r0, r5
 801d346:	f000 f973 	bl	801d630 <_fflush_r>
 801d34a:	b988      	cbnz	r0, 801d370 <__swbuf_r+0x90>
 801d34c:	4638      	mov	r0, r7
 801d34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d350:	4b0a      	ldr	r3, [pc, #40]	; (801d37c <__swbuf_r+0x9c>)
 801d352:	429c      	cmp	r4, r3
 801d354:	d101      	bne.n	801d35a <__swbuf_r+0x7a>
 801d356:	68ac      	ldr	r4, [r5, #8]
 801d358:	e7cf      	b.n	801d2fa <__swbuf_r+0x1a>
 801d35a:	4b09      	ldr	r3, [pc, #36]	; (801d380 <__swbuf_r+0xa0>)
 801d35c:	429c      	cmp	r4, r3
 801d35e:	bf08      	it	eq
 801d360:	68ec      	ldreq	r4, [r5, #12]
 801d362:	e7ca      	b.n	801d2fa <__swbuf_r+0x1a>
 801d364:	4621      	mov	r1, r4
 801d366:	4628      	mov	r0, r5
 801d368:	f000 f80c 	bl	801d384 <__swsetup_r>
 801d36c:	2800      	cmp	r0, #0
 801d36e:	d0cb      	beq.n	801d308 <__swbuf_r+0x28>
 801d370:	f04f 37ff 	mov.w	r7, #4294967295
 801d374:	e7ea      	b.n	801d34c <__swbuf_r+0x6c>
 801d376:	bf00      	nop
 801d378:	08020ca8 	.word	0x08020ca8
 801d37c:	08020cc8 	.word	0x08020cc8
 801d380:	08020c88 	.word	0x08020c88

0801d384 <__swsetup_r>:
 801d384:	4b32      	ldr	r3, [pc, #200]	; (801d450 <__swsetup_r+0xcc>)
 801d386:	b570      	push	{r4, r5, r6, lr}
 801d388:	681d      	ldr	r5, [r3, #0]
 801d38a:	4606      	mov	r6, r0
 801d38c:	460c      	mov	r4, r1
 801d38e:	b125      	cbz	r5, 801d39a <__swsetup_r+0x16>
 801d390:	69ab      	ldr	r3, [r5, #24]
 801d392:	b913      	cbnz	r3, 801d39a <__swsetup_r+0x16>
 801d394:	4628      	mov	r0, r5
 801d396:	f000 f9df 	bl	801d758 <__sinit>
 801d39a:	4b2e      	ldr	r3, [pc, #184]	; (801d454 <__swsetup_r+0xd0>)
 801d39c:	429c      	cmp	r4, r3
 801d39e:	d10f      	bne.n	801d3c0 <__swsetup_r+0x3c>
 801d3a0:	686c      	ldr	r4, [r5, #4]
 801d3a2:	89a3      	ldrh	r3, [r4, #12]
 801d3a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d3a8:	0719      	lsls	r1, r3, #28
 801d3aa:	d42c      	bmi.n	801d406 <__swsetup_r+0x82>
 801d3ac:	06dd      	lsls	r5, r3, #27
 801d3ae:	d411      	bmi.n	801d3d4 <__swsetup_r+0x50>
 801d3b0:	2309      	movs	r3, #9
 801d3b2:	6033      	str	r3, [r6, #0]
 801d3b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d3b8:	81a3      	strh	r3, [r4, #12]
 801d3ba:	f04f 30ff 	mov.w	r0, #4294967295
 801d3be:	e03e      	b.n	801d43e <__swsetup_r+0xba>
 801d3c0:	4b25      	ldr	r3, [pc, #148]	; (801d458 <__swsetup_r+0xd4>)
 801d3c2:	429c      	cmp	r4, r3
 801d3c4:	d101      	bne.n	801d3ca <__swsetup_r+0x46>
 801d3c6:	68ac      	ldr	r4, [r5, #8]
 801d3c8:	e7eb      	b.n	801d3a2 <__swsetup_r+0x1e>
 801d3ca:	4b24      	ldr	r3, [pc, #144]	; (801d45c <__swsetup_r+0xd8>)
 801d3cc:	429c      	cmp	r4, r3
 801d3ce:	bf08      	it	eq
 801d3d0:	68ec      	ldreq	r4, [r5, #12]
 801d3d2:	e7e6      	b.n	801d3a2 <__swsetup_r+0x1e>
 801d3d4:	0758      	lsls	r0, r3, #29
 801d3d6:	d512      	bpl.n	801d3fe <__swsetup_r+0x7a>
 801d3d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d3da:	b141      	cbz	r1, 801d3ee <__swsetup_r+0x6a>
 801d3dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d3e0:	4299      	cmp	r1, r3
 801d3e2:	d002      	beq.n	801d3ea <__swsetup_r+0x66>
 801d3e4:	4630      	mov	r0, r6
 801d3e6:	f7ff fb45 	bl	801ca74 <_free_r>
 801d3ea:	2300      	movs	r3, #0
 801d3ec:	6363      	str	r3, [r4, #52]	; 0x34
 801d3ee:	89a3      	ldrh	r3, [r4, #12]
 801d3f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d3f4:	81a3      	strh	r3, [r4, #12]
 801d3f6:	2300      	movs	r3, #0
 801d3f8:	6063      	str	r3, [r4, #4]
 801d3fa:	6923      	ldr	r3, [r4, #16]
 801d3fc:	6023      	str	r3, [r4, #0]
 801d3fe:	89a3      	ldrh	r3, [r4, #12]
 801d400:	f043 0308 	orr.w	r3, r3, #8
 801d404:	81a3      	strh	r3, [r4, #12]
 801d406:	6923      	ldr	r3, [r4, #16]
 801d408:	b94b      	cbnz	r3, 801d41e <__swsetup_r+0x9a>
 801d40a:	89a3      	ldrh	r3, [r4, #12]
 801d40c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d414:	d003      	beq.n	801d41e <__swsetup_r+0x9a>
 801d416:	4621      	mov	r1, r4
 801d418:	4630      	mov	r0, r6
 801d41a:	f000 fa5f 	bl	801d8dc <__smakebuf_r>
 801d41e:	89a0      	ldrh	r0, [r4, #12]
 801d420:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d424:	f010 0301 	ands.w	r3, r0, #1
 801d428:	d00a      	beq.n	801d440 <__swsetup_r+0xbc>
 801d42a:	2300      	movs	r3, #0
 801d42c:	60a3      	str	r3, [r4, #8]
 801d42e:	6963      	ldr	r3, [r4, #20]
 801d430:	425b      	negs	r3, r3
 801d432:	61a3      	str	r3, [r4, #24]
 801d434:	6923      	ldr	r3, [r4, #16]
 801d436:	b943      	cbnz	r3, 801d44a <__swsetup_r+0xc6>
 801d438:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d43c:	d1ba      	bne.n	801d3b4 <__swsetup_r+0x30>
 801d43e:	bd70      	pop	{r4, r5, r6, pc}
 801d440:	0781      	lsls	r1, r0, #30
 801d442:	bf58      	it	pl
 801d444:	6963      	ldrpl	r3, [r4, #20]
 801d446:	60a3      	str	r3, [r4, #8]
 801d448:	e7f4      	b.n	801d434 <__swsetup_r+0xb0>
 801d44a:	2000      	movs	r0, #0
 801d44c:	e7f7      	b.n	801d43e <__swsetup_r+0xba>
 801d44e:	bf00      	nop
 801d450:	200000e8 	.word	0x200000e8
 801d454:	08020ca8 	.word	0x08020ca8
 801d458:	08020cc8 	.word	0x08020cc8
 801d45c:	08020c88 	.word	0x08020c88

0801d460 <__register_exitproc>:
 801d460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d464:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801d520 <__register_exitproc+0xc0>
 801d468:	4606      	mov	r6, r0
 801d46a:	f8d8 0000 	ldr.w	r0, [r8]
 801d46e:	461f      	mov	r7, r3
 801d470:	460d      	mov	r5, r1
 801d472:	4691      	mov	r9, r2
 801d474:	f7ff fad5 	bl	801ca22 <__retarget_lock_acquire_recursive>
 801d478:	4b25      	ldr	r3, [pc, #148]	; (801d510 <__register_exitproc+0xb0>)
 801d47a:	681c      	ldr	r4, [r3, #0]
 801d47c:	b934      	cbnz	r4, 801d48c <__register_exitproc+0x2c>
 801d47e:	4c25      	ldr	r4, [pc, #148]	; (801d514 <__register_exitproc+0xb4>)
 801d480:	601c      	str	r4, [r3, #0]
 801d482:	4b25      	ldr	r3, [pc, #148]	; (801d518 <__register_exitproc+0xb8>)
 801d484:	b113      	cbz	r3, 801d48c <__register_exitproc+0x2c>
 801d486:	681b      	ldr	r3, [r3, #0]
 801d488:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801d48c:	6863      	ldr	r3, [r4, #4]
 801d48e:	2b1f      	cmp	r3, #31
 801d490:	dd07      	ble.n	801d4a2 <__register_exitproc+0x42>
 801d492:	f8d8 0000 	ldr.w	r0, [r8]
 801d496:	f7ff fac6 	bl	801ca26 <__retarget_lock_release_recursive>
 801d49a:	f04f 30ff 	mov.w	r0, #4294967295
 801d49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d4a2:	b34e      	cbz	r6, 801d4f8 <__register_exitproc+0x98>
 801d4a4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801d4a8:	b988      	cbnz	r0, 801d4ce <__register_exitproc+0x6e>
 801d4aa:	4b1c      	ldr	r3, [pc, #112]	; (801d51c <__register_exitproc+0xbc>)
 801d4ac:	b923      	cbnz	r3, 801d4b8 <__register_exitproc+0x58>
 801d4ae:	f8d8 0000 	ldr.w	r0, [r8]
 801d4b2:	f7ff fab7 	bl	801ca24 <__retarget_lock_release>
 801d4b6:	e7f0      	b.n	801d49a <__register_exitproc+0x3a>
 801d4b8:	f44f 7084 	mov.w	r0, #264	; 0x108
 801d4bc:	f7ff fab4 	bl	801ca28 <malloc>
 801d4c0:	2800      	cmp	r0, #0
 801d4c2:	d0f4      	beq.n	801d4ae <__register_exitproc+0x4e>
 801d4c4:	2300      	movs	r3, #0
 801d4c6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801d4ca:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801d4ce:	6863      	ldr	r3, [r4, #4]
 801d4d0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801d4d4:	2201      	movs	r2, #1
 801d4d6:	409a      	lsls	r2, r3
 801d4d8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801d4dc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801d4e0:	4313      	orrs	r3, r2
 801d4e2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801d4e6:	2e02      	cmp	r6, #2
 801d4e8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801d4ec:	bf02      	ittt	eq
 801d4ee:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801d4f2:	4313      	orreq	r3, r2
 801d4f4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801d4f8:	6863      	ldr	r3, [r4, #4]
 801d4fa:	f8d8 0000 	ldr.w	r0, [r8]
 801d4fe:	1c5a      	adds	r2, r3, #1
 801d500:	3302      	adds	r3, #2
 801d502:	6062      	str	r2, [r4, #4]
 801d504:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801d508:	f7ff fa8d 	bl	801ca26 <__retarget_lock_release_recursive>
 801d50c:	2000      	movs	r0, #0
 801d50e:	e7c6      	b.n	801d49e <__register_exitproc+0x3e>
 801d510:	200246b4 	.word	0x200246b4
 801d514:	20024628 	.word	0x20024628
 801d518:	08020c84 	.word	0x08020c84
 801d51c:	0801ca29 	.word	0x0801ca29
 801d520:	2000014c 	.word	0x2000014c

0801d524 <__sflush_r>:
 801d524:	898a      	ldrh	r2, [r1, #12]
 801d526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d52a:	4605      	mov	r5, r0
 801d52c:	0710      	lsls	r0, r2, #28
 801d52e:	460c      	mov	r4, r1
 801d530:	d458      	bmi.n	801d5e4 <__sflush_r+0xc0>
 801d532:	684b      	ldr	r3, [r1, #4]
 801d534:	2b00      	cmp	r3, #0
 801d536:	dc05      	bgt.n	801d544 <__sflush_r+0x20>
 801d538:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d53a:	2b00      	cmp	r3, #0
 801d53c:	dc02      	bgt.n	801d544 <__sflush_r+0x20>
 801d53e:	2000      	movs	r0, #0
 801d540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d544:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d546:	2e00      	cmp	r6, #0
 801d548:	d0f9      	beq.n	801d53e <__sflush_r+0x1a>
 801d54a:	2300      	movs	r3, #0
 801d54c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d550:	682f      	ldr	r7, [r5, #0]
 801d552:	602b      	str	r3, [r5, #0]
 801d554:	d032      	beq.n	801d5bc <__sflush_r+0x98>
 801d556:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d558:	89a3      	ldrh	r3, [r4, #12]
 801d55a:	075a      	lsls	r2, r3, #29
 801d55c:	d505      	bpl.n	801d56a <__sflush_r+0x46>
 801d55e:	6863      	ldr	r3, [r4, #4]
 801d560:	1ac0      	subs	r0, r0, r3
 801d562:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d564:	b10b      	cbz	r3, 801d56a <__sflush_r+0x46>
 801d566:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d568:	1ac0      	subs	r0, r0, r3
 801d56a:	2300      	movs	r3, #0
 801d56c:	4602      	mov	r2, r0
 801d56e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d570:	6a21      	ldr	r1, [r4, #32]
 801d572:	4628      	mov	r0, r5
 801d574:	47b0      	blx	r6
 801d576:	1c43      	adds	r3, r0, #1
 801d578:	89a3      	ldrh	r3, [r4, #12]
 801d57a:	d106      	bne.n	801d58a <__sflush_r+0x66>
 801d57c:	6829      	ldr	r1, [r5, #0]
 801d57e:	291d      	cmp	r1, #29
 801d580:	d82c      	bhi.n	801d5dc <__sflush_r+0xb8>
 801d582:	4a2a      	ldr	r2, [pc, #168]	; (801d62c <__sflush_r+0x108>)
 801d584:	40ca      	lsrs	r2, r1
 801d586:	07d6      	lsls	r6, r2, #31
 801d588:	d528      	bpl.n	801d5dc <__sflush_r+0xb8>
 801d58a:	2200      	movs	r2, #0
 801d58c:	6062      	str	r2, [r4, #4]
 801d58e:	04d9      	lsls	r1, r3, #19
 801d590:	6922      	ldr	r2, [r4, #16]
 801d592:	6022      	str	r2, [r4, #0]
 801d594:	d504      	bpl.n	801d5a0 <__sflush_r+0x7c>
 801d596:	1c42      	adds	r2, r0, #1
 801d598:	d101      	bne.n	801d59e <__sflush_r+0x7a>
 801d59a:	682b      	ldr	r3, [r5, #0]
 801d59c:	b903      	cbnz	r3, 801d5a0 <__sflush_r+0x7c>
 801d59e:	6560      	str	r0, [r4, #84]	; 0x54
 801d5a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d5a2:	602f      	str	r7, [r5, #0]
 801d5a4:	2900      	cmp	r1, #0
 801d5a6:	d0ca      	beq.n	801d53e <__sflush_r+0x1a>
 801d5a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d5ac:	4299      	cmp	r1, r3
 801d5ae:	d002      	beq.n	801d5b6 <__sflush_r+0x92>
 801d5b0:	4628      	mov	r0, r5
 801d5b2:	f7ff fa5f 	bl	801ca74 <_free_r>
 801d5b6:	2000      	movs	r0, #0
 801d5b8:	6360      	str	r0, [r4, #52]	; 0x34
 801d5ba:	e7c1      	b.n	801d540 <__sflush_r+0x1c>
 801d5bc:	6a21      	ldr	r1, [r4, #32]
 801d5be:	2301      	movs	r3, #1
 801d5c0:	4628      	mov	r0, r5
 801d5c2:	47b0      	blx	r6
 801d5c4:	1c41      	adds	r1, r0, #1
 801d5c6:	d1c7      	bne.n	801d558 <__sflush_r+0x34>
 801d5c8:	682b      	ldr	r3, [r5, #0]
 801d5ca:	2b00      	cmp	r3, #0
 801d5cc:	d0c4      	beq.n	801d558 <__sflush_r+0x34>
 801d5ce:	2b1d      	cmp	r3, #29
 801d5d0:	d001      	beq.n	801d5d6 <__sflush_r+0xb2>
 801d5d2:	2b16      	cmp	r3, #22
 801d5d4:	d101      	bne.n	801d5da <__sflush_r+0xb6>
 801d5d6:	602f      	str	r7, [r5, #0]
 801d5d8:	e7b1      	b.n	801d53e <__sflush_r+0x1a>
 801d5da:	89a3      	ldrh	r3, [r4, #12]
 801d5dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d5e0:	81a3      	strh	r3, [r4, #12]
 801d5e2:	e7ad      	b.n	801d540 <__sflush_r+0x1c>
 801d5e4:	690f      	ldr	r7, [r1, #16]
 801d5e6:	2f00      	cmp	r7, #0
 801d5e8:	d0a9      	beq.n	801d53e <__sflush_r+0x1a>
 801d5ea:	0793      	lsls	r3, r2, #30
 801d5ec:	680e      	ldr	r6, [r1, #0]
 801d5ee:	bf08      	it	eq
 801d5f0:	694b      	ldreq	r3, [r1, #20]
 801d5f2:	600f      	str	r7, [r1, #0]
 801d5f4:	bf18      	it	ne
 801d5f6:	2300      	movne	r3, #0
 801d5f8:	eba6 0807 	sub.w	r8, r6, r7
 801d5fc:	608b      	str	r3, [r1, #8]
 801d5fe:	f1b8 0f00 	cmp.w	r8, #0
 801d602:	dd9c      	ble.n	801d53e <__sflush_r+0x1a>
 801d604:	6a21      	ldr	r1, [r4, #32]
 801d606:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d608:	4643      	mov	r3, r8
 801d60a:	463a      	mov	r2, r7
 801d60c:	4628      	mov	r0, r5
 801d60e:	47b0      	blx	r6
 801d610:	2800      	cmp	r0, #0
 801d612:	dc06      	bgt.n	801d622 <__sflush_r+0xfe>
 801d614:	89a3      	ldrh	r3, [r4, #12]
 801d616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d61a:	81a3      	strh	r3, [r4, #12]
 801d61c:	f04f 30ff 	mov.w	r0, #4294967295
 801d620:	e78e      	b.n	801d540 <__sflush_r+0x1c>
 801d622:	4407      	add	r7, r0
 801d624:	eba8 0800 	sub.w	r8, r8, r0
 801d628:	e7e9      	b.n	801d5fe <__sflush_r+0xda>
 801d62a:	bf00      	nop
 801d62c:	20400001 	.word	0x20400001

0801d630 <_fflush_r>:
 801d630:	b538      	push	{r3, r4, r5, lr}
 801d632:	690b      	ldr	r3, [r1, #16]
 801d634:	4605      	mov	r5, r0
 801d636:	460c      	mov	r4, r1
 801d638:	b913      	cbnz	r3, 801d640 <_fflush_r+0x10>
 801d63a:	2500      	movs	r5, #0
 801d63c:	4628      	mov	r0, r5
 801d63e:	bd38      	pop	{r3, r4, r5, pc}
 801d640:	b118      	cbz	r0, 801d64a <_fflush_r+0x1a>
 801d642:	6983      	ldr	r3, [r0, #24]
 801d644:	b90b      	cbnz	r3, 801d64a <_fflush_r+0x1a>
 801d646:	f000 f887 	bl	801d758 <__sinit>
 801d64a:	4b14      	ldr	r3, [pc, #80]	; (801d69c <_fflush_r+0x6c>)
 801d64c:	429c      	cmp	r4, r3
 801d64e:	d11b      	bne.n	801d688 <_fflush_r+0x58>
 801d650:	686c      	ldr	r4, [r5, #4]
 801d652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d656:	2b00      	cmp	r3, #0
 801d658:	d0ef      	beq.n	801d63a <_fflush_r+0xa>
 801d65a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d65c:	07d0      	lsls	r0, r2, #31
 801d65e:	d404      	bmi.n	801d66a <_fflush_r+0x3a>
 801d660:	0599      	lsls	r1, r3, #22
 801d662:	d402      	bmi.n	801d66a <_fflush_r+0x3a>
 801d664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d666:	f7ff f9dc 	bl	801ca22 <__retarget_lock_acquire_recursive>
 801d66a:	4628      	mov	r0, r5
 801d66c:	4621      	mov	r1, r4
 801d66e:	f7ff ff59 	bl	801d524 <__sflush_r>
 801d672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d674:	07da      	lsls	r2, r3, #31
 801d676:	4605      	mov	r5, r0
 801d678:	d4e0      	bmi.n	801d63c <_fflush_r+0xc>
 801d67a:	89a3      	ldrh	r3, [r4, #12]
 801d67c:	059b      	lsls	r3, r3, #22
 801d67e:	d4dd      	bmi.n	801d63c <_fflush_r+0xc>
 801d680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d682:	f7ff f9d0 	bl	801ca26 <__retarget_lock_release_recursive>
 801d686:	e7d9      	b.n	801d63c <_fflush_r+0xc>
 801d688:	4b05      	ldr	r3, [pc, #20]	; (801d6a0 <_fflush_r+0x70>)
 801d68a:	429c      	cmp	r4, r3
 801d68c:	d101      	bne.n	801d692 <_fflush_r+0x62>
 801d68e:	68ac      	ldr	r4, [r5, #8]
 801d690:	e7df      	b.n	801d652 <_fflush_r+0x22>
 801d692:	4b04      	ldr	r3, [pc, #16]	; (801d6a4 <_fflush_r+0x74>)
 801d694:	429c      	cmp	r4, r3
 801d696:	bf08      	it	eq
 801d698:	68ec      	ldreq	r4, [r5, #12]
 801d69a:	e7da      	b.n	801d652 <_fflush_r+0x22>
 801d69c:	08020ca8 	.word	0x08020ca8
 801d6a0:	08020cc8 	.word	0x08020cc8
 801d6a4:	08020c88 	.word	0x08020c88

0801d6a8 <std>:
 801d6a8:	2300      	movs	r3, #0
 801d6aa:	b510      	push	{r4, lr}
 801d6ac:	4604      	mov	r4, r0
 801d6ae:	e9c0 3300 	strd	r3, r3, [r0]
 801d6b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d6b6:	6083      	str	r3, [r0, #8]
 801d6b8:	8181      	strh	r1, [r0, #12]
 801d6ba:	6643      	str	r3, [r0, #100]	; 0x64
 801d6bc:	81c2      	strh	r2, [r0, #14]
 801d6be:	6183      	str	r3, [r0, #24]
 801d6c0:	4619      	mov	r1, r3
 801d6c2:	2208      	movs	r2, #8
 801d6c4:	305c      	adds	r0, #92	; 0x5c
 801d6c6:	f7ff f9cd 	bl	801ca64 <memset>
 801d6ca:	4b05      	ldr	r3, [pc, #20]	; (801d6e0 <std+0x38>)
 801d6cc:	6263      	str	r3, [r4, #36]	; 0x24
 801d6ce:	4b05      	ldr	r3, [pc, #20]	; (801d6e4 <std+0x3c>)
 801d6d0:	62a3      	str	r3, [r4, #40]	; 0x28
 801d6d2:	4b05      	ldr	r3, [pc, #20]	; (801d6e8 <std+0x40>)
 801d6d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d6d6:	4b05      	ldr	r3, [pc, #20]	; (801d6ec <std+0x44>)
 801d6d8:	6224      	str	r4, [r4, #32]
 801d6da:	6323      	str	r3, [r4, #48]	; 0x30
 801d6dc:	bd10      	pop	{r4, pc}
 801d6de:	bf00      	nop
 801d6e0:	0801d975 	.word	0x0801d975
 801d6e4:	0801d997 	.word	0x0801d997
 801d6e8:	0801d9cf 	.word	0x0801d9cf
 801d6ec:	0801d9f3 	.word	0x0801d9f3

0801d6f0 <_cleanup_r>:
 801d6f0:	4901      	ldr	r1, [pc, #4]	; (801d6f8 <_cleanup_r+0x8>)
 801d6f2:	f000 b8af 	b.w	801d854 <_fwalk_reent>
 801d6f6:	bf00      	nop
 801d6f8:	0801d631 	.word	0x0801d631

0801d6fc <__sfmoreglue>:
 801d6fc:	b570      	push	{r4, r5, r6, lr}
 801d6fe:	2268      	movs	r2, #104	; 0x68
 801d700:	1e4d      	subs	r5, r1, #1
 801d702:	4355      	muls	r5, r2
 801d704:	460e      	mov	r6, r1
 801d706:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801d70a:	f7ff fa1f 	bl	801cb4c <_malloc_r>
 801d70e:	4604      	mov	r4, r0
 801d710:	b140      	cbz	r0, 801d724 <__sfmoreglue+0x28>
 801d712:	2100      	movs	r1, #0
 801d714:	e9c0 1600 	strd	r1, r6, [r0]
 801d718:	300c      	adds	r0, #12
 801d71a:	60a0      	str	r0, [r4, #8]
 801d71c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801d720:	f7ff f9a0 	bl	801ca64 <memset>
 801d724:	4620      	mov	r0, r4
 801d726:	bd70      	pop	{r4, r5, r6, pc}

0801d728 <__sfp_lock_acquire>:
 801d728:	4801      	ldr	r0, [pc, #4]	; (801d730 <__sfp_lock_acquire+0x8>)
 801d72a:	f7ff b97a 	b.w	801ca22 <__retarget_lock_acquire_recursive>
 801d72e:	bf00      	nop
 801d730:	20024516 	.word	0x20024516

0801d734 <__sfp_lock_release>:
 801d734:	4801      	ldr	r0, [pc, #4]	; (801d73c <__sfp_lock_release+0x8>)
 801d736:	f7ff b976 	b.w	801ca26 <__retarget_lock_release_recursive>
 801d73a:	bf00      	nop
 801d73c:	20024516 	.word	0x20024516

0801d740 <__sinit_lock_acquire>:
 801d740:	4801      	ldr	r0, [pc, #4]	; (801d748 <__sinit_lock_acquire+0x8>)
 801d742:	f7ff b96e 	b.w	801ca22 <__retarget_lock_acquire_recursive>
 801d746:	bf00      	nop
 801d748:	20024517 	.word	0x20024517

0801d74c <__sinit_lock_release>:
 801d74c:	4801      	ldr	r0, [pc, #4]	; (801d754 <__sinit_lock_release+0x8>)
 801d74e:	f7ff b96a 	b.w	801ca26 <__retarget_lock_release_recursive>
 801d752:	bf00      	nop
 801d754:	20024517 	.word	0x20024517

0801d758 <__sinit>:
 801d758:	b510      	push	{r4, lr}
 801d75a:	4604      	mov	r4, r0
 801d75c:	f7ff fff0 	bl	801d740 <__sinit_lock_acquire>
 801d760:	69a3      	ldr	r3, [r4, #24]
 801d762:	b11b      	cbz	r3, 801d76c <__sinit+0x14>
 801d764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d768:	f7ff bff0 	b.w	801d74c <__sinit_lock_release>
 801d76c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801d770:	6523      	str	r3, [r4, #80]	; 0x50
 801d772:	4b13      	ldr	r3, [pc, #76]	; (801d7c0 <__sinit+0x68>)
 801d774:	4a13      	ldr	r2, [pc, #76]	; (801d7c4 <__sinit+0x6c>)
 801d776:	681b      	ldr	r3, [r3, #0]
 801d778:	62a2      	str	r2, [r4, #40]	; 0x28
 801d77a:	42a3      	cmp	r3, r4
 801d77c:	bf04      	itt	eq
 801d77e:	2301      	moveq	r3, #1
 801d780:	61a3      	streq	r3, [r4, #24]
 801d782:	4620      	mov	r0, r4
 801d784:	f000 f820 	bl	801d7c8 <__sfp>
 801d788:	6060      	str	r0, [r4, #4]
 801d78a:	4620      	mov	r0, r4
 801d78c:	f000 f81c 	bl	801d7c8 <__sfp>
 801d790:	60a0      	str	r0, [r4, #8]
 801d792:	4620      	mov	r0, r4
 801d794:	f000 f818 	bl	801d7c8 <__sfp>
 801d798:	2200      	movs	r2, #0
 801d79a:	60e0      	str	r0, [r4, #12]
 801d79c:	2104      	movs	r1, #4
 801d79e:	6860      	ldr	r0, [r4, #4]
 801d7a0:	f7ff ff82 	bl	801d6a8 <std>
 801d7a4:	68a0      	ldr	r0, [r4, #8]
 801d7a6:	2201      	movs	r2, #1
 801d7a8:	2109      	movs	r1, #9
 801d7aa:	f7ff ff7d 	bl	801d6a8 <std>
 801d7ae:	68e0      	ldr	r0, [r4, #12]
 801d7b0:	2202      	movs	r2, #2
 801d7b2:	2112      	movs	r1, #18
 801d7b4:	f7ff ff78 	bl	801d6a8 <std>
 801d7b8:	2301      	movs	r3, #1
 801d7ba:	61a3      	str	r3, [r4, #24]
 801d7bc:	e7d2      	b.n	801d764 <__sinit+0xc>
 801d7be:	bf00      	nop
 801d7c0:	08020c4c 	.word	0x08020c4c
 801d7c4:	0801d6f1 	.word	0x0801d6f1

0801d7c8 <__sfp>:
 801d7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7ca:	4607      	mov	r7, r0
 801d7cc:	f7ff ffac 	bl	801d728 <__sfp_lock_acquire>
 801d7d0:	4b1e      	ldr	r3, [pc, #120]	; (801d84c <__sfp+0x84>)
 801d7d2:	681e      	ldr	r6, [r3, #0]
 801d7d4:	69b3      	ldr	r3, [r6, #24]
 801d7d6:	b913      	cbnz	r3, 801d7de <__sfp+0x16>
 801d7d8:	4630      	mov	r0, r6
 801d7da:	f7ff ffbd 	bl	801d758 <__sinit>
 801d7de:	3648      	adds	r6, #72	; 0x48
 801d7e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d7e4:	3b01      	subs	r3, #1
 801d7e6:	d503      	bpl.n	801d7f0 <__sfp+0x28>
 801d7e8:	6833      	ldr	r3, [r6, #0]
 801d7ea:	b30b      	cbz	r3, 801d830 <__sfp+0x68>
 801d7ec:	6836      	ldr	r6, [r6, #0]
 801d7ee:	e7f7      	b.n	801d7e0 <__sfp+0x18>
 801d7f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d7f4:	b9d5      	cbnz	r5, 801d82c <__sfp+0x64>
 801d7f6:	4b16      	ldr	r3, [pc, #88]	; (801d850 <__sfp+0x88>)
 801d7f8:	60e3      	str	r3, [r4, #12]
 801d7fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d7fe:	6665      	str	r5, [r4, #100]	; 0x64
 801d800:	f7ff f90e 	bl	801ca20 <__retarget_lock_init_recursive>
 801d804:	f7ff ff96 	bl	801d734 <__sfp_lock_release>
 801d808:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801d80c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801d810:	6025      	str	r5, [r4, #0]
 801d812:	61a5      	str	r5, [r4, #24]
 801d814:	2208      	movs	r2, #8
 801d816:	4629      	mov	r1, r5
 801d818:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d81c:	f7ff f922 	bl	801ca64 <memset>
 801d820:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d824:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d828:	4620      	mov	r0, r4
 801d82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d82c:	3468      	adds	r4, #104	; 0x68
 801d82e:	e7d9      	b.n	801d7e4 <__sfp+0x1c>
 801d830:	2104      	movs	r1, #4
 801d832:	4638      	mov	r0, r7
 801d834:	f7ff ff62 	bl	801d6fc <__sfmoreglue>
 801d838:	4604      	mov	r4, r0
 801d83a:	6030      	str	r0, [r6, #0]
 801d83c:	2800      	cmp	r0, #0
 801d83e:	d1d5      	bne.n	801d7ec <__sfp+0x24>
 801d840:	f7ff ff78 	bl	801d734 <__sfp_lock_release>
 801d844:	230c      	movs	r3, #12
 801d846:	603b      	str	r3, [r7, #0]
 801d848:	e7ee      	b.n	801d828 <__sfp+0x60>
 801d84a:	bf00      	nop
 801d84c:	08020c4c 	.word	0x08020c4c
 801d850:	ffff0001 	.word	0xffff0001

0801d854 <_fwalk_reent>:
 801d854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d858:	4606      	mov	r6, r0
 801d85a:	4688      	mov	r8, r1
 801d85c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d860:	2700      	movs	r7, #0
 801d862:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d866:	f1b9 0901 	subs.w	r9, r9, #1
 801d86a:	d505      	bpl.n	801d878 <_fwalk_reent+0x24>
 801d86c:	6824      	ldr	r4, [r4, #0]
 801d86e:	2c00      	cmp	r4, #0
 801d870:	d1f7      	bne.n	801d862 <_fwalk_reent+0xe>
 801d872:	4638      	mov	r0, r7
 801d874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d878:	89ab      	ldrh	r3, [r5, #12]
 801d87a:	2b01      	cmp	r3, #1
 801d87c:	d907      	bls.n	801d88e <_fwalk_reent+0x3a>
 801d87e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d882:	3301      	adds	r3, #1
 801d884:	d003      	beq.n	801d88e <_fwalk_reent+0x3a>
 801d886:	4629      	mov	r1, r5
 801d888:	4630      	mov	r0, r6
 801d88a:	47c0      	blx	r8
 801d88c:	4307      	orrs	r7, r0
 801d88e:	3568      	adds	r5, #104	; 0x68
 801d890:	e7e9      	b.n	801d866 <_fwalk_reent+0x12>

0801d892 <__swhatbuf_r>:
 801d892:	b570      	push	{r4, r5, r6, lr}
 801d894:	460e      	mov	r6, r1
 801d896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d89a:	2900      	cmp	r1, #0
 801d89c:	b096      	sub	sp, #88	; 0x58
 801d89e:	4614      	mov	r4, r2
 801d8a0:	461d      	mov	r5, r3
 801d8a2:	da08      	bge.n	801d8b6 <__swhatbuf_r+0x24>
 801d8a4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801d8a8:	2200      	movs	r2, #0
 801d8aa:	602a      	str	r2, [r5, #0]
 801d8ac:	061a      	lsls	r2, r3, #24
 801d8ae:	d410      	bmi.n	801d8d2 <__swhatbuf_r+0x40>
 801d8b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d8b4:	e00e      	b.n	801d8d4 <__swhatbuf_r+0x42>
 801d8b6:	466a      	mov	r2, sp
 801d8b8:	f000 f8c2 	bl	801da40 <_fstat_r>
 801d8bc:	2800      	cmp	r0, #0
 801d8be:	dbf1      	blt.n	801d8a4 <__swhatbuf_r+0x12>
 801d8c0:	9a01      	ldr	r2, [sp, #4]
 801d8c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d8c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d8ca:	425a      	negs	r2, r3
 801d8cc:	415a      	adcs	r2, r3
 801d8ce:	602a      	str	r2, [r5, #0]
 801d8d0:	e7ee      	b.n	801d8b0 <__swhatbuf_r+0x1e>
 801d8d2:	2340      	movs	r3, #64	; 0x40
 801d8d4:	2000      	movs	r0, #0
 801d8d6:	6023      	str	r3, [r4, #0]
 801d8d8:	b016      	add	sp, #88	; 0x58
 801d8da:	bd70      	pop	{r4, r5, r6, pc}

0801d8dc <__smakebuf_r>:
 801d8dc:	898b      	ldrh	r3, [r1, #12]
 801d8de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d8e0:	079d      	lsls	r5, r3, #30
 801d8e2:	4606      	mov	r6, r0
 801d8e4:	460c      	mov	r4, r1
 801d8e6:	d507      	bpl.n	801d8f8 <__smakebuf_r+0x1c>
 801d8e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d8ec:	6023      	str	r3, [r4, #0]
 801d8ee:	6123      	str	r3, [r4, #16]
 801d8f0:	2301      	movs	r3, #1
 801d8f2:	6163      	str	r3, [r4, #20]
 801d8f4:	b002      	add	sp, #8
 801d8f6:	bd70      	pop	{r4, r5, r6, pc}
 801d8f8:	ab01      	add	r3, sp, #4
 801d8fa:	466a      	mov	r2, sp
 801d8fc:	f7ff ffc9 	bl	801d892 <__swhatbuf_r>
 801d900:	9900      	ldr	r1, [sp, #0]
 801d902:	4605      	mov	r5, r0
 801d904:	4630      	mov	r0, r6
 801d906:	f7ff f921 	bl	801cb4c <_malloc_r>
 801d90a:	b948      	cbnz	r0, 801d920 <__smakebuf_r+0x44>
 801d90c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d910:	059a      	lsls	r2, r3, #22
 801d912:	d4ef      	bmi.n	801d8f4 <__smakebuf_r+0x18>
 801d914:	f023 0303 	bic.w	r3, r3, #3
 801d918:	f043 0302 	orr.w	r3, r3, #2
 801d91c:	81a3      	strh	r3, [r4, #12]
 801d91e:	e7e3      	b.n	801d8e8 <__smakebuf_r+0xc>
 801d920:	4b0d      	ldr	r3, [pc, #52]	; (801d958 <__smakebuf_r+0x7c>)
 801d922:	62b3      	str	r3, [r6, #40]	; 0x28
 801d924:	89a3      	ldrh	r3, [r4, #12]
 801d926:	6020      	str	r0, [r4, #0]
 801d928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d92c:	81a3      	strh	r3, [r4, #12]
 801d92e:	9b00      	ldr	r3, [sp, #0]
 801d930:	6163      	str	r3, [r4, #20]
 801d932:	9b01      	ldr	r3, [sp, #4]
 801d934:	6120      	str	r0, [r4, #16]
 801d936:	b15b      	cbz	r3, 801d950 <__smakebuf_r+0x74>
 801d938:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d93c:	4630      	mov	r0, r6
 801d93e:	f000 f891 	bl	801da64 <_isatty_r>
 801d942:	b128      	cbz	r0, 801d950 <__smakebuf_r+0x74>
 801d944:	89a3      	ldrh	r3, [r4, #12]
 801d946:	f023 0303 	bic.w	r3, r3, #3
 801d94a:	f043 0301 	orr.w	r3, r3, #1
 801d94e:	81a3      	strh	r3, [r4, #12]
 801d950:	89a0      	ldrh	r0, [r4, #12]
 801d952:	4305      	orrs	r5, r0
 801d954:	81a5      	strh	r5, [r4, #12]
 801d956:	e7cd      	b.n	801d8f4 <__smakebuf_r+0x18>
 801d958:	0801d6f1 	.word	0x0801d6f1

0801d95c <__malloc_lock>:
 801d95c:	4801      	ldr	r0, [pc, #4]	; (801d964 <__malloc_lock+0x8>)
 801d95e:	f7ff b860 	b.w	801ca22 <__retarget_lock_acquire_recursive>
 801d962:	bf00      	nop
 801d964:	20024515 	.word	0x20024515

0801d968 <__malloc_unlock>:
 801d968:	4801      	ldr	r0, [pc, #4]	; (801d970 <__malloc_unlock+0x8>)
 801d96a:	f7ff b85c 	b.w	801ca26 <__retarget_lock_release_recursive>
 801d96e:	bf00      	nop
 801d970:	20024515 	.word	0x20024515

0801d974 <__sread>:
 801d974:	b510      	push	{r4, lr}
 801d976:	460c      	mov	r4, r1
 801d978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d97c:	f000 f894 	bl	801daa8 <_read_r>
 801d980:	2800      	cmp	r0, #0
 801d982:	bfab      	itete	ge
 801d984:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d986:	89a3      	ldrhlt	r3, [r4, #12]
 801d988:	181b      	addge	r3, r3, r0
 801d98a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d98e:	bfac      	ite	ge
 801d990:	6563      	strge	r3, [r4, #84]	; 0x54
 801d992:	81a3      	strhlt	r3, [r4, #12]
 801d994:	bd10      	pop	{r4, pc}

0801d996 <__swrite>:
 801d996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d99a:	461f      	mov	r7, r3
 801d99c:	898b      	ldrh	r3, [r1, #12]
 801d99e:	05db      	lsls	r3, r3, #23
 801d9a0:	4605      	mov	r5, r0
 801d9a2:	460c      	mov	r4, r1
 801d9a4:	4616      	mov	r6, r2
 801d9a6:	d505      	bpl.n	801d9b4 <__swrite+0x1e>
 801d9a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d9ac:	2302      	movs	r3, #2
 801d9ae:	2200      	movs	r2, #0
 801d9b0:	f000 f868 	bl	801da84 <_lseek_r>
 801d9b4:	89a3      	ldrh	r3, [r4, #12]
 801d9b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d9ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d9be:	81a3      	strh	r3, [r4, #12]
 801d9c0:	4632      	mov	r2, r6
 801d9c2:	463b      	mov	r3, r7
 801d9c4:	4628      	mov	r0, r5
 801d9c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d9ca:	f000 b817 	b.w	801d9fc <_write_r>

0801d9ce <__sseek>:
 801d9ce:	b510      	push	{r4, lr}
 801d9d0:	460c      	mov	r4, r1
 801d9d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d9d6:	f000 f855 	bl	801da84 <_lseek_r>
 801d9da:	1c43      	adds	r3, r0, #1
 801d9dc:	89a3      	ldrh	r3, [r4, #12]
 801d9de:	bf15      	itete	ne
 801d9e0:	6560      	strne	r0, [r4, #84]	; 0x54
 801d9e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d9e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d9ea:	81a3      	strheq	r3, [r4, #12]
 801d9ec:	bf18      	it	ne
 801d9ee:	81a3      	strhne	r3, [r4, #12]
 801d9f0:	bd10      	pop	{r4, pc}

0801d9f2 <__sclose>:
 801d9f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d9f6:	f000 b813 	b.w	801da20 <_close_r>
	...

0801d9fc <_write_r>:
 801d9fc:	b538      	push	{r3, r4, r5, lr}
 801d9fe:	4d07      	ldr	r5, [pc, #28]	; (801da1c <_write_r+0x20>)
 801da00:	4604      	mov	r4, r0
 801da02:	4608      	mov	r0, r1
 801da04:	4611      	mov	r1, r2
 801da06:	2200      	movs	r2, #0
 801da08:	602a      	str	r2, [r5, #0]
 801da0a:	461a      	mov	r2, r3
 801da0c:	f7e6 fbbc 	bl	8004188 <_write>
 801da10:	1c43      	adds	r3, r0, #1
 801da12:	d102      	bne.n	801da1a <_write_r+0x1e>
 801da14:	682b      	ldr	r3, [r5, #0]
 801da16:	b103      	cbz	r3, 801da1a <_write_r+0x1e>
 801da18:	6023      	str	r3, [r4, #0]
 801da1a:	bd38      	pop	{r3, r4, r5, pc}
 801da1c:	200246b8 	.word	0x200246b8

0801da20 <_close_r>:
 801da20:	b538      	push	{r3, r4, r5, lr}
 801da22:	4d06      	ldr	r5, [pc, #24]	; (801da3c <_close_r+0x1c>)
 801da24:	2300      	movs	r3, #0
 801da26:	4604      	mov	r4, r0
 801da28:	4608      	mov	r0, r1
 801da2a:	602b      	str	r3, [r5, #0]
 801da2c:	f7e6 fbba 	bl	80041a4 <_close>
 801da30:	1c43      	adds	r3, r0, #1
 801da32:	d102      	bne.n	801da3a <_close_r+0x1a>
 801da34:	682b      	ldr	r3, [r5, #0]
 801da36:	b103      	cbz	r3, 801da3a <_close_r+0x1a>
 801da38:	6023      	str	r3, [r4, #0]
 801da3a:	bd38      	pop	{r3, r4, r5, pc}
 801da3c:	200246b8 	.word	0x200246b8

0801da40 <_fstat_r>:
 801da40:	b538      	push	{r3, r4, r5, lr}
 801da42:	4d07      	ldr	r5, [pc, #28]	; (801da60 <_fstat_r+0x20>)
 801da44:	2300      	movs	r3, #0
 801da46:	4604      	mov	r4, r0
 801da48:	4608      	mov	r0, r1
 801da4a:	4611      	mov	r1, r2
 801da4c:	602b      	str	r3, [r5, #0]
 801da4e:	f7e6 fbac 	bl	80041aa <_fstat>
 801da52:	1c43      	adds	r3, r0, #1
 801da54:	d102      	bne.n	801da5c <_fstat_r+0x1c>
 801da56:	682b      	ldr	r3, [r5, #0]
 801da58:	b103      	cbz	r3, 801da5c <_fstat_r+0x1c>
 801da5a:	6023      	str	r3, [r4, #0]
 801da5c:	bd38      	pop	{r3, r4, r5, pc}
 801da5e:	bf00      	nop
 801da60:	200246b8 	.word	0x200246b8

0801da64 <_isatty_r>:
 801da64:	b538      	push	{r3, r4, r5, lr}
 801da66:	4d06      	ldr	r5, [pc, #24]	; (801da80 <_isatty_r+0x1c>)
 801da68:	2300      	movs	r3, #0
 801da6a:	4604      	mov	r4, r0
 801da6c:	4608      	mov	r0, r1
 801da6e:	602b      	str	r3, [r5, #0]
 801da70:	f7e6 fba0 	bl	80041b4 <_isatty>
 801da74:	1c43      	adds	r3, r0, #1
 801da76:	d102      	bne.n	801da7e <_isatty_r+0x1a>
 801da78:	682b      	ldr	r3, [r5, #0]
 801da7a:	b103      	cbz	r3, 801da7e <_isatty_r+0x1a>
 801da7c:	6023      	str	r3, [r4, #0]
 801da7e:	bd38      	pop	{r3, r4, r5, pc}
 801da80:	200246b8 	.word	0x200246b8

0801da84 <_lseek_r>:
 801da84:	b538      	push	{r3, r4, r5, lr}
 801da86:	4d07      	ldr	r5, [pc, #28]	; (801daa4 <_lseek_r+0x20>)
 801da88:	4604      	mov	r4, r0
 801da8a:	4608      	mov	r0, r1
 801da8c:	4611      	mov	r1, r2
 801da8e:	2200      	movs	r2, #0
 801da90:	602a      	str	r2, [r5, #0]
 801da92:	461a      	mov	r2, r3
 801da94:	f7e6 fb90 	bl	80041b8 <_lseek>
 801da98:	1c43      	adds	r3, r0, #1
 801da9a:	d102      	bne.n	801daa2 <_lseek_r+0x1e>
 801da9c:	682b      	ldr	r3, [r5, #0]
 801da9e:	b103      	cbz	r3, 801daa2 <_lseek_r+0x1e>
 801daa0:	6023      	str	r3, [r4, #0]
 801daa2:	bd38      	pop	{r3, r4, r5, pc}
 801daa4:	200246b8 	.word	0x200246b8

0801daa8 <_read_r>:
 801daa8:	b538      	push	{r3, r4, r5, lr}
 801daaa:	4d07      	ldr	r5, [pc, #28]	; (801dac8 <_read_r+0x20>)
 801daac:	4604      	mov	r4, r0
 801daae:	4608      	mov	r0, r1
 801dab0:	4611      	mov	r1, r2
 801dab2:	2200      	movs	r2, #0
 801dab4:	602a      	str	r2, [r5, #0]
 801dab6:	461a      	mov	r2, r3
 801dab8:	f7e6 fb58 	bl	800416c <_read>
 801dabc:	1c43      	adds	r3, r0, #1
 801dabe:	d102      	bne.n	801dac6 <_read_r+0x1e>
 801dac0:	682b      	ldr	r3, [r5, #0]
 801dac2:	b103      	cbz	r3, 801dac6 <_read_r+0x1e>
 801dac4:	6023      	str	r3, [r4, #0]
 801dac6:	bd38      	pop	{r3, r4, r5, pc}
 801dac8:	200246b8 	.word	0x200246b8

0801dacc <_init>:
 801dacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dace:	bf00      	nop
 801dad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dad2:	bc08      	pop	{r3}
 801dad4:	469e      	mov	lr, r3
 801dad6:	4770      	bx	lr

0801dad8 <_fini>:
 801dad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dada:	bf00      	nop
 801dadc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dade:	bc08      	pop	{r3}
 801dae0:	469e      	mov	lr, r3
 801dae2:	4770      	bx	lr
