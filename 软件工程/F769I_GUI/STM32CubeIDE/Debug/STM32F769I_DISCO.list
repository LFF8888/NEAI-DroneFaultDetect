
STM32F769I_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002bcd0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000056cc  0802bed0  0802bed0  0003bed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000266c  0803159c  0803159c  0004159c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08033c08  08033c08  009dbf10  2**0
                  CONTENTS
  5 .ARM          00000008  08033c08  08033c08  00043c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08033c10  08033c10  009dbf10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  08033c10  08033c10  00043c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  08033c2c  08033c2c  00043c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000150  20000000  08033c34  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 CCMRAM        00009600  20000150  08033d84  00050150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0001f194  20009750  0803d384  00059750  2**2
                  ALLOC
 12 ._user_heap_stack 00002004  200288e4  0803d384  000688e4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  009dbf10  2**0
                  CONTENTS, READONLY
 14 ExtFlashSection 009664bc  90000000  90000000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 FontFlashSection 00015210  909664bc  909664bc  009c64bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000844  9097b6cc  9097b6cc  009db6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 BufferSection 00177000  c0000000  c0000000  009e0000  2**2
                  ALLOC
 18 .comment      000000c2  00000000  00000000  009dbf3e  2**0
                  CONTENTS, READONLY
 19 .debug_line   000997d2  00000000  00000000  009dc000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000065  00000000  00000000  00a757d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_info   00176b3f  00000000  00000000  00a75837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 00026952  00000000  00000000  00bec376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 00004d68  00000000  00000000  00c12cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    0016b935  00000000  00000000  00c17a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_rnglists 0000669f  00000000  00000000  00d83365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_macro  00045427  00000000  00000000  00d89a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_frame  0000c2e0  00000000  00000000  00dcee2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loclists 00031899  00000000  00000000  00ddb10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20009750 	.word	0x20009750
 800021c:	00000000 	.word	0x00000000
 8000220:	0802beb8 	.word	0x0802beb8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20009754 	.word	0x20009754
 800023c:	0802beb8 	.word	0x0802beb8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295
 8000668:	f04f 30ff 	movne.w	r0, #4294967295
 800066c:	f000 b970 	b.w	8000950 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f806 	bl	8000688 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__udivmoddi4>:
 8000688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800068c:	9e08      	ldr	r6, [sp, #32]
 800068e:	460d      	mov	r5, r1
 8000690:	4604      	mov	r4, r0
 8000692:	460f      	mov	r7, r1
 8000694:	2b00      	cmp	r3, #0
 8000696:	d14a      	bne.n	800072e <__udivmoddi4+0xa6>
 8000698:	428a      	cmp	r2, r1
 800069a:	4694      	mov	ip, r2
 800069c:	d965      	bls.n	800076a <__udivmoddi4+0xe2>
 800069e:	fab2 f382 	clz	r3, r2
 80006a2:	b143      	cbz	r3, 80006b6 <__udivmoddi4+0x2e>
 80006a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80006a8:	f1c3 0220 	rsb	r2, r3, #32
 80006ac:	409f      	lsls	r7, r3
 80006ae:	fa20 f202 	lsr.w	r2, r0, r2
 80006b2:	4317      	orrs	r7, r2
 80006b4:	409c      	lsls	r4, r3
 80006b6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80006ba:	fa1f f58c 	uxth.w	r5, ip
 80006be:	fbb7 f1fe 	udiv	r1, r7, lr
 80006c2:	0c22      	lsrs	r2, r4, #16
 80006c4:	fb0e 7711 	mls	r7, lr, r1, r7
 80006c8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80006cc:	fb01 f005 	mul.w	r0, r1, r5
 80006d0:	4290      	cmp	r0, r2
 80006d2:	d90a      	bls.n	80006ea <__udivmoddi4+0x62>
 80006d4:	eb1c 0202 	adds.w	r2, ip, r2
 80006d8:	f101 37ff 	add.w	r7, r1, #4294967295
 80006dc:	f080 811c 	bcs.w	8000918 <__udivmoddi4+0x290>
 80006e0:	4290      	cmp	r0, r2
 80006e2:	f240 8119 	bls.w	8000918 <__udivmoddi4+0x290>
 80006e6:	3902      	subs	r1, #2
 80006e8:	4462      	add	r2, ip
 80006ea:	1a12      	subs	r2, r2, r0
 80006ec:	b2a4      	uxth	r4, r4
 80006ee:	fbb2 f0fe 	udiv	r0, r2, lr
 80006f2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006fa:	fb00 f505 	mul.w	r5, r0, r5
 80006fe:	42a5      	cmp	r5, r4
 8000700:	d90a      	bls.n	8000718 <__udivmoddi4+0x90>
 8000702:	eb1c 0404 	adds.w	r4, ip, r4
 8000706:	f100 32ff 	add.w	r2, r0, #4294967295
 800070a:	f080 8107 	bcs.w	800091c <__udivmoddi4+0x294>
 800070e:	42a5      	cmp	r5, r4
 8000710:	f240 8104 	bls.w	800091c <__udivmoddi4+0x294>
 8000714:	4464      	add	r4, ip
 8000716:	3802      	subs	r0, #2
 8000718:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800071c:	1b64      	subs	r4, r4, r5
 800071e:	2100      	movs	r1, #0
 8000720:	b11e      	cbz	r6, 800072a <__udivmoddi4+0xa2>
 8000722:	40dc      	lsrs	r4, r3
 8000724:	2300      	movs	r3, #0
 8000726:	e9c6 4300 	strd	r4, r3, [r6]
 800072a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072e:	428b      	cmp	r3, r1
 8000730:	d908      	bls.n	8000744 <__udivmoddi4+0xbc>
 8000732:	2e00      	cmp	r6, #0
 8000734:	f000 80ed 	beq.w	8000912 <__udivmoddi4+0x28a>
 8000738:	2100      	movs	r1, #0
 800073a:	e9c6 0500 	strd	r0, r5, [r6]
 800073e:	4608      	mov	r0, r1
 8000740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000744:	fab3 f183 	clz	r1, r3
 8000748:	2900      	cmp	r1, #0
 800074a:	d149      	bne.n	80007e0 <__udivmoddi4+0x158>
 800074c:	42ab      	cmp	r3, r5
 800074e:	d302      	bcc.n	8000756 <__udivmoddi4+0xce>
 8000750:	4282      	cmp	r2, r0
 8000752:	f200 80f8 	bhi.w	8000946 <__udivmoddi4+0x2be>
 8000756:	1a84      	subs	r4, r0, r2
 8000758:	eb65 0203 	sbc.w	r2, r5, r3
 800075c:	2001      	movs	r0, #1
 800075e:	4617      	mov	r7, r2
 8000760:	2e00      	cmp	r6, #0
 8000762:	d0e2      	beq.n	800072a <__udivmoddi4+0xa2>
 8000764:	e9c6 4700 	strd	r4, r7, [r6]
 8000768:	e7df      	b.n	800072a <__udivmoddi4+0xa2>
 800076a:	b902      	cbnz	r2, 800076e <__udivmoddi4+0xe6>
 800076c:	deff      	udf	#255	; 0xff
 800076e:	fab2 f382 	clz	r3, r2
 8000772:	2b00      	cmp	r3, #0
 8000774:	f040 8090 	bne.w	8000898 <__udivmoddi4+0x210>
 8000778:	1a8a      	subs	r2, r1, r2
 800077a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800077e:	fa1f fe8c 	uxth.w	lr, ip
 8000782:	2101      	movs	r1, #1
 8000784:	fbb2 f5f7 	udiv	r5, r2, r7
 8000788:	fb07 2015 	mls	r0, r7, r5, r2
 800078c:	0c22      	lsrs	r2, r4, #16
 800078e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000792:	fb0e f005 	mul.w	r0, lr, r5
 8000796:	4290      	cmp	r0, r2
 8000798:	d908      	bls.n	80007ac <__udivmoddi4+0x124>
 800079a:	eb1c 0202 	adds.w	r2, ip, r2
 800079e:	f105 38ff 	add.w	r8, r5, #4294967295
 80007a2:	d202      	bcs.n	80007aa <__udivmoddi4+0x122>
 80007a4:	4290      	cmp	r0, r2
 80007a6:	f200 80cb 	bhi.w	8000940 <__udivmoddi4+0x2b8>
 80007aa:	4645      	mov	r5, r8
 80007ac:	1a12      	subs	r2, r2, r0
 80007ae:	b2a4      	uxth	r4, r4
 80007b0:	fbb2 f0f7 	udiv	r0, r2, r7
 80007b4:	fb07 2210 	mls	r2, r7, r0, r2
 80007b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007bc:	fb0e fe00 	mul.w	lr, lr, r0
 80007c0:	45a6      	cmp	lr, r4
 80007c2:	d908      	bls.n	80007d6 <__udivmoddi4+0x14e>
 80007c4:	eb1c 0404 	adds.w	r4, ip, r4
 80007c8:	f100 32ff 	add.w	r2, r0, #4294967295
 80007cc:	d202      	bcs.n	80007d4 <__udivmoddi4+0x14c>
 80007ce:	45a6      	cmp	lr, r4
 80007d0:	f200 80bb 	bhi.w	800094a <__udivmoddi4+0x2c2>
 80007d4:	4610      	mov	r0, r2
 80007d6:	eba4 040e 	sub.w	r4, r4, lr
 80007da:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007de:	e79f      	b.n	8000720 <__udivmoddi4+0x98>
 80007e0:	f1c1 0720 	rsb	r7, r1, #32
 80007e4:	408b      	lsls	r3, r1
 80007e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80007ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80007ee:	fa05 f401 	lsl.w	r4, r5, r1
 80007f2:	fa20 f307 	lsr.w	r3, r0, r7
 80007f6:	40fd      	lsrs	r5, r7
 80007f8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007fc:	4323      	orrs	r3, r4
 80007fe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000802:	fa1f fe8c 	uxth.w	lr, ip
 8000806:	fb09 5518 	mls	r5, r9, r8, r5
 800080a:	0c1c      	lsrs	r4, r3, #16
 800080c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000810:	fb08 f50e 	mul.w	r5, r8, lr
 8000814:	42a5      	cmp	r5, r4
 8000816:	fa02 f201 	lsl.w	r2, r2, r1
 800081a:	fa00 f001 	lsl.w	r0, r0, r1
 800081e:	d90b      	bls.n	8000838 <__udivmoddi4+0x1b0>
 8000820:	eb1c 0404 	adds.w	r4, ip, r4
 8000824:	f108 3aff 	add.w	sl, r8, #4294967295
 8000828:	f080 8088 	bcs.w	800093c <__udivmoddi4+0x2b4>
 800082c:	42a5      	cmp	r5, r4
 800082e:	f240 8085 	bls.w	800093c <__udivmoddi4+0x2b4>
 8000832:	f1a8 0802 	sub.w	r8, r8, #2
 8000836:	4464      	add	r4, ip
 8000838:	1b64      	subs	r4, r4, r5
 800083a:	b29d      	uxth	r5, r3
 800083c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000840:	fb09 4413 	mls	r4, r9, r3, r4
 8000844:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000848:	fb03 fe0e 	mul.w	lr, r3, lr
 800084c:	45a6      	cmp	lr, r4
 800084e:	d908      	bls.n	8000862 <__udivmoddi4+0x1da>
 8000850:	eb1c 0404 	adds.w	r4, ip, r4
 8000854:	f103 35ff 	add.w	r5, r3, #4294967295
 8000858:	d26c      	bcs.n	8000934 <__udivmoddi4+0x2ac>
 800085a:	45a6      	cmp	lr, r4
 800085c:	d96a      	bls.n	8000934 <__udivmoddi4+0x2ac>
 800085e:	3b02      	subs	r3, #2
 8000860:	4464      	add	r4, ip
 8000862:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000866:	fba3 9502 	umull	r9, r5, r3, r2
 800086a:	eba4 040e 	sub.w	r4, r4, lr
 800086e:	42ac      	cmp	r4, r5
 8000870:	46c8      	mov	r8, r9
 8000872:	46ae      	mov	lr, r5
 8000874:	d356      	bcc.n	8000924 <__udivmoddi4+0x29c>
 8000876:	d053      	beq.n	8000920 <__udivmoddi4+0x298>
 8000878:	b156      	cbz	r6, 8000890 <__udivmoddi4+0x208>
 800087a:	ebb0 0208 	subs.w	r2, r0, r8
 800087e:	eb64 040e 	sbc.w	r4, r4, lr
 8000882:	fa04 f707 	lsl.w	r7, r4, r7
 8000886:	40ca      	lsrs	r2, r1
 8000888:	40cc      	lsrs	r4, r1
 800088a:	4317      	orrs	r7, r2
 800088c:	e9c6 7400 	strd	r7, r4, [r6]
 8000890:	4618      	mov	r0, r3
 8000892:	2100      	movs	r1, #0
 8000894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000898:	f1c3 0120 	rsb	r1, r3, #32
 800089c:	fa02 fc03 	lsl.w	ip, r2, r3
 80008a0:	fa20 f201 	lsr.w	r2, r0, r1
 80008a4:	fa25 f101 	lsr.w	r1, r5, r1
 80008a8:	409d      	lsls	r5, r3
 80008aa:	432a      	orrs	r2, r5
 80008ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008b0:	fa1f fe8c 	uxth.w	lr, ip
 80008b4:	fbb1 f0f7 	udiv	r0, r1, r7
 80008b8:	fb07 1510 	mls	r5, r7, r0, r1
 80008bc:	0c11      	lsrs	r1, r2, #16
 80008be:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80008c2:	fb00 f50e 	mul.w	r5, r0, lr
 80008c6:	428d      	cmp	r5, r1
 80008c8:	fa04 f403 	lsl.w	r4, r4, r3
 80008cc:	d908      	bls.n	80008e0 <__udivmoddi4+0x258>
 80008ce:	eb1c 0101 	adds.w	r1, ip, r1
 80008d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80008d6:	d22f      	bcs.n	8000938 <__udivmoddi4+0x2b0>
 80008d8:	428d      	cmp	r5, r1
 80008da:	d92d      	bls.n	8000938 <__udivmoddi4+0x2b0>
 80008dc:	3802      	subs	r0, #2
 80008de:	4461      	add	r1, ip
 80008e0:	1b49      	subs	r1, r1, r5
 80008e2:	b292      	uxth	r2, r2
 80008e4:	fbb1 f5f7 	udiv	r5, r1, r7
 80008e8:	fb07 1115 	mls	r1, r7, r5, r1
 80008ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008f0:	fb05 f10e 	mul.w	r1, r5, lr
 80008f4:	4291      	cmp	r1, r2
 80008f6:	d908      	bls.n	800090a <__udivmoddi4+0x282>
 80008f8:	eb1c 0202 	adds.w	r2, ip, r2
 80008fc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000900:	d216      	bcs.n	8000930 <__udivmoddi4+0x2a8>
 8000902:	4291      	cmp	r1, r2
 8000904:	d914      	bls.n	8000930 <__udivmoddi4+0x2a8>
 8000906:	3d02      	subs	r5, #2
 8000908:	4462      	add	r2, ip
 800090a:	1a52      	subs	r2, r2, r1
 800090c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000910:	e738      	b.n	8000784 <__udivmoddi4+0xfc>
 8000912:	4631      	mov	r1, r6
 8000914:	4630      	mov	r0, r6
 8000916:	e708      	b.n	800072a <__udivmoddi4+0xa2>
 8000918:	4639      	mov	r1, r7
 800091a:	e6e6      	b.n	80006ea <__udivmoddi4+0x62>
 800091c:	4610      	mov	r0, r2
 800091e:	e6fb      	b.n	8000718 <__udivmoddi4+0x90>
 8000920:	4548      	cmp	r0, r9
 8000922:	d2a9      	bcs.n	8000878 <__udivmoddi4+0x1f0>
 8000924:	ebb9 0802 	subs.w	r8, r9, r2
 8000928:	eb65 0e0c 	sbc.w	lr, r5, ip
 800092c:	3b01      	subs	r3, #1
 800092e:	e7a3      	b.n	8000878 <__udivmoddi4+0x1f0>
 8000930:	4645      	mov	r5, r8
 8000932:	e7ea      	b.n	800090a <__udivmoddi4+0x282>
 8000934:	462b      	mov	r3, r5
 8000936:	e794      	b.n	8000862 <__udivmoddi4+0x1da>
 8000938:	4640      	mov	r0, r8
 800093a:	e7d1      	b.n	80008e0 <__udivmoddi4+0x258>
 800093c:	46d0      	mov	r8, sl
 800093e:	e77b      	b.n	8000838 <__udivmoddi4+0x1b0>
 8000940:	3d02      	subs	r5, #2
 8000942:	4462      	add	r2, ip
 8000944:	e732      	b.n	80007ac <__udivmoddi4+0x124>
 8000946:	4608      	mov	r0, r1
 8000948:	e70a      	b.n	8000760 <__udivmoddi4+0xd8>
 800094a:	4464      	add	r4, ip
 800094c:	3802      	subs	r0, #2
 800094e:	e742      	b.n	80007d6 <__udivmoddi4+0x14e>

08000950 <__aeabi_idiv0>:
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop

08000954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800098c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000958:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800095a:	e003      	b.n	8000964 <LoopCopyDataInit>

0800095c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800095e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000960:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000962:	3104      	adds	r1, #4

08000964 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000964:	480b      	ldr	r0, [pc, #44]	; (8000994 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000968:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800096a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800096c:	d3f6      	bcc.n	800095c <CopyDataInit>
  ldr  r2, =_sbss
 800096e:	4a0b      	ldr	r2, [pc, #44]	; (800099c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000970:	e002      	b.n	8000978 <LoopFillZerobss>

08000972 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000972:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000974:	f842 3b04 	str.w	r3, [r2], #4

08000978 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800097a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800097c:	d3f9      	bcc.n	8000972 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800097e:	f009 f9df 	bl	8009d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000982:	f02a fda7 	bl	802b4d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000986:	f002 fdcb 	bl	8003520 <main>
  bx  lr    
 800098a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800098c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000990:	08033c34 	.word	0x08033c34
  ldr  r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000998:	20000150 	.word	0x20000150
  ldr  r2, =_sbss
 800099c:	20009750 	.word	0x20009750
  ldr  r3, = _ebss
 80009a0:	200288e4 	.word	0x200288e4

080009a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC_IRQHandler>

080009a6 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80009a6:	4770      	bx	lr

080009a8 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 80009a8:	4770      	bx	lr

080009aa <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80009aa:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 80009ac:	f001 fd36 	bl	800241c <touchgfx_components_init>
  touchgfx_init();
}
 80009b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
 80009b4:	f001 bcc0 	b.w	8002338 <touchgfx_init>

080009b8 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80009b8:	f001 bd32 	b.w	8002420 <touchgfx_taskEntry>

080009bc <BSP_PB_Init>:
    __weak void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
    {
        GPIO_InitTypeDef gpio_init_structure;

        /* Enable the BUTTON clock */
        BUTTON_GPIO_CLK_ENABLE();
 80009bc:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <BSP_PB_Init+0x60>)
 80009be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009c0:	f042 0201 	orr.w	r2, r2, #1
    {
 80009c4:	b510      	push	{r4, lr}
        BUTTON_GPIO_CLK_ENABLE();
 80009c6:	631a      	str	r2, [r3, #48]	; 0x30
    {
 80009c8:	b086      	sub	sp, #24
        BUTTON_GPIO_CLK_ENABLE();
 80009ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	9b00      	ldr	r3, [sp, #0]

        if (Button_Mode == BUTTON_MODE_GPIO)
 80009d4:	b959      	cbnz	r1, 80009ee <BSP_PB_Init+0x32>
        {
            /* Configure Button pin as input */
            gpio_init_structure.Pin = BUTTON_PIN[Button];
 80009d6:	2301      	movs	r3, #1
            gpio_init_structure.Mode = GPIO_MODE_INPUT;
            gpio_init_structure.Pull = GPIO_NOPULL;
 80009d8:	9103      	str	r1, [sp, #12]
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80009da:	4811      	ldr	r0, [pc, #68]	; (8000a20 <BSP_PB_Init+0x64>)
            gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80009dc:	e9cd 3101 	strd	r3, r1, [sp, #4]
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80009e0:	2302      	movs	r3, #2
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80009e2:	a901      	add	r1, sp, #4
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80009e4:	9304      	str	r3, [sp, #16]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80009e6:	f00a f9db 	bl	800ada0 <HAL_GPIO_Init>

            /* Enable and set Button EXTI Interrupt to the lowest priority */
            HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
            HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
        }
    }
 80009ea:	b006      	add	sp, #24
 80009ec:	bd10      	pop	{r4, pc}
        if (Button_Mode == BUTTON_MODE_EXTI)
 80009ee:	2901      	cmp	r1, #1
 80009f0:	d1fb      	bne.n	80009ea <BSP_PB_Init+0x2e>
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80009f2:	2400      	movs	r4, #0
 80009f4:	2302      	movs	r3, #2
            gpio_init_structure.Pin = BUTTON_PIN[Button];
 80009f6:	9101      	str	r1, [sp, #4]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80009f8:	a901      	add	r1, sp, #4
 80009fa:	4809      	ldr	r0, [pc, #36]	; (8000a20 <BSP_PB_Init+0x64>)
            gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80009fc:	e9cd 4303 	strd	r4, r3, [sp, #12]
            gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000a00:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a04:	9302      	str	r3, [sp, #8]
            HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000a06:	f00a f9cb 	bl	800ada0 <HAL_GPIO_Init>
            HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000a0a:	4622      	mov	r2, r4
 8000a0c:	210f      	movs	r1, #15
 8000a0e:	2006      	movs	r0, #6
 8000a10:	f009 fa04 	bl	8009e1c <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000a14:	2006      	movs	r0, #6
 8000a16:	f009 fa33 	bl	8009e80 <HAL_NVIC_EnableIRQ>
    }
 8000a1a:	e7e6      	b.n	80009ea <BSP_PB_Init+0x2e>
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020000 	.word	0x40020000

08000a24 <_ZN8touchgfx7Buttons4initEv>:
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000a24:	2100      	movs	r1, #0
{
 8000a26:	b508      	push	{r3, lr}
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000a28:	4608      	mov	r0, r1
 8000a2a:	f7ff ffc7 	bl	80009bc <BSP_PB_Init>
}
 8000a2e:	bd08      	pop	{r3, pc}

08000a30 <BSP_PB_GetState>:
      *            @arg  BUTTON_USER: User Push Button
      * @retval The Button GPIO pin value
      */
    __weak uint32_t BSP_PB_GetState(Button_TypeDef Button)
    {
        return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000a30:	2101      	movs	r1, #1
 8000a32:	4802      	ldr	r0, [pc, #8]	; (8000a3c <BSP_PB_GetState+0xc>)
    {
 8000a34:	b508      	push	{r3, lr}
        return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000a36:	f00a fb35 	bl	800b0a4 <HAL_GPIO_ReadPin>
    }
 8000a3a:	bd08      	pop	{r3, pc}
 8000a3c:	40020000 	.word	0x40020000

08000a40 <_ZN8touchgfx7Buttons6sampleEv>:
{
 8000a40:	b508      	push	{r3, lr}
    result = BSP_PB_GetState(BUTTON_WAKEUP);
 8000a42:	2000      	movs	r0, #0
 8000a44:	f7ff fff4 	bl	8000a30 <BSP_PB_GetState>
}
 8000a48:	bd08      	pop	{r3, pc}

08000a4a <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8000a4a:	6840      	ldr	r0, [r0, #4]
    }
 8000a4c:	4770      	bx	lr

08000a4e <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8000a4e:	6041      	str	r1, [r0, #4]
    }
 8000a50:	4770      	bx	lr
	...

08000a54 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8000a54:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000a58:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 8000a5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a60:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8000a66:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8000a68:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	f042 0201 	orr.w	r2, r2, #1
 8000a78:	601a      	str	r2, [r3, #0]
}
 8000a7a:	4770      	bx	lr
 8000a7c:	e0001000 	.word	0xe0001000
 8000a80:	c5acce55 	.word	0xc5acce55

08000a84 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8000a84:	1a51      	subs	r1, r2, r1
 8000a86:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8000a8a:	fbb1 f0f3 	udiv	r0, r1, r3
 8000a8e:	4770      	bx	lr

08000a90 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8000a90:	4b01      	ldr	r3, [pc, #4]	; (8000a98 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8000a92:	6858      	ldr	r0, [r3, #4]
}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e0001000 	.word	0xe0001000

08000a9c <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8000a9c:	4770      	bx	lr

08000a9e <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8000a9e:	b510      	push	{r4, lr}
 8000aa0:	4604      	mov	r4, r0
 8000aa2:	210c      	movs	r1, #12
 8000aa4:	f029 ff8d 	bl	802a9c2 <_ZdlPvj>
 8000aa8:	4620      	mov	r0, r4
 8000aaa:	bd10      	pop	{r4, pc}

08000aac <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8000aac:	6803      	ldr	r3, [r0, #0]
{
 8000aae:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8000ab0:	691b      	ldr	r3, [r3, #16]
{
 8000ab2:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8000ab4:	b131      	cbz	r1, 8000ac4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8000ab6:	4798      	blx	r3
 8000ab8:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8000aba:	6863      	ldr	r3, [r4, #4]
 8000abc:	1a9b      	subs	r3, r3, r2
 8000abe:	4418      	add	r0, r3
 8000ac0:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8000ac2:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8000ac4:	4798      	blx	r3
 8000ac6:	60a0      	str	r0, [r4, #8]
}
 8000ac8:	e7fb      	b.n	8000ac2 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

08000aca <_ZN8touchgfx16ButtonController5resetEv>:
    virtual bool sample(uint8_t& key) = 0;

    /** Resets button controller. Does nothing in the default implementation. */
    virtual void reset()
    {
    }
 8000aca:	4770      	bx	lr

08000acc <_ZN8touchgfx10KeySamplerD1Ev>:
public:
    KeySampler()
    {
        init();
    }
    virtual ~KeySampler() {}
 8000acc:	4770      	bx	lr
	...

08000ad0 <_ZN8touchgfx10KeySampler4initEv>:
using namespace touchgfx;

static uint8_t btnstatus[4];

void KeySampler::init()
{
 8000ad0:	b508      	push	{r3, lr}
    Buttons::init();
 8000ad2:	f7ff ffa7 	bl	8000a24 <_ZN8touchgfx7Buttons4initEv>

    memset(btnstatus, 0x00, sizeof(uint8_t) * 4);
 8000ad6:	4b02      	ldr	r3, [pc, #8]	; (8000ae0 <_ZN8touchgfx10KeySampler4initEv+0x10>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
}
 8000adc:	bd08      	pop	{r3, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000976c 	.word	0x2000976c

08000ae4 <_ZN8touchgfx10KeySampler6sampleERh>:

bool KeySampler::sample(uint8_t& key)
{
 8000ae4:	b570      	push	{r4, r5, r6, lr}
 8000ae6:	460d      	mov	r5, r1
    unsigned int buttonValue = Buttons::sample();
 8000ae8:	f7ff ffaa 	bl	8000a40 <_ZN8touchgfx7Buttons6sampleEv>

    //Propergate values through buffer
    btnstatus[3] = btnstatus[2];
 8000aec:	4a0b      	ldr	r2, [pc, #44]	; (8000b1c <_ZN8touchgfx10KeySampler6sampleERh+0x38>)
    btnstatus[2] = btnstatus[1];
    btnstatus[1] = btnstatus[0];
    btnstatus[0] = buttonValue;
 8000aee:	b2c4      	uxtb	r4, r0
    btnstatus[3] = btnstatus[2];
 8000af0:	7893      	ldrb	r3, [r2, #2]
    btnstatus[2] = btnstatus[1];
 8000af2:	7856      	ldrb	r6, [r2, #1]
    btnstatus[1] = btnstatus[0];
 8000af4:	7811      	ldrb	r1, [r2, #0]

    //User key
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 8000af6:	f013 0001 	ands.w	r0, r3, #1
    btnstatus[3] = btnstatus[2];
 8000afa:	70d3      	strb	r3, [r2, #3]
    btnstatus[2] = btnstatus[1];
 8000afc:	7096      	strb	r6, [r2, #2]
    btnstatus[1] = btnstatus[0];
 8000afe:	7051      	strb	r1, [r2, #1]
    btnstatus[0] = buttonValue;
 8000b00:	7014      	strb	r4, [r2, #0]
    if (((btnstatus[3] & Key1) == 1) && ((btnstatus[2] & Key1) == 1) &&
 8000b02:	d00a      	beq.n	8000b1a <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 8000b04:	f016 0001 	ands.w	r0, r6, #1
 8000b08:	d007      	beq.n	8000b1a <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 8000b0a:	f011 0001 	ands.w	r0, r1, #1
 8000b0e:	d004      	beq.n	8000b1a <_ZN8touchgfx10KeySampler6sampleERh+0x36>
            ((btnstatus[1] & Key1) == 1) && ((btnstatus[0] & Key1) == 0))
 8000b10:	07e3      	lsls	r3, r4, #31
    {
        key = 1;
 8000b12:	bf56      	itet	pl
 8000b14:	2001      	movpl	r0, #1
        return true;
    }

    return false;
 8000b16:	2000      	movmi	r0, #0
        key = 1;
 8000b18:	7028      	strbpl	r0, [r5, #0]
}
 8000b1a:	bd70      	pop	{r4, r5, r6, pc}
 8000b1c:	2000976c 	.word	0x2000976c

08000b20 <_ZN8touchgfx10KeySamplerD0Ev>:
 8000b20:	b510      	push	{r4, lr}
 8000b22:	4604      	mov	r4, r0
 8000b24:	2104      	movs	r1, #4
 8000b26:	f029 ff4c 	bl	802a9c2 <_ZdlPvj>
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	bd10      	pop	{r4, pc}

08000b2e <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8000b2e:	4770      	bx	lr

08000b30 <_ZN20STM32TouchControllerD0Ev>:
 8000b30:	b510      	push	{r4, lr}
 8000b32:	4604      	mov	r4, r0
 8000b34:	2104      	movs	r1, #4
 8000b36:	f029 ff44 	bl	802a9c2 <_ZdlPvj>
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	bd10      	pop	{r4, pc}

08000b3e <TS_IO_Init>:
      * @retval None
      */
    __weak void TS_IO_Init(void)
    {
        // I2Cx_Init(&hi2c4);
    }
 8000b3e:	4770      	bx	lr

08000b40 <TS_IO_Write>:
      * @param  Reg: Reg address
      * @param  Value: Data to be written
      * @retval None
      */
    __weak void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
    {
 8000b40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000b42:	2301      	movs	r3, #1
    {
 8000b44:	f88d 2017 	strb.w	r2, [sp, #23]
        status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000b48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b4c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000b50:	f10d 0217 	add.w	r2, sp, #23
 8000b54:	9200      	str	r2, [sp, #0]
 8000b56:	460a      	mov	r2, r1
 8000b58:	4601      	mov	r1, r0
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <TS_IO_Write+0x34>)
 8000b5c:	f00a fc3a 	bl	800b3d4 <HAL_I2C_Mem_Write>
        if (status != HAL_OK)
 8000b60:	b120      	cbz	r0, 8000b6c <TS_IO_Write+0x2c>
        HAL_I2C_DeInit(i2c_handler);
 8000b62:	4804      	ldr	r0, [pc, #16]	; (8000b74 <TS_IO_Write+0x34>)
 8000b64:	f00a fc1d 	bl	800b3a2 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000b68:	f002 fcb8 	bl	80034dc <MX_I2C4_Init>
        I2Cx_WriteMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
    }
 8000b6c:	b007      	add	sp, #28
 8000b6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b72:	bf00      	nop
 8000b74:	20012164 	.word	0x20012164

08000b78 <TS_IO_Read>:
      * @param  Addr: I2C address
      * @param  Reg: Reg address
      * @retval Data to be read
      */
    __weak uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
    {
 8000b78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        uint8_t read_value = 0;
 8000b7a:	2300      	movs	r3, #0
    {
 8000b7c:	460a      	mov	r2, r1
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000b7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        uint8_t read_value = 0;
 8000b82:	f88d 3017 	strb.w	r3, [sp, #23]
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000b86:	2301      	movs	r3, #1
 8000b88:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8000b8c:	f10d 0117 	add.w	r1, sp, #23
 8000b90:	9100      	str	r1, [sp, #0]
 8000b92:	4601      	mov	r1, r0
 8000b94:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <TS_IO_Read+0x38>)
 8000b96:	f00a fcf7 	bl	800b588 <HAL_I2C_Mem_Read>
        if (status != HAL_OK)
 8000b9a:	b120      	cbz	r0, 8000ba6 <TS_IO_Read+0x2e>
        HAL_I2C_DeInit(i2c_handler);
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <TS_IO_Read+0x38>)
 8000b9e:	f00a fc00 	bl	800b3a2 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000ba2:	f002 fc9b 	bl	80034dc <MX_I2C4_Init>

        I2Cx_ReadMultiple(&hi2c4, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

        return read_value;
    }
 8000ba6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000baa:	b007      	add	sp, #28
 8000bac:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bb0:	20012164 	.word	0x20012164

08000bb4 <TS_IO_ReadMultiple>:
      * @param  Buffer: Pointer to data buffer
      * @param  Length: Length of the data
      * @retval Number of read data
      */
    __weak uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t* Buffer, uint16_t Length)
    {
 8000bb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000bb6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8000bba:	9200      	str	r2, [sp, #0]
 8000bbc:	460a      	mov	r2, r1
 8000bbe:	4601      	mov	r1, r0
 8000bc0:	4807      	ldr	r0, [pc, #28]	; (8000be0 <TS_IO_ReadMultiple+0x2c>)
 8000bc2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	f00a fcde 	bl	800b588 <HAL_I2C_Mem_Read>
        if (status != HAL_OK)
 8000bcc:	4604      	mov	r4, r0
 8000bce:	b120      	cbz	r0, 8000bda <TS_IO_ReadMultiple+0x26>
        HAL_I2C_DeInit(i2c_handler);
 8000bd0:	4803      	ldr	r0, [pc, #12]	; (8000be0 <TS_IO_ReadMultiple+0x2c>)
 8000bd2:	f00a fbe6 	bl	800b3a2 <HAL_I2C_DeInit>
        MX_I2C4_Init();
 8000bd6:	f002 fc81 	bl	80034dc <MX_I2C4_Init>
        return I2Cx_ReadMultiple(&hi2c4, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
    }
 8000bda:	b2a0      	uxth	r0, r4
 8000bdc:	b004      	add	sp, #16
 8000bde:	bd10      	pop	{r4, pc}
 8000be0:	20012164 	.word	0x20012164

08000be4 <BSP_TS_Init>:
      * @param  ts_SizeX : Maximum X size of the TS area on LCD
      * @param  ts_SizeY : Maximum Y size of the TS area on LCD
      * @retval TS_OK if all initializations are OK. Other value if error.
      */
    __weak uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
    {
 8000be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
        /* but the prototype of Init() is like that in template and should be respected       */

        /* Initialize the communication channel to sensor (I2C) if necessary */
        /* that is initialization is done only once after a power up         */
        ft6x06_ts_drv.Init(I2C_Address);
 8000be6:	4d13      	ldr	r5, [pc, #76]	; (8000c34 <BSP_TS_Init+0x50>)
    {
 8000be8:	4606      	mov	r6, r0
        ft6x06_ts_drv.Init(I2C_Address);
 8000bea:	4c13      	ldr	r4, [pc, #76]	; (8000c38 <BSP_TS_Init+0x54>)
    {
 8000bec:	460f      	mov	r7, r1
        ft6x06_ts_drv.Init(I2C_Address);
 8000bee:	682b      	ldr	r3, [r5, #0]
 8000bf0:	7820      	ldrb	r0, [r4, #0]
 8000bf2:	4798      	blx	r3

        ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8000bf4:	686b      	ldr	r3, [r5, #4]
 8000bf6:	2054      	movs	r0, #84	; 0x54
 8000bf8:	4798      	blx	r3
        if (ts_id1 != FT6206_ID_VALUE)
 8000bfa:	b2c0      	uxtb	r0, r0
 8000bfc:	2811      	cmp	r0, #17
 8000bfe:	d009      	beq.n	8000c14 <BSP_TS_Init+0x30>
        {
            ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8000c00:	686b      	ldr	r3, [r5, #4]
 8000c02:	2070      	movs	r0, #112	; 0x70
 8000c04:	4798      	blx	r3
            I2C_Address    = TS_I2C_ADDRESS_A02;
 8000c06:	2370      	movs	r3, #112	; 0x70
            I2C_Address    = TS_I2C_ADDRESS;
        }

        /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
        /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
        if ((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8000c08:	b2c0      	uxtb	r0, r0
            I2C_Address    = TS_I2C_ADDRESS_A02;
 8000c0a:	7023      	strb	r3, [r4, #0]
        if ((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8000c0c:	2811      	cmp	r0, #17
 8000c0e:	d003      	beq.n	8000c18 <BSP_TS_Init+0x34>

            } /* of if(ts_status == TS_OK) */
        }
        else
        {
            ts_status = TS_DEVICE_NOT_FOUND;
 8000c10:	2003      	movs	r0, #3
        }

        return (ts_status);
    }
 8000c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            I2C_Address    = TS_I2C_ADDRESS;
 8000c14:	2354      	movs	r3, #84	; 0x54
 8000c16:	7023      	strb	r3, [r4, #0]
                ts_orientation = TS_SWAP_XY | TS_SWAP_Y;
 8000c18:	42be      	cmp	r6, r7
 8000c1a:	bf34      	ite	cc
 8000c1c:	2101      	movcc	r1, #1
 8000c1e:	210c      	movcs	r1, #12
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <BSP_TS_Init+0x58>)
                ft6x06_ts_drv.Reset(I2C_Address);
 8000c22:	7820      	ldrb	r0, [r4, #0]
 8000c24:	7019      	strb	r1, [r3, #0]
 8000c26:	68ab      	ldr	r3, [r5, #8]
 8000c28:	4798      	blx	r3
                ft6x06_ts_drv.Start(I2C_Address);
 8000c2a:	7820      	ldrb	r0, [r4, #0]
 8000c2c:	68eb      	ldr	r3, [r5, #12]
 8000c2e:	4798      	blx	r3
        uint8_t ts_status = TS_OK;
 8000c30:	2000      	movs	r0, #0
 8000c32:	e7ee      	b.n	8000c12 <BSP_TS_Init+0x2e>
 8000c34:	20000038 	.word	0x20000038
 8000c38:	20009770 	.word	0x20009770
 8000c3c:	20009771 	.word	0x20009771

08000c40 <_ZN20STM32TouchController4initEv>:
{
 8000c40:	b508      	push	{r3, lr}
    if (BSP_TS_Init(800, 480) == TS_OK)
 8000c42:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000c46:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000c4a:	f7ff ffcb 	bl	8000be4 <BSP_TS_Init>
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <_ZN20STM32TouchController4initEv+0x2c>)
 8000c50:	b910      	cbnz	r0, 8000c58 <_ZN20STM32TouchController4initEv+0x18>
        bsp_ts_initialized = true;
 8000c52:	2201      	movs	r2, #1
 8000c54:	701a      	strb	r2, [r3, #0]
}
 8000c56:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1fb      	bne.n	8000c56 <_ZN20STM32TouchController4initEv+0x16>
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <_ZN20STM32TouchController4initEv+0x30>)
 8000c60:	216a      	movs	r1, #106	; 0x6a
 8000c62:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <_ZN20STM32TouchController4initEv+0x34>)
 8000c64:	4804      	ldr	r0, [pc, #16]	; (8000c78 <_ZN20STM32TouchController4initEv+0x38>)
 8000c66:	f02a f889 	bl	802ad7c <__assert_func>
 8000c6a:	bf00      	nop
 8000c6c:	20009772 	.word	0x20009772
 8000c70:	0802bf54 	.word	0x0802bf54
 8000c74:	0802bf67 	.word	0x0802bf67
 8000c78:	0802bf91 	.word	0x0802bf91

08000c7c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
__weak uint8_t BSP_TS_GetState(TS_StateTypeDef* TS_State)
{
 8000c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t xDiff;
    uint16_t yDiff;
    uint32_t index;

    /* Check and update the number of touches active detected */
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 8000c80:	4a34      	ldr	r2, [pc, #208]	; (8000d54 <BSP_TS_GetState+0xd8>)
{
 8000c82:	4605      	mov	r5, r0
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 8000c84:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8000d64 <BSP_TS_GetState+0xe8>
{
 8000c88:	b085      	sub	sp, #20
    TS_State->touchDetected = ft6x06_ts_drv.DetectTouch(I2C_Address);
 8000c8a:	7810      	ldrb	r0, [r2, #0]
 8000c8c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8000c90:	4798      	blx	r3
 8000c92:	7028      	strb	r0, [r5, #0]
    if (TS_State->touchDetected)
 8000c94:	b150      	cbz	r0, 8000cac <BSP_TS_GetState+0x30>
 8000c96:	4e30      	ldr	r6, [pc, #192]	; (8000d58 <BSP_TS_GetState+0xdc>)
 8000c98:	46a9      	mov	r9, r5
 8000c9a:	4f30      	ldr	r7, [pc, #192]	; (8000d5c <BSP_TS_GetState+0xe0>)
 8000c9c:	ac03      	add	r4, sp, #12
 8000c9e:	f10d 0b08 	add.w	fp, sp, #8
    {
        for (index = 0; index < TS_State->touchDetected; index++)
 8000ca2:	f04f 0800 	mov.w	r8, #0
 8000ca6:	782b      	ldrb	r3, [r5, #0]
 8000ca8:	4598      	cmp	r8, r3
 8000caa:	d303      	bcc.n	8000cb4 <BSP_TS_GetState+0x38>
            TS_State->touchY[index] = _y[index];
        } /* of for(index=0; index < TS_State->touchDetected; index++) */
    } /* end of if(TS_State->touchDetected != 0) */

    return (ts_status);
}
 8000cac:	2000      	movs	r0, #0
 8000cae:	b005      	add	sp, #20
 8000cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ft6x06_ts_drv.GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8000cb4:	4827      	ldr	r0, [pc, #156]	; (8000d54 <BSP_TS_GetState+0xd8>)
 8000cb6:	4622      	mov	r2, r4
 8000cb8:	4659      	mov	r1, fp
 8000cba:	f8da 3014 	ldr.w	r3, [sl, #20]
 8000cbe:	7800      	ldrb	r0, [r0, #0]
        for (index = 0; index < TS_State->touchDetected; index++)
 8000cc0:	f108 0801 	add.w	r8, r8, #1
            ft6x06_ts_drv.GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8000cc4:	4798      	blx	r3
            if (ts_orientation & TS_SWAP_XY)
 8000cc6:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <BSP_TS_GetState+0xe4>)
 8000cc8:	46b4      	mov	ip, r6
 8000cca:	46be      	mov	lr, r7
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	3604      	adds	r6, #4
 8000cd0:	3704      	adds	r7, #4
 8000cd2:	0719      	lsls	r1, r3, #28
                tmp = Raw_x[index];
 8000cd4:	bf41      	itttt	mi
 8000cd6:	f8bb 2000 	ldrhmi.w	r2, [fp]
                Raw_x[index] = Raw_y[index];
 8000cda:	8821      	ldrhmi	r1, [r4, #0]
                Raw_y[index] = tmp;
 8000cdc:	8022      	strhmi	r2, [r4, #0]
                Raw_x[index] = Raw_y[index];
 8000cde:	f8ab 1000 	strhmi.w	r1, [fp]
            if (ts_orientation & TS_SWAP_X)
 8000ce2:	079a      	lsls	r2, r3, #30
                Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8000ce4:	bf41      	itttt	mi
 8000ce6:	f8bb 2000 	ldrhmi.w	r2, [fp]
 8000cea:	f5c2 7247 	rsbmi	r2, r2, #796	; 0x31c
 8000cee:	3203      	addmi	r2, #3
 8000cf0:	f8ab 2000 	strhmi.w	r2, [fp]
            if (ts_orientation & TS_SWAP_Y)
 8000cf4:	075b      	lsls	r3, r3, #29
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000cf6:	f856 2c04 	ldr.w	r2, [r6, #-4]
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8000cfa:	bf48      	it	mi
 8000cfc:	8823      	ldrhmi	r3, [r4, #0]
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000cfe:	f83b 0b02 	ldrh.w	r0, [fp], #2
                Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8000d02:	bf42      	ittt	mi
 8000d04:	f5c3 73ef 	rsbmi	r3, r3, #478	; 0x1de
 8000d08:	3301      	addmi	r3, #1
 8000d0a:	8023      	strhmi	r3, [r4, #0]
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000d0c:	b293      	uxth	r3, r2
 8000d0e:	4290      	cmp	r0, r2
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000d10:	f834 1b02 	ldrh.w	r1, [r4], #2
            xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 8000d14:	bf8c      	ite	hi
 8000d16:	1ac3      	subhi	r3, r0, r3
 8000d18:	1a1b      	subls	r3, r3, r0
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	9301      	str	r3, [sp, #4]
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000d1e:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	4299      	cmp	r1, r3
            if ((xDiff + yDiff) > 5)
 8000d26:	9b01      	ldr	r3, [sp, #4]
            yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 8000d28:	bf8c      	ite	hi
 8000d2a:	1a8a      	subhi	r2, r1, r2
 8000d2c:	1a52      	subls	r2, r2, r1
 8000d2e:	b292      	uxth	r2, r2
            if ((xDiff + yDiff) > 5)
 8000d30:	4413      	add	r3, r2
 8000d32:	2b05      	cmp	r3, #5
                _x[index] = Raw_x[index];
 8000d34:	bfc8      	it	gt
 8000d36:	f846 0c04 	strgt.w	r0, [r6, #-4]
            TS_State->touchX[index] = _x[index];
 8000d3a:	f8dc 3000 	ldr.w	r3, [ip]
                _y[index] = Raw_y[index];
 8000d3e:	bfc8      	it	gt
 8000d40:	f847 1c04 	strgt.w	r1, [r7, #-4]
            TS_State->touchX[index] = _x[index];
 8000d44:	f829 3f02 	strh.w	r3, [r9, #2]!
            TS_State->touchY[index] = _y[index];
 8000d48:	f8de 3000 	ldr.w	r3, [lr]
 8000d4c:	f8a9 3004 	strh.w	r3, [r9, #4]
        for (index = 0; index < TS_State->touchDetected; index++)
 8000d50:	e7a9      	b.n	8000ca6 <BSP_TS_GetState+0x2a>
 8000d52:	bf00      	nop
 8000d54:	20009770 	.word	0x20009770
 8000d58:	20009774 	.word	0x20009774
 8000d5c:	2000977c 	.word	0x2000977c
 8000d60:	20009771 	.word	0x20009771
 8000d64:	20000038 	.word	0x20000038

08000d68 <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 8000d68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (bsp_ts_initialized)
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
{
 8000d6c:	460e      	mov	r6, r1
 8000d6e:	4615      	mov	r5, r2
    if (bsp_ts_initialized)
 8000d70:	781c      	ldrb	r4, [r3, #0]
 8000d72:	b15c      	cbz	r4, 8000d8c <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
        BSP_TS_GetState(&state);
 8000d74:	a801      	add	r0, sp, #4
 8000d76:	f7ff ff81 	bl	8000c7c <BSP_TS_GetState>
        if (state.touchDetected)
 8000d7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000d7e:	b143      	cbz	r3, 8000d92 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>
            x = state.touchX[0];
 8000d80:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000d84:	6033      	str	r3, [r6, #0]
            y = state.touchY[0];
 8000d86:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8000d8a:	602b      	str	r3, [r5, #0]
}
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	b004      	add	sp, #16
 8000d90:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8000d92:	461c      	mov	r4, r3
 8000d94:	e7fa      	b.n	8000d8c <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
 8000d96:	bf00      	nop
 8000d98:	20009772 	.word	0x20009772

08000d9c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8000d9c:	2803      	cmp	r0, #3
 8000d9e:	d823      	bhi.n	8000de8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>
 8000da0:	e8df f000 	tbb	[pc, r0]
 8000da4:	1a120b02 	.word	0x1a120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8000da8:	4b10      	ldr	r3, [pc, #64]	; (8000dec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000daa:	2140      	movs	r1, #64	; 0x40
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	fab2 f282 	clz	r2, r2
 8000db2:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000db4:	480e      	ldr	r0, [pc, #56]	; (8000df0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8000db6:	f00a b97b 	b.w	800b0b0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	685a      	ldr	r2, [r3, #4]
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	0952      	lsrs	r2, r2, #5
 8000dc6:	e7f5      	b.n	8000db4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000dca:	2102      	movs	r1, #2
 8000dcc:	4809      	ldr	r0, [pc, #36]	; (8000df4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	0952      	lsrs	r2, r2, #5
 8000dd6:	e7ee      	b.n	8000db6 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000dda:	2140      	movs	r1, #64	; 0x40
 8000ddc:	4806      	ldr	r0, [pc, #24]	; (8000df8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	0952      	lsrs	r2, r2, #5
 8000de6:	e7e6      	b.n	8000db6 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20009784 	.word	0x20009784
 8000df0:	40020800 	.word	0x40020800
 8000df4:	40022400 	.word	0x40022400
 8000df8:	40021400 	.word	0x40021400

08000dfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8000dfc:	2803      	cmp	r0, #3
 8000dfe:	d823      	bhi.n	8000e48 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>
 8000e00:	e8df f000 	tbb	[pc, r0]
 8000e04:	1a120b02 	.word	0x1a120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8000e08:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000e0a:	2140      	movs	r1, #64	; 0x40
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	3a00      	subs	r2, #0
 8000e10:	bf18      	it	ne
 8000e12:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000e14:	480e      	ldr	r0, [pc, #56]	; (8000e50 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000e16:	f00a b94b 	b.w	800b0b0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000e1c:	2180      	movs	r1, #128	; 0x80
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	3a00      	subs	r2, #0
 8000e22:	bf18      	it	ne
 8000e24:	2201      	movne	r2, #1
 8000e26:	e7f5      	b.n	8000e14 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000e2a:	2102      	movs	r1, #2
 8000e2c:	4809      	ldr	r0, [pc, #36]	; (8000e54 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 8000e2e:	689a      	ldr	r2, [r3, #8]
 8000e30:	3a00      	subs	r2, #0
 8000e32:	bf18      	it	ne
 8000e34:	2201      	movne	r2, #1
 8000e36:	e7ee      	b.n	8000e16 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8000e3a:	2140      	movs	r1, #64	; 0x40
 8000e3c:	4806      	ldr	r0, [pc, #24]	; (8000e58 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	3a00      	subs	r2, #0
 8000e42:	bf18      	it	ne
 8000e44:	2201      	movne	r2, #1
 8000e46:	e7e6      	b.n	8000e16 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20009784 	.word	0x20009784
 8000e50:	40020800 	.word	0x40020800
 8000e54:	40022400 	.word	0x40022400
 8000e58:	40021400 	.word	0x40021400

08000e5c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8000e5c:	2803      	cmp	r0, #3
 8000e5e:	d80f      	bhi.n	8000e80 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
 8000e60:	e8df f000 	tbb	[pc, r0]
 8000e64:	0b080602 	.word	0x0b080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000e68:	2140      	movs	r1, #64	; 0x40
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000e6c:	f00a b925 	b.w	800b0ba <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000e70:	2180      	movs	r1, #128	; 0x80
 8000e72:	e7fa      	b.n	8000e6a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000e74:	2102      	movs	r1, #2
 8000e76:	4804      	ldr	r0, [pc, #16]	; (8000e88 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8000e78:	e7f8      	b.n	8000e6c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000e7a:	2140      	movs	r1, #64	; 0x40
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8000e7e:	e7f5      	b.n	8000e6c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40020800 	.word	0x40020800
 8000e88:	40022400 	.word	0x40022400
 8000e8c:	40021400 	.word	0x40021400

08000e90 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000e90:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8000e92:	2803      	cmp	r0, #3
 8000e94:	d813      	bhi.n	8000ebe <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2e>
 8000e96:	e8df f000 	tbb	[pc, r0]
 8000e9a:	0a02      	.short	0x0a02
 8000e9c:	0f0c      	.short	0x0f0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000e9e:	2140      	movs	r1, #64	; 0x40
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000ea0:	4808      	ldr	r0, [pc, #32]	; (8000ec4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x34>)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000ea2:	f00a f8ff 	bl	800b0a4 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8000ea6:	1e43      	subs	r3, r0, #1
 8000ea8:	4258      	negs	r0, r3
 8000eaa:	4158      	adcs	r0, r3
 8000eac:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000eae:	2180      	movs	r1, #128	; 0x80
 8000eb0:	e7f6      	b.n	8000ea0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000eb2:	2102      	movs	r1, #2
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
 8000eb6:	e7f4      	b.n	8000ea2 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000eb8:	2140      	movs	r1, #64	; 0x40
 8000eba:	4804      	ldr	r0, [pc, #16]	; (8000ecc <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8000ebc:	e7f1      	b.n	8000ea2 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	e7f1      	b.n	8000ea6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8000ec2:	bf00      	nop
 8000ec4:	40020800 	.word	0x40020800
 8000ec8:	40022400 	.word	0x40022400
 8000ecc:	40021400 	.word	0x40021400

08000ed0 <_ZN8touchgfx4GPIO4initEv>:
{
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	4d08      	ldr	r5, [pc, #32]	; (8000ef4 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8000ed4:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8000ed6:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000ed8:	b2e0      	uxtb	r0, r4
 8000eda:	f7ff ffd9 	bl	8000e90 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8000ede:	b118      	cbz	r0, 8000ee8 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8000ee0:	682b      	ldr	r3, [r5, #0]
 8000ee2:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8000ee4:	bf18      	it	ne
 8000ee6:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8000ee8:	3401      	adds	r4, #1
 8000eea:	3504      	adds	r5, #4
 8000eec:	2c05      	cmp	r4, #5
 8000eee:	d1f3      	bne.n	8000ed8 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8000ef0:	bd70      	pop	{r4, r5, r6, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20009784 	.word	0x20009784

08000ef8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8000ef8:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8000efa:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
        displayOrientationChangeRequested = true;
 8000efe:	f880 3079 	strb.w	r3, [r0, #121]	; 0x79
    }
 8000f02:	4770      	bx	lr

08000f04 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8000f04:	2000      	movs	r0, #0
 8000f06:	4770      	bx	lr

08000f08 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000f08:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000f0a:	3900      	subs	r1, #0
 8000f0c:	4b02      	ldr	r3, [pc, #8]	; (8000f18 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8000f0e:	bf18      	it	ne
 8000f10:	2101      	movne	r1, #1
 8000f12:	7019      	strb	r1, [r3, #0]
    }
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20027ca7 	.word	0x20027ca7

08000f1c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	4770      	bx	lr

08000f20 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8000f20:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000f22:	b10b      	cbz	r3, 8000f28 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8000f24:	4608      	mov	r0, r1
 8000f26:	4718      	bx	r3
        }
    }
 8000f28:	4770      	bx	lr

08000f2a <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8000f2a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f2e:	4770      	bx	lr

08000f30 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8000f30:	6840      	ldr	r0, [r0, #4]
 8000f32:	6803      	ldr	r3, [r0, #0]
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	4718      	bx	r3

08000f38 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8000f38:	4b01      	ldr	r3, [pc, #4]	; (8000f40 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8000f3a:	6818      	ldr	r0, [r3, #0]
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20009794 	.word	0x20009794

08000f44 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000f44:	4770      	bx	lr
	...

08000f48 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000f48:	b4f0      	push	{r4, r5, r6, r7}
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	4c10      	ldr	r4, [pc, #64]	; (8000f90 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8000f4e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f52:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f56:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000f5a:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f5e:	f3c3 05c9 	ubfx	r5, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f62:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000f66:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000f68:	ea03 0c06 	and.w	ip, r3, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f6c:	462a      	mov	r2, r5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000f6e:	ea4c 7782 	orr.w	r7, ip, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f72:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000f74:	f8c4 7274 	str.w	r7, [r4, #628]	; 0x274
      } while (ways-- != 0U);
 8000f78:	d2f9      	bcs.n	8000f6e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
    } while(sets-- != 0U);
 8000f7a:	3b20      	subs	r3, #32
 8000f7c:	f113 0f20 	cmn.w	r3, #32
 8000f80:	d1f2      	bne.n	8000f68 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x20>
 8000f82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f86:	f3bf 8f6f 	isb	sy
    /* USER CODE END flushFrameBuffer step 1 */

    /* USER CODE BEGIN flushFrameBuffer step 2 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
    /* USER CODE END flushFrameBuffer step 2 */
}
 8000f8a:	bcf0      	pop	{r4, r5, r6, r7}
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000f8c:	f001 bb38 	b.w	8002600 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8000f94:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8000f96:	f001 fac7 	bl	8002528 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9a:	4b02      	ldr	r3, [pc, #8]	; (8000fa4 <_ZN11TouchGFXHAL16enableInterruptsEv+0x10>)
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	60da      	str	r2, [r3, #12]
    NVIC_EnableIRQ(DSI_IRQn);
    /* USER CODE END enableInterrupts */
}
 8000fa0:	bd08      	pop	{r3, pc}
 8000fa2:	bf00      	nop
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8000fa8:	b510      	push	{r4, lr}
 8000faa:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8000fac:	f001 fc30 	bl	8002810 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8000fb0:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8000fb4:	b113      	cbz	r3, 8000fbc <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8000fb6:	4b02      	ldr	r3, [pc, #8]	; (8000fc0 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
    }
}
 8000fbc:	bd10      	pop	{r4, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000014 	.word	0x20000014

08000fc4 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8000fc4:	f001 bab9 	b.w	800253a <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08000fc8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000fc8:	b510      	push	{r4, lr}
 8000fca:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000fcc:	f012 f828 	bl	8013020 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000fd0:	6823      	ldr	r3, [r4, #0]
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 8000fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8000fdc:	4718      	bx	r3

08000fde <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8000fde:	f011 ba8a 	b.w	80124f6 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08000fe2 <_ZN11TouchGFXHALD0Ev>:
 8000fe2:	b510      	push	{r4, lr}
 8000fe4:	4604      	mov	r4, r0
 8000fe6:	217c      	movs	r1, #124	; 0x7c
 8000fe8:	f029 fceb 	bl	802a9c2 <_ZdlPvj>
 8000fec:	4620      	mov	r0, r4
 8000fee:	bd10      	pop	{r4, pc}

08000ff0 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8000ff0:	4b02      	ldr	r3, [pc, #8]	; (8000ffc <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8000ff6:	f011 babb 	b.w	8012570 <_ZN8touchgfx3HAL10beginFrameEv>
 8000ffa:	bf00      	nop
 8000ffc:	20000014 	.word	0x20000014

08001000 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001000:	b538      	push	{r3, r4, r5, lr}
 8001002:	4604      	mov	r4, r0
    GPIO::init();
 8001004:	f7ff ff64 	bl	8000ed0 <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 8001008:	4d08      	ldr	r5, [pc, #32]	; (800102c <_ZN11TouchGFXHAL10initializeEv+0x2c>)
    TouchGFXGeneratedHAL::initialize();
 800100a:	4620      	mov	r0, r4
 800100c:	f001 fad2 	bl	80025b4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001010:	2300      	movs	r3, #0
    instrumentation.init();
 8001012:	4628      	mov	r0, r5
 8001014:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001018:	f7ff fd1c 	bl	8000a54 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 800101c:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 800101e:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001020:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        buttonController = btnCtrl;
 8001024:	4b02      	ldr	r3, [pc, #8]	; (8001030 <_ZN11TouchGFXHAL10initializeEv+0x30>)
 8001026:	6163      	str	r3, [r4, #20]
}
 8001028:	bd38      	pop	{r3, r4, r5, pc}
 800102a:	bf00      	nop
 800102c:	2000979c 	.word	0x2000979c
 8001030:	200097a8 	.word	0x200097a8

08001034 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001034:	6803      	ldr	r3, [r0, #0]
{
 8001036:	4604      	mov	r4, r0
 8001038:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 800103a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800103e:	4798      	blx	r3
    enableInterrupts();
 8001040:	6823      	ldr	r3, [r4, #0]
 8001042:	4620      	mov	r0, r4
 8001044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001046:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001048:	f000 ff02 	bl	8001e50 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	4620      	mov	r0, r4
 8001050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001052:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001054:	2100      	movs	r1, #0
 8001056:	2329      	movs	r3, #41	; 0x29
 8001058:	2215      	movs	r2, #21
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 800105c:	9100      	str	r1, [sp, #0]
 800105e:	f009 fe14 	bl	800ac8a <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001062:	f000 fef5 	bl	8001e50 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001066:	6823      	ldr	r3, [r4, #0]
 8001068:	4620      	mov	r0, r4
 800106a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800106c:	4798      	blx	r3
    for (;;)
 800106e:	e7f8      	b.n	8001062 <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001070:	20012148 	.word	0x20012148

08001074 <_ZN11TouchGFXHAL19configureInterruptsEv>:
{
 8001074:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::configureInterrupts();
 8001076:	f001 fa4f 	bl	8002518 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2107      	movs	r1, #7
 800107e:	205a      	movs	r0, #90	; 0x5a
 8001080:	f008 fecc 	bl	8009e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2107      	movs	r1, #7
 8001088:	2062      	movs	r0, #98	; 0x62
}
 800108a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 800108e:	f008 bec5 	b.w	8009e1c <HAL_NVIC_SetPriority>

08001092 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8001092:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
 8001096:	b11b      	cbz	r3, 80010a0 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8001098:	6840      	ldr	r0, [r0, #4]
 800109a:	6803      	ldr	r3, [r0, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4718      	bx	r3
    }
 80010a0:	4618      	mov	r0, r3
 80010a2:	4770      	bx	lr

080010a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80010a4:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 80010a8:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 80010aa:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 80010ac:	f890 4078 	ldrb.w	r4, [r0, #120]	; 0x78
            if (DISPLAY_ROTATION == rotate0)
 80010b0:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 80010b2:	428c      	cmp	r4, r1
 80010b4:	d009      	beq.n	80010ca <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 80010b6:	b93a      	cbnz	r2, 80010c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80010b8:	490a      	ldr	r1, [pc, #40]	; (80010e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 80010bc:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80010be:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 80010c0:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80010c2:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80010c4:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 80010c6:	701a      	strb	r2, [r3, #0]
        }
    }
 80010c8:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 80010ca:	2a00      	cmp	r2, #0
 80010cc:	d0fc      	beq.n	80010c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80010ce:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 80010d0:	4904      	ldr	r1, [pc, #16]	; (80010e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80010d2:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 80010d4:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80010d6:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 80010d8:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80010da:	2200      	movs	r2, #0
 80010dc:	e7f3      	b.n	80010c6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 80010de:	bf00      	nop
 80010e0:	20027ca0 	.word	0x20027ca0
 80010e4:	20027c9e 	.word	0x20027c9e
 80010e8:	20027c9c 	.word	0x20027c9c

080010ec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80010ec:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	428b      	cmp	r3, r1
 80010f4:	d803      	bhi.n	80010fe <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d905      	bls.n	800110a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001100:	219e      	movs	r1, #158	; 0x9e
 8001102:	4a07      	ldr	r2, [pc, #28]	; (8001120 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001104:	4807      	ldr	r0, [pc, #28]	; (8001124 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001106:	f029 fe39 	bl	802ad7c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800110a:	4b07      	ldr	r3, [pc, #28]	; (8001128 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 800110c:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001110:	801a      	strh	r2, [r3, #0]
    }
 8001112:	bd08      	pop	{r3, pc}
 8001114:	20027c9c 	.word	0x20027c9c
 8001118:	20027c9e 	.word	0x20027c9e
 800111c:	0802bff8 	.word	0x0802bff8
 8001120:	0802c05b 	.word	0x0802c05b
 8001124:	0802c09e 	.word	0x0802c09e
 8001128:	20027ca2 	.word	0x20027ca2
 800112c:	20027ca4 	.word	0x20027ca4

08001130 <_ZN11TouchGFXHAL17disableInterruptsEv>:
{
 8001130:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::disableInterrupts();
 8001132:	f001 fba5 	bl	8002880 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <_ZN11TouchGFXHAL17disableInterruptsEv+0x18>)
 8001138:	2204      	movs	r2, #4
 800113a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 800113e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001142:	f3bf 8f6f 	isb	sy
}
 8001146:	bd08      	pop	{r3, pc}
 8001148:	e000e100 	.word	0xe000e100

0800114c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 800114c:	b570      	push	{r4, r5, r6, lr}
 800114e:	460d      	mov	r5, r1
 8001150:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001154:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001156:	b935      	cbnz	r5, 8001166 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 800115a:	f240 21d2 	movw	r1, #722	; 0x2d2
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001160:	480a      	ldr	r0, [pc, #40]	; (800118c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001162:	f029 fe0b 	bl	802ad7c <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001166:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800116a:	3a00      	subs	r2, #0
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 800116e:	bf18      	it	ne
 8001170:	2201      	movne	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001174:	6803      	ldr	r3, [r0, #0]
}
 8001176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800117a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800117e:	4718      	bx	r3
 8001180:	20009794 	.word	0x20009794
 8001184:	0802c0e3 	.word	0x0802c0e3
 8001188:	0802c11b 	.word	0x0802c11b
 800118c:	0802c09e 	.word	0x0802c09e
 8001190:	20027ca6 	.word	0x20027ca6

08001194 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lcdRef(display),
 8001194:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8001198:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 800119a:	f44f 7280 	mov.w	r2, #256	; 0x100
          mcuInstrumentation(0),
 800119e:	2300      	movs	r3, #0
          auxiliaryLCD(0),
 80011a0:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
          touchSampleRate(1),
 80011a4:	4a1d      	ldr	r2, [pc, #116]	; (800121c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 80011a6:	8503      	strh	r3, [r0, #40]	; 0x28
              inProgress(false)
 80011a8:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 80011ac:	62c3      	str	r3, [r0, #44]	; 0x2c
 80011ae:	8603      	strh	r3, [r0, #48]	; 0x30
          useAuxiliaryLCD(false),
 80011b0:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
          lastY(0),
 80011b4:	6643      	str	r3, [r0, #100]	; 0x64
          updateMCULoad(0),
 80011b6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
          cc_begin(0),
 80011ba:	6743      	str	r3, [r0, #116]	; 0x74
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 80011bc:	b570      	push	{r4, r5, r6, lr}
          vSyncCompensationEnabled(false),
 80011be:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68
                           height)
 80011c2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80011c6:	4a16      	ldr	r2, [pc, #88]	; (8001220 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 80011c8:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 80011cc:	3520      	adds	r5, #32
          buttonController(0),
 80011ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 80011d2:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 80011d6:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 80011da:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
          frameBuffer2(0),
 80011de:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 80011e2:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
          lastX(0),
 80011e6:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80011ea:	6782      	str	r2, [r0, #120]	; 0x78
 80011ec:	b2ad      	uxth	r5, r5
        instance = this;
 80011ee:	4a0d      	ldr	r2, [pc, #52]	; (8001224 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80011f0:	42b5      	cmp	r5, r6
        instance = this;
 80011f2:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80011f4:	4a0c      	ldr	r2, [pc, #48]	; (8001228 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 80011f6:	8015      	strh	r5, [r2, #0]
 80011f8:	4a0c      	ldr	r2, [pc, #48]	; (800122c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 80011fa:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80011fc:	bf28      	it	cs
 80011fe:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001200:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001202:	bf38      	it	cc
 8001204:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001206:	8016      	strh	r6, [r2, #0]
 8001208:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800120a:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800120e:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001210:	4a09      	ldr	r2, [pc, #36]	; (8001238 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8001212:	7013      	strb	r3, [r2, #0]
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 8001216:	6003      	str	r3, [r0, #0]
}
 8001218:	bd70      	pop	{r4, r5, r6, pc}
 800121a:	bf00      	nop
 800121c:	01000001 	.word	0x01000001
 8001220:	01010000 	.word	0x01010000
 8001224:	20027ca8 	.word	0x20027ca8
 8001228:	20027c9c 	.word	0x20027c9c
 800122c:	20027ca2 	.word	0x20027ca2
 8001230:	20027c9e 	.word	0x20027c9e
 8001234:	20027ca4 	.word	0x20027ca4
 8001238:	20027ca0 	.word	0x20027ca0
 800123c:	0802c174 	.word	0x0802c174

08001240 <OTM8009A_IO_Delay>:
      * @brief  OTM8009A delay
      * @param  Delay: Delay in ms
      */
    __weak void OTM8009A_IO_Delay(uint32_t Delay)
    {
        HAL_Delay(Delay);
 8001240:	f008 bdc8 	b.w	8009dd4 <HAL_Delay>

08001244 <DSI_IO_WriteCmd>:
     * @param  pParams: Pointer to parameter values table.
     * @retval HAL status
     */
    void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t* pParams)
    {
        if (NbrParams <= 1)
 8001244:	2801      	cmp	r0, #1
    {
 8001246:	4603      	mov	r3, r0
 8001248:	b507      	push	{r0, r1, r2, lr}
        if (NbrParams <= 1)
 800124a:	d80a      	bhi.n	8001262 <DSI_IO_WriteCmd+0x1e>
        {
            HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 800124c:	784b      	ldrb	r3, [r1, #1]
 800124e:	2215      	movs	r2, #21
 8001250:	4808      	ldr	r0, [pc, #32]	; (8001274 <DSI_IO_WriteCmd+0x30>)
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	780b      	ldrb	r3, [r1, #0]
 8001256:	2100      	movs	r1, #0
 8001258:	f009 fd17 	bl	800ac8a <HAL_DSI_ShortWrite>
        }
        else
        {
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
        }
    }
 800125c:	b003      	add	sp, #12
 800125e:	f85d fb04 	ldr.w	pc, [sp], #4
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
 8001262:	9101      	str	r1, [sp, #4]
 8001264:	5c0a      	ldrb	r2, [r1, r0]
 8001266:	2100      	movs	r1, #0
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <DSI_IO_WriteCmd+0x30>)
 800126a:	9200      	str	r2, [sp, #0]
 800126c:	2239      	movs	r2, #57	; 0x39
 800126e:	f009 fd1d 	bl	800acac <HAL_DSI_LongWrite>
    }
 8001272:	e7f3      	b.n	800125c <DSI_IO_WriteCmd+0x18>
 8001274:	20012148 	.word	0x20012148

08001278 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001278:	b537      	push	{r0, r1, r2, r4, r5, lr}
        static uint8_t ScanLineParams[2];

        uint16_t scanline = 533;
        ScanLineParams[0] = scanline >> 8;
 800127a:	2302      	movs	r3, #2
 800127c:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <LCD_ReqTear+0x30>)
        ScanLineParams[1] = scanline & 0x00FF;
 800127e:	2515      	movs	r5, #21

        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001280:	4c0a      	ldr	r4, [pc, #40]	; (80012ac <LCD_ReqTear+0x34>)
        ScanLineParams[0] = scanline >> 8;
 8001282:	7013      	strb	r3, [r2, #0]
        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001284:	2100      	movs	r1, #0
        ScanLineParams[1] = scanline & 0x00FF;
 8001286:	7055      	strb	r5, [r2, #1]
        HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001288:	4620      	mov	r0, r4
 800128a:	9201      	str	r2, [sp, #4]
 800128c:	2244      	movs	r2, #68	; 0x44
 800128e:	9200      	str	r2, [sp, #0]
 8001290:	2239      	movs	r2, #57	; 0x39
 8001292:	f009 fd0b 	bl	800acac <HAL_DSI_LongWrite>
        // set_tear_on
        HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8001296:	2100      	movs	r1, #0
 8001298:	2335      	movs	r3, #53	; 0x35
 800129a:	462a      	mov	r2, r5
 800129c:	4620      	mov	r0, r4
 800129e:	9100      	str	r1, [sp, #0]
 80012a0:	f009 fcf3 	bl	800ac8a <HAL_DSI_ShortWrite>
    }
 80012a4:	b003      	add	sp, #12
 80012a6:	bd30      	pop	{r4, r5, pc}
 80012a8:	200097ac 	.word	0x200097ac
 80012ac:	20012148 	.word	0x20012148

080012b0 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 80012b0:	b507      	push	{r0, r1, r2, lr}
 80012b2:	9001      	str	r0, [sp, #4]
    LCD_ReqTear();
 80012b4:	f7ff ffe0 	bl	8001278 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x48>)
 80012ba:	2202      	movs	r2, #2
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80012bc:	9801      	ldr	r0, [sp, #4]
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 80012c4:	2201      	movs	r2, #1
 80012c6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 80012ca:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80012ce:	f042 0201 	orr.w	r2, r2, #1
 80012d2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 80012d6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80012da:	f042 0202 	orr.w	r2, r2, #2
 80012de:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_LTDC_ENABLE_IT(&hltdc, (LTDC_IT_LI | LTDC_IT_FU)); /* Enable line and FIFO underrun interrupts */
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x4c>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80012e8:	f043 0303 	orr.w	r3, r3, #3
 80012ec:	6353      	str	r3, [r2, #52]	; 0x34
}
 80012ee:	b003      	add	sp, #12
 80012f0:	f85d eb04 	ldr.w	lr, [sp], #4
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80012f4:	f001 b920 	b.w	8002538 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
 80012f8:	20012148 	.word	0x20012148
 80012fc:	20012210 	.word	0x20012210

08001300 <LCD_SetUpdateRegion>:

    void LCD_SetUpdateRegion(int idx)
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8001300:	4b07      	ldr	r3, [pc, #28]	; (8001320 <LCD_SetUpdateRegion+0x20>)
    {
 8001302:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 8001304:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001308:	232a      	movs	r3, #42	; 0x2a
 800130a:	2239      	movs	r2, #57	; 0x39
 800130c:	2100      	movs	r1, #0
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2304      	movs	r3, #4
 8001312:	9001      	str	r0, [sp, #4]
 8001314:	4803      	ldr	r0, [pc, #12]	; (8001324 <LCD_SetUpdateRegion+0x24>)
 8001316:	f009 fcc9 	bl	800acac <HAL_DSI_LongWrite>
    }
 800131a:	b003      	add	sp, #12
 800131c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001320:	20000004 	.word	0x20000004
 8001324:	20012148 	.word	0x20012148

08001328 <HAL_DSI_TearingEffectCallback>:
    // {
    //     HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
    // }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001328:	b570      	push	{r4, r5, r6, lr}
        return instance;
 800132a:	4d15      	ldr	r5, [pc, #84]	; (8001380 <HAL_DSI_TearingEffectCallback+0x58>)
 800132c:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff fd34 	bl	8000d9c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001334:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8001336:	f892 306a 	ldrb.w	r3, [r2, #106]	; 0x6a
 800133a:	3301      	adds	r3, #1
 800133c:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001340:	f000 fd7a 	bl	8001e38 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <HAL_DSI_TearingEffectCallback+0x5c>)
        return instance;
 8001346:	6828      	ldr	r0, [r5, #0]
 8001348:	781a      	ldrb	r2, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 800134a:	781b      	ldrb	r3, [r3, #0]
        lockDMAToPorch = enableLock;
 800134c:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a
 8001350:	b123      	cbz	r3, 800135c <HAL_DSI_TearingEffectCallback+0x34>
 8001352:	4d0d      	ldr	r5, [pc, #52]	; (8001388 <HAL_DSI_TearingEffectCallback+0x60>)
 8001354:	782b      	ldrb	r3, [r5, #0]
 8001356:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 800135a:	b123      	cbz	r3, 8001366 <HAL_DSI_TearingEffectCallback+0x3e>
            HAL_DSI_Refresh(hdsi);
            displayRefreshing = true;
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
 800135c:	2000      	movs	r0, #0
        }
    }
 800135e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001362:	f7ff bd4b 	b.w	8000dfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                HAL::getInstance()->swapFrameBuffers();
 8001366:	f011 fe5b 	bl	8013020 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            updateRegion = 0;
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <HAL_DSI_TearingEffectCallback+0x64>)
            LCD_SetUpdateRegion(updateRegion);
 800136c:	4630      	mov	r0, r6
            updateRegion = 0;
 800136e:	601e      	str	r6, [r3, #0]
            LCD_SetUpdateRegion(updateRegion);
 8001370:	f7ff ffc6 	bl	8001300 <LCD_SetUpdateRegion>
            HAL_DSI_Refresh(hdsi);
 8001374:	4620      	mov	r0, r4
 8001376:	f009 fc78 	bl	800ac6a <HAL_DSI_Refresh>
            displayRefreshing = true;
 800137a:	2301      	movs	r3, #1
 800137c:	702b      	strb	r3, [r5, #0]
    }
 800137e:	bd70      	pop	{r4, r5, r6, pc}
 8001380:	20027ca8 	.word	0x20027ca8
 8001384:	20000014 	.word	0x20000014
 8001388:	200097ae 	.word	0x200097ae
 800138c:	20009798 	.word	0x20009798

08001390 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
        updateRegion++;
 8001390:	4b33      	ldr	r3, [pc, #204]	; (8001460 <HAL_DSI_EndOfRefreshCallback+0xd0>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	3201      	adds	r2, #1
    {
 8001396:	b570      	push	{r4, r5, r6, lr}
        if (updateRegion < 4)
 8001398:	2a03      	cmp	r2, #3
        updateRegion++;
 800139a:	601a      	str	r2, [r3, #0]
        {
            DSI->WCR &= ~(DSI_WCR_DSIEN);
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 800139c:	4b31      	ldr	r3, [pc, #196]	; (8001464 <HAL_DSI_EndOfRefreshCallback+0xd4>)
    {
 800139e:	4605      	mov	r5, r0
 80013a0:	4c31      	ldr	r4, [pc, #196]	; (8001468 <HAL_DSI_EndOfRefreshCallback+0xd8>)
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 80013a2:	6819      	ldr	r1, [r3, #0]
 80013a4:	4b31      	ldr	r3, [pc, #196]	; (800146c <HAL_DSI_EndOfRefreshCallback+0xdc>)
        if (updateRegion < 4)
 80013a6:	dc2e      	bgt.n	8001406 <HAL_DSI_EndOfRefreshCallback+0x76>
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 80013a8:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 80013ac:	f020 0008 	bic.w	r0, r0, #8
 80013b0:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 80013b4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80013b8:	fb00 1102 	mla	r1, r0, r2, r1
            LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
            LTDC_Layer1->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
            LTDC_Layer1->CFBLR = ((832 * 2) << 16) | ((REAL_WIDTH) * 2 + 3);

            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
            LCD_SetUpdateRegion(updateRegion);
 80013bc:	4610      	mov	r0, r2
            LTDC_Layer1->CFBAR = ((uint32_t)currFbBase) + 200 * 2 * updateRegion;
 80013be:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
                ADJUSTED_WIDTH += 32;
 80013c2:	bf0c      	ite	eq
 80013c4:	23e8      	moveq	r3, #232	; 0xe8
            uint16_t ADJUSTED_WIDTH = 200;
 80013c6:	23c8      	movne	r3, #200	; 0xc8
            LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2; //adj
 80013c8:	4928      	ldr	r1, [pc, #160]	; (800146c <HAL_DSI_EndOfRefreshCallback+0xdc>)
 80013ca:	3302      	adds	r3, #2
 80013cc:	041b      	lsls	r3, r3, #16
 80013ce:	f443 73f1 	orr.w	r3, r3, #482	; 0x1e2
 80013d2:	610b      	str	r3, [r1, #16]
            LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 80013d4:	4b26      	ldr	r3, [pc, #152]	; (8001470 <HAL_DSI_EndOfRefreshCallback+0xe0>)
 80013d6:	614b      	str	r3, [r1, #20]
            LTDC_Layer1->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 80013d8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80013dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
            LTDC_Layer1->CFBLR = ((832 * 2) << 16) | ((REAL_WIDTH) * 2 + 3);
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <HAL_DSI_EndOfRefreshCallback+0xe4>)
 80013e2:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	624b      	str	r3, [r1, #36]	; 0x24
            LCD_SetUpdateRegion(updateRegion);
 80013ea:	f7ff ff89 	bl	8001300 <LCD_SetUpdateRegion>

            DSI->WCR |= DSI_WCR_DSIEN;
 80013ee:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <HAL_DSI_EndOfRefreshCallback+0xd8>)
            HAL_DSI_Refresh(hdsi);
 80013f0:	4628      	mov	r0, r5
            DSI->WCR |= DSI_WCR_DSIEN;
 80013f2:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 80013f6:	f043 0308 	orr.w	r3, r3, #8
        //             // Signal to the framework that display update has finished.
        //             HAL::getInstance()->frontPorchEntered();
        //         }
        //     }
        // }
    }
 80013fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DSI->WCR |= DSI_WCR_DSIEN;
 80013fe:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
            HAL_DSI_Refresh(hdsi);
 8001402:	f009 bc32 	b.w	800ac6a <HAL_DSI_Refresh>
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 8001406:	f8d4 2404 	ldr.w	r2, [r4, #1028]	; 0x404
            LCD_SetUpdateRegion(0);
 800140a:	2000      	movs	r0, #0
            DSI->WCR &= ~(DSI_WCR_DSIEN);
 800140c:	f022 0208 	bic.w	r2, r2, #8
 8001410:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
            LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001414:	4a18      	ldr	r2, [pc, #96]	; (8001478 <HAL_DSI_EndOfRefreshCallback+0xe8>)
            LTDC_Layer1->CFBAR = (uint32_t)currFbBase;
 8001416:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
            LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 800141a:	611a      	str	r2, [r3, #16]
            LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 800141c:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 8001420:	615a      	str	r2, [r3, #20]
            LTDC_Layer1->WHPCR = ((WIDTH + 2) << 16) | 3;
 8001422:	4a16      	ldr	r2, [pc, #88]	; (800147c <HAL_DSI_EndOfRefreshCallback+0xec>)
 8001424:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            LTDC_Layer1->CFBLR = (((832 * 2) << 16) | ((WIDTH * 2) + 3));
 8001428:	4a12      	ldr	r2, [pc, #72]	; (8001474 <HAL_DSI_EndOfRefreshCallback+0xe4>)
 800142a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
            LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800142e:	2201      	movs	r2, #1
 8001430:	625a      	str	r2, [r3, #36]	; 0x24
            LCD_SetUpdateRegion(0);
 8001432:	f7ff ff65 	bl	8001300 <LCD_SetUpdateRegion>
            DSI->WCR |= DSI_WCR_DSIEN;
 8001436:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
            GPIO::clear(GPIO::VSYNC_FREQ);
 800143a:	2000      	movs	r0, #0
            DSI->WCR |= DSI_WCR_DSIEN;
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001444:	f7ff fcda 	bl	8000dfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            displayRefreshing = false;
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_DSI_EndOfRefreshCallback+0xf0>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
        return instance;
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <HAL_DSI_EndOfRefreshCallback+0xf4>)
 8001450:	6818      	ldr	r0, [r3, #0]
            if (HAL::getInstance())
 8001452:	b120      	cbz	r0, 800145e <HAL_DSI_EndOfRefreshCallback+0xce>
        allowDMATransfers();
 8001454:	6803      	ldr	r3, [r0, #0]
    }
 8001456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	4718      	bx	r3
 800145e:	bd70      	pop	{r4, r5, r6, pc}
 8001460:	20009798 	.word	0x20009798
 8001464:	20009794 	.word	0x20009794
 8001468:	40016c00 	.word	0x40016c00
 800146c:	40016800 	.word	0x40016800
 8001470:	00ca01e3 	.word	0x00ca01e3
 8001474:	06800193 	.word	0x06800193
 8001478:	00ca01e2 	.word	0x00ca01e2
 800147c:	00ca0003 	.word	0x00ca0003
 8001480:	200097ae 	.word	0x200097ae
 8001484:	20027ca8 	.word	0x20027ca8

08001488 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001488:	4601      	mov	r1, r0
 800148a:	b508      	push	{r3, lr}
        return instance;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <IdleTaskHook+0x14>)
 800148e:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001490:	b101      	cbz	r1, 8001494 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001492:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001494:	f011 fdde 	bl	8013054 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001498:	2001      	movs	r0, #1
 800149a:	bd08      	pop	{r3, pc}
 800149c:	20027ca8 	.word	0x20027ca8

080014a0 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <_GLOBAL__sub_I_displayRefreshing+0x18>)
 80014a2:	2200      	movs	r2, #0
{
class KeySampler : public ButtonController
{
public:
    KeySampler()
    {
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <_GLOBAL__sub_I_displayRefreshing+0x1c>)
 80014a6:	605a      	str	r2, [r3, #4]
          cc_in(0)
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <_GLOBAL__sub_I_displayRefreshing+0x20>)
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <_GLOBAL__sub_I_displayRefreshing+0x24>)
 80014b0:	6003      	str	r3, [r0, #0]
        init();
 80014b2:	f7ff bb0d 	b.w	8000ad0 <_ZN8touchgfx10KeySampler4initEv>
 80014b6:	bf00      	nop
 80014b8:	2000979c 	.word	0x2000979c
 80014bc:	200097a8 	.word	0x200097a8
 80014c0:	0802bf18 	.word	0x0802bf18
 80014c4:	0802bf40 	.word	0x0802bf40

080014c8 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
 80014c8:	6940      	ldr	r0, [r0, #20]
 80014ca:	4770      	bx	lr

080014cc <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
 80014cc:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80014d0:	4770      	bx	lr

080014d2 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 80014d2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80014d4:	b923      	cbnz	r3, 80014e0 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 80014d6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80014d8:	3800      	subs	r0, #0
 80014da:	bf18      	it	ne
 80014dc:	2001      	movne	r0, #1
 80014de:	4770      	bx	lr
 80014e0:	2001      	movs	r0, #1
}
 80014e2:	4770      	bx	lr

080014e4 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 80014e4:	6880      	ldr	r0, [r0, #8]
 80014e6:	4770      	bx	lr

080014e8 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 80014e8:	4770      	bx	lr

080014ea <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 80014ea:	3004      	adds	r0, #4
{
 80014ec:	b510      	push	{r4, lr}
 80014ee:	460c      	mov	r4, r1
    *data = videoInfo;
 80014f0:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80014f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80014f6:	bd10      	pop	{r4, pc}

080014f8 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 80014f8:	4770      	bx	lr
	...

080014fc <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 80014fc:	b508      	push	{r3, lr}
    assert(0);
 80014fe:	4a03      	ldr	r2, [pc, #12]	; (800150c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8001500:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8001504:	4b02      	ldr	r3, [pc, #8]	; (8001510 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 8001506:	4803      	ldr	r0, [pc, #12]	; (8001514 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 8001508:	f029 fc38 	bl	802ad7c <__assert_func>
 800150c:	0802c244 	.word	0x0802c244
 8001510:	0802ee07 	.word	0x0802ee07
 8001514:	0802c29f 	.word	0x0802c29f

08001518 <_ZN20HardwareMJPEGDecoderD0Ev>:
 8001518:	b510      	push	{r4, lr}
 800151a:	4604      	mov	r4, r0
 800151c:	2144      	movs	r1, #68	; 0x44
 800151e:	f029 fa50 	bl	802a9c2 <_ZdlPvj>
 8001522:	4620      	mov	r0, r4
 8001524:	bd10      	pop	{r4, pc}
	...

08001528 <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8001528:	b538      	push	{r3, r4, r5, lr}
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 800152a:	2500      	movs	r5, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <_ZN20HardwareMJPEGDecoderC1Ev+0x44>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 800152e:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8001530:	6003      	str	r3, [r0, #0]
 8001532:	63c5      	str	r5, [r0, #60]	; 0x3c
 8001534:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 8001538:	e9c0 5505 	strd	r5, r5, [r0, #20]
 800153c:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8001540:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8001544:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
 8001548:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
    videoInfo.frame_width = 0;
 800154c:	e9c0 5503 	strd	r5, r5, [r0, #12]
    videoInfo.number_of_frames = 0;
 8001550:	e9c0 5501 	strd	r5, r5, [r0, #4]
    TGFX_JPEG_InitColorTables();
 8001554:	f001 fdb6 	bl	80030c4 <TGFX_JPEG_InitColorTables>
    semDecodingDone = SEM_CREATE();
 8001558:	462a      	mov	r2, r5
 800155a:	4629      	mov	r1, r5
 800155c:	2001      	movs	r0, #1
 800155e:	f00d fb65 	bl	800ec2c <osSemaphoreNew>
 8001562:	4b03      	ldr	r3, [pc, #12]	; (8001570 <_ZN20HardwareMJPEGDecoderC1Ev+0x48>)
 8001564:	6018      	str	r0, [r3, #0]
}
 8001566:	4620      	mov	r0, r4
 8001568:	bd38      	pop	{r3, r4, r5, pc}
 800156a:	bf00      	nop
 800156c:	0802c528 	.word	0x0802c528
 8001570:	200097f4 	.word	0x200097f4

08001574 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 8001574:	b410      	push	{r4}
 8001576:	460c      	mov	r4, r1
 8001578:	4611      	mov	r1, r2
 800157a:	461a      	mov	r2, r3
    if (reader != 0)
 800157c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800157e:	b13b      	cbz	r3, 8001590 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8001580:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001582:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001584:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 8001586:	4420      	add	r0, r4
}
 8001588:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 800158c:	f029 be86 	b.w	802b29c <strncmp>
        src = (const char*)movieData + offset;
 8001590:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001592:	e7f8      	b.n	8001586 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08001594 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8001594:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 8001596:	b510      	push	{r4, lr}
    if (reader != 0)
 8001598:	b173      	cbz	r3, 80015b8 <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 800159a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
 800159c:	6b42      	ldr	r2, [r0, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 800159e:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
 80015a0:	1853      	adds	r3, r2, r1
 80015a2:	5c52      	ldrb	r2, [r2, r1]
 80015a4:	7898      	ldrb	r0, [r3, #2]
 80015a6:	785c      	ldrb	r4, [r3, #1]
 80015a8:	0400      	lsls	r0, r0, #16
 80015aa:	78db      	ldrb	r3, [r3, #3]
 80015ac:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80015b0:	4310      	orrs	r0, r2
 80015b2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 80015b6:	bd10      	pop	{r4, pc}
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 80015b8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80015ba:	5858      	ldr	r0, [r3, r1]
 80015bc:	e7fb      	b.n	80015b6 <_ZN20HardwareMJPEGDecoder6getU32Em+0x22>

080015be <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 80015be:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80015c0:	b143      	cbz	r3, 80015d4 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 80015c2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80015c4:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
 80015c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80015c8:	185a      	adds	r2, r3, r1
 80015ca:	5c58      	ldrb	r0, [r3, r1]
 80015cc:	7852      	ldrb	r2, [r2, #1]
 80015ce:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80015d2:	4770      	bx	lr
        return d[0] | (d[1] << 8);
 80015d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80015d6:	5a58      	ldrh	r0, [r3, r1]
}
 80015d8:	4770      	bx	lr
	...

080015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 80015dc:	b570      	push	{r4, r5, r6, lr}
 80015de:	4604      	mov	r4, r0
    if (reader != 0)
 80015e0:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
 80015e2:	460d      	mov	r5, r1
 80015e4:	4616      	mov	r6, r2
    if (reader != 0)
 80015e6:	b1d8      	cbz	r0, 8001620 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 80015e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d208      	bcs.n	8001600 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80015ee:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 80015f0:	4a0d      	ldr	r2, [pc, #52]	; (8001628 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 80015f2:	21a3      	movs	r1, #163	; 0xa3
 80015f4:	480d      	ldr	r0, [pc, #52]	; (800162c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80015f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            assert(!"Buffer to small");
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 80015fc:	f029 fbbe 	bl	802ad7c <__assert_func>
        reader->seek(offset);
 8001600:	6803      	ldr	r3, [r0, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 8001606:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001608:	4632      	mov	r2, r6
 800160a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800160c:	6803      	ldr	r3, [r0, #0]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	4798      	blx	r3
 8001612:	b910      	cbnz	r0, 800161a <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8001614:	230d      	movs	r3, #13
 8001616:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
 800161a:	6b60      	ldr	r0, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
 800161c:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 800161e:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 8001620:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001622:	4408      	add	r0, r1
 8001624:	e7fb      	b.n	800161e <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 8001626:	bf00      	nop
 8001628:	0802c308 	.word	0x0802c308
 800162c:	0802c29f 	.word	0x0802c29f
 8001630:	0802c2f5 	.word	0x0802c2f5

08001634 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 8001634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8001638:	6943      	ldr	r3, [r0, #20]
{
 800163a:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800163c:	b92b      	cbnz	r3, 800164a <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 8001640:	21e9      	movs	r1, #233	; 0xe9
 8001642:	4a22      	ldr	r2, [pc, #136]	; (80016cc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 8001644:	4822      	ldr	r0, [pc, #136]	; (80016d0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 8001646:	f029 fb99 	bl	802ad7c <__assert_func>
    readData(currentMovieOffset, 8);
 800164a:	2208      	movs	r2, #8
 800164c:	6981      	ldr	r1, [r0, #24]
 800164e:	f7ff ffc5 	bl	80015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001652:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8001654:	f243 0630 	movw	r6, #12336	; 0x3030
 8001658:	f246 3764 	movw	r7, #25444	; 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800165c:	3104      	adds	r1, #4
 800165e:	4620      	mov	r0, r4
 8001660:	f7ff ff98 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8001664:	69a3      	ldr	r3, [r4, #24]
 8001666:	4418      	add	r0, r3
 8001668:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800166a:	f100 0208 	add.w	r2, r0, #8
 800166e:	429a      	cmp	r2, r3
 8001670:	d306      	bcc.n	8001680 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 8001672:	2301      	movs	r3, #1
    return false;
 8001674:	2000      	movs	r0, #0
    frameNumber = 1;
 8001676:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 8001678:	6a23      	ldr	r3, [r4, #32]
 800167a:	61a3      	str	r3, [r4, #24]
}
 800167c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8001680:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8001682:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 8001686:	2208      	movs	r2, #8
 8001688:	4620      	mov	r0, r4
        frameNumber++;
 800168a:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800168c:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 8001690:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8001692:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 8001694:	f7ff ffa2 	bl	80015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 8001698:	f8d4 9018 	ldr.w	r9, [r4, #24]
 800169c:	4620      	mov	r0, r4
 800169e:	4649      	mov	r1, r9
 80016a0:	f7ff ff8d 	bl	80015be <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80016a4:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 80016a8:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80016aa:	4620      	mov	r0, r4
 80016ac:	f7ff ff87 	bl	80015be <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 80016b0:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80016b4:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 80016b6:	4620      	mov	r0, r4
 80016b8:	f7ff ff6c 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80016bc:	45b0      	cmp	r8, r6
 80016be:	d1d1      	bne.n	8001664 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 80016c0:	42bd      	cmp	r5, r7
 80016c2:	d1cf      	bne.n	8001664 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 80016c4:	2001      	movs	r0, #1
 80016c6:	e7d9      	b.n	800167c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 80016c8:	0802c34a 	.word	0x0802c34a
 80016cc:	0802c393 	.word	0x0802c393
 80016d0:	0802c29f 	.word	0x0802c29f

080016d4 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber==0)
 80016d4:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 80016d6:	6803      	ldr	r3, [r0, #0]
 80016d8:	bf38      	it	cc
 80016da:	2101      	movcc	r1, #1
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80016de:	b570      	push	{r4, r5, r6, lr}
 80016e0:	460d      	mov	r5, r1
 80016e2:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 80016e4:	4798      	blx	r3
 80016e6:	42a8      	cmp	r0, r5
 80016e8:	d204      	bcs.n	80016f4 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	4620      	mov	r0, r4
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	4798      	blx	r3
 80016f2:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
 80016f4:	1e6b      	subs	r3, r5, #1
 80016f6:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 80016f8:	2210      	movs	r2, #16
 80016fa:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
 80016fc:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8001700:	f106 0108 	add.w	r1, r6, #8
 8001704:	f7ff ff6a 	bl	80015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8001708:	f106 0110 	add.w	r1, r6, #16
 800170c:	4620      	mov	r0, r4
 800170e:	f7ff ff41 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001712:	6a23      	ldr	r3, [r4, #32]
 8001714:	3b04      	subs	r3, #4
 8001716:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 8001718:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 800171c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001720 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
{
 8001720:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentMovieOffset = 0;
 8001724:	2100      	movs	r1, #0
{
 8001726:	4604      	mov	r4, r0
    readData(0, 72);
 8001728:	2248      	movs	r2, #72	; 0x48
    currentMovieOffset = 0;
 800172a:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 800172c:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    readData(0, 72);
 8001730:	f7ff ff54 	bl	80015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 8001734:	69a7      	ldr	r7, [r4, #24]
 8001736:	2304      	movs	r3, #4
 8001738:	4a64      	ldr	r2, [pc, #400]	; (80018cc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800173a:	4639      	mov	r1, r7
 800173c:	4620      	mov	r0, r4
 800173e:	f7ff ff19 	bl	8001574 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001742:	b148      	cbz	r0, 8001758 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 8001744:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 8001746:	4a62      	ldr	r2, [pc, #392]	; (80018d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 8001748:	f240 1131 	movw	r1, #305	; 0x131
        lastError = AVI_ERROR_NOT_RIFF;
 800174c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        assert(!"RIFF header not found");
 8001750:	4b60      	ldr	r3, [pc, #384]	; (80018d4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
        assert(!"AVI header not found");
 8001752:	4861      	ldr	r0, [pc, #388]	; (80018d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8001754:	f029 fb12 	bl	802ad7c <__assert_func>
    currentMovieOffset += 8;
 8001758:	f107 0108 	add.w	r1, r7, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 800175c:	2304      	movs	r3, #4
 800175e:	4a5f      	ldr	r2, [pc, #380]	; (80018dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8001760:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 8001762:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8001764:	f7ff ff06 	bl	8001574 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001768:	b138      	cbz	r0, 800177a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800176a:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 800176c:	4a58      	ldr	r2, [pc, #352]	; (80018d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 800176e:	f240 1139 	movw	r1, #313	; 0x139
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8001772:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        assert(!"AVI header not found");
 8001776:	4b5a      	ldr	r3, [pc, #360]	; (80018e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 8001778:	e7eb      	b.n	8001752 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 800177a:	f107 010c 	add.w	r1, r7, #12
    if (compare(currentMovieOffset, "LIST", 4))
 800177e:	2304      	movs	r3, #4
 8001780:	4a58      	ldr	r2, [pc, #352]	; (80018e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8001782:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8001784:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8001786:	f7ff fef5 	bl	8001574 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800178a:	4606      	mov	r6, r0
 800178c:	b138      	cbz	r0, 800179e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800178e:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8001790:	4a4f      	ldr	r2, [pc, #316]	; (80018d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 8001792:	f44f 71a0 	mov.w	r1, #320	; 0x140
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8001796:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        assert(!"AVI LIST not found");
 800179a:	4b53      	ldr	r3, [pc, #332]	; (80018e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 800179c:	e7d9      	b.n	8001752 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 800179e:	f107 0110 	add.w	r1, r7, #16
 80017a2:	4620      	mov	r0, r4
 80017a4:	f7ff fef6 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 80017a8:	4605      	mov	r5, r0
 80017aa:	b920      	cbnz	r0, 80017b6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 80017ac:	4b4f      	ldr	r3, [pc, #316]	; (80018ec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 80017ae:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80017b2:	4a47      	ldr	r2, [pc, #284]	; (80018d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 80017b4:	e7cd      	b.n	8001752 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 80017b6:	f107 0814 	add.w	r8, r7, #20
    if (compare(offset, "hdrl", 4))
 80017ba:	2304      	movs	r3, #4
 80017bc:	4a4c      	ldr	r2, [pc, #304]	; (80018f0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 80017be:	4620      	mov	r0, r4
 80017c0:	4641      	mov	r1, r8
 80017c2:	f7ff fed7 	bl	8001574 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80017c6:	2800      	cmp	r0, #0
 80017c8:	d04b      	beq.n	8001862 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80017ca:	2306      	movs	r3, #6
 80017cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (compare(offset, "avih", 4))
 80017d0:	2304      	movs	r3, #4
 80017d2:	4a48      	ldr	r2, [pc, #288]	; (80018f4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
 80017d4:	f107 0118 	add.w	r1, r7, #24
 80017d8:	4620      	mov	r0, r4
 80017da:	f7ff fecb 	bl	8001574 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80017de:	2800      	cmp	r0, #0
 80017e0:	d041      	beq.n	8001866 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x146>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 80017e2:	2307      	movs	r3, #7
 80017e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 80017e8:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80017ea:	4f43      	ldr	r7, [pc, #268]	; (80018f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
    readData(listOffset, 12);
 80017ec:	220c      	movs	r2, #12
 80017ee:	4620      	mov	r0, r4
 80017f0:	4629      	mov	r1, r5
 80017f2:	f7ff fef3 	bl	80015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80017f6:	f105 0608 	add.w	r6, r5, #8
 80017fa:	2304      	movs	r3, #4
 80017fc:	463a      	mov	r2, r7
 80017fe:	4620      	mov	r0, r4
 8001800:	4631      	mov	r1, r6
 8001802:	f7ff feb7 	bl	8001574 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8001806:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800180a:	2800      	cmp	r0, #0
 800180c:	d04a      	beq.n	80018a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 800180e:	2b00      	cmp	r3, #0
 8001810:	d14a      	bne.n	80018a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x188>
 8001812:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8001814:	1d29      	adds	r1, r5, #4
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8001816:	42ab      	cmp	r3, r5
 8001818:	d84a      	bhi.n	80018b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x190>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 800181a:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800181e:	1d29      	adds	r1, r5, #4
 8001820:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 8001822:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8001824:	9101      	str	r1, [sp, #4]
 8001826:	f7ff feb5 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800182a:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset+4)+8;
 800182c:	9901      	ldr	r1, [sp, #4]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800182e:	6260      	str	r0, [r4, #36]	; 0x24
    const uint32_t listSize = getU32(listOffset+4)+8;
 8001830:	4620      	mov	r0, r4
 8001832:	f7ff feaf 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 8001836:	4406      	add	r6, r0
    readData(listOffset, 4);
 8001838:	2204      	movs	r2, #4
 800183a:	4620      	mov	r0, r4
 800183c:	4631      	mov	r1, r6
 800183e:	f7ff fecd 	bl	80015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8001842:	2304      	movs	r3, #4
 8001844:	4a2d      	ldr	r2, [pc, #180]	; (80018fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1dc>)
 8001846:	4631      	mov	r1, r6
 8001848:	4620      	mov	r0, r4
 800184a:	f7ff fe93 	bl	8001574 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800184e:	2800      	cmp	r0, #0
 8001850:	d139      	bne.n	80018c6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a6>
    frameNumber = 1; /* next frame number is 1 */
 8001852:	2301      	movs	r3, #1
        indexOffset = listOffset;
 8001854:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 8001856:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 8001858:	69a3      	ldr	r3, [r4, #24]
 800185a:	6223      	str	r3, [r4, #32]
}
 800185c:	b002      	add	sp, #8
 800185e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 8001862:	2601      	movs	r6, #1
 8001864:	e7b4      	b.n	80017d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 8001866:	2e00      	cmp	r6, #0
 8001868:	d0be      	beq.n	80017e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset)/1000;
 800186a:	f107 0120 	add.w	r1, r7, #32
 800186e:	4620      	mov	r0, r4
 8001870:	f7ff fe90 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001874:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8001878:	f107 0130 	add.w	r1, r7, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset)/1000;
 800187c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001880:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8001882:	4620      	mov	r0, r4
 8001884:	f7ff fe86 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8001888:	f107 0140 	add.w	r1, r7, #64	; 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 800188c:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800188e:	4620      	mov	r0, r4
 8001890:	f7ff fe80 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8001894:	f107 0144 	add.w	r1, r7, #68	; 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8001898:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800189a:	4620      	mov	r0, r4
 800189c:	f7ff fe7a 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80018a0:	6120      	str	r0, [r4, #16]
 80018a2:	e7a1      	b.n	80017e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0b8      	beq.n	800181a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xfa>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 80018a8:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80018aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return;
 80018ae:	e7d5      	b.n	800185c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13c>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80018b0:	4620      	mov	r0, r4
 80018b2:	f7ff fe6f 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80018b6:	3008      	adds	r0, #8
        readData(listOffset, 12);
 80018b8:	220c      	movs	r2, #12
        listOffset += listSize;
 80018ba:	4405      	add	r5, r0
        readData(listOffset, 12);
 80018bc:	4620      	mov	r0, r4
 80018be:	4629      	mov	r1, r5
 80018c0:	f7ff fe8c 	bl	80015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80018c4:	e797      	b.n	80017f6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80018c6:	230b      	movs	r3, #11
 80018c8:	e7ef      	b.n	80018aa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18a>
 80018ca:	bf00      	nop
 80018cc:	0802c3c6 	.word	0x0802c3c6
 80018d0:	0802c3e4 	.word	0x0802c3e4
 80018d4:	0802c3cb 	.word	0x0802c3cb
 80018d8:	0802c29f 	.word	0x0802c29f
 80018dc:	0802c411 	.word	0x0802c411
 80018e0:	0802c416 	.word	0x0802c416
 80018e4:	0802c42e 	.word	0x0802c42e
 80018e8:	0802c433 	.word	0x0802c433
 80018ec:	0802c449 	.word	0x0802c449
 80018f0:	0802c455 	.word	0x0802c455
 80018f4:	0802c45a 	.word	0x0802c45a
 80018f8:	0802c45f 	.word	0x0802c45f
 80018fc:	0802c464 	.word	0x0802c464

08001900 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8001900:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; /* not using reader */
 8001904:	2200      	movs	r2, #0
 8001906:	6302      	str	r2, [r0, #48]	; 0x30
    readVideoHeader();
 8001908:	f7ff bf0a 	b.w	8001720 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

0800190c <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 800190c:	b510      	push	{r4, lr}
    movieData = 0;
 800190e:	2300      	movs	r3, #0
{
 8001910:	4604      	mov	r4, r0
 8001912:	4608      	mov	r0, r1
    movieData = 0;
 8001914:	62e3      	str	r3, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
 8001916:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8001918:	6321      	str	r1, [r4, #48]	; 0x30
    movieLength = reader.getDataLength();
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	4798      	blx	r3
 800191e:	62a0      	str	r0, [r4, #40]	; 0x28
    readVideoHeader();
 8001920:	4620      	mov	r0, r4
}
 8001922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 8001926:	f7ff befb 	b.w	8001720 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

0800192c <JPEG_Decode_DMA>:
  * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
  * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
 800192c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    FrameBufferAddress = output;
 800192e:	4c14      	ldr	r4, [pc, #80]	; (8001980 <JPEG_Decode_DMA+0x54>)
    JPEG_output_is_paused = 0;
    JPEG_OUT_Read_BufferIndex = 0;
    JPEG_OUT_Write_BufferIndex = 0;
 8001930:	4d14      	ldr	r5, [pc, #80]	; (8001984 <JPEG_Decode_DMA+0x58>)
    FrameBufferAddress = output;
 8001932:	6023      	str	r3, [r4, #0]
    JPEG_output_is_paused = 0;
 8001934:	2400      	movs	r4, #0
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <JPEG_Decode_DMA+0x5c>)
 8001938:	601c      	str	r4, [r3, #0]
    JPEG_OUT_Read_BufferIndex = 0;
 800193a:	4b14      	ldr	r3, [pc, #80]	; (800198c <JPEG_Decode_DMA+0x60>)
    JPEG_OUT_Write_BufferIndex = 0;
 800193c:	602c      	str	r4, [r5, #0]
    JPEG_OUT_Read_BufferIndex = 0;
 800193e:	601c      	str	r4, [r3, #0]
    JPEG_InputImageIndex = 0;
 8001940:	4b13      	ldr	r3, [pc, #76]	; (8001990 <JPEG_Decode_DMA+0x64>)
 8001942:	601c      	str	r4, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <JPEG_Decode_DMA+0x68>)
 8001946:	6019      	str	r1, [r3, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <JPEG_Decode_DMA+0x6c>)
 800194a:	601a      	str	r2, [r3, #0]
    MCU_BlockIndex = 0;
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <JPEG_Decode_DMA+0x70>)
 800194e:	601c      	str	r4, [r3, #0]

    /* Init buffers */
    for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
    {
        Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <JPEG_Decode_DMA+0x74>)
        Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
    }

    /* Do not return from this function until done with decoding all chunks. */
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001952:	682a      	ldr	r2, [r5, #0]
 8001954:	250c      	movs	r5, #12
        Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8001956:	701c      	strb	r4, [r3, #0]
        Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 8001958:	609c      	str	r4, [r3, #8]
        Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 800195a:	731c      	strb	r4, [r3, #12]
        Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 800195c:	615c      	str	r4, [r3, #20]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 800195e:	fb05 3302 	mla	r3, r5, r2, r3
 8001962:	4a10      	ldr	r2, [pc, #64]	; (80019a4 <JPEG_Decode_DMA+0x78>)
 8001964:	f44f 75c0 	mov.w	r5, #384	; 0x180
 8001968:	68d2      	ldr	r2, [r2, #12]
 800196a:	436a      	muls	r2, r5
 800196c:	9200      	str	r2, [sp, #0]
 800196e:	f44f 4250 	mov.w	r2, #53248	; 0xd000
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f00a fa7e 	bl	800be74 <HAL_JPEG_Decode_DMA>

    return 0;
}
 8001978:	4620      	mov	r0, r4
 800197a:	b003      	add	sp, #12
 800197c:	bd30      	pop	{r4, r5, pc}
 800197e:	bf00      	nop
 8001980:	200097d0 	.word	0x200097d0
 8001984:	200097f0 	.word	0x200097f0
 8001988:	200097e0 	.word	0x200097e0
 800198c:	200097ec 	.word	0x200097ec
 8001990:	200097dc 	.word	0x200097dc
 8001994:	200097e4 	.word	0x200097e4
 8001998:	200097e8 	.word	0x200097e8
 800199c:	200097b0 	.word	0x200097b0
 80019a0:	20000018 	.word	0x20000018
 80019a4:	200097b4 	.word	0x200097b4

080019a8 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 80019a8:	b508      	push	{r3, lr}
    if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80019aa:	684b      	ldr	r3, [r1, #4]
{
 80019ac:	4608      	mov	r0, r1
    if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d119      	bne.n	80019e6 <HAL_JPEG_InfoReadyCallback+0x3e>
    {
        if ((pInfo->ImageWidth % 16) != 0)
 80019b2:	68cb      	ldr	r3, [r1, #12]
 80019b4:	071a      	lsls	r2, r3, #28
            pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));

        if ((pInfo->ImageHeight % 16) != 0)
            pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));

        HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 80019b6:	4a1e      	ldr	r2, [pc, #120]	; (8001a30 <HAL_JPEG_InfoReadyCallback+0x88>)
            pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 80019b8:	bf1e      	ittt	ne
 80019ba:	f023 030f 	bicne.w	r3, r3, #15
 80019be:	3310      	addne	r3, #16
 80019c0:	60cb      	strne	r3, [r1, #12]
        if ((pInfo->ImageHeight % 16) != 0)
 80019c2:	688b      	ldr	r3, [r1, #8]
 80019c4:	0719      	lsls	r1, r3, #28
        HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 80019c6:	491b      	ldr	r1, [pc, #108]	; (8001a34 <HAL_JPEG_InfoReadyCallback+0x8c>)
            pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 80019c8:	bf1e      	ittt	ne
 80019ca:	f023 030f 	bicne.w	r3, r3, #15
 80019ce:	3310      	addne	r3, #16
 80019d0:	6083      	strne	r3, [r0, #8]
        HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 80019d2:	f001 fb17 	bl	8003004 <TGFX_JPEG_GetDecodeColorConvertFunc>
        if (status != HAL_OK)
 80019d6:	b348      	cbz	r0, 8001a2c <HAL_JPEG_InfoReadyCallback+0x84>
        {
            assert(status == HAL_OK);
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <HAL_JPEG_InfoReadyCallback+0x90>)
 80019da:	f240 2126 	movw	r1, #550	; 0x226
 80019de:	4a17      	ldr	r2, [pc, #92]	; (8001a3c <HAL_JPEG_InfoReadyCallback+0x94>)
                pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
        }
        HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
        if (status != HAL_OK)
        {
            assert(status == HAL_OK);
 80019e0:	4817      	ldr	r0, [pc, #92]	; (8001a40 <HAL_JPEG_InfoReadyCallback+0x98>)
 80019e2:	f029 f9cb 	bl	802ad7c <__assert_func>
        if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d117      	bne.n	8001a1a <HAL_JPEG_InfoReadyCallback+0x72>
            if ((pInfo->ImageWidth % 16) != 0)
 80019ea:	68cb      	ldr	r3, [r1, #12]
 80019ec:	071a      	lsls	r2, r3, #28
 80019ee:	d003      	beq.n	80019f8 <HAL_JPEG_InfoReadyCallback+0x50>
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 80019f0:	f023 030f 	bic.w	r3, r3, #15
 80019f4:	3310      	adds	r3, #16
                pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80019f6:	60c3      	str	r3, [r0, #12]
            if ((pInfo->ImageHeight % 8) != 0)
 80019f8:	6883      	ldr	r3, [r0, #8]
 80019fa:	075a      	lsls	r2, r3, #29
                pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 80019fc:	bf1e      	ittt	ne
 80019fe:	f023 0307 	bicne.w	r3, r3, #7
 8001a02:	3308      	addne	r3, #8
 8001a04:	6083      	strne	r3, [r0, #8]
        HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 8001a06:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <HAL_JPEG_InfoReadyCallback+0x88>)
 8001a08:	490a      	ldr	r1, [pc, #40]	; (8001a34 <HAL_JPEG_InfoReadyCallback+0x8c>)
 8001a0a:	f00f fdfb 	bl	8011604 <JPEG_GetDecodeColorConvertFunc>
        if (status != HAL_OK)
 8001a0e:	b168      	cbz	r0, 8001a2c <HAL_JPEG_InfoReadyCallback+0x84>
            assert(status == HAL_OK);
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_JPEG_InfoReadyCallback+0x90>)
 8001a12:	f240 213f 	movw	r1, #575	; 0x23f
 8001a16:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <HAL_JPEG_InfoReadyCallback+0x94>)
 8001a18:	e7e2      	b.n	80019e0 <HAL_JPEG_InfoReadyCallback+0x38>
        if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f3      	bne.n	8001a06 <HAL_JPEG_InfoReadyCallback+0x5e>
            if ((pInfo->ImageWidth % 8) != 0)
 8001a1e:	68cb      	ldr	r3, [r1, #12]
 8001a20:	0759      	lsls	r1, r3, #29
 8001a22:	d0e9      	beq.n	80019f8 <HAL_JPEG_InfoReadyCallback+0x50>
                pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8001a24:	f023 0307 	bic.w	r3, r3, #7
 8001a28:	3308      	adds	r3, #8
 8001a2a:	e7e4      	b.n	80019f6 <HAL_JPEG_InfoReadyCallback+0x4e>
        }
    }
}
 8001a2c:	bd08      	pop	{r3, pc}
 8001a2e:	bf00      	nop
 8001a30:	200097c8 	.word	0x200097c8
 8001a34:	200097cc 	.word	0x200097cc
 8001a38:	0802c469 	.word	0x0802c469
 8001a3c:	0802c47a 	.word	0x0802c47a
 8001a40:	0802c29f 	.word	0x0802c29f

08001a44 <HAL_JPEG_GetDataCallback>:
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
    /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
    JPEG_InputImageIndex += NbDecodedData;
 8001a44:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <HAL_JPEG_GetDataCallback+0x30>)
 8001a46:	6813      	ldr	r3, [r2, #0]
 8001a48:	440b      	add	r3, r1
{
 8001a4a:	b430      	push	{r4, r5}
    JPEG_InputImageIndex += NbDecodedData;
 8001a4c:	6013      	str	r3, [r2, #0]
    if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_JPEG_GetDataCallback+0x34>)
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d20c      	bcs.n	8001a70 <HAL_JPEG_GetDataCallback+0x2c>
    {
        JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001a56:	4c09      	ldr	r4, [pc, #36]	; (8001a7c <HAL_JPEG_GetDataCallback+0x38>)
        uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8001a58:	1ad2      	subs	r2, r2, r3
        JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001a5a:	6825      	ldr	r5, [r4, #0]
        HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001a5c:	f5b2 4f50 	cmp.w	r2, #53248	; 0xd000
        JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001a60:	4429      	add	r1, r5
        HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001a62:	bf28      	it	cs
 8001a64:	f44f 4250 	movcs.w	r2, #53248	; 0xd000
        JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8001a68:	6021      	str	r1, [r4, #0]
    }
}
 8001a6a:	bc30      	pop	{r4, r5}
        HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8001a6c:	f00a ba69 	b.w	800bf42 <HAL_JPEG_ConfigInputBuffer>
}
 8001a70:	bc30      	pop	{r4, r5}
 8001a72:	4770      	bx	lr
 8001a74:	200097dc 	.word	0x200097dc
 8001a78:	200097e8 	.word	0x200097e8
 8001a7c:	200097e4 	.word	0x200097e4

08001a80 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 8001a80:	b570      	push	{r4, r5, r6, lr}
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8001a82:	4c19      	ldr	r4, [pc, #100]	; (8001ae8 <HAL_JPEG_DataReadyCallback+0x68>)
 8001a84:	210c      	movs	r1, #12
 8001a86:	4d19      	ldr	r5, [pc, #100]	; (8001aec <HAL_JPEG_DataReadyCallback+0x6c>)
{
 8001a88:	4606      	mov	r6, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8001a8a:	6823      	ldr	r3, [r4, #0]
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	434b      	muls	r3, r1
 8001a90:	54e8      	strb	r0, [r5, r3]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8001a92:	6823      	ldr	r3, [r4, #0]
 8001a94:	fb01 5303 	mla	r3, r1, r3, r5
 8001a98:	609a      	str	r2, [r3, #8]

    JPEG_OUT_Write_BufferIndex++;
 8001a9a:	6823      	ldr	r3, [r4, #0]
 8001a9c:	4403      	add	r3, r0
 8001a9e:	6023      	str	r3, [r4, #0]
    if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	4283      	cmp	r3, r0
 8001aa4:	d901      	bls.n	8001aaa <HAL_JPEG_DataReadyCallback+0x2a>
    {
        JPEG_OUT_Write_BufferIndex = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	6023      	str	r3, [r4, #0]
    }

    /* if the other buffer is full, then ui thread might be converting it */
    if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8001aaa:	6823      	ldr	r3, [r4, #0]
 8001aac:	220c      	movs	r2, #12
 8001aae:	4353      	muls	r3, r2
 8001ab0:	5ceb      	ldrb	r3, [r5, r3]
 8001ab2:	b133      	cbz	r3, 8001ac2 <HAL_JPEG_DataReadyCallback+0x42>
    {
        HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8001ab4:	2102      	movs	r1, #2
 8001ab6:	4630      	mov	r0, r6
 8001ab8:	f00a fa10 	bl	800bedc <HAL_JPEG_Pause>
        JPEG_output_is_paused = 1;
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <HAL_JPEG_DataReadyCallback+0x70>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]
    }
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8001ac2:	6822      	ldr	r2, [r4, #0]
 8001ac4:	210c      	movs	r1, #12
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_JPEG_DataReadyCallback+0x74>)
 8001ac8:	4630      	mov	r0, r6
 8001aca:	fb01 5502 	mla	r5, r1, r2, r5
 8001ace:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	6869      	ldr	r1, [r5, #4]
 8001ad6:	435a      	muls	r2, r3
 8001ad8:	f00a fa36 	bl	800bf48 <HAL_JPEG_ConfigOutputBuffer>

    /* Signal Hardware Decoding to wake up */
    SEM_POST(semDecodingDone);
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_JPEG_DataReadyCallback+0x78>)
}
 8001ade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SEM_POST(semDecodingDone);
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	f00d b932 	b.w	800ed4c <osSemaphoreRelease>
 8001ae8:	200097f0 	.word	0x200097f0
 8001aec:	20000018 	.word	0x20000018
 8001af0:	200097e0 	.word	0x200097e0
 8001af4:	200097b4 	.word	0x200097b4
 8001af8:	200097f4 	.word	0x200097f4

08001afc <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001afc:	b672      	cpsid	i
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
    __disable_irq();
    while (1)
 8001afe:	e7fe      	b.n	8001afe <HAL_JPEG_ErrorCallback+0x2>

08001b00 <HAL_JPEG_DecodeCpltCallback>:
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
    Jpeg_HWDecodingEnd = 1;
 8001b00:	4b01      	ldr	r3, [pc, #4]	; (8001b08 <HAL_JPEG_DecodeCpltCallback+0x8>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]
}
 8001b06:	4770      	bx	lr
 8001b08:	200097d8 	.word	0x200097d8

08001b0c <JPEG_OutputHandler>:
  * @brief  JPEG Ouput Data BackGround Postprocessing .
  * @param hjpeg: JPEG handle pointer
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg)
{
 8001b0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    uint32_t ConvertedDataCount;

    if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL)
 8001b10:	4d38      	ldr	r5, [pc, #224]	; (8001bf4 <JPEG_OutputHandler+0xe8>)
 8001b12:	260c      	movs	r6, #12
 8001b14:	4c38      	ldr	r4, [pc, #224]	; (8001bf8 <JPEG_OutputHandler+0xec>)
 8001b16:	682b      	ldr	r3, [r5, #0]
 8001b18:	4373      	muls	r3, r6
 8001b1a:	5ce3      	ldrb	r3, [r4, r3]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d149      	bne.n	8001bb4 <JPEG_OutputHandler+0xa8>
    {
        /* Invalidate DCache prior to YCbCr/RGB software conversion. */
        if (SCB->CCR & SCB_CCR_DC_Msk)
 8001b20:	4a36      	ldr	r2, [pc, #216]	; (8001bfc <JPEG_OutputHandler+0xf0>)
 8001b22:	6953      	ldr	r3, [r2, #20]
 8001b24:	03db      	lsls	r3, r3, #15
 8001b26:	d51e      	bpl.n	8001b66 <JPEG_OutputHandler+0x5a>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001b32:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001b36:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001b3a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001b3e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001b42:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001b44:	ea03 0c06 	and.w	ip, r3, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001b48:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001b4a:	ea4c 7781 	orr.w	r7, ip, r1, lsl #30
      } while (ways-- != 0U);
 8001b4e:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001b50:	f8c2 7274 	str.w	r7, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8001b54:	d2f9      	bcs.n	8001b4a <JPEG_OutputHandler+0x3e>
    } while(sets-- != 0U);
 8001b56:	3b20      	subs	r3, #32
 8001b58:	f113 0f20 	cmn.w	r3, #32
 8001b5c:	d1f2      	bne.n	8001b44 <JPEG_OutputHandler+0x38>
 8001b5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b62:	f3bf 8f6f 	isb	sy
        {
            SCB_CleanInvalidateDCache();
        }

        MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 8001b66:	260c      	movs	r6, #12
 8001b68:	4f25      	ldr	r7, [pc, #148]	; (8001c00 <JPEG_OutputHandler+0xf4>)
 8001b6a:	6828      	ldr	r0, [r5, #0]
 8001b6c:	eb0d 0306 	add.w	r3, sp, r6
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	fb06 4000 	mla	r0, r6, r0, r4
 8001b76:	4923      	ldr	r1, [pc, #140]	; (8001c04 <JPEG_OutputHandler+0xf8>)
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <JPEG_OutputHandler+0xfc>)
 8001b7c:	6809      	ldr	r1, [r1, #0]
 8001b7e:	f8d3 8000 	ldr.w	r8, [r3]
 8001b82:	6883      	ldr	r3, [r0, #8]
 8001b84:	6840      	ldr	r0, [r0, #4]
 8001b86:	47c0      	blx	r8

        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8001b88:	682a      	ldr	r2, [r5, #0]
        MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 8001b8a:	683b      	ldr	r3, [r7, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8001b8c:	4356      	muls	r6, r2
        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;

        JPEG_OUT_Read_BufferIndex++;
 8001b8e:	3201      	adds	r2, #1
        MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 8001b90:	4418      	add	r0, r3
        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8001b92:	2300      	movs	r3, #0
        JPEG_OUT_Read_BufferIndex++;
 8001b94:	2a01      	cmp	r2, #1
        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8001b96:	eb04 0106 	add.w	r1, r4, r6
 8001b9a:	55a3      	strb	r3, [r4, r6]
        Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;
 8001b9c:	608b      	str	r3, [r1, #8]
        JPEG_OUT_Read_BufferIndex++;
 8001b9e:	bf98      	it	ls
 8001ba0:	4613      	movls	r3, r2
        MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 8001ba2:	6038      	str	r0, [r7, #0]
        JPEG_OUT_Read_BufferIndex++;
 8001ba4:	602b      	str	r3, [r5, #0]
        if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
        {
            JPEG_OUT_Read_BufferIndex = 0;
        }

        if (MCU_BlockIndex == MCU_TotalNb)
 8001ba6:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <JPEG_OutputHandler+0x100>)
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d10f      	bne.n	8001bd0 <JPEG_OutputHandler+0xc4>
        {
            return 1;
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	e018      	b.n	8001be6 <JPEG_OutputHandler+0xda>
        }
    }
    else if ((JPEG_output_is_paused == 1) && \
 8001bb4:	4916      	ldr	r1, [pc, #88]	; (8001c10 <JPEG_OutputHandler+0x104>)
 8001bb6:	680a      	ldr	r2, [r1, #0]
            (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 8001bb8:	2a01      	cmp	r2, #1
 8001bba:	d117      	bne.n	8001bec <JPEG_OutputHandler+0xe0>
 8001bbc:	4a15      	ldr	r2, [pc, #84]	; (8001c14 <JPEG_OutputHandler+0x108>)
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	4372      	muls	r2, r6
    else if ((JPEG_output_is_paused == 1) && \
 8001bc2:	5ca2      	ldrb	r2, [r4, r2]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	d111      	bne.n	8001bec <JPEG_OutputHandler+0xe0>
            (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
    {
        JPEG_output_is_paused = 0;
 8001bc8:	600b      	str	r3, [r1, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8001bca:	2102      	movs	r1, #2
 8001bcc:	f00a fbf3 	bl	800c3b6 <HAL_JPEG_Resume>
    {
        return 2;
    }

    /* decode completed */
    if ((MCU_BlockIndex == MCU_TotalNb) && (Jpeg_HWDecodingEnd))
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <JPEG_OutputHandler+0xf4>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <JPEG_OutputHandler+0x100>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d109      	bne.n	8001bf0 <JPEG_OutputHandler+0xe4>
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <JPEG_OutputHandler+0x10c>)
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	3800      	subs	r0, #0
 8001be2:	bf18      	it	ne
 8001be4:	2001      	movne	r0, #1
    {
        return 1;
    }

    return 0;
}
 8001be6:	b004      	add	sp, #16
 8001be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return 2;
 8001bec:	2002      	movs	r0, #2
 8001bee:	e7fa      	b.n	8001be6 <JPEG_OutputHandler+0xda>
    return 0;
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	e7f8      	b.n	8001be6 <JPEG_OutputHandler+0xda>
 8001bf4:	200097ec 	.word	0x200097ec
 8001bf8:	20000018 	.word	0x20000018
 8001bfc:	e000ed00 	.word	0xe000ed00
 8001c00:	200097b0 	.word	0x200097b0
 8001c04:	200097d0 	.word	0x200097d0
 8001c08:	200097cc 	.word	0x200097cc
 8001c0c:	200097c8 	.word	0x200097c8
 8001c10:	200097e0 	.word	0x200097e0
 8001c14:	200097f0 	.word	0x200097f0
 8001c18:	200097d8 	.word	0x200097d8

08001c1c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8001c1c:	b538      	push	{r3, r4, r5, lr}
    if (length == 0)
 8001c1e:	2a00      	cmp	r2, #0
 8001c20:	d031      	beq.n	8001c86 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x6a>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d02f      	beq.n	8001c86 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x6a>
        JPEG_ConvertorParams.bytes_pr_pixel = 2;
 8001c26:	4c18      	ldr	r4, [pc, #96]	; (8001c88 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x6c>)
 8001c28:	2502      	movs	r5, #2
 8001c2a:	6125      	str	r5, [r4, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8001c2c:	68c5      	ldr	r5, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001c2e:	6900      	ldr	r0, [r0, #16]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8001c30:	f015 0f0f 	tst.w	r5, #15
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001c34:	f000 000f 	and.w	r0, r0, #15
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8001c38:	bf18      	it	ne
 8001c3a:	f025 050f 	bicne.w	r5, r5, #15
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001c3e:	f1c0 0010 	rsb	r0, r0, #16
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8001c42:	bf18      	it	ne
 8001c44:	3510      	addne	r5, #16
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8001c46:	60a0      	str	r0, [r4, #8]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8001c48:	6025      	str	r5, [r4, #0]
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8001c4a:	f44f 65c8 	mov.w	r5, #1600	; 0x640
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8001c4e:	480f      	ldr	r0, [pc, #60]	; (8001c8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x70>)
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8001c50:	6065      	str	r5, [r4, #4]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8001c52:	6825      	ldr	r5, [r4, #0]
 8001c54:	092d      	lsrs	r5, r5, #4
 8001c56:	60e5      	str	r5, [r4, #12]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8001c58:	f7ff fe68 	bl	800192c <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001c5c:	4d0b      	ldr	r5, [pc, #44]	; (8001c8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x70>)
 8001c5e:	4c0c      	ldr	r4, [pc, #48]	; (8001c90 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>)
 8001c60:	4628      	mov	r0, r5
 8001c62:	f7ff ff53 	bl	8001b0c <JPEG_OutputHandler>
 8001c66:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d105      	bne.n	8001c7a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x5e>
                SEM_WAIT(semDecodingDone);
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>)
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	f00d f82f 	bl	800ecd8 <osSemaphoreAcquire>
        while (JpegProcessing_End != 1);
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d1ef      	bne.n	8001c60 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x44>
        Jpeg_HWDecodingEnd = 0;
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
}
 8001c86:	bd38      	pop	{r3, r4, r5, pc}
 8001c88:	200097b4 	.word	0x200097b4
 8001c8c:	200121b8 	.word	0x200121b8
 8001c90:	200097d4 	.word	0x200097d4
 8001c94:	200097f4 	.word	0x200097f4
 8001c98:	200097d8 	.word	0x200097d8

08001c9c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8001c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ca0:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8001ca2:	6943      	ldr	r3, [r0, #20]
{
 8001ca4:	b085      	sub	sp, #20
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	460f      	mov	r7, r1
 8001caa:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8001cac:	b92b      	cbnz	r3, 8001cba <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 8001cae:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8001cb0:	21b5      	movs	r1, #181	; 0xb5
 8001cb2:	4a2a      	ldr	r2, [pc, #168]	; (8001d5c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8001cb4:	482a      	ldr	r0, [pc, #168]	; (8001d60 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>)
 8001cb6:	f029 f861 	bl	802ad7c <__assert_func>
    readData(currentMovieOffset, 8);
 8001cba:	2208      	movs	r2, #8
 8001cbc:	6981      	ldr	r1, [r0, #24]
 8001cbe:	f7ff fc8d 	bl	80015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8001cc2:	69a6      	ldr	r6, [r4, #24]
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	4631      	mov	r1, r6
 8001cc8:	f7ff fc79 	bl	80015be <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8001ccc:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 8001cce:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	f7ff fc74 	bl	80015be <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001cd6:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8001cd8:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001cda:	4620      	mov	r0, r4
 8001cdc:	f7ff fc5a 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8001ce0:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8001ce4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8001ce6:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8001ce8:	1842      	adds	r2, r0, r1
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d227      	bcs.n	8001d3e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa2>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8001cee:	f243 0330 	movw	r3, #12336	; 0x3030
 8001cf2:	459b      	cmp	fp, r3
 8001cf4:	d117      	bne.n	8001d26 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8001cf6:	f246 3364 	movw	r3, #25444	; 0x6364
 8001cfa:	459a      	cmp	sl, r3
 8001cfc:	d113      	bne.n	8001d26 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8001cfe:	b190      	cbz	r0, 8001d26 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001d00:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 8001d02:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001d04:	4620      	mov	r0, r4
 8001d06:	f7ff fc69 	bl	80015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8001d0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8001d0c:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8001d0e:	462a      	mov	r2, r5
 8001d10:	4620      	mov	r0, r4
 8001d12:	f8cd 8000 	str.w	r8, [sp]
 8001d16:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	f7ff ff7e 	bl	8001c1c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8001d20:	6963      	ldr	r3, [r4, #20]
 8001d22:	3301      	adds	r3, #1
 8001d24:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8001d26:	69a3      	ldr	r3, [r4, #24]
 8001d28:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 8001d2a:	b18d      	cbz	r5, 8001d50 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
            currentMovieOffset += 8;
 8001d2c:	61a3      	str	r3, [r4, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8001d2e:	69a3      	ldr	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8001d30:	6a62      	ldr	r2, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8001d32:	3301      	adds	r3, #1
 8001d34:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8001d38:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8001d3a:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8001d3c:	d10a      	bne.n	8001d54 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>
        frameNumber = 1;
 8001d3e:	2001      	movs	r0, #1
        currentMovieOffset = firstFrameOffset; /* start over */
 8001d40:	6a23      	ldr	r3, [r4, #32]
        frameNumber = 1;
 8001d42:	6160      	str	r0, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8001d44:	61a3      	str	r3, [r4, #24]
}
 8001d46:	f080 0001 	eor.w	r0, r0, #1
 8001d4a:	b005      	add	sp, #20
 8001d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            currentMovieOffset += 8;
 8001d50:	3308      	adds	r3, #8
 8001d52:	e7eb      	b.n	8001d2c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        isCurrentFrameLast = false;
 8001d54:	2000      	movs	r0, #0
 8001d56:	e7f6      	b.n	8001d46 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8001d58:	0802c34a 	.word	0x0802c34a
 8001d5c:	0802c4c2 	.word	0x0802c4c2
 8001d60:	0802c29f 	.word	0x0802c29f

08001d64 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8001d64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d66:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8001d68:	6981      	ldr	r1, [r0, #24]
{
 8001d6a:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
 8001d6c:	2208      	movs	r2, #8
 8001d6e:	f7ff fc35 	bl	80015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8001d72:	69a6      	ldr	r6, [r4, #24]
 8001d74:	4620      	mov	r0, r4
 8001d76:	1d31      	adds	r1, r6, #4
 8001d78:	f7ff fc0c 	bl	8001594 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8001d7c:	f106 0108 	add.w	r1, r6, #8
    const uint32_t length = getU32(currentMovieOffset + 4);
 8001d80:	4602      	mov	r2, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8001d82:	9001      	str	r0, [sp, #4]
 8001d84:	4620      	mov	r0, r4
 8001d86:	f7ff fc29 	bl	80015dc <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8001d8a:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8001d8c:	b16d      	cbz	r5, 8001daa <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001d8e:	462b      	mov	r3, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001d90:	4c07      	ldr	r4, [pc, #28]	; (8001db0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 8001d92:	4d08      	ldr	r5, [pc, #32]	; (8001db4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8001d94:	9a01      	ldr	r2, [sp, #4]
 8001d96:	4807      	ldr	r0, [pc, #28]	; (8001db4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8001d98:	f7ff fdc8 	bl	800192c <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8001d9c:	4628      	mov	r0, r5
 8001d9e:	f7ff feb5 	bl	8001b0c <JPEG_OutputHandler>
 8001da2:	6020      	str	r0, [r4, #0]
        while (JpegProcessing_End == 0);
 8001da4:	6823      	ldr	r3, [r4, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f8      	beq.n	8001d9c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8001daa:	2001      	movs	r0, #1
 8001dac:	b002      	add	sp, #8
 8001dae:	bd70      	pop	{r4, r5, r6, pc}
 8001db0:	200097d4 	.word	0x200097d4
 8001db4:	200121b8 	.word	0x200121b8

08001db8 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001db8:	2101      	movs	r1, #1
 8001dba:	2200      	movs	r2, #0
{
 8001dbc:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001dbe:	4608      	mov	r0, r1
 8001dc0:	f00c ff34 	bl	800ec2c <osSemaphoreNew>
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001dc6:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001dc8:	b928      	cbnz	r0, 8001dd6 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001dcc:	2128      	movs	r1, #40	; 0x28
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001dd0:	480a      	ldr	r0, [pc, #40]	; (8001dfc <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001dd2:	f028 ffd3 	bl	802ad7c <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2104      	movs	r1, #4
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f00c ffec 	bl	800edb8 <osMessageQueueNew>
 8001de0:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001de2:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001de4:	b918      	cbnz	r0, 8001dee <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001de6:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001de8:	212c      	movs	r1, #44	; 0x2c
 8001dea:	4a03      	ldr	r2, [pc, #12]	; (8001df8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001dec:	e7f0      	b.n	8001dd0 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001dee:	bd08      	pop	{r3, pc}
 8001df0:	200097fc 	.word	0x200097fc
 8001df4:	0802c564 	.word	0x0802c564
 8001df8:	0802c5ad 	.word	0x0802c5ad
 8001dfc:	0802c5dc 	.word	0x0802c5dc
 8001e00:	200097f8 	.word	0x200097f8
 8001e04:	0802c628 	.word	0x0802c628

08001e08 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001e08:	4b02      	ldr	r3, [pc, #8]	; (8001e14 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001e0a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	f00c bf62 	b.w	800ecd8 <osSemaphoreAcquire>
 8001e14:	200097fc 	.word	0x200097fc

08001e18 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001e18:	4b01      	ldr	r3, [pc, #4]	; (8001e20 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	f00c bf96 	b.w	800ed4c <osSemaphoreRelease>
 8001e20:	200097fc 	.word	0x200097fc

08001e24 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001e24:	4b02      	ldr	r3, [pc, #8]	; (8001e30 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001e26:	2100      	movs	r1, #0
 8001e28:	6818      	ldr	r0, [r3, #0]
 8001e2a:	f00c bf55 	b.w	800ecd8 <osSemaphoreAcquire>
 8001e2e:	bf00      	nop
 8001e30:	200097fc 	.word	0x200097fc

08001e34 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001e34:	f7ff bff0 	b.w	8001e18 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001e38 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001e38:	2300      	movs	r3, #0
 8001e3a:	4803      	ldr	r0, [pc, #12]	; (8001e48 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001e3c:	4903      	ldr	r1, [pc, #12]	; (8001e4c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001e3e:	461a      	mov	r2, r3
 8001e40:	6800      	ldr	r0, [r0, #0]
 8001e42:	f00c bfff 	b.w	800ee44 <osMessageQueuePut>
 8001e46:	bf00      	nop
 8001e48:	200097f8 	.word	0x200097f8
 8001e4c:	20000030 	.word	0x20000030

08001e50 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001e50:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001e52:	2300      	movs	r3, #0
 8001e54:	4c07      	ldr	r4, [pc, #28]	; (8001e74 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001e56:	a901      	add	r1, sp, #4
 8001e58:	461a      	mov	r2, r3
 8001e5a:	6820      	ldr	r0, [r4, #0]
 8001e5c:	f00d f834 	bl	800eec8 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295
 8001e64:	2200      	movs	r2, #0
 8001e66:	a901      	add	r1, sp, #4
 8001e68:	6820      	ldr	r0, [r4, #0]
 8001e6a:	f00d f82d 	bl	800eec8 <osMessageQueueGet>
}
 8001e6e:	b002      	add	sp, #8
 8001e70:	bd10      	pop	{r4, pc}
 8001e72:	bf00      	nop
 8001e74:	200097f8 	.word	0x200097f8

08001e78 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001e78:	6803      	ldr	r3, [r0, #0]
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7c:	4718      	bx	r3

08001e7e <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001e7e:	2001      	movs	r0, #1
 8001e80:	4770      	bx	lr

08001e82 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001e82:	6803      	ldr	r3, [r0, #0]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e86:	4718      	bx	r3

08001e88 <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e88:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <_ZN8STM32DMA10initializeEv+0x38>)
{
 8001e8a:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e8e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e92:	631a      	str	r2, [r3, #48]	; 0x30
 8001e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e96:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001e9a:	9201      	str	r2, [sp, #4]
 8001e9c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ea4:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001ea6:	691a      	ldr	r2, [r3, #16]
 8001ea8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001eac:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <_ZN8STM32DMA10initializeEv+0x3c>)
 8001eb0:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <_ZN8STM32DMA10initializeEv+0x40>)
 8001eb2:	619a      	str	r2, [r3, #24]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <_ZN8STM32DMA10initializeEv+0x44>)
 8001eba:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001ebc:	b002      	add	sp, #8
 8001ebe:	4770      	bx	lr
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	20012030 	.word	0x20012030
 8001ec8:	08001f11 	.word	0x08001f11
 8001ecc:	e000e100 	.word	0xe000e100

08001ed0 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001ed0:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001ed4:	4770      	bx	lr
	...

08001ed8 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001ed8:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eda:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ede:	6003      	str	r3, [r0, #0]
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <_ZN8STM32DMAD1Ev+0x1c>)
 8001ee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001ee6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001eea:	f3bf 8f6f 	isb	sy
}
 8001eee:	4770      	bx	lr
 8001ef0:	0802c7c4 	.word	0x0802c7c4
 8001ef4:	e000e100 	.word	0xe000e100

08001ef8 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001ef8:	b510      	push	{r4, lr}
 8001efa:	4604      	mov	r4, r0
}
 8001efc:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001f00:	f7ff ffea 	bl	8001ed8 <_ZN8STM32DMAD1Ev>
 8001f04:	4620      	mov	r0, r4
 8001f06:	f028 fd5c 	bl	802a9c2 <_ZdlPvj>
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	bd10      	pop	{r4, pc}
	...

08001f10 <DMA2D_XferCpltCallback>:
 8001f10:	4b02      	ldr	r3, [pc, #8]	; (8001f1c <DMA2D_XferCpltCallback+0xc>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001f16:	6803      	ldr	r3, [r0, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	4718      	bx	r3
 8001f1c:	20027ca8 	.word	0x20027ca8

08001f20 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001f20:	b570      	push	{r4, r5, r6, lr}
 8001f22:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001f24:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <_ZN8STM32DMAC1Ev+0x30>)
 8001f26:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001f28:	2600      	movs	r6, #0
 8001f2a:	4625      	mov	r5, r4
 8001f2c:	2260      	movs	r2, #96	; 0x60
 8001f2e:	6060      	str	r0, [r4, #4]
 8001f30:	7226      	strb	r6, [r4, #8]
 8001f32:	7266      	strb	r6, [r4, #9]
 8001f34:	f845 3b20 	str.w	r3, [r5], #32
 8001f38:	4629      	mov	r1, r5
 8001f3a:	f011 f9e1 	bl	8013300 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001f3e:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
        : color(0)
 8001f42:	60ee      	str	r6, [r5, #12]
 8001f44:	3524      	adds	r5, #36	; 0x24
 8001f46:	42ab      	cmp	r3, r5
 8001f48:	d1fb      	bne.n	8001f42 <_ZN8STM32DMAC1Ev+0x22>
}
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	bd70      	pop	{r4, r5, r6, pc}
 8001f4e:	bf00      	nop
 8001f50:	0802c7c4 	.word	0x0802c7c4

08001f54 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001f54:	b508      	push	{r3, lr}
    switch (format)
 8001f56:	290b      	cmp	r1, #11
 8001f58:	d80b      	bhi.n	8001f72 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8001f5a:	e8df f001 	tbb	[pc, r1]
 8001f5e:	0612      	.short	0x0612
 8001f60:	0a0a0a10 	.word	0x0a0a0a10
 8001f64:	0808080a 	.word	0x0808080a
 8001f68:	0808      	.short	0x0808
 8001f6a:	2001      	movs	r0, #1
}
 8001f6c:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001f6e:	2005      	movs	r0, #5
        break;
 8001f70:	e7fc      	b.n	8001f6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8001f72:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001f74:	2165      	movs	r1, #101	; 0x65
 8001f76:	4a05      	ldr	r2, [pc, #20]	; (8001f8c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001f78:	4805      	ldr	r0, [pc, #20]	; (8001f90 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8001f7a:	f028 feff 	bl	802ad7c <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001f7e:	2000      	movs	r0, #0
 8001f80:	e7f4      	b.n	8001f6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001f82:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001f84:	e7f2      	b.n	8001f6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001f86:	bf00      	nop
 8001f88:	0802c66a 	.word	0x0802c66a
 8001f8c:	0802c685 	.word	0x0802c685
 8001f90:	0802c6cf 	.word	0x0802c6cf

08001f94 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001f94:	b508      	push	{r3, lr}
    switch (format)
 8001f96:	290a      	cmp	r1, #10
 8001f98:	d809      	bhi.n	8001fae <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8001f9a:	e8df f001 	tbb	[pc, r1]
 8001f9e:	0610      	.short	0x0610
 8001fa0:	0808080e 	.word	0x0808080e
 8001fa4:	06060608 	.word	0x06060608
 8001fa8:	06          	.byte	0x06
 8001fa9:	00          	.byte	0x00
 8001faa:	2001      	movs	r0, #1
}
 8001fac:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8001fb0:	2186      	movs	r1, #134	; 0x86
 8001fb2:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001fb4:	4805      	ldr	r0, [pc, #20]	; (8001fcc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001fb6:	f028 fee1 	bl	802ad7c <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001fba:	2000      	movs	r0, #0
 8001fbc:	e7f6      	b.n	8001fac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001fbe:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001fc0:	e7f4      	b.n	8001fac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001fc2:	bf00      	nop
 8001fc4:	0802c66a 	.word	0x0802c66a
 8001fc8:	0802c719 	.word	0x0802c719
 8001fcc:	0802c6cf 	.word	0x0802c6cf

08001fd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8001fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001fd4:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8001fd8:	460c      	mov	r4, r1
 8001fda:	4607      	mov	r7, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001fdc:	4641      	mov	r1, r8
 8001fde:	f7ff ffb9 	bl	8001f54 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001fe2:	f894 901e 	ldrb.w	r9, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001fe6:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001fe8:	4638      	mov	r0, r7
 8001fea:	4649      	mov	r1, r9
 8001fec:	f7ff ffb2 	bl	8001f54 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001ff0:	4649      	mov	r1, r9
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001ff2:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001ff4:	4638      	mov	r0, r7
 8001ff6:	f7ff ffcd 	bl	8001f94 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001ffa:	8aa1      	ldrh	r1, [r4, #20]
 8001ffc:	8b62      	ldrh	r2, [r4, #26]
 8001ffe:	4b43      	ldr	r3, [pc, #268]	; (800210c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8002000:	1a52      	subs	r2, r2, r1
 8002002:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002004:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002006:	8b22      	ldrh	r2, [r4, #24]
 8002008:	1a52      	subs	r2, r2, r1
 800200a:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800200c:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800200e:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002010:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002014:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002016:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002018:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800201a:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800201c:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800201e:	6827      	ldr	r7, [r4, #0]
 8002020:	2f80      	cmp	r7, #128	; 0x80
 8002022:	d028      	beq.n	8002076 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8002024:	7f22      	ldrb	r2, [r4, #28]
 8002026:	d80f      	bhi.n	8002048 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8002028:	2f20      	cmp	r7, #32
 800202a:	d065      	beq.n	80020f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 800202c:	2f40      	cmp	r7, #64	; 0x40
 800202e:	d063      	beq.n	80020f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 8002030:	2f04      	cmp	r7, #4
 8002032:	d01a      	beq.n	800206a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002034:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8002038:	4b34      	ldr	r3, [pc, #208]	; (800210c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800203a:	45c8      	cmp	r8, r9
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800203c:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
 8002040:	61dd      	str	r5, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002042:	d05f      	beq.n	8002104 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002044:	4a32      	ldr	r2, [pc, #200]	; (8002110 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8002046:	e044      	b.n	80020d2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x102>
    switch (blitOp.operation)
 8002048:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800204c:	d004      	beq.n	8002058 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x88>
 800204e:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8002052:	d1ef      	bne.n	8002034 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x64>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002054:	492f      	ldr	r1, [pc, #188]	; (8002114 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002056:	e000      	b.n	800205a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002058:	492f      	ldr	r1, [pc, #188]	; (8002118 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800205a:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
 800205e:	61da      	str	r2, [r3, #28]
        return color;
 8002060:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002062:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002064:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002066:	6158      	str	r0, [r3, #20]
 8002068:	e032      	b.n	80020d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800206a:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 800206e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002072:	61da      	str	r2, [r3, #28]
 8002074:	e7f6      	b.n	8002064 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002076:	68a7      	ldr	r7, [r4, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002078:	1d3a      	adds	r2, r7, #4
 800207a:	62da      	str	r2, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800207c:	7f21      	ldrb	r1, [r4, #28]
            switch ((Bitmap::ClutFormat)palette->format)
 800207e:	783a      	ldrb	r2, [r7, #0]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002080:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
 8002084:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
 8002088:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800208a:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800208c:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 800208e:	b142      	cbz	r2, 80020a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8002090:	2a01      	cmp	r2, #1
 8002092:	d021      	beq.n	80020d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x108>
                assert(0 && "Unsupported format");
 8002094:	4b21      	ldr	r3, [pc, #132]	; (800211c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8002096:	f44f 7188 	mov.w	r1, #272	; 0x110
 800209a:	4a21      	ldr	r2, [pc, #132]	; (8002120 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
 800209c:	4821      	ldr	r0, [pc, #132]	; (8002124 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 800209e:	f028 fe6d 	bl	802ad7c <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80020a2:	69da      	ldr	r2, [r3, #28]
 80020a4:	8879      	ldrh	r1, [r7, #2]
 80020a6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80020aa:	3901      	subs	r1, #1
 80020ac:	f022 0210 	bic.w	r2, r2, #16
 80020b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
            bool blend = true;
 80020b4:	2101      	movs	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80020b6:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80020b8:	4b14      	ldr	r3, [pc, #80]	; (800210c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 80020ba:	69da      	ldr	r2, [r3, #28]
 80020bc:	f042 0220 	orr.w	r2, r2, #32
 80020c0:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80020c2:	69da      	ldr	r2, [r3, #28]
 80020c4:	0692      	lsls	r2, r2, #26
 80020c6:	d4fc      	bmi.n	80020c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80020c8:	2210      	movs	r2, #16
 80020ca:	609a      	str	r2, [r3, #8]
            if (blend)
 80020cc:	2900      	cmp	r1, #0
 80020ce:	d0b9      	beq.n	8002044 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x74>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80020d0:	4a15      	ldr	r2, [pc, #84]	; (8002128 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80020d2:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
 80020d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80020d8:	69da      	ldr	r2, [r3, #28]
                if (blitOp.alpha == 255)
 80020da:	39ff      	subs	r1, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80020dc:	8878      	ldrh	r0, [r7, #2]
 80020de:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
                if (blitOp.alpha == 255)
 80020e2:	bf18      	it	ne
 80020e4:	2101      	movne	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80020e6:	3801      	subs	r0, #1
 80020e8:	f022 0210 	bic.w	r2, r2, #16
 80020ec:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80020f0:	f042 0210 	orr.w	r2, r2, #16
 80020f4:	61da      	str	r2, [r3, #28]
                break;
 80020f6:	e7df      	b.n	80020b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020f8:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 80020fc:	4b03      	ldr	r3, [pc, #12]	; (800210c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 80020fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002102:	e7b6      	b.n	8002072 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002104:	f240 2201 	movw	r2, #513	; 0x201
 8002108:	e7e3      	b.n	80020d2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x102>
 800210a:	bf00      	nop
 800210c:	4002b000 	.word	0x4002b000
 8002110:	00010201 	.word	0x00010201
 8002114:	00020009 	.word	0x00020009
 8002118:	0002000a 	.word	0x0002000a
 800211c:	0802c764 	.word	0x0802c764
 8002120:	0802c77e 	.word	0x0802c77e
 8002124:	0802c6cf 	.word	0x0802c6cf
 8002128:	00020201 	.word	0x00020201

0800212c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 800212c:	b538      	push	{r3, r4, r5, lr}
 800212e:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002130:	7f89      	ldrb	r1, [r1, #30]
 8002132:	f7ff ff2f 	bl	8001f94 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002136:	4b17      	ldr	r3, [pc, #92]	; (8002194 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002138:	8aa5      	ldrh	r5, [r4, #20]
 800213a:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800213c:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800213e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002142:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002144:	645a      	str	r2, [r3, #68]	; 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002146:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002148:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800214a:	1b52      	subs	r2, r2, r5
 800214c:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800214e:	6825      	ldr	r5, [r4, #0]
 8002150:	2d08      	cmp	r5, #8
 8002152:	d10e      	bne.n	8002172 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002154:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002156:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002158:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 800215a:	4a0f      	ldr	r2, [pc, #60]	; (8002198 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 800215c:	7f20      	ldrb	r0, [r4, #28]
 800215e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002162:	61da      	str	r2, [r3, #28]
 8002164:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002166:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002168:	4a0c      	ldr	r2, [pc, #48]	; (800219c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800216a:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800216c:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800216e:	601a      	str	r2, [r3, #0]
    }
}
 8002170:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002172:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002174:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002176:	611a      	str	r2, [r3, #16]
 8002178:	68e1      	ldr	r1, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800217a:	0a0a      	lsrs	r2, r1, #8
 800217c:	0948      	lsrs	r0, r1, #5
 800217e:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8002182:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8002186:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 800218a:	4302      	orrs	r2, r0
 800218c:	430a      	orrs	r2, r1
 800218e:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002190:	4a03      	ldr	r2, [pc, #12]	; (80021a0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8002192:	e7ec      	b.n	800216e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002194:	4002b000 	.word	0x4002b000
 8002198:	00010009 	.word	0x00010009
 800219c:	00020201 	.word	0x00020201
 80021a0:	00030201 	.word	0x00030201

080021a4 <_ZN8touchgfx5paint8tearDownEv>:
* @brief Waits until previous DMA drawing operation has finished
*/
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	07d2      	lsls	r2, r2, #31
 80021aa:	d4fc      	bmi.n	80021a6 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80021ac:	2223      	movs	r2, #35	; 0x23
 80021ae:	609a      	str	r2, [r3, #8]
}
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	4002b000 	.word	0x4002b000

080021b8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
*
* @brief Renders Canvas Widget chunks using DMA.
* This functions will not generate an interrupt, and will not affect the DMA queue.
*/
void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
 80021b8:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80021ba:	4c10      	ldr	r4, [pc, #64]	; (80021fc <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x44>)
 80021bc:	6825      	ldr	r5, [r4, #0]
 80021be:	07ed      	lsls	r5, r5, #31
 80021c0:	d4fc      	bmi.n	80021bc <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80021c2:	2523      	movs	r5, #35	; 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80021c4:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 80021c6:	2bff      	cmp	r3, #255	; 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80021c8:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80021ca:	f041 0101 	orr.w	r1, r1, #1
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 80021ce:	f04f 0502 	mov.w	r5, #2
 80021d2:	6365      	str	r5, [r4, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80021d4:	6461      	str	r1, [r4, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80021d6:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (alpha < 0xFF)
 80021d8:	d00a      	beq.n	80021f0 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x38>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80021da:	4909      	ldr	r1, [pc, #36]	; (8002200 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x48>)
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80021dc:	6265      	str	r5, [r4, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80021de:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 80021e2:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 80021e4:	4b07      	ldr	r3, [pc, #28]	; (8002204 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color);
 80021e6:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 80021e8:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 80021ea:	60e0      	str	r0, [r4, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, color565);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 80021ec:	6023      	str	r3, [r4, #0]
    }
}
 80021ee:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80021f0:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->OCOLR, color565);
 80021f2:	9b03      	ldr	r3, [sp, #12]
 80021f4:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 80021f6:	4b04      	ldr	r3, [pc, #16]	; (8002208 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x50>)
 80021f8:	e7f8      	b.n	80021ec <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x34>
 80021fa:	bf00      	nop
 80021fc:	4002b000 	.word	0x4002b000
 8002200:	00010009 	.word	0x00010009
 8002204:	00020001 	.word	0x00020001
 8002208:	00030001 	.word	0x00030001

0800220c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 800220c:	2001      	movs	r0, #1
 800220e:	4770      	bx	lr

08002210 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002210:	2038      	movs	r0, #56	; 0x38
 8002212:	4770      	bx	lr

08002214 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002214:	2338      	movs	r3, #56	; 0x38
 8002216:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800221a:	3008      	adds	r0, #8
 800221c:	4770      	bx	lr

0800221e <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 800221e:	2338      	movs	r3, #56	; 0x38
 8002220:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002224:	3008      	adds	r0, #8
 8002226:	4770      	bx	lr

08002228 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13batScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002228:	2001      	movs	r0, #1
 800222a:	4770      	bx	lr

0800222c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13batScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 800222c:	f243 60b8 	movw	r0, #14008	; 0x36b8
 8002230:	4770      	bx	lr

08002232 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13batScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002232:	f243 63b8 	movw	r3, #14008	; 0x36b8
 8002236:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800223a:	3008      	adds	r0, #8
 800223c:	4770      	bx	lr

0800223e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13batScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800223e:	f243 63b8 	movw	r3, #14008	; 0x36b8
 8002242:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002246:	3008      	adds	r0, #8
 8002248:	4770      	bx	lr

0800224a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI20aboutScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 800224a:	2001      	movs	r0, #1
 800224c:	4770      	bx	lr

0800224e <_ZN8touchgfx9PartitionINS_4meta8TypeListI20aboutScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 800224e:	2010      	movs	r0, #16
 8002250:	4770      	bx	lr

08002252 <_ZN8touchgfx9PartitionINS_4meta8TypeListI20aboutScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002252:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002256:	3008      	adds	r0, #8
 8002258:	4770      	bx	lr

0800225a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI20aboutScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800225a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800225e:	3008      	adds	r0, #8
 8002260:	4770      	bx	lr

08002262 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotofirstScreeenScreenNoTransition();
 8002262:	4608      	mov	r0, r1
 8002264:	f002 bdc8 	b.w	8004df8 <_ZN23FrontendApplicationBase34gotofirstScreeenScreenNoTransitionEv>

08002268 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002268:	4b03      	ldr	r3, [pc, #12]	; (8002278 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
 800226a:	b510      	push	{r4, lr}
 800226c:	4604      	mov	r4, r0
 800226e:	6003      	str	r3, [r0, #0]
 8002270:	f00f fa4b 	bl	801170a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002274:	4620      	mov	r0, r4
 8002276:	bd10      	pop	{r4, pc}
 8002278:	0802c87c 	.word	0x0802c87c

0800227c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 800227c:	b510      	push	{r4, lr}
 800227e:	4604      	mov	r4, r0
 8002280:	f7ff fff2 	bl	8002268 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8002284:	2140      	movs	r1, #64	; 0x40
 8002286:	4620      	mov	r0, r4
 8002288:	f028 fb9b 	bl	802a9c2 <_ZdlPvj>
 800228c:	4620      	mov	r0, r4
 800228e:	bd10      	pop	{r4, pc}

08002290 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13batScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13batScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002292:	b510      	push	{r4, lr}
 8002294:	4604      	mov	r4, r0
 8002296:	6003      	str	r3, [r0, #0]
 8002298:	f00f fa37 	bl	801170a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800229c:	4620      	mov	r0, r4
 800229e:	bd10      	pop	{r4, pc}
 80022a0:	0802c848 	.word	0x0802c848

080022a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13batScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80022a4:	b510      	push	{r4, lr}
 80022a6:	4604      	mov	r4, r0
 80022a8:	f7ff fff2 	bl	8002290 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13batScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80022ac:	f44f 515b 	mov.w	r1, #14016	; 0x36c0
 80022b0:	4620      	mov	r0, r4
 80022b2:	f028 fb86 	bl	802a9c2 <_ZdlPvj>
 80022b6:	4620      	mov	r0, r4
 80022b8:	bd10      	pop	{r4, pc}
	...

080022bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI20aboutScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI20aboutScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80022be:	b510      	push	{r4, lr}
 80022c0:	4604      	mov	r4, r0
 80022c2:	6003      	str	r3, [r0, #0]
 80022c4:	f00f fa21 	bl	801170a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80022c8:	4620      	mov	r0, r4
 80022ca:	bd10      	pop	{r4, pc}
 80022cc:	0802c814 	.word	0x0802c814

080022d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI20aboutScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80022d0:	b510      	push	{r4, lr}
 80022d2:	4604      	mov	r4, r0
 80022d4:	f7ff fff2 	bl	80022bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI20aboutScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80022d8:	2118      	movs	r1, #24
 80022da:	4620      	mov	r0, r4
 80022dc:	f028 fb71 	bl	802a9c2 <_ZdlPvj>
 80022e0:	4620      	mov	r0, r4
 80022e2:	bd10      	pop	{r4, pc}

080022e4 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80022e4:	4b09      	ldr	r3, [pc, #36]	; (800230c <_ZN12FrontendHeapD1Ev+0x28>)
 80022e6:	b510      	push	{r4, lr}
 80022e8:	4604      	mov	r4, r0
 80022ea:	6003      	str	r3, [r0, #0]
 80022ec:	f500 505b 	add.w	r0, r0, #14016	; 0x36c0
 80022f0:	302c      	adds	r0, #44	; 0x2c
 80022f2:	f7ff ffb9 	bl	8002268 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80022f6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80022fa:	f7ff ffc9 	bl	8002290 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13batScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80022fe:	f104 0014 	add.w	r0, r4, #20
 8002302:	f7ff ffdb 	bl	80022bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI20aboutScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002306:	4620      	mov	r0, r4
 8002308:	bd10      	pop	{r4, pc}
 800230a:	bf00      	nop
 800230c:	0802c8b0 	.word	0x0802c8b0

08002310 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002310:	b508      	push	{r3, lr}
 8002312:	4802      	ldr	r0, [pc, #8]	; (800231c <__tcf_0+0xc>)
 8002314:	f7ff ffe6 	bl	80022e4 <_ZN12FrontendHeapD1Ev>
 8002318:	bd08      	pop	{r3, pc}
 800231a:	bf00      	nop
 800231c:	20009804 	.word	0x20009804

08002320 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002320:	b510      	push	{r4, lr}
 8002322:	4604      	mov	r4, r0
 8002324:	f7ff ffde 	bl	80022e4 <_ZN12FrontendHeapD1Ev>
 8002328:	f643 018c 	movw	r1, #14476	; 0x388c
 800232c:	4620      	mov	r0, r4
 800232e:	f028 fb48 	bl	802a9c2 <_ZdlPvj>
 8002332:	4620      	mov	r0, r4
 8002334:	bd10      	pop	{r4, pc}
	...

08002338 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8002338:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800233c:	f002 fa80 	bl	8004840 <_ZN14BitmapDatabase11getInstanceEv>
 8002340:	2400      	movs	r4, #0
 8002342:	4605      	mov	r5, r0
 8002344:	f002 fa80 	bl	8004848 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002348:	4623      	mov	r3, r4
 800234a:	4601      	mov	r1, r0
 800234c:	4622      	mov	r2, r4
 800234e:	4628      	mov	r0, r5
 8002350:	9400      	str	r4, [sp, #0]
 8002352:	f018 ffbf 	bl	801b2d4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8002356:	4b26      	ldr	r3, [pc, #152]	; (80023f0 <touchgfx_init+0xb8>)
 8002358:	4a26      	ldr	r2, [pc, #152]	; (80023f4 <touchgfx_init+0xbc>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 800235a:	4620      	mov	r0, r4
        static FrontendHeap instance;
 800235c:	4d26      	ldr	r5, [pc, #152]	; (80023f8 <touchgfx_init+0xc0>)
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	f003 fc90 	bl	8005c84 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002364:	4825      	ldr	r0, [pc, #148]	; (80023fc <touchgfx_init+0xc4>)
 8002366:	f018 ff1d 	bl	801b1a4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 800236a:	682b      	ldr	r3, [r5, #0]
 800236c:	f3bf 8f5b 	dmb	ish
 8002370:	07db      	lsls	r3, r3, #31
 8002372:	d437      	bmi.n	80023e4 <touchgfx_init+0xac>
 8002374:	4628      	mov	r0, r5
 8002376:	f028 fb26 	bl	802a9c6 <__cxa_guard_acquire>
 800237a:	b398      	cbz	r0, 80023e4 <touchgfx_init+0xac>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 800237c:	4c20      	ldr	r4, [pc, #128]	; (8002400 <touchgfx_init+0xc8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 800237e:	4b21      	ldr	r3, [pc, #132]	; (8002404 <touchgfx_init+0xcc>)
          screenStorage(scr),
 8002380:	f104 082c 	add.w	r8, r4, #44	; 0x2c
        : presenterStorage(pres),
 8002384:	f104 0014 	add.w	r0, r4, #20
 8002388:	6023      	str	r3, [r4, #0]
          transitionStorage(tra),
 800238a:	f508 575b 	add.w	r7, r8, #14016	; 0x36c0
        : presenterStorage(pres),
 800238e:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8002390:	f8c4 8008 	str.w	r8, [r4, #8]
          frontendApplication(app)
 8002394:	f107 0644 	add.w	r6, r7, #68	; 0x44
          transitionStorage(tra),
 8002398:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 800239a:	6126      	str	r6, [r4, #16]
 800239c:	f00f f9b6 	bl	801170c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80023a0:	4b19      	ldr	r3, [pc, #100]	; (8002408 <touchgfx_init+0xd0>)
 80023a2:	4640      	mov	r0, r8
 80023a4:	6163      	str	r3, [r4, #20]
 80023a6:	f00f f9b1 	bl	801170c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80023aa:	4b18      	ldr	r3, [pc, #96]	; (800240c <touchgfx_init+0xd4>)
 80023ac:	4638      	mov	r0, r7
 80023ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80023b0:	f00f f9ac 	bl	801170c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80023b4:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 80023b8:	4a15      	ldr	r2, [pc, #84]	; (8002410 <touchgfx_init+0xd8>)
 80023ba:	f203 702c 	addw	r0, r3, #1836	; 0x72c
 80023be:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
 80023c2:	f007 f86b 	bl	800949c <_ZN5ModelC1Ev>
 80023c6:	4622      	mov	r2, r4
 80023c8:	f508 515c 	add.w	r1, r8, #14080	; 0x3700
 80023cc:	4630      	mov	r0, r6
 80023ce:	f007 f85b 	bl	8009488 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80023d2:	4630      	mov	r0, r6
 80023d4:	f002 fd10 	bl	8004df8 <_ZN23FrontendApplicationBase34gotofirstScreeenScreenNoTransitionEv>
        static FrontendHeap instance;
 80023d8:	480e      	ldr	r0, [pc, #56]	; (8002414 <touchgfx_init+0xdc>)
 80023da:	f028 fced 	bl	802adb8 <atexit>
 80023de:	4628      	mov	r0, r5
 80023e0:	f028 fafd 	bl	802a9de <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80023e4:	480c      	ldr	r0, [pc, #48]	; (8002418 <touchgfx_init+0xe0>)
}
 80023e6:	b002      	add	sp, #8
 80023e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 80023ec:	f7fe be08 	b.w	8001000 <_ZN11TouchGFXHAL10initializeEv>
 80023f0:	20027d0c 	.word	0x20027d0c
 80023f4:	2000deb0 	.word	0x2000deb0
 80023f8:	20009800 	.word	0x20009800
 80023fc:	20000034 	.word	0x20000034
 8002400:	20009804 	.word	0x20009804
 8002404:	0802c8b0 	.word	0x0802c8b0
 8002408:	0802c814 	.word	0x0802c814
 800240c:	0802c848 	.word	0x0802c848
 8002410:	0802c87c 	.word	0x0802c87c
 8002414:	08002311 	.word	0x08002311
 8002418:	2000de34 	.word	0x2000de34

0800241c <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 800241c:	4770      	bx	lr
	...

08002420 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002420:	4801      	ldr	r0, [pc, #4]	; (8002428 <touchgfx_taskEntry+0x8>)
 8002422:	f7fe be07 	b.w	8001034 <_ZN11TouchGFXHAL9taskEntryEv>
 8002426:	bf00      	nop
 8002428:	2000de34 	.word	0x2000de34

0800242c <_GLOBAL__sub_I_touchgfx_init>:
}
 800242c:	b513      	push	{r0, r1, r4, lr}
static STM32DMA dma;
 800242e:	490c      	ldr	r1, [pc, #48]	; (8002460 <_GLOBAL__sub_I_touchgfx_init+0x34>)
{
public:

    STM32TouchController() {}
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <_GLOBAL__sub_I_touchgfx_init+0x38>)
 8002432:	4c0d      	ldr	r4, [pc, #52]	; (8002468 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
 8002434:	4608      	mov	r0, r1
 8002436:	6023      	str	r3, [r4, #0]
 8002438:	f7ff fd72 	bl	8001f20 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 800243c:	4a0b      	ldr	r2, [pc, #44]	; (800246c <_GLOBAL__sub_I_touchgfx_init+0x40>)
 800243e:	4610      	mov	r0, r2
 8002440:	f01d fa22 	bl	801f888 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8002444:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002448:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800244c:	4904      	ldr	r1, [pc, #16]	; (8002460 <_GLOBAL__sub_I_touchgfx_init+0x34>)
 800244e:	4808      	ldr	r0, [pc, #32]	; (8002470 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 8002450:	e9cd 3200 	strd	r3, r2, [sp]
 8002454:	4623      	mov	r3, r4
 8002456:	4a05      	ldr	r2, [pc, #20]	; (800246c <_GLOBAL__sub_I_touchgfx_init+0x40>)
 8002458:	f7fe fe9c 	bl	8001194 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 800245c:	b002      	add	sp, #8
 800245e:	bd10      	pop	{r4, pc}
 8002460:	2000d094 	.word	0x2000d094
 8002464:	0802bfe8 	.word	0x0802bfe8
 8002468:	2000d090 	.word	0x2000d090
 800246c:	2000deb4 	.word	0x2000deb4
 8002470:	2000de34 	.word	0x2000de34

08002474 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002474:	4801      	ldr	r0, [pc, #4]	; (800247c <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002476:	f7ff bd2f 	b.w	8001ed8 <_ZN8STM32DMAD1Ev>
 800247a:	bf00      	nop
 800247c:	2000d094 	.word	0x2000d094

08002480 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002480:	2000      	movs	r0, #0
 8002482:	4770      	bx	lr

08002484 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002484:	8081      	strh	r1, [r0, #4]
    }
 8002486:	4770      	bx	lr

08002488 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002488:	80c1      	strh	r1, [r0, #6]
    }
 800248a:	4770      	bx	lr

0800248c <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 800248c:	8101      	strh	r1, [r0, #8]
    }
 800248e:	4770      	bx	lr

08002490 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002490:	8141      	strh	r1, [r0, #10]
    }
 8002492:	4770      	bx	lr

08002494 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002494:	4770      	bx	lr

08002496 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8002496:	4770      	bx	lr

08002498 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002498:	4770      	bx	lr

0800249a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 800249a:	4770      	bx	lr

0800249c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 800249c:	4770      	bx	lr

0800249e <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800249e:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 80024a0:	88c4      	ldrh	r4, [r0, #6]
 80024a2:	6803      	ldr	r3, [r0, #0]
 80024a4:	1b12      	subs	r2, r2, r4
 80024a6:	8884      	ldrh	r4, [r0, #4]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024aa:	1b09      	subs	r1, r1, r4
 80024ac:	b212      	sxth	r2, r2
    }
 80024ae:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80024b2:	b209      	sxth	r1, r1
 80024b4:	4718      	bx	r3

080024b6 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80024b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ba:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80024bc:	f04f 33ff 	mov.w	r3, #4294967295
 80024c0:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80024c2:	6813      	ldr	r3, [r2, #0]
 80024c4:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80024c6:	6010      	str	r0, [r2, #0]
    }
 80024c8:	4770      	bx	lr

080024ca <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80024ca:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80024ce:	b11a      	cbz	r2, 80024d8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80024d0:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80024d4:	b102      	cbz	r2, 80024d8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80024d6:	6018      	str	r0, [r3, #0]
        }
    }
 80024d8:	4770      	bx	lr

080024da <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 80024da:	2000      	movs	r0, #0
 80024dc:	4770      	bx	lr

080024de <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 80024de:	888b      	ldrh	r3, [r1, #4]
 80024e0:	8083      	strh	r3, [r0, #4]
        return true;
    }
 80024e2:	2001      	movs	r0, #1
 80024e4:	4770      	bx	lr

080024e6 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 80024e6:	4770      	bx	lr

080024e8 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80024e8:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    }
 80024ec:	4770      	bx	lr

080024ee <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 80024ee:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80024f2:	4770      	bx	lr

080024f4 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80024f4:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 80024f6:	b510      	push	{r4, lr}
        return rect.width;
 80024f8:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 80024fc:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8002500:	8002      	strh	r2, [r0, #0]
 8002502:	8042      	strh	r2, [r0, #2]
 8002504:	8084      	strh	r4, [r0, #4]
 8002506:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 8002508:	bd10      	pop	{r4, pc}

0800250a <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 800250a:	2200      	movs	r2, #0
 800250c:	8002      	strh	r2, [r0, #0]
 800250e:	8042      	strh	r2, [r0, #2]
 8002510:	8082      	strh	r2, [r0, #4]
 8002512:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8002514:	4770      	bx	lr
	...

08002518 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002518:	4b02      	ldr	r3, [pc, #8]	; (8002524 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 800251a:	2290      	movs	r2, #144	; 0x90
 800251c:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000e100 	.word	0xe000e100

08002528 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002528:	4b02      	ldr	r3, [pc, #8]	; (8002534 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 800252a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800252e:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	e000e100 	.word	0xe000e100

08002538 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
}
 8002538:	4770      	bx	lr

0800253a <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 800253a:	4770      	bx	lr

0800253c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800253c:	4a12      	ldr	r2, [pc, #72]	; (8002588 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 800253e:	6953      	ldr	r3, [r2, #20]
 8002540:	03db      	lsls	r3, r3, #15
{
 8002542:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002544:	d51e      	bpl.n	8002584 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002546:	2300      	movs	r3, #0
 8002548:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800254c:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002550:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002554:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002558:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800255c:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002560:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002562:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002566:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002568:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 800256c:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800256e:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8002572:	d2f9      	bcs.n	8002568 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8002574:	3b20      	subs	r3, #32
 8002576:	f113 0f20 	cmn.w	r3, #32
 800257a:	d1f2      	bne.n	8002562 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 800257c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002580:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002584:	bd70      	pop	{r4, r5, r6, pc}
 8002586:	bf00      	nop
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 800258c:	6301      	str	r1, [r0, #48]	; 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 800258e:	e9c0 210d 	strd	r2, r1, [r0, #52]	; 0x34
    }
 8002592:	4770      	bx	lr

08002594 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8002594:	4770      	bx	lr

08002596 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 8002596:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800259a:	4611      	mov	r1, r2
 800259c:	6840      	ldr	r0, [r0, #4]
 800259e:	6803      	ldr	r3, [r0, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	4718      	bx	r3

080025a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80025a4:	b510      	push	{r4, lr}
 80025a6:	4604      	mov	r4, r0
 80025a8:	2148      	movs	r1, #72	; 0x48
 80025aa:	f028 fa0a 	bl	802a9c2 <_ZdlPvj>
 80025ae:	4620      	mov	r0, r4
 80025b0:	bd10      	pop	{r4, pc}
	...

080025b4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80025b4:	b538      	push	{r3, r4, r5, lr}
 80025b6:	4604      	mov	r4, r0
    HAL::initialize();
 80025b8:	f00f fff3 	bl	80125a2 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80025c0:	f015 fc7a 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 80025c4:	4601      	mov	r1, r0
 80025c6:	4620      	mov	r0, r4
 80025c8:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	4907      	ldr	r1, [pc, #28]	; (80025ec <_ZN20TouchGFXGeneratedHAL10initializeEv+0x38>)
 80025ce:	4620      	mov	r0, r4
 80025d0:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80025d4:	2300      	movs	r3, #0
 80025d6:	461a      	mov	r2, r3
 80025d8:	47a8      	blx	r5
    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
    {
        // Running in UI thread / main

        assert(index < no_streams);
        mjpegDecoders[index] = &decoder;
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 80025dc:	4a05      	ldr	r2, [pc, #20]	; (80025f4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 80025de:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 80025e0:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB = bufferRGB;
 80025e4:	639a      	str	r2, [r3, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
 80025e6:	4a05      	ldr	r2, [pc, #20]	; (80025fc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 80025e8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80025ea:	bd38      	pop	{r3, r4, r5, pc}
 80025ec:	c00bb800 	.word	0xc00bb800
 80025f0:	2000df7c 	.word	0x2000df7c
 80025f4:	2000df38 	.word	0x2000df38
 80025f8:	c0000000 	.word	0xc0000000
 80025fc:	000bb800 	.word	0x000bb800

08002600 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
    HAL::flushFrameBuffer(rect);
 8002600:	f00f bf7f 	b.w	8012502 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08002604 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 8002604:	f010 b8e1 	b.w	80127ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002608 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8002608:	b538      	push	{r3, r4, r5, lr}
 800260a:	4604      	mov	r4, r0
 800260c:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 800260e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8002610:	f04f 31ff 	mov.w	r1, #4294967295
 8002614:	f00c fab0 	bl	800eb78 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8002618:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800261a:	f00c fadd 	bl	800ebd8 <osMutexRelease>
        streams[handle].isActive = false;
 800261e:	2324      	movs	r3, #36	; 0x24
 8002620:	fb03 4505 	mla	r5, r3, r5, r4
 8002624:	2300      	movs	r3, #0
 8002626:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
        if (oneIsActive == false)
 800262a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800262e:	b90b      	cbnz	r3, 8002634 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 8002630:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002632:	63a3      	str	r3, [r4, #56]	; 0x38
    }
 8002634:	bd38      	pop	{r3, r4, r5, pc}

08002636 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8002636:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800263a:	b112      	cbz	r2, 8002642 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 800263c:	6803      	ldr	r3, [r0, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	4718      	bx	r3
    }
 8002642:	4770      	bx	lr

08002644 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    {
        assert(handle < no_streams);
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
 8002644:	b508      	push	{r3, lr}
    {
        assert(handle < no_streams);
 8002646:	b131      	cbz	r1, 8002656 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x12>
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
 800264a:	f44f 71b8 	mov.w	r1, #368	; 0x170
 800264e:	4a04      	ldr	r2, [pc, #16]	; (8002660 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
 8002650:	4804      	ldr	r0, [pc, #16]	; (8002664 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
 8002652:	f028 fb93 	bl	802ad7c <__assert_func>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
 8002656:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 800265a:	bd08      	pop	{r3, pc}
 800265c:	0802c8bc 	.word	0x0802c8bc
 8002660:	0802c8d0 	.word	0x0802c8d0
 8002664:	0802ca5a 	.word	0x0802ca5a

08002668 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8002668:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 800266a:	b131      	cbz	r1, 800267a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 800266e:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8002672:	4a06      	ldr	r2, [pc, #24]	; (800268c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8002674:	4806      	ldr	r0, [pc, #24]	; (8002690 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8002676:	f028 fb81 	bl	802ad7c <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 800267a:	6840      	ldr	r0, [r0, #4]
 800267c:	4611      	mov	r1, r2
 800267e:	6803      	ldr	r3, [r0, #0]
    }
 8002680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	4718      	bx	r3
 8002688:	0802c8bc 	.word	0x0802c8bc
 800268c:	0802ca9d 	.word	0x0802ca9d
 8002690:	0802ca5a 	.word	0x0802ca5a

08002694 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8002694:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002696:	b129      	cbz	r1, 80026a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x10>
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
 800269a:	2179      	movs	r1, #121	; 0x79
 800269c:	4a03      	ldr	r2, [pc, #12]	; (80026ac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
 800269e:	4804      	ldr	r0, [pc, #16]	; (80026b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
 80026a0:	f028 fb6c 	bl	802ad7c <__assert_func>
    }
 80026a4:	68c0      	ldr	r0, [r0, #12]
 80026a6:	bd08      	pop	{r3, pc}
 80026a8:	0802c8bc 	.word	0x0802c8bc
 80026ac:	0802cc4b 	.word	0x0802cc4b
 80026b0:	0802ca5a 	.word	0x0802ca5a

080026b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 80026b4:	b510      	push	{r4, lr}
 80026b6:	4604      	mov	r4, r0
        assert(handle < no_streams);
 80026b8:	b129      	cbz	r1, 80026c6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 80026ba:	4b19      	ldr	r3, [pc, #100]	; (8002720 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 80026bc:	21a2      	movs	r1, #162	; 0xa2
 80026be:	4a19      	ldr	r2, [pc, #100]	; (8002724 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 80026c0:	4819      	ldr	r0, [pc, #100]	; (8002728 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 80026c2:	f028 fb5b 	bl	802ad7c <__assert_func>
        switch (cmd)
 80026c6:	2a05      	cmp	r2, #5
 80026c8:	d815      	bhi.n	80026f6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80026ca:	e8df f002 	tbb	[pc, r2]
 80026ce:	1103      	.short	0x1103
 80026d0:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 80026d4:	6840      	ldr	r0, [r0, #4]
 80026d6:	6803      	ldr	r3, [r0, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	4798      	blx	r3
 80026dc:	b158      	cbz	r0, 80026f6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 80026de:	2301      	movs	r3, #1
 80026e0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 80026e4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            stream.frameCount = 0;
 80026e8:	2300      	movs	r3, #0
            stream.tickCount = 0;
 80026ea:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 80026ee:	e002      	b.n	80026f6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    }
 80026f6:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 80026f8:	6203      	str	r3, [r0, #32]
 80026fa:	e7f5      	b.n	80026e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 80026fc:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 80026fe:	2301      	movs	r3, #1
 8002700:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
 8002704:	e7f0      	b.n	80026e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 8002706:	2300      	movs	r3, #0
 8002708:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
            stream.seek_to_frame = 1;
 800270c:	2301      	movs	r3, #1
 800270e:	6203      	str	r3, [r0, #32]
            break;
 8002710:	e7f1      	b.n	80026f6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 8002712:	3b00      	subs	r3, #0
 8002714:	bf18      	it	ne
 8002716:	2301      	movne	r3, #1
 8002718:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    }
 800271c:	e7eb      	b.n	80026f6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 800271e:	bf00      	nop
 8002720:	0802c8bc 	.word	0x0802c8bc
 8002724:	0802ce00 	.word	0x0802ce00
 8002728:	0802ca5a 	.word	0x0802ca5a

0800272c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 800272c:	b510      	push	{r4, lr}
 800272e:	460c      	mov	r4, r1
 8002730:	4611      	mov	r1, r2
 8002732:	461a      	mov	r2, r3
        assert(handle < no_streams);
 8002734:	b12c      	cbz	r4, 8002742 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x16>
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x24>)
 8002738:	2190      	movs	r1, #144	; 0x90
 800273a:	4a06      	ldr	r2, [pc, #24]	; (8002754 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
 800273c:	4806      	ldr	r0, [pc, #24]	; (8002758 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
 800273e:	f028 fb1d 	bl	802ad7c <__assert_func>
        stream.frameNumber = 0;
 8002742:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8002744:	6840      	ldr	r0, [r0, #4]
 8002746:	6803      	ldr	r3, [r0, #0]
    }
 8002748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	4718      	bx	r3
 8002750:	0802c8bc 	.word	0x0802c8bc
 8002754:	0802cfd4 	.word	0x0802cfd4
 8002758:	0802ca5a 	.word	0x0802ca5a

0800275c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 800275c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800275e:	b129      	cbz	r1, 800276c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x10>
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
 8002762:	2182      	movs	r1, #130	; 0x82
 8002764:	4a05      	ldr	r2, [pc, #20]	; (800277c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
 8002766:	4806      	ldr	r0, [pc, #24]	; (8002780 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
 8002768:	f028 fb08 	bl	802ad7c <__assert_func>
        stream.tickCount = 0;
 800276c:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8002770:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8002774:	bd08      	pop	{r3, pc}
 8002776:	bf00      	nop
 8002778:	0802c8bc 	.word	0x0802c8bc
 800277c:	0802d1af 	.word	0x0802d1af
 8002780:	0802ca5a 	.word	0x0802ca5a

08002784 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 8002784:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8002788:	b510      	push	{r4, lr}
 800278a:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 800278c:	b153      	cbz	r3, 80027a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 800278e:	f04f 31ff 	mov.w	r1, #4294967295
 8002792:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8002794:	f00c f9f0 	bl	800eb78 <osMutexAcquire>
            firstDrawThisFrame = false;
 8002798:	2300      	movs	r3, #0
 800279a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
            uiHasMutex = true;
 800279e:	2301      	movs	r3, #1
 80027a0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    }
 80027a4:	bd10      	pop	{r4, pc}
	...

080027a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 80027a8:	b510      	push	{r4, lr}
 80027aa:	4604      	mov	r4, r0
 80027ac:	4610      	mov	r0, r2
        assert(handle < no_streams);
 80027ae:	b129      	cbz	r1, 80027bc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 80027b0:	4b13      	ldr	r3, [pc, #76]	; (8002800 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 80027b2:	21d0      	movs	r1, #208	; 0xd0
 80027b4:	4a13      	ldr	r2, [pc, #76]	; (8002804 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 80027b6:	4814      	ldr	r0, [pc, #80]	; (8002808 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 80027b8:	f028 fae0 	bl	802ad7c <__assert_func>
        if (stream.isPlaying)
 80027bc:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80027c0:	b133      	cbz	r3, 80027d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 80027ca:	6963      	ldr	r3, [r4, #20]
 80027cc:	4413      	add	r3, r2
 80027ce:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 80027d0:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80027d4:	b90b      	cbnz	r3, 80027da <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 80027d6:	2001      	movs	r0, #1
    }
 80027d8:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 80027da:	68a3      	ldr	r3, [r4, #8]
 80027dc:	6303      	str	r3, [r0, #48]	; 0x30
            widget.invalidate();
 80027de:	6803      	ldr	r3, [r0, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 80027e4:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 80027e6:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
            stream.doInvalidateOnNextTick = false;
 80027ea:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 80027ee:	2800      	cmp	r0, #0
 80027f0:	d1f1      	bne.n	80027d6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 80027f2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1ee      	bne.n	80027d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 80027fa:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 80027fe:	e7eb      	b.n	80027d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 8002800:	0802c8bc 	.word	0x0802c8bc
 8002804:	0802d36b 	.word	0x0802d36b
 8002808:	0802ca5a 	.word	0x0802ca5a
 800280c:	20027ca8 	.word	0x20027ca8

08002810 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8002810:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 8002812:	4c1a      	ldr	r4, [pc, #104]	; (800287c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 8002814:	4605      	mov	r5, r0
    HAL::endFrame();
 8002816:	f00f feb7 	bl	8012588 <_ZN8touchgfx3HAL8endFrameEv>
 800281a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800281e:	b913      	cbnz	r3, 8002826 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 8002820:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8002824:	b1ab      	cbz	r3, 8002852 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8002826:	69e1      	ldr	r1, [r4, #28]
 8002828:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800282c:	4353      	muls	r3, r2
 800282e:	6922      	ldr	r2, [r4, #16]
 8002830:	434a      	muls	r2, r1
 8002832:	4293      	cmp	r3, r2
 8002834:	d30d      	bcc.n	8002852 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 8002836:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 800283a:	b138      	cbz	r0, 800284c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8002842:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8002844:	bf98      	it	ls
 8002846:	f102 32ff 	addls.w	r2, r2, #4294967295
 800284a:	6262      	str	r2, [r4, #36]	; 0x24
                    stream.doDecode = true;
 800284c:	2301      	movs	r3, #1
 800284e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        firstDrawThisFrame = true;
 8002852:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 8002854:	6c20      	ldr	r0, [r4, #64]	; 0x40
        firstDrawThisFrame = true;
 8002856:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        SEM_POST(semDecode);
 800285a:	f00c fa77 	bl	800ed4c <osSemaphoreRelease>
        if (uiHasMutex)
 800285e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002862:	b12b      	cbz	r3, 8002870 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 8002864:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002866:	f00c f9b7 	bl	800ebd8 <osMutexRelease>
            uiHasMutex = false;
 800286a:	2300      	movs	r3, #0
 800286c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    dma.start();
 8002870:	6868      	ldr	r0, [r5, #4]
 8002872:	6803      	ldr	r3, [r0, #0]
}
 8002874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	4718      	bx	r3
 800287c:	2000df7c 	.word	0x2000df7c

08002880 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002880:	4b04      	ldr	r3, [pc, #16]	; (8002894 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 8002882:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002886:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800288a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800288e:	f3bf 8f6f 	isb	sy
}
 8002892:	4770      	bx	lr
 8002894:	e000e100 	.word	0xe000e100

08002898 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8002898:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 800289c:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
 800289e:	b9db      	cbnz	r3, 80028d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x40>
        streams[handle].isActive = true;
 80028a0:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80028a2:	6b85      	ldr	r5, [r0, #56]	; 0x38
            {
                // Reset stream parameters
                streams[i] = Stream();
 80028a4:	60c3      	str	r3, [r0, #12]
        streams[handle].isActive = true;
 80028a6:	6282      	str	r2, [r0, #40]	; 0x28
                streams[i] = Stream();
 80028a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ac:	6103      	str	r3, [r0, #16]
 80028ae:	8582      	strh	r2, [r0, #44]	; 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80028b0:	f505 223b 	add.w	r2, r5, #765952	; 0xbb000
                streams[i] = Stream();
 80028b4:	6143      	str	r3, [r0, #20]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80028b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
                streams[i] = Stream();
 80028ba:	6183      	str	r3, [r0, #24]
 80028bc:	61c3      	str	r3, [r0, #28]
 80028be:	6203      	str	r3, [r0, #32]
 80028c0:	6243      	str	r3, [r0, #36]	; 0x24
 80028c2:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80028c6:	e9d0 460c 	ldrd	r4, r6, [r0, #48]	; 0x30
 80028ca:	4434      	add	r4, r6
 80028cc:	42a2      	cmp	r2, r4
 80028ce:	d90a      	bls.n	80028e6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4e>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 80028d2:	2152      	movs	r1, #82	; 0x52
 80028d4:	4a0b      	ldr	r2, [pc, #44]	; (8002904 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 80028d6:	e003      	b.n	80028e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 80028da:	f240 11c5 	movw	r1, #453	; 0x1c5
 80028de:	4a0b      	ldr	r2, [pc, #44]	; (800290c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80028e0:	480b      	ldr	r0, [pc, #44]	; (8002910 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 80028e2:	f028 fa4b 	bl	802ad7c <__assert_func>
        topBufferRGB += sizeOfOneDecodeBuffer;
 80028e6:	6382      	str	r2, [r0, #56]	; 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 80028e8:	f44f 7248 	mov.w	r2, #800	; 0x320
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 80028ec:	6085      	str	r5, [r0, #8]
    }
 80028ee:	4618      	mov	r0, r3
 80028f0:	86ca      	strh	r2, [r1, #54]	; 0x36
        bufferHeight = height;
 80028f2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
        format = bufferFormat;
 80028f6:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferHeight = height;
 80028fa:	870a      	strh	r2, [r1, #56]	; 0x38
        buffer = videoBuffer;
 80028fc:	630b      	str	r3, [r1, #48]	; 0x30
 80028fe:	bd70      	pop	{r4, r5, r6, pc}
 8002900:	0802d6c3 	.word	0x0802d6c3
 8002904:	0802d6fe 	.word	0x0802d6fe
 8002908:	0802d50c 	.word	0x0802d50c
 800290c:	0802d53c 	.word	0x0802d53c
 8002910:	0802ca5a 	.word	0x0802ca5a

08002914 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
        : widgetWidth(0)
 8002914:	2300      	movs	r3, #0
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 8002916:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002918:	4e12      	ldr	r6, [pc, #72]	; (8002964 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x50>)
 800291a:	4605      	mov	r5, r0
 800291c:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 800291e:	4b12      	ldr	r3, [pc, #72]	; (8002968 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x54>)
 8002920:	6003      	str	r3, [r0, #0]
 8002922:	6833      	ldr	r3, [r6, #0]
 8002924:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002928:	b10a      	cbz	r2, 800292e <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x1a>
 800292a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800292c:	b900      	cbnz	r0, 8002930 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x1c>
        return instance->lcdRef;
 800292e:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8002930:	6803      	ldr	r3, [r0, #0]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	4798      	blx	r3
        return auxiliaryLCD;
 8002936:	6833      	ldr	r3, [r6, #0]
 8002938:	fab0 f480 	clz	r4, r0
 800293c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800293e:	0964      	lsrs	r4, r4, #5
        if (HAL::getInstance()->getAuxiliaryLCD())
 8002940:	b130      	cbz	r0, 8002950 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8002942:	6803      	ldr	r3, [r0, #0]
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	4798      	blx	r3
 8002948:	2800      	cmp	r0, #0
 800294a:	bf08      	it	eq
 800294c:	f044 0401 	orreq.w	r4, r4, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 8002950:	b92c      	cbnz	r4, 800295e <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x4a>
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x58>)
 8002954:	212c      	movs	r1, #44	; 0x2c
 8002956:	4a06      	ldr	r2, [pc, #24]	; (8002970 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x5c>)
 8002958:	4806      	ldr	r0, [pc, #24]	; (8002974 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x60>)
 800295a:	f028 fa0f 	bl	802ad7c <__assert_func>
    }
 800295e:	4628      	mov	r0, r5
 8002960:	bd70      	pop	{r4, r5, r6, pc}
 8002962:	bf00      	nop
 8002964:	20027ca8 	.word	0x20027ca8
 8002968:	0802d9a4 	.word	0x0802d9a4
 800296c:	0802d8a1 	.word	0x0802d8a1
 8002970:	0802d8ff 	.word	0x0802d8ff
 8002974:	0802d938 	.word	0x0802d938

08002978 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8002978:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800297c:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 800297e:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002980:	f44f 67c8 	mov.w	r7, #1600	; 0x640
            SEM_WAIT(semDecode);
 8002984:	f04f 31ff 	mov.w	r1, #4294967295
 8002988:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800298a:	f00c f9a5 	bl	800ecd8 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 800298e:	f04f 31ff 	mov.w	r1, #4294967295
 8002992:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002994:	f00c f8f0 	bl	800eb78 <osMutexAcquire>
                if (stream.doDecode)
 8002998:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800299c:	b343      	cbz	r3, 80029f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 800299e:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 80029a0:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 80029a4:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 80029a6:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
                    if (stream.seek_to_frame > 0)
 80029aa:	f1b8 0f00 	cmp.w	r8, #0
 80029ae:	d023      	beq.n	80029f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	4641      	mov	r1, r8
 80029b4:	4628      	mov	r0, r5
 80029b6:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 80029bc:	682b      	ldr	r3, [r5, #0]
 80029be:	f44f 7248 	mov.w	r2, #800	; 0x320
 80029c2:	9700      	str	r7, [sp, #0]
 80029c4:	4628      	mov	r0, r5
 80029c6:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80029ca:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80029ce:	68a1      	ldr	r1, [r4, #8]
 80029d0:	47c0      	blx	r8
                    stream.frameCount++;
 80029d2:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 80029d4:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
                    stream.frameCount++;
 80029d8:	3301      	adds	r3, #1
 80029da:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 80029dc:	b1f0      	cbz	r0, 8002a1c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80029de:	682b      	ldr	r3, [r5, #0]
 80029e0:	4628      	mov	r0, r5
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	4798      	blx	r3
 80029e6:	3801      	subs	r0, #1
                    stream.doDecode = false;
 80029e8:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80029ea:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 80029ec:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 80029f0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80029f2:	f00c f8f1 	bl	800ebd8 <osMutexRelease>
        while (1)
 80029f6:	e7c5      	b.n	8002984 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 80029f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80029fa:	2a00      	cmp	r2, #0
 80029fc:	d0de      	beq.n	80029bc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 80029fe:	4628      	mov	r0, r5
 8002a00:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	; 0x24
 8002a04:	4798      	blx	r3
 8002a06:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002a08:	4401      	add	r1, r0
 8002a0a:	4628      	mov	r0, r5
 8002a0c:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 8002a0e:	6923      	ldr	r3, [r4, #16]
 8002a10:	6a62      	ldr	r2, [r4, #36]	; 0x24
                            stream.skip_frames = 0;
 8002a12:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
                            stream.frameCount += stream.skip_frames;
 8002a16:	4413      	add	r3, r2
 8002a18:	6123      	str	r3, [r4, #16]
 8002a1a:	e7cf      	b.n	80029bc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	e7e3      	b.n	80029e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x70>

08002a20 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 8002a20:	4801      	ldr	r0, [pc, #4]	; (8002a28 <videoTaskFunc+0x8>)
{
 8002a22:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8002a24:	f7ff ffa8 	bl	8002978 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm1600ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
 8002a28:	2000df7c 	.word	0x2000df7c

08002a2c <_GLOBAL__sub_I_mjpegdecoder1>:
}
 8002a2c:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 8002a2e:	4814      	ldr	r0, [pc, #80]	; (8002a80 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8002a30:	2500      	movs	r5, #0
 8002a32:	f7fe fd79 	bl	8001528 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002a36:	4c13      	ldr	r4, [pc, #76]	; (8002a84 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 8002a38:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8002a3a:	462a      	mov	r2, r5
 8002a3c:	4629      	mov	r1, r5
 8002a3e:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002a40:	6023      	str	r3, [r4, #0]
 8002a42:	f44f 7380 	mov.w	r3, #256	; 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8002a46:	63a5      	str	r5, [r4, #56]	; 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002a48:	87a3      	strh	r3, [r4, #60]	; 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8002a4a:	85a3      	strh	r3, [r4, #44]	; 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002a4c:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8002a50:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8002a54:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002a58:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
 8002a5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8002a60:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8002a64:	e9c4 5505 	strd	r5, r5, [r4, #20]
                   seek_to_frame(0), skip_frames(0),
 8002a68:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8002a6c:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8002a70:	f00c f8dc 	bl	800ec2c <osSemaphoreNew>
 8002a74:	6420      	str	r0, [r4, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
 8002a76:	4628      	mov	r0, r5
 8002a78:	f00c f83a 	bl	800eaf0 <osMutexNew>
 8002a7c:	6460      	str	r0, [r4, #68]	; 0x44
}
 8002a7e:	bd38      	pop	{r3, r4, r5, pc}
 8002a80:	2000df38 	.word	0x2000df38
 8002a84:	2000df7c 	.word	0x2000df7c
 8002a88:	0802d9c4 	.word	0x0802d9c4

08002a8c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a90:	b08d      	sub	sp, #52	; 0x34
 8002a92:	9207      	str	r2, [sp, #28]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 8002a94:	f44f 72c0 	mov.w	r2, #384	; 0x180
  currentMCU = BlockIndex;
 8002a98:	f8dd 801c 	ldr.w	r8, [sp, #28]
{
 8002a9c:	9001      	str	r0, [sp, #4]
 8002a9e:	910b      	str	r1, [sp, #44]	; 0x2c
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 8002aa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002aa4:	9306      	str	r3, [sp, #24]

  while (currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8002aa6:	4b6c      	ldr	r3, [pc, #432]	; (8002c58 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>)
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	9305      	str	r3, [sp, #20]
  while (currentMCU < (numberMCU + BlockIndex))
 8002aac:	2300      	movs	r3, #0
 8002aae:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 8002ab2:	440a      	add	r2, r1
 8002ab4:	4542      	cmp	r2, r8
 8002ab6:	d808      	bhi.n	8002aca <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3e>
 8002ab8:	b11b      	cbz	r3, 8002ac2 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x36>
 8002aba:	4b67      	ldr	r3, [pc, #412]	; (8002c58 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1cc>)
 8002abc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002ac0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002ac2:	9806      	ldr	r0, [sp, #24]
 8002ac4:	b00d      	add	sp, #52	; 0x34
 8002ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8002aca:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8002ace:	9a05      	ldr	r2, [sp, #20]
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8002ad0:	9905      	ldr	r1, [sp, #20]
    currentMCU++;
 8002ad2:	f108 0801 	add.w	r8, r8, #1
    for (i = 0; i < 16; i += 2)
 8002ad6:	f04f 0b00 	mov.w	fp, #0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 8002ada:	fbb3 f2f2 	udiv	r2, r3, r2
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8002ade:	fb01 3312 	mls	r3, r1, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002ae2:	f44f 41c8 	mov.w	r1, #25600	; 0x6400
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	fb01 3302 	mla	r3, r1, r2, r3
 8002aec:	9302      	str	r3, [sp, #8]
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 8002aee:	9b01      	ldr	r3, [sp, #4]
 8002af0:	f503 7c80 	add.w	ip, r3, #256	; 0x100
    pLum = pInBuffer;
 8002af4:	4699      	mov	r9, r3
      if (refline < JPEG_ConvertorParams.ScaledWidth * 480)
 8002af6:	9b02      	ldr	r3, [sp, #8]
 8002af8:	4a58      	ldr	r2, [pc, #352]	; (8002c5c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	f200 8099 	bhi.w	8002c32 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1a6>
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 8002b00:	f503 65c8 	add.w	r5, r3, #1600	; 0x640
 8002b04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002b06:	f8cd 900c 	str.w	r9, [sp, #12]
 8002b0a:	441d      	add	r5, r3
        for (k = 0; k < 2; k++)
 8002b0c:	f10c 0308 	add.w	r3, ip, #8
 8002b10:	9309      	str	r3, [sp, #36]	; 0x24
          for (j = 0; j < 8; j += 2)
 8002b12:	f10c 33ff 	add.w	r3, ip, #4294967295
 8002b16:	9f03      	ldr	r7, [sp, #12]
    for (i = 0; i < 16; i += 2)
 8002b18:	2600      	movs	r6, #0
 8002b1a:	9304      	str	r3, [sp, #16]
 8002b1c:	f5a5 63c8 	sub.w	r3, r5, #1600	; 0x640
 8002b20:	9308      	str	r3, [sp, #32]
 8002b22:	9b08      	ldr	r3, [sp, #32]
          for (j = 0; j < 8; j += 2)
 8002b24:	3702      	adds	r7, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002b26:	484e      	ldr	r0, [pc, #312]	; (8002c60 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d4>)
 8002b28:	4433      	add	r3, r6
            ycomp = (int32_t)(*(pLum +j));
 8002b2a:	f817 ec02 	ldrb.w	lr, [r7, #-2]
 8002b2e:	930a      	str	r3, [sp, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002b30:	9b04      	ldr	r3, [sp, #16]
 8002b32:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002b36:	9304      	str	r3, [sp, #16]
 8002b38:	4b4a      	ldr	r3, [pc, #296]	; (8002c64 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1d8>)
 8002b3a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002b3e:	9b04      	ldr	r3, [sp, #16]
 8002b40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b44:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002b48:	4847      	ldr	r0, [pc, #284]	; (8002c68 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>)
 8002b4a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002b4e:	4847      	ldr	r0, [pc, #284]	; (8002c6c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e0>)
 8002b50:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8002b54:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002b56:	4a46      	ldr	r2, [pc, #280]	; (8002c70 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e4>)
 8002b58:	4610      	mov	r0, r2
 8002b5a:	4414      	add	r4, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002b5c:	eb00 4323 	add.w	r3, r0, r3, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002b60:	eb04 020e 	add.w	r2, r4, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002b64:	4401      	add	r1, r0
            *(__IO uint16_t *)pOutAddr =
 8002b66:	9808      	ldr	r0, [sp, #32]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002b68:	f892 a100 	ldrb.w	sl, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002b6c:	eb03 020e 	add.w	r2, r3, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002b70:	448e      	add	lr, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002b72:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002b76:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002b7a:	f89e e100 	ldrb.w	lr, [lr, #256]	; 0x100
 8002b7e:	0892      	lsrs	r2, r2, #2
 8002b80:	0152      	lsls	r2, r2, #5
 8002b82:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 8002b86:	ea42 02de 	orr.w	r2, r2, lr, lsr #3
            *(__IO uint16_t *)pOutAddr =
 8002b8a:	5382      	strh	r2, [r0, r6]
            ycomp = (int32_t)(*(pLum +j +1));
 8002b8c:	f817 ec01 	ldrb.w	lr, [r7, #-1]
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002b90:	980a      	ldr	r0, [sp, #40]	; 0x28
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002b92:	eb04 020e 	add.w	r2, r4, lr
 8002b96:	f892 a100 	ldrb.w	sl, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002b9a:	eb03 020e 	add.w	r2, r3, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002b9e:	448e      	add	lr, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002ba0:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002ba4:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002ba8:	f89e e100 	ldrb.w	lr, [lr, #256]	; 0x100
 8002bac:	0892      	lsrs	r2, r2, #2
 8002bae:	0152      	lsls	r2, r2, #5
 8002bb0:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 8002bb4:	ea42 02de 	orr.w	r2, r2, lr, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002bb8:	8042      	strh	r2, [r0, #2]
            ycomp = (int32_t)(*(pLum +j +8));
 8002bba:	f897 e006 	ldrb.w	lr, [r7, #6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002bbe:	eb04 020e 	add.w	r2, r4, lr
 8002bc2:	f892 a100 	ldrb.w	sl, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002bc6:	eb03 020e 	add.w	r2, r3, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002bca:	448e      	add	lr, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002bcc:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002bd0:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002bd4:	f89e e100 	ldrb.w	lr, [lr, #256]	; 0x100
 8002bd8:	0892      	lsrs	r2, r2, #2
 8002bda:	0152      	lsls	r2, r2, #5
 8002bdc:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
 8002be0:	ea42 02de 	orr.w	r2, r2, lr, lsr #3
            *(__IO uint16_t *)pOutAddr2 =
 8002be4:	53aa      	strh	r2, [r5, r6]
            ycomp = (int32_t)(*(pLum +j +8 +1));
 8002be6:	79fa      	ldrb	r2, [r7, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002be8:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002bea:	4414      	add	r4, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002bec:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002bee:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002bf2:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002bf6:	089b      	lsrs	r3, r3, #2
 8002bf8:	f891 2100 	ldrb.w	r2, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002bfc:	08e4      	lsrs	r4, r4, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002bfe:	015b      	lsls	r3, r3, #5
 8002c00:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
 8002c04:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) =
 8002c08:	19aa      	adds	r2, r5, r6
          for (j = 0; j < 8; j += 2)
 8002c0a:	3604      	adds	r6, #4
            *((__IO uint16_t *)(pOutAddr2 +2)) =
 8002c0c:	8053      	strh	r3, [r2, #2]
          for (j = 0; j < 8; j += 2)
 8002c0e:	2e10      	cmp	r6, #16
 8002c10:	d187      	bne.n	8002b22 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x96>
          pLum += 64;
 8002c12:	9b03      	ldr	r3, [sp, #12]
            pChrom++;
 8002c14:	f10c 0c04 	add.w	ip, ip, #4
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 8002c18:	3510      	adds	r5, #16
          pLum += 64;
 8002c1a:	3340      	adds	r3, #64	; 0x40
 8002c1c:	9303      	str	r3, [sp, #12]
        for (k = 0; k < 2; k++)
 8002c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c20:	4563      	cmp	r3, ip
 8002c22:	f47f af76 	bne.w	8002b12 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x86>
        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 8002c26:	9b02      	ldr	r3, [sp, #8]
        pLum = pLum - 128 + 16;
 8002c28:	f109 0910 	add.w	r9, r9, #16
        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 8002c2c:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8002c30:	9302      	str	r3, [sp, #8]
    for (i = 0; i < 16; i += 2)
 8002c32:	f10b 0b02 	add.w	fp, fp, #2
 8002c36:	f1bb 0f10 	cmp.w	fp, #16
 8002c3a:	d105      	bne.n	8002c48 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1bc>
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 8002c3c:	9b01      	ldr	r3, [sp, #4]
 8002c3e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	2301      	movs	r3, #1
 8002c46:	e732      	b.n	8002aae <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x22>
      if (i == 8)
 8002c48:	f1bb 0f08 	cmp.w	fp, #8
        pLum = pInBuffer + 128;
 8002c4c:	bf04      	itt	eq
 8002c4e:	9b01      	ldreq	r3, [sp, #4]
 8002c50:	f103 0980 	addeq.w	r9, r3, #128	; 0x80
 8002c54:	e74f      	b.n	8002af6 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6a>
 8002c56:	bf00      	nop
 8002c58:	20010c44 	.word	0x20010c44
 8002c5c:	000bb7ff 	.word	0x000bb7ff
 8002c60:	2000f7c4 	.word	0x2000f7c4
 8002c64:	2000ebc4 	.word	0x2000ebc4
 8002c68:	2000f3c4 	.word	0x2000f3c4
 8002c6c:	2000efc4 	.word	0x2000efc4
 8002c70:	0802d9fc 	.word	0x0802d9fc

08002c74 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8002c78:	0a1b      	lsrs	r3, r3, #8
{
 8002c7a:	b08d      	sub	sp, #52	; 0x34
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8002c7c:	9305      	str	r3, [sp, #20]
  currentMCU = BlockIndex;

  while (currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002c7e:	4b4f      	ldr	r3, [pc, #316]	; (8002dbc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x148>)
{
 8002c80:	9206      	str	r2, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  currentMCU = BlockIndex;
 8002c84:	f8dd e018 	ldr.w	lr, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002c88:	9202      	str	r2, [sp, #8]

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002c8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

    pLum = pInBuffer;

    for (i = 0; i < 8; i++)
    {
       if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002c8c:	691b      	ldr	r3, [r3, #16]
{
 8002c8e:	910a      	str	r1, [sp, #40]	; 0x28
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002c90:	9203      	str	r2, [sp, #12]
       if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002c92:	9307      	str	r3, [sp, #28]
  while (currentMCU < (numberMCU + BlockIndex))
 8002c94:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8002c98:	4413      	add	r3, r2
 8002c9a:	4573      	cmp	r3, lr
 8002c9c:	d803      	bhi.n	8002ca6 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x32>
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002c9e:	9805      	ldr	r0, [sp, #20]
 8002ca0:	b00d      	add	sp, #52	; 0x34
 8002ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002ca6:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8002caa:	9a02      	ldr	r2, [sp, #8]
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8002cac:	9c02      	ldr	r4, [sp, #8]
    currentMCU++;
 8002cae:	f10e 0e01 	add.w	lr, lr, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002cb2:	9903      	ldr	r1, [sp, #12]
 8002cb4:	f100 0780 	add.w	r7, r0, #128	; 0x80
    pLum = pInBuffer;
 8002cb8:	4682      	mov	sl, r0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8002cba:	fbb3 f2f2 	udiv	r2, r3, r2
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 8002cbe:	fb04 3312 	mls	r3, r4, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002cc2:	4351      	muls	r1, r2
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002cca:	9300      	str	r3, [sp, #0]
    currentMCU++;
 8002ccc:	2308      	movs	r3, #8
 8002cce:	9304      	str	r3, [sp, #16]
       if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002cd0:	9b07      	ldr	r3, [sp, #28]
 8002cd2:	9a00      	ldr	r2, [sp, #0]
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d969      	bls.n	8002dac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x138>
        pOutAddr = pOutBuffer + refline;
 8002cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002cda:	46d0      	mov	r8, sl
 8002cdc:	eb03 0902 	add.w	r9, r3, r2
        for (k = 0; k < 2; k++)
 8002ce0:	f107 0308 	add.w	r3, r7, #8
 8002ce4:	9308      	str	r3, [sp, #32]
          for (j = 0; j < 8; j += 2)
 8002ce6:	1e7b      	subs	r3, r7, #1
    currentMCU++;
 8002ce8:	2400      	movs	r4, #0
 8002cea:	9301      	str	r3, [sp, #4]
            ycomp = (int32_t)(*(pLum +j +1));
 8002cec:	f108 0301 	add.w	r3, r8, #1
 8002cf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8002cf2:	eb09 0384 	add.w	r3, r9, r4, lsl #2
            ycomp = (int32_t)(*(pLum +j));
 8002cf6:	f818 c014 	ldrb.w	ip, [r8, r4, lsl #1]
 8002cfa:	9309      	str	r3, [sp, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002cfc:	9b01      	ldr	r3, [sp, #4]
 8002cfe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002d02:	9301      	str	r3, [sp, #4]
 8002d04:	4b2e      	ldr	r3, [pc, #184]	; (8002dc0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14c>)
 8002d06:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002d0a:	9b01      	ldr	r3, [sp, #4]
 8002d0c:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 8002d10:	4b2c      	ldr	r3, [pc, #176]	; (8002dc4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x150>)
 8002d12:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002d16:	4b2c      	ldr	r3, [pc, #176]	; (8002dc8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x154>)
 8002d18:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002d1c:	4b2b      	ldr	r3, [pc, #172]	; (8002dcc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x158>)
 8002d1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002d22:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002d24:	4a2a      	ldr	r2, [pc, #168]	; (8002dd0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x15c>)
 8002d26:	4613      	mov	r3, r2
 8002d28:	4416      	add	r6, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d2a:	eb03 4121 	add.w	r1, r3, r1, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002d2e:	eb06 020c 	add.w	r2, r6, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002d32:	441d      	add	r5, r3
            ycomp = (int32_t)(*(pLum +j +1));
 8002d34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002d36:	f892 b100 	ldrb.w	fp, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d3a:	eb01 020c 	add.w	r2, r1, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002d3e:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d40:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002d44:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d48:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
 8002d4c:	0892      	lsrs	r2, r2, #2
 8002d4e:	0152      	lsls	r2, r2, #5
 8002d50:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
 8002d54:	ea42 02dc 	orr.w	r2, r2, ip, lsr #3
            *(__IO uint16_t *)pOutAddr =
 8002d58:	f829 2024 	strh.w	r2, [r9, r4, lsl #2]
            ycomp = (int32_t)(*(pLum +j +1));
 8002d5c:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
          for (j = 0; j < 8; j += 2)
 8002d60:	3401      	adds	r4, #1
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d64:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002d66:	4416      	add	r6, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002d68:	4415      	add	r5, r2
          for (j = 0; j < 8; j += 2)
 8002d6a:	2c04      	cmp	r4, #4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d6c:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002d70:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d74:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8002d78:	f895 2100 	ldrb.w	r2, [r5, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002d7c:	ea4f 06d6 	mov.w	r6, r6, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002d80:	ea4f 1141 	mov.w	r1, r1, lsl #5
 8002d84:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 8002d88:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8002d8c:	8059      	strh	r1, [r3, #2]
          for (j = 0; j < 8; j += 2)
 8002d8e:	d1b0      	bne.n	8002cf2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x7e>
            pChrom++;
 8002d90:	3704      	adds	r7, #4
        for (k = 0; k < 2; k++)
 8002d92:	9b08      	ldr	r3, [sp, #32]
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8002d94:	f109 0910 	add.w	r9, r9, #16
          pLum += 64;
 8002d98:	f108 0840 	add.w	r8, r8, #64	; 0x40
        for (k = 0; k < 2; k++)
 8002d9c:	42bb      	cmp	r3, r7
 8002d9e:	d1a2      	bne.n	8002ce6 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x72>
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002da0:	9a00      	ldr	r2, [sp, #0]
        pLum = pLum - 128 + 8;
 8002da2:	f10a 0a08 	add.w	sl, sl, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002da6:	9b03      	ldr	r3, [sp, #12]
 8002da8:	441a      	add	r2, r3
 8002daa:	9200      	str	r2, [sp, #0]
    for (i = 0; i < 8; i++)
 8002dac:	9b04      	ldr	r3, [sp, #16]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	9304      	str	r3, [sp, #16]
 8002db2:	d18d      	bne.n	8002cd0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x5c>
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 8002db4:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002db8:	e76c      	b.n	8002c94 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x20>
 8002dba:	bf00      	nop
 8002dbc:	20010c44 	.word	0x20010c44
 8002dc0:	2000ebc4 	.word	0x2000ebc4
 8002dc4:	2000f7c4 	.word	0x2000f7c4
 8002dc8:	2000f3c4 	.word	0x2000f3c4
 8002dcc:	2000efc4 	.word	0x2000efc4
 8002dd0:	0802d9fc 	.word	0x0802d9fc

08002dd4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dd8:	4692      	mov	sl, r2
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8002dda:	22c0      	movs	r2, #192	; 0xc0
{
 8002ddc:	b089      	sub	sp, #36	; 0x24
 8002dde:	4604      	mov	r4, r0
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8002de0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002de4:	9304      	str	r3, [sp, #16]
  currentMCU = BlockIndex;

  while (currentMCU < (numberMCU + BlockIndex))
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002de6:	4b34      	ldr	r3, [pc, #208]	; (8002eb8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe4>)
{
 8002de8:	9107      	str	r1, [sp, #28]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002dea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dec:	9200      	str	r2, [sp, #0]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002dee:	6a9a      	ldr	r2, [r3, #40]	; 0x28

    pLum = pInBuffer;

    for (i = 0; i < 8; i++)
    {
      if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002df0:	691b      	ldr	r3, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002df2:	9201      	str	r2, [sp, #4]
      if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002df4:	9305      	str	r3, [sp, #20]
  currentMCU = BlockIndex;
 8002df6:	4653      	mov	r3, sl
  while (currentMCU < (numberMCU + BlockIndex))
 8002df8:	9a04      	ldr	r2, [sp, #16]
 8002dfa:	4452      	add	r2, sl
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d803      	bhi.n	8002e08 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x34>
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002e00:	9804      	ldr	r0, [sp, #16]
 8002e02:	b009      	add	sp, #36	; 0x24
 8002e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002e08:	00da      	lsls	r2, r3, #3
 8002e0a:	9900      	ldr	r1, [sp, #0]
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002e0c:	9e00      	ldr	r6, [sp, #0]
    currentMCU++;
 8002e0e:	3301      	adds	r3, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002e10:	9d01      	ldr	r5, [sp, #4]
    pLum = pInBuffer;
 8002e12:	46a4      	mov	ip, r4
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002e14:	fbb2 f1f1 	udiv	r1, r2, r1
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002e18:	fb06 2211 	mls	r2, r6, r1, r2
 8002e1c:	f104 0640 	add.w	r6, r4, #64	; 0x40
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002e20:	434d      	muls	r5, r1
    currentMCU++;
 8002e22:	2108      	movs	r1, #8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002e24:	0052      	lsls	r2, r2, #1
    currentMCU++;
 8002e26:	9103      	str	r1, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002e28:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
      if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002e2c:	9905      	ldr	r1, [sp, #20]
 8002e2e:	4291      	cmp	r1, r2
 8002e30:	d93c      	bls.n	8002eac <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xd8>
        pOutAddr = pOutBuffer+ refline;
 8002e32:	9907      	ldr	r1, [sp, #28]
 8002e34:	f106 3eff 	add.w	lr, r6, #4294967295
 8002e38:	188d      	adds	r5, r1, r2
          for (j = 0; j < 8; j++)
 8002e3a:	f10c 31ff 	add.w	r1, ip, #4294967295
 8002e3e:	9102      	str	r1, [sp, #8]
 8002e40:	f105 0110 	add.w	r1, r5, #16
 8002e44:	9106      	str	r1, [sp, #24]
            ycomp = (int32_t)(*(pLum +j));
 8002e46:	9f02      	ldr	r7, [sp, #8]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8002e48:	f81e 8f01 	ldrb.w	r8, [lr, #1]!
            ycomp = (int32_t)(*(pLum +j));
 8002e4c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8002e50:	f89e 9040 	ldrb.w	r9, [lr, #64]	; 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002e54:	4819      	ldr	r0, [pc, #100]	; (8002ebc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
            ycomp = (int32_t)(*(pLum +j));
 8002e56:	9702      	str	r7, [sp, #8]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002e58:	4f19      	ldr	r7, [pc, #100]	; (8002ec0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
 8002e5a:	4401      	add	r1, r0
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002e5c:	4819      	ldr	r0, [pc, #100]	; (8002ec4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf0>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002e5e:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 8002e62:	440f      	add	r7, r1
 8002e64:	f897 b100 	ldrb.w	fp, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002e68:	f850 7028 	ldr.w	r7, [r0, r8, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002e6c:	4816      	ldr	r0, [pc, #88]	; (8002ec8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf4>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8002e6e:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8002e72:	440f      	add	r7, r1
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002e74:	f850 9029 	ldr.w	r9, [r0, r9, lsl #2]
 8002e78:	4814      	ldr	r0, [pc, #80]	; (8002ecc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf8>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002e7a:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002e7e:	f850 8028 	ldr.w	r8, [r0, r8, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002e82:	08ff      	lsrs	r7, r7, #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8002e84:	44c1      	add	r9, r8
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8002e86:	ea47 27cb 	orr.w	r7, r7, fp, lsl #11
 8002e8a:	eb01 4129 	add.w	r1, r1, r9, asr #16
 8002e8e:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
 8002e92:	0889      	lsrs	r1, r1, #2
 8002e94:	ea47 1741 	orr.w	r7, r7, r1, lsl #5
          for (j = 0; j < 8; j++)
 8002e98:	9906      	ldr	r1, [sp, #24]
            *(__IO uint16_t *)pOutAddr =
 8002e9a:	f825 7b02 	strh.w	r7, [r5], #2
          for (j = 0; j < 8; j++)
 8002e9e:	428d      	cmp	r5, r1
 8002ea0:	d1d1      	bne.n	8002e46 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x72>
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002ea2:	9901      	ldr	r1, [sp, #4]
            pChrom++;
 8002ea4:	3608      	adds	r6, #8
          pLum += 8;
 8002ea6:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002eaa:	440a      	add	r2, r1
    for (i = 0; i < 8; i++)
 8002eac:	9903      	ldr	r1, [sp, #12]
 8002eae:	3901      	subs	r1, #1
 8002eb0:	9103      	str	r1, [sp, #12]
 8002eb2:	d1bb      	bne.n	8002e2c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x58>
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 8002eb4:	34c0      	adds	r4, #192	; 0xc0
 8002eb6:	e79f      	b.n	8002df8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x24>
 8002eb8:	20010c44 	.word	0x20010c44
 8002ebc:	0802d9fc 	.word	0x0802d9fc
 8002ec0:	2000f7c4 	.word	0x2000f7c4
 8002ec4:	2000ebc4 	.word	0x2000ebc4
 8002ec8:	2000f3c4 	.word	0x2000f3c4
 8002ecc:	2000efc4 	.word	0x2000efc4

08002ed0 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ed4:	b085      	sub	sp, #20
 8002ed6:	4604      	mov	r4, r0
  uint32_t refline;

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 8002ed8:	0998      	lsrs	r0, r3, #6
{
 8002eda:	9102      	str	r1, [sp, #8]
  currentMCU = BlockIndex;

  while (currentMCU < (numberMCU + BlockIndex))
 8002edc:	eb02 1393 	add.w	r3, r2, r3, lsr #6
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002ee0:	491a      	ldr	r1, [pc, #104]	; (8002f4c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
  while (currentMCU < (numberMCU + BlockIndex))
 8002ee2:	9303      	str	r3, [sp, #12]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002ee4:	e9d1 8909 	ldrd	r8, r9, [r1, #36]	; 0x24
    pLum = pInBuffer;

    for (i = 0; i < 8; i++)
    {
      pOutAddr = pOutBuffer + refline;
      if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002ee8:	6909      	ldr	r1, [r1, #16]
 8002eea:	9101      	str	r1, [sp, #4]
  while (currentMCU < (numberMCU + BlockIndex))
 8002eec:	9b03      	ldr	r3, [sp, #12]
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d802      	bhi.n	8002ef8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x28>
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002ef2:	b005      	add	sp, #20
 8002ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002ef8:	00d3      	lsls	r3, r2, #3
    pLum = pInBuffer;
 8002efa:	46a4      	mov	ip, r4
    currentMCU++;
 8002efc:	3201      	adds	r2, #1
 8002efe:	2708      	movs	r7, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002f00:	fbb3 f1f8 	udiv	r1, r3, r8
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002f04:	fb08 3311 	mls	r3, r8, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002f08:	fb09 f501 	mul.w	r5, r9, r1
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002f12:	9901      	ldr	r1, [sp, #4]
 8002f14:	4299      	cmp	r1, r3
 8002f16:	d915      	bls.n	8002f44 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x74>
      pOutAddr = pOutBuffer + refline;
 8002f18:	9902      	ldr	r1, [sp, #8]
 8002f1a:	46e2      	mov	sl, ip
 8002f1c:	4419      	add	r1, r3
 8002f1e:	f101 0b10 	add.w	fp, r1, #16
          ySample =   (uint32_t)(*pLum);
 8002f22:	f81a 6b01 	ldrb.w	r6, [sl], #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
 8002f26:	08f5      	lsrs	r5, r6, #3
 8002f28:	08b6      	lsrs	r6, r6, #2
 8002f2a:	ea4f 2ec5 	mov.w	lr, r5, lsl #11
 8002f2e:	ea4e 1e46 	orr.w	lr, lr, r6, lsl #5
 8002f32:	ea45 050e 	orr.w	r5, r5, lr
 8002f36:	f821 5b02 	strh.w	r5, [r1], #2
        for (j = 0; j < 8; j++)
 8002f3a:	4559      	cmp	r1, fp
 8002f3c:	d1f1      	bne.n	8002f22 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x52>
          pLum++;
 8002f3e:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002f42:	444b      	add	r3, r9
    for (i = 0; i < 8; i++)
 8002f44:	3f01      	subs	r7, #1
 8002f46:	d1e4      	bne.n	8002f12 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
    pInBuffer +=  GRAY_444_BLOCK_SIZE;
 8002f48:	3440      	adds	r4, #64	; 0x40
 8002f4a:	e7cf      	b.n	8002eec <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1c>
 8002f4c:	20010c44 	.word	0x20010c44

08002f50 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8002f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f54:	b085      	sub	sp, #20
 8002f56:	4605      	mov	r5, r0
        pOutAddr = pOutBuffer+ refline;

          for (j = 0; j < 8; j++)
          {
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8002f58:	27ff      	movs	r7, #255	; 0xff
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 8002f5a:	0a18      	lsrs	r0, r3, #8
{
 8002f5c:	9102      	str	r1, [sp, #8]
  while (currentMCU < (numberMCU + BlockIndex))
 8002f5e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002f62:	4927      	ldr	r1, [pc, #156]	; (8003000 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb0>)
  while (currentMCU < (numberMCU + BlockIndex))
 8002f64:	9303      	str	r3, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002f66:	e9d1 9a09 	ldrd	r9, sl, [r1, #36]	; 0x24
      if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002f6a:	6909      	ldr	r1, [r1, #16]
 8002f6c:	9100      	str	r1, [sp, #0]
  while (currentMCU < (numberMCU + BlockIndex))
 8002f6e:	9b03      	ldr	r3, [sp, #12]
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d802      	bhi.n	8002f7a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8002f74:	b005      	add	sp, #20
 8002f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002f7a:	00d1      	lsls	r1, r2, #3
    pChrom = pInBuffer;
 8002f7c:	46ae      	mov	lr, r5
    currentMCU++;
 8002f7e:	3201      	adds	r2, #1
 8002f80:	f04f 0c08 	mov.w	ip, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8002f84:	fbb1 f3f9 	udiv	r3, r1, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8002f88:	fb09 1113 	mls	r1, r9, r3, r1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8002f8c:	fb0a f403 	mul.w	r4, sl, r3
 8002f90:	0049      	lsls	r1, r1, #1
 8002f92:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
      if (refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8002f96:	9b00      	ldr	r3, [sp, #0]
 8002f98:	428b      	cmp	r3, r1
 8002f9a:	d92b      	bls.n	8002ff4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xa4>
        pOutAddr = pOutBuffer+ refline;
 8002f9c:	9b02      	ldr	r3, [sp, #8]
 8002f9e:	4674      	mov	r4, lr
 8002fa0:	185e      	adds	r6, r3, r1
          for (j = 0; j < 8; j++)
 8002fa2:	f106 0310 	add.w	r3, r6, #16
 8002fa6:	9301      	str	r3, [sp, #4]
            color_k = (int32_t)(*(pChrom + 192));
 8002fa8:	f894 80c0 	ldrb.w	r8, [r4, #192]	; 0xc0
            pChrom++;
 8002fac:	3401      	adds	r4, #1
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8002fae:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8002fb2:	f814 bc01 	ldrb.w	fp, [r4, #-1]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8002fb6:	fb13 f308 	smulbb	r3, r3, r8
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8002fba:	fb1b fb08 	smulbb	fp, fp, r8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 8002fbe:	fbb3 f3f7 	udiv	r3, r3, r7
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8002fc2:	fbbb fbf7 	udiv	fp, fp, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002fc6:	109b      	asrs	r3, r3, #2
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8002fc8:	ea4f 0beb 	mov.w	fp, fp, asr #3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002fcc:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8002fce:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 8002fd2:	f894 b07f 	ldrb.w	fp, [r4, #127]	; 0x7f
 8002fd6:	fb1b fb08 	smulbb	fp, fp, r8
 8002fda:	fbbb fbf7 	udiv	fp, fp, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8002fde:	ea43 03db 	orr.w	r3, r3, fp, lsr #3
 8002fe2:	b29b      	uxth	r3, r3
          *(__IO uint16_t *)pOutAddr =
 8002fe4:	f826 3b02 	strh.w	r3, [r6], #2
          for (j = 0; j < 8; j++)
 8002fe8:	9b01      	ldr	r3, [sp, #4]
 8002fea:	429e      	cmp	r6, r3
 8002fec:	d1dc      	bne.n	8002fa8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x58>
            pChrom++;
 8002fee:	f10e 0e08 	add.w	lr, lr, #8
        refline += JPEG_ConvertorParams.ScaledWidth;
 8002ff2:	4451      	add	r1, sl
    for (i = 0; i < 8; i++)
 8002ff4:	f1bc 0c01 	subs.w	ip, ip, #1
 8002ff8:	d1cd      	bne.n	8002f96 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x46>
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 8002ffa:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8002ffe:	e7b6      	b.n	8002f6e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1e>
 8003000:	20010c44 	.word	0x20010c44

08003004 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8003004:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8003006:	68c4      	ldr	r4, [r0, #12]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8003008:	6886      	ldr	r6, [r0, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800300a:	6805      	ldr	r5, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 800300c:	fb06 f704 	mul.w	r7, r6, r4
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8003010:	4b26      	ldr	r3, [pc, #152]	; (80030ac <TGFX_JPEG_GetDecodeColorConvertFunc+0xa8>)

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8003012:	6840      	ldr	r0, [r0, #4]
  if (JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8003014:	2d10      	cmp	r5, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8003016:	ea4f 0747 	mov.w	r7, r7, lsl #1
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 800301a:	601d      	str	r5, [r3, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 800301c:	609c      	str	r4, [r3, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 800301e:	60de      	str	r6, [r3, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8003020:	611f      	str	r7, [r3, #16]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8003022:	6058      	str	r0, [r3, #4]
  if (JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8003024:	d139      	bne.n	800309a <TGFX_JPEG_GetDecodeColorConvertFunc+0x96>
  {
    if (JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8003026:	2801      	cmp	r0, #1
 8003028:	d121      	bne.n	800306e <TGFX_JPEG_GetDecodeColorConvertFunc+0x6a>
    {
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 800302a:	4821      	ldr	r0, [pc, #132]	; (80030b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0xac>)
 800302c:	6008      	str	r0, [r1, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;

      if (JPEG_ConvertorParams.LineOffset != 0)
 800302e:	f014 010f 	ands.w	r1, r4, #15
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8003032:	f04f 0010 	mov.w	r0, #16
 8003036:	bf18      	it	ne
 8003038:	f1c1 0110 	rsbne	r1, r1, #16
 800303c:	6159      	str	r1, [r3, #20]
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 800303e:	6959      	ldr	r1, [r3, #20]
 8003040:	4421      	add	r1, r4
 8003042:	6259      	str	r1, [r3, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
 8003044:	0061      	lsls	r1, r4, #1
 8003046:	6299      	str	r1, [r3, #40]	; 0x28

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8003048:	fbb4 f1f5 	udiv	r1, r4, r5
  if ((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 800304c:	fb05 4411 	mls	r4, r5, r1, r4
      JPEG_ConvertorParams.V_factor  = 8;
 8003050:	e9c3 5007 	strd	r5, r0, [r3, #28]
  if ((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8003054:	b104      	cbz	r4, 8003058 <TGFX_JPEG_GetDecodeColorConvertFunc+0x54>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
 8003056:	3101      	adds	r1, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8003058:	fbb6 f4f0 	udiv	r4, r6, r0
  if ((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 800305c:	fb00 6614 	mls	r6, r0, r4, r6
 8003060:	b106      	cbz	r6, 8003064 <TGFX_JPEG_GetDecodeColorConvertFunc+0x60>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
 8003062:	3401      	adds	r4, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8003064:	4361      	muls	r1, r4
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
 8003066:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8003068:	62d9      	str	r1, [r3, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 800306a:	6011      	str	r1, [r2, #0]
}
 800306c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800306e:	2802      	cmp	r0, #2
 8003070:	d109      	bne.n	8003086 <TGFX_JPEG_GetDecodeColorConvertFunc+0x82>
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8003072:	4810      	ldr	r0, [pc, #64]	; (80030b4 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb0>)
 8003074:	6008      	str	r0, [r1, #0]
      if (JPEG_ConvertorParams.LineOffset != 0)
 8003076:	f014 010f 	ands.w	r1, r4, #15
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 800307a:	bf18      	it	ne
 800307c:	f1c1 0110 	rsbne	r1, r1, #16
 8003080:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.V_factor  = 8;
 8003082:	2008      	movs	r0, #8
 8003084:	e7db      	b.n	800303e <TGFX_JPEG_GetDecodeColorConvertFunc+0x3a>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8003086:	480c      	ldr	r0, [pc, #48]	; (80030b8 <TGFX_JPEG_GetDecodeColorConvertFunc+0xb4>)
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8003088:	6008      	str	r0, [r1, #0]
    if (JPEG_ConvertorParams.LineOffset != 0)
 800308a:	f014 0107 	ands.w	r1, r4, #7
 800308e:	d001      	beq.n	8003094 <TGFX_JPEG_GetDecodeColorConvertFunc+0x90>
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8003090:	f1c1 0108 	rsb	r1, r1, #8
 8003094:	2508      	movs	r5, #8
 8003096:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.V_factor  = 8;
 8003098:	e7f3      	b.n	8003082 <TGFX_JPEG_GetDecodeColorConvertFunc+0x7e>
  else if (JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 800309a:	b90d      	cbnz	r5, 80030a0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x9c>
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 800309c:	4807      	ldr	r0, [pc, #28]	; (80030bc <TGFX_JPEG_GetDecodeColorConvertFunc+0xb8>)
 800309e:	e7f3      	b.n	8003088 <TGFX_JPEG_GetDecodeColorConvertFunc+0x84>
  else if (JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 80030a0:	2d30      	cmp	r5, #48	; 0x30
 80030a2:	d101      	bne.n	80030a8 <TGFX_JPEG_GetDecodeColorConvertFunc+0xa4>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 80030a4:	4806      	ldr	r0, [pc, #24]	; (80030c0 <TGFX_JPEG_GetDecodeColorConvertFunc+0xbc>)
 80030a6:	e7ef      	b.n	8003088 <TGFX_JPEG_GetDecodeColorConvertFunc+0x84>
    return HAL_ERROR; /* Color space Not supported*/
 80030a8:	2001      	movs	r0, #1
 80030aa:	e7df      	b.n	800306c <TGFX_JPEG_GetDecodeColorConvertFunc+0x68>
 80030ac:	20010c44 	.word	0x20010c44
 80030b0:	08002a8d 	.word	0x08002a8d
 80030b4:	08002c75 	.word	0x08002c75
 80030b8:	08002dd5 	.word	0x08002dd5
 80030bc:	08002ed1 	.word	0x08002ed1
 80030c0:	08002f51 	.word	0x08002f51

080030c4 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 80030c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030c8:	f8df c250 	ldr.w	ip, [pc, #592]	; 800331c <TGFX_JPEG_InitColorTables+0x258>
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
  int32_t i;

  for (i = 0; i <= 255; i++)
 80030cc:	2300      	movs	r3, #0
 80030ce:	f8df 8250 	ldr.w	r8, [pc, #592]	; 8003320 <TGFX_JPEG_InitColorTables+0x25c>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80030d2:	f644 4b8b 	movw	fp, #19595	; 0x4c8b
 80030d6:	4f7e      	ldr	r7, [pc, #504]	; (80032d0 <TGFX_JPEG_InitColorTables+0x20c>)
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80030d8:	f249 6a45 	movw	sl, #38469	; 0x9645
 80030dc:	4e7d      	ldr	r6, [pc, #500]	; (80032d4 <TGFX_JPEG_InitColorTables+0x210>)
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80030de:	f641 592f 	movw	r9, #7471	; 0x1d2f
 80030e2:	4d7d      	ldr	r5, [pc, #500]	; (80032d8 <TGFX_JPEG_InitColorTables+0x214>)
 80030e4:	4c7d      	ldr	r4, [pc, #500]	; (80032dc <TGFX_JPEG_InitColorTables+0x218>)
 80030e6:	487e      	ldr	r0, [pc, #504]	; (80032e0 <TGFX_JPEG_InitColorTables+0x21c>)
 80030e8:	497e      	ldr	r1, [pc, #504]	; (80032e4 <TGFX_JPEG_InitColorTables+0x220>)
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80030ea:	fb0b f203 	mul.w	r2, fp, r3
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80030ee:	f64e 3e2f 	movw	lr, #60207	; 0xeb2f
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80030f2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80030f6:	1412      	asrs	r2, r2, #16
 80030f8:	f848 2b04 	str.w	r2, [r8], #4
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 80030fc:	fb0a f203 	mul.w	r2, sl, r3
 8003100:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8003104:	1412      	asrs	r2, r2, #16
 8003106:	f84c 2b04 	str.w	r2, [ip], #4
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800310a:	fb09 f203 	mul.w	r2, r9, r3
 800310e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8003112:	1412      	asrs	r2, r2, #16
 8003114:	f847 2b04 	str.w	r2, [r7], #4
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8003118:	4a73      	ldr	r2, [pc, #460]	; (80032e8 <TGFX_JPEG_InitColorTables+0x224>)
 800311a:	435a      	muls	r2, r3
 800311c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8003120:	1412      	asrs	r2, r2, #16
 8003122:	f846 2b04 	str.w	r2, [r6], #4
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8003126:	4a71      	ldr	r2, [pc, #452]	; (80032ec <TGFX_JPEG_InitColorTables+0x228>)
 8003128:	435a      	muls	r2, r3
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800312a:	3301      	adds	r3, #1
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800312c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= 255; i++)
 8003130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8003134:	ea4f 4222 	mov.w	r2, r2, asr #16
 8003138:	f845 2b04 	str.w	r2, [r5], #4
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800313c:	f343 024f 	sbfx	r2, r3, #1, #16
 8003140:	f844 2b04 	str.w	r2, [r4], #4
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8003144:	4a6a      	ldr	r2, [pc, #424]	; (80032f0 <TGFX_JPEG_InitColorTables+0x22c>)
 8003146:	fb02 e203 	mla	r2, r2, r3, lr
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800314a:	f249 4ed0 	movw	lr, #38096	; 0x94d0
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 800314e:	ea4f 4222 	mov.w	r2, r2, asr #16
 8003152:	f840 2b04 	str.w	r2, [r0], #4
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8003156:	4a67      	ldr	r2, [pc, #412]	; (80032f4 <TGFX_JPEG_InitColorTables+0x230>)
 8003158:	fb02 e203 	mla	r2, r2, r3, lr
 800315c:	ea4f 4222 	mov.w	r2, r2, asr #16
 8003160:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0; i <= 255; i++)
 8003164:	d1c1      	bne.n	80030ea <TGFX_JPEG_InitColorTables+0x26>
 8003166:	4c64      	ldr	r4, [pc, #400]	; (80032f8 <TGFX_JPEG_InitColorTables+0x234>)
void TGFX_JPEG_Init_MCU_LUT(void)
{
  uint32_t i, j, offset;

  /*Y LUT */
  for (i = 0; i < 16; i++)
 8003168:	2200      	movs	r2, #0
  {
    for (j = 0; j < 16; j++)
 800316a:	00d3      	lsls	r3, r2, #3
  for (i = 0; i <= 255; i++)
 800316c:	4625      	mov	r5, r4
    for (j = 0; j < 16; j++)
 800316e:	2100      	movs	r1, #0
    {
      offset =  j + (i*8);
      if ((j>=8) && (i>=8)) offset+= 120;
 8003170:	2907      	cmp	r1, #7
 8003172:	f240 80a6 	bls.w	80032c2 <TGFX_JPEG_InitColorTables+0x1fe>
 8003176:	2a07      	cmp	r2, #7
 8003178:	bf8c      	ite	hi
 800317a:	f103 0078 	addhi.w	r0, r3, #120	; 0x78
      else  if ((j>=8) && (i<8)) offset+= 56;
 800317e:	f103 0038 	addls.w	r0, r3, #56	; 0x38
    for (j = 0; j < 16; j++)
 8003182:	3101      	adds	r1, #1
 8003184:	3301      	adds	r3, #1
      else  if ((j<8) && (i>=8)) offset+= 64;

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 8003186:	f825 0b02 	strh.w	r0, [r5], #2
    for (j = 0; j < 16; j++)
 800318a:	2910      	cmp	r1, #16
 800318c:	d1f0      	bne.n	8003170 <TGFX_JPEG_InitColorTables+0xac>
  for (i = 0; i < 16; i++)
 800318e:	3201      	adds	r2, #1
 8003190:	3420      	adds	r4, #32
 8003192:	2a10      	cmp	r2, #16
 8003194:	d1e9      	bne.n	800316a <TGFX_JPEG_InitColorTables+0xa6>
    }
  }

  /*Cb Cr K LUT*/
  for (i = 0; i < 16; i++)
 8003196:	2000      	movs	r0, #0
      offset = i*16 + j;

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8003198:	f8df e188 	ldr.w	lr, [pc, #392]	; 8003324 <TGFX_JPEG_InitColorTables+0x260>
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 800319c:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8003328 <TGFX_JPEG_InitColorTables+0x264>

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 80031a0:	f8df 9188 	ldr.w	r9, [pc, #392]	; 800332c <TGFX_JPEG_InitColorTables+0x268>
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 80031a4:	f8df a188 	ldr.w	sl, [pc, #392]	; 8003330 <TGFX_JPEG_InitColorTables+0x26c>
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 80031a8:	0844      	lsrs	r4, r0, #1
    for (j = 0; j < 16; j++)
 80031aa:	2500      	movs	r5, #0
 80031ac:	00c3      	lsls	r3, r0, #3
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 80031ae:	00e4      	lsls	r4, r4, #3
 80031b0:	fa1f fc83 	uxth.w	ip, r3
 80031b4:	b2a4      	uxth	r4, r4
 80031b6:	0142      	lsls	r2, r0, #5
 80031b8:	f3c5 034f 	ubfx	r3, r5, #1, #16
 80031bc:	4f4f      	ldr	r7, [pc, #316]	; (80032fc <TGFX_JPEG_InitColorTables+0x238>)
    for (j = 0; j < 16; j++)
 80031be:	3501      	adds	r5, #1
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 80031c0:	1919      	adds	r1, r3, r4
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 80031c2:	4463      	add	r3, ip
    for (j = 0; j < 16; j++)
 80031c4:	2d10      	cmp	r5, #16
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 80031c6:	b289      	uxth	r1, r1
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 80031c8:	b29b      	uxth	r3, r3
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 80031ca:	f501 7680 	add.w	r6, r1, #256	; 0x100
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 80031ce:	f103 0b80 	add.w	fp, r3, #128	; 0x80
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 80031d2:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 80031d6:	b2b6      	uxth	r6, r6
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 80031d8:	f822 3008 	strh.w	r3, [r2, r8]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 80031dc:	53d6      	strh	r6, [r2, r7]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 80031de:	4f48      	ldr	r7, [pc, #288]	; (8003300 <TGFX_JPEG_InitColorTables+0x23c>)
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 80031e0:	f822 600a 	strh.w	r6, [r2, sl]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 80031e4:	f822 b007 	strh.w	fp, [r2, r7]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 80031e8:	f501 7ba0 	add.w	fp, r1, #320	; 0x140
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 80031ec:	f501 71c0 	add.w	r1, r1, #384	; 0x180
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 80031f0:	f822 b00e 	strh.w	fp, [r2, lr]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 80031f4:	f822 1009 	strh.w	r1, [r2, r9]
    for (j = 0; j < 16; j++)
 80031f8:	f102 0202 	add.w	r2, r2, #2
 80031fc:	d1dc      	bne.n	80031b8 <TGFX_JPEG_InitColorTables+0xf4>
  for (i = 0; i < 16; i++)
 80031fe:	3001      	adds	r0, #1
 8003200:	2810      	cmp	r0, #16
 8003202:	d1d1      	bne.n	80031a8 <TGFX_JPEG_InitColorTables+0xe4>
 8003204:	2100      	movs	r1, #0
 8003206:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8003334 <TGFX_JPEG_InitColorTables+0x270>
 800320a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8003338 <TGFX_JPEG_InitColorTables+0x274>
 800320e:	4608      	mov	r0, r1
 8003210:	f8df e128 	ldr.w	lr, [pc, #296]	; 800333c <TGFX_JPEG_InitColorTables+0x278>
 8003214:	f8df c128 	ldr.w	ip, [pc, #296]	; 8003340 <TGFX_JPEG_InitColorTables+0x27c>
 8003218:	b283      	uxth	r3, r0
 800321a:	eb09 0701 	add.w	r7, r9, r1
 800321e:	eb08 0601 	add.w	r6, r8, r1
 8003222:	eb0e 0501 	add.w	r5, lr, r1
    }
  }

  for (i = 0; i < 8; i++)
  {
    for (j = 0; j < 8; j++)
 8003226:	f103 0208 	add.w	r2, r3, #8
 800322a:	eb0c 0401 	add.w	r4, ip, r1
 800322e:	b292      	uxth	r2, r2
    {
      offset = i*8 + j;

      JPEG_Y_MCU_444_LUT[offset]  = offset;
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8003230:	f103 0a40 	add.w	sl, r3, #64	; 0x40
      JPEG_Y_MCU_444_LUT[offset]  = offset;
 8003234:	f827 3b02 	strh.w	r3, [r7], #2
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8003238:	f826 ab02 	strh.w	sl, [r6], #2
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 800323c:	f103 0a80 	add.w	sl, r3, #128	; 0x80
 8003240:	f825 ab02 	strh.w	sl, [r5], #2
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8003244:	f103 0ac0 	add.w	sl, r3, #192	; 0xc0
    for (j = 0; j < 8; j++)
 8003248:	3301      	adds	r3, #1
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 800324a:	f824 ab02 	strh.w	sl, [r4], #2
    for (j = 0; j < 8; j++)
 800324e:	b29b      	uxth	r3, r3
 8003250:	4293      	cmp	r3, r2
 8003252:	d1ed      	bne.n	8003230 <TGFX_JPEG_InitColorTables+0x16c>
  for (i = 0; i < 8; i++)
 8003254:	3008      	adds	r0, #8
 8003256:	3110      	adds	r1, #16
 8003258:	2840      	cmp	r0, #64	; 0x40
 800325a:	d1dd      	bne.n	8003218 <TGFX_JPEG_InitColorTables+0x154>
 800325c:	4d29      	ldr	r5, [pc, #164]	; (8003304 <TGFX_JPEG_InitColorTables+0x240>)
  for (i = 0; i <= 255; i++)
 800325e:	2300      	movs	r3, #0
 8003260:	4c29      	ldr	r4, [pc, #164]	; (8003308 <TGFX_JPEG_InitColorTables+0x244>)
 8003262:	482a      	ldr	r0, [pc, #168]	; (800330c <TGFX_JPEG_InitColorTables+0x248>)
 8003264:	492a      	ldr	r1, [pc, #168]	; (8003310 <TGFX_JPEG_InitColorTables+0x24c>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8003266:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8003344 <TGFX_JPEG_InitColorTables+0x280>
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 800326a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8003348 <TGFX_JPEG_InitColorTables+0x284>
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 800326e:	4f29      	ldr	r7, [pc, #164]	; (8003314 <TGFX_JPEG_InitColorTables+0x250>)
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8003270:	4e29      	ldr	r6, [pc, #164]	; (8003318 <TGFX_JPEG_InitColorTables+0x254>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8003272:	fb0e f203 	mul.w	r2, lr, r3
 8003276:	f5a2 0232 	sub.w	r2, r2, #11665408	; 0xb20000
 800327a:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 800327e:	1412      	asrs	r2, r2, #16
 8003280:	f845 2b04 	str.w	r2, [r5], #4
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8003284:	fb0c f203 	mul.w	r2, ip, r3
 8003288:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800328c:	f5a2 42a0 	sub.w	r2, r2, #20480	; 0x5000
 8003290:	1412      	asrs	r2, r2, #16
 8003292:	f844 2b04 	str.w	r2, [r4], #4
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 8003296:	fb07 f203 	mul.w	r2, r7, r3
 800329a:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800329e:	f502 42d0 	add.w	r2, r2, #26624	; 0x6800
 80032a2:	f840 2b04 	str.w	r2, [r0], #4
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 80032a6:	fb06 f203 	mul.w	r2, r6, r3
  for (i = 0; i <= 255; i++)
 80032aa:	3301      	adds	r3, #1
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 80032ac:	f502 1230 	add.w	r2, r2, #2883584	; 0x2c0000
  for (i = 0; i <= 255; i++)
 80032b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 80032b4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80032b8:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0; i <= 255; i++)
 80032bc:	d1d9      	bne.n	8003272 <TGFX_JPEG_InitColorTables+0x1ae>
}
 80032be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else  if ((j<8) && (i>=8)) offset+= 64;
 80032c2:	2a07      	cmp	r2, #7
 80032c4:	bf8c      	ite	hi
 80032c6:	f103 0040 	addhi.w	r0, r3, #64	; 0x40
      offset =  j + (i*8);
 80032ca:	4618      	movls	r0, r3
 80032cc:	e759      	b.n	8003182 <TGFX_JPEG_InitColorTables+0xbe>
 80032ce:	bf00      	nop
 80032d0:	2000e7c4 	.word	0x2000e7c4
 80032d4:	20011804 	.word	0x20011804
 80032d8:	2000fbc4 	.word	0x2000fbc4
 80032dc:	2000dfc4 	.word	0x2000dfc4
 80032e0:	2000ffc4 	.word	0x2000ffc4
 80032e4:	2000e3c4 	.word	0x2000e3c4
 80032e8:	ffffd4d1 	.word	0xffffd4d1
 80032ec:	ffffab30 	.word	0xffffab30
 80032f0:	ffff94d1 	.word	0xffff94d1
 80032f4:	ffffeb30 	.word	0xffffeb30
 80032f8:	20011604 	.word	0x20011604
 80032fc:	200107c4 	.word	0x200107c4
 8003300:	200109c4 	.word	0x200109c4
 8003304:	2000f7c4 	.word	0x2000f7c4
 8003308:	2000ebc4 	.word	0x2000ebc4
 800330c:	2000f3c4 	.word	0x2000f3c4
 8003310:	2000efc4 	.word	0x2000efc4
 8003314:	ffff4930 	.word	0xffff4930
 8003318:	ffffa7e8 	.word	0xffffa7e8
 800331c:	200103c4 	.word	0x200103c4
 8003320:	20011c04 	.word	0x20011c04
 8003324:	20010c84 	.word	0x20010c84
 8003328:	20010e84 	.word	0x20010e84
 800332c:	20011104 	.word	0x20011104
 8003330:	20011304 	.word	0x20011304
 8003334:	20011584 	.word	0x20011584
 8003338:	20010bc4 	.word	0x20010bc4
 800333c:	20011084 	.word	0x20011084
 8003340:	20011504 	.word	0x20011504
 8003344:	000166e8 	.word	0x000166e8
 8003348:	0001c5a0 	.word	0x0001c5a0

0800334c <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 800334c:	4901      	ldr	r1, [pc, #4]	; (8003354 <vApplicationIdleHook+0x8>)
 800334e:	2000      	movs	r0, #0
 8003350:	f00d ba08 	b.w	8010764 <vTaskSetApplicationTaskTag>
 8003354:	08001489 	.word	0x08001489

08003358 <StartDefaultTask>:
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
	/* USER CODE BEGIN 5 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, rxData, 20);
 8003358:	2214      	movs	r2, #20
 800335a:	4904      	ldr	r1, [pc, #16]	; (800336c <StartDefaultTask+0x14>)
 800335c:	4804      	ldr	r0, [pc, #16]	; (8003370 <StartDefaultTask+0x18>)
void StartDefaultTask(void *argument) {
 800335e:	b508      	push	{r3, lr}
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, rxData, 20);
 8003360:	f00b fa6e 	bl	800e840 <HAL_UARTEx_ReceiveToIdle_IT>
	for (;;) {
		osDelay(100);
 8003364:	2064      	movs	r0, #100	; 0x64
 8003366:	f00b fba9 	bl	800eabc <osDelay>
	for (;;) {
 800336a:	e7fb      	b.n	8003364 <StartDefaultTask+0xc>
 800336c:	200123c0 	.word	0x200123c0
 8003370:	20012338 	.word	0x20012338

08003374 <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi) {
 8003374:	b500      	push	{lr}
	s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8003376:	f44f 7340 	mov.w	r3, #768	; 0x300
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi) {
 800337a:	b095      	sub	sp, #84	; 0x54
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800337c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003380:	4817      	ldr	r0, [pc, #92]	; (80033e0 <QSPI_WriteEnable.constprop.0+0x6c>)
	s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8003382:	930c      	str	r3, [sp, #48]	; 0x30
	s_command.Instruction = WRITE_ENABLE_CMD;
 8003384:	2306      	movs	r3, #6
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003386:	a906      	add	r1, sp, #24
	s_command.Instruction = WRITE_ENABLE_CMD;
 8003388:	9306      	str	r3, [sp, #24]
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 800338a:	2300      	movs	r3, #0
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800338c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
	s_command.DataMode = QSPI_DATA_NONE;
 8003390:	930f      	str	r3, [sp, #60]	; 0x3c
	s_command.DummyCycles = 0;
 8003392:	930b      	str	r3, [sp, #44]	; 0x2c
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8003394:	9313      	str	r3, [sp, #76]	; 0x4c
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8003396:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800339a:	f009 fc8d 	bl	800ccb8 <HAL_QSPI_Command>
 800339e:	b9e0      	cbnz	r0, 80033da <QSPI_WriteEnable.constprop.0+0x66>
	s_config.Match = MX25L512_SR_WREN;
 80033a0:	2302      	movs	r3, #2
	s_config.Interval = 0x10;
 80033a2:	2201      	movs	r2, #1
	s_command.Instruction = READ_STATUS_REG_CMD;
 80033a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
	s_config.MatchMode = QSPI_MATCH_MODE_AND;
 80033a8:	9004      	str	r0, [sp, #16]
	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config,
 80033aa:	480d      	ldr	r0, [pc, #52]	; (80033e0 <QSPI_WriteEnable.constprop.0+0x6c>)
	s_config.Mask = MX25L512_SR_WREN;
 80033ac:	e9cd 3300 	strd	r3, r3, [sp]
	s_config.Interval = 0x10;
 80033b0:	2310      	movs	r3, #16
 80033b2:	e9cd 3202 	strd	r3, r2, [sp, #8]
	s_command.Instruction = READ_STATUS_REG_CMD;
 80033b6:	2305      	movs	r3, #5
	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config,
 80033b8:	466a      	mov	r2, sp
	s_command.Instruction = READ_STATUS_REG_CMD;
 80033ba:	e9cd 1305 	strd	r1, r3, [sp, #20]
	s_command.DataMode = QSPI_DATA_4_LINES;
 80033be:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config,
 80033c2:	a906      	add	r1, sp, #24
	s_command.DataMode = QSPI_DATA_4_LINES;
 80033c4:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config,
 80033c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80033ca:	f009 fd70 	bl	800ceae <HAL_QSPI_AutoPolling>
		return QSPI_ERROR;
 80033ce:	3800      	subs	r0, #0
 80033d0:	bf18      	it	ne
 80033d2:	2001      	movne	r0, #1
}
 80033d4:	b015      	add	sp, #84	; 0x54
 80033d6:	f85d fb04 	ldr.w	pc, [sp], #4
		return QSPI_ERROR;
 80033da:	2001      	movs	r0, #1
 80033dc:	e7fa      	b.n	80033d4 <QSPI_WriteEnable.constprop.0+0x60>
 80033de:	bf00      	nop
 80033e0:	200122b8 	.word	0x200122b8

080033e4 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80033e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (osMessageQueueGetSpace(uartQueueHandle) > 0) {
 80033e8:	4d11      	ldr	r5, [pc, #68]	; (8003430 <HAL_UARTEx_RxEventCallback+0x4c>)
	rxData[Size] = '\0';
 80033ea:	2700      	movs	r7, #0
 80033ec:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8003438 <HAL_UARTEx_RxEventCallback+0x54>
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80033f0:	460c      	mov	r4, r1
	if (osMessageQueueGetSpace(uartQueueHandle) > 0) {
 80033f2:	6828      	ldr	r0, [r5, #0]
	rxData[Size] = '\0';
 80033f4:	f809 7001 	strb.w	r7, [r9, r1]
	if (osMessageQueueGetSpace(uartQueueHandle) > 0) {
 80033f8:	f00b fda6 	bl	800ef48 <osMessageQueueGetSpace>
 80033fc:	b188      	cbz	r0, 8003422 <HAL_UARTEx_RxEventCallback+0x3e>
		strncpy(uartData_q->Data, (char *)rxData, Size + 1);
 80033fe:	4e0d      	ldr	r6, [pc, #52]	; (8003434 <HAL_UARTEx_RxEventCallback+0x50>)
 8003400:	3401      	adds	r4, #1
 8003402:	4649      	mov	r1, r9
 8003404:	f8d6 8000 	ldr.w	r8, [r6]
 8003408:	4622      	mov	r2, r4
 800340a:	f108 0004 	add.w	r0, r8, #4
 800340e:	f027 ff57 	bl	802b2c0 <strncpy>
		osMessageQueuePut(uartQueueHandle, &uartData_q, 0, 0);
 8003412:	463b      	mov	r3, r7
 8003414:	463a      	mov	r2, r7
 8003416:	4631      	mov	r1, r6
 8003418:	6828      	ldr	r0, [r5, #0]
		uartData_q->size = Size + 1;
 800341a:	f8c8 4000 	str.w	r4, [r8]
		osMessageQueuePut(uartQueueHandle, &uartData_q, 0, 0);
 800341e:	f00b fd11 	bl	800ee44 <osMessageQueuePut>
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, rxData, 20);
 8003422:	2214      	movs	r2, #20
 8003424:	4904      	ldr	r1, [pc, #16]	; (8003438 <HAL_UARTEx_RxEventCallback+0x54>)
 8003426:	4805      	ldr	r0, [pc, #20]	; (800343c <HAL_UARTEx_RxEventCallback+0x58>)
}
 8003428:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, rxData, 20);
 800342c:	f00b ba08 	b.w	800e840 <HAL_UARTEx_ReceiveToIdle_IT>
 8003430:	200123dc 	.word	0x200123dc
 8003434:	200123d8 	.word	0x200123d8
 8003438:	200123c0 	.word	0x200123c0
 800343c:	20012338 	.word	0x20012338

08003440 <SystemClock_Config>:
void SystemClock_Config(void) {
 8003440:	b510      	push	{r4, lr}
 8003442:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003444:	2210      	movs	r2, #16
 8003446:	2100      	movs	r1, #0
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003448:	2402      	movs	r4, #2
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800344a:	a809      	add	r0, sp, #36	; 0x24
 800344c:	f027 ff1e 	bl	802b28c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003450:	2214      	movs	r2, #20
 8003452:	2100      	movs	r1, #0
 8003454:	a802      	add	r0, sp, #8
 8003456:	f027 ff19 	bl	802b28c <memset>
	__HAL_RCC_PWR_CLK_ENABLE();
 800345a:	4b1e      	ldr	r3, [pc, #120]	; (80034d4 <SystemClock_Config+0x94>)
	RCC_OscInitStruct.PLL.PLLN = 400;
 800345c:	2119      	movs	r1, #25
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800345e:	a807      	add	r0, sp, #28
	__HAL_RCC_PWR_CLK_ENABLE();
 8003460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003462:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003466:	641a      	str	r2, [r3, #64]	; 0x40
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	9b00      	ldr	r3, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003472:	4b19      	ldr	r3, [pc, #100]	; (80034d8 <SystemClock_Config+0x98>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800347a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800347c:	2201      	movs	r2, #1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	9b01      	ldr	r3, [sp, #4]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003488:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800348c:	e9cd 2307 	strd	r2, r3, [sp, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003490:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003494:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLN = 400;
 8003498:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800349c:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLR = 7;
 80034a0:	2307      	movs	r3, #7
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80034a2:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLR = 7;
 80034a6:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80034a8:	f009 fd92 	bl	800cfd0 <HAL_RCC_OscConfig>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80034ac:	f009 fa96 	bl	800c9dc <HAL_PWREx_EnableOverDrive>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80034b0:	230f      	movs	r3, #15
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80034b2:	2000      	movs	r0, #0
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 80034b4:	2106      	movs	r1, #6
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80034ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80034be:	e9cd 0304 	strd	r0, r3, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80034c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 80034c6:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80034c8:	9306      	str	r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 80034ca:	f009 ff71 	bl	800d3b0 <HAL_RCC_ClockConfig>
}
 80034ce:	b014      	add	sp, #80	; 0x50
 80034d0:	bd10      	pop	{r4, pc}
 80034d2:	bf00      	nop
 80034d4:	40023800 	.word	0x40023800
 80034d8:	40007000 	.word	0x40007000

080034dc <MX_I2C4_Init>:
void MX_I2C4_Init(void) {
 80034dc:	b538      	push	{r3, r4, r5, lr}
	hi2c4.Init.Timing = 0x00C0EAFF;
 80034de:	4a0d      	ldr	r2, [pc, #52]	; (8003514 <MX_I2C4_Init+0x38>)
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034e0:	2500      	movs	r5, #0
	hi2c4.Instance = I2C4;
 80034e2:	4c0d      	ldr	r4, [pc, #52]	; (8003518 <MX_I2C4_Init+0x3c>)
	hi2c4.Init.Timing = 0x00C0EAFF;
 80034e4:	4b0d      	ldr	r3, [pc, #52]	; (800351c <MX_I2C4_Init+0x40>)
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 80034e6:	4620      	mov	r0, r4
	hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034e8:	6225      	str	r5, [r4, #32]
	hi2c4.Init.Timing = 0x00C0EAFF;
 80034ea:	e9c4 2300 	strd	r2, r3, [r4]
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034ee:	2301      	movs	r3, #1
	hi2c4.Init.OwnAddress2 = 0;
 80034f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034f4:	e9c4 5302 	strd	r5, r3, [r4, #8]
	hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034f8:	e9c4 5506 	strd	r5, r5, [r4, #24]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 80034fc:	f007 ff00 	bl	800b300 <HAL_I2C_Init>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE)
 8003500:	4629      	mov	r1, r5
 8003502:	4620      	mov	r0, r4
 8003504:	f008 f925 	bl	800b752 <HAL_I2CEx_ConfigAnalogFilter>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK) {
 8003508:	4629      	mov	r1, r5
 800350a:	4620      	mov	r0, r4
}
 800350c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK) {
 8003510:	f008 b945 	b.w	800b79e <HAL_I2CEx_ConfigDigitalFilter>
 8003514:	40006000 	.word	0x40006000
 8003518:	20012164 	.word	0x20012164
 800351c:	00c0eaff 	.word	0x00c0eaff

08003520 <main>:
int main(void) {
 8003520:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003524:	b0bd      	sub	sp, #244	; 0xf4
  __ASM volatile ("dsb 0xF":::"memory");
 8003526:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800352a:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800352e:	4ac9      	ldr	r2, [pc, #804]	; (8003854 <main+0x334>)
 8003530:	2100      	movs	r1, #0
 8003532:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003536:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800353a:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800353e:	6953      	ldr	r3, [r2, #20]
 8003540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003544:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003546:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800354a:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800354e:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003552:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003556:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800355a:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800355e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003562:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8003566:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003568:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800356c:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800356e:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8003572:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003574:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8003578:	d2f9      	bcs.n	800356e <main+0x4e>
    } while(sets-- != 0U);
 800357a:	3b20      	subs	r3, #32
 800357c:	f113 0f20 	cmn.w	r3, #32
 8003580:	d1f2      	bne.n	8003568 <main+0x48>
 8003582:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003586:	6953      	ldr	r3, [r2, #20]
 8003588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358c:	6153      	str	r3, [r2, #20]
 800358e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003592:	f3bf 8f6f 	isb	sy
}

/* MPU Configuration */

void MPU_Config(void) {
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8003596:	f04f 0910 	mov.w	r9, #16
	HAL_Init();
 800359a:	f006 fbf7 	bl	8009d8c <HAL_Init>
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 800359e:	2100      	movs	r1, #0
 80035a0:	a82e      	add	r0, sp, #184	; 0xb8
 80035a2:	464a      	mov	r2, r9
	/* Disables the MPU */
	HAL_MPU_Disable();

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80035a4:	2501      	movs	r5, #1
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 80035a6:	f027 fe71 	bl	802b28c <memset>
	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
	MPU_InitStruct.BaseAddress = 0x90000000;
	MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80035aa:	2400      	movs	r4, #0
	HAL_MPU_Disable();
 80035ac:	f006 fc88 	bl	8009ec0 <HAL_MPU_Disable>
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80035b0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80035b4:	4ba8      	ldr	r3, [pc, #672]	; (8003858 <main+0x338>)
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80035b6:	a82e      	add	r0, sp, #184	; 0xb8
	MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 80035b8:	261c      	movs	r6, #28
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80035ba:	f8ad 50b8 	strh.w	r5, [sp, #184]	; 0xb8

	HAL_MPU_ConfigRegion(&MPU_InitStruct);

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80035be:	f04f 0802 	mov.w	r8, #2
	MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80035c2:	f04f 0b03 	mov.w	fp, #3
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80035c6:	f240 1701 	movw	r7, #257	; 0x101

	HAL_MPU_ConfigRegion(&MPU_InitStruct);

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80035ca:	f04f 0a04 	mov.w	sl, #4
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80035ce:	e9cd 232f 	strd	r2, r3, [sp, #188]	; 0xbc
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80035d2:	4ba2      	ldr	r3, [pc, #648]	; (800385c <main+0x33c>)
 80035d4:	9331      	str	r3, [sp, #196]	; 0xc4
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80035d6:	f006 fc91 	bl	8009efc <HAL_MPU_ConfigRegion>
	MPU_InitStruct.BaseAddress = 0x90000000;
 80035da:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80035de:	a82e      	add	r0, sp, #184	; 0xb8
	MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 80035e0:	f88d 60c0 	strb.w	r6, [sp, #192]	; 0xc0
	MPU_InitStruct.BaseAddress = 0x90000000;
 80035e4:	932f      	str	r3, [sp, #188]	; 0xbc
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80035e6:	f88d 50b9 	strb.w	r5, [sp, #185]	; 0xb9
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80035ea:	f88d 40c3 	strb.w	r4, [sp, #195]	; 0xc3
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80035ee:	f8ad 40c6 	strh.w	r4, [sp, #198]	; 0xc6
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80035f2:	f006 fc83 	bl	8009efc <HAL_MPU_ConfigRegion>
	MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80035f6:	f04f 0319 	mov.w	r3, #25
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80035fa:	a82e      	add	r0, sp, #184	; 0xb8
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80035fc:	f8ad 70c6 	strh.w	r7, [sp, #198]	; 0xc6
	MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8003600:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
	MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8003604:	f88d 80b9 	strb.w	r8, [sp, #185]	; 0xb9
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003608:	f88d b0c3 	strb.w	fp, [sp, #195]	; 0xc3
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800360c:	f006 fc76 	bl	8009efc <HAL_MPU_ConfigRegion>
	MPU_InitStruct.BaseAddress = 0xC0000000;
 8003610:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003614:	a82e      	add	r0, sp, #184	; 0xb8
	MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8003616:	f88d 60c0 	strb.w	r6, [sp, #192]	; 0xc0
	MPU_InitStruct.BaseAddress = 0xC0000000;
 800361a:	932f      	str	r3, [sp, #188]	; 0xbc
	MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800361c:	f88d b0b9 	strb.w	fp, [sp, #185]	; 0xb9
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003620:	f88d 40c3 	strb.w	r4, [sp, #195]	; 0xc3
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003624:	f8ad 40c6 	strh.w	r4, [sp, #198]	; 0xc6
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003628:	f006 fc68 	bl	8009efc <HAL_MPU_ConfigRegion>
	MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 800362c:	2317      	movs	r3, #23
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800362e:	a82e      	add	r0, sp, #184	; 0xb8
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8003630:	f8ad 70c6 	strh.w	r7, [sp, #198]	; 0xc6
	MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8003634:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003638:	4f89      	ldr	r7, [pc, #548]	; (8003860 <main+0x340>)
	MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 800363a:	f88d a0b9 	strb.w	sl, [sp, #185]	; 0xb9
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800363e:	f88d b0c3 	strb.w	fp, [sp, #195]	; 0xc3
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003642:	f006 fc5b 	bl	8009efc <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003646:	4650      	mov	r0, sl
 8003648:	f006 fc48 	bl	8009edc <HAL_MPU_Enable>
	SystemClock_Config();
 800364c:	f7ff fef8 	bl	8003440 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003650:	2214      	movs	r2, #20
 8003652:	4621      	mov	r1, r4
 8003654:	a82e      	add	r0, sp, #184	; 0xb8
 8003656:	f027 fe19 	bl	802b28c <memset>
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 800365c:	462a      	mov	r2, r5
 800365e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003662:	ea43 0309 	orr.w	r3, r3, r9
	HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8003666:	487f      	ldr	r0, [pc, #508]	; (8003864 <main+0x344>)
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003668:	633b      	str	r3, [r7, #48]	; 0x30
 800366a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366c:	ea03 0309 	and.w	r3, r3, r9
 8003670:	9304      	str	r3, [sp, #16]
 8003672:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003676:	ea43 0308 	orr.w	r3, r3, r8
 800367a:	633b      	str	r3, [r7, #48]	; 0x30
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367e:	ea03 0308 	and.w	r3, r3, r8
 8003682:	9305      	str	r3, [sp, #20]
 8003684:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800368c:	633b      	str	r3, [r7, #48]	; 0x30
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003694:	9306      	str	r3, [sp, #24]
 8003696:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	f043 0308 	orr.w	r3, r3, #8
 800369e:	633b      	str	r3, [r7, #48]	; 0x30
 80036a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	9307      	str	r3, [sp, #28]
 80036a8:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80036aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ac:	ea43 030a 	orr.w	r3, r3, sl
 80036b0:	633b      	str	r3, [r7, #48]	; 0x30
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	ea03 030a 	and.w	r3, r3, sl
 80036b8:	9308      	str	r3, [sp, #32]
 80036ba:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 80036bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c2:	633b      	str	r3, [r7, #48]	; 0x30
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ca:	9309      	str	r3, [sp, #36]	; 0x24
 80036cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80036ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d0:	f043 0320 	orr.w	r3, r3, #32
 80036d4:	633b      	str	r3, [r7, #48]	; 0x30
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	f003 0320 	and.w	r3, r3, #32
 80036dc:	930a      	str	r3, [sp, #40]	; 0x28
 80036de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 80036e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036e6:	633b      	str	r3, [r7, #48]	; 0x30
 80036e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80036f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f8:	633b      	str	r3, [r7, #48]	; 0x30
 80036fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003700:	930c      	str	r3, [sp, #48]	; 0x30
 8003702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003706:	432b      	orrs	r3, r5
 8003708:	633b      	str	r3, [r7, #48]	; 0x30
 800370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370c:	402b      	ands	r3, r5
 800370e:	930d      	str	r3, [sp, #52]	; 0x34
 8003710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 8003712:	f007 fccd 	bl	800b0b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, RENDER_TIME_Pin | VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8003716:	4622      	mov	r2, r4
 8003718:	21c0      	movs	r1, #192	; 0xc0
 800371a:	4853      	ldr	r0, [pc, #332]	; (8003868 <main+0x348>)
 800371c:	f007 fcc8 	bl	800b0b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8003720:	4622      	mov	r2, r4
 8003722:	2140      	movs	r1, #64	; 0x40
 8003724:	4851      	ldr	r0, [pc, #324]	; (800386c <main+0x34c>)
 8003726:	f007 fcc3 	bl	800b0b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 800372a:	4622      	mov	r2, r4
 800372c:	4641      	mov	r1, r8
 800372e:	484d      	ldr	r0, [pc, #308]	; (8003864 <main+0x344>)
 8003730:	f007 fcbe 	bl	800b0b0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = DSI_RESET_Pin;
 8003734:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 8003738:	a92e      	add	r1, sp, #184	; 0xb8
 800373a:	484a      	ldr	r0, [pc, #296]	; (8003864 <main+0x344>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800373c:	e9cd 352e 	strd	r3, r5, [sp, #184]	; 0xb8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003740:	e9cd 5530 	strd	r5, r5, [sp, #192]	; 0xc0
	HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 8003744:	f007 fb2c 	bl	800ada0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RENDER_TIME_Pin | VSYNC_FREQ_Pin;
 8003748:	22c0      	movs	r2, #192	; 0xc0
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800374a:	a92e      	add	r1, sp, #184	; 0xb8
 800374c:	4846      	ldr	r0, [pc, #280]	; (8003868 <main+0x348>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800374e:	e9cd 252e 	strd	r2, r5, [sp, #184]	; 0xb8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003752:	e9cd 4b30 	strd	r4, fp, [sp, #192]	; 0xc0
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003756:	f007 fb23 	bl	800ada0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 800375a:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800375c:	a92e      	add	r1, sp, #184	; 0xb8
 800375e:	4843      	ldr	r0, [pc, #268]	; (800386c <main+0x34c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003760:	e9cd 352e 	strd	r3, r5, [sp, #184]	; 0xb8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003764:	e9cd 4b30 	strd	r4, fp, [sp, #192]	; 0xc0
	HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8003768:	f007 fb1a 	bl	800ada0 <HAL_GPIO_Init>
	HAL_GPIO_Init(USER_BUT_GPIO_Port, &GPIO_InitStruct);
 800376c:	a92e      	add	r1, sp, #184	; 0xb8
 800376e:	4840      	ldr	r0, [pc, #256]	; (8003870 <main+0x350>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003770:	9430      	str	r4, [sp, #192]	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003772:	e9cd 542e 	strd	r5, r4, [sp, #184]	; 0xb8
	HAL_GPIO_Init(USER_BUT_GPIO_Port, &GPIO_InitStruct);
 8003776:	f007 fb13 	bl	800ada0 <HAL_GPIO_Init>
	HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 800377a:	a92e      	add	r1, sp, #184	; 0xb8
 800377c:	4839      	ldr	r0, [pc, #228]	; (8003864 <main+0x344>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800377e:	e9cd 852e 	strd	r8, r5, [sp, #184]	; 0xb8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003782:	e9cd 4b30 	strd	r4, fp, [sp, #192]	; 0xc0
	HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8003786:	f007 fb0b 	bl	800ada0 <HAL_GPIO_Init>
	__HAL_RCC_DMA2_CLK_ENABLE();
 800378a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800378c:	2105      	movs	r1, #5
 800378e:	2038      	movs	r0, #56	; 0x38
	__HAL_RCC_DMA2_CLK_ENABLE();
 8003790:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003794:	633a      	str	r2, [r7, #48]	; 0x30
 8003796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	hdsi.Instance = DSI;
 8003798:	4f36      	ldr	r7, [pc, #216]	; (8003874 <main+0x354>)
	__HAL_RCC_DMA2_CLK_ENABLE();
 800379a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800379e:	9203      	str	r2, [sp, #12]
 80037a0:	9a03      	ldr	r2, [sp, #12]
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80037a2:	4622      	mov	r2, r4
 80037a4:	f006 fb3a 	bl	8009e1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80037a8:	2038      	movs	r0, #56	; 0x38
 80037aa:	f006 fb69 	bl	8009e80 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80037ae:	4622      	mov	r2, r4
 80037b0:	2105      	movs	r1, #5
 80037b2:	2039      	movs	r0, #57	; 0x39
 80037b4:	f006 fb32 	bl	8009e1c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80037b8:	2039      	movs	r0, #57	; 0x39
 80037ba:	f006 fb61 	bl	8009e80 <HAL_NVIC_EnableIRQ>
	HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_RESET);
 80037be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037c2:	4622      	mov	r2, r4
 80037c4:	4827      	ldr	r0, [pc, #156]	; (8003864 <main+0x344>)
 80037c6:	4619      	mov	r1, r3
 80037c8:	f007 fc72 	bl	800b0b0 <HAL_GPIO_WritePin>
	HAL_Delay(20); /* wait 20 ms */
 80037cc:	2014      	movs	r0, #20
 80037ce:	f006 fb01 	bl	8009dd4 <HAL_Delay>
	HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_SET);
 80037d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d6:	462a      	mov	r2, r5
 80037d8:	4822      	ldr	r0, [pc, #136]	; (8003864 <main+0x344>)
 80037da:	4619      	mov	r1, r3
 80037dc:	f007 fc68 	bl	800b0b0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80037e0:	200a      	movs	r0, #10
 80037e2:	f006 faf7 	bl	8009dd4 <HAL_Delay>
	DSI_HOST_TimeoutTypeDef HostTimeouts = { 0 };
 80037e6:	2224      	movs	r2, #36	; 0x24
 80037e8:	4621      	mov	r1, r4
 80037ea:	a817      	add	r0, sp, #92	; 0x5c
	DSI_PLLInitTypeDef PLLInit = { 0 };
 80037ec:	9410      	str	r4, [sp, #64]	; 0x40
	DSI_HOST_TimeoutTypeDef HostTimeouts = { 0 };
 80037ee:	f027 fd4d 	bl	802b28c <memset>
	DSI_PHY_TimerTypeDef PhyTimings = { 0 };
 80037f2:	2218      	movs	r2, #24
 80037f4:	4621      	mov	r1, r4
 80037f6:	a811      	add	r0, sp, #68	; 0x44
 80037f8:	f027 fd48 	bl	802b28c <memset>
	DSI_LPCmdTypeDef LPCmd = { 0 };
 80037fc:	2234      	movs	r2, #52	; 0x34
 80037fe:	4621      	mov	r1, r4
 8003800:	a82e      	add	r0, sp, #184	; 0xb8
 8003802:	f027 fd43 	bl	802b28c <memset>
	DSI_CmdCfgTypeDef CmdCfg = { 0 };
 8003806:	222c      	movs	r2, #44	; 0x2c
 8003808:	4621      	mov	r1, r4
 800380a:	a820      	add	r0, sp, #128	; 0x80
 800380c:	f027 fd3e 	bl	802b28c <memset>
	hdsi.Instance = DSI;
 8003810:	4b19      	ldr	r3, [pc, #100]	; (8003878 <main+0x358>)
	PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8003812:	2164      	movs	r1, #100	; 0x64
	if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK) {
 8003814:	4638      	mov	r0, r7
	hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8003816:	e9c7 3400 	strd	r3, r4, [r7]
	PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 800381a:	2305      	movs	r3, #5
 800381c:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
	if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK) {
 8003820:	a90e      	add	r1, sp, #56	; 0x38
	hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8003822:	e9c7 a502 	strd	sl, r5, [r7, #8]
	if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK) {
 8003826:	f006 ff6b 	bl	800a700 <HAL_DSI_Init>
	if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK) {
 800382a:	a917      	add	r1, sp, #92	; 0x5c
 800382c:	4638      	mov	r0, r7
	HostTimeouts.BTATimeout = 0;
 800382e:	941f      	str	r4, [sp, #124]	; 0x7c
	HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8003830:	e9cd 5417 	strd	r5, r4, [sp, #92]	; 0x5c
	HostTimeouts.HighSpeedReadTimeout = 0;
 8003834:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
	HostTimeouts.HighSpeedWriteTimeout = 0;
 8003838:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
	HostTimeouts.LowPowerWriteTimeout = 0;
 800383c:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
	if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK) {
 8003840:	f007 f98a 	bl	800ab58 <HAL_DSI_ConfigHostTimeouts>
	PhyTimings.DataLaneHS2LPTime = 15;
 8003844:	2021      	movs	r0, #33	; 0x21
 8003846:	230f      	movs	r3, #15
	if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK) {
 8003848:	a911      	add	r1, sp, #68	; 0x44
	PhyTimings.ClockLaneHS2LPTime = 28;
 800384a:	9611      	str	r6, [sp, #68]	; 0x44
	LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 800384c:	f44f 7680 	mov.w	r6, #256	; 0x100
 8003850:	e014      	b.n	800387c <main+0x35c>
 8003852:	bf00      	nop
 8003854:	e000ed00 	.word	0xe000ed00
 8003858:	03000012 	.word	0x03000012
 800385c:	01010001 	.word	0x01010001
 8003860:	40023800 	.word	0x40023800
 8003864:	40022400 	.word	0x40022400
 8003868:	40020800 	.word	0x40020800
 800386c:	40021400 	.word	0x40021400
 8003870:	40020000 	.word	0x40020000
 8003874:	20012148 	.word	0x20012148
 8003878:	40016c00 	.word	0x40016c00
	PhyTimings.StopWaitTime = 0;
 800387c:	9416      	str	r4, [sp, #88]	; 0x58
	PhyTimings.DataLaneHS2LPTime = 15;
 800387e:	e9cd 0312 	strd	r0, r3, [sp, #72]	; 0x48
	PhyTimings.DataLaneLP2HSTime = 25;
 8003882:	2319      	movs	r3, #25
	if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK) {
 8003884:	4638      	mov	r0, r7
	PhyTimings.DataLaneMaxReadTime = 0;
 8003886:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
	if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK) {
 800388a:	f007 f928 	bl	800aade <HAL_DSI_ConfigPhyTimer>
	if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK) {
 800388e:	4651      	mov	r1, sl
 8003890:	4638      	mov	r0, r7
 8003892:	f007 f913 	bl	800aabc <HAL_DSI_ConfigFlowControl>
	if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK) {
 8003896:	f242 7110 	movw	r1, #10000	; 0x2710
 800389a:	4638      	mov	r0, r7
 800389c:	f007 fa69 	bl	800ad72 <HAL_DSI_SetLowPowerRXFilter>
	if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_OVF) != HAL_OK) {
 80038a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038a4:	4638      	mov	r0, r7
 80038a6:	f006 fec8 	bl	800a63a <HAL_DSI_ConfigErrorMonitor>
	LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 80038aa:	f44f 7300 	mov.w	r3, #512	; 0x200
	LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 80038ae:	f44f 6c80 	mov.w	ip, #1024	; 0x400
	LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 80038b2:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
	LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 80038b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 80038ba:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 80038be:	f44f 2000 	mov.w	r0, #524288	; 0x80000
	LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 80038c2:	f8cd 80e8 	str.w	r8, [sp, #232]	; 0xe8
	LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 80038c6:	e9cd 632e 	strd	r6, r3, [sp, #184]	; 0xb8
	LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 80038ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
	hltdc.Instance = LTDC;
 80038ce:	4ec7      	ldr	r6, [pc, #796]	; (8003bec <main+0x6cc>)
	LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 80038d0:	e9cd c330 	strd	ip, r3, [sp, #192]	; 0xc0
	LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 80038d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038d8:	e9cd e332 	strd	lr, r3, [sp, #200]	; 0xc8
	LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 80038dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038e0:	e9cd 2334 	strd	r2, r3, [sp, #208]	; 0xd0
	LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 80038e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038e8:	e9cd 1336 	strd	r1, r3, [sp, #216]	; 0xd8
	LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 80038ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK) {
 80038f0:	a92e      	add	r1, sp, #184	; 0xb8
	LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 80038f2:	e9cd 0338 	strd	r0, r3, [sp, #224]	; 0xe0
	if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK) {
 80038f6:	4638      	mov	r0, r7
 80038f8:	f007 f8ac 	bl	800aa54 <HAL_DSI_ConfigCommand>
	CmdCfg.CommandSize = 200;
 80038fc:	23c8      	movs	r3, #200	; 0xc8
	if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK) {
 80038fe:	a920      	add	r1, sp, #128	; 0x80
 8003900:	4638      	mov	r0, r7
	CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8003902:	952a      	str	r5, [sp, #168]	; 0xa8
	CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8003904:	e9cd 3922 	strd	r3, r9, [sp, #136]	; 0x88
	CmdCfg.ColorCoding = DSI_RGB565;
 8003908:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 800390c:	e9cd 4a24 	strd	r4, sl, [sp, #144]	; 0x90
	CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8003910:	e9cd 8426 	strd	r8, r4, [sp, #152]	; 0x98
	CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8003914:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
	if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK) {
 8003918:	f007 f82a 	bl	800a970 <HAL_DSI_ConfigAdaptedCommandMode>
	if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK) {
 800391c:	4621      	mov	r1, r4
 800391e:	4638      	mov	r0, r7
 8003920:	f007 f815 	bl	800a94e <HAL_DSI_SetGenericVCID>
	LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 8003924:	4621      	mov	r1, r4
 8003926:	2234      	movs	r2, #52	; 0x34
 8003928:	a820      	add	r0, sp, #128	; 0x80
 800392a:	f027 fcaf 	bl	802b28c <memset>
	hltdc.Instance = LTDC;
 800392e:	4ab0      	ldr	r2, [pc, #704]	; (8003bf0 <main+0x6d0>)
	hltdc.Init.AccumulatedActiveH = 482;
 8003930:	f04f 0cca 	mov.w	ip, #202	; 0xca
	hltdc.Init.TotalHeigh = 483;
 8003934:	f04f 0ecb 	mov.w	lr, #203	; 0xcb
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 8003938:	4630      	mov	r0, r6
	hltdc.Init.Backcolor.Blue = 0;
 800393a:	86b4      	strh	r4, [r6, #52]	; 0x34
	hltdc.Init.AccumulatedVBP = 2;
 800393c:	f8c6 8020 	str.w	r8, [r6, #32]
	hltdc.Init.Backcolor.Red = 0;
 8003940:	f886 4036 	strb.w	r4, [r6, #54]	; 0x36
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003944:	e9c6 2400 	strd	r2, r4, [r6]
	hltdc.Init.AccumulatedActiveH = 482;
 8003948:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800394c:	e9c6 c209 	strd	ip, r2, [r6, #36]	; 0x24
	hltdc.Init.TotalHeigh = 483;
 8003950:	f240 12e3 	movw	r2, #483	; 0x1e3
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003954:	e9c6 4402 	strd	r4, r4, [r6, #8]
	hltdc.Init.TotalHeigh = 483;
 8003958:	e9c6 e20b 	strd	lr, r2, [r6, #44]	; 0x2c
	hltdc.Init.HorizontalSync = 1;
 800395c:	e9c6 4504 	strd	r4, r5, [r6, #16]
	hltdc.Init.AccumulatedHBP = 2;
 8003960:	e9c6 5806 	strd	r5, r8, [r6, #24]
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 8003964:	f008 ff04 	bl	800c770 <HAL_LTDC_Init>
	pLayerCfg.Alpha = 255;
 8003968:	21ff      	movs	r1, #255	; 0xff
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800396a:	f44f 6080 	mov.w	r0, #1024	; 0x400
	pLayerCfg.WindowX1 = 200;
 800396e:	23c8      	movs	r3, #200	; 0xc8
	pLayerCfg.WindowY1 = 480;
 8003970:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
	pLayerCfg.WindowX0 = 0;
 8003974:	9420      	str	r4, [sp, #128]	; 0x80
	pLayerCfg.Backcolor.Blue = 0;
 8003976:	f8ad 40b0 	strh.w	r4, [sp, #176]	; 0xb0
	pLayerCfg.ImageHeight = 480;
 800397a:	922b      	str	r2, [sp, #172]	; 0xac
	pLayerCfg.Backcolor.Red = 0;
 800397c:	f88d 40b2 	strb.w	r4, [sp, #178]	; 0xb2
	pLayerCfg.Alpha0 = 0;
 8003980:	e9cd 1425 	strd	r1, r4, [sp, #148]	; 0x94
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003984:	2105      	movs	r1, #5
 8003986:	e9cd 0127 	strd	r0, r1, [sp, #156]	; 0x9c
	pLayerCfg.FBStartAdress = 0xC0000000;
 800398a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 800398e:	4630      	mov	r0, r6
	pLayerCfg.ImageWidth = 200;
 8003990:	e9cd 1329 	strd	r1, r3, [sp, #164]	; 0xa4
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003994:	e9cd 2823 	strd	r2, r8, [sp, #140]	; 0x8c
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 8003998:	a920      	add	r1, sp, #128	; 0x80
 800399a:	4622      	mov	r2, r4
	pLayerCfg.WindowY0 = 0;
 800399c:	e9cd 3421 	strd	r3, r4, [sp, #132]	; 0x84
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 80039a0:	f008 ffb2 	bl	800c908 <HAL_LTDC_ConfigLayer>
	__HAL_LTDC_DISABLE(&hltdc);
 80039a4:	6832      	ldr	r2, [r6, #0]
	HAL_DSI_Start(&hdsi);
 80039a6:	4638      	mov	r0, r7
	__HAL_LTDC_DISABLE(&hltdc);
 80039a8:	6993      	ldr	r3, [r2, #24]
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	6193      	str	r3, [r2, #24]
	HAL_DSI_Start(&hdsi);
 80039b0:	f007 f938 	bl	800ac24 <HAL_DSI_Start>
	OTM8009A_Init(OTM8009A_FORMAT_RBG565, LCD_ORIENTATION_LANDSCAPE);
 80039b4:	4629      	mov	r1, r5
 80039b6:	4640      	mov	r0, r8
 80039b8:	f005 ff76 	bl	80098a8 <OTM8009A_Init>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1,
 80039bc:	2328      	movs	r3, #40	; 0x28
 80039be:	2215      	movs	r2, #21
 80039c0:	4621      	mov	r1, r4
 80039c2:	4638      	mov	r0, r7
 80039c4:	9400      	str	r4, [sp, #0]
 80039c6:	f007 f960 	bl	800ac8a <HAL_DSI_ShortWrite>
	HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 80039ca:	a92e      	add	r1, sp, #184	; 0xb8
 80039cc:	4638      	mov	r0, r7
	LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 80039ce:	9438      	str	r4, [sp, #224]	; 0xe0
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80039d0:	2720      	movs	r7, #32
	LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 80039d2:	e9cd 442e 	strd	r4, r4, [sp, #184]	; 0xb8
	LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 80039d6:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
	LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 80039da:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
	LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 80039de:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
	LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 80039e2:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
	HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 80039e6:	f007 f835 	bl	800aa54 <HAL_DSI_ConfigCommand>
	HAL_LTDC_SetPitch(&hltdc, 800, 0);
 80039ea:	4622      	mov	r2, r4
 80039ec:	f44f 7148 	mov.w	r1, #800	; 0x320
 80039f0:	4630      	mov	r0, r6
 80039f2:	f008 ffb7 	bl	800c964 <HAL_LTDC_SetPitch>
	__HAL_LTDC_ENABLE(&hltdc);
 80039f6:	6832      	ldr	r2, [r6, #0]
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 80039f8:	4e7e      	ldr	r6, [pc, #504]	; (8003bf4 <main+0x6d4>)
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80039fa:	f44f 6c00 	mov.w	ip, #2048	; 0x800
	__HAL_LTDC_ENABLE(&hltdc);
 80039fe:	6993      	ldr	r3, [r2, #24]
	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 8003a00:	a92e      	add	r1, sp, #184	; 0xb8
 8003a02:	4630      	mov	r0, r6
	__HAL_LTDC_ENABLE(&hltdc);
 8003a04:	432b      	orrs	r3, r5
 8003a06:	6193      	str	r3, [r2, #24]
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003a08:	4b7b      	ldr	r3, [pc, #492]	; (8003bf8 <main+0x6d8>)
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8003a0a:	62b4      	str	r4, [r6, #40]	; 0x28
	SdramTiming.LoadToActiveDelay = 2;
 8003a0c:	f8cd 80b8 	str.w	r8, [sp, #184]	; 0xb8
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8003a10:	e9c6 3400 	strd	r3, r4, [r6]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003a14:	2340      	movs	r3, #64	; 0x40
 8003a16:	e9c6 7304 	strd	r7, r3, [r6, #16]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8003a1a:	f44f 73c0 	mov.w	r3, #384	; 0x180
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8003a1e:	f44f 7740 	mov.w	r7, #768	; 0x300
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003a22:	e9c6 3406 	strd	r3, r4, [r6, #24]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8003a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a2a:	e9c6 c308 	strd	ip, r3, [r6, #32]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8003a2e:	2307      	movs	r3, #7
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8003a30:	e9c6 4a02 	strd	r4, sl, [r6, #8]
	SdramTiming.SelfRefreshTime = 4;
 8003a34:	e9cd 3a2f 	strd	r3, sl, [sp, #188]	; 0xbc
	SdramTiming.WriteRecoveryTime = 2;
 8003a38:	e9cd 3831 	strd	r3, r8, [sp, #196]	; 0xc4
	SdramTiming.RCDDelay = 3;
 8003a3c:	e9cd 8b33 	strd	r8, fp, [sp, #204]	; 0xcc
	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 8003a40:	f00a f840 	bl	800dac4 <HAL_SDRAM_Init>
	HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a48:	a920      	add	r1, sp, #128	; 0x80
 8003a4a:	4630      	mov	r0, r6
	__IO uint32_t tmpmrd = 0;
 8003a4c:	9411      	str	r4, [sp, #68]	; 0x44
	Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a4e:	e9cd 5920 	strd	r5, r9, [sp, #128]	; 0x80
	Command->ModeRegisterDefinition = 0;
 8003a52:	e9cd 5422 	strd	r5, r4, [sp, #136]	; 0x88
	HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003a56:	f00a f855 	bl	800db04 <HAL_SDRAM_SendCommand>
	HAL_Delay(1);
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	f006 f9ba 	bl	8009dd4 <HAL_Delay>
	HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a64:	a920      	add	r1, sp, #128	; 0x80
 8003a66:	4630      	mov	r0, r6
	Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a68:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
	Command->ModeRegisterDefinition = 0;
 8003a6c:	e9cd 5422 	strd	r5, r4, [sp, #136]	; 0x88
	HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003a70:	f00a f848 	bl	800db04 <HAL_SDRAM_SendCommand>
	Command->AutoRefreshNumber = 8;
 8003a74:	2308      	movs	r3, #8
	HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003a76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a7a:	a920      	add	r1, sp, #128	; 0x80
 8003a7c:	4630      	mov	r0, r6
	Command->ModeRegisterDefinition = 0;
 8003a7e:	e9cd 3422 	strd	r3, r4, [sp, #136]	; 0x88
	Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a82:	e9cd b920 	strd	fp, r9, [sp, #128]	; 0x80
	HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003a86:	f00a f83d 	bl	800db04 <HAL_SDRAM_SendCommand>
	tmpmrd = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1 |
 8003a8a:	f44f 730c 	mov.w	r3, #560	; 0x230
	HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003a8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a92:	a920      	add	r1, sp, #128	; 0x80
	tmpmrd = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1 |
 8003a94:	9311      	str	r3, [sp, #68]	; 0x44
	HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003a96:	4630      	mov	r0, r6
	Command->ModeRegisterDefinition = tmpmrd;
 8003a98:	9b11      	ldr	r3, [sp, #68]	; 0x44
	Command->AutoRefreshNumber = 1;
 8003a9a:	9522      	str	r5, [sp, #136]	; 0x88
	Command->ModeRegisterDefinition = tmpmrd;
 8003a9c:	9323      	str	r3, [sp, #140]	; 0x8c
	Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a9e:	e9cd a920 	strd	sl, r9, [sp, #128]	; 0x80
	HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8003aa2:	f00a f82f 	bl	800db04 <HAL_SDRAM_SendCommand>
	HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8003aa6:	f240 712a 	movw	r1, #1834	; 0x72a
 8003aaa:	4630      	mov	r0, r6
	hqspi.Instance = QUADSPI;
 8003aac:	4e53      	ldr	r6, [pc, #332]	; (8003bfc <main+0x6dc>)
	HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8003aae:	f00a f848 	bl	800db42 <HAL_SDRAM_ProgramRefreshRate>
	FMC_Bank1->BTCR[0] = 0x000030D2;
 8003ab2:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003ab6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
	if (HAL_QSPI_Init(&hqspi) != HAL_OK) {
 8003aba:	4630      	mov	r0, r6
	FMC_Bank1->BTCR[0] = 0x000030D2;
 8003abc:	601a      	str	r2, [r3, #0]
	hqspi.Instance = QUADSPI;
 8003abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8003ac2:	6234      	str	r4, [r6, #32]
	hqspi.Init.ClockPrescaler = 1;
 8003ac4:	e9c6 3500 	strd	r3, r5, [r6]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8003ac8:	2319      	movs	r3, #25
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8003aca:	e9c6 9902 	strd	r9, r9, [r6, #8]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8003ace:	e9c6 3704 	strd	r3, r7, [r6, #16]
	hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8003ad2:	e9c6 4406 	strd	r4, r4, [r6, #24]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK) {
 8003ad6:	f009 f89b 	bl	800cc10 <HAL_QSPI_Init>
	s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8003ada:	9734      	str	r7, [sp, #208]	; 0xd0
	s_command.Instruction = RESET_ENABLE_CMD;
 8003adc:	2766      	movs	r7, #102	; 0x66
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae2:	a92e      	add	r1, sp, #184	; 0xb8
 8003ae4:	4630      	mov	r0, r6
	s_command.Instruction = RESET_ENABLE_CMD;
 8003ae6:	972e      	str	r7, [sp, #184]	; 0xb8
	s_command.DataMode = QSPI_DATA_NONE;
 8003ae8:	9437      	str	r4, [sp, #220]	; 0xdc
	s_command.DummyCycles = 0;
 8003aea:	9433      	str	r4, [sp, #204]	; 0xcc
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8003aec:	943b      	str	r4, [sp, #236]	; 0xec
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003aee:	e9cd 4435 	strd	r4, r4, [sp, #212]	; 0xd4
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8003af2:	e9cd 4439 	strd	r4, r4, [sp, #228]	; 0xe4
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003af6:	f009 f8df 	bl	800ccb8 <HAL_QSPI_Command>
 8003afa:	2800      	cmp	r0, #0
 8003afc:	f040 80bb 	bne.w	8003c76 <main+0x756>
	s_command.Instruction = RESET_MEMORY_CMD;
 8003b00:	2499      	movs	r4, #153	; 0x99
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b06:	a92e      	add	r1, sp, #184	; 0xb8
 8003b08:	4630      	mov	r0, r6
	s_command.Instruction = RESET_MEMORY_CMD;
 8003b0a:	942e      	str	r4, [sp, #184]	; 0xb8
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003b0c:	f009 f8d4 	bl	800ccb8 <HAL_QSPI_Command>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	f040 80b0 	bne.w	8003c76 <main+0x756>
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003b16:	f44f 7380 	mov.w	r3, #256	; 0x100
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1e:	a92e      	add	r1, sp, #184	; 0xb8
 8003b20:	4630      	mov	r0, r6
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003b22:	9334      	str	r3, [sp, #208]	; 0xd0
	s_command.Instruction = RESET_ENABLE_CMD;
 8003b24:	972e      	str	r7, [sp, #184]	; 0xb8
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003b26:	f009 f8c7 	bl	800ccb8 <HAL_QSPI_Command>
 8003b2a:	2800      	cmp	r0, #0
 8003b2c:	f040 80a3 	bne.w	8003c76 <main+0x756>
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b34:	a92e      	add	r1, sp, #184	; 0xb8
 8003b36:	4630      	mov	r0, r6
	s_command.Instruction = RESET_MEMORY_CMD;
 8003b38:	942e      	str	r4, [sp, #184]	; 0xb8
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003b3a:	f009 f8bd 	bl	800ccb8 <HAL_QSPI_Command>
 8003b3e:	4604      	mov	r4, r0
 8003b40:	2800      	cmp	r0, #0
 8003b42:	f040 8098 	bne.w	8003c76 <main+0x756>
	HAL_Delay(1000);
 8003b46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b4a:	f006 f943 	bl	8009dd4 <HAL_Delay>
	s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8003b4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config,
 8003b52:	aa20      	add	r2, sp, #128	; 0x80
 8003b54:	a92e      	add	r1, sp, #184	; 0xb8
	s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8003b56:	9325      	str	r3, [sp, #148]	; 0x94
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003b58:	f44f 7380 	mov.w	r3, #256	; 0x100
	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config,
 8003b5c:	4630      	mov	r0, r6
	s_config.Interval = 0x10;
 8003b5e:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003b62:	9334      	str	r3, [sp, #208]	; 0xd0
	s_command.Instruction = READ_STATUS_REG_CMD;
 8003b64:	2305      	movs	r3, #5
 8003b66:	932e      	str	r3, [sp, #184]	; 0xb8
	s_command.DataMode = QSPI_DATA_1_LINE;
 8003b68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b6c:	9337      	str	r3, [sp, #220]	; 0xdc
	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config,
 8003b6e:	f241 3388 	movw	r3, #5000	; 0x1388
	s_config.Mask = MX25L512_SR_WIP;
 8003b72:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
	s_config.StatusBytesSize = 1;
 8003b76:	e9cd 5423 	strd	r5, r4, [sp, #140]	; 0x8c
	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config,
 8003b7a:	f009 f998 	bl	800ceae <HAL_QSPI_AutoPolling>
 8003b7e:	2800      	cmp	r0, #0
 8003b80:	d179      	bne.n	8003c76 <main+0x756>
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003b82:	f44f 7380 	mov.w	r3, #256	; 0x100
	s_command.DummyCycles = 0;
 8003b86:	9033      	str	r0, [sp, #204]	; 0xcc
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8c:	a92e      	add	r1, sp, #184	; 0xb8
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003b8e:	9334      	str	r3, [sp, #208]	; 0xd0
	s_command.Instruction = READ_STATUS_REG_CMD;
 8003b90:	2305      	movs	r3, #5
 8003b92:	932e      	str	r3, [sp, #184]	; 0xb8
	s_command.DataMode = QSPI_DATA_1_LINE;
 8003b94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003b98:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8003b9c:	e9cd 5038 	strd	r5, r0, [sp, #224]	; 0xe0
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8003ba0:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003ba4:	4630      	mov	r0, r6
	s_command.DataMode = QSPI_DATA_1_LINE;
 8003ba6:	9337      	str	r3, [sp, #220]	; 0xdc
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003ba8:	f009 f886 	bl	800ccb8 <HAL_QSPI_Command>
 8003bac:	2800      	cmp	r0, #0
 8003bae:	d162      	bne.n	8003c76 <main+0x756>
	if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb4:	a917      	add	r1, sp, #92	; 0x5c
 8003bb6:	4630      	mov	r0, r6
 8003bb8:	f009 f91a 	bl	800cdf0 <HAL_QSPI_Receive>
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	d15a      	bne.n	8003c76 <main+0x756>
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
	s_command.DataMode = QSPI_DATA_NONE;
 8003bc4:	9037      	str	r0, [sp, #220]	; 0xdc
	s_command.DummyCycles = 0;
 8003bc6:	9033      	str	r0, [sp, #204]	; 0xcc
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003bc8:	f241 3288 	movw	r2, #5000	; 0x1388
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003bcc:	9334      	str	r3, [sp, #208]	; 0xd0
	s_command.Instruction = WRITE_ENABLE_CMD;
 8003bce:	2306      	movs	r3, #6
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8003bd0:	903b      	str	r0, [sp, #236]	; 0xec
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003bd2:	a92e      	add	r1, sp, #184	; 0xb8
	s_command.Instruction = WRITE_ENABLE_CMD;
 8003bd4:	932e      	str	r3, [sp, #184]	; 0xb8
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003bd6:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8003bda:	e9cd 0039 	strd	r0, r0, [sp, #228]	; 0xe4
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003bde:	4630      	mov	r0, r6
 8003be0:	f009 f86a 	bl	800ccb8 <HAL_QSPI_Command>
 8003be4:	2800      	cmp	r0, #0
 8003be6:	d146      	bne.n	8003c76 <main+0x756>
 8003be8:	e00a      	b.n	8003c00 <main+0x6e0>
 8003bea:	bf00      	nop
 8003bec:	20012210 	.word	0x20012210
 8003bf0:	40016800 	.word	0x40016800
 8003bf4:	20012304 	.word	0x20012304
 8003bf8:	a0000140 	.word	0xa0000140
 8003bfc:	200122b8 	.word	0x200122b8
	s_config.MatchMode = QSPI_MATCH_MODE_AND;
 8003c00:	2300      	movs	r3, #0
	s_config.StatusBytesSize = 1;
 8003c02:	462c      	mov	r4, r5
 8003c04:	9523      	str	r5, [sp, #140]	; 0x8c
	s_command.DataMode = QSPI_DATA_1_LINE;
 8003c06:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	s_config.MatchMode = QSPI_MATCH_MODE_AND;
 8003c0a:	9324      	str	r3, [sp, #144]	; 0x90
	s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8003c0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config,
 8003c10:	aa20      	add	r2, sp, #128	; 0x80
 8003c12:	a92e      	add	r1, sp, #184	; 0xb8
	s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8003c14:	9325      	str	r3, [sp, #148]	; 0x94
	s_command.Instruction = READ_STATUS_REG_CMD;
 8003c16:	2305      	movs	r3, #5
	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config,
 8003c18:	4630      	mov	r0, r6
	s_config.Interval = 0x10;
 8003c1a:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
	s_command.Instruction = READ_STATUS_REG_CMD;
 8003c1e:	932e      	str	r3, [sp, #184]	; 0xb8
	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config,
 8003c20:	f241 3388 	movw	r3, #5000	; 0x1388
	s_command.DataMode = QSPI_DATA_1_LINE;
 8003c24:	9537      	str	r5, [sp, #220]	; 0xdc
	s_config.Mask = MX25L512_SR_WREN;
 8003c26:	e9cd 8820 	strd	r8, r8, [sp, #128]	; 0x80
	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config,
 8003c2a:	f009 f940 	bl	800ceae <HAL_QSPI_AutoPolling>
 8003c2e:	bb10      	cbnz	r0, 8003c76 <main+0x756>
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003c30:	f44f 7380 	mov.w	r3, #256	; 0x100
	s_command.DummyCycles = 0;
 8003c34:	9033      	str	r0, [sp, #204]	; 0xcc
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3a:	a92e      	add	r1, sp, #184	; 0xb8
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003c3c:	9334      	str	r3, [sp, #208]	; 0xd0
	reg |= MX25L512_SR_QUADEN;
 8003c3e:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
	s_command.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8003c42:	942e      	str	r4, [sp, #184]	; 0xb8
	reg |= MX25L512_SR_QUADEN;
 8003c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	s_command.DataMode = QSPI_DATA_1_LINE;
 8003c48:	9537      	str	r5, [sp, #220]	; 0xdc
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003c4a:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8003c4e:	e9cd 4038 	strd	r4, r0, [sp, #224]	; 0xe0
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8003c52:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003c56:	4630      	mov	r0, r6
	reg |= MX25L512_SR_QUADEN;
 8003c58:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003c5c:	f009 f82c 	bl	800ccb8 <HAL_QSPI_Command>
 8003c60:	b948      	cbnz	r0, 8003c76 <main+0x756>
	if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c66:	a917      	add	r1, sp, #92	; 0x5c
 8003c68:	4630      	mov	r0, r6
 8003c6a:	f009 f868 	bl	800cd3e <HAL_QSPI_Transmit>
 8003c6e:	b910      	cbnz	r0, 8003c76 <main+0x756>
	HAL_Delay(40);
 8003c70:	2028      	movs	r0, #40	; 0x28
 8003c72:	f006 f8af 	bl	8009dd4 <HAL_Delay>
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003c76:	f44f 7380 	mov.w	r3, #256	; 0x100
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7e:	a92e      	add	r1, sp, #184	; 0xb8
 8003c80:	48b6      	ldr	r0, [pc, #728]	; (8003f5c <main+0xa3c>)
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8003c82:	9334      	str	r3, [sp, #208]	; 0xd0
	s_command.Instruction = ENTER_QUAD_CMD;
 8003c84:	2335      	movs	r3, #53	; 0x35
 8003c86:	932e      	str	r3, [sp, #184]	; 0xb8
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 8003c88:	2300      	movs	r3, #0
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003c8a:	e9cd 3335 	strd	r3, r3, [sp, #212]	; 0xd4
	s_command.DataMode = QSPI_DATA_NONE;
 8003c8e:	9337      	str	r3, [sp, #220]	; 0xdc
	s_command.DummyCycles = 0;
 8003c90:	9333      	str	r3, [sp, #204]	; 0xcc
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8003c92:	933b      	str	r3, [sp, #236]	; 0xec
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8003c94:	e9cd 3339 	strd	r3, r3, [sp, #228]	; 0xe4
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003c98:	f009 f80e 	bl	800ccb8 <HAL_QSPI_Command>
 8003c9c:	b9e0      	cbnz	r0, 8003cd8 <main+0x7b8>
	s_config.Mask = MX25L512_SR_QUADEN | MX25L512_SR_WIP;
 8003c9e:	2341      	movs	r3, #65	; 0x41
 8003ca0:	f04f 0940 	mov.w	r9, #64	; 0x40
	s_config.Interval = 0x10;
 8003ca4:	f04f 0a01 	mov.w	sl, #1
	s_config.MatchMode = QSPI_MATCH_MODE_AND;
 8003ca8:	9024      	str	r0, [sp, #144]	; 0x90
	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config,
 8003caa:	aa20      	add	r2, sp, #128	; 0x80
 8003cac:	a92e      	add	r1, sp, #184	; 0xb8
 8003cae:	48ab      	ldr	r0, [pc, #684]	; (8003f5c <main+0xa3c>)
	s_config.Mask = MX25L512_SR_QUADEN | MX25L512_SR_WIP;
 8003cb0:	e9cd 9320 	strd	r9, r3, [sp, #128]	; 0x80
	s_config.Interval = 0x10;
 8003cb4:	2310      	movs	r3, #16
 8003cb6:	e9cd 3a22 	strd	r3, sl, [sp, #136]	; 0x88
	s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8003cba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cbe:	9325      	str	r3, [sp, #148]	; 0x94
	s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8003cc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003cc4:	9334      	str	r3, [sp, #208]	; 0xd0
	s_command.Instruction = READ_STATUS_REG_CMD;
 8003cc6:	2305      	movs	r3, #5
 8003cc8:	932e      	str	r3, [sp, #184]	; 0xb8
	s_command.DataMode = QSPI_DATA_4_LINES;
 8003cca:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003cce:	9337      	str	r3, [sp, #220]	; 0xdc
	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config,
 8003cd0:	f241 3388 	movw	r3, #5000	; 0x1388
 8003cd4:	f009 f8eb 	bl	800ceae <HAL_QSPI_AutoPolling>
	s_command.Instruction = ENTER_4_BYTE_ADDR_MODE_CMD;
 8003cd8:	23b7      	movs	r3, #183	; 0xb7
	s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8003cda:	f44f 7440 	mov.w	r4, #768	; 0x300
	s_command.Instruction = ENTER_4_BYTE_ADDR_MODE_CMD;
 8003cde:	9320      	str	r3, [sp, #128]	; 0x80
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 8003ce0:	2300      	movs	r3, #0
	s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8003ce2:	9426      	str	r4, [sp, #152]	; 0x98
	s_command.DataMode = QSPI_DATA_NONE;
 8003ce4:	9329      	str	r3, [sp, #164]	; 0xa4
	s_command.DummyCycles = 0;
 8003ce6:	9325      	str	r3, [sp, #148]	; 0x94
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8003ce8:	932d      	str	r3, [sp, #180]	; 0xb4
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003cea:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8003cee:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
	if (QSPI_WriteEnable(hqspi) != QSPI_OK) {
 8003cf2:	f7ff fb3f 	bl	8003374 <QSPI_WriteEnable.constprop.0>
 8003cf6:	bb18      	cbnz	r0, 8003d40 <main+0x820>
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfc:	a920      	add	r1, sp, #128	; 0x80
 8003cfe:	4897      	ldr	r0, [pc, #604]	; (8003f5c <main+0xa3c>)
 8003d00:	f008 ffda 	bl	800ccb8 <HAL_QSPI_Command>
 8003d04:	b9e0      	cbnz	r0, 8003d40 <main+0x820>
	s_command.Instruction = READ_STATUS_REG_CMD;
 8003d06:	2305      	movs	r3, #5
	s_command.DummyCycles = 0;
 8003d08:	9033      	str	r0, [sp, #204]	; 0xcc
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8003d0a:	903b      	str	r0, [sp, #236]	; 0xec
	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK) {
 8003d0c:	aa17      	add	r2, sp, #92	; 0x5c
	s_command.Instruction = READ_STATUS_REG_CMD;
 8003d0e:	932e      	str	r3, [sp, #184]	; 0xb8
	s_command.DataMode = QSPI_DATA_4_LINES;
 8003d10:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
	s_config.Match = 0;
 8003d14:	9017      	str	r0, [sp, #92]	; 0x5c
	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK) {
 8003d16:	a92e      	add	r1, sp, #184	; 0xb8
	s_command.DataMode = QSPI_DATA_4_LINES;
 8003d18:	9337      	str	r3, [sp, #220]	; 0xdc
	s_config.Mask = MX25L512_SR_WIP;
 8003d1a:	2301      	movs	r3, #1
	s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8003d1c:	9434      	str	r4, [sp, #208]	; 0xd0
	s_config.Mask = MX25L512_SR_WIP;
 8003d1e:	9318      	str	r3, [sp, #96]	; 0x60
	s_config.StatusBytesSize = 1;
 8003d20:	e9cd 301a 	strd	r3, r0, [sp, #104]	; 0x68
	s_config.Interval = 0x10;
 8003d24:	2310      	movs	r3, #16
 8003d26:	9319      	str	r3, [sp, #100]	; 0x64
	s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8003d28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003d2c:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8003d30:	e9cd 0039 	strd	r0, r0, [sp, #228]	; 0xe4
	s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8003d34:	931c      	str	r3, [sp, #112]	; 0x70
	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK) {
 8003d36:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d3a:	4888      	ldr	r0, [pc, #544]	; (8003f5c <main+0xa3c>)
 8003d3c:	f009 f8b7 	bl	800ceae <HAL_QSPI_AutoPolling>
	s_command.Instruction = READ_STATUS_REG_CMD;
 8003d40:	2305      	movs	r3, #5
	s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8003d42:	f44f 7640 	mov.w	r6, #768	; 0x300
	s_command.DataMode = QSPI_DATA_4_LINES;
 8003d46:	f04f 7440 	mov.w	r4, #50331648	; 0x3000000
	s_command.NbData = 1;
 8003d4a:	2501      	movs	r5, #1
	s_command.Instruction = READ_STATUS_REG_CMD;
 8003d4c:	932e      	str	r3, [sp, #184]	; 0xb8
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 8003d4e:	2300      	movs	r3, #0
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d54:	a92e      	add	r1, sp, #184	; 0xb8
 8003d56:	4881      	ldr	r0, [pc, #516]	; (8003f5c <main+0xa3c>)
	s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8003d58:	9634      	str	r6, [sp, #208]	; 0xd0
	s_command.DataMode = QSPI_DATA_4_LINES;
 8003d5a:	9437      	str	r4, [sp, #220]	; 0xdc
	s_command.DummyCycles = 0;
 8003d5c:	9333      	str	r3, [sp, #204]	; 0xcc
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003d5e:	e9cd 3335 	strd	r3, r3, [sp, #212]	; 0xd4
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8003d62:	e9cd 5338 	strd	r5, r3, [sp, #224]	; 0xe0
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8003d66:	e9cd 333a 	strd	r3, r3, [sp, #232]	; 0xe8
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003d6a:	f008 ffa5 	bl	800ccb8 <HAL_QSPI_Command>
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	d14f      	bne.n	8003e12 <main+0x8f2>
	if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d76:	a920      	add	r1, sp, #128	; 0x80
 8003d78:	4878      	ldr	r0, [pc, #480]	; (8003f5c <main+0xa3c>)
 8003d7a:	f009 f839 	bl	800cdf0 <HAL_QSPI_Receive>
 8003d7e:	2800      	cmp	r0, #0
 8003d80:	d147      	bne.n	8003e12 <main+0x8f2>
	s_command.Instruction = READ_CFG_REG_CMD;
 8003d82:	2315      	movs	r3, #21
	s_command.DummyCycles = 0;
 8003d84:	9033      	str	r0, [sp, #204]	; 0xcc
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8a:	a92e      	add	r1, sp, #184	; 0xb8
	s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8003d8c:	9634      	str	r6, [sp, #208]	; 0xd0
	s_command.Instruction = READ_CFG_REG_CMD;
 8003d8e:	932e      	str	r3, [sp, #184]	; 0xb8
	s_command.DataMode = QSPI_DATA_4_LINES;
 8003d90:	9437      	str	r4, [sp, #220]	; 0xdc
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003d92:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8003d96:	e9cd 5038 	strd	r5, r0, [sp, #224]	; 0xe0
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8003d9a:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003d9e:	486f      	ldr	r0, [pc, #444]	; (8003f5c <main+0xa3c>)
 8003da0:	f008 ff8a 	bl	800ccb8 <HAL_QSPI_Command>
 8003da4:	bba8      	cbnz	r0, 8003e12 <main+0x8f2>
	if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003daa:	f10d 0181 	add.w	r1, sp, #129	; 0x81
 8003dae:	486b      	ldr	r0, [pc, #428]	; (8003f5c <main+0xa3c>)
 8003db0:	f009 f81e 	bl	800cdf0 <HAL_QSPI_Receive>
 8003db4:	bb68      	cbnz	r0, 8003e12 <main+0x8f2>
	if (QSPI_WriteEnable(hqspi) != QSPI_OK) {
 8003db6:	f7ff fadd 	bl	8003374 <QSPI_WriteEnable.constprop.0>
 8003dba:	bb50      	cbnz	r0, 8003e12 <main+0x8f2>
	s_command.NbData = 2;
 8003dbc:	2302      	movs	r3, #2
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbe:	22c0      	movs	r2, #192	; 0xc0
	s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8003dc0:	9634      	str	r6, [sp, #208]	; 0xd0
	s_command.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8003dc2:	952e      	str	r5, [sp, #184]	; 0xb8
	s_command.DataMode = QSPI_DATA_4_LINES;
 8003dc4:	9437      	str	r4, [sp, #220]	; 0xdc
	s_command.DummyCycles = 0;
 8003dc6:	9033      	str	r0, [sp, #204]	; 0xcc
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003dc8:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8003dcc:	e9cd 3038 	strd	r3, r0, [sp, #224]	; 0xe0
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8003dd0:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
 8003dd4:	fa92 f2a2 	rbit	r2, r2
	MODIFY_REG(reg[1], MX25L512_CR_NB_DUMMY,
 8003dd8:	2103      	movs	r1, #3
 8003dda:	f89d 3081 	ldrb.w	r3, [sp, #129]	; 0x81
 8003dde:	fab2 f282 	clz	r2, r2
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003de2:	485e      	ldr	r0, [pc, #376]	; (8003f5c <main+0xa3c>)
	MODIFY_REG(reg[1], MX25L512_CR_NB_DUMMY,
 8003de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003de8:	fa01 f202 	lsl.w	r2, r1, r2
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003dec:	a92e      	add	r1, sp, #184	; 0xb8
	MODIFY_REG(reg[1], MX25L512_CR_NB_DUMMY,
 8003dee:	4313      	orrs	r3, r2
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003df0:	f241 3288 	movw	r2, #5000	; 0x1388
	MODIFY_REG(reg[1], MX25L512_CR_NB_DUMMY,
 8003df4:	f88d 3081 	strb.w	r3, [sp, #129]	; 0x81
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003df8:	f008 ff5e 	bl	800ccb8 <HAL_QSPI_Command>
 8003dfc:	b948      	cbnz	r0, 8003e12 <main+0x8f2>
	if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e02:	a920      	add	r1, sp, #128	; 0x80
 8003e04:	4855      	ldr	r0, [pc, #340]	; (8003f5c <main+0xa3c>)
 8003e06:	f008 ff9a 	bl	800cd3e <HAL_QSPI_Transmit>
 8003e0a:	b910      	cbnz	r0, 8003e12 <main+0x8f2>
	HAL_Delay(40);
 8003e0c:	2028      	movs	r0, #40	; 0x28
 8003e0e:	f005 ffe1 	bl	8009dd4 <HAL_Delay>
	s_command.Instruction = READ_STATUS_REG_CMD;
 8003e12:	2305      	movs	r3, #5
	s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8003e14:	f44f 7640 	mov.w	r6, #768	; 0x300
	s_command.DataMode = QSPI_DATA_4_LINES;
 8003e18:	f04f 7440 	mov.w	r4, #50331648	; 0x3000000
	s_command.NbData = 1;
 8003e1c:	2501      	movs	r5, #1
	s_command.Instruction = READ_STATUS_REG_CMD;
 8003e1e:	932e      	str	r3, [sp, #184]	; 0xb8
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 8003e20:	2300      	movs	r3, #0
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e26:	a92e      	add	r1, sp, #184	; 0xb8
 8003e28:	484c      	ldr	r0, [pc, #304]	; (8003f5c <main+0xa3c>)
	s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8003e2a:	9634      	str	r6, [sp, #208]	; 0xd0
	s_command.DataMode = QSPI_DATA_4_LINES;
 8003e2c:	9437      	str	r4, [sp, #220]	; 0xdc
	s_command.DummyCycles = 0;
 8003e2e:	9333      	str	r3, [sp, #204]	; 0xcc
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003e30:	e9cd 3335 	strd	r3, r3, [sp, #212]	; 0xd4
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8003e34:	e9cd 5338 	strd	r5, r3, [sp, #224]	; 0xe0
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8003e38:	e9cd 333a 	strd	r3, r3, [sp, #232]	; 0xe8
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003e3c:	f008 ff3c 	bl	800ccb8 <HAL_QSPI_Command>
 8003e40:	2800      	cmp	r0, #0
 8003e42:	d14b      	bne.n	8003edc <main+0x9bc>
	if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e48:	a920      	add	r1, sp, #128	; 0x80
 8003e4a:	4844      	ldr	r0, [pc, #272]	; (8003f5c <main+0xa3c>)
 8003e4c:	f008 ffd0 	bl	800cdf0 <HAL_QSPI_Receive>
 8003e50:	2800      	cmp	r0, #0
 8003e52:	d143      	bne.n	8003edc <main+0x9bc>
	s_command.Instruction = READ_CFG_REG_CMD;
 8003e54:	2315      	movs	r3, #21
	s_command.DummyCycles = 0;
 8003e56:	9033      	str	r0, [sp, #204]	; 0xcc
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5c:	a92e      	add	r1, sp, #184	; 0xb8
	s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8003e5e:	9634      	str	r6, [sp, #208]	; 0xd0
	s_command.Instruction = READ_CFG_REG_CMD;
 8003e60:	932e      	str	r3, [sp, #184]	; 0xb8
	s_command.DataMode = QSPI_DATA_4_LINES;
 8003e62:	9437      	str	r4, [sp, #220]	; 0xdc
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003e64:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8003e68:	e9cd 5038 	strd	r5, r0, [sp, #224]	; 0xe0
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8003e6c:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003e70:	483a      	ldr	r0, [pc, #232]	; (8003f5c <main+0xa3c>)
 8003e72:	f008 ff21 	bl	800ccb8 <HAL_QSPI_Command>
 8003e76:	bb88      	cbnz	r0, 8003edc <main+0x9bc>
	if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7c:	f10d 0181 	add.w	r1, sp, #129	; 0x81
 8003e80:	4836      	ldr	r0, [pc, #216]	; (8003f5c <main+0xa3c>)
 8003e82:	f008 ffb5 	bl	800cdf0 <HAL_QSPI_Receive>
 8003e86:	bb48      	cbnz	r0, 8003edc <main+0x9bc>
	if (QSPI_WriteEnable(hqspi) != QSPI_OK) {
 8003e88:	f7ff fa74 	bl	8003374 <QSPI_WriteEnable.constprop.0>
 8003e8c:	bb30      	cbnz	r0, 8003edc <main+0x9bc>
	s_command.NbData = 2;
 8003e8e:	2302      	movs	r3, #2
 8003e90:	2207      	movs	r2, #7
	s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8003e92:	9634      	str	r6, [sp, #208]	; 0xd0
	s_command.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8003e94:	952e      	str	r5, [sp, #184]	; 0xb8
	s_command.DataMode = QSPI_DATA_4_LINES;
 8003e96:	9437      	str	r4, [sp, #220]	; 0xdc
	s_command.DummyCycles = 0;
 8003e98:	9033      	str	r0, [sp, #204]	; 0xcc
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003e9a:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8003e9e:	e9cd 3038 	strd	r3, r0, [sp, #224]	; 0xe0
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8003ea2:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
 8003ea6:	fa92 f2a2 	rbit	r2, r2
	MODIFY_REG(reg[1], MX25L512_CR_ODS,
 8003eaa:	2106      	movs	r1, #6
 8003eac:	f89d 3081 	ldrb.w	r3, [sp, #129]	; 0x81
 8003eb0:	fab2 f282 	clz	r2, r2
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003eb4:	4829      	ldr	r0, [pc, #164]	; (8003f5c <main+0xa3c>)
	MODIFY_REG(reg[1], MX25L512_CR_ODS,
 8003eb6:	f023 0307 	bic.w	r3, r3, #7
 8003eba:	fa01 f202 	lsl.w	r2, r1, r2
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003ebe:	a92e      	add	r1, sp, #184	; 0xb8
	MODIFY_REG(reg[1], MX25L512_CR_ODS,
 8003ec0:	4313      	orrs	r3, r2
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003ec2:	f241 3288 	movw	r2, #5000	; 0x1388
	MODIFY_REG(reg[1], MX25L512_CR_ODS,
 8003ec6:	f88d 3081 	strb.w	r3, [sp, #129]	; 0x81
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003eca:	f008 fef5 	bl	800ccb8 <HAL_QSPI_Command>
 8003ece:	b928      	cbnz	r0, 8003edc <main+0x9bc>
	if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8003ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed4:	a920      	add	r1, sp, #128	; 0x80
 8003ed6:	4821      	ldr	r0, [pc, #132]	; (8003f5c <main+0xa3c>)
 8003ed8:	f008 ff31 	bl	800cd3e <HAL_QSPI_Transmit>
	s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8003edc:	f44f 7340 	mov.w	r3, #768	; 0x300
	s_command.DataMode = QSPI_DATA_4_LINES;
 8003ee0:	2400      	movs	r4, #0
	if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK) {
 8003ee2:	aa20      	add	r2, sp, #128	; 0x80
	hdma2d.Instance = DMA2D;
 8003ee4:	4d1e      	ldr	r5, [pc, #120]	; (8003f60 <main+0xa40>)
	s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8003ee6:	9334      	str	r3, [sp, #208]	; 0xd0
	s_command.Instruction = QPI_READ_4_BYTE_ADDR_CMD;
 8003ee8:	23ec      	movs	r3, #236	; 0xec
	if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK) {
 8003eea:	a92e      	add	r1, sp, #184	; 0xb8
 8003eec:	481b      	ldr	r0, [pc, #108]	; (8003f5c <main+0xa3c>)
	s_command.Instruction = QPI_READ_4_BYTE_ADDR_CMD;
 8003eee:	932e      	str	r3, [sp, #184]	; 0xb8
	s_command.AddressMode = QSPI_ADDRESS_4_LINES;
 8003ef0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8003ef4:	943b      	str	r4, [sp, #236]	; 0xec
	s_command.AddressMode = QSPI_ADDRESS_4_LINES;
 8003ef6:	9335      	str	r3, [sp, #212]	; 0xd4
	s_command.AddressSize = QSPI_ADDRESS_32_BITS;
 8003ef8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003efc:	9331      	str	r3, [sp, #196]	; 0xc4
	s_command.DataMode = QSPI_DATA_4_LINES;
 8003efe:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003f02:	e9cd 4336 	strd	r4, r3, [sp, #216]	; 0xd8
	s_command.DummyCycles = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 8003f06:	230a      	movs	r3, #10
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8003f08:	e9cd 4439 	strd	r4, r4, [sp, #228]	; 0xe4
	s_command.DummyCycles = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 8003f0c:	9333      	str	r3, [sp, #204]	; 0xcc
	s_mem_mapped_cfg.TimeOutPeriod = 0;
 8003f0e:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK) {
 8003f12:	f009 f81c 	bl	800cf4e <HAL_QSPI_MemoryMapped>
	hdma2d.Instance = DMA2D;
 8003f16:	4b13      	ldr	r3, [pc, #76]	; (8003f64 <main+0xa44>)
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 8003f18:	4628      	mov	r0, r5
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8003f1a:	e9c5 440e 	strd	r4, r4, [r5, #56]	; 0x38
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8003f1e:	e9c5 4410 	strd	r4, r4, [r5, #64]	; 0x40
	hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8003f22:	e9c5 4412 	strd	r4, r4, [r5, #72]	; 0x48
	hdma2d.Init.Mode = DMA2D_M2M;
 8003f26:	e9c5 3400 	strd	r3, r4, [r5]
	hdma2d.Init.OutputOffset = 0;
 8003f2a:	e9c5 4402 	strd	r4, r4, [r5, #8]
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 8003f2e:	f006 fa51 	bl	800a3d4 <HAL_DMA2D_Init>
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 8003f32:	2101      	movs	r1, #1
 8003f34:	4628      	mov	r0, r5
	huart1.Init.BaudRate = 115200;
 8003f36:	4d0c      	ldr	r5, [pc, #48]	; (8003f68 <main+0xa48>)
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 8003f38:	f006 fb0e 	bl	800a558 <HAL_DMA2D_ConfigLayer>
	MX_I2C4_Init();
 8003f3c:	f7ff face 	bl	80034dc <MX_I2C4_Init>
	MX_LIBJPEG_Init();
 8003f40:	f7fc fd31 	bl	80009a6 <MX_LIBJPEG_Init>
	hcrc.Instance = CRC;
 8003f44:	4809      	ldr	r0, [pc, #36]	; (8003f6c <main+0xa4c>)
 8003f46:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <main+0xa50>)
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003f48:	8084      	strh	r4, [r0, #4]
	hcrc.Instance = CRC;
 8003f4a:	6003      	str	r3, [r0, #0]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003f4c:	2301      	movs	r3, #1
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003f4e:	e9c0 4405 	strd	r4, r4, [r0, #20]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003f52:	6203      	str	r3, [r0, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8003f54:	f005 fffe 	bl	8009f54 <HAL_CRC_Init>
	hjpeg.Instance = JPEG;
 8003f58:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <main+0xa54>)
 8003f5a:	e00d      	b.n	8003f78 <main+0xa58>
 8003f5c:	200122b8 	.word	0x200122b8
 8003f60:	20012030 	.word	0x20012030
 8003f64:	4002b000 	.word	0x4002b000
 8003f68:	40011000 	.word	0x40011000
 8003f6c:	2001200c 	.word	0x2001200c
 8003f70:	40023000 	.word	0x40023000
 8003f74:	50051000 	.word	0x50051000
 8003f78:	481c      	ldr	r0, [pc, #112]	; (8003fec <main+0xacc>)
 8003f7a:	6003      	str	r3, [r0, #0]
	if (HAL_JPEG_Init(&hjpeg) != HAL_OK) {
 8003f7c:	f007 fdc4 	bl	800bb08 <HAL_JPEG_Init>
	huart1.Instance = USART1;
 8003f80:	481b      	ldr	r0, [pc, #108]	; (8003ff0 <main+0xad0>)
	huart1.Init.BaudRate = 115200;
 8003f82:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003f86:	e9c0 5300 	strd	r5, r3, [r0]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003f8a:	230c      	movs	r3, #12
	huart1.Init.Parity = UART_PARITY_NONE;
 8003f8c:	6104      	str	r4, [r0, #16]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f8e:	6244      	str	r4, [r0, #36]	; 0x24
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f90:	e9c0 3405 	strd	r3, r4, [r0, #20]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003f94:	e9c0 4402 	strd	r4, r4, [r0, #8]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f98:	e9c0 4407 	strd	r4, r4, [r0, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8003f9c:	f00a fbc6 	bl	800e72c <HAL_UART_Init>
	MX_TouchGFX_Init();
 8003fa0:	f7fc fd03 	bl	80009aa <MX_TouchGFX_Init>
	MX_TouchGFX_PreOSInit();
 8003fa4:	f7fc fd00 	bl	80009a8 <MX_TouchGFX_PreOSInit>
	osKernelInitialize();
 8003fa8:	f00a fcfa 	bl	800e9a0 <osKernelInitialize>
	uartQueueHandle = osMessageQueueNew(2, sizeof(uartData_t),
 8003fac:	4a11      	ldr	r2, [pc, #68]	; (8003ff4 <main+0xad4>)
 8003fae:	211c      	movs	r1, #28
 8003fb0:	2002      	movs	r0, #2
 8003fb2:	f00a ff01 	bl	800edb8 <osMessageQueueNew>
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <main+0xad8>)
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8003fb8:	4a10      	ldr	r2, [pc, #64]	; (8003ffc <main+0xadc>)
 8003fba:	4621      	mov	r1, r4
	uartQueueHandle = osMessageQueueNew(2, sizeof(uartData_t),
 8003fbc:	6018      	str	r0, [r3, #0]
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8003fbe:	4810      	ldr	r0, [pc, #64]	; (8004000 <main+0xae0>)
 8003fc0:	f00a fd28 	bl	800ea14 <osThreadNew>
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <main+0xae4>)
	TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL,
 8003fc6:	4a10      	ldr	r2, [pc, #64]	; (8004008 <main+0xae8>)
 8003fc8:	4621      	mov	r1, r4
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8003fca:	6018      	str	r0, [r3, #0]
	TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL,
 8003fcc:	480f      	ldr	r0, [pc, #60]	; (800400c <main+0xaec>)
 8003fce:	f00a fd21 	bl	800ea14 <osThreadNew>
 8003fd2:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <main+0xaf0>)
	videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8003fd4:	4a0f      	ldr	r2, [pc, #60]	; (8004014 <main+0xaf4>)
 8003fd6:	4621      	mov	r1, r4
	TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL,
 8003fd8:	6018      	str	r0, [r3, #0]
	videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8003fda:	480f      	ldr	r0, [pc, #60]	; (8004018 <main+0xaf8>)
 8003fdc:	f00a fd1a 	bl	800ea14 <osThreadNew>
 8003fe0:	4b0e      	ldr	r3, [pc, #56]	; (800401c <main+0xafc>)
 8003fe2:	6018      	str	r0, [r3, #0]
	osKernelStart();
 8003fe4:	f00a fcf6 	bl	800e9d4 <osKernelStart>
	while (1) {
 8003fe8:	e7fe      	b.n	8003fe8 <main+0xac8>
 8003fea:	bf00      	nop
 8003fec:	200121b8 	.word	0x200121b8
 8003ff0:	20012338 	.word	0x20012338
 8003ff4:	0802dd74 	.word	0x0802dd74
 8003ff8:	200123dc 	.word	0x200123dc
 8003ffc:	0802dd50 	.word	0x0802dd50
 8004000:	08003359 	.word	0x08003359
 8004004:	20012008 	.word	0x20012008
 8004008:	0802dd2c 	.word	0x0802dd2c
 800400c:	080009b9 	.word	0x080009b9
 8004010:	20012004 	.word	0x20012004
 8004014:	0802dd8c 	.word	0x0802dd8c
 8004018:	08002a21 	.word	0x08002a21
 800401c:	200123e0 	.word	0x200123e0

08004020 <HAL_TIM_PeriodElapsedCallback>:
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8004020:	6802      	ldr	r2, [r0, #0]
 8004022:	4b03      	ldr	r3, [pc, #12]	; (8004030 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8004024:	429a      	cmp	r2, r3
 8004026:	d101      	bne.n	800402c <HAL_TIM_PeriodElapsedCallback+0xc>
		HAL_IncTick();
 8004028:	f005 bec2 	b.w	8009db0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	40001000 	.word	0x40001000

08004034 <Error_Handler>:
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8004034:	4770      	bx	lr
	...

08004038 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004038:	4b0d      	ldr	r3, [pc, #52]	; (8004070 <HAL_MspInit+0x38>)
{
 800403a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800403c:	210f      	movs	r1, #15
 800403e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8004042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004044:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004048:	641a      	str	r2, [r3, #64]	; 0x40
 800404a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800404c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004050:	9200      	str	r2, [sp, #0]
 8004052:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004056:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800405a:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800405c:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800405e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004064:	9301      	str	r3, [sp, #4]
 8004066:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004068:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800406a:	f005 bed7 	b.w	8009e1c <HAL_NVIC_SetPriority>
 800406e:	bf00      	nop
 8004070:	40023800 	.word	0x40023800

08004074 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8004074:	6802      	ldr	r2, [r0, #0]
{
 8004076:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8004078:	4b08      	ldr	r3, [pc, #32]	; (800409c <HAL_CRC_MspInit+0x28>)
 800407a:	429a      	cmp	r2, r3
 800407c:	d10b      	bne.n	8004096 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800407e:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8004082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004086:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800408a:	631a      	str	r2, [r3, #48]	; 0x30
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004092:	9301      	str	r3, [sp, #4]
 8004094:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004096:	b002      	add	sp, #8
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40023000 	.word	0x40023000

080040a0 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 80040a0:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <HAL_DMA2D_MspInit+0x3c>)
{
 80040a2:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 80040a4:	6802      	ldr	r2, [r0, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d115      	bne.n	80040d6 <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80040aa:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80040ae:	2105      	movs	r1, #5
 80040b0:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80040b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80040b8:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80040ba:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040c2:	9301      	str	r3, [sp, #4]
 80040c4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80040c6:	f005 fea9 	bl	8009e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80040ca:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80040cc:	b003      	add	sp, #12
 80040ce:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80040d2:	f005 bed5 	b.w	8009e80 <HAL_NVIC_EnableIRQ>
}
 80040d6:	b003      	add	sp, #12
 80040d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80040dc:	4002b000 	.word	0x4002b000

080040e0 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80040e0:	b510      	push	{r4, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e6:	2214      	movs	r2, #20
 80040e8:	2100      	movs	r1, #0
 80040ea:	a803      	add	r0, sp, #12
 80040ec:	f027 f8ce 	bl	802b28c <memset>
  if(hdsi->Instance==DSI)
 80040f0:	6822      	ldr	r2, [r4, #0]
 80040f2:	4b15      	ldr	r3, [pc, #84]	; (8004148 <HAL_DSI_MspInit+0x68>)
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d125      	bne.n	8004144 <HAL_DSI_MspInit+0x64>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80040f8:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80040fc:	a903      	add	r1, sp, #12
 80040fe:	4813      	ldr	r0, [pc, #76]	; (800414c <HAL_DSI_MspInit+0x6c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8004100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004102:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8004106:	645a      	str	r2, [r3, #68]	; 0x44
 8004108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800410a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800410e:	9201      	str	r2, [sp, #4]
 8004110:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004118:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800411a:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004122:	9302      	str	r3, [sp, #8]
 8004124:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004126:	2302      	movs	r3, #2
 8004128:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800412c:	230d      	movs	r3, #13
 800412e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004130:	f006 fe36 	bl	800ada0 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 8004134:	2062      	movs	r0, #98	; 0x62
 8004136:	2200      	movs	r2, #0
 8004138:	2105      	movs	r1, #5
 800413a:	f005 fe6f 	bl	8009e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800413e:	2062      	movs	r0, #98	; 0x62
 8004140:	f005 fe9e 	bl	8009e80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8004144:	b008      	add	sp, #32
 8004146:	bd10      	pop	{r4, pc}
 8004148:	40016c00 	.word	0x40016c00
 800414c:	40022400 	.word	0x40022400

08004150 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004152:	b0ad      	sub	sp, #180	; 0xb4
 8004154:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004156:	2214      	movs	r2, #20
 8004158:	2100      	movs	r1, #0
 800415a:	a803      	add	r0, sp, #12
 800415c:	f027 f896 	bl	802b28c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004160:	2290      	movs	r2, #144	; 0x90
 8004162:	2100      	movs	r1, #0
 8004164:	a808      	add	r0, sp, #32
 8004166:	f027 f891 	bl	802b28c <memset>
  if(hi2c->Instance==I2C4)
 800416a:	6822      	ldr	r2, [r4, #0]
 800416c:	4b25      	ldr	r3, [pc, #148]	; (8004204 <HAL_I2C_MspInit+0xb4>)
 800416e:	429a      	cmp	r2, r3
 8004170:	d146      	bne.n	8004200 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8004172:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004176:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8004178:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800417a:	f009 f9f5 	bl	800d568 <HAL_RCCEx_PeriphCLKConfig>
 800417e:	b108      	cbz	r0, 8004184 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8004180:	f7ff ff58 	bl	8004034 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004184:	4c20      	ldr	r4, [pc, #128]	; (8004208 <HAL_I2C_MspInit+0xb8>)
    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004186:	2712      	movs	r7, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004188:	2601      	movs	r6, #1
 800418a:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800418c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800418e:	a903      	add	r1, sp, #12
 8004190:	481e      	ldr	r0, [pc, #120]	; (800420c <HAL_I2C_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004192:	f043 0302 	orr.w	r3, r3, #2
 8004196:	6323      	str	r3, [r4, #48]	; 0x30
 8004198:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041a4:	f043 0308 	orr.w	r3, r3, #8
 80041a8:	6323      	str	r3, [r4, #48]	; 0x30
 80041aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 80041ba:	230b      	movs	r3, #11
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041bc:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 80041c0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041c2:	f006 fded 	bl	800ada0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80041c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041ca:	a903      	add	r1, sp, #12
 80041cc:	4810      	ldr	r0, [pc, #64]	; (8004210 <HAL_I2C_MspInit+0xc0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041ce:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80041d2:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041d4:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80041d8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041da:	f006 fde1 	bl	800ada0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80041de:	6c23      	ldr	r3, [r4, #64]	; 0x40
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 80041e0:	205f      	movs	r0, #95	; 0x5f
 80041e2:	2200      	movs	r2, #0
 80041e4:	2105      	movs	r1, #5
    __HAL_RCC_I2C4_CLK_ENABLE();
 80041e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041ea:	6423      	str	r3, [r4, #64]	; 0x40
 80041ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041f2:	9302      	str	r3, [sp, #8]
 80041f4:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 80041f6:	f005 fe11 	bl	8009e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80041fa:	205f      	movs	r0, #95	; 0x5f
 80041fc:	f005 fe40 	bl	8009e80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8004200:	b02d      	add	sp, #180	; 0xb4
 8004202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004204:	40006000 	.word	0x40006000
 8004208:	40023800 	.word	0x40023800
 800420c:	40020400 	.word	0x40020400
 8004210:	40020c00 	.word	0x40020c00

08004214 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C4)
 8004214:	6802      	ldr	r2, [r0, #0]
{
 8004216:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C4)
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <HAL_I2C_MspDeInit+0x34>)
 800421a:	429a      	cmp	r2, r3
 800421c:	d112      	bne.n	8004244 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 800421e:	4a0b      	ldr	r2, [pc, #44]	; (800424c <HAL_I2C_MspDeInit+0x38>)

    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004220:	2180      	movs	r1, #128	; 0x80
 8004222:	480b      	ldr	r0, [pc, #44]	; (8004250 <HAL_I2C_MspDeInit+0x3c>)
    __HAL_RCC_I2C4_CLK_DISABLE();
 8004224:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800422a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800422c:	f006 fe9a 	bl	800af64 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8004230:	4808      	ldr	r0, [pc, #32]	; (8004254 <HAL_I2C_MspDeInit+0x40>)
 8004232:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004236:	f006 fe95 	bl	800af64 <HAL_GPIO_DeInit>

    /* I2C4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 800423a:	205f      	movs	r0, #95	; 0x5f
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 800423c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8004240:	f005 be2c 	b.w	8009e9c <HAL_NVIC_DisableIRQ>
}
 8004244:	bd08      	pop	{r3, pc}
 8004246:	bf00      	nop
 8004248:	40006000 	.word	0x40006000
 800424c:	40023800 	.word	0x40023800
 8004250:	40020400 	.word	0x40020400
 8004254:	40020c00 	.word	0x40020c00

08004258 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8004258:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 800425a:	4b35      	ldr	r3, [pc, #212]	; (8004330 <HAL_JPEG_MspInit+0xd8>)
{
 800425c:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 800425e:	6802      	ldr	r2, [r0, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d162      	bne.n	800432a <HAL_JPEG_MspInit+0xd2>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8004264:	4b33      	ldr	r3, [pc, #204]	; (8004334 <HAL_JPEG_MspInit+0xdc>)
    hdma_jpeg_in.Instance = DMA2_Stream0;
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
    hdma_jpeg_in.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_jpeg_in.Init.MemInc = DMA_MINC_ENABLE;
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004266:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_jpeg_in.Instance = DMA2_Stream0;
 800426a:	4c33      	ldr	r4, [pc, #204]	; (8004338 <HAL_JPEG_MspInit+0xe0>)
    hdma_jpeg_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_jpeg_in.Init.Mode = DMA_NORMAL;
    hdma_jpeg_in.Init.Priority = DMA_PRIORITY_LOW;
    hdma_jpeg_in.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_jpeg_in.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800426c:	2004      	movs	r0, #4
    __HAL_RCC_JPEG_CLK_ENABLE();
 800426e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    hdma_jpeg_in.Init.MemBurst = DMA_MBURST_INC4;
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 8004270:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
 8004274:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8004344 <HAL_JPEG_MspInit+0xec>
    __HAL_RCC_JPEG_CLK_ENABLE();
 8004278:	f042 0202 	orr.w	r2, r2, #2
 800427c:	635a      	str	r2, [r3, #52]	; 0x34
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
 800427e:	2240      	movs	r2, #64	; 0x40
    __HAL_RCC_JPEG_CLK_ENABLE();
 8004280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	9301      	str	r3, [sp, #4]
 8004288:	9b01      	ldr	r3, [sp, #4]
    hdma_jpeg_in.Init.Channel = DMA_CHANNEL_9;
 800428a:	f04f 5390 	mov.w	r3, #301989888	; 0x12000000
 800428e:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_jpeg_in.Init.PeriphInc = DMA_PINC_DISABLE;
 8004292:	2300      	movs	r3, #0
 8004294:	e9c4 2302 	strd	r2, r3, [r4, #8]
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004298:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_jpeg_in.Init.Priority = DMA_PRIORITY_LOW;
 800429c:	6223      	str	r3, [r4, #32]
    hdma_jpeg_in.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800429e:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_jpeg_in.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80042a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_jpeg_in.Init.Mode = DMA_NORMAL;
 80042a6:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_jpeg_in.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e9c4 0309 	strd	r0, r3, [r4, #36]	; 0x24
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 80042b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_jpeg_in) != HAL_OK)
 80042b4:	4620      	mov	r0, r4
    hdma_jpeg_in.Init.PeriphBurst = DMA_PBURST_INC4;
 80042b6:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_jpeg_in) != HAL_OK)
 80042ba:	f005 febf 	bl	800a03c <HAL_DMA_Init>
 80042be:	b108      	cbz	r0, 80042c4 <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 80042c0:	f7ff feb8 	bl	8004034 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hdma_jpeg_in);
 80042c4:	632c      	str	r4, [r5, #48]	; 0x30

    /* JPEG_OUT Init */
    hdma_jpeg_out.Instance = DMA2_Stream1;
    hdma_jpeg_out.Init.Channel = DMA_CHANNEL_9;
 80042c6:	f04f 5390 	mov.w	r3, #301989888	; 0x12000000
 80042ca:	4a1c      	ldr	r2, [pc, #112]	; (800433c <HAL_JPEG_MspInit+0xe4>)
    hdma_jpeg_out.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_jpeg_out.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_jpeg_out.Init.MemInc = DMA_MINC_ENABLE;
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80042cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
    __HAL_LINKDMA(hjpeg,hdmain,hdma_jpeg_in);
 80042d0:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_jpeg_out.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_jpeg_out.Init.Mode = DMA_NORMAL;
    hdma_jpeg_out.Init.Priority = DMA_PRIORITY_LOW;
    hdma_jpeg_out.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_jpeg_out.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80042d2:	2004      	movs	r0, #4
    hdma_jpeg_out.Instance = DMA2_Stream1;
 80042d4:	4c1a      	ldr	r4, [pc, #104]	; (8004340 <HAL_JPEG_MspInit+0xe8>)
    hdma_jpeg_out.Init.MemBurst = DMA_MBURST_INC4;
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 80042d6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    hdma_jpeg_out.Init.Channel = DMA_CHANNEL_9;
 80042da:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80042de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_jpeg_out.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042e2:	2300      	movs	r3, #0
    hdma_jpeg_out.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80042e4:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_jpeg_out.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80042e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_jpeg_out.Init.Priority = DMA_PRIORITY_LOW;
 80042ec:	6223      	str	r3, [r4, #32]
    hdma_jpeg_out.Init.PeriphInc = DMA_PINC_DISABLE;
 80042ee:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_jpeg_out.Init.Mode = DMA_NORMAL;
 80042f2:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_jpeg_out.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e9c4 0309 	strd	r0, r3, [r4, #36]	; 0x24
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 80042fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_jpeg_out) != HAL_OK)
 8004300:	4620      	mov	r0, r4
    hdma_jpeg_out.Init.PeriphBurst = DMA_PBURST_INC4;
 8004302:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_jpeg_out) != HAL_OK)
 8004306:	f005 fe99 	bl	800a03c <HAL_DMA_Init>
 800430a:	b108      	cbz	r0, 8004310 <HAL_JPEG_MspInit+0xb8>
    {
      Error_Handler();
 800430c:	f7ff fe92 	bl	8004034 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hdma_jpeg_out);
 8004310:	636c      	str	r4, [r5, #52]	; 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8004312:	2200      	movs	r2, #0
 8004314:	2105      	movs	r1, #5
 8004316:	206c      	movs	r0, #108	; 0x6c
    __HAL_LINKDMA(hjpeg,hdmaout,hdma_jpeg_out);
 8004318:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800431a:	f005 fd7f 	bl	8009e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800431e:	206c      	movs	r0, #108	; 0x6c
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8004320:	b003      	add	sp, #12
 8004322:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8004326:	f005 bdab 	b.w	8009e80 <HAL_NVIC_EnableIRQ>
}
 800432a:	b003      	add	sp, #12
 800432c:	bd30      	pop	{r4, r5, pc}
 800432e:	bf00      	nop
 8004330:	50051000 	.word	0x50051000
 8004334:	40023800 	.word	0x40023800
 8004338:	20012088 	.word	0x20012088
 800433c:	40026428 	.word	0x40026428
 8004340:	200120e8 	.word	0x200120e8
 8004344:	40026410 	.word	0x40026410

08004348 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004348:	b510      	push	{r4, lr}
 800434a:	b0a6      	sub	sp, #152	; 0x98
 800434c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800434e:	2290      	movs	r2, #144	; 0x90
 8004350:	2100      	movs	r1, #0
 8004352:	a802      	add	r0, sp, #8
 8004354:	f026 ff9a 	bl	802b28c <memset>
  if(hltdc->Instance==LTDC)
 8004358:	6822      	ldr	r2, [r4, #0]
 800435a:	4b14      	ldr	r3, [pc, #80]	; (80043ac <HAL_LTDC_MspInit+0x64>)
 800435c:	429a      	cmp	r2, r3
 800435e:	d122      	bne.n	80043a6 <HAL_LTDC_MspInit+0x5e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004360:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8004362:	2007      	movs	r0, #7
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004364:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8004366:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800436a:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800436c:	2302      	movs	r3, #2
 800436e:	e9cd 3008 	strd	r3, r0, [sp, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004372:	2301      	movs	r3, #1
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004374:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004376:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004378:	f009 f8f6 	bl	800d568 <HAL_RCCEx_PeriphCLKConfig>
 800437c:	b108      	cbz	r0, 8004382 <HAL_LTDC_MspInit+0x3a>
    {
      Error_Handler();
 800437e:	f7ff fe59 	bl	8004034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004382:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <HAL_LTDC_MspInit+0x68>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8004384:	2058      	movs	r0, #88	; 0x58
 8004386:	2103      	movs	r1, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800438a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800438e:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8004390:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004394:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004398:	9301      	str	r3, [sp, #4]
 800439a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 800439c:	f005 fd3e 	bl	8009e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80043a0:	2058      	movs	r0, #88	; 0x58
 80043a2:	f005 fd6d 	bl	8009e80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80043a6:	b026      	add	sp, #152	; 0x98
 80043a8:	bd10      	pop	{r4, pc}
 80043aa:	bf00      	nop
 80043ac:	40016800 	.word	0x40016800
 80043b0:	40023800 	.word	0x40023800

080043b4 <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b4:	2214      	movs	r2, #20
 80043b6:	2100      	movs	r1, #0
{
 80043b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043bc:	b08a      	sub	sp, #40	; 0x28
 80043be:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c0:	eb0d 0002 	add.w	r0, sp, r2
 80043c4:	f026 ff62 	bl	802b28c <memset>
  if(hqspi->Instance==QUADSPI)
 80043c8:	6822      	ldr	r2, [r4, #0]
 80043ca:	4b3a      	ldr	r3, [pc, #232]	; (80044b4 <HAL_QSPI_MspInit+0x100>)
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d16e      	bne.n	80044ae <HAL_QSPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

    __HAL_RCC_QSPI_FORCE_RESET();
 80043d0:	4b39      	ldr	r3, [pc, #228]	; (80044b8 <HAL_QSPI_MspInit+0x104>)
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d2:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80043d4:	2403      	movs	r4, #3
 80043d6:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_FORCE_RESET();
 80043d8:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043da:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80043de:	a905      	add	r1, sp, #20
 80043e0:	4836      	ldr	r0, [pc, #216]	; (80044bc <HAL_QSPI_MspInit+0x108>)
    __HAL_RCC_QSPI_FORCE_RESET();
 80043e2:	f042 0202 	orr.w	r2, r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e6:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_FORCE_RESET();
 80043e8:	619a      	str	r2, [r3, #24]
    __HAL_RCC_QSPI_RELEASE_RESET();
 80043ea:	699a      	ldr	r2, [r3, #24]
 80043ec:	f022 0202 	bic.w	r2, r2, #2
 80043f0:	619a      	str	r2, [r3, #24]
    __HAL_RCC_QSPI_CLK_ENABLE();
 80043f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043f4:	f042 0202 	orr.w	r2, r2, #2
 80043f8:	639a      	str	r2, [r3, #56]	; 0x38
 80043fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043fc:	f002 0202 	and.w	r2, r2, #2
 8004400:	9200      	str	r2, [sp, #0]
 8004402:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004406:	f042 0210 	orr.w	r2, r2, #16
 800440a:	631a      	str	r2, [r3, #48]	; 0x30
 800440c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800440e:	f002 0210 	and.w	r2, r2, #16
 8004412:	9201      	str	r2, [sp, #4]
 8004414:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004418:	f042 0202 	orr.w	r2, r2, #2
 800441c:	631a      	str	r2, [r3, #48]	; 0x30
 800441e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004420:	f002 0202 	and.w	r2, r2, #2
 8004424:	9202      	str	r2, [sp, #8]
 8004426:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800442a:	f042 0204 	orr.w	r2, r2, #4
 800442e:	631a      	str	r2, [r3, #48]	; 0x30
 8004430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004432:	f002 0204 	and.w	r2, r2, #4
 8004436:	9203      	str	r2, [sp, #12]
 8004438:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800443a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800443c:	f042 0208 	orr.w	r2, r2, #8
 8004440:	631a      	str	r2, [r3, #48]	; 0x30
 8004442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004444:	f003 0308 	and.w	r3, r3, #8
 8004448:	9304      	str	r3, [sp, #16]
 800444a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444c:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004450:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004454:	f006 fca4 	bl	800ada0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004458:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800445a:	a905      	add	r1, sp, #20
 800445c:	4818      	ldr	r0, [pc, #96]	; (80044c0 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800445e:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004462:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004464:	e9cd 3407 	strd	r3, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004468:	230a      	movs	r3, #10
 800446a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800446c:	f006 fc98 	bl	800ada0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8004470:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004474:	a905      	add	r1, sp, #20
 8004476:	4813      	ldr	r0, [pc, #76]	; (80044c4 <HAL_QSPI_MspInit+0x110>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004478:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447a:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800447e:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004482:	f006 fc8d 	bl	800ada0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004486:	a905      	add	r1, sp, #20
 8004488:	480d      	ldr	r0, [pc, #52]	; (80044c0 <HAL_QSPI_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800448a:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800448c:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004490:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004494:	f006 fc84 	bl	800ada0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800449c:	a905      	add	r1, sp, #20
 800449e:	480a      	ldr	r0, [pc, #40]	; (80044c8 <HAL_QSPI_MspInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80044a0:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a2:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044a6:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044aa:	f006 fc79 	bl	800ada0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80044ae:	b00a      	add	sp, #40	; 0x28
 80044b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044b4:	a0001000 	.word	0xa0001000
 80044b8:	40023800 	.word	0x40023800
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40020400 	.word	0x40020400
 80044c4:	40020800 	.word	0x40020800
 80044c8:	40020c00 	.word	0x40020c00

080044cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80044cc:	b510      	push	{r4, lr}
 80044ce:	b0ac      	sub	sp, #176	; 0xb0
 80044d0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044d2:	2214      	movs	r2, #20
 80044d4:	2100      	movs	r1, #0
 80044d6:	a803      	add	r0, sp, #12
 80044d8:	f026 fed8 	bl	802b28c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80044dc:	2290      	movs	r2, #144	; 0x90
 80044de:	2100      	movs	r1, #0
 80044e0:	a808      	add	r0, sp, #32
 80044e2:	f026 fed3 	bl	802b28c <memset>
  if(huart->Instance==USART1)
 80044e6:	6822      	ldr	r2, [r4, #0]
 80044e8:	4b1b      	ldr	r3, [pc, #108]	; (8004558 <HAL_UART_MspInit+0x8c>)
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d131      	bne.n	8004552 <HAL_UART_MspInit+0x86>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80044ee:	2340      	movs	r3, #64	; 0x40
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044f0:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80044f2:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044f4:	f009 f838 	bl	800d568 <HAL_RCCEx_PeriphCLKConfig>
 80044f8:	b108      	cbz	r0, 80044fe <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 80044fa:	f7ff fd9b 	bl	8004034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80044fe:	4b17      	ldr	r3, [pc, #92]	; (800455c <HAL_UART_MspInit+0x90>)
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004500:	2400      	movs	r4, #0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004502:	a903      	add	r1, sp, #12
 8004504:	4816      	ldr	r0, [pc, #88]	; (8004560 <HAL_UART_MspInit+0x94>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004506:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004508:	f042 0210 	orr.w	r2, r2, #16
 800450c:	645a      	str	r2, [r3, #68]	; 0x44
 800450e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004510:	f002 0210 	and.w	r2, r2, #16
 8004514:	9201      	str	r2, [sp, #4]
 8004516:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800451a:	f042 0202 	orr.w	r2, r2, #2
 800451e:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004520:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	9302      	str	r3, [sp, #8]
 800452c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800452e:	2302      	movs	r3, #2
 8004530:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004534:	2303      	movs	r3, #3
 8004536:	e9cd 4305 	strd	r4, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800453a:	2304      	movs	r3, #4
 800453c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800453e:	f006 fc2f 	bl	800ada0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004542:	2025      	movs	r0, #37	; 0x25
 8004544:	4622      	mov	r2, r4
 8004546:	2105      	movs	r1, #5
 8004548:	f005 fc68 	bl	8009e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800454c:	2025      	movs	r0, #37	; 0x25
 800454e:	f005 fc97 	bl	8009e80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004552:	b02c      	add	sp, #176	; 0xb0
 8004554:	bd10      	pop	{r4, pc}
 8004556:	bf00      	nop
 8004558:	40011000 	.word	0x40011000
 800455c:	40023800 	.word	0x40023800
 8004560:	40020400 	.word	0x40020400

08004564 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004564:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004566:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004568:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800456a:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 800456c:	4b2a      	ldr	r3, [pc, #168]	; (8004618 <HAL_SDRAM_MspInit+0xb4>)
 800456e:	681e      	ldr	r6, [r3, #0]
 8004570:	2e00      	cmp	r6, #0
 8004572:	d14f      	bne.n	8004614 <HAL_SDRAM_MspInit+0xb0>
  FMC_Initialized = 1;
 8004574:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004576:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004578:	2503      	movs	r5, #3
 800457a:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 800457c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800457e:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8004580:	4b26      	ldr	r3, [pc, #152]	; (800461c <HAL_SDRAM_MspInit+0xb8>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004582:	4827      	ldr	r0, [pc, #156]	; (8004620 <HAL_SDRAM_MspInit+0xbc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8004584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004586:	f042 0201 	orr.w	r2, r2, #1
 800458a:	639a      	str	r2, [r3, #56]	; 0x38
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004596:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800459a:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045a2:	f006 fbfd 	bl	800ada0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80045a6:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045aa:	a901      	add	r1, sp, #4
 80045ac:	481d      	ldr	r0, [pc, #116]	; (8004624 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80045ae:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045b4:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045b8:	f006 fbf2 	bl	800ada0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80045bc:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045c0:	a901      	add	r1, sp, #4
 80045c2:	4819      	ldr	r0, [pc, #100]	; (8004628 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80045c4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ca:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045ce:	f006 fbe7 	bl	800ada0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 80045d2:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80045d6:	a901      	add	r1, sp, #4
 80045d8:	4814      	ldr	r0, [pc, #80]	; (800462c <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80045da:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045dc:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045e0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80045e4:	f006 fbdc 	bl	800ada0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80045e8:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80045ec:	a901      	add	r1, sp, #4
 80045ee:	4810      	ldr	r0, [pc, #64]	; (8004630 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80045f0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045f6:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80045fa:	f006 fbd1 	bl	800ada0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 80045fe:	f64f 732c 	movw	r3, #65324	; 0xff2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004602:	a901      	add	r1, sp, #4
 8004604:	480b      	ldr	r0, [pc, #44]	; (8004634 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004606:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004608:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800460c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004610:	f006 fbc6 	bl	800ada0 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004614:	b007      	add	sp, #28
 8004616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004618:	200123e4 	.word	0x200123e4
 800461c:	40023800 	.word	0x40023800
 8004620:	40021000 	.word	0x40021000
 8004624:	40021800 	.word	0x40021800
 8004628:	40020c00 	.word	0x40020c00
 800462c:	40022000 	.word	0x40022000
 8004630:	40021400 	.word	0x40021400
 8004634:	40021c00 	.word	0x40021c00

08004638 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004638:	4b21      	ldr	r3, [pc, #132]	; (80046c0 <HAL_InitTick+0x88>)
 800463a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800463c:	f042 0210 	orr.w	r2, r2, #16
{
 8004640:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004642:	641a      	str	r2, [r3, #64]	; 0x40
{
 8004644:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
 8004648:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800464a:	a901      	add	r1, sp, #4
 800464c:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800464e:	f003 0310 	and.w	r3, r3, #16
 8004652:	9302      	str	r3, [sp, #8]
 8004654:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004656:	f008 ff69 	bl	800d52c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800465a:	9b06      	ldr	r3, [sp, #24]
 800465c:	bb4b      	cbnz	r3, 80046b2 <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800465e:	f008 ff45 	bl	800d4ec <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004662:	4e18      	ldr	r6, [pc, #96]	; (80046c4 <HAL_InitTick+0x8c>)
 8004664:	4b18      	ldr	r3, [pc, #96]	; (80046c8 <HAL_InitTick+0x90>)
 8004666:	6033      	str	r3, [r6, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004668:	f240 33e7 	movw	r3, #999	; 0x3e7
 800466c:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800466e:	4b17      	ldr	r3, [pc, #92]	; (80046cc <HAL_InitTick+0x94>)
 8004670:	fbb0 f3f3 	udiv	r3, r0, r3
 8004674:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 8004676:	4630      	mov	r0, r6
  htim6.Init.Prescaler = uwPrescalerValue;
 8004678:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
 800467a:	2300      	movs	r3, #0
 800467c:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800467e:	60b3      	str	r3, [r6, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004680:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim6);
 8004682:	f009 fbcf 	bl	800de24 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8004686:	4604      	mov	r4, r0
 8004688:	b980      	cbnz	r0, 80046ac <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800468a:	4630      	mov	r0, r6
 800468c:	f009 fa72 	bl	800db74 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8004690:	4604      	mov	r4, r0
 8004692:	b958      	cbnz	r0, 80046ac <HAL_InitTick+0x74>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004694:	2036      	movs	r0, #54	; 0x36
 8004696:	f005 fbf3 	bl	8009e80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800469a:	2d0f      	cmp	r5, #15
 800469c:	d80d      	bhi.n	80046ba <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800469e:	4622      	mov	r2, r4
 80046a0:	4629      	mov	r1, r5
 80046a2:	2036      	movs	r0, #54	; 0x36
 80046a4:	f005 fbba 	bl	8009e1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80046a8:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <HAL_InitTick+0x98>)
 80046aa:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 80046ac:	4620      	mov	r0, r4
 80046ae:	b008      	add	sp, #32
 80046b0:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80046b2:	f008 ff1b 	bl	800d4ec <HAL_RCC_GetPCLK1Freq>
 80046b6:	0040      	lsls	r0, r0, #1
 80046b8:	e7d3      	b.n	8004662 <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 80046ba:	2401      	movs	r4, #1
 80046bc:	e7f6      	b.n	80046ac <HAL_InitTick+0x74>
 80046be:	bf00      	nop
 80046c0:	40023800 	.word	0x40023800
 80046c4:	200123e8 	.word	0x200123e8
 80046c8:	40001000 	.word	0x40001000
 80046cc:	000f4240 	.word	0x000f4240
 80046d0:	20000068 	.word	0x20000068

080046d4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80046d4:	4770      	bx	lr

080046d6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046d6:	e7fe      	b.n	80046d6 <HardFault_Handler>

080046d8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046d8:	e7fe      	b.n	80046d8 <MemManage_Handler>

080046da <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046da:	e7fe      	b.n	80046da <BusFault_Handler>

080046dc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046dc:	e7fe      	b.n	80046dc <UsageFault_Handler>

080046de <DebugMon_Handler>:
 80046de:	4770      	bx	lr

080046e0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80046e0:	4801      	ldr	r0, [pc, #4]	; (80046e8 <USART1_IRQHandler+0x8>)
 80046e2:	f009 bca7 	b.w	800e034 <HAL_UART_IRQHandler>
 80046e6:	bf00      	nop
 80046e8:	20012338 	.word	0x20012338

080046ec <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80046ec:	4801      	ldr	r0, [pc, #4]	; (80046f4 <TIM6_DAC_IRQHandler+0x8>)
 80046ee:	f009 ba83 	b.w	800dbf8 <HAL_TIM_IRQHandler>
 80046f2:	bf00      	nop
 80046f4:	200123e8 	.word	0x200123e8

080046f8 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_in);
 80046f8:	4801      	ldr	r0, [pc, #4]	; (8004700 <DMA2_Stream0_IRQHandler+0x8>)
 80046fa:	f005 bdab 	b.w	800a254 <HAL_DMA_IRQHandler>
 80046fe:	bf00      	nop
 8004700:	20012088 	.word	0x20012088

08004704 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_jpeg_out);
 8004704:	4801      	ldr	r0, [pc, #4]	; (800470c <DMA2_Stream1_IRQHandler+0x8>)
 8004706:	f005 bda5 	b.w	800a254 <HAL_DMA_IRQHandler>
 800470a:	bf00      	nop
 800470c:	200120e8 	.word	0x200120e8

08004710 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004710:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */
  int now = HAL_GetTick();
 8004712:	f005 fb59 	bl	8009dc8 <HAL_GetTick>
  diff = last - now;
 8004716:	4a05      	ldr	r2, [pc, #20]	; (800472c <LTDC_IRQHandler+0x1c>)
 8004718:	4905      	ldr	r1, [pc, #20]	; (8004730 <LTDC_IRQHandler+0x20>)
 800471a:	6813      	ldr	r3, [r2, #0]
 800471c:	1a1b      	subs	r3, r3, r0
 800471e:	600b      	str	r3, [r1, #0]
  last = now;
 8004720:	6010      	str	r0, [r2, #0]
  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004722:	4804      	ldr	r0, [pc, #16]	; (8004734 <LTDC_IRQHandler+0x24>)
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004724:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_LTDC_IRQHandler(&hltdc);
 8004728:	f008 b891 	b.w	800c84e <HAL_LTDC_IRQHandler>
 800472c:	20012438 	.word	0x20012438
 8004730:	20012434 	.word	0x20012434
 8004734:	20012210 	.word	0x20012210

08004738 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004738:	4801      	ldr	r0, [pc, #4]	; (8004740 <DMA2D_IRQHandler+0x8>)
 800473a:	f005 be83 	b.w	800a444 <HAL_DMA2D_IRQHandler>
 800473e:	bf00      	nop
 8004740:	20012030 	.word	0x20012030

08004744 <I2C4_EV_IRQHandler>:
void I2C4_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8004744:	4801      	ldr	r0, [pc, #4]	; (800474c <I2C4_EV_IRQHandler+0x8>)
 8004746:	f006 bffd 	b.w	800b744 <HAL_I2C_EV_IRQHandler>
 800474a:	bf00      	nop
 800474c:	20012164 	.word	0x20012164

08004750 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8004750:	4801      	ldr	r0, [pc, #4]	; (8004758 <DSI_IRQHandler+0x8>)
 8004752:	f006 b88a 	b.w	800a86a <HAL_DSI_IRQHandler>
 8004756:	bf00      	nop
 8004758:	20012148 	.word	0x20012148

0800475c <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 800475c:	4801      	ldr	r0, [pc, #4]	; (8004764 <JPEG_IRQHandler+0x8>)
 800475e:	f007 bf27 	b.w	800c5b0 <HAL_JPEG_IRQHandler>
 8004762:	bf00      	nop
 8004764:	200121b8 	.word	0x200121b8

08004768 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004768:	2001      	movs	r0, #1
 800476a:	4770      	bx	lr

0800476c <_kill>:

int _kill(int pid, int sig)
{
 800476c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800476e:	f026 feab 	bl	802b4c8 <__errno>
 8004772:	2316      	movs	r3, #22
 8004774:	6003      	str	r3, [r0, #0]
	return -1;
}
 8004776:	f04f 30ff 	mov.w	r0, #4294967295
 800477a:	bd08      	pop	{r3, pc}

0800477c <_exit>:

void _exit (int status)
{
 800477c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800477e:	f026 fea3 	bl	802b4c8 <__errno>
 8004782:	2316      	movs	r3, #22
 8004784:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8004786:	e7fe      	b.n	8004786 <_exit+0xa>

08004788 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004788:	b570      	push	{r4, r5, r6, lr}
 800478a:	460d      	mov	r5, r1
 800478c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800478e:	460e      	mov	r6, r1
 8004790:	1b73      	subs	r3, r6, r5
 8004792:	429c      	cmp	r4, r3
 8004794:	dc01      	bgt.n	800479a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8004796:	4620      	mov	r0, r4
 8004798:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800479a:	f3af 8000 	nop.w
 800479e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047a2:	e7f5      	b.n	8004790 <_read+0x8>

080047a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80047a4:	b570      	push	{r4, r5, r6, lr}
 80047a6:	460d      	mov	r5, r1
 80047a8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047aa:	460e      	mov	r6, r1
 80047ac:	1b73      	subs	r3, r6, r5
 80047ae:	429c      	cmp	r4, r3
 80047b0:	dc01      	bgt.n	80047b6 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80047b2:	4620      	mov	r0, r4
 80047b4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80047b6:	f816 0b01 	ldrb.w	r0, [r6], #1
 80047ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047be:	e7f5      	b.n	80047ac <_write+0x8>

080047c0 <_close>:

int _close(int file)
{
	return -1;
}
 80047c0:	f04f 30ff 	mov.w	r0, #4294967295
 80047c4:	4770      	bx	lr

080047c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80047c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80047ca:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80047cc:	604b      	str	r3, [r1, #4]
}
 80047ce:	4770      	bx	lr

080047d0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80047d0:	2001      	movs	r0, #1
 80047d2:	4770      	bx	lr

080047d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80047d4:	2000      	movs	r0, #0
 80047d6:	4770      	bx	lr

080047d8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SY36 = 6; // SourceHanSansSC_Bold_36_2bpp
    static const touchgfx::FontId SY40 = 7; // SourceHanSansSC_Bold_40_2bpp
    static const uint16_t NUMBER_OF_FONTS = 8;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80047d8:	4770      	bx	lr

080047da <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80047da:	b508      	push	{r3, lr}
    switch (typography)
 80047dc:	2907      	cmp	r1, #7
 80047de:	d825      	bhi.n	800482c <_ZN23ApplicationFontProvider7getFontEt+0x52>
 80047e0:	e8df f001 	tbb	[pc, r1]
 80047e4:	100c0804 	.word	0x100c0804
 80047e8:	201c1814 	.word	0x201c1814
    {
    case Typography::SY16:
        // SourceHanSansSC_Bold_16_2bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80047ec:	f001 fa96 	bl	8005d1c <_ZN17TypedTextDatabase8getFontsEv>
 80047f0:	6800      	ldr	r0, [r0, #0]
        // SourceHanSansSC_Bold_40_2bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[7]);
    default:
        return 0;
    }
}
 80047f2:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80047f4:	f001 fa92 	bl	8005d1c <_ZN17TypedTextDatabase8getFontsEv>
 80047f8:	6840      	ldr	r0, [r0, #4]
 80047fa:	e7fa      	b.n	80047f2 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80047fc:	f001 fa8e 	bl	8005d1c <_ZN17TypedTextDatabase8getFontsEv>
 8004800:	6880      	ldr	r0, [r0, #8]
 8004802:	e7f6      	b.n	80047f2 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8004804:	f001 fa8a 	bl	8005d1c <_ZN17TypedTextDatabase8getFontsEv>
 8004808:	68c0      	ldr	r0, [r0, #12]
 800480a:	e7f2      	b.n	80047f2 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800480c:	f001 fa86 	bl	8005d1c <_ZN17TypedTextDatabase8getFontsEv>
 8004810:	6900      	ldr	r0, [r0, #16]
 8004812:	e7ee      	b.n	80047f2 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 8004814:	f001 fa82 	bl	8005d1c <_ZN17TypedTextDatabase8getFontsEv>
 8004818:	6940      	ldr	r0, [r0, #20]
 800481a:	e7ea      	b.n	80047f2 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800481c:	f001 fa7e 	bl	8005d1c <_ZN17TypedTextDatabase8getFontsEv>
 8004820:	6980      	ldr	r0, [r0, #24]
 8004822:	e7e6      	b.n	80047f2 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[7]);
 8004824:	f001 fa7a 	bl	8005d1c <_ZN17TypedTextDatabase8getFontsEv>
 8004828:	69c0      	ldr	r0, [r0, #28]
 800482a:	e7e2      	b.n	80047f2 <_ZN23ApplicationFontProvider7getFontEt+0x18>
    switch (typography)
 800482c:	2000      	movs	r0, #0
 800482e:	e7e0      	b.n	80047f2 <_ZN23ApplicationFontProvider7getFontEt+0x18>

08004830 <_ZN23ApplicationFontProviderD0Ev>:
 8004830:	b510      	push	{r4, lr}
 8004832:	4604      	mov	r4, r0
 8004834:	2104      	movs	r1, #4
 8004836:	f026 f8c4 	bl	802a9c2 <_ZdlPvj>
 800483a:	4620      	mov	r0, r4
 800483c:	bd10      	pop	{r4, pc}
	...

08004840 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8004840:	4800      	ldr	r0, [pc, #0]	; (8004844 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8004842:	4770      	bx	lr
 8004844:	0802ddc4 	.word	0x0802ddc4

08004848 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8004848:	203e      	movs	r0, #62	; 0x3e
 800484a:	4770      	bx	lr

0800484c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800484c:	b513      	push	{r0, r1, r4, lr}
 800484e:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8004850:	b151      	cbz	r1, 8004868 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8004852:	6803      	ldr	r3, [r0, #0]
 8004854:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8004856:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8004858:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800485c:	689c      	ldr	r4, [r3, #8]
 800485e:	f10d 0303 	add.w	r3, sp, #3
 8004862:	47a0      	blx	r4
        return glyph;
    }
 8004864:	b002      	add	sp, #8
 8004866:	bd10      	pop	{r4, pc}
            return 0;
 8004868:	4608      	mov	r0, r1
 800486a:	e7fb      	b.n	8004864 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

0800486c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 800486c:	89c0      	ldrh	r0, [r0, #14]
 800486e:	4770      	bx	lr

08004870 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8004870:	8a00      	ldrh	r0, [r0, #16]
 8004872:	4770      	bx	lr

08004874 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8004874:	88c0      	ldrh	r0, [r0, #6]
 8004876:	4770      	bx	lr

08004878 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8004878:	8880      	ldrh	r0, [r0, #4]
 800487a:	4770      	bx	lr

0800487c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 800487c:	7a80      	ldrb	r0, [r0, #10]
    }
 800487e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004882:	4770      	bx	lr

08004884 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8004884:	7a80      	ldrb	r0, [r0, #10]
    }
 8004886:	09c0      	lsrs	r0, r0, #7
 8004888:	4770      	bx	lr

0800488a <_ZN8touchgfx9TypedTextD1Ev>:
    }
 800488a:	4770      	bx	lr

0800488c <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800488c:	b510      	push	{r4, lr}
 800488e:	4604      	mov	r4, r0
    }
 8004890:	2108      	movs	r1, #8
 8004892:	f026 f896 	bl	802a9c2 <_ZdlPvj>
 8004896:	4620      	mov	r0, r4
 8004898:	bd10      	pop	{r4, pc}

0800489a <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 800489a:	4770      	bx	lr

0800489c <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 800489c:	4770      	bx	lr

0800489e <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 800489e:	f500 7398 	add.w	r3, r0, #304	; 0x130
 80048a2:	6808      	ldr	r0, [r1, #0]
 80048a4:	6849      	ldr	r1, [r1, #4]
 80048a6:	c303      	stmia	r3!, {r0, r1}
    }
 80048a8:	4770      	bx	lr

080048aa <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80048aa:	4770      	bx	lr

080048ac <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80048ac:	4770      	bx	lr

080048ae <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80048ae:	6041      	str	r1, [r0, #4]
    }
 80048b0:	4770      	bx	lr

080048b2 <_ZNK8touchgfx10Transition13FullSolidRect12getSolidRectEv>:
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80048b2:	2200      	movs	r2, #0
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
    {
    public:
        virtual Rect getSolidRect() const
 80048b4:	b510      	push	{r4, lr}
        {
            return Rect(0, 0, rect.width, rect.height);
 80048b6:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80048ba:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80048be:	8002      	strh	r2, [r0, #0]
 80048c0:	8042      	strh	r2, [r0, #2]
 80048c2:	8084      	strh	r4, [r0, #4]
 80048c4:	80c1      	strh	r1, [r0, #6]
        }
 80048c6:	bd10      	pop	{r4, pc}

080048c8 <_ZNK8touchgfx10Transition13FullSolidRect4drawERKNS_4RectE>:

        virtual void draw(const Rect& area) const
        {
        }
 80048c8:	4770      	bx	lr

080048ca <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80048ca:	4770      	bx	lr

080048cc <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80048cc:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 80048ce:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 80048d2:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 80048d6:	2300      	movs	r3, #0
 80048d8:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// firstScreeen

void FrontendApplicationBase::gotofirstScreeenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotofirstScreeenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80048dc:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 80048e0:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotofirstScreeenScreenNoTransition();
    }
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	08005181 	.word	0x08005181

080048ec <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80048ec:	2301      	movs	r3, #1
 80048ee:	7203      	strb	r3, [r0, #8]
    }
 80048f0:	4770      	bx	lr

080048f2 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>:
    class FullSolidRect : public Widget
 80048f2:	4770      	bx	lr

080048f4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EED1Ev>:
{
/**
 * A Transition that slides the new screen over the previous \e from the given direction.
 */
template <Direction templateDirection>
class CoverTransition : public Transition
 80048f4:	4770      	bx	lr

080048f6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
 80048f6:	4770      	bx	lr

080048f8 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80048f8:	4770      	bx	lr

080048fa <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 80048fa:	4770      	bx	lr

080048fc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE8tearDownEv>:

            d = d->getNextSibling();
        }
    }

    virtual void tearDown()
 80048fc:	4601      	mov	r1, r0
    {
        screenContainer->remove(solid);
 80048fe:	6840      	ldr	r0, [r0, #4]
 8004900:	6803      	ldr	r3, [r0, #0]
 8004902:	3110      	adds	r1, #16
 8004904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004906:	4718      	bx	r3

08004908 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE4initEv>:
    }

    virtual void init()
 8004908:	b570      	push	{r4, r5, r6, lr}
 800490a:	4605      	mov	r5, r0
    {
        Transition::init();

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 800490c:	6840      	ldr	r0, [r0, #4]
 800490e:	6803      	ldr	r3, [r0, #0]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	4798      	blx	r3
 8004914:	4604      	mov	r4, r0
        while (d)
 8004916:	b93c      	cbnz	r4, 8004928 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE4initEv+0x20>
            }

            d = d->getNextSibling();
        }

        screenContainer->add(solid);
 8004918:	6868      	ldr	r0, [r5, #4]
 800491a:	f105 0110 	add.w	r1, r5, #16
 800491e:	6803      	ldr	r3, [r0, #0]
    }
 8004920:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(solid);
 8004924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004926:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
 8004928:	88a1      	ldrh	r1, [r4, #4]
 800492a:	4620      	mov	r0, r4
 800492c:	89ab      	ldrh	r3, [r5, #12]
 800492e:	1ac9      	subs	r1, r1, r3
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	b209      	sxth	r1, r1
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	4798      	blx	r3
        return nextSibling;
 8004938:	69a4      	ldr	r4, [r4, #24]
 800493a:	e7ec      	b.n	8004916 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE4initEv+0xe>

0800493c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 800493c:	4601      	mov	r1, r0
        screenContainer->remove(solid);
 800493e:	6840      	ldr	r0, [r0, #4]
 8004940:	6803      	ldr	r3, [r0, #0]
 8004942:	3110      	adds	r1, #16
 8004944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004946:	4718      	bx	r3

08004948 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	4605      	mov	r5, r0
        Drawable* d = screenContainer->getFirstChild();
 800494c:	6840      	ldr	r0, [r0, #4]
 800494e:	6803      	ldr	r3, [r0, #0]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	4798      	blx	r3
 8004954:	4604      	mov	r4, r0
        while (d)
 8004956:	b93c      	cbnz	r4, 8004968 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x20>
        screenContainer->add(solid);
 8004958:	6868      	ldr	r0, [r5, #4]
 800495a:	f105 0110 	add.w	r1, r5, #16
 800495e:	6803      	ldr	r3, [r0, #0]
    }
 8004960:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(solid);
 8004964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004966:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
 8004968:	88a1      	ldrh	r1, [r4, #4]
 800496a:	4620      	mov	r0, r4
 800496c:	89ab      	ldrh	r3, [r5, #12]
 800496e:	1ac9      	subs	r1, r1, r3
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	b209      	sxth	r1, r1
 8004974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004976:	4798      	blx	r3
 8004978:	69a4      	ldr	r4, [r4, #24]
 800497a:	e7ec      	b.n	8004956 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0xe>

0800497c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800497c:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 800497e:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8004980:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8004982:	68c2      	ldr	r2, [r0, #12]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	1054      	asrs	r4, r2, #1
 8004988:	eb01 0062 	add.w	r0, r1, r2, asr #1
 800498c:	07d2      	lsls	r2, r2, #31
 800498e:	bf48      	it	mi
 8004990:	590a      	ldrmi	r2, [r1, r4]
    }
 8004992:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8004996:	bf48      	it	mi
 8004998:	58d3      	ldrmi	r3, [r2, r3]
 800499a:	4718      	bx	r3

0800499c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 800499c:	6843      	ldr	r3, [r0, #4]
 800499e:	b12b      	cbz	r3, 80049ac <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 80049a0:	6883      	ldr	r3, [r0, #8]
 80049a2:	b92b      	cbnz	r3, 80049b0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 80049a4:	68c0      	ldr	r0, [r0, #12]
 80049a6:	f000 0001 	and.w	r0, r0, #1
 80049aa:	4770      	bx	lr
 80049ac:	4618      	mov	r0, r3
 80049ae:	4770      	bx	lr
 80049b0:	2001      	movs	r0, #1
    }
 80049b2:	4770      	bx	lr

080049b4 <_ZN8touchgfx12NoTransitionD0Ev>:
 80049b4:	b510      	push	{r4, lr}
 80049b6:	4604      	mov	r4, r0
 80049b8:	210c      	movs	r1, #12
 80049ba:	f026 f802 	bl	802a9c2 <_ZdlPvj>
 80049be:	4620      	mov	r0, r4
 80049c0:	bd10      	pop	{r4, pc}

080049c2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80049c2:	b510      	push	{r4, lr}
 80049c4:	4604      	mov	r4, r0
 80049c6:	2110      	movs	r1, #16
 80049c8:	f025 fffb 	bl	802a9c2 <_ZdlPvj>
 80049cc:	4620      	mov	r0, r4
 80049ce:	bd10      	pop	{r4, pc}

080049d0 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 80049d0:	b510      	push	{r4, lr}
 80049d2:	4604      	mov	r4, r0
 80049d4:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80049d8:	f025 fff3 	bl	802a9c2 <_ZdlPvj>
 80049dc:	4620      	mov	r0, r4
 80049de:	bd10      	pop	{r4, pc}

080049e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EED0Ev>:
class CoverTransition : public Transition
 80049e0:	b510      	push	{r4, lr}
 80049e2:	4604      	mov	r4, r0
 80049e4:	2138      	movs	r1, #56	; 0x38
 80049e6:	f025 ffec 	bl	802a9c2 <_ZdlPvj>
 80049ea:	4620      	mov	r0, r4
 80049ec:	bd10      	pop	{r4, pc}

080049ee <_ZN8touchgfx10Transition13FullSolidRectD0Ev>:
 80049ee:	b510      	push	{r4, lr}
 80049f0:	4604      	mov	r4, r0
 80049f2:	2128      	movs	r1, #40	; 0x28
 80049f4:	f025 ffe5 	bl	802a9c2 <_ZdlPvj>
 80049f8:	4620      	mov	r0, r4
 80049fa:	bd10      	pop	{r4, pc}

080049fc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
 80049fc:	b510      	push	{r4, lr}
 80049fe:	4604      	mov	r4, r0
 8004a00:	2138      	movs	r1, #56	; 0x38
 8004a02:	f025 ffde 	bl	802a9c2 <_ZdlPvj>
 8004a06:	4620      	mov	r0, r4
 8004a08:	bd10      	pop	{r4, pc}

08004a0a <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8004a0a:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8004a0c:	f013 fa54 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 8004a10:	6803      	ldr	r3, [r0, #0]
    }
 8004a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8004a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a18:	4718      	bx	r3
	...

08004a1c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8004a1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a1e:	4604      	mov	r4, r0
        animationCounter++;
 8004a20:	7a80      	ldrb	r0, [r0, #10]
 8004a22:	3001      	adds	r0, #1
        if (animationCounter > animationSteps)
 8004a24:	7a63      	ldrb	r3, [r4, #9]
        animationCounter++;
 8004a26:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 8004a28:	4298      	cmp	r0, r3
        animationCounter++;
 8004a2a:	72a0      	strb	r0, [r4, #10]
        if (animationCounter > animationSteps)
 8004a2c:	d905      	bls.n	8004a3a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1e>
            done = true;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 8004a32:	2300      	movs	r3, #0
 8004a34:	72a3      	strb	r3, [r4, #10]
    }
 8004a36:	b002      	add	sp, #8
 8004a38:	bd70      	pop	{r4, r5, r6, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8004a3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a3e:	2100      	movs	r1, #0
        const int16_t oldValue = calculatedValue;
 8004a40:	f9b4 600e 	ldrsh.w	r6, [r4, #14]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8004a44:	f015 f86c 	bl	8019b20 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 8004a48:	f010 0201 	ands.w	r2, r0, #1
 8004a4c:	b283      	uxth	r3, r0
 8004a4e:	d12e      	bne.n	8004aae <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x92>
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8004a50:	81e0      	strh	r0, [r4, #14]
        const int16_t relativeValue = calculatedValue - oldValue;
 8004a52:	89e5      	ldrh	r5, [r4, #14]
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8004a54:	7aa3      	ldrb	r3, [r4, #10]
        const int16_t relativeValue = calculatedValue - oldValue;
 8004a56:	1bad      	subs	r5, r5, r6
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8004a58:	2b01      	cmp	r3, #1
        const int16_t relativeValue = calculatedValue - oldValue;
 8004a5a:	b2ad      	uxth	r5, r5
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8004a5c:	d106      	bne.n	8004a6c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x50>
 8004a5e:	4b18      	ldr	r3, [pc, #96]	; (8004ac0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0xa4>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	b11b      	cbz	r3, 8004a6c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x50>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8004a64:	f013 fa28 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 8004a68:	f013 fa2c 	bl	8017ec4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
        : x(0), y(0), width(0), height(0)
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	9300      	str	r3, [sp, #0]
            rect.width = calculatedValue;
 8004a70:	89e3      	ldrh	r3, [r4, #14]
 8004a72:	f8ad 3004 	strh.w	r3, [sp, #4]
            rect.height = HAL::DISPLAY_HEIGHT;
 8004a76:	4b13      	ldr	r3, [pc, #76]	; (8004ac4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0xa8>)
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	f8ad 3006 	strh.w	r3, [sp, #6]
        Application::getInstance()->invalidateArea(rect);
 8004a7e:	f013 fa1b 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 8004a82:	aa02      	add	r2, sp, #8
 8004a84:	6803      	ldr	r3, [r0, #0]
 8004a86:	e912 0006 	ldmdb	r2, {r1, r2}
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	4798      	blx	r3
        Drawable* d = screenContainer->getFirstChild();
 8004a8e:	6860      	ldr	r0, [r4, #4]
 8004a90:	6803      	ldr	r3, [r0, #0]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	4798      	blx	r3
 8004a96:	4604      	mov	r4, r0
        while (d)
 8004a98:	2c00      	cmp	r4, #0
 8004a9a:	d0cc      	beq.n	8004a36 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1a>
                d->setX(d->getX() + relativeValue);
 8004a9c:	88a1      	ldrh	r1, [r4, #4]
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	6823      	ldr	r3, [r4, #0]
 8004aa2:	4429      	add	r1, r5
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	b209      	sxth	r1, r1
 8004aa8:	4798      	blx	r3
 8004aaa:	69a4      	ldr	r4, [r4, #24]
 8004aac:	e7f4      	b.n	8004a98 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x7c>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8004aae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	bfd8      	it	le
 8004ab6:	460a      	movle	r2, r1
 8004ab8:	4413      	add	r3, r2
 8004aba:	81e3      	strh	r3, [r4, #14]
 8004abc:	e7c9      	b.n	8004a52 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x36>
 8004abe:	bf00      	nop
 8004ac0:	20027ca6 	.word	0x20027ca6
 8004ac4:	20027c9e 	.word	0x20027c9e

08004ac8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8004ac8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004aca:	4604      	mov	r4, r0
        animationCounter++;
 8004acc:	7a80      	ldrb	r0, [r0, #10]
 8004ace:	3001      	adds	r0, #1
        if (animationCounter > animationSteps)
 8004ad0:	7a63      	ldrb	r3, [r4, #9]
        animationCounter++;
 8004ad2:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 8004ad4:	4298      	cmp	r0, r3
        animationCounter++;
 8004ad6:	72a0      	strb	r0, [r4, #10]
        if (animationCounter > animationSteps)
 8004ad8:	d905      	bls.n	8004ae6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 8004ada:	2301      	movs	r3, #1
 8004adc:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	72a3      	strb	r3, [r4, #10]
    }
 8004ae2:	b002      	add	sp, #8
 8004ae4:	bd70      	pop	{r4, r5, r6, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8004ae6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004aea:	2100      	movs	r1, #0
        const int16_t oldValue = calculatedValue;
 8004aec:	f9b4 600e 	ldrsh.w	r6, [r4, #14]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8004af0:	f015 f816 	bl	8019b20 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 8004af4:	f010 0201 	ands.w	r2, r0, #1
 8004af8:	b283      	uxth	r3, r0
 8004afa:	d135      	bne.n	8004b68 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa0>
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8004afc:	81e0      	strh	r0, [r4, #14]
        const int16_t relativeValue = calculatedValue - oldValue;
 8004afe:	89e5      	ldrh	r5, [r4, #14]
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8004b00:	7aa3      	ldrb	r3, [r4, #10]
        const int16_t relativeValue = calculatedValue - oldValue;
 8004b02:	1bad      	subs	r5, r5, r6
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8004b04:	2b01      	cmp	r3, #1
        const int16_t relativeValue = calculatedValue - oldValue;
 8004b06:	b2ad      	uxth	r5, r5
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8004b08:	d106      	bne.n	8004b18 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x50>
 8004b0a:	4b1b      	ldr	r3, [pc, #108]	; (8004b78 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb0>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	b11b      	cbz	r3, 8004b18 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x50>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8004b10:	f013 f9d2 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 8004b14:	f013 f9d6 	bl	8017ec4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
 8004b18:	2300      	movs	r3, #0
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 8004b1a:	4a18      	ldr	r2, [pc, #96]	; (8004b7c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb4>)
 8004b1c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8004b20:	8812      	ldrh	r2, [r2, #0]
 8004b22:	89e3      	ldrh	r3, [r4, #14]
 8004b24:	441a      	add	r2, r3
            rect.width = -calculatedValue;
 8004b26:	425b      	negs	r3, r3
 8004b28:	f8ad 3004 	strh.w	r3, [sp, #4]
            rect.height = HAL::DISPLAY_HEIGHT;
 8004b2c:	4b14      	ldr	r3, [pc, #80]	; (8004b80 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb8>)
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 8004b2e:	f8ad 2000 	strh.w	r2, [sp]
            rect.height = HAL::DISPLAY_HEIGHT;
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	f8ad 3006 	strh.w	r3, [sp, #6]
        Application::getInstance()->invalidateArea(rect);
 8004b38:	f013 f9be 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 8004b3c:	aa02      	add	r2, sp, #8
 8004b3e:	6803      	ldr	r3, [r0, #0]
 8004b40:	e912 0006 	ldmdb	r2, {r1, r2}
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	4798      	blx	r3
        Drawable* d = screenContainer->getFirstChild();
 8004b48:	6860      	ldr	r0, [r4, #4]
 8004b4a:	6803      	ldr	r3, [r0, #0]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	4798      	blx	r3
 8004b50:	4604      	mov	r4, r0
        while (d)
 8004b52:	2c00      	cmp	r4, #0
 8004b54:	d0c5      	beq.n	8004ae2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
                d->setX(d->getX() + relativeValue);
 8004b56:	88a1      	ldrh	r1, [r4, #4]
 8004b58:	4620      	mov	r0, r4
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	4429      	add	r1, r5
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	b209      	sxth	r1, r1
 8004b62:	4798      	blx	r3
 8004b64:	69a4      	ldr	r4, [r4, #24]
 8004b66:	e7f4      	b.n	8004b52 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8a>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8004b68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	bfd8      	it	le
 8004b70:	460a      	movle	r2, r1
 8004b72:	4413      	add	r3, r2
 8004b74:	81e3      	strh	r3, [r4, #14]
 8004b76:	e7c2      	b.n	8004afe <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x36>
 8004b78:	20027ca6 	.word	0x20027ca6
 8004b7c:	20027c9c 	.word	0x20027c9c
 8004b80:	20027c9e 	.word	0x20027c9e

08004b84 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8004b84:	b510      	push	{r4, lr}
 8004b86:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8004b88:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8004b8c:	b158      	cbz	r0, 8004ba6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8004b8e:	6803      	ldr	r3, [r0, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	4798      	blx	r3
 8004b94:	b138      	cbz	r0, 8004ba6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8004b96:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 8004b9a:	6803      	ldr	r3, [r0, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 8004ba6:	bd10      	pop	{r4, pc}

08004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8004ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bac:	461d      	mov	r5, r3
        setX(x);
 8004bae:	6803      	ldr	r3, [r0, #0]
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8004bb0:	4604      	mov	r4, r0
 8004bb2:	4616      	mov	r6, r2
        setX(x);
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8004bb6:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
        setX(x);
 8004bba:	4798      	blx	r3
        setY(y);
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	4631      	mov	r1, r6
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc4:	4798      	blx	r3
        setWidth(width);
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	4629      	mov	r1, r5
 8004bca:	4620      	mov	r0, r4
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bce:	4798      	blx	r3
        setHeight(height);
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	4639      	mov	r1, r7
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 8004bd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setHeight(height);
 8004bdc:	4718      	bx	r3
	...

08004be0 <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotomainScreenScreenCoverTransitionWestImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotomainScreenScreenCoverTransitionWestImpl()
{
 8004be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::CoverTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004be4:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	; 0x154
{
 8004be8:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004bea:	f8db 0008 	ldr.w	r0, [fp, #8]
 8004bee:	6803      	ldr	r3, [r0, #0]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	4798      	blx	r3
 8004bf4:	f240 53a3 	movw	r3, #1443	; 0x5a3
 8004bf8:	4298      	cmp	r0, r3
 8004bfa:	d805      	bhi.n	8004c08 <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x28>
 8004bfc:	4b55      	ldr	r3, [pc, #340]	; (8004d54 <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x174>)
 8004bfe:	21a3      	movs	r1, #163	; 0xa3
 8004c00:	4a55      	ldr	r2, [pc, #340]	; (8004d58 <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x178>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004c02:	4856      	ldr	r0, [pc, #344]	; (8004d5c <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x17c>)
 8004c04:	f026 f8ba 	bl	802ad7c <__assert_func>
 8004c08:	f8db 0004 	ldr.w	r0, [fp, #4]
 8004c0c:	6803      	ldr	r3, [r0, #0]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	4798      	blx	r3
 8004c12:	280f      	cmp	r0, #15
 8004c14:	d803      	bhi.n	8004c1e <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x3e>
 8004c16:	4b52      	ldr	r3, [pc, #328]	; (8004d60 <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x180>)
 8004c18:	21a4      	movs	r1, #164	; 0xa4
 8004c1a:	4a4f      	ldr	r2, [pc, #316]	; (8004d58 <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x178>)
 8004c1c:	e7f1      	b.n	8004c02 <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x22>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004c1e:	f8db 000c 	ldr.w	r0, [fp, #12]
 8004c22:	6803      	ldr	r3, [r0, #0]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	4798      	blx	r3
 8004c28:	2837      	cmp	r0, #55	; 0x37
 8004c2a:	d803      	bhi.n	8004c34 <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x54>
 8004c2c:	4b4d      	ldr	r3, [pc, #308]	; (8004d64 <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x184>)
 8004c2e:	21a5      	movs	r1, #165	; 0xa5
 8004c30:	4a49      	ldr	r2, [pc, #292]	; (8004d58 <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x178>)
 8004c32:	e7e6      	b.n	8004c02 <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x22>
    if (*currentTrans)
 8004c34:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8004d78 <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x198>
    Application::getInstance()->clearAllTimerWidgets();
 8004c38:	f013 f93e 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8004c3c:	3004      	adds	r0, #4
 8004c3e:	f013 f9a1 	bl	8017f84 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8004c42:	f8d9 0000 	ldr.w	r0, [r9]
 8004c46:	b110      	cbz	r0, 8004c4e <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x6e>
        (*currentTrans)->tearDown();
 8004c48:	6803      	ldr	r3, [r0, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4798      	blx	r3
    if (*currentTrans)
 8004c4e:	f8d9 0000 	ldr.w	r0, [r9]
 8004c52:	b110      	cbz	r0, 8004c5a <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x7a>
        (*currentTrans)->~Transition();
 8004c54:	6803      	ldr	r3, [r0, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4798      	blx	r3
    if (*currentScreen)
 8004c5a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8004d7c <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x19c>
 8004c5e:	f8d8 0000 	ldr.w	r0, [r8]
 8004c62:	b110      	cbz	r0, 8004c6a <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x8a>
        (*currentScreen)->tearDownScreen();
 8004c64:	6803      	ldr	r3, [r0, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	4798      	blx	r3
    if (*currentPresenter)
 8004c6a:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8004c6e:	b110      	cbz	r0, 8004c76 <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x96>
        (*currentPresenter)->deactivate();
 8004c70:	6803      	ldr	r3, [r0, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	4798      	blx	r3
    if (*currentScreen)
 8004c76:	f8d8 0000 	ldr.w	r0, [r8]
 8004c7a:	b110      	cbz	r0, 8004c82 <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0xa2>
        (*currentScreen)->~Screen();
 8004c7c:	6803      	ldr	r3, [r0, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4798      	blx	r3
    if (*currentPresenter)
 8004c82:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8004c86:	b110      	cbz	r0, 8004c8e <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0xae>
        (*currentPresenter)->~Presenter();
 8004c88:	6803      	ldr	r3, [r0, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004c8e:	f8db 000c 	ldr.w	r0, [fp, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8004c92:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8004c94:	2500      	movs	r5, #0
 8004c96:	6803      	ldr	r3, [r0, #0]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	4798      	blx	r3
          solid()
 8004c9c:	4b32      	ldr	r3, [pc, #200]	; (8004d68 <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x188>)
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8004c9e:	4a33      	ldr	r2, [pc, #204]	; (8004d6c <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x18c>)
 8004ca0:	4629      	mov	r1, r5
          solid()
 8004ca2:	6003      	str	r3, [r0, #0]
 8004ca4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8004ca8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004cac:	4604      	mov	r4, r0
 8004cae:	8103      	strh	r3, [r0, #8]
          solid()
 8004cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cb4:	6045      	str	r5, [r0, #4]
 8004cb6:	6343      	str	r3, [r0, #52]	; 0x34
    class FullSolidRect : public Widget
 8004cb8:	4b2d      	ldr	r3, [pc, #180]	; (8004d70 <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x190>)
          animationCounter(0),
 8004cba:	7285      	strb	r5, [r0, #10]
 8004cbc:	6103      	str	r3, [r0, #16]
            targetValue = HAL::DISPLAY_WIDTH;
 8004cbe:	4b2d      	ldr	r3, [pc, #180]	; (8004d74 <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x194>)
          calculatedValue(0),
 8004cc0:	81c5      	strh	r5, [r0, #14]
            targetValue = HAL::DISPLAY_WIDTH;
 8004cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
          solid()
 8004cc6:	e9c0 5505 	strd	r5, r5, [r0, #20]
            targetValue = HAL::DISPLAY_WIDTH;
 8004cca:	8183      	strh	r3, [r0, #12]
          solid()
 8004ccc:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8004cd0:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
 8004cd4:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8004cd8:	3010      	adds	r0, #16
 8004cda:	9200      	str	r2, [sp, #0]
 8004cdc:	462a      	mov	r2, r5
 8004cde:	f7ff ff63 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004ce2:	f8db 0008 	ldr.w	r0, [fp, #8]
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	6803      	ldr	r3, [r0, #0]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	4798      	blx	r3
 8004cee:	4606      	mov	r6, r0
 8004cf0:	f004 fd0c 	bl	800970c <_ZN14mainScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004cf4:	f8db 0004 	ldr.w	r0, [fp, #4]
 8004cf8:	4629      	mov	r1, r5
 8004cfa:	6803      	ldr	r3, [r0, #0]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	4798      	blx	r3
 8004d00:	4605      	mov	r5, r0
 8004d02:	4631      	mov	r1, r6
 8004d04:	f004 fcdc 	bl	80096c0 <_ZN19mainScreenPresenterC1ER14mainScreenView>
    *currentTrans = newTransition;
 8004d08:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8004d0c:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 8004d10:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8004d14:	b1e5      	cbz	r5, 8004d50 <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x170>
 8004d16:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8004d18:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8004d1c:	4630      	mov	r0, r6
 8004d1e:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8004d20:	f8c5 a008 	str.w	sl, [r5, #8]
 8004d24:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8004d26:	63f5      	str	r5, [r6, #60]	; 0x3c
 8004d28:	4798      	blx	r3
    newPresenter->activate();
 8004d2a:	682b      	ldr	r3, [r5, #0]
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004d32:	4621      	mov	r1, r4
 8004d34:	4630      	mov	r0, r6
 8004d36:	f014 feed 	bl	8019b14 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	4798      	blx	r3
    newTransition->invalidate();
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	4620      	mov	r0, r4
 8004d46:	695b      	ldr	r3, [r3, #20]
}
 8004d48:	b003      	add	sp, #12
 8004d4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d4e:	4718      	bx	r3
    model->bind(newPresenter);
 8004d50:	462b      	mov	r3, r5
 8004d52:	e7e1      	b.n	8004d18 <_ZN23FrontendApplicationBase43gotomainScreenScreenCoverTransitionWestImplEv+0x138>
 8004d54:	0802e2ac 	.word	0x0802e2ac
 8004d58:	0802e33a 	.word	0x0802e33a
 8004d5c:	0802e457 	.word	0x0802e457
 8004d60:	0802e49e 	.word	0x0802e49e
 8004d64:	0802e541 	.word	0x0802e541
 8004d68:	0802ed84 	.word	0x0802ed84
 8004d6c:	20027c9e 	.word	0x20027c9e
 8004d70:	0802ec68 	.word	0x0802ec68
 8004d74:	20027c9c 	.word	0x20027c9c
 8004d78:	20027cf0 	.word	0x20027cf0
 8004d7c:	20027cec 	.word	0x20027cec

08004d80 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8004d80:	4b04      	ldr	r3, [pc, #16]	; (8004d94 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004d88:	b10a      	cbz	r2, 8004d8e <_ZN8touchgfx3HAL3lcdEv+0xe>
 8004d8a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004d8c:	b900      	cbnz	r0, 8004d90 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 8004d8e:	6898      	ldr	r0, [r3, #8]
    }
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20027ca8 	.word	0x20027ca8

08004d98 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8004d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9a:	4604      	mov	r4, r0
 8004d9c:	4617      	mov	r7, r2
 8004d9e:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8004da0:	f013 f9c2 	bl	8018128 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8004da4:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 8004da6:	2500      	movs	r5, #0
        instance = this;
 8004da8:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004daa:	4629      	mov	r1, r5
      model(m)
 8004dac:	4b0f      	ldr	r3, [pc, #60]	; (8004dec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8004dae:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8004db0:	4b0f      	ldr	r3, [pc, #60]	; (8004df0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8004db2:	e9c4 3551 	strd	r3, r5, [r4, #324]	; 0x144
        return instance;
 8004db6:	4b0f      	ldr	r3, [pc, #60]	; (8004df4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8004db8:	6818      	ldr	r0, [r3, #0]
 8004dba:	e9c4 5553 	strd	r5, r5, [r4, #332]	; 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004dbe:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8004dc0:	e9c4 554f 	strd	r5, r5, [r4, #316]	; 0x13c
 8004dc4:	689b      	ldr	r3, [r3, #8]
      model(m)
 8004dc6:	e9c4 7655 	strd	r7, r6, [r4, #340]	; 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004dca:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8004dcc:	4628      	mov	r0, r5
 8004dce:	f000 ff59 	bl	8005c84 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8004dd2:	f7ff ffd5 	bl	8004d80 <_ZN8touchgfx3HAL3lcdEv>
 8004dd6:	f01c fb86 	bl	80214e6 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8004dda:	f7ff ffd1 	bl	8004d80 <_ZN8touchgfx3HAL3lcdEv>
 8004dde:	f01c fbfd 	bl	80215dc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
}
 8004de2:	4620      	mov	r0, r4
 8004de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20027cfc 	.word	0x20027cfc
 8004dec:	0802ece8 	.word	0x0802ece8
 8004df0:	0802ecd0 	.word	0x0802ecd0
 8004df4:	20027ca8 	.word	0x20027ca8

08004df8 <_ZN23FrontendApplicationBase34gotofirstScreeenScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004df8:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <_ZN23FrontendApplicationBase34gotofirstScreeenScreenNoTransitionEv+0x1c>)
 8004dfa:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8004dfe:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8004e02:	2300      	movs	r3, #0
 8004e04:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8004e08:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8004e0c:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	08005181 	.word	0x08005181

08004e18 <_ZN23FrontendApplicationBase32gotolockScreenScreenNoTransitionEv>:
 8004e18:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <_ZN23FrontendApplicationBase32gotolockScreenScreenNoTransitionEv+0x1c>)
 8004e1a:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8004e1e:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8004e22:	2300      	movs	r3, #0
 8004e24:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8004e28:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8004e2c:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	08005031 	.word	0x08005031

08004e38 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>:
 8004e38:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x1c>)
 8004e3a:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8004e3e:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8004e42:	2300      	movs	r3, #0
 8004e44:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8004e48:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8004e4c:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	08004ee1 	.word	0x08004ee1

08004e58 <_ZN23FrontendApplicationBase39gotomainScreenScreenCoverTransitionWestEv>:
 8004e58:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <_ZN23FrontendApplicationBase39gotomainScreenScreenCoverTransitionWestEv+0x1c>)
 8004e5a:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8004e5e:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8004e62:	2300      	movs	r3, #0
 8004e64:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8004e68:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8004e6c:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	08004be1 	.word	0x08004be1

08004e78 <_ZN23FrontendApplicationBase40gotostartScreenScreenCoverTransitionEastEv>:
 8004e78:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <_ZN23FrontendApplicationBase40gotostartScreenScreenCoverTransitionEastEv+0x1c>)
 8004e7a:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8004e7e:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8004e82:	2300      	movs	r3, #0
 8004e84:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// startScreen

void FrontendApplicationBase::gotostartScreenScreenCoverTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotostartScreenScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8004e88:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8004e8c:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	080055b9 	.word	0x080055b9

08004e98 <_ZN23FrontendApplicationBase38gotobatScreenScreenCoverTransitionEastEv>:
 8004e98:	4b06      	ldr	r3, [pc, #24]	; (8004eb4 <_ZN23FrontendApplicationBase38gotobatScreenScreenCoverTransitionEastEv+0x1c>)
 8004e9a:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8004e9e:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// batScreen

void FrontendApplicationBase::gotobatScreenScreenCoverTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotobatScreenScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8004ea8:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8004eac:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	08005479 	.word	0x08005479

08004eb8 <_ZN23FrontendApplicationBase40gotoaboutScreenScreenCoverTransitionEastEv>:
 8004eb8:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <_ZN23FrontendApplicationBase40gotoaboutScreenScreenCoverTransitionEastEv+0x1c>)
 8004eba:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8004ebe:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// aboutScreen

void FrontendApplicationBase::gotoaboutScreenScreenCoverTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoaboutScreenScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8004ec8:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8004ecc:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	08005339 	.word	0x08005339

08004ed8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
 8004ed8:	6803      	ldr	r3, [r0, #0]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	4718      	bx	r3
	...

08004ee0 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv>:
{
 8004ee0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004ee4:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 8004ee8:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004eea:	68a8      	ldr	r0, [r5, #8]
 8004eec:	6803      	ldr	r3, [r0, #0]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	4798      	blx	r3
 8004ef2:	f240 53a3 	movw	r3, #1443	; 0x5a3
 8004ef6:	4298      	cmp	r0, r3
 8004ef8:	d805      	bhi.n	8004f06 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x26>
 8004efa:	4b45      	ldr	r3, [pc, #276]	; (8005010 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x130>)
 8004efc:	21a3      	movs	r1, #163	; 0xa3
 8004efe:	4a45      	ldr	r2, [pc, #276]	; (8005014 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x134>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004f00:	4845      	ldr	r0, [pc, #276]	; (8005018 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x138>)
 8004f02:	f025 ff3b 	bl	802ad7c <__assert_func>
 8004f06:	6868      	ldr	r0, [r5, #4]
 8004f08:	6803      	ldr	r3, [r0, #0]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	4798      	blx	r3
 8004f0e:	280f      	cmp	r0, #15
 8004f10:	d803      	bhi.n	8004f1a <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x3a>
 8004f12:	4b42      	ldr	r3, [pc, #264]	; (800501c <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x13c>)
 8004f14:	21a4      	movs	r1, #164	; 0xa4
 8004f16:	4a3f      	ldr	r2, [pc, #252]	; (8005014 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x134>)
 8004f18:	e7f2      	b.n	8004f00 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004f1a:	68e8      	ldr	r0, [r5, #12]
 8004f1c:	6803      	ldr	r3, [r0, #0]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	4798      	blx	r3
 8004f22:	280b      	cmp	r0, #11
 8004f24:	d803      	bhi.n	8004f2e <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x4e>
 8004f26:	4b3e      	ldr	r3, [pc, #248]	; (8005020 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x140>)
 8004f28:	21a5      	movs	r1, #165	; 0xa5
 8004f2a:	4a3a      	ldr	r2, [pc, #232]	; (8005014 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x134>)
 8004f2c:	e7e8      	b.n	8004f00 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 8004f2e:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8005028 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x148>
    Application::getInstance()->clearAllTimerWidgets();
 8004f32:	f012 ffc1 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 8004f36:	3004      	adds	r0, #4
 8004f38:	f013 f824 	bl	8017f84 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8004f3c:	f8d9 0000 	ldr.w	r0, [r9]
 8004f40:	b110      	cbz	r0, 8004f48 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 8004f42:	6803      	ldr	r3, [r0, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	4798      	blx	r3
    if (*currentTrans)
 8004f48:	f8d9 0000 	ldr.w	r0, [r9]
 8004f4c:	b110      	cbz	r0, 8004f54 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 8004f4e:	6803      	ldr	r3, [r0, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4798      	blx	r3
    if (*currentScreen)
 8004f54:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800502c <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x14c>
 8004f58:	f8d8 0000 	ldr.w	r0, [r8]
 8004f5c:	b110      	cbz	r0, 8004f64 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8004f5e:	6803      	ldr	r3, [r0, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	4798      	blx	r3
    if (*currentPresenter)
 8004f64:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8004f68:	b110      	cbz	r0, 8004f70 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 8004f6a:	6803      	ldr	r3, [r0, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	4798      	blx	r3
    if (*currentScreen)
 8004f70:	f8d8 0000 	ldr.w	r0, [r8]
 8004f74:	b110      	cbz	r0, 8004f7c <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 8004f76:	6803      	ldr	r3, [r0, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4798      	blx	r3
    if (*currentPresenter)
 8004f7c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8004f80:	b110      	cbz	r0, 8004f88 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 8004f82:	6803      	ldr	r3, [r0, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004f88:	2100      	movs	r1, #0
 8004f8a:	68e8      	ldr	r0, [r5, #12]
 8004f8c:	f7ff ffa4 	bl	8004ed8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
        : screenContainer(0), done(false)
 8004f90:	f04f 0b00 	mov.w	fp, #0
 8004f94:	4b23      	ldr	r3, [pc, #140]	; (8005024 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x144>)
 8004f96:	4604      	mov	r4, r0
 8004f98:	f8c0 b004 	str.w	fp, [r0, #4]
 8004f9c:	4659      	mov	r1, fp
 8004f9e:	6003      	str	r3, [r0, #0]
 8004fa0:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004fa4:	68a8      	ldr	r0, [r5, #8]
 8004fa6:	6803      	ldr	r3, [r0, #0]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	4798      	blx	r3
 8004fac:	4606      	mov	r6, r0
 8004fae:	f004 fbad 	bl	800970c <_ZN14mainScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004fb2:	6868      	ldr	r0, [r5, #4]
 8004fb4:	4659      	mov	r1, fp
 8004fb6:	6803      	ldr	r3, [r0, #0]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	4798      	blx	r3
 8004fbc:	4605      	mov	r5, r0
 8004fbe:	4631      	mov	r1, r6
 8004fc0:	f004 fb7e 	bl	80096c0 <_ZN19mainScreenPresenterC1ER14mainScreenView>
    *currentTrans = newTransition;
 8004fc4:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8004fc8:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 8004fcc:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8004fd0:	b1e5      	cbz	r5, 800500c <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x12c>
 8004fd2:	1d2b      	adds	r3, r5, #4
 8004fd4:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8004fd8:	4630      	mov	r0, r6
 8004fda:	6833      	ldr	r3, [r6, #0]
 8004fdc:	f8c5 a008 	str.w	sl, [r5, #8]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	63f5      	str	r5, [r6, #60]	; 0x3c
 8004fe4:	4798      	blx	r3
    newPresenter->activate();
 8004fe6:	682b      	ldr	r3, [r5, #0]
 8004fe8:	4628      	mov	r0, r5
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004fee:	4621      	mov	r1, r4
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	f014 fd8f 	bl	8019b14 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	4798      	blx	r3
    newTransition->invalidate();
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	4620      	mov	r0, r4
 8005002:	695b      	ldr	r3, [r3, #20]
}
 8005004:	b001      	add	sp, #4
 8005006:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500a:	4718      	bx	r3
    model->bind(newPresenter);
 800500c:	462b      	mov	r3, r5
 800500e:	e7e1      	b.n	8004fd4 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0xf4>
 8005010:	0802e2ac 	.word	0x0802e2ac
 8005014:	0802e5e4 	.word	0x0802e5e4
 8005018:	0802e457 	.word	0x0802e457
 800501c:	0802e49e 	.word	0x0802e49e
 8005020:	0802e541 	.word	0x0802e541
 8005024:	0802ed3c 	.word	0x0802ed3c
 8005028:	20027cf0 	.word	0x20027cf0
 800502c:	20027cec 	.word	0x20027cec

08005030 <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv>:
{
 8005030:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<lockScreenView, lockScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8005034:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 8005038:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800503a:	68a8      	ldr	r0, [r5, #8]
 800503c:	6803      	ldr	r3, [r0, #0]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	4798      	blx	r3
 8005042:	f5b0 7f01 	cmp.w	r0, #516	; 0x204
 8005046:	d205      	bcs.n	8005054 <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv+0x24>
 8005048:	4b45      	ldr	r3, [pc, #276]	; (8005160 <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv+0x130>)
 800504a:	21a3      	movs	r1, #163	; 0xa3
 800504c:	4a45      	ldr	r2, [pc, #276]	; (8005164 <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv+0x134>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800504e:	4846      	ldr	r0, [pc, #280]	; (8005168 <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv+0x138>)
 8005050:	f025 fe94 	bl	802ad7c <__assert_func>
 8005054:	6868      	ldr	r0, [r5, #4]
 8005056:	6803      	ldr	r3, [r0, #0]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	4798      	blx	r3
 800505c:	280f      	cmp	r0, #15
 800505e:	d803      	bhi.n	8005068 <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv+0x38>
 8005060:	4b42      	ldr	r3, [pc, #264]	; (800516c <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv+0x13c>)
 8005062:	21a4      	movs	r1, #164	; 0xa4
 8005064:	4a3f      	ldr	r2, [pc, #252]	; (8005164 <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv+0x134>)
 8005066:	e7f2      	b.n	800504e <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8005068:	68e8      	ldr	r0, [r5, #12]
 800506a:	6803      	ldr	r3, [r0, #0]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	4798      	blx	r3
 8005070:	280b      	cmp	r0, #11
 8005072:	d803      	bhi.n	800507c <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv+0x4c>
 8005074:	4b3e      	ldr	r3, [pc, #248]	; (8005170 <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv+0x140>)
 8005076:	21a5      	movs	r1, #165	; 0xa5
 8005078:	4a3a      	ldr	r2, [pc, #232]	; (8005164 <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv+0x134>)
 800507a:	e7e8      	b.n	800504e <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 800507c:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8005178 <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv+0x148>
    Application::getInstance()->clearAllTimerWidgets();
 8005080:	f012 ff1a 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 8005084:	3004      	adds	r0, #4
 8005086:	f012 ff7d 	bl	8017f84 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 800508a:	f8d9 0000 	ldr.w	r0, [r9]
 800508e:	b110      	cbz	r0, 8005096 <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8005090:	6803      	ldr	r3, [r0, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	4798      	blx	r3
    if (*currentTrans)
 8005096:	f8d9 0000 	ldr.w	r0, [r9]
 800509a:	b110      	cbz	r0, 80050a2 <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 800509c:	6803      	ldr	r3, [r0, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4798      	blx	r3
    if (*currentScreen)
 80050a2:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800517c <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv+0x14c>
 80050a6:	f8d8 0000 	ldr.w	r0, [r8]
 80050aa:	b110      	cbz	r0, 80050b2 <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 80050ac:	6803      	ldr	r3, [r0, #0]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	4798      	blx	r3
    if (*currentPresenter)
 80050b2:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80050b6:	b110      	cbz	r0, 80050be <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 80050b8:	6803      	ldr	r3, [r0, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	4798      	blx	r3
    if (*currentScreen)
 80050be:	f8d8 0000 	ldr.w	r0, [r8]
 80050c2:	b110      	cbz	r0, 80050ca <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 80050c4:	6803      	ldr	r3, [r0, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4798      	blx	r3
    if (*currentPresenter)
 80050ca:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80050ce:	b110      	cbz	r0, 80050d6 <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 80050d0:	6803      	ldr	r3, [r0, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80050d6:	2100      	movs	r1, #0
 80050d8:	68e8      	ldr	r0, [r5, #12]
 80050da:	f7ff fefd 	bl	8004ed8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80050de:	f04f 0b00 	mov.w	fp, #0
 80050e2:	4b24      	ldr	r3, [pc, #144]	; (8005174 <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv+0x144>)
 80050e4:	4604      	mov	r4, r0
 80050e6:	f8c0 b004 	str.w	fp, [r0, #4]
 80050ea:	4659      	mov	r1, fp
 80050ec:	6003      	str	r3, [r0, #0]
 80050ee:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80050f2:	68a8      	ldr	r0, [r5, #8]
 80050f4:	6803      	ldr	r3, [r0, #0]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	4798      	blx	r3
 80050fa:	4606      	mov	r6, r0
 80050fc:	f004 fac6 	bl	800968c <_ZN14lockScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8005100:	6868      	ldr	r0, [r5, #4]
 8005102:	4659      	mov	r1, fp
 8005104:	6803      	ldr	r3, [r0, #0]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	4798      	blx	r3
 800510a:	4605      	mov	r5, r0
 800510c:	4631      	mov	r1, r6
 800510e:	f004 fa97 	bl	8009640 <_ZN19lockScreenPresenterC1ER14lockScreenView>
    *currentTrans = newTransition;
 8005112:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8005116:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 800511a:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 800511e:	b1e5      	cbz	r5, 800515a <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv+0x12a>
 8005120:	1d2b      	adds	r3, r5, #4
 8005122:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8005126:	4630      	mov	r0, r6
 8005128:	6833      	ldr	r3, [r6, #0]
 800512a:	f8c5 a008 	str.w	sl, [r5, #8]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	63f5      	str	r5, [r6, #60]	; 0x3c
 8005132:	4798      	blx	r3
    newPresenter->activate();
 8005134:	682b      	ldr	r3, [r5, #0]
 8005136:	4628      	mov	r0, r5
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800513c:	4621      	mov	r1, r4
 800513e:	4630      	mov	r0, r6
 8005140:	f014 fce8 	bl	8019b14 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	4620      	mov	r0, r4
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	4798      	blx	r3
    newTransition->invalidate();
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	4620      	mov	r0, r4
 8005150:	695b      	ldr	r3, [r3, #20]
}
 8005152:	b001      	add	sp, #4
 8005154:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005158:	4718      	bx	r3
    model->bind(newPresenter);
 800515a:	462b      	mov	r3, r5
 800515c:	e7e1      	b.n	8005122 <_ZN23FrontendApplicationBase36gotolockScreenScreenNoTransitionImplEv+0xf2>
 800515e:	bf00      	nop
 8005160:	0802e2ac 	.word	0x0802e2ac
 8005164:	0802e6ee 	.word	0x0802e6ee
 8005168:	0802e457 	.word	0x0802e457
 800516c:	0802e49e 	.word	0x0802e49e
 8005170:	0802e541 	.word	0x0802e541
 8005174:	0802ed3c 	.word	0x0802ed3c
 8005178:	20027cf0 	.word	0x20027cf0
 800517c:	20027cec 	.word	0x20027cec

08005180 <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv>:
{
 8005180:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<firstScreeenView, firstScreeenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8005184:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 8005188:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800518a:	68a8      	ldr	r0, [r5, #8]
 800518c:	6803      	ldr	r3, [r0, #0]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	4798      	blx	r3
 8005192:	f5b0 7fd2 	cmp.w	r0, #420	; 0x1a4
 8005196:	d205      	bcs.n	80051a4 <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv+0x24>
 8005198:	4b45      	ldr	r3, [pc, #276]	; (80052b0 <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv+0x130>)
 800519a:	21a3      	movs	r1, #163	; 0xa3
 800519c:	4a45      	ldr	r2, [pc, #276]	; (80052b4 <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv+0x134>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800519e:	4846      	ldr	r0, [pc, #280]	; (80052b8 <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv+0x138>)
 80051a0:	f025 fdec 	bl	802ad7c <__assert_func>
 80051a4:	6868      	ldr	r0, [r5, #4]
 80051a6:	6803      	ldr	r3, [r0, #0]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	4798      	blx	r3
 80051ac:	280f      	cmp	r0, #15
 80051ae:	d803      	bhi.n	80051b8 <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv+0x38>
 80051b0:	4b42      	ldr	r3, [pc, #264]	; (80052bc <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv+0x13c>)
 80051b2:	21a4      	movs	r1, #164	; 0xa4
 80051b4:	4a3f      	ldr	r2, [pc, #252]	; (80052b4 <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv+0x134>)
 80051b6:	e7f2      	b.n	800519e <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80051b8:	68e8      	ldr	r0, [r5, #12]
 80051ba:	6803      	ldr	r3, [r0, #0]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	4798      	blx	r3
 80051c0:	280b      	cmp	r0, #11
 80051c2:	d803      	bhi.n	80051cc <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv+0x4c>
 80051c4:	4b3e      	ldr	r3, [pc, #248]	; (80052c0 <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv+0x140>)
 80051c6:	21a5      	movs	r1, #165	; 0xa5
 80051c8:	4a3a      	ldr	r2, [pc, #232]	; (80052b4 <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv+0x134>)
 80051ca:	e7e8      	b.n	800519e <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 80051cc:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80052c8 <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv+0x148>
    Application::getInstance()->clearAllTimerWidgets();
 80051d0:	f012 fe72 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 80051d4:	3004      	adds	r0, #4
 80051d6:	f012 fed5 	bl	8017f84 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80051da:	f8d9 0000 	ldr.w	r0, [r9]
 80051de:	b110      	cbz	r0, 80051e6 <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 80051e0:	6803      	ldr	r3, [r0, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	4798      	blx	r3
    if (*currentTrans)
 80051e6:	f8d9 0000 	ldr.w	r0, [r9]
 80051ea:	b110      	cbz	r0, 80051f2 <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 80051ec:	6803      	ldr	r3, [r0, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4798      	blx	r3
    if (*currentScreen)
 80051f2:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80052cc <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv+0x14c>
 80051f6:	f8d8 0000 	ldr.w	r0, [r8]
 80051fa:	b110      	cbz	r0, 8005202 <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 80051fc:	6803      	ldr	r3, [r0, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	4798      	blx	r3
    if (*currentPresenter)
 8005202:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8005206:	b110      	cbz	r0, 800520e <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8005208:	6803      	ldr	r3, [r0, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	4798      	blx	r3
    if (*currentScreen)
 800520e:	f8d8 0000 	ldr.w	r0, [r8]
 8005212:	b110      	cbz	r0, 800521a <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8005214:	6803      	ldr	r3, [r0, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4798      	blx	r3
    if (*currentPresenter)
 800521a:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800521e:	b110      	cbz	r0, 8005226 <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8005220:	6803      	ldr	r3, [r0, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8005226:	2100      	movs	r1, #0
 8005228:	68e8      	ldr	r0, [r5, #12]
 800522a:	f7ff fe55 	bl	8004ed8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800522e:	f04f 0b00 	mov.w	fp, #0
 8005232:	4b24      	ldr	r3, [pc, #144]	; (80052c4 <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv+0x144>)
 8005234:	4604      	mov	r4, r0
 8005236:	f8c0 b004 	str.w	fp, [r0, #4]
 800523a:	4659      	mov	r1, fp
 800523c:	6003      	str	r3, [r0, #0]
 800523e:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8005242:	68a8      	ldr	r0, [r5, #8]
 8005244:	6803      	ldr	r3, [r0, #0]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	4798      	blx	r3
 800524a:	4606      	mov	r6, r0
 800524c:	f004 f9de 	bl	800960c <_ZN16firstScreeenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8005250:	6868      	ldr	r0, [r5, #4]
 8005252:	4659      	mov	r1, fp
 8005254:	6803      	ldr	r3, [r0, #0]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	4798      	blx	r3
 800525a:	4605      	mov	r5, r0
 800525c:	4631      	mov	r1, r6
 800525e:	f004 f9af 	bl	80095c0 <_ZN21firstScreeenPresenterC1ER16firstScreeenView>
    *currentTrans = newTransition;
 8005262:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8005266:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 800526a:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 800526e:	b1e5      	cbz	r5, 80052aa <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv+0x12a>
 8005270:	1d2b      	adds	r3, r5, #4
 8005272:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8005276:	4630      	mov	r0, r6
 8005278:	6833      	ldr	r3, [r6, #0]
 800527a:	f8c5 a008 	str.w	sl, [r5, #8]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	63f5      	str	r5, [r6, #60]	; 0x3c
 8005282:	4798      	blx	r3
    newPresenter->activate();
 8005284:	682b      	ldr	r3, [r5, #0]
 8005286:	4628      	mov	r0, r5
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800528c:	4621      	mov	r1, r4
 800528e:	4630      	mov	r0, r6
 8005290:	f014 fc40 	bl	8019b14 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8005294:	6823      	ldr	r3, [r4, #0]
 8005296:	4620      	mov	r0, r4
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	4798      	blx	r3
    newTransition->invalidate();
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	4620      	mov	r0, r4
 80052a0:	695b      	ldr	r3, [r3, #20]
}
 80052a2:	b001      	add	sp, #4
 80052a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052a8:	4718      	bx	r3
    model->bind(newPresenter);
 80052aa:	462b      	mov	r3, r5
 80052ac:	e7e1      	b.n	8005272 <_ZN23FrontendApplicationBase38gotofirstScreeenScreenNoTransitionImplEv+0xf2>
 80052ae:	bf00      	nop
 80052b0:	0802e2ac 	.word	0x0802e2ac
 80052b4:	0802e7f8 	.word	0x0802e7f8
 80052b8:	0802e457 	.word	0x0802e457
 80052bc:	0802e49e 	.word	0x0802e49e
 80052c0:	0802e541 	.word	0x0802e541
 80052c4:	0802ed3c 	.word	0x0802ed3c
 80052c8:	20027cf0 	.word	0x20027cf0
 80052cc:	20027cec 	.word	0x20027cec

080052d0 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>:
 80052d0:	6803      	ldr	r3, [r0, #0]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	4718      	bx	r3
	...

080052d8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>:
          solid()
 80052d8:	4b13      	ldr	r3, [pc, #76]	; (8005328 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x50>)
 80052da:	2200      	movs	r2, #0
    CoverTransition(const uint8_t transitionSteps = 20)
 80052dc:	b513      	push	{r0, r1, r4, lr}
          solid()
 80052de:	6003      	str	r3, [r0, #0]
 80052e0:	f44f 7380 	mov.w	r3, #256	; 0x100
          animationSteps(transitionSteps),
 80052e4:	7241      	strb	r1, [r0, #9]
    CoverTransition(const uint8_t transitionSteps = 20)
 80052e6:	4604      	mov	r4, r0
          solid()
 80052e8:	6343      	str	r3, [r0, #52]	; 0x34
    class FullSolidRect : public Widget
 80052ea:	4b10      	ldr	r3, [pc, #64]	; (800532c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x54>)
        : screenContainer(0), done(false)
 80052ec:	6042      	str	r2, [r0, #4]
    class FullSolidRect : public Widget
 80052ee:	6103      	str	r3, [r0, #16]
            targetValue = -HAL::DISPLAY_WIDTH;
 80052f0:	4b0f      	ldr	r3, [pc, #60]	; (8005330 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x58>)
        : screenContainer(0), done(false)
 80052f2:	7202      	strb	r2, [r0, #8]
 80052f4:	881b      	ldrh	r3, [r3, #0]
          animationCounter(0),
 80052f6:	7282      	strb	r2, [r0, #10]
            targetValue = -HAL::DISPLAY_WIDTH;
 80052f8:	4259      	negs	r1, r3
          calculatedValue(0),
 80052fa:	81c2      	strh	r2, [r0, #14]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80052fc:	b21b      	sxth	r3, r3
            targetValue = -HAL::DISPLAY_WIDTH;
 80052fe:	8181      	strh	r1, [r0, #12]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005300:	490c      	ldr	r1, [pc, #48]	; (8005334 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0x5c>)
 8005302:	f9b1 1000 	ldrsh.w	r1, [r1]
          solid()
 8005306:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800530a:	e9c0 2207 	strd	r2, r2, [r0, #28]
 800530e:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
 8005312:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005316:	9100      	str	r1, [sp, #0]
 8005318:	3010      	adds	r0, #16
 800531a:	4611      	mov	r1, r2
 800531c:	f7ff fc44 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8005320:	4620      	mov	r0, r4
 8005322:	b002      	add	sp, #8
 8005324:	bd10      	pop	{r4, pc}
 8005326:	bf00      	nop
 8005328:	0802ed60 	.word	0x0802ed60
 800532c:	0802ec68 	.word	0x0802ec68
 8005330:	20027c9c 	.word	0x20027c9c
 8005334:	20027c9e 	.word	0x20027c9e

08005338 <_ZN23FrontendApplicationBase44gotoaboutScreenScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoaboutScreenScreenCoverTransitionEastImpl()
{
 8005338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    touchgfx::makeTransition<aboutScreenView, aboutScreenPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800533c:	e9d0 4a55 	ldrd	r4, sl, [r0, #340]	; 0x154
{
 8005340:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8005342:	68a0      	ldr	r0, [r4, #8]
 8005344:	6803      	ldr	r3, [r0, #0]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	4798      	blx	r3
 800534a:	f240 432b 	movw	r3, #1067	; 0x42b
 800534e:	4298      	cmp	r0, r3
 8005350:	d805      	bhi.n	800535e <_ZN23FrontendApplicationBase44gotoaboutScreenScreenCoverTransitionEastImplEv+0x26>
 8005352:	4b42      	ldr	r3, [pc, #264]	; (800545c <_ZN23FrontendApplicationBase44gotoaboutScreenScreenCoverTransitionEastImplEv+0x124>)
 8005354:	21a3      	movs	r1, #163	; 0xa3
 8005356:	4a42      	ldr	r2, [pc, #264]	; (8005460 <_ZN23FrontendApplicationBase44gotoaboutScreenScreenCoverTransitionEastImplEv+0x128>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8005358:	4842      	ldr	r0, [pc, #264]	; (8005464 <_ZN23FrontendApplicationBase44gotoaboutScreenScreenCoverTransitionEastImplEv+0x12c>)
 800535a:	f025 fd0f 	bl	802ad7c <__assert_func>
 800535e:	6860      	ldr	r0, [r4, #4]
 8005360:	6803      	ldr	r3, [r0, #0]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	4798      	blx	r3
 8005366:	280f      	cmp	r0, #15
 8005368:	d803      	bhi.n	8005372 <_ZN23FrontendApplicationBase44gotoaboutScreenScreenCoverTransitionEastImplEv+0x3a>
 800536a:	4b3f      	ldr	r3, [pc, #252]	; (8005468 <_ZN23FrontendApplicationBase44gotoaboutScreenScreenCoverTransitionEastImplEv+0x130>)
 800536c:	21a4      	movs	r1, #164	; 0xa4
 800536e:	4a3c      	ldr	r2, [pc, #240]	; (8005460 <_ZN23FrontendApplicationBase44gotoaboutScreenScreenCoverTransitionEastImplEv+0x128>)
 8005370:	e7f2      	b.n	8005358 <_ZN23FrontendApplicationBase44gotoaboutScreenScreenCoverTransitionEastImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8005372:	68e0      	ldr	r0, [r4, #12]
 8005374:	6803      	ldr	r3, [r0, #0]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	4798      	blx	r3
 800537a:	2837      	cmp	r0, #55	; 0x37
 800537c:	d803      	bhi.n	8005386 <_ZN23FrontendApplicationBase44gotoaboutScreenScreenCoverTransitionEastImplEv+0x4e>
 800537e:	4b3b      	ldr	r3, [pc, #236]	; (800546c <_ZN23FrontendApplicationBase44gotoaboutScreenScreenCoverTransitionEastImplEv+0x134>)
 8005380:	21a5      	movs	r1, #165	; 0xa5
 8005382:	4a37      	ldr	r2, [pc, #220]	; (8005460 <_ZN23FrontendApplicationBase44gotoaboutScreenScreenCoverTransitionEastImplEv+0x128>)
 8005384:	e7e8      	b.n	8005358 <_ZN23FrontendApplicationBase44gotoaboutScreenScreenCoverTransitionEastImplEv+0x20>
    if (*currentTrans)
 8005386:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8005470 <_ZN23FrontendApplicationBase44gotoaboutScreenScreenCoverTransitionEastImplEv+0x138>
    Application::getInstance()->clearAllTimerWidgets();
 800538a:	f012 fd95 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 800538e:	3004      	adds	r0, #4
 8005390:	f012 fdf8 	bl	8017f84 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8005394:	f8d9 0000 	ldr.w	r0, [r9]
 8005398:	b110      	cbz	r0, 80053a0 <_ZN23FrontendApplicationBase44gotoaboutScreenScreenCoverTransitionEastImplEv+0x68>
        (*currentTrans)->tearDown();
 800539a:	6803      	ldr	r3, [r0, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	4798      	blx	r3
    if (*currentTrans)
 80053a0:	f8d9 0000 	ldr.w	r0, [r9]
 80053a4:	b110      	cbz	r0, 80053ac <_ZN23FrontendApplicationBase44gotoaboutScreenScreenCoverTransitionEastImplEv+0x74>
        (*currentTrans)->~Transition();
 80053a6:	6803      	ldr	r3, [r0, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4798      	blx	r3
    if (*currentScreen)
 80053ac:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8005474 <_ZN23FrontendApplicationBase44gotoaboutScreenScreenCoverTransitionEastImplEv+0x13c>
 80053b0:	f8d8 0000 	ldr.w	r0, [r8]
 80053b4:	b110      	cbz	r0, 80053bc <_ZN23FrontendApplicationBase44gotoaboutScreenScreenCoverTransitionEastImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 80053b6:	6803      	ldr	r3, [r0, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	4798      	blx	r3
    if (*currentPresenter)
 80053bc:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80053c0:	b110      	cbz	r0, 80053c8 <_ZN23FrontendApplicationBase44gotoaboutScreenScreenCoverTransitionEastImplEv+0x90>
        (*currentPresenter)->deactivate();
 80053c2:	6803      	ldr	r3, [r0, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	4798      	blx	r3
    if (*currentScreen)
 80053c8:	f8d8 0000 	ldr.w	r0, [r8]
 80053cc:	b110      	cbz	r0, 80053d4 <_ZN23FrontendApplicationBase44gotoaboutScreenScreenCoverTransitionEastImplEv+0x9c>
        (*currentScreen)->~Screen();
 80053ce:	6803      	ldr	r3, [r0, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4798      	blx	r3
    if (*currentPresenter)
 80053d4:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80053d8:	b110      	cbz	r0, 80053e0 <_ZN23FrontendApplicationBase44gotoaboutScreenScreenCoverTransitionEastImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 80053da:	6803      	ldr	r3, [r0, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80053e0:	2100      	movs	r1, #0
 80053e2:	68e0      	ldr	r0, [r4, #12]
 80053e4:	f7ff ff74 	bl	80052d0 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 80053e8:	2114      	movs	r1, #20
 80053ea:	4605      	mov	r5, r0
 80053ec:	f7ff ff74 	bl	80052d8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80053f0:	68a0      	ldr	r0, [r4, #8]
 80053f2:	2100      	movs	r1, #0
 80053f4:	6803      	ldr	r3, [r0, #0]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	4798      	blx	r3
 80053fa:	4606      	mov	r6, r0
 80053fc:	f004 f886 	bl	800950c <_ZN15aboutScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8005400:	6860      	ldr	r0, [r4, #4]
 8005402:	2100      	movs	r1, #0
 8005404:	6803      	ldr	r3, [r0, #0]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	4798      	blx	r3
 800540a:	4604      	mov	r4, r0
 800540c:	4631      	mov	r1, r6
 800540e:	f004 f857 	bl	80094c0 <_ZN20aboutScreenPresenterC1ER15aboutScreenView>
    *currentTrans = newTransition;
 8005412:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
 8005416:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 800541a:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 800541e:	b1dc      	cbz	r4, 8005458 <_ZN23FrontendApplicationBase44gotoaboutScreenScreenCoverTransitionEastImplEv+0x120>
 8005420:	1d23      	adds	r3, r4, #4
 8005422:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8005426:	4630      	mov	r0, r6
 8005428:	6833      	ldr	r3, [r6, #0]
 800542a:	f8c4 a008 	str.w	sl, [r4, #8]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	63f4      	str	r4, [r6, #60]	; 0x3c
 8005432:	4798      	blx	r3
    newPresenter->activate();
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	4620      	mov	r0, r4
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800543c:	4629      	mov	r1, r5
 800543e:	4630      	mov	r0, r6
 8005440:	f014 fb68 	bl	8019b14 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8005444:	682b      	ldr	r3, [r5, #0]
 8005446:	4628      	mov	r0, r5
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	4798      	blx	r3
    newTransition->invalidate();
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	4628      	mov	r0, r5
 8005450:	695b      	ldr	r3, [r3, #20]
}
 8005452:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005456:	4718      	bx	r3
    model->bind(newPresenter);
 8005458:	4623      	mov	r3, r4
 800545a:	e7e2      	b.n	8005422 <_ZN23FrontendApplicationBase44gotoaboutScreenScreenCoverTransitionEastImplEv+0xea>
 800545c:	0802e2ac 	.word	0x0802e2ac
 8005460:	0802e906 	.word	0x0802e906
 8005464:	0802e457 	.word	0x0802e457
 8005468:	0802e49e 	.word	0x0802e49e
 800546c:	0802e541 	.word	0x0802e541
 8005470:	20027cf0 	.word	0x20027cf0
 8005474:	20027cec 	.word	0x20027cec

08005478 <_ZN23FrontendApplicationBase42gotobatScreenScreenCoverTransitionEastImplEv>:
{
 8005478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    touchgfx::makeTransition<batScreenView, batScreenPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800547c:	e9d0 4a55 	ldrd	r4, sl, [r0, #340]	; 0x154
{
 8005480:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8005482:	68a0      	ldr	r0, [r4, #8]
 8005484:	6803      	ldr	r3, [r0, #0]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	4798      	blx	r3
 800548a:	f243 63b7 	movw	r3, #14007	; 0x36b7
 800548e:	4298      	cmp	r0, r3
 8005490:	d805      	bhi.n	800549e <_ZN23FrontendApplicationBase42gotobatScreenScreenCoverTransitionEastImplEv+0x26>
 8005492:	4b42      	ldr	r3, [pc, #264]	; (800559c <_ZN23FrontendApplicationBase42gotobatScreenScreenCoverTransitionEastImplEv+0x124>)
 8005494:	21a3      	movs	r1, #163	; 0xa3
 8005496:	4a42      	ldr	r2, [pc, #264]	; (80055a0 <_ZN23FrontendApplicationBase42gotobatScreenScreenCoverTransitionEastImplEv+0x128>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8005498:	4842      	ldr	r0, [pc, #264]	; (80055a4 <_ZN23FrontendApplicationBase42gotobatScreenScreenCoverTransitionEastImplEv+0x12c>)
 800549a:	f025 fc6f 	bl	802ad7c <__assert_func>
 800549e:	6860      	ldr	r0, [r4, #4]
 80054a0:	6803      	ldr	r3, [r0, #0]
 80054a2:	6a1b      	ldr	r3, [r3, #32]
 80054a4:	4798      	blx	r3
 80054a6:	280f      	cmp	r0, #15
 80054a8:	d803      	bhi.n	80054b2 <_ZN23FrontendApplicationBase42gotobatScreenScreenCoverTransitionEastImplEv+0x3a>
 80054aa:	4b3f      	ldr	r3, [pc, #252]	; (80055a8 <_ZN23FrontendApplicationBase42gotobatScreenScreenCoverTransitionEastImplEv+0x130>)
 80054ac:	21a4      	movs	r1, #164	; 0xa4
 80054ae:	4a3c      	ldr	r2, [pc, #240]	; (80055a0 <_ZN23FrontendApplicationBase42gotobatScreenScreenCoverTransitionEastImplEv+0x128>)
 80054b0:	e7f2      	b.n	8005498 <_ZN23FrontendApplicationBase42gotobatScreenScreenCoverTransitionEastImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80054b2:	68e0      	ldr	r0, [r4, #12]
 80054b4:	6803      	ldr	r3, [r0, #0]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	4798      	blx	r3
 80054ba:	2837      	cmp	r0, #55	; 0x37
 80054bc:	d803      	bhi.n	80054c6 <_ZN23FrontendApplicationBase42gotobatScreenScreenCoverTransitionEastImplEv+0x4e>
 80054be:	4b3b      	ldr	r3, [pc, #236]	; (80055ac <_ZN23FrontendApplicationBase42gotobatScreenScreenCoverTransitionEastImplEv+0x134>)
 80054c0:	21a5      	movs	r1, #165	; 0xa5
 80054c2:	4a37      	ldr	r2, [pc, #220]	; (80055a0 <_ZN23FrontendApplicationBase42gotobatScreenScreenCoverTransitionEastImplEv+0x128>)
 80054c4:	e7e8      	b.n	8005498 <_ZN23FrontendApplicationBase42gotobatScreenScreenCoverTransitionEastImplEv+0x20>
    if (*currentTrans)
 80054c6:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80055b0 <_ZN23FrontendApplicationBase42gotobatScreenScreenCoverTransitionEastImplEv+0x138>
    Application::getInstance()->clearAllTimerWidgets();
 80054ca:	f012 fcf5 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 80054ce:	3004      	adds	r0, #4
 80054d0:	f012 fd58 	bl	8017f84 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80054d4:	f8d9 0000 	ldr.w	r0, [r9]
 80054d8:	b110      	cbz	r0, 80054e0 <_ZN23FrontendApplicationBase42gotobatScreenScreenCoverTransitionEastImplEv+0x68>
        (*currentTrans)->tearDown();
 80054da:	6803      	ldr	r3, [r0, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	4798      	blx	r3
    if (*currentTrans)
 80054e0:	f8d9 0000 	ldr.w	r0, [r9]
 80054e4:	b110      	cbz	r0, 80054ec <_ZN23FrontendApplicationBase42gotobatScreenScreenCoverTransitionEastImplEv+0x74>
        (*currentTrans)->~Transition();
 80054e6:	6803      	ldr	r3, [r0, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4798      	blx	r3
    if (*currentScreen)
 80054ec:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80055b4 <_ZN23FrontendApplicationBase42gotobatScreenScreenCoverTransitionEastImplEv+0x13c>
 80054f0:	f8d8 0000 	ldr.w	r0, [r8]
 80054f4:	b110      	cbz	r0, 80054fc <_ZN23FrontendApplicationBase42gotobatScreenScreenCoverTransitionEastImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 80054f6:	6803      	ldr	r3, [r0, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	4798      	blx	r3
    if (*currentPresenter)
 80054fc:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8005500:	b110      	cbz	r0, 8005508 <_ZN23FrontendApplicationBase42gotobatScreenScreenCoverTransitionEastImplEv+0x90>
        (*currentPresenter)->deactivate();
 8005502:	6803      	ldr	r3, [r0, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	4798      	blx	r3
    if (*currentScreen)
 8005508:	f8d8 0000 	ldr.w	r0, [r8]
 800550c:	b110      	cbz	r0, 8005514 <_ZN23FrontendApplicationBase42gotobatScreenScreenCoverTransitionEastImplEv+0x9c>
        (*currentScreen)->~Screen();
 800550e:	6803      	ldr	r3, [r0, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4798      	blx	r3
    if (*currentPresenter)
 8005514:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8005518:	b110      	cbz	r0, 8005520 <_ZN23FrontendApplicationBase42gotobatScreenScreenCoverTransitionEastImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 800551a:	6803      	ldr	r3, [r0, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8005520:	2100      	movs	r1, #0
 8005522:	68e0      	ldr	r0, [r4, #12]
 8005524:	f7ff fed4 	bl	80052d0 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 8005528:	2114      	movs	r1, #20
 800552a:	4605      	mov	r5, r0
 800552c:	f7ff fed4 	bl	80052d8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8005530:	68a0      	ldr	r0, [r4, #8]
 8005532:	2100      	movs	r1, #0
 8005534:	6803      	ldr	r3, [r0, #0]
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	4798      	blx	r3
 800553a:	4606      	mov	r6, r0
 800553c:	f004 f826 	bl	800958c <_ZN13batScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8005540:	6860      	ldr	r0, [r4, #4]
 8005542:	2100      	movs	r1, #0
 8005544:	6803      	ldr	r3, [r0, #0]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	4798      	blx	r3
 800554a:	4604      	mov	r4, r0
 800554c:	4631      	mov	r1, r6
 800554e:	f003 fff7 	bl	8009540 <_ZN18batScreenPresenterC1ER13batScreenView>
    *currentTrans = newTransition;
 8005552:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
 8005556:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 800555a:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 800555e:	b1dc      	cbz	r4, 8005598 <_ZN23FrontendApplicationBase42gotobatScreenScreenCoverTransitionEastImplEv+0x120>
 8005560:	1d23      	adds	r3, r4, #4
 8005562:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8005566:	4630      	mov	r0, r6
 8005568:	6833      	ldr	r3, [r6, #0]
 800556a:	f8c4 a008 	str.w	sl, [r4, #8]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	63f4      	str	r4, [r6, #60]	; 0x3c
 8005572:	4798      	blx	r3
    newPresenter->activate();
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	4620      	mov	r0, r4
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800557c:	4629      	mov	r1, r5
 800557e:	4630      	mov	r0, r6
 8005580:	f014 fac8 	bl	8019b14 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8005584:	682b      	ldr	r3, [r5, #0]
 8005586:	4628      	mov	r0, r5
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	4798      	blx	r3
    newTransition->invalidate();
 800558c:	682b      	ldr	r3, [r5, #0]
 800558e:	4628      	mov	r0, r5
 8005590:	695b      	ldr	r3, [r3, #20]
}
 8005592:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005596:	4718      	bx	r3
    model->bind(newPresenter);
 8005598:	4623      	mov	r3, r4
 800559a:	e7e2      	b.n	8005562 <_ZN23FrontendApplicationBase42gotobatScreenScreenCoverTransitionEastImplEv+0xea>
 800559c:	0802e2ac 	.word	0x0802e2ac
 80055a0:	0802ea25 	.word	0x0802ea25
 80055a4:	0802e457 	.word	0x0802e457
 80055a8:	0802e49e 	.word	0x0802e49e
 80055ac:	0802e541 	.word	0x0802e541
 80055b0:	20027cf0 	.word	0x20027cf0
 80055b4:	20027cec 	.word	0x20027cec

080055b8 <_ZN23FrontendApplicationBase44gotostartScreenScreenCoverTransitionEastImplEv>:
{
 80055b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    touchgfx::makeTransition<startScreenView, startScreenPresenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80055bc:	e9d0 4a55 	ldrd	r4, sl, [r0, #340]	; 0x154
{
 80055c0:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80055c2:	68a0      	ldr	r0, [r4, #8]
 80055c4:	6803      	ldr	r3, [r0, #0]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	4798      	blx	r3
 80055ca:	f640 03b7 	movw	r3, #2231	; 0x8b7
 80055ce:	4298      	cmp	r0, r3
 80055d0:	d805      	bhi.n	80055de <_ZN23FrontendApplicationBase44gotostartScreenScreenCoverTransitionEastImplEv+0x26>
 80055d2:	4b42      	ldr	r3, [pc, #264]	; (80056dc <_ZN23FrontendApplicationBase44gotostartScreenScreenCoverTransitionEastImplEv+0x124>)
 80055d4:	21a3      	movs	r1, #163	; 0xa3
 80055d6:	4a42      	ldr	r2, [pc, #264]	; (80056e0 <_ZN23FrontendApplicationBase44gotostartScreenScreenCoverTransitionEastImplEv+0x128>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80055d8:	4842      	ldr	r0, [pc, #264]	; (80056e4 <_ZN23FrontendApplicationBase44gotostartScreenScreenCoverTransitionEastImplEv+0x12c>)
 80055da:	f025 fbcf 	bl	802ad7c <__assert_func>
 80055de:	6860      	ldr	r0, [r4, #4]
 80055e0:	6803      	ldr	r3, [r0, #0]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	4798      	blx	r3
 80055e6:	280f      	cmp	r0, #15
 80055e8:	d803      	bhi.n	80055f2 <_ZN23FrontendApplicationBase44gotostartScreenScreenCoverTransitionEastImplEv+0x3a>
 80055ea:	4b3f      	ldr	r3, [pc, #252]	; (80056e8 <_ZN23FrontendApplicationBase44gotostartScreenScreenCoverTransitionEastImplEv+0x130>)
 80055ec:	21a4      	movs	r1, #164	; 0xa4
 80055ee:	4a3c      	ldr	r2, [pc, #240]	; (80056e0 <_ZN23FrontendApplicationBase44gotostartScreenScreenCoverTransitionEastImplEv+0x128>)
 80055f0:	e7f2      	b.n	80055d8 <_ZN23FrontendApplicationBase44gotostartScreenScreenCoverTransitionEastImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80055f2:	68e0      	ldr	r0, [r4, #12]
 80055f4:	6803      	ldr	r3, [r0, #0]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	4798      	blx	r3
 80055fa:	2837      	cmp	r0, #55	; 0x37
 80055fc:	d803      	bhi.n	8005606 <_ZN23FrontendApplicationBase44gotostartScreenScreenCoverTransitionEastImplEv+0x4e>
 80055fe:	4b3b      	ldr	r3, [pc, #236]	; (80056ec <_ZN23FrontendApplicationBase44gotostartScreenScreenCoverTransitionEastImplEv+0x134>)
 8005600:	21a5      	movs	r1, #165	; 0xa5
 8005602:	4a37      	ldr	r2, [pc, #220]	; (80056e0 <_ZN23FrontendApplicationBase44gotostartScreenScreenCoverTransitionEastImplEv+0x128>)
 8005604:	e7e8      	b.n	80055d8 <_ZN23FrontendApplicationBase44gotostartScreenScreenCoverTransitionEastImplEv+0x20>
    if (*currentTrans)
 8005606:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80056f0 <_ZN23FrontendApplicationBase44gotostartScreenScreenCoverTransitionEastImplEv+0x138>
    Application::getInstance()->clearAllTimerWidgets();
 800560a:	f012 fc55 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 800560e:	3004      	adds	r0, #4
 8005610:	f012 fcb8 	bl	8017f84 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8005614:	f8d9 0000 	ldr.w	r0, [r9]
 8005618:	b110      	cbz	r0, 8005620 <_ZN23FrontendApplicationBase44gotostartScreenScreenCoverTransitionEastImplEv+0x68>
        (*currentTrans)->tearDown();
 800561a:	6803      	ldr	r3, [r0, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	4798      	blx	r3
    if (*currentTrans)
 8005620:	f8d9 0000 	ldr.w	r0, [r9]
 8005624:	b110      	cbz	r0, 800562c <_ZN23FrontendApplicationBase44gotostartScreenScreenCoverTransitionEastImplEv+0x74>
        (*currentTrans)->~Transition();
 8005626:	6803      	ldr	r3, [r0, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4798      	blx	r3
    if (*currentScreen)
 800562c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80056f4 <_ZN23FrontendApplicationBase44gotostartScreenScreenCoverTransitionEastImplEv+0x13c>
 8005630:	f8d8 0000 	ldr.w	r0, [r8]
 8005634:	b110      	cbz	r0, 800563c <_ZN23FrontendApplicationBase44gotostartScreenScreenCoverTransitionEastImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8005636:	6803      	ldr	r3, [r0, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	4798      	blx	r3
    if (*currentPresenter)
 800563c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8005640:	b110      	cbz	r0, 8005648 <_ZN23FrontendApplicationBase44gotostartScreenScreenCoverTransitionEastImplEv+0x90>
        (*currentPresenter)->deactivate();
 8005642:	6803      	ldr	r3, [r0, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	4798      	blx	r3
    if (*currentScreen)
 8005648:	f8d8 0000 	ldr.w	r0, [r8]
 800564c:	b110      	cbz	r0, 8005654 <_ZN23FrontendApplicationBase44gotostartScreenScreenCoverTransitionEastImplEv+0x9c>
        (*currentScreen)->~Screen();
 800564e:	6803      	ldr	r3, [r0, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4798      	blx	r3
    if (*currentPresenter)
 8005654:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8005658:	b110      	cbz	r0, 8005660 <_ZN23FrontendApplicationBase44gotostartScreenScreenCoverTransitionEastImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 800565a:	6803      	ldr	r3, [r0, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8005660:	2100      	movs	r1, #0
 8005662:	68e0      	ldr	r0, [r4, #12]
 8005664:	f7ff fe34 	bl	80052d0 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 8005668:	2114      	movs	r1, #20
 800566a:	4605      	mov	r5, r0
 800566c:	f7ff fe34 	bl	80052d8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8005670:	68a0      	ldr	r0, [r4, #8]
 8005672:	2100      	movs	r1, #0
 8005674:	6803      	ldr	r3, [r0, #0]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	4798      	blx	r3
 800567a:	4606      	mov	r6, r0
 800567c:	f004 f886 	bl	800978c <_ZN15startScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8005680:	6860      	ldr	r0, [r4, #4]
 8005682:	2100      	movs	r1, #0
 8005684:	6803      	ldr	r3, [r0, #0]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	4798      	blx	r3
 800568a:	4604      	mov	r4, r0
 800568c:	4631      	mov	r1, r6
 800568e:	f004 f857 	bl	8009740 <_ZN20startScreenPresenterC1ER15startScreenView>
    *currentTrans = newTransition;
 8005692:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
 8005696:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 800569a:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 800569e:	b1dc      	cbz	r4, 80056d8 <_ZN23FrontendApplicationBase44gotostartScreenScreenCoverTransitionEastImplEv+0x120>
 80056a0:	1d23      	adds	r3, r4, #4
 80056a2:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80056a6:	4630      	mov	r0, r6
 80056a8:	6833      	ldr	r3, [r6, #0]
 80056aa:	f8c4 a008 	str.w	sl, [r4, #8]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	63f4      	str	r4, [r6, #60]	; 0x3c
 80056b2:	4798      	blx	r3
    newPresenter->activate();
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	4620      	mov	r0, r4
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80056bc:	4629      	mov	r1, r5
 80056be:	4630      	mov	r0, r6
 80056c0:	f014 fa28 	bl	8019b14 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80056c4:	682b      	ldr	r3, [r5, #0]
 80056c6:	4628      	mov	r0, r5
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	4798      	blx	r3
    newTransition->invalidate();
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	4628      	mov	r0, r5
 80056d0:	695b      	ldr	r3, [r3, #20]
}
 80056d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056d6:	4718      	bx	r3
    model->bind(newPresenter);
 80056d8:	4623      	mov	r3, r4
 80056da:	e7e2      	b.n	80056a2 <_ZN23FrontendApplicationBase44gotostartScreenScreenCoverTransitionEastImplEv+0xea>
 80056dc:	0802e2ac 	.word	0x0802e2ac
 80056e0:	0802eb40 	.word	0x0802eb40
 80056e4:	0802e457 	.word	0x0802e457
 80056e8:	0802e49e 	.word	0x0802e49e
 80056ec:	0802e541 	.word	0x0802e541
 80056f0:	20027cf0 	.word	0x20027cf0
 80056f4:	20027cec 	.word	0x20027cec

080056f8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80056f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80056fa:	4770      	bx	lr

080056fc <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80056fc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80056fe:	4770      	bx	lr

08005700 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8005700:	4770      	bx	lr

08005702 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8005702:	888b      	ldrh	r3, [r1, #4]
 8005704:	69c0      	ldr	r0, [r0, #28]
 8005706:	0adb      	lsrs	r3, r3, #11
 8005708:	680a      	ldr	r2, [r1, #0]
 800570a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 800570e:	4410      	add	r0, r2
 8005710:	4770      	bx	lr

08005712 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8005712:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8005714:	b1c2      	cbz	r2, 8005748 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8005716:	7b13      	ldrb	r3, [r2, #12]
 8005718:	b1b3      	cbz	r3, 8005748 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800571a:	7b54      	ldrb	r4, [r2, #13]
 800571c:	7ad2      	ldrb	r2, [r2, #11]
 800571e:	0224      	lsls	r4, r4, #8
 8005720:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8005724:	4314      	orrs	r4, r2
 8005726:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005728:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800572a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 800572e:	8813      	ldrh	r3, [r2, #0]
 8005730:	428b      	cmp	r3, r1
 8005732:	d102      	bne.n	800573a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8005734:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8005738:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 800573a:	d805      	bhi.n	8005748 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800573c:	3801      	subs	r0, #1
 800573e:	3204      	adds	r2, #4
 8005740:	b280      	uxth	r0, r0
 8005742:	2800      	cmp	r0, #0
 8005744:	d1f3      	bne.n	800572e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8005746:	e7f7      	b.n	8005738 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8005748:	2000      	movs	r0, #0
 800574a:	e7f5      	b.n	8005738 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

0800574c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800574c:	b510      	push	{r4, lr}
 800574e:	4604      	mov	r4, r0
 8005750:	212c      	movs	r1, #44	; 0x2c
 8005752:	f025 f936 	bl	802a9c2 <_ZdlPvj>
 8005756:	4620      	mov	r0, r4
 8005758:	bd10      	pop	{r4, pc}
	...

0800575c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800575c:	b530      	push	{r4, r5, lr}
 800575e:	b08b      	sub	sp, #44	; 0x2c
 8005760:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8005762:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 8005766:	9508      	str	r5, [sp, #32]
 8005768:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 800576c:	9507      	str	r5, [sp, #28]
 800576e:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8005772:	9506      	str	r5, [sp, #24]
 8005774:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8005778:	9505      	str	r5, [sp, #20]
 800577a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800577e:	9504      	str	r5, [sp, #16]
 8005780:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8005784:	9503      	str	r5, [sp, #12]
 8005786:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 800578a:	9502      	str	r5, [sp, #8]
 800578c:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8005790:	9501      	str	r5, [sp, #4]
 8005792:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8005796:	9500      	str	r5, [sp, #0]
 8005798:	f013 fd26 	bl	80191e8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800579c:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 800579e:	4620      	mov	r0, r4
      arabicTable(formsTable)
 80057a0:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 80057a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80057a4:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 80057a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80057a8:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 80057aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80057ac:	6263      	str	r3, [r4, #36]	; 0x24
      arabicTable(formsTable)
 80057ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80057b0:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80057b2:	b00b      	add	sp, #44	; 0x2c
 80057b4:	bd30      	pop	{r4, r5, pc}
 80057b6:	bf00      	nop
 80057b8:	0802eda8 	.word	0x0802eda8

080057bc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_SourceHanSansSC_Bold_16_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_SourceHanSansSC_Bold_16_2bpp();

touchgfx::GeneratedFont& getFont_SourceHanSansSC_Bold_16_2bpp()
{
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_16_2bpp(glyphs_SourceHanSansSC_Bold_16_2bpp, 78, 19, 16, 0, 0, 2, 0, 1, 1, unicodes_SourceHanSansSC_Bold_16_2bpp, kerning_SourceHanSansSC_Bold_16_2bpp, 63, 0, 0, 0);
 80057bc:	4770      	bx	lr
	...

080057c0 <_Z36getFont_SourceHanSansSC_Bold_16_2bppv>:
{
 80057c0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_16_2bpp(glyphs_SourceHanSansSC_Bold_16_2bpp, 78, 19, 16, 0, 0, 2, 0, 1, 1, unicodes_SourceHanSansSC_Bold_16_2bpp, kerning_SourceHanSansSC_Bold_16_2bpp, 63, 0, 0, 0);
 80057c2:	4d17      	ldr	r5, [pc, #92]	; (8005820 <_Z36getFont_SourceHanSansSC_Bold_16_2bppv+0x60>)
{
 80057c4:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_16_2bpp(glyphs_SourceHanSansSC_Bold_16_2bpp, 78, 19, 16, 0, 0, 2, 0, 1, 1, unicodes_SourceHanSansSC_Bold_16_2bpp, kerning_SourceHanSansSC_Bold_16_2bpp, 63, 0, 0, 0);
 80057c6:	682c      	ldr	r4, [r5, #0]
 80057c8:	f3bf 8f5b 	dmb	ish
 80057cc:	f014 0401 	ands.w	r4, r4, #1
 80057d0:	d122      	bne.n	8005818 <_Z36getFont_SourceHanSansSC_Bold_16_2bppv+0x58>
 80057d2:	4628      	mov	r0, r5
 80057d4:	f025 f8f7 	bl	802a9c6 <__cxa_guard_acquire>
 80057d8:	b1f0      	cbz	r0, 8005818 <_Z36getFont_SourceHanSansSC_Bold_16_2bppv+0x58>
 80057da:	233f      	movs	r3, #63	; 0x3f
 80057dc:	224e      	movs	r2, #78	; 0x4e
 80057de:	4911      	ldr	r1, [pc, #68]	; (8005824 <_Z36getFont_SourceHanSansSC_Bold_16_2bppv+0x64>)
 80057e0:	9309      	str	r3, [sp, #36]	; 0x24
 80057e2:	4b11      	ldr	r3, [pc, #68]	; (8005828 <_Z36getFont_SourceHanSansSC_Bold_16_2bppv+0x68>)
 80057e4:	4811      	ldr	r0, [pc, #68]	; (800582c <_Z36getFont_SourceHanSansSC_Bold_16_2bppv+0x6c>)
 80057e6:	9308      	str	r3, [sp, #32]
 80057e8:	4b11      	ldr	r3, [pc, #68]	; (8005830 <_Z36getFont_SourceHanSansSC_Bold_16_2bppv+0x70>)
 80057ea:	940a      	str	r4, [sp, #40]	; 0x28
 80057ec:	9307      	str	r3, [sp, #28]
 80057ee:	2301      	movs	r3, #1
 80057f0:	9404      	str	r4, [sp, #16]
 80057f2:	9401      	str	r4, [sp, #4]
 80057f4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80057f8:	2302      	movs	r3, #2
 80057fa:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80057fe:	2310      	movs	r3, #16
 8005800:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	2313      	movs	r3, #19
 8005808:	f7ff ffa8 	bl	800575c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800580c:	4809      	ldr	r0, [pc, #36]	; (8005834 <_Z36getFont_SourceHanSansSC_Bold_16_2bppv+0x74>)
 800580e:	f025 fad3 	bl	802adb8 <atexit>
 8005812:	4628      	mov	r0, r5
 8005814:	f025 f8e3 	bl	802a9de <__cxa_guard_release>
    return SourceHanSansSC_Bold_16_2bpp;
}
 8005818:	4804      	ldr	r0, [pc, #16]	; (800582c <_Z36getFont_SourceHanSansSC_Bold_16_2bppv+0x6c>)
 800581a:	b00f      	add	sp, #60	; 0x3c
 800581c:	bd30      	pop	{r4, r5, pc}
 800581e:	bf00      	nop
 8005820:	2001243c 	.word	0x2001243c
 8005824:	90978a6c 	.word	0x90978a6c
 8005828:	0803159c 	.word	0x0803159c
 800582c:	20012440 	.word	0x20012440
 8005830:	08033994 	.word	0x08033994
 8005834:	080057bd 	.word	0x080057bd

08005838 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_SourceHanSansSC_Bold_18_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_SourceHanSansSC_Bold_18_2bpp();

touchgfx::GeneratedFont& getFont_SourceHanSansSC_Bold_18_2bpp()
{
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_18_2bpp(glyphs_SourceHanSansSC_Bold_18_2bpp, 91, 22, 18, 0, 0, 2, 0, 1, 1, unicodes_SourceHanSansSC_Bold_18_2bpp, kerning_SourceHanSansSC_Bold_18_2bpp, 63, 0, 0, 0);
 8005838:	4770      	bx	lr
	...

0800583c <_Z36getFont_SourceHanSansSC_Bold_18_2bppv>:
{
 800583c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_18_2bpp(glyphs_SourceHanSansSC_Bold_18_2bpp, 91, 22, 18, 0, 0, 2, 0, 1, 1, unicodes_SourceHanSansSC_Bold_18_2bpp, kerning_SourceHanSansSC_Bold_18_2bpp, 63, 0, 0, 0);
 800583e:	4d17      	ldr	r5, [pc, #92]	; (800589c <_Z36getFont_SourceHanSansSC_Bold_18_2bppv+0x60>)
{
 8005840:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_18_2bpp(glyphs_SourceHanSansSC_Bold_18_2bpp, 91, 22, 18, 0, 0, 2, 0, 1, 1, unicodes_SourceHanSansSC_Bold_18_2bpp, kerning_SourceHanSansSC_Bold_18_2bpp, 63, 0, 0, 0);
 8005842:	682c      	ldr	r4, [r5, #0]
 8005844:	f3bf 8f5b 	dmb	ish
 8005848:	f014 0401 	ands.w	r4, r4, #1
 800584c:	d122      	bne.n	8005894 <_Z36getFont_SourceHanSansSC_Bold_18_2bppv+0x58>
 800584e:	4628      	mov	r0, r5
 8005850:	f025 f8b9 	bl	802a9c6 <__cxa_guard_acquire>
 8005854:	b1f0      	cbz	r0, 8005894 <_Z36getFont_SourceHanSansSC_Bold_18_2bppv+0x58>
 8005856:	233f      	movs	r3, #63	; 0x3f
 8005858:	225b      	movs	r2, #91	; 0x5b
 800585a:	4911      	ldr	r1, [pc, #68]	; (80058a0 <_Z36getFont_SourceHanSansSC_Bold_18_2bppv+0x64>)
 800585c:	9309      	str	r3, [sp, #36]	; 0x24
 800585e:	4b11      	ldr	r3, [pc, #68]	; (80058a4 <_Z36getFont_SourceHanSansSC_Bold_18_2bppv+0x68>)
 8005860:	4811      	ldr	r0, [pc, #68]	; (80058a8 <_Z36getFont_SourceHanSansSC_Bold_18_2bppv+0x6c>)
 8005862:	9308      	str	r3, [sp, #32]
 8005864:	4b11      	ldr	r3, [pc, #68]	; (80058ac <_Z36getFont_SourceHanSansSC_Bold_18_2bppv+0x70>)
 8005866:	940a      	str	r4, [sp, #40]	; 0x28
 8005868:	9307      	str	r3, [sp, #28]
 800586a:	2301      	movs	r3, #1
 800586c:	9404      	str	r4, [sp, #16]
 800586e:	9401      	str	r4, [sp, #4]
 8005870:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005874:	2302      	movs	r3, #2
 8005876:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800587a:	2312      	movs	r3, #18
 800587c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	2316      	movs	r3, #22
 8005884:	f7ff ff6a 	bl	800575c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005888:	4809      	ldr	r0, [pc, #36]	; (80058b0 <_Z36getFont_SourceHanSansSC_Bold_18_2bppv+0x74>)
 800588a:	f025 fa95 	bl	802adb8 <atexit>
 800588e:	4628      	mov	r0, r5
 8005890:	f025 f8a5 	bl	802a9de <__cxa_guard_release>
    return SourceHanSansSC_Bold_18_2bpp;
}
 8005894:	4804      	ldr	r0, [pc, #16]	; (80058a8 <_Z36getFont_SourceHanSansSC_Bold_18_2bppv+0x6c>)
 8005896:	b00f      	add	sp, #60	; 0x3c
 8005898:	bd30      	pop	{r4, r5, pc}
 800589a:	bf00      	nop
 800589c:	2001246c 	.word	0x2001246c
 80058a0:	90978eb0 	.word	0x90978eb0
 80058a4:	080317b4 	.word	0x080317b4
 80058a8:	20012470 	.word	0x20012470
 80058ac:	080339e0 	.word	0x080339e0
 80058b0:	08005839 	.word	0x08005839

080058b4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_SourceHanSansSC_Bold_20_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_SourceHanSansSC_Bold_20_2bpp();

touchgfx::GeneratedFont& getFont_SourceHanSansSC_Bold_20_2bpp()
{
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_20_2bpp(glyphs_SourceHanSansSC_Bold_20_2bpp, 80, 24, 20, 0, 0, 2, 0, 1, 1, unicodes_SourceHanSansSC_Bold_20_2bpp, kerning_SourceHanSansSC_Bold_20_2bpp, 63, 0, 0, 0);
 80058b4:	4770      	bx	lr
	...

080058b8 <_Z36getFont_SourceHanSansSC_Bold_20_2bppv>:
{
 80058b8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_20_2bpp(glyphs_SourceHanSansSC_Bold_20_2bpp, 80, 24, 20, 0, 0, 2, 0, 1, 1, unicodes_SourceHanSansSC_Bold_20_2bpp, kerning_SourceHanSansSC_Bold_20_2bpp, 63, 0, 0, 0);
 80058ba:	4d17      	ldr	r5, [pc, #92]	; (8005918 <_Z36getFont_SourceHanSansSC_Bold_20_2bppv+0x60>)
{
 80058bc:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_20_2bpp(glyphs_SourceHanSansSC_Bold_20_2bpp, 80, 24, 20, 0, 0, 2, 0, 1, 1, unicodes_SourceHanSansSC_Bold_20_2bpp, kerning_SourceHanSansSC_Bold_20_2bpp, 63, 0, 0, 0);
 80058be:	682c      	ldr	r4, [r5, #0]
 80058c0:	f3bf 8f5b 	dmb	ish
 80058c4:	f014 0401 	ands.w	r4, r4, #1
 80058c8:	d122      	bne.n	8005910 <_Z36getFont_SourceHanSansSC_Bold_20_2bppv+0x58>
 80058ca:	4628      	mov	r0, r5
 80058cc:	f025 f87b 	bl	802a9c6 <__cxa_guard_acquire>
 80058d0:	b1f0      	cbz	r0, 8005910 <_Z36getFont_SourceHanSansSC_Bold_20_2bppv+0x58>
 80058d2:	233f      	movs	r3, #63	; 0x3f
 80058d4:	2250      	movs	r2, #80	; 0x50
 80058d6:	4911      	ldr	r1, [pc, #68]	; (800591c <_Z36getFont_SourceHanSansSC_Bold_20_2bppv+0x64>)
 80058d8:	9309      	str	r3, [sp, #36]	; 0x24
 80058da:	4b11      	ldr	r3, [pc, #68]	; (8005920 <_Z36getFont_SourceHanSansSC_Bold_20_2bppv+0x68>)
 80058dc:	4811      	ldr	r0, [pc, #68]	; (8005924 <_Z36getFont_SourceHanSansSC_Bold_20_2bppv+0x6c>)
 80058de:	9308      	str	r3, [sp, #32]
 80058e0:	4b11      	ldr	r3, [pc, #68]	; (8005928 <_Z36getFont_SourceHanSansSC_Bold_20_2bppv+0x70>)
 80058e2:	940a      	str	r4, [sp, #40]	; 0x28
 80058e4:	9307      	str	r3, [sp, #28]
 80058e6:	2301      	movs	r3, #1
 80058e8:	9404      	str	r4, [sp, #16]
 80058ea:	9401      	str	r4, [sp, #4]
 80058ec:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80058f0:	2302      	movs	r3, #2
 80058f2:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80058f6:	2314      	movs	r3, #20
 80058f8:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	2318      	movs	r3, #24
 8005900:	f7ff ff2c 	bl	800575c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005904:	4809      	ldr	r0, [pc, #36]	; (800592c <_Z36getFont_SourceHanSansSC_Bold_20_2bppv+0x74>)
 8005906:	f025 fa57 	bl	802adb8 <atexit>
 800590a:	4628      	mov	r0, r5
 800590c:	f025 f867 	bl	802a9de <__cxa_guard_release>
    return SourceHanSansSC_Bold_20_2bpp;
}
 8005910:	4804      	ldr	r0, [pc, #16]	; (8005924 <_Z36getFont_SourceHanSansSC_Bold_20_2bppv+0x6c>)
 8005912:	b00f      	add	sp, #60	; 0x3c
 8005914:	bd30      	pop	{r4, r5, pc}
 8005916:	bf00      	nop
 8005918:	2001249c 	.word	0x2001249c
 800591c:	909793ac 	.word	0x909793ac
 8005920:	08031a84 	.word	0x08031a84
 8005924:	200124a0 	.word	0x200124a0
 8005928:	08033a28 	.word	0x08033a28
 800592c:	080058b5 	.word	0x080058b5

08005930 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_SourceHanSansSC_Bold_24_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_SourceHanSansSC_Bold_24_2bpp();

touchgfx::GeneratedFont& getFont_SourceHanSansSC_Bold_24_2bpp()
{
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_24_2bpp(glyphs_SourceHanSansSC_Bold_24_2bpp, 274, 29, 24, 0, 0, 2, 0, 1, 1, unicodes_SourceHanSansSC_Bold_24_2bpp, kerning_SourceHanSansSC_Bold_24_2bpp, 63, 0, 0, 0);
 8005930:	4770      	bx	lr
	...

08005934 <_Z36getFont_SourceHanSansSC_Bold_24_2bppv>:
{
 8005934:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_24_2bpp(glyphs_SourceHanSansSC_Bold_24_2bpp, 274, 29, 24, 0, 0, 2, 0, 1, 1, unicodes_SourceHanSansSC_Bold_24_2bpp, kerning_SourceHanSansSC_Bold_24_2bpp, 63, 0, 0, 0);
 8005936:	4d17      	ldr	r5, [pc, #92]	; (8005994 <_Z36getFont_SourceHanSansSC_Bold_24_2bppv+0x60>)
{
 8005938:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_24_2bpp(glyphs_SourceHanSansSC_Bold_24_2bpp, 274, 29, 24, 0, 0, 2, 0, 1, 1, unicodes_SourceHanSansSC_Bold_24_2bpp, kerning_SourceHanSansSC_Bold_24_2bpp, 63, 0, 0, 0);
 800593a:	682c      	ldr	r4, [r5, #0]
 800593c:	f3bf 8f5b 	dmb	ish
 8005940:	f014 0401 	ands.w	r4, r4, #1
 8005944:	d123      	bne.n	800598e <_Z36getFont_SourceHanSansSC_Bold_24_2bppv+0x5a>
 8005946:	4628      	mov	r0, r5
 8005948:	f025 f83d 	bl	802a9c6 <__cxa_guard_acquire>
 800594c:	b1f8      	cbz	r0, 800598e <_Z36getFont_SourceHanSansSC_Bold_24_2bppv+0x5a>
 800594e:	233f      	movs	r3, #63	; 0x3f
 8005950:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005954:	4910      	ldr	r1, [pc, #64]	; (8005998 <_Z36getFont_SourceHanSansSC_Bold_24_2bppv+0x64>)
 8005956:	9309      	str	r3, [sp, #36]	; 0x24
 8005958:	4b10      	ldr	r3, [pc, #64]	; (800599c <_Z36getFont_SourceHanSansSC_Bold_24_2bppv+0x68>)
 800595a:	4811      	ldr	r0, [pc, #68]	; (80059a0 <_Z36getFont_SourceHanSansSC_Bold_24_2bppv+0x6c>)
 800595c:	9308      	str	r3, [sp, #32]
 800595e:	4b11      	ldr	r3, [pc, #68]	; (80059a4 <_Z36getFont_SourceHanSansSC_Bold_24_2bppv+0x70>)
 8005960:	940a      	str	r4, [sp, #40]	; 0x28
 8005962:	9307      	str	r3, [sp, #28]
 8005964:	2301      	movs	r3, #1
 8005966:	9404      	str	r4, [sp, #16]
 8005968:	9401      	str	r4, [sp, #4]
 800596a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800596e:	2302      	movs	r3, #2
 8005970:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8005974:	2318      	movs	r3, #24
 8005976:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	231d      	movs	r3, #29
 800597e:	f7ff feed 	bl	800575c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005982:	4809      	ldr	r0, [pc, #36]	; (80059a8 <_Z36getFont_SourceHanSansSC_Bold_24_2bppv+0x74>)
 8005984:	f025 fa18 	bl	802adb8 <atexit>
 8005988:	4628      	mov	r0, r5
 800598a:	f025 f828 	bl	802a9de <__cxa_guard_release>
    return SourceHanSansSC_Bold_24_2bpp;
}
 800598e:	4804      	ldr	r0, [pc, #16]	; (80059a0 <_Z36getFont_SourceHanSansSC_Bold_24_2bppv+0x6c>)
 8005990:	b00f      	add	sp, #60	; 0x3c
 8005992:	bd30      	pop	{r4, r5, pc}
 8005994:	200124cc 	.word	0x200124cc
 8005998:	9097980c 	.word	0x9097980c
 800599c:	08031da8 	.word	0x08031da8
 80059a0:	200124d0 	.word	0x200124d0
 80059a4:	08033a78 	.word	0x08033a78
 80059a8:	08005931 	.word	0x08005931

080059ac <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_SourceHanSansSC_Bold_28_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_SourceHanSansSC_Bold_28_2bpp();

touchgfx::GeneratedFont& getFont_SourceHanSansSC_Bold_28_2bpp()
{
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_28_2bpp(glyphs_SourceHanSansSC_Bold_28_2bpp, 70, 34, 28, 0, 0, 2, 0, 2, 1, unicodes_SourceHanSansSC_Bold_28_2bpp, kerning_SourceHanSansSC_Bold_28_2bpp, 63, 0, 0, 0);
 80059ac:	4770      	bx	lr
	...

080059b0 <_Z36getFont_SourceHanSansSC_Bold_28_2bppv>:
{
 80059b0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_28_2bpp(glyphs_SourceHanSansSC_Bold_28_2bpp, 70, 34, 28, 0, 0, 2, 0, 2, 1, unicodes_SourceHanSansSC_Bold_28_2bpp, kerning_SourceHanSansSC_Bold_28_2bpp, 63, 0, 0, 0);
 80059b2:	4d17      	ldr	r5, [pc, #92]	; (8005a10 <_Z36getFont_SourceHanSansSC_Bold_28_2bppv+0x60>)
{
 80059b4:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_28_2bpp(glyphs_SourceHanSansSC_Bold_28_2bpp, 70, 34, 28, 0, 0, 2, 0, 2, 1, unicodes_SourceHanSansSC_Bold_28_2bpp, kerning_SourceHanSansSC_Bold_28_2bpp, 63, 0, 0, 0);
 80059b6:	682c      	ldr	r4, [r5, #0]
 80059b8:	f3bf 8f5b 	dmb	ish
 80059bc:	f014 0401 	ands.w	r4, r4, #1
 80059c0:	d122      	bne.n	8005a08 <_Z36getFont_SourceHanSansSC_Bold_28_2bppv+0x58>
 80059c2:	4628      	mov	r0, r5
 80059c4:	f024 ffff 	bl	802a9c6 <__cxa_guard_acquire>
 80059c8:	b1f0      	cbz	r0, 8005a08 <_Z36getFont_SourceHanSansSC_Bold_28_2bppv+0x58>
 80059ca:	233f      	movs	r3, #63	; 0x3f
 80059cc:	2201      	movs	r2, #1
 80059ce:	4911      	ldr	r1, [pc, #68]	; (8005a14 <_Z36getFont_SourceHanSansSC_Bold_28_2bppv+0x64>)
 80059d0:	9309      	str	r3, [sp, #36]	; 0x24
 80059d2:	4b11      	ldr	r3, [pc, #68]	; (8005a18 <_Z36getFont_SourceHanSansSC_Bold_28_2bppv+0x68>)
 80059d4:	4811      	ldr	r0, [pc, #68]	; (8005a1c <_Z36getFont_SourceHanSansSC_Bold_28_2bppv+0x6c>)
 80059d6:	9308      	str	r3, [sp, #32]
 80059d8:	4b11      	ldr	r3, [pc, #68]	; (8005a20 <_Z36getFont_SourceHanSansSC_Bold_28_2bppv+0x70>)
 80059da:	940a      	str	r4, [sp, #40]	; 0x28
 80059dc:	9307      	str	r3, [sp, #28]
 80059de:	2302      	movs	r3, #2
 80059e0:	e9cd 3205 	strd	r3, r2, [sp, #20]
 80059e4:	e9cd 3403 	strd	r3, r4, [sp, #12]
 80059e8:	231c      	movs	r3, #28
 80059ea:	2246      	movs	r2, #70	; 0x46
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	2322      	movs	r3, #34	; 0x22
 80059f0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80059f4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80059f8:	f7ff feb0 	bl	800575c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80059fc:	4809      	ldr	r0, [pc, #36]	; (8005a24 <_Z36getFont_SourceHanSansSC_Bold_28_2bppv+0x74>)
 80059fe:	f025 f9db 	bl	802adb8 <atexit>
 8005a02:	4628      	mov	r0, r5
 8005a04:	f024 ffeb 	bl	802a9de <__cxa_guard_release>
    return SourceHanSansSC_Bold_28_2bpp;
}
 8005a08:	4804      	ldr	r0, [pc, #16]	; (8005a1c <_Z36getFont_SourceHanSansSC_Bold_28_2bppv+0x6c>)
 8005a0a:	b00f      	add	sp, #60	; 0x3c
 8005a0c:	bd30      	pop	{r4, r5, pc}
 8005a0e:	bf00      	nop
 8005a10:	200124fc 	.word	0x200124fc
 8005a14:	9097a708 	.word	0x9097a708
 8005a18:	080321ac 	.word	0x080321ac
 8005a1c:	20012500 	.word	0x20012500
 8005a20:	08033af8 	.word	0x08033af8
 8005a24:	080059ad 	.word	0x080059ad

08005a28 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_SourceHanSansSC_Bold_32_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_SourceHanSansSC_Bold_32_2bpp();

touchgfx::GeneratedFont& getFont_SourceHanSansSC_Bold_32_2bpp()
{
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_32_2bpp(glyphs_SourceHanSansSC_Bold_32_2bpp, 85, 39, 32, 0, 0, 2, 0, 2, 1, unicodes_SourceHanSansSC_Bold_32_2bpp, kerning_SourceHanSansSC_Bold_32_2bpp, 63, 0, 0, 0);
 8005a28:	4770      	bx	lr
	...

08005a2c <_Z36getFont_SourceHanSansSC_Bold_32_2bppv>:
{
 8005a2c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_32_2bpp(glyphs_SourceHanSansSC_Bold_32_2bpp, 85, 39, 32, 0, 0, 2, 0, 2, 1, unicodes_SourceHanSansSC_Bold_32_2bpp, kerning_SourceHanSansSC_Bold_32_2bpp, 63, 0, 0, 0);
 8005a2e:	4d17      	ldr	r5, [pc, #92]	; (8005a8c <_Z36getFont_SourceHanSansSC_Bold_32_2bppv+0x60>)
{
 8005a30:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_32_2bpp(glyphs_SourceHanSansSC_Bold_32_2bpp, 85, 39, 32, 0, 0, 2, 0, 2, 1, unicodes_SourceHanSansSC_Bold_32_2bpp, kerning_SourceHanSansSC_Bold_32_2bpp, 63, 0, 0, 0);
 8005a32:	682c      	ldr	r4, [r5, #0]
 8005a34:	f3bf 8f5b 	dmb	ish
 8005a38:	f014 0401 	ands.w	r4, r4, #1
 8005a3c:	d122      	bne.n	8005a84 <_Z36getFont_SourceHanSansSC_Bold_32_2bppv+0x58>
 8005a3e:	4628      	mov	r0, r5
 8005a40:	f024 ffc1 	bl	802a9c6 <__cxa_guard_acquire>
 8005a44:	b1f0      	cbz	r0, 8005a84 <_Z36getFont_SourceHanSansSC_Bold_32_2bppv+0x58>
 8005a46:	233f      	movs	r3, #63	; 0x3f
 8005a48:	2201      	movs	r2, #1
 8005a4a:	4911      	ldr	r1, [pc, #68]	; (8005a90 <_Z36getFont_SourceHanSansSC_Bold_32_2bppv+0x64>)
 8005a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a4e:	4b11      	ldr	r3, [pc, #68]	; (8005a94 <_Z36getFont_SourceHanSansSC_Bold_32_2bppv+0x68>)
 8005a50:	4811      	ldr	r0, [pc, #68]	; (8005a98 <_Z36getFont_SourceHanSansSC_Bold_32_2bppv+0x6c>)
 8005a52:	9308      	str	r3, [sp, #32]
 8005a54:	4b11      	ldr	r3, [pc, #68]	; (8005a9c <_Z36getFont_SourceHanSansSC_Bold_32_2bppv+0x70>)
 8005a56:	940a      	str	r4, [sp, #40]	; 0x28
 8005a58:	9307      	str	r3, [sp, #28]
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	e9cd 3205 	strd	r3, r2, [sp, #20]
 8005a60:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8005a64:	2320      	movs	r3, #32
 8005a66:	2255      	movs	r2, #85	; 0x55
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	2327      	movs	r3, #39	; 0x27
 8005a6c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8005a70:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8005a74:	f7ff fe72 	bl	800575c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005a78:	4809      	ldr	r0, [pc, #36]	; (8005aa0 <_Z36getFont_SourceHanSansSC_Bold_32_2bppv+0x74>)
 8005a7a:	f025 f99d 	bl	802adb8 <atexit>
 8005a7e:	4628      	mov	r0, r5
 8005a80:	f024 ffad 	bl	802a9de <__cxa_guard_release>
    return SourceHanSansSC_Bold_32_2bpp;
}
 8005a84:	4804      	ldr	r0, [pc, #16]	; (8005a98 <_Z36getFont_SourceHanSansSC_Bold_32_2bppv+0x6c>)
 8005a86:	b00f      	add	sp, #60	; 0x3c
 8005a88:	bd30      	pop	{r4, r5, pc}
 8005a8a:	bf00      	nop
 8005a8c:	2001252c 	.word	0x2001252c
 8005a90:	9097aadc 	.word	0x9097aadc
 8005a94:	08032734 	.word	0x08032734
 8005a98:	20012530 	.word	0x20012530
 8005a9c:	08033b48 	.word	0x08033b48
 8005aa0:	08005a29 	.word	0x08005a29

08005aa4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_SourceHanSansSC_Bold_36_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_SourceHanSansSC_Bold_36_2bpp();

touchgfx::GeneratedFont& getFont_SourceHanSansSC_Bold_36_2bpp()
{
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_36_2bpp(glyphs_SourceHanSansSC_Bold_36_2bpp, 63, 45, 36, 0, 0, 2, 0, 2, 2, unicodes_SourceHanSansSC_Bold_36_2bpp, kerning_SourceHanSansSC_Bold_36_2bpp, 63, 0, 0, 0);
 8005aa4:	4770      	bx	lr
	...

08005aa8 <_Z36getFont_SourceHanSansSC_Bold_36_2bppv>:
{
 8005aa8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_36_2bpp(glyphs_SourceHanSansSC_Bold_36_2bpp, 63, 45, 36, 0, 0, 2, 0, 2, 2, unicodes_SourceHanSansSC_Bold_36_2bpp, kerning_SourceHanSansSC_Bold_36_2bpp, 63, 0, 0, 0);
 8005aaa:	4d16      	ldr	r5, [pc, #88]	; (8005b04 <_Z36getFont_SourceHanSansSC_Bold_36_2bppv+0x5c>)
{
 8005aac:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_36_2bpp(glyphs_SourceHanSansSC_Bold_36_2bpp, 63, 45, 36, 0, 0, 2, 0, 2, 2, unicodes_SourceHanSansSC_Bold_36_2bpp, kerning_SourceHanSansSC_Bold_36_2bpp, 63, 0, 0, 0);
 8005aae:	682c      	ldr	r4, [r5, #0]
 8005ab0:	f3bf 8f5b 	dmb	ish
 8005ab4:	f014 0401 	ands.w	r4, r4, #1
 8005ab8:	d120      	bne.n	8005afc <_Z36getFont_SourceHanSansSC_Bold_36_2bppv+0x54>
 8005aba:	4628      	mov	r0, r5
 8005abc:	f024 ff83 	bl	802a9c6 <__cxa_guard_acquire>
 8005ac0:	b1e0      	cbz	r0, 8005afc <_Z36getFont_SourceHanSansSC_Bold_36_2bppv+0x54>
 8005ac2:	4b11      	ldr	r3, [pc, #68]	; (8005b08 <_Z36getFont_SourceHanSansSC_Bold_36_2bppv+0x60>)
 8005ac4:	223f      	movs	r2, #63	; 0x3f
 8005ac6:	4911      	ldr	r1, [pc, #68]	; (8005b0c <_Z36getFont_SourceHanSansSC_Bold_36_2bppv+0x64>)
 8005ac8:	9308      	str	r3, [sp, #32]
 8005aca:	4b11      	ldr	r3, [pc, #68]	; (8005b10 <_Z36getFont_SourceHanSansSC_Bold_36_2bppv+0x68>)
 8005acc:	9209      	str	r2, [sp, #36]	; 0x24
 8005ace:	9307      	str	r3, [sp, #28]
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	4810      	ldr	r0, [pc, #64]	; (8005b14 <_Z36getFont_SourceHanSansSC_Bold_36_2bppv+0x6c>)
 8005ad4:	940a      	str	r4, [sp, #40]	; 0x28
 8005ad6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005ada:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8005ade:	2324      	movs	r3, #36	; 0x24
 8005ae0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	232d      	movs	r3, #45	; 0x2d
 8005ae8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8005aec:	f7ff fe36 	bl	800575c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005af0:	4809      	ldr	r0, [pc, #36]	; (8005b18 <_Z36getFont_SourceHanSansSC_Bold_36_2bppv+0x70>)
 8005af2:	f025 f961 	bl	802adb8 <atexit>
 8005af6:	4628      	mov	r0, r5
 8005af8:	f024 ff71 	bl	802a9de <__cxa_guard_release>
    return SourceHanSansSC_Bold_36_2bpp;
}
 8005afc:	4805      	ldr	r0, [pc, #20]	; (8005b14 <_Z36getFont_SourceHanSansSC_Bold_36_2bppv+0x6c>)
 8005afe:	b00f      	add	sp, #60	; 0x3c
 8005b00:	bd30      	pop	{r4, r5, pc}
 8005b02:	bf00      	nop
 8005b04:	2001255c 	.word	0x2001255c
 8005b08:	08032d20 	.word	0x08032d20
 8005b0c:	9097af84 	.word	0x9097af84
 8005b10:	08033bc8 	.word	0x08033bc8
 8005b14:	20012560 	.word	0x20012560
 8005b18:	08005aa5 	.word	0x08005aa5

08005b1c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_SourceHanSansSC_Bold_40_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_SourceHanSansSC_Bold_40_2bpp();

touchgfx::GeneratedFont& getFont_SourceHanSansSC_Bold_40_2bpp()
{
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_40_2bpp(glyphs_SourceHanSansSC_Bold_40_2bpp, 70, 50, 40, 0, 0, 2, 0, 2, 1, unicodes_SourceHanSansSC_Bold_40_2bpp, kerning_SourceHanSansSC_Bold_40_2bpp, 63, 0, 0, 0);
 8005b1c:	4770      	bx	lr
	...

08005b20 <_Z36getFont_SourceHanSansSC_Bold_40_2bppv>:
{
 8005b20:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_40_2bpp(glyphs_SourceHanSansSC_Bold_40_2bpp, 70, 50, 40, 0, 0, 2, 0, 2, 1, unicodes_SourceHanSansSC_Bold_40_2bpp, kerning_SourceHanSansSC_Bold_40_2bpp, 63, 0, 0, 0);
 8005b22:	4d17      	ldr	r5, [pc, #92]	; (8005b80 <_Z36getFont_SourceHanSansSC_Bold_40_2bppv+0x60>)
{
 8005b24:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont SourceHanSansSC_Bold_40_2bpp(glyphs_SourceHanSansSC_Bold_40_2bpp, 70, 50, 40, 0, 0, 2, 0, 2, 1, unicodes_SourceHanSansSC_Bold_40_2bpp, kerning_SourceHanSansSC_Bold_40_2bpp, 63, 0, 0, 0);
 8005b26:	682c      	ldr	r4, [r5, #0]
 8005b28:	f3bf 8f5b 	dmb	ish
 8005b2c:	f014 0401 	ands.w	r4, r4, #1
 8005b30:	d122      	bne.n	8005b78 <_Z36getFont_SourceHanSansSC_Bold_40_2bppv+0x58>
 8005b32:	4628      	mov	r0, r5
 8005b34:	f024 ff47 	bl	802a9c6 <__cxa_guard_acquire>
 8005b38:	b1f0      	cbz	r0, 8005b78 <_Z36getFont_SourceHanSansSC_Bold_40_2bppv+0x58>
 8005b3a:	233f      	movs	r3, #63	; 0x3f
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	4911      	ldr	r1, [pc, #68]	; (8005b84 <_Z36getFont_SourceHanSansSC_Bold_40_2bppv+0x64>)
 8005b40:	9309      	str	r3, [sp, #36]	; 0x24
 8005b42:	4b11      	ldr	r3, [pc, #68]	; (8005b88 <_Z36getFont_SourceHanSansSC_Bold_40_2bppv+0x68>)
 8005b44:	4811      	ldr	r0, [pc, #68]	; (8005b8c <_Z36getFont_SourceHanSansSC_Bold_40_2bppv+0x6c>)
 8005b46:	9308      	str	r3, [sp, #32]
 8005b48:	4b11      	ldr	r3, [pc, #68]	; (8005b90 <_Z36getFont_SourceHanSansSC_Bold_40_2bppv+0x70>)
 8005b4a:	940a      	str	r4, [sp, #40]	; 0x28
 8005b4c:	9307      	str	r3, [sp, #28]
 8005b4e:	2302      	movs	r3, #2
 8005b50:	e9cd 3205 	strd	r3, r2, [sp, #20]
 8005b54:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8005b58:	2328      	movs	r3, #40	; 0x28
 8005b5a:	2246      	movs	r2, #70	; 0x46
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	2332      	movs	r3, #50	; 0x32
 8005b60:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8005b64:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8005b68:	f7ff fdf8 	bl	800575c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005b6c:	4809      	ldr	r0, [pc, #36]	; (8005b94 <_Z36getFont_SourceHanSansSC_Bold_40_2bppv+0x74>)
 8005b6e:	f025 f923 	bl	802adb8 <atexit>
 8005b72:	4628      	mov	r0, r5
 8005b74:	f024 ff33 	bl	802a9de <__cxa_guard_release>
    return SourceHanSansSC_Bold_40_2bpp;
}
 8005b78:	4804      	ldr	r0, [pc, #16]	; (8005b8c <_Z36getFont_SourceHanSansSC_Bold_40_2bppv+0x6c>)
 8005b7a:	b00f      	add	sp, #60	; 0x3c
 8005b7c:	bd30      	pop	{r4, r5, pc}
 8005b7e:	bf00      	nop
 8005b80:	2001258c 	.word	0x2001258c
 8005b84:	9097b2f8 	.word	0x9097b2f8
 8005b88:	08033348 	.word	0x08033348
 8005b8c:	20012590 	.word	0x20012590
 8005b90:	08033bcc 	.word	0x08033bcc
 8005b94:	08005b1d 	.word	0x08005b1d

08005b98 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8005b98:	2000      	movs	r0, #0
 8005b9a:	4770      	bx	lr

08005b9c <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	4770      	bx	lr

08005ba0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8005ba0:	b40e      	push	{r1, r2, r3}
 8005ba2:	b503      	push	{r0, r1, lr}
 8005ba4:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8005ba6:	2100      	movs	r1, #0
{
 8005ba8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8005bac:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8005bae:	f013 f943 	bl	8018e38 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8005bb2:	b002      	add	sp, #8
 8005bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bb8:	b003      	add	sp, #12
 8005bba:	4770      	bx	lr

08005bbc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8005bbc:	b40c      	push	{r2, r3}
 8005bbe:	b507      	push	{r0, r1, r2, lr}
 8005bc0:	ab04      	add	r3, sp, #16
 8005bc2:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8005bc6:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8005bc8:	f013 f936 	bl	8018e38 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8005bcc:	b003      	add	sp, #12
 8005bce:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bd2:	b002      	add	sp, #8
 8005bd4:	4770      	bx	lr
	...

08005bd8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8005bd8:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8005bda:	b510      	push	{r4, lr}
 8005bdc:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8005bde:	b373      	cbz	r3, 8005c3e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8005be0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8005be2:	b92b      	cbnz	r3, 8005bf0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8005be4:	4b18      	ldr	r3, [pc, #96]	; (8005c48 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8005be6:	21c5      	movs	r1, #197	; 0xc5
 8005be8:	4a18      	ldr	r2, [pc, #96]	; (8005c4c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8005bea:	4819      	ldr	r0, [pc, #100]	; (8005c50 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8005bec:	f025 f8c6 	bl	802ad7c <__assert_func>
            return buffer[pos];
 8005bf0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8005bf2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005bf6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005bf8:	b30b      	cbz	r3, 8005c3e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8005bfa:	f014 fd1d 	bl	801a638 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8005bfe:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d803      	bhi.n	8005c0c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8005c04:	4b13      	ldr	r3, [pc, #76]	; (8005c54 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8005c06:	21cb      	movs	r1, #203	; 0xcb
 8005c08:	4a13      	ldr	r2, [pc, #76]	; (8005c58 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8005c0a:	e7ee      	b.n	8005bea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8005c0c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8005c0e:	f640 103f 	movw	r0, #2367	; 0x93f
 8005c12:	1c53      	adds	r3, r2, #1
 8005c14:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8005c16:	2b09      	cmp	r3, #9
 8005c18:	4619      	mov	r1, r3
 8005c1a:	bf88      	it	hi
 8005c1c:	f1a3 010a 	subhi.w	r1, r3, #10
 8005c20:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8005c24:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8005c26:	4281      	cmp	r1, r0
 8005c28:	d109      	bne.n	8005c3e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8005c2a:	2b0a      	cmp	r3, #10
 8005c2c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8005c30:	bf28      	it	cs
 8005c32:	2300      	movcs	r3, #0
            return buffer[pos];
 8005c34:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8005c36:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8005c3a:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8005c3c:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8005c3e:	4620      	mov	r0, r4
}
 8005c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8005c44:	f014 bbfa 	b.w	801a43c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8005c48:	0802ee00 	.word	0x0802ee00
 8005c4c:	0802ee09 	.word	0x0802ee09
 8005c50:	0802eeb4 	.word	0x0802eeb4
 8005c54:	0802eefe 	.word	0x0802eefe
 8005c58:	0802ef0c 	.word	0x0802ef0c

08005c5c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8005c5c:	f014 bbb7 	b.w	801a3ce <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08005c60 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8005c60:	b510      	push	{r4, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	ac02      	add	r4, sp, #8
 8005c66:	e884 0006 	stmia.w	r4, {r1, r2}
 8005c6a:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8005c6c:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8005c6e:	4621      	mov	r1, r4
    va_start(pArg, format);
 8005c70:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8005c72:	9301      	str	r3, [sp, #4]
 8005c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	9b08      	ldr	r3, [sp, #32]
 8005c7a:	f011 fce5 	bl	8017648 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8005c7e:	b006      	add	sp, #24
 8005c80:	bd10      	pop	{r4, pc}
	...

08005c84 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8005c84:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8005c86:	bb18      	cbnz	r0, 8005cd0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8005c88:	4b12      	ldr	r3, [pc, #72]	; (8005cd4 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8005c8a:	4813      	ldr	r0, [pc, #76]	; (8005cd8 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8005c8c:	681c      	ldr	r4, [r3, #0]
 8005c8e:	4913      	ldr	r1, [pc, #76]	; (8005cdc <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8005c90:	b1b4      	cbz	r4, 8005cc0 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8005c92:	6822      	ldr	r2, [r4, #0]
 8005c94:	4422      	add	r2, r4
 8005c96:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8005c98:	6862      	ldr	r2, [r4, #4]
 8005c9a:	4422      	add	r2, r4
 8005c9c:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8005c9e:	68a2      	ldr	r2, [r4, #8]
 8005ca0:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8005ca2:	4b0f      	ldr	r3, [pc, #60]	; (8005ce0 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8005ca8:	f000 f838 	bl	8005d1c <_ZN17TypedTextDatabase8getFontsEv>
 8005cac:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8005cae:	f000 f833 	bl	8005d18 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8005cb2:	4b0c      	ldr	r3, [pc, #48]	; (8005ce4 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8005cb4:	601c      	str	r4, [r3, #0]
        fonts = f;
 8005cb6:	4b0c      	ldr	r3, [pc, #48]	; (8005ce8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8005cb8:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8005cba:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8005cbc:	8018      	strh	r0, [r3, #0]
    }
}
 8005cbe:	e007      	b.n	8005cd0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8005cc0:	4b0b      	ldr	r3, [pc, #44]	; (8005cf0 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8005cc2:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8005cc4:	4b0b      	ldr	r3, [pc, #44]	; (8005cf4 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8005cc6:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8005cc8:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8005cca:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8005ccc:	2c00      	cmp	r4, #0
 8005cce:	d1e8      	bne.n	8005ca2 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8005cd0:	bd38      	pop	{r3, r4, r5, pc}
 8005cd2:	bf00      	nop
 8005cd4:	200125bc 	.word	0x200125bc
 8005cd8:	200125c0 	.word	0x200125c0
 8005cdc:	200125c4 	.word	0x200125c4
 8005ce0:	200125c8 	.word	0x200125c8
 8005ce4:	20027d00 	.word	0x20027d00
 8005ce8:	20027d08 	.word	0x20027d08
 8005cec:	20027d04 	.word	0x20027d04
 8005cf0:	9097b760 	.word	0x9097b760
 8005cf4:	9097b6cc 	.word	0x9097b6cc
 8005cf8:	9097bf0c 	.word	0x9097bf0c

08005cfc <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8005cfc:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8005d04:	4b03      	ldr	r3, [pc, #12]	; (8005d14 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8005d06:	681b      	ldr	r3, [r3, #0]
}
 8005d08:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	200125c4 	.word	0x200125c4
 8005d14:	200125c0 	.word	0x200125c0

08005d18 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8005d18:	2025      	movs	r0, #37	; 0x25
 8005d1a:	4770      	bx	lr

08005d1c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8005d1c:	4800      	ldr	r0, [pc, #0]	; (8005d20 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8005d1e:	4770      	bx	lr
 8005d20:	200125cc 	.word	0x200125cc

08005d24 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 7:
        touchgfx_fonts[7] = &(getFont_SourceHanSansSC_Bold_40_2bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8005d24:	b510      	push	{r4, lr}
};
 8005d26:	4c0d      	ldr	r4, [pc, #52]	; (8005d5c <_GLOBAL__sub_I_touchgfx_fonts+0x38>)
    &(getFont_SourceHanSansSC_Bold_16_2bpp()),
 8005d28:	f7ff fd4a 	bl	80057c0 <_Z36getFont_SourceHanSansSC_Bold_16_2bppv>
};
 8005d2c:	6020      	str	r0, [r4, #0]
    &(getFont_SourceHanSansSC_Bold_18_2bpp()),
 8005d2e:	f7ff fd85 	bl	800583c <_Z36getFont_SourceHanSansSC_Bold_18_2bppv>
};
 8005d32:	6060      	str	r0, [r4, #4]
    &(getFont_SourceHanSansSC_Bold_20_2bpp()),
 8005d34:	f7ff fdc0 	bl	80058b8 <_Z36getFont_SourceHanSansSC_Bold_20_2bppv>
};
 8005d38:	60a0      	str	r0, [r4, #8]
    &(getFont_SourceHanSansSC_Bold_24_2bpp()),
 8005d3a:	f7ff fdfb 	bl	8005934 <_Z36getFont_SourceHanSansSC_Bold_24_2bppv>
};
 8005d3e:	60e0      	str	r0, [r4, #12]
    &(getFont_SourceHanSansSC_Bold_28_2bpp()),
 8005d40:	f7ff fe36 	bl	80059b0 <_Z36getFont_SourceHanSansSC_Bold_28_2bppv>
};
 8005d44:	6120      	str	r0, [r4, #16]
    &(getFont_SourceHanSansSC_Bold_32_2bpp()),
 8005d46:	f7ff fe71 	bl	8005a2c <_Z36getFont_SourceHanSansSC_Bold_32_2bppv>
};
 8005d4a:	6160      	str	r0, [r4, #20]
    &(getFont_SourceHanSansSC_Bold_36_2bpp()),
 8005d4c:	f7ff feac 	bl	8005aa8 <_Z36getFont_SourceHanSansSC_Bold_36_2bppv>
};
 8005d50:	61a0      	str	r0, [r4, #24]
    &(getFont_SourceHanSansSC_Bold_40_2bpp())
 8005d52:	f7ff fee5 	bl	8005b20 <_Z36getFont_SourceHanSansSC_Bold_40_2bppv>
};
 8005d56:	61e0      	str	r0, [r4, #28]
} // namespace TypedTextDatabase
 8005d58:	bd10      	pop	{r4, pc}
 8005d5a:	bf00      	nop
 8005d5c:	200125cc 	.word	0x200125cc

08005d60 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8005d60:	4770      	bx	lr

08005d62 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8005d62:	4770      	bx	lr

08005d64 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8005d64:	4770      	bx	lr

08005d66 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8005d66:	4770      	bx	lr

08005d68 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8005d68:	4770      	bx	lr

08005d6a <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 8005d6a:	b530      	push	{r4, r5, lr}
 8005d6c:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 8005d6e:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 8005d70:	4604      	mov	r4, r0
        rect.width = width;
 8005d72:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 8005d74:	466d      	mov	r5, sp
 8005d76:	4601      	mov	r1, r0
 8005d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d7c:	343c      	adds	r4, #60	; 0x3c
 8005d7e:	4628      	mov	r0, r5
 8005d80:	4798      	blx	r3
 8005d82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005d86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8005d8a:	b005      	add	sp, #20
 8005d8c:	bd30      	pop	{r4, r5, pc}

08005d8e <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8005d8e:	b530      	push	{r4, r5, lr}
 8005d90:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8005d92:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8005d94:	4604      	mov	r4, r0
        rect.height = height;
 8005d96:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 8005d98:	466d      	mov	r5, sp
 8005d9a:	4601      	mov	r1, r0
 8005d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005da0:	343c      	adds	r4, #60	; 0x3c
 8005da2:	4628      	mov	r0, r5
 8005da4:	4798      	blx	r3
 8005da6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005daa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8005dae:	b005      	add	sp, #20
 8005db0:	bd30      	pop	{r4, r5, pc}

08005db2 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8005db2:	2200      	movs	r2, #0
 8005db4:	8002      	strh	r2, [r0, #0]
 8005db6:	8042      	strh	r2, [r0, #2]
 8005db8:	8082      	strh	r2, [r0, #4]
 8005dba:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8005dbc:	4770      	bx	lr

08005dbe <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8005dbe:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
 8005dc2:	4770      	bx	lr

08005dc4 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 8005dc4:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8005dc6:	b570      	push	{r4, r5, r6, lr}
 8005dc8:	4604      	mov	r4, r0
        setX(x);
 8005dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8005dcc:	4615      	mov	r5, r2
        setX(x);
 8005dce:	4798      	blx	r3
        setBaselineY(baselineY);
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	4629      	mov	r1, r5
 8005dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    }
 8005dd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 8005ddc:	4718      	bx	r3

08005dde <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return 0;
    }
 8005dde:	2000      	movs	r0, #0
 8005de0:	4770      	bx	lr

08005de2 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8005de2:	2000      	movs	r0, #0
 8005de4:	4770      	bx	lr

08005de6 <_ZN19aboutScreenViewBaseD1Ev>:
}

aboutScreenViewBase::~aboutScreenViewBase()
{

}
 8005de6:	4770      	bx	lr

08005de8 <_ZN19aboutScreenViewBase11setupScreenEv>:

void aboutScreenViewBase::setupScreen()
{

}
 8005de8:	4770      	bx	lr

08005dea <_ZN8touchgfx8CallbackI19aboutScreenViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8005dea:	4770      	bx	lr

08005dec <_ZN8touchgfx8CallbackI19aboutScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005dec:	4770      	bx	lr

08005dee <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEED1Ev>:
 * 'uint8_t getAlpha()' method.
 *
 * @tparam T specifies the type to extend with the FadeAnimator behavior.
 */
template <class T>
class FadeAnimator : public T
 8005dee:	4770      	bx	lr

08005df0 <_ZN8touchgfx12FadeAnimatorINS_13AnimatedImageEED1Ev>:
 8005df0:	4770      	bx	lr

08005df2 <_ZN8touchgfx8CallbackI19aboutScreenViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 8005df2:	b470      	push	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 8005df4:	6845      	ldr	r5, [r0, #4]
    virtual void execute(T1 t1, T2 t2)
 8005df6:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1, t2);
 8005df8:	68c4      	ldr	r4, [r0, #12]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	1066      	asrs	r6, r4, #1
 8005dfe:	eb05 0064 	add.w	r0, r5, r4, asr #1
 8005e02:	07e4      	lsls	r4, r4, #31
 8005e04:	bf44      	itt	mi
 8005e06:	59ac      	ldrmi	r4, [r5, r6]
 8005e08:	58e3      	ldrmi	r3, [r4, r3]
    }
 8005e0a:	bc70      	pop	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 8005e0c:	4718      	bx	r3

08005e0e <_ZNK8touchgfx8CallbackI19aboutScreenViewBaseRKNS_6SliderEivE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8005e0e:	6843      	ldr	r3, [r0, #4]
 8005e10:	b12b      	cbz	r3, 8005e1e <_ZNK8touchgfx8CallbackI19aboutScreenViewBaseRKNS_6SliderEivE7isValidEv+0x10>
 8005e12:	6883      	ldr	r3, [r0, #8]
 8005e14:	b92b      	cbnz	r3, 8005e22 <_ZNK8touchgfx8CallbackI19aboutScreenViewBaseRKNS_6SliderEivE7isValidEv+0x14>
 8005e16:	68c0      	ldr	r0, [r0, #12]
 8005e18:	f000 0001 	and.w	r0, r0, #1
 8005e1c:	4770      	bx	lr
 8005e1e:	4618      	mov	r0, r3
 8005e20:	4770      	bx	lr
 8005e22:	2001      	movs	r0, #1
    }
 8005e24:	4770      	bx	lr

08005e26 <_ZN8touchgfx8CallbackI19aboutScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8005e26:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8005e28:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8005e2a:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8005e2c:	68c2      	ldr	r2, [r0, #12]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	1055      	asrs	r5, r2, #1
 8005e32:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8005e36:	07d2      	lsls	r2, r2, #31
 8005e38:	bf48      	it	mi
 8005e3a:	5962      	ldrmi	r2, [r4, r5]
    }
 8005e3c:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8005e3e:	bf48      	it	mi
 8005e40:	58d3      	ldrmi	r3, [r2, r3]
 8005e42:	4718      	bx	r3

08005e44 <_ZNK8touchgfx8CallbackI19aboutScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8005e44:	6843      	ldr	r3, [r0, #4]
 8005e46:	b12b      	cbz	r3, 8005e54 <_ZNK8touchgfx8CallbackI19aboutScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8005e48:	6883      	ldr	r3, [r0, #8]
 8005e4a:	b92b      	cbnz	r3, 8005e58 <_ZNK8touchgfx8CallbackI19aboutScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8005e4c:	68c0      	ldr	r0, [r0, #12]
 8005e4e:	f000 0001 	and.w	r0, r0, #1
 8005e52:	4770      	bx	lr
 8005e54:	4618      	mov	r0, r3
 8005e56:	4770      	bx	lr
 8005e58:	2001      	movs	r0, #1
    }
 8005e5a:	4770      	bx	lr

08005e5c <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE21setFadeAnimationDelayEt>:
     *
     * @see getFadeAnimationDelay
     */
    virtual void setFadeAnimationDelay(uint16_t delay)
    {
        fadeAnimationDelay = delay;
 8005e5c:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    }
 8005e60:	4770      	bx	lr

08005e62 <_ZNK8touchgfx12FadeAnimatorINS_8TextAreaEE21getFadeAnimationDelayEv>:
     * @see setFadeAnimationDelay
     */
    virtual uint16_t getFadeAnimationDelay() const
    {
        return fadeAnimationDelay;
    }
 8005e62:	f8b0 004c 	ldrh.w	r0, [r0, #76]	; 0x4c
 8005e66:	4770      	bx	lr

08005e68 <_ZN8touchgfx12FadeAnimatorINS_13AnimatedImageEE21setFadeAnimationDelayEt>:
        fadeAnimationDelay = delay;
 8005e68:	8781      	strh	r1, [r0, #60]	; 0x3c
    }
 8005e6a:	4770      	bx	lr

08005e6c <_ZNK8touchgfx12FadeAnimatorINS_13AnimatedImageEE21getFadeAnimationDelayEv>:
    }
 8005e6c:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 8005e6e:	4770      	bx	lr

08005e70 <_ZN8touchgfx12FadeAnimatorINS_13AnimatedImageEED0Ev>:
class FadeAnimator : public T
 8005e70:	b510      	push	{r4, lr}
 8005e72:	4604      	mov	r4, r0
 8005e74:	214c      	movs	r1, #76	; 0x4c
 8005e76:	f024 fda4 	bl	802a9c2 <_ZdlPvj>
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	bd10      	pop	{r4, pc}

08005e7e <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEED0Ev>:
 8005e7e:	b510      	push	{r4, lr}
 8005e80:	4604      	mov	r4, r0
 8005e82:	215c      	movs	r1, #92	; 0x5c
 8005e84:	f024 fd9d 	bl	802a9c2 <_ZdlPvj>
 8005e88:	4620      	mov	r0, r4
 8005e8a:	bd10      	pop	{r4, pc}

08005e8c <_ZN8touchgfx8CallbackI19aboutScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005e8c:	b510      	push	{r4, lr}
 8005e8e:	4604      	mov	r4, r0
 8005e90:	2110      	movs	r1, #16
 8005e92:	f024 fd96 	bl	802a9c2 <_ZdlPvj>
 8005e96:	4620      	mov	r0, r4
 8005e98:	bd10      	pop	{r4, pc}

08005e9a <_ZN8touchgfx8CallbackI19aboutScreenViewBaseRKNS_6SliderEivED0Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8005e9a:	b510      	push	{r4, lr}
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	2110      	movs	r1, #16
 8005ea0:	f024 fd8f 	bl	802a9c2 <_ZdlPvj>
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	bd10      	pop	{r4, pc}

08005ea8 <_ZN19aboutScreenViewBaseD0Ev>:
aboutScreenViewBase::~aboutScreenViewBase()
 8005ea8:	b510      	push	{r4, lr}
 8005eaa:	4604      	mov	r4, r0
}
 8005eac:	f240 412c 	movw	r1, #1068	; 0x42c
 8005eb0:	f024 fd87 	bl	802a9c2 <_ZdlPvj>
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	bd10      	pop	{r4, pc}

08005eb8 <_ZNK8touchgfx5Image17invalidateContentEv>:
        return alpha;
    }

    virtual Rect getSolidRect() const;

    virtual void invalidateContent() const
 8005eb8:	b508      	push	{r3, lr}
    {
        if (alpha > 0)
 8005eba:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8005ebe:	b10b      	cbz	r3, 8005ec4 <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
        {
            Widget::invalidateContent();
 8005ec0:	f7fc fbb9 	bl	8002636 <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 8005ec4:	bd08      	pop	{r3, pc}
	...

08005ec8 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8005ec8:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 8005eca:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8005ecc:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    virtual void setBaselineY(int16_t baselineY)
 8005ece:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005ed0:	4b11      	ldr	r3, [pc, #68]	; (8005f18 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8005ed2:	b28d      	uxth	r5, r1
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	b92b      	cbnz	r3, 8005ee4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 8005ed8:	4b10      	ldr	r3, [pc, #64]	; (8005f1c <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8005eda:	216c      	movs	r1, #108	; 0x6c
 8005edc:	4a10      	ldr	r2, [pc, #64]	; (8005f20 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8005ede:	4811      	ldr	r0, [pc, #68]	; (8005f24 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8005ee0:	f024 ff4c 	bl	802ad7c <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8005ee4:	4910      	ldr	r1, [pc, #64]	; (8005f28 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8005ee6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8005ee8:	8809      	ldrh	r1, [r1, #0]
 8005eea:	4291      	cmp	r1, r2
 8005eec:	d803      	bhi.n	8005ef6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8005eee:	4b0f      	ldr	r3, [pc, #60]	; (8005f2c <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8005ef0:	216d      	movs	r1, #109	; 0x6d
 8005ef2:	4a0b      	ldr	r2, [pc, #44]	; (8005f20 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8005ef4:	e7f3      	b.n	8005ede <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 8005ef6:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8005efa:	4b0d      	ldr	r3, [pc, #52]	; (8005f30 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005f02:	6803      	ldr	r3, [r0, #0]
 8005f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f06:	4798      	blx	r3
 8005f08:	1a28      	subs	r0, r5, r0
 8005f0a:	4633      	mov	r3, r6
 8005f0c:	b201      	sxth	r1, r0
 8005f0e:	4620      	mov	r0, r4
    }
 8005f10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8005f14:	4718      	bx	r3
 8005f16:	bf00      	nop
 8005f18:	20027d00 	.word	0x20027d00
 8005f1c:	0802efde 	.word	0x0802efde
 8005f20:	0802f020 	.word	0x0802f020
 8005f24:	0802f05b 	.word	0x0802f05b
 8005f28:	20027d04 	.word	0x20027d04
 8005f2c:	0802f0a2 	.word	0x0802f0a2
 8005f30:	20027d08 	.word	0x20027d08

08005f34 <_ZN19aboutScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void aboutScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &returnBut)
 8005f34:	f500 7076 	add.w	r0, r0, #984	; 0x3d8
 8005f38:	4288      	cmp	r0, r1
{
 8005f3a:	b508      	push	{r3, lr}
    if (&src == &returnBut)
 8005f3c:	d105      	bne.n	8005f4a <_ZN19aboutScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual ~aboutScreenViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8005f3e:	f011 ffbb 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
        //returnMain
        //When returnBut clicked change screen to mainScreen
        //Go to mainScreen with screen transition towards West
        application().gotomainScreenScreenCoverTransitionWest();
    }
}
 8005f42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotomainScreenScreenCoverTransitionWest();
 8005f46:	f7fe bf87 	b.w	8004e58 <_ZN23FrontendApplicationBase39gotomainScreenScreenCoverTransitionWestEv>
}
 8005f4a:	bd08      	pop	{r3, pc}

08005f4c <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8005f4c:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8005f4e:	b570      	push	{r4, r5, r6, lr}
 8005f50:	4604      	mov	r4, r0
        setX(x);
 8005f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 8005f54:	4615      	mov	r5, r2
        setX(x);
 8005f56:	4798      	blx	r3
        setY(y);
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	4629      	mov	r1, r5
 8005f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 8005f60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8005f64:	4718      	bx	r3
	...

08005f68 <_ZN8touchgfx6WidgetC1Ev>:
 8005f68:	2200      	movs	r2, #0
 8005f6a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8005f6e:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8005f72:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8005f76:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 8005f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f7e:	8482      	strh	r2, [r0, #36]	; 0x24
class Widget : public Drawable
 8005f80:	4a01      	ldr	r2, [pc, #4]	; (8005f88 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8005f82:	6002      	str	r2, [r0, #0]
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	0802f0e8 	.word	0x0802f0e8

08005f8c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8005f8c:	b510      	push	{r4, lr}
 8005f8e:	4604      	mov	r4, r0
        : Widget(), alpha(255), color(0)
 8005f90:	2226      	movs	r2, #38	; 0x26
 8005f92:	2100      	movs	r1, #0
 8005f94:	f025 f97a 	bl	802b28c <memset>
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f7ff ffe5 	bl	8005f68 <_ZN8touchgfx6WidgetC1Ev>
 8005f9e:	4b04      	ldr	r3, [pc, #16]	; (8005fb0 <_ZN8touchgfx3BoxC1Ev+0x24>)
    {
    }
 8005fa0:	4620      	mov	r0, r4
        : Widget(), alpha(255), color(0)
 8005fa2:	6023      	str	r3, [r4, #0]
 8005fa4:	23ff      	movs	r3, #255	; 0xff
 8005fa6:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        : color(col)
 8005faa:	2300      	movs	r3, #0
 8005fac:	62a3      	str	r3, [r4, #40]	; 0x28
    }
 8005fae:	bd10      	pop	{r4, pc}
 8005fb0:	08030a7c 	.word	0x08030a7c

08005fb4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
    Image(const Bitmap& bmp = Bitmap())
 8005fb4:	b538      	push	{r3, r4, r5, lr}
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8005fba:	2226      	movs	r2, #38	; 0x26
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	f025 f965 	bl	802b28c <memset>
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f7ff ffd0 	bl	8005f68 <_ZN8touchgfx6WidgetC1Ev>
 8005fc8:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
        Image::setBitmap(bmp);
 8005fca:	4620      	mov	r0, r4
 8005fcc:	4629      	mov	r1, r5
        : Widget(), bitmap(bmp), alpha(255)
 8005fce:	6023      	str	r3, [r4, #0]
 8005fd0:	882b      	ldrh	r3, [r5, #0]
 8005fd2:	84e3      	strh	r3, [r4, #38]	; 0x26
 8005fd4:	23ff      	movs	r3, #255	; 0xff
 8005fd6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        Image::setBitmap(bmp);
 8005fda:	f00f fac6 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8005fde:	4620      	mov	r0, r4
 8005fe0:	bd38      	pop	{r3, r4, r5, pc}
 8005fe2:	bf00      	nop
 8005fe4:	08030c40 	.word	0x08030c40

08005fe8 <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 8005fe8:	b510      	push	{r4, lr}
 8005fea:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8005fec:	2226      	movs	r2, #38	; 0x26
 8005fee:	2100      	movs	r1, #0
 8005ff0:	f025 f94c 	bl	802b28c <memset>
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f7ff ffb7 	bl	8005f68 <_ZN8touchgfx6WidgetC1Ev>
 8005ffa:	4b0a      	ldr	r3, [pc, #40]	; (8006024 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8005ffc:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    }
 8006000:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8006002:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8006004:	4b08      	ldr	r3, [pc, #32]	; (8006028 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 8006006:	62a3      	str	r3, [r4, #40]	; 0x28
 8006008:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800600c:	85a3      	strh	r3, [r4, #44]	; 0x2c
 800600e:	2300      	movs	r3, #0
 8006010:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8006014:	f04f 32ff 	mov.w	r2, #4294967295
 8006018:	8723      	strh	r3, [r4, #56]	; 0x38
 800601a:	63e3      	str	r3, [r4, #60]	; 0x3c
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 800601c:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }
 8006020:	bd10      	pop	{r4, pc}
 8006022:	bf00      	nop
 8006024:	080309ec 	.word	0x080309ec
 8006028:	0802e2a4 	.word	0x0802e2a4

0800602c <_ZN19aboutScreenViewBaseC1Ev>:
aboutScreenViewBase::aboutScreenViewBase() :
 800602c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006030:	4604      	mov	r4, r0
        : presenter(0)
 8006032:	2500      	movs	r5, #0
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8006034:	f64f 76ff 	movw	r6, #65535	; 0xffff
    sliderValueChangedCallback(this, &aboutScreenViewBase::sliderValueChangedCallbackHandler)
 8006038:	46a1      	mov	r9, r4
 800603a:	f104 08f0 	add.w	r8, r4, #240	; 0xf0
 800603e:	f504 779e 	add.w	r7, r4, #316	; 0x13c
 8006042:	f504 7a64 	add.w	sl, r4, #912	; 0x390
 8006046:	f504 7b76 	add.w	fp, r4, #984	; 0x3d8
aboutScreenViewBase::aboutScreenViewBase() :
 800604a:	ed2d 8b08 	vpush	{d8-d11}
 800604e:	b08b      	sub	sp, #44	; 0x2c
 8006050:	f013 fbb4 	bl	80197bc <_ZN8touchgfx6ScreenC1Ev>
    sliderValueChangedCallback(this, &aboutScreenViewBase::sliderValueChangedCallbackHandler)
 8006054:	4bef      	ldr	r3, [pc, #956]	; (8006414 <_ZN19aboutScreenViewBaseC1Ev+0x3e8>)
 8006056:	63e5      	str	r5, [r4, #60]	; 0x3c
 8006058:	f849 3b40 	str.w	r3, [r9], #64
 800605c:	4648      	mov	r0, r9
 800605e:	f7ff ff95 	bl	8005f8c <_ZN8touchgfx3BoxC1Ev>
 8006062:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8006066:	4618      	mov	r0, r3
 8006068:	ee0b 3a10 	vmov	s22, r3
 800606c:	f7ff ff8e 	bl	8005f8c <_ZN8touchgfx3BoxC1Ev>
 8006070:	f104 0398 	add.w	r3, r4, #152	; 0x98
 8006074:	a908      	add	r1, sp, #32
 8006076:	f8ad 6020 	strh.w	r6, [sp, #32]
 800607a:	4618      	mov	r0, r3
 800607c:	ee0a 3a10 	vmov	s20, r3
 8006080:	f7ff ff98 	bl	8005fb4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8006084:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
 8006088:	a908      	add	r1, sp, #32
 800608a:	f8ad 6020 	strh.w	r6, [sp, #32]
 800608e:	4618      	mov	r0, r3
 8006090:	ee0a 3a90 	vmov	s21, r3
 8006094:	f7ff ff8e 	bl	8005fb4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
          endId(BITMAP_INVALID),
          updateTicksInterval(updateInterval),
          ticksSinceUpdate(0),
          reverse(false),
          loopAnimation(false),
          running(false)
 8006098:	a908      	add	r1, sp, #32
 800609a:	4640      	mov	r0, r8
 800609c:	f8ad 6020 	strh.w	r6, [sp, #32]
 80060a0:	f7ff ff88 	bl	8005fb4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
          fadeAnimationEndedCallback(0)
 80060a4:	4bdc      	ldr	r3, [pc, #880]	; (8006418 <_ZN19aboutScreenViewBaseC1Ev+0x3ec>)
          updateTicksInterval(updateInterval),
 80060a6:	f04f 32ff 	mov.w	r2, #4294967295
 80060aa:	4638      	mov	r0, r7
 80060ac:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 80060b0:	2301      	movs	r3, #1
        : animationDoneAction(0),
 80060b2:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
          running(false)
 80060b6:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
          fadeAnimationDelay(0),
 80060ba:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
          fadeAnimationEndedCallback(0)
 80060be:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
          updateTicksInterval(updateInterval),
 80060c2:	e9c4 2348 	strd	r2, r3, [r4, #288]	; 0x120
 80060c6:	f00c f97d 	bl	80123c4 <_ZN8touchgfx6SliderC1Ev>
 80060ca:	f504 730c 	add.w	r3, r4, #560	; 0x230
 80060ce:	4618      	mov	r0, r3
 80060d0:	ee08 3a10 	vmov	s16, r3
 80060d4:	f7ff ff88 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 80060d8:	f504 731e 	add.w	r3, r4, #632	; 0x278
 80060dc:	4618      	mov	r0, r3
 80060de:	ee08 3a90 	vmov	s17, r3
 80060e2:	f7ff ff81 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 80060e6:	f504 7330 	add.w	r3, r4, #704	; 0x2c0
 80060ea:	4618      	mov	r0, r3
 80060ec:	ee09 3a10 	vmov	s18, r3
 80060f0:	f7ff ff7a 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 80060f4:	4bc9      	ldr	r3, [pc, #804]	; (800641c <_ZN19aboutScreenViewBaseC1Ev+0x3f0>)
          fadeAnimationRunning(false),
 80060f6:	f884 5308 	strb.w	r5, [r4, #776]	; 0x308
          fadeAnimationEndedCallback(0)
 80060fa:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
 80060fe:	f504 7347 	add.w	r3, r4, #796	; 0x31c
          fadeAnimationCounter(0),
 8006102:	f8a4 530a 	strh.w	r5, [r4, #778]	; 0x30a
 8006106:	ee0b 3a90 	vmov	s23, r3
 800610a:	f44f 7380 	mov.w	r3, #256	; 0x100
          fadeAnimationDelay(0),
 800610e:	f8a4 530c 	strh.w	r5, [r4, #780]	; 0x30c
 8006112:	f8a4 3340 	strh.w	r3, [r4, #832]	; 0x340
class Container : public Drawable
{
public:
    Container()
        : Drawable(),
          firstChild(0)
 8006116:	4bc2      	ldr	r3, [pc, #776]	; (8006420 <_ZN19aboutScreenViewBaseC1Ev+0x3f4>)
          fadeAnimationEndedCallback(0)
 8006118:	f8c4 5318 	str.w	r5, [r4, #792]	; 0x318
 800611c:	f8c4 331c 	str.w	r3, [r4, #796]	; 0x31c
 8006120:	f504 7352 	add.w	r3, r4, #840	; 0x348
 8006124:	f8c4 5344 	str.w	r5, [r4, #836]	; 0x344
 8006128:	4618      	mov	r0, r3
 800612a:	ee09 3a90 	vmov	s19, r3
        : x(0), y(0), width(0), height(0)
 800612e:	e9c4 55c8 	strd	r5, r5, [r4, #800]	; 0x320
 8006132:	e9c4 55ca 	strd	r5, r5, [r4, #808]	; 0x328
          nextSibling(0),
 8006136:	e9c4 55cc 	strd	r5, r5, [r4, #816]	; 0x330
          cachedAbsX(0),
 800613a:	e9c4 55ce 	strd	r5, r5, [r4, #824]	; 0x338
 800613e:	f7ff ff53 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 8006142:	4650      	mov	r0, sl
 8006144:	f7ff ff50 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8006148:	4629      	mov	r1, r5
 800614a:	2226      	movs	r2, #38	; 0x26
 800614c:	4658      	mov	r0, fp
 800614e:	f025 f89d 	bl	802b28c <memset>
 8006152:	4658      	mov	r0, fp
 8006154:	f7ff ff08 	bl	8005f68 <_ZN8touchgfx6WidgetC1Ev>
        touchable = touch;
 8006158:	f04f 0301 	mov.w	r3, #1
    __background.setPosition(0, 0, 800, 480);
 800615c:	462a      	mov	r2, r5
 800615e:	4629      	mov	r1, r5
 8006160:	f884 33fc 	strb.w	r3, [r4, #1020]	; 0x3fc
 8006164:	4648      	mov	r0, r9
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 8006166:	4baf      	ldr	r3, [pc, #700]	; (8006424 <_ZN19aboutScreenViewBaseC1Ev+0x3f8>)
 8006168:	f8a4 6408 	strh.w	r6, [r4, #1032]	; 0x408
 800616c:	f8c4 33d8 	str.w	r3, [r4, #984]	; 0x3d8
 8006170:	f04f 33ff 	mov.w	r3, #4294967295
 8006174:	f884 640a 	strb.w	r6, [r4, #1034]	; 0x40a
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8006178:	1d26      	adds	r6, r4, #4
 800617a:	f8a4 3406 	strh.w	r3, [r4, #1030]	; 0x406
        : pobject(pObject), pmemfun(pmemfun_1)
 800617e:	4baa      	ldr	r3, [pc, #680]	; (8006428 <_ZN19aboutScreenViewBaseC1Ev+0x3fc>)
 8006180:	f8c4 5400 	str.w	r5, [r4, #1024]	; 0x400
 8006184:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
 8006188:	4ba8      	ldr	r3, [pc, #672]	; (800642c <_ZN19aboutScreenViewBaseC1Ev+0x400>)
 800618a:	f884 5404 	strb.w	r5, [r4, #1028]	; 0x404
 800618e:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
        : pobject(pObject), pmemfun(pmemfun_2)
 8006192:	4ba7      	ldr	r3, [pc, #668]	; (8006430 <_ZN19aboutScreenViewBaseC1Ev+0x404>)
        : pobject(pObject), pmemfun(pmemfun_1)
 8006194:	f8c4 4410 	str.w	r4, [r4, #1040]	; 0x410
        : pobject(pObject), pmemfun(pmemfun_2)
 8006198:	f8c4 341c 	str.w	r3, [r4, #1052]	; 0x41c
 800619c:	4ba5      	ldr	r3, [pc, #660]	; (8006434 <_ZN19aboutScreenViewBaseC1Ev+0x408>)
        : pobject(pObject), pmemfun(pmemfun_1)
 800619e:	f8c4 5418 	str.w	r5, [r4, #1048]	; 0x418
        : pobject(pObject), pmemfun(pmemfun_2)
 80061a2:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
 80061a6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80061aa:	f8c4 4420 	str.w	r4, [r4, #1056]	; 0x420
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80061b4:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
 80061b8:	f7fe fcf6 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 80061bc:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80061c0:	4649      	mov	r1, r9
 80061c2:	4630      	mov	r0, r6
 80061c4:	66a3      	str	r3, [r4, #104]	; 0x68
 80061c6:	f00b fc69 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    backGround.setPosition(0, 0, 800, 480);
 80061ca:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80061ce:	462a      	mov	r2, r5
 80061d0:	4629      	mov	r1, r5
 80061d2:	ee1b 0a10 	vmov	r0, s22
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	f44f 7348 	mov.w	r3, #800	; 0x320
        color = newColor;
 80061dc:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8006444 <_ZN19aboutScreenViewBaseC1Ev+0x418>
 80061e0:	f7fe fce2 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80061e4:	4b94      	ldr	r3, [pc, #592]	; (8006438 <_ZN19aboutScreenViewBaseC1Ev+0x40c>)
 80061e6:	ee1b 1a10 	vmov	r1, s22
 80061ea:	4630      	mov	r0, r6
 80061ec:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 80061f0:	f00b fc54 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    backPicture.setXY(0, 0);
 80061f4:	462a      	mov	r2, r5
 80061f6:	4629      	mov	r1, r5
 80061f8:	ee1a 0a10 	vmov	r0, s20
 80061fc:	f7ff fea6 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8006200:	2304      	movs	r3, #4
    backPicture.setBitmap(touchgfx::Bitmap(BITMAP_ABOUT_ID));
 8006202:	a908      	add	r1, sp, #32
 8006204:	ee1a 0a10 	vmov	r0, s20
 8006208:	f8ad 3020 	strh.w	r3, [sp, #32]
 800620c:	f00f f9ad 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006210:	ee1a 1a10 	vmov	r1, s20
 8006214:	4630      	mov	r0, r6
 8006216:	f00b fc41 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    tch_LOGO.setXY(316, 446);
 800621a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800621e:	ee1a 0a90 	vmov	r0, s21
 8006222:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8006226:	f7ff fe91 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 800622a:	2339      	movs	r3, #57	; 0x39
    tch_LOGO.setBitmap(touchgfx::Bitmap(BITMAP_TCHGFX_LOGO_ID));
 800622c:	a908      	add	r1, sp, #32
 800622e:	ee1a 0a90 	vmov	r0, s21
 8006232:	f8ad 3020 	strh.w	r3, [sp, #32]
 8006236:	f00f f998 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800623a:	ee1a 1a90 	vmov	r1, s21
 800623e:	4630      	mov	r0, r6
 8006240:	f00b fc2c 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    arrow.setXY(104, 139);
 8006244:	4640      	mov	r0, r8
 8006246:	228b      	movs	r2, #139	; 0x8b
 8006248:	2168      	movs	r1, #104	; 0x68
 800624a:	f7ff fe7f 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
    arrow.setBitmaps(BITMAP_ARROW1_ID, BITMAP_ARROW3_ID);
 800624e:	220a      	movs	r2, #10
 8006250:	4640      	mov	r0, r8
 8006252:	2108      	movs	r1, #8
 8006254:	f00e f8f1 	bl	801443a <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>
    arrow.setUpdateTicksInterval(24);
 8006258:	4640      	mov	r0, r8
 800625a:	2118      	movs	r1, #24
 800625c:	f00e f900 	bl	8014460 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>
    arrow.startAnimation(false, true, true);
 8006260:	2301      	movs	r3, #1
 8006262:	4629      	mov	r1, r5
 8006264:	4640      	mov	r0, r8
 8006266:	461a      	mov	r2, r3
 8006268:	f00e f849 	bl	80142fe <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>
 800626c:	4641      	mov	r1, r8
 800626e:	4630      	mov	r0, r6
 8006270:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8006448 <_ZN19aboutScreenViewBaseC1Ev+0x41c>
 8006274:	f00b fc12 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    sliderDrone.setXY(22, 119);
 8006278:	4638      	mov	r0, r7
 800627a:	2277      	movs	r2, #119	; 0x77
 800627c:	2116      	movs	r1, #22
 800627e:	f7ff fe65 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8006282:	2336      	movs	r3, #54	; 0x36
    sliderDrone.setBitmaps(touchgfx::Bitmap(BITMAP_SLIDERBAR_ID), touchgfx::Bitmap(BITMAP_SLIDERBAR_ID), touchgfx::Bitmap(BITMAP_FLY_ID));
 8006284:	aa07      	add	r2, sp, #28
 8006286:	a906      	add	r1, sp, #24
 8006288:	f8ad 3018 	strh.w	r3, [sp, #24]
 800628c:	4638      	mov	r0, r7
 800628e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006292:	2327      	movs	r3, #39	; 0x27
 8006294:	f8ad 3020 	strh.w	r3, [sp, #32]
 8006298:	ab08      	add	r3, sp, #32
 800629a:	f00c f8ed 	bl	8012478 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    sliderDrone.setupVerticalSlider(16, 12, 0, 0, 140);
 800629e:	238c      	movs	r3, #140	; 0x8c
 80062a0:	4638      	mov	r0, r7
 80062a2:	220c      	movs	r2, #12
 80062a4:	2110      	movs	r1, #16
 80062a6:	e9cd 5300 	strd	r5, r3, [sp]
 80062aa:	462b      	mov	r3, r5
 80062ac:	f00c f84c 	bl	8012348 <_ZN8touchgfx6Slider19setupVerticalSliderEsssss>
    sliderDrone.setValueRange(0, 100);
 80062b0:	2264      	movs	r2, #100	; 0x64
 80062b2:	4629      	mov	r1, r5
 80062b4:	4638      	mov	r0, r7
 80062b6:	f00b febe 	bl	8012036 <_ZN8touchgfx6Slider13setValueRangeEss>
    sliderDrone.setValue(0);
 80062ba:	4629      	mov	r1, r5
 80062bc:	4638      	mov	r0, r7
 80062be:	f00b fe82 	bl	8011fc6 <_ZN8touchgfx6Slider8setValueEs>
    sliderDrone.setNewValueCallback(sliderValueChangedCallback);
 80062c2:	f204 431c 	addw	r3, r4, #1052	; 0x41c
 80062c6:	4639      	mov	r1, r7
 80062c8:	4630      	mov	r0, r6
        boundingArea = calculateBoundingArea();
 80062ca:	af02      	add	r7, sp, #8
     *
     * @see GenericCallback
     */
    void setNewValueCallback(GenericCallback<const Slider&, int>& callback)
    {
        newValueCallback = &callback;
 80062cc:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
 80062d0:	f00b fbe4 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    embedded.setXY(610, 431);
 80062d4:	f240 12af 	movw	r2, #431	; 0x1af
 80062d8:	ee18 0a10 	vmov	r0, s16
 80062dc:	f240 2162 	movw	r1, #610	; 0x262
 80062e0:	f7ff fe34 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 80062e4:	ee18 1a10 	vmov	r1, s16
 80062e8:	4638      	mov	r0, r7
        color = newColor;
 80062ea:	f8c4 9260 	str.w	r9, [r4, #608]	; 0x260
        linespace = space;
 80062ee:	f8a4 5264 	strh.w	r5, [r4, #612]	; 0x264
        boundingArea = calculateBoundingArea();
 80062f2:	f00e fba9 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80062f6:	f504 731b 	add.w	r3, r4, #620	; 0x26c
 80062fa:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80062fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006302:	2318      	movs	r3, #24
    embedded.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UV2T));
 8006304:	a908      	add	r1, sp, #32
 8006306:	ee18 0a10 	vmov	r0, s16
 800630a:	f8cd 8020 	str.w	r8, [sp, #32]
 800630e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8006312:	f00e fe33 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006316:	ee18 1a10 	vmov	r1, s16
 800631a:	4630      	mov	r0, r6
 800631c:	f00b fbbe 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    design.setXY(356, 423);
 8006320:	f240 12a7 	movw	r2, #423	; 0x1a7
 8006324:	ee18 0a90 	vmov	r0, s17
 8006328:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800632c:	f7ff fe0e 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8006330:	ee18 1a90 	vmov	r1, s17
 8006334:	4638      	mov	r0, r7
        color = newColor;
 8006336:	f8c4 92a8 	str.w	r9, [r4, #680]	; 0x2a8
        linespace = space;
 800633a:	f8a4 52ac 	strh.w	r5, [r4, #684]	; 0x2ac
        boundingArea = calculateBoundingArea();
 800633e:	f00e fb83 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8006342:	f504 732d 	add.w	r3, r4, #692	; 0x2b4
 8006346:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800634a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800634e:	2319      	movs	r3, #25
    design.setTypedText(touchgfx::TypedText(T___SINGLEUSE_N86C));
 8006350:	a908      	add	r1, sp, #32
 8006352:	ee18 0a90 	vmov	r0, s17
 8006356:	f8cd 8020 	str.w	r8, [sp, #32]
 800635a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800635e:	f00e fe0d 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006362:	ee18 1a90 	vmov	r1, s17
 8006366:	4630      	mov	r0, r6
 8006368:	f00b fb98 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    noteText.setXY(77, 384);
 800636c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8006370:	ee19 0a10 	vmov	r0, s18
 8006374:	214d      	movs	r1, #77	; 0x4d
 8006376:	f7ff fde9 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 800637a:	4b30      	ldr	r3, [pc, #192]	; (800643c <_ZN19aboutScreenViewBaseC1Ev+0x410>)
        boundingArea = calculateBoundingArea();
 800637c:	ee19 1a10 	vmov	r1, s18
 8006380:	4638      	mov	r0, r7
        color = newColor;
 8006382:	f8c4 32f0 	str.w	r3, [r4, #752]	; 0x2f0
        linespace = space;
 8006386:	f8a4 52f4 	strh.w	r5, [r4, #756]	; 0x2f4
        boundingArea = calculateBoundingArea();
 800638a:	f00e fb5d 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800638e:	f504 733f 	add.w	r3, r4, #764	; 0x2fc
 8006392:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8006396:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800639a:	2315      	movs	r3, #21
    noteText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EIL5));
 800639c:	a908      	add	r1, sp, #32
 800639e:	ee19 0a10 	vmov	r0, s18
 80063a2:	f8cd 8020 	str.w	r8, [sp, #32]
 80063a6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80063aa:	f00e fde7 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80063ae:	ee19 1a10 	vmov	r1, s18
 80063b2:	4630      	mov	r0, r6
 80063b4:	f00b fb72 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textContainer.setPosition(281, 132, 482, 263);
 80063b8:	f240 1307 	movw	r3, #263	; 0x107
 80063bc:	ee1b 0a90 	vmov	r0, s23
 80063c0:	2284      	movs	r2, #132	; 0x84
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	f240 1119 	movw	r1, #281	; 0x119
 80063c8:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 80063cc:	f7fe fbec 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
    introduceText.setXY(14, 8);
 80063d0:	2208      	movs	r2, #8
 80063d2:	ee19 0a90 	vmov	r0, s19
 80063d6:	210e      	movs	r1, #14
 80063d8:	f7ff fdb8 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80063dc:	4b18      	ldr	r3, [pc, #96]	; (8006440 <_ZN19aboutScreenViewBaseC1Ev+0x414>)
        boundingArea = calculateBoundingArea();
 80063de:	ee19 1a90 	vmov	r1, s19
 80063e2:	4638      	mov	r0, r7
        color = newColor;
 80063e4:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        linespace = space;
 80063e8:	f8a4 537c 	strh.w	r5, [r4, #892]	; 0x37c
        boundingArea = calculateBoundingArea();
 80063ec:	f00e fb2c 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80063f0:	f504 7361 	add.w	r3, r4, #900	; 0x384
 80063f4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80063f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80063fc:	2316      	movs	r3, #22
    introduceText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_P0EB));
 80063fe:	a908      	add	r1, sp, #32
 8006400:	ee19 0a90 	vmov	r0, s19
 8006404:	f8cd 8020 	str.w	r8, [sp, #32]
 8006408:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800640c:	f00e fdb6 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006410:	e01c      	b.n	800644c <_ZN19aboutScreenViewBaseC1Ev+0x420>
 8006412:	bf00      	nop
 8006414:	0802f29c 	.word	0x0802f29c
 8006418:	0802f150 	.word	0x0802f150
 800641c:	0802f1d4 	.word	0x0802f1d4
 8006420:	080303d8 	.word	0x080303d8
 8006424:	08030bcc 	.word	0x08030bcc
 8006428:	0802f26c 	.word	0x0802f26c
 800642c:	08005f35 	.word	0x08005f35
 8006430:	0802f284 	.word	0x0802f284
 8006434:	08006635 	.word	0x08006635
 8006438:	ffe3eaf1 	.word	0xffe3eaf1
 800643c:	ffa8a8a8 	.word	0xffa8a8a8
 8006440:	ff3d4242 	.word	0xff3d4242
 8006444:	ff858585 	.word	0xff858585
 8006448:	0802e2a4 	.word	0x0802e2a4
    textContainer.add(introduceText);
 800644c:	ee19 1a90 	vmov	r1, s19
 8006450:	ee1b 0a90 	vmov	r0, s23
 8006454:	f00b fb22 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8006458:	ee1b 1a90 	vmov	r1, s23
 800645c:	4630      	mov	r0, r6
 800645e:	f00b fb1d 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    About.setXY(40, 51);
 8006462:	2233      	movs	r2, #51	; 0x33
 8006464:	4650      	mov	r0, sl
 8006466:	2128      	movs	r1, #40	; 0x28
 8006468:	f7ff fd70 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 800646c:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8006470:	4651      	mov	r1, sl
 8006472:	4638      	mov	r0, r7
        color = newColor;
 8006474:	f8c4 33c0 	str.w	r3, [r4, #960]	; 0x3c0
        linespace = space;
 8006478:	f8a4 53c4 	strh.w	r5, [r4, #964]	; 0x3c4
        boundingArea = calculateBoundingArea();
 800647c:	f00e fae4 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8006480:	f504 7373 	add.w	r3, r4, #972	; 0x3cc
 8006484:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8006488:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800648c:	2317      	movs	r3, #23
    About.setTypedText(touchgfx::TypedText(T___SINGLEUSE_U4E7));
 800648e:	a908      	add	r1, sp, #32
 8006490:	4650      	mov	r0, sl
 8006492:	f8cd 8020 	str.w	r8, [sp, #32]
 8006496:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800649a:	f00e fd6f 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800649e:	4651      	mov	r1, sl
 80064a0:	4630      	mov	r0, r6
 80064a2:	f00b fafb 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    returnBut.setXY(0, 400);
 80064a6:	4629      	mov	r1, r5
 80064a8:	4658      	mov	r0, fp
 80064aa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80064ae:	f7ff fd4d 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 80064b2:	2333      	movs	r3, #51	; 0x33
    returnBut.setBitmaps(touchgfx::Bitmap(BITMAP_RETURN1_ID), touchgfx::Bitmap(BITMAP_RETURN2_ID));
 80064b4:	aa08      	add	r2, sp, #32
 80064b6:	a907      	add	r1, sp, #28
 80064b8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80064bc:	2334      	movs	r3, #52	; 0x34
 80064be:	4658      	mov	r0, fp
 80064c0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80064c4:	f00e ff33 	bl	801532e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    returnBut.setAction(buttonCallback);
 80064c8:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80064cc:	4630      	mov	r0, r6
 80064ce:	4659      	mov	r1, fp
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 80064d0:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 80064d4:	f00b fae2 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80064d8:	4620      	mov	r0, r4
 80064da:	b00b      	add	sp, #44	; 0x2c
 80064dc:	ecbd 8b08 	vpop	{d8-d11}
 80064e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080064e4 <_ZN8touchgfx12FadeAnimatorINS_13AnimatedImageEE21nextFadeAnimationStepEv>:

protected:
    /** Execute next step in fade animation and stop the timer if necessary. */
    void nextFadeAnimationStep()
    {
        if (fadeAnimationRunning)
 80064e4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
    void nextFadeAnimationStep()
 80064e8:	b570      	push	{r4, r5, r6, lr}
 80064ea:	4604      	mov	r4, r0
        if (fadeAnimationRunning)
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d042      	beq.n	8006576 <_ZN8touchgfx12FadeAnimatorINS_13AnimatedImageEE21nextFadeAnimationStepEv+0x92>
        {
            fadeAnimationCounter++;
 80064f0:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
            if (fadeAnimationCounter >= fadeAnimationDelay)
 80064f2:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
            fadeAnimationCounter++;
 80064f4:	3001      	adds	r0, #1
 80064f6:	b280      	uxth	r0, r0
            if (fadeAnimationCounter >= fadeAnimationDelay)
 80064f8:	4298      	cmp	r0, r3
            fadeAnimationCounter++;
 80064fa:	8760      	strh	r0, [r4, #58]	; 0x3a
            if (fadeAnimationCounter >= fadeAnimationDelay)
 80064fc:	d33b      	bcc.n	8006576 <_ZN8touchgfx12FadeAnimatorINS_13AnimatedImageEE21nextFadeAnimationStepEv+0x92>
            {
                // Adjust the used animationCounter for the startup delay
                uint32_t actualAnimationCounter = fadeAnimationCounter - fadeAnimationDelay;

                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 80064fe:	f8b4 5040 	ldrh.w	r5, [r4, #64]	; 0x40
 8006502:	1ac0      	subs	r0, r0, r3
 8006504:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8006508:	2100      	movs	r1, #0
 800650a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800650c:	b280      	uxth	r0, r0
 800650e:	1b52      	subs	r2, r2, r5
 8006510:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8006512:	b212      	sxth	r2, r2
 8006514:	47b0      	blx	r6
 8006516:	4405      	add	r5, r0

                if (T::getAlpha() != newAlpha)
 8006518:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 800651c:	b2ab      	uxth	r3, r5
 800651e:	b22d      	sxth	r5, r5
                if (T::getAlpha() != newAlpha)
 8006520:	42aa      	cmp	r2, r5
 8006522:	d005      	beq.n	8006530 <_ZN8touchgfx12FadeAnimatorINS_13AnimatedImageEE21nextFadeAnimationStepEv+0x4c>
                {
                    if (newAlpha == 0)
 8006524:	bb0d      	cbnz	r5, 800656a <_ZN8touchgfx12FadeAnimatorINS_13AnimatedImageEE21nextFadeAnimationStepEv+0x86>
                    {
                        // InvalidateContent before it becomes invisible
                        T::invalidateContent();
 8006526:	4620      	mov	r0, r4
 8006528:	f7ff fcc6 	bl	8005eb8 <_ZNK8touchgfx5Image17invalidateContentEv>
        alpha = newAlpha;
 800652c:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
                        T::setAlpha((uint8_t)newAlpha);
                        T::invalidateContent();
                    }
                }

                if (fadeAnimationCounter >= (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 8006530:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8006532:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8006534:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8006536:	440b      	add	r3, r1
 8006538:	429a      	cmp	r2, r3
 800653a:	d31c      	bcc.n	8006576 <_ZN8touchgfx12FadeAnimatorINS_13AnimatedImageEE21nextFadeAnimationStepEv+0x92>
                {
                    // End of animation
                    fadeAnimationRunning = false;
 800653c:	2300      	movs	r3, #0
 800653e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
                    fadeAnimationDuration = 0;
 8006542:	87e3      	strh	r3, [r4, #62]	; 0x3e
                    Application::getInstance()->unregisterTimerWidget(this);
 8006544:	f011 fcb8 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
     * @note If widget has been registered multiple times, an equal number of calls to unregister
     *       are required to stop widget from receiving tick events.
     */
    void unregisterTimerWidget(const Drawable* w)
    {
        timerWidgets.remove(w);
 8006548:	4621      	mov	r1, r4
 800654a:	3004      	adds	r0, #4
 800654c:	f011 fd01 	bl	8017f52 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>

                    if (fadeAnimationEndedCallback && fadeAnimationEndedCallback->isValid())
 8006550:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006552:	b180      	cbz	r0, 8006576 <_ZN8touchgfx12FadeAnimatorINS_13AnimatedImageEE21nextFadeAnimationStepEv+0x92>
 8006554:	6803      	ldr	r3, [r0, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	4798      	blx	r3
 800655a:	b160      	cbz	r0, 8006576 <_ZN8touchgfx12FadeAnimatorINS_13AnimatedImageEE21nextFadeAnimationStepEv+0x92>
                    {
                        fadeAnimationEndedCallback->execute(*this);
 800655c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800655e:	4621      	mov	r1, r4
 8006560:	6803      	ldr	r3, [r0, #0]
                    }
                }
            }
        }
    }
 8006562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        fadeAnimationEndedCallback->execute(*this);
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	4718      	bx	r3
                        T::invalidateContent();
 800656a:	4620      	mov	r0, r4
                        T::setAlpha((uint8_t)newAlpha);
 800656c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                        T::invalidateContent();
 8006570:	f7ff fca2 	bl	8005eb8 <_ZNK8touchgfx5Image17invalidateContentEv>
 8006574:	e7dc      	b.n	8006530 <_ZN8touchgfx12FadeAnimatorINS_13AnimatedImageEE21nextFadeAnimationStepEv+0x4c>
    }
 8006576:	bd70      	pop	{r4, r5, r6, pc}

08006578 <_ZN8touchgfx12FadeAnimatorINS_13AnimatedImageEE15handleTickEventEv>:
    virtual void handleTickEvent()
 8006578:	b510      	push	{r4, lr}
 800657a:	4604      	mov	r4, r0
        T::handleTickEvent();
 800657c:	f00d ff07 	bl	801438e <_ZN8touchgfx13AnimatedImage15handleTickEventEv>
        nextFadeAnimationStep();
 8006580:	4620      	mov	r0, r4
 8006582:	f7ff ffaf 	bl	80064e4 <_ZN8touchgfx12FadeAnimatorINS_13AnimatedImageEE21nextFadeAnimationStepEv>
    }
 8006586:	bd10      	pop	{r4, pc}

08006588 <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE21nextFadeAnimationStepEv>:
        if (fadeAnimationRunning)
 8006588:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    void nextFadeAnimationStep()
 800658c:	b570      	push	{r4, r5, r6, lr}
 800658e:	4604      	mov	r4, r0
        if (fadeAnimationRunning)
 8006590:	2b00      	cmp	r3, #0
 8006592:	d04a      	beq.n	800662a <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE21nextFadeAnimationStepEv+0xa2>
            fadeAnimationCounter++;
 8006594:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8006598:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
            fadeAnimationCounter++;
 800659c:	3001      	adds	r0, #1
 800659e:	b280      	uxth	r0, r0
            if (fadeAnimationCounter >= fadeAnimationDelay)
 80065a0:	4298      	cmp	r0, r3
            fadeAnimationCounter++;
 80065a2:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
            if (fadeAnimationCounter >= fadeAnimationDelay)
 80065a6:	d340      	bcc.n	800662a <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE21nextFadeAnimationStepEv+0xa2>
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 80065a8:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
 80065ac:	1ac0      	subs	r0, r0, r3
 80065ae:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80065b2:	2100      	movs	r1, #0
 80065b4:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 80065b8:	b280      	uxth	r0, r0
 80065ba:	1b52      	subs	r2, r2, r5
 80065bc:	6d66      	ldr	r6, [r4, #84]	; 0x54
 80065be:	b212      	sxth	r2, r2
 80065c0:	47b0      	blx	r6
 80065c2:	4405      	add	r5, r0
                if (T::getAlpha() != newAlpha)
 80065c4:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 80065c8:	b2ab      	uxth	r3, r5
 80065ca:	b22d      	sxth	r5, r5
                if (T::getAlpha() != newAlpha)
 80065cc:	42aa      	cmp	r2, r5
 80065ce:	d005      	beq.n	80065dc <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE21nextFadeAnimationStepEv+0x54>
                    if (newAlpha == 0)
 80065d0:	bb2d      	cbnz	r5, 800661e <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE21nextFadeAnimationStepEv+0x96>
                        T::invalidateContent();
 80065d2:	4620      	mov	r0, r4
 80065d4:	f00e fbe6 	bl	8014da4 <_ZNK8touchgfx8TextArea17invalidateContentEv>
        alpha = newAlpha;
 80065d8:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
                if (fadeAnimationCounter >= (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 80065dc:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 80065e0:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 80065e4:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 80065e8:	440b      	add	r3, r1
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d31d      	bcc.n	800662a <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE21nextFadeAnimationStepEv+0xa2>
                    fadeAnimationRunning = false;
 80065ee:	2300      	movs	r3, #0
 80065f0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
                    fadeAnimationDuration = 0;
 80065f4:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
                    Application::getInstance()->unregisterTimerWidget(this);
 80065f8:	f011 fc5e 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 80065fc:	4621      	mov	r1, r4
 80065fe:	3004      	adds	r0, #4
 8006600:	f011 fca7 	bl	8017f52 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
                    if (fadeAnimationEndedCallback && fadeAnimationEndedCallback->isValid())
 8006604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006606:	b180      	cbz	r0, 800662a <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE21nextFadeAnimationStepEv+0xa2>
 8006608:	6803      	ldr	r3, [r0, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	4798      	blx	r3
 800660e:	b160      	cbz	r0, 800662a <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE21nextFadeAnimationStepEv+0xa2>
                        fadeAnimationEndedCallback->execute(*this);
 8006610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006612:	4621      	mov	r1, r4
 8006614:	6803      	ldr	r3, [r0, #0]
    }
 8006616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        fadeAnimationEndedCallback->execute(*this);
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	4718      	bx	r3
                        T::invalidateContent();
 800661e:	4620      	mov	r0, r4
                        T::setAlpha((uint8_t)newAlpha);
 8006620:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
                        T::invalidateContent();
 8006624:	f00e fbbe 	bl	8014da4 <_ZNK8touchgfx8TextArea17invalidateContentEv>
 8006628:	e7d8      	b.n	80065dc <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE21nextFadeAnimationStepEv+0x54>
    }
 800662a:	bd70      	pop	{r4, r5, r6, pc}

0800662c <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE15handleTickEventEv>:
    virtual void handleTickEvent()
 800662c:	b508      	push	{r3, lr}
        nextFadeAnimationStep();
 800662e:	f7ff ffab 	bl	8006588 <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE21nextFadeAnimationStepEv>
    }
 8006632:	bd08      	pop	{r3, pc}

08006634 <_ZN19aboutScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi>:

void aboutScreenViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
 8006634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (&src == &sliderDrone)
 8006636:	f500 739e 	add.w	r3, r0, #316	; 0x13c
{
 800663a:	4604      	mov	r4, r0
    if (&src == &sliderDrone)
 800663c:	428b      	cmp	r3, r1
 800663e:	d149      	bne.n	80066d4 <_ZN19aboutScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0xa0>
        fadeAnimationEndedCallback = 0;
 8006640:	2300      	movs	r3, #0
    {
        //arrowFade
        //When sliderDrone value changed fade arrow
        //Fade arrow to alpha:0 with LinearIn easing in 200 ms (12 Ticks)
        arrow.clearFadeAnimationEndedAction();
        arrow.startFadeAnimation(0, 12, touchgfx::EasingEquations::linearEaseIn);
 8006642:	f100 07f0 	add.w	r7, r0, #240	; 0xf0
 8006646:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
        if (!fadeAnimationRunning)
 800664a:	f890 3129 	ldrb.w	r3, [r0, #297]	; 0x129
 800664e:	b92b      	cbnz	r3, 800665c <_ZN19aboutScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x28>
            Application::getInstance()->registerTimerWidget(this);
 8006650:	f011 fc32 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
        timerWidgets.add(w);
 8006654:	4639      	mov	r1, r7
 8006656:	3004      	adds	r0, #4
 8006658:	f011 fd24 	bl	80180a4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
        fadeAnimationStartAlpha = T::getAlpha();
 800665c:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
        fadeAnimationCounter = 0;
 8006660:	2500      	movs	r5, #0
        fadeAnimationAlphaEquation = alphaProgressionEquation;
 8006662:	4e1d      	ldr	r6, [pc, #116]	; (80066d8 <_ZN19aboutScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0xa4>)
        fadeAnimationStartAlpha = T::getAlpha();
 8006664:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
        fadeAnimationDuration = duration;
 8006668:	230c      	movs	r3, #12
        fadeAnimationCounter = 0;
 800666a:	f8a4 512a 	strh.w	r5, [r4, #298]	; 0x12a
        fadeAnimationDuration = duration;
 800666e:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
        fadeAnimationRunning = true;
 8006672:	2301      	movs	r3, #1
        fadeAnimationEndAlpha = endAlpha;
 8006674:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
        fadeAnimationRunning = true;
 8006678:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
        if (fadeAnimationDelay == 0 && fadeAnimationDuration == 0)
 800667c:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
        fadeAnimationAlphaEquation = alphaProgressionEquation;
 8006680:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
        if (fadeAnimationDelay == 0 && fadeAnimationDuration == 0)
 8006684:	b913      	cbnz	r3, 800668c <_ZN19aboutScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x58>
            nextFadeAnimationStep(); // Set end alpha and shut down
 8006686:	4638      	mov	r0, r7
 8006688:	f7ff ff2c 	bl	80064e4 <_ZN8touchgfx12FadeAnimatorINS_13AnimatedImageEE21nextFadeAnimationStepEv>
        if (!fadeAnimationRunning)
 800668c:	f894 3308 	ldrb.w	r3, [r4, #776]	; 0x308
        fadeAnimationEndedCallback = 0;
 8006690:	f8c4 5318 	str.w	r5, [r4, #792]	; 0x318

        //noteFade
        //When sliderDrone value changed fade noteText
        //Fade noteText to alpha:0 with LinearIn easing in 300 ms (18 Ticks)
        noteText.clearFadeAnimationEndedAction();
        noteText.startFadeAnimation(0, 18, touchgfx::EasingEquations::linearEaseIn);
 8006694:	f504 7530 	add.w	r5, r4, #704	; 0x2c0
        if (!fadeAnimationRunning)
 8006698:	b92b      	cbnz	r3, 80066a6 <_ZN19aboutScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x72>
            Application::getInstance()->registerTimerWidget(this);
 800669a:	f011 fc0d 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 800669e:	4629      	mov	r1, r5
 80066a0:	3004      	adds	r0, #4
 80066a2:	f011 fcff 	bl	80180a4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
        fadeAnimationCounter = 0;
 80066a6:	2300      	movs	r3, #0
        fadeAnimationStartAlpha = T::getAlpha();
 80066a8:	f894 22f6 	ldrb.w	r2, [r4, #758]	; 0x2f6
        fadeAnimationAlphaEquation = alphaProgressionEquation;
 80066ac:	f8c4 6314 	str.w	r6, [r4, #788]	; 0x314
        fadeAnimationCounter = 0;
 80066b0:	f8a4 330a 	strh.w	r3, [r4, #778]	; 0x30a
        fadeAnimationEndAlpha = endAlpha;
 80066b4:	f8a4 3312 	strh.w	r3, [r4, #786]	; 0x312
        fadeAnimationDuration = duration;
 80066b8:	2312      	movs	r3, #18
        fadeAnimationStartAlpha = T::getAlpha();
 80066ba:	f8a4 2310 	strh.w	r2, [r4, #784]	; 0x310
        fadeAnimationDuration = duration;
 80066be:	f8a4 330e 	strh.w	r3, [r4, #782]	; 0x30e
        fadeAnimationRunning = true;
 80066c2:	2301      	movs	r3, #1
 80066c4:	f884 3308 	strb.w	r3, [r4, #776]	; 0x308
        if (fadeAnimationDelay == 0 && fadeAnimationDuration == 0)
 80066c8:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
 80066cc:	b913      	cbnz	r3, 80066d4 <_ZN19aboutScreenViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0xa0>
            nextFadeAnimationStep(); // Set end alpha and shut down
 80066ce:	4628      	mov	r0, r5
 80066d0:	f7ff ff5a 	bl	8006588 <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE21nextFadeAnimationStepEv>
    }
}
 80066d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066d6:	bf00      	nop
 80066d8:	08019be1 	.word	0x08019be1

080066dc <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 80066dc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80066de:	4770      	bx	lr

080066e0 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
     * @see setScaleX, setScaleY, getScaleY
     */
    virtual int getScaleX() const
    {
        return xScale;
    }
 80066e0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80066e2:	4770      	bx	lr

080066e4 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
     * @see setScaleY, setScaleX, getScaleX
     */
    virtual int getScaleY() const
    {
        return yScale;
    }
 80066e4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80066e6:	4770      	bx	lr

080066e8 <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80066e8:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    }
 80066ec:	4770      	bx	lr

080066ee <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 80066ee:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 80066f0:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 80066f2:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 80066f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80066f8:	4362      	muls	r2, r4
 80066fa:	4361      	muls	r1, r4
    }
 80066fc:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8006700:	4718      	bx	r3

08006702 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * (float)scale;
 8006702:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8006706:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8006708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeX(float min, float max)
 800670c:	b410      	push	{r4}
        const float fs = f * (float)scale;
 800670e:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8006712:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
        if (fs >= 0)
 8006716:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800671a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800671e:	db1a      	blt.n	8006756 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x54>
        {
            return (int)(fs + 0.5f);
 8006720:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006724:	ee30 0a07 	vadd.f32	s0, s0, s14
 8006728:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800672c:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8006730:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8006734:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8006738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800673c:	db1e      	blt.n	800677c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x7a>
            return (int)(fs + 0.5f);
 800673e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006742:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8006746:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 800674a:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 800674e:	4623      	mov	r3, r4
    }
 8006750:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8006754:	4718      	bx	r3
        }
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8006756:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800675a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800675e:	ee17 3a10 	vmov	r3, s14
 8006762:	3b01      	subs	r3, #1
 8006764:	ee30 0a66 	vsub.f32	s0, s0, s13
 8006768:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800676c:	ee30 0a26 	vadd.f32	s0, s0, s13
 8006770:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006774:	ee10 1a10 	vmov	r1, s0
 8006778:	4419      	add	r1, r3
 800677a:	e7d9      	b.n	8006730 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x2e>
 800677c:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8006780:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006784:	ee17 3a90 	vmov	r3, s15
 8006788:	3b01      	subs	r3, #1
 800678a:	ee70 0ac7 	vsub.f32	s1, s1, s14
 800678e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8006792:	ee70 0a87 	vadd.f32	s1, s1, s14
 8006796:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 800679a:	ee10 2a90 	vmov	r2, s1
 800679e:	441a      	add	r2, r3
 80067a0:	e7d5      	b.n	800674e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4c>

080067a2 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 80067a2:	b410      	push	{r4}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 80067a4:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 80067a6:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 80067a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067ac:	4362      	muls	r2, r4
    }
 80067ae:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 80067b2:	4718      	bx	r3

080067b4 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
        const float fs = f * (float)scale;
 80067b4:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 80067b8:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 80067ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeXAuto(bool showYaxis, float margin)
 80067be:	b410      	push	{r4}
        const float fs = f * (float)scale;
 80067c0:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 80067c4:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
        if (fs >= 0)
 80067c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80067cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067d0:	db0b      	blt.n	80067ea <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x36>
            return (int)(fs + 0.5f);
 80067d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80067d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80067da:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80067de:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 80067e2:	4623      	mov	r3, r4
    }
 80067e4:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 80067e8:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80067ea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80067ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067f2:	ee17 3a90 	vmov	r3, s15
 80067f6:	3b01      	subs	r3, #1
 80067f8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80067fc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8006800:	ee30 0a07 	vadd.f32	s0, s0, s14
 8006804:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006808:	ee10 2a10 	vmov	r2, s0
 800680c:	441a      	add	r2, r3
 800680e:	e7e8      	b.n	80067e2 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2e>

08006810 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 8006810:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8006812:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
 8006814:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8006816:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800681a:	4362      	muls	r2, r4
 800681c:	4361      	muls	r1, r4
    }
 800681e:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8006822:	4718      	bx	r3

08006824 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * (float)scale;
 8006824:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8006828:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 800682a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeY(float min, float max)
 800682e:	b410      	push	{r4}
        const float fs = f * (float)scale;
 8006830:	ee20 0a27 	vmul.f32	s0, s0, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8006834:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
        if (fs >= 0)
 8006838:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800683c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006840:	db1a      	blt.n	8006878 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x54>
            return (int)(fs + 0.5f);
 8006842:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006846:	ee30 0a07 	vadd.f32	s0, s0, s14
 800684a:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800684e:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8006852:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8006856:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800685a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800685e:	db1e      	blt.n	800689e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x7a>
            return (int)(fs + 0.5f);
 8006860:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006864:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8006868:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 800686c:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8006870:	4623      	mov	r3, r4
    }
 8006872:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8006876:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8006878:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800687c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006880:	ee17 3a10 	vmov	r3, s14
 8006884:	3b01      	subs	r3, #1
 8006886:	ee30 0a66 	vsub.f32	s0, s0, s13
 800688a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800688e:	ee30 0a26 	vadd.f32	s0, s0, s13
 8006892:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006896:	ee10 1a10 	vmov	r1, s0
 800689a:	4419      	add	r1, r3
 800689c:	e7d9      	b.n	8006852 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x2e>
 800689e:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 80068a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068a6:	ee17 3a90 	vmov	r3, s15
 80068aa:	3b01      	subs	r3, #1
 80068ac:	ee70 0ac7 	vsub.f32	s1, s1, s14
 80068b0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80068b4:	ee70 0a87 	vadd.f32	s1, s1, s14
 80068b8:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 80068bc:	ee10 2a90 	vmov	r2, s1
 80068c0:	441a      	add	r2, r3
 80068c2:	e7d5      	b.n	8006870 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4c>

080068c4 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 80068c4:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 80068c6:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 80068c8:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 80068ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80068ce:	4362      	muls	r2, r4
    }
 80068d0:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 80068d4:	4718      	bx	r3

080068d6 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * (float)scale;
 80068d6:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 80068da:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 80068dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    virtual void setGraphRangeYAuto(bool showXaxis, float margin)
 80068e0:	b410      	push	{r4}
        const float fs = f * (float)scale;
 80068e2:	ee27 0a80 	vmul.f32	s0, s15, s0
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 80068e6:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
        if (fs >= 0)
 80068ea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80068ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068f2:	db0b      	blt.n	800690c <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x36>
            return (int)(fs + 0.5f);
 80068f4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80068f8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80068fc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006900:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8006904:	4623      	mov	r3, r4
    }
 8006906:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 800690a:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800690c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006910:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006914:	ee17 3a90 	vmov	r3, s15
 8006918:	3b01      	subs	r3, #1
 800691a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800691e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8006922:	ee30 0a07 	vadd.f32	s0, s0, s14
 8006926:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800692a:	ee10 2a10 	vmov	r2, s0
 800692e:	441a      	add	r2, r3
 8006930:	e7e8      	b.n	8006904 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2e>

08006932 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
 8006932:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 8006936:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 8006938:	2b00      	cmp	r3, #0
 800693a:	db07      	blt.n	800694c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 800693c:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8006940:	fb90 f0f2 	sdiv	r0, r0, r2
 8006944:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8006948:	1040      	asrs	r0, r0, #1
 800694a:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800694c:	f06f 0101 	mvn.w	r1, #1
 8006950:	fb01 2003 	mla	r0, r1, r3, r2
 8006954:	3801      	subs	r0, #1
 8006956:	fb90 f0f2 	sdiv	r0, r0, r2
 800695a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800695e:	1040      	asrs	r0, r0, #1
 8006960:	4240      	negs	r0, r0
    }
 8006962:	4770      	bx	lr

08006964 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
 8006964:	edd0 7a4b 	vldr	s15, [r0, #300]	; 0x12c
 8006968:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 800696c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006970:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8006974:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8006978:	4770      	bx	lr

0800697a <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
 800697a:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
 800697e:	4770      	bx	lr

08006980 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
 8006980:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
        return scaled2int(i, xScale);
 8006984:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 8006986:	2b00      	cmp	r3, #0
 8006988:	db07      	blt.n	800699a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 800698a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 800698e:	fb90 f0f2 	sdiv	r0, r0, r2
 8006992:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8006996:	1040      	asrs	r0, r0, #1
 8006998:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800699a:	f06f 0101 	mvn.w	r1, #1
 800699e:	fb01 2003 	mla	r0, r1, r3, r2
 80069a2:	3801      	subs	r0, #1
 80069a4:	fb90 f0f2 	sdiv	r0, r0, r2
 80069a8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80069ac:	1040      	asrs	r0, r0, #1
 80069ae:	4240      	negs	r0, r0
    }
 80069b0:	4770      	bx	lr

080069b2 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
 80069b2:	edd0 7a4c 	vldr	s15, [r0, #304]	; 0x130
 80069b6:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 80069ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069be:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 80069c2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80069c6:	4770      	bx	lr

080069c8 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
 80069c8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 80069cc:	4770      	bx	lr

080069ce <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
 80069ce:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
        return scaled2int(i, yScale);
 80069d2:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	db07      	blt.n	80069e8 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 80069d8:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 80069dc:	fb90 f0f2 	sdiv	r0, r0, r2
 80069e0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80069e4:	1040      	asrs	r0, r0, #1
 80069e6:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80069e8:	f06f 0101 	mvn.w	r1, #1
 80069ec:	fb01 2003 	mla	r0, r1, r3, r2
 80069f0:	3801      	subs	r0, #1
 80069f2:	fb90 f0f2 	sdiv	r0, r0, r2
 80069f6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80069fa:	1040      	asrs	r0, r0, #1
 80069fc:	4240      	negs	r0, r0
    }
 80069fe:	4770      	bx	lr

08006a00 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
 8006a00:	edd0 7a4d 	vldr	s15, [r0, #308]	; 0x134
 8006a04:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8006a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a0c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8006a10:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8006a14:	4770      	bx	lr

08006a16 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
 8006a16:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
 8006a1a:	4770      	bx	lr

08006a1c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
 8006a1c:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        return scaled2int(i, yScale);
 8006a20:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	db07      	blt.n	8006a36 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8006a26:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8006a2a:	fb90 f0f2 	sdiv	r0, r0, r2
 8006a2e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8006a32:	1040      	asrs	r0, r0, #1
 8006a34:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8006a36:	f06f 0101 	mvn.w	r1, #1
 8006a3a:	fb01 2003 	mla	r0, r1, r3, r2
 8006a3e:	3801      	subs	r0, #1
 8006a40:	fb90 f0f2 	sdiv	r0, r0, r2
 8006a44:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8006a48:	1040      	asrs	r0, r0, #1
 8006a4a:	4240      	negs	r0, r0
    }
 8006a4c:	4770      	bx	lr

08006a4e <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
 8006a4e:	edd0 7a4e 	vldr	s15, [r0, #312]	; 0x138
 8006a52:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8006a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a5a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    }
 8006a5e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8006a62:	4770      	bx	lr

08006a64 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
 8006a64:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
 8006a68:	4770      	bx	lr

08006a6a <_ZNK8touchgfx15StaticDataGraph12indexToXAxisEii>:
    virtual int16_t deleteIndex(int index);

    virtual int indexToXAxis(const int /*valueScaled*/, const int labelScaled) const
    {
        return labelScaled;
    }
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	4770      	bx	lr

08006a6e <_ZNK8touchgfx15StaticDataGraph16indexToScreenXQ5Es>:

    virtual bool xScreenRangeToIndexRange(int16_t xMin, int16_t xMax, int16_t& indexMin, int16_t& indexMax) const;

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
    {
        return valueToScreenXQ5(xValues[index]);
 8006a6e:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
 8006a72:	6803      	ldr	r3, [r0, #0]
 8006a74:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8006a78:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006a7c:	4718      	bx	r3

08006a7e <_ZNK8touchgfx15StaticDataGraph16indexToScreenYQ5Es>:
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[index]);
 8006a7e:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 8006a82:	6803      	ldr	r3, [r0, #0]
 8006a84:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8006a88:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8006a8c:	4718      	bx	r3

08006a8e <_ZN17batScreenViewBase11setupScreenEv>:
}

void batScreenViewBase::setupScreen()
{

}
 8006a8e:	4770      	bx	lr

08006a90 <_ZN8touchgfx8CallbackI17batScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006a90:	4770      	bx	lr

08006a92 <_ZN8touchgfx5GraphILs100EED1Ev>:
 * The Graph will show a graph of data points, drawn from lower x valut to highest x value.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class Graph : public GraphData
 8006a92:	4770      	bx	lr

08006a94 <_ZN8touchgfx8CallbackI17batScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8006a94:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8006a96:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8006a98:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8006a9a:	68c2      	ldr	r2, [r0, #12]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	1055      	asrs	r5, r2, #1
 8006aa0:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8006aa4:	07d2      	lsls	r2, r2, #31
 8006aa6:	bf48      	it	mi
 8006aa8:	5962      	ldrmi	r2, [r4, r5]
    }
 8006aaa:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8006aac:	bf48      	it	mi
 8006aae:	58d3      	ldrmi	r3, [r2, r3]
 8006ab0:	4718      	bx	r3

08006ab2 <_ZNK8touchgfx8CallbackI17batScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8006ab2:	6843      	ldr	r3, [r0, #4]
 8006ab4:	b12b      	cbz	r3, 8006ac2 <_ZNK8touchgfx8CallbackI17batScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8006ab6:	6883      	ldr	r3, [r0, #8]
 8006ab8:	b92b      	cbnz	r3, 8006ac6 <_ZNK8touchgfx8CallbackI17batScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8006aba:	68c0      	ldr	r0, [r0, #12]
 8006abc:	f000 0001 	and.w	r0, r0, #1
 8006ac0:	4770      	bx	lr
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	4770      	bx	lr
 8006ac6:	2001      	movs	r0, #1
    }
 8006ac8:	4770      	bx	lr

08006aca <_ZN8touchgfx5GraphILs100EED0Ev>:
 8006aca:	b510      	push	{r4, lr}
 8006acc:	4604      	mov	r4, r0
 8006ace:	f240 4164 	movw	r1, #1124	; 0x464
 8006ad2:	f023 ff76 	bl	802a9c2 <_ZdlPvj>
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	bd10      	pop	{r4, pc}

08006ada <_ZN8touchgfx8CallbackI17batScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006ada:	b510      	push	{r4, lr}
 8006adc:	4604      	mov	r4, r0
 8006ade:	2110      	movs	r1, #16
 8006ae0:	f023 ff6f 	bl	802a9c2 <_ZdlPvj>
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	bd10      	pop	{r4, pc}

08006ae8 <_ZN17batScreenViewBaseD1Ev>:
batScreenViewBase::~batScreenViewBase()
 8006ae8:	4b03      	ldr	r3, [pc, #12]	; (8006af8 <_ZN17batScreenViewBaseD1Ev+0x10>)
 8006aea:	b510      	push	{r4, lr}
 8006aec:	4604      	mov	r4, r0
 8006aee:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8006af0:	f00f fd28 	bl	8016544 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8006af4:	4620      	mov	r0, r4
 8006af6:	bd10      	pop	{r4, pc}
 8006af8:	0802f540 	.word	0x0802f540

08006afc <_ZN17batScreenViewBaseD0Ev>:
batScreenViewBase::~batScreenViewBase()
 8006afc:	4b07      	ldr	r3, [pc, #28]	; (8006b1c <_ZN17batScreenViewBaseD0Ev+0x20>)
 8006afe:	b507      	push	{r0, r1, r2, lr}
 8006b00:	6003      	str	r3, [r0, #0]
 8006b02:	9001      	str	r0, [sp, #4]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8006b04:	f00f fd1e 	bl	8016544 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 8006b08:	9801      	ldr	r0, [sp, #4]
 8006b0a:	f243 61b8 	movw	r1, #14008	; 0x36b8
 8006b0e:	f023 ff58 	bl	802a9c2 <_ZdlPvj>
 8006b12:	9801      	ldr	r0, [sp, #4]
 8006b14:	b003      	add	sp, #12
 8006b16:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b1a:	bf00      	nop
 8006b1c:	0802f540 	.word	0x0802f540

08006b20 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
    virtual void invalidateContent() const
 8006b20:	b508      	push	{r3, lr}
        if (alpha > 0)
 8006b22:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006b26:	b10b      	cbz	r3, 8006b2c <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0xc>
            Container::invalidateContent();
 8006b28:	f7fb fd85 	bl	8002636 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8006b2c:	bd08      	pop	{r3, pc}
	...

08006b30 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8006b30:	2900      	cmp	r1, #0
    virtual int indexToDataPointYScaled(int16_t index) const
 8006b32:	b508      	push	{r3, lr}
        assert(index >= 0 && index < usedCapacity);
 8006b34:	db03      	blt.n	8006b3e <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0xe>
 8006b36:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8006b3a:	428b      	cmp	r3, r1
 8006b3c:	dc06      	bgt.n	8006b4c <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x1c>
 8006b3e:	4b06      	ldr	r3, [pc, #24]	; (8006b58 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x28>)
 8006b40:	f240 61f5 	movw	r1, #1781	; 0x6f5
 8006b44:	4a05      	ldr	r2, [pc, #20]	; (8006b5c <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x2c>)
 8006b46:	4806      	ldr	r0, [pc, #24]	; (8006b60 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x30>)
 8006b48:	f024 f918 	bl	802ad7c <__assert_func>
        return yValues[index];
 8006b4c:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    }
 8006b50:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8006b54:	bd08      	pop	{r3, pc}
 8006b56:	bf00      	nop
 8006b58:	0802f2c8 	.word	0x0802f2c8
 8006b5c:	0802f2eb 	.word	0x0802f2eb
 8006b60:	0802f339 	.word	0x0802f339

08006b64 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8006b64:	2900      	cmp	r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
 8006b66:	b508      	push	{r3, lr}
        assert(index >= 0 && index < usedCapacity);
 8006b68:	db03      	blt.n	8006b72 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0xe>
 8006b6a:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8006b6e:	428b      	cmp	r3, r1
 8006b70:	dc06      	bgt.n	8006b80 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x1c>
 8006b72:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x28>)
 8006b74:	f240 61e5 	movw	r1, #1765	; 0x6e5
 8006b78:	4a05      	ldr	r2, [pc, #20]	; (8006b90 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x2c>)
 8006b7a:	4806      	ldr	r0, [pc, #24]	; (8006b94 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x30>)
 8006b7c:	f024 f8fe 	bl	802ad7c <__assert_func>
        return xValues[index];
 8006b80:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    }
 8006b84:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8006b88:	bd08      	pop	{r3, pc}
 8006b8a:	bf00      	nop
 8006b8c:	0802f2c8 	.word	0x0802f2c8
 8006b90:	0802f396 	.word	0x0802f396
 8006b94:	0802f339 	.word	0x0802f339

08006b98 <_ZN17batScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void batScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &returnBut)
 8006b98:	f200 7094 	addw	r0, r0, #1940	; 0x794
 8006b9c:	4288      	cmp	r0, r1
{
 8006b9e:	b508      	push	{r3, lr}
    if (&src == &returnBut)
 8006ba0:	d105      	bne.n	8006bae <_ZN17batScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual ~batScreenViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8006ba2:	f011 f989 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
        //returnMain
        //When returnBut clicked change screen to mainScreen
        //Go to mainScreen with screen transition towards West
        application().gotomainScreenScreenCoverTransitionWest();
    }
}
 8006ba6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotomainScreenScreenCoverTransitionWest();
 8006baa:	f7fe b955 	b.w	8004e58 <_ZN23FrontendApplicationBase39gotomainScreenScreenCoverTransitionWestEv>
}
 8006bae:	bd08      	pop	{r3, pc}

08006bb0 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 8006bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 8006bb2:	ab01      	add	r3, sp, #4
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 8006bb4:	4615      	mov	r5, r2
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 8006bb6:	f012 fc37 	bl	8019428 <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
 8006bba:	2800      	cmp	r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8006bbc:	462a      	mov	r2, r5
 8006bbe:	9901      	ldr	r1, [sp, #4]
 8006bc0:	ea4f 1440 	mov.w	r4, r0, lsl #5
 8006bc4:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
 8006bc8:	db04      	blt.n	8006bd4 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8006bca:	f012 fc4c 	bl	8019466 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
 8006bce:	4420      	add	r0, r4
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
    }
 8006bd0:	b003      	add	sp, #12
 8006bd2:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8006bd4:	f012 fc47 	bl	8019466 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
 8006bd8:	1a20      	subs	r0, r4, r0
 8006bda:	e7f9      	b.n	8006bd0 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

08006bdc <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 8006bdc:	b570      	push	{r4, r5, r6, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8006bde:	f8b0 311a 	ldrh.w	r3, [r0, #282]	; 0x11a
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 8006be2:	460e      	mov	r6, r1
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8006be4:	f9b0 4114 	ldrsh.w	r4, [r0, #276]	; 0x114
 8006be8:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
 8006bec:	4423      	add	r3, r4
 8006bee:	1aed      	subs	r5, r5, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 8006bf0:	b22d      	sxth	r5, r5
 8006bf2:	442c      	add	r4, r5
 8006bf4:	1e69      	subs	r1, r5, #1
 8006bf6:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	; 0x134
 8006bfa:	3c01      	subs	r4, #1
 8006bfc:	1ad2      	subs	r2, r2, r3
 8006bfe:	1af0      	subs	r0, r6, r3
 8006c00:	f7ff ffd6 	bl	8006bb0 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
    }
 8006c04:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8006c08:	bd70      	pop	{r4, r5, r6, pc}

08006c0a <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 8006c0a:	b538      	push	{r3, r4, r5, lr}
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	4608      	mov	r0, r1
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8006c10:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 8006c14:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
 8006c18:	440b      	add	r3, r1
 8006c1a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8006c1e:	1ac9      	subs	r1, r1, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 8006c20:	e9d4 524b 	ldrd	r5, r2, [r4, #300]	; 0x12c
 8006c24:	b209      	sxth	r1, r1
 8006c26:	1b52      	subs	r2, r2, r5
 8006c28:	1b40      	subs	r0, r0, r5
 8006c2a:	3901      	subs	r1, #1
 8006c2c:	f7ff ffc0 	bl	8006bb0 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 8006c30:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
    }
 8006c34:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8006c38:	bd38      	pop	{r3, r4, r5, pc}
	...

08006c3c <_ZN17batScreenViewBaseC1Ev>:
batScreenViewBase::batScreenViewBase() :
 8006c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c40:	4604      	mov	r4, r0
 8006c42:	f04f 0b00 	mov.w	fp, #0
 8006c46:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8006c4a:	f04f 0a01 	mov.w	sl, #1
    buttonCallback(this, &batScreenViewBase::buttonCallbackHandler)
 8006c4e:	46a0      	mov	r8, r4
 8006c50:	f104 0798 	add.w	r7, r4, #152	; 0x98
 8006c54:	f104 09d4 	add.w	r9, r4, #212	; 0xd4
 8006c58:	f504 7596 	add.w	r5, r4, #300	; 0x12c
batScreenViewBase::batScreenViewBase() :
 8006c5c:	ed2d 8b0c 	vpush	{d8-d13}
 8006c60:	b08d      	sub	sp, #52	; 0x34
 8006c62:	f012 fdab 	bl	80197bc <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &batScreenViewBase::buttonCallbackHandler)
 8006c66:	4bf3      	ldr	r3, [pc, #972]	; (8007034 <_ZN17batScreenViewBaseC1Ev+0x3f8>)
 8006c68:	f8c4 b03c 	str.w	fp, [r4, #60]	; 0x3c
 8006c6c:	f848 3b40 	str.w	r3, [r8], #64
 8006c70:	4640      	mov	r0, r8
 8006c72:	f7ff f98b 	bl	8005f8c <_ZN8touchgfx3BoxC1Ev>
 8006c76:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	ee0c 3a10 	vmov	s24, r3
 8006c80:	f7ff f984 	bl	8005f8c <_ZN8touchgfx3BoxC1Ev>
          running(false)
 8006c84:	a90a      	add	r1, sp, #40	; 0x28
 8006c86:	4638      	mov	r0, r7
 8006c88:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 8006c8c:	f7ff f992 	bl	8005fb4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8006c90:	4be9      	ldr	r3, [pc, #932]	; (8007038 <_ZN17batScreenViewBaseC1Ev+0x3fc>)
 8006c92:	a90a      	add	r1, sp, #40	; 0x28
 8006c94:	4648      	mov	r0, r9
 8006c96:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
          updateTicksInterval(updateInterval),
 8006c9a:	f04f 33ff 	mov.w	r3, #4294967295
        : animationDoneAction(0),
 8006c9e:	f8c4 b0c4 	str.w	fp, [r4, #196]	; 0xc4
          running(false)
 8006ca2:	f884 b0d0 	strb.w	fp, [r4, #208]	; 0xd0
 8006ca6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
          updateTicksInterval(updateInterval),
 8006caa:	e9c4 3a32 	strd	r3, sl, [r4, #200]	; 0xc8
 8006cae:	f7ff f981 	bl	8005fb4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8006cb2:	f504 7380 	add.w	r3, r4, #256	; 0x100
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	ee0c 3a90 	vmov	s25, r3
 8006cbc:	f7ff f966 	bl	8005f8c <_ZN8touchgfx3BoxC1Ev>
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 8006cc0:	2164      	movs	r1, #100	; 0x64
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f00c ff98 	bl	8013bf8 <_ZN8touchgfx17AbstractDataGraphC1Es>
 8006cc8:	4bdc      	ldr	r3, [pc, #880]	; (800703c <_ZN17batScreenViewBaseC1Ev+0x400>)
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 8006cca:	4659      	mov	r1, fp
 8006ccc:	2263      	movs	r2, #99	; 0x63
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 8006cce:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
{
public:
    Graph()
        : GraphData(CAPACITY, x, y)
 8006cd2:	f504 731c 	add.w	r3, r4, #624	; 0x270
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 8006cd6:	4628      	mov	r0, r5
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 8006cd8:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
 8006cdc:	f504 6380 	add.w	r3, r4, #1024	; 0x400
 8006ce0:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 8006ce4:	f7ff fd03 	bl	80066ee <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 8006ce8:	4bd5      	ldr	r3, [pc, #852]	; (8007040 <_ZN17batScreenViewBaseC1Ev+0x404>)
 8006cea:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
 8006cee:	f504 63b2 	add.w	r3, r4, #1424	; 0x590
class AbstractGraphElement : public CanvasWidget
{
public:
    /** Default constructor. */
    AbstractGraphElement()
        : CanvasWidget()
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	ee0d 3a10 	vmov	s26, r3
 8006cf8:	f00c fbe6 	bl	80134c8 <_ZN8touchgfx12CanvasWidgetC1Ev>
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
 8006cfc:	4bd1      	ldr	r3, [pc, #836]	; (8007044 <_ZN17batScreenViewBaseC1Ev+0x408>)
 8006cfe:	f504 62b8 	add.w	r2, r4, #1472	; 0x5c0
 8006d02:	f8c4 3590 	str.w	r3, [r4, #1424]	; 0x590
 8006d06:	f04f 0302 	mov.w	r3, #2
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 8006d0a:	4610      	mov	r0, r2
 8006d0c:	9203      	str	r2, [sp, #12]
 8006d0e:	f884 35bc 	strb.w	r3, [r4, #1468]	; 0x5bc
 8006d12:	f7fb fdff 	bl	8002914 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 8006d16:	4bcc      	ldr	r3, [pc, #816]	; (8007048 <_ZN17batScreenViewBaseC1Ev+0x40c>)
 8006d18:	f204 52d4 	addw	r2, r4, #1492	; 0x5d4
 8006d1c:	a90a      	add	r1, sp, #40	; 0x28
 8006d1e:	f8c4 35c0 	str.w	r3, [r4, #1472]	; 0x5c0
 8006d22:	3324      	adds	r3, #36	; 0x24
 8006d24:	4610      	mov	r0, r2
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8006d26:	f8c4 b5cc 	str.w	fp, [r4, #1484]	; 0x5cc
 8006d2a:	f8c4 35c8 	str.w	r3, [r4, #1480]	; 0x5c8
 8006d2e:	ee0b 2a90 	vmov	s23, r2
 8006d32:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 8006d36:	f7ff f93d 	bl	8005fb4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8006d3a:	f504 62c0 	add.w	r2, r4, #1536	; 0x600
 8006d3e:	a90a      	add	r1, sp, #40	; 0x28
 8006d40:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 8006d44:	4610      	mov	r0, r2
 8006d46:	ee0a 2a90 	vmov	s21, r2
 8006d4a:	f00d fbd5 	bl	80144f8 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8006d4e:	f204 622c 	addw	r2, r4, #1580	; 0x62c
 8006d52:	4610      	mov	r0, r2
 8006d54:	ee08 2a10 	vmov	s16, r2
 8006d58:	f7ff f946 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 8006d5c:	f204 6274 	addw	r2, r4, #1652	; 0x674
 8006d60:	4610      	mov	r0, r2
 8006d62:	ee08 2a90 	vmov	s17, r2
 8006d66:	f7ff f93f 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 8006d6a:	f204 62bc 	addw	r2, r4, #1724	; 0x6bc
 8006d6e:	4610      	mov	r0, r2
 8006d70:	ee09 2a10 	vmov	s18, r2
 8006d74:	f7ff f938 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 8006d78:	f204 7204 	addw	r2, r4, #1796	; 0x704
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	ee09 2a90 	vmov	s19, r2
 8006d82:	f7ff f931 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 8006d86:	f204 724c 	addw	r2, r4, #1868	; 0x74c
 8006d8a:	4610      	mov	r0, r2
 8006d8c:	ee0a 2a10 	vmov	s20, r2
 8006d90:	f7ff f92a 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 8006d94:	f204 7294 	addw	r2, r4, #1940	; 0x794
        : Widget(), action(), pressed(false)
 8006d98:	4659      	mov	r1, fp
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	ee0b 2a10 	vmov	s22, r2
 8006da0:	2226      	movs	r2, #38	; 0x26
 8006da2:	4618      	mov	r0, r3
 8006da4:	f024 fa72 	bl	802b28c <memset>
 8006da8:	ee1b 0a10 	vmov	r0, s22
 8006dac:	f7ff f8dc 	bl	8005f68 <_ZN8touchgfx6WidgetC1Ev>
 8006db0:	4ba6      	ldr	r3, [pc, #664]	; (800704c <_ZN17batScreenViewBaseC1Ev+0x410>)
        : pobject(pObject), pmemfun(pmemfun_1)
 8006db2:	4aa7      	ldr	r2, [pc, #668]	; (8007050 <_ZN17batScreenViewBaseC1Ev+0x414>)
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8006db4:	f504 60f9 	add.w	r0, r4, #1992	; 0x7c8
 8006db8:	f8c4 3794 	str.w	r3, [r4, #1940]	; 0x794
 8006dbc:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8006dc0:	f884 a7b8 	strb.w	sl, [r4, #1976]	; 0x7b8
 8006dc4:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8006dc8:	f8a4 67c2 	strh.w	r6, [r4, #1986]	; 0x7c2
 8006dcc:	f8a4 67c4 	strh.w	r6, [r4, #1988]	; 0x7c4
 8006dd0:	f884 67c6 	strb.w	r6, [r4, #1990]	; 0x7c6
 8006dd4:	1d26      	adds	r6, r4, #4
 8006dd6:	f8c4 b7bc 	str.w	fp, [r4, #1980]	; 0x7bc
 8006dda:	f884 b7c0 	strb.w	fp, [r4, #1984]	; 0x7c0
 8006dde:	f8c3 26a8 	str.w	r2, [r3, #1704]	; 0x6a8
 8006de2:	4a9c      	ldr	r2, [pc, #624]	; (8007054 <_ZN17batScreenViewBaseC1Ev+0x418>)
 8006de4:	f8c3 46ac 	str.w	r4, [r3, #1708]	; 0x6ac
 8006de8:	f8c3 26b0 	str.w	r2, [r3, #1712]	; 0x6b0
 8006dec:	f8c3 b6b4 	str.w	fp, [r3, #1716]	; 0x6b4
 8006df0:	f00f fb9e 	bl	8016530 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 800, 480);
 8006df4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006df8:	4659      	mov	r1, fp
 8006dfa:	4640      	mov	r0, r8
 8006dfc:	9200      	str	r2, [sp, #0]
 8006dfe:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006e02:	465a      	mov	r2, fp
 8006e04:	f7fd fed0 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8006e08:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8006e0c:	4641      	mov	r1, r8
 8006e0e:	4630      	mov	r0, r6
 8006e10:	66a3      	str	r3, [r4, #104]	; 0x68
        return i * scale;
 8006e12:	f06f 0855 	mvn.w	r8, #85	; 0x55
 8006e16:	f00a fe41 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    backGround.setPosition(0, 0, 800, 480);
 8006e1a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006e1e:	4659      	mov	r1, fp
 8006e20:	ee1c 0a10 	vmov	r0, s24
 8006e24:	9200      	str	r2, [sp, #0]
 8006e26:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006e2a:	465a      	mov	r2, fp
 8006e2c:	f7fd febc 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8006e30:	4b89      	ldr	r3, [pc, #548]	; (8007058 <_ZN17batScreenViewBaseC1Ev+0x41c>)
 8006e32:	ee1c 1a10 	vmov	r1, s24
 8006e36:	4630      	mov	r0, r6
 8006e38:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8006e3c:	f00a fe2e 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    batAnimate.setXY(20, 234);
 8006e40:	4638      	mov	r0, r7
 8006e42:	22ea      	movs	r2, #234	; 0xea
 8006e44:	2114      	movs	r1, #20
 8006e46:	f7ff f881 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
    batAnimate.setBitmaps(BITMAP_BATTERY01_ID, BITMAP_BATTERY21_ID);
 8006e4a:	2223      	movs	r2, #35	; 0x23
 8006e4c:	4638      	mov	r0, r7
 8006e4e:	210f      	movs	r1, #15
 8006e50:	f00d faf3 	bl	801443a <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>
    batAnimate.setUpdateTicksInterval(6);
 8006e54:	4638      	mov	r0, r7
 8006e56:	2106      	movs	r1, #6
 8006e58:	f00d fb02 	bl	8014460 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>
    batAnimate.startAnimation(false, true, true);
 8006e5c:	4653      	mov	r3, sl
 8006e5e:	4652      	mov	r2, sl
 8006e60:	4659      	mov	r1, fp
 8006e62:	4638      	mov	r0, r7
 8006e64:	f00d fa4b 	bl	80142fe <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>
 8006e68:	4639      	mov	r1, r7
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	f06f 073f 	mvn.w	r7, #63	; 0x3f
 8006e70:	f00a fe14 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    backPicture.setXY(0, 0);
 8006e74:	465a      	mov	r2, fp
 8006e76:	4659      	mov	r1, fp
 8006e78:	4648      	mov	r0, r9
 8006e7a:	f7ff f867 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8006e7e:	f04f 020e 	mov.w	r2, #14
    backPicture.setBitmap(touchgfx::Bitmap(BITMAP_BAT_ID));
 8006e82:	a90a      	add	r1, sp, #40	; 0x28
 8006e84:	4648      	mov	r0, r9
 8006e86:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8006e8a:	f00e fb6e 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006e8e:	4649      	mov	r1, r9
 8006e90:	4630      	mov	r0, r6
 8006e92:	f00a fe03 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    graphBackGroundBox.setPosition(202, 116, 577, 301);
 8006e96:	f240 132d 	movw	r3, #301	; 0x12d
 8006e9a:	ee1c 0a90 	vmov	r0, s25
 8006e9e:	2274      	movs	r2, #116	; 0x74
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	21ca      	movs	r1, #202	; 0xca
 8006ea4:	f240 2341 	movw	r3, #577	; 0x241
 8006ea8:	f06f 0945 	mvn.w	r9, #69	; 0x45
 8006eac:	f7fd fe7c 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8006eb0:	f04f 32ff 	mov.w	r2, #4294967295
    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8006eb4:	2383      	movs	r3, #131	; 0x83
 8006eb6:	ee1c 1a90 	vmov	r1, s25
 8006eba:	4630      	mov	r0, r6
        color = newColor;
 8006ebc:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
        alpha = newAlpha;
 8006ec0:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
 8006ec4:	f00a fdea 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    batGraph.setPosition(217, 133, 544, 267);
 8006ec8:	f240 130b 	movw	r3, #267	; 0x10b
 8006ecc:	4628      	mov	r0, r5
 8006ece:	2285      	movs	r2, #133	; 0x85
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	21d9      	movs	r1, #217	; 0xd9
 8006ed4:	f44f 7308 	mov.w	r3, #544	; 0x220
 8006ed8:	f7fd fe66 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
    batGraph.setScaleX(1);
 8006edc:	465a      	mov	r2, fp
 8006ede:	4651      	mov	r1, sl
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	f00c fef5 	bl	8013cd0 <_ZN8touchgfx15StaticDataGraph9setScaleXEib>
    batGraph.setScaleY(1);
 8006ee6:	465a      	mov	r2, fp
 8006ee8:	4651      	mov	r1, sl
 8006eea:	4628      	mov	r0, r5
 8006eec:	f00c ff0f 	bl	8013d0e <_ZN8touchgfx15StaticDataGraph9setScaleYEib>
    batGraph.setGraphAreaMargin(0, 0, 0, 0);
 8006ef0:	465b      	mov	r3, fp
 8006ef2:	465a      	mov	r2, fp
 8006ef4:	4659      	mov	r1, fp
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	f8cd b000 	str.w	fp, [sp]
 8006efc:	f00c fe2d 	bl	8013b5a <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    batGraph.setGraphAreaPadding(0, 0, 0, 0);
 8006f00:	465b      	mov	r3, fp
 8006f02:	465a      	mov	r2, fp
 8006f04:	4659      	mov	r1, fp
 8006f06:	4628      	mov	r0, r5
 8006f08:	f8cd b000 	str.w	fp, [sp]
 8006f0c:	f00c fd5c 	bl	80139c8 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    batGraph.setGraphRangeX(-100, 100);
 8006f10:	4628      	mov	r0, r5
 8006f12:	2264      	movs	r2, #100	; 0x64
 8006f14:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8006f18:	f7ff fbe9 	bl	80066ee <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
    batGraph.setGraphRangeY(-100, 100);
 8006f1c:	2264      	movs	r2, #100	; 0x64
 8006f1e:	4628      	mov	r0, r5
 8006f20:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8006f24:	f7ff fc74 	bl	8006810 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
 8006f28:	4b4c      	ldr	r3, [pc, #304]	; (800705c <_ZN17batScreenViewBaseC1Ev+0x420>)
    batGraph.addGraphElement(batGraphLine1);
 8006f2a:	ee1d 1a10 	vmov	r1, s26
 8006f2e:	4628      	mov	r0, r5
 8006f30:	f8c4 35cc 	str.w	r3, [r4, #1484]	; 0x5cc
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        color565 = LCD16bpp::getNativeColor(painterColor);
 8006f34:	f241 43b8 	movw	r3, #5304	; 0x14b8
 8006f38:	f06f 0a4e 	mvn.w	sl, #78	; 0x4e
 8006f3c:	f8a4 35d0 	strh.w	r3, [r4, #1488]	; 0x5d0
        canvasPainter = &painter;
 8006f40:	9b03      	ldr	r3, [sp, #12]
 8006f42:	f8c4 35b8 	str.w	r3, [r4, #1464]	; 0x5b8
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 8006f46:	f04f 0302 	mov.w	r3, #2
 8006f4a:	f884 35bc 	strb.w	r3, [r4, #1468]	; 0x5bc
 8006f4e:	f00c fd46 	bl	80139de <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
 8006f52:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
 8006f56:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
        return addValue(int2scaledX(x), int2scaledY(y));
 8006f5a:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8006f5e:	4628      	mov	r0, r5
 8006f60:	fb09 f202 	mul.w	r2, r9, r2
 8006f64:	4359      	muls	r1, r3
 8006f66:	f00c fef1 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8006f6a:	f06f 0150 	mvn.w	r1, #80	; 0x50
 8006f6e:	4628      	mov	r0, r5
        return i * scale;
 8006f70:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8006f74:	434a      	muls	r2, r1
 8006f76:	f06f 0161 	mvn.w	r1, #97	; 0x61
 8006f7a:	4359      	muls	r1, r3
 8006f7c:	f00c fee6 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8006f80:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
 8006f84:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
        return addValue(int2scaledX(x), int2scaledY(y));
 8006f88:	f06f 015f 	mvn.w	r1, #95	; 0x5f
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	fb0a f202 	mul.w	r2, sl, r2
 8006f92:	4359      	muls	r1, r3
 8006f94:	f00c feda 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8006f98:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
 8006f9c:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
        return addValue(int2scaledX(x), int2scaledY(y));
 8006fa0:	f06f 015d 	mvn.w	r1, #93	; 0x5d
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	437a      	muls	r2, r7
 8006fa8:	4359      	muls	r1, r3
 8006faa:	f00c fecf 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8006fae:	f06f 0124 	mvn.w	r1, #36	; 0x24
 8006fb2:	4628      	mov	r0, r5
        return i * scale;
 8006fb4:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8006fb8:	434a      	muls	r2, r1
 8006fba:	f06f 015b 	mvn.w	r1, #91	; 0x5b
 8006fbe:	4359      	muls	r1, r3
 8006fc0:	f00c fec4 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8006fc4:	f06f 0103 	mvn.w	r1, #3
 8006fc8:	4628      	mov	r0, r5
        return i * scale;
 8006fca:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8006fce:	434a      	muls	r2, r1
 8006fd0:	f06f 0159 	mvn.w	r1, #89	; 0x59
 8006fd4:	4359      	muls	r1, r3
 8006fd6:	f00c feb9 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8006fda:	211e      	movs	r1, #30
 8006fdc:	4628      	mov	r0, r5
        return i * scale;
 8006fde:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8006fe2:	434a      	muls	r2, r1
 8006fe4:	f06f 0157 	mvn.w	r1, #87	; 0x57
 8006fe8:	4359      	muls	r1, r3
 8006fea:	f00c feaf 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8006fee:	223b      	movs	r2, #59	; 0x3b
 8006ff0:	4628      	mov	r0, r5
        return i * scale;
 8006ff2:	e9d4 1357 	ldrd	r1, r3, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8006ff6:	fb08 f101 	mul.w	r1, r8, r1
 8006ffa:	435a      	muls	r2, r3
 8006ffc:	f00c fea6 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007000:	214d      	movs	r1, #77	; 0x4d
 8007002:	4628      	mov	r0, r5
        return i * scale;
 8007004:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007008:	434a      	muls	r2, r1
 800700a:	f06f 0153 	mvn.w	r1, #83	; 0x53
 800700e:	4359      	muls	r1, r3
 8007010:	f00c fe9c 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007014:	2252      	movs	r2, #82	; 0x52
 8007016:	4628      	mov	r0, r5
        return i * scale;
 8007018:	e9d4 1357 	ldrd	r1, r3, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800701c:	435a      	muls	r2, r3
 800701e:	f06f 0351 	mvn.w	r3, #81	; 0x51
 8007022:	4359      	muls	r1, r3
 8007024:	f00c fe92 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007028:	214a      	movs	r1, #74	; 0x4a
 800702a:	4628      	mov	r0, r5
        return i * scale;
 800702c:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
 8007030:	e016      	b.n	8007060 <_ZN17batScreenViewBaseC1Ev+0x424>
 8007032:	bf00      	nop
 8007034:	0802f540 	.word	0x0802f540
 8007038:	080308fc 	.word	0x080308fc
 800703c:	08030614 	.word	0x08030614
 8007040:	0802f3ec 	.word	0x0802f3ec
 8007044:	08030880 	.word	0x08030880
 8007048:	08030564 	.word	0x08030564
 800704c:	08030bcc 	.word	0x08030bcc
 8007050:	0802f528 	.word	0x0802f528
 8007054:	08006b99 	.word	0x08006b99
 8007058:	ffe3eaf1 	.word	0xffe3eaf1
 800705c:	ff1497c5 	.word	0xff1497c5
        return addValue(int2scaledX(x), int2scaledY(y));
 8007060:	434a      	muls	r2, r1
 8007062:	f06f 014f 	mvn.w	r1, #79	; 0x4f
 8007066:	4359      	muls	r1, r3
 8007068:	f00c fe70 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 800706c:	2038      	movs	r0, #56	; 0x38
 800706e:	f06f 014d 	mvn.w	r1, #77	; 0x4d
        return i * scale;
 8007072:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007076:	4342      	muls	r2, r0
 8007078:	4628      	mov	r0, r5
 800707a:	4359      	muls	r1, r3
 800707c:	f00c fe66 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007080:	2122      	movs	r1, #34	; 0x22
 8007082:	4628      	mov	r0, r5
        return i * scale;
 8007084:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007088:	434a      	muls	r2, r1
 800708a:	f06f 014b 	mvn.w	r1, #75	; 0x4b
 800708e:	4359      	muls	r1, r3
 8007090:	f00c fe5c 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007094:	210e      	movs	r1, #14
 8007096:	4628      	mov	r0, r5
        return i * scale;
 8007098:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800709c:	434a      	muls	r2, r1
 800709e:	f06f 0149 	mvn.w	r1, #73	; 0x49
 80070a2:	4359      	muls	r1, r3
 80070a4:	f00c fe52 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80070a8:	f06f 0147 	mvn.w	r1, #71	; 0x47
 80070ac:	4628      	mov	r0, r5
 80070ae:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
 80070b2:	4359      	muls	r1, r3
 80070b4:	f00c fe4a 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80070b8:	4628      	mov	r0, r5
        return i * scale;
 80070ba:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80070be:	fb09 f101 	mul.w	r1, r9, r1
 80070c2:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 80070c6:	f00c fe41 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80070ca:	f06f 0143 	mvn.w	r1, #67	; 0x43
 80070ce:	4628      	mov	r0, r5
        return i * scale;
 80070d0:	f06f 093d 	mvn.w	r9, #61	; 0x3d
 80070d4:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80070d8:	4359      	muls	r1, r3
 80070da:	0092      	lsls	r2, r2, #2
 80070dc:	f00c fe36 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80070e0:	2012      	movs	r0, #18
 80070e2:	f06f 0141 	mvn.w	r1, #65	; 0x41
        return i * scale;
 80070e6:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80070ea:	4342      	muls	r2, r0
 80070ec:	4628      	mov	r0, r5
 80070ee:	4359      	muls	r1, r3
 80070f0:	f00c fe2c 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80070f4:	2223      	movs	r2, #35	; 0x23
 80070f6:	4628      	mov	r0, r5
        return i * scale;
 80070f8:	e9d4 1357 	ldrd	r1, r3, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80070fc:	435a      	muls	r2, r3
 80070fe:	4379      	muls	r1, r7
 8007100:	2730      	movs	r7, #48	; 0x30
 8007102:	f00c fe23 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007106:	2231      	movs	r2, #49	; 0x31
 8007108:	4628      	mov	r0, r5
        return i * scale;
 800710a:	e9d4 1357 	ldrd	r1, r3, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800710e:	435a      	muls	r2, r3
 8007110:	fb09 f101 	mul.w	r1, r9, r1
 8007114:	f00c fe1a 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007118:	2336      	movs	r3, #54	; 0x36
 800711a:	4628      	mov	r0, r5
        return i * scale;
 800711c:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007120:	435a      	muls	r2, r3
 8007122:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 8007126:	4359      	muls	r1, r3
 8007128:	f00c fe10 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 800712c:	f06f 0139 	mvn.w	r1, #57	; 0x39
 8007130:	4628      	mov	r0, r5
        return i * scale;
 8007132:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007136:	437a      	muls	r2, r7
        return i * scale;
 8007138:	f06f 0735 	mvn.w	r7, #53	; 0x35
        return addValue(int2scaledX(x), int2scaledY(y));
 800713c:	4359      	muls	r1, r3
 800713e:	f00c fe05 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007142:	211e      	movs	r1, #30
 8007144:	4628      	mov	r0, r5
        return i * scale;
 8007146:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800714a:	434a      	muls	r2, r1
 800714c:	f06f 0137 	mvn.w	r1, #55	; 0x37
 8007150:	4359      	muls	r1, r3
 8007152:	f00c fdfb 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007156:	4628      	mov	r0, r5
        return i * scale;
 8007158:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800715c:	4379      	muls	r1, r7
 800715e:	0052      	lsls	r2, r2, #1
 8007160:	f00c fdf4 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007164:	f06f 0133 	mvn.w	r1, #51	; 0x33
 8007168:	4628      	mov	r0, r5
        return i * scale;
 800716a:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800716e:	4359      	muls	r1, r3
 8007170:	eba2 1242 	sub.w	r2, r2, r2, lsl #5
 8007174:	f00c fdea 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007178:	f06f 0131 	mvn.w	r1, #49	; 0x31
 800717c:	4628      	mov	r0, r5
        return i * scale;
 800717e:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007182:	fb09 f202 	mul.w	r2, r9, r2
        return i * scale;
 8007186:	f06f 0923 	mvn.w	r9, #35	; 0x23
        return addValue(int2scaledX(x), int2scaledY(y));
 800718a:	4359      	muls	r1, r3
 800718c:	f00c fdde 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007190:	f06f 012f 	mvn.w	r1, #47	; 0x2f
 8007194:	4628      	mov	r0, r5
        return i * scale;
 8007196:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800719a:	fb08 f202 	mul.w	r2, r8, r2
        return i * scale;
 800719e:	f06f 0819 	mvn.w	r8, #25
        return addValue(int2scaledX(x), int2scaledY(y));
 80071a2:	4359      	muls	r1, r3
 80071a4:	f00c fdd2 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80071a8:	f06f 0160 	mvn.w	r1, #96	; 0x60
 80071ac:	4628      	mov	r0, r5
        return i * scale;
 80071ae:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80071b2:	434a      	muls	r2, r1
 80071b4:	f06f 012d 	mvn.w	r1, #45	; 0x2d
 80071b8:	4359      	muls	r1, r3
 80071ba:	f00c fdc7 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80071be:	f06f 015e 	mvn.w	r1, #94	; 0x5e
 80071c2:	4628      	mov	r0, r5
        return i * scale;
 80071c4:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80071c8:	434a      	muls	r2, r1
 80071ca:	f06f 012b 	mvn.w	r1, #43	; 0x2b
 80071ce:	4359      	muls	r1, r3
 80071d0:	f00c fdbc 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80071d4:	f06f 0129 	mvn.w	r1, #41	; 0x29
 80071d8:	4628      	mov	r0, r5
        return i * scale;
 80071da:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80071de:	fb0a f202 	mul.w	r2, sl, r2
        return i * scale;
 80071e2:	f04f 0a14 	mov.w	sl, #20
        return addValue(int2scaledX(x), int2scaledY(y));
 80071e6:	4359      	muls	r1, r3
 80071e8:	f00c fdb0 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80071ec:	f06f 0127 	mvn.w	r1, #39	; 0x27
 80071f0:	4628      	mov	r0, r5
        return i * scale;
 80071f2:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80071f6:	437a      	muls	r2, r7
 80071f8:	4359      	muls	r1, r3
 80071fa:	f00c fda7 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80071fe:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
 8007202:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
        return addValue(int2scaledX(x), int2scaledY(y));
 8007206:	f06f 0125 	mvn.w	r1, #37	; 0x25
 800720a:	4628      	mov	r0, r5
 800720c:	4359      	muls	r1, r3
 800720e:	fb08 f202 	mul.w	r2, r8, r2
 8007212:	f00c fd9b 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007216:	4628      	mov	r0, r5
        return i * scale;
 8007218:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800721c:	fb09 f101 	mul.w	r1, r9, r1
 8007220:	4252      	negs	r2, r2
 8007222:	f00c fd93 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007226:	f06f 0121 	mvn.w	r1, #33	; 0x21
 800722a:	4628      	mov	r0, r5
        return i * scale;
 800722c:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007230:	4359      	muls	r1, r3
 8007232:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8007236:	f00c fd89 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 800723a:	f06f 031f 	mvn.w	r3, #31
        return addValue(int2scaledX(x), int2scaledY(y));
 800723e:	2017      	movs	r0, #23
        return i * scale;
 8007240:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007244:	4359      	muls	r1, r3
 8007246:	4342      	muls	r2, r0
 8007248:	4628      	mov	r0, r5
 800724a:	f00c fd7f 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 800724e:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
 8007252:	f8d4 115c 	ldr.w	r1, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007256:	f06f 001d 	mvn.w	r0, #29
 800725a:	fb0a f202 	mul.w	r2, sl, r2
 800725e:	4341      	muls	r1, r0
 8007260:	4628      	mov	r0, r5
 8007262:	f00c fd73 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007266:	f06f 001b 	mvn.w	r0, #27
        return i * scale;
 800726a:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800726e:	4341      	muls	r1, r0
 8007270:	00d2      	lsls	r2, r2, #3
 8007272:	4628      	mov	r0, r5
 8007274:	f00c fd6a 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007278:	4628      	mov	r0, r5
        return i * scale;
 800727a:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800727e:	fb08 f101 	mul.w	r1, r8, r1
 8007282:	eba2 02c2 	sub.w	r2, r2, r2, lsl #3
 8007286:	f00c fd61 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 800728a:	f06f 0812 	mvn.w	r8, #18
 800728e:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
        return addValue(int2scaledX(x), int2scaledY(y));
 8007292:	f06f 0017 	mvn.w	r0, #23
        return i * scale;
 8007296:	f8d4 115c 	ldr.w	r1, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800729a:	fb08 f202 	mul.w	r2, r8, r2
 800729e:	4341      	muls	r1, r0
 80072a0:	4628      	mov	r0, r5
 80072a2:	f00c fd53 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80072a6:	f06f 0016 	mvn.w	r0, #22
        return i * scale;
 80072aa:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80072ae:	4342      	muls	r2, r0
 80072b0:	f06f 0015 	mvn.w	r0, #21
 80072b4:	4341      	muls	r1, r0
 80072b6:	4628      	mov	r0, r5
 80072b8:	f00c fd48 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80072bc:	f06f 0010 	mvn.w	r0, #16
        return i * scale;
 80072c0:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80072c4:	4342      	muls	r2, r0
 80072c6:	f06f 0013 	mvn.w	r0, #19
 80072ca:	4341      	muls	r1, r0
 80072cc:	4628      	mov	r0, r5
 80072ce:	f00c fd3d 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80072d2:	f8d4 115c 	ldr.w	r1, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80072d6:	f06f 0011 	mvn.w	r0, #17
 80072da:	465a      	mov	r2, fp
 80072dc:	4341      	muls	r1, r0
 80072de:	4628      	mov	r0, r5
 80072e0:	f00c fd34 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80072e4:	2019      	movs	r0, #25
        return i * scale;
 80072e6:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80072ea:	4342      	muls	r2, r0
 80072ec:	f06f 000f 	mvn.w	r0, #15
 80072f0:	4341      	muls	r1, r0
 80072f2:	4628      	mov	r0, r5
 80072f4:	f00c fd2a 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80072f8:	2035      	movs	r0, #53	; 0x35
        return i * scale;
 80072fa:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80072fe:	4342      	muls	r2, r0
 8007300:	f06f 000d 	mvn.w	r0, #13
 8007304:	4341      	muls	r1, r0
 8007306:	4628      	mov	r0, r5
 8007308:	f00c fd20 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 800730c:	204e      	movs	r0, #78	; 0x4e
        return i * scale;
 800730e:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007312:	4342      	muls	r2, r0
 8007314:	f06f 000b 	mvn.w	r0, #11
 8007318:	4341      	muls	r1, r0
 800731a:	4628      	mov	r0, r5
 800731c:	f00c fd16 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007320:	205e      	movs	r0, #94	; 0x5e
        return i * scale;
 8007322:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007326:	4342      	muls	r2, r0
 8007328:	f06f 0009 	mvn.w	r0, #9
 800732c:	4341      	muls	r1, r0
 800732e:	4628      	mov	r0, r5
 8007330:	f00c fd0c 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007334:	2061      	movs	r0, #97	; 0x61
        return i * scale;
 8007336:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800733a:	4342      	muls	r2, r0
 800733c:	f06f 0007 	mvn.w	r0, #7
 8007340:	4341      	muls	r1, r0
 8007342:	4628      	mov	r0, r5
 8007344:	f00c fd02 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007348:	2057      	movs	r0, #87	; 0x57
        return i * scale;
 800734a:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800734e:	4342      	muls	r2, r0
 8007350:	f06f 0005 	mvn.w	r0, #5
 8007354:	4341      	muls	r1, r0
 8007356:	4628      	mov	r0, r5
 8007358:	f00c fcf8 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 800735c:	f06f 0003 	mvn.w	r0, #3
        return i * scale;
 8007360:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007364:	4341      	muls	r1, r0
 8007366:	ebc2 1282 	rsb	r2, r2, r2, lsl #6
 800736a:	4628      	mov	r0, r5
 800736c:	f00c fcee 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007370:	f06f 0301 	mvn.w	r3, #1
 8007374:	4628      	mov	r0, r5
        return i * scale;
 8007376:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800737a:	4359      	muls	r1, r3
 800737c:	0152      	lsls	r2, r2, #5
 800737e:	f00c fce5 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007382:	465a      	mov	r2, fp
 8007384:	4659      	mov	r1, fp
 8007386:	4628      	mov	r0, r5
 8007388:	f00c fce0 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 800738c:	f06f 001c 	mvn.w	r0, #28
        return i * scale;
 8007390:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007394:	4342      	muls	r2, r0
 8007396:	0049      	lsls	r1, r1, #1
 8007398:	4628      	mov	r0, r5
 800739a:	f00c fcd7 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 800739e:	f06f 002e 	mvn.w	r0, #46	; 0x2e
        return i * scale;
 80073a2:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80073a6:	4342      	muls	r2, r0
 80073a8:	0089      	lsls	r1, r1, #2
 80073aa:	4628      	mov	r0, r5
 80073ac:	f00c fcce 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80073b0:	2006      	movs	r0, #6
        return i * scale;
 80073b2:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80073b6:	437a      	muls	r2, r7
 80073b8:	270e      	movs	r7, #14
 80073ba:	4341      	muls	r1, r0
 80073bc:	4628      	mov	r0, r5
 80073be:	f00c fcc5 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80073c2:	f06f 0030 	mvn.w	r0, #48	; 0x30
        return i * scale;
 80073c6:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80073ca:	4342      	muls	r2, r0
 80073cc:	00c9      	lsls	r1, r1, #3
 80073ce:	4628      	mov	r0, r5
 80073d0:	f00c fcbc 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80073d4:	200a      	movs	r0, #10
        return i * scale;
 80073d6:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80073da:	fb09 f202 	mul.w	r2, r9, r2
 80073de:	4341      	muls	r1, r0
 80073e0:	4628      	mov	r0, r5
 80073e2:	f00c fcb3 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80073e6:	200c      	movs	r0, #12
        return i * scale;
 80073e8:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80073ec:	fb08 f202 	mul.w	r2, r8, r2
        return i * scale;
 80073f0:	f04f 0834 	mov.w	r8, #52	; 0x34
        return addValue(int2scaledX(x), int2scaledY(y));
 80073f4:	4341      	muls	r1, r0
 80073f6:	4628      	mov	r0, r5
 80073f8:	f00c fca8 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80073fc:	f06f 0003 	mvn.w	r0, #3
        return i * scale;
 8007400:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007404:	4342      	muls	r2, r0
 8007406:	4628      	mov	r0, r5
 8007408:	4379      	muls	r1, r7
 800740a:	2712      	movs	r7, #18
 800740c:	f00c fc9e 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007410:	4628      	mov	r0, r5
        return i * scale;
 8007412:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007416:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800741a:	0109      	lsls	r1, r1, #4
 800741c:	f00c fc96 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8007420:	f8d4 115c 	ldr.w	r1, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007424:	465a      	mov	r2, fp
 8007426:	4628      	mov	r0, r5
 8007428:	4379      	muls	r1, r7
 800742a:	f06f 073b 	mvn.w	r7, #59	; 0x3b
 800742e:	f00c fc8d 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007432:	f06f 000c 	mvn.w	r0, #12
        return i * scale;
 8007436:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800743a:	4342      	muls	r2, r0
 800743c:	4628      	mov	r0, r5
 800743e:	fb0a f101 	mul.w	r1, sl, r1
        color = newColor;
 8007442:	f8df a514 	ldr.w	sl, [pc, #1300]	; 8007958 <_ZN17batScreenViewBaseC1Ev+0xd1c>
 8007446:	f00c fc81 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 800744a:	f06f 0020 	mvn.w	r0, #32
        return i * scale;
 800744e:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007452:	4342      	muls	r2, r0
 8007454:	2016      	movs	r0, #22
 8007456:	4341      	muls	r1, r0
 8007458:	4628      	mov	r0, r5
 800745a:	f00c fc77 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 800745e:	f06f 0036 	mvn.w	r0, #54	; 0x36
        return i * scale;
 8007462:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007466:	4342      	muls	r2, r0
 8007468:	2018      	movs	r0, #24
 800746a:	4341      	muls	r1, r0
 800746c:	4628      	mov	r0, r5
 800746e:	f00c fc6d 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007472:	f06f 0048 	mvn.w	r0, #72	; 0x48
        return i * scale;
 8007476:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800747a:	4342      	muls	r2, r0
 800747c:	201a      	movs	r0, #26
 800747e:	4341      	muls	r1, r0
 8007480:	4628      	mov	r0, r5
 8007482:	f00c fc63 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007486:	f06f 0051 	mvn.w	r0, #81	; 0x51
        return i * scale;
 800748a:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800748e:	4342      	muls	r2, r0
 8007490:	201c      	movs	r0, #28
 8007492:	4341      	muls	r1, r0
 8007494:	4628      	mov	r0, r5
 8007496:	f00c fc59 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 800749a:	231e      	movs	r3, #30
 800749c:	f06f 004c 	mvn.w	r0, #76	; 0x4c
        return i * scale;
 80074a0:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80074a4:	4359      	muls	r1, r3
 80074a6:	4342      	muls	r2, r0
 80074a8:	4628      	mov	r0, r5
 80074aa:	f00c fc4f 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80074ae:	4628      	mov	r0, r5
        return i * scale;
 80074b0:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80074b4:	437a      	muls	r2, r7
 80074b6:	0149      	lsls	r1, r1, #5
 80074b8:	f00c fc48 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80074bc:	2722      	movs	r7, #34	; 0x22
 80074be:	f06f 031f 	mvn.w	r3, #31
 80074c2:	4628      	mov	r0, r5
        return i * scale;
 80074c4:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80074c8:	435a      	muls	r2, r3
 80074ca:	4379      	muls	r1, r7
        return i * scale;
 80074cc:	2724      	movs	r7, #36	; 0x24
        return addValue(int2scaledX(x), int2scaledY(y));
 80074ce:	f00c fc3d 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80074d2:	4628      	mov	r0, r5
        return i * scale;
 80074d4:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80074d8:	4379      	muls	r1, r7
 80074da:	0052      	lsls	r2, r2, #1
 80074dc:	f00c fc36 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80074e0:	4628      	mov	r0, r5
        return i * scale;
 80074e2:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80074e6:	437a      	muls	r2, r7
 80074e8:	2726      	movs	r7, #38	; 0x26
 80074ea:	4379      	muls	r1, r7
 80074ec:	2730      	movs	r7, #48	; 0x30
 80074ee:	f00c fc2d 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80074f2:	2128      	movs	r1, #40	; 0x28
 80074f4:	4628      	mov	r0, r5
        return i * scale;
 80074f6:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80074fa:	4359      	muls	r1, r3
 80074fc:	ebc2 1282 	rsb	r2, r2, r2, lsl #6
 8007500:	f00c fc24 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007504:	214f      	movs	r1, #79	; 0x4f
 8007506:	4628      	mov	r0, r5
        return i * scale;
 8007508:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800750c:	434a      	muls	r2, r1
 800750e:	212a      	movs	r1, #42	; 0x2a
 8007510:	4359      	muls	r1, r3
 8007512:	f00c fc1b 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007516:	2151      	movs	r1, #81	; 0x51
 8007518:	4628      	mov	r0, r5
        return i * scale;
 800751a:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800751e:	434a      	muls	r2, r1
 8007520:	212c      	movs	r1, #44	; 0x2c
 8007522:	4359      	muls	r1, r3
 8007524:	f00c fc12 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007528:	2147      	movs	r1, #71	; 0x47
 800752a:	4628      	mov	r0, r5
        return i * scale;
 800752c:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007530:	434a      	muls	r2, r1
 8007532:	212e      	movs	r1, #46	; 0x2e
 8007534:	4359      	muls	r1, r3
 8007536:	f00c fc09 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 800753a:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
 800753e:	f8d4 115c 	ldr.w	r1, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007542:	4628      	mov	r0, r5
 8007544:	fb08 f202 	mul.w	r2, r8, r2
 8007548:	4379      	muls	r1, r7
        return i * scale;
 800754a:	2732      	movs	r7, #50	; 0x32
        return addValue(int2scaledX(x), int2scaledY(y));
 800754c:	f00c fbfe 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007550:	231e      	movs	r3, #30
 8007552:	4628      	mov	r0, r5
        return i * scale;
 8007554:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007558:	435a      	muls	r2, r3
 800755a:	4379      	muls	r1, r7
 800755c:	f00c fbf6 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007560:	220b      	movs	r2, #11
 8007562:	4628      	mov	r0, r5
        return i * scale;
 8007564:	e9d4 1357 	ldrd	r1, r3, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007568:	435a      	muls	r2, r3
 800756a:	fb08 f101 	mul.w	r1, r8, r1
 800756e:	f00c fbed 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007572:	2336      	movs	r3, #54	; 0x36
 8007574:	4628      	mov	r0, r5
        return i * scale;
 8007576:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800757a:	4359      	muls	r1, r3
 800757c:	4252      	negs	r2, r2
 800757e:	f00c fbe5 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007582:	f06f 0301 	mvn.w	r3, #1
 8007586:	2038      	movs	r0, #56	; 0x38
        return i * scale;
 8007588:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800758c:	4341      	muls	r1, r0
 800758e:	4628      	mov	r0, r5
 8007590:	435a      	muls	r2, r3
 8007592:	f00c fbdb 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007596:	2006      	movs	r0, #6
 8007598:	213a      	movs	r1, #58	; 0x3a
        return i * scale;
 800759a:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800759e:	4342      	muls	r2, r0
 80075a0:	4628      	mov	r0, r5
 80075a2:	4359      	muls	r1, r3
 80075a4:	f00c fbd2 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80075a8:	2115      	movs	r1, #21
 80075aa:	4628      	mov	r0, r5
        return i * scale;
 80075ac:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80075b0:	434a      	muls	r2, r1
 80075b2:	213c      	movs	r1, #60	; 0x3c
 80075b4:	4359      	muls	r1, r3
 80075b6:	f00c fbc9 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80075ba:	2125      	movs	r1, #37	; 0x25
 80075bc:	4628      	mov	r0, r5
        return i * scale;
 80075be:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80075c2:	434a      	muls	r2, r1
 80075c4:	213e      	movs	r1, #62	; 0x3e
 80075c6:	4359      	muls	r1, r3
 80075c8:	f00c fbc0 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80075cc:	4628      	mov	r0, r5
        return i * scale;
 80075ce:	e9d4 1257 	ldrd	r1, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80075d2:	437a      	muls	r2, r7
 80075d4:	0189      	lsls	r1, r1, #6
 80075d6:	f00c fbb9 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80075da:	2136      	movs	r1, #54	; 0x36
 80075dc:	4628      	mov	r0, r5
        return i * scale;
 80075de:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80075e2:	434a      	muls	r2, r1
 80075e4:	2142      	movs	r1, #66	; 0x42
 80075e6:	4359      	muls	r1, r3
 80075e8:	f00c fbb0 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80075ec:	212e      	movs	r1, #46	; 0x2e
 80075ee:	4628      	mov	r0, r5
        return i * scale;
 80075f0:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80075f4:	434a      	muls	r2, r1
 80075f6:	2144      	movs	r1, #68	; 0x44
 80075f8:	4359      	muls	r1, r3
 80075fa:	f00c fba7 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80075fe:	211a      	movs	r1, #26
 8007600:	4628      	mov	r0, r5
        return i * scale;
 8007602:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007606:	434a      	muls	r2, r1
 8007608:	2146      	movs	r1, #70	; 0x46
 800760a:	4359      	muls	r1, r3
 800760c:	f00c fb9e 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007610:	2148      	movs	r1, #72	; 0x48
 8007612:	4628      	mov	r0, r5
        return i * scale;
 8007614:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007618:	4359      	muls	r1, r3
 800761a:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 800761e:	f00c fb95 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007622:	4649      	mov	r1, r9
 8007624:	4628      	mov	r0, r5
 8007626:	f8df 9334 	ldr.w	r9, [pc, #820]	; 800795c <_ZN17batScreenViewBaseC1Ev+0xd20>
        return i * scale;
 800762a:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800762e:	434a      	muls	r2, r1
 8007630:	214a      	movs	r1, #74	; 0x4a
 8007632:	4359      	muls	r1, r3
 8007634:	f00c fb8a 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007638:	f06f 0142 	mvn.w	r1, #66	; 0x42
 800763c:	4628      	mov	r0, r5
        return i * scale;
 800763e:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007642:	434a      	muls	r2, r1
 8007644:	214c      	movs	r1, #76	; 0x4c
 8007646:	4359      	muls	r1, r3
 8007648:	f00c fb80 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 800764c:	f06f 0158 	mvn.w	r1, #88	; 0x58
 8007650:	4628      	mov	r0, r5
        return i * scale;
 8007652:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007656:	434a      	muls	r2, r1
 8007658:	214e      	movs	r1, #78	; 0x4e
 800765a:	4359      	muls	r1, r3
 800765c:	f00c fb76 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007660:	f06f 0161 	mvn.w	r1, #97	; 0x61
 8007664:	4628      	mov	r0, r5
        return i * scale;
 8007666:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800766a:	434a      	muls	r2, r1
 800766c:	2150      	movs	r1, #80	; 0x50
 800766e:	4359      	muls	r1, r3
 8007670:	f00c fb6c 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007674:	f06f 015c 	mvn.w	r1, #92	; 0x5c
 8007678:	4628      	mov	r0, r5
        return i * scale;
 800767a:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 800767e:	434a      	muls	r2, r1
 8007680:	2152      	movs	r1, #82	; 0x52
 8007682:	4359      	muls	r1, r3
 8007684:	f00c fb62 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 8007688:	f06f 014a 	mvn.w	r1, #74	; 0x4a
 800768c:	4628      	mov	r0, r5
        return i * scale;
 800768e:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007692:	434a      	muls	r2, r1
 8007694:	2154      	movs	r1, #84	; 0x54
 8007696:	4359      	muls	r1, r3
 8007698:	f00c fb58 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 800769c:	f06f 0131 	mvn.w	r1, #49	; 0x31
 80076a0:	4628      	mov	r0, r5
        return i * scale;
 80076a2:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80076a6:	434a      	muls	r2, r1
 80076a8:	2156      	movs	r1, #86	; 0x56
 80076aa:	4359      	muls	r1, r3
 80076ac:	f00c fb4e 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80076b0:	f06f 0115 	mvn.w	r1, #21
 80076b4:	4628      	mov	r0, r5
        return i * scale;
 80076b6:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80076ba:	434a      	muls	r2, r1
 80076bc:	2158      	movs	r1, #88	; 0x58
 80076be:	4359      	muls	r1, r3
 80076c0:	f00c fb44 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80076c4:	215a      	movs	r1, #90	; 0x5a
 80076c6:	4628      	mov	r0, r5
        return i * scale;
 80076c8:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80076cc:	4359      	muls	r1, r3
 80076ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80076d2:	f00c fb3b 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80076d6:	2113      	movs	r1, #19
 80076d8:	4628      	mov	r0, r5
        return i * scale;
 80076da:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80076de:	434a      	muls	r2, r1
 80076e0:	215c      	movs	r1, #92	; 0x5c
 80076e2:	4359      	muls	r1, r3
 80076e4:	f00c fb32 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80076e8:	2117      	movs	r1, #23
 80076ea:	4628      	mov	r0, r5
        return i * scale;
 80076ec:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 80076f0:	434a      	muls	r2, r1
 80076f2:	215e      	movs	r1, #94	; 0x5e
 80076f4:	4359      	muls	r1, r3
 80076f6:	f00c fb29 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 80076fa:	2112      	movs	r1, #18
 80076fc:	4628      	mov	r0, r5
        return i * scale;
 80076fe:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007702:	434a      	muls	r2, r1
 8007704:	2160      	movs	r1, #96	; 0x60
 8007706:	4359      	muls	r1, r3
 8007708:	f00c fb20 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 800770c:	2162      	movs	r1, #98	; 0x62
 800770e:	4628      	mov	r0, r5
        return i * scale;
 8007710:	e9d4 3257 	ldrd	r3, r2, [r4, #348]	; 0x15c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007714:	4359      	muls	r1, r3
 8007716:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800771a:	f00c fb17 	bl	8013d4c <_ZN8touchgfx9GraphData8addValueEii>
 800771e:	4629      	mov	r1, r5
 8007720:	4630      	mov	r0, r6
        boundingArea = calculateBoundingArea();
 8007722:	ad04      	add	r5, sp, #16
 8007724:	f00a f9ba 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    tch_LOGO.setXY(595, 432);
 8007728:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800772c:	ee1b 0a90 	vmov	r0, s23
 8007730:	f240 2153 	movw	r1, #595	; 0x253
 8007734:	f7fe fc0a 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8007738:	2339      	movs	r3, #57	; 0x39
    tch_LOGO.setBitmap(touchgfx::Bitmap(BITMAP_TCHGFX_LOGO_ID));
 800773a:	a90a      	add	r1, sp, #40	; 0x28
 800773c:	ee1b 0a90 	vmov	r0, s23
 8007740:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8007744:	f00d ff11 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8007748:	ee1b 1a90 	vmov	r1, s23
 800774c:	4630      	mov	r0, r6
 800774e:	f00a f9a5 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8007752:	2327      	movs	r3, #39	; 0x27
    drone.setBitmap(touchgfx::Bitmap(BITMAP_FLY_ID));
 8007754:	a90a      	add	r1, sp, #40	; 0x28
 8007756:	ee1a 0a90 	vmov	r0, s21
 800775a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 800775e:	f00d ff04 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    drone.setPosition(91, 363, 236, 114);
 8007762:	2372      	movs	r3, #114	; 0x72
 8007764:	f240 126b 	movw	r2, #363	; 0x16b
 8007768:	ee1a 0a90 	vmov	r0, s21
 800776c:	215b      	movs	r1, #91	; 0x5b
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	23ec      	movs	r3, #236	; 0xec
 8007772:	f7fd fa19 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
    drone.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8007776:	4659      	mov	r1, fp
 8007778:	ee1a 0a90 	vmov	r0, s21
 800777c:	f00c fe76 	bl	801446c <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8007780:	ee1a 1a90 	vmov	r1, s21
 8007784:	4630      	mov	r0, r6
 8007786:	f00a f989 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    design.setXY(635, 409);
 800778a:	f240 1299 	movw	r2, #409	; 0x199
 800778e:	ee18 0a10 	vmov	r0, s16
 8007792:	f240 217b 	movw	r1, #635	; 0x27b
 8007796:	f7fe fbd9 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 800779a:	4b6d      	ldr	r3, [pc, #436]	; (8007950 <_ZN17batScreenViewBaseC1Ev+0xd14>)
        boundingArea = calculateBoundingArea();
 800779c:	ee18 1a10 	vmov	r1, s16
 80077a0:	4628      	mov	r0, r5
        color = newColor;
 80077a2:	f8c4 365c 	str.w	r3, [r4, #1628]	; 0x65c
        linespace = space;
 80077a6:	f8a4 b660 	strh.w	fp, [r4, #1632]	; 0x660
        boundingArea = calculateBoundingArea();
 80077aa:	f00d f94d 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80077ae:	ee18 3a10 	vmov	r3, s16
 80077b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80077b6:	333c      	adds	r3, #60	; 0x3c
 80077b8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80077bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80077c0:	230f      	movs	r3, #15
    design.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ZKA8));
 80077c2:	a90a      	add	r1, sp, #40	; 0x28
 80077c4:	ee18 0a10 	vmov	r0, s16
 80077c8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80077cc:	f00d fbd6 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80077d0:	ee18 1a10 	vmov	r1, s16
 80077d4:	4630      	mov	r0, r6
 80077d6:	f00a f961 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    batState.setXY(55, 194);
 80077da:	22c2      	movs	r2, #194	; 0xc2
 80077dc:	ee18 0a90 	vmov	r0, s17
 80077e0:	2137      	movs	r1, #55	; 0x37
 80077e2:	f7fe fbb3 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 80077e6:	ee18 1a90 	vmov	r1, s17
 80077ea:	4628      	mov	r0, r5
        color = newColor;
 80077ec:	f8c4 a6a4 	str.w	sl, [r4, #1700]	; 0x6a4
        linespace = space;
 80077f0:	f8a4 b6a8 	strh.w	fp, [r4, #1704]	; 0x6a8
        boundingArea = calculateBoundingArea();
 80077f4:	f00d f928 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80077f8:	ee18 3a90 	vmov	r3, s17
 80077fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007800:	333c      	adds	r3, #60	; 0x3c
 8007802:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8007806:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800780a:	2308      	movs	r3, #8
    batState.setTypedText(touchgfx::TypedText(T___SINGLEUSE_FCEW));
 800780c:	a90a      	add	r1, sp, #40	; 0x28
 800780e:	ee18 0a90 	vmov	r0, s17
 8007812:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8007816:	f00d fbb1 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800781a:	ee18 1a90 	vmov	r1, s17
 800781e:	4630      	mov	r0, r6
 8007820:	f00a f93c 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    batPercentage.setXY(54, 150);
 8007824:	2296      	movs	r2, #150	; 0x96
 8007826:	ee19 0a10 	vmov	r0, s18
 800782a:	2136      	movs	r1, #54	; 0x36
 800782c:	f7fe fb8e 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8007830:	ee19 1a10 	vmov	r1, s18
 8007834:	4628      	mov	r0, r5
        color = newColor;
 8007836:	f8c4 a6ec 	str.w	sl, [r4, #1772]	; 0x6ec
        linespace = space;
 800783a:	f8a4 b6f0 	strh.w	fp, [r4, #1776]	; 0x6f0
        boundingArea = calculateBoundingArea();
 800783e:	f00d f903 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8007842:	ee19 3a10 	vmov	r3, s18
 8007846:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800784a:	333c      	adds	r3, #60	; 0x3c
 800784c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8007850:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007854:	2307      	movs	r3, #7
    batPercentage.setTypedText(touchgfx::TypedText(T___SINGLEUSE_O5ES));
 8007856:	a90a      	add	r1, sp, #40	; 0x28
 8007858:	ee19 0a10 	vmov	r0, s18
 800785c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8007860:	f00d fb8c 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007864:	ee19 1a10 	vmov	r1, s18
 8007868:	4630      	mov	r0, r6
 800786a:	f00a f917 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    voltageMonitor.setXY(220, 136);
 800786e:	2288      	movs	r2, #136	; 0x88
 8007870:	ee19 0a90 	vmov	r0, s19
 8007874:	21dc      	movs	r1, #220	; 0xdc
 8007876:	f7fe fb69 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 800787a:	4b36      	ldr	r3, [pc, #216]	; (8007954 <_ZN17batScreenViewBaseC1Ev+0xd18>)
        boundingArea = calculateBoundingArea();
 800787c:	ee19 1a90 	vmov	r1, s19
 8007880:	4628      	mov	r0, r5
        color = newColor;
 8007882:	f8c4 3734 	str.w	r3, [r4, #1844]	; 0x734
        linespace = space;
 8007886:	f8a4 b738 	strh.w	fp, [r4, #1848]	; 0x738
        boundingArea = calculateBoundingArea();
 800788a:	f00d f8dd 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800788e:	ee19 3a90 	vmov	r3, s19
 8007892:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007896:	333c      	adds	r3, #60	; 0x3c
 8007898:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800789c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80078a0:	f04f 0306 	mov.w	r3, #6
    voltageMonitor.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XXI1));
 80078a4:	a90a      	add	r1, sp, #40	; 0x28
 80078a6:	ee19 0a90 	vmov	r0, s19
 80078aa:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80078ae:	f00d fb65 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80078b2:	ee19 1a90 	vmov	r1, s19
 80078b6:	4630      	mov	r0, r6
 80078b8:	f00a f8f0 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Bat.setXY(40, 51);
 80078bc:	2233      	movs	r2, #51	; 0x33
 80078be:	ee1a 0a10 	vmov	r0, s20
 80078c2:	2128      	movs	r1, #40	; 0x28
 80078c4:	f7fe fb42 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80078c8:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 80078cc:	ee1a 1a10 	vmov	r1, s20
 80078d0:	4628      	mov	r0, r5
        color = newColor;
 80078d2:	f8c4 377c 	str.w	r3, [r4, #1916]	; 0x77c
        linespace = space;
 80078d6:	f8a4 b780 	strh.w	fp, [r4, #1920]	; 0x780
        boundingArea = calculateBoundingArea();
 80078da:	f00d f8b5 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80078de:	ee1a 3a10 	vmov	r3, s20
 80078e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80078e6:	333c      	adds	r3, #60	; 0x3c
 80078e8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80078ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80078f0:	2310      	movs	r3, #16
    Bat.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3OZA));
 80078f2:	a90a      	add	r1, sp, #40	; 0x28
 80078f4:	ee1a 0a10 	vmov	r0, s20
 80078f8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80078fc:	f00d fb3e 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007900:	ee1a 1a10 	vmov	r1, s20
 8007904:	4630      	mov	r0, r6
 8007906:	f00a f8c9 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    returnBut.setXY(0, 400);
 800790a:	4659      	mov	r1, fp
 800790c:	ee1b 0a10 	vmov	r0, s22
 8007910:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007914:	f7fe fb1a 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8007918:	2333      	movs	r3, #51	; 0x33
    returnBut.setBitmaps(touchgfx::Bitmap(BITMAP_RETURN1_ID), touchgfx::Bitmap(BITMAP_RETURN2_ID));
 800791a:	aa0a      	add	r2, sp, #40	; 0x28
 800791c:	a909      	add	r1, sp, #36	; 0x24
 800791e:	ee1b 0a10 	vmov	r0, s22
 8007922:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8007926:	f8ad 8028 	strh.w	r8, [sp, #40]	; 0x28
 800792a:	f00d fd00 	bl	801532e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    returnBut.setAction(buttonCallback);
 800792e:	f504 535a 	add.w	r3, r4, #13952	; 0x3680
 8007932:	4630      	mov	r0, r6
 8007934:	ee1b 1a10 	vmov	r1, s22
 8007938:	3328      	adds	r3, #40	; 0x28
        action = &callback;
 800793a:	f8c4 37bc 	str.w	r3, [r4, #1980]	; 0x7bc
 800793e:	f00a f8ad 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8007942:	4620      	mov	r0, r4
 8007944:	b00d      	add	sp, #52	; 0x34
 8007946:	ecbd 8b0c 	vpop	{d8-d13}
 800794a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800794e:	bf00      	nop
 8007950:	ff858585 	.word	0xff858585
 8007954:	ff808080 	.word	0xff808080
 8007958:	ff4a4a4a 	.word	0xff4a4a4a
 800795c:	0802e2a4 	.word	0x0802e2a4

08007960 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8007960:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8007962:	4770      	bx	lr

08007964 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8007964:	4770      	bx	lr

08007966 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8007966:	b510      	push	{r4, lr}
 8007968:	4604      	mov	r4, r0
 800796a:	214c      	movs	r1, #76	; 0x4c
 800796c:	f023 f829 	bl	802a9c2 <_ZdlPvj>
 8007970:	4620      	mov	r0, r4
 8007972:	bd10      	pop	{r4, pc}

08007974 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 8007974:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 8007976:	f7fa fe5e 	bl	8002636 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 800797a:	bd08      	pop	{r3, pc}

0800797c <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 800797c:	2200      	movs	r2, #0
 800797e:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 8007982:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8007984:	e9c0 2100 	strd	r2, r1, [r0]
    }
 8007988:	4770      	bx	lr
	...

0800798c <_ZN8touchgfx8DrawableC1Ev>:
          visible(true)
 800798c:	4a07      	ldr	r2, [pc, #28]	; (80079ac <_ZN8touchgfx8DrawableC1Ev+0x20>)
 800798e:	6002      	str	r2, [r0, #0]
 8007990:	2200      	movs	r2, #0
 8007992:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8007996:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 800799a:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 800799e:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 80079a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079a6:	8482      	strh	r2, [r0, #36]	; 0x24
    }
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	08030d84 	.word	0x08030d84

080079b0 <_ZN20firstScreeenViewBaseD1Ev>:
}

firstScreeenViewBase::~firstScreeenViewBase()
{

}
 80079b0:	4770      	bx	lr

080079b2 <_ZN20firstScreeenViewBase11setupScreenEv>:

void firstScreeenViewBase::setupScreen()
{
    transitionBegins();
 80079b2:	6803      	ldr	r3, [r0, #0]
 80079b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b6:	4718      	bx	r3

080079b8 <_ZN8touchgfx12FadeAnimatorINS_3BoxEE21setFadeAnimationDelayEt>:
        fadeAnimationDelay = delay;
 80079b8:	8601      	strh	r1, [r0, #48]	; 0x30
    }
 80079ba:	4770      	bx	lr

080079bc <_ZN8touchgfx8CallbackI20firstScreeenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80079bc:	4770      	bx	lr

080079be <_ZN8touchgfx8CallbackI20firstScreeenViewBaseRKNS_12FadeAnimatorINS_3BoxEEEvvED1Ev>:
 80079be:	4770      	bx	lr

080079c0 <_ZN8touchgfx12FadeAnimatorINS_5ImageEED1Ev>:
class FadeAnimator : public T
 80079c0:	4770      	bx	lr

080079c2 <_ZN8touchgfx12FadeAnimatorINS_3BoxEED1Ev>:
 80079c2:	4770      	bx	lr

080079c4 <_ZN8touchgfx8CallbackI20firstScreeenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7executeES6_>:
    virtual void execute(T1 t1)
 80079c4:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 80079c6:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80079c8:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80079ca:	68c2      	ldr	r2, [r0, #12]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	1055      	asrs	r5, r2, #1
 80079d0:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80079d4:	07d2      	lsls	r2, r2, #31
 80079d6:	bf48      	it	mi
 80079d8:	5962      	ldrmi	r2, [r4, r5]
    }
 80079da:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80079dc:	bf48      	it	mi
 80079de:	58d3      	ldrmi	r3, [r2, r3]
 80079e0:	4718      	bx	r3

080079e2 <_ZNK8touchgfx8CallbackI20firstScreeenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 80079e2:	6843      	ldr	r3, [r0, #4]
 80079e4:	b12b      	cbz	r3, 80079f2 <_ZNK8touchgfx8CallbackI20firstScreeenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7isValidEv+0x10>
 80079e6:	6883      	ldr	r3, [r0, #8]
 80079e8:	b92b      	cbnz	r3, 80079f6 <_ZNK8touchgfx8CallbackI20firstScreeenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7isValidEv+0x14>
 80079ea:	68c0      	ldr	r0, [r0, #12]
 80079ec:	f000 0001 	and.w	r0, r0, #1
 80079f0:	4770      	bx	lr
 80079f2:	4618      	mov	r0, r3
 80079f4:	4770      	bx	lr
 80079f6:	2001      	movs	r0, #1
    }
 80079f8:	4770      	bx	lr

080079fa <_ZN8touchgfx8CallbackI20firstScreeenViewBaseRKNS_12FadeAnimatorINS_3BoxEEEvvE7executeES6_>:
    virtual void execute(T1 t1)
 80079fa:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 80079fc:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80079fe:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8007a00:	68c2      	ldr	r2, [r0, #12]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	1055      	asrs	r5, r2, #1
 8007a06:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8007a0a:	07d2      	lsls	r2, r2, #31
 8007a0c:	bf48      	it	mi
 8007a0e:	5962      	ldrmi	r2, [r4, r5]
    }
 8007a10:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8007a12:	bf48      	it	mi
 8007a14:	58d3      	ldrmi	r3, [r2, r3]
 8007a16:	4718      	bx	r3

08007a18 <_ZNK8touchgfx8CallbackI20firstScreeenViewBaseRKNS_12FadeAnimatorINS_3BoxEEEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8007a18:	6843      	ldr	r3, [r0, #4]
 8007a1a:	b12b      	cbz	r3, 8007a28 <_ZNK8touchgfx8CallbackI20firstScreeenViewBaseRKNS_12FadeAnimatorINS_3BoxEEEvvE7isValidEv+0x10>
 8007a1c:	6883      	ldr	r3, [r0, #8]
 8007a1e:	b92b      	cbnz	r3, 8007a2c <_ZNK8touchgfx8CallbackI20firstScreeenViewBaseRKNS_12FadeAnimatorINS_3BoxEEEvvE7isValidEv+0x14>
 8007a20:	68c0      	ldr	r0, [r0, #12]
 8007a22:	f000 0001 	and.w	r0, r0, #1
 8007a26:	4770      	bx	lr
 8007a28:	4618      	mov	r0, r3
 8007a2a:	4770      	bx	lr
 8007a2c:	2001      	movs	r0, #1
    }
 8007a2e:	4770      	bx	lr

08007a30 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21setFadeAnimationDelayEt>:
        fadeAnimationDelay = delay;
 8007a30:	8581      	strh	r1, [r0, #44]	; 0x2c
    }
 8007a32:	4770      	bx	lr

08007a34 <_ZNK8touchgfx12FadeAnimatorINS_5ImageEE21getFadeAnimationDelayEv>:
    }
 8007a34:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
 8007a36:	4770      	bx	lr

08007a38 <_ZNK8touchgfx12FadeAnimatorINS_3BoxEE21getFadeAnimationDelayEv>:
 8007a38:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 8007a3a:	4770      	bx	lr

08007a3c <_ZN8touchgfx12FadeAnimatorINS_3BoxEED0Ev>:
class FadeAnimator : public T
 8007a3c:	b510      	push	{r4, lr}
 8007a3e:	4604      	mov	r4, r0
 8007a40:	2140      	movs	r1, #64	; 0x40
 8007a42:	f022 ffbe 	bl	802a9c2 <_ZdlPvj>
 8007a46:	4620      	mov	r0, r4
 8007a48:	bd10      	pop	{r4, pc}

08007a4a <_ZN8touchgfx12FadeAnimatorINS_5ImageEED0Ev>:
 8007a4a:	b510      	push	{r4, lr}
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	213c      	movs	r1, #60	; 0x3c
 8007a50:	f022 ffb7 	bl	802a9c2 <_ZdlPvj>
 8007a54:	4620      	mov	r0, r4
 8007a56:	bd10      	pop	{r4, pc}

08007a58 <_ZN8touchgfx8CallbackI20firstScreeenViewBaseRKNS_12FadeAnimatorINS_3BoxEEEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8007a58:	b510      	push	{r4, lr}
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	2110      	movs	r1, #16
 8007a5e:	f022 ffb0 	bl	802a9c2 <_ZdlPvj>
 8007a62:	4620      	mov	r0, r4
 8007a64:	bd10      	pop	{r4, pc}

08007a66 <_ZN8touchgfx8CallbackI20firstScreeenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvED0Ev>:
 8007a66:	b510      	push	{r4, lr}
 8007a68:	4604      	mov	r4, r0
 8007a6a:	2110      	movs	r1, #16
 8007a6c:	f022 ffa9 	bl	802a9c2 <_ZdlPvj>
 8007a70:	4620      	mov	r0, r4
 8007a72:	bd10      	pop	{r4, pc}

08007a74 <_ZN20firstScreeenViewBaseD0Ev>:
firstScreeenViewBase::~firstScreeenViewBase()
 8007a74:	b510      	push	{r4, lr}
 8007a76:	4604      	mov	r4, r0
}
 8007a78:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8007a7c:	f022 ffa1 	bl	802a9c2 <_ZdlPvj>
 8007a80:	4620      	mov	r0, r4
 8007a82:	bd10      	pop	{r4, pc}

08007a84 <_ZN20firstScreeenViewBase29showGlassEndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_5ImageEEE>:
    glassless.startFadeAnimation(255, 30, touchgfx::EasingEquations::linearEaseIn);
    glassless.setFadeAnimationEndedAction(showGlassEndedCallback);
}

void firstScreeenViewBase::showGlassEndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::Image>& comp)
{
 8007a84:	b508      	push	{r3, lr}
    virtual void setupScreen();
    virtual void transitionBegins();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8007a86:	f010 fa17 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
    //lock
    //When showGlass completed change screen to lockScreen
    //Go to lockScreen with no screen transition
    application().gotolockScreenScreenNoTransition();
}
 8007a8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    application().gotolockScreenScreenNoTransition();
 8007a8e:	f7fd b9c3 	b.w	8004e18 <_ZN23FrontendApplicationBase32gotolockScreenScreenNoTransitionEv>

08007a92 <_ZNK8touchgfx3Box17invalidateContentEv>:
        return alpha;
    }

    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
 8007a92:	b508      	push	{r3, lr}
    {
        if (alpha > 0)
 8007a94:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8007a98:	b10b      	cbz	r3, 8007a9e <_ZNK8touchgfx3Box17invalidateContentEv+0xc>
        {
            Widget::invalidateContent();
 8007a9a:	f7fa fdcc 	bl	8002636 <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 8007a9e:	bd08      	pop	{r3, pc}

08007aa0 <_ZN8touchgfx12FadeAnimatorINS_5ImageEEC1Ev>:
    FadeAnimator()
 8007aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
          touchable(false),
 8007aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007aa6:	2500      	movs	r5, #0
 8007aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007aac:	4604      	mov	r4, r0
 8007aae:	8482      	strh	r2, [r0, #36]	; 0x24
        Image::setBitmap(bmp);
 8007ab0:	a901      	add	r1, sp, #4
        : Widget(), bitmap(bmp), alpha(255)
 8007ab2:	4a0d      	ldr	r2, [pc, #52]	; (8007ae8 <_ZN8touchgfx12FadeAnimatorINS_5ImageEEC1Ev+0x48>)
 8007ab4:	84c3      	strh	r3, [r0, #38]	; 0x26
 8007ab6:	6002      	str	r2, [r0, #0]
 8007ab8:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8007abc:	f8ad 3004 	strh.w	r3, [sp, #4]
 8007ac0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ac4:	e9c0 5503 	strd	r5, r5, [r0, #12]
          nextSibling(0),
 8007ac8:	e9c0 5505 	strd	r5, r5, [r0, #20]
          cachedAbsX(0),
 8007acc:	e9c0 5507 	strd	r5, r5, [r0, #28]
        Image::setBitmap(bmp);
 8007ad0:	f00d fd4b 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
          fadeAnimationEndedCallback(0)
 8007ad4:	4b05      	ldr	r3, [pc, #20]	; (8007aec <_ZN8touchgfx12FadeAnimatorINS_5ImageEEC1Ev+0x4c>)
    }
 8007ad6:	4620      	mov	r0, r4
          fadeAnimationRunning(false),
 8007ad8:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
          fadeAnimationEndedCallback(0)
 8007adc:	6023      	str	r3, [r4, #0]
          fadeAnimationCounter(0),
 8007ade:	8565      	strh	r5, [r4, #42]	; 0x2a
          fadeAnimationDelay(0),
 8007ae0:	85a5      	strh	r5, [r4, #44]	; 0x2c
          fadeAnimationEndedCallback(0)
 8007ae2:	63a5      	str	r5, [r4, #56]	; 0x38
    }
 8007ae4:	b003      	add	sp, #12
 8007ae6:	bd30      	pop	{r4, r5, pc}
 8007ae8:	08030c40 	.word	0x08030c40
 8007aec:	0802f674 	.word	0x0802f674

08007af0 <_ZN20firstScreeenViewBaseC1Ev>:
firstScreeenViewBase::firstScreeenViewBase() :
 8007af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af4:	4604      	mov	r4, r0
 8007af6:	b085      	sub	sp, #20
 8007af8:	2500      	movs	r5, #0
 8007afa:	f011 fe5f 	bl	80197bc <_ZN8touchgfx6ScreenC1Ev>
    showGlassEndedCallback(this, &firstScreeenViewBase::showGlassEndedCallbackHandler)
 8007afe:	4627      	mov	r7, r4
 8007b00:	4b52      	ldr	r3, [pc, #328]	; (8007c4c <_ZN20firstScreeenViewBaseC1Ev+0x15c>)
 8007b02:	f104 0b6c 	add.w	fp, r4, #108	; 0x6c
 8007b06:	f104 09ac 	add.w	r9, r4, #172	; 0xac
          fadeAnimationEndedCallback(0)
 8007b0a:	4e51      	ldr	r6, [pc, #324]	; (8007c50 <_ZN20firstScreeenViewBaseC1Ev+0x160>)
 8007b0c:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
 8007b10:	63e5      	str	r5, [r4, #60]	; 0x3c
 8007b12:	f504 7894 	add.w	r8, r4, #296	; 0x128
 8007b16:	f847 3b40 	str.w	r3, [r7], #64
 8007b1a:	4638      	mov	r0, r7
 8007b1c:	f7fe fa36 	bl	8005f8c <_ZN8touchgfx3BoxC1Ev>
 8007b20:	4658      	mov	r0, fp
 8007b22:	f7fe fa33 	bl	8005f8c <_ZN8touchgfx3BoxC1Ev>
 8007b26:	66e6      	str	r6, [r4, #108]	; 0x6c
 8007b28:	4648      	mov	r0, r9
          fadeAnimationRunning(false),
 8007b2a:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
          fadeAnimationCounter(0),
 8007b2e:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
          fadeAnimationDelay(0),
 8007b32:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
          fadeAnimationEndedCallback(0)
 8007b36:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 8007b3a:	f7ff ffb1 	bl	8007aa0 <_ZN8touchgfx12FadeAnimatorINS_5ImageEEC1Ev>
 8007b3e:	4650      	mov	r0, sl
 8007b40:	f7fe fa24 	bl	8005f8c <_ZN8touchgfx3BoxC1Ev>
 8007b44:	f8c4 60e8 	str.w	r6, [r4, #232]	; 0xe8
 8007b48:	4640      	mov	r0, r8
          fadeAnimationRunning(false),
 8007b4a:	f884 5114 	strb.w	r5, [r4, #276]	; 0x114
          fadeAnimationCounter(0),
 8007b4e:	f8a4 5116 	strh.w	r5, [r4, #278]	; 0x116
 8007b52:	1d26      	adds	r6, r4, #4
          fadeAnimationDelay(0),
 8007b54:	f8a4 5118 	strh.w	r5, [r4, #280]	; 0x118
          fadeAnimationEndedCallback(0)
 8007b58:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 8007b5c:	f7ff ffa0 	bl	8007aa0 <_ZN8touchgfx12FadeAnimatorINS_5ImageEEC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8007b60:	4b3c      	ldr	r3, [pc, #240]	; (8007c54 <_ZN20firstScreeenViewBaseC1Ev+0x164>)
 8007b62:	4a3d      	ldr	r2, [pc, #244]	; (8007c58 <_ZN20firstScreeenViewBaseC1Ev+0x168>)
    __background.setPosition(0, 0, 800, 480);
 8007b64:	4638      	mov	r0, r7
 8007b66:	493d      	ldr	r1, [pc, #244]	; (8007c5c <_ZN20firstScreeenViewBaseC1Ev+0x16c>)
 8007b68:	e9c4 355b 	strd	r3, r5, [r4, #364]	; 0x16c
 8007b6c:	4b3c      	ldr	r3, [pc, #240]	; (8007c60 <_ZN20firstScreeenViewBaseC1Ev+0x170>)
 8007b6e:	e9c4 345d 	strd	r3, r4, [r4, #372]	; 0x174
 8007b72:	e9c4 3465 	strd	r3, r4, [r4, #404]	; 0x194
 8007b76:	4b3b      	ldr	r3, [pc, #236]	; (8007c64 <_ZN20firstScreeenViewBaseC1Ev+0x174>)
 8007b78:	e9c4 2459 	strd	r2, r4, [r4, #356]	; 0x164
 8007b7c:	e9c4 2461 	strd	r2, r4, [r4, #388]	; 0x184
 8007b80:	e9c4 3567 	strd	r3, r5, [r4, #412]	; 0x19c
 8007b84:	4a38      	ldr	r2, [pc, #224]	; (8007c68 <_ZN20firstScreeenViewBaseC1Ev+0x178>)
 8007b86:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007b8a:	e9c4 155f 	strd	r1, r5, [r4, #380]	; 0x17c
 8007b8e:	e9c4 2563 	strd	r2, r5, [r4, #396]	; 0x18c
 8007b92:	4629      	mov	r1, r5
 8007b94:	462a      	mov	r2, r5
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007b9c:	f7fd f804 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8007ba0:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8007ba4:	4639      	mov	r1, r7
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	66a3      	str	r3, [r4, #104]	; 0x68
 8007baa:	f04f 37ff 	mov.w	r7, #4294967295
 8007bae:	f009 ff75 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    backGround.setPosition(0, 0, 800, 480);
 8007bb2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007bb6:	462a      	mov	r2, r5
 8007bb8:	4629      	mov	r1, r5
 8007bba:	4658      	mov	r0, fp
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007bc2:	f7fc fff1 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8007bc6:	4659      	mov	r1, fp
 8007bc8:	4630      	mov	r0, r6
 8007bca:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
        alpha = newAlpha;
 8007bce:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
 8007bd2:	f009 ff63 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    STLOGO.setXY(192, 75);
 8007bd6:	224b      	movs	r2, #75	; 0x4b
 8007bd8:	4648      	mov	r0, r9
 8007bda:	21c0      	movs	r1, #192	; 0xc0
 8007bdc:	f7fe f9b6 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8007be0:	2337      	movs	r3, #55	; 0x37
    STLOGO.setBitmap(touchgfx::Bitmap(BITMAP_ST_LOGO_ID));
 8007be2:	a903      	add	r1, sp, #12
 8007be4:	4648      	mov	r0, r9
 8007be6:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007bea:	f00d fcbe 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8007bee:	4649      	mov	r1, r9
 8007bf0:	4630      	mov	r0, r6
        alpha = newAlpha;
 8007bf2:	f884 50d4 	strb.w	r5, [r4, #212]	; 0xd4
 8007bf6:	f009 ff51 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    frontGround.setPosition(0, 0, 800, 480);
 8007bfa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007bfe:	462a      	mov	r2, r5
 8007c00:	4629      	mov	r1, r5
 8007c02:	4650      	mov	r0, sl
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007c0a:	f7fc ffcd 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8007c0e:	4651      	mov	r1, sl
 8007c10:	4630      	mov	r0, r6
        color = newColor;
 8007c12:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
        alpha = newAlpha;
 8007c16:	f884 510e 	strb.w	r5, [r4, #270]	; 0x10e
 8007c1a:	f009 ff3f 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    glassless.setXY(0, 0);
 8007c1e:	462a      	mov	r2, r5
 8007c20:	4629      	mov	r1, r5
 8007c22:	4640      	mov	r0, r8
 8007c24:	f7fe f992 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8007c28:	2329      	movs	r3, #41	; 0x29
    glassless.setBitmap(touchgfx::Bitmap(BITMAP_GLASSLESS_ID));
 8007c2a:	a903      	add	r1, sp, #12
 8007c2c:	4640      	mov	r0, r8
 8007c2e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007c32:	f00d fc9a 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8007c36:	4630      	mov	r0, r6
 8007c38:	4641      	mov	r1, r8
 8007c3a:	f884 5150 	strb.w	r5, [r4, #336]	; 0x150
 8007c3e:	f009 ff2d 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8007c42:	4620      	mov	r0, r4
 8007c44:	b005      	add	sp, #20
 8007c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c4a:	bf00      	nop
 8007c4c:	0802f718 	.word	0x0802f718
 8007c50:	0802f604 	.word	0x0802f604
 8007c54:	08007e69 	.word	0x08007e69
 8007c58:	0802f6e8 	.word	0x0802f6e8
 8007c5c:	08007d69 	.word	0x08007d69
 8007c60:	0802f700 	.word	0x0802f700
 8007c64:	08007a85 	.word	0x08007a85
 8007c68:	08007e8d 	.word	0x08007e8d

08007c6c <_ZN8touchgfx12FadeAnimatorINS_3BoxEE21nextFadeAnimationStepEv>:
        if (fadeAnimationRunning)
 8007c6c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    void nextFadeAnimationStep()
 8007c70:	b570      	push	{r4, r5, r6, lr}
 8007c72:	4604      	mov	r4, r0
        if (fadeAnimationRunning)
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d040      	beq.n	8007cfa <_ZN8touchgfx12FadeAnimatorINS_3BoxEE21nextFadeAnimationStepEv+0x8e>
            fadeAnimationCounter++;
 8007c78:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8007c7a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
            fadeAnimationCounter++;
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	b280      	uxth	r0, r0
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8007c80:	4298      	cmp	r0, r3
            fadeAnimationCounter++;
 8007c82:	85e0      	strh	r0, [r4, #46]	; 0x2e
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8007c84:	d339      	bcc.n	8007cfa <_ZN8touchgfx12FadeAnimatorINS_3BoxEE21nextFadeAnimationStepEv+0x8e>
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 8007c86:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
 8007c88:	1ac0      	subs	r0, r0, r3
 8007c8a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8007c90:	b280      	uxth	r0, r0
 8007c92:	1b52      	subs	r2, r2, r5
 8007c94:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007c96:	b212      	sxth	r2, r2
 8007c98:	47b0      	blx	r6
 8007c9a:	4405      	add	r5, r0
                if (T::getAlpha() != newAlpha)
 8007c9c:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 8007ca0:	b2ab      	uxth	r3, r5
 8007ca2:	b22d      	sxth	r5, r5
                if (T::getAlpha() != newAlpha)
 8007ca4:	42aa      	cmp	r2, r5
 8007ca6:	d005      	beq.n	8007cb4 <_ZN8touchgfx12FadeAnimatorINS_3BoxEE21nextFadeAnimationStepEv+0x48>
                    if (newAlpha == 0)
 8007ca8:	bb0d      	cbnz	r5, 8007cee <_ZN8touchgfx12FadeAnimatorINS_3BoxEE21nextFadeAnimationStepEv+0x82>
                        T::invalidateContent();
 8007caa:	4620      	mov	r0, r4
 8007cac:	f7ff fef1 	bl	8007a92 <_ZNK8touchgfx3Box17invalidateContentEv>
 8007cb0:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
                if (fadeAnimationCounter >= (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 8007cb4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8007cb6:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8007cb8:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8007cba:	440b      	add	r3, r1
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d31c      	bcc.n	8007cfa <_ZN8touchgfx12FadeAnimatorINS_3BoxEE21nextFadeAnimationStepEv+0x8e>
                    fadeAnimationRunning = false;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
                    fadeAnimationDuration = 0;
 8007cc6:	8663      	strh	r3, [r4, #50]	; 0x32
                    Application::getInstance()->unregisterTimerWidget(this);
 8007cc8:	f010 f8f6 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
        timerWidgets.remove(w);
 8007ccc:	4621      	mov	r1, r4
 8007cce:	3004      	adds	r0, #4
 8007cd0:	f010 f93f 	bl	8017f52 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
                    if (fadeAnimationEndedCallback && fadeAnimationEndedCallback->isValid())
 8007cd4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007cd6:	b180      	cbz	r0, 8007cfa <_ZN8touchgfx12FadeAnimatorINS_3BoxEE21nextFadeAnimationStepEv+0x8e>
 8007cd8:	6803      	ldr	r3, [r0, #0]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	4798      	blx	r3
 8007cde:	b160      	cbz	r0, 8007cfa <_ZN8touchgfx12FadeAnimatorINS_3BoxEE21nextFadeAnimationStepEv+0x8e>
                        fadeAnimationEndedCallback->execute(*this);
 8007ce0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	6803      	ldr	r3, [r0, #0]
    }
 8007ce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        fadeAnimationEndedCallback->execute(*this);
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	4718      	bx	r3
                        T::invalidateContent();
 8007cee:	4620      	mov	r0, r4
                        T::setAlpha((uint8_t)newAlpha);
 8007cf0:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
                        T::invalidateContent();
 8007cf4:	f7ff fecd 	bl	8007a92 <_ZNK8touchgfx3Box17invalidateContentEv>
 8007cf8:	e7dc      	b.n	8007cb4 <_ZN8touchgfx12FadeAnimatorINS_3BoxEE21nextFadeAnimationStepEv+0x48>
    }
 8007cfa:	bd70      	pop	{r4, r5, r6, pc}

08007cfc <_ZN8touchgfx12FadeAnimatorINS_3BoxEE15handleTickEventEv>:
    virtual void handleTickEvent()
 8007cfc:	b508      	push	{r3, lr}
        nextFadeAnimationStep();
 8007cfe:	f7ff ffb5 	bl	8007c6c <_ZN8touchgfx12FadeAnimatorINS_3BoxEE21nextFadeAnimationStepEv>
    }
 8007d02:	bd08      	pop	{r3, pc}

08007d04 <_ZN8touchgfx12FadeAnimatorINS_3BoxEE18startFadeAnimationEhtPFstsstE>:
    void startFadeAnimation(uint8_t endAlpha, uint16_t duration, EasingEquation alphaProgressionEquation = &EasingEquations::linearEaseNone)
 8007d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d06:	461d      	mov	r5, r3
        if (!fadeAnimationRunning)
 8007d08:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    void startFadeAnimation(uint8_t endAlpha, uint16_t duration, EasingEquation alphaProgressionEquation = &EasingEquations::linearEaseNone)
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	460f      	mov	r7, r1
 8007d10:	4616      	mov	r6, r2
        if (!fadeAnimationRunning)
 8007d12:	b92b      	cbnz	r3, 8007d20 <_ZN8touchgfx12FadeAnimatorINS_3BoxEE18startFadeAnimationEhtPFstsstE+0x1c>
            Application::getInstance()->registerTimerWidget(this);
 8007d14:	f010 f8d0 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
        timerWidgets.add(w);
 8007d18:	4621      	mov	r1, r4
 8007d1a:	3004      	adds	r0, #4
 8007d1c:	f010 f9c2 	bl	80180a4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
        fadeAnimationCounter = 0;
 8007d20:	2300      	movs	r3, #0
        fadeAnimationDuration = duration;
 8007d22:	8666      	strh	r6, [r4, #50]	; 0x32
        fadeAnimationEndAlpha = endAlpha;
 8007d24:	86e7      	strh	r7, [r4, #54]	; 0x36
        fadeAnimationCounter = 0;
 8007d26:	85e3      	strh	r3, [r4, #46]	; 0x2e
        fadeAnimationStartAlpha = T::getAlpha();
 8007d28:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
        fadeAnimationAlphaEquation = alphaProgressionEquation;
 8007d2c:	63a5      	str	r5, [r4, #56]	; 0x38
        fadeAnimationStartAlpha = T::getAlpha();
 8007d2e:	86a3      	strh	r3, [r4, #52]	; 0x34
        fadeAnimationRunning = true;
 8007d30:	2301      	movs	r3, #1
 8007d32:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (fadeAnimationDelay == 0 && fadeAnimationDuration == 0)
 8007d36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007d38:	b913      	cbnz	r3, 8007d40 <_ZN8touchgfx12FadeAnimatorINS_3BoxEE18startFadeAnimationEhtPFstsstE+0x3c>
            nextFadeAnimationStep(); // Set end alpha and shut down
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f7ff ff96 	bl	8007c6c <_ZN8touchgfx12FadeAnimatorINS_3BoxEE21nextFadeAnimationStepEv>
    }
 8007d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d44 <_ZN20firstScreeenViewBase16transitionBeginsEv>:
        fadeAnimationEndedCallback = 0;
 8007d44:	2300      	movs	r3, #0
    backGround.startFadeAnimation(255, 30, touchgfx::EasingEquations::linearEaseIn);
 8007d46:	221e      	movs	r2, #30
 8007d48:	21ff      	movs	r1, #255	; 0xff
{
 8007d4a:	b510      	push	{r4, lr}
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
    backGround.startFadeAnimation(255, 30, touchgfx::EasingEquations::linearEaseIn);
 8007d52:	4b04      	ldr	r3, [pc, #16]	; (8007d64 <_ZN20firstScreeenViewBase16transitionBeginsEv+0x20>)
 8007d54:	306c      	adds	r0, #108	; 0x6c
 8007d56:	f7ff ffd5 	bl	8007d04 <_ZN8touchgfx12FadeAnimatorINS_3BoxEE18startFadeAnimationEhtPFstsstE>
    backGround.setFadeAnimationEndedAction(backGroung_fadeInEndedCallback);
 8007d5a:	f504 73b2 	add.w	r3, r4, #356	; 0x164
        fadeAnimationEndedCallback = &callback;
 8007d5e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
 8007d62:	bd10      	pop	{r4, pc}
 8007d64:	08019be1 	.word	0x08019be1

08007d68 <_ZN20firstScreeenViewBase34sT_LOGO_fadeInEndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_5ImageEEE>:
        fadeAnimationEndedCallback = 0;
 8007d68:	2300      	movs	r3, #0
    frontGround.startFadeAnimation(255, 30, touchgfx::EasingEquations::linearEaseIn);
 8007d6a:	221e      	movs	r2, #30
 8007d6c:	21ff      	movs	r1, #255	; 0xff
{
 8007d6e:	b510      	push	{r4, lr}
 8007d70:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
        fadeAnimationDelay = delay;
 8007d74:	2330      	movs	r3, #48	; 0x30
 8007d76:	4604      	mov	r4, r0
    frontGround.startFadeAnimation(255, 30, touchgfx::EasingEquations::linearEaseIn);
 8007d78:	30e8      	adds	r0, #232	; 0xe8
 8007d7a:	8603      	strh	r3, [r0, #48]	; 0x30
 8007d7c:	4b03      	ldr	r3, [pc, #12]	; (8007d8c <_ZN20firstScreeenViewBase34sT_LOGO_fadeInEndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_5ImageEEE+0x24>)
 8007d7e:	f7ff ffc1 	bl	8007d04 <_ZN8touchgfx12FadeAnimatorINS_3BoxEE18startFadeAnimationEhtPFstsstE>
    frontGround.setFadeAnimationEndedAction(frontGroung_fadeInEndedCallback);
 8007d82:	f504 73c2 	add.w	r3, r4, #388	; 0x184
        fadeAnimationEndedCallback = &callback;
 8007d86:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
}
 8007d8a:	bd10      	pop	{r4, pc}
 8007d8c:	08019be1 	.word	0x08019be1

08007d90 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv>:
        if (fadeAnimationRunning)
 8007d90:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
    void nextFadeAnimationStep()
 8007d94:	b570      	push	{r4, r5, r6, lr}
 8007d96:	4604      	mov	r4, r0
        if (fadeAnimationRunning)
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d040      	beq.n	8007e1e <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x8e>
            fadeAnimationCounter++;
 8007d9c:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8007d9e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
            fadeAnimationCounter++;
 8007da0:	3001      	adds	r0, #1
 8007da2:	b280      	uxth	r0, r0
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8007da4:	4298      	cmp	r0, r3
            fadeAnimationCounter++;
 8007da6:	8560      	strh	r0, [r4, #42]	; 0x2a
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8007da8:	d339      	bcc.n	8007e1e <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x8e>
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 8007daa:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8007dac:	1ac0      	subs	r0, r0, r3
 8007dae:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8007db0:	2100      	movs	r1, #0
 8007db2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8007db4:	b280      	uxth	r0, r0
 8007db6:	1b52      	subs	r2, r2, r5
 8007db8:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8007dba:	b212      	sxth	r2, r2
 8007dbc:	47b0      	blx	r6
 8007dbe:	4405      	add	r5, r0
                if (T::getAlpha() != newAlpha)
 8007dc0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 8007dc4:	b2ab      	uxth	r3, r5
 8007dc6:	b22d      	sxth	r5, r5
                if (T::getAlpha() != newAlpha)
 8007dc8:	42aa      	cmp	r2, r5
 8007dca:	d005      	beq.n	8007dd8 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x48>
                    if (newAlpha == 0)
 8007dcc:	bb0d      	cbnz	r5, 8007e12 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x82>
                        T::invalidateContent();
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f7fe f872 	bl	8005eb8 <_ZNK8touchgfx5Image17invalidateContentEv>
 8007dd4:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
                if (fadeAnimationCounter >= (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 8007dd8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8007dda:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8007ddc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007dde:	440b      	add	r3, r1
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d31c      	bcc.n	8007e1e <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x8e>
                    fadeAnimationRunning = false;
 8007de4:	2300      	movs	r3, #0
 8007de6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
                    fadeAnimationDuration = 0;
 8007dea:	85e3      	strh	r3, [r4, #46]	; 0x2e
                    Application::getInstance()->unregisterTimerWidget(this);
 8007dec:	f010 f864 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
        timerWidgets.remove(w);
 8007df0:	4621      	mov	r1, r4
 8007df2:	3004      	adds	r0, #4
 8007df4:	f010 f8ad 	bl	8017f52 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
                    if (fadeAnimationEndedCallback && fadeAnimationEndedCallback->isValid())
 8007df8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007dfa:	b180      	cbz	r0, 8007e1e <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x8e>
 8007dfc:	6803      	ldr	r3, [r0, #0]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	4798      	blx	r3
 8007e02:	b160      	cbz	r0, 8007e1e <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x8e>
                        fadeAnimationEndedCallback->execute(*this);
 8007e04:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007e06:	4621      	mov	r1, r4
 8007e08:	6803      	ldr	r3, [r0, #0]
    }
 8007e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        fadeAnimationEndedCallback->execute(*this);
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	4718      	bx	r3
                        T::invalidateContent();
 8007e12:	4620      	mov	r0, r4
                        T::setAlpha((uint8_t)newAlpha);
 8007e14:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                        T::invalidateContent();
 8007e18:	f7fe f84e 	bl	8005eb8 <_ZNK8touchgfx5Image17invalidateContentEv>
 8007e1c:	e7dc      	b.n	8007dd8 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x48>
    }
 8007e1e:	bd70      	pop	{r4, r5, r6, pc}

08007e20 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE15handleTickEventEv>:
    virtual void handleTickEvent()
 8007e20:	b508      	push	{r3, lr}
        nextFadeAnimationStep();
 8007e22:	f7ff ffb5 	bl	8007d90 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv>
    }
 8007e26:	bd08      	pop	{r3, pc}

08007e28 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE18startFadeAnimationEhtPFstsstE>:
    void startFadeAnimation(uint8_t endAlpha, uint16_t duration, EasingEquation alphaProgressionEquation = &EasingEquations::linearEaseNone)
 8007e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2a:	461d      	mov	r5, r3
        if (!fadeAnimationRunning)
 8007e2c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
    void startFadeAnimation(uint8_t endAlpha, uint16_t duration, EasingEquation alphaProgressionEquation = &EasingEquations::linearEaseNone)
 8007e30:	4604      	mov	r4, r0
 8007e32:	460f      	mov	r7, r1
 8007e34:	4616      	mov	r6, r2
        if (!fadeAnimationRunning)
 8007e36:	b92b      	cbnz	r3, 8007e44 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE18startFadeAnimationEhtPFstsstE+0x1c>
            Application::getInstance()->registerTimerWidget(this);
 8007e38:	f010 f83e 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
        timerWidgets.add(w);
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	3004      	adds	r0, #4
 8007e40:	f010 f930 	bl	80180a4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
        fadeAnimationCounter = 0;
 8007e44:	2300      	movs	r3, #0
        fadeAnimationDuration = duration;
 8007e46:	85e6      	strh	r6, [r4, #46]	; 0x2e
        fadeAnimationEndAlpha = endAlpha;
 8007e48:	8667      	strh	r7, [r4, #50]	; 0x32
        fadeAnimationCounter = 0;
 8007e4a:	8563      	strh	r3, [r4, #42]	; 0x2a
        fadeAnimationStartAlpha = T::getAlpha();
 8007e4c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
        fadeAnimationAlphaEquation = alphaProgressionEquation;
 8007e50:	6365      	str	r5, [r4, #52]	; 0x34
        fadeAnimationStartAlpha = T::getAlpha();
 8007e52:	8623      	strh	r3, [r4, #48]	; 0x30
        fadeAnimationRunning = true;
 8007e54:	2301      	movs	r3, #1
 8007e56:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
        if (fadeAnimationDelay == 0 && fadeAnimationDuration == 0)
 8007e5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007e5c:	b913      	cbnz	r3, 8007e64 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE18startFadeAnimationEhtPFstsstE+0x3c>
            nextFadeAnimationStep(); // Set end alpha and shut down
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f7ff ff96 	bl	8007d90 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv>
    }
 8007e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e68 <_ZN20firstScreeenViewBase37backGroung_fadeInEndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_3BoxEEE>:
        fadeAnimationEndedCallback = 0;
 8007e68:	2300      	movs	r3, #0
    STLOGO.startFadeAnimation(255, 48, touchgfx::EasingEquations::linearEaseIn);
 8007e6a:	2230      	movs	r2, #48	; 0x30
 8007e6c:	21ff      	movs	r1, #255	; 0xff
{
 8007e6e:	b510      	push	{r4, lr}
 8007e70:	4604      	mov	r4, r0
 8007e72:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
    STLOGO.startFadeAnimation(255, 48, touchgfx::EasingEquations::linearEaseIn);
 8007e76:	4b04      	ldr	r3, [pc, #16]	; (8007e88 <_ZN20firstScreeenViewBase37backGroung_fadeInEndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_3BoxEEE+0x20>)
 8007e78:	30ac      	adds	r0, #172	; 0xac
 8007e7a:	f7ff ffd5 	bl	8007e28 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE18startFadeAnimationEhtPFstsstE>
    STLOGO.setFadeAnimationEndedAction(sT_LOGO_fadeInEndedCallback);
 8007e7e:	f504 73ba 	add.w	r3, r4, #372	; 0x174
        fadeAnimationEndedCallback = &callback;
 8007e82:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
}
 8007e86:	bd10      	pop	{r4, pc}
 8007e88:	08019be1 	.word	0x08019be1

08007e8c <_ZN20firstScreeenViewBase38frontGroung_fadeInEndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_3BoxEEE>:
        fadeAnimationEndedCallback = 0;
 8007e8c:	2300      	movs	r3, #0
    glassless.startFadeAnimation(255, 30, touchgfx::EasingEquations::linearEaseIn);
 8007e8e:	221e      	movs	r2, #30
 8007e90:	21ff      	movs	r1, #255	; 0xff
{
 8007e92:	b510      	push	{r4, lr}
 8007e94:	4604      	mov	r4, r0
 8007e96:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
    glassless.startFadeAnimation(255, 30, touchgfx::EasingEquations::linearEaseIn);
 8007e9a:	4b05      	ldr	r3, [pc, #20]	; (8007eb0 <_ZN20firstScreeenViewBase38frontGroung_fadeInEndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_3BoxEEE+0x24>)
 8007e9c:	f500 7094 	add.w	r0, r0, #296	; 0x128
 8007ea0:	f7ff ffc2 	bl	8007e28 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE18startFadeAnimationEhtPFstsstE>
    glassless.setFadeAnimationEndedAction(showGlassEndedCallback);
 8007ea4:	f504 73ca 	add.w	r3, r4, #404	; 0x194
        fadeAnimationEndedCallback = &callback;
 8007ea8:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
}
 8007eac:	bd10      	pop	{r4, pc}
 8007eae:	bf00      	nop
 8007eb0:	08019be1 	.word	0x08019be1

08007eb4 <_ZN18lockScreenViewBaseD1Ev>:
}

lockScreenViewBase::~lockScreenViewBase()
{

}
 8007eb4:	4770      	bx	lr

08007eb6 <_ZN18lockScreenViewBase11setupScreenEv>:

void lockScreenViewBase::setupScreen()
{
    transitionBegins();
 8007eb6:	6803      	ldr	r3, [r0, #0]
 8007eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eba:	4718      	bx	r3

08007ebc <_ZN8touchgfx8CallbackI18lockScreenViewBaseRKNS_12FadeAnimatorINS_13AnimatedImageEEEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8007ebc:	4770      	bx	lr

08007ebe <_ZN8touchgfx8CallbackI18lockScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvED1Ev>:
 8007ebe:	4770      	bx	lr

08007ec0 <_ZN8touchgfx8CallbackI18lockScreenViewBaseRKNS_12FadeAnimatorINS_13AnimatedImageEEEvvE7executeES6_>:
    virtual void execute(T1 t1)
 8007ec0:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8007ec2:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8007ec4:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8007ec6:	68c2      	ldr	r2, [r0, #12]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	1055      	asrs	r5, r2, #1
 8007ecc:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8007ed0:	07d2      	lsls	r2, r2, #31
 8007ed2:	bf48      	it	mi
 8007ed4:	5962      	ldrmi	r2, [r4, r5]
    }
 8007ed6:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8007ed8:	bf48      	it	mi
 8007eda:	58d3      	ldrmi	r3, [r2, r3]
 8007edc:	4718      	bx	r3

08007ede <_ZNK8touchgfx8CallbackI18lockScreenViewBaseRKNS_12FadeAnimatorINS_13AnimatedImageEEEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8007ede:	6843      	ldr	r3, [r0, #4]
 8007ee0:	b12b      	cbz	r3, 8007eee <_ZNK8touchgfx8CallbackI18lockScreenViewBaseRKNS_12FadeAnimatorINS_13AnimatedImageEEEvvE7isValidEv+0x10>
 8007ee2:	6883      	ldr	r3, [r0, #8]
 8007ee4:	b92b      	cbnz	r3, 8007ef2 <_ZNK8touchgfx8CallbackI18lockScreenViewBaseRKNS_12FadeAnimatorINS_13AnimatedImageEEEvvE7isValidEv+0x14>
 8007ee6:	68c0      	ldr	r0, [r0, #12]
 8007ee8:	f000 0001 	and.w	r0, r0, #1
 8007eec:	4770      	bx	lr
 8007eee:	4618      	mov	r0, r3
 8007ef0:	4770      	bx	lr
 8007ef2:	2001      	movs	r0, #1
    }
 8007ef4:	4770      	bx	lr

08007ef6 <_ZN8touchgfx8CallbackI18lockScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7executeES6_>:
    virtual void execute(T1 t1)
 8007ef6:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8007ef8:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8007efa:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8007efc:	68c2      	ldr	r2, [r0, #12]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	1055      	asrs	r5, r2, #1
 8007f02:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8007f06:	07d2      	lsls	r2, r2, #31
 8007f08:	bf48      	it	mi
 8007f0a:	5962      	ldrmi	r2, [r4, r5]
    }
 8007f0c:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8007f0e:	bf48      	it	mi
 8007f10:	58d3      	ldrmi	r3, [r2, r3]
 8007f12:	4718      	bx	r3

08007f14 <_ZNK8touchgfx8CallbackI18lockScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8007f14:	6843      	ldr	r3, [r0, #4]
 8007f16:	b12b      	cbz	r3, 8007f24 <_ZNK8touchgfx8CallbackI18lockScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7isValidEv+0x10>
 8007f18:	6883      	ldr	r3, [r0, #8]
 8007f1a:	b92b      	cbnz	r3, 8007f28 <_ZNK8touchgfx8CallbackI18lockScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7isValidEv+0x14>
 8007f1c:	68c0      	ldr	r0, [r0, #12]
 8007f1e:	f000 0001 	and.w	r0, r0, #1
 8007f22:	4770      	bx	lr
 8007f24:	4618      	mov	r0, r3
 8007f26:	4770      	bx	lr
 8007f28:	2001      	movs	r0, #1
    }
 8007f2a:	4770      	bx	lr

08007f2c <_ZN8touchgfx8CallbackI18lockScreenViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8007f2c:	b510      	push	{r4, lr}
 8007f2e:	4604      	mov	r4, r0
 8007f30:	2110      	movs	r1, #16
 8007f32:	f022 fd46 	bl	802a9c2 <_ZdlPvj>
 8007f36:	4620      	mov	r0, r4
 8007f38:	bd10      	pop	{r4, pc}

08007f3a <_ZN8touchgfx8CallbackI18lockScreenViewBaseRKNS_12FadeAnimatorINS_13AnimatedImageEEEvvED0Ev>:
 8007f3a:	b510      	push	{r4, lr}
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	2110      	movs	r1, #16
 8007f40:	f022 fd3f 	bl	802a9c2 <_ZdlPvj>
 8007f44:	4620      	mov	r0, r4
 8007f46:	bd10      	pop	{r4, pc}

08007f48 <_ZN18lockScreenViewBaseD0Ev>:
lockScreenViewBase::~lockScreenViewBase()
 8007f48:	b510      	push	{r4, lr}
 8007f4a:	4604      	mov	r4, r0
}
 8007f4c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007f50:	f022 fd37 	bl	802a9c2 <_ZdlPvj>
 8007f54:	4620      	mov	r0, r4
 8007f56:	bd10      	pop	{r4, pc}

08007f58 <_ZN18lockScreenViewBase29fadeGlassEndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_5ImageEEE>:
    
    }
}

void lockScreenViewBase::fadeGlassEndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::Image>& comp)
{
 8007f58:	b508      	push	{r3, lr}
    virtual void handleKeyEvent(uint8_t key);
    virtual void transitionBegins();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8007f5a:	f00f ffad 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
    //first
    //When fadeGlass completed change screen to mainScreen
    //Go to mainScreen with no screen transition
    application().gotomainScreenScreenNoTransition();
}
 8007f5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    application().gotomainScreenScreenNoTransition();
 8007f62:	f7fc bf69 	b.w	8004e38 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
	...

08007f68 <_ZN18lockScreenViewBaseC1Ev>:
lockScreenViewBase::lockScreenViewBase() :
 8007f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	2500      	movs	r5, #0
 8007f70:	f64f 76ff 	movw	r6, #65535	; 0xffff
    showGlassEndedCallback(this, &lockScreenViewBase::showGlassEndedCallbackHandler)
 8007f74:	46a0      	mov	r8, r4
 8007f76:	f104 0b98 	add.w	fp, r4, #152	; 0x98
 8007f7a:	f104 0ad4 	add.w	sl, r4, #212	; 0xd4
 8007f7e:	f504 7988 	add.w	r9, r4, #272	; 0x110
 8007f82:	f504 77a6 	add.w	r7, r4, #332	; 0x14c
lockScreenViewBase::lockScreenViewBase() :
 8007f86:	ed2d 8b02 	vpush	{d8}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	f011 fc16 	bl	80197bc <_ZN8touchgfx6ScreenC1Ev>
    showGlassEndedCallback(this, &lockScreenViewBase::showGlassEndedCallbackHandler)
 8007f90:	4b73      	ldr	r3, [pc, #460]	; (8008160 <_ZN18lockScreenViewBaseC1Ev+0x1f8>)
 8007f92:	63e5      	str	r5, [r4, #60]	; 0x3c
 8007f94:	a903      	add	r1, sp, #12
 8007f96:	f848 3b40 	str.w	r3, [r8], #64
        : Widget(), alpha(255), color(0)
 8007f9a:	4b72      	ldr	r3, [pc, #456]	; (8008164 <_ZN18lockScreenViewBaseC1Ev+0x1fc>)
 8007f9c:	6625      	str	r5, [r4, #96]	; 0x60
        : color(col)
 8007f9e:	66a5      	str	r5, [r4, #104]	; 0x68
 8007fa0:	f8ad 600c 	strh.w	r6, [sp, #12]
        : x(0), y(0), width(0), height(0)
 8007fa4:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
          touchable(false),
 8007fa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fac:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 8007fb0:	23ff      	movs	r3, #255	; 0xff
 8007fb2:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 8007fb6:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8007fba:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	9301      	str	r3, [sp, #4]
          parent(0),
 8007fc2:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
          nextDrawChainElement(0),
 8007fc6:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
 8007fca:	f7fd fff3 	bl	8005fb4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8007fce:	4658      	mov	r0, fp
 8007fd0:	f7ff fd66 	bl	8007aa0 <_ZN8touchgfx12FadeAnimatorINS_5ImageEEC1Ev>
 8007fd4:	4650      	mov	r0, sl
 8007fd6:	f7ff fd63 	bl	8007aa0 <_ZN8touchgfx12FadeAnimatorINS_5ImageEEC1Ev>
 8007fda:	4648      	mov	r0, r9
 8007fdc:	f7ff fd60 	bl	8007aa0 <_ZN8touchgfx12FadeAnimatorINS_5ImageEEC1Ev>
          running(false)
 8007fe0:	a903      	add	r1, sp, #12
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	f8ad 600c 	strh.w	r6, [sp, #12]
 8007fe8:	f7fd ffe4 	bl	8005fb4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
          fadeAnimationEndedCallback(0)
 8007fec:	4a5e      	ldr	r2, [pc, #376]	; (8008168 <_ZN18lockScreenViewBaseC1Ev+0x200>)
          updateTicksInterval(updateInterval),
 8007fee:	2301      	movs	r3, #1
        : animationDoneAction(0),
 8007ff0:	f8c4 5178 	str.w	r5, [r4, #376]	; 0x178
 8007ff4:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
          updateTicksInterval(updateInterval),
 8007ff8:	f04f 32ff 	mov.w	r2, #4294967295
          running(false)
 8007ffc:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
 8008000:	1d26      	adds	r6, r4, #4
          fadeAnimationDelay(0),
 8008002:	f8a4 5188 	strh.w	r5, [r4, #392]	; 0x188
          fadeAnimationEndedCallback(0)
 8008006:	f8c4 5194 	str.w	r5, [r4, #404]	; 0x194
          updateTicksInterval(updateInterval),
 800800a:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
 800800e:	f504 73cc 	add.w	r3, r4, #408	; 0x198
 8008012:	4618      	mov	r0, r3
 8008014:	ee08 3a10 	vmov	s16, r3
 8008018:	f7ff fd42 	bl	8007aa0 <_ZN8touchgfx12FadeAnimatorINS_5ImageEEC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 800801c:	4953      	ldr	r1, [pc, #332]	; (800816c <_ZN18lockScreenViewBaseC1Ev+0x204>)
 800801e:	4a54      	ldr	r2, [pc, #336]	; (8008170 <_ZN18lockScreenViewBaseC1Ev+0x208>)
        setXY(x, y);
 8008020:	4640      	mov	r0, r8
 8008022:	e9c4 1577 	strd	r1, r5, [r4, #476]	; 0x1dc
 8008026:	4953      	ldr	r1, [pc, #332]	; (8008174 <_ZN18lockScreenViewBaseC1Ev+0x20c>)
 8008028:	e9c4 2475 	strd	r2, r4, [r4, #468]	; 0x1d4
 800802c:	e9c4 1479 	strd	r1, r4, [r4, #484]	; 0x1e4
 8008030:	e9c4 247d 	strd	r2, r4, [r4, #500]	; 0x1f4
 8008034:	4950      	ldr	r1, [pc, #320]	; (8008178 <_ZN18lockScreenViewBaseC1Ev+0x210>)
 8008036:	4a51      	ldr	r2, [pc, #324]	; (800817c <_ZN18lockScreenViewBaseC1Ev+0x214>)
 8008038:	e9c4 157b 	strd	r1, r5, [r4, #492]	; 0x1ec
 800803c:	e9c4 257f 	strd	r2, r5, [r4, #508]	; 0x1fc
 8008040:	4629      	mov	r1, r5
 8008042:	462a      	mov	r2, r5
 8008044:	f7fd ff82 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8008048:	4640      	mov	r0, r8
 800804a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800804e:	f7fa fa1d 	bl	800248c <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8008052:	4640      	mov	r0, r8
 8008054:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8008058:	f7fa fa1a 	bl	8002490 <_ZN8touchgfx8Drawable9setHeightEs>
        color = newColor;
 800805c:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8008060:	4641      	mov	r1, r8
 8008062:	4630      	mov	r0, r6
 8008064:	66a2      	str	r2, [r4, #104]	; 0x68
 8008066:	f04f 0829 	mov.w	r8, #41	; 0x29
 800806a:	f009 fd17 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    glassless.setXY(0, 0);
 800806e:	9b01      	ldr	r3, [sp, #4]
 8008070:	462a      	mov	r2, r5
 8008072:	4629      	mov	r1, r5
 8008074:	4618      	mov	r0, r3
 8008076:	f7fd ff69 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
    glassless.setBitmap(touchgfx::Bitmap(BITMAP_GLASSLESS_ID));
 800807a:	9b01      	ldr	r3, [sp, #4]
 800807c:	a903      	add	r1, sp, #12
 800807e:	f8ad 800c 	strh.w	r8, [sp, #12]
 8008082:	4618      	mov	r0, r3
 8008084:	f00d fa71 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8008088:	9b01      	ldr	r3, [sp, #4]
 800808a:	4630      	mov	r0, r6
 800808c:	4619      	mov	r1, r3
 800808e:	f009 fd05 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    glass.setXY(0, 0);
 8008092:	462a      	mov	r2, r5
 8008094:	4629      	mov	r1, r5
 8008096:	4658      	mov	r0, fp
 8008098:	f7fd ff58 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 800809c:	2328      	movs	r3, #40	; 0x28
    glass.setBitmap(touchgfx::Bitmap(BITMAP_GLASS_ID));
 800809e:	a903      	add	r1, sp, #12
 80080a0:	4658      	mov	r0, fp
 80080a2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80080a6:	f00d fa60 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80080aa:	4659      	mov	r1, fp
 80080ac:	4630      	mov	r0, r6
 80080ae:	f009 fcf5 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    bigLock.setXY(279, 117);
 80080b2:	2275      	movs	r2, #117	; 0x75
 80080b4:	4650      	mov	r0, sl
 80080b6:	f240 1117 	movw	r1, #279	; 0x117
 80080ba:	f7fd ff47 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 80080be:	232d      	movs	r3, #45	; 0x2d
    bigLock.setBitmap(touchgfx::Bitmap(BITMAP_LOCK_ID));
 80080c0:	a903      	add	r1, sp, #12
 80080c2:	4650      	mov	r0, sl
 80080c4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80080c8:	f00d fa4f 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80080cc:	4651      	mov	r1, sl
 80080ce:	4630      	mov	r0, r6
 80080d0:	f009 fce4 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    glasslessTop.setXY(0, 0);
 80080d4:	462a      	mov	r2, r5
 80080d6:	4629      	mov	r1, r5
 80080d8:	4648      	mov	r0, r9
 80080da:	f7fd ff37 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
    glasslessTop.setBitmap(touchgfx::Bitmap(BITMAP_GLASSLESS_ID));
 80080de:	a903      	add	r1, sp, #12
 80080e0:	4648      	mov	r0, r9
 80080e2:	f8ad 800c 	strh.w	r8, [sp, #12]
 80080e6:	f00d fa40 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80080ea:	4649      	mov	r1, r9
 80080ec:	4630      	mov	r0, r6
 80080ee:	f009 fcd5 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    waitAnimate.setXY(241, 333);
 80080f2:	4638      	mov	r0, r7
 80080f4:	f240 124d 	movw	r2, #333	; 0x14d
 80080f8:	21f1      	movs	r1, #241	; 0xf1
 80080fa:	f7fd ff27 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
    waitAnimate.setBitmaps(BITMAP_WAIT1_ID, BITMAP_WAIT3_ID);
 80080fe:	223d      	movs	r2, #61	; 0x3d
 8008100:	4638      	mov	r0, r7
 8008102:	213b      	movs	r1, #59	; 0x3b
 8008104:	f00c f999 	bl	801443a <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>
    waitAnimate.setUpdateTicksInterval(12);
 8008108:	4638      	mov	r0, r7
 800810a:	210c      	movs	r1, #12
 800810c:	f00c f9a8 	bl	8014460 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>
    waitAnimate.startAnimation(false, true, true);
 8008110:	2301      	movs	r3, #1
 8008112:	4629      	mov	r1, r5
 8008114:	4638      	mov	r0, r7
 8008116:	461a      	mov	r2, r3
 8008118:	f00c f8f1 	bl	80142fe <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>
 800811c:	4639      	mov	r1, r7
 800811e:	4630      	mov	r0, r6
 8008120:	f884 5174 	strb.w	r5, [r4, #372]	; 0x174
 8008124:	f009 fcba 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    unlockNote.setXY(143, 333);
 8008128:	f240 124d 	movw	r2, #333	; 0x14d
 800812c:	ee18 0a10 	vmov	r0, s16
 8008130:	218f      	movs	r1, #143	; 0x8f
 8008132:	f7fd ff0b 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8008136:	233a      	movs	r3, #58	; 0x3a
    unlockNote.setBitmap(touchgfx::Bitmap(BITMAP_UNLOCKNOTE_ID));
 8008138:	a903      	add	r1, sp, #12
 800813a:	ee18 0a10 	vmov	r0, s16
 800813e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008142:	f00d fa12 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8008146:	4630      	mov	r0, r6
 8008148:	ee18 1a10 	vmov	r1, s16
 800814c:	f884 51c0 	strb.w	r5, [r4, #448]	; 0x1c0
 8008150:	f009 fca4 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8008154:	4620      	mov	r0, r4
 8008156:	b005      	add	sp, #20
 8008158:	ecbd 8b02 	vpop	{d8}
 800815c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008160:	0802f780 	.word	0x0802f780
 8008164:	08030a7c 	.word	0x08030a7c
 8008168:	0802f150 	.word	0x0802f150
 800816c:	08007f59 	.word	0x08007f59
 8008170:	0802f750 	.word	0x0802f750
 8008174:	0802f768 	.word	0x0802f768
 8008178:	08008271 	.word	0x08008271
 800817c:	080081b9 	.word	0x080081b9

08008180 <_ZN18lockScreenViewBase16transitionBeginsEv>:

void lockScreenViewBase::transitionBegins()
{
 8008180:	b538      	push	{r3, r4, r5, lr}
        fadeAnimationEndedCallback = 0;
 8008182:	2500      	movs	r5, #0
 8008184:	4604      	mov	r4, r0
    //showGlass
    //When screen transition begins fade glass
    //Fade glass to alpha:255 with LinearIn easing in 500 ms (30 Ticks)
    glass.clearFadeAnimationEndedAction();
    glass.startFadeAnimation(255, 30, touchgfx::EasingEquations::linearEaseIn);
 8008186:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <_ZN18lockScreenViewBase16transitionBeginsEv+0x34>)
 8008188:	221e      	movs	r2, #30
 800818a:	f8c0 50d0 	str.w	r5, [r0, #208]	; 0xd0
 800818e:	21ff      	movs	r1, #255	; 0xff
 8008190:	3098      	adds	r0, #152	; 0x98
 8008192:	f7ff fe49 	bl	8007e28 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE18startFadeAnimationEhtPFstsstE>
    glass.setFadeAnimationEndedAction(showGlassEndedCallback);
 8008196:	f504 72fa 	add.w	r2, r4, #500	; 0x1f4

    //fadeGlassless
    //When screen transition begins fade glasslessTop
    //Fade glasslessTop to alpha:0 with LinearIn easing in 500 ms (30 Ticks)
    glasslessTop.clearFadeAnimationEndedAction();
    glasslessTop.startFadeAnimation(0, 30, touchgfx::EasingEquations::linearEaseIn);
 800819a:	4b06      	ldr	r3, [pc, #24]	; (80081b4 <_ZN18lockScreenViewBase16transitionBeginsEv+0x34>)
 800819c:	4629      	mov	r1, r5
        fadeAnimationEndedCallback = &callback;
 800819e:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
 80081a2:	f504 7088 	add.w	r0, r4, #272	; 0x110
 80081a6:	221e      	movs	r2, #30
        fadeAnimationEndedCallback = 0;
 80081a8:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 80081ac:	f7ff fe3c 	bl	8007e28 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE18startFadeAnimationEhtPFstsstE>
}
 80081b0:	bd38      	pop	{r3, r4, r5, pc}
 80081b2:	bf00      	nop
 80081b4:	08019be1 	.word	0x08019be1

080081b8 <_ZN18lockScreenViewBase29showGlassEndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_5ImageEEE>:
    bigLock.setFadeAnimationDelay(162);
    bigLock.startFadeAnimation(0, 30, touchgfx::EasingEquations::linearEaseIn);
}

void lockScreenViewBase::showGlassEndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::Image>& comp)
{
 80081b8:	b508      	push	{r3, lr}
 80081ba:	2300      	movs	r3, #0
    //showUnlockNote
    //When showGlass completed fade unlockNote
    //Fade unlockNote to alpha:255 with LinearIn easing in 500 ms (30 Ticks)
    unlockNote.clearFadeAnimationEndedAction();
    unlockNote.startFadeAnimation(255, 30, touchgfx::EasingEquations::linearEaseIn);
 80081bc:	221e      	movs	r2, #30
 80081be:	21ff      	movs	r1, #255	; 0xff
 80081c0:	f500 70cc 	add.w	r0, r0, #408	; 0x198
 80081c4:	6383      	str	r3, [r0, #56]	; 0x38
 80081c6:	4b02      	ldr	r3, [pc, #8]	; (80081d0 <_ZN18lockScreenViewBase29showGlassEndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_5ImageEEE+0x18>)
 80081c8:	f7ff fe2e 	bl	8007e28 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE18startFadeAnimationEhtPFstsstE>
}
 80081cc:	bd08      	pop	{r3, pc}
 80081ce:	bf00      	nop
 80081d0:	08019be1 	.word	0x08019be1

080081d4 <_ZN8touchgfx12FadeAnimatorINS_13AnimatedImageEE18startFadeAnimationEhtPFstsstE>:
    void startFadeAnimation(uint8_t endAlpha, uint16_t duration, EasingEquation alphaProgressionEquation = &EasingEquations::linearEaseNone)
 80081d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d6:	461d      	mov	r5, r3
        if (!fadeAnimationRunning)
 80081d8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
    void startFadeAnimation(uint8_t endAlpha, uint16_t duration, EasingEquation alphaProgressionEquation = &EasingEquations::linearEaseNone)
 80081dc:	4604      	mov	r4, r0
 80081de:	460f      	mov	r7, r1
 80081e0:	4616      	mov	r6, r2
        if (!fadeAnimationRunning)
 80081e2:	b92b      	cbnz	r3, 80081f0 <_ZN8touchgfx12FadeAnimatorINS_13AnimatedImageEE18startFadeAnimationEhtPFstsstE+0x1c>
            Application::getInstance()->registerTimerWidget(this);
 80081e4:	f00f fe68 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 80081e8:	4621      	mov	r1, r4
 80081ea:	3004      	adds	r0, #4
 80081ec:	f00f ff5a 	bl	80180a4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
        fadeAnimationCounter = 0;
 80081f0:	2300      	movs	r3, #0
        fadeAnimationDuration = duration;
 80081f2:	87e6      	strh	r6, [r4, #62]	; 0x3e
        fadeAnimationEndAlpha = endAlpha;
 80081f4:	f8a4 7042 	strh.w	r7, [r4, #66]	; 0x42
        fadeAnimationCounter = 0;
 80081f8:	8763      	strh	r3, [r4, #58]	; 0x3a
        fadeAnimationStartAlpha = T::getAlpha();
 80081fa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
        fadeAnimationAlphaEquation = alphaProgressionEquation;
 80081fe:	6465      	str	r5, [r4, #68]	; 0x44
        fadeAnimationStartAlpha = T::getAlpha();
 8008200:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
        fadeAnimationRunning = true;
 8008204:	2301      	movs	r3, #1
 8008206:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        if (fadeAnimationDelay == 0 && fadeAnimationDuration == 0)
 800820a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800820c:	b913      	cbnz	r3, 8008214 <_ZN8touchgfx12FadeAnimatorINS_13AnimatedImageEE18startFadeAnimationEhtPFstsstE+0x40>
            nextFadeAnimationStep(); // Set end alpha and shut down
 800820e:	4620      	mov	r0, r4
 8008210:	f7fe f968 	bl	80064e4 <_ZN8touchgfx12FadeAnimatorINS_13AnimatedImageEE21nextFadeAnimationStepEv>
    }
 8008214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008218 <_ZN18lockScreenViewBase14handleKeyEventEh>:
    if(48 == key)
 8008218:	2930      	cmp	r1, #48	; 0x30
{
 800821a:	b538      	push	{r3, r4, r5, lr}
 800821c:	4604      	mov	r4, r0
    if(48 == key)
 800821e:	d123      	bne.n	8008268 <_ZN18lockScreenViewBase14handleKeyEventEh+0x50>
        fadeAnimationEndedCallback = 0;
 8008220:	2500      	movs	r5, #0
        fadeAnimationDelay = delay;
 8008222:	23b4      	movs	r3, #180	; 0xb4
        glass.startFadeAnimation(0, 30, touchgfx::EasingEquations::linearEaseIn);
 8008224:	221e      	movs	r2, #30
 8008226:	3098      	adds	r0, #152	; 0x98
 8008228:	8583      	strh	r3, [r0, #44]	; 0x2c
 800822a:	4629      	mov	r1, r5
        fadeAnimationEndedCallback = 0;
 800822c:	6385      	str	r5, [r0, #56]	; 0x38
 800822e:	4b0f      	ldr	r3, [pc, #60]	; (800826c <_ZN18lockScreenViewBase14handleKeyEventEh+0x54>)
 8008230:	f7ff fdfa 	bl	8007e28 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE18startFadeAnimationEhtPFstsstE>
        glass.setFadeAnimationEndedAction(fadeGlassEndedCallback);
 8008234:	f504 73ea 	add.w	r3, r4, #468	; 0x1d4
        waitAnimate.startFadeAnimation(255, 18, touchgfx::EasingEquations::linearEaseIn);
 8008238:	2212      	movs	r2, #18
 800823a:	21ff      	movs	r1, #255	; 0xff
 800823c:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
        fadeAnimationEndedCallback = &callback;
 8008240:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
        fadeAnimationEndedCallback = 0;
 8008244:	f8c4 5194 	str.w	r5, [r4, #404]	; 0x194
 8008248:	4b08      	ldr	r3, [pc, #32]	; (800826c <_ZN18lockScreenViewBase14handleKeyEventEh+0x54>)
 800824a:	f7ff ffc3 	bl	80081d4 <_ZN8touchgfx12FadeAnimatorINS_13AnimatedImageEE18startFadeAnimationEhtPFstsstE>
        waitAnimate.setFadeAnimationEndedAction(showWaitEndedCallback);
 800824e:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
        unlockNote.startFadeAnimation(0, 30, touchgfx::EasingEquations::linearEaseIn);
 8008252:	221e      	movs	r2, #30
 8008254:	4629      	mov	r1, r5
        fadeAnimationEndedCallback = &callback;
 8008256:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
 800825a:	f504 70cc 	add.w	r0, r4, #408	; 0x198
 800825e:	4b03      	ldr	r3, [pc, #12]	; (800826c <_ZN18lockScreenViewBase14handleKeyEventEh+0x54>)
        fadeAnimationEndedCallback = 0;
 8008260:	f8c4 51d0 	str.w	r5, [r4, #464]	; 0x1d0
 8008264:	f7ff fde0 	bl	8007e28 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE18startFadeAnimationEhtPFstsstE>
}
 8008268:	bd38      	pop	{r3, r4, r5, pc}
 800826a:	bf00      	nop
 800826c:	08019be1 	.word	0x08019be1

08008270 <_ZN18lockScreenViewBase28showWaitEndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_13AnimatedImageEEE>:
{
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	2500      	movs	r5, #0
        fadeAnimationDelay = delay;
 8008274:	238a      	movs	r3, #138	; 0x8a
 8008276:	4604      	mov	r4, r0
    waitAnimate.startFadeAnimation(0, 30, touchgfx::EasingEquations::linearEaseIn);
 8008278:	221e      	movs	r2, #30
        fadeAnimationEndedCallback = 0;
 800827a:	f8c0 5194 	str.w	r5, [r0, #404]	; 0x194
 800827e:	4629      	mov	r1, r5
        fadeAnimationDelay = delay;
 8008280:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
 8008284:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
 8008288:	4b07      	ldr	r3, [pc, #28]	; (80082a8 <_ZN18lockScreenViewBase28showWaitEndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_13AnimatedImageEEE+0x38>)
 800828a:	f7ff ffa3 	bl	80081d4 <_ZN8touchgfx12FadeAnimatorINS_13AnimatedImageEE18startFadeAnimationEhtPFstsstE>
 800828e:	22a2      	movs	r2, #162	; 0xa2
    bigLock.startFadeAnimation(0, 30, touchgfx::EasingEquations::linearEaseIn);
 8008290:	4b05      	ldr	r3, [pc, #20]	; (80082a8 <_ZN18lockScreenViewBase28showWaitEndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_13AnimatedImageEEE+0x38>)
 8008292:	4629      	mov	r1, r5
 8008294:	f8a4 2100 	strh.w	r2, [r4, #256]	; 0x100
 8008298:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
 800829c:	221e      	movs	r2, #30
        fadeAnimationEndedCallback = 0;
 800829e:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
 80082a2:	f7ff fdc1 	bl	8007e28 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE18startFadeAnimationEhtPFstsstE>
}
 80082a6:	bd38      	pop	{r3, r4, r5, pc}
 80082a8:	08019be1 	.word	0x08019be1

080082ac <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
     * @return true if button is pressed, false otherwise.
     */
    virtual bool getPressedState() const
    {
        return pressed;
    }
 80082ac:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80082b0:	4770      	bx	lr

080082b2 <_ZN18mainScreenViewBaseD1Ev>:
}

mainScreenViewBase::~mainScreenViewBase()
{

}
 80082b2:	4770      	bx	lr

080082b4 <_ZN18mainScreenViewBase11setupScreenEv>:

void mainScreenViewBase::setupScreen()
{
    transitionBegins();
 80082b4:	6803      	ldr	r3, [r0, #0]
 80082b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b8:	4718      	bx	r3

080082ba <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80082ba:	4770      	bx	lr

080082bc <_ZN8touchgfx12FadeAnimatorINS_6ButtonEED1Ev>:
class FadeAnimator : public T
 80082bc:	4770      	bx	lr

080082be <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80082be:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 80082c0:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80082c2:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80082c4:	68c2      	ldr	r2, [r0, #12]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	1055      	asrs	r5, r2, #1
 80082ca:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80082ce:	07d2      	lsls	r2, r2, #31
 80082d0:	bf48      	it	mi
 80082d2:	5962      	ldrmi	r2, [r4, r5]
    }
 80082d4:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80082d6:	bf48      	it	mi
 80082d8:	58d3      	ldrmi	r3, [r2, r3]
 80082da:	4718      	bx	r3

080082dc <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 80082dc:	6843      	ldr	r3, [r0, #4]
 80082de:	b12b      	cbz	r3, 80082ec <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 80082e0:	6883      	ldr	r3, [r0, #8]
 80082e2:	b92b      	cbnz	r3, 80082f0 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80082e4:	68c0      	ldr	r0, [r0, #12]
 80082e6:	f000 0001 	and.w	r0, r0, #1
 80082ea:	4770      	bx	lr
 80082ec:	4618      	mov	r0, r3
 80082ee:	4770      	bx	lr
 80082f0:	2001      	movs	r0, #1
    }
 80082f2:	4770      	bx	lr

080082f4 <_ZN8touchgfx12FadeAnimatorINS_6ButtonEE21setFadeAnimationDelayEt>:
        fadeAnimationDelay = delay;
 80082f4:	86c1      	strh	r1, [r0, #54]	; 0x36
    }
 80082f6:	4770      	bx	lr

080082f8 <_ZNK8touchgfx12FadeAnimatorINS_6ButtonEE21getFadeAnimationDelayEv>:
    }
 80082f8:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
 80082fa:	4770      	bx	lr

080082fc <_ZN8touchgfx12FadeAnimatorINS_6ButtonEED0Ev>:
class FadeAnimator : public T
 80082fc:	b510      	push	{r4, lr}
 80082fe:	4604      	mov	r4, r0
 8008300:	2148      	movs	r1, #72	; 0x48
 8008302:	f022 fb5e 	bl	802a9c2 <_ZdlPvj>
 8008306:	4620      	mov	r0, r4
 8008308:	bd10      	pop	{r4, pc}

0800830a <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800830a:	b510      	push	{r4, lr}
 800830c:	4604      	mov	r4, r0
 800830e:	2110      	movs	r1, #16
 8008310:	f022 fb57 	bl	802a9c2 <_ZdlPvj>
 8008314:	4620      	mov	r0, r4
 8008316:	bd10      	pop	{r4, pc}

08008318 <_ZN18mainScreenViewBaseD0Ev>:
mainScreenViewBase::~mainScreenViewBase()
 8008318:	b510      	push	{r4, lr}
 800831a:	4604      	mov	r4, r0
}
 800831c:	f240 51a4 	movw	r1, #1444	; 0x5a4
 8008320:	f022 fb4f 	bl	802a9c2 <_ZdlPvj>
 8008324:	4620      	mov	r0, r4
 8008326:	bd10      	pop	{r4, pc}

08008328 <_ZN18mainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:
}

void mainScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8008328:	b538      	push	{r3, r4, r5, lr}
    if (&src == &about)
 800832a:	f500 7367 	add.w	r3, r0, #924	; 0x39c
{
 800832e:	4604      	mov	r4, r0
 8008330:	460d      	mov	r5, r1
    if (&src == &about)
 8008332:	4299      	cmp	r1, r3
 8008334:	d103      	bne.n	800833e <_ZN18mainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual void setupScreen();
    virtual void transitionBegins();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8008336:	f00f fdbf 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //about
        //When about clicked change screen to aboutScreen
        //Go to aboutScreen with screen transition towards East
        application().gotoaboutScreenScreenCoverTransitionEast();
 800833a:	f7fc fdbd 	bl	8004eb8 <_ZN23FrontendApplicationBase40gotoaboutScreenScreenCoverTransitionEastEv>
    }
    if (&src == &bat)
 800833e:	f504 7379 	add.w	r3, r4, #996	; 0x3e4
 8008342:	429d      	cmp	r5, r3
 8008344:	d103      	bne.n	800834e <_ZN18mainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x26>
 8008346:	f00f fdb7 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //bat
        //When bat clicked change screen to batScreen
        //Go to batScreen with screen transition towards East
        application().gotobatScreenScreenCoverTransitionEast();
 800834a:	f7fc fda5 	bl	8004e98 <_ZN23FrontendApplicationBase38gotobatScreenScreenCoverTransitionEastEv>
    }
    if (&src == &start)
 800834e:	f204 4374 	addw	r3, r4, #1140	; 0x474
 8008352:	429d      	cmp	r5, r3
 8008354:	d103      	bne.n	800835e <_ZN18mainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x36>
 8008356:	f00f fdaf 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //start
        //When start clicked change screen to startScreen
        //Go to startScreen with screen transition towards East
        application().gotostartScreenScreenCoverTransitionEast();
 800835a:	f7fc fd8d 	bl	8004e78 <_ZN23FrontendApplicationBase40gotostartScreenScreenCoverTransitionEastEv>
    }
    if (&src == &refreash)
 800835e:	f204 5304 	addw	r3, r4, #1284	; 0x504
 8008362:	429d      	cmp	r5, r3
 8008364:	d10c      	bne.n	8008380 <_ZN18mainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    {
        //changedbm
        //When refreash clicked execute C++ code
        //Execute C++ code
        if(dbm1.isVisible()){
 8008366:	f894 22d5 	ldrb.w	r2, [r4, #725]	; 0x2d5
 800836a:	b1ca      	cbz	r2, 80083a0 <_ZN18mainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x78>
        visible = vis;
 800836c:	2300      	movs	r3, #0
 800836e:	f884 32d5 	strb.w	r3, [r4, #725]	; 0x2d5
 8008372:	2301      	movs	r3, #1
 8008374:	f884 328d 	strb.w	r3, [r4, #653]	; 0x28d
        }
        else if(dbm3.isVisible()){
            dbm3.setVisible(0);
            dbm1.setVisible(1);
        }
        dbm1.invalidate();
 8008378:	f504 702c 	add.w	r0, r4, #688	; 0x2b0
 800837c:	f010 fe87 	bl	801908e <_ZNK8touchgfx8Drawable10invalidateEv>
    }
    if (&src == &smallLock)
 8008380:	f204 534c 	addw	r3, r4, #1356	; 0x54c
 8008384:	42ab      	cmp	r3, r5
 8008386:	d11e      	bne.n	80083c6 <_ZN18mainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x9e>
    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8008388:	2300      	movs	r3, #0
    {
        //fadeLockButton
        //When smallLock clicked fade smallLock
        //Set alpha to 0 on smallLock
        smallLock.setAlpha(0);
        smallLock.invalidate();
 800838a:	4628      	mov	r0, r5
 800838c:	f884 357e 	strb.w	r3, [r4, #1406]	; 0x57e
 8008390:	f010 fe7d 	bl	801908e <_ZNK8touchgfx8Drawable10invalidateEv>
 8008394:	f00f fd90 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
        //lockScreen
        //When fadeLockButton completed change screen to lockScreen
        //Go to lockScreen with no screen transition
        application().gotolockScreenScreenNoTransition();
    }
}
 8008398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        application().gotolockScreenScreenNoTransition();
 800839c:	f7fc bd3c 	b.w	8004e18 <_ZN23FrontendApplicationBase32gotolockScreenScreenNoTransitionEv>
        else if(dbm2.isVisible()){
 80083a0:	f894 328d 	ldrb.w	r3, [r4, #653]	; 0x28d
 80083a4:	b12b      	cbz	r3, 80083b2 <_ZN18mainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8a>
 80083a6:	2301      	movs	r3, #1
 80083a8:	f884 228d 	strb.w	r2, [r4, #653]	; 0x28d
 80083ac:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
    }
 80083b0:	e7e2      	b.n	8008378 <_ZN18mainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x50>
        else if(dbm3.isVisible()){
 80083b2:	f894 2245 	ldrb.w	r2, [r4, #581]	; 0x245
 80083b6:	2a00      	cmp	r2, #0
 80083b8:	d0de      	beq.n	8008378 <_ZN18mainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x50>
        visible = vis;
 80083ba:	f884 3245 	strb.w	r3, [r4, #581]	; 0x245
 80083be:	2301      	movs	r3, #1
 80083c0:	f884 32d5 	strb.w	r3, [r4, #725]	; 0x2d5
    }
 80083c4:	e7d8      	b.n	8008378 <_ZN18mainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x50>
}
 80083c6:	bd38      	pop	{r3, r4, r5, pc}

080083c8 <_ZNK8touchgfx6Button17invalidateContentEv>:
    Bitmap getCurrentlyDisplayedBitmap() const
    {
        return (pressed ? down : up);
    }

    virtual void invalidateContent() const
 80083c8:	b508      	push	{r3, lr}
    {
        if (alpha > 0)
 80083ca:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80083ce:	b10b      	cbz	r3, 80083d4 <_ZNK8touchgfx6Button17invalidateContentEv+0xc>
        {
            Widget::invalidateContent();
 80083d0:	f7fa f931 	bl	8002636 <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 80083d4:	bd08      	pop	{r3, pc}

080083d6 <_ZN8touchgfx14AbstractButton13executeActionEv>:
    virtual void executeAction()
 80083d6:	b510      	push	{r4, lr}
 80083d8:	4604      	mov	r4, r0
        if (action && action->isValid())
 80083da:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80083dc:	b150      	cbz	r0, 80083f4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80083de:	6803      	ldr	r3, [r0, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	4798      	blx	r3
 80083e4:	b130      	cbz	r0, 80083f4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
            action->execute(*this);
 80083e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80083e8:	4621      	mov	r1, r4
 80083ea:	6803      	ldr	r3, [r0, #0]
    }
 80083ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            action->execute(*this);
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	4718      	bx	r3
    }
 80083f4:	bd10      	pop	{r4, pc}

080083f6 <_ZN8touchgfx12FadeAnimatorINS_6ButtonEE15handleTickEventEv>:
        if (fadeAnimationRunning)
 80083f6:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    virtual void handleTickEvent()
 80083fa:	b570      	push	{r4, r5, r6, lr}
 80083fc:	4604      	mov	r4, r0
        if (fadeAnimationRunning)
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d040      	beq.n	8008484 <_ZN8touchgfx12FadeAnimatorINS_6ButtonEE15handleTickEventEv+0x8e>
            fadeAnimationCounter++;
 8008402:	8e80      	ldrh	r0, [r0, #52]	; 0x34
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8008404:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
            fadeAnimationCounter++;
 8008406:	3001      	adds	r0, #1
 8008408:	b280      	uxth	r0, r0
            if (fadeAnimationCounter >= fadeAnimationDelay)
 800840a:	4298      	cmp	r0, r3
            fadeAnimationCounter++;
 800840c:	86a0      	strh	r0, [r4, #52]	; 0x34
            if (fadeAnimationCounter >= fadeAnimationDelay)
 800840e:	d339      	bcc.n	8008484 <_ZN8touchgfx12FadeAnimatorINS_6ButtonEE15handleTickEventEv+0x8e>
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 8008410:	8f65      	ldrh	r5, [r4, #58]	; 0x3a
 8008412:	1ac0      	subs	r0, r0, r3
 8008414:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8008416:	2100      	movs	r1, #0
 8008418:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800841a:	b280      	uxth	r0, r0
 800841c:	1b52      	subs	r2, r2, r5
 800841e:	6c26      	ldr	r6, [r4, #64]	; 0x40
 8008420:	b212      	sxth	r2, r2
 8008422:	47b0      	blx	r6
 8008424:	4405      	add	r5, r0
                if (T::getAlpha() != newAlpha)
 8008426:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 800842a:	b2ab      	uxth	r3, r5
 800842c:	b22d      	sxth	r5, r5
                if (T::getAlpha() != newAlpha)
 800842e:	42aa      	cmp	r2, r5
 8008430:	d005      	beq.n	800843e <_ZN8touchgfx12FadeAnimatorINS_6ButtonEE15handleTickEventEv+0x48>
                    if (newAlpha == 0)
 8008432:	bb0d      	cbnz	r5, 8008478 <_ZN8touchgfx12FadeAnimatorINS_6ButtonEE15handleTickEventEv+0x82>
                        T::invalidateContent();
 8008434:	4620      	mov	r0, r4
 8008436:	f7ff ffc7 	bl	80083c8 <_ZNK8touchgfx6Button17invalidateContentEv>
        alpha = newAlpha;
 800843a:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
                if (fadeAnimationCounter >= (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 800843e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8008440:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8008442:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8008444:	440b      	add	r3, r1
 8008446:	429a      	cmp	r2, r3
 8008448:	d31c      	bcc.n	8008484 <_ZN8touchgfx12FadeAnimatorINS_6ButtonEE15handleTickEventEv+0x8e>
                    fadeAnimationRunning = false;
 800844a:	2300      	movs	r3, #0
 800844c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
                    fadeAnimationDuration = 0;
 8008450:	8723      	strh	r3, [r4, #56]	; 0x38
                    Application::getInstance()->unregisterTimerWidget(this);
 8008452:	f00f fd31 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
        timerWidgets.remove(w);
 8008456:	4621      	mov	r1, r4
 8008458:	3004      	adds	r0, #4
 800845a:	f00f fd7a 	bl	8017f52 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
                    if (fadeAnimationEndedCallback && fadeAnimationEndedCallback->isValid())
 800845e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8008460:	b180      	cbz	r0, 8008484 <_ZN8touchgfx12FadeAnimatorINS_6ButtonEE15handleTickEventEv+0x8e>
 8008462:	6803      	ldr	r3, [r0, #0]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	4798      	blx	r3
 8008468:	b160      	cbz	r0, 8008484 <_ZN8touchgfx12FadeAnimatorINS_6ButtonEE15handleTickEventEv+0x8e>
                        fadeAnimationEndedCallback->execute(*this);
 800846a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800846c:	4621      	mov	r1, r4
 800846e:	6803      	ldr	r3, [r0, #0]
    }
 8008470:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        fadeAnimationEndedCallback->execute(*this);
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	4718      	bx	r3
                        T::invalidateContent();
 8008478:	4620      	mov	r0, r4
                        T::setAlpha((uint8_t)newAlpha);
 800847a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
                        T::invalidateContent();
 800847e:	f7ff ffa3 	bl	80083c8 <_ZNK8touchgfx6Button17invalidateContentEv>
 8008482:	e7dc      	b.n	800843e <_ZN8touchgfx12FadeAnimatorINS_6ButtonEE15handleTickEventEv+0x48>
    }
 8008484:	bd70      	pop	{r4, r5, r6, pc}
	...

08008488 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
        return typedTextId < numberOfTypedTexts;
 8008488:	4b1a      	ldr	r3, [pc, #104]	; (80084f4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x6c>)
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 800848a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
        if (typedText.hasValidId())
 800848c:	881b      	ldrh	r3, [r3, #0]
    void updateTextPosition()
 800848e:	4606      	mov	r6, r0
 8008490:	8f01      	ldrh	r1, [r0, #56]	; 0x38
        if (typedText.hasValidId())
 8008492:	428b      	cmp	r3, r1
 8008494:	d92b      	bls.n	80084ee <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x66>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8008496:	4b18      	ldr	r3, [pc, #96]	; (80084f8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x70>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	b92b      	cbnz	r3, 80084a8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 800849c:	4b17      	ldr	r3, [pc, #92]	; (80084fc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x74>)
 800849e:	216c      	movs	r1, #108	; 0x6c
 80084a0:	4a17      	ldr	r2, [pc, #92]	; (8008500 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x78>)
 80084a2:	4818      	ldr	r0, [pc, #96]	; (8008504 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7c>)
 80084a4:	f022 fc6a 	bl	802ad7c <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 80084a8:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 80084ac:	4b16      	ldr	r3, [pc, #88]	; (8008508 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 80084b4:	4b15      	ldr	r3, [pc, #84]	; (800850c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x84>)
 80084b6:	6818      	ldr	r0, [r3, #0]
 80084b8:	f7fd fc20 	bl	8005cfc <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 80084bc:	682b      	ldr	r3, [r5, #0]
 80084be:	9001      	str	r0, [sp, #4]
 80084c0:	4628      	mov	r0, r5
 80084c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c4:	4798      	blx	r3
 80084c6:	682b      	ldr	r3, [r5, #0]
 80084c8:	4604      	mov	r4, r0
 80084ca:	9901      	ldr	r1, [sp, #4]
 80084cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084ce:	4628      	mov	r0, r5
 80084d0:	4798      	blx	r3
 80084d2:	fb14 f400 	smulbb	r4, r4, r0
 80084d6:	682b      	ldr	r3, [r5, #0]
 80084d8:	4628      	mov	r0, r5
 80084da:	b2a4      	uxth	r4, r4
 80084dc:	9901      	ldr	r1, [sp, #4]
 80084de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e0:	4798      	blx	r3
 80084e2:	1823      	adds	r3, r4, r0
 80084e4:	b21b      	sxth	r3, r3
 80084e6:	f8a6 3046 	strh.w	r3, [r6, #70]	; 0x46
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 80084ea:	b002      	add	sp, #8
 80084ec:	bd70      	pop	{r4, r5, r6, pc}
 80084ee:	2300      	movs	r3, #0
 80084f0:	e7f9      	b.n	80084e6 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5e>
 80084f2:	bf00      	nop
 80084f4:	20027d04 	.word	0x20027d04
 80084f8:	20027d00 	.word	0x20027d00
 80084fc:	0802efde 	.word	0x0802efde
 8008500:	0802f020 	.word	0x0802f020
 8008504:	0802f05b 	.word	0x0802f05b
 8008508:	20027d08 	.word	0x20027d08
 800850c:	20027d0c 	.word	0x20027d0c

08008510 <_ZN18mainScreenViewBaseC1Ev>:
mainScreenViewBase::mainScreenViewBase() :
 8008510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008514:	4604      	mov	r4, r0
 8008516:	2500      	movs	r5, #0
 8008518:	f64f 76ff 	movw	r6, #65535	; 0xffff
    buttonCallback(this, &mainScreenViewBase::buttonCallbackHandler)
 800851c:	4627      	mov	r7, r4
 800851e:	f104 0998 	add.w	r9, r4, #152	; 0x98
 8008522:	f104 08c4 	add.w	r8, r4, #196	; 0xc4
 8008526:	f204 5a04 	addw	sl, r4, #1284	; 0x504
 800852a:	f204 5b4c 	addw	fp, r4, #1356	; 0x54c
mainScreenViewBase::mainScreenViewBase() :
 800852e:	ed2d 8b10 	vpush	{d8-d15}
 8008532:	b08b      	sub	sp, #44	; 0x2c
 8008534:	f011 f942 	bl	80197bc <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &mainScreenViewBase::buttonCallbackHandler)
 8008538:	4bf1      	ldr	r3, [pc, #964]	; (8008900 <_ZN18mainScreenViewBaseC1Ev+0x3f0>)
 800853a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800853c:	f847 3b40 	str.w	r3, [r7], #64
 8008540:	4638      	mov	r0, r7
 8008542:	f7fd fd23 	bl	8005f8c <_ZN8touchgfx3BoxC1Ev>
 8008546:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800854a:	4618      	mov	r0, r3
 800854c:	ee0f 3a10 	vmov	s30, r3
 8008550:	f7fd fd1c 	bl	8005f8c <_ZN8touchgfx3BoxC1Ev>
 8008554:	a908      	add	r1, sp, #32
 8008556:	4648      	mov	r0, r9
 8008558:	f8ad 6020 	strh.w	r6, [sp, #32]
 800855c:	f7fd fd2a 	bl	8005fb4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8008560:	a908      	add	r1, sp, #32
 8008562:	4640      	mov	r0, r8
 8008564:	f8ad 6020 	strh.w	r6, [sp, #32]
 8008568:	f7fd fd24 	bl	8005fb4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800856c:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
 8008570:	a908      	add	r1, sp, #32
 8008572:	f8ad 6020 	strh.w	r6, [sp, #32]
 8008576:	4618      	mov	r0, r3
 8008578:	ee0e 3a90 	vmov	s29, r3
 800857c:	f7fd fd1a 	bl	8005fb4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8008580:	f504 738e 	add.w	r3, r4, #284	; 0x11c
 8008584:	4618      	mov	r0, r3
 8008586:	ee0f 3a90 	vmov	s31, r3
 800858a:	f7fd fcff 	bl	8005f8c <_ZN8touchgfx3BoxC1Ev>
 800858e:	f504 73a4 	add.w	r3, r4, #328	; 0x148
 8008592:	4618      	mov	r0, r3
 8008594:	ee08 3a10 	vmov	s16, r3
 8008598:	f7fd fd26 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 800859c:	f504 73c8 	add.w	r3, r4, #400	; 0x190
 80085a0:	4618      	mov	r0, r3
 80085a2:	ee08 3a90 	vmov	s17, r3
 80085a6:	f7fd fd1f 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 80085aa:	f504 73ec 	add.w	r3, r4, #472	; 0x1d8
 80085ae:	4618      	mov	r0, r3
 80085b0:	ee09 3a10 	vmov	s18, r3
 80085b4:	f7fd fd18 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 80085b8:	f504 7308 	add.w	r3, r4, #544	; 0x220
 80085bc:	4618      	mov	r0, r3
 80085be:	ee09 3a90 	vmov	s19, r3
 80085c2:	f7fd fd11 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 80085c6:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80085ca:	4618      	mov	r0, r3
 80085cc:	ee0a 3a10 	vmov	s20, r3
 80085d0:	f7fd fd0a 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 80085d4:	f504 732c 	add.w	r3, r4, #688	; 0x2b0
 80085d8:	4618      	mov	r0, r3
 80085da:	ee0a 3a90 	vmov	s21, r3
 80085de:	f7fd fd03 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 80085e2:	f504 733e 	add.w	r3, r4, #760	; 0x2f8
 80085e6:	4618      	mov	r0, r3
 80085e8:	ee0b 3a10 	vmov	s22, r3
 80085ec:	f7fd fcfc 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 80085f0:	f504 7350 	add.w	r3, r4, #832	; 0x340
          fadeAnimationEndedCallback(0)
 80085f4:	4618      	mov	r0, r3
 80085f6:	ee0b 3a90 	vmov	s23, r3
 80085fa:	f7fd fcf5 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 80085fe:	4bc1      	ldr	r3, [pc, #772]	; (8008904 <_ZN18mainScreenViewBaseC1Ev+0x3f4>)
          fadeAnimationRunning(false),
 8008600:	f884 5388 	strb.w	r5, [r4, #904]	; 0x388
          fadeAnimationEndedCallback(0)
 8008604:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
 8008608:	f504 7367 	add.w	r3, r4, #924	; 0x39c
          fadeAnimationCounter(0),
 800860c:	f8a4 538a 	strh.w	r5, [r4, #906]	; 0x38a
 8008610:	4618      	mov	r0, r3
          fadeAnimationDelay(0),
 8008612:	f8a4 538c 	strh.w	r5, [r4, #908]	; 0x38c
          fadeAnimationEndedCallback(0)
 8008616:	f8c4 5398 	str.w	r5, [r4, #920]	; 0x398
 800861a:	ee0c 3a10 	vmov	s24, r3
 800861e:	f00d f8db 	bl	80157d8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8008622:	f504 7379 	add.w	r3, r4, #996	; 0x3e4
 8008626:	4618      	mov	r0, r3
 8008628:	ee0c 3a90 	vmov	s25, r3
 800862c:	f00d f8d4 	bl	80157d8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8008630:	f204 432c 	addw	r3, r4, #1068	; 0x42c
 8008634:	4618      	mov	r0, r3
 8008636:	ee0d 3a10 	vmov	s26, r3
 800863a:	f00d f8cd 	bl	80157d8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800863e:	f204 4374 	addw	r3, r4, #1140	; 0x474
 8008642:	4618      	mov	r0, r3
 8008644:	ee0d 3a90 	vmov	s27, r3
 8008648:	f00d f8c6 	bl	80157d8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800864c:	f204 43bc 	addw	r3, r4, #1212	; 0x4bc
 8008650:	4618      	mov	r0, r3
 8008652:	ee0e 3a10 	vmov	s28, r3
 8008656:	f00d f8bf 	bl	80157d8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800865a:	4650      	mov	r0, sl
 800865c:	f00d f8bc 	bl	80157d8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
        : Widget(), action(), pressed(false)
 8008660:	4629      	mov	r1, r5
 8008662:	2226      	movs	r2, #38	; 0x26
 8008664:	4658      	mov	r0, fp
 8008666:	f022 fe11 	bl	802b28c <memset>
 800866a:	4658      	mov	r0, fp
 800866c:	f7fd fc7c 	bl	8005f68 <_ZN8touchgfx6WidgetC1Ev>
        touchable = touch;
 8008670:	f04f 0301 	mov.w	r3, #1
    __background.setPosition(0, 0, 800, 480);
 8008674:	462a      	mov	r2, r5
 8008676:	4629      	mov	r1, r5
 8008678:	f884 3570 	strb.w	r3, [r4, #1392]	; 0x570
 800867c:	4638      	mov	r0, r7
 800867e:	4ba2      	ldr	r3, [pc, #648]	; (8008908 <_ZN18mainScreenViewBaseC1Ev+0x3f8>)
 8008680:	f8a4 657a 	strh.w	r6, [r4, #1402]	; 0x57a
 8008684:	1d26      	adds	r6, r4, #4
 8008686:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
 800868a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800868e:	f8c4 5574 	str.w	r5, [r4, #1396]	; 0x574
 8008692:	f8c4 357c 	str.w	r3, [r4, #1404]	; 0x57c
        : pobject(pObject), pmemfun(pmemfun_1)
 8008696:	4b9d      	ldr	r3, [pc, #628]	; (800890c <_ZN18mainScreenViewBaseC1Ev+0x3fc>)
 8008698:	f884 5578 	strb.w	r5, [r4, #1400]	; 0x578
 800869c:	f8c4 3594 	str.w	r3, [r4, #1428]	; 0x594
 80086a0:	4b9b      	ldr	r3, [pc, #620]	; (8008910 <_ZN18mainScreenViewBaseC1Ev+0x400>)
          fadeAnimationCounter(0),
 80086a2:	f8c4 5580 	str.w	r5, [r4, #1408]	; 0x580
 80086a6:	f8c4 359c 	str.w	r3, [r4, #1436]	; 0x59c
 80086aa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
          fadeAnimationEndedCallback(0)
 80086ae:	f8c4 5590 	str.w	r5, [r4, #1424]	; 0x590
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80086b8:	f8c4 4598 	str.w	r4, [r4, #1432]	; 0x598
 80086bc:	f8c4 55a0 	str.w	r5, [r4, #1440]	; 0x5a0
 80086c0:	f7fc fa72 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80086c4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80086c8:	4639      	mov	r1, r7
 80086ca:	4630      	mov	r0, r6
 80086cc:	66a3      	str	r3, [r4, #104]	; 0x68
        boundingArea = calculateBoundingArea();
 80086ce:	af02      	add	r7, sp, #8
 80086d0:	f009 f9e4 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    backGround.setPosition(0, 0, 800, 480);
 80086d4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80086d8:	462a      	mov	r2, r5
 80086da:	4629      	mov	r1, r5
 80086dc:	ee1f 0a10 	vmov	r0, s30
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80086e6:	f7fc fa5f 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80086ea:	4b8a      	ldr	r3, [pc, #552]	; (8008914 <_ZN18mainScreenViewBaseC1Ev+0x404>)
 80086ec:	ee1f 1a10 	vmov	r1, s30
 80086f0:	4630      	mov	r0, r6
 80086f2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 80086f6:	f009 f9d1 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    backPicture.setXY(0, 0);
 80086fa:	462a      	mov	r2, r5
 80086fc:	4629      	mov	r1, r5
 80086fe:	4648      	mov	r0, r9
 8008700:	f7fd fc24 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8008704:	232f      	movs	r3, #47	; 0x2f
    backPicture.setBitmap(touchgfx::Bitmap(BITMAP_PLANE_ID));
 8008706:	a908      	add	r1, sp, #32
 8008708:	4648      	mov	r0, r9
 800870a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800870e:	f00c ff2c 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8008712:	4649      	mov	r1, r9
 8008714:	4630      	mov	r0, r6
 8008716:	f009 f9c1 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    link_img.setXY(650, 258);
 800871a:	f44f 7281 	mov.w	r2, #258	; 0x102
 800871e:	4640      	mov	r0, r8
 8008720:	f240 218a 	movw	r1, #650	; 0x28a
 8008724:	f7fd fc12 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8008728:	2338      	movs	r3, #56	; 0x38
    link_img.setBitmap(touchgfx::Bitmap(BITMAP_STATE_ID));
 800872a:	a908      	add	r1, sp, #32
 800872c:	4640      	mov	r0, r8
 800872e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008732:	f00c ff1a 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8008736:	4641      	mov	r1, r8
 8008738:	4630      	mov	r0, r6
 800873a:	f009 f9af 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    rssi_img.setXY(486, 253);
 800873e:	22fd      	movs	r2, #253	; 0xfd
 8008740:	ee1e 0a90 	vmov	r0, s29
 8008744:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 8008748:	f7fd fc00 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 800874c:	2335      	movs	r3, #53	; 0x35
    rssi_img.setBitmap(touchgfx::Bitmap(BITMAP_RSSI_ID));
 800874e:	a908      	add	r1, sp, #32
 8008750:	ee1e 0a90 	vmov	r0, s29
 8008754:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008758:	f00c ff07 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800875c:	ee1e 1a90 	vmov	r1, s29
 8008760:	4630      	mov	r0, r6
 8008762:	f009 f99b 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    line.setPosition(486, 173, 6, 30);
 8008766:	231e      	movs	r3, #30
 8008768:	22ad      	movs	r2, #173	; 0xad
 800876a:	ee1f 0a90 	vmov	r0, s31
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 8008774:	2306      	movs	r3, #6
        color = newColor;
 8008776:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8008920 <_ZN18mainScreenViewBaseC1Ev+0x410>
 800877a:	f7fc fa15 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
 800877e:	4b66      	ldr	r3, [pc, #408]	; (8008918 <_ZN18mainScreenViewBaseC1Ev+0x408>)
 8008780:	ee1f 1a90 	vmov	r1, s31
 8008784:	4630      	mov	r0, r6
 8008786:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
 800878a:	f009 f987 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    link.setXY(690, 252);
 800878e:	22fc      	movs	r2, #252	; 0xfc
 8008790:	ee18 0a10 	vmov	r0, s16
 8008794:	f240 21b2 	movw	r1, #690	; 0x2b2
 8008798:	f7fd fbd8 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
        boundingArea = calculateBoundingArea();
 800879c:	ee18 1a10 	vmov	r1, s16
 80087a0:	4638      	mov	r0, r7
        color = newColor;
 80087a2:	f8c4 9178 	str.w	r9, [r4, #376]	; 0x178
        linespace = space;
 80087a6:	f8a4 517c 	strh.w	r5, [r4, #380]	; 0x17c
        boundingArea = calculateBoundingArea();
 80087aa:	f00c f94d 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80087ae:	f504 73c2 	add.w	r3, r4, #388	; 0x184
        : typedTextId(id)
 80087b2:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8008924 <_ZN18mainScreenViewBaseC1Ev+0x414>
 80087b6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80087ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80087be:	231f      	movs	r3, #31
    link.setTypedText(touchgfx::TypedText(T___SINGLEUSE_I1KO));
 80087c0:	a908      	add	r1, sp, #32
 80087c2:	ee18 0a10 	vmov	r0, s16
 80087c6:	f8cd 8020 	str.w	r8, [sp, #32]
 80087ca:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80087ce:	f00c fbd5 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80087d2:	ee18 1a10 	vmov	r1, s16
 80087d6:	4630      	mov	r0, r6
 80087d8:	f009 f960 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    status.setXY(649, 218);
 80087dc:	ee18 0a90 	vmov	r0, s17
 80087e0:	22da      	movs	r2, #218	; 0xda
 80087e2:	f240 2189 	movw	r1, #649	; 0x289
 80087e6:	f7fd fbb1 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80087ea:	4a4c      	ldr	r2, [pc, #304]	; (800891c <_ZN18mainScreenViewBaseC1Ev+0x40c>)
        boundingArea = calculateBoundingArea();
 80087ec:	ee18 1a90 	vmov	r1, s17
 80087f0:	4638      	mov	r0, r7
        color = newColor;
 80087f2:	f8c4 21c0 	str.w	r2, [r4, #448]	; 0x1c0
        linespace = space;
 80087f6:	f8a4 51c4 	strh.w	r5, [r4, #452]	; 0x1c4
        boundingArea = calculateBoundingArea();
 80087fa:	f00c f925 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80087fe:	f504 73e6 	add.w	r3, r4, #460	; 0x1cc
 8008802:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8008806:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800880a:	2321      	movs	r3, #33	; 0x21
    status.setTypedText(touchgfx::TypedText(T___SINGLEUSE_60YG));
 800880c:	a908      	add	r1, sp, #32
 800880e:	ee18 0a90 	vmov	r0, s17
 8008812:	f8cd 8020 	str.w	r8, [sp, #32]
 8008816:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800881a:	f00c fbaf 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800881e:	ee18 1a90 	vmov	r1, s17
 8008822:	4630      	mov	r0, r6
 8008824:	f009 f93a 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RSSI.setXY(485, 218);
 8008828:	ee19 0a10 	vmov	r0, s18
 800882c:	22da      	movs	r2, #218	; 0xda
 800882e:	f240 11e5 	movw	r1, #485	; 0x1e5
 8008832:	f7fd fb8b 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8008836:	4a39      	ldr	r2, [pc, #228]	; (800891c <_ZN18mainScreenViewBaseC1Ev+0x40c>)
        boundingArea = calculateBoundingArea();
 8008838:	ee19 1a10 	vmov	r1, s18
 800883c:	4638      	mov	r0, r7
        color = newColor;
 800883e:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
        linespace = space;
 8008842:	f8a4 520c 	strh.w	r5, [r4, #524]	; 0x20c
        boundingArea = calculateBoundingArea();
 8008846:	f00c f8ff 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800884a:	f504 7305 	add.w	r3, r4, #532	; 0x214
 800884e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8008852:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008856:	2322      	movs	r3, #34	; 0x22
    RSSI.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BS2W));
 8008858:	a908      	add	r1, sp, #32
 800885a:	ee19 0a10 	vmov	r0, s18
 800885e:	f8cd 8020 	str.w	r8, [sp, #32]
 8008862:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8008866:	f00c fb89 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800886a:	ee19 1a10 	vmov	r1, s18
 800886e:	4630      	mov	r0, r6
 8008870:	f009 f914 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    dbm3.setXY(525, 252);
 8008874:	22fc      	movs	r2, #252	; 0xfc
 8008876:	ee19 0a90 	vmov	r0, s19
 800887a:	f240 210d 	movw	r1, #525	; 0x20d
 800887e:	f7fd fb65 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8008882:	ee19 1a90 	vmov	r1, s19
 8008886:	4638      	mov	r0, r7
        color = newColor;
 8008888:	f8c4 9250 	str.w	r9, [r4, #592]	; 0x250
        linespace = space;
 800888c:	f8a4 5254 	strh.w	r5, [r4, #596]	; 0x254
        boundingArea = calculateBoundingArea();
 8008890:	f00c f8da 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8008894:	f504 7317 	add.w	r3, r4, #604	; 0x25c
 8008898:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800889c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80088a0:	2320      	movs	r3, #32
    dbm3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_P5ZP));
 80088a2:	ee19 0a90 	vmov	r0, s19
 80088a6:	f8cd 8020 	str.w	r8, [sp, #32]
 80088aa:	eb0d 0103 	add.w	r1, sp, r3
 80088ae:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80088b2:	f00c fb63 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80088b6:	ee19 1a90 	vmov	r1, s19
 80088ba:	4630      	mov	r0, r6
 80088bc:	f009 f8ee 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    dbm2.setXY(521, 252);
 80088c0:	22fc      	movs	r2, #252	; 0xfc
 80088c2:	ee1a 0a10 	vmov	r0, s20
 80088c6:	f240 2109 	movw	r1, #521	; 0x209
 80088ca:	f7fd fb3f 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 80088ce:	ee1a 1a10 	vmov	r1, s20
 80088d2:	4638      	mov	r0, r7
        color = newColor;
 80088d4:	f8c4 9298 	str.w	r9, [r4, #664]	; 0x298
        linespace = space;
 80088d8:	f8a4 529c 	strh.w	r5, [r4, #668]	; 0x29c
        boundingArea = calculateBoundingArea();
 80088dc:	f00c f8b4 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80088e0:	f504 7329 	add.w	r3, r4, #676	; 0x2a4
 80088e4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80088e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80088ec:	2314      	movs	r3, #20
    dbm2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9M9A));
 80088ee:	a908      	add	r1, sp, #32
 80088f0:	ee1a 0a10 	vmov	r0, s20
 80088f4:	f8cd 8020 	str.w	r8, [sp, #32]
 80088f8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80088fc:	e014      	b.n	8008928 <_ZN18mainScreenViewBaseC1Ev+0x418>
 80088fe:	bf00      	nop
 8008900:	0802f84c 	.word	0x0802f84c
 8008904:	0802f1d4 	.word	0x0802f1d4
 8008908:	0802f7b8 	.word	0x0802f7b8
 800890c:	0802f834 	.word	0x0802f834
 8008910:	08008329 	.word	0x08008329
 8008914:	ffe3eaf1 	.word	0xffe3eaf1
 8008918:	ff808080 	.word	0xff808080
 800891c:	ff545454 	.word	0xff545454
 8008920:	ff9e9e9e 	.word	0xff9e9e9e
 8008924:	0802e2a4 	.word	0x0802e2a4
 8008928:	f00c fb28 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800892c:	ee1a 1a10 	vmov	r1, s20
 8008930:	4630      	mov	r0, r6
 8008932:	f009 f8b3 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    dbm1.setXY(525, 252);
 8008936:	22fc      	movs	r2, #252	; 0xfc
 8008938:	ee1a 0a90 	vmov	r0, s21
 800893c:	f240 210d 	movw	r1, #525	; 0x20d
 8008940:	f7fd fb04 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8008944:	ee1a 1a90 	vmov	r1, s21
 8008948:	4638      	mov	r0, r7
        color = newColor;
 800894a:	f8c4 92e0 	str.w	r9, [r4, #736]	; 0x2e0
        linespace = space;
 800894e:	f8a4 52e4 	strh.w	r5, [r4, #740]	; 0x2e4
 8008952:	f04f 090d 	mov.w	r9, #13
        boundingArea = calculateBoundingArea();
 8008956:	f00c f877 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800895a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800895e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8008962:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008966:	2313      	movs	r3, #19
    dbm1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BWHC));
 8008968:	a908      	add	r1, sp, #32
 800896a:	ee1a 0a90 	vmov	r0, s21
 800896e:	f8cd 8020 	str.w	r8, [sp, #32]
 8008972:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8008976:	f00c fb01 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800897a:	ee1a 1a90 	vmov	r1, s21
 800897e:	4630      	mov	r0, r6
 8008980:	f009 f88c 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    name.setXY(497, 170);
 8008984:	ee1b 0a10 	vmov	r0, s22
 8008988:	22aa      	movs	r2, #170	; 0xaa
 800898a:	f240 11f1 	movw	r1, #497	; 0x1f1
 800898e:	f7fd fadd 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8008992:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8008996:	ee1b 1a10 	vmov	r1, s22
 800899a:	4638      	mov	r0, r7
        color = newColor;
 800899c:	f8c4 2328 	str.w	r2, [r4, #808]	; 0x328
        linespace = space;
 80089a0:	f8a4 532c 	strh.w	r5, [r4, #812]	; 0x32c
        boundingArea = calculateBoundingArea();
 80089a4:	f00c f850 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80089a8:	f504 734d 	add.w	r3, r4, #820	; 0x334
 80089ac:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80089b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80089b4:	2323      	movs	r3, #35	; 0x23
    name.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JEQJ));
 80089b6:	a908      	add	r1, sp, #32
 80089b8:	ee1b 0a10 	vmov	r0, s22
 80089bc:	f8cd 8020 	str.w	r8, [sp, #32]
 80089c0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80089c4:	f00c fada 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80089c8:	ee1b 1a10 	vmov	r1, s22
 80089cc:	4630      	mov	r0, r6
 80089ce:	f009 f865 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    lockNote.setXY(337, 269);
 80089d2:	f240 120d 	movw	r2, #269	; 0x10d
 80089d6:	ee1b 0a90 	vmov	r0, s23
 80089da:	f240 1151 	movw	r1, #337	; 0x151
 80089de:	f7fd fab5 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80089e2:	4b93      	ldr	r3, [pc, #588]	; (8008c30 <_ZN18mainScreenViewBaseC1Ev+0x720>)
        boundingArea = calculateBoundingArea();
 80089e4:	ee1b 1a90 	vmov	r1, s23
 80089e8:	4638      	mov	r0, r7
        color = newColor;
 80089ea:	f8c4 3370 	str.w	r3, [r4, #880]	; 0x370
        linespace = space;
 80089ee:	f8a4 5374 	strh.w	r5, [r4, #884]	; 0x374
        boundingArea = calculateBoundingArea();
 80089f2:	f00c f829 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80089f6:	f504 735f 	add.w	r3, r4, #892	; 0x37c
 80089fa:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80089fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lockNote.setTypedText(touchgfx::TypedText(T___SINGLEUSE_7R5X));
 8008a02:	a908      	add	r1, sp, #32
 8008a04:	ee1b 0a90 	vmov	r0, s23
 8008a08:	f8cd 8020 	str.w	r8, [sp, #32]
    about.setAction(buttonCallback);
 8008a0c:	f204 5794 	addw	r7, r4, #1428	; 0x594
 8008a10:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
    lockNote.setTypedText(touchgfx::TypedText(T___SINGLEUSE_7R5X));
 8008a14:	f00c fab2 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008a18:	ee1b 1a90 	vmov	r1, s23
 8008a1c:	4630      	mov	r0, r6
        alpha = newAlpha;
 8008a1e:	f884 5376 	strb.w	r5, [r4, #886]	; 0x376
 8008a22:	f009 f83b 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    about.setXY(598, 369);
 8008a26:	ee1c 0a10 	vmov	r0, s24
 8008a2a:	f240 1271 	movw	r2, #369	; 0x171
 8008a2e:	f240 2156 	movw	r1, #598	; 0x256
 8008a32:	f7fd fa8b 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8008a36:	230b      	movs	r3, #11
    about.setBitmaps(touchgfx::Bitmap(BITMAP_B1_ID), touchgfx::Bitmap(BITMAP_A1_ID));
 8008a38:	aa08      	add	r2, sp, #32
 8008a3a:	a907      	add	r1, sp, #28
 8008a3c:	ee1c 0a10 	vmov	r0, s24
 8008a40:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008a44:	f8ad 5020 	strh.w	r5, [sp, #32]
 8008a48:	f00c fc71 	bl	801532e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8008a4c:	231a      	movs	r3, #26
        updateTextPosition();
 8008a4e:	ee1c 0a10 	vmov	r0, s24
        colorPressed = col;
 8008a52:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8008c34 <_ZN18mainScreenViewBaseC1Ev+0x724>
 8008a56:	f8a4 33d4 	strh.w	r3, [r4, #980]	; 0x3d4
        updateTextPosition();
 8008a5a:	f7ff fd15 	bl	8008488 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        colorPressed = col;
 8008a5e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8008a62:	ee1c 1a10 	vmov	r1, s24
 8008a66:	4630      	mov	r0, r6
        action = &callback;
 8008a68:	f8c4 73c4 	str.w	r7, [r4, #964]	; 0x3c4
 8008a6c:	e9c4 83f6 	strd	r8, r3, [r4, #984]	; 0x3d8
 8008a70:	f009 f814 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    bat.setXY(416, 369);
 8008a74:	ee1c 0a90 	vmov	r0, s25
 8008a78:	f240 1271 	movw	r2, #369	; 0x171
 8008a7c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8008a80:	f7fd fa64 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8008a84:	2303      	movs	r3, #3
    bat.setBitmaps(touchgfx::Bitmap(BITMAP_B5_ID), touchgfx::Bitmap(BITMAP_A5_ID));
 8008a86:	aa08      	add	r2, sp, #32
 8008a88:	a907      	add	r1, sp, #28
 8008a8a:	ee1c 0a90 	vmov	r0, s25
 8008a8e:	f8ad 901c 	strh.w	r9, [sp, #28]
 8008a92:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008a96:	f00c fc4a 	bl	801532e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8008a9a:	231b      	movs	r3, #27
        updateTextPosition();
 8008a9c:	ee1c 0a90 	vmov	r0, s25
 8008aa0:	f04f 0924 	mov.w	r9, #36	; 0x24
 8008aa4:	f8a4 341c 	strh.w	r3, [r4, #1052]	; 0x41c
 8008aa8:	f7ff fcee 	bl	8008488 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        colorPressed = col;
 8008aac:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8008ab0:	ee1c 1a90 	vmov	r1, s25
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
        color = col;
 8008aba:	f8c4 8420 	str.w	r8, [r4, #1056]	; 0x420
 8008abe:	f8c4 740c 	str.w	r7, [r4, #1036]	; 0x40c
 8008ac2:	f008 ffeb 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    home.setXY(50, 368);
 8008ac6:	ee1d 0a10 	vmov	r0, s26
 8008aca:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8008ace:	2132      	movs	r1, #50	; 0x32
 8008ad0:	f7fd fa3c 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8008ad4:	f04f 0326 	mov.w	r3, #38	; 0x26
    home.setBitmaps(touchgfx::Bitmap(BITMAP_C1_ID), touchgfx::Bitmap(BITMAP_A4_ID));
 8008ad8:	aa08      	add	r2, sp, #32
 8008ada:	a907      	add	r1, sp, #28
 8008adc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	ee1d 0a10 	vmov	r0, s26
 8008ae6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008aea:	f00c fc20 	bl	801532e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8008aee:	231d      	movs	r3, #29
        updateTextPosition();
 8008af0:	ee1d 0a10 	vmov	r0, s26
 8008af4:	f8a4 3464 	strh.w	r3, [r4, #1124]	; 0x464
 8008af8:	f7ff fcc6 	bl	8008488 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        colorPressed = col;
 8008afc:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8008b00:	ee1d 1a10 	vmov	r1, s26
 8008b04:	4630      	mov	r0, r6
 8008b06:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
        color = col;
 8008b0a:	f8c4 8468 	str.w	r8, [r4, #1128]	; 0x468
 8008b0e:	f008 ffc5 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    start.setXY(235, 369);
 8008b12:	ee1d 0a90 	vmov	r0, s27
 8008b16:	f240 1271 	movw	r2, #369	; 0x171
 8008b1a:	21eb      	movs	r1, #235	; 0xeb
 8008b1c:	f7fd fa16 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8008b20:	230c      	movs	r3, #12
    start.setBitmaps(touchgfx::Bitmap(BITMAP_B2_ID), touchgfx::Bitmap(BITMAP_A2_ID));
 8008b22:	aa08      	add	r2, sp, #32
 8008b24:	a907      	add	r1, sp, #28
 8008b26:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008b2a:	f04f 0301 	mov.w	r3, #1
 8008b2e:	ee1d 0a90 	vmov	r0, s27
 8008b32:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008b36:	f00c fbfa 	bl	801532e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8008b3a:	f04f 031e 	mov.w	r3, #30
        updateTextPosition();
 8008b3e:	ee1d 0a90 	vmov	r0, s27
 8008b42:	f8a4 34ac 	strh.w	r3, [r4, #1196]	; 0x4ac
 8008b46:	f7ff fc9f 	bl	8008488 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        colorPressed = col;
 8008b4a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8008b4e:	ee1d 1a90 	vmov	r1, s27
 8008b52:	4630      	mov	r0, r6
 8008b54:	f8c4 34b4 	str.w	r3, [r4, #1204]	; 0x4b4
        color = col;
 8008b58:	f8c4 84b0 	str.w	r8, [r4, #1200]	; 0x4b0
 8008b5c:	f04f 38ff 	mov.w	r8, #4294967295
 8008b60:	f8c4 749c 	str.w	r7, [r4, #1180]	; 0x49c
 8008b64:	f008 ff9a 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    disconnet.setXY(650, 286);
 8008b68:	ee1e 0a10 	vmov	r0, s28
 8008b6c:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8008b70:	f240 218a 	movw	r1, #650	; 0x28a
 8008b74:	f7fd f9ea 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8008b78:	2330      	movs	r3, #48	; 0x30
    disconnet.setBitmaps(touchgfx::Bitmap(BITMAP_RED1_ID), touchgfx::Bitmap(BITMAP_RED2_ID));
 8008b7a:	aa08      	add	r2, sp, #32
 8008b7c:	a907      	add	r1, sp, #28
 8008b7e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008b82:	2331      	movs	r3, #49	; 0x31
 8008b84:	ee1e 0a10 	vmov	r0, s28
 8008b88:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008b8c:	f00c fbcf 	bl	801532e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8008b90:	ee1e 0a10 	vmov	r0, s28
 8008b94:	f8a4 94f4 	strh.w	r9, [r4, #1268]	; 0x4f4
 8008b98:	f7ff fc76 	bl	8008488 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8008b9c:	ee1e 1a10 	vmov	r1, s28
 8008ba0:	4630      	mov	r0, r6
        color = col;
 8008ba2:	f8c4 84f8 	str.w	r8, [r4, #1272]	; 0x4f8
        colorPressed = col;
 8008ba6:	f8c4 84fc 	str.w	r8, [r4, #1276]	; 0x4fc
 8008baa:	f008 ff77 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    refreash.setXY(486, 286);
 8008bae:	4650      	mov	r0, sl
 8008bb0:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8008bb4:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 8008bb8:	f7fd f9c8 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8008bbc:	2325      	movs	r3, #37	; 0x25
    refreash.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE1_ID), touchgfx::Bitmap(BITMAP_BLUE2_ID));
 8008bbe:	aa08      	add	r2, sp, #32
 8008bc0:	a907      	add	r1, sp, #28
 8008bc2:	4650      	mov	r0, sl
 8008bc4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008bc8:	f8ad 901c 	strh.w	r9, [sp, #28]
 8008bcc:	f00c fbaf 	bl	801532e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8008bd0:	231c      	movs	r3, #28
        updateTextPosition();
 8008bd2:	4650      	mov	r0, sl
 8008bd4:	f8a4 353c 	strh.w	r3, [r4, #1340]	; 0x53c
 8008bd8:	f7ff fc56 	bl	8008488 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8008bdc:	4651      	mov	r1, sl
 8008bde:	4630      	mov	r0, r6
        color = col;
 8008be0:	f8c4 8540 	str.w	r8, [r4, #1344]	; 0x540
        colorPressed = col;
 8008be4:	f8c4 8544 	str.w	r8, [r4, #1348]	; 0x544
 8008be8:	f8c4 752c 	str.w	r7, [r4, #1324]	; 0x52c
 8008bec:	f008 ff56 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    smallLock.setXY(270, 256);
 8008bf0:	4658      	mov	r0, fp
 8008bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bf6:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8008bfa:	f7fd f9a7 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8008bfe:	2332      	movs	r3, #50	; 0x32
    smallLock.setBitmaps(touchgfx::Bitmap(BITMAP_RELOCK_ID), touchgfx::Bitmap(BITMAP_RELOCK_ID));
 8008c00:	aa08      	add	r2, sp, #32
 8008c02:	a907      	add	r1, sp, #28
 8008c04:	4658      	mov	r0, fp
 8008c06:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008c0a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008c0e:	f00c fb8e 	bl	801532e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8008c12:	4630      	mov	r0, r6
 8008c14:	4659      	mov	r1, fp
 8008c16:	f884 557e 	strb.w	r5, [r4, #1406]	; 0x57e
 8008c1a:	f8c4 7574 	str.w	r7, [r4, #1396]	; 0x574
 8008c1e:	f008 ff3d 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8008c22:	4620      	mov	r0, r4
 8008c24:	b00b      	add	sp, #44	; 0x2c
 8008c26:	ecbd 8b10 	vpop	{d8-d15}
 8008c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2e:	bf00      	nop
 8008c30:	ff808080 	.word	0xff808080
 8008c34:	ff999999 	.word	0xff999999

08008c38 <_ZN18mainScreenViewBase16transitionBeginsEv>:
        visible = vis;
 8008c38:	2301      	movs	r3, #1

void mainScreenViewBase::transitionBegins()
{
 8008c3a:	b570      	push	{r4, r5, r6, lr}
 8008c3c:	f880 32d5 	strb.w	r3, [r0, #725]	; 0x2d5
 8008c40:	2300      	movs	r3, #0
 8008c42:	4604      	mov	r4, r0
 8008c44:	f880 328d 	strb.w	r3, [r0, #653]	; 0x28d
 8008c48:	f880 3245 	strb.w	r3, [r0, #581]	; 0x245
        fadeAnimationEndedCallback = 0;
 8008c4c:	f8c0 3590 	str.w	r3, [r0, #1424]	; 0x590
        if (!fadeAnimationRunning)
 8008c50:	f890 357f 	ldrb.w	r3, [r0, #1407]	; 0x57f
 8008c54:	b933      	cbnz	r3, 8008c64 <_ZN18mainScreenViewBase16transitionBeginsEv+0x2c>
            Application::getInstance()->registerTimerWidget(this);
 8008c56:	f00f f92f 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
        timerWidgets.add(w);
 8008c5a:	f204 514c 	addw	r1, r4, #1356	; 0x54c
 8008c5e:	3004      	adds	r0, #4
 8008c60:	f00f fa20 	bl	80180a4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
        fadeAnimationStartAlpha = T::getAlpha();
 8008c64:	f894 257e 	ldrb.w	r2, [r4, #1406]	; 0x57e
        fadeAnimationCounter = 0;
 8008c68:	2300      	movs	r3, #0
        fadeAnimationAlphaEquation = alphaProgressionEquation;
 8008c6a:	4e1c      	ldr	r6, [pc, #112]	; (8008cdc <_ZN18mainScreenViewBase16transitionBeginsEv+0xa4>)
    //showLockNote
    //When screen transition begins fade lockNote
    //Fade lockNote to alpha:255 with LinearIn easing in 600 ms (36 Ticks)
    lockNote.clearFadeAnimationEndedAction();
    lockNote.setFadeAnimationDelay(18);
    lockNote.startFadeAnimation(255, 36, touchgfx::EasingEquations::linearEaseIn);
 8008c6c:	f504 7550 	add.w	r5, r4, #832	; 0x340
        fadeAnimationStartAlpha = T::getAlpha();
 8008c70:	f8a4 2586 	strh.w	r2, [r4, #1414]	; 0x586
        fadeAnimationEndAlpha = endAlpha;
 8008c74:	22ff      	movs	r2, #255	; 0xff
        fadeAnimationCounter = 0;
 8008c76:	f8a4 3580 	strh.w	r3, [r4, #1408]	; 0x580
        fadeAnimationEndAlpha = endAlpha;
 8008c7a:	f8a4 2588 	strh.w	r2, [r4, #1416]	; 0x588
        fadeAnimationDuration = duration;
 8008c7e:	2224      	movs	r2, #36	; 0x24
        fadeAnimationEndedCallback = 0;
 8008c80:	f8c4 3398 	str.w	r3, [r4, #920]	; 0x398
        fadeAnimationDelay = delay;
 8008c84:	2312      	movs	r3, #18
        fadeAnimationDuration = duration;
 8008c86:	f8a4 2584 	strh.w	r2, [r4, #1412]	; 0x584
        fadeAnimationRunning = true;
 8008c8a:	2201      	movs	r2, #1
        fadeAnimationDelay = delay;
 8008c8c:	f8a4 338c 	strh.w	r3, [r4, #908]	; 0x38c
        if (!fadeAnimationRunning)
 8008c90:	f894 3388 	ldrb.w	r3, [r4, #904]	; 0x388
        fadeAnimationAlphaEquation = alphaProgressionEquation;
 8008c94:	f8c4 658c 	str.w	r6, [r4, #1420]	; 0x58c
        fadeAnimationRunning = true;
 8008c98:	f884 257f 	strb.w	r2, [r4, #1407]	; 0x57f
        if (!fadeAnimationRunning)
 8008c9c:	b92b      	cbnz	r3, 8008caa <_ZN18mainScreenViewBase16transitionBeginsEv+0x72>
            Application::getInstance()->registerTimerWidget(this);
 8008c9e:	f00f f90b 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	3004      	adds	r0, #4
 8008ca6:	f00f f9fd 	bl	80180a4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
        fadeAnimationCounter = 0;
 8008caa:	2300      	movs	r3, #0
        fadeAnimationAlphaEquation = alphaProgressionEquation;
 8008cac:	f8c4 6394 	str.w	r6, [r4, #916]	; 0x394
        fadeAnimationCounter = 0;
 8008cb0:	f8a4 338a 	strh.w	r3, [r4, #906]	; 0x38a
        fadeAnimationStartAlpha = T::getAlpha();
 8008cb4:	f894 3376 	ldrb.w	r3, [r4, #886]	; 0x376
 8008cb8:	f8a4 3390 	strh.w	r3, [r4, #912]	; 0x390
        fadeAnimationEndAlpha = endAlpha;
 8008cbc:	23ff      	movs	r3, #255	; 0xff
 8008cbe:	f8a4 3392 	strh.w	r3, [r4, #914]	; 0x392
        fadeAnimationDuration = duration;
 8008cc2:	2324      	movs	r3, #36	; 0x24
 8008cc4:	f8a4 338e 	strh.w	r3, [r4, #910]	; 0x38e
        fadeAnimationRunning = true;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	f884 3388 	strb.w	r3, [r4, #904]	; 0x388
        if (fadeAnimationDelay == 0 && fadeAnimationDuration == 0)
 8008cce:	f8d4 338c 	ldr.w	r3, [r4, #908]	; 0x38c
 8008cd2:	b913      	cbnz	r3, 8008cda <_ZN18mainScreenViewBase16transitionBeginsEv+0xa2>
            nextFadeAnimationStep(); // Set end alpha and shut down
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	f7fd fc57 	bl	8006588 <_ZN8touchgfx12FadeAnimatorINS_8TextAreaEE21nextFadeAnimationStepEv>
}
 8008cda:	bd70      	pop	{r4, r5, r6, pc}
 8008cdc:	08019be1 	.word	0x08019be1

08008ce0 <_ZN19startScreenViewBaseD1Ev>:
}

startScreenViewBase::~startScreenViewBase()
{

}
 8008ce0:	4770      	bx	lr

08008ce2 <_ZN19startScreenViewBase11setupScreenEv>:

void startScreenViewBase::setupScreen()
{

}
 8008ce2:	4770      	bx	lr

08008ce4 <_ZN8touchgfx8CallbackI19startScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8008ce4:	4770      	bx	lr

08008ce6 <_ZN8touchgfx8CallbackI19startScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8008ce6:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8008ce8:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8008cea:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8008cec:	68c2      	ldr	r2, [r0, #12]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	1055      	asrs	r5, r2, #1
 8008cf2:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8008cf6:	07d2      	lsls	r2, r2, #31
 8008cf8:	bf48      	it	mi
 8008cfa:	5962      	ldrmi	r2, [r4, r5]
    }
 8008cfc:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8008cfe:	bf48      	it	mi
 8008d00:	58d3      	ldrmi	r3, [r2, r3]
 8008d02:	4718      	bx	r3

08008d04 <_ZNK8touchgfx8CallbackI19startScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8008d04:	6843      	ldr	r3, [r0, #4]
 8008d06:	b12b      	cbz	r3, 8008d14 <_ZNK8touchgfx8CallbackI19startScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8008d08:	6883      	ldr	r3, [r0, #8]
 8008d0a:	b92b      	cbnz	r3, 8008d18 <_ZNK8touchgfx8CallbackI19startScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8008d0c:	68c0      	ldr	r0, [r0, #12]
 8008d0e:	f000 0001 	and.w	r0, r0, #1
 8008d12:	4770      	bx	lr
 8008d14:	4618      	mov	r0, r3
 8008d16:	4770      	bx	lr
 8008d18:	2001      	movs	r0, #1
    }
 8008d1a:	4770      	bx	lr

08008d1c <_ZN8touchgfx8CallbackI19startScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8008d1c:	b510      	push	{r4, lr}
 8008d1e:	4604      	mov	r4, r0
 8008d20:	2110      	movs	r1, #16
 8008d22:	f021 fe4e 	bl	802a9c2 <_ZdlPvj>
 8008d26:	4620      	mov	r0, r4
 8008d28:	bd10      	pop	{r4, pc}

08008d2a <_ZN19startScreenViewBaseD0Ev>:
startScreenViewBase::~startScreenViewBase()
 8008d2a:	b510      	push	{r4, lr}
 8008d2c:	4604      	mov	r4, r0
}
 8008d2e:	f640 01b8 	movw	r1, #2232	; 0x8b8
 8008d32:	f021 fe46 	bl	802a9c2 <_ZdlPvj>
 8008d36:	4620      	mov	r0, r4
 8008d38:	bd10      	pop	{r4, pc}

08008d3a <_ZN19startScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void startScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &returnBut)
 8008d3a:	f500 6006 	add.w	r0, r0, #2144	; 0x860
 8008d3e:	4288      	cmp	r0, r1
{
 8008d40:	b508      	push	{r3, lr}
    if (&src == &returnBut)
 8008d42:	d105      	bne.n	8008d50 <_ZN19startScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual ~startScreenViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8008d44:	f00f f8b8 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
        //returnMain
        //When returnBut clicked change screen to mainScreen
        //Go to mainScreen with screen transition towards West
        application().gotomainScreenScreenCoverTransitionWest();
    }
}
 8008d48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotomainScreenScreenCoverTransitionWest();
 8008d4c:	f7fc b884 	b.w	8004e58 <_ZN23FrontendApplicationBase39gotomainScreenScreenCoverTransitionWestEv>
}
 8008d50:	bd08      	pop	{r3, pc}
	...

08008d54 <_ZN19startScreenViewBaseC1Ev>:
startScreenViewBase::startScreenViewBase() :
 8008d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d58:	4604      	mov	r4, r0
 8008d5a:	2500      	movs	r5, #0
 8008d5c:	f64f 76ff 	movw	r6, #65535	; 0xffff
        : TextAreaWithWildcardBase(), wc1(0)
 8008d60:	f8df b3c4 	ldr.w	fp, [pc, #964]	; 8009128 <_ZN19startScreenViewBaseC1Ev+0x3d4>
    buttonCallback(this, &startScreenViewBase::buttonCallbackHandler)
 8008d64:	46a0      	mov	r8, r4
 8008d66:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
 8008d6a:	f504 7a24 	add.w	sl, r4, #656	; 0x290
 8008d6e:	f504 6986 	add.w	r9, r4, #1072	; 0x430
startScreenViewBase::startScreenViewBase() :
 8008d72:	ed2d 8b0e 	vpush	{d8-d14}
 8008d76:	b08b      	sub	sp, #44	; 0x2c
 8008d78:	f010 fd20 	bl	80197bc <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &startScreenViewBase::buttonCallbackHandler)
 8008d7c:	4bde      	ldr	r3, [pc, #888]	; (80090f8 <_ZN19startScreenViewBaseC1Ev+0x3a4>)
 8008d7e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8008d80:	f848 3b40 	str.w	r3, [r8], #64
 8008d84:	4640      	mov	r0, r8
 8008d86:	f7fd f901 	bl	8005f8c <_ZN8touchgfx3BoxC1Ev>
 8008d8a:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8008d8e:	4618      	mov	r0, r3
 8008d90:	ee0e 3a10 	vmov	s28, r3
 8008d94:	f7fd f8fa 	bl	8005f8c <_ZN8touchgfx3BoxC1Ev>
 8008d98:	f104 0398 	add.w	r3, r4, #152	; 0x98
 8008d9c:	a908      	add	r1, sp, #32
 8008d9e:	f8ad 6020 	strh.w	r6, [sp, #32]
 8008da2:	4618      	mov	r0, r3
 8008da4:	ee0d 3a10 	vmov	s26, r3
 8008da8:	f7fd f904 	bl	8005fb4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8008dac:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
 8008db0:	a908      	add	r1, sp, #32
 8008db2:	f8ad 6020 	strh.w	r6, [sp, #32]
 8008db6:	4618      	mov	r0, r3
 8008db8:	ee0d 3a90 	vmov	s27, r3
 8008dbc:	f7fd f8fa 	bl	8005fb4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8008dc0:	4638      	mov	r0, r7
 8008dc2:	f00c f96f 	bl	80150a4 <_ZN8touchgfx5GaugeC1Ev>
 8008dc6:	4650      	mov	r0, sl
 8008dc8:	f00c f96c 	bl	80150a4 <_ZN8touchgfx5GaugeC1Ev>
 8008dcc:	4648      	mov	r0, r9
 8008dce:	f00c f969 	bl	80150a4 <_ZN8touchgfx5GaugeC1Ev>
 8008dd2:	f504 63ba 	add.w	r3, r4, #1488	; 0x5d0
        : TextArea()
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	ee08 3a10 	vmov	s16, r3
 8008ddc:	f7fd f904 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 8008de0:	f204 631c 	addw	r3, r4, #1564	; 0x61c
        : TextAreaWithWildcardBase(), wc1(0)
 8008de4:	f8c4 b5d0 	str.w	fp, [r4, #1488]	; 0x5d0
        : TextArea()
 8008de8:	4618      	mov	r0, r3
        : TextAreaWithWildcardBase(), wc1(0)
 8008dea:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
 8008dee:	ee08 3a90 	vmov	s17, r3
        : TextArea()
 8008df2:	f7fd f8f9 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 8008df6:	f504 63cd 	add.w	r3, r4, #1640	; 0x668
        : TextAreaWithWildcardBase(), wc1(0)
 8008dfa:	f8c4 b61c 	str.w	fp, [r4, #1564]	; 0x61c
 8008dfe:	f8c4 5664 	str.w	r5, [r4, #1636]	; 0x664
        touchable = touch;
 8008e02:	f04f 0b01 	mov.w	fp, #1
 8008e06:	4618      	mov	r0, r3
 8008e08:	ee09 3a10 	vmov	s18, r3
 8008e0c:	f7fd f8ec 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 8008e10:	f504 63d6 	add.w	r3, r4, #1712	; 0x6b0
 8008e14:	4618      	mov	r0, r3
 8008e16:	ee09 3a90 	vmov	s19, r3
 8008e1a:	f7fd f8e5 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 8008e1e:	f504 63df 	add.w	r3, r4, #1784	; 0x6f8
 8008e22:	4618      	mov	r0, r3
 8008e24:	ee0a 3a10 	vmov	s20, r3
 8008e28:	f7fd f8de 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 8008e2c:	f504 63e8 	add.w	r3, r4, #1856	; 0x740
 8008e30:	4618      	mov	r0, r3
 8008e32:	ee0a 3a90 	vmov	s21, r3
 8008e36:	f7fd f8d7 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 8008e3a:	f504 63f1 	add.w	r3, r4, #1928	; 0x788
 8008e3e:	4618      	mov	r0, r3
 8008e40:	ee0b 3a10 	vmov	s22, r3
 8008e44:	f7fd f8d0 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 8008e48:	f504 63fa 	add.w	r3, r4, #2000	; 0x7d0
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	ee0b 3a90 	vmov	s23, r3
 8008e52:	f7fd f8c9 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 8008e56:	f604 0318 	addw	r3, r4, #2072	; 0x818
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	ee0c 3a10 	vmov	s24, r3
 8008e60:	f7fd f8c2 	bl	8005fe8 <_ZN8touchgfx8TextAreaC1Ev>
 8008e64:	f504 6306 	add.w	r3, r4, #2144	; 0x860
        : Widget(), action(), pressed(false)
 8008e68:	2226      	movs	r2, #38	; 0x26
 8008e6a:	4629      	mov	r1, r5
 8008e6c:	ee0c 3a90 	vmov	s25, r3
 8008e70:	4618      	mov	r0, r3
 8008e72:	f022 fa0b 	bl	802b28c <memset>
 8008e76:	ee1c 0a90 	vmov	r0, s25
 8008e7a:	f7fd f875 	bl	8005f68 <_ZN8touchgfx6WidgetC1Ev>
        : AbstractButton(), up(), down(), alpha(255)
 8008e7e:	4b9f      	ldr	r3, [pc, #636]	; (80090fc <_ZN19startScreenViewBaseC1Ev+0x3a8>)
    __background.setPosition(0, 0, 800, 480);
 8008e80:	462a      	mov	r2, r5
 8008e82:	4640      	mov	r0, r8
 8008e84:	f8c4 3860 	str.w	r3, [r4, #2144]	; 0x860
 8008e88:	4629      	mov	r1, r5
        : pobject(pObject), pmemfun(pmemfun_1)
 8008e8a:	4b9d      	ldr	r3, [pc, #628]	; (8009100 <_ZN19startScreenViewBaseC1Ev+0x3ac>)
 8008e8c:	f8a4 688e 	strh.w	r6, [r4, #2190]	; 0x88e
 8008e90:	f8c4 38a8 	str.w	r3, [r4, #2216]	; 0x8a8
 8008e94:	4b9b      	ldr	r3, [pc, #620]	; (8009104 <_ZN19startScreenViewBaseC1Ev+0x3b0>)
 8008e96:	f8a4 6890 	strh.w	r6, [r4, #2192]	; 0x890
 8008e9a:	f8c4 38b0 	str.w	r3, [r4, #2224]	; 0x8b0
 8008e9e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8008ea2:	f884 6892 	strb.w	r6, [r4, #2194]	; 0x892
 8008ea6:	1d26      	adds	r6, r4, #4
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008eae:	f8c4 5888 	str.w	r5, [r4, #2184]	; 0x888
 8008eb2:	f884 588c 	strb.w	r5, [r4, #2188]	; 0x88c
 8008eb6:	f884 b884 	strb.w	fp, [r4, #2180]	; 0x884
 8008eba:	f8c4 48ac 	str.w	r4, [r4, #2220]	; 0x8ac
 8008ebe:	f8c4 58b4 	str.w	r5, [r4, #2228]	; 0x8b4
 8008ec2:	f7fb fe71 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8008ec6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8008eca:	4641      	mov	r1, r8
 8008ecc:	4630      	mov	r0, r6
 8008ece:	66a3      	str	r3, [r4, #104]	; 0x68
    tofGauge.setPosition(288, 308, 120, 120);
 8008ed0:	f04f 0878 	mov.w	r8, #120	; 0x78
 8008ed4:	f008 fde2 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    backGround.setPosition(0, 0, 800, 480);
 8008ed8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8008edc:	462a      	mov	r2, r5
 8008ede:	4629      	mov	r1, r5
 8008ee0:	ee1e 0a10 	vmov	r0, s28
 8008ee4:	9300      	str	r3, [sp, #0]
 8008ee6:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008eea:	f7fb fe5d 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8008eee:	4b86      	ldr	r3, [pc, #536]	; (8009108 <_ZN19startScreenViewBaseC1Ev+0x3b4>)
 8008ef0:	ee1e 1a10 	vmov	r1, s28
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8008efa:	f008 fdcf 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    backPicture.setXY(0, 0);
 8008efe:	462a      	mov	r2, r5
 8008f00:	4629      	mov	r1, r5
 8008f02:	ee1d 0a10 	vmov	r0, s26
 8008f06:	f7fd f821 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8008f0a:	232e      	movs	r3, #46	; 0x2e
    backPicture.setBitmap(touchgfx::Bitmap(BITMAP_MONITOR_ID));
 8008f0c:	a908      	add	r1, sp, #32
 8008f0e:	ee1d 0a10 	vmov	r0, s26
 8008f12:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008f16:	f00c fb28 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8008f1a:	ee1d 1a10 	vmov	r1, s26
 8008f1e:	4630      	mov	r0, r6
 8008f20:	f008 fdbc 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    tch_LOGO.setXY(138, 436);
 8008f24:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8008f28:	218a      	movs	r1, #138	; 0x8a
 8008f2a:	ee1d 0a90 	vmov	r0, s27
 8008f2e:	f7fd f80d 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8008f32:	2339      	movs	r3, #57	; 0x39
    tch_LOGO.setBitmap(touchgfx::Bitmap(BITMAP_TCHGFX_LOGO_ID));
 8008f34:	a908      	add	r1, sp, #32
 8008f36:	ee1d 0a90 	vmov	r0, s27
 8008f3a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008f3e:	f00c fb14 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8008f42:	ee1d 1a90 	vmov	r1, s27
 8008f46:	4630      	mov	r0, r6
 8008f48:	f008 fda8 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8008f4c:	f04f 032a 	mov.w	r3, #42	; 0x2a
    tofGauge.setBackground(touchgfx::Bitmap(BITMAP_LIGHT_THEME_IMAGES_WIDGETS_GAUGE_TINY_BACKGROUNDS_ACTIVE_PRECISION_ID));
 8008f50:	4638      	mov	r0, r7
 8008f52:	a908      	add	r1, sp, #32
 8008f54:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008f58:	f008 fd32 	bl	80119c0 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    tofGauge.setPosition(288, 308, 120, 120);
 8008f5c:	4643      	mov	r3, r8
 8008f5e:	4638      	mov	r0, r7
 8008f60:	f44f 729a 	mov.w	r2, #308	; 0x134
 8008f64:	f44f 7190 	mov.w	r1, #288	; 0x120
 8008f68:	f8cd 8000 	str.w	r8, [sp]
 8008f6c:	f7fb fe1c 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
    tofGauge.setCenter(60, 60);
 8008f70:	223c      	movs	r2, #60	; 0x3c
 8008f72:	4638      	mov	r0, r7
 8008f74:	4611      	mov	r1, r2
 8008f76:	f00c f940 	bl	80151fa <_ZN8touchgfx5Gauge9setCenterEii>
    tofGauge.setStartEndAngle(-90, 90);
 8008f7a:	4638      	mov	r0, r7
 8008f7c:	225a      	movs	r2, #90	; 0x5a
 8008f7e:	f06f 0159 	mvn.w	r1, #89	; 0x59
 8008f82:	f00c f9bf 	bl	8015304 <_ZN8touchgfx5Gauge16setStartEndAngleEii>
    tofGauge.setRange(0, 100);
 8008f86:	462b      	mov	r3, r5
 8008f88:	2264      	movs	r2, #100	; 0x64
 8008f8a:	4638      	mov	r0, r7
 8008f8c:	4629      	mov	r1, r5
 8008f8e:	9500      	str	r5, [sp, #0]
 8008f90:	f008 fbdb 	bl	801174a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    tofGauge.setValue(100);
 8008f94:	4638      	mov	r0, r7
 8008f96:	2164      	movs	r1, #100	; 0x64
 8008f98:	f00c f95e 	bl	8015258 <_ZN8touchgfx5Gauge8setValueEi>
    tofGauge.setNeedle(BITMAP_LIGHT_THEME_IMAGES_WIDGETS_GAUGE_TINY_NEEDLES_ROUGH_ID, 5, 33);
 8008f9c:	2205      	movs	r2, #5
 8008f9e:	2321      	movs	r3, #33	; 0x21
 8008fa0:	4638      	mov	r0, r7
 8008fa2:	212c      	movs	r1, #44	; 0x2c
 8008fa4:	f00c f914 	bl	80151d0 <_ZN8touchgfx5Gauge9setNeedleEtss>
    tofGauge.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8008fa8:	4638      	mov	r0, r7
 8008faa:	4659      	mov	r1, fp
 8008fac:	f00c f8b2 	bl	8015114 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    tofGauge.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8008fb0:	4638      	mov	r0, r7
 8008fb2:	4659      	mov	r1, fp
 8008fb4:	f00c f8b1 	bl	801511a <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
 8008fb8:	4639      	mov	r1, r7
 8008fba:	4630      	mov	r0, r6
        boundingArea = calculateBoundingArea();
 8008fbc:	af02      	add	r7, sp, #8
 8008fbe:	f008 fd6d 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8008fc2:	2306      	movs	r3, #6
    speedGauge.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_SMALL_BACKGROUNDS_ACTIVE_ID));
 8008fc4:	a908      	add	r1, sp, #32
 8008fc6:	4650      	mov	r0, sl
 8008fc8:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008fcc:	f008 fcf8 	bl	80119c0 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    speedGauge.setPosition(125, 227, 184, 184);
 8008fd0:	23b8      	movs	r3, #184	; 0xb8
 8008fd2:	22e3      	movs	r2, #227	; 0xe3
 8008fd4:	217d      	movs	r1, #125	; 0x7d
 8008fd6:	4650      	mov	r0, sl
 8008fd8:	9300      	str	r3, [sp, #0]
 8008fda:	f7fb fde5 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
    speedGauge.setCenter(92, 92);
 8008fde:	225c      	movs	r2, #92	; 0x5c
 8008fe0:	4650      	mov	r0, sl
 8008fe2:	4611      	mov	r1, r2
 8008fe4:	f00c f909 	bl	80151fa <_ZN8touchgfx5Gauge9setCenterEii>
    speedGauge.setStartEndAngle(-90, 90);
 8008fe8:	225a      	movs	r2, #90	; 0x5a
 8008fea:	f06f 0159 	mvn.w	r1, #89	; 0x59
 8008fee:	4650      	mov	r0, sl
 8008ff0:	f00c f988 	bl	8015304 <_ZN8touchgfx5Gauge16setStartEndAngleEii>
    speedGauge.setRange(0, 100);
 8008ff4:	462b      	mov	r3, r5
 8008ff6:	2264      	movs	r2, #100	; 0x64
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	4650      	mov	r0, sl
 8008ffc:	9500      	str	r5, [sp, #0]
 8008ffe:	f008 fba4 	bl	801174a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    speedGauge.setValue(0);
 8009002:	4629      	mov	r1, r5
 8009004:	4650      	mov	r0, sl
 8009006:	f00c f927 	bl	8015258 <_ZN8touchgfx5Gauge8setValueEi>
    speedGauge.setNeedle(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_SMALL_NEEDLES_ROUGH_ID, 8, 53);
 800900a:	2208      	movs	r2, #8
 800900c:	2335      	movs	r3, #53	; 0x35
 800900e:	2107      	movs	r1, #7
 8009010:	4650      	mov	r0, sl
 8009012:	f00c f8dd 	bl	80151d0 <_ZN8touchgfx5Gauge9setNeedleEtss>
    speedGauge.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8009016:	4659      	mov	r1, fp
 8009018:	4650      	mov	r0, sl
 800901a:	f00c f87b 	bl	8015114 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    speedGauge.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 800901e:	4659      	mov	r1, fp
 8009020:	4650      	mov	r0, sl
 8009022:	f00c f87a 	bl	801511a <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
 8009026:	4651      	mov	r1, sl
 8009028:	4630      	mov	r0, r6
 800902a:	f008 fd37 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800902e:	f04f 032a 	mov.w	r3, #42	; 0x2a
    batGauge.setBackground(touchgfx::Bitmap(BITMAP_LIGHT_THEME_IMAGES_WIDGETS_GAUGE_TINY_BACKGROUNDS_ACTIVE_PRECISION_ID));
 8009032:	a908      	add	r1, sp, #32
 8009034:	4648      	mov	r0, r9
 8009036:	f8ad 3020 	strh.w	r3, [sp, #32]
 800903a:	f008 fcc1 	bl	80119c0 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    batGauge.setPosition(26, 308, 120, 120);
 800903e:	4643      	mov	r3, r8
 8009040:	f44f 729a 	mov.w	r2, #308	; 0x134
 8009044:	211a      	movs	r1, #26
 8009046:	4648      	mov	r0, r9
 8009048:	f8cd 8000 	str.w	r8, [sp]
 800904c:	f7fb fdac 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
    batGauge.setCenter(60, 60);
 8009050:	223c      	movs	r2, #60	; 0x3c
 8009052:	4648      	mov	r0, r9
 8009054:	4611      	mov	r1, r2
 8009056:	f00c f8d0 	bl	80151fa <_ZN8touchgfx5Gauge9setCenterEii>
    batGauge.setStartEndAngle(-90, 90);
 800905a:	225a      	movs	r2, #90	; 0x5a
 800905c:	f06f 0159 	mvn.w	r1, #89	; 0x59
 8009060:	4648      	mov	r0, r9
 8009062:	f00c f94f 	bl	8015304 <_ZN8touchgfx5Gauge16setStartEndAngleEii>
    batGauge.setRange(0, 100);
 8009066:	462b      	mov	r3, r5
 8009068:	2264      	movs	r2, #100	; 0x64
 800906a:	4629      	mov	r1, r5
 800906c:	4648      	mov	r0, r9
 800906e:	9500      	str	r5, [sp, #0]
 8009070:	f008 fb6b 	bl	801174a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    batGauge.setValue(84);
 8009074:	2154      	movs	r1, #84	; 0x54
 8009076:	4648      	mov	r0, r9
 8009078:	f00c f8ee 	bl	8015258 <_ZN8touchgfx5Gauge8setValueEi>
    batGauge.setNeedle(BITMAP_LIGHT_THEME_IMAGES_WIDGETS_GAUGE_TINY_NEEDLES_ROUGH_ID, 5, 33);
 800907c:	2321      	movs	r3, #33	; 0x21
 800907e:	2205      	movs	r2, #5
 8009080:	212c      	movs	r1, #44	; 0x2c
 8009082:	4648      	mov	r0, r9
 8009084:	f00c f8a4 	bl	80151d0 <_ZN8touchgfx5Gauge9setNeedleEtss>
    batGauge.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8009088:	4659      	mov	r1, fp
 800908a:	4648      	mov	r0, r9
 800908c:	f00c f842 	bl	8015114 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    batGauge.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8009090:	4659      	mov	r1, fp
 8009092:	4648      	mov	r0, r9
 8009094:	f00c f841 	bl	801511a <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
 8009098:	4649      	mov	r1, r9
 800909a:	4630      	mov	r0, r6
 800909c:	f008 fcfe 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    tofGaugeText.setXY(322, 381);
 80090a0:	f240 127d 	movw	r2, #381	; 0x17d
 80090a4:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80090a8:	ee18 0a10 	vmov	r0, s16
 80090ac:	f7fc ff4e 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80090b0:	4b16      	ldr	r3, [pc, #88]	; (800910c <_ZN19startScreenViewBaseC1Ev+0x3b8>)
        boundingArea = calculateBoundingArea();
 80090b2:	ee18 1a10 	vmov	r1, s16
 80090b6:	4638      	mov	r0, r7
        color = newColor;
 80090b8:	f8c4 3600 	str.w	r3, [r4, #1536]	; 0x600
        boundingArea = calculateBoundingArea();
 80090bc:	f8d4 35d0 	ldr.w	r3, [r4, #1488]	; 0x5d0
        linespace = space;
 80090c0:	f8a4 5604 	strh.w	r5, [r4, #1540]	; 0x604
        boundingArea = calculateBoundingArea();
 80090c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090c8:	4798      	blx	r3
 80090ca:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 80090ce:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80090d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80090d6:	4b0e      	ldr	r3, [pc, #56]	; (8009110 <_ZN19startScreenViewBaseC1Ev+0x3bc>)
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	b92a      	cbnz	r2, 80090e8 <_ZN19startScreenViewBaseC1Ev+0x394>
 80090dc:	4b0d      	ldr	r3, [pc, #52]	; (8009114 <_ZN19startScreenViewBaseC1Ev+0x3c0>)
 80090de:	2160      	movs	r1, #96	; 0x60
 80090e0:	4a0d      	ldr	r2, [pc, #52]	; (8009118 <_ZN19startScreenViewBaseC1Ev+0x3c4>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80090e2:	480e      	ldr	r0, [pc, #56]	; (800911c <_ZN19startScreenViewBaseC1Ev+0x3c8>)
 80090e4:	f021 fe4a 	bl	802ad7c <__assert_func>
 80090e8:	4a0d      	ldr	r2, [pc, #52]	; (8009120 <_ZN19startScreenViewBaseC1Ev+0x3cc>)
 80090ea:	8812      	ldrh	r2, [r2, #0]
 80090ec:	2a03      	cmp	r2, #3
 80090ee:	d81d      	bhi.n	800912c <_ZN19startScreenViewBaseC1Ev+0x3d8>
 80090f0:	4b0c      	ldr	r3, [pc, #48]	; (8009124 <_ZN19startScreenViewBaseC1Ev+0x3d0>)
 80090f2:	2161      	movs	r1, #97	; 0x61
 80090f4:	4a08      	ldr	r2, [pc, #32]	; (8009118 <_ZN19startScreenViewBaseC1Ev+0x3c4>)
 80090f6:	e7f4      	b.n	80090e2 <_ZN19startScreenViewBaseC1Ev+0x38e>
 80090f8:	0802f8d8 	.word	0x0802f8d8
 80090fc:	08030bcc 	.word	0x08030bcc
 8009100:	0802f8c0 	.word	0x0802f8c0
 8009104:	08008d3b 	.word	0x08008d3b
 8009108:	ffe3eaf1 	.word	0xffe3eaf1
 800910c:	ff575757 	.word	0xff575757
 8009110:	20027d00 	.word	0x20027d00
 8009114:	0802efde 	.word	0x0802efde
 8009118:	0802f87c 	.word	0x0802f87c
 800911c:	0802f05b 	.word	0x0802f05b
 8009120:	20027d04 	.word	0x20027d04
 8009124:	0802f0a2 	.word	0x0802f0a2
 8009128:	0802f574 	.word	0x0802f574
        return texts->getText(typedTextId);
 800912c:	f8df a324 	ldr.w	sl, [pc, #804]	; 8009454 <_ZN19startScreenViewBaseC1Ev+0x700>
 8009130:	2103      	movs	r1, #3
        : typedTextId(id)
 8009132:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8009458 <_ZN19startScreenViewBaseC1Ev+0x704>
    Unicode::snprintf(speedGaugeTextBuffer, SPEEDGAUGETEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_NHIM).getText());
 8009136:	f604 0994 	addw	r9, r4, #2196	; 0x894
        return texts->getText(typedTextId);
 800913a:	f8da 0000 	ldr.w	r0, [sl]
 800913e:	f7fc fddd 	bl	8005cfc <_ZNK8touchgfx5Texts7getTextEt>
        wc1 = value;
 8009142:	f8c4 0618 	str.w	r0, [r4, #1560]	; 0x618
    tofGaugeText.resizeToCurrentText();
 8009146:	ee18 0a10 	vmov	r0, s16
 800914a:	f00b fef7 	bl	8014f3c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 800914e:	2204      	movs	r2, #4
    tofGaugeText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Z579));
 8009150:	a908      	add	r1, sp, #32
 8009152:	ee18 0a10 	vmov	r0, s16
 8009156:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800915a:	f8cd 8020 	str.w	r8, [sp, #32]
 800915e:	f00b ff0d 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8009162:	ee18 1a10 	vmov	r1, s16
 8009166:	4630      	mov	r0, r6
 8009168:	f008 fc98 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    speedGaugeText.setXY(173, 344);
 800916c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8009170:	21ad      	movs	r1, #173	; 0xad
 8009172:	ee18 0a90 	vmov	r0, s17
 8009176:	f7fc fee9 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 800917a:	4bb1      	ldr	r3, [pc, #708]	; (8009440 <_ZN19startScreenViewBaseC1Ev+0x6ec>)
        boundingArea = calculateBoundingArea();
 800917c:	f8d4 261c 	ldr.w	r2, [r4, #1564]	; 0x61c
 8009180:	ee18 1a90 	vmov	r1, s17
 8009184:	4638      	mov	r0, r7
        color = newColor;
 8009186:	f8c4 364c 	str.w	r3, [r4, #1612]	; 0x64c
        boundingArea = calculateBoundingArea();
 800918a:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
        linespace = space;
 800918e:	f8a4 5650 	strh.w	r5, [r4, #1616]	; 0x650
        boundingArea = calculateBoundingArea();
 8009192:	4790      	blx	r2
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8009194:	4bab      	ldr	r3, [pc, #684]	; (8009444 <_ZN19startScreenViewBaseC1Ev+0x6f0>)
 8009196:	f504 6ccb 	add.w	ip, r4, #1624	; 0x658
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80091a0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d099      	beq.n	80090dc <_ZN19startScreenViewBaseC1Ev+0x388>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80091a8:	4aa7      	ldr	r2, [pc, #668]	; (8009448 <_ZN19startScreenViewBaseC1Ev+0x6f4>)
 80091aa:	8813      	ldrh	r3, [r2, #0]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d99f      	bls.n	80090f0 <_ZN19startScreenViewBaseC1Ev+0x39c>
        return texts->getText(typedTextId);
 80091b0:	4659      	mov	r1, fp
 80091b2:	f8da 0000 	ldr.w	r0, [sl]
 80091b6:	f7fc fda1 	bl	8005cfc <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(speedGaugeTextBuffer, SPEEDGAUGETEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_NHIM).getText());
 80091ba:	4aa4      	ldr	r2, [pc, #656]	; (800944c <_ZN19startScreenViewBaseC1Ev+0x6f8>)
 80091bc:	4603      	mov	r3, r0
 80091be:	210a      	movs	r1, #10
 80091c0:	4648      	mov	r0, r9
 80091c2:	f011 ffe1 	bl	801b188 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    speedGaugeText.resizeToCurrentText();
 80091c6:	ee18 0a90 	vmov	r0, s17
 80091ca:	f8c4 9664 	str.w	r9, [r4, #1636]	; 0x664
 80091ce:	f00b feb5 	bl	8014f3c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 80091d2:	2302      	movs	r3, #2
    speedGaugeText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_SOPT));
 80091d4:	a908      	add	r1, sp, #32
 80091d6:	ee18 0a90 	vmov	r0, s17
 80091da:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80091de:	f8cd 8020 	str.w	r8, [sp, #32]
 80091e2:	f00b fecb 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80091e6:	ee18 1a90 	vmov	r1, s17
 80091ea:	4630      	mov	r0, r6
 80091ec:	f008 fc56 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    batGaugeText.setXY(51, 381);
 80091f0:	f240 127d 	movw	r2, #381	; 0x17d
 80091f4:	ee19 0a10 	vmov	r0, s18
 80091f8:	2133      	movs	r1, #51	; 0x33
 80091fa:	f7fc fea7 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80091fe:	4b90      	ldr	r3, [pc, #576]	; (8009440 <_ZN19startScreenViewBaseC1Ev+0x6ec>)
        boundingArea = calculateBoundingArea();
 8009200:	ee19 1a10 	vmov	r1, s18
 8009204:	4638      	mov	r0, r7
        color = newColor;
 8009206:	f8c4 3698 	str.w	r3, [r4, #1688]	; 0x698
        linespace = space;
 800920a:	f8a4 569c 	strh.w	r5, [r4, #1692]	; 0x69c
        boundingArea = calculateBoundingArea();
 800920e:	f00b fc1b 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8009212:	f204 63a4 	addw	r3, r4, #1700	; 0x6a4
        color = newColor;
 8009216:	f8df 9244 	ldr.w	r9, [pc, #580]	; 800945c <_ZN19startScreenViewBaseC1Ev+0x708>
        boundingArea = calculateBoundingArea();
 800921a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800921e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009222:	2305      	movs	r3, #5
    batGaugeText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_SYUL));
 8009224:	a908      	add	r1, sp, #32
 8009226:	ee19 0a10 	vmov	r0, s18
 800922a:	f8cd 8020 	str.w	r8, [sp, #32]
 800922e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8009232:	f00b fea3 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8009236:	ee19 1a10 	vmov	r1, s18
 800923a:	4630      	mov	r0, r6
 800923c:	f008 fc2e 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    design.setXY(174, 413);
 8009240:	f240 129d 	movw	r2, #413	; 0x19d
 8009244:	ee19 0a90 	vmov	r0, s19
 8009248:	21ae      	movs	r1, #174	; 0xae
 800924a:	f7fc fe7f 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 800924e:	4b80      	ldr	r3, [pc, #512]	; (8009450 <_ZN19startScreenViewBaseC1Ev+0x6fc>)
        boundingArea = calculateBoundingArea();
 8009250:	ee19 1a90 	vmov	r1, s19
 8009254:	4638      	mov	r0, r7
        color = newColor;
 8009256:	f8c4 36e0 	str.w	r3, [r4, #1760]	; 0x6e0
        linespace = space;
 800925a:	f8a4 56e4 	strh.w	r5, [r4, #1764]	; 0x6e4
        boundingArea = calculateBoundingArea();
 800925e:	f00b fbf3 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8009262:	f204 63ec 	addw	r3, r4, #1772	; 0x6ec
 8009266:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800926a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800926e:	230e      	movs	r3, #14
    design.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CDDU));
 8009270:	a908      	add	r1, sp, #32
 8009272:	ee19 0a90 	vmov	r0, s19
 8009276:	f8cd 8020 	str.w	r8, [sp, #32]
 800927a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800927e:	f00b fe7d 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8009282:	ee19 1a90 	vmov	r1, s19
 8009286:	4630      	mov	r0, r6
 8009288:	f008 fc08 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    stateNormal.setXY(110, 156);
 800928c:	229c      	movs	r2, #156	; 0x9c
 800928e:	ee1a 0a10 	vmov	r0, s20
 8009292:	216e      	movs	r1, #110	; 0x6e
 8009294:	f7fc fe5a 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8009298:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 800929c:	ee1a 1a10 	vmov	r1, s20
 80092a0:	4638      	mov	r0, r7
        color = newColor;
 80092a2:	f8c4 3728 	str.w	r3, [r4, #1832]	; 0x728
        linespace = space;
 80092a6:	f8a4 572c 	strh.w	r5, [r4, #1836]	; 0x72c
        boundingArea = calculateBoundingArea();
 80092aa:	f00b fbcd 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80092ae:	f204 7334 	addw	r3, r4, #1844	; 0x734
 80092b2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80092b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80092ba:	230c      	movs	r3, #12
    stateNormal.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GKND));
 80092bc:	a908      	add	r1, sp, #32
 80092be:	ee1a 0a10 	vmov	r0, s20
 80092c2:	f8cd 8020 	str.w	r8, [sp, #32]
 80092c6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80092ca:	f00b fe57 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80092ce:	ee1a 1a10 	vmov	r1, s20
 80092d2:	4630      	mov	r0, r6
 80092d4:	f008 fbe2 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    stateFree.setXY(73, 156);
 80092d8:	229c      	movs	r2, #156	; 0x9c
 80092da:	ee1a 0a90 	vmov	r0, s21
 80092de:	2149      	movs	r1, #73	; 0x49
 80092e0:	f7fc fe34 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 80092e4:	ee1a 1a90 	vmov	r1, s21
 80092e8:	4638      	mov	r0, r7
        color = newColor;
 80092ea:	f8c4 9770 	str.w	r9, [r4, #1904]	; 0x770
        linespace = space;
 80092ee:	f8a4 5774 	strh.w	r5, [r4, #1908]	; 0x774
        boundingArea = calculateBoundingArea();
 80092f2:	f00b fba9 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80092f6:	f204 737c 	addw	r3, r4, #1916	; 0x77c
 80092fa:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80092fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009302:	2309      	movs	r3, #9
    stateFree.setTypedText(touchgfx::TypedText(T___SINGLEUSE_282G));
 8009304:	a908      	add	r1, sp, #32
 8009306:	ee1a 0a90 	vmov	r0, s21
 800930a:	f8cd 8020 	str.w	r8, [sp, #32]
 800930e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8009312:	f00b fe33 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8009316:	ee1a 1a90 	vmov	r1, s21
 800931a:	4630      	mov	r0, r6
 800931c:	f008 fbbe 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    stateShake.setXY(85, 156);
 8009320:	229c      	movs	r2, #156	; 0x9c
 8009322:	ee1b 0a10 	vmov	r0, s22
 8009326:	2155      	movs	r1, #85	; 0x55
 8009328:	f7fc fe10 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 800932c:	ee1b 1a10 	vmov	r1, s22
 8009330:	4638      	mov	r0, r7
        color = newColor;
 8009332:	f8c4 97b8 	str.w	r9, [r4, #1976]	; 0x7b8
        linespace = space;
 8009336:	f8a4 57bc 	strh.w	r5, [r4, #1980]	; 0x7bc
        boundingArea = calculateBoundingArea();
 800933a:	f00b fb85 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800933e:	f204 73c4 	addw	r3, r4, #1988	; 0x7c4
 8009342:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8009346:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800934a:	230b      	movs	r3, #11
    stateShake.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PWYE));
 800934c:	a908      	add	r1, sp, #32
 800934e:	ee1b 0a10 	vmov	r0, s22
 8009352:	f8cd 8020 	str.w	r8, [sp, #32]
 8009356:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800935a:	f00b fe0f 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800935e:	ee1b 1a10 	vmov	r1, s22
 8009362:	4630      	mov	r0, r6
 8009364:	f008 fb9a 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    stateBarrier.setXY(116, 156);
 8009368:	229c      	movs	r2, #156	; 0x9c
 800936a:	ee1b 0a90 	vmov	r0, s23
 800936e:	2174      	movs	r1, #116	; 0x74
 8009370:	f7fc fdec 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8009374:	ee1b 1a90 	vmov	r1, s23
 8009378:	4638      	mov	r0, r7
        color = newColor;
 800937a:	f8c4 9800 	str.w	r9, [r4, #2048]	; 0x800
        linespace = space;
 800937e:	f8a4 5804 	strh.w	r5, [r4, #2052]	; 0x804
        boundingArea = calculateBoundingArea();
 8009382:	f00b fb61 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8009386:	f604 030c 	addw	r3, r4, #2060	; 0x80c
 800938a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800938e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    stateBarrier.setTypedText(touchgfx::TypedText(T___SINGLEUSE_W0Q0));
 8009392:	a908      	add	r1, sp, #32
 8009394:	ee1b 0a90 	vmov	r0, s23
 8009398:	f8cd 8020 	str.w	r8, [sp, #32]
 800939c:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
 80093a0:	f00b fdec 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80093a4:	ee1b 1a90 	vmov	r1, s23
 80093a8:	4630      	mov	r0, r6
 80093aa:	f008 fb77 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    start.setXY(40, 62);
 80093ae:	223e      	movs	r2, #62	; 0x3e
 80093b0:	ee1c 0a10 	vmov	r0, s24
 80093b4:	2128      	movs	r1, #40	; 0x28
 80093b6:	f7fc fdc9 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80093ba:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 80093be:	ee1c 1a10 	vmov	r1, s24
 80093c2:	4638      	mov	r0, r7
        color = newColor;
 80093c4:	f8c4 3848 	str.w	r3, [r4, #2120]	; 0x848
        linespace = space;
 80093c8:	f8a4 584c 	strh.w	r5, [r4, #2124]	; 0x84c
        boundingArea = calculateBoundingArea();
 80093cc:	f00b fb3c 	bl	8014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80093d0:	f604 0354 	addw	r3, r4, #2132	; 0x854
 80093d4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80093d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80093dc:	230a      	movs	r3, #10
    start.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PET7));
 80093de:	a908      	add	r1, sp, #32
 80093e0:	ee1c 0a10 	vmov	r0, s24
 80093e4:	f8cd 8020 	str.w	r8, [sp, #32]
 80093e8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80093ec:	f00b fdc6 	bl	8014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80093f0:	ee1c 1a10 	vmov	r1, s24
 80093f4:	4630      	mov	r0, r6
 80093f6:	f008 fb51 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    returnBut.setXY(0, 400);
 80093fa:	4629      	mov	r1, r5
 80093fc:	ee1c 0a90 	vmov	r0, s25
 8009400:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009404:	f7fc fda2 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8009408:	2333      	movs	r3, #51	; 0x33
    returnBut.setBitmaps(touchgfx::Bitmap(BITMAP_RETURN1_ID), touchgfx::Bitmap(BITMAP_RETURN2_ID));
 800940a:	aa08      	add	r2, sp, #32
 800940c:	a907      	add	r1, sp, #28
 800940e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009412:	2334      	movs	r3, #52	; 0x34
 8009414:	ee1c 0a90 	vmov	r0, s25
 8009418:	f8ad 3020 	strh.w	r3, [sp, #32]
 800941c:	f00b ff87 	bl	801532e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    returnBut.setAction(buttonCallback);
 8009420:	f604 03a8 	addw	r3, r4, #2216	; 0x8a8
 8009424:	4630      	mov	r0, r6
 8009426:	ee1c 1a90 	vmov	r1, s25
        action = &callback;
 800942a:	f8c4 3888 	str.w	r3, [r4, #2184]	; 0x888
 800942e:	f008 fb35 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8009432:	4620      	mov	r0, r4
 8009434:	b00b      	add	sp, #44	; 0x2c
 8009436:	ecbd 8b0e 	vpop	{d8-d14}
 800943a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800943e:	bf00      	nop
 8009440:	ff575757 	.word	0xff575757
 8009444:	20027d00 	.word	0x20027d00
 8009448:	20027d04 	.word	0x20027d04
 800944c:	0802f8b4 	.word	0x0802f8b4
 8009450:	ff858585 	.word	0xff858585
 8009454:	20027d0c 	.word	0x20027d0c
 8009458:	0802e2a4 	.word	0x0802e2a4
 800945c:	ffc70c0c 	.word	0xffc70c0c

08009460 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8009460:	4770      	bx	lr

08009462 <_ZN19FrontendApplicationD0Ev>:
 8009462:	b510      	push	{r4, lr}
 8009464:	4604      	mov	r4, r0
 8009466:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800946a:	f021 faaa 	bl	802a9c2 <_ZdlPvj>
 800946e:	4620      	mov	r0, r4
 8009470:	bd10      	pop	{r4, pc}

08009472 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8009472:	b510      	push	{r4, lr}
 8009474:	4604      	mov	r4, r0
    {
        model.tick();
 8009476:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 800947a:	f000 f812 	bl	80094a2 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800947e:	4620      	mov	r0, r4
    }
 8009480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8009484:	f00e bddc 	b.w	8018040 <_ZN8touchgfx11Application15handleTickEventEv>

08009488 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8009488:	b510      	push	{r4, lr}
 800948a:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 800948c:	f7fb fc84 	bl	8004d98 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8009490:	4b01      	ldr	r3, [pc, #4]	; (8009498 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8009492:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8009494:	6023      	str	r3, [r4, #0]
}
 8009496:	bd10      	pop	{r4, pc}
 8009498:	0802f90c 	.word	0x0802f90c

0800949c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800949c:	2200      	movs	r2, #0
 800949e:	6002      	str	r2, [r0, #0]
{

}
 80094a0:	4770      	bx	lr

080094a2 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 80094a2:	4770      	bx	lr

080094a4 <_ZN20aboutScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~aboutScreenPresenter() {}
 80094a4:	4770      	bx	lr

080094a6 <_ZThn4_N20aboutScreenPresenterD1Ev>:
 80094a6:	3804      	subs	r0, #4
 80094a8:	4770      	bx	lr

080094aa <_ZN20aboutScreenPresenter10deactivateEv>:
}

void aboutScreenPresenter::activate()
{

}
 80094aa:	4770      	bx	lr

080094ac <_ZN20aboutScreenPresenterD0Ev>:
 80094ac:	b510      	push	{r4, lr}
 80094ae:	4604      	mov	r4, r0
 80094b0:	2110      	movs	r1, #16
 80094b2:	f021 fa86 	bl	802a9c2 <_ZdlPvj>
 80094b6:	4620      	mov	r0, r4
 80094b8:	bd10      	pop	{r4, pc}

080094ba <_ZThn4_N20aboutScreenPresenterD0Ev>:
 80094ba:	f1a0 0004 	sub.w	r0, r0, #4
 80094be:	e7f5      	b.n	80094ac <_ZN20aboutScreenPresenterD0Ev>

080094c0 <_ZN20aboutScreenPresenterC1ER15aboutScreenView>:
    ModelListener() : model(0) {}
 80094c0:	2200      	movs	r2, #0
    : view(v)
 80094c2:	60c1      	str	r1, [r0, #12]
 80094c4:	6082      	str	r2, [r0, #8]
 80094c6:	4a04      	ldr	r2, [pc, #16]	; (80094d8 <_ZN20aboutScreenPresenterC1ER15aboutScreenView+0x18>)
aboutScreenPresenter::aboutScreenPresenter(aboutScreenView& v)
 80094c8:	b510      	push	{r4, lr}
    : view(v)
 80094ca:	f102 0408 	add.w	r4, r2, #8
 80094ce:	3220      	adds	r2, #32
 80094d0:	6004      	str	r4, [r0, #0]
 80094d2:	6042      	str	r2, [r0, #4]
}
 80094d4:	bd10      	pop	{r4, pc}
 80094d6:	bf00      	nop
 80094d8:	0802f958 	.word	0x0802f958

080094dc <_ZN15aboutScreenView14tearDownScreenEv>:
}

void aboutScreenView::tearDownScreen()
{
    aboutScreenViewBase::tearDownScreen();
}
 80094dc:	4770      	bx	lr
	...

080094e0 <_ZN15aboutScreenViewD1Ev>:

class aboutScreenView : public aboutScreenViewBase
{
public:
    aboutScreenView();
    virtual ~aboutScreenView() {}
 80094e0:	4b03      	ldr	r3, [pc, #12]	; (80094f0 <_ZN15aboutScreenViewD1Ev+0x10>)
 80094e2:	b510      	push	{r4, lr}
 80094e4:	4604      	mov	r4, r0
 80094e6:	6003      	str	r3, [r0, #0]
 80094e8:	f7fc fc7d 	bl	8005de6 <_ZN19aboutScreenViewBaseD1Ev>
 80094ec:	4620      	mov	r0, r4
 80094ee:	bd10      	pop	{r4, pc}
 80094f0:	0802f988 	.word	0x0802f988

080094f4 <_ZN15aboutScreenViewD0Ev>:
 80094f4:	b510      	push	{r4, lr}
 80094f6:	4604      	mov	r4, r0
 80094f8:	f7ff fff2 	bl	80094e0 <_ZN15aboutScreenViewD1Ev>
 80094fc:	f240 412c 	movw	r1, #1068	; 0x42c
 8009500:	4620      	mov	r0, r4
 8009502:	f021 fa5e 	bl	802a9c2 <_ZdlPvj>
 8009506:	4620      	mov	r0, r4
 8009508:	bd10      	pop	{r4, pc}
	...

0800950c <_ZN15aboutScreenViewC1Ev>:
aboutScreenView::aboutScreenView()
 800950c:	b510      	push	{r4, lr}
 800950e:	4604      	mov	r4, r0
 8009510:	f7fc fd8c 	bl	800602c <_ZN19aboutScreenViewBaseC1Ev>
 8009514:	4b01      	ldr	r3, [pc, #4]	; (800951c <_ZN15aboutScreenViewC1Ev+0x10>)
}
 8009516:	4620      	mov	r0, r4
aboutScreenView::aboutScreenView()
 8009518:	6023      	str	r3, [r4, #0]
}
 800951a:	bd10      	pop	{r4, pc}
 800951c:	0802f988 	.word	0x0802f988

08009520 <_ZN15aboutScreenView11setupScreenEv>:
    aboutScreenViewBase::setupScreen();
 8009520:	f7fc bc62 	b.w	8005de8 <_ZN19aboutScreenViewBase11setupScreenEv>

08009524 <_ZN18batScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~batScreenPresenter() {}
 8009524:	4770      	bx	lr

08009526 <_ZThn4_N18batScreenPresenterD1Ev>:
 8009526:	3804      	subs	r0, #4
 8009528:	4770      	bx	lr

0800952a <_ZN18batScreenPresenter10deactivateEv>:
}

void batScreenPresenter::activate()
{

}
 800952a:	4770      	bx	lr

0800952c <_ZN18batScreenPresenterD0Ev>:
 800952c:	b510      	push	{r4, lr}
 800952e:	4604      	mov	r4, r0
 8009530:	2110      	movs	r1, #16
 8009532:	f021 fa46 	bl	802a9c2 <_ZdlPvj>
 8009536:	4620      	mov	r0, r4
 8009538:	bd10      	pop	{r4, pc}

0800953a <_ZThn4_N18batScreenPresenterD0Ev>:
 800953a:	f1a0 0004 	sub.w	r0, r0, #4
 800953e:	e7f5      	b.n	800952c <_ZN18batScreenPresenterD0Ev>

08009540 <_ZN18batScreenPresenterC1ER13batScreenView>:
 8009540:	2200      	movs	r2, #0
    : view(v)
 8009542:	60c1      	str	r1, [r0, #12]
 8009544:	6082      	str	r2, [r0, #8]
 8009546:	4a04      	ldr	r2, [pc, #16]	; (8009558 <_ZN18batScreenPresenterC1ER13batScreenView+0x18>)
batScreenPresenter::batScreenPresenter(batScreenView& v)
 8009548:	b510      	push	{r4, lr}
    : view(v)
 800954a:	f102 0408 	add.w	r4, r2, #8
 800954e:	3220      	adds	r2, #32
 8009550:	6004      	str	r4, [r0, #0]
 8009552:	6042      	str	r2, [r0, #4]
}
 8009554:	bd10      	pop	{r4, pc}
 8009556:	bf00      	nop
 8009558:	0802f9b4 	.word	0x0802f9b4

0800955c <_ZN13batScreenView14tearDownScreenEv>:
}

void batScreenView::tearDownScreen()
{
    batScreenViewBase::tearDownScreen();
}
 800955c:	4770      	bx	lr
	...

08009560 <_ZN13batScreenViewD1Ev>:

class batScreenView : public batScreenViewBase
{
public:
    batScreenView();
    virtual ~batScreenView() {}
 8009560:	4b03      	ldr	r3, [pc, #12]	; (8009570 <_ZN13batScreenViewD1Ev+0x10>)
 8009562:	b510      	push	{r4, lr}
 8009564:	4604      	mov	r4, r0
 8009566:	6003      	str	r3, [r0, #0]
 8009568:	f7fd fabe 	bl	8006ae8 <_ZN17batScreenViewBaseD1Ev>
 800956c:	4620      	mov	r0, r4
 800956e:	bd10      	pop	{r4, pc}
 8009570:	0802f9e4 	.word	0x0802f9e4

08009574 <_ZN13batScreenViewD0Ev>:
 8009574:	b510      	push	{r4, lr}
 8009576:	4604      	mov	r4, r0
 8009578:	f7ff fff2 	bl	8009560 <_ZN13batScreenViewD1Ev>
 800957c:	f243 61b8 	movw	r1, #14008	; 0x36b8
 8009580:	4620      	mov	r0, r4
 8009582:	f021 fa1e 	bl	802a9c2 <_ZdlPvj>
 8009586:	4620      	mov	r0, r4
 8009588:	bd10      	pop	{r4, pc}
	...

0800958c <_ZN13batScreenViewC1Ev>:
batScreenView::batScreenView()
 800958c:	b510      	push	{r4, lr}
 800958e:	4604      	mov	r4, r0
 8009590:	f7fd fb54 	bl	8006c3c <_ZN17batScreenViewBaseC1Ev>
 8009594:	4b01      	ldr	r3, [pc, #4]	; (800959c <_ZN13batScreenViewC1Ev+0x10>)
}
 8009596:	4620      	mov	r0, r4
batScreenView::batScreenView()
 8009598:	6023      	str	r3, [r4, #0]
}
 800959a:	bd10      	pop	{r4, pc}
 800959c:	0802f9e4 	.word	0x0802f9e4

080095a0 <_ZN13batScreenView11setupScreenEv>:
    batScreenViewBase::setupScreen();
 80095a0:	f7fd ba75 	b.w	8006a8e <_ZN17batScreenViewBase11setupScreenEv>

080095a4 <_ZN21firstScreeenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~firstScreeenPresenter() {}
 80095a4:	4770      	bx	lr

080095a6 <_ZThn4_N21firstScreeenPresenterD1Ev>:
 80095a6:	3804      	subs	r0, #4
 80095a8:	4770      	bx	lr

080095aa <_ZN21firstScreeenPresenter10deactivateEv>:
}

void firstScreeenPresenter::activate()
{

}
 80095aa:	4770      	bx	lr

080095ac <_ZN21firstScreeenPresenterD0Ev>:
 80095ac:	b510      	push	{r4, lr}
 80095ae:	4604      	mov	r4, r0
 80095b0:	2110      	movs	r1, #16
 80095b2:	f021 fa06 	bl	802a9c2 <_ZdlPvj>
 80095b6:	4620      	mov	r0, r4
 80095b8:	bd10      	pop	{r4, pc}

080095ba <_ZThn4_N21firstScreeenPresenterD0Ev>:
 80095ba:	f1a0 0004 	sub.w	r0, r0, #4
 80095be:	e7f5      	b.n	80095ac <_ZN21firstScreeenPresenterD0Ev>

080095c0 <_ZN21firstScreeenPresenterC1ER16firstScreeenView>:
 80095c0:	2200      	movs	r2, #0
    : view(v)
 80095c2:	60c1      	str	r1, [r0, #12]
 80095c4:	6082      	str	r2, [r0, #8]
 80095c6:	4a04      	ldr	r2, [pc, #16]	; (80095d8 <_ZN21firstScreeenPresenterC1ER16firstScreeenView+0x18>)
firstScreeenPresenter::firstScreeenPresenter(firstScreeenView& v)
 80095c8:	b510      	push	{r4, lr}
    : view(v)
 80095ca:	f102 0408 	add.w	r4, r2, #8
 80095ce:	3220      	adds	r2, #32
 80095d0:	6004      	str	r4, [r0, #0]
 80095d2:	6042      	str	r2, [r0, #4]
}
 80095d4:	bd10      	pop	{r4, pc}
 80095d6:	bf00      	nop
 80095d8:	0802fa10 	.word	0x0802fa10

080095dc <_ZN16firstScreeenView14tearDownScreenEv>:
}

void firstScreeenView::tearDownScreen()
{
    firstScreeenViewBase::tearDownScreen();
}
 80095dc:	4770      	bx	lr
	...

080095e0 <_ZN16firstScreeenViewD1Ev>:

class firstScreeenView : public firstScreeenViewBase
{
public:
    firstScreeenView();
    virtual ~firstScreeenView() {}
 80095e0:	4b03      	ldr	r3, [pc, #12]	; (80095f0 <_ZN16firstScreeenViewD1Ev+0x10>)
 80095e2:	b510      	push	{r4, lr}
 80095e4:	4604      	mov	r4, r0
 80095e6:	6003      	str	r3, [r0, #0]
 80095e8:	f7fe f9e2 	bl	80079b0 <_ZN20firstScreeenViewBaseD1Ev>
 80095ec:	4620      	mov	r0, r4
 80095ee:	bd10      	pop	{r4, pc}
 80095f0:	0802fa40 	.word	0x0802fa40

080095f4 <_ZN16firstScreeenViewD0Ev>:
 80095f4:	b510      	push	{r4, lr}
 80095f6:	4604      	mov	r4, r0
 80095f8:	f7ff fff2 	bl	80095e0 <_ZN16firstScreeenViewD1Ev>
 80095fc:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8009600:	4620      	mov	r0, r4
 8009602:	f021 f9de 	bl	802a9c2 <_ZdlPvj>
 8009606:	4620      	mov	r0, r4
 8009608:	bd10      	pop	{r4, pc}
	...

0800960c <_ZN16firstScreeenViewC1Ev>:
firstScreeenView::firstScreeenView()
 800960c:	b510      	push	{r4, lr}
 800960e:	4604      	mov	r4, r0
 8009610:	f7fe fa6e 	bl	8007af0 <_ZN20firstScreeenViewBaseC1Ev>
 8009614:	4b01      	ldr	r3, [pc, #4]	; (800961c <_ZN16firstScreeenViewC1Ev+0x10>)
}
 8009616:	4620      	mov	r0, r4
firstScreeenView::firstScreeenView()
 8009618:	6023      	str	r3, [r4, #0]
}
 800961a:	bd10      	pop	{r4, pc}
 800961c:	0802fa40 	.word	0x0802fa40

08009620 <_ZN16firstScreeenView11setupScreenEv>:
    firstScreeenViewBase::setupScreen();
 8009620:	f7fe b9c7 	b.w	80079b2 <_ZN20firstScreeenViewBase11setupScreenEv>

08009624 <_ZN19lockScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~lockScreenPresenter() {}
 8009624:	4770      	bx	lr

08009626 <_ZThn4_N19lockScreenPresenterD1Ev>:
 8009626:	3804      	subs	r0, #4
 8009628:	4770      	bx	lr

0800962a <_ZN19lockScreenPresenter10deactivateEv>:
}

void lockScreenPresenter::activate()
{

}
 800962a:	4770      	bx	lr

0800962c <_ZN19lockScreenPresenterD0Ev>:
 800962c:	b510      	push	{r4, lr}
 800962e:	4604      	mov	r4, r0
 8009630:	2110      	movs	r1, #16
 8009632:	f021 f9c6 	bl	802a9c2 <_ZdlPvj>
 8009636:	4620      	mov	r0, r4
 8009638:	bd10      	pop	{r4, pc}

0800963a <_ZThn4_N19lockScreenPresenterD0Ev>:
 800963a:	f1a0 0004 	sub.w	r0, r0, #4
 800963e:	e7f5      	b.n	800962c <_ZN19lockScreenPresenterD0Ev>

08009640 <_ZN19lockScreenPresenterC1ER14lockScreenView>:
 8009640:	2200      	movs	r2, #0
    : view(v)
 8009642:	60c1      	str	r1, [r0, #12]
 8009644:	6082      	str	r2, [r0, #8]
 8009646:	4a04      	ldr	r2, [pc, #16]	; (8009658 <_ZN19lockScreenPresenterC1ER14lockScreenView+0x18>)
lockScreenPresenter::lockScreenPresenter(lockScreenView& v)
 8009648:	b510      	push	{r4, lr}
    : view(v)
 800964a:	f102 0408 	add.w	r4, r2, #8
 800964e:	3220      	adds	r2, #32
 8009650:	6004      	str	r4, [r0, #0]
 8009652:	6042      	str	r2, [r0, #4]
}
 8009654:	bd10      	pop	{r4, pc}
 8009656:	bf00      	nop
 8009658:	0802fa70 	.word	0x0802fa70

0800965c <_ZN14lockScreenView14tearDownScreenEv>:
}

void lockScreenView::tearDownScreen()
{
    lockScreenViewBase::tearDownScreen();
}
 800965c:	4770      	bx	lr
	...

08009660 <_ZN14lockScreenViewD1Ev>:

class lockScreenView : public lockScreenViewBase
{
public:
    lockScreenView();
    virtual ~lockScreenView() {}
 8009660:	4b03      	ldr	r3, [pc, #12]	; (8009670 <_ZN14lockScreenViewD1Ev+0x10>)
 8009662:	b510      	push	{r4, lr}
 8009664:	4604      	mov	r4, r0
 8009666:	6003      	str	r3, [r0, #0]
 8009668:	f7fe fc24 	bl	8007eb4 <_ZN18lockScreenViewBaseD1Ev>
 800966c:	4620      	mov	r0, r4
 800966e:	bd10      	pop	{r4, pc}
 8009670:	0802faa0 	.word	0x0802faa0

08009674 <_ZN14lockScreenViewD0Ev>:
 8009674:	b510      	push	{r4, lr}
 8009676:	4604      	mov	r4, r0
 8009678:	f7ff fff2 	bl	8009660 <_ZN14lockScreenViewD1Ev>
 800967c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009680:	4620      	mov	r0, r4
 8009682:	f021 f99e 	bl	802a9c2 <_ZdlPvj>
 8009686:	4620      	mov	r0, r4
 8009688:	bd10      	pop	{r4, pc}
	...

0800968c <_ZN14lockScreenViewC1Ev>:
lockScreenView::lockScreenView()
 800968c:	b510      	push	{r4, lr}
 800968e:	4604      	mov	r4, r0
 8009690:	f7fe fc6a 	bl	8007f68 <_ZN18lockScreenViewBaseC1Ev>
 8009694:	4b01      	ldr	r3, [pc, #4]	; (800969c <_ZN14lockScreenViewC1Ev+0x10>)
}
 8009696:	4620      	mov	r0, r4
lockScreenView::lockScreenView()
 8009698:	6023      	str	r3, [r4, #0]
}
 800969a:	bd10      	pop	{r4, pc}
 800969c:	0802faa0 	.word	0x0802faa0

080096a0 <_ZN14lockScreenView11setupScreenEv>:
    lockScreenViewBase::setupScreen();
 80096a0:	f7fe bc09 	b.w	8007eb6 <_ZN18lockScreenViewBase11setupScreenEv>

080096a4 <_ZN19mainScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~mainScreenPresenter() {}
 80096a4:	4770      	bx	lr

080096a6 <_ZThn4_N19mainScreenPresenterD1Ev>:
 80096a6:	3804      	subs	r0, #4
 80096a8:	4770      	bx	lr

080096aa <_ZN19mainScreenPresenter10deactivateEv>:
}

void mainScreenPresenter::activate()
{

}
 80096aa:	4770      	bx	lr

080096ac <_ZN19mainScreenPresenterD0Ev>:
 80096ac:	b510      	push	{r4, lr}
 80096ae:	4604      	mov	r4, r0
 80096b0:	2110      	movs	r1, #16
 80096b2:	f021 f986 	bl	802a9c2 <_ZdlPvj>
 80096b6:	4620      	mov	r0, r4
 80096b8:	bd10      	pop	{r4, pc}

080096ba <_ZThn4_N19mainScreenPresenterD0Ev>:
 80096ba:	f1a0 0004 	sub.w	r0, r0, #4
 80096be:	e7f5      	b.n	80096ac <_ZN19mainScreenPresenterD0Ev>

080096c0 <_ZN19mainScreenPresenterC1ER14mainScreenView>:
 80096c0:	2200      	movs	r2, #0
    : view(v)
 80096c2:	60c1      	str	r1, [r0, #12]
 80096c4:	6082      	str	r2, [r0, #8]
 80096c6:	4a04      	ldr	r2, [pc, #16]	; (80096d8 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x18>)
mainScreenPresenter::mainScreenPresenter(mainScreenView& v)
 80096c8:	b510      	push	{r4, lr}
    : view(v)
 80096ca:	f102 0408 	add.w	r4, r2, #8
 80096ce:	3220      	adds	r2, #32
 80096d0:	6004      	str	r4, [r0, #0]
 80096d2:	6042      	str	r2, [r0, #4]
}
 80096d4:	bd10      	pop	{r4, pc}
 80096d6:	bf00      	nop
 80096d8:	0802fad0 	.word	0x0802fad0

080096dc <_ZN14mainScreenView14tearDownScreenEv>:
}

void mainScreenView::tearDownScreen()
{
    mainScreenViewBase::tearDownScreen();
}
 80096dc:	4770      	bx	lr
	...

080096e0 <_ZN14mainScreenViewD1Ev>:

class mainScreenView : public mainScreenViewBase
{
public:
    mainScreenView();
    virtual ~mainScreenView() {}
 80096e0:	4b03      	ldr	r3, [pc, #12]	; (80096f0 <_ZN14mainScreenViewD1Ev+0x10>)
 80096e2:	b510      	push	{r4, lr}
 80096e4:	4604      	mov	r4, r0
 80096e6:	6003      	str	r3, [r0, #0]
 80096e8:	f7fe fde3 	bl	80082b2 <_ZN18mainScreenViewBaseD1Ev>
 80096ec:	4620      	mov	r0, r4
 80096ee:	bd10      	pop	{r4, pc}
 80096f0:	0802fb00 	.word	0x0802fb00

080096f4 <_ZN14mainScreenViewD0Ev>:
 80096f4:	b510      	push	{r4, lr}
 80096f6:	4604      	mov	r4, r0
 80096f8:	f7ff fff2 	bl	80096e0 <_ZN14mainScreenViewD1Ev>
 80096fc:	f240 51a4 	movw	r1, #1444	; 0x5a4
 8009700:	4620      	mov	r0, r4
 8009702:	f021 f95e 	bl	802a9c2 <_ZdlPvj>
 8009706:	4620      	mov	r0, r4
 8009708:	bd10      	pop	{r4, pc}
	...

0800970c <_ZN14mainScreenViewC1Ev>:
mainScreenView::mainScreenView()
 800970c:	b510      	push	{r4, lr}
 800970e:	4604      	mov	r4, r0
 8009710:	f7fe fefe 	bl	8008510 <_ZN18mainScreenViewBaseC1Ev>
 8009714:	4b01      	ldr	r3, [pc, #4]	; (800971c <_ZN14mainScreenViewC1Ev+0x10>)
}
 8009716:	4620      	mov	r0, r4
mainScreenView::mainScreenView()
 8009718:	6023      	str	r3, [r4, #0]
}
 800971a:	bd10      	pop	{r4, pc}
 800971c:	0802fb00 	.word	0x0802fb00

08009720 <_ZN14mainScreenView11setupScreenEv>:
    mainScreenViewBase::setupScreen();
 8009720:	f7fe bdc8 	b.w	80082b4 <_ZN18mainScreenViewBase11setupScreenEv>

08009724 <_ZN20startScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~startScreenPresenter() {}
 8009724:	4770      	bx	lr

08009726 <_ZThn4_N20startScreenPresenterD1Ev>:
 8009726:	3804      	subs	r0, #4
 8009728:	4770      	bx	lr

0800972a <_ZN20startScreenPresenter10deactivateEv>:
}

void startScreenPresenter::activate()
{

}
 800972a:	4770      	bx	lr

0800972c <_ZN20startScreenPresenterD0Ev>:
 800972c:	b510      	push	{r4, lr}
 800972e:	4604      	mov	r4, r0
 8009730:	2110      	movs	r1, #16
 8009732:	f021 f946 	bl	802a9c2 <_ZdlPvj>
 8009736:	4620      	mov	r0, r4
 8009738:	bd10      	pop	{r4, pc}

0800973a <_ZThn4_N20startScreenPresenterD0Ev>:
 800973a:	f1a0 0004 	sub.w	r0, r0, #4
 800973e:	e7f5      	b.n	800972c <_ZN20startScreenPresenterD0Ev>

08009740 <_ZN20startScreenPresenterC1ER15startScreenView>:
 8009740:	2200      	movs	r2, #0
    : view(v)
 8009742:	60c1      	str	r1, [r0, #12]
 8009744:	6082      	str	r2, [r0, #8]
 8009746:	4a04      	ldr	r2, [pc, #16]	; (8009758 <_ZN20startScreenPresenterC1ER15startScreenView+0x18>)
startScreenPresenter::startScreenPresenter(startScreenView& v)
 8009748:	b510      	push	{r4, lr}
    : view(v)
 800974a:	f102 0408 	add.w	r4, r2, #8
 800974e:	3220      	adds	r2, #32
 8009750:	6004      	str	r4, [r0, #0]
 8009752:	6042      	str	r2, [r0, #4]
}
 8009754:	bd10      	pop	{r4, pc}
 8009756:	bf00      	nop
 8009758:	0802fb30 	.word	0x0802fb30

0800975c <_ZN15startScreenView14tearDownScreenEv>:
}

void startScreenView::tearDownScreen()
{
    startScreenViewBase::tearDownScreen();
}
 800975c:	4770      	bx	lr
	...

08009760 <_ZN15startScreenViewD1Ev>:

class startScreenView : public startScreenViewBase
{
public:
    startScreenView();
    virtual ~startScreenView() {}
 8009760:	4b03      	ldr	r3, [pc, #12]	; (8009770 <_ZN15startScreenViewD1Ev+0x10>)
 8009762:	b510      	push	{r4, lr}
 8009764:	4604      	mov	r4, r0
 8009766:	6003      	str	r3, [r0, #0]
 8009768:	f7ff faba 	bl	8008ce0 <_ZN19startScreenViewBaseD1Ev>
 800976c:	4620      	mov	r0, r4
 800976e:	bd10      	pop	{r4, pc}
 8009770:	0802fb60 	.word	0x0802fb60

08009774 <_ZN15startScreenViewD0Ev>:
 8009774:	b510      	push	{r4, lr}
 8009776:	4604      	mov	r4, r0
 8009778:	f7ff fff2 	bl	8009760 <_ZN15startScreenViewD1Ev>
 800977c:	f640 01b8 	movw	r1, #2232	; 0x8b8
 8009780:	4620      	mov	r0, r4
 8009782:	f021 f91e 	bl	802a9c2 <_ZdlPvj>
 8009786:	4620      	mov	r0, r4
 8009788:	bd10      	pop	{r4, pc}
	...

0800978c <_ZN15startScreenViewC1Ev>:
startScreenView::startScreenView()
 800978c:	b510      	push	{r4, lr}
 800978e:	4604      	mov	r4, r0
 8009790:	f7ff fae0 	bl	8008d54 <_ZN19startScreenViewBaseC1Ev>
 8009794:	4b01      	ldr	r3, [pc, #4]	; (800979c <_ZN15startScreenViewC1Ev+0x10>)
}
 8009796:	4620      	mov	r0, r4
startScreenView::startScreenView()
 8009798:	6023      	str	r3, [r4, #0]
}
 800979a:	bd10      	pop	{r4, pc}
 800979c:	0802fb60 	.word	0x0802fb60

080097a0 <_ZN15startScreenView11setupScreenEv>:
    startScreenViewBase::setupScreen();
 80097a0:	f7ff ba9f 	b.w	8008ce2 <_ZN19startScreenViewBase11setupScreenEv>

080097a4 <ft6x06_Reset>:
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 80097a4:	4770      	bx	lr

080097a6 <ft6x06_TS_ITStatus>:
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
}
 80097a6:	2000      	movs	r0, #0
 80097a8:	4770      	bx	lr

080097aa <ft6x06_ReadID>:
{
 80097aa:	b510      	push	{r4, lr}
 80097ac:	4604      	mov	r4, r0
  TS_IO_Init();
 80097ae:	f7f7 f9c6 	bl	8000b3e <TS_IO_Init>
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 80097b2:	21a8      	movs	r1, #168	; 0xa8
 80097b4:	b2e0      	uxtb	r0, r4
 80097b6:	f7f7 f9df 	bl	8000b78 <TS_IO_Read>
}
 80097ba:	b280      	uxth	r0, r0
 80097bc:	bd10      	pop	{r4, pc}
	...

080097c0 <ft6x06_TS_DetectTouch>:
{
 80097c0:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 80097c2:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80097c4:	2102      	movs	r1, #2
 80097c6:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 80097c8:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80097cc:	f7f7 f9d4 	bl	8000b78 <TS_IO_Read>
 80097d0:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT6206_TD_STAT_MASK;
 80097d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80097d8:	f003 030f 	and.w	r3, r3, #15
 80097dc:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80097e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	d901      	bls.n	80097ec <ft6x06_TS_DetectTouch+0x2c>
    nbTouch = 0;
 80097e8:	f88d 4007 	strb.w	r4, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80097ec:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80097f0:	4b03      	ldr	r3, [pc, #12]	; (8009800 <ft6x06_TS_DetectTouch+0x40>)
  return(nbTouch);
 80097f2:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80097f6:	705a      	strb	r2, [r3, #1]
  ft6x06_handle.currActiveTouchIdx = 0;
 80097f8:	2200      	movs	r2, #0
 80097fa:	709a      	strb	r2, [r3, #2]
}
 80097fc:	b002      	add	sp, #8
 80097fe:	bd10      	pop	{r4, pc}
 8009800:	200125ee 	.word	0x200125ee

08009804 <ft6x06_TS_GetXY>:
{
 8009804:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8009806:	4c15      	ldr	r4, [pc, #84]	; (800985c <ft6x06_TS_GetXY+0x58>)
{
 8009808:	4615      	mov	r5, r2
 800980a:	460e      	mov	r6, r1
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 800980c:	78a3      	ldrb	r3, [r4, #2]
 800980e:	7862      	ldrb	r2, [r4, #1]
 8009810:	429a      	cmp	r2, r3
 8009812:	d91f      	bls.n	8009854 <ft6x06_TS_GetXY+0x50>
    switch(ft6x06_handle.currActiveTouchIdx)
 8009814:	b303      	cbz	r3, 8009858 <ft6x06_TS_GetXY+0x54>
      regAddress = FT6206_P2_XH_REG; 
 8009816:	2b01      	cmp	r3, #1
 8009818:	bf14      	ite	ne
 800981a:	2100      	movne	r1, #0
 800981c:	2109      	moveq	r1, #9
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 800981e:	2304      	movs	r3, #4
 8009820:	b2c0      	uxtb	r0, r0
 8009822:	eb0d 0203 	add.w	r2, sp, r3
 8009826:	f7f7 f9c5 	bl	8000bb4 <TS_IO_ReadMultiple>
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 800982a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800982e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009832:	021b      	lsls	r3, r3, #8
 8009834:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009838:	4313      	orrs	r3, r2
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800983a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 800983e:	8033      	strh	r3, [r6, #0]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8009840:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009844:	021b      	lsls	r3, r3, #8
 8009846:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800984a:	4313      	orrs	r3, r2
 800984c:	802b      	strh	r3, [r5, #0]
    ft6x06_handle.currActiveTouchIdx++;
 800984e:	78a3      	ldrb	r3, [r4, #2]
 8009850:	3301      	adds	r3, #1
 8009852:	70a3      	strb	r3, [r4, #2]
}
 8009854:	b002      	add	sp, #8
 8009856:	bd70      	pop	{r4, r5, r6, pc}
    switch(ft6x06_handle.currActiveTouchIdx)
 8009858:	2103      	movs	r1, #3
 800985a:	e7e0      	b.n	800981e <ft6x06_TS_GetXY+0x1a>
 800985c:	200125ee 	.word	0x200125ee

08009860 <ft6x06_TS_EnableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8009860:	2201      	movs	r2, #1
 8009862:	21a4      	movs	r1, #164	; 0xa4
 8009864:	b2c0      	uxtb	r0, r0
 8009866:	f7f7 b96b 	b.w	8000b40 <TS_IO_Write>

0800986a <ft6x06_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 800986a:	2200      	movs	r2, #0
 800986c:	21a4      	movs	r1, #164	; 0xa4
 800986e:	b2c0      	uxtb	r0, r0
 8009870:	f7f7 b966 	b.w	8000b40 <TS_IO_Write>

08009874 <ft6x06_TS_Start>:
  ft6x06_TS_DisableIT(DeviceAddr);
 8009874:	f7ff bff9 	b.w	800986a <ft6x06_TS_DisableIT>

08009878 <ft6x06_TS_ClearIT>:
 8009878:	4770      	bx	lr
	...

0800987c <ft6x06_Init>:
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
  {
    if(ft6x06[idx] == DeviceAddr)
 800987c:	4b09      	ldr	r3, [pc, #36]	; (80098a4 <ft6x06_Init+0x28>)
{  
 800987e:	b410      	push	{r4}
    if(ft6x06[idx] == DeviceAddr)
 8009880:	781a      	ldrb	r2, [r3, #0]
 8009882:	4290      	cmp	r0, r2
 8009884:	d00a      	beq.n	800989c <ft6x06_Init+0x20>
 8009886:	7859      	ldrb	r1, [r3, #1]
 8009888:	4288      	cmp	r0, r1
 800988a:	d007      	beq.n	800989c <ft6x06_Init+0x20>
 800988c:	b10a      	cbz	r2, 8009892 <ft6x06_Init+0x16>
 800988e:	b929      	cbnz	r1, 800989c <ft6x06_Init+0x20>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8009890:	2201      	movs	r2, #1
      ft6x06[empty] = DeviceAddr;
 8009892:	5498      	strb	r0, [r3, r2]
}
 8009894:	f85d 4b04 	ldr.w	r4, [sp], #4
      TS_IO_Init(); 
 8009898:	f7f7 b951 	b.w	8000b3e <TS_IO_Init>
}
 800989c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	200125ec 	.word	0x200125ec

080098a8 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	4604      	mov	r4, r0
 80098ac:	460d      	mov	r5, r1
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80098ae:	2000      	movs	r0, #0
 80098b0:	49c9      	ldr	r1, [pc, #804]	; (8009bd8 <OTM8009A_Init+0x330>)
 80098b2:	f7f7 fcc7 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 80098b6:	49c9      	ldr	r1, [pc, #804]	; (8009bdc <OTM8009A_Init+0x334>)
 80098b8:	2003      	movs	r0, #3
 80098ba:	f7f7 fcc3 	bl	8001244 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 80098be:	49c8      	ldr	r1, [pc, #800]	; (8009be0 <OTM8009A_Init+0x338>)
 80098c0:	2000      	movs	r0, #0
 80098c2:	f7f7 fcbf 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 80098c6:	49c7      	ldr	r1, [pc, #796]	; (8009be4 <OTM8009A_Init+0x33c>)
 80098c8:	2002      	movs	r0, #2
 80098ca:	f7f7 fcbb 	bl	8001244 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80098ce:	49c4      	ldr	r1, [pc, #784]	; (8009be0 <OTM8009A_Init+0x338>)
 80098d0:	2000      	movs	r0, #0
 80098d2:	f7f7 fcb7 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 80098d6:	49c4      	ldr	r1, [pc, #784]	; (8009be8 <OTM8009A_Init+0x340>)
 80098d8:	2000      	movs	r0, #0
 80098da:	f7f7 fcb3 	bl	8001244 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80098de:	200a      	movs	r0, #10
 80098e0:	f7f7 fcae 	bl	8001240 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80098e4:	49c1      	ldr	r1, [pc, #772]	; (8009bec <OTM8009A_Init+0x344>)
 80098e6:	2000      	movs	r0, #0
 80098e8:	f7f7 fcac 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80098ec:	49c0      	ldr	r1, [pc, #768]	; (8009bf0 <OTM8009A_Init+0x348>)
 80098ee:	2000      	movs	r0, #0
 80098f0:	f7f7 fca8 	bl	8001244 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80098f4:	200a      	movs	r0, #10
 80098f6:	f7f7 fca3 	bl	8001240 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80098fa:	49be      	ldr	r1, [pc, #760]	; (8009bf4 <OTM8009A_Init+0x34c>)
 80098fc:	2000      	movs	r0, #0
 80098fe:	f7f7 fca1 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8009902:	49bd      	ldr	r1, [pc, #756]	; (8009bf8 <OTM8009A_Init+0x350>)
 8009904:	2000      	movs	r0, #0
 8009906:	f7f7 fc9d 	bl	8001244 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 800990a:	49bc      	ldr	r1, [pc, #752]	; (8009bfc <OTM8009A_Init+0x354>)
 800990c:	2000      	movs	r0, #0
 800990e:	f7f7 fc99 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8009912:	49bb      	ldr	r1, [pc, #748]	; (8009c00 <OTM8009A_Init+0x358>)
 8009914:	2000      	movs	r0, #0
 8009916:	f7f7 fc95 	bl	8001244 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 800991a:	49ba      	ldr	r1, [pc, #744]	; (8009c04 <OTM8009A_Init+0x35c>)
 800991c:	2000      	movs	r0, #0
 800991e:	f7f7 fc91 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8009922:	49b9      	ldr	r1, [pc, #740]	; (8009c08 <OTM8009A_Init+0x360>)
 8009924:	2000      	movs	r0, #0
 8009926:	f7f7 fc8d 	bl	8001244 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800992a:	49ab      	ldr	r1, [pc, #684]	; (8009bd8 <OTM8009A_Init+0x330>)
 800992c:	2000      	movs	r0, #0
 800992e:	f7f7 fc89 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8009932:	49b6      	ldr	r1, [pc, #728]	; (8009c0c <OTM8009A_Init+0x364>)
 8009934:	2000      	movs	r0, #0
 8009936:	f7f7 fc85 	bl	8001244 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800993a:	49b5      	ldr	r1, [pc, #724]	; (8009c10 <OTM8009A_Init+0x368>)
 800993c:	2000      	movs	r0, #0
 800993e:	f7f7 fc81 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8009942:	49b4      	ldr	r1, [pc, #720]	; (8009c14 <OTM8009A_Init+0x36c>)
 8009944:	2000      	movs	r0, #0
 8009946:	f7f7 fc7d 	bl	8001244 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800994a:	49b3      	ldr	r1, [pc, #716]	; (8009c18 <OTM8009A_Init+0x370>)
 800994c:	2000      	movs	r0, #0
 800994e:	f7f7 fc79 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8009952:	49b2      	ldr	r1, [pc, #712]	; (8009c1c <OTM8009A_Init+0x374>)
 8009954:	2000      	movs	r0, #0
 8009956:	f7f7 fc75 	bl	8001244 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 800995a:	49b1      	ldr	r1, [pc, #708]	; (8009c20 <OTM8009A_Init+0x378>)
 800995c:	2000      	movs	r0, #0
 800995e:	f7f7 fc71 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8009962:	49b0      	ldr	r1, [pc, #704]	; (8009c24 <OTM8009A_Init+0x37c>)
 8009964:	2000      	movs	r0, #0
 8009966:	f7f7 fc6d 	bl	8001244 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 800996a:	49af      	ldr	r1, [pc, #700]	; (8009c28 <OTM8009A_Init+0x380>)
 800996c:	2000      	movs	r0, #0
 800996e:	f7f7 fc69 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8009972:	49a3      	ldr	r1, [pc, #652]	; (8009c00 <OTM8009A_Init+0x358>)
 8009974:	2000      	movs	r0, #0
 8009976:	f7f7 fc65 	bl	8001244 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800997a:	4997      	ldr	r1, [pc, #604]	; (8009bd8 <OTM8009A_Init+0x330>)
 800997c:	2000      	movs	r0, #0
 800997e:	f7f7 fc61 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8009982:	49aa      	ldr	r1, [pc, #680]	; (8009c2c <OTM8009A_Init+0x384>)
 8009984:	2002      	movs	r0, #2
 8009986:	f7f7 fc5d 	bl	8001244 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 800998a:	49a9      	ldr	r1, [pc, #676]	; (8009c30 <OTM8009A_Init+0x388>)
 800998c:	2000      	movs	r0, #0
 800998e:	f7f7 fc59 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8009992:	49a8      	ldr	r1, [pc, #672]	; (8009c34 <OTM8009A_Init+0x38c>)
 8009994:	2000      	movs	r0, #0
 8009996:	f7f7 fc55 	bl	8001244 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 800999a:	49a7      	ldr	r1, [pc, #668]	; (8009c38 <OTM8009A_Init+0x390>)
 800999c:	2000      	movs	r0, #0
 800999e:	f7f7 fc51 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 80099a2:	49a6      	ldr	r1, [pc, #664]	; (8009c3c <OTM8009A_Init+0x394>)
 80099a4:	2000      	movs	r0, #0
 80099a6:	f7f7 fc4d 	bl	8001244 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 80099aa:	49a5      	ldr	r1, [pc, #660]	; (8009c40 <OTM8009A_Init+0x398>)
 80099ac:	2000      	movs	r0, #0
 80099ae:	f7f7 fc49 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 80099b2:	49a4      	ldr	r1, [pc, #656]	; (8009c44 <OTM8009A_Init+0x39c>)
 80099b4:	2000      	movs	r0, #0
 80099b6:	f7f7 fc45 	bl	8001244 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80099ba:	4995      	ldr	r1, [pc, #596]	; (8009c10 <OTM8009A_Init+0x368>)
 80099bc:	2000      	movs	r0, #0
 80099be:	f7f7 fc41 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 80099c2:	49a1      	ldr	r1, [pc, #644]	; (8009c48 <OTM8009A_Init+0x3a0>)
 80099c4:	2000      	movs	r0, #0
 80099c6:	f7f7 fc3d 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80099ca:	4993      	ldr	r1, [pc, #588]	; (8009c18 <OTM8009A_Init+0x370>)
 80099cc:	2000      	movs	r0, #0
 80099ce:	f7f7 fc39 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 80099d2:	499e      	ldr	r1, [pc, #632]	; (8009c4c <OTM8009A_Init+0x3a4>)
 80099d4:	2000      	movs	r0, #0
 80099d6:	f7f7 fc35 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 80099da:	499d      	ldr	r1, [pc, #628]	; (8009c50 <OTM8009A_Init+0x3a8>)
 80099dc:	2000      	movs	r0, #0
 80099de:	f7f7 fc31 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 80099e2:	499c      	ldr	r1, [pc, #624]	; (8009c54 <OTM8009A_Init+0x3ac>)
 80099e4:	2002      	movs	r0, #2
 80099e6:	f7f7 fc2d 	bl	8001244 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80099ea:	497d      	ldr	r1, [pc, #500]	; (8009be0 <OTM8009A_Init+0x338>)
 80099ec:	2000      	movs	r0, #0
 80099ee:	f7f7 fc29 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80099f2:	4999      	ldr	r1, [pc, #612]	; (8009c58 <OTM8009A_Init+0x3b0>)
 80099f4:	2006      	movs	r0, #6
 80099f6:	f7f7 fc25 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80099fa:	4998      	ldr	r1, [pc, #608]	; (8009c5c <OTM8009A_Init+0x3b4>)
 80099fc:	2000      	movs	r0, #0
 80099fe:	f7f7 fc21 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8009a02:	4997      	ldr	r1, [pc, #604]	; (8009c60 <OTM8009A_Init+0x3b8>)
 8009a04:	200e      	movs	r0, #14
 8009a06:	f7f7 fc1d 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8009a0a:	4996      	ldr	r1, [pc, #600]	; (8009c64 <OTM8009A_Init+0x3bc>)
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	f7f7 fc19 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8009a12:	4995      	ldr	r1, [pc, #596]	; (8009c68 <OTM8009A_Init+0x3c0>)
 8009a14:	200e      	movs	r0, #14
 8009a16:	f7f7 fc15 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8009a1a:	4994      	ldr	r1, [pc, #592]	; (8009c6c <OTM8009A_Init+0x3c4>)
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	f7f7 fc11 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8009a22:	4993      	ldr	r1, [pc, #588]	; (8009c70 <OTM8009A_Init+0x3c8>)
 8009a24:	200a      	movs	r0, #10
 8009a26:	f7f7 fc0d 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8009a2a:	4992      	ldr	r1, [pc, #584]	; (8009c74 <OTM8009A_Init+0x3cc>)
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	f7f7 fc09 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8009a32:	4991      	ldr	r1, [pc, #580]	; (8009c78 <OTM8009A_Init+0x3d0>)
 8009a34:	2000      	movs	r0, #0
 8009a36:	f7f7 fc05 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8009a3a:	4969      	ldr	r1, [pc, #420]	; (8009be0 <OTM8009A_Init+0x338>)
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	f7f7 fc01 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8009a42:	498e      	ldr	r1, [pc, #568]	; (8009c7c <OTM8009A_Init+0x3d4>)
 8009a44:	200a      	movs	r0, #10
 8009a46:	f7f7 fbfd 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8009a4a:	498d      	ldr	r1, [pc, #564]	; (8009c80 <OTM8009A_Init+0x3d8>)
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	f7f7 fbf9 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8009a52:	498c      	ldr	r1, [pc, #560]	; (8009c84 <OTM8009A_Init+0x3dc>)
 8009a54:	200f      	movs	r0, #15
 8009a56:	f7f7 fbf5 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8009a5a:	4980      	ldr	r1, [pc, #512]	; (8009c5c <OTM8009A_Init+0x3b4>)
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	f7f7 fbf1 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8009a62:	4989      	ldr	r1, [pc, #548]	; (8009c88 <OTM8009A_Init+0x3e0>)
 8009a64:	200f      	movs	r0, #15
 8009a66:	f7f7 fbed 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8009a6a:	497e      	ldr	r1, [pc, #504]	; (8009c64 <OTM8009A_Init+0x3bc>)
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	f7f7 fbe9 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8009a72:	4986      	ldr	r1, [pc, #536]	; (8009c8c <OTM8009A_Init+0x3e4>)
 8009a74:	200a      	movs	r0, #10
 8009a76:	f7f7 fbe5 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8009a7a:	497c      	ldr	r1, [pc, #496]	; (8009c6c <OTM8009A_Init+0x3c4>)
 8009a7c:	2000      	movs	r0, #0
 8009a7e:	f7f7 fbe1 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8009a82:	4983      	ldr	r1, [pc, #524]	; (8009c90 <OTM8009A_Init+0x3e8>)
 8009a84:	200f      	movs	r0, #15
 8009a86:	f7f7 fbdd 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8009a8a:	497a      	ldr	r1, [pc, #488]	; (8009c74 <OTM8009A_Init+0x3cc>)
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	f7f7 fbd9 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8009a92:	4980      	ldr	r1, [pc, #512]	; (8009c94 <OTM8009A_Init+0x3ec>)
 8009a94:	200f      	movs	r0, #15
 8009a96:	f7f7 fbd5 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8009a9a:	497f      	ldr	r1, [pc, #508]	; (8009c98 <OTM8009A_Init+0x3f0>)
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	f7f7 fbd1 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8009aa2:	497e      	ldr	r1, [pc, #504]	; (8009c9c <OTM8009A_Init+0x3f4>)
 8009aa4:	200a      	movs	r0, #10
 8009aa6:	f7f7 fbcd 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8009aaa:	497d      	ldr	r1, [pc, #500]	; (8009ca0 <OTM8009A_Init+0x3f8>)
 8009aac:	2000      	movs	r0, #0
 8009aae:	f7f7 fbc9 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8009ab2:	497c      	ldr	r1, [pc, #496]	; (8009ca4 <OTM8009A_Init+0x3fc>)
 8009ab4:	200a      	movs	r0, #10
 8009ab6:	f7f7 fbc5 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8009aba:	4949      	ldr	r1, [pc, #292]	; (8009be0 <OTM8009A_Init+0x338>)
 8009abc:	2000      	movs	r0, #0
 8009abe:	f7f7 fbc1 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8009ac2:	4979      	ldr	r1, [pc, #484]	; (8009ca8 <OTM8009A_Init+0x400>)
 8009ac4:	200a      	movs	r0, #10
 8009ac6:	f7f7 fbbd 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8009aca:	496d      	ldr	r1, [pc, #436]	; (8009c80 <OTM8009A_Init+0x3d8>)
 8009acc:	2000      	movs	r0, #0
 8009ace:	f7f7 fbb9 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8009ad2:	4976      	ldr	r1, [pc, #472]	; (8009cac <OTM8009A_Init+0x404>)
 8009ad4:	200f      	movs	r0, #15
 8009ad6:	f7f7 fbb5 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8009ada:	4960      	ldr	r1, [pc, #384]	; (8009c5c <OTM8009A_Init+0x3b4>)
 8009adc:	2000      	movs	r0, #0
 8009ade:	f7f7 fbb1 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8009ae2:	4973      	ldr	r1, [pc, #460]	; (8009cb0 <OTM8009A_Init+0x408>)
 8009ae4:	200f      	movs	r0, #15
 8009ae6:	f7f7 fbad 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8009aea:	495e      	ldr	r1, [pc, #376]	; (8009c64 <OTM8009A_Init+0x3bc>)
 8009aec:	2000      	movs	r0, #0
 8009aee:	f7f7 fba9 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8009af2:	4970      	ldr	r1, [pc, #448]	; (8009cb4 <OTM8009A_Init+0x40c>)
 8009af4:	200a      	movs	r0, #10
 8009af6:	f7f7 fba5 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8009afa:	495c      	ldr	r1, [pc, #368]	; (8009c6c <OTM8009A_Init+0x3c4>)
 8009afc:	2000      	movs	r0, #0
 8009afe:	f7f7 fba1 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8009b02:	496d      	ldr	r1, [pc, #436]	; (8009cb8 <OTM8009A_Init+0x410>)
 8009b04:	200f      	movs	r0, #15
 8009b06:	f7f7 fb9d 	bl	8001244 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8009b0a:	495a      	ldr	r1, [pc, #360]	; (8009c74 <OTM8009A_Init+0x3cc>)
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	f7f7 fb99 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8009b12:	496a      	ldr	r1, [pc, #424]	; (8009cbc <OTM8009A_Init+0x414>)
 8009b14:	200f      	movs	r0, #15
 8009b16:	f7f7 fb95 	bl	8001244 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8009b1a:	493d      	ldr	r1, [pc, #244]	; (8009c10 <OTM8009A_Init+0x368>)
 8009b1c:	2000      	movs	r0, #0
 8009b1e:	f7f7 fb91 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8009b22:	4967      	ldr	r1, [pc, #412]	; (8009cc0 <OTM8009A_Init+0x418>)
 8009b24:	2000      	movs	r0, #0
 8009b26:	f7f7 fb8d 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8009b2a:	4966      	ldr	r1, [pc, #408]	; (8009cc4 <OTM8009A_Init+0x41c>)
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	f7f7 fb89 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8009b32:	4965      	ldr	r1, [pc, #404]	; (8009cc8 <OTM8009A_Init+0x420>)
 8009b34:	2000      	movs	r0, #0
 8009b36:	f7f7 fb85 	bl	8001244 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8009b3a:	4964      	ldr	r1, [pc, #400]	; (8009ccc <OTM8009A_Init+0x424>)
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	f7f7 fb81 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8009b42:	4963      	ldr	r1, [pc, #396]	; (8009cd0 <OTM8009A_Init+0x428>)
 8009b44:	2000      	movs	r0, #0
 8009b46:	f7f7 fb7d 	bl	8001244 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8009b4a:	4923      	ldr	r1, [pc, #140]	; (8009bd8 <OTM8009A_Init+0x330>)
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	f7f7 fb79 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8009b52:	4960      	ldr	r1, [pc, #384]	; (8009cd4 <OTM8009A_Init+0x42c>)
 8009b54:	2003      	movs	r0, #3
 8009b56:	f7f7 fb75 	bl	8001244 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8009b5a:	491f      	ldr	r1, [pc, #124]	; (8009bd8 <OTM8009A_Init+0x330>)
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	f7f7 fb71 	bl	8001244 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8009b62:	491d      	ldr	r1, [pc, #116]	; (8009bd8 <OTM8009A_Init+0x330>)
 8009b64:	2000      	movs	r0, #0
 8009b66:	f7f7 fb6d 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8009b6a:	495b      	ldr	r1, [pc, #364]	; (8009cd8 <OTM8009A_Init+0x430>)
 8009b6c:	2010      	movs	r0, #16
 8009b6e:	f7f7 fb69 	bl	8001244 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8009b72:	4919      	ldr	r1, [pc, #100]	; (8009bd8 <OTM8009A_Init+0x330>)
 8009b74:	2000      	movs	r0, #0
 8009b76:	f7f7 fb65 	bl	8001244 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8009b7a:	4958      	ldr	r1, [pc, #352]	; (8009cdc <OTM8009A_Init+0x434>)
 8009b7c:	2010      	movs	r0, #16
 8009b7e:	f7f7 fb61 	bl	8001244 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8009b82:	2000      	movs	r0, #0
 8009b84:	4956      	ldr	r1, [pc, #344]	; (8009ce0 <OTM8009A_Init+0x438>)
 8009b86:	f7f7 fb5d 	bl	8001244 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8009b8a:	2078      	movs	r0, #120	; 0x78
 8009b8c:	f7f7 fb58 	bl	8001240 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8009b90:	2c00      	cmp	r4, #0
 8009b92:	f000 80c7 	beq.w	8009d24 <OTM8009A_Init+0x47c>
 8009b96:	2c02      	cmp	r4, #2
 8009b98:	d103      	bne.n	8009ba2 <OTM8009A_Init+0x2fa>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8009b9a:	4952      	ldr	r1, [pc, #328]	; (8009ce4 <OTM8009A_Init+0x43c>)
 8009b9c:	2000      	movs	r0, #0
    break;
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8009b9e:	f7f7 fb51 	bl	8001244 <DSI_IO_WriteCmd>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8009ba2:	2d01      	cmp	r5, #1
 8009ba4:	d10b      	bne.n	8009bbe <OTM8009A_Init+0x316>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8009ba6:	4950      	ldr	r1, [pc, #320]	; (8009ce8 <OTM8009A_Init+0x440>)
 8009ba8:	2000      	movs	r0, #0
 8009baa:	f7f7 fb4b 	bl	8001244 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8009bae:	494f      	ldr	r1, [pc, #316]	; (8009cec <OTM8009A_Init+0x444>)
 8009bb0:	2004      	movs	r0, #4
 8009bb2:	f7f7 fb47 	bl	8001244 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8009bb6:	494e      	ldr	r1, [pc, #312]	; (8009cf0 <OTM8009A_Init+0x448>)
 8009bb8:	2004      	movs	r0, #4
 8009bba:	f7f7 fb43 	bl	8001244 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8009bbe:	494d      	ldr	r1, [pc, #308]	; (8009cf4 <OTM8009A_Init+0x44c>)
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	f7f7 fb3f 	bl	8001244 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8009bc6:	494c      	ldr	r1, [pc, #304]	; (8009cf8 <OTM8009A_Init+0x450>)
 8009bc8:	2000      	movs	r0, #0
 8009bca:	f7f7 fb3b 	bl	8001244 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8009bce:	494b      	ldr	r1, [pc, #300]	; (8009cfc <OTM8009A_Init+0x454>)
 8009bd0:	2000      	movs	r0, #0
 8009bd2:	f7f7 fb37 	bl	8001244 <DSI_IO_WriteCmd>
 8009bd6:	e093      	b.n	8009d00 <OTM8009A_Init+0x458>
 8009bd8:	0802fb8c 	.word	0x0802fb8c
 8009bdc:	0802fbf2 	.word	0x0802fbf2
 8009be0:	0802fba2 	.word	0x0802fba2
 8009be4:	0802fc78 	.word	0x0802fc78
 8009be8:	0802fbb8 	.word	0x0802fbb8
 8009bec:	0802fbce 	.word	0x0802fbce
 8009bf0:	0802fbe4 	.word	0x0802fbe4
 8009bf4:	0802fbea 	.word	0x0802fbea
 8009bf8:	0802fbec 	.word	0x0802fbec
 8009bfc:	0802fbee 	.word	0x0802fbee
 8009c00:	0802fbf0 	.word	0x0802fbf0
 8009c04:	0802fb8e 	.word	0x0802fb8e
 8009c08:	0802fb90 	.word	0x0802fb90
 8009c0c:	0802fb92 	.word	0x0802fb92
 8009c10:	0802fb94 	.word	0x0802fb94
 8009c14:	0802fb96 	.word	0x0802fb96
 8009c18:	0802fb98 	.word	0x0802fb98
 8009c1c:	0802fb9a 	.word	0x0802fb9a
 8009c20:	0802fb9c 	.word	0x0802fb9c
 8009c24:	0802fb9e 	.word	0x0802fb9e
 8009c28:	0802fba0 	.word	0x0802fba0
 8009c2c:	0802fcf6 	.word	0x0802fcf6
 8009c30:	0802fba4 	.word	0x0802fba4
 8009c34:	0802fba6 	.word	0x0802fba6
 8009c38:	0802fba8 	.word	0x0802fba8
 8009c3c:	0802fbaa 	.word	0x0802fbaa
 8009c40:	0802fbac 	.word	0x0802fbac
 8009c44:	0802fbae 	.word	0x0802fbae
 8009c48:	0802fbb0 	.word	0x0802fbb0
 8009c4c:	0802fbb2 	.word	0x0802fbb2
 8009c50:	0802fbb4 	.word	0x0802fbb4
 8009c54:	0802fcf9 	.word	0x0802fcf9
 8009c58:	0802fcfc 	.word	0x0802fcfc
 8009c5c:	0802fbb6 	.word	0x0802fbb6
 8009c60:	0802fd03 	.word	0x0802fd03
 8009c64:	0802fbba 	.word	0x0802fbba
 8009c68:	0802fd12 	.word	0x0802fd12
 8009c6c:	0802fbbc 	.word	0x0802fbbc
 8009c70:	0802fbf6 	.word	0x0802fbf6
 8009c74:	0802fbbe 	.word	0x0802fbbe
 8009c78:	0802fbdc 	.word	0x0802fbdc
 8009c7c:	0802fc01 	.word	0x0802fc01
 8009c80:	0802fbc0 	.word	0x0802fbc0
 8009c84:	0802fc0c 	.word	0x0802fc0c
 8009c88:	0802fc1c 	.word	0x0802fc1c
 8009c8c:	0802fc2c 	.word	0x0802fc2c
 8009c90:	0802fc37 	.word	0x0802fc37
 8009c94:	0802fc47 	.word	0x0802fc47
 8009c98:	0802fbc2 	.word	0x0802fbc2
 8009c9c:	0802fc57 	.word	0x0802fc57
 8009ca0:	0802fbc4 	.word	0x0802fbc4
 8009ca4:	0802fc62 	.word	0x0802fc62
 8009ca8:	0802fc6d 	.word	0x0802fc6d
 8009cac:	0802fc7b 	.word	0x0802fc7b
 8009cb0:	0802fc8b 	.word	0x0802fc8b
 8009cb4:	0802fc9b 	.word	0x0802fc9b
 8009cb8:	0802fca6 	.word	0x0802fca6
 8009cbc:	0802fcb6 	.word	0x0802fcb6
 8009cc0:	0802fbde 	.word	0x0802fbde
 8009cc4:	0802fbe0 	.word	0x0802fbe0
 8009cc8:	0802fbe2 	.word	0x0802fbe2
 8009ccc:	0802fbe6 	.word	0x0802fbe6
 8009cd0:	0802fbe8 	.word	0x0802fbe8
 8009cd4:	0802fcc6 	.word	0x0802fcc6
 8009cd8:	0802fcd4 	.word	0x0802fcd4
 8009cdc:	0802fce5 	.word	0x0802fce5
 8009ce0:	0802fbc6 	.word	0x0802fbc6
 8009ce4:	0802fbc8 	.word	0x0802fbc8
 8009ce8:	0802fbcc 	.word	0x0802fbcc
 8009cec:	0802fcca 	.word	0x0802fcca
 8009cf0:	0802fccf 	.word	0x0802fccf
 8009cf4:	0802fbd0 	.word	0x0802fbd0
 8009cf8:	0802fbd2 	.word	0x0802fbd2
 8009cfc:	0802fbd4 	.word	0x0802fbd4

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8009d00:	490a      	ldr	r1, [pc, #40]	; (8009d2c <OTM8009A_Init+0x484>)
 8009d02:	2000      	movs	r0, #0
 8009d04:	f7f7 fa9e 	bl	8001244 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8009d08:	4909      	ldr	r1, [pc, #36]	; (8009d30 <OTM8009A_Init+0x488>)
 8009d0a:	2000      	movs	r0, #0
 8009d0c:	f7f7 fa9a 	bl	8001244 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8009d10:	4908      	ldr	r1, [pc, #32]	; (8009d34 <OTM8009A_Init+0x48c>)
 8009d12:	2000      	movs	r0, #0
 8009d14:	f7f7 fa96 	bl	8001244 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8009d18:	4907      	ldr	r1, [pc, #28]	; (8009d38 <OTM8009A_Init+0x490>)
 8009d1a:	2000      	movs	r0, #0
 8009d1c:	f7f7 fa92 	bl	8001244 <DSI_IO_WriteCmd>

  return 0;
}
 8009d20:	2000      	movs	r0, #0
 8009d22:	bd38      	pop	{r3, r4, r5, pc}
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8009d24:	4905      	ldr	r1, [pc, #20]	; (8009d3c <OTM8009A_Init+0x494>)
 8009d26:	4620      	mov	r0, r4
 8009d28:	e739      	b.n	8009b9e <OTM8009A_Init+0x2f6>
 8009d2a:	bf00      	nop
 8009d2c:	0802fbd6 	.word	0x0802fbd6
 8009d30:	0802fbd8 	.word	0x0802fbd8
 8009d34:	0802fb8c 	.word	0x0802fb8c
 8009d38:	0802fbda 	.word	0x0802fbda
 8009d3c:	0802fbca 	.word	0x0802fbca

08009d40 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009d40:	490f      	ldr	r1, [pc, #60]	; (8009d80 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009d42:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009d44:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8009d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8009d50:	4b0c      	ldr	r3, [pc, #48]	; (8009d84 <SystemInit+0x44>)
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	f042 0201 	orr.w	r2, r2, #1
 8009d58:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8009d5a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8009d62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009d66:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009d68:	4a07      	ldr	r2, [pc, #28]	; (8009d88 <SystemInit+0x48>)
 8009d6a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009d72:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009d74:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009d76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d7a:	608b      	str	r3, [r1, #8]
#endif
}
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	e000ed00 	.word	0xe000ed00
 8009d84:	40023800 	.word	0x40023800
 8009d88:	24003010 	.word	0x24003010

08009d8c <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009d8c:	4a07      	ldr	r2, [pc, #28]	; (8009dac <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009d8e:	2003      	movs	r0, #3
{
 8009d90:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009d92:	6813      	ldr	r3, [r2, #0]
 8009d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d98:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009d9a:	f000 f82d 	bl	8009df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009d9e:	2000      	movs	r0, #0
 8009da0:	f7fa fc4a 	bl	8004638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009da4:	f7fa f948 	bl	8004038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8009da8:	2000      	movs	r0, #0
 8009daa:	bd08      	pop	{r3, pc}
 8009dac:	40023c00 	.word	0x40023c00

08009db0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8009db0:	4a03      	ldr	r2, [pc, #12]	; (8009dc0 <HAL_IncTick+0x10>)
 8009db2:	4b04      	ldr	r3, [pc, #16]	; (8009dc4 <HAL_IncTick+0x14>)
 8009db4:	6811      	ldr	r1, [r2, #0]
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	440b      	add	r3, r1
 8009dba:	6013      	str	r3, [r2, #0]
}
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	200125f4 	.word	0x200125f4
 8009dc4:	20000064 	.word	0x20000064

08009dc8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8009dc8:	4b01      	ldr	r3, [pc, #4]	; (8009dd0 <HAL_GetTick+0x8>)
 8009dca:	6818      	ldr	r0, [r3, #0]
}
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop
 8009dd0:	200125f4 	.word	0x200125f4

08009dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009dd4:	b538      	push	{r3, r4, r5, lr}
 8009dd6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009dd8:	f7ff fff6 	bl	8009dc8 <HAL_GetTick>
 8009ddc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009dde:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8009de0:	bf1e      	ittt	ne
 8009de2:	4b04      	ldrne	r3, [pc, #16]	; (8009df4 <HAL_Delay+0x20>)
 8009de4:	781b      	ldrbne	r3, [r3, #0]
 8009de6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009de8:	f7ff ffee 	bl	8009dc8 <HAL_GetTick>
 8009dec:	1b43      	subs	r3, r0, r5
 8009dee:	42a3      	cmp	r3, r4
 8009df0:	d3fa      	bcc.n	8009de8 <HAL_Delay+0x14>
  {
  }
}
 8009df2:	bd38      	pop	{r3, r4, r5, pc}
 8009df4:	20000064 	.word	0x20000064

08009df8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009df8:	4907      	ldr	r1, [pc, #28]	; (8009e18 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009dfa:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009dfc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009dfe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009e02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009e06:	0412      	lsls	r2, r2, #16
 8009e08:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8009e14:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8009e16:	4770      	bx	lr
 8009e18:	e000ed00 	.word	0xe000ed00

08009e1c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009e1c:	4b16      	ldr	r3, [pc, #88]	; (8009e78 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009e1e:	b530      	push	{r4, r5, lr}
 8009e20:	68dc      	ldr	r4, [r3, #12]
 8009e22:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009e26:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009e2a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009e2c:	2b04      	cmp	r3, #4
 8009e2e:	bf28      	it	cs
 8009e30:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009e32:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e34:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009e38:	bf8c      	ite	hi
 8009e3a:	3c03      	subhi	r4, #3
 8009e3c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e3e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8009e42:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009e44:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e48:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009e4c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e50:	fa03 f304 	lsl.w	r3, r3, r4
 8009e54:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e58:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8009e5c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8009e5e:	db06      	blt.n	8009e6e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e60:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8009e64:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8009e68:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8009e6c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e6e:	f000 000f 	and.w	r0, r0, #15
 8009e72:	4a02      	ldr	r2, [pc, #8]	; (8009e7c <HAL_NVIC_SetPriority+0x60>)
 8009e74:	5413      	strb	r3, [r2, r0]
 8009e76:	e7f9      	b.n	8009e6c <HAL_NVIC_SetPriority+0x50>
 8009e78:	e000ed00 	.word	0xe000ed00
 8009e7c:	e000ed14 	.word	0xe000ed14

08009e80 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8009e80:	2800      	cmp	r0, #0
 8009e82:	db07      	blt.n	8009e94 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009e84:	0941      	lsrs	r1, r0, #5
 8009e86:	2301      	movs	r3, #1
 8009e88:	f000 001f 	and.w	r0, r0, #31
 8009e8c:	4a02      	ldr	r2, [pc, #8]	; (8009e98 <HAL_NVIC_EnableIRQ+0x18>)
 8009e8e:	4083      	lsls	r3, r0
 8009e90:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop
 8009e98:	e000e100 	.word	0xe000e100

08009e9c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	db0c      	blt.n	8009eba <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009ea0:	0943      	lsrs	r3, r0, #5
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f000 001f 	and.w	r0, r0, #31
 8009ea8:	4904      	ldr	r1, [pc, #16]	; (8009ebc <HAL_NVIC_DisableIRQ+0x20>)
 8009eaa:	3320      	adds	r3, #32
 8009eac:	4082      	lsls	r2, r0
 8009eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009eb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009eb6:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8009eba:	4770      	bx	lr
 8009ebc:	e000e100 	.word	0xe000e100

08009ec0 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8009ec0:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8009ec4:	4b04      	ldr	r3, [pc, #16]	; (8009ed8 <HAL_MPU_Disable+0x18>)
 8009ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ec8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009ecc:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	e000ed00 	.word	0xe000ed00

08009edc <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8009edc:	4b06      	ldr	r3, [pc, #24]	; (8009ef8 <HAL_MPU_Enable+0x1c>)
 8009ede:	f040 0001 	orr.w	r0, r0, #1
 8009ee2:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8009ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ee8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009eec:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8009eee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009ef2:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8009ef6:	4770      	bx	lr
 8009ef8:	e000ed00 	.word	0xe000ed00

08009efc <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8009efc:	7843      	ldrb	r3, [r0, #1]
 8009efe:	4a14      	ldr	r2, [pc, #80]	; (8009f50 <HAL_MPU_ConfigRegion+0x54>)
{
 8009f00:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8009f02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 8009f06:	7801      	ldrb	r1, [r0, #0]
 8009f08:	b1e9      	cbz	r1, 8009f46 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8009f0a:	6843      	ldr	r3, [r0, #4]
 8009f0c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8009f10:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009f12:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8009f14:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009f16:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009f1a:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8009f1c:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009f1e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8009f22:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009f24:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8009f28:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009f2a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8009f2e:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009f30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8009f34:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009f36:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009f3a:	7a01      	ldrb	r1, [r0, #8]
 8009f3c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009f40:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8009f44:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8009f46:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8009f4a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8009f4e:	e7f9      	b.n	8009f44 <HAL_MPU_ConfigRegion+0x48>
 8009f50:	e000ed00 	.word	0xe000ed00

08009f54 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009f54:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009f56:	4604      	mov	r4, r0
 8009f58:	b908      	cbnz	r0, 8009f5e <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8009f5a:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8009f5c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009f5e:	7f43      	ldrb	r3, [r0, #29]
 8009f60:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009f64:	b913      	cbnz	r3, 8009f6c <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8009f66:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8009f68:	f7fa f884 	bl	8004074 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8009f6c:	2302      	movs	r3, #2
 8009f6e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009f70:	7923      	ldrb	r3, [r4, #4]
 8009f72:	b9e3      	cbnz	r3, 8009fae <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009f74:	6823      	ldr	r3, [r4, #0]
 8009f76:	4a13      	ldr	r2, [pc, #76]	; (8009fc4 <HAL_CRC_Init+0x70>)
 8009f78:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8009f7a:	689a      	ldr	r2, [r3, #8]
 8009f7c:	f022 0218 	bic.w	r2, r2, #24
 8009f80:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009f82:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009f84:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009f86:	b9d2      	cbnz	r2, 8009fbe <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009f88:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009f8c:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8009f8e:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009f90:	689a      	ldr	r2, [r3, #8]
 8009f92:	6961      	ldr	r1, [r4, #20]
 8009f94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009f98:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009f9a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009f9c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009f9e:	689a      	ldr	r2, [r3, #8]
 8009fa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009fa4:	430a      	orrs	r2, r1
 8009fa6:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8009fac:	e7d6      	b.n	8009f5c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009fae:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f000 f808 	bl	8009fc8 <HAL_CRCEx_Polynomial_Set>
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	d0e2      	beq.n	8009f82 <HAL_CRC_Init+0x2e>
 8009fbc:	e7cd      	b.n	8009f5a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009fbe:	6922      	ldr	r2, [r4, #16]
 8009fc0:	e7e4      	b.n	8009f8c <HAL_CRC_Init+0x38>
 8009fc2:	bf00      	nop
 8009fc4:	04c11db7 	.word	0x04c11db7

08009fc8 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009fc8:	231f      	movs	r3, #31
{
 8009fca:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	d31c      	bcc.n	800a00a <HAL_CRCEx_Polynomial_Set+0x42>
 8009fd0:	fa21 f403 	lsr.w	r4, r1, r3
 8009fd4:	07e4      	lsls	r4, r4, #31
 8009fd6:	d5f9      	bpl.n	8009fcc <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8009fd8:	2a10      	cmp	r2, #16
 8009fda:	d012      	beq.n	800a002 <HAL_CRCEx_Polynomial_Set+0x3a>
 8009fdc:	d804      	bhi.n	8009fe8 <HAL_CRCEx_Polynomial_Set+0x20>
 8009fde:	b13a      	cbz	r2, 8009ff0 <HAL_CRCEx_Polynomial_Set+0x28>
 8009fe0:	2a08      	cmp	r2, #8
 8009fe2:	d010      	beq.n	800a006 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8009fe4:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8009fe6:	e00b      	b.n	800a000 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8009fe8:	2a18      	cmp	r2, #24
 8009fea:	d1fb      	bne.n	8009fe4 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8009fec:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8009fee:	d8f9      	bhi.n	8009fe4 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009ff0:	6800      	ldr	r0, [r0, #0]
 8009ff2:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009ff4:	6883      	ldr	r3, [r0, #8]
 8009ff6:	f023 0318 	bic.w	r3, r3, #24
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	6083      	str	r3, [r0, #8]
 8009ffe:	2000      	movs	r0, #0
}
 800a000:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 800a002:	2b07      	cmp	r3, #7
 800a004:	e7f3      	b.n	8009fee <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 800a006:	2b0f      	cmp	r3, #15
 800a008:	e7f1      	b.n	8009fee <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 800a00a:	2a00      	cmp	r2, #0
 800a00c:	d1ea      	bne.n	8009fe4 <HAL_CRCEx_Polynomial_Set+0x1c>
 800a00e:	e7ef      	b.n	8009ff0 <HAL_CRCEx_Polynomial_Set+0x28>

0800a010 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a010:	6803      	ldr	r3, [r0, #0]
 800a012:	2118      	movs	r1, #24
 800a014:	b2da      	uxtb	r2, r3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a016:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a01a:	3a10      	subs	r2, #16
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a01c:	f023 0303 	bic.w	r3, r3, #3
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a020:	fbb2 f1f1 	udiv	r1, r2, r1
{
 800a024:	b510      	push	{r4, lr}
  if (stream_number > 3U)
 800a026:	2a5f      	cmp	r2, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a028:	4c03      	ldr	r4, [pc, #12]	; (800a038 <DMA_CalcBaseAndBitshift+0x28>)
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a02a:	bf88      	it	hi
 800a02c:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a02e:	5c61      	ldrb	r1, [r4, r1]
 800a030:	6583      	str	r3, [r0, #88]	; 0x58
 800a032:	65c1      	str	r1, [r0, #92]	; 0x5c
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800a034:	4618      	mov	r0, r3
 800a036:	bd10      	pop	{r4, pc}
 800a038:	0802fd39 	.word	0x0802fd39

0800a03c <HAL_DMA_Init>:
{
 800a03c:	b570      	push	{r4, r5, r6, lr}
 800a03e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a040:	f7ff fec2 	bl	8009dc8 <HAL_GetTick>
 800a044:	4605      	mov	r5, r0
  if(hdma == NULL)
 800a046:	2c00      	cmp	r4, #0
 800a048:	d071      	beq.n	800a12e <HAL_DMA_Init+0xf2>
  hdma->State = HAL_DMA_STATE_BUSY;
 800a04a:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 800a04c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800a04e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800a052:	2300      	movs	r3, #0
 800a054:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800a058:	6813      	ldr	r3, [r2, #0]
 800a05a:	f023 0301 	bic.w	r3, r3, #1
 800a05e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a060:	6822      	ldr	r2, [r4, #0]
 800a062:	6813      	ldr	r3, [r2, #0]
 800a064:	07d8      	lsls	r0, r3, #31
 800a066:	d42e      	bmi.n	800a0c6 <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 800a068:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a06a:	4832      	ldr	r0, [pc, #200]	; (800a134 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a06c:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a06e:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a070:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a074:	432b      	orrs	r3, r5
 800a076:	68e5      	ldr	r5, [r4, #12]
 800a078:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a07a:	6925      	ldr	r5, [r4, #16]
 800a07c:	432b      	orrs	r3, r5
 800a07e:	6965      	ldr	r5, [r4, #20]
 800a080:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a082:	69e5      	ldr	r5, [r4, #28]
 800a084:	430b      	orrs	r3, r1
 800a086:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800a088:	6a25      	ldr	r5, [r4, #32]
 800a08a:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a08c:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a08e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a090:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a092:	bf02      	ittt	eq
 800a094:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 800a098:	4335      	orreq	r5, r6
 800a09a:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a09c:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
 800a09e:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 800a0a0:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a0a2:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800a0a6:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a0aa:	d132      	bne.n	800a112 <HAL_DMA_Init+0xd6>
    tmp |= hdma->Init.FIFOThreshold;
 800a0ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a0ae:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800a0b0:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a0b2:	b375      	cbz	r5, 800a112 <HAL_DMA_Init+0xd6>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a0b4:	b991      	cbnz	r1, 800a0dc <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 800a0b6:	2801      	cmp	r0, #1
 800a0b8:	d020      	beq.n	800a0fc <HAL_DMA_Init+0xc0>
 800a0ba:	f030 0102 	bics.w	r1, r0, #2
 800a0be:	d128      	bne.n	800a112 <HAL_DMA_Init+0xd6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a0c0:	01e9      	lsls	r1, r5, #7
 800a0c2:	d526      	bpl.n	800a112 <HAL_DMA_Init+0xd6>
 800a0c4:	e01d      	b.n	800a102 <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a0c6:	f7ff fe7f 	bl	8009dc8 <HAL_GetTick>
 800a0ca:	1b40      	subs	r0, r0, r5
 800a0cc:	2805      	cmp	r0, #5
 800a0ce:	d9c7      	bls.n	800a060 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a0d0:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a0d2:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a0d4:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800a0d6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800a0da:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a0dc:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800a0e0:	d113      	bne.n	800a10a <HAL_DMA_Init+0xce>
    switch (tmp)
 800a0e2:	2803      	cmp	r0, #3
 800a0e4:	d815      	bhi.n	800a112 <HAL_DMA_Init+0xd6>
 800a0e6:	a101      	add	r1, pc, #4	; (adr r1, 800a0ec <HAL_DMA_Init+0xb0>)
 800a0e8:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 800a0ec:	0800a103 	.word	0x0800a103
 800a0f0:	0800a0c1 	.word	0x0800a0c1
 800a0f4:	0800a103 	.word	0x0800a103
 800a0f8:	0800a0fd 	.word	0x0800a0fd
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a0fc:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800a100:	d107      	bne.n	800a112 <HAL_DMA_Init+0xd6>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a102:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 800a104:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a106:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800a108:	e7e5      	b.n	800a0d6 <HAL_DMA_Init+0x9a>
    switch (tmp)
 800a10a:	2802      	cmp	r0, #2
 800a10c:	d9f9      	bls.n	800a102 <HAL_DMA_Init+0xc6>
 800a10e:	2803      	cmp	r0, #3
 800a110:	d0d6      	beq.n	800a0c0 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 800a112:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a114:	4620      	mov	r0, r4
 800a116:	f7ff ff7b 	bl	800a010 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a11a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a11c:	233f      	movs	r3, #63	; 0x3f
 800a11e:	4093      	lsls	r3, r2
 800a120:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a122:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800a124:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a126:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800a128:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800a12c:	e7d5      	b.n	800a0da <HAL_DMA_Init+0x9e>
    return HAL_ERROR;
 800a12e:	2001      	movs	r0, #1
 800a130:	e7d3      	b.n	800a0da <HAL_DMA_Init+0x9e>
 800a132:	bf00      	nop
 800a134:	e010803f 	.word	0xe010803f

0800a138 <HAL_DMA_Start_IT>:
{
 800a138:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800a13a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a13e:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800a140:	2c01      	cmp	r4, #1
 800a142:	d034      	beq.n	800a1ae <HAL_DMA_Start_IT+0x76>
 800a144:	2401      	movs	r4, #1
 800a146:	2500      	movs	r5, #0
 800a148:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800a14c:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800a150:	2c01      	cmp	r4, #1
 800a152:	f04f 0402 	mov.w	r4, #2
 800a156:	d128      	bne.n	800a1aa <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 800a158:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a15c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a15e:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a160:	6825      	ldr	r5, [r4, #0]
 800a162:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 800a166:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800a168:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a16a:	6883      	ldr	r3, [r0, #8]
 800a16c:	2b40      	cmp	r3, #64	; 0x40
 800a16e:	d119      	bne.n	800a1a4 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 800a170:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800a172:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a174:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800a176:	233f      	movs	r3, #63	; 0x3f
 800a178:	4093      	lsls	r3, r2
 800a17a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	f043 0316 	orr.w	r3, r3, #22
 800a182:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a184:	6963      	ldr	r3, [r4, #20]
 800a186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a18a:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800a18c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a18e:	b11b      	cbz	r3, 800a198 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 800a190:	6823      	ldr	r3, [r4, #0]
 800a192:	f043 0308 	orr.w	r3, r3, #8
 800a196:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800a198:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a19a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800a19c:	f043 0301 	orr.w	r3, r3, #1
 800a1a0:	6023      	str	r3, [r4, #0]
}
 800a1a2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 800a1a4:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800a1a6:	60e2      	str	r2, [r4, #12]
 800a1a8:	e7e4      	b.n	800a174 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 800a1aa:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800a1ae:	2002      	movs	r0, #2
 800a1b0:	e7f7      	b.n	800a1a2 <HAL_DMA_Start_IT+0x6a>

0800a1b2 <HAL_DMA_Abort>:
{
 800a1b2:	b570      	push	{r4, r5, r6, lr}
 800a1b4:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a1b6:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800a1b8:	f7ff fe06 	bl	8009dc8 <HAL_GetTick>
 800a1bc:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a1be:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d006      	beq.n	800a1d4 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a1c6:	2380      	movs	r3, #128	; 0x80
    return HAL_ERROR;
 800a1c8:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a1ca:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800a1d2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a1d4:	6823      	ldr	r3, [r4, #0]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	f022 0216 	bic.w	r2, r2, #22
 800a1dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a1de:	695a      	ldr	r2, [r3, #20]
 800a1e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1e4:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a1e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a1e8:	b90a      	cbnz	r2, 800a1ee <HAL_DMA_Abort+0x3c>
 800a1ea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800a1ec:	b11a      	cbz	r2, 800a1f6 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	f022 0208 	bic.w	r2, r2, #8
 800a1f4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	f022 0201 	bic.w	r2, r2, #1
 800a1fc:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a1fe:	6823      	ldr	r3, [r4, #0]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f013 0301 	ands.w	r3, r3, #1
 800a206:	d108      	bne.n	800a21a <HAL_DMA_Abort+0x68>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a208:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a20a:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 800a20c:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a20e:	408a      	lsls	r2, r1
 800a210:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800a212:	2201      	movs	r2, #1
 800a214:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 800a218:	e7d8      	b.n	800a1cc <HAL_DMA_Abort+0x1a>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a21a:	f7ff fdd5 	bl	8009dc8 <HAL_GetTick>
 800a21e:	1b40      	subs	r0, r0, r5
 800a220:	2805      	cmp	r0, #5
 800a222:	d9ec      	bls.n	800a1fe <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a224:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a226:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a228:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a22a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 800a22e:	e7cd      	b.n	800a1cc <HAL_DMA_Abort+0x1a>

0800a230 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a230:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800a234:	2b02      	cmp	r3, #2
 800a236:	d003      	beq.n	800a240 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a238:	2380      	movs	r3, #128	; 0x80
 800a23a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800a23c:	2001      	movs	r0, #1
 800a23e:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800a240:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800a242:	2305      	movs	r3, #5
 800a244:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 800a248:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800a24a:	6813      	ldr	r3, [r2, #0]
 800a24c:	f023 0301 	bic.w	r3, r3, #1
 800a250:	6013      	str	r3, [r2, #0]
}
 800a252:	4770      	bx	lr

0800a254 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 800a254:	2300      	movs	r3, #0
{
 800a256:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 800a258:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a25a:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 800a25c:	4b5b      	ldr	r3, [pc, #364]	; (800a3cc <HAL_DMA_IRQHandler+0x178>)
{
 800a25e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a260:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 800a262:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a264:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800a266:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a268:	409a      	lsls	r2, r3
 800a26a:	4232      	tst	r2, r6
 800a26c:	d00c      	beq.n	800a288 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a26e:	6801      	ldr	r1, [r0, #0]
 800a270:	6808      	ldr	r0, [r1, #0]
 800a272:	0740      	lsls	r0, r0, #29
 800a274:	d508      	bpl.n	800a288 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a276:	6808      	ldr	r0, [r1, #0]
 800a278:	f020 0004 	bic.w	r0, r0, #4
 800a27c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a27e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a280:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a282:	f042 0201 	orr.w	r2, r2, #1
 800a286:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a288:	2201      	movs	r2, #1
 800a28a:	409a      	lsls	r2, r3
 800a28c:	4232      	tst	r2, r6
 800a28e:	d008      	beq.n	800a2a2 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a290:	6821      	ldr	r1, [r4, #0]
 800a292:	6949      	ldr	r1, [r1, #20]
 800a294:	0609      	lsls	r1, r1, #24
 800a296:	d504      	bpl.n	800a2a2 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a298:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a29a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a29c:	f042 0202 	orr.w	r2, r2, #2
 800a2a0:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a2a2:	2204      	movs	r2, #4
 800a2a4:	409a      	lsls	r2, r3
 800a2a6:	4232      	tst	r2, r6
 800a2a8:	d008      	beq.n	800a2bc <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a2aa:	6821      	ldr	r1, [r4, #0]
 800a2ac:	6809      	ldr	r1, [r1, #0]
 800a2ae:	0788      	lsls	r0, r1, #30
 800a2b0:	d504      	bpl.n	800a2bc <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a2b2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a2b4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a2b6:	f042 0204 	orr.w	r2, r2, #4
 800a2ba:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a2bc:	2210      	movs	r2, #16
 800a2be:	409a      	lsls	r2, r3
 800a2c0:	4232      	tst	r2, r6
 800a2c2:	d010      	beq.n	800a2e6 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a2c4:	6823      	ldr	r3, [r4, #0]
 800a2c6:	6819      	ldr	r1, [r3, #0]
 800a2c8:	0709      	lsls	r1, r1, #28
 800a2ca:	d50c      	bpl.n	800a2e6 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a2cc:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	0350      	lsls	r0, r2, #13
 800a2d2:	d537      	bpl.n	800a344 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	0319      	lsls	r1, r3, #12
 800a2d8:	d401      	bmi.n	800a2de <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800a2da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2dc:	e000      	b.n	800a2e0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a2de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 800a2e0:	b10b      	cbz	r3, 800a2e6 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a2e6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a2e8:	2220      	movs	r2, #32
 800a2ea:	408a      	lsls	r2, r1
 800a2ec:	4232      	tst	r2, r6
 800a2ee:	d03a      	beq.n	800a366 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a2f0:	6823      	ldr	r3, [r4, #0]
 800a2f2:	6818      	ldr	r0, [r3, #0]
 800a2f4:	06c6      	lsls	r6, r0, #27
 800a2f6:	d536      	bpl.n	800a366 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a2f8:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a2fa:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800a2fe:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a300:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a302:	d127      	bne.n	800a354 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a304:	f022 0216 	bic.w	r2, r2, #22
 800a308:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a30a:	695a      	ldr	r2, [r3, #20]
 800a30c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a310:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a312:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a314:	b90a      	cbnz	r2, 800a31a <HAL_DMA_IRQHandler+0xc6>
 800a316:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800a318:	b11a      	cbz	r2, 800a322 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	f022 0208 	bic.w	r2, r2, #8
 800a320:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a322:	233f      	movs	r3, #63	; 0x3f
 800a324:	408b      	lsls	r3, r1
 800a326:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800a328:	2301      	movs	r3, #1
 800a32a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800a32e:	2300      	movs	r3, #0
 800a330:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 800a334:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800a336:	2b00      	cmp	r3, #0
 800a338:	d045      	beq.n	800a3c6 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 800a33a:	4620      	mov	r0, r4
}
 800a33c:	b003      	add	sp, #12
 800a33e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800a342:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	05d2      	lsls	r2, r2, #23
 800a348:	d4c7      	bmi.n	800a2da <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	f022 0208 	bic.w	r2, r2, #8
 800a350:	601a      	str	r2, [r3, #0]
 800a352:	e7c2      	b.n	800a2da <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a354:	0350      	lsls	r0, r2, #13
 800a356:	d527      	bpl.n	800a3a8 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	0319      	lsls	r1, r3, #12
 800a35c:	d431      	bmi.n	800a3c2 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 800a35e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 800a360:	b10b      	cbz	r3, 800a366 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 800a362:	4620      	mov	r0, r4
 800a364:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a366:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a368:	b36b      	cbz	r3, 800a3c6 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a36a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a36c:	07da      	lsls	r2, r3, #31
 800a36e:	d519      	bpl.n	800a3a4 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 800a370:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
 800a374:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 800a376:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 800a37a:	2305      	movs	r3, #5
 800a37c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800a380:	6813      	ldr	r3, [r2, #0]
 800a382:	f023 0301 	bic.w	r3, r3, #1
 800a386:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800a388:	9b01      	ldr	r3, [sp, #4]
 800a38a:	3301      	adds	r3, #1
 800a38c:	42bb      	cmp	r3, r7
 800a38e:	9301      	str	r3, [sp, #4]
 800a390:	d802      	bhi.n	800a398 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a392:	6813      	ldr	r3, [r2, #0]
 800a394:	07db      	lsls	r3, r3, #31
 800a396:	d4f7      	bmi.n	800a388 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 800a398:	2301      	movs	r3, #1
 800a39a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800a39e:	2300      	movs	r3, #0
 800a3a0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 800a3a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a3a6:	e7c6      	b.n	800a336 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800a3ae:	d108      	bne.n	800a3c2 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a3b0:	6819      	ldr	r1, [r3, #0]
 800a3b2:	f021 0110 	bic.w	r1, r1, #16
 800a3b6:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800a3b8:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800a3ba:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800a3be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800a3c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a3c4:	e7cc      	b.n	800a360 <HAL_DMA_IRQHandler+0x10c>
}
 800a3c6:	b003      	add	sp, #12
 800a3c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	20000060 	.word	0x20000060

0800a3d0 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800a3d0:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800a3d2:	4770      	bx	lr

0800a3d4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800a3d4:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	b380      	cbz	r0, 800a43c <HAL_DMA2D_Init+0x68>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800a3da:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800a3de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a3e2:	b91b      	cbnz	r3, 800a3ec <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800a3e4:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800a3e8:	f7f9 fe5a 	bl	80040a0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a3ec:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800a3ee:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a3f0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800a3f4:	6823      	ldr	r3, [r4, #0]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800a3fc:	430a      	orrs	r2, r1

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800a3fe:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800a400:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800a402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a404:	f022 0207 	bic.w	r2, r2, #7
 800a408:	430a      	orrs	r2, r1

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a40a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800a40c:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a40e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a410:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 800a414:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800a418:	430a      	orrs	r2, r1
 800a41a:	641a      	str	r2, [r3, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800a41c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a41e:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800a422:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800a426:	0552      	lsls	r2, r2, #21
 800a428:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a42c:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800a42e:	430a      	orrs	r2, r1
 800a430:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800a432:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a434:	6560      	str	r0, [r4, #84]	; 0x54
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800a436:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 800a43a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a43c:	2001      	movs	r0, #1
 800a43e:	e7fc      	b.n	800a43a <HAL_DMA2D_Init+0x66>

0800a440 <HAL_DMA2D_LineEventCallback>:
 800a440:	4770      	bx	lr

0800a442 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 800a442:	4770      	bx	lr

0800a444 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800a444:	6803      	ldr	r3, [r0, #0]
{
 800a446:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800a448:	685e      	ldr	r6, [r3, #4]
{
 800a44a:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800a44c:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800a44e:	07f2      	lsls	r2, r6, #31
 800a450:	d514      	bpl.n	800a47c <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800a452:	05e9      	lsls	r1, r5, #23
 800a454:	d512      	bpl.n	800a47c <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a45c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800a45e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800a460:	f042 0201 	orr.w	r2, r2, #1
 800a464:	6542      	str	r2, [r0, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800a466:	2201      	movs	r2, #1
 800a468:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a46a:	2304      	movs	r3, #4
 800a46c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a470:	2300      	movs	r3, #0
 800a472:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800a476:	69c3      	ldr	r3, [r0, #28]
 800a478:	b103      	cbz	r3, 800a47c <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800a47a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800a47c:	06b2      	lsls	r2, r6, #26
 800a47e:	d516      	bpl.n	800a4ae <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800a480:	04ab      	lsls	r3, r5, #18
 800a482:	d514      	bpl.n	800a4ae <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800a484:	6823      	ldr	r3, [r4, #0]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a48c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800a48e:	2220      	movs	r2, #32
 800a490:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800a492:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a494:	f043 0302 	orr.w	r3, r3, #2
 800a498:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a49a:	2304      	movs	r3, #4
 800a49c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800a4a6:	69e3      	ldr	r3, [r4, #28]
 800a4a8:	b10b      	cbz	r3, 800a4ae <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800a4ae:	0730      	lsls	r0, r6, #28
 800a4b0:	d516      	bpl.n	800a4e0 <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800a4b2:	0529      	lsls	r1, r5, #20
 800a4b4:	d514      	bpl.n	800a4e0 <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800a4b6:	6823      	ldr	r3, [r4, #0]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4be:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800a4c0:	2208      	movs	r2, #8
 800a4c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800a4c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a4c6:	f043 0304 	orr.w	r3, r3, #4
 800a4ca:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a4cc:	2304      	movs	r3, #4
 800a4ce:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800a4d8:	69e3      	ldr	r3, [r4, #28]
 800a4da:	b10b      	cbz	r3, 800a4e0 <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800a4dc:	4620      	mov	r0, r4
 800a4de:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800a4e0:	0772      	lsls	r2, r6, #29
 800a4e2:	d50b      	bpl.n	800a4fc <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800a4e4:	056b      	lsls	r3, r5, #21
 800a4e6:	d509      	bpl.n	800a4fc <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800a4e8:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800a4ea:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800a4f4:	2204      	movs	r2, #4
 800a4f6:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800a4f8:	f7ff ffa2 	bl	800a440 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800a4fc:	07b0      	lsls	r0, r6, #30
 800a4fe:	d514      	bpl.n	800a52a <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800a500:	05a9      	lsls	r1, r5, #22
 800a502:	d512      	bpl.n	800a52a <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800a504:	6823      	ldr	r3, [r4, #0]
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a50c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800a50e:	2202      	movs	r2, #2
 800a510:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800a512:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a514:	6563      	str	r3, [r4, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800a516:	2301      	movs	r3, #1
 800a518:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a51c:	2300      	movs	r3, #0
 800a51e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 800a522:	69a3      	ldr	r3, [r4, #24]
 800a524:	b10b      	cbz	r3, 800a52a <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800a526:	4620      	mov	r0, r4
 800a528:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800a52a:	06f2      	lsls	r2, r6, #27
 800a52c:	d513      	bpl.n	800a556 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800a52e:	04eb      	lsls	r3, r5, #19
 800a530:	d511      	bpl.n	800a556 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800a532:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800a534:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a53c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800a53e:	2210      	movs	r2, #16
 800a540:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800a542:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a544:	6563      	str	r3, [r4, #84]	; 0x54
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800a546:	2301      	movs	r3, #1
 800a548:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      __HAL_UNLOCK(hdma2d);
 800a54c:	2300      	movs	r3, #0
 800a54e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800a552:	f7ff ff76 	bl	800a442 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800a556:	bd70      	pop	{r4, r5, r6, pc}

0800a558 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800a558:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800a55a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800a55e:	2b01      	cmp	r3, #1
 800a560:	f04f 0302 	mov.w	r3, #2
 800a564:	d031      	beq.n	800a5ca <HAL_DMA2D_ConfigLayer+0x72>
 800a566:	2201      	movs	r2, #1

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a568:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 800a56c:	4e21      	ldr	r6, [pc, #132]	; (800a5f4 <HAL_DMA2D_ConfigLayer+0x9c>)
  __HAL_LOCK(hdma2d);
 800a56e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a572:	2218      	movs	r2, #24
 800a574:	fb02 0201 	mla	r2, r2, r1, r0
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800a578:	6b13      	ldr	r3, [r2, #48]	; 0x30
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a57a:	e9d2 4509 	ldrd	r4, r5, [r2, #36]	; 0x24
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800a57e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a580:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800a584:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800a586:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a588:	4323      	orrs	r3, r4
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a58a:	3c09      	subs	r4, #9
 800a58c:	2c01      	cmp	r4, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a58e:	ea43 5345 	orr.w	r3, r3, r5, lsl #21
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800a592:	bf96      	itet	ls
 800a594:	f002 427f 	andls.w	r2, r2, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800a598:	ea43 6302 	orrhi.w	r3, r3, r2, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800a59c:	4313      	orrls	r3, r2

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800a59e:	6802      	ldr	r2, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800a5a0:	b9a9      	cbnz	r1, 800a5ce <HAL_DMA2D_ConfigLayer+0x76>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800a5a2:	6a51      	ldr	r1, [r2, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a5a4:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800a5a6:	ea01 0106 	and.w	r1, r1, r6
 800a5aa:	ea43 0301 	orr.w	r3, r3, r1
 800a5ae:	6253      	str	r3, [r2, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800a5b0:	6a03      	ldr	r3, [r0, #32]
 800a5b2:	6193      	str	r3, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a5b4:	d803      	bhi.n	800a5be <HAL_DMA2D_ConfigLayer+0x66>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800a5b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a5b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a5bc:	6293      	str	r3, [r2, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  __HAL_LOCK(hdma2d);
 800a5ca:	4618      	mov	r0, r3

  return HAL_OK;
}
 800a5cc:	bd70      	pop	{r4, r5, r6, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800a5ce:	69d5      	ldr	r5, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a5d0:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800a5d2:	ea05 0506 	and.w	r5, r5, r6
 800a5d6:	ea43 0305 	orr.w	r3, r3, r5
 800a5da:	61d3      	str	r3, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800a5dc:	f04f 0318 	mov.w	r3, #24
 800a5e0:	fb03 0101 	mla	r1, r3, r1, r0
 800a5e4:	6a0b      	ldr	r3, [r1, #32]
 800a5e6:	6113      	str	r3, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a5e8:	d8e9      	bhi.n	800a5be <HAL_DMA2D_ConfigLayer+0x66>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800a5ea:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800a5ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a5f0:	6213      	str	r3, [r2, #32]
 800a5f2:	e7e4      	b.n	800a5be <HAL_DMA2D_ConfigLayer+0x66>
 800a5f4:	00ccfff0 	.word	0x00ccfff0

0800a5f8 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 800a5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5fc:	4607      	mov	r7, r0
 800a5fe:	460d      	mov	r5, r1
 800a600:	4614      	mov	r4, r2
 800a602:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800a604:	f7ff fbe0 	bl	8009dc8 <HAL_GetTick>
 800a608:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800a60a:	683a      	ldr	r2, [r7, #0]
 800a60c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800a60e:	07db      	lsls	r3, r3, #31
 800a610:	d50a      	bpl.n	800a628 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800a612:	ea44 2306 	orr.w	r3, r4, r6, lsl #8
 800a616:	9906      	ldr	r1, [sp, #24]

  return HAL_OK;
 800a618:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800a61a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a61e:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800a622:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 800a624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800a628:	f7ff fbce 	bl	8009dc8 <HAL_GetTick>
 800a62c:	eba0 0008 	sub.w	r0, r0, r8
 800a630:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a634:	d9e9      	bls.n	800a60a <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 800a636:	2003      	movs	r0, #3
 800a638:	e7f4      	b.n	800a624 <DSI_ShortWrite.constprop.0+0x2c>

0800a63a <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800a63a:	7c03      	ldrb	r3, [r0, #16]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d05c      	beq.n	800a6fa <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 800a640:	2200      	movs	r2, #0
 800a642:	6803      	ldr	r3, [r0, #0]
 800a644:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800a648:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800a64c:	07ca      	lsls	r2, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 800a64e:	6181      	str	r1, [r0, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800a650:	d507      	bpl.n	800a662 <HAL_DSI_ConfigErrorMonitor+0x28>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800a652:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800a656:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 800a65a:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 800a65e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800a662:	078a      	lsls	r2, r1, #30
 800a664:	d505      	bpl.n	800a672 <HAL_DSI_ConfigErrorMonitor+0x38>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800a666:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800a66a:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 800a66e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800a672:	074a      	lsls	r2, r1, #29
 800a674:	d505      	bpl.n	800a682 <HAL_DSI_ConfigErrorMonitor+0x48>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800a676:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800a67a:	f042 0201 	orr.w	r2, r2, #1
 800a67e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800a682:	070a      	lsls	r2, r1, #28
 800a684:	d505      	bpl.n	800a692 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800a686:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800a68a:	f042 0202 	orr.w	r2, r2, #2
 800a68e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800a692:	06ca      	lsls	r2, r1, #27
 800a694:	d505      	bpl.n	800a6a2 <HAL_DSI_ConfigErrorMonitor+0x68>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800a696:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800a69a:	f042 020c 	orr.w	r2, r2, #12
 800a69e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800a6a2:	068a      	lsls	r2, r1, #26
 800a6a4:	d505      	bpl.n	800a6b2 <HAL_DSI_ConfigErrorMonitor+0x78>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800a6a6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800a6aa:	f042 0210 	orr.w	r2, r2, #16
 800a6ae:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800a6b2:	064a      	lsls	r2, r1, #25
 800a6b4:	d505      	bpl.n	800a6c2 <HAL_DSI_ConfigErrorMonitor+0x88>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800a6b6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800a6ba:	f042 0220 	orr.w	r2, r2, #32
 800a6be:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800a6c2:	060a      	lsls	r2, r1, #24
 800a6c4:	d505      	bpl.n	800a6d2 <HAL_DSI_ConfigErrorMonitor+0x98>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800a6c6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800a6ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6ce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800a6d2:	05ca      	lsls	r2, r1, #23
 800a6d4:	d505      	bpl.n	800a6e2 <HAL_DSI_ConfigErrorMonitor+0xa8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800a6d6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800a6da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a6de:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800a6e2:	058a      	lsls	r2, r1, #22
 800a6e4:	d505      	bpl.n	800a6f2 <HAL_DSI_ConfigErrorMonitor+0xb8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800a6e6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800a6ea:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 800a6ee:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800a6fa:	2002      	movs	r0, #2
}
 800a6fc:	4770      	bx	lr
	...

0800a700 <HAL_DSI_Init>:
{
 800a700:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a702:	460d      	mov	r5, r1
  if (hdsi == NULL)
 800a704:	4604      	mov	r4, r0
 800a706:	2800      	cmp	r0, #0
 800a708:	f000 80a9 	beq.w	800a85e <HAL_DSI_Init+0x15e>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800a70c:	7c43      	ldrb	r3, [r0, #17]
 800a70e:	b90b      	cbnz	r3, 800a714 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 800a710:	f7f9 fce6 	bl	80040e0 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 800a714:	2303      	movs	r3, #3
 800a716:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800a718:	2300      	movs	r3, #0
 800a71a:	9300      	str	r3, [sp, #0]
 800a71c:	6823      	ldr	r3, [r4, #0]
 800a71e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800a722:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a726:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800a72a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800a72e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a732:	9300      	str	r3, [sp, #0]
 800a734:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800a736:	f7ff fb47 	bl	8009dc8 <HAL_GetTick>
 800a73a:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800a73c:	6822      	ldr	r2, [r4, #0]
 800a73e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 800a742:	04d9      	lsls	r1, r3, #19
 800a744:	d57a      	bpl.n	800a83c <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800a746:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800a74a:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 800a74e:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 800a752:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800a756:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800a75a:	e9d5 0300 	ldrd	r0, r3, [r5]
 800a75e:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800a760:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800a764:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800a766:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 800a76a:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800a76c:	430b      	orrs	r3, r1
 800a76e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800a772:	2300      	movs	r3, #0
 800a774:	9301      	str	r3, [sp, #4]
 800a776:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800a77a:	f043 0301 	orr.w	r3, r3, #1
 800a77e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 800a782:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800a786:	f003 0301 	and.w	r3, r3, #1
 800a78a:	9301      	str	r3, [sp, #4]
 800a78c:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 800a78e:	f7ff fb21 	bl	8009dd4 <HAL_Delay>
  tickstart = HAL_GetTick();
 800a792:	f7ff fb19 	bl	8009dc8 <HAL_GetTick>
 800a796:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800a798:	6823      	ldr	r3, [r4, #0]
 800a79a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800a79e:	05d2      	lsls	r2, r2, #23
 800a7a0:	d556      	bpl.n	800a850 <HAL_DSI_Init+0x150>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800a7a2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800a7a6:	f246 10a8 	movw	r0, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800a7aa:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800a7ac:	f042 0206 	orr.w	r2, r2, #6
 800a7b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800a7b4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a7b8:	f022 0203 	bic.w	r2, r2, #3
 800a7bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800a7c0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a7c4:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800a7c6:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800a7c8:	f042 0201 	orr.w	r2, r2, #1
 800a7cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800a7d0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800a7d4:	f022 0203 	bic.w	r2, r2, #3
 800a7d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800a7dc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800a7e0:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800a7e2:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800a7e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800a7e8:	689a      	ldr	r2, [r3, #8]
 800a7ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a7ee:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800a7f0:	689a      	ldr	r2, [r3, #8]
 800a7f2:	430a      	orrs	r2, r1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800a7f4:	491b      	ldr	r1, [pc, #108]	; (800a864 <HAL_DSI_Init+0x164>)
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800a7f6:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800a7f8:	686a      	ldr	r2, [r5, #4]
 800a7fa:	2a01      	cmp	r2, #1
 800a7fc:	bf38      	it	cc
 800a7fe:	2201      	movcc	r2, #1
 800a800:	434a      	muls	r2, r1
 800a802:	68a9      	ldr	r1, [r5, #8]
 800a804:	f001 0103 	and.w	r1, r1, #3
 800a808:	408a      	lsls	r2, r1
 800a80a:	6829      	ldr	r1, [r5, #0]
 800a80c:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 800a80e:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800a810:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800a814:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800a818:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800a81c:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800a820:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800a824:	430a      	orrs	r2, r1
 800a826:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 800a82a:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800a82e:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 800a832:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800a834:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 800a836:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 800a838:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 800a83a:	e007      	b.n	800a84c <HAL_DSI_Init+0x14c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800a83c:	f7ff fac4 	bl	8009dc8 <HAL_GetTick>
 800a840:	1b80      	subs	r0, r0, r6
 800a842:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a846:	f67f af79 	bls.w	800a73c <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 800a84a:	2003      	movs	r0, #3
}
 800a84c:	b002      	add	sp, #8
 800a84e:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800a850:	f7ff faba 	bl	8009dc8 <HAL_GetTick>
 800a854:	1b80      	subs	r0, r0, r6
 800a856:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a85a:	d99d      	bls.n	800a798 <HAL_DSI_Init+0x98>
 800a85c:	e7f5      	b.n	800a84a <HAL_DSI_Init+0x14a>
    return HAL_ERROR;
 800a85e:	2001      	movs	r0, #1
 800a860:	e7f4      	b.n	800a84c <HAL_DSI_Init+0x14c>
 800a862:	bf00      	nop
 800a864:	003d0900 	.word	0x003d0900

0800a868 <HAL_DSI_ErrorCallback>:
 800a868:	4770      	bx	lr

0800a86a <HAL_DSI_IRQHandler>:
{
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800a86a:	6803      	ldr	r3, [r0, #0]
 800a86c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800a870:	07d1      	lsls	r1, r2, #31
{
 800a872:	b510      	push	{r4, lr}
 800a874:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800a876:	d508      	bpl.n	800a88a <HAL_DSI_IRQHandler+0x20>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800a878:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800a87c:	07d2      	lsls	r2, r2, #31
 800a87e:	d504      	bpl.n	800a88a <HAL_DSI_IRQHandler+0x20>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800a880:	2201      	movs	r2, #1
 800a882:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 800a886:	f7f6 fd4f 	bl	8001328 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800a88a:	6823      	ldr	r3, [r4, #0]
 800a88c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800a890:	0791      	lsls	r1, r2, #30
 800a892:	d509      	bpl.n	800a8a8 <HAL_DSI_IRQHandler+0x3e>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800a894:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800a898:	0792      	lsls	r2, r2, #30
 800a89a:	d505      	bpl.n	800a8a8 <HAL_DSI_IRQHandler+0x3e>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800a89c:	2202      	movs	r2, #2
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800a89e:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800a8a0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800a8a4:	f7f6 fd74 	bl	8001390 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 800a8a8:	69a3      	ldr	r3, [r4, #24]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d04e      	beq.n	800a94c <HAL_DSI_IRQHandler+0xe2>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800a8ae:	6821      	ldr	r1, [r4, #0]
 800a8b0:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800a8b4:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
 800a8b8:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800a8ba:	f8d1 30c0 	ldr.w	r3, [r1, #192]	; 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800a8be:	f8d1 10c8 	ldr.w	r1, [r1, #200]	; 0xc8
 800a8c2:	400b      	ands	r3, r1

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800a8c4:	b291      	uxth	r1, r2
 800a8c6:	b119      	cbz	r1, 800a8d0 <HAL_DSI_IRQHandler+0x66>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800a8c8:	6961      	ldr	r1, [r4, #20]
 800a8ca:	f041 0101 	orr.w	r1, r1, #1
 800a8ce:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800a8d0:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 800a8d4:	d003      	beq.n	800a8de <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800a8d6:	6962      	ldr	r2, [r4, #20]
 800a8d8:	f042 0202 	orr.w	r2, r2, #2
 800a8dc:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800a8de:	07d8      	lsls	r0, r3, #31
 800a8e0:	d503      	bpl.n	800a8ea <HAL_DSI_IRQHandler+0x80>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800a8e2:	6962      	ldr	r2, [r4, #20]
 800a8e4:	f042 0204 	orr.w	r2, r2, #4
 800a8e8:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800a8ea:	0799      	lsls	r1, r3, #30
 800a8ec:	d503      	bpl.n	800a8f6 <HAL_DSI_IRQHandler+0x8c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800a8ee:	6962      	ldr	r2, [r4, #20]
 800a8f0:	f042 0208 	orr.w	r2, r2, #8
 800a8f4:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800a8f6:	f013 0f0c 	tst.w	r3, #12
 800a8fa:	d003      	beq.n	800a904 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800a8fc:	6962      	ldr	r2, [r4, #20]
 800a8fe:	f042 0210 	orr.w	r2, r2, #16
 800a902:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800a904:	06da      	lsls	r2, r3, #27
 800a906:	d503      	bpl.n	800a910 <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800a908:	6962      	ldr	r2, [r4, #20]
 800a90a:	f042 0220 	orr.w	r2, r2, #32
 800a90e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800a910:	0698      	lsls	r0, r3, #26
 800a912:	d503      	bpl.n	800a91c <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800a914:	6962      	ldr	r2, [r4, #20]
 800a916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a91a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800a91c:	0659      	lsls	r1, r3, #25
 800a91e:	d503      	bpl.n	800a928 <HAL_DSI_IRQHandler+0xbe>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800a920:	6962      	ldr	r2, [r4, #20]
 800a922:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a926:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800a928:	061a      	lsls	r2, r3, #24
 800a92a:	d503      	bpl.n	800a934 <HAL_DSI_IRQHandler+0xca>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800a92c:	6962      	ldr	r2, [r4, #20]
 800a92e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a932:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800a934:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 800a938:	d003      	beq.n	800a942 <HAL_DSI_IRQHandler+0xd8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800a93a:	6963      	ldr	r3, [r4, #20]
 800a93c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a940:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800a942:	6963      	ldr	r3, [r4, #20]
 800a944:	b113      	cbz	r3, 800a94c <HAL_DSI_IRQHandler+0xe2>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 800a946:	4620      	mov	r0, r4
 800a948:	f7ff ff8e 	bl	800a868 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800a94c:	bd10      	pop	{r4, pc}

0800a94e <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800a94e:	7c03      	ldrb	r3, [r0, #16]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d00b      	beq.n	800a96c <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800a954:	6803      	ldr	r3, [r0, #0]
 800a956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a958:	f022 0203 	bic.w	r2, r2, #3
 800a95c:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800a95e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a960:	4311      	orrs	r1, r2
 800a962:	6319      	str	r1, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800a964:	2300      	movs	r3, #0
 800a966:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800a968:	4618      	mov	r0, r3
 800a96a:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800a96c:	2002      	movs	r0, #2
}
 800a96e:	4770      	bx	lr

0800a970 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800a970:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800a972:	7c03      	ldrb	r3, [r0, #16]
 800a974:	2b01      	cmp	r3, #1
 800a976:	d06a      	beq.n	800aa4e <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800a978:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800a97a:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800a97c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a97e:	f042 0201 	orr.w	r2, r2, #1
 800a982:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800a984:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800a988:	f022 0201 	bic.w	r2, r2, #1
 800a98c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800a990:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800a994:	f042 0201 	orr.w	r2, r2, #1
 800a998:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800a99c:	68da      	ldr	r2, [r3, #12]
 800a99e:	f022 0203 	bic.w	r2, r2, #3
 800a9a2:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800a9a4:	68da      	ldr	r2, [r3, #12]
 800a9a6:	4322      	orrs	r2, r4
 800a9a8:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800a9aa:	695a      	ldr	r2, [r3, #20]
 800a9ac:	f022 0207 	bic.w	r2, r2, #7
 800a9b0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800a9b2:	695c      	ldr	r4, [r3, #20]
 800a9b4:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 800a9b8:	432a      	orrs	r2, r5
 800a9ba:	694d      	ldr	r5, [r1, #20]
 800a9bc:	432a      	orrs	r2, r5
 800a9be:	4322      	orrs	r2, r4

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800a9c0:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800a9c2:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800a9c4:	691a      	ldr	r2, [r3, #16]
 800a9c6:	f022 020f 	bic.w	r2, r2, #15
 800a9ca:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800a9cc:	691a      	ldr	r2, [r3, #16]
 800a9ce:	4322      	orrs	r2, r4
 800a9d0:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800a9d2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800a9d6:	f022 020e 	bic.w	r2, r2, #14
 800a9da:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800a9de:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800a9e2:	ea42 0244 	orr.w	r2, r2, r4, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800a9e6:	688c      	ldr	r4, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800a9e8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800a9ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a9ee:	0c12      	lsrs	r2, r2, #16
 800a9f0:	0412      	lsls	r2, r2, #16
 800a9f2:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800a9f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a9f6:	4322      	orrs	r2, r4
 800a9f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800a9fa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800a9fe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800aa02:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800aa06:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 800aa0a:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 800aa0e:	432a      	orrs	r2, r5
 800aa10:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800aa12:	432a      	orrs	r2, r5
 800aa14:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800aa16:	6a89      	ldr	r1, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800aa18:	432a      	orrs	r2, r5
 800aa1a:	4322      	orrs	r2, r4
 800aa1c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800aa20:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800aa22:	f022 0201 	bic.w	r2, r2, #1
 800aa26:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800aa28:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800aa2a:	430a      	orrs	r2, r1
 800aa2c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800aa2e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800aa32:	f042 0201 	orr.w	r2, r2, #1
 800aa36:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800aa3a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800aa3e:	f042 0202 	orr.w	r2, r2, #2
 800aa42:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800aa46:	2300      	movs	r3, #0
 800aa48:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800aa4a:	4618      	mov	r0, r3
}
 800aa4c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800aa4e:	2002      	movs	r0, #2
 800aa50:	e7fc      	b.n	800aa4c <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

0800aa54 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800aa54:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800aa56:	7c03      	ldrb	r3, [r0, #16]
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d02a      	beq.n	800aab2 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800aa5c:	6802      	ldr	r2, [r0, #0]
 800aa5e:	4b16      	ldr	r3, [pc, #88]	; (800aab8 <HAL_DSI_ConfigCommand+0x64>)
 800aa60:	6e94      	ldr	r4, [r2, #104]	; 0x68
 800aa62:	4023      	ands	r3, r4
 800aa64:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800aa66:	6e94      	ldr	r4, [r2, #104]	; 0x68
 800aa68:	e9d1 3500 	ldrd	r3, r5, [r1]
 800aa6c:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 800aa6e:	688d      	ldr	r5, [r1, #8]
 800aa70:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 800aa72:	68cd      	ldr	r5, [r1, #12]
 800aa74:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 800aa76:	690d      	ldr	r5, [r1, #16]
 800aa78:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 800aa7a:	694d      	ldr	r5, [r1, #20]
 800aa7c:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 800aa7e:	698d      	ldr	r5, [r1, #24]
 800aa80:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 800aa82:	69cd      	ldr	r5, [r1, #28]
 800aa84:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 800aa86:	6a0d      	ldr	r5, [r1, #32]
 800aa88:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 800aa8a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800aa8c:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 800aa8e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800aa90:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 800aa92:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800aa94:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      | \
 800aa96:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800aa98:	4323      	orrs	r3, r4
 800aa9a:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800aa9c:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800aa9e:	f023 0302 	bic.w	r3, r3, #2
 800aaa2:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800aaa4:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800aaa6:	430b      	orrs	r3, r1
 800aaa8:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800aaaa:	2300      	movs	r3, #0
 800aaac:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800aaae:	4618      	mov	r0, r3
}
 800aab0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800aab2:	2002      	movs	r0, #2
 800aab4:	e7fc      	b.n	800aab0 <HAL_DSI_ConfigCommand+0x5c>
 800aab6:	bf00      	nop
 800aab8:	fef080ff 	.word	0xfef080ff

0800aabc <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800aabc:	7c03      	ldrb	r3, [r0, #16]
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d00b      	beq.n	800aada <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800aac2:	6803      	ldr	r3, [r0, #0]
 800aac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aac6:	f022 021f 	bic.w	r2, r2, #31
 800aaca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800aacc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aace:	4311      	orrs	r1, r2
 800aad0:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800aad2:	2300      	movs	r3, #0
 800aad4:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800aad6:	4618      	mov	r0, r3
 800aad8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800aada:	2002      	movs	r0, #2
}
 800aadc:	4770      	bx	lr

0800aade <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800aade:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800aae0:	7c03      	ldrb	r3, [r0, #16]
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d035      	beq.n	800ab52 <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800aae6:	e9d1 4300 	ldrd	r4, r3, [r1]
 800aaea:	429c      	cmp	r4, r3
 800aaec:	bf38      	it	cc
 800aaee:	461c      	movcc	r4, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800aaf0:	6803      	ldr	r3, [r0, #0]
 800aaf2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800aaf6:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800aafa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800aafe:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ab02:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ab06:	4322      	orrs	r2, r4
 800ab08:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800ab0c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800ab10:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800ab14:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800ab18:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800ab1c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800ab20:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800ab22:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800ab26:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800ab28:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800ab2a:	432a      	orrs	r2, r5
 800ab2c:	4322      	orrs	r2, r4
 800ab2e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800ab32:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800ab36:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800ab3a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800ab3e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800ab42:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ab46:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800ab4e:	4618      	mov	r0, r3
}
 800ab50:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800ab52:	2002      	movs	r0, #2
 800ab54:	e7fc      	b.n	800ab50 <HAL_DSI_ConfigPhyTimer+0x72>
	...

0800ab58 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800ab58:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ab5a:	7c03      	ldrb	r3, [r0, #16]
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d05c      	beq.n	800ac1a <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800ab60:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800ab62:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800ab64:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800ab66:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800ab68:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800ab6c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800ab6e:	689a      	ldr	r2, [r3, #8]
 800ab70:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800ab74:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800ab76:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800ab78:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800ab7a:	b292      	uxth	r2, r2
 800ab7c:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800ab7e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800ab80:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ab84:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800ab86:	4a26      	ldr	r2, [pc, #152]	; (800ac20 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 800ab88:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800ab8a:	4014      	ands	r4, r2
 800ab8c:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800ab8e:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800ab90:	432c      	orrs	r4, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800ab92:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800ab94:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800ab96:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800ab98:	4014      	ands	r4, r2
 800ab9a:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800ab9c:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800ab9e:	432c      	orrs	r4, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800aba0:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800aba2:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800aba4:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800aba8:	4014      	ands	r4, r2
 800abaa:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800abae:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800abb2:	432c      	orrs	r4, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800abb4:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800abb6:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800abba:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800abbe:	4014      	ands	r4, r2
 800abc0:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800abc4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800abc8:	432c      	orrs	r4, r5
 800abca:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800abce:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800abd2:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800abd6:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800abda:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800abde:	698d      	ldr	r5, [r1, #24]
 800abe0:	432c      	orrs	r4, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800abe2:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800abe4:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800abe6:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800abea:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800abee:	4014      	ands	r4, r2
 800abf0:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800abf4:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800abf8:	432c      	orrs	r4, r5
 800abfa:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800abfe:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800ac02:	4022      	ands	r2, r4
 800ac04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800ac08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800ac0c:	430a      	orrs	r2, r1
 800ac0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800ac12:	2300      	movs	r3, #0
 800ac14:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800ac16:	4618      	mov	r0, r3
}
 800ac18:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800ac1a:	2002      	movs	r0, #2
 800ac1c:	e7fc      	b.n	800ac18 <HAL_DSI_ConfigHostTimeouts+0xc0>
 800ac1e:	bf00      	nop
 800ac20:	ffff0000 	.word	0xffff0000

0800ac24 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ac24:	7c03      	ldrb	r3, [r0, #16]
{
 800ac26:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d01c      	beq.n	800ac66 <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800ac2c:	6802      	ldr	r2, [r0, #0]
 800ac2e:	2300      	movs	r3, #0
 800ac30:	9300      	str	r3, [sp, #0]
 800ac32:	6851      	ldr	r1, [r2, #4]
 800ac34:	f041 0101 	orr.w	r1, r1, #1
 800ac38:	6051      	str	r1, [r2, #4]
 800ac3a:	6851      	ldr	r1, [r2, #4]
 800ac3c:	f001 0101 	and.w	r1, r1, #1
 800ac40:	9100      	str	r1, [sp, #0]
 800ac42:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800ac44:	9301      	str	r3, [sp, #4]
 800ac46:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 800ac4a:	f041 0108 	orr.w	r1, r1, #8
 800ac4e:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 800ac52:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800ac56:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800ac58:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800ac5a:	f002 0208 	and.w	r2, r2, #8
 800ac5e:	9201      	str	r2, [sp, #4]
 800ac60:	9a01      	ldr	r2, [sp, #4]
}
 800ac62:	b002      	add	sp, #8
 800ac64:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800ac66:	2002      	movs	r0, #2
 800ac68:	e7fb      	b.n	800ac62 <HAL_DSI_Start+0x3e>

0800ac6a <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ac6a:	7c03      	ldrb	r3, [r0, #16]
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d00a      	beq.n	800ac86 <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800ac70:	6802      	ldr	r2, [r0, #0]
 800ac72:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 800ac76:	f043 0304 	orr.w	r3, r3, #4
 800ac7a:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800ac7e:	2300      	movs	r3, #0
 800ac80:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800ac82:	4618      	mov	r0, r3
 800ac84:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800ac86:	2002      	movs	r0, #2
}
 800ac88:	4770      	bx	lr

0800ac8a <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800ac8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800ac8c:	7c05      	ldrb	r5, [r0, #16]
{
 800ac8e:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800ac90:	2d01      	cmp	r5, #1
 800ac92:	d009      	beq.n	800aca8 <HAL_DSI_ShortWrite+0x1e>
 800ac94:	2501      	movs	r5, #1
 800ac96:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800ac98:	9d06      	ldr	r5, [sp, #24]
 800ac9a:	9500      	str	r5, [sp, #0]
 800ac9c:	f7ff fcac 	bl	800a5f8 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800aca0:	2300      	movs	r3, #0
 800aca2:	7423      	strb	r3, [r4, #16]

  return status;
}
 800aca4:	b003      	add	sp, #12
 800aca6:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800aca8:	2002      	movs	r0, #2
 800acaa:	e7fb      	b.n	800aca4 <HAL_DSI_ShortWrite+0x1a>

0800acac <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800acac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb0:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800acb2:	7c03      	ldrb	r3, [r0, #16]
{
 800acb4:	4606      	mov	r6, r0
 800acb6:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 800acb8:	2b01      	cmp	r3, #1
{
 800acba:	4615      	mov	r5, r2
 800acbc:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  __HAL_LOCK(hdsi);
 800acc0:	d055      	beq.n	800ad6e <HAL_DSI_LongWrite+0xc2>
 800acc2:	2301      	movs	r3, #1
 800acc4:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800acc6:	f7ff f87f 	bl	8009dc8 <HAL_GetTick>
 800acca:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800accc:	f8d6 c000 	ldr.w	ip, [r6]
 800acd0:	f8dc 3074 	ldr.w	r3, [ip, #116]	; 0x74
 800acd4:	f013 0a01 	ands.w	sl, r3, #1
 800acd8:	d01c      	beq.n	800ad14 <HAL_DSI_LongWrite+0x68>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800acda:	2c03      	cmp	r4, #3
 800acdc:	4621      	mov	r1, r4

  for (count = 0U; count < nbBytes; count++)
 800acde:	f04f 0200 	mov.w	r2, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800ace2:	bf28      	it	cs
 800ace4:	2103      	movcs	r1, #3
  for (count = 0U; count < nbBytes; count++)
 800ace6:	428a      	cmp	r2, r1
 800ace8:	d120      	bne.n	800ad2c <HAL_DSI_LongWrite+0x80>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 800acea:	1aa3      	subs	r3, r4, r2
  pparams += nbBytes;
 800acec:	4442      	add	r2, r8
  hdsi->Instance->GPDR = fifoword;
 800acee:	f8cc 9070 	str.w	r9, [ip, #112]	; 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800acf2:	bb1b      	cbnz	r3, 800ad3c <HAL_DSI_LongWrite+0x90>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800acf4:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800acf6:	ea45 1187 	orr.w	r1, r5, r7, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 800acfa:	4618      	mov	r0, r3
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800acfc:	0222      	lsls	r2, r4, #8
 800acfe:	0224      	lsls	r4, r4, #8
 800ad00:	b292      	uxth	r2, r2
 800ad02:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800ad06:	ea41 0502 	orr.w	r5, r1, r2
 800ad0a:	4325      	orrs	r5, r4
 800ad0c:	f8cc 506c 	str.w	r5, [ip, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 800ad10:	7433      	strb	r3, [r6, #16]
  return HAL_OK;
 800ad12:	e009      	b.n	800ad28 <HAL_DSI_LongWrite+0x7c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800ad14:	f7ff f858 	bl	8009dc8 <HAL_GetTick>
 800ad18:	eba0 000b 	sub.w	r0, r0, fp
 800ad1c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ad20:	d9d4      	bls.n	800accc <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 800ad22:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800ad24:	f886 a010 	strb.w	sl, [r6, #16]
}
 800ad28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800ad2c:	f818 3002 	ldrb.w	r3, [r8, r2]
 800ad30:	3201      	adds	r2, #1
 800ad32:	00d0      	lsls	r0, r2, #3
 800ad34:	4083      	lsls	r3, r0
 800ad36:	ea49 0903 	orr.w	r9, r9, r3
  for (count = 0U; count < nbBytes; count++)
 800ad3a:	e7d4      	b.n	800ace6 <HAL_DSI_LongWrite+0x3a>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800ad3c:	2b04      	cmp	r3, #4
    fifoword = 0U;
 800ad3e:	f04f 0000 	mov.w	r0, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800ad42:	469e      	mov	lr, r3
    for (count = 0U; count < nbBytes; count++)
 800ad44:	4601      	mov	r1, r0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800ad46:	bf28      	it	cs
 800ad48:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800ad4c:	f812 8001 	ldrb.w	r8, [r2, r1]
 800ad50:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 800ad54:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800ad56:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 800ad5a:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800ad5c:	ea40 0008 	orr.w	r0, r0, r8
    for (count = 0U; count < nbBytes; count++)
 800ad60:	d1f4      	bne.n	800ad4c <HAL_DSI_LongWrite+0xa0>
    uicounter -= nbBytes;
 800ad62:	eba3 030e 	sub.w	r3, r3, lr
    pparams += nbBytes;
 800ad66:	4472      	add	r2, lr
    hdsi->Instance->GPDR = fifoword;
 800ad68:	f8cc 0070 	str.w	r0, [ip, #112]	; 0x70
    pparams += nbBytes;
 800ad6c:	e7c1      	b.n	800acf2 <HAL_DSI_LongWrite+0x46>
  __HAL_LOCK(hdsi);
 800ad6e:	2002      	movs	r0, #2
 800ad70:	e7da      	b.n	800ad28 <HAL_DSI_LongWrite+0x7c>

0800ad72 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ad72:	7c03      	ldrb	r3, [r0, #16]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d010      	beq.n	800ad9a <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800ad78:	6803      	ldr	r3, [r0, #0]
 800ad7a:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800ad7e:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800ad82:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800ad86:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800ad8a:	ea42 6141 	orr.w	r1, r2, r1, lsl #25
 800ad8e:	f8c3 141c 	str.w	r1, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800ad92:	2300      	movs	r3, #0
 800ad94:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800ad96:	4618      	mov	r0, r3
 800ad98:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800ad9a:	2002      	movs	r0, #2
}
 800ad9c:	4770      	bx	lr
	...

0800ada0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ada0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800ada4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ada6:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 800af60 <HAL_GPIO_Init+0x1c0>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800adaa:	4a6b      	ldr	r2, [pc, #428]	; (800af58 <HAL_GPIO_Init+0x1b8>)
    ioposition = ((uint32_t)0x01) << position;
 800adac:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800adae:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 800adb0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800adb2:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800adb6:	43ac      	bics	r4, r5
 800adb8:	f040 80b4 	bne.w	800af24 <HAL_GPIO_Init+0x184>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800adbc:	684d      	ldr	r5, [r1, #4]
 800adbe:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800adc2:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800adc4:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800adc8:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800adcc:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800adce:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800add0:	2f01      	cmp	r7, #1
 800add2:	d834      	bhi.n	800ae3e <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 800add4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800add6:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 800adda:	68cf      	ldr	r7, [r1, #12]
 800addc:	fa07 f708 	lsl.w	r7, r7, r8
 800ade0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800ade4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800ade6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ade8:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800adec:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800adf0:	409f      	lsls	r7, r3
 800adf2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800adf6:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800adf8:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800adfa:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800adfc:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800ae00:	688f      	ldr	r7, [r1, #8]
 800ae02:	fa07 f708 	lsl.w	r7, r7, r8
 800ae06:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 800ae0a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ae0c:	d119      	bne.n	800ae42 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 800ae0e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ae12:	f003 0b07 	and.w	fp, r3, #7
 800ae16:	f04f 0e0f 	mov.w	lr, #15
 800ae1a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800ae1e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800ae22:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ae26:	fa0e fe0b 	lsl.w	lr, lr, fp
 800ae2a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800ae2e:	690f      	ldr	r7, [r1, #16]
 800ae30:	fa07 f70b 	lsl.w	r7, r7, fp
 800ae34:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 800ae38:	f8ca 7020 	str.w	r7, [sl, #32]
 800ae3c:	e001      	b.n	800ae42 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ae3e:	2c03      	cmp	r4, #3
 800ae40:	d1da      	bne.n	800adf8 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 800ae42:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800ae44:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ae48:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800ae4c:	ea07 0706 	and.w	r7, r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800ae50:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 800ae54:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ae56:	d065      	beq.n	800af24 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ae58:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 800ae5c:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ae60:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ae64:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800ae68:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ae6c:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ae6e:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800ae72:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 800ae76:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 800ae7a:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 800ae7e:	9401      	str	r4, [sp, #4]
 800ae80:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ae82:	240f      	movs	r4, #15
        temp = SYSCFG->EXTICR[position >> 2];
 800ae84:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ae88:	40bc      	lsls	r4, r7
 800ae8a:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800ae8e:	4c33      	ldr	r4, [pc, #204]	; (800af5c <HAL_GPIO_Init+0x1bc>)
 800ae90:	42a0      	cmp	r0, r4
 800ae92:	d04e      	beq.n	800af32 <HAL_GPIO_Init+0x192>
 800ae94:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800ae98:	42a0      	cmp	r0, r4
 800ae9a:	d04c      	beq.n	800af36 <HAL_GPIO_Init+0x196>
 800ae9c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800aea0:	42a0      	cmp	r0, r4
 800aea2:	d04a      	beq.n	800af3a <HAL_GPIO_Init+0x19a>
 800aea4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800aea8:	42a0      	cmp	r0, r4
 800aeaa:	d048      	beq.n	800af3e <HAL_GPIO_Init+0x19e>
 800aeac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800aeb0:	42a0      	cmp	r0, r4
 800aeb2:	d046      	beq.n	800af42 <HAL_GPIO_Init+0x1a2>
 800aeb4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800aeb8:	42a0      	cmp	r0, r4
 800aeba:	d044      	beq.n	800af46 <HAL_GPIO_Init+0x1a6>
 800aebc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800aec0:	42a0      	cmp	r0, r4
 800aec2:	d042      	beq.n	800af4a <HAL_GPIO_Init+0x1aa>
 800aec4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800aec8:	42a0      	cmp	r0, r4
 800aeca:	d040      	beq.n	800af4e <HAL_GPIO_Init+0x1ae>
 800aecc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800aed0:	42a0      	cmp	r0, r4
 800aed2:	d03e      	beq.n	800af52 <HAL_GPIO_Init+0x1b2>
 800aed4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800aed8:	42a0      	cmp	r0, r4
 800aeda:	bf0c      	ite	eq
 800aedc:	2409      	moveq	r4, #9
 800aede:	240a      	movne	r4, #10
 800aee0:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800aee2:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800aee4:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800aee8:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800aeea:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 800aeee:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800aef0:	bf54      	ite	pl
 800aef2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800aef4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800aef8:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 800aefa:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 800aefc:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800aefe:	bf54      	ite	pl
 800af00:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800af02:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800af06:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 800af08:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 800af0a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800af0c:	bf54      	ite	pl
 800af0e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800af10:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800af14:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 800af16:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 800af18:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800af1a:	bf54      	ite	pl
 800af1c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800af1e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 800af22:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800af24:	3301      	adds	r3, #1
 800af26:	2b10      	cmp	r3, #16
 800af28:	f47f af40 	bne.w	800adac <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800af2c:	b003      	add	sp, #12
 800af2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800af32:	2400      	movs	r4, #0
 800af34:	e7d4      	b.n	800aee0 <HAL_GPIO_Init+0x140>
 800af36:	2401      	movs	r4, #1
 800af38:	e7d2      	b.n	800aee0 <HAL_GPIO_Init+0x140>
 800af3a:	2402      	movs	r4, #2
 800af3c:	e7d0      	b.n	800aee0 <HAL_GPIO_Init+0x140>
 800af3e:	2403      	movs	r4, #3
 800af40:	e7ce      	b.n	800aee0 <HAL_GPIO_Init+0x140>
 800af42:	2404      	movs	r4, #4
 800af44:	e7cc      	b.n	800aee0 <HAL_GPIO_Init+0x140>
 800af46:	2405      	movs	r4, #5
 800af48:	e7ca      	b.n	800aee0 <HAL_GPIO_Init+0x140>
 800af4a:	2406      	movs	r4, #6
 800af4c:	e7c8      	b.n	800aee0 <HAL_GPIO_Init+0x140>
 800af4e:	2407      	movs	r4, #7
 800af50:	e7c6      	b.n	800aee0 <HAL_GPIO_Init+0x140>
 800af52:	2408      	movs	r4, #8
 800af54:	e7c4      	b.n	800aee0 <HAL_GPIO_Init+0x140>
 800af56:	bf00      	nop
 800af58:	40013c00 	.word	0x40013c00
 800af5c:	40020000 	.word	0x40020000
 800af60:	40023800 	.word	0x40023800

0800af64 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800af64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800af68:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800af6a:	4c49      	ldr	r4, [pc, #292]	; (800b090 <HAL_GPIO_DeInit+0x12c>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800af6c:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800b098 <HAL_GPIO_DeInit+0x134>
 800af70:	f8df a128 	ldr.w	sl, [pc, #296]	; 800b09c <HAL_GPIO_DeInit+0x138>
 800af74:	f8df b128 	ldr.w	fp, [pc, #296]	; 800b0a0 <HAL_GPIO_DeInit+0x13c>
    ioposition = ((uint32_t)0x01) << position;
 800af78:	2301      	movs	r3, #1
 800af7a:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 800af7e:	ea3e 0501 	bics.w	r5, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 800af82:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 800af86:	d16c      	bne.n	800b062 <HAL_GPIO_DeInit+0xfe>
      tmp = SYSCFG->EXTICR[position >> 2];
 800af88:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800af8c:	f002 0c03 	and.w	ip, r2, #3
 800af90:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800af92:	4b40      	ldr	r3, [pc, #256]	; (800b094 <HAL_GPIO_DeInit+0x130>)
 800af94:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800af98:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800af9c:	4298      	cmp	r0, r3
 800af9e:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800afa2:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 800afa6:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800afaa:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800afae:	d05d      	beq.n	800b06c <HAL_GPIO_DeInit+0x108>
 800afb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afb4:	4298      	cmp	r0, r3
 800afb6:	d05b      	beq.n	800b070 <HAL_GPIO_DeInit+0x10c>
 800afb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afbc:	4298      	cmp	r0, r3
 800afbe:	d059      	beq.n	800b074 <HAL_GPIO_DeInit+0x110>
 800afc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afc4:	4298      	cmp	r0, r3
 800afc6:	d057      	beq.n	800b078 <HAL_GPIO_DeInit+0x114>
 800afc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afcc:	4298      	cmp	r0, r3
 800afce:	d055      	beq.n	800b07c <HAL_GPIO_DeInit+0x118>
 800afd0:	4548      	cmp	r0, r9
 800afd2:	d055      	beq.n	800b080 <HAL_GPIO_DeInit+0x11c>
 800afd4:	4550      	cmp	r0, sl
 800afd6:	d055      	beq.n	800b084 <HAL_GPIO_DeInit+0x120>
 800afd8:	4558      	cmp	r0, fp
 800afda:	d055      	beq.n	800b088 <HAL_GPIO_DeInit+0x124>
 800afdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afe0:	4298      	cmp	r0, r3
 800afe2:	d053      	beq.n	800b08c <HAL_GPIO_DeInit+0x128>
 800afe4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afe8:	4298      	cmp	r0, r3
 800afea:	bf0c      	ite	eq
 800afec:	2309      	moveq	r3, #9
 800afee:	230a      	movne	r3, #10
 800aff0:	fa03 f30c 	lsl.w	r3, r3, ip
 800aff4:	4543      	cmp	r3, r8
 800aff6:	d113      	bne.n	800b020 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800aff8:	6823      	ldr	r3, [r4, #0]
 800affa:	ea23 0307 	bic.w	r3, r3, r7
 800affe:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b000:	6863      	ldr	r3, [r4, #4]
 800b002:	ea23 0307 	bic.w	r3, r3, r7
 800b006:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b008:	68e3      	ldr	r3, [r4, #12]
 800b00a:	ea23 0307 	bic.w	r3, r3, r7
 800b00e:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b010:	68a3      	ldr	r3, [r4, #8]
 800b012:	ea23 0307 	bic.w	r3, r3, r7
 800b016:	60a3      	str	r3, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800b018:	68ab      	ldr	r3, [r5, #8]
 800b01a:	ea23 0306 	bic.w	r3, r3, r6
 800b01e:	60ab      	str	r3, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b020:	0056      	lsls	r6, r2, #1
 800b022:	2303      	movs	r3, #3
 800b024:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b026:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b02a:	40b3      	lsls	r3, r6
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b02c:	270f      	movs	r7, #15
 800b02e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b032:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b036:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b03a:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b03c:	08d5      	lsrs	r5, r2, #3
 800b03e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800b042:	6a2e      	ldr	r6, [r5, #32]
 800b044:	ea26 0607 	bic.w	r6, r6, r7
 800b048:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b04a:	68c5      	ldr	r5, [r0, #12]
 800b04c:	ea25 0503 	bic.w	r5, r5, r3
 800b050:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b052:	6845      	ldr	r5, [r0, #4]
 800b054:	ea25 050e 	bic.w	r5, r5, lr
 800b058:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b05a:	6885      	ldr	r5, [r0, #8]
 800b05c:	ea25 0303 	bic.w	r3, r5, r3
 800b060:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b062:	3201      	adds	r2, #1
 800b064:	2a10      	cmp	r2, #16
 800b066:	d187      	bne.n	800af78 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 800b068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800b06c:	2300      	movs	r3, #0
 800b06e:	e7bf      	b.n	800aff0 <HAL_GPIO_DeInit+0x8c>
 800b070:	2301      	movs	r3, #1
 800b072:	e7bd      	b.n	800aff0 <HAL_GPIO_DeInit+0x8c>
 800b074:	2302      	movs	r3, #2
 800b076:	e7bb      	b.n	800aff0 <HAL_GPIO_DeInit+0x8c>
 800b078:	2303      	movs	r3, #3
 800b07a:	e7b9      	b.n	800aff0 <HAL_GPIO_DeInit+0x8c>
 800b07c:	2304      	movs	r3, #4
 800b07e:	e7b7      	b.n	800aff0 <HAL_GPIO_DeInit+0x8c>
 800b080:	2305      	movs	r3, #5
 800b082:	e7b5      	b.n	800aff0 <HAL_GPIO_DeInit+0x8c>
 800b084:	2306      	movs	r3, #6
 800b086:	e7b3      	b.n	800aff0 <HAL_GPIO_DeInit+0x8c>
 800b088:	2307      	movs	r3, #7
 800b08a:	e7b1      	b.n	800aff0 <HAL_GPIO_DeInit+0x8c>
 800b08c:	2308      	movs	r3, #8
 800b08e:	e7af      	b.n	800aff0 <HAL_GPIO_DeInit+0x8c>
 800b090:	40013c00 	.word	0x40013c00
 800b094:	40020000 	.word	0x40020000
 800b098:	40021400 	.word	0x40021400
 800b09c:	40021800 	.word	0x40021800
 800b0a0:	40021c00 	.word	0x40021c00

0800b0a4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b0a4:	6903      	ldr	r3, [r0, #16]
 800b0a6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800b0a8:	bf14      	ite	ne
 800b0aa:	2001      	movne	r0, #1
 800b0ac:	2000      	moveq	r0, #0
 800b0ae:	4770      	bx	lr

0800b0b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b0b0:	b10a      	cbz	r2, 800b0b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b0b2:	6181      	str	r1, [r0, #24]
  }
}
 800b0b4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b0b6:	0409      	lsls	r1, r1, #16
 800b0b8:	e7fb      	b.n	800b0b2 <HAL_GPIO_WritePin+0x2>

0800b0ba <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b0ba:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b0bc:	ea01 0203 	and.w	r2, r1, r3
 800b0c0:	ea21 0103 	bic.w	r1, r1, r3
 800b0c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b0c8:	6181      	str	r1, [r0, #24]
}
 800b0ca:	4770      	bx	lr

0800b0cc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b0cc:	6803      	ldr	r3, [r0, #0]
 800b0ce:	699a      	ldr	r2, [r3, #24]
 800b0d0:	0791      	lsls	r1, r2, #30
 800b0d2:	d501      	bpl.n	800b0d8 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b0d8:	699a      	ldr	r2, [r3, #24]
 800b0da:	07d2      	lsls	r2, r2, #31
 800b0dc:	d403      	bmi.n	800b0e6 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b0de:	699a      	ldr	r2, [r3, #24]
 800b0e0:	f042 0201 	orr.w	r2, r2, #1
 800b0e4:	619a      	str	r2, [r3, #24]
  }
}
 800b0e6:	4770      	bx	lr

0800b0e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b0e8:	b530      	push	{r4, r5, lr}
 800b0ea:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b0ec:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b0f0:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b0f2:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800b0f4:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b0f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800b0fa:	4a05      	ldr	r2, [pc, #20]	; (800b110 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b0fc:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800b0fe:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b102:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800b106:	ea20 0002 	bic.w	r0, r0, r2
 800b10a:	4303      	orrs	r3, r0
 800b10c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b10e:	bd30      	pop	{r4, r5, pc}
 800b110:	03ff63ff 	.word	0x03ff63ff

0800b114 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 800b114:	6803      	ldr	r3, [r0, #0]
{
 800b116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800b11a:	699c      	ldr	r4, [r3, #24]
{
 800b11c:	4605      	mov	r5, r0
 800b11e:	460f      	mov	r7, r1
 800b120:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b122:	f014 0410 	ands.w	r4, r4, #16
 800b126:	d06f      	beq.n	800b208 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 800b128:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b12a:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 800b12c:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b12e:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b130:	682b      	ldr	r3, [r5, #0]
 800b132:	699a      	ldr	r2, [r3, #24]
 800b134:	0690      	lsls	r0, r2, #26
 800b136:	d461      	bmi.n	800b1fc <I2C_IsErrorOccurred+0xe8>
 800b138:	f1b8 0f00 	cmp.w	r8, #0
 800b13c:	d035      	beq.n	800b1aa <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 800b13e:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800b142:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800b144:	682e      	ldr	r6, [r5, #0]
 800b146:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b148:	05d9      	lsls	r1, r3, #23
 800b14a:	d505      	bpl.n	800b158 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b14c:	f44f 7280 	mov.w	r2, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800b150:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 800b154:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b156:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b158:	055a      	lsls	r2, r3, #21
 800b15a:	d505      	bpl.n	800b168 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b15c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800b160:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 800b164:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b166:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b168:	059b      	lsls	r3, r3, #22
 800b16a:	d54f      	bpl.n	800b20c <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b16c:	f44f 7300 	mov.w	r3, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800b170:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b174:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 800b176:	4628      	mov	r0, r5
 800b178:	f7ff ffa8 	bl	800b0cc <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800b17c:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 800b17e:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800b180:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800b184:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800b188:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800b18c:	f023 0301 	bic.w	r3, r3, #1
 800b190:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 800b192:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800b194:	4323      	orrs	r3, r4
 800b196:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b198:	2320      	movs	r3, #32
 800b19a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800b1a4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800b1a8:	e032      	b.n	800b210 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 800b1aa:	1c7a      	adds	r2, r7, #1
 800b1ac:	d0c1      	beq.n	800b132 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b1ae:	f7fe fe0b 	bl	8009dc8 <HAL_GetTick>
 800b1b2:	1b80      	subs	r0, r0, r6
 800b1b4:	42b8      	cmp	r0, r7
 800b1b6:	d801      	bhi.n	800b1bc <I2C_IsErrorOccurred+0xa8>
 800b1b8:	2f00      	cmp	r7, #0
 800b1ba:	d1b9      	bne.n	800b130 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b1bc:	682b      	ldr	r3, [r5, #0]
 800b1be:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800b1c0:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b1c4:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800b1c6:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b1c8:	0400      	lsls	r0, r0, #16
 800b1ca:	d50a      	bpl.n	800b1e2 <I2C_IsErrorOccurred+0xce>
 800b1cc:	0449      	lsls	r1, r1, #17
 800b1ce:	d408      	bmi.n	800b1e2 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 800b1d0:	2a20      	cmp	r2, #32
 800b1d2:	d006      	beq.n	800b1e2 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b1d4:	685a      	ldr	r2, [r3, #4]
 800b1d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b1da:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800b1dc:	f7fe fdf4 	bl	8009dc8 <HAL_GetTick>
 800b1e0:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b1e2:	682b      	ldr	r3, [r5, #0]
 800b1e4:	699b      	ldr	r3, [r3, #24]
 800b1e6:	069b      	lsls	r3, r3, #26
 800b1e8:	d4a2      	bmi.n	800b130 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b1ea:	f7fe fded 	bl	8009dc8 <HAL_GetTick>
 800b1ee:	1b80      	subs	r0, r0, r6
 800b1f0:	2819      	cmp	r0, #25
 800b1f2:	d9f6      	bls.n	800b1e2 <I2C_IsErrorOccurred+0xce>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800b1f4:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800b1f6:	f04f 0801 	mov.w	r8, #1
 800b1fa:	e799      	b.n	800b130 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 800b1fc:	f1b8 0f00 	cmp.w	r8, #0
 800b200:	d19d      	bne.n	800b13e <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b202:	2220      	movs	r2, #32
 800b204:	61da      	str	r2, [r3, #28]
 800b206:	e79a      	b.n	800b13e <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800b208:	4620      	mov	r0, r4
 800b20a:	e79b      	b.n	800b144 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 800b20c:	2800      	cmp	r0, #0
 800b20e:	d1b2      	bne.n	800b176 <I2C_IsErrorOccurred+0x62>
}
 800b210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b214 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800b214:	b570      	push	{r4, r5, r6, lr}
 800b216:	4604      	mov	r4, r0
 800b218:	460d      	mov	r5, r1
 800b21a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b21c:	6823      	ldr	r3, [r4, #0]
 800b21e:	699b      	ldr	r3, [r3, #24]
 800b220:	079b      	lsls	r3, r3, #30
 800b222:	d501      	bpl.n	800b228 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800b224:	2000      	movs	r0, #0
}
 800b226:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b228:	4632      	mov	r2, r6
 800b22a:	4629      	mov	r1, r5
 800b22c:	4620      	mov	r0, r4
 800b22e:	f7ff ff71 	bl	800b114 <I2C_IsErrorOccurred>
 800b232:	b9a0      	cbnz	r0, 800b25e <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800b234:	1c6a      	adds	r2, r5, #1
 800b236:	d0f1      	beq.n	800b21c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b238:	f7fe fdc6 	bl	8009dc8 <HAL_GetTick>
 800b23c:	1b80      	subs	r0, r0, r6
 800b23e:	42a8      	cmp	r0, r5
 800b240:	d801      	bhi.n	800b246 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800b242:	2d00      	cmp	r5, #0
 800b244:	d1ea      	bne.n	800b21c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b246:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b248:	f043 0320 	orr.w	r3, r3, #32
 800b24c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b24e:	2320      	movs	r3, #32
 800b250:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b254:	2300      	movs	r3, #0
 800b256:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800b25a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800b25e:	2001      	movs	r0, #1
 800b260:	e7e1      	b.n	800b226 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

0800b262 <I2C_WaitOnFlagUntilTimeout>:
{
 800b262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b266:	9f06      	ldr	r7, [sp, #24]
 800b268:	4604      	mov	r4, r0
 800b26a:	4688      	mov	r8, r1
 800b26c:	4616      	mov	r6, r2
 800b26e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b270:	6822      	ldr	r2, [r4, #0]
 800b272:	6993      	ldr	r3, [r2, #24]
 800b274:	ea38 0303 	bics.w	r3, r8, r3
 800b278:	bf0c      	ite	eq
 800b27a:	2301      	moveq	r3, #1
 800b27c:	2300      	movne	r3, #0
 800b27e:	42b3      	cmp	r3, r6
 800b280:	d001      	beq.n	800b286 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800b282:	2000      	movs	r0, #0
 800b284:	e015      	b.n	800b2b2 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800b286:	1c6b      	adds	r3, r5, #1
 800b288:	d0f3      	beq.n	800b272 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b28a:	f7fe fd9d 	bl	8009dc8 <HAL_GetTick>
 800b28e:	1bc0      	subs	r0, r0, r7
 800b290:	42a8      	cmp	r0, r5
 800b292:	d801      	bhi.n	800b298 <I2C_WaitOnFlagUntilTimeout+0x36>
 800b294:	2d00      	cmp	r5, #0
 800b296:	d1eb      	bne.n	800b270 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b298:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b29a:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b29c:	f043 0320 	orr.w	r3, r3, #32
 800b2a0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b2a2:	2320      	movs	r3, #32
 800b2a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800b2ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800b2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b2b6 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800b2b6:	b570      	push	{r4, r5, r6, lr}
 800b2b8:	4604      	mov	r4, r0
 800b2ba:	460d      	mov	r5, r1
 800b2bc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b2be:	6823      	ldr	r3, [r4, #0]
 800b2c0:	699b      	ldr	r3, [r3, #24]
 800b2c2:	069b      	lsls	r3, r3, #26
 800b2c4:	d501      	bpl.n	800b2ca <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800b2c6:	2000      	movs	r0, #0
}
 800b2c8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b2ca:	4632      	mov	r2, r6
 800b2cc:	4629      	mov	r1, r5
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	f7ff ff20 	bl	800b114 <I2C_IsErrorOccurred>
 800b2d4:	b990      	cbnz	r0, 800b2fc <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2d6:	f7fe fd77 	bl	8009dc8 <HAL_GetTick>
 800b2da:	1b80      	subs	r0, r0, r6
 800b2dc:	42a8      	cmp	r0, r5
 800b2de:	d801      	bhi.n	800b2e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800b2e0:	2d00      	cmp	r5, #0
 800b2e2:	d1ec      	bne.n	800b2be <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b2e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b2e6:	f043 0320 	orr.w	r3, r3, #32
 800b2ea:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b2ec:	2320      	movs	r3, #32
 800b2ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800b2f8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800b2fc:	2001      	movs	r0, #1
 800b2fe:	e7e3      	b.n	800b2c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

0800b300 <HAL_I2C_Init>:
{
 800b300:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800b302:	4604      	mov	r4, r0
 800b304:	2800      	cmp	r0, #0
 800b306:	d04a      	beq.n	800b39e <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b308:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b30c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b310:	b91b      	cbnz	r3, 800b31a <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800b312:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800b316:	f7f8 ff1b 	bl	8004150 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b31a:	2324      	movs	r3, #36	; 0x24
 800b31c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800b320:	6823      	ldr	r3, [r4, #0]
 800b322:	681a      	ldr	r2, [r3, #0]
 800b324:	f022 0201 	bic.w	r2, r2, #1
 800b328:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b32a:	6862      	ldr	r2, [r4, #4]
 800b32c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b330:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b332:	689a      	ldr	r2, [r3, #8]
 800b334:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b338:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b33a:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b33e:	2901      	cmp	r1, #1
 800b340:	d124      	bne.n	800b38c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b342:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b346:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b348:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b34a:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b34c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800b350:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b354:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b356:	68da      	ldr	r2, [r3, #12]
 800b358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b35c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b35e:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800b362:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b364:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b366:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b36a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b36c:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800b370:	430a      	orrs	r2, r1
 800b372:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	f042 0201 	orr.w	r2, r2, #1
 800b37a:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800b37c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b37e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b380:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b384:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b386:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800b38a:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b38c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b390:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b392:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b394:	d1d8      	bne.n	800b348 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b396:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b39a:	605a      	str	r2, [r3, #4]
 800b39c:	e7d4      	b.n	800b348 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800b39e:	2001      	movs	r0, #1
 800b3a0:	e7f3      	b.n	800b38a <HAL_I2C_Init+0x8a>

0800b3a2 <HAL_I2C_DeInit>:
{
 800b3a2:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800b3a4:	4604      	mov	r4, r0
 800b3a6:	b198      	cbz	r0, 800b3d0 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800b3a8:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b3aa:	2324      	movs	r3, #36	; 0x24
 800b3ac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800b3b0:	6813      	ldr	r3, [r2, #0]
 800b3b2:	f023 0301 	bic.w	r3, r3, #1
 800b3b6:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800b3b8:	f7f8 ff2c 	bl	8004214 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3bc:	2000      	movs	r0, #0
 800b3be:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800b3c0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800b3c4:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b3c8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3ca:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800b3ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b3d0:	2001      	movs	r0, #1
 800b3d2:	e7fc      	b.n	800b3ce <HAL_I2C_DeInit+0x2c>

0800b3d4 <HAL_I2C_Mem_Write>:
{
 800b3d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d8:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3da:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800b3de:	4604      	mov	r4, r0
 800b3e0:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3e2:	2b20      	cmp	r3, #32
{
 800b3e4:	4616      	mov	r6, r2
 800b3e6:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800b3ea:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3ee:	f040 80c6 	bne.w	800b57e <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800b3f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3f4:	b113      	cbz	r3, 800b3fc <HAL_I2C_Mem_Write+0x28>
 800b3f6:	f1ba 0f00 	cmp.w	sl, #0
 800b3fa:	d106      	bne.n	800b40a <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b3fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b400:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800b402:	2001      	movs	r0, #1
}
 800b404:	b003      	add	sp, #12
 800b406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800b40a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b40e:	2b01      	cmp	r3, #1
 800b410:	f000 80b5 	beq.w	800b57e <HAL_I2C_Mem_Write+0x1aa>
 800b414:	f04f 0b01 	mov.w	fp, #1
 800b418:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800b41c:	f7fe fcd4 	bl	8009dc8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b420:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800b422:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b424:	9000      	str	r0, [sp, #0]
 800b426:	465a      	mov	r2, fp
 800b428:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b42c:	4620      	mov	r0, r4
 800b42e:	f7ff ff18 	bl	800b262 <I2C_WaitOnFlagUntilTimeout>
 800b432:	2800      	cmp	r0, #0
 800b434:	d1e5      	bne.n	800b402 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b436:	2321      	movs	r3, #33	; 0x21
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b438:	fa5f f289 	uxtb.w	r2, r9
 800b43c:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 800b43e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b440:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b444:	2340      	movs	r3, #64	; 0x40
 800b446:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800b44a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b44c:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b44e:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800b450:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b452:	4b4c      	ldr	r3, [pc, #304]	; (800b584 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 800b454:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b45e:	f7ff fe43 	bl	800b0e8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b462:	462a      	mov	r2, r5
 800b464:	4641      	mov	r1, r8
 800b466:	4620      	mov	r0, r4
 800b468:	f7ff fed4 	bl	800b214 <I2C_WaitOnTXISFlagUntilTimeout>
 800b46c:	bb18      	cbnz	r0, 800b4b6 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b46e:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b472:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b474:	d115      	bne.n	800b4a2 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b476:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b478:	2200      	movs	r2, #0
 800b47a:	2180      	movs	r1, #128	; 0x80
 800b47c:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b47e:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b480:	4643      	mov	r3, r8
 800b482:	9500      	str	r5, [sp, #0]
 800b484:	f7ff feed 	bl	800b262 <I2C_WaitOnFlagUntilTimeout>
 800b488:	b9a8      	cbnz	r0, 800b4b6 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b48a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	2bff      	cmp	r3, #255	; 0xff
 800b490:	d815      	bhi.n	800b4be <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800b492:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b494:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b498:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800b49a:	b292      	uxth	r2, r2
 800b49c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b49e:	b2d2      	uxtb	r2, r2
 800b4a0:	e012      	b.n	800b4c8 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b4a2:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b4a4:	4641      	mov	r1, r8
 800b4a6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b4a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b4aa:	462a      	mov	r2, r5
 800b4ac:	f7ff feb2 	bl	800b214 <I2C_WaitOnTXISFlagUntilTimeout>
 800b4b0:	b908      	cbnz	r0, 800b4b6 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b4b2:	6823      	ldr	r3, [r4, #0]
 800b4b4:	e7df      	b.n	800b476 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800b4bc:	e7a1      	b.n	800b402 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b4be:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b4c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b4c4:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b4c6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b4c8:	4639      	mov	r1, r7
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	f7ff fe0c 	bl	800b0e8 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4d0:	462a      	mov	r2, r5
 800b4d2:	4641      	mov	r1, r8
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	f7ff fe9d 	bl	800b214 <I2C_WaitOnTXISFlagUntilTimeout>
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	d191      	bne.n	800b402 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b4de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4e0:	6822      	ldr	r2, [r4, #0]
 800b4e2:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b4e6:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800b4e8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800b4ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b4ec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b4ee:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800b4f0:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800b4f2:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800b4f4:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800b4f6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b4f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b4fa:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	b1b3      	cbz	r3, 800b52e <HAL_I2C_Mem_Write+0x15a>
 800b500:	b9aa      	cbnz	r2, 800b52e <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b502:	4643      	mov	r3, r8
 800b504:	2180      	movs	r1, #128	; 0x80
 800b506:	4620      	mov	r0, r4
 800b508:	9500      	str	r5, [sp, #0]
 800b50a:	f7ff feaa 	bl	800b262 <I2C_WaitOnFlagUntilTimeout>
 800b50e:	2800      	cmp	r0, #0
 800b510:	f47f af77 	bne.w	800b402 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b514:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b516:	b29b      	uxth	r3, r3
 800b518:	2bff      	cmp	r3, #255	; 0xff
 800b51a:	d928      	bls.n	800b56e <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b51c:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b51e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b522:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b524:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b526:	4639      	mov	r1, r7
 800b528:	4620      	mov	r0, r4
 800b52a:	f7ff fddd 	bl	800b0e8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800b52e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b530:	b29b      	uxth	r3, r3
 800b532:	2b00      	cmp	r3, #0
 800b534:	d1cc      	bne.n	800b4d0 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b536:	462a      	mov	r2, r5
 800b538:	4641      	mov	r1, r8
 800b53a:	4620      	mov	r0, r4
 800b53c:	f7ff febb 	bl	800b2b6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b540:	2800      	cmp	r0, #0
 800b542:	f47f af5e 	bne.w	800b402 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b546:	6823      	ldr	r3, [r4, #0]
 800b548:	2120      	movs	r1, #32
 800b54a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b54c:	685a      	ldr	r2, [r3, #4]
 800b54e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800b552:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800b556:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800b55a:	f022 0201 	bic.w	r2, r2, #1
 800b55e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b560:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b564:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b568:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800b56c:	e74a      	b.n	800b404 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800b56e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b570:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b574:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800b576:	b292      	uxth	r2, r2
 800b578:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b57a:	b2d2      	uxtb	r2, r2
 800b57c:	e7d3      	b.n	800b526 <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 800b57e:	2002      	movs	r0, #2
 800b580:	e740      	b.n	800b404 <HAL_I2C_Mem_Write+0x30>
 800b582:	bf00      	nop
 800b584:	80002000 	.word	0x80002000

0800b588 <HAL_I2C_Mem_Read>:
{
 800b588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b58c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b58e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800b592:	4604      	mov	r4, r0
 800b594:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b596:	2b20      	cmp	r3, #32
{
 800b598:	4616      	mov	r6, r2
 800b59a:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800b59e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b5a2:	f040 80c9 	bne.w	800b738 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 800b5a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5a8:	b113      	cbz	r3, 800b5b0 <HAL_I2C_Mem_Read+0x28>
 800b5aa:	f1ba 0f00 	cmp.w	sl, #0
 800b5ae:	d106      	bne.n	800b5be <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b5b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5b4:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800b5b6:	2001      	movs	r0, #1
}
 800b5b8:	b003      	add	sp, #12
 800b5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800b5be:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	f000 80b8 	beq.w	800b738 <HAL_I2C_Mem_Read+0x1b0>
 800b5c8:	f04f 0b01 	mov.w	fp, #1
 800b5cc:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800b5d0:	f7fe fbfa 	bl	8009dc8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b5d4:	2319      	movs	r3, #25
 800b5d6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800b5d8:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b5da:	465a      	mov	r2, fp
 800b5dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f7ff fe3e 	bl	800b262 <I2C_WaitOnFlagUntilTimeout>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	d1e4      	bne.n	800b5b6 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b5ec:	2222      	movs	r2, #34	; 0x22
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b5ee:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 800b5f0:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b5f2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b5f6:	2240      	movs	r2, #64	; 0x40
 800b5f8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800b5fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b5fe:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b600:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800b602:	6262      	str	r2, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b604:	4a4d      	ldr	r2, [pc, #308]	; (800b73c <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 800b606:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b60a:	9200      	str	r2, [sp, #0]
 800b60c:	fa5f f289 	uxtb.w	r2, r9
 800b610:	f7ff fd6a 	bl	800b0e8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b614:	462a      	mov	r2, r5
 800b616:	4641      	mov	r1, r8
 800b618:	4620      	mov	r0, r4
 800b61a:	f7ff fdfb 	bl	800b214 <I2C_WaitOnTXISFlagUntilTimeout>
 800b61e:	bb20      	cbnz	r0, 800b66a <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b620:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b624:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b626:	d116      	bne.n	800b656 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b628:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b62a:	2200      	movs	r2, #0
 800b62c:	2140      	movs	r1, #64	; 0x40
 800b62e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b630:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b632:	4643      	mov	r3, r8
 800b634:	9500      	str	r5, [sp, #0]
 800b636:	f7ff fe14 	bl	800b262 <I2C_WaitOnFlagUntilTimeout>
 800b63a:	b9b0      	cbnz	r0, 800b66a <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b63c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b63e:	b29b      	uxth	r3, r3
 800b640:	2bff      	cmp	r3, #255	; 0xff
 800b642:	4b3f      	ldr	r3, [pc, #252]	; (800b740 <HAL_I2C_Mem_Read+0x1b8>)
 800b644:	d815      	bhi.n	800b672 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800b646:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b648:	9300      	str	r3, [sp, #0]
 800b64a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800b64e:	b292      	uxth	r2, r2
 800b650:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b652:	b2d2      	uxtb	r2, r2
 800b654:	e012      	b.n	800b67c <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b656:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b658:	4641      	mov	r1, r8
 800b65a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b65c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b65e:	462a      	mov	r2, r5
 800b660:	f7ff fdd8 	bl	800b214 <I2C_WaitOnTXISFlagUntilTimeout>
 800b664:	b908      	cbnz	r0, 800b66a <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b666:	6823      	ldr	r3, [r4, #0]
 800b668:	e7de      	b.n	800b628 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 800b66a:	2300      	movs	r3, #0
 800b66c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800b670:	e7a1      	b.n	800b5b6 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b672:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b674:	9300      	str	r3, [sp, #0]
 800b676:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b67a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b67c:	4639      	mov	r1, r7
 800b67e:	4620      	mov	r0, r4
 800b680:	f7ff fd32 	bl	800b0e8 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b684:	4643      	mov	r3, r8
 800b686:	2200      	movs	r2, #0
 800b688:	2104      	movs	r1, #4
 800b68a:	4620      	mov	r0, r4
 800b68c:	9500      	str	r5, [sp, #0]
 800b68e:	f7ff fde8 	bl	800b262 <I2C_WaitOnFlagUntilTimeout>
 800b692:	2800      	cmp	r0, #0
 800b694:	d18f      	bne.n	800b5b6 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b696:	6823      	ldr	r3, [r4, #0]
 800b698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b69a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b69c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800b69e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800b6a0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800b6a2:	3301      	adds	r3, #1
      hi2c->XferSize--;
 800b6a4:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800b6a6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800b6a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b6aa:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800b6ac:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800b6ae:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b6b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	b1b3      	cbz	r3, 800b6e8 <HAL_I2C_Mem_Read+0x160>
 800b6ba:	b9aa      	cbnz	r2, 800b6e8 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b6bc:	4643      	mov	r3, r8
 800b6be:	2180      	movs	r1, #128	; 0x80
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	9500      	str	r5, [sp, #0]
 800b6c4:	f7ff fdcd 	bl	800b262 <I2C_WaitOnFlagUntilTimeout>
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	f47f af74 	bne.w	800b5b6 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b6ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	2bff      	cmp	r3, #255	; 0xff
 800b6d4:	d928      	bls.n	800b728 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b6d6:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b6d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b6dc:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b6de:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b6e0:	4639      	mov	r1, r7
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	f7ff fd00 	bl	800b0e8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800b6e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d1c9      	bne.n	800b684 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6f0:	462a      	mov	r2, r5
 800b6f2:	4641      	mov	r1, r8
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	f7ff fdde 	bl	800b2b6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	f47f af5b 	bne.w	800b5b6 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b700:	6823      	ldr	r3, [r4, #0]
 800b702:	2120      	movs	r1, #32
 800b704:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b706:	685a      	ldr	r2, [r3, #4]
 800b708:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800b70c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800b710:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800b714:	f022 0201 	bic.w	r2, r2, #1
 800b718:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b71a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b71e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b722:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800b726:	e747      	b.n	800b5b8 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800b728:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b72a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b72e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800b730:	b292      	uxth	r2, r2
 800b732:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b734:	b2d2      	uxtb	r2, r2
 800b736:	e7d3      	b.n	800b6e0 <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 800b738:	2002      	movs	r0, #2
 800b73a:	e73d      	b.n	800b5b8 <HAL_I2C_Mem_Read+0x30>
 800b73c:	80002000 	.word	0x80002000
 800b740:	80002400 	.word	0x80002400

0800b744 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b744:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 800b746:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b748:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b74a:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 800b74c:	b103      	cbz	r3, 800b750 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 800b74e:	4718      	bx	r3
}
 800b750:	4770      	bx	lr

0800b752 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b752:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b754:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b758:	2b20      	cmp	r3, #32
 800b75a:	b2dc      	uxtb	r4, r3
 800b75c:	d11d      	bne.n	800b79a <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b75e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b762:	2b01      	cmp	r3, #1
 800b764:	d019      	beq.n	800b79a <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b766:	2324      	movs	r3, #36	; 0x24
 800b768:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b76c:	6803      	ldr	r3, [r0, #0]
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	f022 0201 	bic.w	r2, r2, #1
 800b774:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b77c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	4311      	orrs	r1, r2
 800b782:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	f042 0201 	orr.w	r2, r2, #1
 800b78a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b78c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800b78e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b792:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800b796:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800b798:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800b79a:	2002      	movs	r0, #2
 800b79c:	e7fc      	b.n	800b798 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800b79e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b79e:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7a0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b7a4:	2b20      	cmp	r3, #32
 800b7a6:	b2dc      	uxtb	r4, r3
 800b7a8:	d11c      	bne.n	800b7e4 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b7aa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d018      	beq.n	800b7e4 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b7b2:	2324      	movs	r3, #36	; 0x24
 800b7b4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b7b8:	6803      	ldr	r3, [r0, #0]
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	f022 0201 	bic.w	r2, r2, #1
 800b7c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b7c2:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b7c4:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b7c8:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b7cc:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	f042 0201 	orr.w	r2, r2, #1
 800b7d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b7d6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800b7d8:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b7dc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800b7e0:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800b7e2:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800b7e4:	2002      	movs	r0, #2
 800b7e6:	e7fc      	b.n	800b7e2 <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800b7e8 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800b7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7ea:	3801      	subs	r0, #1
 800b7ec:	2601      	movs	r6, #1
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800b7ee:	2500      	movs	r5, #0
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 800b7f0:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    if ((p + i) > 256UL)
 800b7f4:	462f      	mov	r7, r5
 800b7f6:	4425      	add	r5, r4
 800b7f8:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800b7fc:	d822      	bhi.n	800b844 <JPEG_Bits_To_SizeCodes+0x5c>
 800b7fe:	440f      	add	r7, r1
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 800b800:	b954      	cbnz	r4, 800b818 <JPEG_Bits_To_SizeCodes+0x30>
  for (l = 0; l < 16UL; l++)
 800b802:	3601      	adds	r6, #1
 800b804:	2e11      	cmp	r6, #17
 800b806:	d1f3      	bne.n	800b7f0 <JPEG_Bits_To_SizeCodes+0x8>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 800b808:	554c      	strb	r4, [r1, r5]
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800b80a:	2601      	movs	r6, #1
  *LastK = p;
 800b80c:	601d      	str	r5, [r3, #0]
  code = 0;
 800b80e:	4623      	mov	r3, r4
  si = Huffsize[0];
 800b810:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 800b812:	5d08      	ldrb	r0, [r1, r4]
 800b814:	b9a0      	cbnz	r0, 800b840 <JPEG_Bits_To_SizeCodes+0x58>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 800b816:	bdf0      	pop	{r4, r5, r6, r7, pc}
      i--;
 800b818:	3c01      	subs	r4, #1
      Huffsize[p] = (uint8_t) l + 1U;
 800b81a:	f807 6b01 	strb.w	r6, [r7], #1
      i--;
 800b81e:	e7ef      	b.n	800b800 <JPEG_Bits_To_SizeCodes+0x18>
      Huffcode[p] = code;
 800b820:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
      p++;
 800b824:	3401      	adds	r4, #1
    while (((uint32_t) Huffsize[p]) == si)
 800b826:	5d08      	ldrb	r0, [r1, r4]
 800b828:	193b      	adds	r3, r7, r4
 800b82a:	42a8      	cmp	r0, r5
 800b82c:	d0f8      	beq.n	800b820 <JPEG_Bits_To_SizeCodes+0x38>
    if(si > 31UL)
 800b82e:	2d1f      	cmp	r5, #31
 800b830:	d808      	bhi.n	800b844 <JPEG_Bits_To_SizeCodes+0x5c>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800b832:	fa06 f005 	lsl.w	r0, r6, r5
 800b836:	4298      	cmp	r0, r3
 800b838:	d904      	bls.n	800b844 <JPEG_Bits_To_SizeCodes+0x5c>
    code <<= 1;
 800b83a:	005b      	lsls	r3, r3, #1
    si++;
 800b83c:	3501      	adds	r5, #1
 800b83e:	e7e8      	b.n	800b812 <JPEG_Bits_To_SizeCodes+0x2a>
 800b840:	1b1f      	subs	r7, r3, r4
 800b842:	e7f0      	b.n	800b826 <JPEG_Bits_To_SizeCodes+0x3e>
      return HAL_ERROR;
 800b844:	2001      	movs	r0, #1
 800b846:	e7e6      	b.n	800b816 <JPEG_Bits_To_SizeCodes+0x2e>

0800b848 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800b848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b84a:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
 800b84e:	460d      	mov	r5, r1
 800b850:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800b852:	ab01      	add	r3, sp, #4
 800b854:	aa43      	add	r2, sp, #268	; 0x10c
 800b856:	a902      	add	r1, sp, #8
 800b858:	f7ff ffc6 	bl	800b7e8 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800b85c:	b938      	cbnz	r0, 800b86e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 800b85e:	9e01      	ldr	r6, [sp, #4]
 800b860:	460b      	mov	r3, r1
 800b862:	f104 010f 	add.w	r1, r4, #15
 800b866:	360f      	adds	r6, #15
 800b868:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 800b86a:	42a1      	cmp	r1, r4
 800b86c:	d102      	bne.n	800b874 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800b86e:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
 800b872:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 800b874:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800b878:	2e0b      	cmp	r6, #11
 800b87a:	d80a      	bhi.n	800b892 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800b87c:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800b880:	f852 cb04 	ldr.w	ip, [r2], #4
 800b884:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800b888:	f813 7b01 	ldrb.w	r7, [r3], #1
 800b88c:	3f01      	subs	r7, #1
 800b88e:	55af      	strb	r7, [r5, r6]
      k++;
 800b890:	e7eb      	b.n	800b86a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800b892:	2001      	movs	r0, #1
 800b894:	e7eb      	b.n	800b86e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

0800b896 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800b896:	4603      	mov	r3, r0
 800b898:	4608      	mov	r0, r1
 800b89a:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800b89c:	681c      	ldr	r4, [r3, #0]
{
 800b89e:	b091      	sub	sp, #68	; 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800b8a0:	f504 63f8 	add.w	r3, r4, #1984	; 0x7c0
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d125      	bne.n	800b8f4 <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800b8a8:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800b8ac:	a901      	add	r1, sp, #4
 800b8ae:	f7ff ffcb 	bl	800b848 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 800b8b2:	b9e8      	cbnz	r0, 800b8f0 <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 800b8b4:	aa01      	add	r2, sp, #4
 800b8b6:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 800b8ba:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 800b8be:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 800b8c0:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 800b8c2:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800b8c4:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 800b8c6:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800b8c8:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    while (i > 1UL)
 800b8cc:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800b8ce:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800b8d0:	f895 703c 	ldrb.w	r7, [r5, #60]	; 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800b8d4:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 800b8d8:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800b8da:	7b13      	ldrb	r3, [r2, #12]
 800b8dc:	021b      	lsls	r3, r3, #8
 800b8de:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b8e2:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800b8e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b8e8:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800b8ec:	42b4      	cmp	r4, r6
 800b8ee:	d1e9      	bne.n	800b8c4 <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800b8f0:	b011      	add	sp, #68	; 0x44
 800b8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800b8f4:	f504 63fc 	add.w	r3, r4, #2016	; 0x7e0
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d102      	bne.n	800b902 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800b8fc:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
 800b900:	e7d4      	b.n	800b8ac <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 800b902:	2001      	movs	r0, #1
 800b904:	e7f4      	b.n	800b8f0 <JPEG_Set_HuffDC_Mem+0x5a>

0800b906 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800b906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800b90a:	6804      	ldr	r4, [r0, #0]
{
 800b90c:	f6ad 0d38 	subw	sp, sp, #2104	; 0x838
 800b910:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800b912:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 800b916:	429a      	cmp	r2, r3
 800b918:	d116      	bne.n	800b948 <JPEG_Set_HuffAC_Mem+0x42>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800b91a:	f204 6444 	addw	r4, r4, #1604	; 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800b91e:	466b      	mov	r3, sp
 800b920:	f20d 4234 	addw	r2, sp, #1076	; 0x434
 800b924:	a901      	add	r1, sp, #4
 800b926:	4628      	mov	r0, r5
 800b928:	f7ff ff5e 	bl	800b7e8 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800b92c:	2800      	cmp	r0, #0
 800b92e:	d15e      	bne.n	800b9ee <JPEG_Set_HuffAC_Mem+0xe8>
 800b930:	9b00      	ldr	r3, [sp, #0]
 800b932:	4616      	mov	r6, r2
 800b934:	f105 070f 	add.w	r7, r5, #15
 800b938:	460a      	mov	r2, r1
 800b93a:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800b93c:	f04f 0e0a 	mov.w	lr, #10
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800b940:	f50d 7c84 	add.w	ip, sp, #264	; 0x108
 800b944:	18e9      	adds	r1, r5, r3
 800b946:	e021      	b.n	800b98c <JPEG_Set_HuffAC_Mem+0x86>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800b948:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d10f      	bne.n	800b970 <JPEG_Set_HuffAC_Mem+0x6a>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800b950:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
 800b954:	e7e3      	b.n	800b91e <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 800b956:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    if (l == 0UL)
 800b95a:	b15b      	cbz	r3, 800b974 <JPEG_Set_HuffAC_Mem+0x6e>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800b95c:	2bf0      	cmp	r3, #240	; 0xf0
 800b95e:	d04a      	beq.n	800b9f6 <JPEG_Set_HuffAC_Mem+0xf0>
      msb = (l & 0xF0UL) >> 4;
 800b960:	091d      	lsrs	r5, r3, #4
      lsb = (l & 0x0FUL);
 800b962:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800b966:	3b01      	subs	r3, #1
 800b968:	fb0e 3305 	mla	r3, lr, r5, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800b96c:	2ba1      	cmp	r3, #161	; 0xa1
 800b96e:	d902      	bls.n	800b976 <JPEG_Set_HuffAC_Mem+0x70>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800b970:	2001      	movs	r0, #1
  }

  if (HuffTableAC != NULL)
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
    if (error != HAL_OK)
 800b972:	e03c      	b.n	800b9ee <JPEG_Set_HuffAC_Mem+0xe8>
      l = 160; /*l = 0x00 EOB code*/
 800b974:	23a0      	movs	r3, #160	; 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800b976:	eb0c 0583 	add.w	r5, ip, r3, lsl #2
 800b97a:	f856 8b04 	ldr.w	r8, [r6], #4
 800b97e:	f8c5 80a4 	str.w	r8, [r5, #164]	; 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800b982:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b986:	3d01      	subs	r5, #1
 800b988:	f80c 5003 	strb.w	r5, [ip, r3]
  while (k < lastK)
 800b98c:	42b9      	cmp	r1, r7
 800b98e:	d1e2      	bne.n	800b956 <JPEG_Set_HuffAC_Mem+0x50>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 800b990:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
 800b994:	a942      	add	r1, sp, #264	; 0x108
 800b996:	f5a4 76a2 	sub.w	r6, r4, #324	; 0x144
 800b99a:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 800b99c:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 800b99e:	6063      	str	r3, [r4, #4]
 800b9a0:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 800b9a2:	f103 33d1 	add.w	r3, r3, #3520188881	; 0xd1d1d1d1
 800b9a6:	f103 232e 	add.w	r3, r3, #771763712	; 0x2e002e00
 800b9aa:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 800b9ac:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 800b9b0:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 800b9b2:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 800b9b6:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800b9b8:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
 800b9bc:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800b9be:	f891 20a1 	ldrb.w	r2, [r1, #161]	; 0xa1
    while (i > 1UL)
 800b9c2:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800b9c4:	f895 3330 	ldrb.w	r3, [r5, #816]	; 0x330
    while (i > 1UL)
 800b9c8:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800b9ca:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800b9cc:	f895 732c 	ldrb.w	r7, [r5, #812]	; 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800b9d0:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800b9d4:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800b9d6:	f891 30a2 	ldrb.w	r3, [r1, #162]	; 0xa2
 800b9da:	021b      	lsls	r3, r3, #8
 800b9dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b9e0:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800b9e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9e6:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800b9ea:	42b4      	cmp	r4, r6
 800b9ec:	d1e7      	bne.n	800b9be <JPEG_Set_HuffAC_Mem+0xb8>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800b9ee:	f60d 0d38 	addw	sp, sp, #2104	; 0x838
 800b9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      l = 161;
 800b9f6:	23a1      	movs	r3, #161	; 0xa1
 800b9f8:	e7bd      	b.n	800b976 <JPEG_Set_HuffAC_Mem+0x70>

0800b9fa <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800b9fa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800b9fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800ba00:	6543      	str	r3, [r0, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ba02:	6d42      	ldr	r2, [r0, #84]	; 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800ba04:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ba06:	f002 0203 	and.w	r2, r2, #3
 800ba0a:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800ba0c:	685a      	ldr	r2, [r3, #4]
 800ba0e:	bf0c      	ite	eq
 800ba10:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800ba14:	f022 0208 	bicne.w	r2, r2, #8
 800ba18:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	f022 0201 	bic.w	r2, r2, #1
 800ba20:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ba22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba24:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800ba28:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 800ba2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba2c:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 800ba30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800ba32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ba38:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800ba3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ba40:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800ba42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba44:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800ba48:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	f042 0201 	orr.w	r2, r2, #1
 800ba50:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ba52:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800ba54:	f002 020c 	and.w	r2, r2, #12
 800ba58:	2a08      	cmp	r2, #8
 800ba5a:	d104      	bne.n	800ba66 <JPEG_Init_Process+0x6c>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800ba5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba5e:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800ba62:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800ba64:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ba66:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800ba68:	f002 020c 	and.w	r2, r2, #12
 800ba6c:	2a0c      	cmp	r2, #12
 800ba6e:	d1f9      	bne.n	800ba64 <JPEG_Init_Process+0x6a>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800ba70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba72:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800ba76:	e7f4      	b.n	800ba62 <JPEG_Init_Process+0x68>

0800ba78 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800ba78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 800ba7a:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 800ba7c:	4604      	mov	r4, r0
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 800ba7e:	2b03      	cmp	r3, #3
 800ba80:	d927      	bls.n	800bad2 <JPEG_DMA_StartProcess+0x5a>
 800ba82:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800ba84:	2903      	cmp	r1, #3
 800ba86:	d924      	bls.n	800bad2 <JPEG_DMA_StartProcess+0x5a>
  {
    return HAL_ERROR;
  }
  /* Reset Ending DMA internal context flag*/
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 800ba88:	6d42      	ldr	r2, [r0, #84]	; 0x54
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
  /* Set the DMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800ba8a:	f023 0303 	bic.w	r3, r3, #3
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 800ba8e:	4d1a      	ldr	r5, [pc, #104]	; (800baf8 <JPEG_DMA_StartProcess+0x80>)

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 800ba90:	f021 0103 	bic.w	r1, r1, #3
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 800ba94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 800ba98:	4e18      	ldr	r6, [pc, #96]	; (800bafc <JPEG_DMA_StartProcess+0x84>)
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 800ba9a:	4f19      	ldr	r7, [pc, #100]	; (800bb00 <JPEG_DMA_StartProcess+0x88>)
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 800ba9c:	6542      	str	r2, [r0, #84]	; 0x54
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800ba9e:	6802      	ldr	r2, [r0, #0]
 800baa0:	6b10      	ldr	r0, [r2, #48]	; 0x30

  /* Start DMA FIFO In transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800baa2:	3240      	adds	r2, #64	; 0x40
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800baa4:	f420 50c0 	bic.w	r0, r0, #6144	; 0x1800
 800baa8:	f842 0c10 	str.w	r0, [r2, #-16]
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 800baac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800baae:	63c5      	str	r5, [r0, #60]	; 0x3c
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 800bab0:	6b65      	ldr	r5, [r4, #52]	; 0x34
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 800bab2:	64c6      	str	r6, [r0, #76]	; 0x4c
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
 800bab4:	64ee      	str	r6, [r5, #76]	; 0x4c
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 800bab6:	4e13      	ldr	r6, [pc, #76]	; (800bb04 <JPEG_DMA_StartProcess+0x8c>)
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 800bab8:	63ef      	str	r7, [r5, #60]	; 0x3c
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 800baba:	652e      	str	r6, [r5, #80]	; 0x50
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800babc:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800babe:	089b      	lsrs	r3, r3, #2
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 800bac0:	62e1      	str	r1, [r4, #44]	; 0x2c
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800bac2:	69a1      	ldr	r1, [r4, #24]
 800bac4:	f7fe fb38 	bl	800a138 <HAL_DMA_Start_IT>
 800bac8:	b128      	cbz	r0, 800bad6 <JPEG_DMA_StartProcess+0x5e>

  /* Start DMA FIFO Out transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
                       hjpeg->OutDataLength >> 2)  != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800baca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bacc:	f043 0304 	orr.w	r3, r3, #4
 800bad0:	6523      	str	r3, [r4, #80]	; 0x50
    return HAL_ERROR;
 800bad2:	2001      	movs	r0, #1
 800bad4:	e00e      	b.n	800baf4 <JPEG_DMA_StartProcess+0x7c>
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800bad6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bad8:	6821      	ldr	r1, [r4, #0]
 800bada:	089b      	lsrs	r3, r3, #2
 800badc:	69e2      	ldr	r2, [r4, #28]
 800bade:	3144      	adds	r1, #68	; 0x44
 800bae0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800bae2:	f7fe fb29 	bl	800a138 <HAL_DMA_Start_IT>
 800bae6:	2800      	cmp	r0, #0
 800bae8:	d1ef      	bne.n	800baca <JPEG_DMA_StartProcess+0x52>
    return HAL_ERROR;
  }

  /* Enable JPEG In/Out DMA requests*/
  JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA | JPEG_DMA_ODMA);
 800baea:	6822      	ldr	r2, [r4, #0]
 800baec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800baee:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 800baf2:	6313      	str	r3, [r2, #48]	; 0x30

  return HAL_OK;
}
 800baf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800baf6:	bf00      	nop
 800baf8:	0800c06d 	.word	0x0800c06d
 800bafc:	0800bf51 	.word	0x0800bf51
 800bb00:	0800c521 	.word	0x0800c521
 800bb04:	0800c511 	.word	0x0800c511

0800bb08 <HAL_JPEG_Init>:
{
 800bb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	2800      	cmp	r0, #0
 800bb0e:	f000 811f 	beq.w	800bd50 <HAL_JPEG_Init+0x248>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800bb12:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 800bb16:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bb1a:	b91b      	cbnz	r3, 800bb24 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 800bb1c:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    HAL_JPEG_MspInit(hjpeg);
 800bb20:	f7f8 fb9a 	bl	8004258 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 800bb24:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800bb26:	2302      	movs	r3, #2
 800bb28:	498a      	ldr	r1, [pc, #552]	; (800bd54 <HAL_JPEG_Init+0x24c>)
 800bb2a:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 800bb2e:	f502 705b 	add.w	r0, r2, #876	; 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 800bb32:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800bb34:	f502 7557 	add.w	r5, r2, #860	; 0x35c
 800bb38:	f043 0301 	orr.w	r3, r3, #1
 800bb3c:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800bb3e:	6813      	ldr	r3, [r2, #0]
 800bb40:	f023 0301 	bic.w	r3, r3, #1
 800bb44:	6013      	str	r3, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800bb46:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800bb48:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 800bb4c:	6313      	str	r3, [r2, #48]	; 0x30
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 800bb4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800bb50:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800bb54:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800bb56:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800bb58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bb5c:	6313      	str	r3, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800bb5e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800bb60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bb64:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800bb66:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800bb68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800bb6c:	6393      	str	r3, [r2, #56]	; 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800bb6e:	4b7a      	ldr	r3, [pc, #488]	; (800bd58 <HAL_JPEG_Init+0x250>)
 800bb70:	63e3      	str	r3, [r4, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800bb72:	4b7a      	ldr	r3, [pc, #488]	; (800bd5c <HAL_JPEG_Init+0x254>)
 800bb74:	6423      	str	r3, [r4, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 800bb76:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 800bb78:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800bb7c:	7b8b      	ldrb	r3, [r1, #14]
  while (index > 3UL)
 800bb7e:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800bb80:	7cce      	ldrb	r6, [r1, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800bb82:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800bb84:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800bb88:	7c0e      	ldrb	r6, [r1, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800bb8a:	4333      	orrs	r3, r6
 800bb8c:	7c4e      	ldrb	r6, [r1, #17]
 800bb8e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800bb92:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800bb96:	42a8      	cmp	r0, r5
 800bb98:	d1f0      	bne.n	800bb7c <HAL_JPEG_Init+0x74>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800bb9a:	4b71      	ldr	r3, [pc, #452]	; (800bd60 <HAL_JPEG_Init+0x258>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800bb9c:	f502 7662 	add.w	r6, r2, #904	; 0x388
 800bba0:	4970      	ldr	r1, [pc, #448]	; (800bd64 <HAL_JPEG_Init+0x25c>)
 800bba2:	f502 775e 	add.w	r7, r2, #888	; 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800bba6:	f8c2 3378 	str.w	r3, [r2, #888]	; 0x378
 800bbaa:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800bbae:	460d      	mov	r5, r1
 800bbb0:	4630      	mov	r0, r6
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800bbb2:	f8c2 3374 	str.w	r3, [r2, #884]	; 0x374
 800bbb6:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
 800bbba:	f8c2 3370 	str.w	r3, [r2, #880]	; 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800bbbe:	7bab      	ldrb	r3, [r5, #14]
  while (index > 3UL)
 800bbc0:	3d04      	subs	r5, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800bbc2:	f895 c013 	ldrb.w	ip, [r5, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800bbc6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800bbc8:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800bbcc:	f895 c010 	ldrb.w	ip, [r5, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800bbd0:	ea43 030c 	orr.w	r3, r3, ip
 800bbd4:	f895 c011 	ldrb.w	ip, [r5, #17]
 800bbd8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800bbdc:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 800bbe0:	42be      	cmp	r6, r7
 800bbe2:	d1ec      	bne.n	800bbbe <HAL_JPEG_Init+0xb6>
  value = *address & 0xFFFF0000U;
 800bbe4:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800bbe8:	f502 6585 	add.w	r5, r2, #1064	; 0x428
  value = *address & 0xFFFF0000U;
 800bbec:	0c1b      	lsrs	r3, r3, #16
 800bbee:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800bbf0:	f443 437a 	orr.w	r3, r3, #64000	; 0xfa00
 800bbf4:	f043 03f9 	orr.w	r3, r3, #249	; 0xf9
  *address = value;
 800bbf8:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800bbfc:	f891 30ae 	ldrb.w	r3, [r1, #174]	; 0xae
  while (index > 3UL)
 800bc00:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800bc02:	f891 60b3 	ldrb.w	r6, [r1, #179]	; 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800bc06:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800bc08:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800bc0c:	f891 60b0 	ldrb.w	r6, [r1, #176]	; 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800bc10:	4333      	orrs	r3, r6
 800bc12:	f891 60b1 	ldrb.w	r6, [r1, #177]	; 0xb1
 800bc16:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800bc1a:	f845 3904 	str.w	r3, [r5], #-4
  while (index > 3UL)
 800bc1e:	4285      	cmp	r5, r0
 800bc20:	d1ec      	bne.n	800bbfc <HAL_JPEG_Init+0xf4>
  value = *address & 0x0000FFFFU;
 800bc22:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 800bc26:	f502 609f 	add.w	r0, r2, #1272	; 0x4f8
  value = *address & 0xFFFF0000U;
 800bc2a:	494f      	ldr	r1, [pc, #316]	; (800bd68 <HAL_JPEG_Init+0x260>)
 800bc2c:	f502 658b 	add.w	r5, r2, #1112	; 0x458
  value = *address & 0x0000FFFFU;
 800bc30:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800bc32:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
  *address = value;
 800bc36:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
  value = *address & 0xFFFF0000U;
 800bc3a:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
 800bc3e:	400b      	ands	r3, r1
  *address = value;
 800bc40:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800bc44:	2301      	movs	r3, #1
 800bc46:	f8c2 3438 	str.w	r3, [r2, #1080]	; 0x438
 800bc4a:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 800bc4e:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
 800bc52:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  value = *address & 0x0000FFFFUL;
 800bc56:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
 800bc5a:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800bc5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
 800bc60:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
  value = *address & 0xFFFF0000UL;
 800bc64:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
 800bc68:	400b      	ands	r3, r1
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800bc6a:	f443 6330 	orr.w	r3, r3, #2816	; 0xb00
 800bc6e:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 800bc72:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800bc76:	4b3d      	ldr	r3, [pc, #244]	; (800bd6c <HAL_JPEG_Init+0x264>)
 800bc78:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444
 800bc7c:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
 800bc80:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
  value = *address & 0x0000FFFFU;
 800bc84:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
 800bc88:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800bc8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  *address = value;
 800bc8e:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
  value = *address & 0xFFFF0000U;
 800bc92:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 800bc96:	400b      	ands	r3, r1
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800bc98:	4935      	ldr	r1, [pc, #212]	; (800bd70 <HAL_JPEG_Init+0x268>)
 800bc9a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800bc9e:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 800bca2:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800bca6:	4b33      	ldr	r3, [pc, #204]	; (800bd74 <HAL_JPEG_Init+0x26c>)
 800bca8:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454
 800bcac:	4b32      	ldr	r3, [pc, #200]	; (800bd78 <HAL_JPEG_Init+0x270>)
 800bcae:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450
 800bcb2:	4b32      	ldr	r3, [pc, #200]	; (800bd7c <HAL_JPEG_Init+0x274>)
 800bcb4:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
  value = *address & 0x0000FFFFUL;
 800bcb8:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
 800bcbc:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800bcbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
 800bcc2:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800bcc6:	f891 30b0 	ldrb.w	r3, [r1, #176]	; 0xb0
  while (index > 3UL)
 800bcca:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800bccc:	f891 60b5 	ldrb.w	r6, [r1, #181]	; 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800bcd0:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800bcd2:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800bcd6:	f891 60b2 	ldrb.w	r6, [r1, #178]	; 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800bcda:	4333      	orrs	r3, r6
 800bcdc:	f891 60b3 	ldrb.w	r6, [r1, #179]	; 0xb3
 800bce0:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800bce4:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800bce8:	42a8      	cmp	r0, r5
 800bcea:	d1ec      	bne.n	800bcc6 <HAL_JPEG_Init+0x1be>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800bcec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bcf0:	491c      	ldr	r1, [pc, #112]	; (800bd64 <HAL_JPEG_Init+0x25c>)
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	f7ff fe07 	bl	800b906 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800bcf8:	b110      	cbz	r0, 800bd00 <HAL_JPEG_Init+0x1f8>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800bcfa:	2001      	movs	r0, #1
 800bcfc:	6520      	str	r0, [r4, #80]	; 0x50
}
 800bcfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                              (hjpeg->Instance->HUFFENC_AC1));
 800bd00:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800bd02:	4620      	mov	r0, r4
 800bd04:	491a      	ldr	r1, [pc, #104]	; (800bd70 <HAL_JPEG_Init+0x268>)
 800bd06:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
 800bd0a:	f7ff fdfc 	bl	800b906 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	d1f3      	bne.n	800bcfa <HAL_JPEG_Init+0x1f2>
                              hjpeg->Instance->HUFFENC_DC0);
 800bd12:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800bd14:	4620      	mov	r0, r4
 800bd16:	490f      	ldr	r1, [pc, #60]	; (800bd54 <HAL_JPEG_Init+0x24c>)
 800bd18:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 800bd1c:	f7ff fdbb 	bl	800b896 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 800bd20:	2800      	cmp	r0, #0
 800bd22:	d1ea      	bne.n	800bcfa <HAL_JPEG_Init+0x1f2>
                              hjpeg->Instance->HUFFENC_DC1);
 800bd24:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800bd26:	4620      	mov	r0, r4
 800bd28:	4915      	ldr	r1, [pc, #84]	; (800bd80 <HAL_JPEG_Init+0x278>)
 800bd2a:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
 800bd2e:	f7ff fdb2 	bl	800b896 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800bd32:	2800      	cmp	r0, #0
 800bd34:	d1e1      	bne.n	800bcfa <HAL_JPEG_Init+0x1f2>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800bd36:	6822      	ldr	r2, [r4, #0]
 800bd38:	6853      	ldr	r3, [r2, #4]
 800bd3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd3e:	6053      	str	r3, [r2, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 800bd40:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 800bd42:	6220      	str	r0, [r4, #32]
  hjpeg->JpegOutCount = 0;
 800bd44:	6260      	str	r0, [r4, #36]	; 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 800bd46:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800bd4a:	6520      	str	r0, [r4, #80]	; 0x50
  hjpeg->Context = 0;
 800bd4c:	6560      	str	r0, [r4, #84]	; 0x54
  return HAL_OK;
 800bd4e:	e7d6      	b.n	800bcfe <HAL_JPEG_Init+0x1f6>
    return HAL_ERROR;
 800bd50:	2001      	movs	r0, #1
 800bd52:	e7d4      	b.n	800bcfe <HAL_JPEG_Init+0x1f6>
 800bd54:	0802ff01 	.word	0x0802ff01
 800bd58:	0802ff1d 	.word	0x0802ff1d
 800bd5c:	0802fea5 	.word	0x0802fea5
 800bd60:	0b0a0908 	.word	0x0b0a0908
 800bd64:	0802fdf3 	.word	0x0802fdf3
 800bd68:	ffff0000 	.word	0xffff0000
 800bd6c:	09080706 	.word	0x09080706
 800bd70:	0802fd41 	.word	0x0802fd41
 800bd74:	01000404 	.word	0x01000404
 800bd78:	05070403 	.word	0x05070403
 800bd7c:	04040201 	.word	0x04040201
 800bd80:	0802fee5 	.word	0x0802fee5

0800bd84 <HAL_JPEG_GetInfo>:
{
 800bd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	d06f      	beq.n	800be6c <HAL_JPEG_GetInfo+0xe8>
 800bd8c:	2900      	cmp	r1, #0
 800bd8e:	d06d      	beq.n	800be6c <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800bd90:	6804      	ldr	r4, [r0, #0]
 800bd92:	6863      	ldr	r3, [r4, #4]
 800bd94:	f003 0303 	and.w	r3, r3, #3
 800bd98:	2b02      	cmp	r3, #2
 800bd9a:	d047      	beq.n	800be2c <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800bd9c:	6863      	ldr	r3, [r4, #4]
 800bd9e:	f013 0303 	ands.w	r3, r3, #3
 800bda2:	d005      	beq.n	800bdb0 <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800bda4:	6863      	ldr	r3, [r4, #4]
 800bda6:	f003 0303 	and.w	r3, r3, #3
 800bdaa:	2b03      	cmp	r3, #3
 800bdac:	d15e      	bne.n	800be6c <HAL_JPEG_GetInfo+0xe8>
 800bdae:	2330      	movs	r3, #48	; 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800bdb0:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800bdb2:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800bdb4:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800bdb8:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800bdba:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800bdbc:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800bdbe:	68e2      	ldr	r2, [r4, #12]
 800bdc0:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800bdc4:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800bdc6:	d13c      	bne.n	800be42 <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800bdc8:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800bdca:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800bdcc:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800bdd0:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800bdd2:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800bdd4:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800bdd6:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800bdda:	d129      	bne.n	800be30 <HAL_JPEG_GetInfo+0xac>
 800bddc:	4313      	orrs	r3, r2
 800bdde:	f013 0f0f 	tst.w	r3, #15
 800bde2:	bf0c      	ite	eq
 800bde4:	2301      	moveq	r3, #1
 800bde6:	2300      	movne	r3, #0
 800bde8:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800bdea:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 800bdec:	2300      	movs	r3, #0
 800bdee:	3450      	adds	r4, #80	; 0x50
 800bdf0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800be70 <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 800bdf4:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800bdf6:	f04f 0e64 	mov.w	lr, #100	; 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 800bdfa:	f241 3888 	movw	r8, #5000	; 0x1388
    quantRow = *tableAddress;
 800bdfe:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 800be02:	eb0c 0705 	add.w	r7, ip, r5
    quantRow = *tableAddress;
 800be06:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800be08:	fa29 f206 	lsr.w	r2, r9, r6
 800be0c:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 800be0e:	2a01      	cmp	r2, #1
 800be10:	d119      	bne.n	800be46 <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 800be12:	3364      	adds	r3, #100	; 0x64
    for (j = 0; j < 4UL; j++)
 800be14:	3608      	adds	r6, #8
 800be16:	3701      	adds	r7, #1
 800be18:	2e20      	cmp	r6, #32
 800be1a:	d1f5      	bne.n	800be08 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 800be1c:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800be1e:	2d40      	cmp	r5, #64	; 0x40
 800be20:	d1ed      	bne.n	800bdfe <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 800be22:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 800be24:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800be26:	610b      	str	r3, [r1, #16]
}
 800be28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be2c:	2310      	movs	r3, #16
 800be2e:	e7bf      	b.n	800bdb0 <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800be30:	2d03      	cmp	r5, #3
 800be32:	d106      	bne.n	800be42 <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800be34:	4313      	orrs	r3, r2
 800be36:	f013 0f0f 	tst.w	r3, #15
 800be3a:	bf0c      	ite	eq
 800be3c:	2301      	moveq	r3, #1
 800be3e:	2300      	movne	r3, #0
 800be40:	e7d3      	b.n	800bdea <HAL_JPEG_GetInfo+0x66>
 800be42:	2300      	movs	r3, #0
 800be44:	e7d1      	b.n	800bdea <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800be46:	fb0e fb02 	mul.w	fp, lr, r2
 800be4a:	f897 a000 	ldrb.w	sl, [r7]
 800be4e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800be50:	f812 a00a 	ldrb.w	sl, [r2, sl]
 800be54:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 800be58:	2a64      	cmp	r2, #100	; 0x64
          quality += 5000UL / scale;
 800be5a:	bf8b      	itete	hi
 800be5c:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 800be60:	f1c2 02c8 	rsbls	r2, r2, #200	; 0xc8
          quality += 5000UL / scale;
 800be64:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 800be66:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 800be6a:	e7d3      	b.n	800be14 <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 800be6c:	2001      	movs	r0, #1
 800be6e:	e7db      	b.n	800be28 <HAL_JPEG_GetInfo+0xa4>
 800be70:	0802ff5d 	.word	0x0802ff5d

0800be74 <HAL_JPEG_Decode_DMA>:
{
 800be74:	b570      	push	{r4, r5, r6, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800be76:	4604      	mov	r4, r0
 800be78:	b348      	cbz	r0, 800bece <HAL_JPEG_Decode_DMA+0x5a>
 800be7a:	b341      	cbz	r1, 800bece <HAL_JPEG_Decode_DMA+0x5a>
 800be7c:	b33b      	cbz	r3, 800bece <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 800be7e:	f890 504c 	ldrb.w	r5, [r0, #76]	; 0x4c
 800be82:	2d01      	cmp	r5, #1
 800be84:	d028      	beq.n	800bed8 <HAL_JPEG_Decode_DMA+0x64>
 800be86:	2501      	movs	r5, #1
 800be88:	f880 504c 	strb.w	r5, [r0, #76]	; 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800be8c:	f890 504d 	ldrb.w	r5, [r0, #77]	; 0x4d
 800be90:	2d01      	cmp	r5, #1
 800be92:	d11e      	bne.n	800bed2 <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800be94:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 800be96:	6282      	str	r2, [r0, #40]	; 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800be98:	f880 504d 	strb.w	r5, [r0, #77]	; 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800be9c:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800be9e:	f025 050f 	bic.w	r5, r5, #15
 800bea2:	6545      	str	r5, [r0, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800bea4:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800bea6:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800beaa:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800beae:	6545      	str	r5, [r0, #84]	; 0x54
    hjpeg->JpegInCount = 0;
 800beb0:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 800beb2:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 800beb4:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 800beb6:	62c3      	str	r3, [r0, #44]	; 0x2c
    hjpeg->JpegOutCount = 0;
 800beb8:	6245      	str	r5, [r0, #36]	; 0x24
    JPEG_Init_Process(hjpeg);
 800beba:	f7ff fd9e 	bl	800b9fa <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800bebe:	f7ff fddb 	bl	800ba78 <JPEG_DMA_StartProcess>
 800bec2:	b128      	cbz	r0, 800bed0 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800bec4:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 800bec6:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800beca:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    return HAL_ERROR;
 800bece:	2001      	movs	r0, #1
}
 800bed0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hjpeg);
 800bed2:	2300      	movs	r3, #0
 800bed4:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  __HAL_LOCK(hjpeg);
 800bed8:	2002      	movs	r0, #2
 800beda:	e7f9      	b.n	800bed0 <HAL_JPEG_Decode_DMA+0x5c>

0800bedc <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800bedc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800bede:	f003 030c 	and.w	r3, r3, #12
 800bee2:	2b0c      	cmp	r3, #12
 800bee4:	d117      	bne.n	800bf16 <HAL_JPEG_Pause+0x3a>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800bee6:	f011 0301 	ands.w	r3, r1, #1
 800beea:	d005      	beq.n	800bef8 <HAL_JPEG_Pause+0x1c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800beec:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800beee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bef2:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 800bef4:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800bef8:	0789      	lsls	r1, r1, #30
 800befa:	d505      	bpl.n	800bf08 <HAL_JPEG_Pause+0x2c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800befc:	6d42      	ldr	r2, [r0, #84]	; 0x54
      mask |= JPEG_DMA_ODMA;
 800befe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800bf02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bf06:	6542      	str	r2, [r0, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800bf08:	6801      	ldr	r1, [r0, #0]
 800bf0a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800bf0c:	ea22 0303 	bic.w	r3, r2, r3
 800bf10:	630b      	str	r3, [r1, #48]	; 0x30
}
 800bf12:	2000      	movs	r0, #0
 800bf14:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800bf16:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800bf18:	f003 030c 	and.w	r3, r3, #12
 800bf1c:	2b08      	cmp	r3, #8
 800bf1e:	d1f8      	bne.n	800bf12 <HAL_JPEG_Pause+0x36>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800bf20:	f011 0301 	ands.w	r3, r1, #1
 800bf24:	d004      	beq.n	800bf30 <HAL_JPEG_Pause+0x54>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800bf26:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800bf28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bf2c:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800bf2e:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800bf30:	078a      	lsls	r2, r1, #30
 800bf32:	d5e9      	bpl.n	800bf08 <HAL_JPEG_Pause+0x2c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800bf34:	6d42      	ldr	r2, [r0, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800bf36:	f043 0328 	orr.w	r3, r3, #40	; 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800bf3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bf3e:	6542      	str	r2, [r0, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800bf40:	e7e2      	b.n	800bf08 <HAL_JPEG_Pause+0x2c>

0800bf42 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800bf42:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 800bf44:	6282      	str	r2, [r0, #40]	; 0x28
}
 800bf46:	4770      	bx	lr

0800bf48 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800bf48:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 800bf4a:	62c2      	str	r2, [r0, #44]	; 0x2c
}
 800bf4c:	4770      	bx	lr

0800bf4e <HAL_JPEG_EncodeCpltCallback>:
 800bf4e:	4770      	bx	lr

0800bf50 <JPEG_DMAErrorCallback>:
{
 800bf50:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf52:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800bf54:	f7fe fa3c 	bl	800a3d0 <HAL_DMA_GetError>
 800bf58:	2802      	cmp	r0, #2
 800bf5a:	d016      	beq.n	800bf8a <JPEG_DMAErrorCallback+0x3a>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800bf5c:	6823      	ldr	r3, [r4, #0]
    HAL_JPEG_ErrorCallback(hjpeg);
 800bf5e:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	f022 0201 	bic.w	r2, r2, #1
 800bf66:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800bf68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf6a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800bf6e:	631a      	str	r2, [r3, #48]	; 0x30
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 800bf70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf72:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 800bf76:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->State = HAL_JPEG_STATE_READY;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800bf7e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bf80:	f043 0304 	orr.w	r3, r3, #4
 800bf84:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_JPEG_ErrorCallback(hjpeg);
 800bf86:	f7f5 fdb9 	bl	8001afc <HAL_JPEG_ErrorCallback>
}
 800bf8a:	bd10      	pop	{r4, pc}

0800bf8c <JPEG_ReadInputData>:
{
 800bf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800bf8e:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 800bf90:	4604      	mov	r4, r0
 800bf92:	460e      	mov	r6, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800bf94:	bb35      	cbnz	r5, 800bfe4 <JPEG_ReadInputData+0x58>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800bf96:	2101      	movs	r1, #1
 800bf98:	f7ff ffa0 	bl	800bedc <HAL_JPEG_Pause>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800bf9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800bf9e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800bfa2:	d11e      	bne.n	800bfe2 <JPEG_ReadInputData+0x56>
 800bfa4:	b1ed      	cbz	r5, 800bfe2 <JPEG_ReadInputData+0x56>
    if (nb_words >= nbRequestWords)
 800bfa6:	ebb6 0f95 	cmp.w	r6, r5, lsr #2
    nb_words = nb_bytes / 4UL;
 800bfaa:	ea4f 0795 	mov.w	r7, r5, lsr #2
    if (nb_words >= nbRequestWords)
 800bfae:	d830      	bhi.n	800c012 <JPEG_ReadInputData+0x86>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800bfb0:	69a5      	ldr	r5, [r4, #24]
 800bfb2:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 800bfb4:	6a20      	ldr	r0, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800bfb6:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800bfb8:	1829      	adds	r1, r5, r0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800bfba:	5c28      	ldrb	r0, [r5, r0]
      for (index = 0; index < nbRequestWords; index++)
 800bfbc:	429e      	cmp	r6, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800bfbe:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800bfc0:	f891 c001 	ldrb.w	ip, [r1, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800bfc4:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800bfc8:	78c9      	ldrb	r1, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800bfca:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800bfce:	ea42 0200 	orr.w	r2, r2, r0
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800bfd2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800bfd6:	643a      	str	r2, [r7, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
 800bfd8:	6a22      	ldr	r2, [r4, #32]
 800bfda:	f102 0204 	add.w	r2, r2, #4
 800bfde:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800bfe0:	d1e8      	bne.n	800bfb4 <JPEG_ReadInputData+0x28>
}
 800bfe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800bfe4:	6a03      	ldr	r3, [r0, #32]
 800bfe6:	429d      	cmp	r5, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800bfe8:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800bfea:	d901      	bls.n	800bff0 <JPEG_ReadInputData+0x64>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800bfec:	1aed      	subs	r5, r5, r3
 800bfee:	e7d5      	b.n	800bf9c <JPEG_ReadInputData+0x10>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800bff0:	429d      	cmp	r5, r3
 800bff2:	d10c      	bne.n	800c00e <JPEG_ReadInputData+0x82>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800bff4:	6a01      	ldr	r1, [r0, #32]
 800bff6:	f7f5 fd25 	bl	8001a44 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 800bffa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bffc:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800bffe:	bf84      	itt	hi
 800c000:	f023 0303 	bichi.w	r3, r3, #3
 800c004:	62a3      	strhi	r3, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
 800c006:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 800c008:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
 800c00a:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 800c00c:	e7c6      	b.n	800bf9c <JPEG_ReadInputData+0x10>
  uint32_t nb_bytes = 0;
 800c00e:	2500      	movs	r5, #0
 800c010:	e7c4      	b.n	800bf9c <JPEG_ReadInputData+0x10>
      if (nb_words > 0UL)
 800c012:	2d03      	cmp	r5, #3
 800c014:	d826      	bhi.n	800c064 <JPEG_ReadInputData+0xd8>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800c016:	69a6      	ldr	r6, [r4, #24]
        for (index = 0; index < nb_bytes; index++)
 800c018:	461a      	mov	r2, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800c01a:	6a21      	ldr	r1, [r4, #32]
 800c01c:	00d0      	lsls	r0, r2, #3
        for (index = 0; index < nb_bytes; index++)
 800c01e:	3201      	adds	r2, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800c020:	5c71      	ldrb	r1, [r6, r1]
        for (index = 0; index < nb_bytes; index++)
 800c022:	4295      	cmp	r5, r2
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800c024:	fa01 f100 	lsl.w	r1, r1, r0
 800c028:	ea43 0301 	orr.w	r3, r3, r1
          hjpeg->JpegInCount++;
 800c02c:	6a21      	ldr	r1, [r4, #32]
 800c02e:	f101 0101 	add.w	r1, r1, #1
 800c032:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800c034:	d1f1      	bne.n	800c01a <JPEG_ReadInputData+0x8e>
        hjpeg->Instance->DIR = dataword;
 800c036:	6822      	ldr	r2, [r4, #0]
 800c038:	6413      	str	r3, [r2, #64]	; 0x40
}
 800c03a:	e7d2      	b.n	800bfe2 <JPEG_ReadInputData+0x56>
          input_count = hjpeg->JpegInCount;
 800c03c:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800c03e:	3301      	adds	r3, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c040:	69a6      	ldr	r6, [r4, #24]
 800c042:	6821      	ldr	r1, [r4, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c044:	1970      	adds	r0, r6, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c046:	5d75      	ldrb	r5, [r6, r5]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c048:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c04a:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c04e:	0412      	lsls	r2, r2, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800c050:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c052:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800c056:	432a      	orrs	r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c058:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c05c:	640a      	str	r2, [r1, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 800c05e:	6a22      	ldr	r2, [r4, #32]
 800c060:	3204      	adds	r2, #4
 800c062:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800c064:	42bb      	cmp	r3, r7
 800c066:	d1e9      	bne.n	800c03c <JPEG_ReadInputData+0xb0>
 800c068:	e7bb      	b.n	800bfe2 <JPEG_ReadInputData+0x56>
	...

0800c06c <JPEG_DMAInCpltCallback>:
{
 800c06c:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c06e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c070:	6823      	ldr	r3, [r4, #0]
 800c072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c074:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800c078:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800c07a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800c07c:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800c080:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800c084:	0412      	lsls	r2, r2, #16
 800c086:	0c12      	lsrs	r2, r2, #16
 800c088:	2a0c      	cmp	r2, #12
 800c08a:	d12c      	bne.n	800c0e6 <JPEG_DMAInCpltCallback+0x7a>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 800c08c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c08e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c092:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800c094:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800c096:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800c098:	4a1b      	ldr	r2, [pc, #108]	; (800c108 <JPEG_DMAInCpltCallback+0x9c>)
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	ea02 0283 	and.w	r2, r2, r3, lsl #2
 800c0a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c0a2:	1a9b      	subs	r3, r3, r2
 800c0a4:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800c0a6:	6a21      	ldr	r1, [r4, #32]
 800c0a8:	f7f5 fccc 	bl	8001a44 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= 4UL)
 800c0ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c0ae:	2b03      	cmp	r3, #3
 800c0b0:	d91a      	bls.n	800c0e8 <JPEG_DMAInCpltCallback+0x7c>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800c0b2:	f023 0303 	bic.w	r3, r3, #3
      hjpeg->InDataLength = 4;
 800c0b6:	62a3      	str	r3, [r4, #40]	; 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800c0b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c0ba:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800c0bc:	04db      	lsls	r3, r3, #19
 800c0be:	d41c      	bmi.n	800c0fa <JPEG_DMAInCpltCallback+0x8e>
 800c0c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c0c2:	b1d3      	cbz	r3, 800c0fa <JPEG_DMAInCpltCallback+0x8e>
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c0c4:	089b      	lsrs	r3, r3, #2
 800c0c6:	3240      	adds	r2, #64	; 0x40
 800c0c8:	69a1      	ldr	r1, [r4, #24]
 800c0ca:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800c0cc:	f7fe f834 	bl	800a138 <HAL_DMA_Start_IT>
 800c0d0:	b170      	cbz	r0, 800c0f0 <JPEG_DMAInCpltCallback+0x84>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c0d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 800c0d4:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c0d6:	f043 0304 	orr.w	r3, r3, #4
 800c0da:	6523      	str	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c0dc:	2306      	movs	r3, #6
 800c0de:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 800c0e2:	f7f5 fd0b 	bl	8001afc <HAL_JPEG_ErrorCallback>
}
 800c0e6:	bd10      	pop	{r4, pc}
    else if (hjpeg->InDataLength > 0UL)
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d0e5      	beq.n	800c0b8 <JPEG_DMAInCpltCallback+0x4c>
      hjpeg->InDataLength = 4;
 800c0ec:	2304      	movs	r3, #4
 800c0ee:	e7e2      	b.n	800c0b6 <JPEG_DMAInCpltCallback+0x4a>
      JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 800c0f0:	6822      	ldr	r2, [r4, #0]
 800c0f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c0f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c0f8:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800c0fa:	6822      	ldr	r2, [r4, #0]
 800c0fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c0fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c102:	6313      	str	r3, [r2, #48]	; 0x30
 800c104:	e7ef      	b.n	800c0e6 <JPEG_DMAInCpltCallback+0x7a>
 800c106:	bf00      	nop
 800c108:	0003fffc 	.word	0x0003fffc

0800c10c <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800c10c:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
 800c10e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800c110:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c114:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 800c116:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800c118:	4293      	cmp	r3, r2
 800c11a:	d32a      	bcc.n	800c172 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 800c11c:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800c11e:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 800c120:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800c122:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 800c124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nbOutputWords; index++)
 800c126:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800c128:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c12a:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800c12c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c12e:	69e0      	ldr	r0, [r4, #28]
 800c130:	4428      	add	r0, r5
 800c132:	ea4f 2513 	mov.w	r5, r3, lsr #8
 800c136:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800c138:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c13a:	69e0      	ldr	r0, [r4, #28]
 800c13c:	4428      	add	r0, r5
 800c13e:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800c142:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800c146:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800c148:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c14a:	69e0      	ldr	r0, [r4, #28]
 800c14c:	4428      	add	r0, r5
 800c14e:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 800c150:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c152:	f103 0304 	add.w	r3, r3, #4
 800c156:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 800c158:	d1e1      	bne.n	800c11e <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800c15a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c15c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c15e:	429a      	cmp	r2, r3
 800c160:	d106      	bne.n	800c170 <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c162:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c164:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c166:	4620      	mov	r0, r4
 800c168:	f7f5 fc8a 	bl	8001a80 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800c16c:	2300      	movs	r3, #0
 800c16e:	6263      	str	r3, [r4, #36]	; 0x24
}
 800c170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800c172:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800c174:	4293      	cmp	r3, r2
 800c176:	d9fb      	bls.n	800c170 <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800c178:	6a42      	ldr	r2, [r0, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 800c17a:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800c17c:	1a9b      	subs	r3, r3, r2
 800c17e:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 800c180:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800c182:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800c184:	d105      	bne.n	800c192 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800c186:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c18a:	429f      	cmp	r7, r3
 800c18c:	d119      	bne.n	800c1c2 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c18e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c190:	e7e9      	b.n	800c166 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 800c192:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 800c194:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 800c196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800c198:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c19a:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800c19c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c19e:	69e1      	ldr	r1, [r4, #28]
 800c1a0:	4429      	add	r1, r5
 800c1a2:	0a1d      	lsrs	r5, r3, #8
 800c1a4:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800c1a6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c1a8:	69e1      	ldr	r1, [r4, #28]
 800c1aa:	4429      	add	r1, r5
 800c1ac:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800c1ae:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800c1b0:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800c1b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c1b4:	69e1      	ldr	r1, [r4, #28]
 800c1b6:	4429      	add	r1, r5
 800c1b8:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 800c1ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1bc:	3304      	adds	r3, #4
 800c1be:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 800c1c0:	e7de      	b.n	800c180 <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800c1c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 800c1c4:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800c1c6:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800c1c8:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 800c1ca:	6c5e      	ldr	r6, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
 800c1cc:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800c1ce:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 800c1d0:	d114      	bne.n	800c1fc <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c1d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	f7f5 fc53 	bl	8001a80 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	6263      	str	r3, [r4, #36]	; 0x24
      nb_bytes = 4UL - nb_bytes;
 800c1de:	1d2b      	adds	r3, r5, #4
 800c1e0:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 800c1e2:	2b03      	cmp	r3, #3
 800c1e4:	d8c4      	bhi.n	800c170 <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800c1e6:	00da      	lsls	r2, r3, #3
 800c1e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c1ea:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 800c1ec:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800c1ee:	fa26 f202 	lsr.w	r2, r6, r2
 800c1f2:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 800c1f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c1f6:	3201      	adds	r2, #1
 800c1f8:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800c1fa:	e7f2      	b.n	800c1e2 <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800c1fc:	f002 0303 	and.w	r3, r2, #3
 800c200:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 800c204:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800c206:	00db      	lsls	r3, r3, #3
 800c208:	fa26 f303 	lsr.w	r3, r6, r3
 800c20c:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 800c210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c212:	3301      	adds	r3, #1
 800c214:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 800c216:	e7d9      	b.n	800c1cc <JPEG_StoreOutputData+0xc0>

0800c218 <JPEG_Process>:
{
 800c218:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c21a:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
 800c21c:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c21e:	f003 0303 	and.w	r3, r3, #3
 800c222:	2b02      	cmp	r3, #2
 800c224:	d114      	bne.n	800c250 <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800c226:	6803      	ldr	r3, [r0, #0]
 800c228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c22a:	065a      	lsls	r2, r3, #25
 800c22c:	d510      	bpl.n	800c250 <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800c22e:	1d01      	adds	r1, r0, #4
 800c230:	f7ff fda8 	bl	800bd84 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800c234:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800c236:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800c238:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800c23a:	f7f5 fbb5 	bl	80019a8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800c23e:	6823      	ldr	r3, [r4, #0]
 800c240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c246:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800c248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c24a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c24e:	639a      	str	r2, [r3, #56]	; 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800c250:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c252:	04db      	lsls	r3, r3, #19
 800c254:	d407      	bmi.n	800c266 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800c256:	6823      	ldr	r3, [r4, #0]
 800c258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c25a:	0795      	lsls	r5, r2, #30
 800c25c:	d543      	bpl.n	800c2e6 <JPEG_Process+0xce>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800c25e:	2104      	movs	r1, #4
      JPEG_ReadInputData(hjpeg, 1);
 800c260:	4620      	mov	r0, r4
 800c262:	f7ff fe93 	bl	800bf8c <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800c266:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c268:	0499      	lsls	r1, r3, #18
 800c26a:	d407      	bmi.n	800c27c <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800c26c:	6823      	ldr	r3, [r4, #0]
 800c26e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c270:	0712      	lsls	r2, r2, #28
 800c272:	d53d      	bpl.n	800c2f0 <JPEG_Process+0xd8>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800c274:	2104      	movs	r1, #4
      JPEG_StoreOutputData(hjpeg, 1);
 800c276:	4620      	mov	r0, r4
 800c278:	f7ff ff48 	bl	800c10c <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800c27c:	6823      	ldr	r3, [r4, #0]
 800c27e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c280:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800c284:	2a20      	cmp	r2, #32
 800c286:	d13b      	bne.n	800c300 <JPEG_Process+0xe8>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	f022 0201 	bic.w	r2, r2, #1
 800c28e:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800c290:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800c292:	f002 020c 	and.w	r2, r2, #12
 800c296:	2a08      	cmp	r2, #8
 800c298:	d103      	bne.n	800c2a2 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c29a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c29c:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800c2a0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800c2a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2a4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800c2a8:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
 800c2aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2ac:	b133      	cbz	r3, 800c2bc <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c2ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	69e1      	ldr	r1, [r4, #28]
 800c2b4:	f7f5 fbe4 	bl	8001a80 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	6263      	str	r3, [r4, #36]	; 0x24
    tmpContext = hjpeg->Context;
 800c2bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 800c2be:	2501      	movs	r5, #1
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c2c0:	6d62      	ldr	r2, [r4, #84]	; 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c2c2:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c2c4:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c2c8:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c2cc:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c2ce:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 800c2d0:	f04f 0200 	mov.w	r2, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
 800c2d4:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
    __HAL_UNLOCK(hjpeg);
 800c2d8:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c2dc:	d10d      	bne.n	800c2fa <JPEG_Process+0xe2>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c2de:	f7f5 fc0f 	bl	8001b00 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800c2e2:	4628      	mov	r0, r5
}
 800c2e4:	bd38      	pop	{r3, r4, r5, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800c2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2e8:	0758      	lsls	r0, r3, #29
 800c2ea:	d5bc      	bpl.n	800c266 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 800c2ec:	2101      	movs	r1, #1
 800c2ee:	e7b7      	b.n	800c260 <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800c2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2f2:	06db      	lsls	r3, r3, #27
 800c2f4:	d5c2      	bpl.n	800c27c <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 800c2f6:	2101      	movs	r1, #1
 800c2f8:	e7bd      	b.n	800c276 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800c2fa:	f7ff fe28 	bl	800bf4e <HAL_JPEG_EncodeCpltCallback>
 800c2fe:	e7f0      	b.n	800c2e2 <JPEG_Process+0xca>
  return JPEG_PROCESS_ONGOING;
 800c300:	2000      	movs	r0, #0
 800c302:	e7ef      	b.n	800c2e4 <JPEG_Process+0xcc>

0800c304 <JPEG_DMA_PollResidualData>:
{
 800c304:	b570      	push	{r4, r5, r6, lr}
 800c306:	4604      	mov	r4, r0
 800c308:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800c30a:	6d65      	ldr	r5, [r4, #84]	; 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800c30c:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800c30e:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
 800c312:	d122      	bne.n	800c35a <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800c314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c316:	06d0      	lsls	r0, r2, #27
 800c318:	d51f      	bpl.n	800c35a <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 800c31a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800c31c:	69e1      	ldr	r1, [r4, #28]
 800c31e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c320:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800c322:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c324:	69e2      	ldr	r2, [r4, #28]
 800c326:	440a      	add	r2, r1
 800c328:	0a19      	lsrs	r1, r3, #8
 800c32a:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800c32c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c32e:	69e2      	ldr	r2, [r4, #28]
 800c330:	440a      	add	r2, r1
 800c332:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800c334:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800c336:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800c338:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c33a:	69e2      	ldr	r2, [r4, #28]
 800c33c:	440a      	add	r2, r1
 800c33e:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 800c340:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c342:	3304      	adds	r3, #4
 800c344:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800c346:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c348:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d105      	bne.n	800c35a <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c34e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c350:	4620      	mov	r0, r4
 800c352:	69e1      	ldr	r1, [r4, #28]
 800c354:	f7f5 fb94 	bl	8001a80 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 800c358:	6265      	str	r5, [r4, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800c35a:	3e01      	subs	r6, #1
 800c35c:	d1d5      	bne.n	800c30a <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800c35e:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 800c360:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800c362:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c364:	06c9      	lsls	r1, r1, #27
 800c366:	d501      	bpl.n	800c36c <JPEG_DMA_PollResidualData+0x68>
 800c368:	0492      	lsls	r2, r2, #18
 800c36a:	d420      	bmi.n	800c3ae <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	f022 0201 	bic.w	r2, r2, #1
 800c372:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 800c374:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c376:	b133      	cbz	r3, 800c386 <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c378:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c37a:	4620      	mov	r0, r4
 800c37c:	69e1      	ldr	r1, [r4, #28]
 800c37e:	f7f5 fb7f 	bl	8001a80 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800c382:	2300      	movs	r3, #0
 800c384:	6263      	str	r3, [r4, #36]	; 0x24
    tmpContext = hjpeg->Context;
 800c386:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c388:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c38a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c38c:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c390:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c394:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c396:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 800c398:	f04f 0200 	mov.w	r2, #0
 800c39c:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800c3a0:	f04f 0201 	mov.w	r2, #1
 800c3a4:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c3a8:	d102      	bne.n	800c3b0 <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c3aa:	f7f5 fba9 	bl	8001b00 <HAL_JPEG_DecodeCpltCallback>
}
 800c3ae:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800c3b0:	f7ff fdcd 	bl	800bf4e <HAL_JPEG_EncodeCpltCallback>
}
 800c3b4:	e7fb      	b.n	800c3ae <JPEG_DMA_PollResidualData+0xaa>

0800c3b6 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800c3b6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800c3b8:	f413 5f40 	tst.w	r3, #12288	; 0x3000
{
 800c3bc:	b570      	push	{r4, r5, r6, lr}
 800c3be:	4604      	mov	r4, r0
 800c3c0:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800c3c2:	d034      	beq.n	800c42e <HAL_JPEG_Resume+0x78>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800c3c4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800c3c6:	f003 030c 	and.w	r3, r3, #12
 800c3ca:	2b0c      	cmp	r3, #12
 800c3cc:	d13e      	bne.n	800c44c <HAL_JPEG_Resume+0x96>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800c3ce:	f011 0601 	ands.w	r6, r1, #1
 800c3d2:	d00a      	beq.n	800c3ea <HAL_JPEG_Resume+0x34>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800c3d4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800c3d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3da:	6543      	str	r3, [r0, #84]	; 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800c3dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c3de:	f023 0303 	bic.w	r3, r3, #3
 800c3e2:	6283      	str	r3, [r0, #40]	; 0x28
      if (hjpeg->InDataLength > 0UL)
 800c3e4:	b99b      	cbnz	r3, 800c40e <HAL_JPEG_Resume+0x58>
      mask |= JPEG_DMA_IDMA;
 800c3e6:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800c3ea:	07a8      	lsls	r0, r5, #30
 800c3ec:	d509      	bpl.n	800c402 <HAL_JPEG_Resume+0x4c>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800c3ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c3f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c3f4:	6563      	str	r3, [r4, #84]	; 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800c3f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c3f8:	0419      	lsls	r1, r3, #16
 800c3fa:	d51a      	bpl.n	800c432 <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	f7ff ff81 	bl	800c304 <JPEG_DMA_PollResidualData>
    JPEG_ENABLE_DMA(hjpeg, mask);
 800c402:	6822      	ldr	r2, [r4, #0]
 800c404:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c406:	4333      	orrs	r3, r6
 800c408:	6313      	str	r3, [r2, #48]	; 0x30
  return HAL_OK;
 800c40a:	2000      	movs	r0, #0
 800c40c:	e010      	b.n	800c430 <HAL_JPEG_Resume+0x7a>
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c40e:	6802      	ldr	r2, [r0, #0]
 800c410:	089b      	lsrs	r3, r3, #2
 800c412:	6981      	ldr	r1, [r0, #24]
 800c414:	3240      	adds	r2, #64	; 0x40
 800c416:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800c418:	f7fd fe8e 	bl	800a138 <HAL_DMA_Start_IT>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	d0e2      	beq.n	800c3e6 <HAL_JPEG_Resume+0x30>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c420:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c422:	f043 0304 	orr.w	r3, r3, #4
 800c426:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c428:	2306      	movs	r3, #6
 800c42a:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
    return HAL_ERROR;
 800c42e:	2001      	movs	r0, #1
}
 800c430:	bd70      	pop	{r4, r5, r6, pc}
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c432:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c434:	6821      	ldr	r1, [r4, #0]
 800c436:	089b      	lsrs	r3, r3, #2
 800c438:	69e2      	ldr	r2, [r4, #28]
 800c43a:	3144      	adds	r1, #68	; 0x44
 800c43c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800c43e:	f7fd fe7b 	bl	800a138 <HAL_DMA_Start_IT>
 800c442:	2800      	cmp	r0, #0
 800c444:	d1ec      	bne.n	800c420 <HAL_JPEG_Resume+0x6a>
        mask |= JPEG_DMA_ODMA;
 800c446:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
 800c44a:	e7da      	b.n	800c402 <HAL_JPEG_Resume+0x4c>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800c44c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800c44e:	f003 030c 	and.w	r3, r3, #12
 800c452:	2b08      	cmp	r3, #8
 800c454:	d1d9      	bne.n	800c40a <HAL_JPEG_Resume+0x54>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800c456:	f011 0301 	ands.w	r3, r1, #1
 800c45a:	d004      	beq.n	800c466 <HAL_JPEG_Resume+0xb0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800c45c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800c45e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c462:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800c464:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800c466:	07aa      	lsls	r2, r5, #30
 800c468:	d505      	bpl.n	800c476 <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800c46a:	6d62      	ldr	r2, [r4, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800c46c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800c470:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c474:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800c476:	6821      	ldr	r1, [r4, #0]
 800c478:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800c47a:	4313      	orrs	r3, r2
 800c47c:	630b      	str	r3, [r1, #48]	; 0x30
 800c47e:	e7c4      	b.n	800c40a <HAL_JPEG_Resume+0x54>

0800c480 <JPEG_DMA_EndProcess>:
{
 800c480:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 800c482:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
 800c484:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 800c486:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	6859      	ldr	r1, [r3, #4]
 800c48c:	4b1f      	ldr	r3, [pc, #124]	; (800c50c <JPEG_DMA_EndProcess+0x8c>)
 800c48e:	ea03 0381 	and.w	r3, r3, r1, lsl #2
 800c492:	1ad3      	subs	r3, r2, r3
 800c494:	6243      	str	r3, [r0, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800c496:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c498:	429a      	cmp	r2, r3
 800c49a:	d105      	bne.n	800c4a8 <JPEG_DMA_EndProcess+0x28>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c49c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800c49e:	69c1      	ldr	r1, [r0, #28]
 800c4a0:	f7f5 faee 	bl	8001a80 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	6263      	str	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800c4a8:	6823      	ldr	r3, [r4, #0]
 800c4aa:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800c4ac:	f015 0510 	ands.w	r5, r5, #16
 800c4b0:	d124      	bne.n	800c4fc <JPEG_DMA_EndProcess+0x7c>
    if (hjpeg->JpegOutCount > 0UL)
 800c4b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4b4:	b12b      	cbz	r3, 800c4c2 <JPEG_DMA_EndProcess+0x42>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c4b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	69e1      	ldr	r1, [r4, #28]
 800c4bc:	f7f5 fae0 	bl	8001a80 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800c4c0:	6265      	str	r5, [r4, #36]	; 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c4c2:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c4c4:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c4c6:	6813      	ldr	r3, [r2, #0]
 800c4c8:	f023 0301 	bic.w	r3, r3, #1
 800c4cc:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800c4ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c4d0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c4d2:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c4d6:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c4da:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c4dc:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
 800c4de:	f04f 0200 	mov.w	r2, #0
 800c4e2:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800c4e6:	f04f 0201 	mov.w	r2, #1
 800c4ea:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c4ee:	d102      	bne.n	800c4f6 <JPEG_DMA_EndProcess+0x76>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c4f0:	f7f5 fb06 	bl	8001b00 <HAL_JPEG_DecodeCpltCallback>
}
 800c4f4:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800c4f6:	f7ff fd2a 	bl	800bf4e <HAL_JPEG_EncodeCpltCallback>
 800c4fa:	e7fb      	b.n	800c4f4 <JPEG_DMA_EndProcess+0x74>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800c4fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c4fe:	049b      	lsls	r3, r3, #18
 800c500:	d4f8      	bmi.n	800c4f4 <JPEG_DMA_EndProcess+0x74>
    JPEG_DMA_PollResidualData(hjpeg);
 800c502:	4620      	mov	r0, r4
}
 800c504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800c508:	f7ff befc 	b.w	800c304 <JPEG_DMA_PollResidualData>
 800c50c:	0003fffc 	.word	0x0003fffc

0800c510 <JPEG_DMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c510:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800c512:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800c514:	041b      	lsls	r3, r3, #16
 800c516:	d501      	bpl.n	800c51c <JPEG_DMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 800c518:	f7ff bfb2 	b.w	800c480 <JPEG_DMA_EndProcess>
}
 800c51c:	4770      	bx	lr
	...

0800c520 <JPEG_DMAOutCpltCallback>:
{
 800c520:	b510      	push	{r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c522:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c524:	6823      	ldr	r3, [r4, #0]
 800c526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c528:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800c52c:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800c52e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800c530:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800c534:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800c538:	0412      	lsls	r2, r2, #16
 800c53a:	0c12      	lsrs	r2, r2, #16
 800c53c:	2a0c      	cmp	r2, #12
 800c53e:	d129      	bne.n	800c594 <JPEG_DMAOutCpltCallback+0x74>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800c540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c542:	0692      	lsls	r2, r2, #26
 800c544:	d42c      	bmi.n	800c5a0 <JPEG_DMAOutCpltCallback+0x80>
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 800c546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c548:	69e1      	ldr	r1, [r4, #28]
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 800c54a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c54e:	631a      	str	r2, [r3, #48]	; 0x30
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800c550:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c552:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 800c554:	4a15      	ldr	r2, [pc, #84]	; (800c5ac <JPEG_DMAOutCpltCallback+0x8c>)
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	ea02 0283 	and.w	r2, r2, r3, lsl #2
 800c55c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c55e:	1a9b      	subs	r3, r3, r2
 800c560:	6263      	str	r3, [r4, #36]	; 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c562:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c564:	f7f5 fa8c 	bl	8001a80 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800c568:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c56a:	049b      	lsls	r3, r3, #18
 800c56c:	d418      	bmi.n	800c5a0 <JPEG_DMAOutCpltCallback+0x80>
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c56e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c570:	6821      	ldr	r1, [r4, #0]
 800c572:	089b      	lsrs	r3, r3, #2
 800c574:	69e2      	ldr	r2, [r4, #28]
 800c576:	3144      	adds	r1, #68	; 0x44
 800c578:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800c57a:	f7fd fddd 	bl	800a138 <HAL_DMA_Start_IT>
 800c57e:	b150      	cbz	r0, 800c596 <JPEG_DMAOutCpltCallback+0x76>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c580:	6d23      	ldr	r3, [r4, #80]	; 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 800c582:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c584:	f043 0304 	orr.w	r3, r3, #4
 800c588:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c58a:	2306      	movs	r3, #6
 800c58c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 800c590:	f7f5 fab4 	bl	8001afc <HAL_JPEG_ErrorCallback>
}
 800c594:	bd10      	pop	{r4, pc}
        JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 800c596:	6822      	ldr	r2, [r4, #0]
 800c598:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c59a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c59e:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800c5a0:	6822      	ldr	r2, [r4, #0]
 800c5a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c5a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c5a8:	6313      	str	r3, [r2, #48]	; 0x30
 800c5aa:	e7f3      	b.n	800c594 <JPEG_DMAOutCpltCallback+0x74>
 800c5ac:	0003fffc 	.word	0x0003fffc

0800c5b0 <HAL_JPEG_IRQHandler>:
{
 800c5b0:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 800c5b2:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
{
 800c5b6:	4604      	mov	r4, r0
  switch (hjpeg->State)
 800c5b8:	3b03      	subs	r3, #3
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d854      	bhi.n	800c668 <HAL_JPEG_IRQHandler+0xb8>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800c5be:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800c5c0:	f003 030c 	and.w	r3, r3, #12
 800c5c4:	2b08      	cmp	r3, #8
 800c5c6:	d103      	bne.n	800c5d0 <HAL_JPEG_IRQHandler+0x20>
}
 800c5c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 800c5cc:	f7ff be24 	b.w	800c218 <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800c5d0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800c5d2:	f003 030c 	and.w	r3, r3, #12
 800c5d6:	2b0c      	cmp	r3, #12
 800c5d8:	d146      	bne.n	800c668 <HAL_JPEG_IRQHandler+0xb8>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c5da:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800c5dc:	f003 0303 	and.w	r3, r3, #3
 800c5e0:	2b02      	cmp	r3, #2
 800c5e2:	d114      	bne.n	800c60e <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800c5e4:	6803      	ldr	r3, [r0, #0]
 800c5e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5e8:	0659      	lsls	r1, r3, #25
 800c5ea:	d510      	bpl.n	800c60e <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800c5ec:	1d01      	adds	r1, r0, #4
 800c5ee:	f7ff fbc9 	bl	800bd84 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800c5f2:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800c5f4:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800c5f6:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800c5f8:	f7f5 f9d6 	bl	80019a8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800c5fc:	6823      	ldr	r3, [r4, #0]
 800c5fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c604:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800c606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c60c:	639a      	str	r2, [r3, #56]	; 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800c60e:	6823      	ldr	r3, [r4, #0]
 800c610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c612:	0692      	lsls	r2, r2, #26
 800c614:	d528      	bpl.n	800c668 <HAL_JPEG_IRQHandler+0xb8>
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800c616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 800c618:	6b20      	ldr	r0, [r4, #48]	; 0x30
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800c61a:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 800c61e:	631a      	str	r2, [r3, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800c620:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800c622:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c626:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c628:	681a      	ldr	r2, [r3, #0]
 800c62a:	f022 0201 	bic.w	r2, r2, #1
 800c62e:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c632:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800c636:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800c638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c63a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800c63e:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_DMA_STATE_BUSY)
 800c640:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800c644:	2b02      	cmp	r3, #2
 800c646:	d101      	bne.n	800c64c <HAL_JPEG_IRQHandler+0x9c>
      (void) HAL_DMA_Abort_IT(hjpeg->hdmain);
 800c648:	f7fd fdf2 	bl	800a230 <HAL_DMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_DMA_STATE_BUSY)
 800c64c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800c64e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800c652:	2b02      	cmp	r3, #2
 800c654:	d103      	bne.n	800c65e <HAL_JPEG_IRQHandler+0xae>
}
 800c656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_DMA_Abort_IT(hjpeg->hdmaout);
 800c65a:	f7fd bde9 	b.w	800a230 <HAL_DMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 800c65e:	4620      	mov	r0, r4
}
 800c660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 800c664:	f7ff bf0c 	b.w	800c480 <JPEG_DMA_EndProcess>
}
 800c668:	bd10      	pop	{r4, pc}
	...

0800c66c <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c66c:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c66e:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c670:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c674:	3284      	adds	r2, #132	; 0x84
 800c676:	1883      	adds	r3, r0, r2
{
 800c678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c67c:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c67e:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c682:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800c684:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c688:	684c      	ldr	r4, [r1, #4]
 800c68a:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c68e:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800c692:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c696:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c698:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c69a:	68c5      	ldr	r5, [r0, #12]
 800c69c:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800c6a0:	443d      	add	r5, r7
 800c6a2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c6a6:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c6a8:	68c6      	ldr	r6, [r0, #12]
 800c6aa:	68cd      	ldr	r5, [r1, #12]
 800c6ac:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800c6b0:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800c6b2:	689d      	ldr	r5, [r3, #8]
 800c6b4:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 800c6b8:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c6ba:	688d      	ldr	r5, [r1, #8]
 800c6bc:	68c7      	ldr	r7, [r0, #12]
 800c6be:	3501      	adds	r5, #1
 800c6c0:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800c6c4:	443d      	add	r5, r7
 800c6c6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c6ca:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c6cc:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800c6ce:	691d      	ldr	r5, [r3, #16]
 800c6d0:	f025 0507 	bic.w	r5, r5, #7
 800c6d4:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c6d6:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800c6d8:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800c6da:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800c6de:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800c6e2:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800c6e6:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800c6ea:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800c6ee:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800c6f2:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800c6f6:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800c6f8:	695d      	ldr	r5, [r3, #20]
 800c6fa:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800c6fe:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800c700:	694d      	ldr	r5, [r1, #20]
 800c702:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800c704:	69dd      	ldr	r5, [r3, #28]
 800c706:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 800c70a:	f025 0507 	bic.w	r5, r5, #7
 800c70e:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800c710:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800c714:	433d      	orrs	r5, r7
 800c716:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800c718:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800c71a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800c71c:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800c720:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c722:	b1fe      	cbz	r6, 800c764 <LTDC_SetConfig+0xf8>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800c724:	3e01      	subs	r6, #1
 800c726:	2e06      	cmp	r6, #6
 800c728:	d81e      	bhi.n	800c768 <LTDC_SetConfig+0xfc>
 800c72a:	4d10      	ldr	r5, [pc, #64]	; (800c76c <LTDC_SetConfig+0x100>)
 800c72c:	5dad      	ldrb	r5, [r5, r6]
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c72e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800c730:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c734:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800c738:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c73a:	62de      	str	r6, [r3, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800c73c:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800c73e:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800c740:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800c742:	436e      	muls	r6, r5
 800c744:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800c748:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800c74a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800c74c:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 800c750:	f024 0407 	bic.w	r4, r4, #7
 800c754:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800c756:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800c758:	5883      	ldr	r3, [r0, r2]
 800c75a:	f043 0301 	orr.w	r3, r3, #1
 800c75e:	5083      	str	r3, [r0, r2]
}
 800c760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800c764:	2504      	movs	r5, #4
 800c766:	e7e2      	b.n	800c72e <LTDC_SetConfig+0xc2>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c768:	2501      	movs	r5, #1
 800c76a:	e7e0      	b.n	800c72e <LTDC_SetConfig+0xc2>
 800c76c:	0802ff9d 	.word	0x0802ff9d

0800c770 <HAL_LTDC_Init>:
{
 800c770:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800c772:	4604      	mov	r4, r0
 800c774:	2800      	cmp	r0, #0
 800c776:	d063      	beq.n	800c840 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800c778:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800c77c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c780:	b91b      	cbnz	r3, 800c78a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800c782:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800c786:	f7f7 fddf 	bl	8004348 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c78a:	2302      	movs	r3, #2
 800c78c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800c790:	6823      	ldr	r3, [r4, #0]
 800c792:	699a      	ldr	r2, [r3, #24]
 800c794:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800c798:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c79a:	6999      	ldr	r1, [r3, #24]
 800c79c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800c7a0:	4302      	orrs	r2, r0
 800c7a2:	68e0      	ldr	r0, [r4, #12]
 800c7a4:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c7a6:	6920      	ldr	r0, [r4, #16]
 800c7a8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800c7aa:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c7ac:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c7ae:	4925      	ldr	r1, [pc, #148]	; (800c844 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c7b0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c7b2:	689a      	ldr	r2, [r3, #8]
 800c7b4:	400a      	ands	r2, r1
 800c7b6:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c7b8:	689a      	ldr	r2, [r3, #8]
 800c7ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800c7be:	69a0      	ldr	r0, [r4, #24]
 800c7c0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800c7c2:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c7c4:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800c7c6:	68da      	ldr	r2, [r3, #12]
 800c7c8:	400a      	ands	r2, r1
 800c7ca:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c7cc:	68da      	ldr	r2, [r3, #12]
 800c7ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800c7d2:	6a20      	ldr	r0, [r4, #32]
 800c7d4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800c7d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c7d8:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800c7da:	691a      	ldr	r2, [r3, #16]
 800c7dc:	400a      	ands	r2, r1
 800c7de:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800c7e0:	691a      	ldr	r2, [r3, #16]
 800c7e2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800c7e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800c7e8:	4302      	orrs	r2, r0
 800c7ea:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800c7ec:	695a      	ldr	r2, [r3, #20]
 800c7ee:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 800c7f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800c7f2:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800c7f4:	695a      	ldr	r2, [r3, #20]
 800c7f6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c7fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c7fc:	430a      	orrs	r2, r1
 800c7fe:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800c802:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c806:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800c80a:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c80e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c810:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800c812:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800c816:	432a      	orrs	r2, r5
 800c818:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c81c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c81e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c822:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800c824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c826:	f042 0206 	orr.w	r2, r2, #6
 800c82a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800c82c:	699a      	ldr	r2, [r3, #24]
 800c82e:	f042 0201 	orr.w	r2, r2, #1
 800c832:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800c834:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c836:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800c83a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800c83e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c840:	2001      	movs	r0, #1
 800c842:	e7fc      	b.n	800c83e <HAL_LTDC_Init+0xce>
 800c844:	f000f800 	.word	0xf000f800

0800c848 <HAL_LTDC_ErrorCallback>:
 800c848:	4770      	bx	lr

0800c84a <HAL_LTDC_LineEventCallback>:
 800c84a:	4770      	bx	lr

0800c84c <HAL_LTDC_ReloadEventCallback>:
 800c84c:	4770      	bx	lr

0800c84e <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800c84e:	6803      	ldr	r3, [r0, #0]
{
 800c850:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800c852:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 800c854:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800c856:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800c858:	0772      	lsls	r2, r6, #29
 800c85a:	d514      	bpl.n	800c886 <HAL_LTDC_IRQHandler+0x38>
 800c85c:	0769      	lsls	r1, r5, #29
 800c85e:	d512      	bpl.n	800c886 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800c860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c862:	f022 0204 	bic.w	r2, r2, #4
 800c866:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800c868:	2204      	movs	r2, #4
 800c86a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800c86c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800c870:	f043 0301 	orr.w	r3, r3, #1
 800c874:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800c878:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c87a:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800c87e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800c882:	f7ff ffe1 	bl	800c848 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800c886:	07b2      	lsls	r2, r6, #30
 800c888:	d516      	bpl.n	800c8b8 <HAL_LTDC_IRQHandler+0x6a>
 800c88a:	07ab      	lsls	r3, r5, #30
 800c88c:	d514      	bpl.n	800c8b8 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800c88e:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800c890:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800c892:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c894:	f022 0202 	bic.w	r2, r2, #2
 800c898:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800c89a:	2202      	movs	r2, #2
 800c89c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800c89e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c8a8:	2304      	movs	r3, #4
 800c8aa:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800c8b4:	f7ff ffc8 	bl	800c848 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800c8b8:	07f0      	lsls	r0, r6, #31
 800c8ba:	d510      	bpl.n	800c8de <HAL_LTDC_IRQHandler+0x90>
 800c8bc:	07e9      	lsls	r1, r5, #31
 800c8be:	d50e      	bpl.n	800c8de <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c8c0:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800c8c2:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c8c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8c6:	f022 0201 	bic.w	r2, r2, #1
 800c8ca:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 800c8d0:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800c8d2:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800c8d6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800c8da:	f7ff ffb6 	bl	800c84a <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800c8de:	0732      	lsls	r2, r6, #28
 800c8e0:	d511      	bpl.n	800c906 <HAL_LTDC_IRQHandler+0xb8>
 800c8e2:	072b      	lsls	r3, r5, #28
 800c8e4:	d50f      	bpl.n	800c906 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800c8e6:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800c8e8:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800c8ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8ec:	f022 0208 	bic.w	r2, r2, #8
 800c8f0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800c8f2:	2208      	movs	r2, #8
 800c8f4:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800c902:	f7ff ffa3 	bl	800c84c <HAL_LTDC_ReloadEventCallback>
}
 800c906:	bd70      	pop	{r4, r5, r6, pc}

0800c908 <HAL_LTDC_ConfigLayer>:
{
 800c908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800c90c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 800c910:	4606      	mov	r6, r0
 800c912:	460f      	mov	r7, r1
 800c914:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800c916:	2b01      	cmp	r3, #1
 800c918:	f04f 0002 	mov.w	r0, #2
 800c91c:	d01f      	beq.n	800c95e <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c91e:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 800c920:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c924:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c926:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c92a:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800c92e:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c932:	3438      	adds	r4, #56	; 0x38
 800c934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c93a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c93c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c93e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c940:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800c942:	4630      	mov	r0, r6
 800c944:	4662      	mov	r2, ip
 800c946:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c948:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800c94a:	f7ff fe8f 	bl	800c66c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c94e:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800c950:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c952:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800c956:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800c95a:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800c95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800c964 <HAL_LTDC_SetPitch>:
{
 800c964:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800c966:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	f04f 0302 	mov.w	r3, #2
 800c970:	d029      	beq.n	800c9c6 <HAL_LTDC_SetPitch+0x62>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c972:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800c976:	2334      	movs	r3, #52	; 0x34
 800c978:	fb03 0302 	mla	r3, r3, r2, r0
 800c97c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c97e:	b323      	cbz	r3, 800c9ca <HAL_LTDC_SetPitch+0x66>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800c980:	3b01      	subs	r3, #1
 800c982:	2b06      	cmp	r3, #6
 800c984:	d823      	bhi.n	800c9ce <HAL_LTDC_SetPitch+0x6a>
 800c986:	4c13      	ldr	r4, [pc, #76]	; (800c9d4 <HAL_LTDC_SetPitch+0x70>)
 800c988:	5ce4      	ldrb	r4, [r4, r3]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800c98a:	01d2      	lsls	r2, r2, #7
 800c98c:	6803      	ldr	r3, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800c98e:	4361      	muls	r1, r4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800c990:	3284      	adds	r2, #132	; 0x84
 800c992:	4413      	add	r3, r2
 800c994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c996:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 800c99a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800c99e:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800c9a0:	4a0d      	ldr	r2, [pc, #52]	; (800c9d8 <HAL_LTDC_SetPitch+0x74>)
 800c9a2:	6a55      	ldr	r5, [r2, #36]	; 0x24
 800c9a4:	f045 0501 	orr.w	r5, r5, #1
 800c9a8:	6255      	str	r5, [r2, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800c9aa:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800c9ac:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
 800c9b0:	62d9      	str	r1, [r3, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800c9b2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800c9b4:	f043 0301 	orr.w	r3, r3, #1
 800c9b8:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 800c9c6:	4618      	mov	r0, r3
}
 800c9c8:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 800c9ca:	2404      	movs	r4, #4
 800c9cc:	e7dd      	b.n	800c98a <HAL_LTDC_SetPitch+0x26>
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c9ce:	2401      	movs	r4, #1
 800c9d0:	e7db      	b.n	800c98a <HAL_LTDC_SetPitch+0x26>
 800c9d2:	bf00      	nop
 800c9d4:	0802ff9d 	.word	0x0802ff9d
 800c9d8:	40016800 	.word	0x40016800

0800c9dc <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800c9dc:	4b19      	ldr	r3, [pc, #100]	; (800ca44 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800c9de:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800c9e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c9e2:	4c19      	ldr	r4, [pc, #100]	; (800ca48 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800c9e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c9e8:	641a      	str	r2, [r3, #64]	; 0x40
 800c9ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9f0:	9301      	str	r3, [sp, #4]
 800c9f2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c9f4:	6823      	ldr	r3, [r4, #0]
 800c9f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c9fa:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c9fc:	f7fd f9e4 	bl	8009dc8 <HAL_GetTick>
 800ca00:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ca02:	6863      	ldr	r3, [r4, #4]
 800ca04:	03da      	lsls	r2, r3, #15
 800ca06:	d50c      	bpl.n	800ca22 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ca08:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ca0a:	4d0f      	ldr	r5, [pc, #60]	; (800ca48 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ca0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca10:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800ca12:	f7fd f9d9 	bl	8009dc8 <HAL_GetTick>
 800ca16:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ca18:	686b      	ldr	r3, [r5, #4]
 800ca1a:	039b      	lsls	r3, r3, #14
 800ca1c:	d50a      	bpl.n	800ca34 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800ca1e:	2000      	movs	r0, #0
 800ca20:	e006      	b.n	800ca30 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ca22:	f7fd f9d1 	bl	8009dc8 <HAL_GetTick>
 800ca26:	1b40      	subs	r0, r0, r5
 800ca28:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ca2c:	d9e9      	bls.n	800ca02 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800ca2e:	2003      	movs	r0, #3
}
 800ca30:	b003      	add	sp, #12
 800ca32:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ca34:	f7fd f9c8 	bl	8009dc8 <HAL_GetTick>
 800ca38:	1b00      	subs	r0, r0, r4
 800ca3a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ca3e:	d9eb      	bls.n	800ca18 <HAL_PWREx_EnableOverDrive+0x3c>
 800ca40:	e7f5      	b.n	800ca2e <HAL_PWREx_EnableOverDrive+0x52>
 800ca42:	bf00      	nop
 800ca44:	40023800 	.word	0x40023800
 800ca48:	40007000 	.word	0x40007000

0800ca4c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800ca4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800ca50:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800ca52:	b136      	cbz	r6, 800ca62 <QSPI_Config+0x16>
 800ca54:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 800ca58:	d003      	beq.n	800ca62 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800ca5a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800ca5c:	6804      	ldr	r4, [r0, #0]
 800ca5e:	3b01      	subs	r3, #1
 800ca60:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800ca62:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ca66:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800ca6a:	f1ba 0f00 	cmp.w	sl, #0
 800ca6e:	d04c      	beq.n	800cb0a <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ca70:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800ca72:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ca74:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 800ca78:	ea4a 0406 	orr.w	r4, sl, r6
 800ca7c:	680b      	ldr	r3, [r1, #0]
 800ca7e:	f8d1 8034 	ldr.w	r8, [r1, #52]	; 0x34
 800ca82:	ea44 0a02 	orr.w	sl, r4, r2
 800ca86:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800ca8a:	f1be 0f00 	cmp.w	lr, #0
 800ca8e:	d024      	beq.n	800cada <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800ca90:	688e      	ldr	r6, [r1, #8]
 800ca92:	ea4a 040e 	orr.w	r4, sl, lr
 800ca96:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ca98:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ca9a:	b19f      	cbz	r7, 800cac4 <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ca9c:	433b      	orrs	r3, r7
 800ca9e:	4303      	orrs	r3, r0
 800caa0:	68c8      	ldr	r0, [r1, #12]
 800caa2:	ea43 0309 	orr.w	r3, r3, r9
 800caa6:	ea43 0308 	orr.w	r3, r3, r8
 800caaa:	4333      	orrs	r3, r6
 800caac:	4303      	orrs	r3, r0
 800caae:	ea43 030c 	orr.w	r3, r3, ip
 800cab2:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cab4:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cab8:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800caba:	d001      	beq.n	800cac0 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800cabc:	684b      	ldr	r3, [r1, #4]
 800cabe:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800cac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cac4:	4303      	orrs	r3, r0
 800cac6:	ea43 0309 	orr.w	r3, r3, r9
 800caca:	ea43 0308 	orr.w	r3, r3, r8
 800cace:	4333      	orrs	r3, r6
 800cad0:	ea43 030c 	orr.w	r3, r3, ip
 800cad4:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cad6:	616b      	str	r3, [r5, #20]
 800cad8:	e7f2      	b.n	800cac0 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cada:	b167      	cbz	r7, 800caf6 <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cadc:	433b      	orrs	r3, r7
 800cade:	4303      	orrs	r3, r0
 800cae0:	68c8      	ldr	r0, [r1, #12]
 800cae2:	ea43 0309 	orr.w	r3, r3, r9
 800cae6:	ea43 0308 	orr.w	r3, r3, r8
 800caea:	4303      	orrs	r3, r0
 800caec:	ea43 030c 	orr.w	r3, r3, ip
 800caf0:	ea43 030a 	orr.w	r3, r3, sl
 800caf4:	e7de      	b.n	800cab4 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800caf6:	4303      	orrs	r3, r0
 800caf8:	ea43 0309 	orr.w	r3, r3, r9
 800cafc:	ea43 0408 	orr.w	r4, r3, r8
 800cb00:	ea44 030c 	orr.w	r3, r4, ip
 800cb04:	ea43 030a 	orr.w	r3, r3, sl
 800cb08:	e7e5      	b.n	800cad6 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800cb0a:	f1be 0f00 	cmp.w	lr, #0
 800cb0e:	d02c      	beq.n	800cb6a <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800cb10:	ea46 050e 	orr.w	r5, r6, lr
 800cb14:	688b      	ldr	r3, [r1, #8]
 800cb16:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cb18:	694e      	ldr	r6, [r1, #20]
 800cb1a:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800cb1c:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cb1e:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 800cb22:	04b6      	lsls	r6, r6, #18
 800cb24:	690b      	ldr	r3, [r1, #16]
 800cb26:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cb2a:	b1a7      	cbz	r7, 800cb56 <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cb2c:	433b      	orrs	r3, r7
 800cb2e:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cb30:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cb34:	ea43 0308 	orr.w	r3, r3, r8
 800cb38:	ea43 030e 	orr.w	r3, r3, lr
 800cb3c:	ea43 030c 	orr.w	r3, r3, ip
 800cb40:	ea43 0300 	orr.w	r3, r3, r0
 800cb44:	ea43 0306 	orr.w	r3, r3, r6
 800cb48:	ea43 0305 	orr.w	r3, r3, r5
 800cb4c:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cb4e:	d0b7      	beq.n	800cac0 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800cb50:	684b      	ldr	r3, [r1, #4]
 800cb52:	61a3      	str	r3, [r4, #24]
 800cb54:	e7b4      	b.n	800cac0 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cb56:	ea43 0308 	orr.w	r3, r3, r8
 800cb5a:	ea43 030e 	orr.w	r3, r3, lr
 800cb5e:	ea43 030c 	orr.w	r3, r3, ip
 800cb62:	4333      	orrs	r3, r6
 800cb64:	432b      	orrs	r3, r5
 800cb66:	6163      	str	r3, [r4, #20]
 800cb68:	e7aa      	b.n	800cac0 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cb6a:	b1d7      	cbz	r7, 800cba2 <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cb6c:	ea46 0307 	orr.w	r3, r6, r7
 800cb70:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800cb72:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cb74:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cb78:	ea43 0302 	orr.w	r3, r3, r2
 800cb7c:	ea43 0304 	orr.w	r3, r3, r4
 800cb80:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 800cb82:	ea43 0304 	orr.w	r3, r3, r4
 800cb86:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800cb88:	ea43 0304 	orr.w	r3, r3, r4
 800cb8c:	68cc      	ldr	r4, [r1, #12]
 800cb8e:	ea43 0304 	orr.w	r3, r3, r4
 800cb92:	694c      	ldr	r4, [r1, #20]
 800cb94:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800cb98:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cb9a:	d091      	beq.n	800cac0 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800cb9c:	684b      	ldr	r3, [r1, #4]
 800cb9e:	6183      	str	r3, [r0, #24]
 800cba0:	e78e      	b.n	800cac0 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800cba2:	2e00      	cmp	r6, #0
 800cba4:	d08c      	beq.n	800cac0 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cba6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800cba8:	6800      	ldr	r0, [r0, #0]
 800cbaa:	4333      	orrs	r3, r6
 800cbac:	4313      	orrs	r3, r2
 800cbae:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800cbb4:	4313      	orrs	r3, r2
 800cbb6:	694a      	ldr	r2, [r1, #20]
 800cbb8:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800cbbc:	6143      	str	r3, [r0, #20]
}
 800cbbe:	e77f      	b.n	800cac0 <QSPI_Config+0x74>

0800cbc0 <QSPI_WaitFlagStateUntilTimeout>:
{
 800cbc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800cbc8:	4604      	mov	r4, r0
 800cbca:	460e      	mov	r6, r1
 800cbcc:	4615      	mov	r5, r2
 800cbce:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cbd0:	6822      	ldr	r2, [r4, #0]
 800cbd2:	6893      	ldr	r3, [r2, #8]
 800cbd4:	4233      	tst	r3, r6
 800cbd6:	bf14      	ite	ne
 800cbd8:	2301      	movne	r3, #1
 800cbda:	2300      	moveq	r3, #0
 800cbdc:	42ab      	cmp	r3, r5
 800cbde:	d101      	bne.n	800cbe4 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800cbe0:	2000      	movs	r0, #0
 800cbe2:	e012      	b.n	800cc0a <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800cbe4:	f1b8 3fff 	cmp.w	r8, #4294967295
 800cbe8:	d0f3      	beq.n	800cbd2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cbea:	f7fd f8ed 	bl	8009dc8 <HAL_GetTick>
 800cbee:	1bc0      	subs	r0, r0, r7
 800cbf0:	4540      	cmp	r0, r8
 800cbf2:	d802      	bhi.n	800cbfa <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800cbf4:	f1b8 0f00 	cmp.w	r8, #0
 800cbf8:	d1ea      	bne.n	800cbd0 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800cbfa:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800cbfc:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800cbfe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800cc02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cc04:	f043 0301 	orr.w	r3, r3, #1
 800cc08:	6463      	str	r3, [r4, #68]	; 0x44
}
 800cc0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800cc10 <HAL_QSPI_Init>:
{
 800cc10:	b530      	push	{r4, r5, lr}
 800cc12:	4604      	mov	r4, r0
 800cc14:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 800cc16:	f7fd f8d7 	bl	8009dc8 <HAL_GetTick>
 800cc1a:	4603      	mov	r3, r0
  if(hqspi == NULL)
 800cc1c:	2c00      	cmp	r4, #0
 800cc1e:	d047      	beq.n	800ccb0 <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800cc20:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800cc24:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800cc28:	b94a      	cbnz	r2, 800cc3e <HAL_QSPI_Init+0x2e>
 800cc2a:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 800cc2c:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 800cc2e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 800cc32:	f7f7 fbbf 	bl	80043b4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800cc36:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc3a:	9b03      	ldr	r3, [sp, #12]
 800cc3c:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800cc3e:	6820      	ldr	r0, [r4, #0]
 800cc40:	68a1      	ldr	r1, [r4, #8]
 800cc42:	6802      	ldr	r2, [r0, #0]
 800cc44:	3901      	subs	r1, #1
 800cc46:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800cc4a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800cc4e:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800cc50:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800cc52:	4620      	mov	r0, r4
 800cc54:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800cc56:	9200      	str	r2, [sp, #0]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	f7ff ffb1 	bl	800cbc0 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800cc5e:	bb10      	cbnz	r0, 800cca6 <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800cc60:	6822      	ldr	r2, [r4, #0]
 800cc62:	69e5      	ldr	r5, [r4, #28]
 800cc64:	68e3      	ldr	r3, [r4, #12]
 800cc66:	6811      	ldr	r1, [r2, #0]
 800cc68:	432b      	orrs	r3, r5
 800cc6a:	6a25      	ldr	r5, [r4, #32]
 800cc6c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800cc70:	432b      	orrs	r3, r5
 800cc72:	6865      	ldr	r5, [r4, #4]
 800cc74:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 800cc78:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800cc7c:	430b      	orrs	r3, r1
 800cc7e:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800cc80:	6855      	ldr	r5, [r2, #4]
 800cc82:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800cc86:	430b      	orrs	r3, r1
 800cc88:	6921      	ldr	r1, [r4, #16]
 800cc8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800cc8e:	4909      	ldr	r1, [pc, #36]	; (800ccb4 <HAL_QSPI_Init+0xa4>)
 800cc90:	4029      	ands	r1, r5
 800cc92:	430b      	orrs	r3, r1
 800cc94:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800cc96:	6813      	ldr	r3, [r2, #0]
 800cc98:	f043 0301 	orr.w	r3, r3, #1
 800cc9c:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800cc9e:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cca0:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800cca2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800cca6:	2300      	movs	r3, #0
 800cca8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800ccac:	b005      	add	sp, #20
 800ccae:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800ccb0:	2001      	movs	r0, #1
 800ccb2:	e7fb      	b.n	800ccac <HAL_QSPI_Init+0x9c>
 800ccb4:	ffe0f8fe 	.word	0xffe0f8fe

0800ccb8 <HAL_QSPI_Command>:
{
 800ccb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ccbc:	4604      	mov	r4, r0
 800ccbe:	b085      	sub	sp, #20
 800ccc0:	4617      	mov	r7, r2
 800ccc2:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 800ccc4:	f7fd f880 	bl	8009dc8 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800ccc8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800cccc:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800ccce:	2a01      	cmp	r2, #1
 800ccd0:	d033      	beq.n	800cd3a <HAL_QSPI_Command+0x82>
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	2602      	movs	r6, #2
 800ccd6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ccda:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800ccde:	2a01      	cmp	r2, #1
 800cce0:	fa5f f882 	uxtb.w	r8, r2
 800cce4:	d127      	bne.n	800cd36 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cce6:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800cce8:	9003      	str	r0, [sp, #12]
 800ccea:	2120      	movs	r1, #32
 800ccec:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ccee:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ccf0:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800ccf2:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ccf6:	f7ff ff63 	bl	800cbc0 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800ccfa:	4605      	mov	r5, r0
 800ccfc:	b9a0      	cbnz	r0, 800cd28 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ccfe:	4602      	mov	r2, r0
 800cd00:	4649      	mov	r1, r9
 800cd02:	4620      	mov	r0, r4
 800cd04:	f7ff fea2 	bl	800ca4c <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800cd08:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 800cd0c:	9b03      	ldr	r3, [sp, #12]
 800cd0e:	b94a      	cbnz	r2, 800cd24 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800cd10:	4642      	mov	r2, r8
 800cd12:	4631      	mov	r1, r6
 800cd14:	4620      	mov	r0, r4
 800cd16:	9700      	str	r7, [sp, #0]
 800cd18:	f7ff ff52 	bl	800cbc0 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800cd1c:	4605      	mov	r5, r0
 800cd1e:	b918      	cbnz	r0, 800cd28 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800cd20:	6823      	ldr	r3, [r4, #0]
 800cd22:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800cd24:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800cd28:	2300      	movs	r3, #0
 800cd2a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800cd2e:	4628      	mov	r0, r5
 800cd30:	b005      	add	sp, #20
 800cd32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800cd36:	4635      	mov	r5, r6
 800cd38:	e7f6      	b.n	800cd28 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800cd3a:	2502      	movs	r5, #2
 800cd3c:	e7f7      	b.n	800cd2e <HAL_QSPI_Command+0x76>

0800cd3e <HAL_QSPI_Transmit>:
{
 800cd3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd40:	4604      	mov	r4, r0
 800cd42:	b085      	sub	sp, #20
 800cd44:	4616      	mov	r6, r2
 800cd46:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800cd48:	f7fd f83e 	bl	8009dc8 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800cd4c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800cd50:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800cd52:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800cd54:	2a01      	cmp	r2, #1
 800cd56:	d049      	beq.n	800cdec <HAL_QSPI_Transmit+0xae>
 800cd58:	2201      	movs	r2, #1
 800cd5a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800cd5e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800cd62:	2a01      	cmp	r2, #1
 800cd64:	b2d0      	uxtb	r0, r2
 800cd66:	d13f      	bne.n	800cde8 <HAL_QSPI_Transmit+0xaa>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cd68:	2200      	movs	r2, #0
 800cd6a:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800cd6c:	2f00      	cmp	r7, #0
 800cd6e:	d036      	beq.n	800cdde <HAL_QSPI_Transmit+0xa0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800cd70:	2212      	movs	r2, #18
 800cd72:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800cd76:	692a      	ldr	r2, [r5, #16]
 800cd78:	3201      	adds	r2, #1
 800cd7a:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800cd7c:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800cd7e:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800cd80:	3201      	adds	r2, #1
 800cd82:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800cd84:	696a      	ldr	r2, [r5, #20]
 800cd86:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800cd8a:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800cd8c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800cd8e:	b98a      	cbnz	r2, 800cdb4 <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800cd90:	2201      	movs	r2, #1
 800cd92:	2102      	movs	r1, #2
 800cd94:	4620      	mov	r0, r4
 800cd96:	9600      	str	r6, [sp, #0]
 800cd98:	f7ff ff12 	bl	800cbc0 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800cd9c:	b910      	cbnz	r0, 800cda4 <HAL_QSPI_Transmit+0x66>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800cd9e:	6823      	ldr	r3, [r4, #0]
 800cda0:	2202      	movs	r2, #2
 800cda2:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800cda4:	2301      	movs	r3, #1
 800cda6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800cdaa:	2300      	movs	r3, #0
 800cdac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800cdb0:	b005      	add	sp, #20
 800cdb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	2104      	movs	r1, #4
 800cdb8:	4620      	mov	r0, r4
 800cdba:	9600      	str	r6, [sp, #0]
 800cdbc:	9303      	str	r3, [sp, #12]
 800cdbe:	f7ff feff 	bl	800cbc0 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800cdc2:	2800      	cmp	r0, #0
 800cdc4:	d1ee      	bne.n	800cda4 <HAL_QSPI_Transmit+0x66>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800cdc6:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800cdc8:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800cdca:	7812      	ldrb	r2, [r2, #0]
 800cdcc:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 800cdd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800cdd2:	3201      	adds	r2, #1
 800cdd4:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800cdd6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800cdd8:	3a01      	subs	r2, #1
 800cdda:	62e2      	str	r2, [r4, #44]	; 0x2c
 800cddc:	e7d6      	b.n	800cd8c <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800cdde:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cde0:	f043 0308 	orr.w	r3, r3, #8
 800cde4:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800cde6:	e7e0      	b.n	800cdaa <HAL_QSPI_Transmit+0x6c>
    status = HAL_BUSY;
 800cde8:	2002      	movs	r0, #2
 800cdea:	e7de      	b.n	800cdaa <HAL_QSPI_Transmit+0x6c>
  __HAL_LOCK(hqspi);
 800cdec:	2002      	movs	r0, #2
 800cdee:	e7df      	b.n	800cdb0 <HAL_QSPI_Transmit+0x72>

0800cdf0 <HAL_QSPI_Receive>:
{
 800cdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdf2:	4604      	mov	r4, r0
 800cdf4:	b085      	sub	sp, #20
 800cdf6:	4616      	mov	r6, r2
 800cdf8:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800cdfa:	f7fc ffe5 	bl	8009dc8 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800cdfe:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800ce00:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800ce02:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 800ce06:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800ce0a:	2a01      	cmp	r2, #1
 800ce0c:	d04d      	beq.n	800ceaa <HAL_QSPI_Receive+0xba>
 800ce0e:	2201      	movs	r2, #1
 800ce10:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ce14:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800ce18:	2a01      	cmp	r2, #1
 800ce1a:	b2d0      	uxtb	r0, r2
 800ce1c:	d143      	bne.n	800cea6 <HAL_QSPI_Receive+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ce1e:	2200      	movs	r2, #0
 800ce20:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800ce22:	2f00      	cmp	r7, #0
 800ce24:	d03a      	beq.n	800ce9c <HAL_QSPI_Receive+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800ce26:	2222      	movs	r2, #34	; 0x22
 800ce28:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800ce2c:	692a      	ldr	r2, [r5, #16]
 800ce2e:	3201      	adds	r2, #1
 800ce30:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ce32:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800ce34:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ce36:	3201      	adds	r2, #1
 800ce38:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800ce3a:	6969      	ldr	r1, [r5, #20]
 800ce3c:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 800ce40:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800ce44:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800ce46:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800ce4a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ce4c:	b98a      	cbnz	r2, 800ce72 <HAL_QSPI_Receive+0x82>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ce4e:	2201      	movs	r2, #1
 800ce50:	2102      	movs	r1, #2
 800ce52:	4620      	mov	r0, r4
 800ce54:	9600      	str	r6, [sp, #0]
 800ce56:	f7ff feb3 	bl	800cbc0 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800ce5a:	b910      	cbnz	r0, 800ce62 <HAL_QSPI_Receive+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ce5c:	6823      	ldr	r3, [r4, #0]
 800ce5e:	2202      	movs	r2, #2
 800ce60:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800ce62:	2301      	movs	r3, #1
 800ce64:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800ce68:	2300      	movs	r3, #0
 800ce6a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800ce6e:	b005      	add	sp, #20
 800ce70:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800ce72:	2201      	movs	r2, #1
 800ce74:	2106      	movs	r1, #6
 800ce76:	4620      	mov	r0, r4
 800ce78:	9600      	str	r6, [sp, #0]
 800ce7a:	9303      	str	r3, [sp, #12]
 800ce7c:	f7ff fea0 	bl	800cbc0 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800ce80:	2800      	cmp	r0, #0
 800ce82:	d1ee      	bne.n	800ce62 <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800ce84:	f895 1020 	ldrb.w	r1, [r5, #32]
 800ce88:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800ce8a:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800ce8c:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 800ce8e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ce90:	3201      	adds	r2, #1
 800ce92:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800ce94:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ce96:	3a01      	subs	r2, #1
 800ce98:	63a2      	str	r2, [r4, #56]	; 0x38
 800ce9a:	e7d6      	b.n	800ce4a <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800ce9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ce9e:	f043 0308 	orr.w	r3, r3, #8
 800cea2:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800cea4:	e7e0      	b.n	800ce68 <HAL_QSPI_Receive+0x78>
    status = HAL_BUSY;
 800cea6:	2002      	movs	r0, #2
 800cea8:	e7de      	b.n	800ce68 <HAL_QSPI_Receive+0x78>
  __HAL_LOCK(hqspi);
 800ceaa:	2002      	movs	r0, #2
 800ceac:	e7df      	b.n	800ce6e <HAL_QSPI_Receive+0x7e>

0800ceae <HAL_QSPI_AutoPolling>:
{
 800ceae:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800ceb2:	4604      	mov	r4, r0
 800ceb4:	4615      	mov	r5, r2
 800ceb6:	461e      	mov	r6, r3
 800ceb8:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800ceba:	f7fc ff85 	bl	8009dc8 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800cebe:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800cec2:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800cec4:	2a01      	cmp	r2, #1
 800cec6:	d040      	beq.n	800cf4a <HAL_QSPI_AutoPolling+0x9c>
 800cec8:	2201      	movs	r2, #1
 800ceca:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800cece:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800ced2:	2a01      	cmp	r2, #1
 800ced4:	b2d7      	uxtb	r7, r2
 800ced6:	d136      	bne.n	800cf46 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800ced8:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ceda:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800cedc:	9003      	str	r0, [sp, #12]
 800cede:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cee0:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800cee2:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800cee4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800cee8:	2120      	movs	r1, #32
 800ceea:	f7ff fe69 	bl	800cbc0 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800ceee:	bb20      	cbnz	r0, 800cf3a <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800cef0:	6821      	ldr	r1, [r4, #0]
 800cef2:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800cef4:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800cef6:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800cef8:	686a      	ldr	r2, [r5, #4]
 800cefa:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800cefc:	68aa      	ldr	r2, [r5, #8]
 800cefe:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800cf00:	680a      	ldr	r2, [r1, #0]
 800cf02:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800cf06:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800cf08:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800cf0a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800cf0e:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800cf10:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 800cf12:	68ea      	ldr	r2, [r5, #12]
 800cf14:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800cf18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cf1c:	f7ff fd96 	bl	800ca4c <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800cf20:	9b03      	ldr	r3, [sp, #12]
 800cf22:	463a      	mov	r2, r7
 800cf24:	2108      	movs	r1, #8
 800cf26:	4620      	mov	r0, r4
 800cf28:	9600      	str	r6, [sp, #0]
 800cf2a:	f7ff fe49 	bl	800cbc0 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800cf2e:	b920      	cbnz	r0, 800cf3a <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800cf30:	6823      	ldr	r3, [r4, #0]
 800cf32:	2208      	movs	r2, #8
 800cf34:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800cf36:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800cf40:	b004      	add	sp, #16
 800cf42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 800cf46:	2002      	movs	r0, #2
 800cf48:	e7f7      	b.n	800cf3a <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 800cf4a:	2002      	movs	r0, #2
 800cf4c:	e7f8      	b.n	800cf40 <HAL_QSPI_AutoPolling+0x92>

0800cf4e <HAL_QSPI_MemoryMapped>:
{
 800cf4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf50:	4604      	mov	r4, r0
 800cf52:	4616      	mov	r6, r2
 800cf54:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800cf56:	f7fc ff37 	bl	8009dc8 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800cf5a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800cf5e:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800cf60:	2a01      	cmp	r2, #1
 800cf62:	d033      	beq.n	800cfcc <HAL_QSPI_MemoryMapped+0x7e>
 800cf64:	2201      	movs	r2, #1
 800cf66:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800cf6a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800cf6e:	2a01      	cmp	r2, #1
 800cf70:	d12a      	bne.n	800cfc8 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cf72:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800cf74:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800cf76:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cf78:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800cf7a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800cf7e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cf80:	9100      	str	r1, [sp, #0]
 800cf82:	2120      	movs	r1, #32
 800cf84:	f7ff fe1c 	bl	800cbc0 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800cf88:	4605      	mov	r5, r0
 800cf8a:	b9b8      	cbnz	r0, 800cfbc <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800cf8c:	6823      	ldr	r3, [r4, #0]
 800cf8e:	6872      	ldr	r2, [r6, #4]
 800cf90:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800cf92:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800cf94:	f020 0008 	bic.w	r0, r0, #8
 800cf98:	ea40 0002 	orr.w	r0, r0, r2
 800cf9c:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800cf9e:	d107      	bne.n	800cfb0 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800cfa0:	6832      	ldr	r2, [r6, #0]
 800cfa2:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800cfa4:	2210      	movs	r2, #16
 800cfa6:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800cfae:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800cfb0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800cfb4:	4639      	mov	r1, r7
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	f7ff fd48 	bl	800ca4c <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800cfc2:	4628      	mov	r0, r5
 800cfc4:	b003      	add	sp, #12
 800cfc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800cfc8:	2502      	movs	r5, #2
 800cfca:	e7f7      	b.n	800cfbc <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800cfcc:	2502      	movs	r5, #2
 800cfce:	e7f8      	b.n	800cfc2 <HAL_QSPI_MemoryMapped+0x74>

0800cfd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cfd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cfd4:	4604      	mov	r4, r0
 800cfd6:	b340      	cbz	r0, 800d02a <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cfd8:	6803      	ldr	r3, [r0, #0]
 800cfda:	07db      	lsls	r3, r3, #31
 800cfdc:	d410      	bmi.n	800d000 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cfde:	6823      	ldr	r3, [r4, #0]
 800cfe0:	079f      	lsls	r7, r3, #30
 800cfe2:	d461      	bmi.n	800d0a8 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cfe4:	6823      	ldr	r3, [r4, #0]
 800cfe6:	0719      	lsls	r1, r3, #28
 800cfe8:	f100 80a6 	bmi.w	800d138 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cfec:	6823      	ldr	r3, [r4, #0]
 800cfee:	075a      	lsls	r2, r3, #29
 800cff0:	f100 80c7 	bmi.w	800d182 <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cff4:	69a2      	ldr	r2, [r4, #24]
 800cff6:	2a00      	cmp	r2, #0
 800cff8:	f040 8130 	bne.w	800d25c <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800cffc:	2000      	movs	r0, #0
 800cffe:	e02c      	b.n	800d05a <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d000:	4b94      	ldr	r3, [pc, #592]	; (800d254 <HAL_RCC_OscConfig+0x284>)
 800d002:	689a      	ldr	r2, [r3, #8]
 800d004:	f002 020c 	and.w	r2, r2, #12
 800d008:	2a04      	cmp	r2, #4
 800d00a:	d007      	beq.n	800d01c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d00c:	689a      	ldr	r2, [r3, #8]
 800d00e:	f002 020c 	and.w	r2, r2, #12
 800d012:	2a08      	cmp	r2, #8
 800d014:	d10b      	bne.n	800d02e <HAL_RCC_OscConfig+0x5e>
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	025e      	lsls	r6, r3, #9
 800d01a:	d508      	bpl.n	800d02e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d01c:	4b8d      	ldr	r3, [pc, #564]	; (800d254 <HAL_RCC_OscConfig+0x284>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	039d      	lsls	r5, r3, #14
 800d022:	d5dc      	bpl.n	800cfde <HAL_RCC_OscConfig+0xe>
 800d024:	6863      	ldr	r3, [r4, #4]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d1d9      	bne.n	800cfde <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 800d02a:	2001      	movs	r0, #1
 800d02c:	e015      	b.n	800d05a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d02e:	6863      	ldr	r3, [r4, #4]
 800d030:	4d88      	ldr	r5, [pc, #544]	; (800d254 <HAL_RCC_OscConfig+0x284>)
 800d032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d036:	d113      	bne.n	800d060 <HAL_RCC_OscConfig+0x90>
 800d038:	682b      	ldr	r3, [r5, #0]
 800d03a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d03e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d040:	f7fc fec2 	bl	8009dc8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d044:	4e83      	ldr	r6, [pc, #524]	; (800d254 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 800d046:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d048:	6833      	ldr	r3, [r6, #0]
 800d04a:	0398      	lsls	r0, r3, #14
 800d04c:	d4c7      	bmi.n	800cfde <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d04e:	f7fc febb 	bl	8009dc8 <HAL_GetTick>
 800d052:	1b40      	subs	r0, r0, r5
 800d054:	2864      	cmp	r0, #100	; 0x64
 800d056:	d9f7      	bls.n	800d048 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 800d058:	2003      	movs	r0, #3
}
 800d05a:	b002      	add	sp, #8
 800d05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d060:	b99b      	cbnz	r3, 800d08a <HAL_RCC_OscConfig+0xba>
 800d062:	682b      	ldr	r3, [r5, #0]
 800d064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d068:	602b      	str	r3, [r5, #0]
 800d06a:	682b      	ldr	r3, [r5, #0]
 800d06c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d070:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d072:	f7fc fea9 	bl	8009dc8 <HAL_GetTick>
 800d076:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d078:	682b      	ldr	r3, [r5, #0]
 800d07a:	0399      	lsls	r1, r3, #14
 800d07c:	d5af      	bpl.n	800cfde <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d07e:	f7fc fea3 	bl	8009dc8 <HAL_GetTick>
 800d082:	1b80      	subs	r0, r0, r6
 800d084:	2864      	cmp	r0, #100	; 0x64
 800d086:	d9f7      	bls.n	800d078 <HAL_RCC_OscConfig+0xa8>
 800d088:	e7e6      	b.n	800d058 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d08a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d08e:	682b      	ldr	r3, [r5, #0]
 800d090:	d103      	bne.n	800d09a <HAL_RCC_OscConfig+0xca>
 800d092:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d096:	602b      	str	r3, [r5, #0]
 800d098:	e7ce      	b.n	800d038 <HAL_RCC_OscConfig+0x68>
 800d09a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d09e:	602b      	str	r3, [r5, #0]
 800d0a0:	682b      	ldr	r3, [r5, #0]
 800d0a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d0a6:	e7ca      	b.n	800d03e <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d0a8:	4b6a      	ldr	r3, [pc, #424]	; (800d254 <HAL_RCC_OscConfig+0x284>)
 800d0aa:	689a      	ldr	r2, [r3, #8]
 800d0ac:	f012 0f0c 	tst.w	r2, #12
 800d0b0:	d007      	beq.n	800d0c2 <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d0b2:	689a      	ldr	r2, [r3, #8]
 800d0b4:	f002 020c 	and.w	r2, r2, #12
 800d0b8:	2a08      	cmp	r2, #8
 800d0ba:	d111      	bne.n	800d0e0 <HAL_RCC_OscConfig+0x110>
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	025a      	lsls	r2, r3, #9
 800d0c0:	d40e      	bmi.n	800d0e0 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d0c2:	4a64      	ldr	r2, [pc, #400]	; (800d254 <HAL_RCC_OscConfig+0x284>)
 800d0c4:	6813      	ldr	r3, [r2, #0]
 800d0c6:	079b      	lsls	r3, r3, #30
 800d0c8:	d502      	bpl.n	800d0d0 <HAL_RCC_OscConfig+0x100>
 800d0ca:	68e3      	ldr	r3, [r4, #12]
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	d1ac      	bne.n	800d02a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d0d0:	6813      	ldr	r3, [r2, #0]
 800d0d2:	6921      	ldr	r1, [r4, #16]
 800d0d4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d0d8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800d0dc:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d0de:	e781      	b.n	800cfe4 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d0e0:	68e3      	ldr	r3, [r4, #12]
 800d0e2:	4d5c      	ldr	r5, [pc, #368]	; (800d254 <HAL_RCC_OscConfig+0x284>)
 800d0e4:	b1bb      	cbz	r3, 800d116 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 800d0e6:	682b      	ldr	r3, [r5, #0]
 800d0e8:	f043 0301 	orr.w	r3, r3, #1
 800d0ec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d0ee:	f7fc fe6b 	bl	8009dc8 <HAL_GetTick>
 800d0f2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d0f4:	682b      	ldr	r3, [r5, #0]
 800d0f6:	079f      	lsls	r7, r3, #30
 800d0f8:	d507      	bpl.n	800d10a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d0fa:	682b      	ldr	r3, [r5, #0]
 800d0fc:	6922      	ldr	r2, [r4, #16]
 800d0fe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d102:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800d106:	602b      	str	r3, [r5, #0]
 800d108:	e76c      	b.n	800cfe4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d10a:	f7fc fe5d 	bl	8009dc8 <HAL_GetTick>
 800d10e:	1b80      	subs	r0, r0, r6
 800d110:	2802      	cmp	r0, #2
 800d112:	d9ef      	bls.n	800d0f4 <HAL_RCC_OscConfig+0x124>
 800d114:	e7a0      	b.n	800d058 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 800d116:	682b      	ldr	r3, [r5, #0]
 800d118:	f023 0301 	bic.w	r3, r3, #1
 800d11c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d11e:	f7fc fe53 	bl	8009dc8 <HAL_GetTick>
 800d122:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d124:	682b      	ldr	r3, [r5, #0]
 800d126:	0798      	lsls	r0, r3, #30
 800d128:	f57f af5c 	bpl.w	800cfe4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d12c:	f7fc fe4c 	bl	8009dc8 <HAL_GetTick>
 800d130:	1b80      	subs	r0, r0, r6
 800d132:	2802      	cmp	r0, #2
 800d134:	d9f6      	bls.n	800d124 <HAL_RCC_OscConfig+0x154>
 800d136:	e78f      	b.n	800d058 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d138:	6963      	ldr	r3, [r4, #20]
 800d13a:	4d46      	ldr	r5, [pc, #280]	; (800d254 <HAL_RCC_OscConfig+0x284>)
 800d13c:	b183      	cbz	r3, 800d160 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 800d13e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d140:	f043 0301 	orr.w	r3, r3, #1
 800d144:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800d146:	f7fc fe3f 	bl	8009dc8 <HAL_GetTick>
 800d14a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d14c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d14e:	079b      	lsls	r3, r3, #30
 800d150:	f53f af4c 	bmi.w	800cfec <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d154:	f7fc fe38 	bl	8009dc8 <HAL_GetTick>
 800d158:	1b80      	subs	r0, r0, r6
 800d15a:	2802      	cmp	r0, #2
 800d15c:	d9f6      	bls.n	800d14c <HAL_RCC_OscConfig+0x17c>
 800d15e:	e77b      	b.n	800d058 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 800d160:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d162:	f023 0301 	bic.w	r3, r3, #1
 800d166:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800d168:	f7fc fe2e 	bl	8009dc8 <HAL_GetTick>
 800d16c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d16e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d170:	079f      	lsls	r7, r3, #30
 800d172:	f57f af3b 	bpl.w	800cfec <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d176:	f7fc fe27 	bl	8009dc8 <HAL_GetTick>
 800d17a:	1b80      	subs	r0, r0, r6
 800d17c:	2802      	cmp	r0, #2
 800d17e:	d9f6      	bls.n	800d16e <HAL_RCC_OscConfig+0x19e>
 800d180:	e76a      	b.n	800d058 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d182:	4b34      	ldr	r3, [pc, #208]	; (800d254 <HAL_RCC_OscConfig+0x284>)
 800d184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d186:	00d0      	lsls	r0, r2, #3
 800d188:	d427      	bmi.n	800d1da <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 800d18a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800d18c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800d18e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d192:	641a      	str	r2, [r3, #64]	; 0x40
 800d194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d19a:	9301      	str	r3, [sp, #4]
 800d19c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d19e:	4d2e      	ldr	r5, [pc, #184]	; (800d258 <HAL_RCC_OscConfig+0x288>)
 800d1a0:	682b      	ldr	r3, [r5, #0]
 800d1a2:	05d9      	lsls	r1, r3, #23
 800d1a4:	d51b      	bpl.n	800d1de <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d1a6:	68a3      	ldr	r3, [r4, #8]
 800d1a8:	4d2a      	ldr	r5, [pc, #168]	; (800d254 <HAL_RCC_OscConfig+0x284>)
 800d1aa:	2b01      	cmp	r3, #1
 800d1ac:	d127      	bne.n	800d1fe <HAL_RCC_OscConfig+0x22e>
 800d1ae:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d1b0:	f043 0301 	orr.w	r3, r3, #1
 800d1b4:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d1b6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800d1ba:	f7fc fe05 	bl	8009dc8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d1be:	4e25      	ldr	r6, [pc, #148]	; (800d254 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 800d1c0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d1c2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800d1c4:	079b      	lsls	r3, r3, #30
 800d1c6:	d53f      	bpl.n	800d248 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 800d1c8:	2f00      	cmp	r7, #0
 800d1ca:	f43f af13 	beq.w	800cff4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d1ce:	4a21      	ldr	r2, [pc, #132]	; (800d254 <HAL_RCC_OscConfig+0x284>)
 800d1d0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d1d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d1d6:	6413      	str	r3, [r2, #64]	; 0x40
 800d1d8:	e70c      	b.n	800cff4 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 800d1da:	2700      	movs	r7, #0
 800d1dc:	e7df      	b.n	800d19e <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 800d1de:	682b      	ldr	r3, [r5, #0]
 800d1e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1e4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800d1e6:	f7fc fdef 	bl	8009dc8 <HAL_GetTick>
 800d1ea:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d1ec:	682b      	ldr	r3, [r5, #0]
 800d1ee:	05da      	lsls	r2, r3, #23
 800d1f0:	d4d9      	bmi.n	800d1a6 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d1f2:	f7fc fde9 	bl	8009dc8 <HAL_GetTick>
 800d1f6:	1b80      	subs	r0, r0, r6
 800d1f8:	2864      	cmp	r0, #100	; 0x64
 800d1fa:	d9f7      	bls.n	800d1ec <HAL_RCC_OscConfig+0x21c>
 800d1fc:	e72c      	b.n	800d058 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d1fe:	b9ab      	cbnz	r3, 800d22c <HAL_RCC_OscConfig+0x25c>
 800d200:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d202:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d206:	f023 0301 	bic.w	r3, r3, #1
 800d20a:	672b      	str	r3, [r5, #112]	; 0x70
 800d20c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d20e:	f023 0304 	bic.w	r3, r3, #4
 800d212:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800d214:	f7fc fdd8 	bl	8009dc8 <HAL_GetTick>
 800d218:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d21a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d21c:	0798      	lsls	r0, r3, #30
 800d21e:	d5d3      	bpl.n	800d1c8 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d220:	f7fc fdd2 	bl	8009dc8 <HAL_GetTick>
 800d224:	1b80      	subs	r0, r0, r6
 800d226:	4540      	cmp	r0, r8
 800d228:	d9f7      	bls.n	800d21a <HAL_RCC_OscConfig+0x24a>
 800d22a:	e715      	b.n	800d058 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d22c:	2b05      	cmp	r3, #5
 800d22e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d230:	d103      	bne.n	800d23a <HAL_RCC_OscConfig+0x26a>
 800d232:	f043 0304 	orr.w	r3, r3, #4
 800d236:	672b      	str	r3, [r5, #112]	; 0x70
 800d238:	e7b9      	b.n	800d1ae <HAL_RCC_OscConfig+0x1de>
 800d23a:	f023 0301 	bic.w	r3, r3, #1
 800d23e:	672b      	str	r3, [r5, #112]	; 0x70
 800d240:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d242:	f023 0304 	bic.w	r3, r3, #4
 800d246:	e7b5      	b.n	800d1b4 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d248:	f7fc fdbe 	bl	8009dc8 <HAL_GetTick>
 800d24c:	1b40      	subs	r0, r0, r5
 800d24e:	4540      	cmp	r0, r8
 800d250:	d9b7      	bls.n	800d1c2 <HAL_RCC_OscConfig+0x1f2>
 800d252:	e701      	b.n	800d058 <HAL_RCC_OscConfig+0x88>
 800d254:	40023800 	.word	0x40023800
 800d258:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d25c:	4d3c      	ldr	r5, [pc, #240]	; (800d350 <HAL_RCC_OscConfig+0x380>)
 800d25e:	68ab      	ldr	r3, [r5, #8]
 800d260:	f003 030c 	and.w	r3, r3, #12
 800d264:	2b08      	cmp	r3, #8
 800d266:	d042      	beq.n	800d2ee <HAL_RCC_OscConfig+0x31e>
        __HAL_RCC_PLL_DISABLE();
 800d268:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d26a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800d26c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d270:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d272:	d12f      	bne.n	800d2d4 <HAL_RCC_OscConfig+0x304>
        tickstart = HAL_GetTick();
 800d274:	f7fc fda8 	bl	8009dc8 <HAL_GetTick>
 800d278:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d27a:	682b      	ldr	r3, [r5, #0]
 800d27c:	0199      	lsls	r1, r3, #6
 800d27e:	d423      	bmi.n	800d2c8 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d280:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800d284:	4313      	orrs	r3, r2
 800d286:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d288:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800d28c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d28e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d292:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d294:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800d298:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d29a:	0852      	lsrs	r2, r2, #1
 800d29c:	3a01      	subs	r2, #1
 800d29e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d2a2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800d2a4:	682b      	ldr	r3, [r5, #0]
 800d2a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d2aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d2ac:	f7fc fd8c 	bl	8009dc8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d2b0:	4d27      	ldr	r5, [pc, #156]	; (800d350 <HAL_RCC_OscConfig+0x380>)
        tickstart = HAL_GetTick();
 800d2b2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d2b4:	682b      	ldr	r3, [r5, #0]
 800d2b6:	019a      	lsls	r2, r3, #6
 800d2b8:	f53f aea0 	bmi.w	800cffc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d2bc:	f7fc fd84 	bl	8009dc8 <HAL_GetTick>
 800d2c0:	1b00      	subs	r0, r0, r4
 800d2c2:	2802      	cmp	r0, #2
 800d2c4:	d9f6      	bls.n	800d2b4 <HAL_RCC_OscConfig+0x2e4>
 800d2c6:	e6c7      	b.n	800d058 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d2c8:	f7fc fd7e 	bl	8009dc8 <HAL_GetTick>
 800d2cc:	1b80      	subs	r0, r0, r6
 800d2ce:	2802      	cmp	r0, #2
 800d2d0:	d9d3      	bls.n	800d27a <HAL_RCC_OscConfig+0x2aa>
 800d2d2:	e6c1      	b.n	800d058 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 800d2d4:	f7fc fd78 	bl	8009dc8 <HAL_GetTick>
 800d2d8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d2da:	682b      	ldr	r3, [r5, #0]
 800d2dc:	019b      	lsls	r3, r3, #6
 800d2de:	f57f ae8d 	bpl.w	800cffc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d2e2:	f7fc fd71 	bl	8009dc8 <HAL_GetTick>
 800d2e6:	1b00      	subs	r0, r0, r4
 800d2e8:	2802      	cmp	r0, #2
 800d2ea:	d9f6      	bls.n	800d2da <HAL_RCC_OscConfig+0x30a>
 800d2ec:	e6b4      	b.n	800d058 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d2ee:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800d2f0:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d2f2:	f43f ae9a 	beq.w	800d02a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d2f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d2fa:	69e1      	ldr	r1, [r4, #28]
 800d2fc:	428a      	cmp	r2, r1
 800d2fe:	f47f ae94 	bne.w	800d02a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d302:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d306:	6a21      	ldr	r1, [r4, #32]
 800d308:	428a      	cmp	r2, r1
 800d30a:	f47f ae8e 	bne.w	800d02a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d30e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d312:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d314:	401a      	ands	r2, r3
 800d316:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800d31a:	f47f ae86 	bne.w	800d02a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d31e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d320:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800d324:	0852      	lsrs	r2, r2, #1
 800d326:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d328:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800d32c:	f47f ae7d 	bne.w	800d02a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d330:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d334:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d336:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800d33a:	f47f ae76 	bne.w	800d02a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800d33e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d342:	6b22      	ldr	r2, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d344:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800d348:	f43f ae58 	beq.w	800cffc <HAL_RCC_OscConfig+0x2c>
 800d34c:	e66d      	b.n	800d02a <HAL_RCC_OscConfig+0x5a>
 800d34e:	bf00      	nop
 800d350:	40023800 	.word	0x40023800

0800d354 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d354:	4913      	ldr	r1, [pc, #76]	; (800d3a4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800d356:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d358:	688b      	ldr	r3, [r1, #8]
 800d35a:	f003 030c 	and.w	r3, r3, #12
 800d35e:	2b04      	cmp	r3, #4
 800d360:	d01b      	beq.n	800d39a <HAL_RCC_GetSysClockFreq+0x46>
 800d362:	2b08      	cmp	r3, #8
 800d364:	d11b      	bne.n	800d39e <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d366:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800d368:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d36a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d36c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800d370:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d374:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800d378:	bf1a      	itte	ne
 800d37a:	480b      	ldrne	r0, [pc, #44]	; (800d3a8 <HAL_RCC_GetSysClockFreq+0x54>)
 800d37c:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d37e:	480b      	ldreq	r0, [pc, #44]	; (800d3ac <HAL_RCC_GetSysClockFreq+0x58>)
 800d380:	fba1 0100 	umull	r0, r1, r1, r0
 800d384:	f7f3 f968 	bl	8000658 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800d388:	4b06      	ldr	r3, [pc, #24]	; (800d3a4 <HAL_RCC_GetSysClockFreq+0x50>)
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800d390:	3301      	adds	r3, #1
 800d392:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800d394:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800d398:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d39a:	4803      	ldr	r0, [pc, #12]	; (800d3a8 <HAL_RCC_GetSysClockFreq+0x54>)
 800d39c:	e7fc      	b.n	800d398 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 800d39e:	4803      	ldr	r0, [pc, #12]	; (800d3ac <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800d3a0:	e7fa      	b.n	800d398 <HAL_RCC_GetSysClockFreq+0x44>
 800d3a2:	bf00      	nop
 800d3a4:	40023800 	.word	0x40023800
 800d3a8:	017d7840 	.word	0x017d7840
 800d3ac:	00f42400 	.word	0x00f42400

0800d3b0 <HAL_RCC_ClockConfig>:
{
 800d3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3b4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800d3b6:	4604      	mov	r4, r0
 800d3b8:	b910      	cbnz	r0, 800d3c0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800d3ba:	2001      	movs	r0, #1
}
 800d3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d3c0:	4a45      	ldr	r2, [pc, #276]	; (800d4d8 <HAL_RCC_ClockConfig+0x128>)
 800d3c2:	6813      	ldr	r3, [r2, #0]
 800d3c4:	f003 030f 	and.w	r3, r3, #15
 800d3c8:	428b      	cmp	r3, r1
 800d3ca:	d328      	bcc.n	800d41e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d3cc:	6821      	ldr	r1, [r4, #0]
 800d3ce:	078f      	lsls	r7, r1, #30
 800d3d0:	d430      	bmi.n	800d434 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d3d2:	07c8      	lsls	r0, r1, #31
 800d3d4:	d443      	bmi.n	800d45e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d3d6:	4a40      	ldr	r2, [pc, #256]	; (800d4d8 <HAL_RCC_ClockConfig+0x128>)
 800d3d8:	6813      	ldr	r3, [r2, #0]
 800d3da:	f003 030f 	and.w	r3, r3, #15
 800d3de:	42ab      	cmp	r3, r5
 800d3e0:	d866      	bhi.n	800d4b0 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d3e2:	6822      	ldr	r2, [r4, #0]
 800d3e4:	0751      	lsls	r1, r2, #29
 800d3e6:	d46f      	bmi.n	800d4c8 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d3e8:	0713      	lsls	r3, r2, #28
 800d3ea:	d507      	bpl.n	800d3fc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d3ec:	4a3b      	ldr	r2, [pc, #236]	; (800d4dc <HAL_RCC_ClockConfig+0x12c>)
 800d3ee:	6921      	ldr	r1, [r4, #16]
 800d3f0:	6893      	ldr	r3, [r2, #8]
 800d3f2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800d3f6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800d3fa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d3fc:	f7ff ffaa 	bl	800d354 <HAL_RCC_GetSysClockFreq>
 800d400:	4b36      	ldr	r3, [pc, #216]	; (800d4dc <HAL_RCC_ClockConfig+0x12c>)
 800d402:	4a37      	ldr	r2, [pc, #220]	; (800d4e0 <HAL_RCC_ClockConfig+0x130>)
 800d404:	689b      	ldr	r3, [r3, #8]
 800d406:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800d40a:	5cd3      	ldrb	r3, [r2, r3]
 800d40c:	40d8      	lsrs	r0, r3
 800d40e:	4b35      	ldr	r3, [pc, #212]	; (800d4e4 <HAL_RCC_ClockConfig+0x134>)
 800d410:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800d412:	4b35      	ldr	r3, [pc, #212]	; (800d4e8 <HAL_RCC_ClockConfig+0x138>)
 800d414:	6818      	ldr	r0, [r3, #0]
 800d416:	f7f7 f90f 	bl	8004638 <HAL_InitTick>
  return HAL_OK;
 800d41a:	2000      	movs	r0, #0
 800d41c:	e7ce      	b.n	800d3bc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d41e:	6813      	ldr	r3, [r2, #0]
 800d420:	f023 030f 	bic.w	r3, r3, #15
 800d424:	430b      	orrs	r3, r1
 800d426:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d428:	6813      	ldr	r3, [r2, #0]
 800d42a:	f003 030f 	and.w	r3, r3, #15
 800d42e:	428b      	cmp	r3, r1
 800d430:	d1c3      	bne.n	800d3ba <HAL_RCC_ClockConfig+0xa>
 800d432:	e7cb      	b.n	800d3cc <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d434:	f011 0f04 	tst.w	r1, #4
 800d438:	4b28      	ldr	r3, [pc, #160]	; (800d4dc <HAL_RCC_ClockConfig+0x12c>)
 800d43a:	d003      	beq.n	800d444 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d43c:	689a      	ldr	r2, [r3, #8]
 800d43e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800d442:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d444:	070e      	lsls	r6, r1, #28
 800d446:	d503      	bpl.n	800d450 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d448:	689a      	ldr	r2, [r3, #8]
 800d44a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800d44e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d450:	689a      	ldr	r2, [r3, #8]
 800d452:	68a0      	ldr	r0, [r4, #8]
 800d454:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800d458:	4302      	orrs	r2, r0
 800d45a:	609a      	str	r2, [r3, #8]
 800d45c:	e7b9      	b.n	800d3d2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d45e:	6861      	ldr	r1, [r4, #4]
 800d460:	4b1e      	ldr	r3, [pc, #120]	; (800d4dc <HAL_RCC_ClockConfig+0x12c>)
 800d462:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d464:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d466:	d11b      	bne.n	800d4a0 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d468:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d46c:	d0a5      	beq.n	800d3ba <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d46e:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d470:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d474:	4f19      	ldr	r7, [pc, #100]	; (800d4dc <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d476:	f022 0203 	bic.w	r2, r2, #3
 800d47a:	430a      	orrs	r2, r1
 800d47c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800d47e:	f7fc fca3 	bl	8009dc8 <HAL_GetTick>
 800d482:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	6862      	ldr	r2, [r4, #4]
 800d488:	f003 030c 	and.w	r3, r3, #12
 800d48c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800d490:	d0a1      	beq.n	800d3d6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d492:	f7fc fc99 	bl	8009dc8 <HAL_GetTick>
 800d496:	1b80      	subs	r0, r0, r6
 800d498:	4540      	cmp	r0, r8
 800d49a:	d9f3      	bls.n	800d484 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800d49c:	2003      	movs	r0, #3
 800d49e:	e78d      	b.n	800d3bc <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d4a0:	2902      	cmp	r1, #2
 800d4a2:	d102      	bne.n	800d4aa <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d4a4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800d4a8:	e7e0      	b.n	800d46c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d4aa:	f012 0f02 	tst.w	r2, #2
 800d4ae:	e7dd      	b.n	800d46c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d4b0:	6813      	ldr	r3, [r2, #0]
 800d4b2:	f023 030f 	bic.w	r3, r3, #15
 800d4b6:	432b      	orrs	r3, r5
 800d4b8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d4ba:	6813      	ldr	r3, [r2, #0]
 800d4bc:	f003 030f 	and.w	r3, r3, #15
 800d4c0:	42ab      	cmp	r3, r5
 800d4c2:	f47f af7a 	bne.w	800d3ba <HAL_RCC_ClockConfig+0xa>
 800d4c6:	e78c      	b.n	800d3e2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d4c8:	4904      	ldr	r1, [pc, #16]	; (800d4dc <HAL_RCC_ClockConfig+0x12c>)
 800d4ca:	68e0      	ldr	r0, [r4, #12]
 800d4cc:	688b      	ldr	r3, [r1, #8]
 800d4ce:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800d4d2:	4303      	orrs	r3, r0
 800d4d4:	608b      	str	r3, [r1, #8]
 800d4d6:	e787      	b.n	800d3e8 <HAL_RCC_ClockConfig+0x38>
 800d4d8:	40023c00 	.word	0x40023c00
 800d4dc:	40023800 	.word	0x40023800
 800d4e0:	0802fd21 	.word	0x0802fd21
 800d4e4:	20000060 	.word	0x20000060
 800d4e8:	20000068 	.word	0x20000068

0800d4ec <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d4ec:	4b04      	ldr	r3, [pc, #16]	; (800d500 <HAL_RCC_GetPCLK1Freq+0x14>)
 800d4ee:	4a05      	ldr	r2, [pc, #20]	; (800d504 <HAL_RCC_GetPCLK1Freq+0x18>)
 800d4f0:	689b      	ldr	r3, [r3, #8]
 800d4f2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800d4f6:	5cd3      	ldrb	r3, [r2, r3]
 800d4f8:	4a03      	ldr	r2, [pc, #12]	; (800d508 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800d4fa:	6810      	ldr	r0, [r2, #0]
}
 800d4fc:	40d8      	lsrs	r0, r3
 800d4fe:	4770      	bx	lr
 800d500:	40023800 	.word	0x40023800
 800d504:	0802fd31 	.word	0x0802fd31
 800d508:	20000060 	.word	0x20000060

0800d50c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d50c:	4b04      	ldr	r3, [pc, #16]	; (800d520 <HAL_RCC_GetPCLK2Freq+0x14>)
 800d50e:	4a05      	ldr	r2, [pc, #20]	; (800d524 <HAL_RCC_GetPCLK2Freq+0x18>)
 800d510:	689b      	ldr	r3, [r3, #8]
 800d512:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800d516:	5cd3      	ldrb	r3, [r2, r3]
 800d518:	4a03      	ldr	r2, [pc, #12]	; (800d528 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800d51a:	6810      	ldr	r0, [r2, #0]
}
 800d51c:	40d8      	lsrs	r0, r3
 800d51e:	4770      	bx	lr
 800d520:	40023800 	.word	0x40023800
 800d524:	0802fd31 	.word	0x0802fd31
 800d528:	20000060 	.word	0x20000060

0800d52c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d52c:	230f      	movs	r3, #15
 800d52e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d530:	4b0b      	ldr	r3, [pc, #44]	; (800d560 <HAL_RCC_GetClockConfig+0x34>)
 800d532:	689a      	ldr	r2, [r3, #8]
 800d534:	f002 0203 	and.w	r2, r2, #3
 800d538:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d53a:	689a      	ldr	r2, [r3, #8]
 800d53c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800d540:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d542:	689a      	ldr	r2, [r3, #8]
 800d544:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800d548:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800d54a:	689b      	ldr	r3, [r3, #8]
 800d54c:	08db      	lsrs	r3, r3, #3
 800d54e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800d552:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d554:	4b03      	ldr	r3, [pc, #12]	; (800d564 <HAL_RCC_GetClockConfig+0x38>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f003 030f 	and.w	r3, r3, #15
 800d55c:	600b      	str	r3, [r1, #0]
}
 800d55e:	4770      	bx	lr
 800d560:	40023800 	.word	0x40023800
 800d564:	40023c00 	.word	0x40023c00

0800d568 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800d568:	6803      	ldr	r3, [r0, #0]
{
 800d56a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800d56e:	f013 0601 	ands.w	r6, r3, #1
{
 800d572:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800d574:	d00b      	beq.n	800d58e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d576:	4ab1      	ldr	r2, [pc, #708]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d578:	6891      	ldr	r1, [r2, #8]
 800d57a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800d57e:	6091      	str	r1, [r2, #8]
 800d580:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800d582:	6891      	ldr	r1, [r2, #8]
 800d584:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800d586:	fab6 f686 	clz	r6, r6
 800d58a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d58c:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800d58e:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800d592:	d012      	beq.n	800d5ba <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d594:	49a9      	ldr	r1, [pc, #676]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d596:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800d598:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800d59c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d5a0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 800d5a4:	bf08      	it	eq
 800d5a6:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d5a8:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800d5ac:	bf16      	itet	ne
 800d5ae:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800d5b2:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800d5b4:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d5b6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800d5ba:	02d9      	lsls	r1, r3, #11
 800d5bc:	d510      	bpl.n	800d5e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d5be:	489f      	ldr	r0, [pc, #636]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d5c0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d5c2:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800d5c6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d5ca:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800d5ce:	ea42 0201 	orr.w	r2, r2, r1
 800d5d2:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800d5d6:	f000 81aa 	beq.w	800d92e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800d5da:	2900      	cmp	r1, #0
 800d5dc:	bf08      	it	eq
 800d5de:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800d5e0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800d5e4:	bf18      	it	ne
 800d5e6:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d5e8:	069a      	lsls	r2, r3, #26
 800d5ea:	d532      	bpl.n	800d652 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800d5ec:	4b93      	ldr	r3, [pc, #588]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d5ee:	4f94      	ldr	r7, [pc, #592]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800d5f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d5f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d5f6:	641a      	str	r2, [r3, #64]	; 0x40
 800d5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d5fe:	9301      	str	r3, [sp, #4]
 800d600:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d608:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d60a:	f7fc fbdd 	bl	8009dc8 <HAL_GetTick>
 800d60e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	05db      	lsls	r3, r3, #23
 800d614:	f140 818d 	bpl.w	800d932 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d618:	4f88      	ldr	r7, [pc, #544]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d61a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d61c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d61e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800d622:	f040 8191 	bne.w	800d948 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d626:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d628:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800d62c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800d630:	4a82      	ldr	r2, [pc, #520]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d632:	f040 81ae 	bne.w	800d992 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 800d636:	6891      	ldr	r1, [r2, #8]
 800d638:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800d63c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800d640:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800d644:	4301      	orrs	r1, r0
 800d646:	6091      	str	r1, [r2, #8]
 800d648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d64c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800d64e:	430b      	orrs	r3, r1
 800d650:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d652:	6823      	ldr	r3, [r4, #0]
 800d654:	06da      	lsls	r2, r3, #27
 800d656:	d50c      	bpl.n	800d672 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d658:	4a78      	ldr	r2, [pc, #480]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d65a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800d65e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800d662:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800d666:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800d66a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800d66c:	4301      	orrs	r1, r0
 800d66e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d672:	045f      	lsls	r7, r3, #17
 800d674:	d508      	bpl.n	800d688 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d676:	4971      	ldr	r1, [pc, #452]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d678:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800d67a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800d67e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800d682:	4302      	orrs	r2, r0
 800d684:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d688:	0418      	lsls	r0, r3, #16
 800d68a:	d508      	bpl.n	800d69e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d68c:	496b      	ldr	r1, [pc, #428]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d68e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800d690:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800d694:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800d698:	4302      	orrs	r2, r0
 800d69a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d69e:	03d9      	lsls	r1, r3, #15
 800d6a0:	d508      	bpl.n	800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d6a2:	4966      	ldr	r1, [pc, #408]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d6a4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800d6a6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800d6aa:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800d6ae:	4302      	orrs	r2, r0
 800d6b0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d6b4:	039a      	lsls	r2, r3, #14
 800d6b6:	d508      	bpl.n	800d6ca <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d6b8:	4960      	ldr	r1, [pc, #384]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d6ba:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800d6bc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800d6c0:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800d6c4:	4302      	orrs	r2, r0
 800d6c6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d6ca:	065f      	lsls	r7, r3, #25
 800d6cc:	d508      	bpl.n	800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d6ce:	495b      	ldr	r1, [pc, #364]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d6d0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800d6d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800d6d6:	f022 0203 	bic.w	r2, r2, #3
 800d6da:	4302      	orrs	r2, r0
 800d6dc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d6e0:	0618      	lsls	r0, r3, #24
 800d6e2:	d508      	bpl.n	800d6f6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d6e4:	4955      	ldr	r1, [pc, #340]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d6e6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800d6e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800d6ec:	f022 020c 	bic.w	r2, r2, #12
 800d6f0:	4302      	orrs	r2, r0
 800d6f2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d6f6:	05d9      	lsls	r1, r3, #23
 800d6f8:	d508      	bpl.n	800d70c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d6fa:	4950      	ldr	r1, [pc, #320]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d6fc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800d6fe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800d702:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800d706:	4302      	orrs	r2, r0
 800d708:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d70c:	059a      	lsls	r2, r3, #22
 800d70e:	d508      	bpl.n	800d722 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d710:	494a      	ldr	r1, [pc, #296]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d712:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d714:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800d718:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d71c:	4302      	orrs	r2, r0
 800d71e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d722:	055f      	lsls	r7, r3, #21
 800d724:	d508      	bpl.n	800d738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d726:	4945      	ldr	r1, [pc, #276]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d728:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d72a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800d72e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d732:	4302      	orrs	r2, r0
 800d734:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d738:	0518      	lsls	r0, r3, #20
 800d73a:	d508      	bpl.n	800d74e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d73c:	493f      	ldr	r1, [pc, #252]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d73e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d740:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800d744:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d748:	4302      	orrs	r2, r0
 800d74a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d74e:	04d9      	lsls	r1, r3, #19
 800d750:	d508      	bpl.n	800d764 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d752:	493a      	ldr	r1, [pc, #232]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d754:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800d756:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800d75a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800d75e:	4302      	orrs	r2, r0
 800d760:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d764:	049a      	lsls	r2, r3, #18
 800d766:	d508      	bpl.n	800d77a <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d768:	4934      	ldr	r1, [pc, #208]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d76a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800d76c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800d770:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d774:	4302      	orrs	r2, r0
 800d776:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d77a:	025f      	lsls	r7, r3, #9
 800d77c:	d508      	bpl.n	800d790 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d77e:	492f      	ldr	r1, [pc, #188]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d780:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800d782:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800d786:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800d78a:	4302      	orrs	r2, r0
 800d78c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d790:	0298      	lsls	r0, r3, #10
 800d792:	d50c      	bpl.n	800d7ae <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d794:	4829      	ldr	r0, [pc, #164]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d796:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800d798:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800d79c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d7a0:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800d7a4:	bf08      	it	eq
 800d7a6:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d7a8:	430a      	orrs	r2, r1
 800d7aa:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800d7ae:	f013 0f08 	tst.w	r3, #8
 800d7b2:	bf18      	it	ne
 800d7b4:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d7b6:	0359      	lsls	r1, r3, #13
 800d7b8:	d508      	bpl.n	800d7cc <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d7ba:	4920      	ldr	r1, [pc, #128]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d7bc:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800d7be:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800d7c2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800d7c6:	4302      	orrs	r2, r0
 800d7c8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d7cc:	021a      	lsls	r2, r3, #8
 800d7ce:	d509      	bpl.n	800d7e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d7d0:	491a      	ldr	r1, [pc, #104]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d7d2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800d7d6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800d7da:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d7de:	4302      	orrs	r2, r0
 800d7e0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800d7e4:	015f      	lsls	r7, r3, #5
 800d7e6:	d509      	bpl.n	800d7fc <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800d7e8:	4914      	ldr	r1, [pc, #80]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d7ea:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800d7ee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800d7f2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800d7f6:	4302      	orrs	r2, r0
 800d7f8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d7fc:	0118      	lsls	r0, r3, #4
 800d7fe:	d509      	bpl.n	800d814 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d800:	490e      	ldr	r1, [pc, #56]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d802:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800d806:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800d80a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800d80e:	4302      	orrs	r2, r0
 800d810:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800d814:	00d9      	lsls	r1, r3, #3
 800d816:	d509      	bpl.n	800d82c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800d818:	4908      	ldr	r1, [pc, #32]	; (800d83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800d81a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800d81e:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800d822:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800d826:	4302      	orrs	r2, r0
 800d828:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800d82c:	2e01      	cmp	r6, #1
 800d82e:	f000 80b4 	beq.w	800d99a <HAL_RCCEx_PeriphCLKConfig+0x432>
 800d832:	019a      	lsls	r2, r3, #6
 800d834:	f100 80b1 	bmi.w	800d99a <HAL_RCCEx_PeriphCLKConfig+0x432>
 800d838:	e004      	b.n	800d844 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800d83a:	bf00      	nop
 800d83c:	40023800 	.word	0x40023800
 800d840:	40007000 	.word	0x40007000
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d844:	2d01      	cmp	r5, #1
 800d846:	d170      	bne.n	800d92a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d848:	4d9d      	ldr	r5, [pc, #628]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800d84a:	682b      	ldr	r3, [r5, #0]
 800d84c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d850:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d852:	f7fc fab9 	bl	8009dc8 <HAL_GetTick>
 800d856:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d858:	682b      	ldr	r3, [r5, #0]
 800d85a:	009f      	lsls	r7, r3, #2
 800d85c:	f100 8121 	bmi.w	800daa2 <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d860:	6821      	ldr	r1, [r4, #0]
 800d862:	030e      	lsls	r6, r1, #12
 800d864:	d501      	bpl.n	800d86a <HAL_RCCEx_PeriphCLKConfig+0x302>
 800d866:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d868:	b11b      	cbz	r3, 800d872 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800d86a:	02cd      	lsls	r5, r1, #11
 800d86c:	d51d      	bpl.n	800d8aa <HAL_RCCEx_PeriphCLKConfig+0x342>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d86e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d870:	b9db      	cbnz	r3, 800d8aa <HAL_RCCEx_PeriphCLKConfig+0x342>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d872:	4a93      	ldr	r2, [pc, #588]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800d874:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d878:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d87c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d880:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800d884:	4303      	orrs	r3, r0
 800d886:	6960      	ldr	r0, [r4, #20]
 800d888:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800d88c:	69a0      	ldr	r0, [r4, #24]
 800d88e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800d892:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d896:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800d89a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800d89c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800d8a0:	3801      	subs	r0, #1
 800d8a2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800d8a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d8aa:	0288      	lsls	r0, r1, #10
 800d8ac:	d515      	bpl.n	800d8da <HAL_RCCEx_PeriphCLKConfig+0x372>
 800d8ae:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800d8b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d8b4:	d111      	bne.n	800d8da <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d8b6:	4a82      	ldr	r2, [pc, #520]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800d8b8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d8bc:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d8c0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800d8c4:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800d8c8:	4303      	orrs	r3, r0
 800d8ca:	6960      	ldr	r0, [r4, #20]
 800d8cc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800d8d0:	6a20      	ldr	r0, [r4, #32]
 800d8d2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d8d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d8da:	070a      	lsls	r2, r1, #28
 800d8dc:	d519      	bpl.n	800d912 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d8de:	4a78      	ldr	r2, [pc, #480]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800d8e0:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d8e4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d8e8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800d8ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d8f0:	430b      	orrs	r3, r1
 800d8f2:	6961      	ldr	r1, [r4, #20]
 800d8f4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800d8f8:	69e1      	ldr	r1, [r4, #28]
 800d8fa:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800d8fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d902:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800d906:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d908:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800d90c:	430b      	orrs	r3, r1
 800d90e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d912:	4c6b      	ldr	r4, [pc, #428]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800d914:	6823      	ldr	r3, [r4, #0]
 800d916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d91a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d91c:	f7fc fa54 	bl	8009dc8 <HAL_GetTick>
 800d920:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d922:	6823      	ldr	r3, [r4, #0]
 800d924:	009b      	lsls	r3, r3, #2
 800d926:	f140 80c3 	bpl.w	800dab0 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800d92a:	2000      	movs	r0, #0
 800d92c:	e009      	b.n	800d942 <HAL_RCCEx_PeriphCLKConfig+0x3da>
      plli2sused = 1;
 800d92e:	2601      	movs	r6, #1
 800d930:	e656      	b.n	800d5e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d932:	f7fc fa49 	bl	8009dc8 <HAL_GetTick>
 800d936:	eba0 0008 	sub.w	r0, r0, r8
 800d93a:	2864      	cmp	r0, #100	; 0x64
 800d93c:	f67f ae68 	bls.w	800d610 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800d940:	2003      	movs	r0, #3
}
 800d942:	b003      	add	sp, #12
 800d944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d948:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800d94c:	429a      	cmp	r2, r3
 800d94e:	f43f ae6a 	beq.w	800d626 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800d954:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800d95a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d95e:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d960:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d962:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d966:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800d968:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800d96a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d96c:	07d8      	lsls	r0, r3, #31
 800d96e:	f57f ae5a 	bpl.w	800d626 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 800d972:	f7fc fa29 	bl	8009dc8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d976:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800d97a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d97c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d97e:	0799      	lsls	r1, r3, #30
 800d980:	f53f ae51 	bmi.w	800d626 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d984:	f7fc fa20 	bl	8009dc8 <HAL_GetTick>
 800d988:	eba0 0008 	sub.w	r0, r0, r8
 800d98c:	4548      	cmp	r0, r9
 800d98e:	d9f5      	bls.n	800d97c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800d990:	e7d6      	b.n	800d940 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d992:	6891      	ldr	r1, [r2, #8]
 800d994:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800d998:	e655      	b.n	800d646 <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 800d99a:	4e49      	ldr	r6, [pc, #292]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800d99c:	6833      	ldr	r3, [r6, #0]
 800d99e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d9a2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800d9a4:	f7fc fa10 	bl	8009dc8 <HAL_GetTick>
 800d9a8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d9aa:	6833      	ldr	r3, [r6, #0]
 800d9ac:	011b      	lsls	r3, r3, #4
 800d9ae:	d472      	bmi.n	800da96 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d9b0:	6822      	ldr	r2, [r4, #0]
 800d9b2:	07d7      	lsls	r7, r2, #31
 800d9b4:	d512      	bpl.n	800d9dc <HAL_RCCEx_PeriphCLKConfig+0x474>
 800d9b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d9b8:	b983      	cbnz	r3, 800d9dc <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d9ba:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d9be:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d9c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d9c6:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800d9ca:	430b      	orrs	r3, r1
 800d9cc:	6861      	ldr	r1, [r4, #4]
 800d9ce:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800d9d2:	68a1      	ldr	r1, [r4, #8]
 800d9d4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800d9d8:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d9dc:	0316      	lsls	r6, r2, #12
 800d9de:	d503      	bpl.n	800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800d9e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d9e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d9e6:	d005      	beq.n	800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800d9e8:	02d0      	lsls	r0, r2, #11
 800d9ea:	d51e      	bpl.n	800da2a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d9ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d9ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d9f2:	d11a      	bne.n	800da2a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d9f4:	4932      	ldr	r1, [pc, #200]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800d9f6:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d9fa:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800d9fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800da02:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800da06:	4303      	orrs	r3, r0
 800da08:	6860      	ldr	r0, [r4, #4]
 800da0a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800da0e:	68e0      	ldr	r0, [r4, #12]
 800da10:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800da14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800da18:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800da1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da1e:	f020 001f 	bic.w	r0, r0, #31
 800da22:	3b01      	subs	r3, #1
 800da24:	4303      	orrs	r3, r0
 800da26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800da2a:	01d1      	lsls	r1, r2, #7
 800da2c:	d511      	bpl.n	800da52 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800da2e:	4924      	ldr	r1, [pc, #144]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800da30:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800da34:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800da38:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800da3c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800da40:	4303      	orrs	r3, r0
 800da42:	6860      	ldr	r0, [r4, #4]
 800da44:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800da48:	6920      	ldr	r0, [r4, #16]
 800da4a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800da4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800da52:	0192      	lsls	r2, r2, #6
 800da54:	d50d      	bpl.n	800da72 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800da56:	6923      	ldr	r3, [r4, #16]
 800da58:	6862      	ldr	r2, [r4, #4]
 800da5a:	041b      	lsls	r3, r3, #16
 800da5c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800da60:	68e2      	ldr	r2, [r4, #12]
 800da62:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800da66:	68a2      	ldr	r2, [r4, #8]
 800da68:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800da6c:	4a14      	ldr	r2, [pc, #80]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800da6e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800da72:	4e13      	ldr	r6, [pc, #76]	; (800dac0 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800da74:	6833      	ldr	r3, [r6, #0]
 800da76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800da7a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800da7c:	f7fc f9a4 	bl	8009dc8 <HAL_GetTick>
 800da80:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800da82:	6833      	ldr	r3, [r6, #0]
 800da84:	011b      	lsls	r3, r3, #4
 800da86:	f53f aedd 	bmi.w	800d844 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800da8a:	f7fc f99d 	bl	8009dc8 <HAL_GetTick>
 800da8e:	1bc0      	subs	r0, r0, r7
 800da90:	2864      	cmp	r0, #100	; 0x64
 800da92:	d9f6      	bls.n	800da82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800da94:	e754      	b.n	800d940 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800da96:	f7fc f997 	bl	8009dc8 <HAL_GetTick>
 800da9a:	1bc0      	subs	r0, r0, r7
 800da9c:	2864      	cmp	r0, #100	; 0x64
 800da9e:	d984      	bls.n	800d9aa <HAL_RCCEx_PeriphCLKConfig+0x442>
 800daa0:	e74e      	b.n	800d940 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800daa2:	f7fc f991 	bl	8009dc8 <HAL_GetTick>
 800daa6:	1b80      	subs	r0, r0, r6
 800daa8:	2864      	cmp	r0, #100	; 0x64
 800daaa:	f67f aed5 	bls.w	800d858 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800daae:	e747      	b.n	800d940 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800dab0:	f7fc f98a 	bl	8009dc8 <HAL_GetTick>
 800dab4:	1b40      	subs	r0, r0, r5
 800dab6:	2864      	cmp	r0, #100	; 0x64
 800dab8:	f67f af33 	bls.w	800d922 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800dabc:	e740      	b.n	800d940 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 800dabe:	bf00      	nop
 800dac0:	40023800 	.word	0x40023800

0800dac4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800dac4:	b538      	push	{r3, r4, r5, lr}
 800dac6:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800dac8:	4604      	mov	r4, r0
 800daca:	b1c8      	cbz	r0, 800db00 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800dacc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800dad0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800dad4:	b91b      	cbnz	r3, 800dade <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800dad6:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800dada:	f7f6 fd43 	bl	8004564 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800dade:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800dae0:	1d21      	adds	r1, r4, #4
 800dae2:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800dae4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800dae8:	f000 fecf 	bl	800e88a <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800daec:	6862      	ldr	r2, [r4, #4]
 800daee:	4629      	mov	r1, r5
 800daf0:	6820      	ldr	r0, [r4, #0]
 800daf2:	f000 ff02 	bl	800e8fa <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800daf6:	2301      	movs	r3, #1

  return HAL_OK;
 800daf8:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800dafa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800dafe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800db00:	2001      	movs	r0, #1
 800db02:	e7fc      	b.n	800dafe <HAL_SDRAM_Init+0x3a>

0800db04 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800db04:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800db06:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800db0a:	4605      	mov	r5, r0
 800db0c:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800db0e:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800db10:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800db12:	d010      	beq.n	800db36 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800db14:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800db18:	2c01      	cmp	r4, #1
 800db1a:	d110      	bne.n	800db3e <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800db1c:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800db1e:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800db20:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800db24:	f000 ff1f 	bl	800e966 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800db28:	6833      	ldr	r3, [r6, #0]
 800db2a:	2b02      	cmp	r3, #2
 800db2c:	d104      	bne.n	800db38 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800db2e:	2305      	movs	r3, #5
 800db30:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800db34:	2000      	movs	r0, #0
}
 800db36:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800db38:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 800db3c:	e7fa      	b.n	800db34 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800db3e:	2001      	movs	r0, #1
 800db40:	e7f9      	b.n	800db36 <HAL_SDRAM_SendCommand+0x32>

0800db42 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800db42:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800db44:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800db48:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800db4a:	2b02      	cmp	r3, #2
 800db4c:	b2d8      	uxtb	r0, r3
 800db4e:	d00d      	beq.n	800db6c <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800db50:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800db54:	2b01      	cmp	r3, #1
 800db56:	b2dd      	uxtb	r5, r3
 800db58:	d109      	bne.n	800db6e <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800db5a:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800db5c:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800db5e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800db62:	f000 ff12 	bl	800e98a <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800db66:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800db68:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800db6c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800db6e:	2001      	movs	r0, #1
 800db70:	e7fc      	b.n	800db6c <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800db72 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800db72:	4770      	bx	lr

0800db74 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800db74:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800db78:	2b01      	cmp	r3, #1
 800db7a:	d133      	bne.n	800dbe4 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db7c:	2302      	movs	r3, #2
 800db7e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800db82:	6803      	ldr	r3, [r0, #0]
 800db84:	68da      	ldr	r2, [r3, #12]
 800db86:	f042 0201 	orr.w	r2, r2, #1
 800db8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db8c:	4a16      	ldr	r2, [pc, #88]	; (800dbe8 <HAL_TIM_Base_Start_IT+0x74>)
 800db8e:	4293      	cmp	r3, r2
 800db90:	d01a      	beq.n	800dbc8 <HAL_TIM_Base_Start_IT+0x54>
 800db92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db96:	d017      	beq.n	800dbc8 <HAL_TIM_Base_Start_IT+0x54>
 800db98:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800db9c:	4293      	cmp	r3, r2
 800db9e:	d013      	beq.n	800dbc8 <HAL_TIM_Base_Start_IT+0x54>
 800dba0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dba4:	4293      	cmp	r3, r2
 800dba6:	d00f      	beq.n	800dbc8 <HAL_TIM_Base_Start_IT+0x54>
 800dba8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d00b      	beq.n	800dbc8 <HAL_TIM_Base_Start_IT+0x54>
 800dbb0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d007      	beq.n	800dbc8 <HAL_TIM_Base_Start_IT+0x54>
 800dbb8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d003      	beq.n	800dbc8 <HAL_TIM_Base_Start_IT+0x54>
 800dbc0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d107      	bne.n	800dbd8 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dbc8:	6899      	ldr	r1, [r3, #8]
 800dbca:	4a08      	ldr	r2, [pc, #32]	; (800dbec <HAL_TIM_Base_Start_IT+0x78>)
 800dbcc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbce:	2a06      	cmp	r2, #6
 800dbd0:	d006      	beq.n	800dbe0 <HAL_TIM_Base_Start_IT+0x6c>
 800dbd2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800dbd6:	d003      	beq.n	800dbe0 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dbd8:	681a      	ldr	r2, [r3, #0]
 800dbda:	f042 0201 	orr.w	r2, r2, #1
 800dbde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dbe0:	2000      	movs	r0, #0
}
 800dbe2:	4770      	bx	lr
    return HAL_ERROR;
 800dbe4:	2001      	movs	r0, #1
 800dbe6:	4770      	bx	lr
 800dbe8:	40010000 	.word	0x40010000
 800dbec:	00010007 	.word	0x00010007

0800dbf0 <HAL_TIM_OC_DelayElapsedCallback>:
 800dbf0:	4770      	bx	lr

0800dbf2 <HAL_TIM_IC_CaptureCallback>:
 800dbf2:	4770      	bx	lr

0800dbf4 <HAL_TIM_PWM_PulseFinishedCallback>:
 800dbf4:	4770      	bx	lr

0800dbf6 <HAL_TIM_TriggerCallback>:
 800dbf6:	4770      	bx	lr

0800dbf8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dbf8:	6803      	ldr	r3, [r0, #0]
 800dbfa:	691a      	ldr	r2, [r3, #16]
 800dbfc:	0791      	lsls	r1, r2, #30
{
 800dbfe:	b510      	push	{r4, lr}
 800dc00:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dc02:	d50f      	bpl.n	800dc24 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dc04:	68da      	ldr	r2, [r3, #12]
 800dc06:	0792      	lsls	r2, r2, #30
 800dc08:	d50c      	bpl.n	800dc24 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dc0a:	f06f 0202 	mvn.w	r2, #2
 800dc0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dc10:	2201      	movs	r2, #1
 800dc12:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dc14:	699b      	ldr	r3, [r3, #24]
 800dc16:	0799      	lsls	r1, r3, #30
 800dc18:	f000 8085 	beq.w	800dd26 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dc1c:	f7ff ffe9 	bl	800dbf2 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc20:	2300      	movs	r3, #0
 800dc22:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dc24:	6823      	ldr	r3, [r4, #0]
 800dc26:	691a      	ldr	r2, [r3, #16]
 800dc28:	0752      	lsls	r2, r2, #29
 800dc2a:	d510      	bpl.n	800dc4e <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dc2c:	68da      	ldr	r2, [r3, #12]
 800dc2e:	0750      	lsls	r0, r2, #29
 800dc30:	d50d      	bpl.n	800dc4e <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dc32:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc36:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dc38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dc3a:	2202      	movs	r2, #2
 800dc3c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dc3e:	699b      	ldr	r3, [r3, #24]
 800dc40:	f413 7f40 	tst.w	r3, #768	; 0x300
 800dc44:	d075      	beq.n	800dd32 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800dc46:	f7ff ffd4 	bl	800dbf2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dc4e:	6823      	ldr	r3, [r4, #0]
 800dc50:	691a      	ldr	r2, [r3, #16]
 800dc52:	0711      	lsls	r1, r2, #28
 800dc54:	d50f      	bpl.n	800dc76 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dc56:	68da      	ldr	r2, [r3, #12]
 800dc58:	0712      	lsls	r2, r2, #28
 800dc5a:	d50c      	bpl.n	800dc76 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dc5c:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc60:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dc62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dc64:	2204      	movs	r2, #4
 800dc66:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dc68:	69db      	ldr	r3, [r3, #28]
 800dc6a:	079b      	lsls	r3, r3, #30
 800dc6c:	d067      	beq.n	800dd3e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800dc6e:	f7ff ffc0 	bl	800dbf2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc72:	2300      	movs	r3, #0
 800dc74:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dc76:	6823      	ldr	r3, [r4, #0]
 800dc78:	691a      	ldr	r2, [r3, #16]
 800dc7a:	06d0      	lsls	r0, r2, #27
 800dc7c:	d510      	bpl.n	800dca0 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dc7e:	68da      	ldr	r2, [r3, #12]
 800dc80:	06d1      	lsls	r1, r2, #27
 800dc82:	d50d      	bpl.n	800dca0 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dc84:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc88:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dc8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dc8c:	2208      	movs	r2, #8
 800dc8e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dc90:	69db      	ldr	r3, [r3, #28]
 800dc92:	f413 7f40 	tst.w	r3, #768	; 0x300
 800dc96:	d058      	beq.n	800dd4a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800dc98:	f7ff ffab 	bl	800dbf2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dca0:	6823      	ldr	r3, [r4, #0]
 800dca2:	691a      	ldr	r2, [r3, #16]
 800dca4:	07d2      	lsls	r2, r2, #31
 800dca6:	d508      	bpl.n	800dcba <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dca8:	68da      	ldr	r2, [r3, #12]
 800dcaa:	07d0      	lsls	r0, r2, #31
 800dcac:	d505      	bpl.n	800dcba <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dcae:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dcb2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dcb4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800dcb6:	f7f6 f9b3 	bl	8004020 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dcba:	6823      	ldr	r3, [r4, #0]
 800dcbc:	691a      	ldr	r2, [r3, #16]
 800dcbe:	0611      	lsls	r1, r2, #24
 800dcc0:	d508      	bpl.n	800dcd4 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dcc2:	68da      	ldr	r2, [r3, #12]
 800dcc4:	0612      	lsls	r2, r2, #24
 800dcc6:	d505      	bpl.n	800dcd4 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dcc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dccc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dcce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800dcd0:	f000 f8d9 	bl	800de86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dcd4:	6823      	ldr	r3, [r4, #0]
 800dcd6:	691a      	ldr	r2, [r3, #16]
 800dcd8:	05d0      	lsls	r0, r2, #23
 800dcda:	d508      	bpl.n	800dcee <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dcdc:	68da      	ldr	r2, [r3, #12]
 800dcde:	0611      	lsls	r1, r2, #24
 800dce0:	d505      	bpl.n	800dcee <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dce2:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dce6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dce8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800dcea:	f000 f8cd 	bl	800de88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dcee:	6823      	ldr	r3, [r4, #0]
 800dcf0:	691a      	ldr	r2, [r3, #16]
 800dcf2:	0652      	lsls	r2, r2, #25
 800dcf4:	d508      	bpl.n	800dd08 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dcf6:	68da      	ldr	r2, [r3, #12]
 800dcf8:	0650      	lsls	r0, r2, #25
 800dcfa:	d505      	bpl.n	800dd08 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dcfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dd00:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dd02:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800dd04:	f7ff ff77 	bl	800dbf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dd08:	6823      	ldr	r3, [r4, #0]
 800dd0a:	691a      	ldr	r2, [r3, #16]
 800dd0c:	0691      	lsls	r1, r2, #26
 800dd0e:	d522      	bpl.n	800dd56 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dd10:	68da      	ldr	r2, [r3, #12]
 800dd12:	0692      	lsls	r2, r2, #26
 800dd14:	d51f      	bpl.n	800dd56 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dd16:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dd1a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dd1c:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dd1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800dd22:	f000 b8af 	b.w	800de84 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd26:	f7ff ff63 	bl	800dbf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd2a:	4620      	mov	r0, r4
 800dd2c:	f7ff ff62 	bl	800dbf4 <HAL_TIM_PWM_PulseFinishedCallback>
 800dd30:	e776      	b.n	800dc20 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd32:	f7ff ff5d 	bl	800dbf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd36:	4620      	mov	r0, r4
 800dd38:	f7ff ff5c 	bl	800dbf4 <HAL_TIM_PWM_PulseFinishedCallback>
 800dd3c:	e785      	b.n	800dc4a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd3e:	f7ff ff57 	bl	800dbf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd42:	4620      	mov	r0, r4
 800dd44:	f7ff ff56 	bl	800dbf4 <HAL_TIM_PWM_PulseFinishedCallback>
 800dd48:	e793      	b.n	800dc72 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd4a:	f7ff ff51 	bl	800dbf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd4e:	4620      	mov	r0, r4
 800dd50:	f7ff ff50 	bl	800dbf4 <HAL_TIM_PWM_PulseFinishedCallback>
 800dd54:	e7a2      	b.n	800dc9c <HAL_TIM_IRQHandler+0xa4>
}
 800dd56:	bd10      	pop	{r4, pc}

0800dd58 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dd58:	4a30      	ldr	r2, [pc, #192]	; (800de1c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800dd5a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dd5c:	4290      	cmp	r0, r2
 800dd5e:	d012      	beq.n	800dd86 <TIM_Base_SetConfig+0x2e>
 800dd60:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800dd64:	d00f      	beq.n	800dd86 <TIM_Base_SetConfig+0x2e>
 800dd66:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800dd6a:	4290      	cmp	r0, r2
 800dd6c:	d00b      	beq.n	800dd86 <TIM_Base_SetConfig+0x2e>
 800dd6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dd72:	4290      	cmp	r0, r2
 800dd74:	d007      	beq.n	800dd86 <TIM_Base_SetConfig+0x2e>
 800dd76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dd7a:	4290      	cmp	r0, r2
 800dd7c:	d003      	beq.n	800dd86 <TIM_Base_SetConfig+0x2e>
 800dd7e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800dd82:	4290      	cmp	r0, r2
 800dd84:	d119      	bne.n	800ddba <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800dd86:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dd88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800dd8c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd8e:	4a23      	ldr	r2, [pc, #140]	; (800de1c <TIM_Base_SetConfig+0xc4>)
 800dd90:	4290      	cmp	r0, r2
 800dd92:	d029      	beq.n	800dde8 <TIM_Base_SetConfig+0x90>
 800dd94:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800dd98:	d026      	beq.n	800dde8 <TIM_Base_SetConfig+0x90>
 800dd9a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800dd9e:	4290      	cmp	r0, r2
 800dda0:	d022      	beq.n	800dde8 <TIM_Base_SetConfig+0x90>
 800dda2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dda6:	4290      	cmp	r0, r2
 800dda8:	d01e      	beq.n	800dde8 <TIM_Base_SetConfig+0x90>
 800ddaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ddae:	4290      	cmp	r0, r2
 800ddb0:	d01a      	beq.n	800dde8 <TIM_Base_SetConfig+0x90>
 800ddb2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ddb6:	4290      	cmp	r0, r2
 800ddb8:	d016      	beq.n	800dde8 <TIM_Base_SetConfig+0x90>
 800ddba:	4a19      	ldr	r2, [pc, #100]	; (800de20 <TIM_Base_SetConfig+0xc8>)
 800ddbc:	4290      	cmp	r0, r2
 800ddbe:	d013      	beq.n	800dde8 <TIM_Base_SetConfig+0x90>
 800ddc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ddc4:	4290      	cmp	r0, r2
 800ddc6:	d00f      	beq.n	800dde8 <TIM_Base_SetConfig+0x90>
 800ddc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ddcc:	4290      	cmp	r0, r2
 800ddce:	d00b      	beq.n	800dde8 <TIM_Base_SetConfig+0x90>
 800ddd0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800ddd4:	4290      	cmp	r0, r2
 800ddd6:	d007      	beq.n	800dde8 <TIM_Base_SetConfig+0x90>
 800ddd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dddc:	4290      	cmp	r0, r2
 800ddde:	d003      	beq.n	800dde8 <TIM_Base_SetConfig+0x90>
 800dde0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dde4:	4290      	cmp	r0, r2
 800dde6:	d103      	bne.n	800ddf0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dde8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ddec:	68ca      	ldr	r2, [r1, #12]
 800ddee:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ddf0:	694a      	ldr	r2, [r1, #20]
 800ddf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ddf6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800ddf8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ddfa:	688b      	ldr	r3, [r1, #8]
 800ddfc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ddfe:	680b      	ldr	r3, [r1, #0]
 800de00:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800de02:	4b06      	ldr	r3, [pc, #24]	; (800de1c <TIM_Base_SetConfig+0xc4>)
 800de04:	4298      	cmp	r0, r3
 800de06:	d003      	beq.n	800de10 <TIM_Base_SetConfig+0xb8>
 800de08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de0c:	4298      	cmp	r0, r3
 800de0e:	d101      	bne.n	800de14 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800de10:	690b      	ldr	r3, [r1, #16]
 800de12:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800de14:	2301      	movs	r3, #1
 800de16:	6143      	str	r3, [r0, #20]
}
 800de18:	4770      	bx	lr
 800de1a:	bf00      	nop
 800de1c:	40010000 	.word	0x40010000
 800de20:	40014000 	.word	0x40014000

0800de24 <HAL_TIM_Base_Init>:
{
 800de24:	b510      	push	{r4, lr}
  if (htim == NULL)
 800de26:	4604      	mov	r4, r0
 800de28:	b350      	cbz	r0, 800de80 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800de2a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800de2e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800de32:	b91b      	cbnz	r3, 800de3c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800de34:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800de38:	f7ff fe9b 	bl	800db72 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800de3c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de3e:	6820      	ldr	r0, [r4, #0]
 800de40:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800de42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de46:	f7ff ff87 	bl	800dd58 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de4a:	2301      	movs	r3, #1
  return HAL_OK;
 800de4c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de4e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de52:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800de56:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800de5a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800de5e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800de62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800de6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800de72:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800de76:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800de7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800de7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800de80:	2001      	movs	r0, #1
 800de82:	e7fc      	b.n	800de7e <HAL_TIM_Base_Init+0x5a>

0800de84 <HAL_TIMEx_CommutCallback>:
 800de84:	4770      	bx	lr

0800de86 <HAL_TIMEx_BreakCallback>:
 800de86:	4770      	bx	lr

0800de88 <HAL_TIMEx_Break2Callback>:
 800de88:	4770      	bx	lr

0800de8a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800de8a:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de8c:	e852 3f00 	ldrex	r3, [r2]
 800de90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de94:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800de98:	6802      	ldr	r2, [r0, #0]
 800de9a:	2900      	cmp	r1, #0
 800de9c:	d1f5      	bne.n	800de8a <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de9e:	f102 0308 	add.w	r3, r2, #8
 800dea2:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dea6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deaa:	f102 0c08 	add.w	ip, r2, #8
 800deae:	e84c 3100 	strex	r1, r3, [ip]
 800deb2:	2900      	cmp	r1, #0
 800deb4:	d1f3      	bne.n	800de9e <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800deb6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800deb8:	2b01      	cmp	r3, #1
 800deba:	d107      	bne.n	800decc <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800debc:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dec0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dec4:	e842 3100 	strex	r1, r3, [r2]
 800dec8:	2900      	cmp	r1, #0
 800deca:	d1f7      	bne.n	800debc <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800decc:	2320      	movs	r3, #32
 800dece:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ded2:	2300      	movs	r3, #0
 800ded4:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ded6:	6683      	str	r3, [r0, #104]	; 0x68
}
 800ded8:	4770      	bx	lr

0800deda <HAL_UART_TxCpltCallback>:
 800deda:	4770      	bx	lr

0800dedc <HAL_UART_RxCpltCallback>:
 800dedc:	4770      	bx	lr

0800dede <HAL_UART_ErrorCallback>:
 800dede:	4770      	bx	lr

0800dee0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dee0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dee2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800dee4:	2300      	movs	r3, #0
 800dee6:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800deea:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800deee:	f7ff fff6 	bl	800dede <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800def2:	bd08      	pop	{r3, pc}

0800def4 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800def4:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  uint16_t uhMask = huart->Mask;
 800def8:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800defc:	2a22      	cmp	r2, #34	; 0x22
{
 800defe:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800df00:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800df02:	d143      	bne.n	800df8c <UART_RxISR_8BIT+0x98>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800df04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800df06:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800df08:	400b      	ands	r3, r1
 800df0a:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800df0c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800df0e:	3301      	adds	r3, #1
 800df10:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800df12:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800df16:	3b01      	subs	r3, #1
 800df18:	b29b      	uxth	r3, r3
 800df1a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800df1e:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800df22:	b29b      	uxth	r3, r3
 800df24:	bb73      	cbnz	r3, 800df84 <UART_RxISR_8BIT+0x90>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800df26:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df28:	e852 3f00 	ldrex	r3, [r2]
 800df2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df30:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800df34:	6803      	ldr	r3, [r0, #0]
 800df36:	2900      	cmp	r1, #0
 800df38:	d1f5      	bne.n	800df26 <UART_RxISR_8BIT+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df3a:	f103 0208 	add.w	r2, r3, #8
 800df3e:	e852 1f00 	ldrex	r1, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df42:	f021 0101 	bic.w	r1, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df46:	4694      	mov	ip, r2
 800df48:	e84c 1200 	strex	r2, r1, [ip]
 800df4c:	2a00      	cmp	r2, #0
 800df4e:	d1f4      	bne.n	800df3a <UART_RxISR_8BIT+0x46>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800df50:	2120      	movs	r1, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800df52:	6682      	str	r2, [r0, #104]	; 0x68
      huart->RxState = HAL_UART_STATE_READY;
 800df54:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800df58:	6642      	str	r2, [r0, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df5a:	6e01      	ldr	r1, [r0, #96]	; 0x60
 800df5c:	2901      	cmp	r1, #1
 800df5e:	d112      	bne.n	800df86 <UART_RxISR_8BIT+0x92>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df60:	6602      	str	r2, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df62:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df66:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df6a:	e843 2100 	strex	r1, r2, [r3]
 800df6e:	2900      	cmp	r1, #0
 800df70:	d1f7      	bne.n	800df62 <UART_RxISR_8BIT+0x6e>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800df72:	69da      	ldr	r2, [r3, #28]
 800df74:	06d2      	lsls	r2, r2, #27
 800df76:	d501      	bpl.n	800df7c <UART_RxISR_8BIT+0x88>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df78:	2210      	movs	r2, #16
 800df7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800df7c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 800df80:	f7f5 fa30 	bl	80033e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800df84:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 800df86:	f7ff ffa9 	bl	800dedc <HAL_UART_RxCpltCallback>
 800df8a:	e7fb      	b.n	800df84 <UART_RxISR_8BIT+0x90>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800df8c:	699a      	ldr	r2, [r3, #24]
 800df8e:	f042 0208 	orr.w	r2, r2, #8
 800df92:	619a      	str	r2, [r3, #24]
}
 800df94:	e7f6      	b.n	800df84 <UART_RxISR_8BIT+0x90>

0800df96 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800df96:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  uint16_t uhMask = huart->Mask;
 800df9a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800df9e:	2a22      	cmp	r2, #34	; 0x22
{
 800dfa0:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dfa2:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dfa4:	d140      	bne.n	800e028 <UART_RxISR_16BIT+0x92>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dfa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 800dfa8:	4011      	ands	r1, r2
 800dfaa:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800dfac:	f822 1b02 	strh.w	r1, [r2], #2
    huart->pRxBuffPtr += 2U;
 800dfb0:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800dfb2:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 800dfb6:	3a01      	subs	r2, #1
 800dfb8:	b292      	uxth	r2, r2
 800dfba:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800dfbe:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 800dfc2:	b292      	uxth	r2, r2
 800dfc4:	bb62      	cbnz	r2, 800e020 <UART_RxISR_16BIT+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfc6:	e853 2f00 	ldrex	r2, [r3]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dfca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfce:	e843 2100 	strex	r1, r2, [r3]
 800dfd2:	2900      	cmp	r1, #0
 800dfd4:	d1f7      	bne.n	800dfc6 <UART_RxISR_16BIT+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfd6:	f103 0208 	add.w	r2, r3, #8
 800dfda:	e852 1f00 	ldrex	r1, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfde:	f021 0101 	bic.w	r1, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfe2:	4694      	mov	ip, r2
 800dfe4:	e84c 1200 	strex	r2, r1, [ip]
 800dfe8:	2a00      	cmp	r2, #0
 800dfea:	d1f4      	bne.n	800dfd6 <UART_RxISR_16BIT+0x40>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dfec:	2120      	movs	r1, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dfee:	6682      	str	r2, [r0, #104]	; 0x68
      huart->RxState = HAL_UART_STATE_READY;
 800dff0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dff4:	6642      	str	r2, [r0, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dff6:	6e01      	ldr	r1, [r0, #96]	; 0x60
 800dff8:	2901      	cmp	r1, #1
 800dffa:	d112      	bne.n	800e022 <UART_RxISR_16BIT+0x8c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dffc:	6602      	str	r2, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dffe:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e002:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e006:	e843 2100 	strex	r1, r2, [r3]
 800e00a:	2900      	cmp	r1, #0
 800e00c:	d1f7      	bne.n	800dffe <UART_RxISR_16BIT+0x68>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e00e:	69da      	ldr	r2, [r3, #28]
 800e010:	06d2      	lsls	r2, r2, #27
 800e012:	d501      	bpl.n	800e018 <UART_RxISR_16BIT+0x82>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e014:	2210      	movs	r2, #16
 800e016:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e018:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 800e01c:	f7f5 f9e2 	bl	80033e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e020:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 800e022:	f7ff ff5b 	bl	800dedc <HAL_UART_RxCpltCallback>
 800e026:	e7fb      	b.n	800e020 <UART_RxISR_16BIT+0x8a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e028:	699a      	ldr	r2, [r3, #24]
 800e02a:	f042 0208 	orr.w	r2, r2, #8
 800e02e:	619a      	str	r2, [r3, #24]
}
 800e030:	e7f6      	b.n	800e020 <UART_RxISR_16BIT+0x8a>

0800e032 <HAL_UARTEx_WakeupCallback>:
}
 800e032:	4770      	bx	lr

0800e034 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e034:	6803      	ldr	r3, [r0, #0]
{
 800e036:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e038:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 800e03a:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e03e:	6819      	ldr	r1, [r3, #0]
{
 800e040:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800e042:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e044:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 800e046:	d10b      	bne.n	800e060 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e048:	0696      	lsls	r6, r2, #26
 800e04a:	f140 8088 	bpl.w	800e15e <HAL_UART_IRQHandler+0x12a>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e04e:	068e      	lsls	r6, r1, #26
 800e050:	f140 8085 	bpl.w	800e15e <HAL_UART_IRQHandler+0x12a>
      if (huart->RxISR != NULL)
 800e054:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800e056:	2b00      	cmp	r3, #0
 800e058:	d07b      	beq.n	800e152 <HAL_UART_IRQHandler+0x11e>
}
 800e05a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800e05e:	4718      	bx	r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e060:	4e9a      	ldr	r6, [pc, #616]	; (800e2cc <HAL_UART_IRQHandler+0x298>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e062:	f005 0001 	and.w	r0, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e066:	400e      	ands	r6, r1
 800e068:	4306      	orrs	r6, r0
 800e06a:	d078      	beq.n	800e15e <HAL_UART_IRQHandler+0x12a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e06c:	07d5      	lsls	r5, r2, #31
 800e06e:	d509      	bpl.n	800e084 <HAL_UART_IRQHandler+0x50>
 800e070:	05ce      	lsls	r6, r1, #23
 800e072:	d507      	bpl.n	800e084 <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e074:	2501      	movs	r5, #1
 800e076:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e078:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800e07c:	f045 0501 	orr.w	r5, r5, #1
 800e080:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e084:	0795      	lsls	r5, r2, #30
 800e086:	d508      	bpl.n	800e09a <HAL_UART_IRQHandler+0x66>
 800e088:	b138      	cbz	r0, 800e09a <HAL_UART_IRQHandler+0x66>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e08a:	2502      	movs	r5, #2
 800e08c:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e08e:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800e092:	f045 0504 	orr.w	r5, r5, #4
 800e096:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e09a:	0756      	lsls	r6, r2, #29
 800e09c:	d508      	bpl.n	800e0b0 <HAL_UART_IRQHandler+0x7c>
 800e09e:	b138      	cbz	r0, 800e0b0 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e0a0:	2504      	movs	r5, #4
 800e0a2:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e0a4:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800e0a8:	f045 0502 	orr.w	r5, r5, #2
 800e0ac:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e0b0:	0715      	lsls	r5, r2, #28
 800e0b2:	d50b      	bpl.n	800e0cc <HAL_UART_IRQHandler+0x98>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e0b4:	f001 0520 	and.w	r5, r1, #32
 800e0b8:	4305      	orrs	r5, r0
 800e0ba:	d007      	beq.n	800e0cc <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e0bc:	2008      	movs	r0, #8
 800e0be:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e0c0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800e0c4:	f040 0008 	orr.w	r0, r0, #8
 800e0c8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e0cc:	0516      	lsls	r6, r2, #20
 800e0ce:	d50a      	bpl.n	800e0e6 <HAL_UART_IRQHandler+0xb2>
 800e0d0:	014d      	lsls	r5, r1, #5
 800e0d2:	d508      	bpl.n	800e0e6 <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e0d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e0d8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e0da:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e0de:	f043 0320 	orr.w	r3, r3, #32
 800e0e2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e0e6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d031      	beq.n	800e152 <HAL_UART_IRQHandler+0x11e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e0ee:	0690      	lsls	r0, r2, #26
 800e0f0:	d505      	bpl.n	800e0fe <HAL_UART_IRQHandler+0xca>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e0f2:	068a      	lsls	r2, r1, #26
 800e0f4:	d503      	bpl.n	800e0fe <HAL_UART_IRQHandler+0xca>
        if (huart->RxISR != NULL)
 800e0f6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800e0f8:	b10b      	cbz	r3, 800e0fe <HAL_UART_IRQHandler+0xca>
          huart->RxISR(huart);
 800e0fa:	4620      	mov	r0, r4
 800e0fc:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e0fe:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 800e100:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 800e102:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e106:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e108:	f002 0228 	and.w	r2, r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e10c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e110:	ea53 0502 	orrs.w	r5, r3, r2
 800e114:	d01e      	beq.n	800e154 <HAL_UART_IRQHandler+0x120>
        UART_EndRxTransfer(huart);
 800e116:	f7ff feb8 	bl	800de8a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e11a:	68b3      	ldr	r3, [r6, #8]
 800e11c:	065b      	lsls	r3, r3, #25
 800e11e:	d515      	bpl.n	800e14c <HAL_UART_IRQHandler+0x118>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e120:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e122:	f102 0308 	add.w	r3, r2, #8
 800e126:	e853 3f00 	ldrex	r3, [r3]
 800e12a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e12e:	3208      	adds	r2, #8
 800e130:	e842 3100 	strex	r1, r3, [r2]
 800e134:	2900      	cmp	r1, #0
 800e136:	d1f3      	bne.n	800e120 <HAL_UART_IRQHandler+0xec>
          if (huart->hdmarx != NULL)
 800e138:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800e13a:	b138      	cbz	r0, 800e14c <HAL_UART_IRQHandler+0x118>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e13c:	4b64      	ldr	r3, [pc, #400]	; (800e2d0 <HAL_UART_IRQHandler+0x29c>)
 800e13e:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e140:	f7fc f876 	bl	800a230 <HAL_DMA_Abort_IT>
 800e144:	b128      	cbz	r0, 800e152 <HAL_UART_IRQHandler+0x11e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e146:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800e148:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e14a:	e786      	b.n	800e05a <HAL_UART_IRQHandler+0x26>
            HAL_UART_ErrorCallback(huart);
 800e14c:	4620      	mov	r0, r4
 800e14e:	f7ff fec6 	bl	800dede <HAL_UART_ErrorCallback>
}
 800e152:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800e154:	f7ff fec3 	bl	800dede <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e158:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 800e15c:	e7f9      	b.n	800e152 <HAL_UART_IRQHandler+0x11e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e15e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800e160:	2801      	cmp	r0, #1
 800e162:	f040 8088 	bne.w	800e276 <HAL_UART_IRQHandler+0x242>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e166:	06d6      	lsls	r6, r2, #27
 800e168:	f140 8085 	bpl.w	800e276 <HAL_UART_IRQHandler+0x242>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e16c:	06c8      	lsls	r0, r1, #27
 800e16e:	f140 8082 	bpl.w	800e276 <HAL_UART_IRQHandler+0x242>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e172:	2210      	movs	r2, #16
 800e174:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e176:	689a      	ldr	r2, [r3, #8]
 800e178:	0652      	lsls	r2, r2, #25
 800e17a:	d54a      	bpl.n	800e212 <HAL_UART_IRQHandler+0x1de>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e17c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800e17e:	680a      	ldr	r2, [r1, #0]
 800e180:	6852      	ldr	r2, [r2, #4]
 800e182:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800e184:	2a00      	cmp	r2, #0
 800e186:	d0e4      	beq.n	800e152 <HAL_UART_IRQHandler+0x11e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e188:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
 800e18c:	4290      	cmp	r0, r2
 800e18e:	d9e0      	bls.n	800e152 <HAL_UART_IRQHandler+0x11e>
        huart->RxXferCount = nb_remaining_rx_data;
 800e190:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e194:	69ca      	ldr	r2, [r1, #28]
 800e196:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800e19a:	d02e      	beq.n	800e1fa <HAL_UART_IRQHandler+0x1c6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e19c:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e1a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1a4:	e843 2100 	strex	r1, r2, [r3]
 800e1a8:	2900      	cmp	r1, #0
 800e1aa:	d1f7      	bne.n	800e19c <HAL_UART_IRQHandler+0x168>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ac:	f103 0208 	add.w	r2, r3, #8
 800e1b0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1b4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1b8:	f103 0008 	add.w	r0, r3, #8
 800e1bc:	e840 2100 	strex	r1, r2, [r0]
 800e1c0:	2900      	cmp	r1, #0
 800e1c2:	d1f3      	bne.n	800e1ac <HAL_UART_IRQHandler+0x178>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1c4:	f103 0208 	add.w	r2, r3, #8
 800e1c8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e1cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1d0:	f103 0008 	add.w	r0, r3, #8
 800e1d4:	e840 2100 	strex	r1, r2, [r0]
 800e1d8:	2900      	cmp	r1, #0
 800e1da:	d1f3      	bne.n	800e1c4 <HAL_UART_IRQHandler+0x190>
          huart->RxState = HAL_UART_STATE_READY;
 800e1dc:	2220      	movs	r2, #32
 800e1de:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1e2:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1e4:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1e8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ec:	e843 2100 	strex	r1, r2, [r3]
 800e1f0:	2900      	cmp	r1, #0
 800e1f2:	d1f7      	bne.n	800e1e4 <HAL_UART_IRQHandler+0x1b0>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e1f4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800e1f6:	f7fb ffdc 	bl	800a1b2 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e1fa:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e1fc:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e200:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e202:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800e206:	1ac9      	subs	r1, r1, r3
 800e208:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e20a:	4620      	mov	r0, r4
 800e20c:	f7f5 f8ea 	bl	80033e4 <HAL_UARTEx_RxEventCallback>
 800e210:	e79f      	b.n	800e152 <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e212:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      if ((huart->RxXferCount > 0U)
 800e216:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e21a:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 800e21e:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 800e220:	b280      	uxth	r0, r0
 800e222:	2800      	cmp	r0, #0
 800e224:	d095      	beq.n	800e152 <HAL_UART_IRQHandler+0x11e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e226:	1a89      	subs	r1, r1, r2
 800e228:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800e22a:	2900      	cmp	r1, #0
 800e22c:	d091      	beq.n	800e152 <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e22e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e232:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e236:	e843 2000 	strex	r0, r2, [r3]
 800e23a:	2800      	cmp	r0, #0
 800e23c:	d1f7      	bne.n	800e22e <HAL_UART_IRQHandler+0x1fa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e23e:	f103 0208 	add.w	r2, r3, #8
 800e242:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e246:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e24a:	f103 0508 	add.w	r5, r3, #8
 800e24e:	e845 2000 	strex	r0, r2, [r5]
 800e252:	2800      	cmp	r0, #0
 800e254:	d1f3      	bne.n	800e23e <HAL_UART_IRQHandler+0x20a>
        huart->RxState = HAL_UART_STATE_READY;
 800e256:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800e258:	66a0      	str	r0, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 800e25a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e25e:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e260:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e264:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e268:	e843 2000 	strex	r0, r2, [r3]
 800e26c:	2800      	cmp	r0, #0
 800e26e:	d1f7      	bne.n	800e260 <HAL_UART_IRQHandler+0x22c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e270:	2302      	movs	r3, #2
 800e272:	6663      	str	r3, [r4, #100]	; 0x64
 800e274:	e7c9      	b.n	800e20a <HAL_UART_IRQHandler+0x1d6>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e276:	02d6      	lsls	r6, r2, #11
 800e278:	d508      	bpl.n	800e28c <HAL_UART_IRQHandler+0x258>
 800e27a:	0268      	lsls	r0, r5, #9
 800e27c:	d506      	bpl.n	800e28c <HAL_UART_IRQHandler+0x258>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e27e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800e282:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e284:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800e286:	f7ff fed4 	bl	800e032 <HAL_UARTEx_WakeupCallback>
    return;
 800e28a:	e762      	b.n	800e152 <HAL_UART_IRQHandler+0x11e>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e28c:	0616      	lsls	r6, r2, #24
 800e28e:	d507      	bpl.n	800e2a0 <HAL_UART_IRQHandler+0x26c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e290:	060d      	lsls	r5, r1, #24
 800e292:	d505      	bpl.n	800e2a0 <HAL_UART_IRQHandler+0x26c>
    if (huart->TxISR != NULL)
 800e294:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e296:	2b00      	cmp	r3, #0
 800e298:	f43f af5b 	beq.w	800e152 <HAL_UART_IRQHandler+0x11e>
      huart->TxISR(huart);
 800e29c:	4620      	mov	r0, r4
 800e29e:	e6dc      	b.n	800e05a <HAL_UART_IRQHandler+0x26>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e2a0:	0650      	lsls	r0, r2, #25
 800e2a2:	f57f af56 	bpl.w	800e152 <HAL_UART_IRQHandler+0x11e>
 800e2a6:	064a      	lsls	r2, r1, #25
 800e2a8:	f57f af53 	bpl.w	800e152 <HAL_UART_IRQHandler+0x11e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2ac:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e2b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2b4:	e843 2100 	strex	r1, r2, [r3]
 800e2b8:	2900      	cmp	r1, #0
 800e2ba:	d1f7      	bne.n	800e2ac <HAL_UART_IRQHandler+0x278>
  huart->gState = HAL_UART_STATE_READY;
 800e2bc:	2320      	movs	r3, #32
  HAL_UART_TxCpltCallback(huart);
 800e2be:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 800e2c0:	66e1      	str	r1, [r4, #108]	; 0x6c
  huart->gState = HAL_UART_STATE_READY;
 800e2c2:	67e3      	str	r3, [r4, #124]	; 0x7c
  HAL_UART_TxCpltCallback(huart);
 800e2c4:	f7ff fe09 	bl	800deda <HAL_UART_TxCpltCallback>
}
 800e2c8:	e743      	b.n	800e152 <HAL_UART_IRQHandler+0x11e>
 800e2ca:	bf00      	nop
 800e2cc:	04000120 	.word	0x04000120
 800e2d0:	0800dee1 	.word	0x0800dee1

0800e2d4 <UART_SetConfig>:
{
 800e2d4:	b538      	push	{r3, r4, r5, lr}
 800e2d6:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e2d8:	69c0      	ldr	r0, [r0, #28]
 800e2da:	6921      	ldr	r1, [r4, #16]
 800e2dc:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e2de:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e2e0:	430a      	orrs	r2, r1
 800e2e2:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e2e4:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e2e6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e2e8:	498e      	ldr	r1, [pc, #568]	; (800e524 <UART_SetConfig+0x250>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e2ea:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e2ec:	4029      	ands	r1, r5
  tmpreg |= huart->Init.OneBitSampling;
 800e2ee:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e2f0:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e2f2:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e2f4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e2f6:	685a      	ldr	r2, [r3, #4]
 800e2f8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800e2fc:	430a      	orrs	r2, r1
 800e2fe:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e300:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e302:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800e304:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e306:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800e30a:	430a      	orrs	r2, r1
 800e30c:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e30e:	4a86      	ldr	r2, [pc, #536]	; (800e528 <UART_SetConfig+0x254>)
 800e310:	4293      	cmp	r3, r2
 800e312:	d117      	bne.n	800e344 <UART_SetConfig+0x70>
 800e314:	4b85      	ldr	r3, [pc, #532]	; (800e52c <UART_SetConfig+0x258>)
 800e316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e31a:	f003 0303 	and.w	r3, r3, #3
 800e31e:	3b01      	subs	r3, #1
 800e320:	2b02      	cmp	r3, #2
 800e322:	f200 80e2 	bhi.w	800e4ea <UART_SetConfig+0x216>
 800e326:	4a82      	ldr	r2, [pc, #520]	; (800e530 <UART_SetConfig+0x25c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e328:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e32c:	5cd3      	ldrb	r3, [r2, r3]
 800e32e:	f040 80b3 	bne.w	800e498 <UART_SetConfig+0x1c4>
    switch (clocksource)
 800e332:	2b08      	cmp	r3, #8
 800e334:	d822      	bhi.n	800e37c <UART_SetConfig+0xa8>
 800e336:	e8df f003 	tbb	[pc, r3]
 800e33a:	db90      	.short	0xdb90
 800e33c:	21d52198 	.word	0x21d52198
 800e340:	2121      	.short	0x2121
 800e342:	99          	.byte	0x99
 800e343:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e344:	4a7b      	ldr	r2, [pc, #492]	; (800e534 <UART_SetConfig+0x260>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d106      	bne.n	800e358 <UART_SetConfig+0x84>
 800e34a:	4b78      	ldr	r3, [pc, #480]	; (800e52c <UART_SetConfig+0x258>)
 800e34c:	4a7a      	ldr	r2, [pc, #488]	; (800e538 <UART_SetConfig+0x264>)
 800e34e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e352:	f003 030c 	and.w	r3, r3, #12
 800e356:	e7e7      	b.n	800e328 <UART_SetConfig+0x54>
 800e358:	4a78      	ldr	r2, [pc, #480]	; (800e53c <UART_SetConfig+0x268>)
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d118      	bne.n	800e390 <UART_SetConfig+0xbc>
 800e35e:	4b73      	ldr	r3, [pc, #460]	; (800e52c <UART_SetConfig+0x258>)
 800e360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e364:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e368:	2b20      	cmp	r3, #32
 800e36a:	f000 80b3 	beq.w	800e4d4 <UART_SetConfig+0x200>
 800e36e:	d807      	bhi.n	800e380 <UART_SetConfig+0xac>
 800e370:	2b00      	cmp	r3, #0
 800e372:	f000 80c0 	beq.w	800e4f6 <UART_SetConfig+0x222>
 800e376:	2b10      	cmp	r3, #16
 800e378:	f000 80b1 	beq.w	800e4de <UART_SetConfig+0x20a>
    switch (clocksource)
 800e37c:	2001      	movs	r0, #1
 800e37e:	e070      	b.n	800e462 <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e380:	2b30      	cmp	r3, #48	; 0x30
 800e382:	d1fb      	bne.n	800e37c <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e384:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e388:	d070      	beq.n	800e46c <UART_SetConfig+0x198>
        pclk = (uint32_t) LSE_VALUE;
 800e38a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800e38e:	e0b9      	b.n	800e504 <UART_SetConfig+0x230>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e390:	4a6b      	ldr	r2, [pc, #428]	; (800e540 <UART_SetConfig+0x26c>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d10f      	bne.n	800e3b6 <UART_SetConfig+0xe2>
 800e396:	4b65      	ldr	r3, [pc, #404]	; (800e52c <UART_SetConfig+0x258>)
 800e398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e39c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e3a0:	2b80      	cmp	r3, #128	; 0x80
 800e3a2:	f000 8097 	beq.w	800e4d4 <UART_SetConfig+0x200>
 800e3a6:	d804      	bhi.n	800e3b2 <UART_SetConfig+0xde>
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	f000 80a4 	beq.w	800e4f6 <UART_SetConfig+0x222>
 800e3ae:	2b40      	cmp	r3, #64	; 0x40
 800e3b0:	e7e2      	b.n	800e378 <UART_SetConfig+0xa4>
 800e3b2:	2bc0      	cmp	r3, #192	; 0xc0
 800e3b4:	e7e5      	b.n	800e382 <UART_SetConfig+0xae>
 800e3b6:	4a63      	ldr	r2, [pc, #396]	; (800e544 <UART_SetConfig+0x270>)
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	d112      	bne.n	800e3e2 <UART_SetConfig+0x10e>
 800e3bc:	4b5b      	ldr	r3, [pc, #364]	; (800e52c <UART_SetConfig+0x258>)
 800e3be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3ca:	f000 8083 	beq.w	800e4d4 <UART_SetConfig+0x200>
 800e3ce:	d805      	bhi.n	800e3dc <UART_SetConfig+0x108>
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	f000 8090 	beq.w	800e4f6 <UART_SetConfig+0x222>
 800e3d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3da:	e7cd      	b.n	800e378 <UART_SetConfig+0xa4>
 800e3dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e3e0:	e7cf      	b.n	800e382 <UART_SetConfig+0xae>
 800e3e2:	4a59      	ldr	r2, [pc, #356]	; (800e548 <UART_SetConfig+0x274>)
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	d110      	bne.n	800e40a <UART_SetConfig+0x136>
 800e3e8:	4b50      	ldr	r3, [pc, #320]	; (800e52c <UART_SetConfig+0x258>)
 800e3ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e3f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e3f6:	d06d      	beq.n	800e4d4 <UART_SetConfig+0x200>
 800e3f8:	d804      	bhi.n	800e404 <UART_SetConfig+0x130>
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d075      	beq.n	800e4ea <UART_SetConfig+0x216>
 800e3fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e402:	e7b9      	b.n	800e378 <UART_SetConfig+0xa4>
 800e404:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e408:	e7bb      	b.n	800e382 <UART_SetConfig+0xae>
 800e40a:	4a50      	ldr	r2, [pc, #320]	; (800e54c <UART_SetConfig+0x278>)
 800e40c:	4293      	cmp	r3, r2
 800e40e:	d110      	bne.n	800e432 <UART_SetConfig+0x15e>
 800e410:	4b46      	ldr	r3, [pc, #280]	; (800e52c <UART_SetConfig+0x258>)
 800e412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e416:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e41a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e41e:	d059      	beq.n	800e4d4 <UART_SetConfig+0x200>
 800e420:	d804      	bhi.n	800e42c <UART_SetConfig+0x158>
 800e422:	2b00      	cmp	r3, #0
 800e424:	d067      	beq.n	800e4f6 <UART_SetConfig+0x222>
 800e426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e42a:	e7a5      	b.n	800e378 <UART_SetConfig+0xa4>
 800e42c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e430:	e7a7      	b.n	800e382 <UART_SetConfig+0xae>
 800e432:	4a47      	ldr	r2, [pc, #284]	; (800e550 <UART_SetConfig+0x27c>)
 800e434:	4293      	cmp	r3, r2
 800e436:	d1a1      	bne.n	800e37c <UART_SetConfig+0xa8>
 800e438:	4b3c      	ldr	r3, [pc, #240]	; (800e52c <UART_SetConfig+0x258>)
 800e43a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e43e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e446:	d045      	beq.n	800e4d4 <UART_SetConfig+0x200>
 800e448:	d804      	bhi.n	800e454 <UART_SetConfig+0x180>
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d053      	beq.n	800e4f6 <UART_SetConfig+0x222>
 800e44e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e452:	e791      	b.n	800e378 <UART_SetConfig+0xa4>
 800e454:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e458:	e793      	b.n	800e382 <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetPCLK1Freq();
 800e45a:	f7ff f847 	bl	800d4ec <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800e45e:	b928      	cbnz	r0, 800e46c <UART_SetConfig+0x198>
 800e460:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800e462:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800e464:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 800e468:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 800e46a:	483a      	ldr	r0, [pc, #232]	; (800e554 <UART_SetConfig+0x280>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e46c:	6862      	ldr	r2, [r4, #4]
 800e46e:	0853      	lsrs	r3, r2, #1
 800e470:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800e474:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e478:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800e47c:	f1a3 0110 	sub.w	r1, r3, #16
 800e480:	4291      	cmp	r1, r2
 800e482:	f63f af7b 	bhi.w	800e37c <UART_SetConfig+0xa8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e486:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e48a:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800e48e:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e490:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800e492:	4313      	orrs	r3, r2
 800e494:	60cb      	str	r3, [r1, #12]
 800e496:	e7e3      	b.n	800e460 <UART_SetConfig+0x18c>
    switch (clocksource)
 800e498:	2b08      	cmp	r3, #8
 800e49a:	f63f af6f 	bhi.w	800e37c <UART_SetConfig+0xa8>
 800e49e:	a201      	add	r2, pc, #4	; (adr r2, 800e4a4 <UART_SetConfig+0x1d0>)
 800e4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4a4:	0800e4fd 	.word	0x0800e4fd
 800e4a8:	0800e4c9 	.word	0x0800e4c9
 800e4ac:	0800e4db 	.word	0x0800e4db
 800e4b0:	0800e37d 	.word	0x0800e37d
 800e4b4:	0800e4cf 	.word	0x0800e4cf
 800e4b8:	0800e37d 	.word	0x0800e37d
 800e4bc:	0800e37d 	.word	0x0800e37d
 800e4c0:	0800e37d 	.word	0x0800e37d
 800e4c4:	0800e38b 	.word	0x0800e38b
        pclk = HAL_RCC_GetPCLK2Freq();
 800e4c8:	f7ff f820 	bl	800d50c <HAL_RCC_GetPCLK2Freq>
        break;
 800e4cc:	e018      	b.n	800e500 <UART_SetConfig+0x22c>
        pclk = HAL_RCC_GetSysClockFreq();
 800e4ce:	f7fe ff41 	bl	800d354 <HAL_RCC_GetSysClockFreq>
        break;
 800e4d2:	e015      	b.n	800e500 <UART_SetConfig+0x22c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e4d4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e4d8:	d0c7      	beq.n	800e46a <UART_SetConfig+0x196>
        pclk = (uint32_t) HSI_VALUE;
 800e4da:	481e      	ldr	r0, [pc, #120]	; (800e554 <UART_SetConfig+0x280>)
 800e4dc:	e012      	b.n	800e504 <UART_SetConfig+0x230>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e4de:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e4e2:	d1f4      	bne.n	800e4ce <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetSysClockFreq();
 800e4e4:	f7fe ff36 	bl	800d354 <HAL_RCC_GetSysClockFreq>
        break;
 800e4e8:	e7b9      	b.n	800e45e <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e4ea:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e4ee:	d1eb      	bne.n	800e4c8 <UART_SetConfig+0x1f4>
        pclk = HAL_RCC_GetPCLK2Freq();
 800e4f0:	f7ff f80c 	bl	800d50c <HAL_RCC_GetPCLK2Freq>
        break;
 800e4f4:	e7b3      	b.n	800e45e <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e4f6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e4fa:	d0ae      	beq.n	800e45a <UART_SetConfig+0x186>
        pclk = HAL_RCC_GetPCLK1Freq();
 800e4fc:	f7fe fff6 	bl	800d4ec <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800e500:	2800      	cmp	r0, #0
 800e502:	d0ad      	beq.n	800e460 <UART_SetConfig+0x18c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e504:	6862      	ldr	r2, [r4, #4]
 800e506:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800e50a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e50e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800e512:	f1a3 0110 	sub.w	r1, r3, #16
 800e516:	4291      	cmp	r1, r2
 800e518:	f63f af30 	bhi.w	800e37c <UART_SetConfig+0xa8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e51c:	6822      	ldr	r2, [r4, #0]
 800e51e:	60d3      	str	r3, [r2, #12]
 800e520:	e79e      	b.n	800e460 <UART_SetConfig+0x18c>
 800e522:	bf00      	nop
 800e524:	efff69f3 	.word	0xefff69f3
 800e528:	40011000 	.word	0x40011000
 800e52c:	40023800 	.word	0x40023800
 800e530:	0802ffa4 	.word	0x0802ffa4
 800e534:	40004400 	.word	0x40004400
 800e538:	0802ffa7 	.word	0x0802ffa7
 800e53c:	40004800 	.word	0x40004800
 800e540:	40004c00 	.word	0x40004c00
 800e544:	40005000 	.word	0x40005000
 800e548:	40011400 	.word	0x40011400
 800e54c:	40007800 	.word	0x40007800
 800e550:	40007c00 	.word	0x40007c00
 800e554:	00f42400 	.word	0x00f42400

0800e558 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e558:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e55a:	07da      	lsls	r2, r3, #31
{
 800e55c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e55e:	d506      	bpl.n	800e56e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e560:	6801      	ldr	r1, [r0, #0]
 800e562:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e564:	684a      	ldr	r2, [r1, #4]
 800e566:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e56a:	4322      	orrs	r2, r4
 800e56c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e56e:	079c      	lsls	r4, r3, #30
 800e570:	d506      	bpl.n	800e580 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e572:	6801      	ldr	r1, [r0, #0]
 800e574:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800e576:	684a      	ldr	r2, [r1, #4]
 800e578:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e57c:	4322      	orrs	r2, r4
 800e57e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e580:	0759      	lsls	r1, r3, #29
 800e582:	d506      	bpl.n	800e592 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e584:	6801      	ldr	r1, [r0, #0]
 800e586:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800e588:	684a      	ldr	r2, [r1, #4]
 800e58a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e58e:	4322      	orrs	r2, r4
 800e590:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e592:	071a      	lsls	r2, r3, #28
 800e594:	d506      	bpl.n	800e5a4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e596:	6801      	ldr	r1, [r0, #0]
 800e598:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800e59a:	684a      	ldr	r2, [r1, #4]
 800e59c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e5a0:	4322      	orrs	r2, r4
 800e5a2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e5a4:	06dc      	lsls	r4, r3, #27
 800e5a6:	d506      	bpl.n	800e5b6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e5a8:	6801      	ldr	r1, [r0, #0]
 800e5aa:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800e5ac:	688a      	ldr	r2, [r1, #8]
 800e5ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e5b2:	4322      	orrs	r2, r4
 800e5b4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e5b6:	0699      	lsls	r1, r3, #26
 800e5b8:	d506      	bpl.n	800e5c8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e5ba:	6801      	ldr	r1, [r0, #0]
 800e5bc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800e5be:	688a      	ldr	r2, [r1, #8]
 800e5c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e5c4:	4322      	orrs	r2, r4
 800e5c6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e5c8:	065a      	lsls	r2, r3, #25
 800e5ca:	d510      	bpl.n	800e5ee <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e5cc:	6801      	ldr	r1, [r0, #0]
 800e5ce:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800e5d0:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e5d2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e5d6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800e5da:	ea42 0204 	orr.w	r2, r2, r4
 800e5de:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e5e0:	d105      	bne.n	800e5ee <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e5e2:	684a      	ldr	r2, [r1, #4]
 800e5e4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800e5e6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800e5ea:	4322      	orrs	r2, r4
 800e5ec:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e5ee:	061b      	lsls	r3, r3, #24
 800e5f0:	d506      	bpl.n	800e600 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e5f2:	6802      	ldr	r2, [r0, #0]
 800e5f4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800e5f6:	6853      	ldr	r3, [r2, #4]
 800e5f8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800e5fc:	430b      	orrs	r3, r1
 800e5fe:	6053      	str	r3, [r2, #4]
}
 800e600:	bd10      	pop	{r4, pc}

0800e602 <UART_WaitOnFlagUntilTimeout>:
{
 800e602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e606:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e60a:	4604      	mov	r4, r0
 800e60c:	460e      	mov	r6, r1
 800e60e:	4615      	mov	r5, r2
 800e610:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e612:	6822      	ldr	r2, [r4, #0]
 800e614:	69d3      	ldr	r3, [r2, #28]
 800e616:	ea36 0303 	bics.w	r3, r6, r3
 800e61a:	bf0c      	ite	eq
 800e61c:	2301      	moveq	r3, #1
 800e61e:	2300      	movne	r3, #0
 800e620:	42ab      	cmp	r3, r5
 800e622:	d001      	beq.n	800e628 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800e624:	2000      	movs	r0, #0
 800e626:	e026      	b.n	800e676 <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 800e628:	f1b8 3fff 	cmp.w	r8, #4294967295
 800e62c:	d0f2      	beq.n	800e614 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e62e:	f7fb fbcb 	bl	8009dc8 <HAL_GetTick>
 800e632:	1bc0      	subs	r0, r0, r7
 800e634:	4540      	cmp	r0, r8
 800e636:	6820      	ldr	r0, [r4, #0]
 800e638:	d802      	bhi.n	800e640 <UART_WaitOnFlagUntilTimeout+0x3e>
 800e63a:	f1b8 0f00 	cmp.w	r8, #0
 800e63e:	d11c      	bne.n	800e67a <UART_WaitOnFlagUntilTimeout+0x78>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e640:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e644:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e648:	e840 3200 	strex	r2, r3, [r0]
 800e64c:	2a00      	cmp	r2, #0
 800e64e:	d1f7      	bne.n	800e640 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e650:	f100 0308 	add.w	r3, r0, #8
 800e654:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e658:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e65c:	f100 0108 	add.w	r1, r0, #8
 800e660:	e841 3200 	strex	r2, r3, [r1]
 800e664:	2a00      	cmp	r2, #0
 800e666:	d1f3      	bne.n	800e650 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 800e668:	2320      	movs	r3, #32
 800e66a:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800e66c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 800e670:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800e672:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
}
 800e676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e67a:	6803      	ldr	r3, [r0, #0]
 800e67c:	075a      	lsls	r2, r3, #29
 800e67e:	d5c8      	bpl.n	800e612 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e680:	69c3      	ldr	r3, [r0, #28]
 800e682:	051b      	lsls	r3, r3, #20
 800e684:	d5c5      	bpl.n	800e612 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e686:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e68a:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e68c:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e690:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e694:	e840 3200 	strex	r2, r3, [r0]
 800e698:	2a00      	cmp	r2, #0
 800e69a:	d1f7      	bne.n	800e68c <UART_WaitOnFlagUntilTimeout+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e69c:	f100 0308 	add.w	r3, r0, #8
 800e6a0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6a4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6a8:	f100 0108 	add.w	r1, r0, #8
 800e6ac:	e841 3200 	strex	r2, r3, [r1]
 800e6b0:	2a00      	cmp	r2, #0
 800e6b2:	d1f3      	bne.n	800e69c <UART_WaitOnFlagUntilTimeout+0x9a>
          huart->gState = HAL_UART_STATE_READY;
 800e6b4:	2320      	movs	r3, #32
 800e6b6:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800e6b8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e6bc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800e6c0:	e7d6      	b.n	800e670 <UART_WaitOnFlagUntilTimeout+0x6e>

0800e6c2 <UART_CheckIdleState>:
{
 800e6c2:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6c4:	2500      	movs	r5, #0
{
 800e6c6:	4604      	mov	r4, r0
 800e6c8:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6ca:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 800e6ce:	f7fb fb7b 	bl	8009dc8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e6d2:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800e6d4:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e6d6:	6812      	ldr	r2, [r2, #0]
 800e6d8:	0711      	lsls	r1, r2, #28
 800e6da:	d417      	bmi.n	800e70c <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e6dc:	6822      	ldr	r2, [r4, #0]
 800e6de:	6812      	ldr	r2, [r2, #0]
 800e6e0:	0752      	lsls	r2, r2, #29
 800e6e2:	d509      	bpl.n	800e6f8 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e6e4:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800e6e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	9200      	str	r2, [sp, #0]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f7ff ff86 	bl	800e602 <UART_WaitOnFlagUntilTimeout>
 800e6f6:	b9b0      	cbnz	r0, 800e726 <UART_CheckIdleState+0x64>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6f8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800e6fa:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800e6fc:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
  huart->gState = HAL_UART_STATE_READY;
 800e700:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e702:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e706:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e708:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 800e70a:	e00d      	b.n	800e728 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e70c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800e710:	9003      	str	r0, [sp, #12]
 800e712:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e716:	4620      	mov	r0, r4
 800e718:	9200      	str	r2, [sp, #0]
 800e71a:	462a      	mov	r2, r5
 800e71c:	f7ff ff71 	bl	800e602 <UART_WaitOnFlagUntilTimeout>
 800e720:	9b03      	ldr	r3, [sp, #12]
 800e722:	2800      	cmp	r0, #0
 800e724:	d0da      	beq.n	800e6dc <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800e726:	2003      	movs	r0, #3
}
 800e728:	b005      	add	sp, #20
 800e72a:	bd30      	pop	{r4, r5, pc}

0800e72c <HAL_UART_Init>:
{
 800e72c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800e72e:	4604      	mov	r4, r0
 800e730:	b340      	cbz	r0, 800e784 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800e732:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800e734:	b91b      	cbnz	r3, 800e73e <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 800e736:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 800e73a:	f7f5 fec7 	bl	80044cc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800e73e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800e740:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e742:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800e744:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 800e746:	6813      	ldr	r3, [r2, #0]
 800e748:	f023 0301 	bic.w	r3, r3, #1
 800e74c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e74e:	f7ff fdc1 	bl	800e2d4 <UART_SetConfig>
 800e752:	2801      	cmp	r0, #1
 800e754:	d016      	beq.n	800e784 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e758:	b113      	cbz	r3, 800e760 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800e75a:	4620      	mov	r0, r4
 800e75c:	f7ff fefc 	bl	800e558 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e760:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800e762:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e764:	685a      	ldr	r2, [r3, #4]
 800e766:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e76a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e76c:	689a      	ldr	r2, [r3, #8]
 800e76e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e772:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800e774:	681a      	ldr	r2, [r3, #0]
 800e776:	f042 0201 	orr.w	r2, r2, #1
}
 800e77a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800e77e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800e780:	f7ff bf9f 	b.w	800e6c2 <UART_CheckIdleState>
}
 800e784:	2001      	movs	r0, #1
 800e786:	bd10      	pop	{r4, pc}

0800e788 <UART_Start_Receive_IT>:
{
 800e788:	b510      	push	{r4, lr}
  huart->RxXferSize  = Size;
 800e78a:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxISR       = NULL;
 800e78e:	2300      	movs	r3, #0
  huart->RxXferCount = Size;
 800e790:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  UART_MASK_COMPUTATION(huart);
 800e794:	6882      	ldr	r2, [r0, #8]
  huart->pRxBuffPtr  = pData;
 800e796:	6541      	str	r1, [r0, #84]	; 0x54
  UART_MASK_COMPUTATION(huart);
 800e798:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
  huart->RxISR       = NULL;
 800e79c:	6683      	str	r3, [r0, #104]	; 0x68
  UART_MASK_COMPUTATION(huart);
 800e79e:	d130      	bne.n	800e802 <UART_Start_Receive_IT+0x7a>
 800e7a0:	6903      	ldr	r3, [r0, #16]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	f240 13ff 	movw	r3, #511	; 0x1ff
 800e7a8:	bf18      	it	ne
 800e7aa:	23ff      	movne	r3, #255	; 0xff
 800e7ac:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e7b6:	2322      	movs	r3, #34	; 0x22
 800e7b8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7bc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7be:	f102 0308 	add.w	r3, r2, #8
 800e7c2:	e853 3f00 	ldrex	r3, [r3]
 800e7c6:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ca:	3208      	adds	r2, #8
 800e7cc:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800e7d0:	6802      	ldr	r2, [r0, #0]
 800e7d2:	2900      	cmp	r1, #0
 800e7d4:	d1f2      	bne.n	800e7bc <UART_Start_Receive_IT+0x34>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e7d6:	6883      	ldr	r3, [r0, #8]
 800e7d8:	6901      	ldr	r1, [r0, #16]
 800e7da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e7de:	d120      	bne.n	800e822 <UART_Start_Receive_IT+0x9a>
    huart->RxISR = UART_RxISR_8BIT;
 800e7e0:	4b15      	ldr	r3, [pc, #84]	; (800e838 <UART_Start_Receive_IT+0xb0>)
 800e7e2:	4c16      	ldr	r4, [pc, #88]	; (800e83c <UART_Start_Receive_IT+0xb4>)
 800e7e4:	2900      	cmp	r1, #0
 800e7e6:	bf18      	it	ne
 800e7e8:	4623      	movne	r3, r4
 800e7ea:	6683      	str	r3, [r0, #104]	; 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e7ec:	b1d9      	cbz	r1, 800e826 <UART_Start_Receive_IT+0x9e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ee:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800e7f2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7f6:	e842 3100 	strex	r1, r3, [r2]
 800e7fa:	2900      	cmp	r1, #0
 800e7fc:	d1f7      	bne.n	800e7ee <UART_Start_Receive_IT+0x66>
}
 800e7fe:	2000      	movs	r0, #0
 800e800:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 800e802:	b92a      	cbnz	r2, 800e810 <UART_Start_Receive_IT+0x88>
 800e804:	6903      	ldr	r3, [r0, #16]
 800e806:	2b00      	cmp	r3, #0
 800e808:	bf14      	ite	ne
 800e80a:	237f      	movne	r3, #127	; 0x7f
 800e80c:	23ff      	moveq	r3, #255	; 0xff
 800e80e:	e7cd      	b.n	800e7ac <UART_Start_Receive_IT+0x24>
 800e810:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800e814:	d1ca      	bne.n	800e7ac <UART_Start_Receive_IT+0x24>
 800e816:	6903      	ldr	r3, [r0, #16]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	bf0c      	ite	eq
 800e81c:	237f      	moveq	r3, #127	; 0x7f
 800e81e:	233f      	movne	r3, #63	; 0x3f
 800e820:	e7c4      	b.n	800e7ac <UART_Start_Receive_IT+0x24>
    huart->RxISR = UART_RxISR_8BIT;
 800e822:	4b06      	ldr	r3, [pc, #24]	; (800e83c <UART_Start_Receive_IT+0xb4>)
 800e824:	e7e1      	b.n	800e7ea <UART_Start_Receive_IT+0x62>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e826:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800e82a:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e82e:	e842 3100 	strex	r1, r3, [r2]
 800e832:	2900      	cmp	r1, #0
 800e834:	d1f7      	bne.n	800e826 <UART_Start_Receive_IT+0x9e>
 800e836:	e7e2      	b.n	800e7fe <UART_Start_Receive_IT+0x76>
 800e838:	0800df97 	.word	0x0800df97
 800e83c:	0800def5 	.word	0x0800def5

0800e840 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e840:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e842:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
{
 800e846:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 800e848:	2e20      	cmp	r6, #32
 800e84a:	d11c      	bne.n	800e886 <HAL_UARTEx_ReceiveToIdle_IT+0x46>
  {
    if ((pData == NULL) || (Size == 0U))
 800e84c:	b909      	cbnz	r1, 800e852 <HAL_UARTEx_ReceiveToIdle_IT+0x12>
    {
      return HAL_ERROR;
 800e84e:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 800e850:	bd70      	pop	{r4, r5, r6, pc}
    if ((pData == NULL) || (Size == 0U))
 800e852:	2a00      	cmp	r2, #0
 800e854:	d0fb      	beq.n	800e84e <HAL_UARTEx_ReceiveToIdle_IT+0xe>
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800e856:	2301      	movs	r3, #1
 800e858:	6603      	str	r3, [r0, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e85a:	2300      	movs	r3, #0
 800e85c:	6643      	str	r3, [r0, #100]	; 0x64
    status =  UART_Start_Receive_IT(huart, pData, Size);
 800e85e:	f7ff ff93 	bl	800e788 <UART_Start_Receive_IT>
    if (status == HAL_OK)
 800e862:	2800      	cmp	r0, #0
 800e864:	d1f4      	bne.n	800e850 <HAL_UARTEx_ReceiveToIdle_IT+0x10>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e866:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800e868:	2b01      	cmp	r3, #1
 800e86a:	d1f0      	bne.n	800e84e <HAL_UARTEx_ReceiveToIdle_IT+0xe>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e86c:	2210      	movs	r2, #16
 800e86e:	6823      	ldr	r3, [r4, #0]
 800e870:	621a      	str	r2, [r3, #32]
 800e872:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e874:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e878:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e87c:	e842 3100 	strex	r1, r3, [r2]
 800e880:	2900      	cmp	r1, #0
 800e882:	d1f7      	bne.n	800e874 <HAL_UARTEx_ReceiveToIdle_IT+0x34>
 800e884:	e7e4      	b.n	800e850 <HAL_UARTEx_ReceiveToIdle_IT+0x10>
    return HAL_BUSY;
 800e886:	2002      	movs	r0, #2
 800e888:	e7e2      	b.n	800e850 <HAL_UARTEx_ReceiveToIdle_IT+0x10>

0800e88a <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800e88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e88e:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800e892:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800e896:	f8d1 e024 	ldr.w	lr, [r1, #36]	; 0x24
 800e89a:	ea43 0308 	orr.w	r3, r3, r8
 800e89e:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800e8a2:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800e8a6:	6809      	ldr	r1, [r1, #0]
 800e8a8:	b991      	cbnz	r1, 800e8d0 <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e8aa:	ea43 030e 	orr.w	r3, r3, lr
 800e8ae:	6801      	ldr	r1, [r0, #0]
 800e8b0:	4313      	orrs	r3, r2
 800e8b2:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800e8b6:	ea43 030c 	orr.w	r3, r3, ip
 800e8ba:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800e8be:	433b      	orrs	r3, r7
 800e8c0:	4333      	orrs	r3, r6
 800e8c2:	432b      	orrs	r3, r5
 800e8c4:	4323      	orrs	r3, r4
 800e8c6:	430b      	orrs	r3, r1
 800e8c8:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800e8ca:	2000      	movs	r0, #0
 800e8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e8d0:	6801      	ldr	r1, [r0, #0]
 800e8d2:	ea43 030e 	orr.w	r3, r3, lr
 800e8d6:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800e8da:	430b      	orrs	r3, r1
 800e8dc:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800e8de:	ea42 030c 	orr.w	r3, r2, ip
 800e8e2:	6841      	ldr	r1, [r0, #4]
 800e8e4:	433b      	orrs	r3, r7
 800e8e6:	f421 42ff 	bic.w	r2, r1, #32640	; 0x7f80
 800e8ea:	4333      	orrs	r3, r6
 800e8ec:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800e8f0:	432b      	orrs	r3, r5
 800e8f2:	4323      	orrs	r3, r4
 800e8f4:	4313      	orrs	r3, r2
 800e8f6:	6043      	str	r3, [r0, #4]
 800e8f8:	e7e7      	b.n	800e8ca <FMC_SDRAM_Init+0x40>

0800e8fa <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e8fa:	68cb      	ldr	r3, [r1, #12]
 800e8fc:	f103 3cff 	add.w	ip, r3, #4294967295
 800e900:	694b      	ldr	r3, [r1, #20]
{
 800e902:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e904:	3b01      	subs	r3, #1
 800e906:	680f      	ldr	r7, [r1, #0]
 800e908:	684c      	ldr	r4, [r1, #4]
 800e90a:	688e      	ldr	r6, [r1, #8]
 800e90c:	051b      	lsls	r3, r3, #20
 800e90e:	690d      	ldr	r5, [r1, #16]
 800e910:	3c01      	subs	r4, #1
 800e912:	6989      	ldr	r1, [r1, #24]
 800e914:	3e01      	subs	r6, #1
 800e916:	3d01      	subs	r5, #1
 800e918:	3f01      	subs	r7, #1
 800e91a:	3901      	subs	r1, #1
 800e91c:	0124      	lsls	r4, r4, #4
 800e91e:	0236      	lsls	r6, r6, #8
 800e920:	042d      	lsls	r5, r5, #16
 800e922:	0609      	lsls	r1, r1, #24
 800e924:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800e928:	b95a      	cbnz	r2, 800e942 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e92a:	433b      	orrs	r3, r7
 800e92c:	6882      	ldr	r2, [r0, #8]
 800e92e:	4323      	orrs	r3, r4
 800e930:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800e934:	4333      	orrs	r3, r6
 800e936:	432b      	orrs	r3, r5
 800e938:	430b      	orrs	r3, r1
 800e93a:	4313      	orrs	r3, r2
 800e93c:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 800e93e:	2000      	movs	r0, #0
 800e940:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e942:	6882      	ldr	r2, [r0, #8]
 800e944:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800e948:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800e94c:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800e94e:	ea44 0306 	orr.w	r3, r4, r6
 800e952:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e954:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800e956:	68c2      	ldr	r2, [r0, #12]
 800e958:	432b      	orrs	r3, r5
 800e95a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800e95e:	430b      	orrs	r3, r1
 800e960:	4313      	orrs	r3, r2
 800e962:	60c3      	str	r3, [r0, #12]
 800e964:	e7eb      	b.n	800e93e <FMC_SDRAM_Timing_Init+0x44>

0800e966 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800e966:	6902      	ldr	r2, [r0, #16]
{
 800e968:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800e96a:	e9d1 3400 	ldrd	r3, r4, [r1]
 800e96e:	0d92      	lsrs	r2, r2, #22
 800e970:	4323      	orrs	r3, r4
 800e972:	68cc      	ldr	r4, [r1, #12]
 800e974:	0592      	lsls	r2, r2, #22
 800e976:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800e97a:	4313      	orrs	r3, r2
 800e97c:	688a      	ldr	r2, [r1, #8]
 800e97e:	3a01      	subs	r2, #1
 800e980:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800e984:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800e986:	2000      	movs	r0, #0
 800e988:	bd10      	pop	{r4, pc}

0800e98a <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800e98a:	6943      	ldr	r3, [r0, #20]
 800e98c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800e990:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800e994:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800e998:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 800e99a:	2000      	movs	r0, #0
 800e99c:	4770      	bx	lr
	...

0800e9a0 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e9a0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800e9a4:	b113      	cbz	r3, 800e9ac <osKernelInitialize+0xc>
    stat = osErrorISR;
 800e9a6:	f06f 0005 	mvn.w	r0, #5
 800e9aa:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e9ac:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800e9b0:	4b07      	ldr	r3, [pc, #28]	; (800e9d0 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 800e9b2:	b912      	cbnz	r2, 800e9ba <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e9b4:	f3ef 8211 	mrs	r2, BASEPRI
 800e9b8:	b112      	cbz	r2, 800e9c0 <osKernelInitialize+0x20>
 800e9ba:	681a      	ldr	r2, [r3, #0]
 800e9bc:	2a02      	cmp	r2, #2
 800e9be:	d0f2      	beq.n	800e9a6 <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e9c0:	6818      	ldr	r0, [r3, #0]
 800e9c2:	b910      	cbnz	r0, 800e9ca <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e9c4:	2201      	movs	r2, #1
 800e9c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e9c8:	4770      	bx	lr
    } else {
      stat = osError;
 800e9ca:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800e9ce:	4770      	bx	lr
 800e9d0:	200128a4 	.word	0x200128a4

0800e9d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e9d4:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e9d6:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800e9da:	b113      	cbz	r3, 800e9e2 <osKernelStart+0xe>
    stat = osErrorISR;
 800e9dc:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 800e9e0:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e9e2:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 800e9e6:	4b0a      	ldr	r3, [pc, #40]	; (800ea10 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 800e9e8:	b912      	cbnz	r2, 800e9f0 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e9ea:	f3ef 8211 	mrs	r2, BASEPRI
 800e9ee:	b112      	cbz	r2, 800e9f6 <osKernelStart+0x22>
 800e9f0:	681a      	ldr	r2, [r3, #0]
 800e9f2:	2a02      	cmp	r2, #2
 800e9f4:	d0f2      	beq.n	800e9dc <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 800e9f6:	681a      	ldr	r2, [r3, #0]
 800e9f8:	2a01      	cmp	r2, #1
 800e9fa:	d105      	bne.n	800ea08 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 800e9fc:	2202      	movs	r2, #2
 800e9fe:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800ea00:	f001 fecc 	bl	801079c <vTaskStartScheduler>
      stat = osOK;
 800ea04:	2000      	movs	r0, #0
 800ea06:	e7eb      	b.n	800e9e0 <osKernelStart+0xc>
      stat = osError;
 800ea08:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800ea0c:	e7e8      	b.n	800e9e0 <osKernelStart+0xc>
 800ea0e:	bf00      	nop
 800ea10:	200128a4 	.word	0x200128a4

0800ea14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ea14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea16:	4614      	mov	r4, r2
 800ea18:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ea1a:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ea1c:	460b      	mov	r3, r1
  hTask = NULL;
 800ea1e:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea20:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800ea24:	bb1a      	cbnz	r2, 800ea6e <osThreadNew+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea26:	f3ef 8210 	mrs	r2, PRIMASK
 800ea2a:	b912      	cbnz	r2, 800ea32 <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ea2c:	f3ef 8211 	mrs	r2, BASEPRI
 800ea30:	b11a      	cbz	r2, 800ea3a <osThreadNew+0x26>
 800ea32:	4a21      	ldr	r2, [pc, #132]	; (800eab8 <osThreadNew+0xa4>)
 800ea34:	6812      	ldr	r2, [r2, #0]
 800ea36:	2a02      	cmp	r2, #2
 800ea38:	d019      	beq.n	800ea6e <osThreadNew+0x5a>
 800ea3a:	b1c0      	cbz	r0, 800ea6e <osThreadNew+0x5a>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800ea3c:	b36c      	cbz	r4, 800ea9a <osThreadNew+0x86>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800ea3e:	69a5      	ldr	r5, [r4, #24]
 800ea40:	2d00      	cmp	r5, #0
 800ea42:	bf08      	it	eq
 800ea44:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ea46:	1e6a      	subs	r2, r5, #1
 800ea48:	46ac      	mov	ip, r5
 800ea4a:	2a37      	cmp	r2, #55	; 0x37
 800ea4c:	d82a      	bhi.n	800eaa4 <osThreadNew+0x90>
 800ea4e:	6862      	ldr	r2, [r4, #4]
 800ea50:	07d2      	lsls	r2, r2, #31
 800ea52:	d427      	bmi.n	800eaa4 <osThreadNew+0x90>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800ea54:	6966      	ldr	r6, [r4, #20]
 800ea56:	b16e      	cbz	r6, 800ea74 <osThreadNew+0x60>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ea58:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800ea5a:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ea5c:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800ea60:	b157      	cbz	r7, 800ea78 <osThreadNew+0x64>
 800ea62:	f1be 0fab 	cmp.w	lr, #171	; 0xab
 800ea66:	d902      	bls.n	800ea6e <osThreadNew+0x5a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ea68:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ea6a:	b104      	cbz	r4, 800ea6e <osThreadNew+0x5a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ea6c:	b9e6      	cbnz	r6, 800eaa8 <osThreadNew+0x94>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ea6e:	9805      	ldr	r0, [sp, #20]
}
 800ea70:	b007      	add	sp, #28
 800ea72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800ea74:	2280      	movs	r2, #128	; 0x80
 800ea76:	e7f0      	b.n	800ea5a <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ea78:	f1be 0f00 	cmp.w	lr, #0
 800ea7c:	d1f7      	bne.n	800ea6e <osThreadNew+0x5a>
      if (mem == 0) {
 800ea7e:	6924      	ldr	r4, [r4, #16]
 800ea80:	2c00      	cmp	r4, #0
 800ea82:	d1f4      	bne.n	800ea6e <osThreadNew+0x5a>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ea84:	ac05      	add	r4, sp, #20
 800ea86:	b292      	uxth	r2, r2
 800ea88:	e9cd c400 	strd	ip, r4, [sp]
 800ea8c:	f001 fcfa 	bl	8010484 <xTaskCreate>
 800ea90:	2801      	cmp	r0, #1
          hTask = NULL;
 800ea92:	bf1c      	itt	ne
 800ea94:	2300      	movne	r3, #0
 800ea96:	9305      	strne	r3, [sp, #20]
 800ea98:	e7e9      	b.n	800ea6e <osThreadNew+0x5a>
    name = NULL;
 800ea9a:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 800ea9c:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800eaa0:	2280      	movs	r2, #128	; 0x80
 800eaa2:	e7ef      	b.n	800ea84 <osThreadNew+0x70>
        return (NULL);
 800eaa4:	2000      	movs	r0, #0
 800eaa6:	e7e3      	b.n	800ea70 <osThreadNew+0x5c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800eaa8:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800eaac:	9500      	str	r5, [sp, #0]
 800eaae:	f001 fcab 	bl	8010408 <xTaskCreateStatic>
 800eab2:	9005      	str	r0, [sp, #20]
 800eab4:	e7db      	b.n	800ea6e <osThreadNew+0x5a>
 800eab6:	bf00      	nop
 800eab8:	200128a4 	.word	0x200128a4

0800eabc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800eabc:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eabe:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800eac2:	b113      	cbz	r3, 800eaca <osDelay+0xe>
    stat = osErrorISR;
 800eac4:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800eac8:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eaca:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800eace:	b913      	cbnz	r3, 800ead6 <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ead0:	f3ef 8311 	mrs	r3, BASEPRI
 800ead4:	b11b      	cbz	r3, 800eade <osDelay+0x22>
 800ead6:	4b05      	ldr	r3, [pc, #20]	; (800eaec <osDelay+0x30>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	2b02      	cmp	r3, #2
 800eadc:	d0f2      	beq.n	800eac4 <osDelay+0x8>
    if (ticks != 0U) {
 800eade:	2800      	cmp	r0, #0
 800eae0:	d0f2      	beq.n	800eac8 <osDelay+0xc>
      vTaskDelay(ticks);
 800eae2:	f001 fe19 	bl	8010718 <vTaskDelay>
    stat = osOK;
 800eae6:	2000      	movs	r0, #0
 800eae8:	e7ee      	b.n	800eac8 <osDelay+0xc>
 800eaea:	bf00      	nop
 800eaec:	200128a4 	.word	0x200128a4

0800eaf0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800eaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaf2:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eaf4:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800eaf8:	b116      	cbz	r6, 800eb00 <osMutexNew+0x10>
  hMutex = NULL;
 800eafa:	2700      	movs	r7, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800eafc:	4638      	mov	r0, r7
 800eafe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb00:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ()) {
 800eb04:	b913      	cbnz	r3, 800eb0c <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eb06:	f3ef 8311 	mrs	r3, BASEPRI
 800eb0a:	b11b      	cbz	r3, 800eb14 <osMutexNew+0x24>
 800eb0c:	4b19      	ldr	r3, [pc, #100]	; (800eb74 <osMutexNew+0x84>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	2b02      	cmp	r3, #2
 800eb12:	d0f2      	beq.n	800eafa <osMutexNew+0xa>
    if (attr != NULL) {
 800eb14:	b324      	cbz	r4, 800eb60 <osMutexNew+0x70>
      type = attr->attr_bits;
 800eb16:	6865      	ldr	r5, [r4, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800eb18:	072b      	lsls	r3, r5, #28
 800eb1a:	d4ee      	bmi.n	800eafa <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800eb1c:	f005 0501 	and.w	r5, r5, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800eb20:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 800eb24:	b199      	cbz	r1, 800eb4e <osMutexNew+0x5e>
 800eb26:	2b4f      	cmp	r3, #79	; 0x4f
 800eb28:	d9e7      	bls.n	800eafa <osMutexNew+0xa>
        if (rmtx != 0U) {
 800eb2a:	b1bd      	cbz	r5, 800eb5c <osMutexNew+0x6c>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800eb2c:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800eb2e:	f000 ff75 	bl	800fa1c <xQueueCreateMutexStatic>
 800eb32:	4607      	mov	r7, r0
      if (hMutex != NULL) {
 800eb34:	2800      	cmp	r0, #0
 800eb36:	d0e0      	beq.n	800eafa <osMutexNew+0xa>
          name = attr->name;
 800eb38:	6824      	ldr	r4, [r4, #0]
 800eb3a:	462e      	mov	r6, r5
        vQueueAddToRegistry (hMutex, name);
 800eb3c:	4621      	mov	r1, r4
 800eb3e:	4638      	mov	r0, r7
 800eb40:	f001 fa86 	bl	8010050 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800eb44:	2e00      	cmp	r6, #0
 800eb46:	d0d9      	beq.n	800eafc <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800eb48:	f047 0701 	orr.w	r7, r7, #1
  return ((osMutexId_t)hMutex);
 800eb4c:	e7d6      	b.n	800eafc <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d1d3      	bne.n	800eafa <osMutexNew+0xa>
          if (rmtx != 0U) {
 800eb52:	b12d      	cbz	r5, 800eb60 <osMutexNew+0x70>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800eb54:	2004      	movs	r0, #4
 800eb56:	f000 ff96 	bl	800fa86 <xQueueCreateMutex>
 800eb5a:	e7ea      	b.n	800eb32 <osMutexNew+0x42>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800eb5c:	2001      	movs	r0, #1
 800eb5e:	e7e6      	b.n	800eb2e <osMutexNew+0x3e>
            hMutex = xSemaphoreCreateMutex ();
 800eb60:	2001      	movs	r0, #1
 800eb62:	f000 ff90 	bl	800fa86 <xQueueCreateMutex>
      if (hMutex != NULL) {
 800eb66:	4607      	mov	r7, r0
 800eb68:	2800      	cmp	r0, #0
 800eb6a:	d0c6      	beq.n	800eafa <osMutexNew+0xa>
        if (attr != NULL) {
 800eb6c:	2c00      	cmp	r4, #0
 800eb6e:	d0e5      	beq.n	800eb3c <osMutexNew+0x4c>
 800eb70:	2500      	movs	r5, #0
 800eb72:	e7e1      	b.n	800eb38 <osMutexNew+0x48>
 800eb74:	200128a4 	.word	0x200128a4

0800eb78 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800eb78:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800eb7a:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800eb7e:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800eb80:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800eb84:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb86:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800eb8a:	b112      	cbz	r2, 800eb92 <osMutexAcquire+0x1a>
    stat = osErrorISR;
 800eb8c:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800eb90:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb92:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800eb96:	b912      	cbnz	r2, 800eb9e <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eb98:	f3ef 8211 	mrs	r2, BASEPRI
 800eb9c:	b11a      	cbz	r2, 800eba6 <osMutexAcquire+0x2e>
 800eb9e:	4a0d      	ldr	r2, [pc, #52]	; (800ebd4 <osMutexAcquire+0x5c>)
 800eba0:	6812      	ldr	r2, [r2, #0]
 800eba2:	2a02      	cmp	r2, #2
 800eba4:	d0f2      	beq.n	800eb8c <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 800eba6:	b188      	cbz	r0, 800ebcc <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800eba8:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 800ebaa:	b163      	cbz	r3, 800ebc6 <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ebac:	f001 f9bd 	bl	800ff2a <xQueueTakeMutexRecursive>
 800ebb0:	2801      	cmp	r0, #1
 800ebb2:	d101      	bne.n	800ebb8 <osMutexAcquire+0x40>
  stat = osOK;
 800ebb4:	2000      	movs	r0, #0
 800ebb6:	e7eb      	b.n	800eb90 <osMutexAcquire+0x18>
          stat = osErrorResource;
 800ebb8:	2c00      	cmp	r4, #0
 800ebba:	bf14      	ite	ne
 800ebbc:	f06f 0001 	mvnne.w	r0, #1
 800ebc0:	f06f 0002 	mvneq.w	r0, #2
 800ebc4:	e7e4      	b.n	800eb90 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ebc6:	f001 f8e5 	bl	800fd94 <xQueueSemaphoreTake>
 800ebca:	e7f1      	b.n	800ebb0 <osMutexAcquire+0x38>
    stat = osErrorParameter;
 800ebcc:	f06f 0003 	mvn.w	r0, #3
 800ebd0:	e7de      	b.n	800eb90 <osMutexAcquire+0x18>
 800ebd2:	bf00      	nop
 800ebd4:	200128a4 	.word	0x200128a4

0800ebd8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ebd8:	b508      	push	{r3, lr}
 800ebda:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ebdc:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800ebe0:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ebe4:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800ebe8:	b112      	cbz	r2, 800ebf0 <osMutexRelease+0x18>
    stat = osErrorISR;
 800ebea:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800ebee:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebf0:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800ebf4:	b912      	cbnz	r2, 800ebfc <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ebf6:	f3ef 8211 	mrs	r2, BASEPRI
 800ebfa:	b11a      	cbz	r2, 800ec04 <osMutexRelease+0x2c>
 800ebfc:	4a0a      	ldr	r2, [pc, #40]	; (800ec28 <osMutexRelease+0x50>)
 800ebfe:	6812      	ldr	r2, [r2, #0]
 800ec00:	2a02      	cmp	r2, #2
 800ec02:	d0f2      	beq.n	800ebea <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 800ec04:	b168      	cbz	r0, 800ec22 <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 800ec06:	b13b      	cbz	r3, 800ec18 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ec08:	f000 ff1d 	bl	800fa46 <xQueueGiveMutexRecursive>
 800ec0c:	2801      	cmp	r0, #1
  stat = osOK;
 800ec0e:	bf0c      	ite	eq
 800ec10:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800ec12:	f06f 0002 	mvnne.w	r0, #2
 800ec16:	e7ea      	b.n	800ebee <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ec18:	461a      	mov	r2, r3
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	f000 fe43 	bl	800f8a6 <xQueueGenericSend>
 800ec20:	e7f4      	b.n	800ec0c <osMutexRelease+0x34>
    stat = osErrorParameter;
 800ec22:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800ec26:	e7e2      	b.n	800ebee <osMutexRelease+0x16>
 800ec28:	200128a4 	.word	0x200128a4

0800ec2c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ec2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ec2e:	460e      	mov	r6, r1
 800ec30:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec32:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ec36:	b11b      	cbz	r3, 800ec40 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 800ec38:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	b002      	add	sp, #8
 800ec3e:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec40:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ec44:	b913      	cbnz	r3, 800ec4c <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ec46:	f3ef 8311 	mrs	r3, BASEPRI
 800ec4a:	b11b      	cbz	r3, 800ec54 <osSemaphoreNew+0x28>
 800ec4c:	4b21      	ldr	r3, [pc, #132]	; (800ecd4 <osSemaphoreNew+0xa8>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	2b02      	cmp	r3, #2
 800ec52:	d0f1      	beq.n	800ec38 <osSemaphoreNew+0xc>
 800ec54:	2800      	cmp	r0, #0
 800ec56:	d0ef      	beq.n	800ec38 <osSemaphoreNew+0xc>
 800ec58:	42b0      	cmp	r0, r6
 800ec5a:	d3ed      	bcc.n	800ec38 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 800ec5c:	b1ed      	cbz	r5, 800ec9a <osSemaphoreNew+0x6e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ec5e:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800ec62:	b1c3      	cbz	r3, 800ec96 <osSemaphoreNew+0x6a>
 800ec64:	2a4f      	cmp	r2, #79	; 0x4f
 800ec66:	d9e7      	bls.n	800ec38 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800ec68:	2801      	cmp	r0, #1
 800ec6a:	d129      	bne.n	800ecc0 <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ec6c:	2203      	movs	r2, #3
 800ec6e:	9200      	str	r2, [sp, #0]
 800ec70:	2200      	movs	r2, #0
 800ec72:	4611      	mov	r1, r2
 800ec74:	f000 fd92 	bl	800f79c <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 800ec78:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ec7a:	2800      	cmp	r0, #0
 800ec7c:	d0dc      	beq.n	800ec38 <osSemaphoreNew+0xc>
 800ec7e:	b1ce      	cbz	r6, 800ecb4 <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ec80:	2300      	movs	r3, #0
 800ec82:	461a      	mov	r2, r3
 800ec84:	4619      	mov	r1, r3
 800ec86:	f000 fe0e 	bl	800f8a6 <xQueueGenericSend>
 800ec8a:	2801      	cmp	r0, #1
 800ec8c:	d012      	beq.n	800ecb4 <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 800ec8e:	4620      	mov	r0, r4
 800ec90:	f001 fa04 	bl	801009c <vQueueDelete>
 800ec94:	e7d0      	b.n	800ec38 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ec96:	2a00      	cmp	r2, #0
 800ec98:	d1ce      	bne.n	800ec38 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800ec9a:	2801      	cmp	r0, #1
 800ec9c:	d104      	bne.n	800eca8 <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 800ec9e:	2203      	movs	r2, #3
 800eca0:	2100      	movs	r1, #0
 800eca2:	f000 fd8f 	bl	800f7c4 <xQueueGenericCreate>
 800eca6:	e7e7      	b.n	800ec78 <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800eca8:	4631      	mov	r1, r6
 800ecaa:	f000 fdda 	bl	800f862 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800ecae:	4604      	mov	r4, r0
 800ecb0:	2800      	cmp	r0, #0
 800ecb2:	d0c1      	beq.n	800ec38 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 800ecb4:	b95d      	cbnz	r5, 800ecce <osSemaphoreNew+0xa2>
        vQueueAddToRegistry (hSemaphore, name);
 800ecb6:	4629      	mov	r1, r5
 800ecb8:	4620      	mov	r0, r4
 800ecba:	f001 f9c9 	bl	8010050 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800ecbe:	e7bc      	b.n	800ec3a <osSemaphoreNew+0xe>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ecc0:	461a      	mov	r2, r3
 800ecc2:	4631      	mov	r1, r6
 800ecc4:	f000 fda7 	bl	800f816 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800ecc8:	4604      	mov	r4, r0
 800ecca:	2800      	cmp	r0, #0
 800eccc:	d0b4      	beq.n	800ec38 <osSemaphoreNew+0xc>
          name = attr->name;
 800ecce:	682d      	ldr	r5, [r5, #0]
 800ecd0:	e7f1      	b.n	800ecb6 <osSemaphoreNew+0x8a>
 800ecd2:	bf00      	nop
 800ecd4:	200128a4 	.word	0x200128a4

0800ecd8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ecd8:	b513      	push	{r0, r1, r4, lr}
 800ecda:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800ecdc:	b918      	cbnz	r0, 800ece6 <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 800ecde:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800ece2:	b002      	add	sp, #8
 800ece4:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ece6:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 800ecea:	b163      	cbz	r3, 800ed06 <osSemaphoreAcquire+0x2e>
    if (timeout != 0U) {
 800ecec:	2c00      	cmp	r4, #0
 800ecee:	d1f6      	bne.n	800ecde <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ecf0:	aa01      	add	r2, sp, #4
 800ecf2:	4621      	mov	r1, r4
      yield = pdFALSE;
 800ecf4:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ecf6:	f001 f93c 	bl	800ff72 <xQueueReceiveFromISR>
 800ecfa:	2801      	cmp	r0, #1
 800ecfc:	d113      	bne.n	800ed26 <osSemaphoreAcquire+0x4e>
        portYIELD_FROM_ISR (yield);
 800ecfe:	9b01      	ldr	r3, [sp, #4]
 800ed00:	b9a3      	cbnz	r3, 800ed2c <osSemaphoreAcquire+0x54>
  stat = osOK;
 800ed02:	2000      	movs	r0, #0
 800ed04:	e7ed      	b.n	800ece2 <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed06:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800ed0a:	b913      	cbnz	r3, 800ed12 <osSemaphoreAcquire+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ed0c:	f3ef 8311 	mrs	r3, BASEPRI
 800ed10:	b11b      	cbz	r3, 800ed1a <osSemaphoreAcquire+0x42>
 800ed12:	4b0d      	ldr	r3, [pc, #52]	; (800ed48 <osSemaphoreAcquire+0x70>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	2b02      	cmp	r3, #2
 800ed18:	d0e8      	beq.n	800ecec <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ed1a:	4621      	mov	r1, r4
 800ed1c:	f001 f83a 	bl	800fd94 <xQueueSemaphoreTake>
 800ed20:	2801      	cmp	r0, #1
 800ed22:	d0ee      	beq.n	800ed02 <osSemaphoreAcquire+0x2a>
      if (timeout != 0U) {
 800ed24:	b96c      	cbnz	r4, 800ed42 <osSemaphoreAcquire+0x6a>
        stat = osErrorResource;
 800ed26:	f06f 0002 	mvn.w	r0, #2
 800ed2a:	e7da      	b.n	800ece2 <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 800ed2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ed30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed34:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ed38:	f3bf 8f4f 	dsb	sy
 800ed3c:	f3bf 8f6f 	isb	sy
 800ed40:	e7df      	b.n	800ed02 <osSemaphoreAcquire+0x2a>
        stat = osErrorTimeout;
 800ed42:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800ed46:	e7cc      	b.n	800ece2 <osSemaphoreAcquire+0xa>
 800ed48:	200128a4 	.word	0x200128a4

0800ed4c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ed4c:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800ed4e:	b370      	cbz	r0, 800edae <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed50:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800ed54:	b14b      	cbz	r3, 800ed6a <osSemaphoreRelease+0x1e>
    yield = pdFALSE;
 800ed56:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ed58:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800ed5a:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ed5c:	f000 ff19 	bl	800fb92 <xQueueGiveFromISR>
 800ed60:	2801      	cmp	r0, #1
 800ed62:	d014      	beq.n	800ed8e <osSemaphoreRelease+0x42>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800ed64:	f06f 0002 	mvn.w	r0, #2
 800ed68:	e014      	b.n	800ed94 <osSemaphoreRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed6a:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800ed6e:	b913      	cbnz	r3, 800ed76 <osSemaphoreRelease+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ed70:	f3ef 8311 	mrs	r3, BASEPRI
 800ed74:	b11b      	cbz	r3, 800ed7e <osSemaphoreRelease+0x32>
 800ed76:	4b0f      	ldr	r3, [pc, #60]	; (800edb4 <osSemaphoreRelease+0x68>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	2b02      	cmp	r3, #2
 800ed7c:	d0eb      	beq.n	800ed56 <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ed7e:	2300      	movs	r3, #0
 800ed80:	461a      	mov	r2, r3
 800ed82:	4619      	mov	r1, r3
 800ed84:	f000 fd8f 	bl	800f8a6 <xQueueGenericSend>
 800ed88:	2801      	cmp	r0, #1
 800ed8a:	d002      	beq.n	800ed92 <osSemaphoreRelease+0x46>
 800ed8c:	e7ea      	b.n	800ed64 <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 800ed8e:	9b01      	ldr	r3, [sp, #4]
 800ed90:	b913      	cbnz	r3, 800ed98 <osSemaphoreRelease+0x4c>
  stat = osOK;
 800ed92:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 800ed94:	b002      	add	sp, #8
 800ed96:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800ed98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ed9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eda0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800eda4:	f3bf 8f4f 	dsb	sy
 800eda8:	f3bf 8f6f 	isb	sy
 800edac:	e7f1      	b.n	800ed92 <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 800edae:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800edb2:	e7ef      	b.n	800ed94 <osSemaphoreRelease+0x48>
 800edb4:	200128a4 	.word	0x200128a4

0800edb8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800edb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800edba:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800edbc:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800edc0:	b11b      	cbz	r3, 800edca <osMessageQueueNew+0x12>
  hQueue = NULL;
 800edc2:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800edc4:	4628      	mov	r0, r5
 800edc6:	b002      	add	sp, #8
 800edc8:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800edca:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800edce:	b913      	cbnz	r3, 800edd6 <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800edd0:	f3ef 8311 	mrs	r3, BASEPRI
 800edd4:	b11b      	cbz	r3, 800edde <osMessageQueueNew+0x26>
 800edd6:	4b1a      	ldr	r3, [pc, #104]	; (800ee40 <osMessageQueueNew+0x88>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	2b02      	cmp	r3, #2
 800eddc:	d0f1      	beq.n	800edc2 <osMessageQueueNew+0xa>
 800edde:	2800      	cmp	r0, #0
 800ede0:	d0ef      	beq.n	800edc2 <osMessageQueueNew+0xa>
 800ede2:	2900      	cmp	r1, #0
 800ede4:	d0ed      	beq.n	800edc2 <osMessageQueueNew+0xa>
    if (attr != NULL) {
 800ede6:	b1ec      	cbz	r4, 800ee24 <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ede8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800edec:	b193      	cbz	r3, 800ee14 <osMessageQueueNew+0x5c>
 800edee:	2a4f      	cmp	r2, #79	; 0x4f
 800edf0:	d9e7      	bls.n	800edc2 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800edf2:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800edf4:	2a00      	cmp	r2, #0
 800edf6:	d0e4      	beq.n	800edc2 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800edf8:	fb01 f500 	mul.w	r5, r1, r0
 800edfc:	6966      	ldr	r6, [r4, #20]
 800edfe:	42ae      	cmp	r6, r5
 800ee00:	d3df      	bcc.n	800edc2 <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ee02:	2500      	movs	r5, #0
 800ee04:	9500      	str	r5, [sp, #0]
 800ee06:	f000 fcc9 	bl	800f79c <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800ee0a:	4605      	mov	r5, r0
 800ee0c:	2800      	cmp	r0, #0
 800ee0e:	d0d8      	beq.n	800edc2 <osMessageQueueNew+0xa>
        name = attr->name;
 800ee10:	6824      	ldr	r4, [r4, #0]
 800ee12:	e00f      	b.n	800ee34 <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ee14:	2a00      	cmp	r2, #0
 800ee16:	d1d4      	bne.n	800edc2 <osMessageQueueNew+0xa>
 800ee18:	6923      	ldr	r3, [r4, #16]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d1d1      	bne.n	800edc2 <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ee1e:	6963      	ldr	r3, [r4, #20]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d1ce      	bne.n	800edc2 <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 800ee24:	2200      	movs	r2, #0
 800ee26:	f000 fccd 	bl	800f7c4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800ee2a:	4605      	mov	r5, r0
 800ee2c:	2800      	cmp	r0, #0
 800ee2e:	d0c8      	beq.n	800edc2 <osMessageQueueNew+0xa>
      if (attr != NULL) {
 800ee30:	2c00      	cmp	r4, #0
 800ee32:	d1ed      	bne.n	800ee10 <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 800ee34:	4621      	mov	r1, r4
 800ee36:	4628      	mov	r0, r5
 800ee38:	f001 f90a 	bl	8010050 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800ee3c:	e7c2      	b.n	800edc4 <osMessageQueueNew+0xc>
 800ee3e:	bf00      	nop
 800ee40:	200128a4 	.word	0x200128a4

0800ee44 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ee44:	b513      	push	{r0, r1, r4, lr}
 800ee46:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee48:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800ee4c:	b123      	cbz	r3, 800ee58 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ee4e:	b9d8      	cbnz	r0, 800ee88 <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 800ee50:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800ee54:	b002      	add	sp, #8
 800ee56:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee58:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800ee5c:	b913      	cbnz	r3, 800ee64 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ee5e:	f3ef 8311 	mrs	r3, BASEPRI
 800ee62:	b11b      	cbz	r3, 800ee6c <osMessageQueuePut+0x28>
 800ee64:	4b17      	ldr	r3, [pc, #92]	; (800eec4 <osMessageQueuePut+0x80>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	2b02      	cmp	r3, #2
 800ee6a:	d0f0      	beq.n	800ee4e <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	d0ef      	beq.n	800ee50 <osMessageQueuePut+0xc>
 800ee70:	2900      	cmp	r1, #0
 800ee72:	d0ed      	beq.n	800ee50 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ee74:	2300      	movs	r3, #0
 800ee76:	4622      	mov	r2, r4
 800ee78:	f000 fd15 	bl	800f8a6 <xQueueGenericSend>
 800ee7c:	2801      	cmp	r0, #1
 800ee7e:	d010      	beq.n	800eea2 <osMessageQueuePut+0x5e>
        if (timeout != 0U) {
 800ee80:	b9e4      	cbnz	r4, 800eebc <osMessageQueuePut+0x78>
          stat = osErrorResource;
 800ee82:	f06f 0002 	mvn.w	r0, #2
 800ee86:	e7e5      	b.n	800ee54 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ee88:	2900      	cmp	r1, #0
 800ee8a:	d0e1      	beq.n	800ee50 <osMessageQueuePut+0xc>
 800ee8c:	2c00      	cmp	r4, #0
 800ee8e:	d1df      	bne.n	800ee50 <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ee90:	4623      	mov	r3, r4
 800ee92:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800ee94:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ee96:	f000 fe13 	bl	800fac0 <xQueueGenericSendFromISR>
 800ee9a:	2801      	cmp	r0, #1
 800ee9c:	d1f1      	bne.n	800ee82 <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 800ee9e:	9b01      	ldr	r3, [sp, #4]
 800eea0:	b90b      	cbnz	r3, 800eea6 <osMessageQueuePut+0x62>
  stat = osOK;
 800eea2:	2000      	movs	r0, #0
 800eea4:	e7d6      	b.n	800ee54 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 800eea6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800eeaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eeae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800eeb2:	f3bf 8f4f 	dsb	sy
 800eeb6:	f3bf 8f6f 	isb	sy
 800eeba:	e7f2      	b.n	800eea2 <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 800eebc:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800eec0:	e7c8      	b.n	800ee54 <osMessageQueuePut+0x10>
 800eec2:	bf00      	nop
 800eec4:	200128a4 	.word	0x200128a4

0800eec8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800eec8:	b513      	push	{r0, r1, r4, lr}
 800eeca:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eecc:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800eed0:	b123      	cbz	r3, 800eedc <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eed2:	b9d0      	cbnz	r0, 800ef0a <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 800eed4:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800eed8:	b002      	add	sp, #8
 800eeda:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eedc:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800eee0:	b913      	cbnz	r3, 800eee8 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eee2:	f3ef 8311 	mrs	r3, BASEPRI
 800eee6:	b11b      	cbz	r3, 800eef0 <osMessageQueueGet+0x28>
 800eee8:	4b16      	ldr	r3, [pc, #88]	; (800ef44 <osMessageQueueGet+0x7c>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	2b02      	cmp	r3, #2
 800eeee:	d0f0      	beq.n	800eed2 <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800eef0:	2800      	cmp	r0, #0
 800eef2:	d0ef      	beq.n	800eed4 <osMessageQueueGet+0xc>
 800eef4:	2900      	cmp	r1, #0
 800eef6:	d0ed      	beq.n	800eed4 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800eef8:	4622      	mov	r2, r4
 800eefa:	f000 fea6 	bl	800fc4a <xQueueReceive>
 800eefe:	2801      	cmp	r0, #1
 800ef00:	d00f      	beq.n	800ef22 <osMessageQueueGet+0x5a>
        if (timeout != 0U) {
 800ef02:	b9dc      	cbnz	r4, 800ef3c <osMessageQueueGet+0x74>
          stat = osErrorResource;
 800ef04:	f06f 0002 	mvn.w	r0, #2
 800ef08:	e7e6      	b.n	800eed8 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ef0a:	2900      	cmp	r1, #0
 800ef0c:	d0e2      	beq.n	800eed4 <osMessageQueueGet+0xc>
 800ef0e:	2c00      	cmp	r4, #0
 800ef10:	d1e0      	bne.n	800eed4 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ef12:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800ef14:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ef16:	f001 f82c 	bl	800ff72 <xQueueReceiveFromISR>
 800ef1a:	2801      	cmp	r0, #1
 800ef1c:	d1f2      	bne.n	800ef04 <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 800ef1e:	9b01      	ldr	r3, [sp, #4]
 800ef20:	b90b      	cbnz	r3, 800ef26 <osMessageQueueGet+0x5e>
  stat = osOK;
 800ef22:	2000      	movs	r0, #0
 800ef24:	e7d8      	b.n	800eed8 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 800ef26:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ef2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef2e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ef32:	f3bf 8f4f 	dsb	sy
 800ef36:	f3bf 8f6f 	isb	sy
 800ef3a:	e7f2      	b.n	800ef22 <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 800ef3c:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800ef40:	e7ca      	b.n	800eed8 <osMessageQueueGet+0x10>
 800ef42:	bf00      	nop
 800ef44:	200128a4 	.word	0x200128a4

0800ef48 <osMessageQueueGetSpace>:
uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800ef48:	b300      	cbz	r0, 800ef8c <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef4a:	f3ef 8305 	mrs	r3, IPSR
    space = 0U;
  }
  else if (IS_IRQ()) {
 800ef4e:	b18b      	cbz	r3, 800ef74 <osMessageQueueGetSpace+0x2c>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ef50:	f3ef 8311 	mrs	r3, BASEPRI
 800ef54:	f04f 0250 	mov.w	r2, #80	; 0x50
 800ef58:	b672      	cpsid	i
 800ef5a:	f382 8811 	msr	BASEPRI, r2
 800ef5e:	f3bf 8f6f 	isb	sy
 800ef62:	f3bf 8f4f 	dsb	sy
 800ef66:	b662      	cpsie	i
    isrm = taskENTER_CRITICAL_FROM_ISR();

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800ef68:	e9d0 020e 	ldrd	r0, r2, [r0, #56]	; 0x38
 800ef6c:	1a10      	subs	r0, r2, r0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ef6e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ef72:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef74:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800ef78:	b913      	cbnz	r3, 800ef80 <osMessageQueueGetSpace+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ef7a:	f3ef 8311 	mrs	r3, BASEPRI
 800ef7e:	b11b      	cbz	r3, 800ef88 <osMessageQueueGetSpace+0x40>
 800ef80:	4b03      	ldr	r3, [pc, #12]	; (800ef90 <osMessageQueueGetSpace+0x48>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	2b02      	cmp	r3, #2
 800ef86:	d0e3      	beq.n	800ef50 <osMessageQueueGetSpace+0x8>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800ef88:	f001 b848 	b.w	801001c <uxQueueSpacesAvailable>
  }

  return (space);
}
 800ef8c:	4770      	bx	lr
 800ef8e:	bf00      	nop
 800ef90:	200128a4 	.word	0x200128a4

0800ef94 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ef94:	4b03      	ldr	r3, [pc, #12]	; (800efa4 <vApplicationGetIdleTaskMemory+0x10>)
 800ef96:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ef98:	4b03      	ldr	r3, [pc, #12]	; (800efa8 <vApplicationGetIdleTaskMemory+0x14>)
 800ef9a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ef9c:	2380      	movs	r3, #128	; 0x80
 800ef9e:	6013      	str	r3, [r2, #0]
}
 800efa0:	4770      	bx	lr
 800efa2:	bf00      	nop
 800efa4:	200127f8 	.word	0x200127f8
 800efa8:	200125f8 	.word	0x200125f8

0800efac <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800efac:	4b03      	ldr	r3, [pc, #12]	; (800efbc <vApplicationGetTimerTaskMemory+0x10>)
 800efae:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800efb0:	4b03      	ldr	r3, [pc, #12]	; (800efc0 <vApplicationGetTimerTaskMemory+0x14>)
 800efb2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800efb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800efb8:	6013      	str	r3, [r2, #0]
}
 800efba:	4770      	bx	lr
 800efbc:	20012ca8 	.word	0x20012ca8
 800efc0:	200128a8 	.word	0x200128a8

0800efc4 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800efc4:	4b10      	ldr	r3, [pc, #64]	; (800f008 <prvInsertBlockIntoFreeList+0x44>)
{
 800efc6:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800efc8:	461a      	mov	r2, r3
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	4283      	cmp	r3, r0
 800efce:	d3fb      	bcc.n	800efc8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800efd0:	6854      	ldr	r4, [r2, #4]
 800efd2:	1911      	adds	r1, r2, r4
 800efd4:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800efd6:	bf01      	itttt	eq
 800efd8:	6841      	ldreq	r1, [r0, #4]
 800efda:	4610      	moveq	r0, r2
 800efdc:	1909      	addeq	r1, r1, r4
 800efde:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800efe0:	6844      	ldr	r4, [r0, #4]
 800efe2:	1901      	adds	r1, r0, r4
 800efe4:	428b      	cmp	r3, r1
 800efe6:	d10c      	bne.n	800f002 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800efe8:	4908      	ldr	r1, [pc, #32]	; (800f00c <prvInsertBlockIntoFreeList+0x48>)
 800efea:	6809      	ldr	r1, [r1, #0]
 800efec:	428b      	cmp	r3, r1
 800efee:	d003      	beq.n	800eff8 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eff0:	6859      	ldr	r1, [r3, #4]
 800eff2:	4421      	add	r1, r4
 800eff4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eff6:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eff8:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800effa:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800effc:	bf18      	it	ne
 800effe:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f000:	bd10      	pop	{r4, pc}
 800f002:	4619      	mov	r1, r3
 800f004:	e7f8      	b.n	800eff8 <prvInsertBlockIntoFreeList+0x34>
 800f006:	bf00      	nop
 800f008:	200265e4 	.word	0x200265e4
 800f00c:	20012d54 	.word	0x20012d54

0800f010 <pvPortMalloc>:
{
 800f010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f014:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800f016:	f001 fa63 	bl	80104e0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f01a:	4940      	ldr	r1, [pc, #256]	; (800f11c <pvPortMalloc+0x10c>)
 800f01c:	4d40      	ldr	r5, [pc, #256]	; (800f120 <pvPortMalloc+0x110>)
 800f01e:	680b      	ldr	r3, [r1, #0]
 800f020:	b9f3      	cbnz	r3, 800f060 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800f022:	4a40      	ldr	r2, [pc, #256]	; (800f124 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800f024:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f026:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f028:	4e3f      	ldr	r6, [pc, #252]	; (800f128 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f02a:	bf1b      	ittet	ne
 800f02c:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f02e:	4b3f      	ldrne	r3, [pc, #252]	; (800f12c <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f030:	4b3f      	ldreq	r3, [pc, #252]	; (800f130 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f032:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800f036:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f038:	bf18      	it	ne
 800f03a:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f03c:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f03e:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800f040:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f042:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800f046:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f04a:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800f04c:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f04e:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f052:	4b38      	ldr	r3, [pc, #224]	; (800f134 <pvPortMalloc+0x124>)
 800f054:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f056:	4b38      	ldr	r3, [pc, #224]	; (800f138 <pvPortMalloc+0x128>)
 800f058:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f05a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f05e:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f060:	682e      	ldr	r6, [r5, #0]
 800f062:	4226      	tst	r6, r4
 800f064:	d154      	bne.n	800f110 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 800f066:	2c00      	cmp	r4, #0
 800f068:	d043      	beq.n	800f0f2 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 800f06a:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f06e:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f070:	bf1c      	itt	ne
 800f072:	f023 0307 	bicne.w	r3, r3, #7
 800f076:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d049      	beq.n	800f110 <pvPortMalloc+0x100>
 800f07c:	4f2e      	ldr	r7, [pc, #184]	; (800f138 <pvPortMalloc+0x128>)
 800f07e:	683c      	ldr	r4, [r7, #0]
 800f080:	429c      	cmp	r4, r3
 800f082:	d345      	bcc.n	800f110 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 800f084:	4a28      	ldr	r2, [pc, #160]	; (800f128 <pvPortMalloc+0x118>)
 800f086:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f088:	6868      	ldr	r0, [r5, #4]
 800f08a:	4298      	cmp	r0, r3
 800f08c:	d204      	bcs.n	800f098 <pvPortMalloc+0x88>
 800f08e:	f8d5 c000 	ldr.w	ip, [r5]
 800f092:	f1bc 0f00 	cmp.w	ip, #0
 800f096:	d117      	bne.n	800f0c8 <pvPortMalloc+0xb8>
				if( pxBlock != pxEnd )
 800f098:	6809      	ldr	r1, [r1, #0]
 800f09a:	42a9      	cmp	r1, r5
 800f09c:	d038      	beq.n	800f110 <pvPortMalloc+0x100>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f09e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f0a0:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f0a4:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f0a6:	1ac2      	subs	r2, r0, r3
 800f0a8:	2a10      	cmp	r2, #16
 800f0aa:	d914      	bls.n	800f0d6 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f0ac:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f0ae:	0741      	lsls	r1, r0, #29
 800f0b0:	d00d      	beq.n	800f0ce <pvPortMalloc+0xbe>
	__asm volatile
 800f0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0b6:	b672      	cpsid	i
 800f0b8:	f383 8811 	msr	BASEPRI, r3
 800f0bc:	f3bf 8f6f 	isb	sy
 800f0c0:	f3bf 8f4f 	dsb	sy
 800f0c4:	b662      	cpsie	i
 800f0c6:	e7fe      	b.n	800f0c6 <pvPortMalloc+0xb6>
 800f0c8:	462a      	mov	r2, r5
 800f0ca:	4665      	mov	r5, ip
 800f0cc:	e7dc      	b.n	800f088 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f0ce:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f0d0:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f0d2:	f7ff ff77 	bl	800efc4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f0d6:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f0d8:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f0da:	4916      	ldr	r1, [pc, #88]	; (800f134 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f0dc:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f0de:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f0e0:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f0e2:	603c      	str	r4, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f0e4:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f0e6:	606e      	str	r6, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f0e8:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f0ea:	bf38      	it	cc
 800f0ec:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f0ee:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 800f0f2:	f001 fa9b 	bl	801062c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f0f6:	0763      	lsls	r3, r4, #29
 800f0f8:	d00c      	beq.n	800f114 <pvPortMalloc+0x104>
 800f0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0fe:	b672      	cpsid	i
 800f100:	f383 8811 	msr	BASEPRI, r3
 800f104:	f3bf 8f6f 	isb	sy
 800f108:	f3bf 8f4f 	dsb	sy
 800f10c:	b662      	cpsie	i
 800f10e:	e7fe      	b.n	800f10e <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 800f110:	2400      	movs	r4, #0
 800f112:	e7ee      	b.n	800f0f2 <pvPortMalloc+0xe2>
}
 800f114:	4620      	mov	r0, r4
 800f116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f11a:	bf00      	nop
 800f11c:	20012d54 	.word	0x20012d54
 800f120:	200265d8 	.word	0x200265d8
 800f124:	20012d58 	.word	0x20012d58
 800f128:	200265e4 	.word	0x200265e4
 800f12c:	200265d8 	.word	0x200265d8
 800f130:	00013880 	.word	0x00013880
 800f134:	200265e0 	.word	0x200265e0
 800f138:	200265dc 	.word	0x200265dc

0800f13c <vPortFree>:
{
 800f13c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800f13e:	4604      	mov	r4, r0
 800f140:	2800      	cmp	r0, #0
 800f142:	d032      	beq.n	800f1aa <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f144:	4a19      	ldr	r2, [pc, #100]	; (800f1ac <vPortFree+0x70>)
 800f146:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f14a:	6812      	ldr	r2, [r2, #0]
 800f14c:	4213      	tst	r3, r2
 800f14e:	d10a      	bne.n	800f166 <vPortFree+0x2a>
 800f150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f154:	b672      	cpsid	i
 800f156:	f383 8811 	msr	BASEPRI, r3
 800f15a:	f3bf 8f6f 	isb	sy
 800f15e:	f3bf 8f4f 	dsb	sy
 800f162:	b662      	cpsie	i
 800f164:	e7fe      	b.n	800f164 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f166:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800f16a:	b151      	cbz	r1, 800f182 <vPortFree+0x46>
 800f16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f170:	b672      	cpsid	i
 800f172:	f383 8811 	msr	BASEPRI, r3
 800f176:	f3bf 8f6f 	isb	sy
 800f17a:	f3bf 8f4f 	dsb	sy
 800f17e:	b662      	cpsie	i
 800f180:	e7fe      	b.n	800f180 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f182:	ea23 0302 	bic.w	r3, r3, r2
 800f186:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800f18a:	f001 f9a9 	bl	80104e0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f18e:	4a08      	ldr	r2, [pc, #32]	; (800f1b0 <vPortFree+0x74>)
 800f190:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f194:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f198:	6811      	ldr	r1, [r2, #0]
 800f19a:	440b      	add	r3, r1
 800f19c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f19e:	f7ff ff11 	bl	800efc4 <prvInsertBlockIntoFreeList>
}
 800f1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800f1a6:	f001 ba41 	b.w	801062c <xTaskResumeAll>
}
 800f1aa:	bd10      	pop	{r4, pc}
 800f1ac:	200265d8 	.word	0x200265d8
 800f1b0:	200265dc 	.word	0x200265dc

0800f1b4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f1b4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f1b8:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f1bc:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f1be:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f1c0:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f1c8:	4770      	bx	lr

0800f1ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f1ce:	4770      	bx	lr

0800f1d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800f1d0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f1d2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800f1d4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f1d6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f1d8:	689a      	ldr	r2, [r3, #8]
 800f1da:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f1dc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800f1de:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800f1e0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	6003      	str	r3, [r0, #0]
}
 800f1e6:	4770      	bx	lr

0800f1e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f1e8:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f1ea:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f1ec:	1c63      	adds	r3, r4, #1
 800f1ee:	d10a      	bne.n	800f206 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f1f0:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f1f2:	685a      	ldr	r2, [r3, #4]
 800f1f4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f1f6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f1f8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800f1fa:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800f1fc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800f1fe:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800f200:	3301      	adds	r3, #1
 800f202:	6003      	str	r3, [r0, #0]
}
 800f204:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f206:	f100 0208 	add.w	r2, r0, #8
 800f20a:	4613      	mov	r3, r2
 800f20c:	6852      	ldr	r2, [r2, #4]
 800f20e:	6815      	ldr	r5, [r2, #0]
 800f210:	42a5      	cmp	r5, r4
 800f212:	d9fa      	bls.n	800f20a <vListInsert+0x22>
 800f214:	e7ed      	b.n	800f1f2 <vListInsert+0xa>

0800f216 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f216:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f218:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800f21c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f21e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f220:	6859      	ldr	r1, [r3, #4]
 800f222:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f224:	bf08      	it	eq
 800f226:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f228:	2200      	movs	r2, #0
 800f22a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800f22c:	681a      	ldr	r2, [r3, #0]
 800f22e:	3a01      	subs	r2, #1
 800f230:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f232:	6818      	ldr	r0, [r3, #0]
}
 800f234:	4770      	bx	lr
	...

0800f238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f238:	4808      	ldr	r0, [pc, #32]	; (800f25c <prvPortStartFirstTask+0x24>)
 800f23a:	6800      	ldr	r0, [r0, #0]
 800f23c:	6800      	ldr	r0, [r0, #0]
 800f23e:	f380 8808 	msr	MSP, r0
 800f242:	f04f 0000 	mov.w	r0, #0
 800f246:	f380 8814 	msr	CONTROL, r0
 800f24a:	b662      	cpsie	i
 800f24c:	b661      	cpsie	f
 800f24e:	f3bf 8f4f 	dsb	sy
 800f252:	f3bf 8f6f 	isb	sy
 800f256:	df00      	svc	0
 800f258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f25a:	0000      	.short	0x0000
 800f25c:	e000ed08 	.word	0xe000ed08

0800f260 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f260:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f270 <vPortEnableVFP+0x10>
 800f264:	6801      	ldr	r1, [r0, #0]
 800f266:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f26a:	6001      	str	r1, [r0, #0]
 800f26c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f26e:	0000      	.short	0x0000
 800f270:	e000ed88 	.word	0xe000ed88

0800f274 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800f274:	2300      	movs	r3, #0
{
 800f276:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800f278:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800f27a:	4b0f      	ldr	r3, [pc, #60]	; (800f2b8 <prvTaskExitError+0x44>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	3301      	adds	r3, #1
 800f280:	d00a      	beq.n	800f298 <prvTaskExitError+0x24>
 800f282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f286:	b672      	cpsid	i
 800f288:	f383 8811 	msr	BASEPRI, r3
 800f28c:	f3bf 8f6f 	isb	sy
 800f290:	f3bf 8f4f 	dsb	sy
 800f294:	b662      	cpsie	i
 800f296:	e7fe      	b.n	800f296 <prvTaskExitError+0x22>
 800f298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f29c:	b672      	cpsid	i
 800f29e:	f383 8811 	msr	BASEPRI, r3
 800f2a2:	f3bf 8f6f 	isb	sy
 800f2a6:	f3bf 8f4f 	dsb	sy
 800f2aa:	b662      	cpsie	i
	while( ulDummy == 0 )
 800f2ac:	9b01      	ldr	r3, [sp, #4]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d0fc      	beq.n	800f2ac <prvTaskExitError+0x38>
}
 800f2b2:	b002      	add	sp, #8
 800f2b4:	4770      	bx	lr
 800f2b6:	bf00      	nop
 800f2b8:	2000006c 	.word	0x2000006c

0800f2bc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f2bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f2c0:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f2c4:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800f2c8:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f2ca:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f2cc:	4b03      	ldr	r3, [pc, #12]	; (800f2dc <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f2ce:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f2d0:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f2d2:	f06f 0302 	mvn.w	r3, #2
 800f2d6:	6203      	str	r3, [r0, #32]
}
 800f2d8:	4770      	bx	lr
 800f2da:	bf00      	nop
 800f2dc:	0800f275 	.word	0x0800f275

0800f2e0 <SVC_Handler>:
	__asm volatile (
 800f2e0:	4b07      	ldr	r3, [pc, #28]	; (800f300 <pxCurrentTCBConst2>)
 800f2e2:	6819      	ldr	r1, [r3, #0]
 800f2e4:	6808      	ldr	r0, [r1, #0]
 800f2e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ea:	f380 8809 	msr	PSP, r0
 800f2ee:	f3bf 8f6f 	isb	sy
 800f2f2:	f04f 0000 	mov.w	r0, #0
 800f2f6:	f380 8811 	msr	BASEPRI, r0
 800f2fa:	4770      	bx	lr
 800f2fc:	f3af 8000 	nop.w

0800f300 <pxCurrentTCBConst2>:
 800f300:	20026634 	.word	0x20026634

0800f304 <vPortEnterCritical>:
 800f304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f308:	b672      	cpsid	i
 800f30a:	f383 8811 	msr	BASEPRI, r3
 800f30e:	f3bf 8f6f 	isb	sy
 800f312:	f3bf 8f4f 	dsb	sy
 800f316:	b662      	cpsie	i
	uxCriticalNesting++;
 800f318:	4a0b      	ldr	r2, [pc, #44]	; (800f348 <vPortEnterCritical+0x44>)
 800f31a:	6813      	ldr	r3, [r2, #0]
 800f31c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800f31e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800f320:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800f322:	d110      	bne.n	800f346 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f324:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f328:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800f32c:	b2db      	uxtb	r3, r3
 800f32e:	b153      	cbz	r3, 800f346 <vPortEnterCritical+0x42>
 800f330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f334:	b672      	cpsid	i
 800f336:	f383 8811 	msr	BASEPRI, r3
 800f33a:	f3bf 8f6f 	isb	sy
 800f33e:	f3bf 8f4f 	dsb	sy
 800f342:	b662      	cpsie	i
 800f344:	e7fe      	b.n	800f344 <vPortEnterCritical+0x40>
}
 800f346:	4770      	bx	lr
 800f348:	2000006c 	.word	0x2000006c

0800f34c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800f34c:	4a09      	ldr	r2, [pc, #36]	; (800f374 <vPortExitCritical+0x28>)
 800f34e:	6813      	ldr	r3, [r2, #0]
 800f350:	b953      	cbnz	r3, 800f368 <vPortExitCritical+0x1c>
 800f352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f356:	b672      	cpsid	i
 800f358:	f383 8811 	msr	BASEPRI, r3
 800f35c:	f3bf 8f6f 	isb	sy
 800f360:	f3bf 8f4f 	dsb	sy
 800f364:	b662      	cpsie	i
 800f366:	e7fe      	b.n	800f366 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800f368:	3b01      	subs	r3, #1
 800f36a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f36c:	b90b      	cbnz	r3, 800f372 <vPortExitCritical+0x26>
	__asm volatile
 800f36e:	f383 8811 	msr	BASEPRI, r3
}
 800f372:	4770      	bx	lr
 800f374:	2000006c 	.word	0x2000006c
	...

0800f380 <PendSV_Handler>:
	__asm volatile
 800f380:	f3ef 8009 	mrs	r0, PSP
 800f384:	f3bf 8f6f 	isb	sy
 800f388:	4b15      	ldr	r3, [pc, #84]	; (800f3e0 <pxCurrentTCBConst>)
 800f38a:	681a      	ldr	r2, [r3, #0]
 800f38c:	f01e 0f10 	tst.w	lr, #16
 800f390:	bf08      	it	eq
 800f392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f39a:	6010      	str	r0, [r2, #0]
 800f39c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f3a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f3a4:	b672      	cpsid	i
 800f3a6:	f380 8811 	msr	BASEPRI, r0
 800f3aa:	f3bf 8f4f 	dsb	sy
 800f3ae:	f3bf 8f6f 	isb	sy
 800f3b2:	b662      	cpsie	i
 800f3b4:	f001 fa4a 	bl	801084c <vTaskSwitchContext>
 800f3b8:	f04f 0000 	mov.w	r0, #0
 800f3bc:	f380 8811 	msr	BASEPRI, r0
 800f3c0:	bc09      	pop	{r0, r3}
 800f3c2:	6819      	ldr	r1, [r3, #0]
 800f3c4:	6808      	ldr	r0, [r1, #0]
 800f3c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3ca:	f01e 0f10 	tst.w	lr, #16
 800f3ce:	bf08      	it	eq
 800f3d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f3d4:	f380 8809 	msr	PSP, r0
 800f3d8:	f3bf 8f6f 	isb	sy
 800f3dc:	4770      	bx	lr
 800f3de:	bf00      	nop

0800f3e0 <pxCurrentTCBConst>:
 800f3e0:	20026634 	.word	0x20026634

0800f3e4 <SysTick_Handler>:
{
 800f3e4:	b508      	push	{r3, lr}
	__asm volatile
 800f3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ea:	b672      	cpsid	i
 800f3ec:	f383 8811 	msr	BASEPRI, r3
 800f3f0:	f3bf 8f6f 	isb	sy
 800f3f4:	f3bf 8f4f 	dsb	sy
 800f3f8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800f3fa:	f001 f87f 	bl	80104fc <xTaskIncrementTick>
 800f3fe:	b128      	cbz	r0, 800f40c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f400:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f408:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800f40c:	2300      	movs	r3, #0
 800f40e:	f383 8811 	msr	BASEPRI, r3
}
 800f412:	bd08      	pop	{r3, pc}

0800f414 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f414:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800f418:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f41a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f41e:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f420:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f422:	4b04      	ldr	r3, [pc, #16]	; (800f434 <vPortSetupTimerInterrupt+0x20>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	fbb3 f3f1 	udiv	r3, r3, r1
 800f42a:	3b01      	subs	r3, #1
 800f42c:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f42e:	2307      	movs	r3, #7
 800f430:	6113      	str	r3, [r2, #16]
}
 800f432:	4770      	bx	lr
 800f434:	20000060 	.word	0x20000060

0800f438 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f438:	4b2e      	ldr	r3, [pc, #184]	; (800f4f4 <xPortStartScheduler+0xbc>)
{
 800f43a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f43c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f43e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f440:	b2d2      	uxtb	r2, r2
 800f442:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f444:	22ff      	movs	r2, #255	; 0xff
 800f446:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f448:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f44a:	4a2b      	ldr	r2, [pc, #172]	; (800f4f8 <xPortStartScheduler+0xc0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f44c:	b2db      	uxtb	r3, r3
 800f44e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f452:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f456:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f45a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f45c:	2307      	movs	r3, #7
 800f45e:	4a27      	ldr	r2, [pc, #156]	; (800f4fc <xPortStartScheduler+0xc4>)
 800f460:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f462:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800f466:	1e5c      	subs	r4, r3, #1
 800f468:	0600      	lsls	r0, r0, #24
 800f46a:	d40e      	bmi.n	800f48a <xPortStartScheduler+0x52>
 800f46c:	b111      	cbz	r1, 800f474 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f46e:	2b03      	cmp	r3, #3
 800f470:	6013      	str	r3, [r2, #0]
 800f472:	d013      	beq.n	800f49c <xPortStartScheduler+0x64>
	__asm volatile
 800f474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f478:	b672      	cpsid	i
 800f47a:	f383 8811 	msr	BASEPRI, r3
 800f47e:	f3bf 8f6f 	isb	sy
 800f482:	f3bf 8f4f 	dsb	sy
 800f486:	b662      	cpsie	i
 800f488:	e7fe      	b.n	800f488 <xPortStartScheduler+0x50>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f48a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f48e:	2101      	movs	r1, #1
 800f490:	005b      	lsls	r3, r3, #1
 800f492:	b2db      	uxtb	r3, r3
 800f494:	f88d 3003 	strb.w	r3, [sp, #3]
 800f498:	4623      	mov	r3, r4
 800f49a:	e7e2      	b.n	800f462 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f49c:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f4a0:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 800f4a4:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f4a6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f4a8:	9b01      	ldr	r3, [sp, #4]
 800f4aa:	4a12      	ldr	r2, [pc, #72]	; (800f4f4 <xPortStartScheduler+0xbc>)
 800f4ac:	b2db      	uxtb	r3, r3
 800f4ae:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f4b0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800f4b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f4b8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f4bc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800f4c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f4c4:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800f4c8:	f7ff ffa4 	bl	800f414 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800f4cc:	4b0c      	ldr	r3, [pc, #48]	; (800f500 <xPortStartScheduler+0xc8>)
 800f4ce:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800f4d0:	f7ff fec6 	bl	800f260 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f4d4:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800f4d8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f4dc:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800f4e0:	f7ff feaa 	bl	800f238 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800f4e4:	f001 f9b2 	bl	801084c <vTaskSwitchContext>
}
 800f4e8:	4628      	mov	r0, r5
	prvTaskExitError();
 800f4ea:	f7ff fec3 	bl	800f274 <prvTaskExitError>
}
 800f4ee:	b003      	add	sp, #12
 800f4f0:	bd30      	pop	{r4, r5, pc}
 800f4f2:	bf00      	nop
 800f4f4:	e000e400 	.word	0xe000e400
 800f4f8:	200265ec 	.word	0x200265ec
 800f4fc:	200265f0 	.word	0x200265f0
 800f500:	2000006c 	.word	0x2000006c

0800f504 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f504:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f508:	2b0f      	cmp	r3, #15
 800f50a:	d910      	bls.n	800f52e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f50c:	4a13      	ldr	r2, [pc, #76]	; (800f55c <vPortValidateInterruptPriority+0x58>)
 800f50e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f510:	4a13      	ldr	r2, [pc, #76]	; (800f560 <vPortValidateInterruptPriority+0x5c>)
 800f512:	7812      	ldrb	r2, [r2, #0]
 800f514:	429a      	cmp	r2, r3
 800f516:	d90a      	bls.n	800f52e <vPortValidateInterruptPriority+0x2a>
 800f518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f51c:	b672      	cpsid	i
 800f51e:	f383 8811 	msr	BASEPRI, r3
 800f522:	f3bf 8f6f 	isb	sy
 800f526:	f3bf 8f4f 	dsb	sy
 800f52a:	b662      	cpsie	i
 800f52c:	e7fe      	b.n	800f52c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f52e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f532:	4a0c      	ldr	r2, [pc, #48]	; (800f564 <vPortValidateInterruptPriority+0x60>)
 800f534:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800f538:	6812      	ldr	r2, [r2, #0]
 800f53a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f53e:	4293      	cmp	r3, r2
 800f540:	d90a      	bls.n	800f558 <vPortValidateInterruptPriority+0x54>
 800f542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f546:	b672      	cpsid	i
 800f548:	f383 8811 	msr	BASEPRI, r3
 800f54c:	f3bf 8f6f 	isb	sy
 800f550:	f3bf 8f4f 	dsb	sy
 800f554:	b662      	cpsie	i
 800f556:	e7fe      	b.n	800f556 <vPortValidateInterruptPriority+0x52>
	}
 800f558:	4770      	bx	lr
 800f55a:	bf00      	nop
 800f55c:	e000e3f0 	.word	0xe000e3f0
 800f560:	200265ec 	.word	0x200265ec
 800f564:	200265f0 	.word	0x200265f0

0800f568 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f568:	b510      	push	{r4, lr}
 800f56a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f56c:	f7ff feca 	bl	800f304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f570:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800f572:	f7ff feeb 	bl	800f34c <vPortExitCritical>

	return xReturn;
}
 800f576:	fab4 f084 	clz	r0, r4
 800f57a:	0940      	lsrs	r0, r0, #5
 800f57c:	bd10      	pop	{r4, pc}

0800f57e <prvCopyDataToQueue>:
{
 800f57e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f580:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f582:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800f584:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f586:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f588:	b952      	cbnz	r2, 800f5a0 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f58a:	6807      	ldr	r7, [r0, #0]
 800f58c:	bb47      	cbnz	r7, 800f5e0 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f58e:	6880      	ldr	r0, [r0, #8]
 800f590:	f001 fad0 	bl	8010b34 <xTaskPriorityDisinherit>
 800f594:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f596:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f598:	3601      	adds	r6, #1
}
 800f59a:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f59c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800f59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800f5a0:	b965      	cbnz	r5, 800f5bc <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f5a2:	6840      	ldr	r0, [r0, #4]
 800f5a4:	f01b ffbc 	bl	802b520 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f5a8:	6863      	ldr	r3, [r4, #4]
 800f5aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f5ac:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f5ae:	68a2      	ldr	r2, [r4, #8]
 800f5b0:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f5b2:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f5b4:	d3f0      	bcc.n	800f598 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f5b6:	6823      	ldr	r3, [r4, #0]
 800f5b8:	6063      	str	r3, [r4, #4]
 800f5ba:	e7ed      	b.n	800f598 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f5bc:	68c0      	ldr	r0, [r0, #12]
 800f5be:	f01b ffaf 	bl	802b520 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f5c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f5c4:	68e3      	ldr	r3, [r4, #12]
 800f5c6:	4251      	negs	r1, r2
 800f5c8:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f5ca:	6822      	ldr	r2, [r4, #0]
 800f5cc:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f5ce:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f5d0:	bf3e      	ittt	cc
 800f5d2:	68a3      	ldrcc	r3, [r4, #8]
 800f5d4:	185b      	addcc	r3, r3, r1
 800f5d6:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800f5d8:	2d02      	cmp	r5, #2
 800f5da:	d101      	bne.n	800f5e0 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f5dc:	b116      	cbz	r6, 800f5e4 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800f5de:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800f5e0:	2500      	movs	r5, #0
 800f5e2:	e7d9      	b.n	800f598 <prvCopyDataToQueue+0x1a>
 800f5e4:	4635      	mov	r5, r6
 800f5e6:	e7d7      	b.n	800f598 <prvCopyDataToQueue+0x1a>

0800f5e8 <prvCopyDataFromQueue>:
{
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f5ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800f5ee:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f5f0:	b162      	cbz	r2, 800f60c <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f5f2:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f5f4:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f5f6:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f5f8:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f5fa:	60dc      	str	r4, [r3, #12]
}
 800f5fc:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f600:	bf24      	itt	cs
 800f602:	6819      	ldrcs	r1, [r3, #0]
 800f604:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f606:	68d9      	ldr	r1, [r3, #12]
 800f608:	f01b bf8a 	b.w	802b520 <memcpy>
}
 800f60c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f610:	4770      	bx	lr

0800f612 <prvUnlockQueue>:
{
 800f612:	b570      	push	{r4, r5, r6, lr}
 800f614:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800f616:	f7ff fe75 	bl	800f304 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800f61a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f61e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800f622:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f624:	2d00      	cmp	r5, #0
 800f626:	dc14      	bgt.n	800f652 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800f628:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f62a:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800f62e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800f632:	f7ff fe8b 	bl	800f34c <vPortExitCritical>
	taskENTER_CRITICAL();
 800f636:	f7ff fe65 	bl	800f304 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800f63a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800f63e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f640:	2d00      	cmp	r5, #0
 800f642:	dc12      	bgt.n	800f66a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800f644:	23ff      	movs	r3, #255	; 0xff
 800f646:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800f64a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800f64e:	f7ff be7d 	b.w	800f34c <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f654:	2b00      	cmp	r3, #0
 800f656:	d0e7      	beq.n	800f628 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f658:	4630      	mov	r0, r6
 800f65a:	f001 f97d 	bl	8010958 <xTaskRemoveFromEventList>
 800f65e:	b108      	cbz	r0, 800f664 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800f660:	f001 fa0c 	bl	8010a7c <vTaskMissedYield>
			--cTxLock;
 800f664:	3d01      	subs	r5, #1
 800f666:	b26d      	sxtb	r5, r5
 800f668:	e7dc      	b.n	800f624 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f66a:	6923      	ldr	r3, [r4, #16]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d0e9      	beq.n	800f644 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f670:	4630      	mov	r0, r6
 800f672:	f001 f971 	bl	8010958 <xTaskRemoveFromEventList>
 800f676:	b108      	cbz	r0, 800f67c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800f678:	f001 fa00 	bl	8010a7c <vTaskMissedYield>
				--cRxLock;
 800f67c:	3d01      	subs	r5, #1
 800f67e:	b26d      	sxtb	r5, r5
 800f680:	e7de      	b.n	800f640 <prvUnlockQueue+0x2e>

0800f682 <xQueueGenericReset>:
{
 800f682:	b538      	push	{r3, r4, r5, lr}
 800f684:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800f686:	4604      	mov	r4, r0
 800f688:	b950      	cbnz	r0, 800f6a0 <xQueueGenericReset+0x1e>
 800f68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f68e:	b672      	cpsid	i
 800f690:	f383 8811 	msr	BASEPRI, r3
 800f694:	f3bf 8f6f 	isb	sy
 800f698:	f3bf 8f4f 	dsb	sy
 800f69c:	b662      	cpsie	i
 800f69e:	e7fe      	b.n	800f69e <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 800f6a0:	f7ff fe30 	bl	800f304 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f6a4:	6822      	ldr	r2, [r4, #0]
 800f6a6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f6aa:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f6ac:	434b      	muls	r3, r1
 800f6ae:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f6b0:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f6b2:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f6b4:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f6b6:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800f6b8:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f6ba:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f6bc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800f6be:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f6c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800f6c6:	b9a5      	cbnz	r5, 800f6f2 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f6c8:	6923      	ldr	r3, [r4, #16]
 800f6ca:	b173      	cbz	r3, 800f6ea <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f6cc:	f104 0010 	add.w	r0, r4, #16
 800f6d0:	f001 f942 	bl	8010958 <xTaskRemoveFromEventList>
 800f6d4:	b148      	cbz	r0, 800f6ea <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 800f6d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f6da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6de:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f6e2:	f3bf 8f4f 	dsb	sy
 800f6e6:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800f6ea:	f7ff fe2f 	bl	800f34c <vPortExitCritical>
}
 800f6ee:	2001      	movs	r0, #1
 800f6f0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f6f2:	f104 0010 	add.w	r0, r4, #16
 800f6f6:	f7ff fd5d 	bl	800f1b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f6fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800f6fe:	f7ff fd59 	bl	800f1b4 <vListInitialise>
 800f702:	e7f2      	b.n	800f6ea <xQueueGenericReset+0x68>

0800f704 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 800f704:	b513      	push	{r0, r1, r4, lr}
		configASSERT( pxStaticQueue != NULL );
 800f706:	461c      	mov	r4, r3
 800f708:	b953      	cbnz	r3, 800f720 <xQueueGenericCreateStatic.part.0+0x1c>
 800f70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f70e:	b672      	cpsid	i
 800f710:	f383 8811 	msr	BASEPRI, r3
 800f714:	f3bf 8f6f 	isb	sy
 800f718:	f3bf 8f4f 	dsb	sy
 800f71c:	b662      	cpsie	i
 800f71e:	e7fe      	b.n	800f71e <xQueueGenericCreateStatic.part.0+0x1a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f720:	b15a      	cbz	r2, 800f73a <xQueueGenericCreateStatic.part.0+0x36>
 800f722:	b9b1      	cbnz	r1, 800f752 <xQueueGenericCreateStatic.part.0+0x4e>
 800f724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f728:	b672      	cpsid	i
 800f72a:	f383 8811 	msr	BASEPRI, r3
 800f72e:	f3bf 8f6f 	isb	sy
 800f732:	f3bf 8f4f 	dsb	sy
 800f736:	b662      	cpsie	i
 800f738:	e7fe      	b.n	800f738 <xQueueGenericCreateStatic.part.0+0x34>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f73a:	b151      	cbz	r1, 800f752 <xQueueGenericCreateStatic.part.0+0x4e>
 800f73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f740:	b672      	cpsid	i
 800f742:	f383 8811 	msr	BASEPRI, r3
 800f746:	f3bf 8f6f 	isb	sy
 800f74a:	f3bf 8f4f 	dsb	sy
 800f74e:	b662      	cpsie	i
 800f750:	e7fe      	b.n	800f750 <xQueueGenericCreateStatic.part.0+0x4c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f752:	2350      	movs	r3, #80	; 0x50
 800f754:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f756:	9b01      	ldr	r3, [sp, #4]
 800f758:	2b50      	cmp	r3, #80	; 0x50
 800f75a:	d00a      	beq.n	800f772 <xQueueGenericCreateStatic.part.0+0x6e>
 800f75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f760:	b672      	cpsid	i
 800f762:	f383 8811 	msr	BASEPRI, r3
 800f766:	f3bf 8f6f 	isb	sy
 800f76a:	f3bf 8f4f 	dsb	sy
 800f76e:	b662      	cpsie	i
 800f770:	e7fe      	b.n	800f770 <xQueueGenericCreateStatic.part.0+0x6c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800f772:	2900      	cmp	r1, #0
 800f774:	bf08      	it	eq
 800f776:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f778:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f77a:	2301      	movs	r3, #1
 800f77c:	6022      	str	r2, [r4, #0]
 800f77e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800f782:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f786:	4619      	mov	r1, r3
 800f788:	4620      	mov	r0, r4
 800f78a:	f7ff ff7a 	bl	800f682 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800f78e:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800f792:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800f794:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800f798:	b002      	add	sp, #8
 800f79a:	bd10      	pop	{r4, pc}

0800f79c <xQueueGenericCreateStatic>:
	{
 800f79c:	b410      	push	{r4}
 800f79e:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f7a2:	b950      	cbnz	r0, 800f7ba <xQueueGenericCreateStatic+0x1e>
 800f7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7a8:	b672      	cpsid	i
 800f7aa:	f383 8811 	msr	BASEPRI, r3
 800f7ae:	f3bf 8f6f 	isb	sy
 800f7b2:	f3bf 8f4f 	dsb	sy
 800f7b6:	b662      	cpsie	i
 800f7b8:	e7fe      	b.n	800f7b8 <xQueueGenericCreateStatic+0x1c>
 800f7ba:	9401      	str	r4, [sp, #4]
	}
 800f7bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7c0:	f7ff bfa0 	b.w	800f704 <xQueueGenericCreateStatic.part.0>

0800f7c4 <xQueueGenericCreate>:
	{
 800f7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7c6:	460d      	mov	r5, r1
 800f7c8:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f7ca:	4606      	mov	r6, r0
 800f7cc:	b950      	cbnz	r0, 800f7e4 <xQueueGenericCreate+0x20>
 800f7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d2:	b672      	cpsid	i
 800f7d4:	f383 8811 	msr	BASEPRI, r3
 800f7d8:	f3bf 8f6f 	isb	sy
 800f7dc:	f3bf 8f4f 	dsb	sy
 800f7e0:	b662      	cpsie	i
 800f7e2:	e7fe      	b.n	800f7e2 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7e4:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f7e6:	3050      	adds	r0, #80	; 0x50
 800f7e8:	f7ff fc12 	bl	800f010 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800f7ec:	4604      	mov	r4, r0
 800f7ee:	b170      	cbz	r0, 800f80e <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800f7f6:	b165      	cbz	r5, 800f812 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f7f8:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f7fc:	2101      	movs	r1, #1
 800f7fe:	4620      	mov	r0, r4
 800f800:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800f802:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f806:	f7ff ff3c 	bl	800f682 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800f80a:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800f80e:	4620      	mov	r0, r4
 800f810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f812:	4603      	mov	r3, r0
 800f814:	e7f2      	b.n	800f7fc <xQueueGenericCreate+0x38>

0800f816 <xQueueCreateCountingSemaphoreStatic>:
	{
 800f816:	b513      	push	{r0, r1, r4, lr}
 800f818:	4613      	mov	r3, r2
 800f81a:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800f81c:	b950      	cbnz	r0, 800f834 <xQueueCreateCountingSemaphoreStatic+0x1e>
 800f81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f822:	b672      	cpsid	i
 800f824:	f383 8811 	msr	BASEPRI, r3
 800f828:	f3bf 8f6f 	isb	sy
 800f82c:	f3bf 8f4f 	dsb	sy
 800f830:	b662      	cpsie	i
 800f832:	e7fe      	b.n	800f832 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f834:	4288      	cmp	r0, r1
 800f836:	d20a      	bcs.n	800f84e <xQueueCreateCountingSemaphoreStatic+0x38>
 800f838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f83c:	b672      	cpsid	i
 800f83e:	f383 8811 	msr	BASEPRI, r3
 800f842:	f3bf 8f6f 	isb	sy
 800f846:	f3bf 8f4f 	dsb	sy
 800f84a:	b662      	cpsie	i
 800f84c:	e7fe      	b.n	800f84c <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f84e:	2202      	movs	r2, #2
 800f850:	9200      	str	r2, [sp, #0]
 800f852:	2200      	movs	r2, #0
 800f854:	4611      	mov	r1, r2
 800f856:	f7ff ffa1 	bl	800f79c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800f85a:	b100      	cbz	r0, 800f85e <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f85c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800f85e:	b002      	add	sp, #8
 800f860:	bd10      	pop	{r4, pc}

0800f862 <xQueueCreateCountingSemaphore>:
	{
 800f862:	b510      	push	{r4, lr}
 800f864:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800f866:	b950      	cbnz	r0, 800f87e <xQueueCreateCountingSemaphore+0x1c>
 800f868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f86c:	b672      	cpsid	i
 800f86e:	f383 8811 	msr	BASEPRI, r3
 800f872:	f3bf 8f6f 	isb	sy
 800f876:	f3bf 8f4f 	dsb	sy
 800f87a:	b662      	cpsie	i
 800f87c:	e7fe      	b.n	800f87c <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f87e:	4288      	cmp	r0, r1
 800f880:	d20a      	bcs.n	800f898 <xQueueCreateCountingSemaphore+0x36>
 800f882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f886:	b672      	cpsid	i
 800f888:	f383 8811 	msr	BASEPRI, r3
 800f88c:	f3bf 8f6f 	isb	sy
 800f890:	f3bf 8f4f 	dsb	sy
 800f894:	b662      	cpsie	i
 800f896:	e7fe      	b.n	800f896 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f898:	2202      	movs	r2, #2
 800f89a:	2100      	movs	r1, #0
 800f89c:	f7ff ff92 	bl	800f7c4 <xQueueGenericCreate>
		if( xHandle != NULL )
 800f8a0:	b100      	cbz	r0, 800f8a4 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f8a2:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800f8a4:	bd10      	pop	{r4, pc}

0800f8a6 <xQueueGenericSend>:
{
 800f8a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8aa:	b085      	sub	sp, #20
 800f8ac:	4688      	mov	r8, r1
 800f8ae:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800f8b0:	4604      	mov	r4, r0
{
 800f8b2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800f8b4:	b950      	cbnz	r0, 800f8cc <xQueueGenericSend+0x26>
 800f8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ba:	b672      	cpsid	i
 800f8bc:	f383 8811 	msr	BASEPRI, r3
 800f8c0:	f3bf 8f6f 	isb	sy
 800f8c4:	f3bf 8f4f 	dsb	sy
 800f8c8:	b662      	cpsie	i
 800f8ca:	e7fe      	b.n	800f8ca <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f8cc:	b961      	cbnz	r1, 800f8e8 <xQueueGenericSend+0x42>
 800f8ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f8d0:	b153      	cbz	r3, 800f8e8 <xQueueGenericSend+0x42>
 800f8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d6:	b672      	cpsid	i
 800f8d8:	f383 8811 	msr	BASEPRI, r3
 800f8dc:	f3bf 8f6f 	isb	sy
 800f8e0:	f3bf 8f4f 	dsb	sy
 800f8e4:	b662      	cpsie	i
 800f8e6:	e7fe      	b.n	800f8e6 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f8e8:	2f02      	cmp	r7, #2
 800f8ea:	d10d      	bne.n	800f908 <xQueueGenericSend+0x62>
 800f8ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f8ee:	2b01      	cmp	r3, #1
 800f8f0:	d00a      	beq.n	800f908 <xQueueGenericSend+0x62>
 800f8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8f6:	b672      	cpsid	i
 800f8f8:	f383 8811 	msr	BASEPRI, r3
 800f8fc:	f3bf 8f6f 	isb	sy
 800f900:	f3bf 8f4f 	dsb	sy
 800f904:	b662      	cpsie	i
 800f906:	e7fe      	b.n	800f906 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f908:	f001 f8c4 	bl	8010a94 <xTaskGetSchedulerState>
 800f90c:	4606      	mov	r6, r0
 800f90e:	b960      	cbnz	r0, 800f92a <xQueueGenericSend+0x84>
 800f910:	9b01      	ldr	r3, [sp, #4]
 800f912:	b15b      	cbz	r3, 800f92c <xQueueGenericSend+0x86>
 800f914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f918:	b672      	cpsid	i
 800f91a:	f383 8811 	msr	BASEPRI, r3
 800f91e:	f3bf 8f6f 	isb	sy
 800f922:	f3bf 8f4f 	dsb	sy
 800f926:	b662      	cpsie	i
 800f928:	e7fe      	b.n	800f928 <xQueueGenericSend+0x82>
 800f92a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800f92c:	f04f 0900 	mov.w	r9, #0
 800f930:	e037      	b.n	800f9a2 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f932:	9d01      	ldr	r5, [sp, #4]
 800f934:	b91d      	cbnz	r5, 800f93e <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 800f936:	f7ff fd09 	bl	800f34c <vPortExitCritical>
			return errQUEUE_FULL;
 800f93a:	2000      	movs	r0, #0
 800f93c:	e052      	b.n	800f9e4 <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 800f93e:	b916      	cbnz	r6, 800f946 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f940:	a802      	add	r0, sp, #8
 800f942:	f001 f84f 	bl	80109e4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800f946:	f7ff fd01 	bl	800f34c <vPortExitCritical>
		vTaskSuspendAll();
 800f94a:	f000 fdc9 	bl	80104e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f94e:	f7ff fcd9 	bl	800f304 <vPortEnterCritical>
 800f952:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f956:	2bff      	cmp	r3, #255	; 0xff
 800f958:	d101      	bne.n	800f95e <xQueueGenericSend+0xb8>
 800f95a:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800f95e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800f962:	2bff      	cmp	r3, #255	; 0xff
 800f964:	d101      	bne.n	800f96a <xQueueGenericSend+0xc4>
 800f966:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800f96a:	f7ff fcef 	bl	800f34c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f96e:	a901      	add	r1, sp, #4
 800f970:	a802      	add	r0, sp, #8
 800f972:	f001 f843 	bl	80109fc <xTaskCheckForTimeOut>
 800f976:	2800      	cmp	r0, #0
 800f978:	d14a      	bne.n	800fa10 <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f97a:	f7ff fcc3 	bl	800f304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f97e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800f980:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f982:	429a      	cmp	r2, r3
 800f984:	d131      	bne.n	800f9ea <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800f986:	f7ff fce1 	bl	800f34c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f98a:	9901      	ldr	r1, [sp, #4]
 800f98c:	f104 0010 	add.w	r0, r4, #16
 800f990:	f000 ffa6 	bl	80108e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f994:	4620      	mov	r0, r4
 800f996:	f7ff fe3c 	bl	800f612 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f99a:	f000 fe47 	bl	801062c <xTaskResumeAll>
 800f99e:	b360      	cbz	r0, 800f9fa <xQueueGenericSend+0x154>
 800f9a0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800f9a2:	f7ff fcaf 	bl	800f304 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f9a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800f9a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f9aa:	429a      	cmp	r2, r3
 800f9ac:	d301      	bcc.n	800f9b2 <xQueueGenericSend+0x10c>
 800f9ae:	2f02      	cmp	r7, #2
 800f9b0:	d1bf      	bne.n	800f932 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f9b2:	463a      	mov	r2, r7
 800f9b4:	4641      	mov	r1, r8
 800f9b6:	4620      	mov	r0, r4
 800f9b8:	f7ff fde1 	bl	800f57e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f9bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f9be:	b11b      	cbz	r3, 800f9c8 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f9c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800f9c4:	f000 ffc8 	bl	8010958 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800f9c8:	b148      	cbz	r0, 800f9de <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800f9ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f9ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9d2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f9d6:	f3bf 8f4f 	dsb	sy
 800f9da:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800f9de:	f7ff fcb5 	bl	800f34c <vPortExitCritical>
				return pdPASS;
 800f9e2:	2001      	movs	r0, #1
}
 800f9e4:	b005      	add	sp, #20
 800f9e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800f9ea:	f7ff fcaf 	bl	800f34c <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800f9ee:	4620      	mov	r0, r4
 800f9f0:	f7ff fe0f 	bl	800f612 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f9f4:	f000 fe1a 	bl	801062c <xTaskResumeAll>
 800f9f8:	e7d2      	b.n	800f9a0 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 800f9fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f9fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa02:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800fa06:	f3bf 8f4f 	dsb	sy
 800fa0a:	f3bf 8f6f 	isb	sy
 800fa0e:	e7c7      	b.n	800f9a0 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 800fa10:	4620      	mov	r0, r4
 800fa12:	f7ff fdfe 	bl	800f612 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fa16:	f000 fe09 	bl	801062c <xTaskResumeAll>
 800fa1a:	e78e      	b.n	800f93a <xQueueGenericSend+0x94>

0800fa1c <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800fa1c:	2200      	movs	r2, #0
	{
 800fa1e:	460b      	mov	r3, r1
 800fa20:	b513      	push	{r0, r1, r4, lr}
 800fa22:	4611      	mov	r1, r2
 800fa24:	9000      	str	r0, [sp, #0]
 800fa26:	2001      	movs	r0, #1
 800fa28:	f7ff fe6c 	bl	800f704 <xQueueGenericCreateStatic.part.0>
		if( pxNewQueue != NULL )
 800fa2c:	4604      	mov	r4, r0
 800fa2e:	b138      	cbz	r0, 800fa40 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fa30:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fa32:	461a      	mov	r2, r3
 800fa34:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fa36:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fa38:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fa3a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fa3c:	f7ff ff33 	bl	800f8a6 <xQueueGenericSend>
	}
 800fa40:	4620      	mov	r0, r4
 800fa42:	b002      	add	sp, #8
 800fa44:	bd10      	pop	{r4, pc}

0800fa46 <xQueueGiveMutexRecursive>:
	{
 800fa46:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800fa48:	4604      	mov	r4, r0
 800fa4a:	b950      	cbnz	r0, 800fa62 <xQueueGiveMutexRecursive+0x1c>
 800fa4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa50:	b672      	cpsid	i
 800fa52:	f383 8811 	msr	BASEPRI, r3
 800fa56:	f3bf 8f6f 	isb	sy
 800fa5a:	f3bf 8f4f 	dsb	sy
 800fa5e:	b662      	cpsie	i
 800fa60:	e7fe      	b.n	800fa60 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800fa62:	6885      	ldr	r5, [r0, #8]
 800fa64:	f001 f810 	bl	8010a88 <xTaskGetCurrentTaskHandle>
 800fa68:	4285      	cmp	r5, r0
 800fa6a:	d10a      	bne.n	800fa82 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800fa6c:	68e3      	ldr	r3, [r4, #12]
 800fa6e:	3b01      	subs	r3, #1
 800fa70:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800fa72:	b923      	cbnz	r3, 800fa7e <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800fa74:	461a      	mov	r2, r3
 800fa76:	4619      	mov	r1, r3
 800fa78:	4620      	mov	r0, r4
 800fa7a:	f7ff ff14 	bl	800f8a6 <xQueueGenericSend>
			xReturn = pdPASS;
 800fa7e:	2001      	movs	r0, #1
		return xReturn;
 800fa80:	e000      	b.n	800fa84 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 800fa82:	2000      	movs	r0, #0
	}
 800fa84:	bd38      	pop	{r3, r4, r5, pc}

0800fa86 <xQueueCreateMutex>:
	{
 800fa86:	b570      	push	{r4, r5, r6, lr}
 800fa88:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fa8a:	2050      	movs	r0, #80	; 0x50
 800fa8c:	f7ff fac0 	bl	800f010 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800fa90:	4604      	mov	r4, r0
 800fa92:	b198      	cbz	r0, 800fabc <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fa94:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800fa96:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fa98:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fa9a:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800fa9e:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800faa2:	f7ff fdee 	bl	800f682 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800faa6:	462b      	mov	r3, r5
 800faa8:	462a      	mov	r2, r5
 800faaa:	4629      	mov	r1, r5
 800faac:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800faae:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fab2:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fab4:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fab6:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fab8:	f7ff fef5 	bl	800f8a6 <xQueueGenericSend>
	}
 800fabc:	4620      	mov	r0, r4
 800fabe:	bd70      	pop	{r4, r5, r6, pc}

0800fac0 <xQueueGenericSendFromISR>:
{
 800fac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fac4:	4689      	mov	r9, r1
 800fac6:	4690      	mov	r8, r2
 800fac8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800faca:	4604      	mov	r4, r0
 800facc:	b950      	cbnz	r0, 800fae4 <xQueueGenericSendFromISR+0x24>
 800face:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad2:	b672      	cpsid	i
 800fad4:	f383 8811 	msr	BASEPRI, r3
 800fad8:	f3bf 8f6f 	isb	sy
 800fadc:	f3bf 8f4f 	dsb	sy
 800fae0:	b662      	cpsie	i
 800fae2:	e7fe      	b.n	800fae2 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fae4:	b961      	cbnz	r1, 800fb00 <xQueueGenericSendFromISR+0x40>
 800fae6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800fae8:	b153      	cbz	r3, 800fb00 <xQueueGenericSendFromISR+0x40>
 800faea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faee:	b672      	cpsid	i
 800faf0:	f383 8811 	msr	BASEPRI, r3
 800faf4:	f3bf 8f6f 	isb	sy
 800faf8:	f3bf 8f4f 	dsb	sy
 800fafc:	b662      	cpsie	i
 800fafe:	e7fe      	b.n	800fafe <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fb00:	2f02      	cmp	r7, #2
 800fb02:	d10d      	bne.n	800fb20 <xQueueGenericSendFromISR+0x60>
 800fb04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fb06:	2b01      	cmp	r3, #1
 800fb08:	d00a      	beq.n	800fb20 <xQueueGenericSendFromISR+0x60>
 800fb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb0e:	b672      	cpsid	i
 800fb10:	f383 8811 	msr	BASEPRI, r3
 800fb14:	f3bf 8f6f 	isb	sy
 800fb18:	f3bf 8f4f 	dsb	sy
 800fb1c:	b662      	cpsie	i
 800fb1e:	e7fe      	b.n	800fb1e <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fb20:	f7ff fcf0 	bl	800f504 <vPortValidateInterruptPriority>
	__asm volatile
 800fb24:	f3ef 8611 	mrs	r6, BASEPRI
 800fb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb2c:	b672      	cpsid	i
 800fb2e:	f383 8811 	msr	BASEPRI, r3
 800fb32:	f3bf 8f6f 	isb	sy
 800fb36:	f3bf 8f4f 	dsb	sy
 800fb3a:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fb3c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fb3e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d301      	bcc.n	800fb48 <xQueueGenericSendFromISR+0x88>
 800fb44:	2f02      	cmp	r7, #2
 800fb46:	d122      	bne.n	800fb8e <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 800fb48:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fb4c:	463a      	mov	r2, r7
 800fb4e:	4649      	mov	r1, r9
 800fb50:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800fb52:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fb54:	f7ff fd13 	bl	800f57e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800fb58:	1c6b      	adds	r3, r5, #1
 800fb5a:	d113      	bne.n	800fb84 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb5e:	b90b      	cbnz	r3, 800fb64 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 800fb60:	2001      	movs	r0, #1
 800fb62:	e00b      	b.n	800fb7c <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb64:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fb68:	f000 fef6 	bl	8010958 <xTaskRemoveFromEventList>
 800fb6c:	2800      	cmp	r0, #0
 800fb6e:	d0f7      	beq.n	800fb60 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 800fb70:	f1b8 0f00 	cmp.w	r8, #0
 800fb74:	d0f4      	beq.n	800fb60 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fb76:	2001      	movs	r0, #1
 800fb78:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800fb7c:	f386 8811 	msr	BASEPRI, r6
}
 800fb80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fb84:	3501      	adds	r5, #1
 800fb86:	b26d      	sxtb	r5, r5
 800fb88:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800fb8c:	e7e8      	b.n	800fb60 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 800fb8e:	2000      	movs	r0, #0
 800fb90:	e7f4      	b.n	800fb7c <xQueueGenericSendFromISR+0xbc>

0800fb92 <xQueueGiveFromISR>:
{
 800fb92:	b570      	push	{r4, r5, r6, lr}
 800fb94:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800fb96:	4604      	mov	r4, r0
 800fb98:	b950      	cbnz	r0, 800fbb0 <xQueueGiveFromISR+0x1e>
	__asm volatile
 800fb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb9e:	b672      	cpsid	i
 800fba0:	f383 8811 	msr	BASEPRI, r3
 800fba4:	f3bf 8f6f 	isb	sy
 800fba8:	f3bf 8f4f 	dsb	sy
 800fbac:	b662      	cpsie	i
 800fbae:	e7fe      	b.n	800fbae <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 800fbb0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800fbb2:	b153      	cbz	r3, 800fbca <xQueueGiveFromISR+0x38>
 800fbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb8:	b672      	cpsid	i
 800fbba:	f383 8811 	msr	BASEPRI, r3
 800fbbe:	f3bf 8f6f 	isb	sy
 800fbc2:	f3bf 8f4f 	dsb	sy
 800fbc6:	b662      	cpsie	i
 800fbc8:	e7fe      	b.n	800fbc8 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fbca:	6803      	ldr	r3, [r0, #0]
 800fbcc:	b963      	cbnz	r3, 800fbe8 <xQueueGiveFromISR+0x56>
 800fbce:	6883      	ldr	r3, [r0, #8]
 800fbd0:	b153      	cbz	r3, 800fbe8 <xQueueGiveFromISR+0x56>
 800fbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd6:	b672      	cpsid	i
 800fbd8:	f383 8811 	msr	BASEPRI, r3
 800fbdc:	f3bf 8f6f 	isb	sy
 800fbe0:	f3bf 8f4f 	dsb	sy
 800fbe4:	b662      	cpsie	i
 800fbe6:	e7fe      	b.n	800fbe6 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fbe8:	f7ff fc8c 	bl	800f504 <vPortValidateInterruptPriority>
	__asm volatile
 800fbec:	f3ef 8611 	mrs	r6, BASEPRI
 800fbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbf4:	b672      	cpsid	i
 800fbf6:	f383 8811 	msr	BASEPRI, r3
 800fbfa:	f3bf 8f6f 	isb	sy
 800fbfe:	f3bf 8f4f 	dsb	sy
 800fc02:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fc04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fc06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fc08:	4293      	cmp	r3, r2
 800fc0a:	d91c      	bls.n	800fc46 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800fc0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fc10:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800fc12:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800fc14:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fc16:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800fc18:	d110      	bne.n	800fc3c <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fc1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc1c:	b90b      	cbnz	r3, 800fc22 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800fc1e:	2001      	movs	r0, #1
 800fc20:	e009      	b.n	800fc36 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fc22:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fc26:	f000 fe97 	bl	8010958 <xTaskRemoveFromEventList>
 800fc2a:	2800      	cmp	r0, #0
 800fc2c:	d0f7      	beq.n	800fc1e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800fc2e:	2d00      	cmp	r5, #0
 800fc30:	d0f5      	beq.n	800fc1e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fc32:	2001      	movs	r0, #1
 800fc34:	6028      	str	r0, [r5, #0]
	__asm volatile
 800fc36:	f386 8811 	msr	BASEPRI, r6
}
 800fc3a:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	b25b      	sxtb	r3, r3
 800fc40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fc44:	e7eb      	b.n	800fc1e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800fc46:	2000      	movs	r0, #0
 800fc48:	e7f5      	b.n	800fc36 <xQueueGiveFromISR+0xa4>

0800fc4a <xQueueReceive>:
{
 800fc4a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800fc4e:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800fc50:	4604      	mov	r4, r0
{
 800fc52:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800fc54:	b950      	cbnz	r0, 800fc6c <xQueueReceive+0x22>
	__asm volatile
 800fc56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc5a:	b672      	cpsid	i
 800fc5c:	f383 8811 	msr	BASEPRI, r3
 800fc60:	f3bf 8f6f 	isb	sy
 800fc64:	f3bf 8f4f 	dsb	sy
 800fc68:	b662      	cpsie	i
 800fc6a:	e7fe      	b.n	800fc6a <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc6c:	b961      	cbnz	r1, 800fc88 <xQueueReceive+0x3e>
 800fc6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800fc70:	b153      	cbz	r3, 800fc88 <xQueueReceive+0x3e>
 800fc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc76:	b672      	cpsid	i
 800fc78:	f383 8811 	msr	BASEPRI, r3
 800fc7c:	f3bf 8f6f 	isb	sy
 800fc80:	f3bf 8f4f 	dsb	sy
 800fc84:	b662      	cpsie	i
 800fc86:	e7fe      	b.n	800fc86 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fc88:	f000 ff04 	bl	8010a94 <xTaskGetSchedulerState>
 800fc8c:	4606      	mov	r6, r0
 800fc8e:	b960      	cbnz	r0, 800fcaa <xQueueReceive+0x60>
 800fc90:	9b01      	ldr	r3, [sp, #4]
 800fc92:	b15b      	cbz	r3, 800fcac <xQueueReceive+0x62>
 800fc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc98:	b672      	cpsid	i
 800fc9a:	f383 8811 	msr	BASEPRI, r3
 800fc9e:	f3bf 8f6f 	isb	sy
 800fca2:	f3bf 8f4f 	dsb	sy
 800fca6:	b662      	cpsie	i
 800fca8:	e7fe      	b.n	800fca8 <xQueueReceive+0x5e>
 800fcaa:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800fcac:	f04f 0800 	mov.w	r8, #0
 800fcb0:	e03d      	b.n	800fd2e <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 800fcb2:	9d01      	ldr	r5, [sp, #4]
 800fcb4:	b91d      	cbnz	r5, 800fcbe <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 800fcb6:	f7ff fb49 	bl	800f34c <vPortExitCritical>
				return errQUEUE_EMPTY;
 800fcba:	2000      	movs	r0, #0
 800fcbc:	e056      	b.n	800fd6c <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 800fcbe:	b916      	cbnz	r6, 800fcc6 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fcc0:	a802      	add	r0, sp, #8
 800fcc2:	f000 fe8f 	bl	80109e4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800fcc6:	f7ff fb41 	bl	800f34c <vPortExitCritical>
		vTaskSuspendAll();
 800fcca:	f000 fc09 	bl	80104e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fcce:	f7ff fb19 	bl	800f304 <vPortEnterCritical>
 800fcd2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fcd6:	2bff      	cmp	r3, #255	; 0xff
 800fcd8:	d101      	bne.n	800fcde <xQueueReceive+0x94>
 800fcda:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800fcde:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fce2:	2bff      	cmp	r3, #255	; 0xff
 800fce4:	d101      	bne.n	800fcea <xQueueReceive+0xa0>
 800fce6:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800fcea:	f7ff fb2f 	bl	800f34c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fcee:	a901      	add	r1, sp, #4
 800fcf0:	a802      	add	r0, sp, #8
 800fcf2:	f000 fe83 	bl	80109fc <xTaskCheckForTimeOut>
 800fcf6:	2800      	cmp	r0, #0
 800fcf8:	d141      	bne.n	800fd7e <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fcfa:	4620      	mov	r0, r4
 800fcfc:	f7ff fc34 	bl	800f568 <prvIsQueueEmpty>
 800fd00:	b3b8      	cbz	r0, 800fd72 <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fd02:	9901      	ldr	r1, [sp, #4]
 800fd04:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fd08:	f000 fdea 	bl	80108e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fd0c:	4620      	mov	r0, r4
 800fd0e:	f7ff fc80 	bl	800f612 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fd12:	f000 fc8b 	bl	801062c <xTaskResumeAll>
 800fd16:	b948      	cbnz	r0, 800fd2c <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 800fd18:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fd1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd20:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800fd24:	f3bf 8f4f 	dsb	sy
 800fd28:	f3bf 8f6f 	isb	sy
 800fd2c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800fd2e:	f7ff fae9 	bl	800f304 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fd32:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fd34:	2d00      	cmp	r5, #0
 800fd36:	d0bc      	beq.n	800fcb2 <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fd38:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fd3a:	4639      	mov	r1, r7
 800fd3c:	4620      	mov	r0, r4
 800fd3e:	f7ff fc53 	bl	800f5e8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fd42:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd44:	6923      	ldr	r3, [r4, #16]
 800fd46:	b173      	cbz	r3, 800fd66 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd48:	f104 0010 	add.w	r0, r4, #16
 800fd4c:	f000 fe04 	bl	8010958 <xTaskRemoveFromEventList>
 800fd50:	b148      	cbz	r0, 800fd66 <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 800fd52:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fd56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd5a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800fd5e:	f3bf 8f4f 	dsb	sy
 800fd62:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800fd66:	f7ff faf1 	bl	800f34c <vPortExitCritical>
				return pdPASS;
 800fd6a:	2001      	movs	r0, #1
}
 800fd6c:	b004      	add	sp, #16
 800fd6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800fd72:	4620      	mov	r0, r4
 800fd74:	f7ff fc4d 	bl	800f612 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fd78:	f000 fc58 	bl	801062c <xTaskResumeAll>
 800fd7c:	e7d6      	b.n	800fd2c <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 800fd7e:	4620      	mov	r0, r4
 800fd80:	f7ff fc47 	bl	800f612 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fd84:	f000 fc52 	bl	801062c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fd88:	4620      	mov	r0, r4
 800fd8a:	f7ff fbed 	bl	800f568 <prvIsQueueEmpty>
 800fd8e:	2800      	cmp	r0, #0
 800fd90:	d0cc      	beq.n	800fd2c <xQueueReceive+0xe2>
 800fd92:	e792      	b.n	800fcba <xQueueReceive+0x70>

0800fd94 <xQueueSemaphoreTake>:
{
 800fd94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd96:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800fd98:	4604      	mov	r4, r0
{
 800fd9a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800fd9c:	b950      	cbnz	r0, 800fdb4 <xQueueSemaphoreTake+0x20>
 800fd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda2:	b672      	cpsid	i
 800fda4:	f383 8811 	msr	BASEPRI, r3
 800fda8:	f3bf 8f6f 	isb	sy
 800fdac:	f3bf 8f4f 	dsb	sy
 800fdb0:	b662      	cpsie	i
 800fdb2:	e7fe      	b.n	800fdb2 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 800fdb4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800fdb6:	b155      	cbz	r5, 800fdce <xQueueSemaphoreTake+0x3a>
 800fdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdbc:	b672      	cpsid	i
 800fdbe:	f383 8811 	msr	BASEPRI, r3
 800fdc2:	f3bf 8f6f 	isb	sy
 800fdc6:	f3bf 8f4f 	dsb	sy
 800fdca:	b662      	cpsie	i
 800fdcc:	e7fe      	b.n	800fdcc <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fdce:	f000 fe61 	bl	8010a94 <xTaskGetSchedulerState>
 800fdd2:	4606      	mov	r6, r0
 800fdd4:	b960      	cbnz	r0, 800fdf0 <xQueueSemaphoreTake+0x5c>
 800fdd6:	9b01      	ldr	r3, [sp, #4]
 800fdd8:	b16b      	cbz	r3, 800fdf6 <xQueueSemaphoreTake+0x62>
 800fdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdde:	b672      	cpsid	i
 800fde0:	f383 8811 	msr	BASEPRI, r3
 800fde4:	f3bf 8f6f 	isb	sy
 800fde8:	f3bf 8f4f 	dsb	sy
 800fdec:	b662      	cpsie	i
 800fdee:	e7fe      	b.n	800fdee <xQueueSemaphoreTake+0x5a>
 800fdf0:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800fdf2:	2700      	movs	r7, #0
 800fdf4:	e055      	b.n	800fea2 <xQueueSemaphoreTake+0x10e>
 800fdf6:	4605      	mov	r5, r0
 800fdf8:	e7fb      	b.n	800fdf2 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 800fdfa:	9b01      	ldr	r3, [sp, #4]
 800fdfc:	b973      	cbnz	r3, 800fe1c <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fdfe:	b155      	cbz	r5, 800fe16 <xQueueSemaphoreTake+0x82>
 800fe00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe04:	b672      	cpsid	i
 800fe06:	f383 8811 	msr	BASEPRI, r3
 800fe0a:	f3bf 8f6f 	isb	sy
 800fe0e:	f3bf 8f4f 	dsb	sy
 800fe12:	b662      	cpsie	i
 800fe14:	e7fe      	b.n	800fe14 <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 800fe16:	f7ff fa99 	bl	800f34c <vPortExitCritical>
					return errQUEUE_EMPTY;
 800fe1a:	e062      	b.n	800fee2 <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 800fe1c:	b916      	cbnz	r6, 800fe24 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fe1e:	a802      	add	r0, sp, #8
 800fe20:	f000 fde0 	bl	80109e4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800fe24:	f7ff fa92 	bl	800f34c <vPortExitCritical>
		vTaskSuspendAll();
 800fe28:	f000 fb5a 	bl	80104e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fe2c:	f7ff fa6a 	bl	800f304 <vPortEnterCritical>
 800fe30:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fe34:	2bff      	cmp	r3, #255	; 0xff
 800fe36:	d101      	bne.n	800fe3c <xQueueSemaphoreTake+0xa8>
 800fe38:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800fe3c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fe40:	2bff      	cmp	r3, #255	; 0xff
 800fe42:	d101      	bne.n	800fe48 <xQueueSemaphoreTake+0xb4>
 800fe44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fe48:	f7ff fa80 	bl	800f34c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fe4c:	a901      	add	r1, sp, #4
 800fe4e:	a802      	add	r0, sp, #8
 800fe50:	f000 fdd4 	bl	80109fc <xTaskCheckForTimeOut>
 800fe54:	2800      	cmp	r0, #0
 800fe56:	d14d      	bne.n	800fef4 <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fe58:	4620      	mov	r0, r4
 800fe5a:	f7ff fb85 	bl	800f568 <prvIsQueueEmpty>
 800fe5e:	2800      	cmp	r0, #0
 800fe60:	d042      	beq.n	800fee8 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fe62:	6823      	ldr	r3, [r4, #0]
 800fe64:	b93b      	cbnz	r3, 800fe76 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 800fe66:	f7ff fa4d 	bl	800f304 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fe6a:	68a0      	ldr	r0, [r4, #8]
 800fe6c:	f000 fe22 	bl	8010ab4 <xTaskPriorityInherit>
 800fe70:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800fe72:	f7ff fa6b 	bl	800f34c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fe76:	9901      	ldr	r1, [sp, #4]
 800fe78:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fe7c:	f000 fd30 	bl	80108e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fe80:	4620      	mov	r0, r4
 800fe82:	f7ff fbc6 	bl	800f612 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fe86:	f000 fbd1 	bl	801062c <xTaskResumeAll>
 800fe8a:	b948      	cbnz	r0, 800fea0 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 800fe8c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fe90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe94:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800fe98:	f3bf 8f4f 	dsb	sy
 800fe9c:	f3bf 8f6f 	isb	sy
 800fea0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800fea2:	f7ff fa2f 	bl	800f304 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fea6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d0a6      	beq.n	800fdfa <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800feac:	3b01      	subs	r3, #1
 800feae:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800feb0:	6823      	ldr	r3, [r4, #0]
 800feb2:	b913      	cbnz	r3, 800feba <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800feb4:	f000 fedc 	bl	8010c70 <pvTaskIncrementMutexHeldCount>
 800feb8:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800feba:	6923      	ldr	r3, [r4, #16]
 800febc:	b173      	cbz	r3, 800fedc <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800febe:	f104 0010 	add.w	r0, r4, #16
 800fec2:	f000 fd49 	bl	8010958 <xTaskRemoveFromEventList>
 800fec6:	b148      	cbz	r0, 800fedc <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 800fec8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fed0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800fed4:	f3bf 8f4f 	dsb	sy
 800fed8:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800fedc:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800fede:	f7ff fa35 	bl	800f34c <vPortExitCritical>
}
 800fee2:	4628      	mov	r0, r5
 800fee4:	b005      	add	sp, #20
 800fee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 800fee8:	4620      	mov	r0, r4
 800feea:	f7ff fb92 	bl	800f612 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800feee:	f000 fb9d 	bl	801062c <xTaskResumeAll>
 800fef2:	e7d5      	b.n	800fea0 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 800fef4:	4620      	mov	r0, r4
 800fef6:	f7ff fb8c 	bl	800f612 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fefa:	f000 fb97 	bl	801062c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fefe:	4620      	mov	r0, r4
 800ff00:	f7ff fb32 	bl	800f568 <prvIsQueueEmpty>
 800ff04:	2800      	cmp	r0, #0
 800ff06:	d0cb      	beq.n	800fea0 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 800ff08:	2d00      	cmp	r5, #0
 800ff0a:	d0ea      	beq.n	800fee2 <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 800ff0c:	f7ff f9fa 	bl	800f304 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ff10:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ff12:	b119      	cbz	r1, 800ff1c <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ff14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ff16:	6819      	ldr	r1, [r3, #0]
 800ff18:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ff1c:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800ff1e:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ff20:	f000 fe50 	bl	8010bc4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800ff24:	f7ff fa12 	bl	800f34c <vPortExitCritical>
 800ff28:	e7db      	b.n	800fee2 <xQueueSemaphoreTake+0x14e>

0800ff2a <xQueueTakeMutexRecursive>:
	{
 800ff2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 800ff2c:	4604      	mov	r4, r0
 800ff2e:	b950      	cbnz	r0, 800ff46 <xQueueTakeMutexRecursive+0x1c>
 800ff30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff34:	b672      	cpsid	i
 800ff36:	f383 8811 	msr	BASEPRI, r3
 800ff3a:	f3bf 8f6f 	isb	sy
 800ff3e:	f3bf 8f4f 	dsb	sy
 800ff42:	b662      	cpsie	i
 800ff44:	e7fe      	b.n	800ff44 <xQueueTakeMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ff46:	6885      	ldr	r5, [r0, #8]
 800ff48:	9101      	str	r1, [sp, #4]
 800ff4a:	f000 fd9d 	bl	8010a88 <xTaskGetCurrentTaskHandle>
 800ff4e:	4285      	cmp	r5, r0
 800ff50:	9901      	ldr	r1, [sp, #4]
 800ff52:	d105      	bne.n	800ff60 <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ff54:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800ff56:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ff58:	3301      	adds	r3, #1
 800ff5a:	60e3      	str	r3, [r4, #12]
	}
 800ff5c:	b003      	add	sp, #12
 800ff5e:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800ff60:	4620      	mov	r0, r4
 800ff62:	f7ff ff17 	bl	800fd94 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800ff66:	2800      	cmp	r0, #0
 800ff68:	d0f8      	beq.n	800ff5c <xQueueTakeMutexRecursive+0x32>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ff6a:	68e3      	ldr	r3, [r4, #12]
 800ff6c:	3301      	adds	r3, #1
 800ff6e:	60e3      	str	r3, [r4, #12]
		return xReturn;
 800ff70:	e7f4      	b.n	800ff5c <xQueueTakeMutexRecursive+0x32>

0800ff72 <xQueueReceiveFromISR>:
{
 800ff72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff76:	4689      	mov	r9, r1
 800ff78:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800ff7a:	4605      	mov	r5, r0
 800ff7c:	b950      	cbnz	r0, 800ff94 <xQueueReceiveFromISR+0x22>
 800ff7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff82:	b672      	cpsid	i
 800ff84:	f383 8811 	msr	BASEPRI, r3
 800ff88:	f3bf 8f6f 	isb	sy
 800ff8c:	f3bf 8f4f 	dsb	sy
 800ff90:	b662      	cpsie	i
 800ff92:	e7fe      	b.n	800ff92 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ff94:	b961      	cbnz	r1, 800ffb0 <xQueueReceiveFromISR+0x3e>
 800ff96:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ff98:	b153      	cbz	r3, 800ffb0 <xQueueReceiveFromISR+0x3e>
 800ff9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff9e:	b672      	cpsid	i
 800ffa0:	f383 8811 	msr	BASEPRI, r3
 800ffa4:	f3bf 8f6f 	isb	sy
 800ffa8:	f3bf 8f4f 	dsb	sy
 800ffac:	b662      	cpsie	i
 800ffae:	e7fe      	b.n	800ffae <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ffb0:	f7ff faa8 	bl	800f504 <vPortValidateInterruptPriority>
	__asm volatile
 800ffb4:	f3ef 8711 	mrs	r7, BASEPRI
 800ffb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffbc:	b672      	cpsid	i
 800ffbe:	f383 8811 	msr	BASEPRI, r3
 800ffc2:	f3bf 8f6f 	isb	sy
 800ffc6:	f3bf 8f4f 	dsb	sy
 800ffca:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ffcc:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ffce:	b31c      	cbz	r4, 8010018 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 800ffd0:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ffd4:	4649      	mov	r1, r9
 800ffd6:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ffd8:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800ffda:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ffdc:	f7ff fb04 	bl	800f5e8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ffe0:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800ffe2:	1c73      	adds	r3, r6, #1
 800ffe4:	d113      	bne.n	801000e <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ffe6:	692b      	ldr	r3, [r5, #16]
 800ffe8:	b90b      	cbnz	r3, 800ffee <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 800ffea:	2001      	movs	r0, #1
 800ffec:	e00b      	b.n	8010006 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ffee:	f105 0010 	add.w	r0, r5, #16
 800fff2:	f000 fcb1 	bl	8010958 <xTaskRemoveFromEventList>
 800fff6:	2800      	cmp	r0, #0
 800fff8:	d0f7      	beq.n	800ffea <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 800fffa:	f1b8 0f00 	cmp.w	r8, #0
 800fffe:	d0f4      	beq.n	800ffea <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010000:	2001      	movs	r0, #1
 8010002:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8010006:	f387 8811 	msr	BASEPRI, r7
}
 801000a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801000e:	3601      	adds	r6, #1
 8010010:	b276      	sxtb	r6, r6
 8010012:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8010016:	e7e8      	b.n	800ffea <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 8010018:	4620      	mov	r0, r4
 801001a:	e7f4      	b.n	8010006 <xQueueReceiveFromISR+0x94>

0801001c <uxQueueSpacesAvailable>:
{
 801001c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( pxQueue );
 801001e:	4604      	mov	r4, r0
 8010020:	b950      	cbnz	r0, 8010038 <uxQueueSpacesAvailable+0x1c>
	__asm volatile
 8010022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010026:	b672      	cpsid	i
 8010028:	f383 8811 	msr	BASEPRI, r3
 801002c:	f3bf 8f6f 	isb	sy
 8010030:	f3bf 8f4f 	dsb	sy
 8010034:	b662      	cpsie	i
 8010036:	e7fe      	b.n	8010036 <uxQueueSpacesAvailable+0x1a>
	taskENTER_CRITICAL();
 8010038:	f7ff f964 	bl	800f304 <vPortEnterCritical>
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 801003c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801003e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8010040:	1ac0      	subs	r0, r0, r3
 8010042:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8010044:	f7ff f982 	bl	800f34c <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010048:	9801      	ldr	r0, [sp, #4]
 801004a:	b002      	add	sp, #8
 801004c:	bd10      	pop	{r4, pc}
	...

08010050 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010050:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010052:	4a07      	ldr	r2, [pc, #28]	; (8010070 <vQueueAddToRegistry+0x20>)
	{
 8010054:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010056:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 801005a:	b92c      	cbnz	r4, 8010068 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801005c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010060:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010064:	6050      	str	r0, [r2, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010066:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010068:	3301      	adds	r3, #1
 801006a:	2b08      	cmp	r3, #8
 801006c:	d1f3      	bne.n	8010056 <vQueueAddToRegistry+0x6>
 801006e:	e7fa      	b.n	8010066 <vQueueAddToRegistry+0x16>
 8010070:	200265f4 	.word	0x200265f4

08010074 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010074:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010076:	4a08      	ldr	r2, [pc, #32]	; (8010098 <vQueueUnregisterQueue+0x24>)
	{
 8010078:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801007a:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801007e:	684c      	ldr	r4, [r1, #4]
 8010080:	4284      	cmp	r4, r0
 8010082:	d104      	bne.n	801008e <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010084:	2000      	movs	r0, #0
 8010086:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801008a:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801008c:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801008e:	3301      	adds	r3, #1
 8010090:	2b08      	cmp	r3, #8
 8010092:	d1f2      	bne.n	801007a <vQueueUnregisterQueue+0x6>
 8010094:	e7fa      	b.n	801008c <vQueueUnregisterQueue+0x18>
 8010096:	bf00      	nop
 8010098:	200265f4 	.word	0x200265f4

0801009c <vQueueDelete>:
{
 801009c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 801009e:	4604      	mov	r4, r0
 80100a0:	b950      	cbnz	r0, 80100b8 <vQueueDelete+0x1c>
 80100a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a6:	b672      	cpsid	i
 80100a8:	f383 8811 	msr	BASEPRI, r3
 80100ac:	f3bf 8f6f 	isb	sy
 80100b0:	f3bf 8f4f 	dsb	sy
 80100b4:	b662      	cpsie	i
 80100b6:	e7fe      	b.n	80100b6 <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 80100b8:	f7ff ffdc 	bl	8010074 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80100bc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80100c0:	b923      	cbnz	r3, 80100cc <vQueueDelete+0x30>
			vPortFree( pxQueue );
 80100c2:	4620      	mov	r0, r4
}
 80100c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 80100c8:	f7ff b838 	b.w	800f13c <vPortFree>
}
 80100cc:	bd10      	pop	{r4, pc}

080100ce <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80100ce:	b570      	push	{r4, r5, r6, lr}
 80100d0:	4604      	mov	r4, r0
 80100d2:	460d      	mov	r5, r1
 80100d4:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80100d6:	f7ff f915 	bl	800f304 <vPortEnterCritical>
 80100da:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80100de:	2bff      	cmp	r3, #255	; 0xff
 80100e0:	d102      	bne.n	80100e8 <vQueueWaitForMessageRestricted+0x1a>
 80100e2:	2300      	movs	r3, #0
 80100e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80100e8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80100ec:	2bff      	cmp	r3, #255	; 0xff
 80100ee:	d102      	bne.n	80100f6 <vQueueWaitForMessageRestricted+0x28>
 80100f0:	2300      	movs	r3, #0
 80100f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80100f6:	f7ff f929 	bl	800f34c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80100fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80100fc:	b92b      	cbnz	r3, 801010a <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80100fe:	4632      	mov	r2, r6
 8010100:	4629      	mov	r1, r5
 8010102:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010106:	f000 fc07 	bl	8010918 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801010a:	4620      	mov	r0, r4
	}
 801010c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8010110:	f7ff ba7f 	b.w	800f612 <prvUnlockQueue>

08010114 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010118:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801011a:	f7ff f8f3 	bl	800f304 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801011e:	4b2f      	ldr	r3, [pc, #188]	; (80101dc <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8010120:	4e2f      	ldr	r6, [pc, #188]	; (80101e0 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8010122:	681a      	ldr	r2, [r3, #0]
 8010124:	4f2f      	ldr	r7, [pc, #188]	; (80101e4 <prvAddNewTaskToReadyList+0xd0>)
 8010126:	3201      	adds	r2, #1
 8010128:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 801012a:	6835      	ldr	r5, [r6, #0]
 801012c:	2d00      	cmp	r5, #0
 801012e:	d14a      	bne.n	80101c6 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010130:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	2b01      	cmp	r3, #1
 8010136:	d11f      	bne.n	8010178 <prvAddNewTaskToReadyList+0x64>
 8010138:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801013a:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801013c:	4640      	mov	r0, r8
 801013e:	f7ff f839 	bl	800f1b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010142:	f108 0814 	add.w	r8, r8, #20
 8010146:	2d38      	cmp	r5, #56	; 0x38
 8010148:	d1f7      	bne.n	801013a <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 801014a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 801020c <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 801014e:	4d26      	ldr	r5, [pc, #152]	; (80101e8 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8010150:	4640      	mov	r0, r8
 8010152:	f7ff f82f 	bl	800f1b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010156:	4628      	mov	r0, r5
 8010158:	f7ff f82c 	bl	800f1b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801015c:	4823      	ldr	r0, [pc, #140]	; (80101ec <prvAddNewTaskToReadyList+0xd8>)
 801015e:	f7ff f829 	bl	800f1b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010162:	4823      	ldr	r0, [pc, #140]	; (80101f0 <prvAddNewTaskToReadyList+0xdc>)
 8010164:	f7ff f826 	bl	800f1b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010168:	4822      	ldr	r0, [pc, #136]	; (80101f4 <prvAddNewTaskToReadyList+0xe0>)
 801016a:	f7ff f823 	bl	800f1b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801016e:	4b22      	ldr	r3, [pc, #136]	; (80101f8 <prvAddNewTaskToReadyList+0xe4>)
 8010170:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010174:	4b21      	ldr	r3, [pc, #132]	; (80101fc <prvAddNewTaskToReadyList+0xe8>)
 8010176:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8010178:	4a21      	ldr	r2, [pc, #132]	; (8010200 <prvAddNewTaskToReadyList+0xec>)
 801017a:	6813      	ldr	r3, [r2, #0]
 801017c:	3301      	adds	r3, #1
 801017e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8010180:	4a20      	ldr	r2, [pc, #128]	; (8010204 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010182:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8010184:	6811      	ldr	r1, [r2, #0]
 8010186:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010188:	428b      	cmp	r3, r1
 801018a:	d900      	bls.n	801018e <prvAddNewTaskToReadyList+0x7a>
 801018c:	6013      	str	r3, [r2, #0]
 801018e:	2014      	movs	r0, #20
 8010190:	1d21      	adds	r1, r4, #4
 8010192:	fb00 7003 	mla	r0, r0, r3, r7
 8010196:	f7ff f81b 	bl	800f1d0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 801019a:	f7ff f8d7 	bl	800f34c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 801019e:	4b1a      	ldr	r3, [pc, #104]	; (8010208 <prvAddNewTaskToReadyList+0xf4>)
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	b173      	cbz	r3, 80101c2 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80101a4:	6833      	ldr	r3, [r6, #0]
 80101a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80101aa:	429a      	cmp	r2, r3
 80101ac:	d209      	bcs.n	80101c2 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 80101ae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80101b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80101ba:	f3bf 8f4f 	dsb	sy
 80101be:	f3bf 8f6f 	isb	sy
}
 80101c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80101c6:	4b10      	ldr	r3, [pc, #64]	; (8010208 <prvAddNewTaskToReadyList+0xf4>)
 80101c8:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80101ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if( xSchedulerRunning == pdFALSE )
 80101cc:	2a00      	cmp	r2, #0
 80101ce:	d1d3      	bne.n	8010178 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80101d0:	6832      	ldr	r2, [r6, #0]
 80101d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80101d4:	429a      	cmp	r2, r3
 80101d6:	d8cf      	bhi.n	8010178 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 80101d8:	6034      	str	r4, [r6, #0]
 80101da:	e7cd      	b.n	8010178 <prvAddNewTaskToReadyList+0x64>
 80101dc:	20026aa0 	.word	0x20026aa0
 80101e0:	20026634 	.word	0x20026634
 80101e4:	20026640 	.word	0x20026640
 80101e8:	20026acc 	.word	0x20026acc
 80101ec:	20026ae8 	.word	0x20026ae8
 80101f0:	20026b14 	.word	0x20026b14
 80101f4:	20026b00 	.word	0x20026b00
 80101f8:	20026638 	.word	0x20026638
 80101fc:	2002663c 	.word	0x2002663c
 8010200:	20026ab0 	.word	0x20026ab0
 8010204:	20026ab4 	.word	0x20026ab4
 8010208:	20026afc 	.word	0x20026afc
 801020c:	20026ab8 	.word	0x20026ab8

08010210 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010212:	4b15      	ldr	r3, [pc, #84]	; (8010268 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8010214:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010216:	4d15      	ldr	r5, [pc, #84]	; (801026c <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8010218:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 801021a:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801021c:	6828      	ldr	r0, [r5, #0]
 801021e:	3004      	adds	r0, #4
 8010220:	f7fe fff9 	bl	800f216 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010224:	1c73      	adds	r3, r6, #1
 8010226:	d107      	bne.n	8010238 <prvAddCurrentTaskToDelayedList+0x28>
 8010228:	b137      	cbz	r7, 8010238 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801022a:	6829      	ldr	r1, [r5, #0]
 801022c:	4810      	ldr	r0, [pc, #64]	; (8010270 <prvAddCurrentTaskToDelayedList+0x60>)
 801022e:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010230:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010234:	f7fe bfcc 	b.w	800f1d0 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010238:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801023a:	682b      	ldr	r3, [r5, #0]
 801023c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801023e:	d307      	bcc.n	8010250 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010240:	4b0c      	ldr	r3, [pc, #48]	; (8010274 <prvAddCurrentTaskToDelayedList+0x64>)
 8010242:	6818      	ldr	r0, [r3, #0]
 8010244:	6829      	ldr	r1, [r5, #0]
}
 8010246:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801024a:	3104      	adds	r1, #4
 801024c:	f7fe bfcc 	b.w	800f1e8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010250:	4b09      	ldr	r3, [pc, #36]	; (8010278 <prvAddCurrentTaskToDelayedList+0x68>)
 8010252:	6818      	ldr	r0, [r3, #0]
 8010254:	6829      	ldr	r1, [r5, #0]
 8010256:	3104      	adds	r1, #4
 8010258:	f7fe ffc6 	bl	800f1e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801025c:	4b07      	ldr	r3, [pc, #28]	; (801027c <prvAddCurrentTaskToDelayedList+0x6c>)
 801025e:	681a      	ldr	r2, [r3, #0]
 8010260:	42a2      	cmp	r2, r4
 8010262:	d900      	bls.n	8010266 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8010264:	601c      	str	r4, [r3, #0]
}
 8010266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010268:	20026b28 	.word	0x20026b28
 801026c:	20026634 	.word	0x20026634
 8010270:	20026b00 	.word	0x20026b00
 8010274:	2002663c 	.word	0x2002663c
 8010278:	20026638 	.word	0x20026638
 801027c:	20026ae0 	.word	0x20026ae0

08010280 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010280:	4a06      	ldr	r2, [pc, #24]	; (801029c <prvResetNextTaskUnblockTime+0x1c>)
 8010282:	6813      	ldr	r3, [r2, #0]
 8010284:	6819      	ldr	r1, [r3, #0]
 8010286:	4b06      	ldr	r3, [pc, #24]	; (80102a0 <prvResetNextTaskUnblockTime+0x20>)
 8010288:	b919      	cbnz	r1, 8010292 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 801028a:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801028e:	601a      	str	r2, [r3, #0]
}
 8010290:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010292:	6812      	ldr	r2, [r2, #0]
 8010294:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010296:	68d2      	ldr	r2, [r2, #12]
 8010298:	6852      	ldr	r2, [r2, #4]
 801029a:	e7f8      	b.n	801028e <prvResetNextTaskUnblockTime+0xe>
 801029c:	20026638 	.word	0x20026638
 80102a0:	20026ae0 	.word	0x20026ae0

080102a4 <prvDeleteTCB>:
	{
 80102a4:	b510      	push	{r4, lr}
 80102a6:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80102a8:	3058      	adds	r0, #88	; 0x58
 80102aa:	f01b f85d 	bl	802b368 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80102ae:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 80102b2:	b93b      	cbnz	r3, 80102c4 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 80102b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80102b6:	f7fe ff41 	bl	800f13c <vPortFree>
				vPortFree( pxTCB );
 80102ba:	4620      	mov	r0, r4
	}
 80102bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80102c0:	f7fe bf3c 	b.w	800f13c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80102c4:	2b01      	cmp	r3, #1
 80102c6:	d0f8      	beq.n	80102ba <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80102c8:	2b02      	cmp	r3, #2
 80102ca:	d00a      	beq.n	80102e2 <prvDeleteTCB+0x3e>
 80102cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d0:	b672      	cpsid	i
 80102d2:	f383 8811 	msr	BASEPRI, r3
 80102d6:	f3bf 8f6f 	isb	sy
 80102da:	f3bf 8f4f 	dsb	sy
 80102de:	b662      	cpsie	i
 80102e0:	e7fe      	b.n	80102e0 <prvDeleteTCB+0x3c>
	}
 80102e2:	bd10      	pop	{r4, pc}

080102e4 <prvIdleTask>:
{
 80102e4:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80102e6:	4c14      	ldr	r4, [pc, #80]	; (8010338 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102e8:	4f14      	ldr	r7, [pc, #80]	; (801033c <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 80102ea:	4d15      	ldr	r5, [pc, #84]	; (8010340 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80102ec:	6823      	ldr	r3, [r4, #0]
 80102ee:	b983      	cbnz	r3, 8010312 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80102f0:	4b14      	ldr	r3, [pc, #80]	; (8010344 <prvIdleTask+0x60>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	2b01      	cmp	r3, #1
 80102f6:	d909      	bls.n	801030c <prvIdleTask+0x28>
				taskYIELD();
 80102f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80102fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010300:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8010304:	f3bf 8f4f 	dsb	sy
 8010308:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 801030c:	f7f3 f81e 	bl	800334c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8010310:	e7eb      	b.n	80102ea <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8010312:	f7fe fff7 	bl	800f304 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801031a:	1d30      	adds	r0, r6, #4
 801031c:	f7fe ff7b 	bl	800f216 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010320:	682b      	ldr	r3, [r5, #0]
 8010322:	3b01      	subs	r3, #1
 8010324:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010326:	6823      	ldr	r3, [r4, #0]
 8010328:	3b01      	subs	r3, #1
 801032a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 801032c:	f7ff f80e 	bl	800f34c <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8010330:	4630      	mov	r0, r6
 8010332:	f7ff ffb7 	bl	80102a4 <prvDeleteTCB>
 8010336:	e7d9      	b.n	80102ec <prvIdleTask+0x8>
 8010338:	20026aa4 	.word	0x20026aa4
 801033c:	20026b14 	.word	0x20026b14
 8010340:	20026aa0 	.word	0x20026aa0
 8010344:	20026640 	.word	0x20026640

08010348 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801034c:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010350:	4606      	mov	r6, r0
 8010352:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010354:	21a5      	movs	r1, #165	; 0xa5
 8010356:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010358:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801035a:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 801035e:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010362:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010364:	f01a ff92 	bl	802b28c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010368:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801036a:	444b      	add	r3, r9
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801036c:	f023 0907 	bic.w	r9, r3, #7
	if( pcName != NULL )
 8010370:	2d00      	cmp	r5, #0
 8010372:	d043      	beq.n	80103fc <prvInitialiseNewTask.constprop.0+0xb4>
 8010374:	1e6b      	subs	r3, r5, #1
 8010376:	f104 0233 	add.w	r2, r4, #51	; 0x33
 801037a:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801037c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8010380:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8010384:	b109      	cbz	r1, 801038a <prvInitialiseNewTask.constprop.0+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010386:	42ab      	cmp	r3, r5
 8010388:	d1f8      	bne.n	801037c <prvInitialiseNewTask.constprop.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801038a:	2300      	movs	r3, #0
 801038c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010390:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8010392:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010396:	1d20      	adds	r0, r4, #4
 8010398:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 801039a:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 801039e:	bf28      	it	cs
 80103a0:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 80103a2:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80103a4:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103a6:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80103aa:	f7fe ff0e 	bl	800f1ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80103ae:	f104 0018 	add.w	r0, r4, #24
 80103b2:	f7fe ff0a 	bl	800f1ca <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80103b6:	224c      	movs	r2, #76	; 0x4c
 80103b8:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 80103ba:	f8c4 a0a4 	str.w	sl, [r4, #164]	; 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80103be:	f104 0058 	add.w	r0, r4, #88	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80103c2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103c4:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80103c6:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 80103c8:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80103cc:	f884 a0a8 	strb.w	sl, [r4, #168]	; 0xa8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80103d0:	f01a ff5c 	bl	802b28c <memset>
 80103d4:	4b0b      	ldr	r3, [pc, #44]	; (8010404 <prvInitialiseNewTask.constprop.0+0xbc>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80103d6:	4631      	mov	r1, r6
 80103d8:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80103da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80103de:	65e3      	str	r3, [r4, #92]	; 0x5c
 80103e0:	33d0      	adds	r3, #208	; 0xd0
 80103e2:	6622      	str	r2, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80103e4:	463a      	mov	r2, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80103e6:	6663      	str	r3, [r4, #100]	; 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80103e8:	f7fe ff68 	bl	800f2bc <pxPortInitialiseStack>
 80103ec:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80103ee:	f1b8 0f00 	cmp.w	r8, #0
 80103f2:	d001      	beq.n	80103f8 <prvInitialiseNewTask.constprop.0+0xb0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80103f4:	f8c8 4000 	str.w	r4, [r8]
}
 80103f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80103fc:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8010400:	e7c6      	b.n	8010390 <prvInitialiseNewTask.constprop.0+0x48>
 8010402:	bf00      	nop
 8010404:	20028604 	.word	0x20028604

08010408 <xTaskCreateStatic>:
	{
 8010408:	b570      	push	{r4, r5, r6, lr}
 801040a:	b086      	sub	sp, #24
 801040c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8010410:	b955      	cbnz	r5, 8010428 <xTaskCreateStatic+0x20>
 8010412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010416:	b672      	cpsid	i
 8010418:	f383 8811 	msr	BASEPRI, r3
 801041c:	f3bf 8f6f 	isb	sy
 8010420:	f3bf 8f4f 	dsb	sy
 8010424:	b662      	cpsie	i
 8010426:	e7fe      	b.n	8010426 <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8010428:	b954      	cbnz	r4, 8010440 <xTaskCreateStatic+0x38>
 801042a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801042e:	b672      	cpsid	i
 8010430:	f383 8811 	msr	BASEPRI, r3
 8010434:	f3bf 8f6f 	isb	sy
 8010438:	f3bf 8f4f 	dsb	sy
 801043c:	b662      	cpsie	i
 801043e:	e7fe      	b.n	801043e <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 8010440:	26ac      	movs	r6, #172	; 0xac
 8010442:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010444:	9e05      	ldr	r6, [sp, #20]
 8010446:	2eac      	cmp	r6, #172	; 0xac
 8010448:	d00a      	beq.n	8010460 <xTaskCreateStatic+0x58>
 801044a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801044e:	b672      	cpsid	i
 8010450:	f383 8811 	msr	BASEPRI, r3
 8010454:	f3bf 8f6f 	isb	sy
 8010458:	f3bf 8f4f 	dsb	sy
 801045c:	b662      	cpsie	i
 801045e:	e7fe      	b.n	801045e <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010460:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010462:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010464:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010466:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801046a:	ad04      	add	r5, sp, #16
 801046c:	9402      	str	r4, [sp, #8]
 801046e:	9501      	str	r5, [sp, #4]
 8010470:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8010472:	9500      	str	r5, [sp, #0]
 8010474:	f7ff ff68 	bl	8010348 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010478:	4620      	mov	r0, r4
 801047a:	f7ff fe4b 	bl	8010114 <prvAddNewTaskToReadyList>
	}
 801047e:	9804      	ldr	r0, [sp, #16]
 8010480:	b006      	add	sp, #24
 8010482:	bd70      	pop	{r4, r5, r6, pc}

08010484 <xTaskCreate>:
	{
 8010484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010488:	4607      	mov	r7, r0
 801048a:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801048c:	0090      	lsls	r0, r2, #2
	{
 801048e:	4688      	mov	r8, r1
 8010490:	4616      	mov	r6, r2
 8010492:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010494:	f7fe fdbc 	bl	800f010 <pvPortMalloc>
			if( pxStack != NULL )
 8010498:	4605      	mov	r5, r0
 801049a:	b1e8      	cbz	r0, 80104d8 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801049c:	20ac      	movs	r0, #172	; 0xac
 801049e:	f7fe fdb7 	bl	800f010 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80104a2:	4604      	mov	r4, r0
 80104a4:	b1a8      	cbz	r0, 80104d2 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80104a6:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 80104a8:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80104aa:	4632      	mov	r2, r6
 80104ac:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80104ae:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80104b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80104b4:	9002      	str	r0, [sp, #8]
 80104b6:	4638      	mov	r0, r7
 80104b8:	9301      	str	r3, [sp, #4]
 80104ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80104bc:	9300      	str	r3, [sp, #0]
 80104be:	464b      	mov	r3, r9
 80104c0:	f7ff ff42 	bl	8010348 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80104c4:	4620      	mov	r0, r4
 80104c6:	f7ff fe25 	bl	8010114 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80104ca:	2001      	movs	r0, #1
	}
 80104cc:	b005      	add	sp, #20
 80104ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80104d2:	4628      	mov	r0, r5
 80104d4:	f7fe fe32 	bl	800f13c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80104d8:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80104dc:	e7f6      	b.n	80104cc <xTaskCreate+0x48>
	...

080104e0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80104e0:	4a02      	ldr	r2, [pc, #8]	; (80104ec <vTaskSuspendAll+0xc>)
 80104e2:	6813      	ldr	r3, [r2, #0]
 80104e4:	3301      	adds	r3, #1
 80104e6:	6013      	str	r3, [r2, #0]
}
 80104e8:	4770      	bx	lr
 80104ea:	bf00      	nop
 80104ec:	20026aac 	.word	0x20026aac

080104f0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80104f0:	4b01      	ldr	r3, [pc, #4]	; (80104f8 <xTaskGetTickCount+0x8>)
 80104f2:	6818      	ldr	r0, [r3, #0]
}
 80104f4:	4770      	bx	lr
 80104f6:	bf00      	nop
 80104f8:	20026b28 	.word	0x20026b28

080104fc <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80104fc:	4b40      	ldr	r3, [pc, #256]	; (8010600 <xTaskIncrementTick+0x104>)
 80104fe:	681b      	ldr	r3, [r3, #0]
{
 8010500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010504:	2b00      	cmp	r3, #0
 8010506:	d174      	bne.n	80105f2 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010508:	4b3e      	ldr	r3, [pc, #248]	; (8010604 <xTaskIncrementTick+0x108>)
 801050a:	681d      	ldr	r5, [r3, #0]
 801050c:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 801050e:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010510:	b9cd      	cbnz	r5, 8010546 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8010512:	4b3d      	ldr	r3, [pc, #244]	; (8010608 <xTaskIncrementTick+0x10c>)
 8010514:	681a      	ldr	r2, [r3, #0]
 8010516:	6812      	ldr	r2, [r2, #0]
 8010518:	b152      	cbz	r2, 8010530 <xTaskIncrementTick+0x34>
 801051a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801051e:	b672      	cpsid	i
 8010520:	f383 8811 	msr	BASEPRI, r3
 8010524:	f3bf 8f6f 	isb	sy
 8010528:	f3bf 8f4f 	dsb	sy
 801052c:	b662      	cpsie	i
 801052e:	e7fe      	b.n	801052e <xTaskIncrementTick+0x32>
 8010530:	4a36      	ldr	r2, [pc, #216]	; (801060c <xTaskIncrementTick+0x110>)
 8010532:	6819      	ldr	r1, [r3, #0]
 8010534:	6810      	ldr	r0, [r2, #0]
 8010536:	6018      	str	r0, [r3, #0]
 8010538:	6011      	str	r1, [r2, #0]
 801053a:	4a35      	ldr	r2, [pc, #212]	; (8010610 <xTaskIncrementTick+0x114>)
 801053c:	6813      	ldr	r3, [r2, #0]
 801053e:	3301      	adds	r3, #1
 8010540:	6013      	str	r3, [r2, #0]
 8010542:	f7ff fe9d 	bl	8010280 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010546:	4e33      	ldr	r6, [pc, #204]	; (8010614 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8010548:	2400      	movs	r4, #0
 801054a:	4f33      	ldr	r7, [pc, #204]	; (8010618 <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 801054c:	6833      	ldr	r3, [r6, #0]
 801054e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8010624 <xTaskIncrementTick+0x128>
 8010552:	42ab      	cmp	r3, r5
 8010554:	d911      	bls.n	801057a <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010556:	f8d8 3000 	ldr.w	r3, [r8]
 801055a:	2214      	movs	r2, #20
 801055c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801055e:	4353      	muls	r3, r2
 8010560:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8010562:	2b02      	cmp	r3, #2
 8010564:	bf28      	it	cs
 8010566:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8010568:	4b2c      	ldr	r3, [pc, #176]	; (801061c <xTaskIncrementTick+0x120>)
 801056a:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 801056c:	2b00      	cmp	r3, #0
}
 801056e:	bf0c      	ite	eq
 8010570:	4620      	moveq	r0, r4
 8010572:	2001      	movne	r0, #1
 8010574:	b003      	add	sp, #12
 8010576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801057a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8010608 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 801057e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8010628 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010582:	f8d9 3000 	ldr.w	r3, [r9]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	b91b      	cbnz	r3, 8010592 <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801058a:	f04f 33ff 	mov.w	r3, #4294967295
 801058e:	6033      	str	r3, [r6, #0]
					break;
 8010590:	e7e1      	b.n	8010556 <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010592:	f8d9 3000 	ldr.w	r3, [r9]
 8010596:	68db      	ldr	r3, [r3, #12]
 8010598:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801059c:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 80105a0:	4295      	cmp	r5, r2
 80105a2:	d201      	bcs.n	80105a8 <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 80105a4:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80105a6:	e7d6      	b.n	8010556 <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80105a8:	f10b 0104 	add.w	r1, fp, #4
 80105ac:	4608      	mov	r0, r1
 80105ae:	9101      	str	r1, [sp, #4]
 80105b0:	f7fe fe31 	bl	800f216 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80105b4:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 80105b8:	9901      	ldr	r1, [sp, #4]
 80105ba:	b122      	cbz	r2, 80105c6 <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80105bc:	f10b 0018 	add.w	r0, fp, #24
 80105c0:	f7fe fe29 	bl	800f216 <uxListRemove>
 80105c4:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 80105c6:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 80105ca:	f8da 2000 	ldr.w	r2, [sl]
 80105ce:	4290      	cmp	r0, r2
 80105d0:	d901      	bls.n	80105d6 <xTaskIncrementTick+0xda>
 80105d2:	f8ca 0000 	str.w	r0, [sl]
 80105d6:	2314      	movs	r3, #20
 80105d8:	fb03 7000 	mla	r0, r3, r0, r7
 80105dc:	f7fe fdf8 	bl	800f1d0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80105e0:	f8d8 1000 	ldr.w	r1, [r8]
 80105e4:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 80105e8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80105ea:	429a      	cmp	r2, r3
 80105ec:	bf28      	it	cs
 80105ee:	2401      	movcs	r4, #1
 80105f0:	e7c7      	b.n	8010582 <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 80105f2:	4a0b      	ldr	r2, [pc, #44]	; (8010620 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 80105f4:	2400      	movs	r4, #0
		++uxPendedTicks;
 80105f6:	6813      	ldr	r3, [r2, #0]
 80105f8:	3301      	adds	r3, #1
 80105fa:	6013      	str	r3, [r2, #0]
 80105fc:	e7b4      	b.n	8010568 <xTaskIncrementTick+0x6c>
 80105fe:	bf00      	nop
 8010600:	20026aac 	.word	0x20026aac
 8010604:	20026b28 	.word	0x20026b28
 8010608:	20026638 	.word	0x20026638
 801060c:	2002663c 	.word	0x2002663c
 8010610:	20026ae4 	.word	0x20026ae4
 8010614:	20026ae0 	.word	0x20026ae0
 8010618:	20026640 	.word	0x20026640
 801061c:	20026b2c 	.word	0x20026b2c
 8010620:	20026aa8 	.word	0x20026aa8
 8010624:	20026634 	.word	0x20026634
 8010628:	20026ab4 	.word	0x20026ab4

0801062c <xTaskResumeAll>:
{
 801062c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 801062e:	4c32      	ldr	r4, [pc, #200]	; (80106f8 <xTaskResumeAll+0xcc>)
 8010630:	6823      	ldr	r3, [r4, #0]
 8010632:	b953      	cbnz	r3, 801064a <xTaskResumeAll+0x1e>
 8010634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010638:	b672      	cpsid	i
 801063a:	f383 8811 	msr	BASEPRI, r3
 801063e:	f3bf 8f6f 	isb	sy
 8010642:	f3bf 8f4f 	dsb	sy
 8010646:	b662      	cpsie	i
 8010648:	e7fe      	b.n	8010648 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 801064a:	f7fe fe5b 	bl	800f304 <vPortEnterCritical>
		--uxSchedulerSuspended;
 801064e:	6823      	ldr	r3, [r4, #0]
 8010650:	3b01      	subs	r3, #1
 8010652:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010654:	6824      	ldr	r4, [r4, #0]
 8010656:	b12c      	cbz	r4, 8010664 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 8010658:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801065a:	f7fe fe77 	bl	800f34c <vPortExitCritical>
}
 801065e:	4620      	mov	r0, r4
 8010660:	b003      	add	sp, #12
 8010662:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010664:	4b25      	ldr	r3, [pc, #148]	; (80106fc <xTaskResumeAll+0xd0>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d0f5      	beq.n	8010658 <xTaskResumeAll+0x2c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801066c:	4d24      	ldr	r5, [pc, #144]	; (8010700 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 801066e:	4e25      	ldr	r6, [pc, #148]	; (8010704 <xTaskResumeAll+0xd8>)
 8010670:	4f25      	ldr	r7, [pc, #148]	; (8010708 <xTaskResumeAll+0xdc>)
 8010672:	e01e      	b.n	80106b2 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010674:	68eb      	ldr	r3, [r5, #12]
 8010676:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010678:	f104 0018 	add.w	r0, r4, #24
 801067c:	f7fe fdcb 	bl	800f216 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010680:	1d21      	adds	r1, r4, #4
 8010682:	4608      	mov	r0, r1
 8010684:	9101      	str	r1, [sp, #4]
 8010686:	f7fe fdc6 	bl	800f216 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801068a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801068c:	6832      	ldr	r2, [r6, #0]
 801068e:	9901      	ldr	r1, [sp, #4]
 8010690:	4293      	cmp	r3, r2
 8010692:	d900      	bls.n	8010696 <xTaskResumeAll+0x6a>
 8010694:	6033      	str	r3, [r6, #0]
 8010696:	2014      	movs	r0, #20
 8010698:	fb00 7003 	mla	r0, r0, r3, r7
 801069c:	f7fe fd98 	bl	800f1d0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80106a0:	4b1a      	ldr	r3, [pc, #104]	; (801070c <xTaskResumeAll+0xe0>)
 80106a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d302      	bcc.n	80106b2 <xTaskResumeAll+0x86>
						xYieldPending = pdTRUE;
 80106ac:	4b18      	ldr	r3, [pc, #96]	; (8010710 <xTaskResumeAll+0xe4>)
 80106ae:	2201      	movs	r2, #1
 80106b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80106b2:	682b      	ldr	r3, [r5, #0]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d1dd      	bne.n	8010674 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80106b8:	b10c      	cbz	r4, 80106be <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 80106ba:	f7ff fde1 	bl	8010280 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80106be:	4d15      	ldr	r5, [pc, #84]	; (8010714 <xTaskResumeAll+0xe8>)
 80106c0:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80106c2:	b144      	cbz	r4, 80106d6 <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 80106c4:	4e12      	ldr	r6, [pc, #72]	; (8010710 <xTaskResumeAll+0xe4>)
 80106c6:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80106c8:	f7ff ff18 	bl	80104fc <xTaskIncrementTick>
 80106cc:	b100      	cbz	r0, 80106d0 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 80106ce:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80106d0:	3c01      	subs	r4, #1
 80106d2:	d1f9      	bne.n	80106c8 <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 80106d4:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80106d6:	4b0e      	ldr	r3, [pc, #56]	; (8010710 <xTaskResumeAll+0xe4>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d0bc      	beq.n	8010658 <xTaskResumeAll+0x2c>
					taskYIELD_IF_USING_PREEMPTION();
 80106de:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80106e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80106ea:	f3bf 8f4f 	dsb	sy
 80106ee:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80106f2:	2401      	movs	r4, #1
 80106f4:	e7b1      	b.n	801065a <xTaskResumeAll+0x2e>
 80106f6:	bf00      	nop
 80106f8:	20026aac 	.word	0x20026aac
 80106fc:	20026aa0 	.word	0x20026aa0
 8010700:	20026ae8 	.word	0x20026ae8
 8010704:	20026ab4 	.word	0x20026ab4
 8010708:	20026640 	.word	0x20026640
 801070c:	20026634 	.word	0x20026634
 8010710:	20026b2c 	.word	0x20026b2c
 8010714:	20026aa8 	.word	0x20026aa8

08010718 <vTaskDelay>:
	{
 8010718:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 801071a:	b950      	cbnz	r0, 8010732 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 801071c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010724:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8010728:	f3bf 8f4f 	dsb	sy
 801072c:	f3bf 8f6f 	isb	sy
	}
 8010730:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8010732:	4b0b      	ldr	r3, [pc, #44]	; (8010760 <vTaskDelay+0x48>)
 8010734:	6819      	ldr	r1, [r3, #0]
 8010736:	b151      	cbz	r1, 801074e <vTaskDelay+0x36>
 8010738:	f04f 0350 	mov.w	r3, #80	; 0x50
 801073c:	b672      	cpsid	i
 801073e:	f383 8811 	msr	BASEPRI, r3
 8010742:	f3bf 8f6f 	isb	sy
 8010746:	f3bf 8f4f 	dsb	sy
 801074a:	b662      	cpsie	i
 801074c:	e7fe      	b.n	801074c <vTaskDelay+0x34>
			vTaskSuspendAll();
 801074e:	f7ff fec7 	bl	80104e0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010752:	f7ff fd5d 	bl	8010210 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8010756:	f7ff ff69 	bl	801062c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 801075a:	2800      	cmp	r0, #0
 801075c:	d0de      	beq.n	801071c <vTaskDelay+0x4>
 801075e:	e7e7      	b.n	8010730 <vTaskDelay+0x18>
 8010760:	20026aac 	.word	0x20026aac

08010764 <vTaskSetApplicationTaskTag>:
	{
 8010764:	b538      	push	{r3, r4, r5, lr}
 8010766:	460d      	mov	r5, r1
		if( xTask == NULL )
 8010768:	4604      	mov	r4, r0
 801076a:	b908      	cbnz	r0, 8010770 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 801076c:	4b04      	ldr	r3, [pc, #16]	; (8010780 <vTaskSetApplicationTaskTag+0x1c>)
 801076e:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 8010770:	f7fe fdc8 	bl	800f304 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8010774:	6565      	str	r5, [r4, #84]	; 0x54
	}
 8010776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 801077a:	f7fe bde7 	b.w	800f34c <vPortExitCritical>
 801077e:	bf00      	nop
 8010780:	20026634 	.word	0x20026634

08010784 <xTaskCallApplicationTaskHook>:
	{
 8010784:	4603      	mov	r3, r0
 8010786:	4608      	mov	r0, r1
		if( xTask == NULL )
 8010788:	b90b      	cbnz	r3, 801078e <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 801078a:	4b03      	ldr	r3, [pc, #12]	; (8010798 <xTaskCallApplicationTaskHook+0x14>)
 801078c:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 801078e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010790:	b103      	cbz	r3, 8010794 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 8010792:	4718      	bx	r3
	}
 8010794:	4618      	mov	r0, r3
 8010796:	4770      	bx	lr
 8010798:	20026634 	.word	0x20026634

0801079c <vTaskStartScheduler>:
{
 801079c:	b510      	push	{r4, lr}
 801079e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80107a0:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80107a2:	aa07      	add	r2, sp, #28
 80107a4:	a906      	add	r1, sp, #24
 80107a6:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80107a8:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80107ac:	f7fe fbf2 	bl	800ef94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80107b0:	9b05      	ldr	r3, [sp, #20]
 80107b2:	9a07      	ldr	r2, [sp, #28]
 80107b4:	9302      	str	r3, [sp, #8]
 80107b6:	9b06      	ldr	r3, [sp, #24]
 80107b8:	491d      	ldr	r1, [pc, #116]	; (8010830 <vTaskStartScheduler+0x94>)
 80107ba:	481e      	ldr	r0, [pc, #120]	; (8010834 <vTaskStartScheduler+0x98>)
 80107bc:	e9cd 4300 	strd	r4, r3, [sp]
 80107c0:	4623      	mov	r3, r4
 80107c2:	f7ff fe21 	bl	8010408 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80107c6:	2800      	cmp	r0, #0
 80107c8:	d030      	beq.n	801082c <vTaskStartScheduler+0x90>
			xReturn = xTimerCreateTimerTask();
 80107ca:	f000 faaf 	bl	8010d2c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80107ce:	2801      	cmp	r0, #1
 80107d0:	d11f      	bne.n	8010812 <vTaskStartScheduler+0x76>
 80107d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107d6:	b672      	cpsid	i
 80107d8:	f383 8811 	msr	BASEPRI, r3
 80107dc:	f3bf 8f6f 	isb	sy
 80107e0:	f3bf 8f4f 	dsb	sy
 80107e4:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80107e6:	4a14      	ldr	r2, [pc, #80]	; (8010838 <vTaskStartScheduler+0x9c>)
 80107e8:	4914      	ldr	r1, [pc, #80]	; (801083c <vTaskStartScheduler+0xa0>)
 80107ea:	6813      	ldr	r3, [r2, #0]
 80107ec:	3358      	adds	r3, #88	; 0x58
 80107ee:	600b      	str	r3, [r1, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80107f0:	f04f 31ff 	mov.w	r1, #4294967295
 80107f4:	4b12      	ldr	r3, [pc, #72]	; (8010840 <vTaskStartScheduler+0xa4>)
 80107f6:	6019      	str	r1, [r3, #0]
		traceTASK_SWITCHED_IN();
 80107f8:	4621      	mov	r1, r4
		xSchedulerRunning = pdTRUE;
 80107fa:	4b12      	ldr	r3, [pc, #72]	; (8010844 <vTaskStartScheduler+0xa8>)
 80107fc:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80107fe:	4b12      	ldr	r3, [pc, #72]	; (8010848 <vTaskStartScheduler+0xac>)
 8010800:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 8010802:	6810      	ldr	r0, [r2, #0]
 8010804:	f7ff ffbe 	bl	8010784 <xTaskCallApplicationTaskHook>
}
 8010808:	b008      	add	sp, #32
 801080a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 801080e:	f7fe be13 	b.w	800f438 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010812:	3001      	adds	r0, #1
 8010814:	d10a      	bne.n	801082c <vTaskStartScheduler+0x90>
 8010816:	f04f 0350 	mov.w	r3, #80	; 0x50
 801081a:	b672      	cpsid	i
 801081c:	f383 8811 	msr	BASEPRI, r3
 8010820:	f3bf 8f6f 	isb	sy
 8010824:	f3bf 8f4f 	dsb	sy
 8010828:	b662      	cpsie	i
 801082a:	e7fe      	b.n	801082a <vTaskStartScheduler+0x8e>
}
 801082c:	b008      	add	sp, #32
 801082e:	bd10      	pop	{r4, pc}
 8010830:	0802ffb4 	.word	0x0802ffb4
 8010834:	080102e5 	.word	0x080102e5
 8010838:	20026634 	.word	0x20026634
 801083c:	20000148 	.word	0x20000148
 8010840:	20026ae0 	.word	0x20026ae0
 8010844:	20026afc 	.word	0x20026afc
 8010848:	20026b28 	.word	0x20026b28

0801084c <vTaskSwitchContext>:
{
 801084c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801084e:	4b1e      	ldr	r3, [pc, #120]	; (80108c8 <vTaskSwitchContext+0x7c>)
 8010850:	681a      	ldr	r2, [r3, #0]
 8010852:	4b1e      	ldr	r3, [pc, #120]	; (80108cc <vTaskSwitchContext+0x80>)
 8010854:	b112      	cbz	r2, 801085c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8010856:	2201      	movs	r2, #1
 8010858:	601a      	str	r2, [r3, #0]
}
 801085a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 801085c:	4c1c      	ldr	r4, [pc, #112]	; (80108d0 <vTaskSwitchContext+0x84>)
 801085e:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010860:	4e1c      	ldr	r6, [pc, #112]	; (80108d4 <vTaskSwitchContext+0x88>)
 8010862:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 8010864:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8010866:	6820      	ldr	r0, [r4, #0]
 8010868:	f7ff ff8c 	bl	8010784 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801086c:	6832      	ldr	r2, [r6, #0]
 801086e:	491a      	ldr	r1, [pc, #104]	; (80108d8 <vTaskSwitchContext+0x8c>)
 8010870:	fb07 f302 	mul.w	r3, r7, r2
 8010874:	58cd      	ldr	r5, [r1, r3]
 8010876:	18c8      	adds	r0, r1, r3
 8010878:	b1c5      	cbz	r5, 80108ac <vTaskSwitchContext+0x60>
 801087a:	6845      	ldr	r5, [r0, #4]
 801087c:	3308      	adds	r3, #8
 801087e:	686d      	ldr	r5, [r5, #4]
 8010880:	440b      	add	r3, r1
 8010882:	429d      	cmp	r5, r3
 8010884:	6045      	str	r5, [r0, #4]
 8010886:	bf04      	itt	eq
 8010888:	686b      	ldreq	r3, [r5, #4]
 801088a:	6043      	streq	r3, [r0, #4]
 801088c:	2314      	movs	r3, #20
 801088e:	fb03 1102 	mla	r1, r3, r2, r1
 8010892:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 8010894:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010896:	68db      	ldr	r3, [r3, #12]
 8010898:	6023      	str	r3, [r4, #0]
 801089a:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 801089c:	6820      	ldr	r0, [r4, #0]
 801089e:	f7ff ff71 	bl	8010784 <xTaskCallApplicationTaskHook>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80108a2:	6823      	ldr	r3, [r4, #0]
 80108a4:	4a0d      	ldr	r2, [pc, #52]	; (80108dc <vTaskSwitchContext+0x90>)
 80108a6:	3358      	adds	r3, #88	; 0x58
 80108a8:	6013      	str	r3, [r2, #0]
}
 80108aa:	e7d6      	b.n	801085a <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80108ac:	b952      	cbnz	r2, 80108c4 <vTaskSwitchContext+0x78>
 80108ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108b2:	b672      	cpsid	i
 80108b4:	f383 8811 	msr	BASEPRI, r3
 80108b8:	f3bf 8f6f 	isb	sy
 80108bc:	f3bf 8f4f 	dsb	sy
 80108c0:	b662      	cpsie	i
 80108c2:	e7fe      	b.n	80108c2 <vTaskSwitchContext+0x76>
 80108c4:	3a01      	subs	r2, #1
 80108c6:	e7d3      	b.n	8010870 <vTaskSwitchContext+0x24>
 80108c8:	20026aac 	.word	0x20026aac
 80108cc:	20026b2c 	.word	0x20026b2c
 80108d0:	20026634 	.word	0x20026634
 80108d4:	20026ab4 	.word	0x20026ab4
 80108d8:	20026640 	.word	0x20026640
 80108dc:	20000148 	.word	0x20000148

080108e0 <vTaskPlaceOnEventList>:
{
 80108e0:	b510      	push	{r4, lr}
 80108e2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80108e4:	b950      	cbnz	r0, 80108fc <vTaskPlaceOnEventList+0x1c>
 80108e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108ea:	b672      	cpsid	i
 80108ec:	f383 8811 	msr	BASEPRI, r3
 80108f0:	f3bf 8f6f 	isb	sy
 80108f4:	f3bf 8f4f 	dsb	sy
 80108f8:	b662      	cpsie	i
 80108fa:	e7fe      	b.n	80108fa <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80108fc:	4b05      	ldr	r3, [pc, #20]	; (8010914 <vTaskPlaceOnEventList+0x34>)
 80108fe:	6819      	ldr	r1, [r3, #0]
 8010900:	3118      	adds	r1, #24
 8010902:	f7fe fc71 	bl	800f1e8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010906:	4620      	mov	r0, r4
 8010908:	2101      	movs	r1, #1
}
 801090a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801090e:	f7ff bc7f 	b.w	8010210 <prvAddCurrentTaskToDelayedList>
 8010912:	bf00      	nop
 8010914:	20026634 	.word	0x20026634

08010918 <vTaskPlaceOnEventListRestricted>:
	{
 8010918:	b538      	push	{r3, r4, r5, lr}
 801091a:	460d      	mov	r5, r1
 801091c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 801091e:	b950      	cbnz	r0, 8010936 <vTaskPlaceOnEventListRestricted+0x1e>
 8010920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010924:	b672      	cpsid	i
 8010926:	f383 8811 	msr	BASEPRI, r3
 801092a:	f3bf 8f6f 	isb	sy
 801092e:	f3bf 8f4f 	dsb	sy
 8010932:	b662      	cpsie	i
 8010934:	e7fe      	b.n	8010934 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010936:	4b07      	ldr	r3, [pc, #28]	; (8010954 <vTaskPlaceOnEventListRestricted+0x3c>)
 8010938:	6819      	ldr	r1, [r3, #0]
 801093a:	3118      	adds	r1, #24
 801093c:	f7fe fc48 	bl	800f1d0 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8010940:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010942:	4621      	mov	r1, r4
 8010944:	bf0c      	ite	eq
 8010946:	4628      	moveq	r0, r5
 8010948:	f04f 30ff 	movne.w	r0, #4294967295
	}
 801094c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010950:	f7ff bc5e 	b.w	8010210 <prvAddCurrentTaskToDelayedList>
 8010954:	20026634 	.word	0x20026634

08010958 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010958:	68c3      	ldr	r3, [r0, #12]
{
 801095a:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801095c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 801095e:	b954      	cbnz	r4, 8010976 <xTaskRemoveFromEventList+0x1e>
 8010960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010964:	b672      	cpsid	i
 8010966:	f383 8811 	msr	BASEPRI, r3
 801096a:	f3bf 8f6f 	isb	sy
 801096e:	f3bf 8f4f 	dsb	sy
 8010972:	b662      	cpsie	i
 8010974:	e7fe      	b.n	8010974 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010976:	f104 0118 	add.w	r1, r4, #24
 801097a:	4608      	mov	r0, r1
 801097c:	9101      	str	r1, [sp, #4]
 801097e:	f7fe fc4a 	bl	800f216 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010982:	4b12      	ldr	r3, [pc, #72]	; (80109cc <xTaskRemoveFromEventList+0x74>)
 8010984:	9901      	ldr	r1, [sp, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	b9e3      	cbnz	r3, 80109c4 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801098a:	1d21      	adds	r1, r4, #4
 801098c:	4608      	mov	r0, r1
 801098e:	9101      	str	r1, [sp, #4]
 8010990:	f7fe fc41 	bl	800f216 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010994:	4a0e      	ldr	r2, [pc, #56]	; (80109d0 <xTaskRemoveFromEventList+0x78>)
 8010996:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010998:	6810      	ldr	r0, [r2, #0]
 801099a:	9901      	ldr	r1, [sp, #4]
 801099c:	4283      	cmp	r3, r0
 801099e:	d900      	bls.n	80109a2 <xTaskRemoveFromEventList+0x4a>
 80109a0:	6013      	str	r3, [r2, #0]
 80109a2:	4a0c      	ldr	r2, [pc, #48]	; (80109d4 <xTaskRemoveFromEventList+0x7c>)
 80109a4:	2014      	movs	r0, #20
 80109a6:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80109aa:	f7fe fc11 	bl	800f1d0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80109ae:	4b0a      	ldr	r3, [pc, #40]	; (80109d8 <xTaskRemoveFromEventList+0x80>)
 80109b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109b6:	429a      	cmp	r2, r3
 80109b8:	d906      	bls.n	80109c8 <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 80109ba:	2001      	movs	r0, #1
 80109bc:	4b07      	ldr	r3, [pc, #28]	; (80109dc <xTaskRemoveFromEventList+0x84>)
 80109be:	6018      	str	r0, [r3, #0]
}
 80109c0:	b002      	add	sp, #8
 80109c2:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80109c4:	4806      	ldr	r0, [pc, #24]	; (80109e0 <xTaskRemoveFromEventList+0x88>)
 80109c6:	e7f0      	b.n	80109aa <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 80109c8:	2000      	movs	r0, #0
	return xReturn;
 80109ca:	e7f9      	b.n	80109c0 <xTaskRemoveFromEventList+0x68>
 80109cc:	20026aac 	.word	0x20026aac
 80109d0:	20026ab4 	.word	0x20026ab4
 80109d4:	20026640 	.word	0x20026640
 80109d8:	20026634 	.word	0x20026634
 80109dc:	20026b2c 	.word	0x20026b2c
 80109e0:	20026ae8 	.word	0x20026ae8

080109e4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80109e4:	4b03      	ldr	r3, [pc, #12]	; (80109f4 <vTaskInternalSetTimeOutState+0x10>)
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80109ea:	4b03      	ldr	r3, [pc, #12]	; (80109f8 <vTaskInternalSetTimeOutState+0x14>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	6043      	str	r3, [r0, #4]
}
 80109f0:	4770      	bx	lr
 80109f2:	bf00      	nop
 80109f4:	20026ae4 	.word	0x20026ae4
 80109f8:	20026b28 	.word	0x20026b28

080109fc <xTaskCheckForTimeOut>:
{
 80109fc:	b570      	push	{r4, r5, r6, lr}
 80109fe:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8010a00:	4605      	mov	r5, r0
 8010a02:	b950      	cbnz	r0, 8010a1a <xTaskCheckForTimeOut+0x1e>
 8010a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a08:	b672      	cpsid	i
 8010a0a:	f383 8811 	msr	BASEPRI, r3
 8010a0e:	f3bf 8f6f 	isb	sy
 8010a12:	f3bf 8f4f 	dsb	sy
 8010a16:	b662      	cpsie	i
 8010a18:	e7fe      	b.n	8010a18 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8010a1a:	b951      	cbnz	r1, 8010a32 <xTaskCheckForTimeOut+0x36>
 8010a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a20:	b672      	cpsid	i
 8010a22:	f383 8811 	msr	BASEPRI, r3
 8010a26:	f3bf 8f6f 	isb	sy
 8010a2a:	f3bf 8f4f 	dsb	sy
 8010a2e:	b662      	cpsie	i
 8010a30:	e7fe      	b.n	8010a30 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8010a32:	f7fe fc67 	bl	800f304 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8010a36:	4b0f      	ldr	r3, [pc, #60]	; (8010a74 <xTaskCheckForTimeOut+0x78>)
 8010a38:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8010a3a:	6823      	ldr	r3, [r4, #0]
 8010a3c:	1c5a      	adds	r2, r3, #1
 8010a3e:	d010      	beq.n	8010a62 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010a40:	480d      	ldr	r0, [pc, #52]	; (8010a78 <xTaskCheckForTimeOut+0x7c>)
 8010a42:	682e      	ldr	r6, [r5, #0]
 8010a44:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010a46:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010a48:	4286      	cmp	r6, r0
 8010a4a:	d001      	beq.n	8010a50 <xTaskCheckForTimeOut+0x54>
 8010a4c:	428a      	cmp	r2, r1
 8010a4e:	d90f      	bls.n	8010a70 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010a50:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010a52:	4283      	cmp	r3, r0
 8010a54:	d90a      	bls.n	8010a6c <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 8010a56:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010a58:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8010a5a:	4413      	add	r3, r2
 8010a5c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010a5e:	f7ff ffc1 	bl	80109e4 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8010a62:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8010a64:	f7fe fc72 	bl	800f34c <vPortExitCritical>
}
 8010a68:	4620      	mov	r0, r4
 8010a6a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8010a70:	2401      	movs	r4, #1
 8010a72:	e7f7      	b.n	8010a64 <xTaskCheckForTimeOut+0x68>
 8010a74:	20026b28 	.word	0x20026b28
 8010a78:	20026ae4 	.word	0x20026ae4

08010a7c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8010a7c:	4b01      	ldr	r3, [pc, #4]	; (8010a84 <vTaskMissedYield+0x8>)
 8010a7e:	2201      	movs	r2, #1
 8010a80:	601a      	str	r2, [r3, #0]
}
 8010a82:	4770      	bx	lr
 8010a84:	20026b2c 	.word	0x20026b2c

08010a88 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8010a88:	4b01      	ldr	r3, [pc, #4]	; (8010a90 <xTaskGetCurrentTaskHandle+0x8>)
 8010a8a:	6818      	ldr	r0, [r3, #0]
	}
 8010a8c:	4770      	bx	lr
 8010a8e:	bf00      	nop
 8010a90:	20026634 	.word	0x20026634

08010a94 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8010a94:	4b05      	ldr	r3, [pc, #20]	; (8010aac <xTaskGetSchedulerState+0x18>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	b133      	cbz	r3, 8010aa8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a9a:	4b05      	ldr	r3, [pc, #20]	; (8010ab0 <xTaskGetSchedulerState+0x1c>)
 8010a9c:	6818      	ldr	r0, [r3, #0]
 8010a9e:	fab0 f080 	clz	r0, r0
 8010aa2:	0940      	lsrs	r0, r0, #5
 8010aa4:	0040      	lsls	r0, r0, #1
 8010aa6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010aa8:	2001      	movs	r0, #1
	}
 8010aaa:	4770      	bx	lr
 8010aac:	20026afc 	.word	0x20026afc
 8010ab0:	20026aac 	.word	0x20026aac

08010ab4 <xTaskPriorityInherit>:
	{
 8010ab4:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8010ab6:	4604      	mov	r4, r0
 8010ab8:	b340      	cbz	r0, 8010b0c <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010aba:	4d1b      	ldr	r5, [pc, #108]	; (8010b28 <xTaskPriorityInherit+0x74>)
 8010abc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010abe:	682a      	ldr	r2, [r5, #0]
 8010ac0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010ac2:	4293      	cmp	r3, r2
 8010ac4:	d228      	bcs.n	8010b18 <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010ac6:	6982      	ldr	r2, [r0, #24]
 8010ac8:	2a00      	cmp	r2, #0
 8010aca:	db04      	blt.n	8010ad6 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010acc:	682a      	ldr	r2, [r5, #0]
 8010ace:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010ad0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8010ad4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010ad6:	2214      	movs	r2, #20
 8010ad8:	4e14      	ldr	r6, [pc, #80]	; (8010b2c <xTaskPriorityInherit+0x78>)
 8010ada:	fb02 6303 	mla	r3, r2, r3, r6
 8010ade:	6962      	ldr	r2, [r4, #20]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	d115      	bne.n	8010b10 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010ae4:	1d21      	adds	r1, r4, #4
 8010ae6:	4608      	mov	r0, r1
 8010ae8:	9101      	str	r1, [sp, #4]
 8010aea:	f7fe fb94 	bl	800f216 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010aee:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010af0:	4a0f      	ldr	r2, [pc, #60]	; (8010b30 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010af4:	6810      	ldr	r0, [r2, #0]
 8010af6:	9901      	ldr	r1, [sp, #4]
 8010af8:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010afa:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010afc:	d900      	bls.n	8010b00 <xTaskPriorityInherit+0x4c>
 8010afe:	6013      	str	r3, [r2, #0]
 8010b00:	2014      	movs	r0, #20
 8010b02:	fb00 6003 	mla	r0, r0, r3, r6
 8010b06:	f7fe fb63 	bl	800f1d0 <vListInsertEnd>
				xReturn = pdTRUE;
 8010b0a:	2001      	movs	r0, #1
	}
 8010b0c:	b002      	add	sp, #8
 8010b0e:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010b10:	682b      	ldr	r3, [r5, #0]
 8010b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010b16:	e7f8      	b.n	8010b0a <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010b18:	682b      	ldr	r3, [r5, #0]
 8010b1a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8010b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b1e:	4298      	cmp	r0, r3
 8010b20:	bf2c      	ite	cs
 8010b22:	2000      	movcs	r0, #0
 8010b24:	2001      	movcc	r0, #1
 8010b26:	e7f1      	b.n	8010b0c <xTaskPriorityInherit+0x58>
 8010b28:	20026634 	.word	0x20026634
 8010b2c:	20026640 	.word	0x20026640
 8010b30:	20026ab4 	.word	0x20026ab4

08010b34 <xTaskPriorityDisinherit>:
	{
 8010b34:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 8010b36:	b910      	cbnz	r0, 8010b3e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8010b38:	2000      	movs	r0, #0
	}
 8010b3a:	b002      	add	sp, #8
 8010b3c:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8010b3e:	4b1e      	ldr	r3, [pc, #120]	; (8010bb8 <xTaskPriorityDisinherit+0x84>)
 8010b40:	681c      	ldr	r4, [r3, #0]
 8010b42:	4284      	cmp	r4, r0
 8010b44:	d00a      	beq.n	8010b5c <xTaskPriorityDisinherit+0x28>
 8010b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b4a:	b672      	cpsid	i
 8010b4c:	f383 8811 	msr	BASEPRI, r3
 8010b50:	f3bf 8f6f 	isb	sy
 8010b54:	f3bf 8f4f 	dsb	sy
 8010b58:	b662      	cpsie	i
 8010b5a:	e7fe      	b.n	8010b5a <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8010b5c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010b5e:	b953      	cbnz	r3, 8010b76 <xTaskPriorityDisinherit+0x42>
 8010b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b64:	b672      	cpsid	i
 8010b66:	f383 8811 	msr	BASEPRI, r3
 8010b6a:	f3bf 8f6f 	isb	sy
 8010b6e:	f3bf 8f4f 	dsb	sy
 8010b72:	b662      	cpsie	i
 8010b74:	e7fe      	b.n	8010b74 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010b76:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8010b78:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010b7a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8010b7c:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010b7e:	4291      	cmp	r1, r2
 8010b80:	d0da      	beq.n	8010b38 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d1d8      	bne.n	8010b38 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010b86:	1d21      	adds	r1, r4, #4
 8010b88:	4608      	mov	r0, r1
 8010b8a:	9101      	str	r1, [sp, #4]
 8010b8c:	f7fe fb43 	bl	800f216 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010b90:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8010b92:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010b98:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b9a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8010b9c:	4a07      	ldr	r2, [pc, #28]	; (8010bbc <xTaskPriorityDisinherit+0x88>)
 8010b9e:	6810      	ldr	r0, [r2, #0]
 8010ba0:	4283      	cmp	r3, r0
 8010ba2:	d900      	bls.n	8010ba6 <xTaskPriorityDisinherit+0x72>
 8010ba4:	6013      	str	r3, [r2, #0]
 8010ba6:	4a06      	ldr	r2, [pc, #24]	; (8010bc0 <xTaskPriorityDisinherit+0x8c>)
 8010ba8:	2014      	movs	r0, #20
 8010baa:	fb00 2003 	mla	r0, r0, r3, r2
 8010bae:	f7fe fb0f 	bl	800f1d0 <vListInsertEnd>
					xReturn = pdTRUE;
 8010bb2:	2001      	movs	r0, #1
		return xReturn;
 8010bb4:	e7c1      	b.n	8010b3a <xTaskPriorityDisinherit+0x6>
 8010bb6:	bf00      	nop
 8010bb8:	20026634 	.word	0x20026634
 8010bbc:	20026ab4 	.word	0x20026ab4
 8010bc0:	20026640 	.word	0x20026640

08010bc4 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8010bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8010bc6:	4604      	mov	r4, r0
 8010bc8:	2800      	cmp	r0, #0
 8010bca:	d048      	beq.n	8010c5e <vTaskPriorityDisinheritAfterTimeout+0x9a>
			configASSERT( pxTCB->uxMutexesHeld );
 8010bcc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8010bce:	b952      	cbnz	r2, 8010be6 <vTaskPriorityDisinheritAfterTimeout+0x22>
 8010bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bd4:	b672      	cpsid	i
 8010bd6:	f383 8811 	msr	BASEPRI, r3
 8010bda:	f3bf 8f6f 	isb	sy
 8010bde:	f3bf 8f4f 	dsb	sy
 8010be2:	b662      	cpsie	i
 8010be4:	e7fe      	b.n	8010be4 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010be6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8010be8:	4299      	cmp	r1, r3
 8010bea:	bf38      	it	cc
 8010bec:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010bee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010bf0:	428b      	cmp	r3, r1
 8010bf2:	d034      	beq.n	8010c5e <vTaskPriorityDisinheritAfterTimeout+0x9a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010bf4:	2a01      	cmp	r2, #1
 8010bf6:	d132      	bne.n	8010c5e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					configASSERT( pxTCB != pxCurrentTCB );
 8010bf8:	4a1a      	ldr	r2, [pc, #104]	; (8010c64 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8010bfa:	6812      	ldr	r2, [r2, #0]
 8010bfc:	4282      	cmp	r2, r0
 8010bfe:	d10a      	bne.n	8010c16 <vTaskPriorityDisinheritAfterTimeout+0x52>
 8010c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c04:	b672      	cpsid	i
 8010c06:	f383 8811 	msr	BASEPRI, r3
 8010c0a:	f3bf 8f6f 	isb	sy
 8010c0e:	f3bf 8f4f 	dsb	sy
 8010c12:	b662      	cpsie	i
 8010c14:	e7fe      	b.n	8010c14 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010c16:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010c18:	4d13      	ldr	r5, [pc, #76]	; (8010c68 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010c1a:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010c1c:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8010c20:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010c22:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c26:	bfa8      	it	ge
 8010c28:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010c2c:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c2e:	bfa8      	it	ge
 8010c30:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d113      	bne.n	8010c5e <vTaskPriorityDisinheritAfterTimeout+0x9a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010c36:	1d01      	adds	r1, r0, #4
 8010c38:	4608      	mov	r0, r1
 8010c3a:	9101      	str	r1, [sp, #4]
 8010c3c:	f7fe faeb 	bl	800f216 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8010c40:	4a0a      	ldr	r2, [pc, #40]	; (8010c6c <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8010c42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010c44:	6810      	ldr	r0, [r2, #0]
 8010c46:	9901      	ldr	r1, [sp, #4]
 8010c48:	4283      	cmp	r3, r0
 8010c4a:	d900      	bls.n	8010c4e <vTaskPriorityDisinheritAfterTimeout+0x8a>
 8010c4c:	6013      	str	r3, [r2, #0]
 8010c4e:	2014      	movs	r0, #20
 8010c50:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8010c54:	b003      	add	sp, #12
 8010c56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8010c5a:	f7fe bab9 	b.w	800f1d0 <vListInsertEnd>
	}
 8010c5e:	b003      	add	sp, #12
 8010c60:	bd30      	pop	{r4, r5, pc}
 8010c62:	bf00      	nop
 8010c64:	20026634 	.word	0x20026634
 8010c68:	20026640 	.word	0x20026640
 8010c6c:	20026ab4 	.word	0x20026ab4

08010c70 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8010c70:	4b04      	ldr	r3, [pc, #16]	; (8010c84 <pvTaskIncrementMutexHeldCount+0x14>)
 8010c72:	681a      	ldr	r2, [r3, #0]
 8010c74:	b11a      	cbz	r2, 8010c7e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8010c76:	6819      	ldr	r1, [r3, #0]
 8010c78:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8010c7a:	3201      	adds	r2, #1
 8010c7c:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8010c7e:	6818      	ldr	r0, [r3, #0]
	}
 8010c80:	4770      	bx	lr
 8010c82:	bf00      	nop
 8010c84:	20026634 	.word	0x20026634

08010c88 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8010c8a:	4c11      	ldr	r4, [pc, #68]	; (8010cd0 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8010c8c:	f7fe fb3a 	bl	800f304 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8010c90:	6825      	ldr	r5, [r4, #0]
 8010c92:	b9bd      	cbnz	r5, 8010cc4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8010c94:	4f0f      	ldr	r7, [pc, #60]	; (8010cd4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8010c96:	4e10      	ldr	r6, [pc, #64]	; (8010cd8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8010c98:	4638      	mov	r0, r7
 8010c9a:	f7fe fa8b 	bl	800f1b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010c9e:	4630      	mov	r0, r6
 8010ca0:	f7fe fa88 	bl	800f1b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010ca4:	4b0d      	ldr	r3, [pc, #52]	; (8010cdc <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010ca6:	4a0e      	ldr	r2, [pc, #56]	; (8010ce0 <prvCheckForValidListAndQueue+0x58>)
 8010ca8:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8010caa:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010cac:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8010cae:	4b0d      	ldr	r3, [pc, #52]	; (8010ce4 <prvCheckForValidListAndQueue+0x5c>)
 8010cb0:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010cb2:	4b0d      	ldr	r3, [pc, #52]	; (8010ce8 <prvCheckForValidListAndQueue+0x60>)
 8010cb4:	9500      	str	r5, [sp, #0]
 8010cb6:	f7fe fd71 	bl	800f79c <xQueueGenericCreateStatic>
 8010cba:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010cbc:	b110      	cbz	r0, 8010cc4 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010cbe:	490b      	ldr	r1, [pc, #44]	; (8010cec <prvCheckForValidListAndQueue+0x64>)
 8010cc0:	f7ff f9c6 	bl	8010050 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8010cc4:	b003      	add	sp, #12
 8010cc6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8010cca:	f7fe bb3f 	b.w	800f34c <vPortExitCritical>
 8010cce:	bf00      	nop
 8010cd0:	20026c54 	.word	0x20026c54
 8010cd4:	20026bd8 	.word	0x20026bd8
 8010cd8:	20026bec 	.word	0x20026bec
 8010cdc:	20026b30 	.word	0x20026b30
 8010ce0:	20026b38 	.word	0x20026b38
 8010ce4:	20026b34 	.word	0x20026b34
 8010ce8:	20026c04 	.word	0x20026c04
 8010cec:	0802ffb9 	.word	0x0802ffb9

08010cf0 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8010cf0:	4291      	cmp	r1, r2
{
 8010cf2:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010cf4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010cf6:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8010cf8:	d80a      	bhi.n	8010d10 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010cfa:	1ad3      	subs	r3, r2, r3
 8010cfc:	6982      	ldr	r2, [r0, #24]
 8010cfe:	4293      	cmp	r3, r2
 8010d00:	d20d      	bcs.n	8010d1e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010d02:	1d01      	adds	r1, r0, #4
 8010d04:	4b07      	ldr	r3, [pc, #28]	; (8010d24 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010d06:	6818      	ldr	r0, [r3, #0]
 8010d08:	f7fe fa6e 	bl	800f1e8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8010d0c:	2000      	movs	r0, #0
}
 8010d0e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010d10:	429a      	cmp	r2, r3
 8010d12:	d201      	bcs.n	8010d18 <prvInsertTimerInActiveList+0x28>
 8010d14:	4299      	cmp	r1, r3
 8010d16:	d202      	bcs.n	8010d1e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010d18:	1d01      	adds	r1, r0, #4
 8010d1a:	4b03      	ldr	r3, [pc, #12]	; (8010d28 <prvInsertTimerInActiveList+0x38>)
 8010d1c:	e7f3      	b.n	8010d06 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8010d1e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8010d20:	e7f5      	b.n	8010d0e <prvInsertTimerInActiveList+0x1e>
 8010d22:	bf00      	nop
 8010d24:	20026b34 	.word	0x20026b34
 8010d28:	20026b30 	.word	0x20026b30

08010d2c <xTimerCreateTimerTask>:
{
 8010d2c:	b510      	push	{r4, lr}
 8010d2e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8010d30:	f7ff ffaa 	bl	8010c88 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8010d34:	4b13      	ldr	r3, [pc, #76]	; (8010d84 <xTimerCreateTimerTask+0x58>)
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	b1b3      	cbz	r3, 8010d68 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010d3a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010d3c:	aa07      	add	r2, sp, #28
 8010d3e:	a906      	add	r1, sp, #24
 8010d40:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010d42:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010d46:	f7fe f931 	bl	800efac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010d4a:	9b05      	ldr	r3, [sp, #20]
 8010d4c:	9a07      	ldr	r2, [sp, #28]
 8010d4e:	9302      	str	r3, [sp, #8]
 8010d50:	9b06      	ldr	r3, [sp, #24]
 8010d52:	490d      	ldr	r1, [pc, #52]	; (8010d88 <xTimerCreateTimerTask+0x5c>)
 8010d54:	9301      	str	r3, [sp, #4]
 8010d56:	2302      	movs	r3, #2
 8010d58:	480c      	ldr	r0, [pc, #48]	; (8010d8c <xTimerCreateTimerTask+0x60>)
 8010d5a:	9300      	str	r3, [sp, #0]
 8010d5c:	4623      	mov	r3, r4
 8010d5e:	f7ff fb53 	bl	8010408 <xTaskCreateStatic>
 8010d62:	4b0b      	ldr	r3, [pc, #44]	; (8010d90 <xTimerCreateTimerTask+0x64>)
 8010d64:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8010d66:	b950      	cbnz	r0, 8010d7e <xTimerCreateTimerTask+0x52>
 8010d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d6c:	b672      	cpsid	i
 8010d6e:	f383 8811 	msr	BASEPRI, r3
 8010d72:	f3bf 8f6f 	isb	sy
 8010d76:	f3bf 8f4f 	dsb	sy
 8010d7a:	b662      	cpsie	i
	configASSERT( xReturn );
 8010d7c:	e7fe      	b.n	8010d7c <xTimerCreateTimerTask+0x50>
}
 8010d7e:	2001      	movs	r0, #1
 8010d80:	b008      	add	sp, #32
 8010d82:	bd10      	pop	{r4, pc}
 8010d84:	20026c54 	.word	0x20026c54
 8010d88:	0802ffbe 	.word	0x0802ffbe
 8010d8c:	08010e9d 	.word	0x08010e9d
 8010d90:	20026c58 	.word	0x20026c58

08010d94 <xTimerGenericCommand>:
{
 8010d94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010d96:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8010d98:	4604      	mov	r4, r0
{
 8010d9a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8010d9c:	b950      	cbnz	r0, 8010db4 <xTimerGenericCommand+0x20>
 8010d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da2:	b672      	cpsid	i
 8010da4:	f383 8811 	msr	BASEPRI, r3
 8010da8:	f3bf 8f6f 	isb	sy
 8010dac:	f3bf 8f4f 	dsb	sy
 8010db0:	b662      	cpsie	i
 8010db2:	e7fe      	b.n	8010db2 <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 8010db4:	4d0c      	ldr	r5, [pc, #48]	; (8010de8 <xTimerGenericCommand+0x54>)
 8010db6:	6828      	ldr	r0, [r5, #0]
 8010db8:	b178      	cbz	r0, 8010dda <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010dba:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010dbc:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010dbe:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010dc2:	dc0c      	bgt.n	8010dde <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010dc4:	f7ff fe66 	bl	8010a94 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010dc8:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010dca:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010dcc:	4669      	mov	r1, sp
 8010dce:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010dd0:	bf0c      	ite	eq
 8010dd2:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010dd4:	461a      	movne	r2, r3
 8010dd6:	f7fe fd66 	bl	800f8a6 <xQueueGenericSend>
}
 8010dda:	b004      	add	sp, #16
 8010ddc:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010dde:	2300      	movs	r3, #0
 8010de0:	4669      	mov	r1, sp
 8010de2:	f7fe fe6d 	bl	800fac0 <xQueueGenericSendFromISR>
 8010de6:	e7f8      	b.n	8010dda <xTimerGenericCommand+0x46>
 8010de8:	20026c54 	.word	0x20026c54

08010dec <prvSampleTimeNow>:
{
 8010dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8010df0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8010e98 <prvSampleTimeNow+0xac>
{
 8010df4:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8010df6:	f7ff fb7b 	bl	80104f0 <xTaskGetTickCount>
 8010dfa:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8010dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8010e00:	4283      	cmp	r3, r0
 8010e02:	d90b      	bls.n	8010e1c <prvSampleTimeNow+0x30>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010e04:	4f22      	ldr	r7, [pc, #136]	; (8010e90 <prvSampleTimeNow+0xa4>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010e06:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	681a      	ldr	r2, [r3, #0]
 8010e0e:	b96a      	cbnz	r2, 8010e2c <prvSampleTimeNow+0x40>
	pxCurrentTimerList = pxOverflowTimerList;
 8010e10:	4a20      	ldr	r2, [pc, #128]	; (8010e94 <prvSampleTimeNow+0xa8>)
 8010e12:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010e14:	6013      	str	r3, [r2, #0]
 8010e16:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 8010e18:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8010e1a:	e000      	b.n	8010e1e <prvSampleTimeNow+0x32>
 8010e1c:	2300      	movs	r3, #0
}
 8010e1e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8010e20:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8010e22:	f8c8 5000 	str.w	r5, [r8]
}
 8010e26:	b004      	add	sp, #16
 8010e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010e2c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e2e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010e30:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010e34:	1d21      	adds	r1, r4, #4
 8010e36:	4608      	mov	r0, r1
 8010e38:	9103      	str	r1, [sp, #12]
 8010e3a:	f7fe f9ec 	bl	800f216 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010e3e:	6a23      	ldr	r3, [r4, #32]
 8010e40:	4620      	mov	r0, r4
 8010e42:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010e44:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010e48:	9903      	ldr	r1, [sp, #12]
 8010e4a:	f013 0f04 	tst.w	r3, #4
 8010e4e:	d0dc      	beq.n	8010e0a <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010e50:	69a3      	ldr	r3, [r4, #24]
 8010e52:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8010e54:	459a      	cmp	sl, r3
 8010e56:	d205      	bcs.n	8010e64 <prvSampleTimeNow+0x78>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010e58:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010e5a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010e5c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010e5e:	f7fe f9c3 	bl	800f1e8 <vListInsert>
 8010e62:	e7d2      	b.n	8010e0a <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010e64:	2300      	movs	r3, #0
 8010e66:	4652      	mov	r2, sl
 8010e68:	4620      	mov	r0, r4
 8010e6a:	f8cd 9000 	str.w	r9, [sp]
 8010e6e:	4619      	mov	r1, r3
 8010e70:	f7ff ff90 	bl	8010d94 <xTimerGenericCommand>
				configASSERT( xResult );
 8010e74:	2800      	cmp	r0, #0
 8010e76:	d1c8      	bne.n	8010e0a <prvSampleTimeNow+0x1e>
 8010e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e7c:	b672      	cpsid	i
 8010e7e:	f383 8811 	msr	BASEPRI, r3
 8010e82:	f3bf 8f6f 	isb	sy
 8010e86:	f3bf 8f4f 	dsb	sy
 8010e8a:	b662      	cpsie	i
 8010e8c:	e7fe      	b.n	8010e8c <prvSampleTimeNow+0xa0>
 8010e8e:	bf00      	nop
 8010e90:	20026b30 	.word	0x20026b30
 8010e94:	20026b34 	.word	0x20026b34
 8010e98:	20026c00 	.word	0x20026c00

08010e9c <prvTimerTask>:
{
 8010e9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010ea0:	4d71      	ldr	r5, [pc, #452]	; (8011068 <prvTimerTask+0x1cc>)
{
 8010ea2:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010ea4:	4e71      	ldr	r6, [pc, #452]	; (801106c <prvTimerTask+0x1d0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010ea6:	682b      	ldr	r3, [r5, #0]
 8010ea8:	f8d3 8000 	ldr.w	r8, [r3]
 8010eac:	f1b8 0f00 	cmp.w	r8, #0
 8010eb0:	d037      	beq.n	8010f22 <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010eb2:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010eb4:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010eb6:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8010eba:	f7ff fb11 	bl	80104e0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010ebe:	a804      	add	r0, sp, #16
 8010ec0:	f7ff ff94 	bl	8010dec <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8010ec4:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010ec6:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d16b      	bne.n	8010fa4 <prvTimerTask+0x108>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010ecc:	2c00      	cmp	r4, #0
 8010ece:	d14e      	bne.n	8010f6e <prvTimerTask+0xd2>
 8010ed0:	4540      	cmp	r0, r8
 8010ed2:	d352      	bcc.n	8010f7a <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 8010ed4:	f7ff fbaa 	bl	801062c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ed8:	682b      	ldr	r3, [r5, #0]
 8010eda:	68db      	ldr	r3, [r3, #12]
 8010edc:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ede:	1d38      	adds	r0, r7, #4
 8010ee0:	f7fe f999 	bl	800f216 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010ee4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010ee8:	0758      	lsls	r0, r3, #29
 8010eea:	d51c      	bpl.n	8010f26 <prvTimerTask+0x8a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010eec:	69b9      	ldr	r1, [r7, #24]
 8010eee:	4643      	mov	r3, r8
 8010ef0:	464a      	mov	r2, r9
 8010ef2:	4638      	mov	r0, r7
 8010ef4:	4441      	add	r1, r8
 8010ef6:	f7ff fefb 	bl	8010cf0 <prvInsertTimerInActiveList>
 8010efa:	b1c0      	cbz	r0, 8010f2e <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010efc:	4623      	mov	r3, r4
 8010efe:	4642      	mov	r2, r8
 8010f00:	4621      	mov	r1, r4
 8010f02:	4638      	mov	r0, r7
 8010f04:	9400      	str	r4, [sp, #0]
 8010f06:	f7ff ff45 	bl	8010d94 <xTimerGenericCommand>
			configASSERT( xResult );
 8010f0a:	b980      	cbnz	r0, 8010f2e <prvTimerTask+0x92>
 8010f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f10:	b672      	cpsid	i
 8010f12:	f383 8811 	msr	BASEPRI, r3
 8010f16:	f3bf 8f6f 	isb	sy
 8010f1a:	f3bf 8f4f 	dsb	sy
 8010f1e:	b662      	cpsie	i
 8010f20:	e7fe      	b.n	8010f20 <prvTimerTask+0x84>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010f22:	2401      	movs	r4, #1
 8010f24:	e7c9      	b.n	8010eba <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010f26:	f023 0301 	bic.w	r3, r3, #1
 8010f2a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010f2e:	6a3b      	ldr	r3, [r7, #32]
 8010f30:	4638      	mov	r0, r7
 8010f32:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010f34:	2200      	movs	r2, #0
 8010f36:	a904      	add	r1, sp, #16
 8010f38:	6830      	ldr	r0, [r6, #0]
 8010f3a:	f7fe fe86 	bl	800fc4a <xQueueReceive>
 8010f3e:	2800      	cmp	r0, #0
 8010f40:	d0b1      	beq.n	8010ea6 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010f42:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010f44:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	db2f      	blt.n	8010faa <prvTimerTask+0x10e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010f4a:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010f4c:	6963      	ldr	r3, [r4, #20]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d132      	bne.n	8010fb8 <prvTimerTask+0x11c>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010f52:	a803      	add	r0, sp, #12
 8010f54:	f7ff ff4a 	bl	8010dec <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8010f58:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010f5a:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8010f5c:	2b09      	cmp	r3, #9
 8010f5e:	d8e9      	bhi.n	8010f34 <prvTimerTask+0x98>
 8010f60:	e8df f003 	tbb	[pc, r3]
 8010f64:	592e2e2e 	.word	0x592e2e2e
 8010f68:	2e2e7a60 	.word	0x2e2e7a60
 8010f6c:	6059      	.short	0x6059
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010f6e:	4b40      	ldr	r3, [pc, #256]	; (8011070 <prvTimerTask+0x1d4>)
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	681c      	ldr	r4, [r3, #0]
 8010f74:	fab4 f484 	clz	r4, r4
 8010f78:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010f7a:	4622      	mov	r2, r4
 8010f7c:	eba8 0109 	sub.w	r1, r8, r9
 8010f80:	6830      	ldr	r0, [r6, #0]
 8010f82:	f7ff f8a4 	bl	80100ce <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010f86:	f7ff fb51 	bl	801062c <xTaskResumeAll>
 8010f8a:	2800      	cmp	r0, #0
 8010f8c:	d1d2      	bne.n	8010f34 <prvTimerTask+0x98>
					portYIELD_WITHIN_API();
 8010f8e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f96:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8010f9a:	f3bf 8f4f 	dsb	sy
 8010f9e:	f3bf 8f6f 	isb	sy
 8010fa2:	e7c7      	b.n	8010f34 <prvTimerTask+0x98>
			( void ) xTaskResumeAll();
 8010fa4:	f7ff fb42 	bl	801062c <xTaskResumeAll>
}
 8010fa8:	e7c4      	b.n	8010f34 <prvTimerTask+0x98>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010faa:	9b05      	ldr	r3, [sp, #20]
 8010fac:	9907      	ldr	r1, [sp, #28]
 8010fae:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010fb0:	9b04      	ldr	r3, [sp, #16]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	dbbe      	blt.n	8010f34 <prvTimerTask+0x98>
 8010fb6:	e7c8      	b.n	8010f4a <prvTimerTask+0xae>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010fb8:	1d20      	adds	r0, r4, #4
 8010fba:	f7fe f92c 	bl	800f216 <uxListRemove>
 8010fbe:	e7c8      	b.n	8010f52 <prvTimerTask+0xb6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010fc0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010fc4:	4620      	mov	r0, r4
 8010fc6:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010fc8:	f043 0301 	orr.w	r3, r3, #1
 8010fcc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010fd0:	9b05      	ldr	r3, [sp, #20]
 8010fd2:	4419      	add	r1, r3
 8010fd4:	f7ff fe8c 	bl	8010cf0 <prvInsertTimerInActiveList>
 8010fd8:	2800      	cmp	r0, #0
 8010fda:	d0ab      	beq.n	8010f34 <prvTimerTask+0x98>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010fdc:	6a23      	ldr	r3, [r4, #32]
 8010fde:	4620      	mov	r0, r4
 8010fe0:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010fe2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010fe6:	0759      	lsls	r1, r3, #29
 8010fe8:	d5a4      	bpl.n	8010f34 <prvTimerTask+0x98>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010fea:	69a2      	ldr	r2, [r4, #24]
 8010fec:	2300      	movs	r3, #0
 8010fee:	9905      	ldr	r1, [sp, #20]
 8010ff0:	4620      	mov	r0, r4
 8010ff2:	9300      	str	r3, [sp, #0]
 8010ff4:	440a      	add	r2, r1
 8010ff6:	4619      	mov	r1, r3
 8010ff8:	f7ff fecc 	bl	8010d94 <xTimerGenericCommand>
							configASSERT( xResult );
 8010ffc:	2800      	cmp	r0, #0
 8010ffe:	d199      	bne.n	8010f34 <prvTimerTask+0x98>
 8011000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011004:	b672      	cpsid	i
 8011006:	f383 8811 	msr	BASEPRI, r3
 801100a:	f3bf 8f6f 	isb	sy
 801100e:	f3bf 8f4f 	dsb	sy
 8011012:	b662      	cpsie	i
 8011014:	e7fe      	b.n	8011014 <prvTimerTask+0x178>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011016:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801101a:	f023 0301 	bic.w	r3, r3, #1
 801101e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8011022:	e787      	b.n	8010f34 <prvTimerTask+0x98>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011024:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011028:	f043 0301 	orr.w	r3, r3, #1
 801102c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011030:	9905      	ldr	r1, [sp, #20]
 8011032:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011034:	b951      	cbnz	r1, 801104c <prvTimerTask+0x1b0>
 8011036:	f04f 0350 	mov.w	r3, #80	; 0x50
 801103a:	b672      	cpsid	i
 801103c:	f383 8811 	msr	BASEPRI, r3
 8011040:	f3bf 8f6f 	isb	sy
 8011044:	f3bf 8f4f 	dsb	sy
 8011048:	b662      	cpsie	i
 801104a:	e7fe      	b.n	801104a <prvTimerTask+0x1ae>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801104c:	4603      	mov	r3, r0
 801104e:	4401      	add	r1, r0
 8011050:	4620      	mov	r0, r4
 8011052:	f7ff fe4d 	bl	8010cf0 <prvInsertTimerInActiveList>
					break;
 8011056:	e76d      	b.n	8010f34 <prvTimerTask+0x98>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011058:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801105c:	079a      	lsls	r2, r3, #30
 801105e:	d4dc      	bmi.n	801101a <prvTimerTask+0x17e>
							vPortFree( pxTimer );
 8011060:	4620      	mov	r0, r4
 8011062:	f7fe f86b 	bl	800f13c <vPortFree>
 8011066:	e765      	b.n	8010f34 <prvTimerTask+0x98>
 8011068:	20026b30 	.word	0x20026b30
 801106c:	20026c54 	.word	0x20026c54
 8011070:	20026b34 	.word	0x20026b34

08011074 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8011074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011078:	b093      	sub	sp, #76	; 0x4c
 801107a:	9209      	str	r2, [sp, #36]	; 0x24
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 801107c:	f44f 72c0 	mov.w	r2, #384	; 0x180
  currentMCU = BlockIndex;
 8011080:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
{  
 8011084:	9111      	str	r1, [sp, #68]	; 0x44
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 8011086:	fbb3 f3f2 	udiv	r3, r3, r2
 801108a:	9308      	str	r3, [sp, #32]
  

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 801108c:	4b73      	ldr	r3, [pc, #460]	; (801125c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1e8>)
 801108e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011090:	9206      	str	r2, [sp, #24]
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8011092:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8011094:	691b      	ldr	r3, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8011096:	9201      	str	r2, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8011098:	930c      	str	r3, [sp, #48]	; 0x30
          pLum += 64;                      
        }

        pLum = pLum - 128 + 16;
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 801109a:	0053      	lsls	r3, r2, #1
 801109c:	930d      	str	r3, [sp, #52]	; 0x34
  while(currentMCU < (numberMCU + BlockIndex))
 801109e:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80110a2:	4413      	add	r3, r2
 80110a4:	455b      	cmp	r3, fp
 80110a6:	d803      	bhi.n	80110b0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3c>
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
  }
  return numberMCU;
}
 80110a8:	9808      	ldr	r0, [sp, #32]
 80110aa:	b013      	add	sp, #76	; 0x4c
 80110ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 80110b0:	ea4f 130b 	mov.w	r3, fp, lsl #4
 80110b4:	9a06      	ldr	r2, [sp, #24]
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80110b6:	9c06      	ldr	r4, [sp, #24]
    currentMCU++;
 80110b8:	f10b 0b01 	add.w	fp, fp, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80110bc:	9901      	ldr	r1, [sp, #4]
    pLum = pInBuffer;
 80110be:	4681      	mov	r9, r0
    for(i= 0; i <  16; i+=2)
 80110c0:	f04f 0800 	mov.w	r8, #0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 80110c4:	fbb3 f2f2 	udiv	r2, r3, r2
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80110c8:	fb04 3312 	mls	r3, r4, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80110cc:	4351      	muls	r1, r2
 80110ce:	005b      	lsls	r3, r3, #1
 80110d0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80110d4:	9300      	str	r3, [sp, #0]
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 80110d6:	f500 7380 	add.w	r3, r0, #256	; 0x100
 80110da:	9302      	str	r3, [sp, #8]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80110dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80110de:	9a00      	ldr	r2, [sp, #0]
 80110e0:	4293      	cmp	r3, r2
 80110e2:	f240 80ac 	bls.w	801123e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1ca>
        pOutAddr = pOutBuffer + refline;
 80110e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 80110e8:	f04f 0c00 	mov.w	ip, #0
 80110ec:	f8cd 900c 	str.w	r9, [sp, #12]
        pOutAddr = pOutBuffer + refline;
 80110f0:	4413      	add	r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 80110f2:	9a01      	ldr	r2, [sp, #4]
        pOutAddr = pOutBuffer + refline;
 80110f4:	9307      	str	r3, [sp, #28]
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 80110f6:	4413      	add	r3, r2
 80110f8:	930e      	str	r3, [sp, #56]	; 0x38
 80110fa:	9b02      	ldr	r3, [sp, #8]
 80110fc:	9304      	str	r3, [sp, #16]
          for(j=0; j < 8; j+=2)
 80110fe:	9b04      	ldr	r3, [sp, #16]
    for(i= 0; i <  16; i+=2)
 8011100:	2600      	movs	r6, #0
 8011102:	9f03      	ldr	r7, [sp, #12]
 8011104:	3b01      	subs	r3, #1
 8011106:	9305      	str	r3, [sp, #20]
 8011108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801110a:	4463      	add	r3, ip
 801110c:	930a      	str	r3, [sp, #40]	; 0x28
 801110e:	9b07      	ldr	r3, [sp, #28]
 8011110:	4463      	add	r3, ip
 8011112:	930b      	str	r3, [sp, #44]	; 0x2c
 8011114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          for(j=0; j < 8; j+=2)
 8011116:	3702      	adds	r7, #2
            ycomp = (int32_t)(*(pLum +j));
 8011118:	f817 ec02 	ldrb.w	lr, [r7, #-2]
 801111c:	4433      	add	r3, r6
 801111e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011122:	4433      	add	r3, r6
 8011124:	9310      	str	r3, [sp, #64]	; 0x40
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8011126:	9b05      	ldr	r3, [sp, #20]
 8011128:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801112c:	9305      	str	r3, [sp, #20]
 801112e:	4b4c      	ldr	r3, [pc, #304]	; (8011260 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1ec>)
 8011130:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 8011134:	9b05      	ldr	r3, [sp, #20]
 8011136:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 801113a:	4b4a      	ldr	r3, [pc, #296]	; (8011264 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f0>)
 801113c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 8011140:	4b49      	ldr	r3, [pc, #292]	; (8011268 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f4>)
 8011142:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011146:	4b49      	ldr	r3, [pc, #292]	; (801126c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f8>)
 8011148:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801114c:	440a      	add	r2, r1
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801114e:	4948      	ldr	r1, [pc, #288]	; (8011270 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1fc>)
 8011150:	460b      	mov	r3, r1
 8011152:	440d      	add	r5, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011154:	eb03 4222 	add.w	r2, r3, r2, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011158:	eb05 010e 	add.w	r1, r5, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 801115c:	441c      	add	r4, r3
            *(__IO uint16_t *)pOutAddr = 
 801115e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011160:	f891 a100 	ldrb.w	sl, [r1, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011164:	eb02 010e 	add.w	r1, r2, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8011168:	44a6      	add	lr, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801116a:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801116e:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011172:	f89e e100 	ldrb.w	lr, [lr, #256]	; 0x100
 8011176:	0889      	lsrs	r1, r1, #2
 8011178:	0149      	lsls	r1, r1, #5
 801117a:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 801117e:	ea41 01de 	orr.w	r1, r1, lr, lsr #3
            *(__IO uint16_t *)pOutAddr = 
 8011182:	5399      	strh	r1, [r3, r6]
            ycomp = (int32_t)(*(pLum +j +1));
 8011184:	f817 ec01 	ldrb.w	lr, [r7, #-1]
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 8011188:	9b10      	ldr	r3, [sp, #64]	; 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801118a:	eb05 010e 	add.w	r1, r5, lr
 801118e:	f891 a100 	ldrb.w	sl, [r1, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011192:	eb02 010e 	add.w	r1, r2, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8011196:	44a6      	add	lr, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011198:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801119c:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80111a0:	f89e e100 	ldrb.w	lr, [lr, #256]	; 0x100
 80111a4:	0889      	lsrs	r1, r1, #2
 80111a6:	0149      	lsls	r1, r1, #5
 80111a8:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 80111ac:	ea41 01de 	orr.w	r1, r1, lr, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 80111b0:	8059      	strh	r1, [r3, #2]
            ycomp = (int32_t)(*(pLum +j +8));
 80111b2:	f897 e006 	ldrb.w	lr, [r7, #6]
            *(__IO uint16_t *)pOutAddr2 = 
 80111b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80111b8:	eb05 010e 	add.w	r1, r5, lr
 80111bc:	f891 a100 	ldrb.w	sl, [r1, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80111c0:	eb02 010e 	add.w	r1, r2, lr
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80111c4:	44a6      	add	lr, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80111c6:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80111ca:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80111ce:	f89e e100 	ldrb.w	lr, [lr, #256]	; 0x100
 80111d2:	0889      	lsrs	r1, r1, #2
 80111d4:	0149      	lsls	r1, r1, #5
 80111d6:	ea41 21ca 	orr.w	r1, r1, sl, lsl #11
 80111da:	ea41 01de 	orr.w	r1, r1, lr, lsr #3
            *(__IO uint16_t *)pOutAddr2 = 
 80111de:	5399      	strh	r1, [r3, r6]
          for(j=0; j < 8; j+=2)
 80111e0:	3604      	adds	r6, #4
            ycomp = (int32_t)(*(pLum +j +8 +1));
 80111e2:	79f9      	ldrb	r1, [r7, #7]
          for(j=0; j < 8; j+=2)
 80111e4:	2e10      	cmp	r6, #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80111e6:	440d      	add	r5, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80111e8:	440a      	add	r2, r1
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 80111ea:	440c      	add	r4, r1
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80111ec:	f895 5100 	ldrb.w	r5, [r5, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80111f0:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80111f4:	ea4f 05d5 	mov.w	r5, r5, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80111f8:	f894 1100 	ldrb.w	r1, [r4, #256]	; 0x100
 80111fc:	ea4f 0292 	mov.w	r2, r2, lsr #2
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 8011200:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011202:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8011206:	ea42 22c5 	orr.w	r2, r2, r5, lsl #11
 801120a:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 801120e:	805a      	strh	r2, [r3, #2]
          for(j=0; j < 8; j+=2)
 8011210:	d180      	bne.n	8011114 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa0>
            pChrom++;
 8011212:	9b04      	ldr	r3, [sp, #16]
        for(k= 0; k<2; k++)
 8011214:	f10c 0c10 	add.w	ip, ip, #16
            pChrom++;
 8011218:	3304      	adds	r3, #4
        for(k= 0; k<2; k++)
 801121a:	f1bc 0f20 	cmp.w	ip, #32
            pChrom++;
 801121e:	9304      	str	r3, [sp, #16]
          pLum += 64;                      
 8011220:	9b03      	ldr	r3, [sp, #12]
 8011222:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8011226:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
 8011228:	f47f af69 	bne.w	80110fe <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x8a>
            pChrom++;
 801122c:	9b02      	ldr	r3, [sp, #8]
        pLum = pLum - 128 + 16;
 801122e:	f109 0910 	add.w	r9, r9, #16
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 8011232:	9a00      	ldr	r2, [sp, #0]
            pChrom++;
 8011234:	3308      	adds	r3, #8
 8011236:	9302      	str	r3, [sp, #8]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 8011238:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801123a:	441a      	add	r2, r3
 801123c:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  16; i+=2)
 801123e:	f108 0802 	add.w	r8, r8, #2
 8011242:	f1b8 0f10 	cmp.w	r8, #16
 8011246:	d102      	bne.n	801124e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1da>
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 8011248:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 801124c:	e727      	b.n	801109e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a>
      if(i == 8)
 801124e:	f1b8 0f08 	cmp.w	r8, #8
        pLum = pInBuffer + 128;
 8011252:	bf08      	it	eq
 8011254:	f100 0980 	addeq.w	r9, r0, #128	; 0x80
 8011258:	e740      	b.n	80110dc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x68>
 801125a:	bf00      	nop
 801125c:	20027c5c 	.word	0x20027c5c
 8011260:	20026c5c 	.word	0x20026c5c
 8011264:	2002785c 	.word	0x2002785c
 8011268:	2002745c 	.word	0x2002745c
 801126c:	2002705c 	.word	0x2002705c
 8011270:	0802ffc6 	.word	0x0802ffc6

08011274 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8011274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8011278:	0a1b      	lsrs	r3, r3, #8
{  
 801127a:	b08d      	sub	sp, #52	; 0x34
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 801127c:	9305      	str	r3, [sp, #20]
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 801127e:	4b4f      	ldr	r3, [pc, #316]	; (80113bc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x148>)
{  
 8011280:	9206      	str	r2, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8011282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  currentMCU = BlockIndex;
 8011284:	f8dd e018 	ldr.w	lr, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 8011288:	9202      	str	r2, [sp, #8]
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 801128a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 801128c:	691b      	ldr	r3, [r3, #16]
{  
 801128e:	910a      	str	r1, [sp, #40]	; 0x28
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8011290:	9203      	str	r2, [sp, #12]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8011292:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
 8011294:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8011298:	4413      	add	r3, r2
 801129a:	4573      	cmp	r3, lr
 801129c:	d803      	bhi.n	80112a6 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x32>
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
  }
  return numberMCU;
}
 801129e:	9805      	ldr	r0, [sp, #20]
 80112a0:	b00d      	add	sp, #52	; 0x34
 80112a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 80112a6:	ea4f 130e 	mov.w	r3, lr, lsl #4
 80112aa:	9a02      	ldr	r2, [sp, #8]
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80112ac:	9c02      	ldr	r4, [sp, #8]
    currentMCU++;
 80112ae:	f10e 0e01 	add.w	lr, lr, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80112b2:	9903      	ldr	r1, [sp, #12]
 80112b4:	f100 0780 	add.w	r7, r0, #128	; 0x80
    pLum = pInBuffer;
 80112b8:	4682      	mov	sl, r0
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 80112ba:	fbb3 f2f2 	udiv	r2, r3, r2
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80112be:	fb04 3312 	mls	r3, r4, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80112c2:	4351      	muls	r1, r2
 80112c4:	005b      	lsls	r3, r3, #1
 80112c6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80112ca:	9300      	str	r3, [sp, #0]
    currentMCU++;
 80112cc:	2308      	movs	r3, #8
 80112ce:	9304      	str	r3, [sp, #16]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80112d0:	9b07      	ldr	r3, [sp, #28]
 80112d2:	9a00      	ldr	r2, [sp, #0]
 80112d4:	4293      	cmp	r3, r2
 80112d6:	d969      	bls.n	80113ac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x138>
        pOutAddr = pOutBuffer + refline;
 80112d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112da:	46d0      	mov	r8, sl
 80112dc:	eb03 0902 	add.w	r9, r3, r2
        for(k= 0; k<2; k++)
 80112e0:	f107 0308 	add.w	r3, r7, #8
 80112e4:	9308      	str	r3, [sp, #32]
          for(j=0; j < 8; j+=2)
 80112e6:	1e7b      	subs	r3, r7, #1
    currentMCU++;
 80112e8:	2400      	movs	r4, #0
 80112ea:	9301      	str	r3, [sp, #4]
            ycomp = (int32_t)(*(pLum +j +1));
 80112ec:	f108 0301 	add.w	r3, r8, #1
 80112f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80112f2:	eb09 0384 	add.w	r3, r9, r4, lsl #2
            ycomp = (int32_t)(*(pLum +j));
 80112f6:	f818 c014 	ldrb.w	ip, [r8, r4, lsl #1]
 80112fa:	9309      	str	r3, [sp, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80112fc:	9b01      	ldr	r3, [sp, #4]
 80112fe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8011302:	9301      	str	r3, [sp, #4]
 8011304:	4b2e      	ldr	r3, [pc, #184]	; (80113c0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x14c>)
 8011306:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 801130a:	9b01      	ldr	r3, [sp, #4]
 801130c:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 8011310:	4b2c      	ldr	r3, [pc, #176]	; (80113c4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x150>)
 8011312:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 8011316:	4b2c      	ldr	r3, [pc, #176]	; (80113c8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x154>)
 8011318:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801131c:	4b2b      	ldr	r3, [pc, #172]	; (80113cc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x158>)
 801131e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011322:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011324:	4a2a      	ldr	r2, [pc, #168]	; (80113d0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x15c>)
 8011326:	4613      	mov	r3, r2
 8011328:	4416      	add	r6, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801132a:	eb03 4121 	add.w	r1, r3, r1, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801132e:	eb06 020c 	add.w	r2, r6, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8011332:	441d      	add	r5, r3
            ycomp = (int32_t)(*(pLum +j +1));
 8011334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011336:	f892 b100 	ldrb.w	fp, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801133a:	eb01 020c 	add.w	r2, r1, ip
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 801133e:	44ac      	add	ip, r5
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011340:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011344:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011348:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
 801134c:	0892      	lsrs	r2, r2, #2
 801134e:	0152      	lsls	r2, r2, #5
 8011350:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
 8011354:	ea42 02dc 	orr.w	r2, r2, ip, lsr #3
            *(__IO uint16_t *)pOutAddr = 
 8011358:	f829 2024 	strh.w	r2, [r9, r4, lsl #2]
            ycomp = (int32_t)(*(pLum +j +1));
 801135c:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
          for(j=0; j < 8; j+=2)
 8011360:	3401      	adds	r4, #1
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 8011362:	9b09      	ldr	r3, [sp, #36]	; 0x24
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011364:	4411      	add	r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011366:	4416      	add	r6, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 8011368:	4415      	add	r5, r2
          for(j=0; j < 8; j+=2)
 801136a:	2c04      	cmp	r4, #4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801136c:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011370:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011374:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8011378:	f895 2100 	ldrb.w	r2, [r5, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801137c:	ea4f 06d6 	mov.w	r6, r6, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011380:	ea4f 1141 	mov.w	r1, r1, lsl #5
 8011384:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 8011388:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 801138c:	8059      	strh	r1, [r3, #2]
          for(j=0; j < 8; j+=2)
 801138e:	d1b0      	bne.n	80112f2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x7e>
            pChrom++;
 8011390:	3704      	adds	r7, #4
        for(k= 0; k<2; k++)
 8011392:	9b08      	ldr	r3, [sp, #32]
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8011394:	f109 0910 	add.w	r9, r9, #16
          pLum += 64;                      
 8011398:	f108 0840 	add.w	r8, r8, #64	; 0x40
        for(k= 0; k<2; k++)
 801139c:	42bb      	cmp	r3, r7
 801139e:	d1a2      	bne.n	80112e6 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x72>
        refline += JPEG_ConvertorParams.ScaledWidth;          
 80113a0:	9a00      	ldr	r2, [sp, #0]
        pLum = pLum - 128 + 8;
 80113a2:	f10a 0a08 	add.w	sl, sl, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 80113a6:	9b03      	ldr	r3, [sp, #12]
 80113a8:	441a      	add	r2, r3
 80113aa:	9200      	str	r2, [sp, #0]
    for(i= 0; i <  8; i++)
 80113ac:	9b04      	ldr	r3, [sp, #16]
 80113ae:	3b01      	subs	r3, #1
 80113b0:	9304      	str	r3, [sp, #16]
 80113b2:	d18d      	bne.n	80112d0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x5c>
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 80113b4:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80113b8:	e76c      	b.n	8011294 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x20>
 80113ba:	bf00      	nop
 80113bc:	20027c5c 	.word	0x20027c5c
 80113c0:	20026c5c 	.word	0x20026c5c
 80113c4:	2002785c 	.word	0x2002785c
 80113c8:	2002745c 	.word	0x2002745c
 80113cc:	2002705c 	.word	0x2002705c
 80113d0:	0802ffc6 	.word	0x0802ffc6

080113d4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 80113d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113d8:	4692      	mov	sl, r2
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 80113da:	22c0      	movs	r2, #192	; 0xc0
{  
 80113dc:	b089      	sub	sp, #36	; 0x24
 80113de:	4604      	mov	r4, r0
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 80113e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80113e4:	9304      	str	r3, [sp, #16]
  

  while(currentMCU < (numberMCU + BlockIndex))
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80113e6:	4b34      	ldr	r3, [pc, #208]	; (80114b8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe4>)
{  
 80113e8:	9107      	str	r1, [sp, #28]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80113ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80113ec:	9200      	str	r2, [sp, #0]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80113ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80113f0:	691b      	ldr	r3, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80113f2:	9201      	str	r2, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80113f4:	9305      	str	r3, [sp, #20]
  currentMCU = BlockIndex;
 80113f6:	4653      	mov	r3, sl
  while(currentMCU < (numberMCU + BlockIndex))
 80113f8:	9a04      	ldr	r2, [sp, #16]
 80113fa:	4452      	add	r2, sl
 80113fc:	429a      	cmp	r2, r3
 80113fe:	d803      	bhi.n	8011408 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x34>
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8011400:	9804      	ldr	r0, [sp, #16]
 8011402:	b009      	add	sp, #36	; 0x24
 8011404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8011408:	00da      	lsls	r2, r3, #3
 801140a:	9900      	ldr	r1, [sp, #0]
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 801140c:	9e00      	ldr	r6, [sp, #0]
    currentMCU++;   
 801140e:	3301      	adds	r3, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8011410:	9d01      	ldr	r5, [sp, #4]
    pLum = pInBuffer;
 8011412:	46a4      	mov	ip, r4
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8011414:	fbb2 f1f1 	udiv	r1, r2, r1
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8011418:	fb06 2211 	mls	r2, r6, r1, r2
 801141c:	f104 0640 	add.w	r6, r4, #64	; 0x40
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8011420:	434d      	muls	r5, r1
    currentMCU++;   
 8011422:	2108      	movs	r1, #8
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8011424:	0052      	lsls	r2, r2, #1
    currentMCU++;   
 8011426:	9103      	str	r1, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8011428:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 801142c:	9905      	ldr	r1, [sp, #20]
 801142e:	4291      	cmp	r1, r2
 8011430:	d93c      	bls.n	80114ac <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xd8>
        pOutAddr = pOutBuffer+ refline;
 8011432:	9907      	ldr	r1, [sp, #28]
 8011434:	f106 3eff 	add.w	lr, r6, #4294967295
 8011438:	188d      	adds	r5, r1, r2
          for(j=0; j < 8; j++)
 801143a:	f10c 31ff 	add.w	r1, ip, #4294967295
 801143e:	9102      	str	r1, [sp, #8]
 8011440:	f105 0110 	add.w	r1, r5, #16
 8011444:	9106      	str	r1, [sp, #24]
            ycomp = (int32_t)(*(pLum +j));
 8011446:	9f02      	ldr	r7, [sp, #8]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8011448:	f81e 8f01 	ldrb.w	r8, [lr, #1]!
            ycomp = (int32_t)(*(pLum +j));
 801144c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 8011450:	f89e 9040 	ldrb.w	r9, [lr, #64]	; 0x40
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011454:	4819      	ldr	r0, [pc, #100]	; (80114bc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xe8>)
            ycomp = (int32_t)(*(pLum +j));
 8011456:	9702      	str	r7, [sp, #8]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8011458:	4f19      	ldr	r7, [pc, #100]	; (80114c0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xec>)
 801145a:	4401      	add	r1, r0
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 801145c:	4819      	ldr	r0, [pc, #100]	; (80114c4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf0>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801145e:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
 8011462:	440f      	add	r7, r1
 8011464:	f897 b100 	ldrb.w	fp, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 8011468:	f850 7028 	ldr.w	r7, [r0, r8, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 801146c:	4816      	ldr	r0, [pc, #88]	; (80114c8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf4>)
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801146e:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 8011472:	440f      	add	r7, r1
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 8011474:	f850 9029 	ldr.w	r9, [r0, r9, lsl #2]
 8011478:	4814      	ldr	r0, [pc, #80]	; (80114cc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0xf8>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801147a:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 801147e:	f850 8028 	ldr.w	r8, [r0, r8, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011482:	08ff      	lsrs	r7, r7, #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 8011484:	44c1      	add	r9, r8
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8011486:	ea47 27cb 	orr.w	r7, r7, fp, lsl #11
 801148a:	eb01 4129 	add.w	r1, r1, r9, asr #16
 801148e:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
 8011492:	0889      	lsrs	r1, r1, #2
 8011494:	ea47 1741 	orr.w	r7, r7, r1, lsl #5
          for(j=0; j < 8; j++)
 8011498:	9906      	ldr	r1, [sp, #24]
            *(__IO uint16_t *)pOutAddr = 
 801149a:	f825 7b02 	strh.w	r7, [r5], #2
          for(j=0; j < 8; j++)
 801149e:	428d      	cmp	r5, r1
 80114a0:	d1d1      	bne.n	8011446 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x72>
        refline += JPEG_ConvertorParams.ScaledWidth;          
 80114a2:	9901      	ldr	r1, [sp, #4]
            pChrom++;
 80114a4:	3608      	adds	r6, #8
          pLum += 8;
 80114a6:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 80114aa:	440a      	add	r2, r1
    for(i= 0; i <  8; i++)
 80114ac:	9903      	ldr	r1, [sp, #12]
 80114ae:	3901      	subs	r1, #1
 80114b0:	9103      	str	r1, [sp, #12]
 80114b2:	d1bb      	bne.n	801142c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x58>
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 80114b4:	34c0      	adds	r4, #192	; 0xc0
 80114b6:	e79f      	b.n	80113f8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x24>
 80114b8:	20027c5c 	.word	0x20027c5c
 80114bc:	0802ffc6 	.word	0x0802ffc6
 80114c0:	2002785c 	.word	0x2002785c
 80114c4:	20026c5c 	.word	0x20026c5c
 80114c8:	2002745c 	.word	0x2002745c
 80114cc:	2002705c 	.word	0x2002705c

080114d0 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80114d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114d4:	b085      	sub	sp, #20
 80114d6:	4604      	mov	r4, r0

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 80114d8:	0998      	lsrs	r0, r3, #6
{
 80114da:	9102      	str	r1, [sp, #8]
  currentMCU = BlockIndex;
  
  while(currentMCU < (numberMCU + BlockIndex))
 80114dc:	eb02 1393 	add.w	r3, r2, r3, lsr #6
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80114e0:	491a      	ldr	r1, [pc, #104]	; (801154c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x7c>)
  while(currentMCU < (numberMCU + BlockIndex))
 80114e2:	9303      	str	r3, [sp, #12]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80114e4:	e9d1 8909 	ldrd	r8, r9, [r1, #36]	; 0x24
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    { 
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80114e8:	6909      	ldr	r1, [r1, #16]
 80114ea:	9101      	str	r1, [sp, #4]
  while(currentMCU < (numberMCU + BlockIndex))
 80114ec:	9b03      	ldr	r3, [sp, #12]
 80114ee:	4293      	cmp	r3, r2
 80114f0:	d802      	bhi.n	80114f8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x28>
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
  }
  return numberMCU;
}
 80114f2:	b005      	add	sp, #20
 80114f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80114f8:	00d3      	lsls	r3, r2, #3
    pLum = pInBuffer;
 80114fa:	46a4      	mov	ip, r4
    currentMCU++;
 80114fc:	3201      	adds	r2, #1
 80114fe:	2708      	movs	r7, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8011500:	fbb3 f1f8 	udiv	r1, r3, r8
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8011504:	fb08 3311 	mls	r3, r8, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8011508:	fb09 f501 	mul.w	r5, r9, r1
 801150c:	005b      	lsls	r3, r3, #1
 801150e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8011512:	9901      	ldr	r1, [sp, #4]
 8011514:	4299      	cmp	r1, r3
 8011516:	d915      	bls.n	8011544 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x74>
      pOutAddr = pOutBuffer + refline;
 8011518:	9902      	ldr	r1, [sp, #8]
 801151a:	46e2      	mov	sl, ip
 801151c:	4419      	add	r1, r3
 801151e:	f101 0b10 	add.w	fp, r1, #16
          ySample =   (uint32_t)(*pLum);
 8011522:	f81a 6b01 	ldrb.w	r6, [sl], #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
 8011526:	08f5      	lsrs	r5, r6, #3
 8011528:	08b6      	lsrs	r6, r6, #2
 801152a:	ea4f 2ec5 	mov.w	lr, r5, lsl #11
 801152e:	ea4e 1e46 	orr.w	lr, lr, r6, lsl #5
 8011532:	ea45 050e 	orr.w	r5, r5, lr
 8011536:	f821 5b02 	strh.w	r5, [r1], #2
        for(j=0; j < 8; j++)
 801153a:	4559      	cmp	r1, fp
 801153c:	d1f1      	bne.n	8011522 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x52>
          pLum++;
 801153e:	f10c 0c08 	add.w	ip, ip, #8
        refline += JPEG_ConvertorParams.ScaledWidth;        
 8011542:	444b      	add	r3, r9
    for(i= 0; i <  8; i++)
 8011544:	3f01      	subs	r7, #1
 8011546:	d1e4      	bne.n	8011512 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 8011548:	3440      	adds	r4, #64	; 0x40
 801154a:	e7cf      	b.n	80114ec <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1c>
 801154c:	20027c5c 	.word	0x20027c5c

08011550 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8011550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011554:	b085      	sub	sp, #20
 8011556:	4605      	mov	r5, r0
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8011558:	27ff      	movs	r7, #255	; 0xff
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 801155a:	0a18      	lsrs	r0, r3, #8
{  
 801155c:	9102      	str	r1, [sp, #8]
  while(currentMCU < (numberMCU + BlockIndex))
 801155e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8011562:	4927      	ldr	r1, [pc, #156]	; (8011600 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xb0>)
  while(currentMCU < (numberMCU + BlockIndex))
 8011564:	9303      	str	r3, [sp, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8011566:	e9d1 9a09 	ldrd	r9, sl, [r1, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 801156a:	6909      	ldr	r1, [r1, #16]
 801156c:	9100      	str	r1, [sp, #0]
  while(currentMCU < (numberMCU + BlockIndex))
 801156e:	9b03      	ldr	r3, [sp, #12]
 8011570:	4293      	cmp	r3, r2
 8011572:	d802      	bhi.n	801157a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
  }
  return numberMCU;
}
 8011574:	b005      	add	sp, #20
 8011576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 801157a:	00d1      	lsls	r1, r2, #3
    pChrom = pInBuffer;
 801157c:	46ae      	mov	lr, r5
    currentMCU++;
 801157e:	3201      	adds	r2, #1
 8011580:	f04f 0c08 	mov.w	ip, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8011584:	fbb1 f3f9 	udiv	r3, r1, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8011588:	fb09 1113 	mls	r1, r9, r3, r1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 801158c:	fb0a f403 	mul.w	r4, sl, r3
 8011590:	0049      	lsls	r1, r1, #1
 8011592:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8011596:	9b00      	ldr	r3, [sp, #0]
 8011598:	428b      	cmp	r3, r1
 801159a:	d92b      	bls.n	80115f4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0xa4>
        pOutAddr = pOutBuffer+ refline;        
 801159c:	9b02      	ldr	r3, [sp, #8]
 801159e:	4674      	mov	r4, lr
 80115a0:	185e      	adds	r6, r3, r1
          for(j=0; j < 8; j++)
 80115a2:	f106 0310 	add.w	r3, r6, #16
 80115a6:	9301      	str	r3, [sp, #4]
            color_k = (int32_t)(*(pChrom + 192));
 80115a8:	f894 80c0 	ldrb.w	r8, [r4, #192]	; 0xc0
            pChrom++;
 80115ac:	3401      	adds	r4, #1
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 80115ae:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 80115b2:	f814 bc01 	ldrb.w	fp, [r4, #-1]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 80115b6:	fb13 f308 	smulbb	r3, r3, r8
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 80115ba:	fb1b fb08 	smulbb	fp, fp, r8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 80115be:	fbb3 f3f7 	udiv	r3, r3, r7
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 80115c2:	fbbb fbf7 	udiv	fp, fp, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 80115c6:	109b      	asrs	r3, r3, #2
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 80115c8:	ea4f 0beb 	mov.w	fp, fp, asr #3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 80115cc:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 80115ce:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 80115d2:	f894 b07f 	ldrb.w	fp, [r4, #127]	; 0x7f
 80115d6:	fb1b fb08 	smulbb	fp, fp, r8
 80115da:	fbbb fbf7 	udiv	fp, fp, r7
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 80115de:	ea43 03db 	orr.w	r3, r3, fp, lsr #3
 80115e2:	b29b      	uxth	r3, r3
          *(__IO uint16_t *)pOutAddr = 
 80115e4:	f826 3b02 	strh.w	r3, [r6], #2
          for(j=0; j < 8; j++)
 80115e8:	9b01      	ldr	r3, [sp, #4]
 80115ea:	429e      	cmp	r6, r3
 80115ec:	d1dc      	bne.n	80115a8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x58>
            pChrom++;
 80115ee:	f10e 0e08 	add.w	lr, lr, #8
        refline += JPEG_ConvertorParams.ScaledWidth;          
 80115f2:	4451      	add	r1, sl
    for(i= 0; i <  8; i++)
 80115f4:	f1bc 0c01 	subs.w	ip, ip, #1
 80115f8:	d1cd      	bne.n	8011596 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x46>
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 80115fa:	f505 7580 	add.w	r5, r5, #256	; 0x100
 80115fe:	e7b6      	b.n	801156e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1e>
 8011600:	20027c5c 	.word	0x20027c5c

08011604 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8011604:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8011606:	68c4      	ldr	r4, [r0, #12]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8011608:	6886      	ldr	r6, [r0, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 801160a:	6805      	ldr	r5, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 801160c:	fb06 f704 	mul.w	r7, r6, r4
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8011610:	4b26      	ldr	r3, [pc, #152]	; (80116ac <JPEG_GetDecodeColorConvertFunc+0xa8>)
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 8011612:	6840      	ldr	r0, [r0, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8011614:	2d10      	cmp	r5, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8011616:	ea4f 0747 	mov.w	r7, r7, lsl #1
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 801161a:	601d      	str	r5, [r3, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 801161c:	609c      	str	r4, [r3, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 801161e:	60de      	str	r6, [r3, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8011620:	611f      	str	r7, [r3, #16]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 8011622:	6058      	str	r0, [r3, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8011624:	d139      	bne.n	801169a <JPEG_GetDecodeColorConvertFunc+0x96>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8011626:	2801      	cmp	r0, #1
 8011628:	d121      	bne.n	801166e <JPEG_GetDecodeColorConvertFunc+0x6a>
    {
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 801162a:	4821      	ldr	r0, [pc, #132]	; (80116b0 <JPEG_GetDecodeColorConvertFunc+0xac>)
 801162c:	6008      	str	r0, [r1, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 801162e:	f014 010f 	ands.w	r1, r4, #15
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 8011632:	f04f 0010 	mov.w	r0, #16
 8011636:	bf18      	it	ne
 8011638:	f1c1 0110 	rsbne	r1, r1, #16
 801163c:	6159      	str	r1, [r3, #20]
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 801163e:	6959      	ldr	r1, [r3, #20]
 8011640:	4421      	add	r1, r4
 8011642:	6259      	str	r1, [r3, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 8011644:	0061      	lsls	r1, r4, #1
 8011646:	6299      	str	r1, [r3, #40]	; 0x28
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8011648:	fbb4 f1f5 	udiv	r1, r4, r5
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 801164c:	fb05 4411 	mls	r4, r5, r1, r4
      JPEG_ConvertorParams.V_factor  = 8;
 8011650:	e9c3 5007 	strd	r5, r0, [r3, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8011654:	b104      	cbz	r4, 8011658 <JPEG_GetDecodeColorConvertFunc+0x54>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 8011656:	3101      	adds	r1, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8011658:	fbb6 f4f0 	udiv	r4, r6, r0
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 801165c:	fb00 6614 	mls	r6, r0, r4, r6
 8011660:	b106      	cbz	r6, 8011664 <JPEG_GetDecodeColorConvertFunc+0x60>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
 8011662:	3401      	adds	r4, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8011664:	4361      	muls	r1, r4
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
 8011666:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8011668:	62d9      	str	r1, [r3, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 801166a:	6011      	str	r1, [r2, #0]
}
 801166c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 801166e:	2802      	cmp	r0, #2
 8011670:	d109      	bne.n	8011686 <JPEG_GetDecodeColorConvertFunc+0x82>
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8011672:	4810      	ldr	r0, [pc, #64]	; (80116b4 <JPEG_GetDecodeColorConvertFunc+0xb0>)
 8011674:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
 8011676:	f014 010f 	ands.w	r1, r4, #15
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 801167a:	bf18      	it	ne
 801167c:	f1c1 0110 	rsbne	r1, r1, #16
 8011680:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.V_factor  = 8;
 8011682:	2008      	movs	r0, #8
 8011684:	e7db      	b.n	801163e <JPEG_GetDecodeColorConvertFunc+0x3a>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8011686:	480c      	ldr	r0, [pc, #48]	; (80116b8 <JPEG_GetDecodeColorConvertFunc+0xb4>)
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8011688:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
 801168a:	f014 0107 	ands.w	r1, r4, #7
 801168e:	d001      	beq.n	8011694 <JPEG_GetDecodeColorConvertFunc+0x90>
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8011690:	f1c1 0108 	rsb	r1, r1, #8
 8011694:	2508      	movs	r5, #8
 8011696:	6159      	str	r1, [r3, #20]
      JPEG_ConvertorParams.V_factor  = 8;
 8011698:	e7f3      	b.n	8011682 <JPEG_GetDecodeColorConvertFunc+0x7e>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 801169a:	b90d      	cbnz	r5, 80116a0 <JPEG_GetDecodeColorConvertFunc+0x9c>
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 801169c:	4807      	ldr	r0, [pc, #28]	; (80116bc <JPEG_GetDecodeColorConvertFunc+0xb8>)
 801169e:	e7f3      	b.n	8011688 <JPEG_GetDecodeColorConvertFunc+0x84>
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 80116a0:	2d30      	cmp	r5, #48	; 0x30
 80116a2:	d101      	bne.n	80116a8 <JPEG_GetDecodeColorConvertFunc+0xa4>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 80116a4:	4806      	ldr	r0, [pc, #24]	; (80116c0 <JPEG_GetDecodeColorConvertFunc+0xbc>)
 80116a6:	e7ef      	b.n	8011688 <JPEG_GetDecodeColorConvertFunc+0x84>
    return HAL_ERROR; /* Color space Not supported*/
 80116a8:	2001      	movs	r0, #1
 80116aa:	e7df      	b.n	801166c <JPEG_GetDecodeColorConvertFunc+0x68>
 80116ac:	20027c5c 	.word	0x20027c5c
 80116b0:	08011075 	.word	0x08011075
 80116b4:	08011275 	.word	0x08011275
 80116b8:	080113d5 	.word	0x080113d5
 80116bc:	080114d1 	.word	0x080114d1
 80116c0:	08011551 	.word	0x08011551

080116c4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80116c4:	8880      	ldrh	r0, [r0, #4]
 80116c6:	4770      	bx	lr

080116c8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80116c8:	b570      	push	{r4, r5, r6, lr}
 80116ca:	6803      	ldr	r3, [r0, #0]
 80116cc:	460c      	mov	r4, r1
 80116ce:	2100      	movs	r1, #0
 80116d0:	4605      	mov	r5, r0
 80116d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116d4:	4798      	blx	r3
 80116d6:	4606      	mov	r6, r0
 80116d8:	682b      	ldr	r3, [r5, #0]
 80116da:	4628      	mov	r0, r5
 80116dc:	1ba4      	subs	r4, r4, r6
 80116de:	6a1b      	ldr	r3, [r3, #32]
 80116e0:	b2a4      	uxth	r4, r4
 80116e2:	4798      	blx	r3
 80116e4:	fbb4 f0f0 	udiv	r0, r4, r0
 80116e8:	bd70      	pop	{r4, r5, r6, pc}

080116ea <_ZN8touchgfx17AbstractPartition5clearEv>:
 80116ea:	2300      	movs	r3, #0
 80116ec:	8083      	strh	r3, [r0, #4]
 80116ee:	4770      	bx	lr

080116f0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80116f0:	b510      	push	{r4, lr}
 80116f2:	6803      	ldr	r3, [r0, #0]
 80116f4:	4604      	mov	r4, r0
 80116f6:	8881      	ldrh	r1, [r0, #4]
 80116f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116fa:	4798      	blx	r3
 80116fc:	88a3      	ldrh	r3, [r4, #4]
 80116fe:	3301      	adds	r3, #1
 8011700:	80a3      	strh	r3, [r4, #4]
 8011702:	bd10      	pop	{r4, pc}

08011704 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8011704:	6803      	ldr	r3, [r0, #0]
 8011706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011708:	4718      	bx	r3

0801170a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801170a:	4770      	bx	lr

0801170c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801170c:	4a02      	ldr	r2, [pc, #8]	; (8011718 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801170e:	6002      	str	r2, [r0, #0]
 8011710:	2200      	movs	r2, #0
 8011712:	8082      	strh	r2, [r0, #4]
 8011714:	4770      	bx	lr
 8011716:	bf00      	nop
 8011718:	080302d0 	.word	0x080302d0

0801171c <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>:
 801171c:	b510      	push	{r4, lr}
 801171e:	6803      	ldr	r3, [r0, #0]
 8011720:	4604      	mov	r4, r0
 8011722:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011726:	4798      	blx	r3
 8011728:	b110      	cbz	r0, 8011730 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x14>
 801172a:	4620      	mov	r0, r4
 801172c:	f7f0 ff83 	bl	8002636 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8011730:	bd10      	pop	{r4, pc}

08011732 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8011732:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8011736:	4770      	bx	lr

08011738 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8011738:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 801173c:	4770      	bx	lr

0801173e <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 801173e:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8011742:	4770      	bx	lr

08011744 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8011744:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8011748:	4770      	bx	lr

0801174a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 801174a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801174c:	461e      	mov	r6, r3
 801174e:	6803      	ldr	r3, [r0, #0]
 8011750:	460f      	mov	r7, r1
 8011752:	4604      	mov	r4, r0
 8011754:	4615      	mov	r5, r2
 8011756:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 801175a:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 801175e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011762:	4798      	blx	r3
 8011764:	b93e      	cbnz	r6, 8011776 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x2c>
 8011766:	1bed      	subs	r5, r5, r7
 8011768:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 801176c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8011770:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
 8011774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011776:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
 801177a:	e7f7      	b.n	801176c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x22>

0801177c <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 801177c:	b510      	push	{r4, lr}
 801177e:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8011782:	600c      	str	r4, [r1, #0]
 8011784:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8011788:	6011      	str	r1, [r2, #0]
 801178a:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 801178e:	801a      	strh	r2, [r3, #0]
 8011790:	9b02      	ldr	r3, [sp, #8]
 8011792:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 8011796:	801a      	strh	r2, [r3, #0]
 8011798:	bd10      	pop	{r4, pc}

0801179a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 801179a:	b510      	push	{r4, lr}
 801179c:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 80117a0:	600c      	str	r4, [r1, #0]
 80117a2:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80117a6:	6011      	str	r1, [r2, #0]
 80117a8:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 80117ac:	801a      	strh	r2, [r3, #0]
 80117ae:	bd10      	pop	{r4, pc}

080117b0 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 80117b0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80117b4:	600b      	str	r3, [r1, #0]
 80117b6:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80117ba:	6013      	str	r3, [r2, #0]
 80117bc:	4770      	bx	lr

080117be <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 80117be:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 80117c2:	4770      	bx	lr

080117c4 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 80117c4:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 80117c8:	4770      	bx	lr

080117ca <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 80117ca:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 80117ce:	4770      	bx	lr

080117d0 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 80117d0:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 80117d4:	4770      	bx	lr

080117d6 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 80117d6:	4770      	bx	lr

080117d8 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 80117d8:	b510      	push	{r4, lr}
 80117da:	4604      	mov	r4, r0
 80117dc:	21b4      	movs	r1, #180	; 0xb4
 80117de:	f019 f8f0 	bl	802a9c2 <_ZdlPvj>
 80117e2:	4620      	mov	r0, r4
 80117e4:	bd10      	pop	{r4, pc}

080117e6 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 80117e6:	b570      	push	{r4, r5, r6, lr}
 80117e8:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 80117ec:	4604      	mov	r4, r0
 80117ee:	4616      	mov	r6, r2
 80117f0:	428d      	cmp	r5, r1
 80117f2:	bfb8      	it	lt
 80117f4:	460d      	movlt	r5, r1
 80117f6:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80117fa:	428d      	cmp	r5, r1
 80117fc:	bfa8      	it	ge
 80117fe:	460d      	movge	r5, r1
 8011800:	b99a      	cbnz	r2, 801182a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 8011802:	6803      	ldr	r3, [r0, #0]
 8011804:	4629      	mov	r1, r5
 8011806:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801180a:	4798      	blx	r3
 801180c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8011810:	b368      	cbz	r0, 801186e <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 8011812:	6803      	ldr	r3, [r0, #0]
 8011814:	68db      	ldr	r3, [r3, #12]
 8011816:	4798      	blx	r3
 8011818:	b348      	cbz	r0, 801186e <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 801181a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 801181e:	4621      	mov	r1, r4
 8011820:	6803      	ldr	r3, [r0, #0]
 8011822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011826:	689b      	ldr	r3, [r3, #8]
 8011828:	4718      	bx	r3
 801182a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 801182e:	2b00      	cmp	r3, #0
 8011830:	dd08      	ble.n	8011844 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5e>
 8011832:	f006 fb41 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 8011836:	4621      	mov	r1, r4
 8011838:	3004      	adds	r0, #4
 801183a:	f006 fb8a 	bl	8017f52 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 801183e:	2300      	movs	r3, #0
 8011840:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8011844:	6823      	ldr	r3, [r4, #0]
 8011846:	4620      	mov	r0, r4
 8011848:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801184c:	4798      	blx	r3
 801184e:	2300      	movs	r3, #0
 8011850:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 8011854:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8011858:	e9c4 0527 	strd	r0, r5, [r4, #156]	; 0x9c
 801185c:	f006 fb2c 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 8011860:	4621      	mov	r1, r4
 8011862:	3004      	adds	r0, #4
 8011864:	f006 fc1e 	bl	80180a4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 8011868:	2301      	movs	r3, #1
 801186a:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 801186e:	bd70      	pop	{r4, r5, r6, pc}

08011870 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8011870:	b510      	push	{r4, lr}
 8011872:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8011876:	4604      	mov	r4, r0
 8011878:	4299      	cmp	r1, r3
 801187a:	bfb8      	it	lt
 801187c:	4619      	movlt	r1, r3
 801187e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8011882:	4299      	cmp	r1, r3
 8011884:	bfa8      	it	ge
 8011886:	4619      	movge	r1, r3
 8011888:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 801188c:	428b      	cmp	r3, r1
 801188e:	d010      	beq.n	80118b2 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8011890:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8011894:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 8011898:	b158      	cbz	r0, 80118b2 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 801189a:	6803      	ldr	r3, [r0, #0]
 801189c:	68db      	ldr	r3, [r3, #12]
 801189e:	4798      	blx	r3
 80118a0:	b138      	cbz	r0, 80118b2 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 80118a2:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 80118a6:	4621      	mov	r1, r4
 80118a8:	6803      	ldr	r3, [r0, #0]
 80118aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118ae:	689b      	ldr	r3, [r3, #8]
 80118b0:	4718      	bx	r3
 80118b2:	bd10      	pop	{r4, pc}

080118b4 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 80118b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80118b6:	4604      	mov	r4, r0
 80118b8:	460d      	mov	r5, r1
 80118ba:	b1a9      	cbz	r1, 80118e8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 80118bc:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 80118c0:	ab01      	add	r3, sp, #4
 80118c2:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 80118c6:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 80118ca:	1b89      	subs	r1, r1, r6
 80118cc:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 80118d0:	1a12      	subs	r2, r2, r0
 80118d2:	1a38      	subs	r0, r7, r0
 80118d4:	f007 fda8 	bl	8019428 <_ZN8touchgfx6muldivElllRl>
 80118d8:	4629      	mov	r1, r5
 80118da:	ab01      	add	r3, sp, #4
 80118dc:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 80118e0:	4430      	add	r0, r6
 80118e2:	f007 fda1 	bl	8019428 <_ZN8touchgfx6muldivElllRl>
 80118e6:	b285      	uxth	r5, r0
 80118e8:	4628      	mov	r0, r5
 80118ea:	b003      	add	sp, #12
 80118ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080118ee <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 80118ee:	b570      	push	{r4, r5, r6, lr}
 80118f0:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 80118f4:	4604      	mov	r4, r0
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d035      	beq.n	8011966 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 80118fa:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 80118fe:	2100      	movs	r1, #0
 8011900:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 8011904:	3001      	adds	r0, #1
 8011906:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	; 0x9c
 801190a:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 801190e:	b280      	uxth	r0, r0
 8011910:	1ad2      	subs	r2, r2, r3
 8011912:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8011916:	b212      	sxth	r2, r2
 8011918:	47a8      	blx	r5
 801191a:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 801191e:	6823      	ldr	r3, [r4, #0]
 8011920:	4401      	add	r1, r0
 8011922:	4620      	mov	r0, r4
 8011924:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011928:	4798      	blx	r3
 801192a:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 801192e:	429a      	cmp	r2, r3
 8011930:	db19      	blt.n	8011966 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8011932:	2500      	movs	r5, #0
 8011934:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8011938:	f006 fabe 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 801193c:	4621      	mov	r1, r4
 801193e:	3004      	adds	r0, #4
 8011940:	f006 fb07 	bl	8017f52 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8011944:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8011948:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 801194c:	b158      	cbz	r0, 8011966 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 801194e:	6803      	ldr	r3, [r0, #0]
 8011950:	68db      	ldr	r3, [r3, #12]
 8011952:	4798      	blx	r3
 8011954:	b138      	cbz	r0, 8011966 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8011956:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 801195a:	4621      	mov	r1, r4
 801195c:	6803      	ldr	r3, [r0, #0]
 801195e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011962:	689b      	ldr	r3, [r3, #8]
 8011964:	4718      	bx	r3
 8011966:	bd70      	pop	{r4, r5, r6, pc}

08011968 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 8011968:	b570      	push	{r4, r5, r6, lr}
 801196a:	6803      	ldr	r3, [r0, #0]
 801196c:	4604      	mov	r4, r0
 801196e:	4615      	mov	r5, r2
 8011970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011972:	4798      	blx	r3
 8011974:	6823      	ldr	r3, [r4, #0]
 8011976:	4629      	mov	r1, r5
 8011978:	4620      	mov	r0, r4
 801197a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801197c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011980:	4718      	bx	r3

08011982 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8011982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011986:	4604      	mov	r4, r0
 8011988:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 801198c:	4698      	mov	r8, r3
 801198e:	460e      	mov	r6, r1
 8011990:	4615      	mov	r5, r2
 8011992:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 8011996:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801199a:	4619      	mov	r1, r3
 801199c:	463a      	mov	r2, r7
 801199e:	3058      	adds	r0, #88	; 0x58
 80119a0:	f7ff ffe2 	bl	8011968 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80119a4:	4446      	add	r6, r8
 80119a6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80119aa:	443d      	add	r5, r7
 80119ac:	42b3      	cmp	r3, r6
 80119ae:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80119b2:	bfb8      	it	lt
 80119b4:	8126      	strhlt	r6, [r4, #8]
 80119b6:	42ab      	cmp	r3, r5
 80119b8:	bfb8      	it	lt
 80119ba:	8165      	strhlt	r5, [r4, #10]
 80119bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080119c0 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 80119c0:	b510      	push	{r4, lr}
 80119c2:	4604      	mov	r4, r0
 80119c4:	302c      	adds	r0, #44	; 0x2c
 80119c6:	f003 fdd0 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80119ca:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 80119ce:	4620      	mov	r0, r4
 80119d0:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 80119d4:	f7ff ffc8 	bl	8011968 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80119d8:	bd10      	pop	{r4, pc}
	...

080119dc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 80119dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80119de:	4604      	mov	r4, r0
 80119e0:	2500      	movs	r5, #0
 80119e2:	f7f5 ffd3 	bl	800798c <_ZN8touchgfx8DrawableC1Ev>
 80119e6:	4b24      	ldr	r3, [pc, #144]	; (8011a78 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 80119e8:	4626      	mov	r6, r4
 80119ea:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80119ee:	2226      	movs	r2, #38	; 0x26
 80119f0:	4629      	mov	r1, r5
 80119f2:	62a5      	str	r5, [r4, #40]	; 0x28
 80119f4:	f846 3b2c 	str.w	r3, [r6], #44
 80119f8:	4630      	mov	r0, r6
 80119fa:	f8ad 7004 	strh.w	r7, [sp, #4]
 80119fe:	f019 fc45 	bl	802b28c <memset>
 8011a02:	4630      	mov	r0, r6
 8011a04:	f7f5 ffc2 	bl	800798c <_ZN8touchgfx8DrawableC1Ev>
 8011a08:	a902      	add	r1, sp, #8
 8011a0a:	4b1c      	ldr	r3, [pc, #112]	; (8011a7c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8011a0c:	4630      	mov	r0, r6
 8011a0e:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 8011a12:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8011a16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011a18:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 8011a1c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8011a20:	f003 fda3 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8011a24:	4638      	mov	r0, r7
 8011a26:	f7f5 ffb1 	bl	800798c <_ZN8touchgfx8DrawableC1Ev>
 8011a2a:	4b15      	ldr	r3, [pc, #84]	; (8011a80 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 8011a2c:	4629      	mov	r1, r5
 8011a2e:	4630      	mov	r0, r6
 8011a30:	65a3      	str	r3, [r4, #88]	; 0x58
 8011a32:	2364      	movs	r3, #100	; 0x64
 8011a34:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8011a38:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8011a3c:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 8011a40:	4b10      	ldr	r3, [pc, #64]	; (8011a84 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 8011a42:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 8011a46:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8011a4a:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 8011a4e:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8011a52:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 8011a56:	f7f0 fd15 	bl	8002484 <_ZN8touchgfx8Drawable4setXEs>
 8011a5a:	4629      	mov	r1, r5
 8011a5c:	4630      	mov	r0, r6
 8011a5e:	f7f0 fd13 	bl	8002488 <_ZN8touchgfx8Drawable4setYEs>
 8011a62:	4631      	mov	r1, r6
 8011a64:	4620      	mov	r0, r4
 8011a66:	f000 f819 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8011a6a:	4620      	mov	r0, r4
 8011a6c:	4639      	mov	r1, r7
 8011a6e:	f000 f815 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8011a72:	4620      	mov	r0, r4
 8011a74:	b003      	add	sp, #12
 8011a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a78:	08030304 	.word	0x08030304
 8011a7c:	08030c40 	.word	0x08030c40
 8011a80:	080303d8 	.word	0x080303d8
 8011a84:	08019b87 	.word	0x08019b87

08011a88 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8011a88:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011a8a:	2000      	movs	r0, #0
 8011a8c:	b12b      	cbz	r3, 8011a9a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8011a8e:	b920      	cbnz	r0, 8011a9a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8011a90:	1a5a      	subs	r2, r3, r1
 8011a92:	699b      	ldr	r3, [r3, #24]
 8011a94:	4250      	negs	r0, r2
 8011a96:	4150      	adcs	r0, r2
 8011a98:	e7f8      	b.n	8011a8c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8011a9a:	4770      	bx	lr

08011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	6148      	str	r0, [r1, #20]
 8011aa0:	618b      	str	r3, [r1, #24]
 8011aa2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011aa4:	b913      	cbnz	r3, 8011aac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8011aa6:	6281      	str	r1, [r0, #40]	; 0x28
 8011aa8:	4770      	bx	lr
 8011aaa:	4613      	mov	r3, r2
 8011aac:	699a      	ldr	r2, [r3, #24]
 8011aae:	2a00      	cmp	r2, #0
 8011ab0:	d1fb      	bne.n	8011aaa <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8011ab2:	6199      	str	r1, [r3, #24]
 8011ab4:	4770      	bx	lr

08011ab6 <_ZN8touchgfx9Container9removeAllEv>:
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011aba:	b123      	cbz	r3, 8011ac6 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8011abc:	6999      	ldr	r1, [r3, #24]
 8011abe:	6281      	str	r1, [r0, #40]	; 0x28
 8011ac0:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8011ac4:	e7f8      	b.n	8011ab8 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8011ac6:	4770      	bx	lr

08011ac8 <_ZN8touchgfx9Container6unlinkEv>:
 8011ac8:	2300      	movs	r3, #0
 8011aca:	6283      	str	r3, [r0, #40]	; 0x28
 8011acc:	4770      	bx	lr

08011ace <_ZNK8touchgfx9Container12getSolidRectEv>:
 8011ace:	2200      	movs	r2, #0
 8011ad0:	8002      	strh	r2, [r0, #0]
 8011ad2:	8042      	strh	r2, [r0, #2]
 8011ad4:	8082      	strh	r2, [r0, #4]
 8011ad6:	80c2      	strh	r2, [r0, #6]
 8011ad8:	4770      	bx	lr

08011ada <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8011ada:	b570      	push	{r4, r5, r6, lr}
 8011adc:	460d      	mov	r5, r1
 8011ade:	4616      	mov	r6, r2
 8011ae0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011ae2:	b13c      	cbz	r4, 8011af4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8011ae4:	6823      	ldr	r3, [r4, #0]
 8011ae6:	4620      	mov	r0, r4
 8011ae8:	4632      	mov	r2, r6
 8011aea:	4629      	mov	r1, r5
 8011aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011aee:	4798      	blx	r3
 8011af0:	69a4      	ldr	r4, [r4, #24]
 8011af2:	e7f6      	b.n	8011ae2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8011af4:	bd70      	pop	{r4, r5, r6, pc}

08011af6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8011af6:	b538      	push	{r3, r4, r5, lr}
 8011af8:	460d      	mov	r5, r1
 8011afa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011afc:	b134      	cbz	r4, 8011b0c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8011afe:	682b      	ldr	r3, [r5, #0]
 8011b00:	4621      	mov	r1, r4
 8011b02:	4628      	mov	r0, r5
 8011b04:	689b      	ldr	r3, [r3, #8]
 8011b06:	4798      	blx	r3
 8011b08:	69a4      	ldr	r4, [r4, #24]
 8011b0a:	e7f7      	b.n	8011afc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8011b0c:	bd38      	pop	{r3, r4, r5, pc}

08011b0e <_ZN8touchgfx9ContainerD1Ev>:
 8011b0e:	4770      	bx	lr

08011b10 <_ZN8touchgfx9ContainerD0Ev>:
 8011b10:	b510      	push	{r4, lr}
 8011b12:	4604      	mov	r4, r0
 8011b14:	212c      	movs	r1, #44	; 0x2c
 8011b16:	f018 ff54 	bl	802a9c2 <_ZdlPvj>
 8011b1a:	4620      	mov	r0, r4
 8011b1c:	bd10      	pop	{r4, pc}

08011b1e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8011b1e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011b20:	b19b      	cbz	r3, 8011b4a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011b22:	428b      	cmp	r3, r1
 8011b24:	d109      	bne.n	8011b3a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8011b26:	699a      	ldr	r2, [r3, #24]
 8011b28:	2100      	movs	r1, #0
 8011b2a:	6159      	str	r1, [r3, #20]
 8011b2c:	6282      	str	r2, [r0, #40]	; 0x28
 8011b2e:	b902      	cbnz	r2, 8011b32 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8011b30:	4770      	bx	lr
 8011b32:	6199      	str	r1, [r3, #24]
 8011b34:	4770      	bx	lr
 8011b36:	4613      	mov	r3, r2
 8011b38:	b13a      	cbz	r2, 8011b4a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011b3a:	699a      	ldr	r2, [r3, #24]
 8011b3c:	428a      	cmp	r2, r1
 8011b3e:	d1fa      	bne.n	8011b36 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8011b40:	698a      	ldr	r2, [r1, #24]
 8011b42:	619a      	str	r2, [r3, #24]
 8011b44:	2300      	movs	r3, #0
 8011b46:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8011b4a:	4770      	bx	lr

08011b4c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8011b4c:	b410      	push	{r4}
 8011b4e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011b50:	4604      	mov	r4, r0
 8011b52:	b92b      	cbnz	r3, 8011b60 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8011b54:	6803      	ldr	r3, [r0, #0]
 8011b56:	4611      	mov	r1, r2
 8011b58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011b5e:	4718      	bx	r3
 8011b60:	b941      	cbnz	r1, 8011b74 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8011b62:	6193      	str	r3, [r2, #24]
 8011b64:	6282      	str	r2, [r0, #40]	; 0x28
 8011b66:	6154      	str	r4, [r2, #20]
 8011b68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b6c:	4770      	bx	lr
 8011b6e:	4603      	mov	r3, r0
 8011b70:	2800      	cmp	r0, #0
 8011b72:	d0f9      	beq.n	8011b68 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8011b74:	4299      	cmp	r1, r3
 8011b76:	6998      	ldr	r0, [r3, #24]
 8011b78:	d1f9      	bne.n	8011b6e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8011b7a:	6190      	str	r0, [r2, #24]
 8011b7c:	618a      	str	r2, [r1, #24]
 8011b7e:	e7f2      	b.n	8011b66 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08011b80 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8011b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b84:	461f      	mov	r7, r3
 8011b86:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8011b8a:	460d      	mov	r5, r1
 8011b8c:	4616      	mov	r6, r2
 8011b8e:	b103      	cbz	r3, 8011b92 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8011b90:	6038      	str	r0, [r7, #0]
 8011b92:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011b94:	b314      	cbz	r4, 8011bdc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8011b96:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8011b9a:	b1eb      	cbz	r3, 8011bd8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011b9c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011ba0:	428d      	cmp	r5, r1
 8011ba2:	db19      	blt.n	8011bd8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011ba4:	b289      	uxth	r1, r1
 8011ba6:	8923      	ldrh	r3, [r4, #8]
 8011ba8:	440b      	add	r3, r1
 8011baa:	b21b      	sxth	r3, r3
 8011bac:	429d      	cmp	r5, r3
 8011bae:	da13      	bge.n	8011bd8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011bb0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011bb4:	4296      	cmp	r6, r2
 8011bb6:	db0f      	blt.n	8011bd8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011bb8:	b292      	uxth	r2, r2
 8011bba:	8963      	ldrh	r3, [r4, #10]
 8011bbc:	4413      	add	r3, r2
 8011bbe:	b21b      	sxth	r3, r3
 8011bc0:	429e      	cmp	r6, r3
 8011bc2:	da09      	bge.n	8011bd8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011bc4:	6823      	ldr	r3, [r4, #0]
 8011bc6:	1ab2      	subs	r2, r6, r2
 8011bc8:	1a69      	subs	r1, r5, r1
 8011bca:	4620      	mov	r0, r4
 8011bcc:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8011bd0:	b212      	sxth	r2, r2
 8011bd2:	463b      	mov	r3, r7
 8011bd4:	b209      	sxth	r1, r1
 8011bd6:	47c0      	blx	r8
 8011bd8:	69a4      	ldr	r4, [r4, #24]
 8011bda:	e7db      	b.n	8011b94 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8011bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011be0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8011be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011be4:	4c6d      	ldr	r4, [pc, #436]	; (8011d9c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8011be6:	b0a1      	sub	sp, #132	; 0x84
 8011be8:	4606      	mov	r6, r0
 8011bea:	6824      	ldr	r4, [r4, #0]
 8011bec:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8011bee:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8011bf2:	2400      	movs	r4, #0
 8011bf4:	9303      	str	r3, [sp, #12]
 8011bf6:	802c      	strh	r4, [r5, #0]
 8011bf8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8011bfa:	802c      	strh	r4, [r5, #0]
 8011bfc:	601c      	str	r4, [r3, #0]
 8011bfe:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8011c02:	f7ff ffbd 	bl	8011b80 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011c06:	f1b9 0f03 	cmp.w	r9, #3
 8011c0a:	f340 80c1 	ble.w	8011d90 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8011c0e:	4631      	mov	r1, r6
 8011c10:	a80c      	add	r0, sp, #48	; 0x30
 8011c12:	f007 fad7 	bl	80191c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011c16:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8011c1a:	9306      	str	r3, [sp, #24]
 8011c1c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8011c20:	9307      	str	r3, [sp, #28]
 8011c22:	9b03      	ldr	r3, [sp, #12]
 8011c24:	f8d3 a000 	ldr.w	sl, [r3]
 8011c28:	f1ba 0f00 	cmp.w	sl, #0
 8011c2c:	f000 80b3 	beq.w	8011d96 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8011c30:	4651      	mov	r1, sl
 8011c32:	a810      	add	r0, sp, #64	; 0x40
 8011c34:	f007 fac6 	bl	80191c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011c38:	2002      	movs	r0, #2
 8011c3a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8011c3e:	9b01      	ldr	r3, [sp, #4]
 8011c40:	9a06      	ldr	r2, [sp, #24]
 8011c42:	fb91 f1f0 	sdiv	r1, r1, r0
 8011c46:	189d      	adds	r5, r3, r2
 8011c48:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8011c4c:	9a07      	ldr	r2, [sp, #28]
 8011c4e:	4419      	add	r1, r3
 8011c50:	9b02      	ldr	r3, [sp, #8]
 8011c52:	4413      	add	r3, r2
 8011c54:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8011c58:	1a6d      	subs	r5, r5, r1
 8011c5a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8011c5e:	fb92 f2f0 	sdiv	r2, r2, r0
 8011c62:	440a      	add	r2, r1
 8011c64:	1a9b      	subs	r3, r3, r2
 8011c66:	435b      	muls	r3, r3
 8011c68:	fb05 3505 	mla	r5, r5, r5, r3
 8011c6c:	4f4c      	ldr	r7, [pc, #304]	; (8011da0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8011c6e:	ac10      	add	r4, sp, #64	; 0x40
 8011c70:	f1b9 0f0c 	cmp.w	r9, #12
 8011c74:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c78:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c7c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c80:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8011c84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011c88:	f04f 0303 	mov.w	r3, #3
 8011c8c:	bfd8      	it	le
 8011c8e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8011c92:	f04f 0400 	mov.w	r4, #0
 8011c96:	f8cd 9000 	str.w	r9, [sp]
 8011c9a:	bfcc      	ite	gt
 8011c9c:	4698      	movgt	r8, r3
 8011c9e:	fb92 f8f3 	sdivle	r8, r2, r3
 8011ca2:	1c63      	adds	r3, r4, #1
 8011ca4:	aa10      	add	r2, sp, #64	; 0x40
 8011ca6:	f004 0401 	and.w	r4, r4, #1
 8011caa:	f04f 0b00 	mov.w	fp, #0
 8011cae:	9308      	str	r3, [sp, #32]
 8011cb0:	9b00      	ldr	r3, [sp, #0]
 8011cb2:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8011cb6:	fb93 f3f8 	sdiv	r3, r3, r8
 8011cba:	3404      	adds	r4, #4
 8011cbc:	b29b      	uxth	r3, r3
 8011cbe:	9304      	str	r3, [sp, #16]
 8011cc0:	9a04      	ldr	r2, [sp, #16]
 8011cc2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011cc6:	fb13 f302 	smulbb	r3, r3, r2
 8011cca:	9a01      	ldr	r2, [sp, #4]
 8011ccc:	b29b      	uxth	r3, r3
 8011cce:	1899      	adds	r1, r3, r2
 8011cd0:	9305      	str	r3, [sp, #20]
 8011cd2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8011cd6:	b209      	sxth	r1, r1
 8011cd8:	4299      	cmp	r1, r3
 8011cda:	db4d      	blt.n	8011d78 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011cdc:	8932      	ldrh	r2, [r6, #8]
 8011cde:	4413      	add	r3, r2
 8011ce0:	b21b      	sxth	r3, r3
 8011ce2:	4299      	cmp	r1, r3
 8011ce4:	da48      	bge.n	8011d78 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011ce6:	9b04      	ldr	r3, [sp, #16]
 8011ce8:	6827      	ldr	r7, [r4, #0]
 8011cea:	fb17 f703 	smulbb	r7, r7, r3
 8011cee:	9b02      	ldr	r3, [sp, #8]
 8011cf0:	b2bf      	uxth	r7, r7
 8011cf2:	18fa      	adds	r2, r7, r3
 8011cf4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8011cf8:	b212      	sxth	r2, r2
 8011cfa:	429a      	cmp	r2, r3
 8011cfc:	db3c      	blt.n	8011d78 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011cfe:	8970      	ldrh	r0, [r6, #10]
 8011d00:	4403      	add	r3, r0
 8011d02:	b21b      	sxth	r3, r3
 8011d04:	429a      	cmp	r2, r3
 8011d06:	da37      	bge.n	8011d78 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011d08:	2300      	movs	r3, #0
 8011d0a:	4630      	mov	r0, r6
 8011d0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8011d0e:	ab0b      	add	r3, sp, #44	; 0x2c
 8011d10:	f7ff ff36 	bl	8011b80 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011d14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011d16:	b37a      	cbz	r2, 8011d78 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011d18:	4552      	cmp	r2, sl
 8011d1a:	d02d      	beq.n	8011d78 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011d1c:	4611      	mov	r1, r2
 8011d1e:	a80e      	add	r0, sp, #56	; 0x38
 8011d20:	9209      	str	r2, [sp, #36]	; 0x24
 8011d22:	f007 fa4f 	bl	80191c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011d26:	f04f 0e02 	mov.w	lr, #2
 8011d2a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8011d2e:	9a06      	ldr	r2, [sp, #24]
 8011d30:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8011d34:	9b01      	ldr	r3, [sp, #4]
 8011d36:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8011d3a:	4413      	add	r3, r2
 8011d3c:	9a07      	ldr	r2, [sp, #28]
 8011d3e:	fb91 f1fe 	sdiv	r1, r1, lr
 8011d42:	fb9c fcfe 	sdiv	ip, ip, lr
 8011d46:	4401      	add	r1, r0
 8011d48:	1a58      	subs	r0, r3, r1
 8011d4a:	9b02      	ldr	r3, [sp, #8]
 8011d4c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8011d50:	4413      	add	r3, r2
 8011d52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d54:	448c      	add	ip, r1
 8011d56:	eba3 030c 	sub.w	r3, r3, ip
 8011d5a:	435b      	muls	r3, r3
 8011d5c:	fb00 3300 	mla	r3, r0, r0, r3
 8011d60:	42ab      	cmp	r3, r5
 8011d62:	d208      	bcs.n	8011d76 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8011d64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011d66:	461d      	mov	r5, r3
 8011d68:	9803      	ldr	r0, [sp, #12]
 8011d6a:	6001      	str	r1, [r0, #0]
 8011d6c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8011d6e:	9805      	ldr	r0, [sp, #20]
 8011d70:	8008      	strh	r0, [r1, #0]
 8011d72:	992b      	ldr	r1, [sp, #172]	; 0xac
 8011d74:	800f      	strh	r7, [r1, #0]
 8011d76:	4692      	mov	sl, r2
 8011d78:	f10b 0b01 	add.w	fp, fp, #1
 8011d7c:	3408      	adds	r4, #8
 8011d7e:	f1bb 0f04 	cmp.w	fp, #4
 8011d82:	d19d      	bne.n	8011cc0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8011d84:	9b00      	ldr	r3, [sp, #0]
 8011d86:	9c08      	ldr	r4, [sp, #32]
 8011d88:	444b      	add	r3, r9
 8011d8a:	4544      	cmp	r4, r8
 8011d8c:	9300      	str	r3, [sp, #0]
 8011d8e:	d188      	bne.n	8011ca2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8011d90:	b021      	add	sp, #132	; 0x84
 8011d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d96:	f04f 35ff 	mov.w	r5, #4294967295
 8011d9a:	e767      	b.n	8011c6c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8011d9c:	20027ca8 	.word	0x20027ca8
 8011da0:	0802bed0 	.word	0x0802bed0

08011da4 <_ZN8touchgfx4RectaNERKS0_>:
 8011da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011da8:	f9b1 7000 	ldrsh.w	r7, [r1]
 8011dac:	888c      	ldrh	r4, [r1, #4]
 8011dae:	f9b0 9000 	ldrsh.w	r9, [r0]
 8011db2:	443c      	add	r4, r7
 8011db4:	b2a4      	uxth	r4, r4
 8011db6:	fa0f f884 	sxth.w	r8, r4
 8011dba:	45c1      	cmp	r9, r8
 8011dbc:	da2f      	bge.n	8011e1e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011dbe:	8882      	ldrh	r2, [r0, #4]
 8011dc0:	444a      	add	r2, r9
 8011dc2:	b292      	uxth	r2, r2
 8011dc4:	fa0f fe82 	sxth.w	lr, r2
 8011dc8:	4577      	cmp	r7, lr
 8011dca:	da28      	bge.n	8011e1e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011dcc:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8011dd0:	88cb      	ldrh	r3, [r1, #6]
 8011dd2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8011dd6:	442b      	add	r3, r5
 8011dd8:	b21b      	sxth	r3, r3
 8011dda:	429e      	cmp	r6, r3
 8011ddc:	da1f      	bge.n	8011e1e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011dde:	88c3      	ldrh	r3, [r0, #6]
 8011de0:	4433      	add	r3, r6
 8011de2:	b29b      	uxth	r3, r3
 8011de4:	fa0f fc83 	sxth.w	ip, r3
 8011de8:	4565      	cmp	r5, ip
 8011dea:	da18      	bge.n	8011e1e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011dec:	454f      	cmp	r7, r9
 8011dee:	bfb8      	it	lt
 8011df0:	464f      	movlt	r7, r9
 8011df2:	42b5      	cmp	r5, r6
 8011df4:	bfb8      	it	lt
 8011df6:	4635      	movlt	r5, r6
 8011df8:	45f0      	cmp	r8, lr
 8011dfa:	bfd8      	it	le
 8011dfc:	4622      	movle	r2, r4
 8011dfe:	1bd2      	subs	r2, r2, r7
 8011e00:	8082      	strh	r2, [r0, #4]
 8011e02:	884a      	ldrh	r2, [r1, #2]
 8011e04:	88c9      	ldrh	r1, [r1, #6]
 8011e06:	8007      	strh	r7, [r0, #0]
 8011e08:	440a      	add	r2, r1
 8011e0a:	8045      	strh	r5, [r0, #2]
 8011e0c:	b292      	uxth	r2, r2
 8011e0e:	b211      	sxth	r1, r2
 8011e10:	458c      	cmp	ip, r1
 8011e12:	bfa8      	it	ge
 8011e14:	4613      	movge	r3, r2
 8011e16:	1b5b      	subs	r3, r3, r5
 8011e18:	80c3      	strh	r3, [r0, #6]
 8011e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e1e:	2300      	movs	r3, #0
 8011e20:	8003      	strh	r3, [r0, #0]
 8011e22:	8043      	strh	r3, [r0, #2]
 8011e24:	8083      	strh	r3, [r0, #4]
 8011e26:	80c3      	strh	r3, [r0, #6]
 8011e28:	e7f7      	b.n	8011e1a <_ZN8touchgfx4RectaNERKS0_+0x76>

08011e2a <_ZNK8touchgfx4Rect7isEmptyEv>:
 8011e2a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	dd06      	ble.n	8011e40 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8011e32:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8011e36:	2800      	cmp	r0, #0
 8011e38:	bfcc      	ite	gt
 8011e3a:	2000      	movgt	r0, #0
 8011e3c:	2001      	movle	r0, #1
 8011e3e:	4770      	bx	lr
 8011e40:	2001      	movs	r0, #1
 8011e42:	4770      	bx	lr

08011e44 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8011e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e48:	2300      	movs	r3, #0
 8011e4a:	4604      	mov	r4, r0
 8011e4c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8011e4e:	8003      	strh	r3, [r0, #0]
 8011e50:	8043      	strh	r3, [r0, #2]
 8011e52:	8083      	strh	r3, [r0, #4]
 8011e54:	80c3      	strh	r3, [r0, #6]
 8011e56:	2d00      	cmp	r5, #0
 8011e58:	d040      	beq.n	8011edc <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8011e5a:	1d28      	adds	r0, r5, #4
 8011e5c:	f7ff ffe5 	bl	8011e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8011e60:	b988      	cbnz	r0, 8011e86 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8011e62:	4620      	mov	r0, r4
 8011e64:	f7ff ffe1 	bl	8011e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8011e68:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8011e6c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8011e70:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8011e74:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8011e78:	b138      	cbz	r0, 8011e8a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8011e7a:	8022      	strh	r2, [r4, #0]
 8011e7c:	8063      	strh	r3, [r4, #2]
 8011e7e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8011e82:	f8a4 c006 	strh.w	ip, [r4, #6]
 8011e86:	69ad      	ldr	r5, [r5, #24]
 8011e88:	e7e5      	b.n	8011e56 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8011e8a:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011e8e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011e92:	4290      	cmp	r0, r2
 8011e94:	4607      	mov	r7, r0
 8011e96:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8011e9a:	460e      	mov	r6, r1
 8011e9c:	bfa8      	it	ge
 8011e9e:	4617      	movge	r7, r2
 8011ea0:	4299      	cmp	r1, r3
 8011ea2:	4472      	add	r2, lr
 8011ea4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8011ea8:	bfa8      	it	ge
 8011eaa:	461e      	movge	r6, r3
 8011eac:	4440      	add	r0, r8
 8011eae:	4471      	add	r1, lr
 8011eb0:	4463      	add	r3, ip
 8011eb2:	b200      	sxth	r0, r0
 8011eb4:	8027      	strh	r7, [r4, #0]
 8011eb6:	b212      	sxth	r2, r2
 8011eb8:	8066      	strh	r6, [r4, #2]
 8011eba:	b209      	sxth	r1, r1
 8011ebc:	b21b      	sxth	r3, r3
 8011ebe:	4290      	cmp	r0, r2
 8011ec0:	bfac      	ite	ge
 8011ec2:	ebc7 0200 	rsbge	r2, r7, r0
 8011ec6:	ebc7 0202 	rsblt	r2, r7, r2
 8011eca:	4299      	cmp	r1, r3
 8011ecc:	bfac      	ite	ge
 8011ece:	ebc6 0301 	rsbge	r3, r6, r1
 8011ed2:	ebc6 0303 	rsblt	r3, r6, r3
 8011ed6:	80a2      	strh	r2, [r4, #4]
 8011ed8:	80e3      	strh	r3, [r4, #6]
 8011eda:	e7d4      	b.n	8011e86 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8011edc:	4620      	mov	r0, r4
 8011ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011ee2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8011ee2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011ee6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8011eea:	b383      	cbz	r3, 8011f4e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8011eec:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011eee:	b374      	cbz	r4, 8011f4e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8011ef0:	f9b1 5000 	ldrsh.w	r5, [r1]
 8011ef4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8011ef8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8011efc:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8011f00:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8011f04:	b303      	cbz	r3, 8011f48 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8011f06:	4668      	mov	r0, sp
 8011f08:	1d21      	adds	r1, r4, #4
 8011f0a:	f8ad 5000 	strh.w	r5, [sp]
 8011f0e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8011f12:	f8ad 7004 	strh.w	r7, [sp, #4]
 8011f16:	f8ad 8006 	strh.w	r8, [sp, #6]
 8011f1a:	f7ff ff43 	bl	8011da4 <_ZN8touchgfx4RectaNERKS0_>
 8011f1e:	4668      	mov	r0, sp
 8011f20:	f7ff ff83 	bl	8011e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8011f24:	b980      	cbnz	r0, 8011f48 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8011f26:	f8bd 3000 	ldrh.w	r3, [sp]
 8011f2a:	4669      	mov	r1, sp
 8011f2c:	88a2      	ldrh	r2, [r4, #4]
 8011f2e:	4620      	mov	r0, r4
 8011f30:	1a9b      	subs	r3, r3, r2
 8011f32:	88e2      	ldrh	r2, [r4, #6]
 8011f34:	f8ad 3000 	strh.w	r3, [sp]
 8011f38:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011f3c:	1a9b      	subs	r3, r3, r2
 8011f3e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011f42:	6823      	ldr	r3, [r4, #0]
 8011f44:	689b      	ldr	r3, [r3, #8]
 8011f46:	4798      	blx	r3
 8011f48:	69a4      	ldr	r4, [r4, #24]
 8011f4a:	2c00      	cmp	r4, #0
 8011f4c:	d1d8      	bne.n	8011f00 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8011f4e:	b002      	add	sp, #8
 8011f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011f54 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8011f54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011f56:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8011f5a:	460d      	mov	r5, r1
 8011f5c:	4616      	mov	r6, r2
 8011f5e:	b323      	cbz	r3, 8011faa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8011f60:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011f62:	b314      	cbz	r4, 8011faa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8011f64:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8011f68:	b1eb      	cbz	r3, 8011fa6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8011f6a:	6828      	ldr	r0, [r5, #0]
 8011f6c:	466b      	mov	r3, sp
 8011f6e:	6869      	ldr	r1, [r5, #4]
 8011f70:	c303      	stmia	r3!, {r0, r1}
 8011f72:	4668      	mov	r0, sp
 8011f74:	1d21      	adds	r1, r4, #4
 8011f76:	f7ff ff15 	bl	8011da4 <_ZN8touchgfx4RectaNERKS0_>
 8011f7a:	4668      	mov	r0, sp
 8011f7c:	f7ff ff55 	bl	8011e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8011f80:	b988      	cbnz	r0, 8011fa6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8011f82:	f8bd 3000 	ldrh.w	r3, [sp]
 8011f86:	4669      	mov	r1, sp
 8011f88:	88a2      	ldrh	r2, [r4, #4]
 8011f8a:	4620      	mov	r0, r4
 8011f8c:	1a9b      	subs	r3, r3, r2
 8011f8e:	88e2      	ldrh	r2, [r4, #6]
 8011f90:	f8ad 3000 	strh.w	r3, [sp]
 8011f94:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011f98:	1a9b      	subs	r3, r3, r2
 8011f9a:	4632      	mov	r2, r6
 8011f9c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011fa0:	6823      	ldr	r3, [r4, #0]
 8011fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011fa4:	4798      	blx	r3
 8011fa6:	69a4      	ldr	r4, [r4, #24]
 8011fa8:	e7db      	b.n	8011f62 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8011faa:	b002      	add	sp, #8
 8011fac:	bd70      	pop	{r4, r5, r6, pc}

08011fae <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 8011fae:	f9b0 00e4 	ldrsh.w	r0, [r0, #228]	; 0xe4
 8011fb2:	4770      	bx	lr

08011fb4 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 8011fb4:	f9b0 00e6 	ldrsh.w	r0, [r0, #230]	; 0xe6
 8011fb8:	4770      	bx	lr

08011fba <_ZNK8touchgfx6Slider11getMinValueEv>:
 8011fba:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	; 0x30
 8011fbe:	4770      	bx	lr

08011fc0 <_ZNK8touchgfx6Slider11getMaxValueEv>:
 8011fc0:	f9b0 0032 	ldrsh.w	r0, [r0, #50]	; 0x32
 8011fc4:	4770      	bx	lr

08011fc6 <_ZN8touchgfx6Slider8setValueEs>:
 8011fc6:	b570      	push	{r4, r5, r6, lr}
 8011fc8:	6803      	ldr	r3, [r0, #0]
 8011fca:	4604      	mov	r4, r0
 8011fcc:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8011fd0:	4798      	blx	r3
 8011fd2:	4601      	mov	r1, r0
 8011fd4:	462b      	mov	r3, r5
 8011fd6:	4620      	mov	r0, r4
 8011fd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011fdc:	4718      	bx	r3

08011fde <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 8011fde:	b570      	push	{r4, r5, r6, lr}
 8011fe0:	6803      	ldr	r3, [r0, #0]
 8011fe2:	4604      	mov	r4, r0
 8011fe4:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8011fe8:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
 8011fec:	b95a      	cbnz	r2, 8012006 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x28>
 8011fee:	894d      	ldrh	r5, [r1, #10]
 8011ff0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8011ff4:	4620      	mov	r0, r4
 8011ff6:	4798      	blx	r3
 8011ff8:	1a29      	subs	r1, r5, r0
 8011ffa:	4633      	mov	r3, r6
 8011ffc:	4620      	mov	r0, r4
 8011ffe:	b209      	sxth	r1, r1
 8012000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012004:	4718      	bx	r3
 8012006:	898d      	ldrh	r5, [r1, #12]
 8012008:	e7f2      	b.n	8011ff0 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x12>

0801200a <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 801200a:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 801200e:	2302      	movs	r3, #2
 8012010:	b922      	cbnz	r2, 801201c <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x12>
 8012012:	f9b0 0094 	ldrsh.w	r0, [r0, #148]	; 0x94
 8012016:	fb90 f0f3 	sdiv	r0, r0, r3
 801201a:	4770      	bx	lr
 801201c:	f9b0 0096 	ldrsh.w	r0, [r0, #150]	; 0x96
 8012020:	e7f9      	b.n	8012016 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

08012022 <_ZN8touchgfx6Slider13setValueRangeEsss>:
 8012022:	8642      	strh	r2, [r0, #50]	; 0x32
 8012024:	6802      	ldr	r2, [r0, #0]
 8012026:	8601      	strh	r1, [r0, #48]	; 0x30
 8012028:	4619      	mov	r1, r3
 801202a:	b410      	push	{r4}
 801202c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012030:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8012034:	4710      	bx	r2

08012036 <_ZN8touchgfx6Slider13setValueRangeEss>:
 8012036:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 801203a:	428b      	cmp	r3, r1
 801203c:	b410      	push	{r4}
 801203e:	db09      	blt.n	8012054 <_ZN8touchgfx6Slider13setValueRangeEss+0x1e>
 8012040:	4293      	cmp	r3, r2
 8012042:	bfa8      	it	ge
 8012044:	4613      	movge	r3, r2
 8012046:	6804      	ldr	r4, [r0, #0]
 8012048:	f8d4 4098 	ldr.w	r4, [r4, #152]	; 0x98
 801204c:	46a4      	mov	ip, r4
 801204e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012052:	4760      	bx	ip
 8012054:	460b      	mov	r3, r1
 8012056:	e7f6      	b.n	8012046 <_ZN8touchgfx6Slider13setValueRangeEss+0x10>

08012058 <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 8012058:	f9b0 20e6 	ldrsh.w	r2, [r0, #230]	; 0xe6
 801205c:	f9b0 00e4 	ldrsh.w	r0, [r0, #228]	; 0xe4
 8012060:	1a10      	subs	r0, r2, r0
 8012062:	4770      	bx	lr

08012064 <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 8012064:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	; 0x32
 8012068:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	; 0x30
 801206c:	1a10      	subs	r0, r2, r0
 801206e:	4770      	bx	lr

08012070 <_ZN8touchgfx6SliderD1Ev>:
 8012070:	4770      	bx	lr

08012072 <_ZN8touchgfx6SliderD0Ev>:
 8012072:	b510      	push	{r4, lr}
 8012074:	4604      	mov	r4, r0
 8012076:	21f4      	movs	r1, #244	; 0xf4
 8012078:	f018 fca3 	bl	802a9c2 <_ZdlPvj>
 801207c:	4620      	mov	r0, r4
 801207e:	bd10      	pop	{r4, pc}

08012080 <_ZNK8touchgfx6Slider15valueToPositionEi>:
 8012080:	b570      	push	{r4, r5, r6, lr}
 8012082:	f9b0 5032 	ldrsh.w	r5, [r0, #50]	; 0x32
 8012086:	4604      	mov	r4, r0
 8012088:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 801208c:	428d      	cmp	r5, r1
 801208e:	bfa8      	it	ge
 8012090:	460d      	movge	r5, r1
 8012092:	429d      	cmp	r5, r3
 8012094:	bfac      	ite	ge
 8012096:	ebc3 0505 	rsbge	r5, r3, r5
 801209a:	ebc3 0503 	rsblt	r5, r3, r3
 801209e:	6803      	ldr	r3, [r0, #0]
 80120a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80120a4:	4798      	blx	r3
 80120a6:	6823      	ldr	r3, [r4, #0]
 80120a8:	4606      	mov	r6, r0
 80120aa:	4620      	mov	r0, r4
 80120ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80120b0:	4798      	blx	r3
 80120b2:	4631      	mov	r1, r6
 80120b4:	4602      	mov	r2, r0
 80120b6:	4628      	mov	r0, r5
 80120b8:	f007 f9d5 	bl	8019466 <_ZN8touchgfx6muldivElll>
 80120bc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80120c0:	2b01      	cmp	r3, #1
 80120c2:	bf0b      	itete	eq
 80120c4:	f8b4 30e6 	ldrheq.w	r3, [r4, #230]	; 0xe6
 80120c8:	f8b4 30e4 	ldrhne.w	r3, [r4, #228]	; 0xe4
 80120cc:	1a18      	subeq	r0, r3, r0
 80120ce:	18c0      	addne	r0, r0, r3
 80120d0:	b200      	sxth	r0, r0
 80120d2:	bd70      	pop	{r4, r5, r6, pc}

080120d4 <_ZNK8touchgfx6Slider15positionToValueEs>:
 80120d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120d6:	f9b0 30e6 	ldrsh.w	r3, [r0, #230]	; 0xe6
 80120da:	4605      	mov	r5, r0
 80120dc:	f9b0 40e4 	ldrsh.w	r4, [r0, #228]	; 0xe4
 80120e0:	4299      	cmp	r1, r3
 80120e2:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 80120e6:	f9b0 6030 	ldrsh.w	r6, [r0, #48]	; 0x30
 80120ea:	bfa8      	it	ge
 80120ec:	4619      	movge	r1, r3
 80120ee:	42a1      	cmp	r1, r4
 80120f0:	bfb8      	it	lt
 80120f2:	4621      	movlt	r1, r4
 80120f4:	2a01      	cmp	r2, #1
 80120f6:	b289      	uxth	r1, r1
 80120f8:	bf08      	it	eq
 80120fa:	1a5c      	subeq	r4, r3, r1
 80120fc:	6803      	ldr	r3, [r0, #0]
 80120fe:	bf18      	it	ne
 8012100:	1b0c      	subne	r4, r1, r4
 8012102:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8012106:	4798      	blx	r3
 8012108:	682b      	ldr	r3, [r5, #0]
 801210a:	4607      	mov	r7, r0
 801210c:	b224      	sxth	r4, r4
 801210e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8012112:	4628      	mov	r0, r5
 8012114:	4798      	blx	r3
 8012116:	4639      	mov	r1, r7
 8012118:	4602      	mov	r2, r0
 801211a:	4620      	mov	r0, r4
 801211c:	f007 f9a3 	bl	8019466 <_ZN8touchgfx6muldivElll>
 8012120:	4430      	add	r0, r6
 8012122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012124 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 8012124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012128:	790b      	ldrb	r3, [r1, #4]
 801212a:	4604      	mov	r4, r0
 801212c:	460d      	mov	r5, r1
 801212e:	b32b      	cbz	r3, 801217c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x58>
 8012130:	2b01      	cmp	r3, #1
 8012132:	d137      	bne.n	80121a4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 8012134:	6823      	ldr	r3, [r4, #0]
 8012136:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801213a:	f8d3 70ac 	ldr.w	r7, [r3, #172]	; 0xac
 801213e:	2a00      	cmp	r2, #0
 8012140:	d12e      	bne.n	80121a0 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8012142:	88ee      	ldrh	r6, [r5, #6]
 8012144:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8012148:	4620      	mov	r0, r4
 801214a:	4798      	blx	r3
 801214c:	1a31      	subs	r1, r6, r0
 801214e:	4620      	mov	r0, r4
 8012150:	b209      	sxth	r1, r1
 8012152:	47b8      	blx	r7
 8012154:	792b      	ldrb	r3, [r5, #4]
 8012156:	2b01      	cmp	r3, #1
 8012158:	d124      	bne.n	80121a4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 801215a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 801215e:	b308      	cbz	r0, 80121a4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 8012160:	6803      	ldr	r3, [r0, #0]
 8012162:	68db      	ldr	r3, [r3, #12]
 8012164:	4798      	blx	r3
 8012166:	b1e8      	cbz	r0, 80121a4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 8012168:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 801216c:	4621      	mov	r1, r4
 801216e:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
 8012172:	6803      	ldr	r3, [r0, #0]
 8012174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012178:	689b      	ldr	r3, [r3, #8]
 801217a:	4718      	bx	r3
 801217c:	f8d0 00e8 	ldr.w	r0, [r0, #232]	; 0xe8
 8012180:	2800      	cmp	r0, #0
 8012182:	d0d7      	beq.n	8012134 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8012184:	6803      	ldr	r3, [r0, #0]
 8012186:	68db      	ldr	r3, [r3, #12]
 8012188:	4798      	blx	r3
 801218a:	2800      	cmp	r0, #0
 801218c:	d0d2      	beq.n	8012134 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801218e:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8012192:	4621      	mov	r1, r4
 8012194:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
 8012198:	6803      	ldr	r3, [r0, #0]
 801219a:	689b      	ldr	r3, [r3, #8]
 801219c:	4798      	blx	r3
 801219e:	e7c9      	b.n	8012134 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 80121a0:	892e      	ldrh	r6, [r5, #8]
 80121a2:	e7cf      	b.n	8012144 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x20>
 80121a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080121a8 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 80121a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121ac:	f9b0 80e4 	ldrsh.w	r8, [r0, #228]	; 0xe4
 80121b0:	4604      	mov	r4, r0
 80121b2:	308c      	adds	r0, #140	; 0x8c
 80121b4:	4588      	cmp	r8, r1
 80121b6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80121ba:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 80121be:	bfb8      	it	lt
 80121c0:	4688      	movlt	r8, r1
 80121c2:	f9b0 105a 	ldrsh.w	r1, [r0, #90]	; 0x5a
 80121c6:	4588      	cmp	r8, r1
 80121c8:	bfa8      	it	ge
 80121ca:	4688      	movge	r8, r1
 80121cc:	fa1f f788 	uxth.w	r7, r8
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d130      	bne.n	8012236 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x8e>
 80121d4:	f9b4 2092 	ldrsh.w	r2, [r4, #146]	; 0x92
 80121d8:	4641      	mov	r1, r8
 80121da:	f7f0 f960 	bl	800249e <_ZN8touchgfx8Drawable6moveToEss>
 80121de:	4630      	mov	r0, r6
 80121e0:	f006 ff55 	bl	801908e <_ZNK8touchgfx8Drawable10invalidateEv>
 80121e4:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	; 0xbc
 80121e8:	6823      	ldr	r3, [r4, #0]
 80121ea:	4620      	mov	r0, r4
 80121ec:	1abf      	subs	r7, r7, r2
 80121ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80121f2:	b2bf      	uxth	r7, r7
 80121f4:	4798      	blx	r3
 80121f6:	4407      	add	r7, r0
 80121f8:	f8a4 70c0 	strh.w	r7, [r4, #192]	; 0xc0
 80121fc:	4630      	mov	r0, r6
 80121fe:	f006 ff46 	bl	801908e <_ZNK8touchgfx8Drawable10invalidateEv>
 8012202:	6823      	ldr	r3, [r4, #0]
 8012204:	4641      	mov	r1, r8
 8012206:	4620      	mov	r0, r4
 8012208:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801220c:	4798      	blx	r3
 801220e:	85e0      	strh	r0, [r4, #46]	; 0x2e
 8012210:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 8012214:	2800      	cmp	r0, #0
 8012216:	d03c      	beq.n	8012292 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xea>
 8012218:	6803      	ldr	r3, [r0, #0]
 801221a:	68db      	ldr	r3, [r3, #12]
 801221c:	4798      	blx	r3
 801221e:	2800      	cmp	r0, #0
 8012220:	d037      	beq.n	8012292 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xea>
 8012222:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 8012226:	4621      	mov	r1, r4
 8012228:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
 801222c:	6803      	ldr	r3, [r0, #0]
 801222e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012232:	689b      	ldr	r3, [r3, #8]
 8012234:	4718      	bx	r3
 8012236:	4642      	mov	r2, r8
 8012238:	f9b4 1090 	ldrsh.w	r1, [r4, #144]	; 0x90
 801223c:	f7f0 f92f 	bl	800249e <_ZN8touchgfx8Drawable6moveToEss>
 8012240:	4630      	mov	r0, r6
 8012242:	f006 ff24 	bl	801908e <_ZNK8touchgfx8Drawable10invalidateEv>
 8012246:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
 8012248:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
 801224a:	6823      	ldr	r3, [r4, #0]
 801224c:	4405      	add	r5, r0
 801224e:	4620      	mov	r0, r4
 8012250:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8012254:	b2ad      	uxth	r5, r5
 8012256:	4798      	blx	r3
 8012258:	6823      	ldr	r3, [r4, #0]
 801225a:	1bed      	subs	r5, r5, r7
 801225c:	f9b4 a0bc 	ldrsh.w	sl, [r4, #188]	; 0xbc
 8012260:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8012264:	1a2d      	subs	r5, r5, r0
 8012266:	4620      	mov	r0, r4
 8012268:	4798      	blx	r3
 801226a:	4438      	add	r0, r7
 801226c:	b2ad      	uxth	r5, r5
 801226e:	f9b4 90c0 	ldrsh.w	r9, [r4, #192]	; 0xc0
 8012272:	b202      	sxth	r2, r0
 8012274:	4651      	mov	r1, sl
 8012276:	4630      	mov	r0, r6
 8012278:	f7f3 fe68 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 801227c:	4630      	mov	r0, r6
 801227e:	b22a      	sxth	r2, r5
 8012280:	4649      	mov	r1, r9
 8012282:	f7ff fb71 	bl	8011968 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8012286:	f8b4 006a 	ldrh.w	r0, [r4, #106]	; 0x6a
 801228a:	1a2d      	subs	r5, r5, r0
 801228c:	f8a4 5066 	strh.w	r5, [r4, #102]	; 0x66
 8012290:	e7b4      	b.n	80121fc <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x54>
 8012292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012296 <_ZN8touchgfx8Drawable11setPositionERKS0_>:
 8012296:	b570      	push	{r4, r5, r6, lr}
 8012298:	4604      	mov	r4, r0
 801229a:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
 801229e:	f9b1 600a 	ldrsh.w	r6, [r1, #10]
 80122a2:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 80122a6:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 80122aa:	f7f3 fe4f 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 80122ae:	4632      	mov	r2, r6
 80122b0:	4629      	mov	r1, r5
 80122b2:	4620      	mov	r0, r4
 80122b4:	f7ff fb58 	bl	8011968 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80122b8:	bd70      	pop	{r4, r5, r6, pc}

080122ba <_ZN8touchgfx6Slider21setupHorizontalSliderEsssss>:
 80122ba:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122be:	f04f 0a00 	mov.w	sl, #0
 80122c2:	f100 0b34 	add.w	fp, r0, #52	; 0x34
 80122c6:	4604      	mov	r4, r0
 80122c8:	461d      	mov	r5, r3
 80122ca:	f880 a02c 	strb.w	sl, [r0, #44]	; 0x2c
 80122ce:	4658      	mov	r0, fp
 80122d0:	4690      	mov	r8, r2
 80122d2:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 80122d6:	4689      	mov	r9, r1
 80122d8:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 80122dc:	f7f3 fe36 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 80122e0:	4659      	mov	r1, fp
 80122e2:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 80122e6:	f7ff ffd6 	bl	8012296 <_ZN8touchgfx8Drawable11setPositionERKS0_>
 80122ea:	4652      	mov	r2, sl
 80122ec:	4651      	mov	r1, sl
 80122ee:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80122f2:	f7f3 fe2b 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 80122f6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80122f8:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 80122fa:	4620      	mov	r0, r4
 80122fc:	4490      	add	r8, r2
 80122fe:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 8012302:	f8a4 5092 	strh.w	r5, [r4, #146]	; 0x92
 8012306:	4489      	add	r9, r1
 8012308:	4415      	add	r5, r2
 801230a:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 801230e:	fa0f f288 	sxth.w	r2, r8
 8012312:	f8a4 70e4 	strh.w	r7, [r4, #228]	; 0xe4
 8012316:	1873      	adds	r3, r6, r1
 8012318:	b22d      	sxth	r5, r5
 801231a:	fa0f f989 	sxth.w	r9, r9
 801231e:	f8a4 60e6 	strh.w	r6, [r4, #230]	; 0xe6
 8012322:	b219      	sxth	r1, r3
 8012324:	42aa      	cmp	r2, r5
 8012326:	bfb8      	it	lt
 8012328:	462a      	movlt	r2, r5
 801232a:	4549      	cmp	r1, r9
 801232c:	bfb8      	it	lt
 801232e:	4649      	movlt	r1, r9
 8012330:	f7ff fb1a 	bl	8011968 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8012334:	6823      	ldr	r3, [r4, #0]
 8012336:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
 801233a:	4620      	mov	r0, r4
 801233c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8012340:	b001      	add	sp, #4
 8012342:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012346:	4718      	bx	r3

08012348 <_ZN8touchgfx6Slider19setupVerticalSliderEsssss>:
 8012348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801234c:	461d      	mov	r5, r3
 801234e:	f100 0a34 	add.w	sl, r0, #52	; 0x34
 8012352:	2301      	movs	r3, #1
 8012354:	4604      	mov	r4, r0
 8012356:	4617      	mov	r7, r2
 8012358:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801235c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8012360:	4650      	mov	r0, sl
 8012362:	460e      	mov	r6, r1
 8012364:	f9bd 9020 	ldrsh.w	r9, [sp, #32]
 8012368:	f7f3 fdf0 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 801236c:	4651      	mov	r1, sl
 801236e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8012372:	f7ff ff90 	bl	8012296 <_ZN8touchgfx8Drawable11setPositionERKS0_>
 8012376:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8012378:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801237a:	4620      	mov	r0, r4
 801237c:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
 8012380:	440e      	add	r6, r1
 8012382:	443a      	add	r2, r7
 8012384:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 8012388:	4443      	add	r3, r8
 801238a:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 801238e:	b212      	sxth	r2, r2
 8012390:	440d      	add	r5, r1
 8012392:	b21b      	sxth	r3, r3
 8012394:	f8a4 90e4 	strh.w	r9, [r4, #228]	; 0xe4
 8012398:	b231      	sxth	r1, r6
 801239a:	f8a4 80e6 	strh.w	r8, [r4, #230]	; 0xe6
 801239e:	429a      	cmp	r2, r3
 80123a0:	b22d      	sxth	r5, r5
 80123a2:	bfb8      	it	lt
 80123a4:	461a      	movlt	r2, r3
 80123a6:	42a9      	cmp	r1, r5
 80123a8:	bfb8      	it	lt
 80123aa:	4629      	movlt	r1, r5
 80123ac:	f7ff fadc 	bl	8011968 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80123b0:	6823      	ldr	r3, [r4, #0]
 80123b2:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
 80123b6:	4620      	mov	r0, r4
 80123b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80123bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123c0:	4718      	bx	r3
	...

080123c4 <_ZN8touchgfx6SliderC1Ev>:
 80123c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80123c8:	4604      	mov	r4, r0
 80123ca:	f7f5 fadf 	bl	800798c <_ZN8touchgfx8DrawableC1Ev>
 80123ce:	4b28      	ldr	r3, [pc, #160]	; (8012470 <_ZN8touchgfx6SliderC1Ev+0xac>)
 80123d0:	2500      	movs	r5, #0
 80123d2:	ae02      	add	r6, sp, #8
 80123d4:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80123d8:	6023      	str	r3, [r4, #0]
 80123da:	f104 0934 	add.w	r9, r4, #52	; 0x34
 80123de:	2364      	movs	r3, #100	; 0x64
 80123e0:	f104 0a60 	add.w	sl, r4, #96	; 0x60
 80123e4:	f826 7d04 	strh.w	r7, [r6, #-4]!
 80123e8:	4648      	mov	r0, r9
 80123ea:	8663      	strh	r3, [r4, #50]	; 0x32
 80123ec:	4631      	mov	r1, r6
 80123ee:	62a5      	str	r5, [r4, #40]	; 0x28
 80123f0:	f104 088c 	add.w	r8, r4, #140	; 0x8c
 80123f4:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 80123f8:	85e5      	strh	r5, [r4, #46]	; 0x2e
 80123fa:	8625      	strh	r5, [r4, #48]	; 0x30
 80123fc:	f7f3 fdda 	bl	8005fb4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8012400:	4631      	mov	r1, r6
 8012402:	4650      	mov	r0, sl
 8012404:	f8ad 7004 	strh.w	r7, [sp, #4]
 8012408:	f7f3 fdd4 	bl	8005fb4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801240c:	4631      	mov	r1, r6
 801240e:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 8012412:	4640      	mov	r0, r8
 8012414:	f8ad 7004 	strh.w	r7, [sp, #4]
 8012418:	f7f3 fdcc 	bl	8005fb4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801241c:	4630      	mov	r0, r6
 801241e:	f7f5 fab5 	bl	800798c <_ZN8touchgfx8DrawableC1Ev>
 8012422:	4b14      	ldr	r3, [pc, #80]	; (8012474 <_ZN8touchgfx6SliderC1Ev+0xb0>)
 8012424:	4651      	mov	r1, sl
 8012426:	4630      	mov	r0, r6
 8012428:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 801242c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8012430:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
 8012434:	e9c4 3539 	strd	r3, r5, [r4, #228]	; 0xe4
 8012438:	2301      	movs	r3, #1
 801243a:	e9c4 553b 	strd	r5, r5, [r4, #236]	; 0xec
 801243e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8012442:	f7ff fb2b 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012446:	4649      	mov	r1, r9
 8012448:	4620      	mov	r0, r4
 801244a:	f7ff fb27 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801244e:	4631      	mov	r1, r6
 8012450:	4620      	mov	r0, r4
 8012452:	f7ff fb23 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012456:	4641      	mov	r1, r8
 8012458:	4620      	mov	r0, r4
 801245a:	f7ff fb1f 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801245e:	4620      	mov	r0, r4
 8012460:	f9b4 10e4 	ldrsh.w	r1, [r4, #228]	; 0xe4
 8012464:	f7ff fea0 	bl	80121a8 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>
 8012468:	4620      	mov	r0, r4
 801246a:	b002      	add	sp, #8
 801246c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012470:	08030468 	.word	0x08030468
 8012474:	080303d8 	.word	0x080303d8

08012478 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 8012478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801247c:	4604      	mov	r4, r0
 801247e:	f100 0634 	add.w	r6, r0, #52	; 0x34
 8012482:	4689      	mov	r9, r1
 8012484:	461f      	mov	r7, r3
 8012486:	f104 058c 	add.w	r5, r4, #140	; 0x8c
 801248a:	4630      	mov	r0, r6
 801248c:	4690      	mov	r8, r2
 801248e:	f006 fdfe 	bl	801908e <_ZNK8touchgfx8Drawable10invalidateEv>
 8012492:	4628      	mov	r0, r5
 8012494:	f006 fdfb 	bl	801908e <_ZNK8touchgfx8Drawable10invalidateEv>
 8012498:	4649      	mov	r1, r9
 801249a:	4630      	mov	r0, r6
 801249c:	f003 f865 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80124a0:	4641      	mov	r1, r8
 80124a2:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80124a6:	f003 f860 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80124aa:	4639      	mov	r1, r7
 80124ac:	4628      	mov	r0, r5
 80124ae:	f003 f85c 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80124b2:	f9b4 206a 	ldrsh.w	r2, [r4, #106]	; 0x6a
 80124b6:	f9b4 1068 	ldrsh.w	r1, [r4, #104]	; 0x68
 80124ba:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 80124be:	f7ff fa53 	bl	8011968 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80124c2:	6823      	ldr	r3, [r4, #0]
 80124c4:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
 80124c8:	4620      	mov	r0, r4
 80124ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80124ce:	4798      	blx	r3
 80124d0:	4630      	mov	r0, r6
 80124d2:	f006 fddc 	bl	801908e <_ZNK8touchgfx8Drawable10invalidateEv>
 80124d6:	4628      	mov	r0, r5
 80124d8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124dc:	f006 bdd7 	b.w	801908e <_ZNK8touchgfx8Drawable10invalidateEv>

080124e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80124e0:	6803      	ldr	r3, [r0, #0]
 80124e2:	b513      	push	{r0, r1, r4, lr}
 80124e4:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80124e8:	2300      	movs	r3, #0
 80124ea:	e9cd 3300 	strd	r3, r3, [sp]
 80124ee:	466b      	mov	r3, sp
 80124f0:	47a0      	blx	r4
 80124f2:	b002      	add	sp, #8
 80124f4:	bd10      	pop	{r4, pc}

080124f6 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80124f6:	2301      	movs	r3, #1
 80124f8:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80124fc:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 8012500:	4770      	bx	lr

08012502 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8012502:	2301      	movs	r3, #1
 8012504:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8012508:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 801250c:	4770      	bx	lr

0801250e <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801250e:	6843      	ldr	r3, [r0, #4]
 8012510:	2201      	movs	r2, #1
 8012512:	725a      	strb	r2, [r3, #9]
 8012514:	6840      	ldr	r0, [r0, #4]
 8012516:	6803      	ldr	r3, [r0, #0]
 8012518:	691b      	ldr	r3, [r3, #16]
 801251a:	4718      	bx	r3

0801251c <_ZN8touchgfx3HAL8flushDMAEv>:
 801251c:	6840      	ldr	r0, [r0, #4]
 801251e:	6803      	ldr	r3, [r0, #0]
 8012520:	689b      	ldr	r3, [r3, #8]
 8012522:	4718      	bx	r3

08012524 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8012524:	b530      	push	{r4, r5, lr}
 8012526:	b08b      	sub	sp, #44	; 0x2c
 8012528:	6804      	ldr	r4, [r0, #0]
 801252a:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801252e:	9509      	str	r5, [sp, #36]	; 0x24
 8012530:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8012534:	9508      	str	r5, [sp, #32]
 8012536:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801253a:	9507      	str	r5, [sp, #28]
 801253c:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8012540:	9506      	str	r5, [sp, #24]
 8012542:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8012546:	9505      	str	r5, [sp, #20]
 8012548:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801254c:	9504      	str	r5, [sp, #16]
 801254e:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8012552:	9503      	str	r5, [sp, #12]
 8012554:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8012558:	9502      	str	r5, [sp, #8]
 801255a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801255e:	e9cd 3500 	strd	r3, r5, [sp]
 8012562:	4613      	mov	r3, r2
 8012564:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8012566:	2200      	movs	r2, #0
 8012568:	47a0      	blx	r4
 801256a:	b00b      	add	sp, #44	; 0x2c
 801256c:	bd30      	pop	{r4, r5, pc}
	...

08012570 <_ZN8touchgfx3HAL10beginFrameEv>:
 8012570:	4b04      	ldr	r3, [pc, #16]	; (8012584 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8012572:	781b      	ldrb	r3, [r3, #0]
 8012574:	b123      	cbz	r3, 8012580 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8012576:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
 801257a:	f080 0001 	eor.w	r0, r0, #1
 801257e:	4770      	bx	lr
 8012580:	2001      	movs	r0, #1
 8012582:	4770      	bx	lr
 8012584:	20027ca6 	.word	0x20027ca6

08012588 <_ZN8touchgfx3HAL8endFrameEv>:
 8012588:	b510      	push	{r4, lr}
 801258a:	4604      	mov	r4, r0
 801258c:	6840      	ldr	r0, [r0, #4]
 801258e:	6803      	ldr	r3, [r0, #0]
 8012590:	689b      	ldr	r3, [r3, #8]
 8012592:	4798      	blx	r3
 8012594:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 8012598:	b113      	cbz	r3, 80125a0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801259a:	2301      	movs	r3, #1
 801259c:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 80125a0:	bd10      	pop	{r4, pc}

080125a2 <_ZN8touchgfx3HAL10initializeEv>:
 80125a2:	b510      	push	{r4, lr}
 80125a4:	4604      	mov	r4, r0
 80125a6:	f7ef fc07 	bl	8001db8 <_ZN8touchgfx10OSWrappers10initializeEv>
 80125aa:	f7ee fc91 	bl	8000ed0 <_ZN8touchgfx4GPIO4initEv>
 80125ae:	6860      	ldr	r0, [r4, #4]
 80125b0:	6803      	ldr	r3, [r0, #0]
 80125b2:	68db      	ldr	r3, [r3, #12]
 80125b4:	4798      	blx	r3
 80125b6:	68e0      	ldr	r0, [r4, #12]
 80125b8:	6803      	ldr	r3, [r0, #0]
 80125ba:	689b      	ldr	r3, [r3, #8]
 80125bc:	4798      	blx	r3
 80125be:	6823      	ldr	r3, [r4, #0]
 80125c0:	4620      	mov	r0, r4
 80125c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125c8:	4718      	bx	r3
	...

080125cc <_ZN8touchgfx3HAL4tickEv>:
 80125cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80125ce:	6803      	ldr	r3, [r0, #0]
 80125d0:	4604      	mov	r4, r0
 80125d2:	4d5b      	ldr	r5, [pc, #364]	; (8012740 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80125d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80125d8:	4798      	blx	r3
 80125da:	2800      	cmp	r0, #0
 80125dc:	f000 8095 	beq.w	801270a <_ZN8touchgfx3HAL4tickEv+0x13e>
 80125e0:	2001      	movs	r0, #1
 80125e2:	2600      	movs	r6, #0
 80125e4:	f7ee fbda 	bl	8000d9c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80125e8:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 80125ec:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80125f0:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80125f4:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 80125f8:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
 80125fc:	b133      	cbz	r3, 801260c <_ZN8touchgfx3HAL4tickEv+0x40>
 80125fe:	6823      	ldr	r3, [r4, #0]
 8012600:	4620      	mov	r0, r4
 8012602:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8012606:	4798      	blx	r3
 8012608:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
 801260c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8012610:	2601      	movs	r6, #1
 8012612:	6862      	ldr	r2, [r4, #4]
 8012614:	f083 0301 	eor.w	r3, r3, #1
 8012618:	702e      	strb	r6, [r5, #0]
 801261a:	7253      	strb	r3, [r2, #9]
 801261c:	f005 fc4c 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 8012620:	6803      	ldr	r3, [r0, #0]
 8012622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012624:	4798      	blx	r3
 8012626:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 801262a:	b90b      	cbnz	r3, 8012630 <_ZN8touchgfx3HAL4tickEv+0x64>
 801262c:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
 8012630:	f005 fc42 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 8012634:	6803      	ldr	r3, [r0, #0]
 8012636:	695b      	ldr	r3, [r3, #20]
 8012638:	4798      	blx	r3
 801263a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 801263c:	6803      	ldr	r3, [r0, #0]
 801263e:	691b      	ldr	r3, [r3, #16]
 8012640:	4798      	blx	r3
 8012642:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8012646:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 801264a:	3b01      	subs	r3, #1
 801264c:	b2db      	uxtb	r3, r3
 801264e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8012652:	b10a      	cbz	r2, 8012658 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8012654:	2b00      	cmp	r3, #0
 8012656:	d1eb      	bne.n	8012630 <_ZN8touchgfx3HAL4tickEv+0x64>
 8012658:	4a3a      	ldr	r2, [pc, #232]	; (8012744 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801265a:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 801265e:	7813      	ldrb	r3, [r2, #0]
 8012660:	3301      	adds	r3, #1
 8012662:	b25b      	sxtb	r3, r3
 8012664:	4299      	cmp	r1, r3
 8012666:	7013      	strb	r3, [r2, #0]
 8012668:	dc10      	bgt.n	801268c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801266a:	2300      	movs	r3, #0
 801266c:	68e0      	ldr	r0, [r4, #12]
 801266e:	a902      	add	r1, sp, #8
 8012670:	7013      	strb	r3, [r2, #0]
 8012672:	aa03      	add	r2, sp, #12
 8012674:	6803      	ldr	r3, [r0, #0]
 8012676:	68db      	ldr	r3, [r3, #12]
 8012678:	4798      	blx	r3
 801267a:	6823      	ldr	r3, [r4, #0]
 801267c:	2800      	cmp	r0, #0
 801267e:	d050      	beq.n	8012722 <_ZN8touchgfx3HAL4tickEv+0x156>
 8012680:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8012684:	4620      	mov	r0, r4
 8012686:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801268a:	4798      	blx	r3
 801268c:	2300      	movs	r3, #0
 801268e:	6960      	ldr	r0, [r4, #20]
 8012690:	f88d 3007 	strb.w	r3, [sp, #7]
 8012694:	b158      	cbz	r0, 80126ae <_ZN8touchgfx3HAL4tickEv+0xe2>
 8012696:	6803      	ldr	r3, [r0, #0]
 8012698:	f10d 0107 	add.w	r1, sp, #7
 801269c:	68db      	ldr	r3, [r3, #12]
 801269e:	4798      	blx	r3
 80126a0:	b128      	cbz	r0, 80126ae <_ZN8touchgfx3HAL4tickEv+0xe2>
 80126a2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80126a4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80126a8:	6803      	ldr	r3, [r0, #0]
 80126aa:	68db      	ldr	r3, [r3, #12]
 80126ac:	4798      	blx	r3
 80126ae:	f104 001c 	add.w	r0, r4, #28
 80126b2:	f016 f9bd 	bl	8028a30 <_ZN8touchgfx8Gestures4tickEv>
 80126b6:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 80126ba:	b30b      	cbz	r3, 8012700 <_ZN8touchgfx3HAL4tickEv+0x134>
 80126bc:	6920      	ldr	r0, [r4, #16]
 80126be:	6803      	ldr	r3, [r0, #0]
 80126c0:	691b      	ldr	r3, [r3, #16]
 80126c2:	4798      	blx	r3
 80126c4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80126c6:	4606      	mov	r6, r0
 80126c8:	b903      	cbnz	r3, 80126cc <_ZN8touchgfx3HAL4tickEv+0x100>
 80126ca:	6760      	str	r0, [r4, #116]	; 0x74
 80126cc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80126ce:	4a1e      	ldr	r2, [pc, #120]	; (8012748 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80126d0:	1af3      	subs	r3, r6, r3
 80126d2:	4293      	cmp	r3, r2
 80126d4:	d914      	bls.n	8012700 <_ZN8touchgfx3HAL4tickEv+0x134>
 80126d6:	6920      	ldr	r0, [r4, #16]
 80126d8:	6803      	ldr	r3, [r0, #0]
 80126da:	699b      	ldr	r3, [r3, #24]
 80126dc:	4798      	blx	r3
 80126de:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80126e0:	2264      	movs	r2, #100	; 0x64
 80126e2:	1af3      	subs	r3, r6, r3
 80126e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80126e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80126ec:	2800      	cmp	r0, #0
 80126ee:	dc1d      	bgt.n	801272c <_ZN8touchgfx3HAL4tickEv+0x160>
 80126f0:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
 80126f4:	6920      	ldr	r0, [r4, #16]
 80126f6:	2100      	movs	r1, #0
 80126f8:	6803      	ldr	r3, [r0, #0]
 80126fa:	69db      	ldr	r3, [r3, #28]
 80126fc:	4798      	blx	r3
 80126fe:	6766      	str	r6, [r4, #116]	; 0x74
 8012700:	f005 fbda 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 8012704:	6803      	ldr	r3, [r0, #0]
 8012706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012708:	4798      	blx	r3
 801270a:	6823      	ldr	r3, [r4, #0]
 801270c:	4620      	mov	r0, r4
 801270e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012712:	4798      	blx	r3
 8012714:	2001      	movs	r0, #1
 8012716:	f7ee fb71 	bl	8000dfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801271a:	2300      	movs	r3, #0
 801271c:	702b      	strb	r3, [r5, #0]
 801271e:	b004      	add	sp, #16
 8012720:	bd70      	pop	{r4, r5, r6, pc}
 8012722:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8012726:	4620      	mov	r0, r4
 8012728:	4798      	blx	r3
 801272a:	e7af      	b.n	801268c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801272c:	2863      	cmp	r0, #99	; 0x63
 801272e:	bfcb      	itete	gt
 8012730:	2300      	movgt	r3, #0
 8012732:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8012736:	f884 3069 	strbgt.w	r3, [r4, #105]	; 0x69
 801273a:	f884 0069 	strble.w	r0, [r4, #105]	; 0x69
 801273e:	e7d9      	b.n	80126f4 <_ZN8touchgfx3HAL4tickEv+0x128>
 8012740:	20027cac 	.word	0x20027cac
 8012744:	20027cad 	.word	0x20027cad
 8012748:	05f5e100 	.word	0x05f5e100

0801274c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801274c:	b510      	push	{r4, lr}
 801274e:	4604      	mov	r4, r0
 8012750:	f7ef fb62 	bl	8001e18 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8012754:	2200      	movs	r2, #0
 8012756:	6863      	ldr	r3, [r4, #4]
 8012758:	729a      	strb	r2, [r3, #10]
 801275a:	bd10      	pop	{r4, pc}

0801275c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801275c:	65c1      	str	r1, [r0, #92]	; 0x5c
 801275e:	301c      	adds	r0, #28
 8012760:	f016 b964 	b.w	8028a2c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08012764 <_ZN8touchgfx3HAL5touchEll>:
 8012764:	b530      	push	{r4, r5, lr}
 8012766:	b087      	sub	sp, #28
 8012768:	4604      	mov	r4, r0
 801276a:	a804      	add	r0, sp, #16
 801276c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8012770:	f005 f9b4 	bl	8017adc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8012774:	9b04      	ldr	r3, [sp, #16]
 8012776:	a906      	add	r1, sp, #24
 8012778:	a803      	add	r0, sp, #12
 801277a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801277e:	9b05      	ldr	r3, [sp, #20]
 8012780:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8012784:	f005 f9fc 	bl	8017b80 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8012788:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 801278c:	f104 001c 	add.w	r0, r4, #28
 8012790:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8012794:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8012798:	b189      	cbz	r1, 80127be <_ZN8touchgfx3HAL5touchEll+0x5a>
 801279a:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 801279e:	9300      	str	r3, [sp, #0]
 80127a0:	4613      	mov	r3, r2
 80127a2:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80127a6:	462a      	mov	r2, r5
 80127a8:	f016 f950 	bl	8028a4c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80127ac:	b128      	cbz	r0, 80127ba <_ZN8touchgfx3HAL5touchEll+0x56>
 80127ae:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80127b2:	6623      	str	r3, [r4, #96]	; 0x60
 80127b4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80127b8:	6663      	str	r3, [r4, #100]	; 0x64
 80127ba:	b007      	add	sp, #28
 80127bc:	bd30      	pop	{r4, r5, pc}
 80127be:	f016 f985 	bl	8028acc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80127c2:	2301      	movs	r3, #1
 80127c4:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 80127c8:	e7f1      	b.n	80127ae <_ZN8touchgfx3HAL5touchEll+0x4a>

080127ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80127ca:	b510      	push	{r4, lr}
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d046      	beq.n	801285e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80127d0:	ea81 0002 	eor.w	r0, r1, r2
 80127d4:	07c4      	lsls	r4, r0, #31
 80127d6:	d508      	bpl.n	80127ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80127d8:	440b      	add	r3, r1
 80127da:	3a01      	subs	r2, #1
 80127dc:	428b      	cmp	r3, r1
 80127de:	d93e      	bls.n	801285e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80127e0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80127e4:	f801 0b01 	strb.w	r0, [r1], #1
 80127e8:	e7f8      	b.n	80127dc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80127ea:	07d0      	lsls	r0, r2, #31
 80127ec:	bf42      	ittt	mi
 80127ee:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80127f2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80127f6:	f801 0b01 	strbmi.w	r0, [r1], #1
 80127fa:	2b01      	cmp	r3, #1
 80127fc:	d911      	bls.n	8012822 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80127fe:	ea81 0402 	eor.w	r4, r1, r2
 8012802:	4610      	mov	r0, r2
 8012804:	07a4      	lsls	r4, r4, #30
 8012806:	d022      	beq.n	801284e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8012808:	f023 0401 	bic.w	r4, r3, #1
 801280c:	440c      	add	r4, r1
 801280e:	428c      	cmp	r4, r1
 8012810:	4602      	mov	r2, r0
 8012812:	d904      	bls.n	801281e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8012814:	8812      	ldrh	r2, [r2, #0]
 8012816:	3002      	adds	r0, #2
 8012818:	f821 2b02 	strh.w	r2, [r1], #2
 801281c:	e7f7      	b.n	801280e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801281e:	f003 0301 	and.w	r3, r3, #1
 8012822:	f023 0003 	bic.w	r0, r3, #3
 8012826:	4408      	add	r0, r1
 8012828:	4288      	cmp	r0, r1
 801282a:	4614      	mov	r4, r2
 801282c:	d904      	bls.n	8012838 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801282e:	6824      	ldr	r4, [r4, #0]
 8012830:	3204      	adds	r2, #4
 8012832:	f841 4b04 	str.w	r4, [r1], #4
 8012836:	e7f7      	b.n	8012828 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8012838:	f003 0303 	and.w	r3, r3, #3
 801283c:	3a01      	subs	r2, #1
 801283e:	440b      	add	r3, r1
 8012840:	428b      	cmp	r3, r1
 8012842:	d90c      	bls.n	801285e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012844:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8012848:	f801 0b01 	strb.w	r0, [r1], #1
 801284c:	e7f8      	b.n	8012840 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801284e:	0790      	lsls	r0, r2, #30
 8012850:	d0e7      	beq.n	8012822 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012852:	f832 0b02 	ldrh.w	r0, [r2], #2
 8012856:	3b02      	subs	r3, #2
 8012858:	f821 0b02 	strh.w	r0, [r1], #2
 801285c:	e7e1      	b.n	8012822 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801285e:	2001      	movs	r0, #1
 8012860:	bd10      	pop	{r4, pc}

08012862 <_ZN8touchgfx3HAL7noTouchEv>:
 8012862:	b510      	push	{r4, lr}
 8012864:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 8012868:	4604      	mov	r4, r0
 801286a:	b153      	cbz	r3, 8012882 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801286c:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 8012870:	2101      	movs	r1, #1
 8012872:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 8012876:	301c      	adds	r0, #28
 8012878:	f016 f928 	bl	8028acc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801287c:	2300      	movs	r3, #0
 801287e:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 8012882:	bd10      	pop	{r4, pc}

08012884 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8012884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012888:	b085      	sub	sp, #20
 801288a:	4604      	mov	r4, r0
 801288c:	2000      	movs	r0, #0
 801288e:	4699      	mov	r9, r3
 8012890:	ad04      	add	r5, sp, #16
 8012892:	460f      	mov	r7, r1
 8012894:	4690      	mov	r8, r2
 8012896:	f845 0d04 	str.w	r0, [r5, #-4]!
 801289a:	69a0      	ldr	r0, [r4, #24]
 801289c:	6806      	ldr	r6, [r0, #0]
 801289e:	9501      	str	r5, [sp, #4]
 80128a0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80128a4:	9500      	str	r5, [sp, #0]
 80128a6:	6835      	ldr	r5, [r6, #0]
 80128a8:	47a8      	blx	r5
 80128aa:	4d10      	ldr	r5, [pc, #64]	; (80128ec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80128ac:	4606      	mov	r6, r0
 80128ae:	f8a5 9000 	strh.w	r9, [r5]
 80128b2:	f7f2 fa65 	bl	8004d80 <_ZN8touchgfx3HAL3lcdEv>
 80128b6:	6803      	ldr	r3, [r0, #0]
 80128b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ba:	4798      	blx	r3
 80128bc:	b128      	cbz	r0, 80128ca <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80128be:	2801      	cmp	r0, #1
 80128c0:	d00b      	beq.n	80128da <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80128c2:	4630      	mov	r0, r6
 80128c4:	b005      	add	sp, #20
 80128c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128ca:	882b      	ldrh	r3, [r5, #0]
 80128cc:	fb08 7203 	mla	r2, r8, r3, r7
 80128d0:	9b03      	ldr	r3, [sp, #12]
 80128d2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80128d6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80128d8:	e7f3      	b.n	80128c2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80128da:	882a      	ldrh	r2, [r5, #0]
 80128dc:	9b03      	ldr	r3, [sp, #12]
 80128de:	fb08 7202 	mla	r2, r8, r2, r7
 80128e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80128e6:	1a9a      	subs	r2, r3, r2
 80128e8:	63e2      	str	r2, [r4, #60]	; 0x3c
 80128ea:	e7ea      	b.n	80128c2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80128ec:	20027ca2 	.word	0x20027ca2

080128f0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80128f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128f2:	b08b      	sub	sp, #44	; 0x2c
 80128f4:	4617      	mov	r7, r2
 80128f6:	4604      	mov	r4, r0
 80128f8:	460e      	mov	r6, r1
 80128fa:	461d      	mov	r5, r3
 80128fc:	f7f2 fa40 	bl	8004d80 <_ZN8touchgfx3HAL3lcdEv>
 8012900:	6803      	ldr	r3, [r0, #0]
 8012902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012904:	4798      	blx	r3
 8012906:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801290a:	9007      	str	r0, [sp, #28]
 801290c:	4631      	mov	r1, r6
 801290e:	6822      	ldr	r2, [r4, #0]
 8012910:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8012914:	4b0c      	ldr	r3, [pc, #48]	; (8012948 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8012916:	4620      	mov	r0, r4
 8012918:	881b      	ldrh	r3, [r3, #0]
 801291a:	9306      	str	r3, [sp, #24]
 801291c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8012920:	9305      	str	r3, [sp, #20]
 8012922:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8012926:	9304      	str	r3, [sp, #16]
 8012928:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801292c:	9303      	str	r3, [sp, #12]
 801292e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012932:	9302      	str	r3, [sp, #8]
 8012934:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012938:	e9cd 5300 	strd	r5, r3, [sp]
 801293c:	463b      	mov	r3, r7
 801293e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8012940:	2200      	movs	r2, #0
 8012942:	47a8      	blx	r5
 8012944:	b00b      	add	sp, #44	; 0x2c
 8012946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012948:	20027ca2 	.word	0x20027ca2

0801294c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 801294c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012950:	4698      	mov	r8, r3
 8012952:	6803      	ldr	r3, [r0, #0]
 8012954:	b08b      	sub	sp, #44	; 0x2c
 8012956:	4617      	mov	r7, r2
 8012958:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801295a:	460e      	mov	r6, r1
 801295c:	4b13      	ldr	r3, [pc, #76]	; (80129ac <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801295e:	4604      	mov	r4, r0
 8012960:	f8b3 9000 	ldrh.w	r9, [r3]
 8012964:	f7f2 fa0c 	bl	8004d80 <_ZN8touchgfx3HAL3lcdEv>
 8012968:	6803      	ldr	r3, [r0, #0]
 801296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801296c:	4798      	blx	r3
 801296e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8012972:	2200      	movs	r2, #0
 8012974:	4631      	mov	r1, r6
 8012976:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801297a:	2302      	movs	r3, #2
 801297c:	4620      	mov	r0, r4
 801297e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8012982:	2301      	movs	r3, #1
 8012984:	9305      	str	r3, [sp, #20]
 8012986:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801298a:	9304      	str	r3, [sp, #16]
 801298c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8012990:	9303      	str	r3, [sp, #12]
 8012992:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8012996:	9302      	str	r3, [sp, #8]
 8012998:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801299c:	e9cd 8300 	strd	r8, r3, [sp]
 80129a0:	463b      	mov	r3, r7
 80129a2:	47a8      	blx	r5
 80129a4:	b00b      	add	sp, #44	; 0x2c
 80129a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129aa:	bf00      	nop
 80129ac:	20027ca2 	.word	0x20027ca2

080129b0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80129b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80129b4:	4698      	mov	r8, r3
 80129b6:	6803      	ldr	r3, [r0, #0]
 80129b8:	b087      	sub	sp, #28
 80129ba:	460e      	mov	r6, r1
 80129bc:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80129be:	4617      	mov	r7, r2
 80129c0:	4b0f      	ldr	r3, [pc, #60]	; (8012a00 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80129c2:	4604      	mov	r4, r0
 80129c4:	f8b3 9000 	ldrh.w	r9, [r3]
 80129c8:	f7f2 f9da 	bl	8004d80 <_ZN8touchgfx3HAL3lcdEv>
 80129cc:	6803      	ldr	r3, [r0, #0]
 80129ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129d0:	4798      	blx	r3
 80129d2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80129d6:	463a      	mov	r2, r7
 80129d8:	4631      	mov	r1, r6
 80129da:	f8cd 900c 	str.w	r9, [sp, #12]
 80129de:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80129e2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80129e6:	4620      	mov	r0, r4
 80129e8:	9302      	str	r3, [sp, #8]
 80129ea:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80129ee:	9301      	str	r3, [sp, #4]
 80129f0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80129f4:	9300      	str	r3, [sp, #0]
 80129f6:	4643      	mov	r3, r8
 80129f8:	47a8      	blx	r5
 80129fa:	b007      	add	sp, #28
 80129fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a00:	20027ca2 	.word	0x20027ca2

08012a04 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8012a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a08:	4604      	mov	r4, r0
 8012a0a:	b08f      	sub	sp, #60	; 0x3c
 8012a0c:	4610      	mov	r0, r2
 8012a0e:	460d      	mov	r5, r1
 8012a10:	4691      	mov	r9, r2
 8012a12:	461e      	mov	r6, r3
 8012a14:	f008 fbde 	bl	801b1d4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8012a18:	2800      	cmp	r0, #0
 8012a1a:	f000 809d 	beq.w	8012b58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8012a1e:	6823      	ldr	r3, [r4, #0]
 8012a20:	4620      	mov	r0, r4
 8012a22:	f8df b198 	ldr.w	fp, [pc, #408]	; 8012bbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8012a26:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8012a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a2c:	4798      	blx	r3
 8012a2e:	6823      	ldr	r3, [r4, #0]
 8012a30:	4620      	mov	r0, r4
 8012a32:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8012bc0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8012a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a38:	4798      	blx	r3
 8012a3a:	f8bb 3000 	ldrh.w	r3, [fp]
 8012a3e:	4f5c      	ldr	r7, [pc, #368]	; (8012bb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012a40:	9301      	str	r3, [sp, #4]
 8012a42:	f8ba 3000 	ldrh.w	r3, [sl]
 8012a46:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8012a4a:	4640      	mov	r0, r8
 8012a4c:	9302      	str	r3, [sp, #8]
 8012a4e:	883b      	ldrh	r3, [r7, #0]
 8012a50:	9303      	str	r3, [sp, #12]
 8012a52:	4b58      	ldr	r3, [pc, #352]	; (8012bb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012a54:	881a      	ldrh	r2, [r3, #0]
 8012a56:	9305      	str	r3, [sp, #20]
 8012a58:	9204      	str	r2, [sp, #16]
 8012a5a:	f008 fc4f 	bl	801b2fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012a5e:	8038      	strh	r0, [r7, #0]
 8012a60:	4640      	mov	r0, r8
 8012a62:	f008 fc7f 	bl	801b364 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012a66:	9b05      	ldr	r3, [sp, #20]
 8012a68:	b280      	uxth	r0, r0
 8012a6a:	8018      	strh	r0, [r3, #0]
 8012a6c:	4b52      	ldr	r3, [pc, #328]	; (8012bb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8012a6e:	781b      	ldrb	r3, [r3, #0]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d174      	bne.n	8012b5e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8012a74:	883b      	ldrh	r3, [r7, #0]
 8012a76:	f8aa 0000 	strh.w	r0, [sl]
 8012a7a:	f8ab 3000 	strh.w	r3, [fp]
 8012a7e:	4648      	mov	r0, r9
 8012a80:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8012a84:	f008 fba6 	bl	801b1d4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8012a88:	2200      	movs	r2, #0
 8012a8a:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8012a8e:	4611      	mov	r1, r2
 8012a90:	4628      	mov	r0, r5
 8012a92:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8012a96:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8012a9a:	f7f3 fa57 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8012aa4:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8012aa8:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	dd5c      	ble.n	8012b6a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8012ab0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	dd58      	ble.n	8012b6a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8012ab8:	462a      	mov	r2, r5
 8012aba:	ab0a      	add	r3, sp, #40	; 0x28
 8012abc:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8012ac0:	6851      	ldr	r1, [r2, #4]
 8012ac2:	c303      	stmia	r3!, {r0, r1}
 8012ac4:	4631      	mov	r1, r6
 8012ac6:	a80a      	add	r0, sp, #40	; 0x28
 8012ac8:	f7ff f96c 	bl	8011da4 <_ZN8touchgfx4RectaNERKS0_>
 8012acc:	4b38      	ldr	r3, [pc, #224]	; (8012bb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012ace:	2100      	movs	r1, #0
 8012ad0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012ad4:	4b37      	ldr	r3, [pc, #220]	; (8012bb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012ad6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8012ada:	aa0a      	add	r2, sp, #40	; 0x28
 8012adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ae0:	910c      	str	r1, [sp, #48]	; 0x30
 8012ae2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8012ae6:	ab08      	add	r3, sp, #32
 8012ae8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012aec:	e883 0003 	stmia.w	r3, {r0, r1}
 8012af0:	4618      	mov	r0, r3
 8012af2:	a90c      	add	r1, sp, #48	; 0x30
 8012af4:	f7ff f956 	bl	8011da4 <_ZN8touchgfx4RectaNERKS0_>
 8012af8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d13c      	bne.n	8012b78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8012afe:	2000      	movs	r0, #0
 8012b00:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 8012b04:	2600      	movs	r6, #0
 8012b06:	696b      	ldr	r3, [r5, #20]
 8012b08:	a908      	add	r1, sp, #32
 8012b0a:	682a      	ldr	r2, [r5, #0]
 8012b0c:	4628      	mov	r0, r5
 8012b0e:	9305      	str	r3, [sp, #20]
 8012b10:	616e      	str	r6, [r5, #20]
 8012b12:	6892      	ldr	r2, [r2, #8]
 8012b14:	4790      	blx	r2
 8012b16:	9b05      	ldr	r3, [sp, #20]
 8012b18:	4652      	mov	r2, sl
 8012b1a:	4649      	mov	r1, r9
 8012b1c:	616b      	str	r3, [r5, #20]
 8012b1e:	4628      	mov	r0, r5
 8012b20:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
 8012b24:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8012b28:	f7f3 fa10 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8012b2c:	9a01      	ldr	r2, [sp, #4]
 8012b2e:	4b23      	ldr	r3, [pc, #140]	; (8012bbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8012b30:	4620      	mov	r0, r4
 8012b32:	801a      	strh	r2, [r3, #0]
 8012b34:	9a02      	ldr	r2, [sp, #8]
 8012b36:	4b22      	ldr	r3, [pc, #136]	; (8012bc0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8012b38:	801a      	strh	r2, [r3, #0]
 8012b3a:	9a03      	ldr	r2, [sp, #12]
 8012b3c:	4b1c      	ldr	r3, [pc, #112]	; (8012bb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012b3e:	801a      	strh	r2, [r3, #0]
 8012b40:	4b1c      	ldr	r3, [pc, #112]	; (8012bb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012b42:	9a04      	ldr	r2, [sp, #16]
 8012b44:	801a      	strh	r2, [r3, #0]
 8012b46:	6823      	ldr	r3, [r4, #0]
 8012b48:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8012b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b4e:	4798      	blx	r3
 8012b50:	6823      	ldr	r3, [r4, #0]
 8012b52:	4620      	mov	r0, r4
 8012b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b56:	4798      	blx	r3
 8012b58:	b00f      	add	sp, #60	; 0x3c
 8012b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b5e:	883b      	ldrh	r3, [r7, #0]
 8012b60:	f8ab 0000 	strh.w	r0, [fp]
 8012b64:	f8aa 3000 	strh.w	r3, [sl]
 8012b68:	e789      	b.n	8012a7e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8012b6a:	462a      	mov	r2, r5
 8012b6c:	ab0a      	add	r3, sp, #40	; 0x28
 8012b6e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8012b72:	6851      	ldr	r1, [r2, #4]
 8012b74:	c303      	stmia	r3!, {r0, r1}
 8012b76:	e7a9      	b.n	8012acc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8012b78:	a807      	add	r0, sp, #28
 8012b7a:	f008 fd2f 	bl	801b5dc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012b7e:	4606      	mov	r6, r0
 8012b80:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8012b82:	6803      	ldr	r3, [r0, #0]
 8012b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b86:	4798      	blx	r3
 8012b88:	4286      	cmp	r6, r0
 8012b8a:	d1b8      	bne.n	8012afe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8012b8c:	f7f2 f8f8 	bl	8004d80 <_ZN8touchgfx3HAL3lcdEv>
 8012b90:	6803      	ldr	r3, [r0, #0]
 8012b92:	4606      	mov	r6, r0
 8012b94:	a807      	add	r0, sp, #28
 8012b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b98:	9305      	str	r3, [sp, #20]
 8012b9a:	f008 fd1f 	bl	801b5dc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012b9e:	9b05      	ldr	r3, [sp, #20]
 8012ba0:	4601      	mov	r1, r0
 8012ba2:	4630      	mov	r0, r6
 8012ba4:	4798      	blx	r3
 8012ba6:	f080 0001 	eor.w	r0, r0, #1
 8012baa:	b2c0      	uxtb	r0, r0
 8012bac:	e7a8      	b.n	8012b00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8012bae:	bf00      	nop
 8012bb0:	20027c9c 	.word	0x20027c9c
 8012bb4:	20027c9e 	.word	0x20027c9e
 8012bb8:	20027ca0 	.word	0x20027ca0
 8012bbc:	20027ca2 	.word	0x20027ca2
 8012bc0:	20027ca4 	.word	0x20027ca4

08012bc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8012bc4:	4b07      	ldr	r3, [pc, #28]	; (8012be4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8012bc6:	b510      	push	{r4, lr}
 8012bc8:	781b      	ldrb	r3, [r3, #0]
 8012bca:	4604      	mov	r4, r0
 8012bcc:	b13b      	cbz	r3, 8012bde <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8012bce:	6803      	ldr	r3, [r0, #0]
 8012bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bd2:	4798      	blx	r3
 8012bd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012bd6:	4283      	cmp	r3, r0
 8012bd8:	d101      	bne.n	8012bde <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8012bda:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8012bdc:	bd10      	pop	{r4, pc}
 8012bde:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012be0:	e7fc      	b.n	8012bdc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8012be2:	bf00      	nop
 8012be4:	20027ca6 	.word	0x20027ca6

08012be8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8012be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bec:	461d      	mov	r5, r3
 8012bee:	b08a      	sub	sp, #40	; 0x28
 8012bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012bf4:	4690      	mov	r8, r2
 8012bf6:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8012bfa:	2400      	movs	r4, #0
 8012bfc:	4607      	mov	r7, r0
 8012bfe:	fb06 8505 	mla	r5, r6, r5, r8
 8012c02:	9404      	str	r4, [sp, #16]
 8012c04:	f88d 4020 	strb.w	r4, [sp, #32]
 8012c08:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012c0c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012c10:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012c14:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012c18:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012c1c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012c20:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012c24:	f7ff ffce 	bl	8012bc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012c28:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8012c2c:	6878      	ldr	r0, [r7, #4]
 8012c2e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8012c32:	a901      	add	r1, sp, #4
 8012c34:	9505      	str	r5, [sp, #20]
 8012c36:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8012c3a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8012c3e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8012c42:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8012c46:	6803      	ldr	r3, [r0, #0]
 8012c48:	685b      	ldr	r3, [r3, #4]
 8012c4a:	4798      	blx	r3
 8012c4c:	b00a      	add	sp, #40	; 0x28
 8012c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012c52 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8012c52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012c56:	b08b      	sub	sp, #44	; 0x2c
 8012c58:	2400      	movs	r4, #0
 8012c5a:	4691      	mov	r9, r2
 8012c5c:	461d      	mov	r5, r3
 8012c5e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8012c62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012c66:	4688      	mov	r8, r1
 8012c68:	4607      	mov	r7, r0
 8012c6a:	9404      	str	r4, [sp, #16]
 8012c6c:	fb06 9505 	mla	r5, r6, r5, r9
 8012c70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012c74:	f7ff ffa6 	bl	8012bc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012c78:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012c7c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8012c80:	6878      	ldr	r0, [r7, #4]
 8012c82:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012c86:	a901      	add	r1, sp, #4
 8012c88:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8012c8c:	9505      	str	r5, [sp, #20]
 8012c8e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012c92:	f8ad 401c 	strh.w	r4, [sp, #28]
 8012c96:	f8ad 601e 	strh.w	r6, [sp, #30]
 8012c9a:	f8cd 8010 	str.w	r8, [sp, #16]
 8012c9e:	f8ad 4020 	strh.w	r4, [sp, #32]
 8012ca2:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8012ca6:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8012caa:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8012cae:	6803      	ldr	r3, [r0, #0]
 8012cb0:	685b      	ldr	r3, [r3, #4]
 8012cb2:	4798      	blx	r3
 8012cb4:	b00b      	add	sp, #44	; 0x2c
 8012cb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08012cbc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8012cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cc0:	b08a      	sub	sp, #40	; 0x28
 8012cc2:	4698      	mov	r8, r3
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	4606      	mov	r6, r0
 8012cc8:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8012ccc:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8012cd0:	2d0b      	cmp	r5, #11
 8012cd2:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8012cd6:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8012cda:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8012cde:	9304      	str	r3, [sp, #16]
 8012ce0:	d137      	bne.n	8012d52 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8012ce2:	2380      	movs	r3, #128	; 0x80
 8012ce4:	f88d 0020 	strb.w	r0, [sp, #32]
 8012ce8:	4630      	mov	r0, r6
 8012cea:	9203      	str	r2, [sp, #12]
 8012cec:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012cf0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012cf4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012cf8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012cfc:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012d00:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8012d04:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012d08:	f7ff ff5c 	bl	8012bc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012d0c:	2c0b      	cmp	r4, #11
 8012d0e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8012d12:	f8ad 701e 	strh.w	r7, [sp, #30]
 8012d16:	bf94      	ite	ls
 8012d18:	4b19      	ldrls	r3, [pc, #100]	; (8012d80 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8012d1a:	2100      	movhi	r1, #0
 8012d1c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8012d20:	bf98      	it	ls
 8012d22:	5d19      	ldrbls	r1, [r3, r4]
 8012d24:	fb02 8307 	mla	r3, r2, r7, r8
 8012d28:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8012d2c:	10c9      	asrs	r1, r1, #3
 8012d2e:	fb01 0003 	mla	r0, r1, r3, r0
 8012d32:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8012d36:	a901      	add	r1, sp, #4
 8012d38:	9005      	str	r0, [sp, #20]
 8012d3a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8012d3e:	2300      	movs	r3, #0
 8012d40:	6870      	ldr	r0, [r6, #4]
 8012d42:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8012d46:	6803      	ldr	r3, [r0, #0]
 8012d48:	685b      	ldr	r3, [r3, #4]
 8012d4a:	4798      	blx	r3
 8012d4c:	b00a      	add	sp, #40	; 0x28
 8012d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d52:	2d02      	cmp	r5, #2
 8012d54:	d109      	bne.n	8012d6a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8012d56:	28ff      	cmp	r0, #255	; 0xff
 8012d58:	d105      	bne.n	8012d66 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8012d5a:	f1bc 0f00 	cmp.w	ip, #0
 8012d5e:	bf14      	ite	ne
 8012d60:	2340      	movne	r3, #64	; 0x40
 8012d62:	2320      	moveq	r3, #32
 8012d64:	e7be      	b.n	8012ce4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012d66:	2340      	movs	r3, #64	; 0x40
 8012d68:	e7bc      	b.n	8012ce4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012d6a:	28ff      	cmp	r0, #255	; 0xff
 8012d6c:	d105      	bne.n	8012d7a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8012d6e:	f1bc 0f00 	cmp.w	ip, #0
 8012d72:	bf14      	ite	ne
 8012d74:	2304      	movne	r3, #4
 8012d76:	2301      	moveq	r3, #1
 8012d78:	e7b4      	b.n	8012ce4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012d7a:	2304      	movs	r3, #4
 8012d7c:	e7b2      	b.n	8012ce4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012d7e:	bf00      	nop
 8012d80:	0803052c 	.word	0x0803052c

08012d84 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8012d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d88:	b08b      	sub	sp, #44	; 0x2c
 8012d8a:	461d      	mov	r5, r3
 8012d8c:	2400      	movs	r4, #0
 8012d8e:	4688      	mov	r8, r1
 8012d90:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8012d94:	4693      	mov	fp, r2
 8012d96:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8012d9a:	4607      	mov	r7, r0
 8012d9c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8012da0:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8012da4:	9404      	str	r4, [sp, #16]
 8012da6:	bf14      	ite	ne
 8012da8:	2308      	movne	r3, #8
 8012daa:	2302      	moveq	r3, #2
 8012dac:	fb05 b50a 	mla	r5, r5, sl, fp
 8012db0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012db4:	f7ff ff06 	bl	8012bc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012db8:	2e0b      	cmp	r6, #11
 8012dba:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8012dbe:	a901      	add	r1, sp, #4
 8012dc0:	bf98      	it	ls
 8012dc2:	4b13      	ldrls	r3, [pc, #76]	; (8012e10 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8012dc4:	f8ad a01e 	strh.w	sl, [sp, #30]
 8012dc8:	bf98      	it	ls
 8012dca:	5d9c      	ldrbls	r4, [r3, r6]
 8012dcc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8012dd0:	10e4      	asrs	r4, r4, #3
 8012dd2:	f8cd 8010 	str.w	r8, [sp, #16]
 8012dd6:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012dda:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8012dde:	fb04 0405 	mla	r4, r4, r5, r0
 8012de2:	6878      	ldr	r0, [r7, #4]
 8012de4:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012de8:	2300      	movs	r3, #0
 8012dea:	9405      	str	r4, [sp, #20]
 8012dec:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012df0:	f88d 9020 	strb.w	r9, [sp, #32]
 8012df4:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8012df8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8012dfc:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8012e00:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8012e04:	6803      	ldr	r3, [r0, #0]
 8012e06:	685b      	ldr	r3, [r3, #4]
 8012e08:	4798      	blx	r3
 8012e0a:	b00b      	add	sp, #44	; 0x2c
 8012e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e10:	0803052c 	.word	0x0803052c

08012e14 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8012e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e18:	461e      	mov	r6, r3
 8012e1a:	4b0a      	ldr	r3, [pc, #40]	; (8012e44 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8012e1c:	460f      	mov	r7, r1
 8012e1e:	4690      	mov	r8, r2
 8012e20:	881d      	ldrh	r5, [r3, #0]
 8012e22:	f7f1 ffad 	bl	8004d80 <_ZN8touchgfx3HAL3lcdEv>
 8012e26:	6803      	ldr	r3, [r0, #0]
 8012e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e2a:	4798      	blx	r3
 8012e2c:	280b      	cmp	r0, #11
 8012e2e:	bf96      	itet	ls
 8012e30:	4b05      	ldrls	r3, [pc, #20]	; (8012e48 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8012e32:	2400      	movhi	r4, #0
 8012e34:	5c1c      	ldrbls	r4, [r3, r0]
 8012e36:	fb08 7005 	mla	r0, r8, r5, r7
 8012e3a:	10e4      	asrs	r4, r4, #3
 8012e3c:	fb04 6000 	mla	r0, r4, r0, r6
 8012e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e44:	20027ca2 	.word	0x20027ca2
 8012e48:	0803052c 	.word	0x0803052c

08012e4c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8012e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e4e:	b08b      	sub	sp, #44	; 0x2c
 8012e50:	461f      	mov	r7, r3
 8012e52:	4604      	mov	r4, r0
 8012e54:	4616      	mov	r6, r2
 8012e56:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8012e5a:	2500      	movs	r5, #0
 8012e5c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012e60:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012e64:	9504      	str	r5, [sp, #16]
 8012e66:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012e6a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012e6e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012e72:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012e76:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012e7a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8012e7e:	f88d 3020 	strb.w	r3, [sp, #32]
 8012e82:	f7ff fe9f 	bl	8012bc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012e86:	463a      	mov	r2, r7
 8012e88:	4631      	mov	r1, r6
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	4620      	mov	r0, r4
 8012e8e:	f7ff ffc1 	bl	8012e14 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012e92:	4b0e      	ldr	r3, [pc, #56]	; (8012ecc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8012e94:	9005      	str	r0, [sp, #20]
 8012e96:	881b      	ldrh	r3, [r3, #0]
 8012e98:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012e9c:	f7f1 ff70 	bl	8004d80 <_ZN8touchgfx3HAL3lcdEv>
 8012ea0:	6803      	ldr	r3, [r0, #0]
 8012ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ea4:	4798      	blx	r3
 8012ea6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012ea8:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8012eac:	a901      	add	r1, sp, #4
 8012eae:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8012eb2:	9304      	str	r3, [sp, #16]
 8012eb4:	6860      	ldr	r0, [r4, #4]
 8012eb6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8012eba:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8012ebe:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8012ec2:	6803      	ldr	r3, [r0, #0]
 8012ec4:	685b      	ldr	r3, [r3, #4]
 8012ec6:	4798      	blx	r3
 8012ec8:	b00b      	add	sp, #44	; 0x2c
 8012eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ecc:	20027ca2 	.word	0x20027ca2

08012ed0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8012ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ed2:	b08d      	sub	sp, #52	; 0x34
 8012ed4:	2501      	movs	r5, #1
 8012ed6:	4604      	mov	r4, r0
 8012ed8:	466b      	mov	r3, sp
 8012eda:	9503      	str	r5, [sp, #12]
 8012edc:	e883 0006 	stmia.w	r3, {r1, r2}
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	f8bd 6000 	ldrh.w	r6, [sp]
 8012ee6:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8012eea:	9306      	str	r3, [sp, #24]
 8012eec:	6803      	ldr	r3, [r0, #0]
 8012eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ef0:	4798      	blx	r3
 8012ef2:	463a      	mov	r2, r7
 8012ef4:	4631      	mov	r1, r6
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	4620      	mov	r0, r4
 8012efa:	f7ff ff8b 	bl	8012e14 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012efe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012f00:	9004      	str	r0, [sp, #16]
 8012f02:	9307      	str	r3, [sp, #28]
 8012f04:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012f08:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012f0c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012f10:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8012f14:	4b0e      	ldr	r3, [pc, #56]	; (8012f50 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8012f16:	881b      	ldrh	r3, [r3, #0]
 8012f18:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8012f1c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8012f20:	f7f1 ff2e 	bl	8004d80 <_ZN8touchgfx3HAL3lcdEv>
 8012f24:	6803      	ldr	r3, [r0, #0]
 8012f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f28:	4798      	blx	r3
 8012f2a:	23ff      	movs	r3, #255	; 0xff
 8012f2c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8012f30:	a903      	add	r1, sp, #12
 8012f32:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8012f36:	6860      	ldr	r0, [r4, #4]
 8012f38:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8012f3c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8012f40:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8012f44:	6803      	ldr	r3, [r0, #0]
 8012f46:	685b      	ldr	r3, [r3, #4]
 8012f48:	4798      	blx	r3
 8012f4a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8012f4c:	b00d      	add	sp, #52	; 0x34
 8012f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f50:	20027ca2 	.word	0x20027ca2

08012f54 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8012f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f58:	b08c      	sub	sp, #48	; 0x30
 8012f5a:	461e      	mov	r6, r3
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	4604      	mov	r4, r0
 8012f60:	466d      	mov	r5, sp
 8012f62:	9306      	str	r3, [sp, #24]
 8012f64:	6803      	ldr	r3, [r0, #0]
 8012f66:	e885 0006 	stmia.w	r5, {r1, r2}
 8012f6a:	2501      	movs	r5, #1
 8012f6c:	f8bd 7000 	ldrh.w	r7, [sp]
 8012f70:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8012f74:	9503      	str	r5, [sp, #12]
 8012f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f78:	4798      	blx	r3
 8012f7a:	4642      	mov	r2, r8
 8012f7c:	4639      	mov	r1, r7
 8012f7e:	4603      	mov	r3, r0
 8012f80:	4620      	mov	r0, r4
 8012f82:	f7ff ff47 	bl	8012e14 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8012f86:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012f8a:	9004      	str	r0, [sp, #16]
 8012f8c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012f90:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012f94:	9607      	str	r6, [sp, #28]
 8012f96:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8012f9a:	4b10      	ldr	r3, [pc, #64]	; (8012fdc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8012f9c:	881b      	ldrh	r3, [r3, #0]
 8012f9e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8012fa2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012fa4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8012fa8:	f7f1 feea 	bl	8004d80 <_ZN8touchgfx3HAL3lcdEv>
 8012fac:	6803      	ldr	r3, [r0, #0]
 8012fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fb0:	4798      	blx	r3
 8012fb2:	23ff      	movs	r3, #255	; 0xff
 8012fb4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8012fb8:	a903      	add	r1, sp, #12
 8012fba:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8012fbe:	6860      	ldr	r0, [r4, #4]
 8012fc0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8012fc4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8012fc8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8012fcc:	6803      	ldr	r3, [r0, #0]
 8012fce:	685b      	ldr	r3, [r3, #4]
 8012fd0:	4798      	blx	r3
 8012fd2:	4630      	mov	r0, r6
 8012fd4:	b00c      	add	sp, #48	; 0x30
 8012fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fda:	bf00      	nop
 8012fdc:	20027ca2 	.word	0x20027ca2

08012fe0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8012fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fe2:	b085      	sub	sp, #20
 8012fe4:	4605      	mov	r5, r0
 8012fe6:	ac02      	add	r4, sp, #8
 8012fe8:	e884 0006 	stmia.w	r4, {r1, r2}
 8012fec:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8012ff0:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8012ff4:	f7ff fde6 	bl	8012bc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012ff8:	4631      	mov	r1, r6
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	463a      	mov	r2, r7
 8012ffe:	4628      	mov	r0, r5
 8013000:	f7ff ff08 	bl	8012e14 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013004:	4a05      	ldr	r2, [pc, #20]	; (801301c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8013006:	682b      	ldr	r3, [r5, #0]
 8013008:	8812      	ldrh	r2, [r2, #0]
 801300a:	9200      	str	r2, [sp, #0]
 801300c:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801300e:	4603      	mov	r3, r0
 8013010:	4628      	mov	r0, r5
 8013012:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013016:	47b0      	blx	r6
 8013018:	b005      	add	sp, #20
 801301a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801301c:	20027ca2 	.word	0x20027ca2

08013020 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8013020:	b570      	push	{r4, r5, r6, lr}
 8013022:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 8013026:	4604      	mov	r4, r0
 8013028:	b19b      	cbz	r3, 8013052 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801302a:	2002      	movs	r0, #2
 801302c:	f7ed ff16 	bl	8000e5c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8013030:	2300      	movs	r3, #0
 8013032:	4620      	mov	r0, r4
 8013034:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8013038:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 801303c:	6823      	ldr	r3, [r4, #0]
 801303e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8013042:	f7ff fdbf 	bl	8012bc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013046:	4601      	mov	r1, r0
 8013048:	4620      	mov	r0, r4
 801304a:	462b      	mov	r3, r5
 801304c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013050:	4718      	bx	r3
 8013052:	bd70      	pop	{r4, r5, r6, pc}

08013054 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8013054:	b570      	push	{r4, r5, r6, lr}
 8013056:	4605      	mov	r5, r0
 8013058:	460c      	mov	r4, r1
 801305a:	2003      	movs	r0, #3
 801305c:	b149      	cbz	r1, 8013072 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 801305e:	f7ed fe9d 	bl	8000d9c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8013062:	6928      	ldr	r0, [r5, #16]
 8013064:	b168      	cbz	r0, 8013082 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8013066:	6803      	ldr	r3, [r0, #0]
 8013068:	2101      	movs	r1, #1
 801306a:	695b      	ldr	r3, [r3, #20]
 801306c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013070:	4718      	bx	r3
 8013072:	f7ed fec3 	bl	8000dfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8013076:	6928      	ldr	r0, [r5, #16]
 8013078:	b118      	cbz	r0, 8013082 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801307a:	6803      	ldr	r3, [r0, #0]
 801307c:	4621      	mov	r1, r4
 801307e:	695b      	ldr	r3, [r3, #20]
 8013080:	e7f4      	b.n	801306c <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8013082:	bd70      	pop	{r4, r5, r6, pc}

08013084 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8013084:	b538      	push	{r3, r4, r5, lr}
 8013086:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 801308a:	4604      	mov	r4, r0
 801308c:	460d      	mov	r5, r1
 801308e:	428b      	cmp	r3, r1
 8013090:	d006      	beq.n	80130a0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8013092:	6803      	ldr	r3, [r0, #0]
 8013094:	b929      	cbnz	r1, 80130a2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8013096:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801309a:	4798      	blx	r3
 801309c:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
 80130a0:	bd38      	pop	{r3, r4, r5, pc}
 80130a2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80130a6:	e7f8      	b.n	801309a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

080130a8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80130a8:	4b0d      	ldr	r3, [pc, #52]	; (80130e0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80130aa:	b510      	push	{r4, lr}
 80130ac:	781b      	ldrb	r3, [r3, #0]
 80130ae:	4604      	mov	r4, r0
 80130b0:	b95b      	cbnz	r3, 80130ca <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80130b2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80130b6:	2b02      	cmp	r3, #2
 80130b8:	d007      	beq.n	80130ca <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80130ba:	6840      	ldr	r0, [r0, #4]
 80130bc:	f000 f92c 	bl	8013318 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80130c0:	b118      	cbz	r0, 80130ca <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80130c2:	6862      	ldr	r2, [r4, #4]
 80130c4:	7a53      	ldrb	r3, [r2, #9]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d0fc      	beq.n	80130c4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80130ca:	f7ee fe9d 	bl	8001e08 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80130ce:	4620      	mov	r0, r4
 80130d0:	2100      	movs	r1, #0
 80130d2:	f7ff ffd7 	bl	8013084 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80130d6:	4620      	mov	r0, r4
 80130d8:	f7ff fd74 	bl	8012bc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80130dc:	bd10      	pop	{r4, pc}
 80130de:	bf00      	nop
 80130e0:	20027ca6 	.word	0x20027ca6

080130e4 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 80130e4:	b570      	push	{r4, r5, r6, lr}
 80130e6:	4604      	mov	r4, r0
 80130e8:	6803      	ldr	r3, [r0, #0]
 80130ea:	b919      	cbnz	r1, 80130f4 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 80130ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130f2:	4718      	bx	r3
 80130f4:	2200      	movs	r2, #0
 80130f6:	f890 607b 	ldrb.w	r6, [r0, #123]	; 0x7b
 80130fa:	f880 207b 	strb.w	r2, [r0, #123]	; 0x7b
 80130fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013100:	4798      	blx	r3
 8013102:	6863      	ldr	r3, [r4, #4]
 8013104:	2101      	movs	r1, #1
 8013106:	4605      	mov	r5, r0
 8013108:	4620      	mov	r0, r4
 801310a:	7299      	strb	r1, [r3, #10]
 801310c:	f884 607b 	strb.w	r6, [r4, #123]	; 0x7b
 8013110:	f7ff ffb8 	bl	8013084 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013114:	4628      	mov	r0, r5
 8013116:	bd70      	pop	{r4, r5, r6, pc}

08013118 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8013118:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801311c:	1a13      	subs	r3, r2, r0
 801311e:	4258      	negs	r0, r3
 8013120:	4158      	adcs	r0, r3
 8013122:	4770      	bx	lr

08013124 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8013124:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8013128:	1a9b      	subs	r3, r3, r2
 801312a:	2b00      	cmp	r3, #0
 801312c:	bfdc      	itt	le
 801312e:	6882      	ldrle	r2, [r0, #8]
 8013130:	189b      	addle	r3, r3, r2
 8013132:	2b01      	cmp	r3, #1
 8013134:	bfcc      	ite	gt
 8013136:	2000      	movgt	r0, #0
 8013138:	2001      	movle	r0, #1
 801313a:	4770      	bx	lr

0801313c <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801313c:	6902      	ldr	r2, [r0, #16]
 801313e:	6843      	ldr	r3, [r0, #4]
 8013140:	2024      	movs	r0, #36	; 0x24
 8013142:	fb00 3002 	mla	r0, r0, r2, r3
 8013146:	4770      	bx	lr

08013148 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8013148:	6803      	ldr	r3, [r0, #0]
 801314a:	691b      	ldr	r3, [r3, #16]
 801314c:	4718      	bx	r3

0801314e <_ZN8touchgfx13DMA_Interface7executeEv>:
 801314e:	2301      	movs	r3, #1
 8013150:	b570      	push	{r4, r5, r6, lr}
 8013152:	7203      	strb	r3, [r0, #8]
 8013154:	4604      	mov	r4, r0
 8013156:	6840      	ldr	r0, [r0, #4]
 8013158:	6803      	ldr	r3, [r0, #0]
 801315a:	699b      	ldr	r3, [r3, #24]
 801315c:	4798      	blx	r3
 801315e:	6803      	ldr	r3, [r0, #0]
 8013160:	4605      	mov	r5, r0
 8013162:	2b40      	cmp	r3, #64	; 0x40
 8013164:	d00c      	beq.n	8013180 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013166:	d810      	bhi.n	801318a <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8013168:	2b04      	cmp	r3, #4
 801316a:	d01d      	beq.n	80131a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 801316c:	d804      	bhi.n	8013178 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 801316e:	2b01      	cmp	r3, #1
 8013170:	d006      	beq.n	8013180 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013172:	2b02      	cmp	r3, #2
 8013174:	d02c      	beq.n	80131d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8013176:	bd70      	pop	{r4, r5, r6, pc}
 8013178:	2b08      	cmp	r3, #8
 801317a:	d01d      	beq.n	80131b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801317c:	2b20      	cmp	r3, #32
 801317e:	d1fa      	bne.n	8013176 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8013180:	6823      	ldr	r3, [r4, #0]
 8013182:	4620      	mov	r0, r4
 8013184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013186:	4798      	blx	r3
 8013188:	e013      	b.n	80131b2 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801318a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801318e:	d0f7      	beq.n	8013180 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013190:	d804      	bhi.n	801319c <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8013192:	2b80      	cmp	r3, #128	; 0x80
 8013194:	d0f4      	beq.n	8013180 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801319a:	e7f0      	b.n	801317e <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801319c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80131a0:	d0ee      	beq.n	8013180 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80131a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80131a6:	e7e5      	b.n	8013174 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80131a8:	6823      	ldr	r3, [r4, #0]
 80131aa:	7f01      	ldrb	r1, [r0, #28]
 80131ac:	4620      	mov	r0, r4
 80131ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131b0:	4798      	blx	r3
 80131b2:	6823      	ldr	r3, [r4, #0]
 80131b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131b6:	e006      	b.n	80131c6 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80131b8:	6823      	ldr	r3, [r4, #0]
 80131ba:	7f01      	ldrb	r1, [r0, #28]
 80131bc:	4620      	mov	r0, r4
 80131be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131c0:	4798      	blx	r3
 80131c2:	6823      	ldr	r3, [r4, #0]
 80131c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131c6:	4629      	mov	r1, r5
 80131c8:	4620      	mov	r0, r4
 80131ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80131ce:	4718      	bx	r3
 80131d0:	6823      	ldr	r3, [r4, #0]
 80131d2:	4620      	mov	r0, r4
 80131d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131d6:	4798      	blx	r3
 80131d8:	e7f3      	b.n	80131c2 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080131da <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80131da:	4770      	bx	lr

080131dc <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80131dc:	4770      	bx	lr

080131de <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 80131de:	4770      	bx	lr

080131e0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80131e0:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80131e4:	b510      	push	{r4, lr}
 80131e6:	1ad2      	subs	r2, r2, r3
 80131e8:	2a00      	cmp	r2, #0
 80131ea:	bfdc      	itt	le
 80131ec:	6884      	ldrle	r4, [r0, #8]
 80131ee:	1912      	addle	r2, r2, r4
 80131f0:	2a01      	cmp	r2, #1
 80131f2:	dd16      	ble.n	8013222 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80131f4:	6842      	ldr	r2, [r0, #4]
 80131f6:	2424      	movs	r4, #36	; 0x24
 80131f8:	fb04 2303 	mla	r3, r4, r3, r2
 80131fc:	f101 0220 	add.w	r2, r1, #32
 8013200:	f851 4b04 	ldr.w	r4, [r1], #4
 8013204:	4291      	cmp	r1, r2
 8013206:	f843 4b04 	str.w	r4, [r3], #4
 801320a:	d1f9      	bne.n	8013200 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801320c:	780a      	ldrb	r2, [r1, #0]
 801320e:	701a      	strb	r2, [r3, #0]
 8013210:	68c3      	ldr	r3, [r0, #12]
 8013212:	6882      	ldr	r2, [r0, #8]
 8013214:	f3bf 8f5b 	dmb	ish
 8013218:	3301      	adds	r3, #1
 801321a:	429a      	cmp	r2, r3
 801321c:	bfd8      	it	le
 801321e:	1a9b      	suble	r3, r3, r2
 8013220:	60c3      	str	r3, [r0, #12]
 8013222:	bd10      	pop	{r4, pc}

08013224 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8013224:	6903      	ldr	r3, [r0, #16]
 8013226:	6882      	ldr	r2, [r0, #8]
 8013228:	f3bf 8f5b 	dmb	ish
 801322c:	3301      	adds	r3, #1
 801322e:	429a      	cmp	r2, r3
 8013230:	bfd8      	it	le
 8013232:	1a9b      	suble	r3, r3, r2
 8013234:	6103      	str	r3, [r0, #16]
 8013236:	4770      	bx	lr

08013238 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8013238:	b570      	push	{r4, r5, r6, lr}
 801323a:	4604      	mov	r4, r0
 801323c:	460e      	mov	r6, r1
 801323e:	6860      	ldr	r0, [r4, #4]
 8013240:	6803      	ldr	r3, [r0, #0]
 8013242:	685b      	ldr	r3, [r3, #4]
 8013244:	4798      	blx	r3
 8013246:	2800      	cmp	r0, #0
 8013248:	d1f9      	bne.n	801323e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801324a:	4d0d      	ldr	r5, [pc, #52]	; (8013280 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801324c:	6828      	ldr	r0, [r5, #0]
 801324e:	6803      	ldr	r3, [r0, #0]
 8013250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013252:	4798      	blx	r3
 8013254:	f7ee fde6 	bl	8001e24 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8013258:	6828      	ldr	r0, [r5, #0]
 801325a:	2101      	movs	r1, #1
 801325c:	f7ff ff12 	bl	8013084 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013260:	6860      	ldr	r0, [r4, #4]
 8013262:	4631      	mov	r1, r6
 8013264:	6803      	ldr	r3, [r0, #0]
 8013266:	689b      	ldr	r3, [r3, #8]
 8013268:	4798      	blx	r3
 801326a:	6823      	ldr	r3, [r4, #0]
 801326c:	4620      	mov	r0, r4
 801326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013270:	4798      	blx	r3
 8013272:	6828      	ldr	r0, [r5, #0]
 8013274:	6803      	ldr	r3, [r0, #0]
 8013276:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801327a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801327c:	4718      	bx	r3
 801327e:	bf00      	nop
 8013280:	20027ca8 	.word	0x20027ca8

08013284 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8013284:	b508      	push	{r3, lr}
 8013286:	f7ee fdbf 	bl	8001e08 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801328a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801328e:	f7ee bdc3 	b.w	8001e18 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013292 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8013292:	b510      	push	{r4, lr}
 8013294:	4604      	mov	r4, r0
 8013296:	2114      	movs	r1, #20
 8013298:	f017 fb93 	bl	802a9c2 <_ZdlPvj>
 801329c:	4620      	mov	r0, r4
 801329e:	bd10      	pop	{r4, pc}

080132a0 <_ZN8touchgfx13DMA_Interface5startEv>:
 80132a0:	b510      	push	{r4, lr}
 80132a2:	4604      	mov	r4, r0
 80132a4:	6840      	ldr	r0, [r0, #4]
 80132a6:	6803      	ldr	r3, [r0, #0]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	4798      	blx	r3
 80132ac:	b948      	cbnz	r0, 80132c2 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80132ae:	7a63      	ldrb	r3, [r4, #9]
 80132b0:	b13b      	cbz	r3, 80132c2 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80132b2:	7a23      	ldrb	r3, [r4, #8]
 80132b4:	b92b      	cbnz	r3, 80132c2 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80132b6:	6823      	ldr	r3, [r4, #0]
 80132b8:	4620      	mov	r0, r4
 80132ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132c0:	4718      	bx	r3
 80132c2:	bd10      	pop	{r4, pc}

080132c4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80132c4:	b570      	push	{r4, r5, r6, lr}
 80132c6:	4604      	mov	r4, r0
 80132c8:	6840      	ldr	r0, [r0, #4]
 80132ca:	6803      	ldr	r3, [r0, #0]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	4798      	blx	r3
 80132d0:	4605      	mov	r5, r0
 80132d2:	b930      	cbnz	r0, 80132e2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80132d4:	7a23      	ldrb	r3, [r4, #8]
 80132d6:	b123      	cbz	r3, 80132e2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80132d8:	6860      	ldr	r0, [r4, #4]
 80132da:	6803      	ldr	r3, [r0, #0]
 80132dc:	695b      	ldr	r3, [r3, #20]
 80132de:	4798      	blx	r3
 80132e0:	7225      	strb	r5, [r4, #8]
 80132e2:	6860      	ldr	r0, [r4, #4]
 80132e4:	6803      	ldr	r3, [r0, #0]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	4798      	blx	r3
 80132ea:	b928      	cbnz	r0, 80132f8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80132ec:	6823      	ldr	r3, [r4, #0]
 80132ee:	4620      	mov	r0, r4
 80132f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132f6:	4718      	bx	r3
 80132f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132fc:	f7ee bd9a 	b.w	8001e34 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08013300 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8013300:	b510      	push	{r4, lr}
 8013302:	6082      	str	r2, [r0, #8]
 8013304:	2200      	movs	r2, #0
 8013306:	4c03      	ldr	r4, [pc, #12]	; (8013314 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8013308:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801330c:	e9c0 4100 	strd	r4, r1, [r0]
 8013310:	bd10      	pop	{r4, pc}
 8013312:	bf00      	nop
 8013314:	08030540 	.word	0x08030540

08013318 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8013318:	6840      	ldr	r0, [r0, #4]
 801331a:	6803      	ldr	r3, [r0, #0]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	4718      	bx	r3

08013320 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 8013320:	094a      	lsrs	r2, r1, #5
 8013322:	4b06      	ldr	r3, [pc, #24]	; (801333c <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE+0x1c>)
 8013324:	60c1      	str	r1, [r0, #12]
 8013326:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 801332a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801332e:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8013332:	4313      	orrs	r3, r2
 8013334:	4319      	orrs	r1, r3
 8013336:	8201      	strh	r1, [r0, #16]
 8013338:	4770      	bx	lr
 801333a:	bf00      	nop
 801333c:	fffff800 	.word	0xfffff800

08013340 <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 8013340:	f1a0 0008 	sub.w	r0, r0, #8
 8013344:	e7ec      	b.n	8013320 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
 8013346:	bf00      	nop

08013348 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 8013348:	b508      	push	{r3, lr}
 801334a:	4b05      	ldr	r3, [pc, #20]	; (8013360 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 801334c:	6818      	ldr	r0, [r3, #0]
 801334e:	6803      	ldr	r3, [r0, #0]
 8013350:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013354:	4798      	blx	r3
 8013356:	1e43      	subs	r3, r0, #1
 8013358:	4258      	negs	r0, r3
 801335a:	4158      	adcs	r0, r3
 801335c:	bd08      	pop	{r3, pc}
 801335e:	bf00      	nop
 8013360:	20027ca8 	.word	0x20027ca8

08013364 <_ZN8touchgfx13PainterRGB565D1Ev>:
 8013364:	4770      	bx	lr

08013366 <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 8013366:	3808      	subs	r0, #8
 8013368:	4770      	bx	lr

0801336a <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 801336a:	b430      	push	{r4, r5}
 801336c:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 8013370:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8013374:	8a02      	ldrh	r2, [r0, #16]
 8013376:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801337a:	4629      	mov	r1, r5
 801337c:	9202      	str	r2, [sp, #8]
 801337e:	68c2      	ldr	r2, [r0, #12]
 8013380:	4620      	mov	r0, r4
 8013382:	bc30      	pop	{r4, r5}
 8013384:	f7ee bf18 	b.w	80021b8 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

08013388 <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 8013388:	f7ee bf0c 	b.w	80021a4 <_ZN8touchgfx5paint8tearDownEv>

0801338c <_ZN8touchgfx13PainterRGB565D0Ev>:
 801338c:	b510      	push	{r4, lr}
 801338e:	4604      	mov	r4, r0
 8013390:	2114      	movs	r1, #20
 8013392:	f017 fb16 	bl	802a9c2 <_ZdlPvj>
 8013396:	4620      	mov	r0, r4
 8013398:	bd10      	pop	{r4, pc}

0801339a <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 801339a:	f1a0 0008 	sub.w	r0, r0, #8
 801339e:	e7f5      	b.n	801338c <_ZN8touchgfx13PainterRGB565D0Ev>

080133a0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80133a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80133a2:	6803      	ldr	r3, [r0, #0]
 80133a4:	460d      	mov	r5, r1
 80133a6:	4604      	mov	r4, r0
 80133a8:	4601      	mov	r1, r0
 80133aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80133ac:	a802      	add	r0, sp, #8
 80133ae:	4798      	blx	r3
 80133b0:	6828      	ldr	r0, [r5, #0]
 80133b2:	6869      	ldr	r1, [r5, #4]
 80133b4:	466b      	mov	r3, sp
 80133b6:	c303      	stmia	r3!, {r0, r1}
 80133b8:	4668      	mov	r0, sp
 80133ba:	4619      	mov	r1, r3
 80133bc:	f7fe fcf2 	bl	8011da4 <_ZN8touchgfx4RectaNERKS0_>
 80133c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80133c2:	b188      	cbz	r0, 80133e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80133c4:	6803      	ldr	r3, [r0, #0]
 80133c6:	1d21      	adds	r1, r4, #4
 80133c8:	68db      	ldr	r3, [r3, #12]
 80133ca:	4798      	blx	r3
 80133cc:	b160      	cbz	r0, 80133e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80133ce:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	dd08      	ble.n	80133e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80133d6:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 80133da:	2d00      	cmp	r5, #0
 80133dc:	dd04      	ble.n	80133e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80133de:	4a2b      	ldr	r2, [pc, #172]	; (801348c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 80133e0:	7812      	ldrb	r2, [r2, #0]
 80133e2:	b11a      	cbz	r2, 80133ec <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 80133e4:	2a01      	cmp	r2, #1
 80133e6:	d029      	beq.n	801343c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 80133e8:	b004      	add	sp, #16
 80133ea:	bd70      	pop	{r4, r5, r6, pc}
 80133ec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80133f0:	441d      	add	r5, r3
 80133f2:	b2ad      	uxth	r5, r5
 80133f4:	b22e      	sxth	r6, r5
 80133f6:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80133fa:	42b3      	cmp	r3, r6
 80133fc:	daf4      	bge.n	80133e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80133fe:	6823      	ldr	r3, [r4, #0]
 8013400:	4669      	mov	r1, sp
 8013402:	4620      	mov	r0, r4
 8013404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013406:	4798      	blx	r3
 8013408:	b940      	cbnz	r0, 801341c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801340a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801340e:	2b01      	cmp	r3, #1
 8013410:	d004      	beq.n	801341c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8013412:	3301      	adds	r3, #1
 8013414:	105b      	asrs	r3, r3, #1
 8013416:	f8ad 3006 	strh.w	r3, [sp, #6]
 801341a:	e7f0      	b.n	80133fe <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801341c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013420:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013424:	4413      	add	r3, r2
 8013426:	b29b      	uxth	r3, r3
 8013428:	441a      	add	r2, r3
 801342a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801342e:	b212      	sxth	r2, r2
 8013430:	4296      	cmp	r6, r2
 8013432:	dae0      	bge.n	80133f6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8013434:	1aeb      	subs	r3, r5, r3
 8013436:	f8ad 3006 	strh.w	r3, [sp, #6]
 801343a:	e7dc      	b.n	80133f6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 801343c:	f8bd 5000 	ldrh.w	r5, [sp]
 8013440:	441d      	add	r5, r3
 8013442:	b2ad      	uxth	r5, r5
 8013444:	b22e      	sxth	r6, r5
 8013446:	f9bd 3000 	ldrsh.w	r3, [sp]
 801344a:	42b3      	cmp	r3, r6
 801344c:	dacc      	bge.n	80133e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801344e:	6823      	ldr	r3, [r4, #0]
 8013450:	4669      	mov	r1, sp
 8013452:	4620      	mov	r0, r4
 8013454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013456:	4798      	blx	r3
 8013458:	b940      	cbnz	r0, 801346c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801345a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801345e:	2b01      	cmp	r3, #1
 8013460:	d004      	beq.n	801346c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8013462:	3301      	adds	r3, #1
 8013464:	105b      	asrs	r3, r3, #1
 8013466:	f8ad 3004 	strh.w	r3, [sp, #4]
 801346a:	e7f0      	b.n	801344e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 801346c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8013470:	f8bd 3000 	ldrh.w	r3, [sp]
 8013474:	4413      	add	r3, r2
 8013476:	b29b      	uxth	r3, r3
 8013478:	441a      	add	r2, r3
 801347a:	f8ad 3000 	strh.w	r3, [sp]
 801347e:	b212      	sxth	r2, r2
 8013480:	4296      	cmp	r6, r2
 8013482:	dae0      	bge.n	8013446 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8013484:	1aeb      	subs	r3, r5, r3
 8013486:	f8ad 3004 	strh.w	r3, [sp, #4]
 801348a:	e7dc      	b.n	8013446 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 801348c:	20027ca0 	.word	0x20027ca0

08013490 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8013490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013492:	6803      	ldr	r3, [r0, #0]
 8013494:	4604      	mov	r4, r0
 8013496:	4601      	mov	r1, r0
 8013498:	4668      	mov	r0, sp
 801349a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801349c:	4798      	blx	r3
 801349e:	2100      	movs	r1, #0
 80134a0:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80134a4:	4668      	mov	r0, sp
 80134a6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80134aa:	9102      	str	r1, [sp, #8]
 80134ac:	a902      	add	r1, sp, #8
 80134ae:	f8ad 200c 	strh.w	r2, [sp, #12]
 80134b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80134b6:	f7fe fc75 	bl	8011da4 <_ZN8touchgfx4RectaNERKS0_>
 80134ba:	6823      	ldr	r3, [r4, #0]
 80134bc:	4669      	mov	r1, sp
 80134be:	4620      	mov	r0, r4
 80134c0:	691b      	ldr	r3, [r3, #16]
 80134c2:	4798      	blx	r3
 80134c4:	b004      	add	sp, #16
 80134c6:	bd10      	pop	{r4, pc}

080134c8 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80134c8:	2101      	movs	r1, #1
 80134ca:	2200      	movs	r2, #0
 80134cc:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80134d0:	490a      	ldr	r1, [pc, #40]	; (80134fc <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 80134d2:	8082      	strh	r2, [r0, #4]
 80134d4:	6001      	str	r1, [r0, #0]
 80134d6:	21ff      	movs	r1, #255	; 0xff
 80134d8:	80c2      	strh	r2, [r0, #6]
 80134da:	8102      	strh	r2, [r0, #8]
 80134dc:	8142      	strh	r2, [r0, #10]
 80134de:	8182      	strh	r2, [r0, #12]
 80134e0:	81c2      	strh	r2, [r0, #14]
 80134e2:	8202      	strh	r2, [r0, #16]
 80134e4:	8242      	strh	r2, [r0, #18]
 80134e6:	61c2      	str	r2, [r0, #28]
 80134e8:	8402      	strh	r2, [r0, #32]
 80134ea:	8442      	strh	r2, [r0, #34]	; 0x22
 80134ec:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80134f0:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 80134f4:	6282      	str	r2, [r0, #40]	; 0x28
 80134f6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80134fa:	4770      	bx	lr
 80134fc:	0803059c 	.word	0x0803059c

08013500 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 8013500:	6301      	str	r1, [r0, #48]	; 0x30
 8013502:	4770      	bx	lr

08013504 <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 8013504:	6341      	str	r1, [r0, #52]	; 0x34
 8013506:	4770      	bx	lr

08013508 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 8013508:	b530      	push	{r4, r5, lr}
 801350a:	460d      	mov	r5, r1
 801350c:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 801350e:	8949      	ldrh	r1, [r1, #10]
 8013510:	b085      	sub	sp, #20
 8013512:	4604      	mov	r4, r0
 8013514:	1ac9      	subs	r1, r1, r3
 8013516:	6803      	ldr	r3, [r0, #0]
 8013518:	f10d 0206 	add.w	r2, sp, #6
 801351c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8013520:	b209      	sxth	r1, r1
 8013522:	4798      	blx	r3
 8013524:	b1a0      	cbz	r0, 8013550 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8013526:	792b      	ldrb	r3, [r5, #4]
 8013528:	b993      	cbnz	r3, 8013550 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 801352a:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 801352e:	b178      	cbz	r0, 8013550 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8013530:	6803      	ldr	r3, [r0, #0]
 8013532:	68db      	ldr	r3, [r3, #12]
 8013534:	4798      	blx	r3
 8013536:	b158      	cbz	r0, 8013550 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8013538:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801353c:	aa02      	add	r2, sp, #8
 801353e:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8013542:	4621      	mov	r1, r4
 8013544:	f8ad 3008 	strh.w	r3, [sp, #8]
 8013548:	9503      	str	r5, [sp, #12]
 801354a:	6803      	ldr	r3, [r0, #0]
 801354c:	689b      	ldr	r3, [r3, #8]
 801354e:	4798      	blx	r3
 8013550:	b005      	add	sp, #20
 8013552:	bd30      	pop	{r4, r5, pc}

08013554 <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi>:
 8013554:	b430      	push	{r4, r5}
 8013556:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	; 0x11e
 801355a:	b1cd      	cbz	r5, 8013590 <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi+0x3c>
 801355c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8013560:	f8d0 413c 	ldr.w	r4, [r0, #316]	; 0x13c
 8013564:	3d01      	subs	r5, #1
 8013566:	6823      	ldr	r3, [r4, #0]
 8013568:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801356c:	b139      	cbz	r1, 801357e <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi+0x2a>
 801356e:	4293      	cmp	r3, r2
 8013570:	f1c2 0100 	rsb	r1, r2, #0
 8013574:	bfa8      	it	ge
 8013576:	4613      	movge	r3, r2
 8013578:	428c      	cmp	r4, r1
 801357a:	bfb8      	it	lt
 801357c:	460c      	movlt	r4, r1
 801357e:	1a99      	subs	r1, r3, r2
 8013580:	4422      	add	r2, r4
 8013582:	4291      	cmp	r1, r2
 8013584:	d004      	beq.n	8013590 <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi+0x3c>
 8013586:	6803      	ldr	r3, [r0, #0]
 8013588:	bc30      	pop	{r4, r5}
 801358a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801358e:	4718      	bx	r3
 8013590:	bc30      	pop	{r4, r5}
 8013592:	4770      	bx	lr

08013594 <_ZN8touchgfx15StaticDataGraph11deleteValueEi>:
 8013594:	b410      	push	{r4}
 8013596:	2300      	movs	r3, #0
 8013598:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
 801359c:	429a      	cmp	r2, r3
 801359e:	dd0e      	ble.n	80135be <_ZN8touchgfx15StaticDataGraph11deleteValueEi+0x2a>
 80135a0:	f8d0 413c 	ldr.w	r4, [r0, #316]	; 0x13c
 80135a4:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 80135a8:	428c      	cmp	r4, r1
 80135aa:	d106      	bne.n	80135ba <_ZN8touchgfx15StaticDataGraph11deleteValueEi+0x26>
 80135ac:	6802      	ldr	r2, [r0, #0]
 80135ae:	4619      	mov	r1, r3
 80135b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135b4:	f8d2 2130 	ldr.w	r2, [r2, #304]	; 0x130
 80135b8:	4710      	bx	r2
 80135ba:	3301      	adds	r3, #1
 80135bc:	e7ee      	b.n	801359c <_ZN8touchgfx15StaticDataGraph11deleteValueEi+0x8>
 80135be:	f04f 30ff 	mov.w	r0, #4294967295
 80135c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135c6:	4770      	bx	lr

080135c8 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 80135c8:	428a      	cmp	r2, r1
 80135ca:	bfbc      	itt	lt
 80135cc:	460b      	movlt	r3, r1
 80135ce:	4611      	movlt	r1, r2
 80135d0:	b510      	push	{r4, lr}
 80135d2:	bfb8      	it	lt
 80135d4:	461a      	movlt	r2, r3
 80135d6:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 80135da:	4604      	mov	r4, r0
 80135dc:	428b      	cmp	r3, r1
 80135de:	d103      	bne.n	80135e8 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 80135e0:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 80135e4:	4293      	cmp	r3, r2
 80135e6:	d011      	beq.n	801360c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 80135e8:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 80135ec:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80135f0:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
 80135f4:	f005 fd4b 	bl	801908e <_ZNK8touchgfx8Drawable10invalidateEv>
 80135f8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80135fc:	f005 fd47 	bl	801908e <_ZNK8touchgfx8Drawable10invalidateEv>
 8013600:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8013604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013608:	f005 bd41 	b.w	801908e <_ZNK8touchgfx8Drawable10invalidateEv>
 801360c:	bd10      	pop	{r4, pc}

0801360e <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 801360e:	428a      	cmp	r2, r1
 8013610:	bfbc      	itt	lt
 8013612:	460b      	movlt	r3, r1
 8013614:	4611      	movlt	r1, r2
 8013616:	b510      	push	{r4, lr}
 8013618:	bfb8      	it	lt
 801361a:	461a      	movlt	r2, r3
 801361c:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 8013620:	4604      	mov	r4, r0
 8013622:	428b      	cmp	r3, r1
 8013624:	d103      	bne.n	801362e <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 8013626:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 801362a:	4293      	cmp	r3, r2
 801362c:	d011      	beq.n	8013652 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 801362e:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
 8013632:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8013636:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
 801363a:	f005 fd28 	bl	801908e <_ZNK8touchgfx8Drawable10invalidateEv>
 801363e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8013642:	f005 fd24 	bl	801908e <_ZNK8touchgfx8Drawable10invalidateEv>
 8013646:	f104 0090 	add.w	r0, r4, #144	; 0x90
 801364a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801364e:	f005 bd1e 	b.w	801908e <_ZNK8touchgfx8Drawable10invalidateEv>
 8013652:	bd10      	pop	{r4, pc}

08013654 <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 8013654:	2300      	movs	r3, #0
 8013656:	3038      	adds	r0, #56	; 0x38
 8013658:	f8a0 30e6 	strh.w	r3, [r0, #230]	; 0xe6
 801365c:	f005 bd17 	b.w	801908e <_ZNK8touchgfx8Drawable10invalidateEv>

08013660 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi>:
 8013660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013664:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8013668:	4604      	mov	r4, r0
 801366a:	4688      	mov	r8, r1
 801366c:	4616      	mov	r6, r2
 801366e:	2b00      	cmp	r3, #0
 8013670:	d04c      	beq.n	801370c <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0xac>
 8013672:	6803      	ldr	r3, [r0, #0]
 8013674:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8013678:	4798      	blx	r3
 801367a:	6823      	ldr	r3, [r4, #0]
 801367c:	4605      	mov	r5, r0
 801367e:	4620      	mov	r0, r4
 8013680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013684:	4798      	blx	r3
 8013686:	4285      	cmp	r5, r0
 8013688:	f8d4 e13c 	ldr.w	lr, [r4, #316]	; 0x13c
 801368c:	bfc2      	ittt	gt
 801368e:	b22b      	sxthgt	r3, r5
 8013690:	4605      	movgt	r5, r0
 8013692:	4618      	movgt	r0, r3
 8013694:	2300      	movs	r3, #0
 8013696:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 801369a:	0099      	lsls	r1, r3, #2
 801369c:	42aa      	cmp	r2, r5
 801369e:	da05      	bge.n	80136ac <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x4c>
 80136a0:	f9b4 711e 	ldrsh.w	r7, [r4, #286]	; 0x11e
 80136a4:	42bb      	cmp	r3, r7
 80136a6:	da01      	bge.n	80136ac <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x4c>
 80136a8:	3301      	adds	r3, #1
 80136aa:	e7f4      	b.n	8013696 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x36>
 80136ac:	4282      	cmp	r2, r0
 80136ae:	dc2d      	bgt.n	801370c <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0xac>
 80136b0:	f8d4 c140 	ldr.w	ip, [r4, #320]	; 0x140
 80136b4:	3301      	adds	r3, #1
 80136b6:	f85c 5001 	ldr.w	r5, [ip, r1]
 80136ba:	462a      	mov	r2, r5
 80136bc:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
 80136c0:	4288      	cmp	r0, r1
 80136c2:	dd0d      	ble.n	80136e0 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x80>
 80136c4:	f9b4 111e 	ldrsh.w	r1, [r4, #286]	; 0x11e
 80136c8:	428b      	cmp	r3, r1
 80136ca:	da09      	bge.n	80136e0 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x80>
 80136cc:	f85c 7023 	ldr.w	r7, [ip, r3, lsl #2]
 80136d0:	3301      	adds	r3, #1
 80136d2:	42bd      	cmp	r5, r7
 80136d4:	bfa8      	it	ge
 80136d6:	463d      	movge	r5, r7
 80136d8:	42ba      	cmp	r2, r7
 80136da:	bfb8      	it	lt
 80136dc:	463a      	movlt	r2, r7
 80136de:	e7ed      	b.n	80136bc <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x5c>
 80136e0:	f1b8 0f00 	cmp.w	r8, #0
 80136e4:	d007      	beq.n	80136f6 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x96>
 80136e6:	42b5      	cmp	r5, r6
 80136e8:	f1c6 0300 	rsb	r3, r6, #0
 80136ec:	bfa8      	it	ge
 80136ee:	4635      	movge	r5, r6
 80136f0:	429a      	cmp	r2, r3
 80136f2:	bfb8      	it	lt
 80136f4:	461a      	movlt	r2, r3
 80136f6:	1ba9      	subs	r1, r5, r6
 80136f8:	4432      	add	r2, r6
 80136fa:	4291      	cmp	r1, r2
 80136fc:	d006      	beq.n	801370c <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0xac>
 80136fe:	6823      	ldr	r3, [r4, #0]
 8013700:	4620      	mov	r0, r4
 8013702:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801370a:	4718      	bx	r3
 801370c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013710 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 8013710:	b530      	push	{r4, r5, lr}
 8013712:	790b      	ldrb	r3, [r1, #4]
 8013714:	b085      	sub	sp, #20
 8013716:	4604      	mov	r4, r0
 8013718:	460d      	mov	r5, r1
 801371a:	2b02      	cmp	r3, #2
 801371c:	d020      	beq.n	8013760 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801371e:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8013720:	f10d 0206 	add.w	r2, sp, #6
 8013724:	88c9      	ldrh	r1, [r1, #6]
 8013726:	1ac9      	subs	r1, r1, r3
 8013728:	6803      	ldr	r3, [r0, #0]
 801372a:	b209      	sxth	r1, r1
 801372c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8013730:	4798      	blx	r3
 8013732:	b1a8      	cbz	r0, 8013760 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8013734:	792b      	ldrb	r3, [r5, #4]
 8013736:	2b01      	cmp	r3, #1
 8013738:	d812      	bhi.n	8013760 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801373a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 801373e:	b178      	cbz	r0, 8013760 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8013740:	6803      	ldr	r3, [r0, #0]
 8013742:	68db      	ldr	r3, [r3, #12]
 8013744:	4798      	blx	r3
 8013746:	b158      	cbz	r0, 8013760 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8013748:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801374c:	aa02      	add	r2, sp, #8
 801374e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 8013752:	4621      	mov	r1, r4
 8013754:	f8ad 3008 	strh.w	r3, [sp, #8]
 8013758:	9503      	str	r5, [sp, #12]
 801375a:	6803      	ldr	r3, [r0, #0]
 801375c:	689b      	ldr	r3, [r3, #8]
 801375e:	4798      	blx	r3
 8013760:	b005      	add	sp, #20
 8013762:	bd30      	pop	{r4, r5, pc}

08013764 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 8013764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013768:	4604      	mov	r4, r0
 801376a:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 801376e:	4690      	mov	r8, r2
 8013770:	461e      	mov	r6, r3
 8013772:	9f06      	ldr	r7, [sp, #24]
 8013774:	b928      	cbnz	r0, 8013782 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 8013776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801377a:	803b      	strh	r3, [r7, #0]
 801377c:	8033      	strh	r3, [r6, #0]
 801377e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013782:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 8013786:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
 801378a:	1883      	adds	r3, r0, r2
 801378c:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8013790:	1ad2      	subs	r2, r2, r3
 8013792:	b212      	sxth	r2, r2
 8013794:	2a01      	cmp	r2, #1
 8013796:	dc07      	bgt.n	80137a8 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 8013798:	2300      	movs	r3, #0
 801379a:	8033      	strh	r3, [r6, #0]
 801379c:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 80137a0:	3b01      	subs	r3, #1
 80137a2:	803b      	strh	r3, [r7, #0]
 80137a4:	2001      	movs	r0, #1
 80137a6:	e7ea      	b.n	801377e <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 80137a8:	f8d4 5130 	ldr.w	r5, [r4, #304]	; 0x130
 80137ac:	1a08      	subs	r0, r1, r0
 80137ae:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 80137b2:	3a01      	subs	r2, #1
 80137b4:	0140      	lsls	r0, r0, #5
 80137b6:	1ae9      	subs	r1, r5, r3
 80137b8:	f005 fe55 	bl	8019466 <_ZN8touchgfx6muldivElll>
 80137bc:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 80137c0:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 80137c4:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 80137c8:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
 80137cc:	1883      	adds	r3, r0, r2
 80137ce:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 80137d2:	eba8 0000 	sub.w	r0, r8, r0
 80137d6:	1ad2      	subs	r2, r2, r3
 80137d8:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80137dc:	0140      	lsls	r0, r0, #5
 80137de:	b212      	sxth	r2, r2
 80137e0:	1a59      	subs	r1, r3, r1
 80137e2:	3a01      	subs	r2, #1
 80137e4:	f005 fe3f 	bl	8019466 <_ZN8touchgfx6muldivElll>
 80137e8:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 80137ec:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80137f0:	4285      	cmp	r5, r0
 80137f2:	bfde      	ittt	le
 80137f4:	4603      	movle	r3, r0
 80137f6:	4628      	movle	r0, r5
 80137f8:	461d      	movle	r5, r3
 80137fa:	2320      	movs	r3, #32
 80137fc:	2d00      	cmp	r5, #0
 80137fe:	bfa8      	it	ge
 8013800:	351f      	addge	r5, #31
 8013802:	fb90 f0f3 	sdiv	r0, r0, r3
 8013806:	bfb4      	ite	lt
 8013808:	fb95 f5f3 	sdivlt	r5, r5, r3
 801380c:	116d      	asrge	r5, r5, #5
 801380e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013812:	8033      	strh	r3, [r6, #0]
 8013814:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	; 0x11e
 8013818:	f9b6 3000 	ldrsh.w	r3, [r6]
 801381c:	1e51      	subs	r1, r2, #1
 801381e:	428b      	cmp	r3, r1
 8013820:	da06      	bge.n	8013830 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xcc>
 8013822:	3301      	adds	r3, #1
 8013824:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8013828:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801382c:	4288      	cmp	r0, r1
 801382e:	daf0      	bge.n	8013812 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xae>
 8013830:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8013834:	803a      	strh	r2, [r7, #0]
 8013836:	f9b7 3000 	ldrsh.w	r3, [r7]
 801383a:	2b00      	cmp	r3, #0
 801383c:	dd23      	ble.n	8013886 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 801383e:	181a      	adds	r2, r3, r0
 8013840:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8013844:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8013848:	42aa      	cmp	r2, r5
 801384a:	db10      	blt.n	801386e <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 801384c:	3b01      	subs	r3, #1
 801384e:	803b      	strh	r3, [r7, #0]
 8013850:	e7f1      	b.n	8013836 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd2>
 8013852:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8013856:	8032      	strh	r2, [r6, #0]
 8013858:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 801385c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8013860:	4293      	cmp	r3, r2
 8013862:	bfdc      	itt	le
 8013864:	f103 33ff 	addle.w	r3, r3, #4294967295
 8013868:	b21a      	sxthle	r2, r3
 801386a:	803a      	strh	r2, [r7, #0]
 801386c:	e79a      	b.n	80137a4 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>
 801386e:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8013872:	f9b6 2000 	ldrsh.w	r2, [r6]
 8013876:	3b01      	subs	r3, #1
 8013878:	429a      	cmp	r2, r3
 801387a:	dbea      	blt.n	8013852 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xee>
 801387c:	b21b      	sxth	r3, r3
 801387e:	2000      	movs	r0, #0
 8013880:	803b      	strh	r3, [r7, #0]
 8013882:	8033      	strh	r3, [r6, #0]
 8013884:	e77b      	b.n	801377e <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8013886:	2000      	movs	r0, #0
 8013888:	8038      	strh	r0, [r7, #0]
 801388a:	8030      	strh	r0, [r6, #0]
 801388c:	e777      	b.n	801377e <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
	...

08013890 <_ZN8touchgfx9ContainerC1Ev>:
 8013890:	2101      	movs	r1, #1
 8013892:	2200      	movs	r2, #0
 8013894:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8013898:	4909      	ldr	r1, [pc, #36]	; (80138c0 <_ZN8touchgfx9ContainerC1Ev+0x30>)
 801389a:	8082      	strh	r2, [r0, #4]
 801389c:	80c2      	strh	r2, [r0, #6]
 801389e:	8102      	strh	r2, [r0, #8]
 80138a0:	8142      	strh	r2, [r0, #10]
 80138a2:	8182      	strh	r2, [r0, #12]
 80138a4:	81c2      	strh	r2, [r0, #14]
 80138a6:	8202      	strh	r2, [r0, #16]
 80138a8:	8242      	strh	r2, [r0, #18]
 80138aa:	61c2      	str	r2, [r0, #28]
 80138ac:	8402      	strh	r2, [r0, #32]
 80138ae:	8442      	strh	r2, [r0, #34]	; 0x22
 80138b0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80138b4:	6001      	str	r1, [r0, #0]
 80138b6:	6282      	str	r2, [r0, #40]	; 0x28
 80138b8:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80138bc:	4770      	bx	lr
 80138be:	bf00      	nop
 80138c0:	080303d8 	.word	0x080303d8

080138c4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 80138c4:	6800      	ldr	r0, [r0, #0]
 80138c6:	2800      	cmp	r0, #0
 80138c8:	bfbd      	ittte	lt
 80138ca:	380f      	sublt	r0, #15
 80138cc:	2320      	movlt	r3, #32
 80138ce:	fb90 f0f3 	sdivlt	r0, r0, r3
 80138d2:	3010      	addge	r0, #16
 80138d4:	bfa8      	it	ge
 80138d6:	1140      	asrge	r0, r0, #5
 80138d8:	4770      	bx	lr

080138da <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 80138da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138de:	4605      	mov	r5, r0
 80138e0:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 80138e4:	4688      	mov	r8, r1
 80138e6:	4691      	mov	r9, r2
 80138e8:	469a      	mov	sl, r3
 80138ea:	b360      	cbz	r0, 8013946 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 80138ec:	2700      	movs	r7, #0
 80138ee:	f04f 3bff 	mov.w	fp, #4294967295
 80138f2:	b23e      	sxth	r6, r7
 80138f4:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	; 0x11e
 80138f8:	42b3      	cmp	r3, r6
 80138fa:	dd23      	ble.n	8013944 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 80138fc:	682b      	ldr	r3, [r5, #0]
 80138fe:	4631      	mov	r1, r6
 8013900:	4628      	mov	r0, r5
 8013902:	3701      	adds	r7, #1
 8013904:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8013908:	4798      	blx	r3
 801390a:	9001      	str	r0, [sp, #4]
 801390c:	a801      	add	r0, sp, #4
 801390e:	f7ff ffd9 	bl	80138c4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8013912:	682b      	ldr	r3, [r5, #0]
 8013914:	eba0 0008 	sub.w	r0, r0, r8
 8013918:	4631      	mov	r1, r6
 801391a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 801391e:	b204      	sxth	r4, r0
 8013920:	4628      	mov	r0, r5
 8013922:	4798      	blx	r3
 8013924:	9001      	str	r0, [sp, #4]
 8013926:	a801      	add	r0, sp, #4
 8013928:	f7ff ffcc 	bl	80138c4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801392c:	eba0 0009 	sub.w	r0, r0, r9
 8013930:	fb10 f000 	smulbb	r0, r0, r0
 8013934:	fb04 0404 	mla	r4, r4, r4, r0
 8013938:	455c      	cmp	r4, fp
 801393a:	bf3c      	itt	cc
 801393c:	f8aa 6000 	strhcc.w	r6, [sl]
 8013940:	46a3      	movcc	fp, r4
 8013942:	e7d6      	b.n	80138f2 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 8013944:	2001      	movs	r0, #1
 8013946:	b003      	add	sp, #12
 8013948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801394c <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 801394c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013950:	460e      	mov	r6, r1
 8013952:	2100      	movs	r1, #0
 8013954:	4605      	mov	r5, r0
 8013956:	4617      	mov	r7, r2
 8013958:	8011      	strh	r1, [r2, #0]
 801395a:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 801395e:	b36b      	cbz	r3, 80139bc <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x70>
 8013960:	6803      	ldr	r3, [r0, #0]
 8013962:	f10d 0808 	add.w	r8, sp, #8
 8013966:	2401      	movs	r4, #1
 8013968:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801396c:	4798      	blx	r3
 801396e:	f848 0d04 	str.w	r0, [r8, #-4]!
 8013972:	4640      	mov	r0, r8
 8013974:	f7ff ffa6 	bl	80138c4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8013978:	b200      	sxth	r0, r0
 801397a:	1b80      	subs	r0, r0, r6
 801397c:	ea80 79e0 	eor.w	r9, r0, r0, asr #31
 8013980:	eba9 79e0 	sub.w	r9, r9, r0, asr #31
 8013984:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	; 0x11e
 8013988:	42a3      	cmp	r3, r4
 801398a:	dd1b      	ble.n	80139c4 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x78>
 801398c:	682b      	ldr	r3, [r5, #0]
 801398e:	4621      	mov	r1, r4
 8013990:	4628      	mov	r0, r5
 8013992:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8013996:	4798      	blx	r3
 8013998:	9001      	str	r0, [sp, #4]
 801399a:	4640      	mov	r0, r8
 801399c:	f7ff ff92 	bl	80138c4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80139a0:	b200      	sxth	r0, r0
 80139a2:	1b80      	subs	r0, r0, r6
 80139a4:	2800      	cmp	r0, #0
 80139a6:	bfb8      	it	lt
 80139a8:	4240      	neglt	r0, r0
 80139aa:	4548      	cmp	r0, r9
 80139ac:	bf38      	it	cc
 80139ae:	803c      	strhcc	r4, [r7, #0]
 80139b0:	f104 0401 	add.w	r4, r4, #1
 80139b4:	bf38      	it	cc
 80139b6:	4681      	movcc	r9, r0
 80139b8:	b224      	sxth	r4, r4
 80139ba:	e7e3      	b.n	8013984 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x38>
 80139bc:	4618      	mov	r0, r3
 80139be:	b003      	add	sp, #12
 80139c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139c4:	2001      	movs	r0, #1
 80139c6:	e7fa      	b.n	80139be <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x72>

080139c8 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 80139c8:	f8a0 3118 	strh.w	r3, [r0, #280]	; 0x118
 80139cc:	f9bd 3000 	ldrsh.w	r3, [sp]
 80139d0:	f8a0 1114 	strh.w	r1, [r0, #276]	; 0x114
 80139d4:	f8a0 2116 	strh.w	r2, [r0, #278]	; 0x116
 80139d8:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
 80139dc:	4770      	bx	lr

080139de <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 80139de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80139e0:	4604      	mov	r4, r0
 80139e2:	3038      	adds	r0, #56	; 0x38
 80139e4:	460d      	mov	r5, r1
 80139e6:	f7fe f859 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80139ea:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 80139ee:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80139f2:	4628      	mov	r0, r5
 80139f4:	9200      	str	r2, [sp, #0]
 80139f6:	2200      	movs	r2, #0
 80139f8:	4611      	mov	r1, r2
 80139fa:	f7f1 f8d5 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80139fe:	b003      	add	sp, #12
 8013a00:	bd30      	pop	{r4, r5, pc}

08013a02 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 8013a02:	b538      	push	{r3, r4, r5, lr}
 8013a04:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8013a08:	460d      	mov	r5, r1
 8013a0a:	428b      	cmp	r3, r1
 8013a0c:	dd08      	ble.n	8013a20 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8013a0e:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8013a10:	b134      	cbz	r4, 8013a20 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8013a12:	6823      	ldr	r3, [r4, #0]
 8013a14:	4620      	mov	r0, r4
 8013a16:	4629      	mov	r1, r5
 8013a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a1a:	4798      	blx	r3
 8013a1c:	69a4      	ldr	r4, [r4, #24]
 8013a1e:	e7f7      	b.n	8013a10 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 8013a20:	bd38      	pop	{r3, r4, r5, pc}

08013a22 <_ZN8touchgfx15StaticDataGraph11deleteIndexEi>:
 8013a22:	b570      	push	{r4, r5, r6, lr}
 8013a24:	b20e      	sxth	r6, r1
 8013a26:	4605      	mov	r5, r0
 8013a28:	460c      	mov	r4, r1
 8013a2a:	4631      	mov	r1, r6
 8013a2c:	f7ff ffe9 	bl	8013a02 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8013a30:	f8b5 311e 	ldrh.w	r3, [r5, #286]	; 0x11e
 8013a34:	3b01      	subs	r3, #1
 8013a36:	f8a5 311e 	strh.w	r3, [r5, #286]	; 0x11e
 8013a3a:	00a3      	lsls	r3, r4, #2
 8013a3c:	f9b5 111e 	ldrsh.w	r1, [r5, #286]	; 0x11e
 8013a40:	1d1a      	adds	r2, r3, #4
 8013a42:	42a1      	cmp	r1, r4
 8013a44:	dd0a      	ble.n	8013a5c <_ZN8touchgfx15StaticDataGraph11deleteIndexEi+0x3a>
 8013a46:	f8d5 113c 	ldr.w	r1, [r5, #316]	; 0x13c
 8013a4a:	3401      	adds	r4, #1
 8013a4c:	5888      	ldr	r0, [r1, r2]
 8013a4e:	50c8      	str	r0, [r1, r3]
 8013a50:	f8d5 1140 	ldr.w	r1, [r5, #320]	; 0x140
 8013a54:	5888      	ldr	r0, [r1, r2]
 8013a56:	50c8      	str	r0, [r1, r3]
 8013a58:	4613      	mov	r3, r2
 8013a5a:	e7ef      	b.n	8013a3c <_ZN8touchgfx15StaticDataGraph11deleteIndexEi+0x1a>
 8013a5c:	4630      	mov	r0, r6
 8013a5e:	bd70      	pop	{r4, r5, r6, pc}

08013a60 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 8013a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013a62:	4604      	mov	r4, r0
 8013a64:	6e05      	ldr	r5, [r0, #96]	; 0x60
 8013a66:	b15d      	cbz	r5, 8013a80 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 8013a68:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 8013a6c:	4628      	mov	r0, r5
 8013a6e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8013a72:	9200      	str	r2, [sp, #0]
 8013a74:	2200      	movs	r2, #0
 8013a76:	4611      	mov	r1, r2
 8013a78:	f7f1 f896 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8013a7c:	69ad      	ldr	r5, [r5, #24]
 8013a7e:	e7f2      	b.n	8013a66 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 8013a80:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
 8013a84:	b15d      	cbz	r5, 8013a9e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 8013a86:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	; 0xc6
 8013a8a:	4628      	mov	r0, r5
 8013a8c:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	; 0xc4
 8013a90:	9200      	str	r2, [sp, #0]
 8013a92:	2200      	movs	r2, #0
 8013a94:	4611      	mov	r1, r2
 8013a96:	f7f1 f887 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8013a9a:	69ad      	ldr	r5, [r5, #24]
 8013a9c:	e7f2      	b.n	8013a84 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 8013a9e:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
 8013aa2:	b15d      	cbz	r5, 8013abc <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 8013aa4:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 8013aa8:	4628      	mov	r0, r5
 8013aaa:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 8013aae:	9200      	str	r2, [sp, #0]
 8013ab0:	2200      	movs	r2, #0
 8013ab2:	4611      	mov	r1, r2
 8013ab4:	f7f1 f878 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8013ab8:	69ad      	ldr	r5, [r5, #24]
 8013aba:	e7f2      	b.n	8013aa2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 8013abc:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8013ac0:	b15d      	cbz	r5, 8013ada <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 8013ac2:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 8013ac6:	4628      	mov	r0, r5
 8013ac8:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	; 0x98
 8013acc:	9200      	str	r2, [sp, #0]
 8013ace:	2200      	movs	r2, #0
 8013ad0:	4611      	mov	r1, r2
 8013ad2:	f7f1 f869 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8013ad6:	69ad      	ldr	r5, [r5, #24]
 8013ad8:	e7f2      	b.n	8013ac0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 8013ada:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 8013ade:	b15d      	cbz	r5, 8013af8 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 8013ae0:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
 8013ae4:	4628      	mov	r0, r5
 8013ae6:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	; 0xf0
 8013aea:	9200      	str	r2, [sp, #0]
 8013aec:	2200      	movs	r2, #0
 8013aee:	4611      	mov	r1, r2
 8013af0:	f7f1 f85a 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8013af4:	69ad      	ldr	r5, [r5, #24]
 8013af6:	e7f2      	b.n	8013ade <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 8013af8:	6823      	ldr	r3, [r4, #0]
 8013afa:	4620      	mov	r0, r4
 8013afc:	695b      	ldr	r3, [r3, #20]
 8013afe:	b003      	add	sp, #12
 8013b00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b04:	4718      	bx	r3

08013b06 <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 8013b06:	b430      	push	{r4, r5}
 8013b08:	b28a      	uxth	r2, r1
 8013b0a:	f8b0 4098 	ldrh.w	r4, [r0, #152]	; 0x98
 8013b0e:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
 8013b12:	1b15      	subs	r5, r2, r4
 8013b14:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
 8013b18:	8101      	strh	r1, [r0, #8]
 8013b1a:	f8a0 5094 	strh.w	r5, [r0, #148]	; 0x94
 8013b1e:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
 8013b22:	442c      	add	r4, r5
 8013b24:	1b12      	subs	r2, r2, r4
 8013b26:	bc30      	pop	{r4, r5}
 8013b28:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8013b2c:	f7ff bf98 	b.w	8013a60 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08013b30 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 8013b30:	b430      	push	{r4, r5}
 8013b32:	b28a      	uxth	r2, r1
 8013b34:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	; 0xf2
 8013b38:	f8a0 106e 	strh.w	r1, [r0, #110]	; 0x6e
 8013b3c:	1b15      	subs	r5, r2, r4
 8013b3e:	f8a0 109a 	strh.w	r1, [r0, #154]	; 0x9a
 8013b42:	8141      	strh	r1, [r0, #10]
 8013b44:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
 8013b48:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	; 0xc6
 8013b4c:	442c      	add	r4, r5
 8013b4e:	1b12      	subs	r2, r2, r4
 8013b50:	bc30      	pop	{r4, r5}
 8013b52:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
 8013b56:	f7ff bf83 	b.w	8013a60 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08013b5a <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 8013b5a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8013b5e:	fa1f fa83 	uxth.w	sl, r3
 8013b62:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 8013b66:	4615      	mov	r5, r2
 8013b68:	4699      	mov	r9, r3
 8013b6a:	fa1f f887 	uxth.w	r8, r7
 8013b6e:	8903      	ldrh	r3, [r0, #8]
 8013b70:	4452      	add	r2, sl
 8013b72:	4604      	mov	r4, r0
 8013b74:	8940      	ldrh	r0, [r0, #10]
 8013b76:	460e      	mov	r6, r1
 8013b78:	1a9b      	subs	r3, r3, r2
 8013b7a:	eb08 0201 	add.w	r2, r8, r1
 8013b7e:	1a80      	subs	r0, r0, r2
 8013b80:	b21b      	sxth	r3, r3
 8013b82:	460a      	mov	r2, r1
 8013b84:	4629      	mov	r1, r5
 8013b86:	b200      	sxth	r0, r0
 8013b88:	9000      	str	r0, [sp, #0]
 8013b8a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8013b8e:	f7f1 f80b 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8013b92:	2200      	movs	r2, #0
 8013b94:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8013b98:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8013b9c:	4611      	mov	r1, r2
 8013b9e:	9600      	str	r6, [sp, #0]
 8013ba0:	f7f1 f802 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8013ba4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013ba8:	2200      	movs	r2, #0
 8013baa:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8013bae:	9300      	str	r3, [sp, #0]
 8013bb0:	462b      	mov	r3, r5
 8013bb2:	4611      	mov	r1, r2
 8013bb4:	f7f0 fff8 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8013bb8:	8921      	ldrh	r1, [r4, #8]
 8013bba:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013bbe:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8013bc2:	eba1 010a 	sub.w	r1, r1, sl
 8013bc6:	2200      	movs	r2, #0
 8013bc8:	9300      	str	r3, [sp, #0]
 8013bca:	464b      	mov	r3, r9
 8013bcc:	b209      	sxth	r1, r1
 8013bce:	f7f0 ffeb 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8013bd2:	8962      	ldrh	r2, [r4, #10]
 8013bd4:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8013bd8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8013bdc:	eba2 0208 	sub.w	r2, r2, r8
 8013be0:	9700      	str	r7, [sp, #0]
 8013be2:	2100      	movs	r1, #0
 8013be4:	b212      	sxth	r2, r2
 8013be6:	f7f0 ffdf 	bl	8004ba8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8013bea:	4620      	mov	r0, r4
 8013bec:	b002      	add	sp, #8
 8013bee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bf2:	f7ff bf35 	b.w	8013a60 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>
	...

08013bf8 <_ZN8touchgfx17AbstractDataGraphC1Es>:
 8013bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bfc:	b085      	sub	sp, #20
 8013bfe:	4604      	mov	r4, r0
 8013c00:	2601      	movs	r6, #1
 8013c02:	2500      	movs	r5, #0
 8013c04:	9103      	str	r1, [sp, #12]
 8013c06:	f7ff fe43 	bl	8013890 <_ZN8touchgfx9ContainerC1Ev>
 8013c0a:	4b2c      	ldr	r3, [pc, #176]	; (8013cbc <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 8013c0c:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 8013c10:	f104 0964 	add.w	r9, r4, #100	; 0x64
 8013c14:	f104 0890 	add.w	r8, r4, #144	; 0x90
 8013c18:	6023      	str	r3, [r4, #0]
 8013c1a:	23ff      	movs	r3, #255	; 0xff
 8013c1c:	4658      	mov	r0, fp
 8013c1e:	f104 0abc 	add.w	sl, r4, #188	; 0xbc
 8013c22:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8013c26:	f104 07e8 	add.w	r7, r4, #232	; 0xe8
 8013c2a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8013c2e:	f7ff fe2f 	bl	8013890 <_ZN8touchgfx9ContainerC1Ev>
 8013c32:	4648      	mov	r0, r9
 8013c34:	f7ff fe2c 	bl	8013890 <_ZN8touchgfx9ContainerC1Ev>
 8013c38:	4640      	mov	r0, r8
 8013c3a:	f7ff fe29 	bl	8013890 <_ZN8touchgfx9ContainerC1Ev>
 8013c3e:	4650      	mov	r0, sl
 8013c40:	f7ff fe26 	bl	8013890 <_ZN8touchgfx9ContainerC1Ev>
 8013c44:	4638      	mov	r0, r7
 8013c46:	f7ff fe23 	bl	8013890 <_ZN8touchgfx9ContainerC1Ev>
 8013c4a:	9903      	ldr	r1, [sp, #12]
 8013c4c:	4620      	mov	r0, r4
 8013c4e:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 8013c52:	f8a4 111c 	strh.w	r1, [r4, #284]	; 0x11c
 8013c56:	4659      	mov	r1, fp
 8013c58:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
 8013c5c:	f8a4 511e 	strh.w	r5, [r4, #286]	; 0x11e
 8013c60:	f8a4 5120 	strh.w	r5, [r4, #288]	; 0x120
 8013c64:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 8013c68:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
 8013c6c:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8013c70:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8013c74:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8013c78:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
 8013c7c:	f7fd ff0e 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013c80:	4651      	mov	r1, sl
 8013c82:	4620      	mov	r0, r4
 8013c84:	f7fd ff0a 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013c88:	4649      	mov	r1, r9
 8013c8a:	4620      	mov	r0, r4
 8013c8c:	f7fd ff06 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013c90:	4641      	mov	r1, r8
 8013c92:	4620      	mov	r0, r4
 8013c94:	f7fd ff02 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013c98:	4639      	mov	r1, r7
 8013c9a:	4620      	mov	r0, r4
 8013c9c:	f7fd fefe 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013ca0:	4620      	mov	r0, r4
 8013ca2:	9500      	str	r5, [sp, #0]
 8013ca4:	462b      	mov	r3, r5
 8013ca6:	462a      	mov	r2, r5
 8013ca8:	4629      	mov	r1, r5
 8013caa:	f7ff ff56 	bl	8013b5a <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 8013cae:	4620      	mov	r0, r4
 8013cb0:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 8013cb4:	b005      	add	sp, #20
 8013cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cba:	bf00      	nop
 8013cbc:	08030750 	.word	0x08030750

08013cc0 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 8013cc0:	4291      	cmp	r1, r2
 8013cc2:	4613      	mov	r3, r2
 8013cc4:	d003      	beq.n	8013cce <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 8013cc6:	460a      	mov	r2, r1
 8013cc8:	4619      	mov	r1, r3
 8013cca:	f005 bbcc 	b.w	8019466 <_ZN8touchgfx6muldivElll>
 8013cce:	4770      	bx	lr

08013cd0 <_ZN8touchgfx15StaticDataGraph9setScaleXEib>:
 8013cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013cd4:	4604      	mov	r4, r0
 8013cd6:	460f      	mov	r7, r1
 8013cd8:	b1b2      	cbz	r2, 8013d08 <_ZN8touchgfx15StaticDataGraph9setScaleXEib+0x38>
 8013cda:	6803      	ldr	r3, [r0, #0]
 8013cdc:	2600      	movs	r6, #0
 8013cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013ce2:	4798      	blx	r3
 8013ce4:	4681      	mov	r9, r0
 8013ce6:	b235      	sxth	r5, r6
 8013ce8:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8013cec:	3601      	adds	r6, #1
 8013cee:	42ab      	cmp	r3, r5
 8013cf0:	dd0a      	ble.n	8013d08 <_ZN8touchgfx15StaticDataGraph9setScaleXEib+0x38>
 8013cf2:	f8d4 813c 	ldr.w	r8, [r4, #316]	; 0x13c
 8013cf6:	463a      	mov	r2, r7
 8013cf8:	4649      	mov	r1, r9
 8013cfa:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 8013cfe:	f7ff ffdf 	bl	8013cc0 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8013d02:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 8013d06:	e7ee      	b.n	8013ce6 <_ZN8touchgfx15StaticDataGraph9setScaleXEib+0x16>
 8013d08:	6327      	str	r7, [r4, #48]	; 0x30
 8013d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013d0e <_ZN8touchgfx15StaticDataGraph9setScaleYEib>:
 8013d0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d12:	4604      	mov	r4, r0
 8013d14:	460f      	mov	r7, r1
 8013d16:	b1b2      	cbz	r2, 8013d46 <_ZN8touchgfx15StaticDataGraph9setScaleYEib+0x38>
 8013d18:	6803      	ldr	r3, [r0, #0]
 8013d1a:	2600      	movs	r6, #0
 8013d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013d20:	4798      	blx	r3
 8013d22:	4681      	mov	r9, r0
 8013d24:	b235      	sxth	r5, r6
 8013d26:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8013d2a:	3601      	adds	r6, #1
 8013d2c:	42ab      	cmp	r3, r5
 8013d2e:	dd0a      	ble.n	8013d46 <_ZN8touchgfx15StaticDataGraph9setScaleYEib+0x38>
 8013d30:	f8d4 8140 	ldr.w	r8, [r4, #320]	; 0x140
 8013d34:	463a      	mov	r2, r7
 8013d36:	4649      	mov	r1, r9
 8013d38:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 8013d3c:	f7ff ffc0 	bl	8013cc0 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8013d40:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 8013d44:	e7ee      	b.n	8013d24 <_ZN8touchgfx15StaticDataGraph9setScaleYEib+0x16>
 8013d46:	6367      	str	r7, [r4, #52]	; 0x34
 8013d48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013d4c <_ZN8touchgfx9GraphData8addValueEii>:
 8013d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d50:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8013d54:	4605      	mov	r5, r0
 8013d56:	4617      	mov	r7, r2
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d03e      	beq.n	8013dda <_ZN8touchgfx9GraphData8addValueEii+0x8e>
 8013d5c:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
 8013d60:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 8013d64:	3801      	subs	r0, #1
 8013d66:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8013d6a:	4288      	cmp	r0, r1
 8013d6c:	db35      	blt.n	8013dda <_ZN8touchgfx9GraphData8addValueEii+0x8e>
 8013d6e:	2000      	movs	r0, #0
 8013d70:	b204      	sxth	r4, r0
 8013d72:	42a3      	cmp	r3, r4
 8013d74:	dd16      	ble.n	8013da4 <_ZN8touchgfx9GraphData8addValueEii+0x58>
 8013d76:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8013d7a:	3001      	adds	r0, #1
 8013d7c:	f852 6008 	ldr.w	r6, [r2, r8]
 8013d80:	428e      	cmp	r6, r1
 8013d82:	dbf5      	blt.n	8013d70 <_ZN8touchgfx9GraphData8addValueEii+0x24>
 8013d84:	d10f      	bne.n	8013da6 <_ZN8touchgfx9GraphData8addValueEii+0x5a>
 8013d86:	4621      	mov	r1, r4
 8013d88:	4628      	mov	r0, r5
 8013d8a:	f7ff fe3a 	bl	8013a02 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8013d8e:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 8013d92:	f843 7008 	str.w	r7, [r3, r8]
 8013d96:	4621      	mov	r1, r4
 8013d98:	4628      	mov	r0, r5
 8013d9a:	f7ff fe32 	bl	8013a02 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8013d9e:	4620      	mov	r0, r4
 8013da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013da4:	d01a      	beq.n	8013ddc <_ZN8touchgfx9GraphData8addValueEii+0x90>
 8013da6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8013daa:	428a      	cmp	r2, r1
 8013dac:	dc16      	bgt.n	8013ddc <_ZN8touchgfx9GraphData8addValueEii+0x90>
 8013dae:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 8013db2:	3801      	subs	r0, #1
 8013db4:	0080      	lsls	r0, r0, #2
 8013db6:	42a3      	cmp	r3, r4
 8013db8:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
 8013dbc:	dd15      	ble.n	8013dea <_ZN8touchgfx9GraphData8addValueEii+0x9e>
 8013dbe:	5832      	ldr	r2, [r6, r0]
 8013dc0:	f100 0c04 	add.w	ip, r0, #4
 8013dc4:	3b01      	subs	r3, #1
 8013dc6:	f846 200c 	str.w	r2, [r6, ip]
 8013dca:	f8d5 6140 	ldr.w	r6, [r5, #320]	; 0x140
 8013dce:	b21b      	sxth	r3, r3
 8013dd0:	5832      	ldr	r2, [r6, r0]
 8013dd2:	3804      	subs	r0, #4
 8013dd4:	f846 200c 	str.w	r2, [r6, ip]
 8013dd8:	e7ed      	b.n	8013db6 <_ZN8touchgfx9GraphData8addValueEii+0x6a>
 8013dda:	461c      	mov	r4, r3
 8013ddc:	f9b5 211c 	ldrsh.w	r2, [r5, #284]	; 0x11c
 8013de0:	429a      	cmp	r2, r3
 8013de2:	d1e4      	bne.n	8013dae <_ZN8touchgfx9GraphData8addValueEii+0x62>
 8013de4:	f04f 34ff 	mov.w	r4, #4294967295
 8013de8:	e7d9      	b.n	8013d9e <_ZN8touchgfx9GraphData8addValueEii+0x52>
 8013dea:	f8b5 311e 	ldrh.w	r3, [r5, #286]	; 0x11e
 8013dee:	3301      	adds	r3, #1
 8013df0:	f8a5 311e 	strh.w	r3, [r5, #286]	; 0x11e
 8013df4:	f846 1024 	str.w	r1, [r6, r4, lsl #2]
 8013df8:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 8013dfc:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8013e00:	e7c9      	b.n	8013d96 <_ZN8touchgfx9GraphData8addValueEii+0x4a>

08013e02 <_ZN8touchgfx16GraphElementLineD1Ev>:
 8013e02:	4770      	bx	lr

08013e04 <_ZN8touchgfx16GraphElementLineD0Ev>:
 8013e04:	b510      	push	{r4, lr}
 8013e06:	4604      	mov	r4, r0
 8013e08:	2130      	movs	r1, #48	; 0x30
 8013e0a:	f016 fdda 	bl	802a9c2 <_ZdlPvj>
 8013e0e:	4620      	mov	r0, r4
 8013e10:	bd10      	pop	{r4, pc}

08013e12 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8013e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e14:	4604      	mov	r4, r0
 8013e16:	4608      	mov	r0, r1
 8013e18:	460d      	mov	r5, r1
 8013e1a:	f7fe f806 	bl	8011e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8013e1e:	b978      	cbnz	r0, 8013e40 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8013e20:	4620      	mov	r0, r4
 8013e22:	f7fe f802 	bl	8011e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8013e26:	f9b5 6000 	ldrsh.w	r6, [r5]
 8013e2a:	b150      	cbz	r0, 8013e42 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8013e2c:	8026      	strh	r6, [r4, #0]
 8013e2e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8013e32:	8063      	strh	r3, [r4, #2]
 8013e34:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8013e38:	80a3      	strh	r3, [r4, #4]
 8013e3a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013e3e:	80e3      	strh	r3, [r4, #6]
 8013e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e42:	f9b4 1000 	ldrsh.w	r1, [r4]
 8013e46:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8013e4a:	42b1      	cmp	r1, r6
 8013e4c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8013e50:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8013e54:	460f      	mov	r7, r1
 8013e56:	88ed      	ldrh	r5, [r5, #6]
 8013e58:	bfa8      	it	ge
 8013e5a:	4637      	movge	r7, r6
 8013e5c:	4293      	cmp	r3, r2
 8013e5e:	4618      	mov	r0, r3
 8013e60:	4466      	add	r6, ip
 8013e62:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8013e66:	bfa8      	it	ge
 8013e68:	4610      	movge	r0, r2
 8013e6a:	442a      	add	r2, r5
 8013e6c:	88e5      	ldrh	r5, [r4, #6]
 8013e6e:	4461      	add	r1, ip
 8013e70:	b236      	sxth	r6, r6
 8013e72:	8027      	strh	r7, [r4, #0]
 8013e74:	442b      	add	r3, r5
 8013e76:	b209      	sxth	r1, r1
 8013e78:	b212      	sxth	r2, r2
 8013e7a:	8060      	strh	r0, [r4, #2]
 8013e7c:	b21b      	sxth	r3, r3
 8013e7e:	428e      	cmp	r6, r1
 8013e80:	bfac      	ite	ge
 8013e82:	ebc7 0106 	rsbge	r1, r7, r6
 8013e86:	ebc7 0101 	rsblt	r1, r7, r1
 8013e8a:	429a      	cmp	r2, r3
 8013e8c:	bfac      	ite	ge
 8013e8e:	ebc0 0202 	rsbge	r2, r0, r2
 8013e92:	ebc0 0203 	rsblt	r2, r0, r3
 8013e96:	80a1      	strh	r1, [r4, #4]
 8013e98:	80e2      	strh	r2, [r4, #6]
 8013e9a:	e7d1      	b.n	8013e40 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

08013e9c <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 8013e9c:	6800      	ldr	r0, [r0, #0]
 8013e9e:	2800      	cmp	r0, #0
 8013ea0:	bfb9      	ittee	lt
 8013ea2:	2320      	movlt	r3, #32
 8013ea4:	fb90 f0f3 	sdivlt	r0, r0, r3
 8013ea8:	301f      	addge	r0, #31
 8013eaa:	1140      	asrge	r0, r0, #5
 8013eac:	4770      	bx	lr

08013eae <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8013eae:	b510      	push	{r4, lr}
 8013eb0:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8013eb4:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8013eb8:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8013ebc:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8013ec0:	139b      	asrs	r3, r3, #14
 8013ec2:	13a4      	asrs	r4, r4, #14
 8013ec4:	429c      	cmp	r4, r3
 8013ec6:	bfb8      	it	lt
 8013ec8:	461c      	movlt	r4, r3
 8013eca:	2c01      	cmp	r4, #1
 8013ecc:	dd07      	ble.n	8013ede <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8013ece:	fb91 f1f4 	sdiv	r1, r1, r4
 8013ed2:	fb90 f0f4 	sdiv	r0, r0, r4
 8013ed6:	f7ff ffea 	bl	8013eae <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8013eda:	4360      	muls	r0, r4
 8013edc:	bd10      	pop	{r4, pc}
 8013ede:	4340      	muls	r0, r0
 8013ee0:	fb01 0101 	mla	r1, r1, r1, r0
 8013ee4:	2000      	movs	r0, #0
 8013ee6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8013eea:	bfb4      	ite	lt
 8013eec:	f44f 4380 	movlt.w	r3, #16384	; 0x4000
 8013ef0:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 8013ef4:	18c2      	adds	r2, r0, r3
 8013ef6:	428a      	cmp	r2, r1
 8013ef8:	bf9c      	itt	ls
 8013efa:	1898      	addls	r0, r3, r2
 8013efc:	1a89      	subls	r1, r1, r2
 8013efe:	089b      	lsrs	r3, r3, #2
 8013f00:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8013f04:	d1f6      	bne.n	8013ef4 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 8013f06:	e7e9      	b.n	8013edc <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

08013f08 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 8013f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f0a:	9906      	ldr	r1, [sp, #24]
 8013f0c:	4606      	mov	r6, r0
 8013f0e:	461c      	mov	r4, r3
 8013f10:	2020      	movs	r0, #32
 8013f12:	4291      	cmp	r1, r2
 8013f14:	bfbc      	itt	lt
 8013f16:	9206      	strlt	r2, [sp, #24]
 8013f18:	460a      	movlt	r2, r1
 8013f1a:	9907      	ldr	r1, [sp, #28]
 8013f1c:	428b      	cmp	r3, r1
 8013f1e:	bfc4      	itt	gt
 8013f20:	460c      	movgt	r4, r1
 8013f22:	9307      	strgt	r3, [sp, #28]
 8013f24:	fb92 f5f0 	sdiv	r5, r2, r0
 8013f28:	fb94 f4f0 	sdiv	r4, r4, r0
 8013f2c:	a806      	add	r0, sp, #24
 8013f2e:	f7ff ffb5 	bl	8013e9c <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8013f32:	4607      	mov	r7, r0
 8013f34:	a807      	add	r0, sp, #28
 8013f36:	f7ff ffb1 	bl	8013e9c <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8013f3a:	1b7a      	subs	r2, r7, r5
 8013f3c:	1b00      	subs	r0, r0, r4
 8013f3e:	8035      	strh	r5, [r6, #0]
 8013f40:	8074      	strh	r4, [r6, #2]
 8013f42:	80f0      	strh	r0, [r6, #6]
 8013f44:	4630      	mov	r0, r6
 8013f46:	80b2      	strh	r2, [r6, #4]
 8013f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013f4a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 8013f4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013f4c:	9c08      	ldr	r4, [sp, #32]
 8013f4e:	2602      	movs	r6, #2
 8013f50:	4605      	mov	r5, r0
 8013f52:	3401      	adds	r4, #1
 8013f54:	fb94 f4f6 	sdiv	r4, r4, r6
 8013f58:	18a6      	adds	r6, r4, r2
 8013f5a:	191f      	adds	r7, r3, r4
 8013f5c:	1b12      	subs	r2, r2, r4
 8013f5e:	1b1b      	subs	r3, r3, r4
 8013f60:	e9cd 6700 	strd	r6, r7, [sp]
 8013f64:	f7ff ffd0 	bl	8013f08 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 8013f68:	4628      	mov	r0, r5
 8013f6a:	b003      	add	sp, #12
 8013f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013f6e <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 8013f6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f72:	6943      	ldr	r3, [r0, #20]
 8013f74:	b087      	sub	sp, #28
 8013f76:	4606      	mov	r6, r0
 8013f78:	460d      	mov	r5, r1
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d072      	beq.n	8014064 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 8013f7e:	695c      	ldr	r4, [r3, #20]
 8013f80:	f890 702c 	ldrb.w	r7, [r0, #44]	; 0x2c
 8013f84:	6823      	ldr	r3, [r4, #0]
 8013f86:	4620      	mov	r0, r4
 8013f88:	017f      	lsls	r7, r7, #5
 8013f8a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8013f8e:	4798      	blx	r3
 8013f90:	6823      	ldr	r3, [r4, #0]
 8013f92:	4680      	mov	r8, r0
 8013f94:	4629      	mov	r1, r5
 8013f96:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8013f9a:	4620      	mov	r0, r4
 8013f9c:	4798      	blx	r3
 8013f9e:	9700      	str	r7, [sp, #0]
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	4642      	mov	r2, r8
 8013fa4:	4631      	mov	r1, r6
 8013fa6:	a802      	add	r0, sp, #8
 8013fa8:	f7ff ffcf 	bl	8013f4a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8013fac:	2d00      	cmp	r5, #0
 8013fae:	dd1b      	ble.n	8013fe8 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 8013fb0:	f105 38ff 	add.w	r8, r5, #4294967295
 8013fb4:	6823      	ldr	r3, [r4, #0]
 8013fb6:	4620      	mov	r0, r4
 8013fb8:	fa0f f888 	sxth.w	r8, r8
 8013fbc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8013fc0:	4641      	mov	r1, r8
 8013fc2:	4798      	blx	r3
 8013fc4:	6823      	ldr	r3, [r4, #0]
 8013fc6:	4681      	mov	r9, r0
 8013fc8:	4641      	mov	r1, r8
 8013fca:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8013fce:	4620      	mov	r0, r4
 8013fd0:	4798      	blx	r3
 8013fd2:	4631      	mov	r1, r6
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	9700      	str	r7, [sp, #0]
 8013fd8:	a804      	add	r0, sp, #16
 8013fda:	464a      	mov	r2, r9
 8013fdc:	f7ff ffb5 	bl	8013f4a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8013fe0:	a904      	add	r1, sp, #16
 8013fe2:	a802      	add	r0, sp, #8
 8013fe4:	f7ff ff15 	bl	8013e12 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013fe8:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8013fec:	3b01      	subs	r3, #1
 8013fee:	429d      	cmp	r5, r3
 8013ff0:	da19      	bge.n	8014026 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 8013ff2:	3501      	adds	r5, #1
 8013ff4:	6823      	ldr	r3, [r4, #0]
 8013ff6:	4620      	mov	r0, r4
 8013ff8:	b22d      	sxth	r5, r5
 8013ffa:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8013ffe:	4629      	mov	r1, r5
 8014000:	4798      	blx	r3
 8014002:	6823      	ldr	r3, [r4, #0]
 8014004:	4680      	mov	r8, r0
 8014006:	4629      	mov	r1, r5
 8014008:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 801400c:	4620      	mov	r0, r4
 801400e:	4798      	blx	r3
 8014010:	4631      	mov	r1, r6
 8014012:	4603      	mov	r3, r0
 8014014:	9700      	str	r7, [sp, #0]
 8014016:	a804      	add	r0, sp, #16
 8014018:	4642      	mov	r2, r8
 801401a:	f7ff ff96 	bl	8013f4a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 801401e:	a904      	add	r1, sp, #16
 8014020:	a802      	add	r0, sp, #8
 8014022:	f7ff fef6 	bl	8013e12 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014026:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 801402a:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 801402e:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 8014032:	18ca      	adds	r2, r1, r3
 8014034:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8014038:	f8ad 1012 	strh.w	r1, [sp, #18]
 801403c:	a904      	add	r1, sp, #16
 801403e:	1a9b      	subs	r3, r3, r2
 8014040:	2200      	movs	r2, #0
 8014042:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014046:	a802      	add	r0, sp, #8
 8014048:	f8ad 2010 	strh.w	r2, [sp, #16]
 801404c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014050:	f7fd fea8 	bl	8011da4 <_ZN8touchgfx4RectaNERKS0_>
 8014054:	6833      	ldr	r3, [r6, #0]
 8014056:	a902      	add	r1, sp, #8
 8014058:	4630      	mov	r0, r6
 801405a:	691b      	ldr	r3, [r3, #16]
 801405c:	4798      	blx	r3
 801405e:	b007      	add	sp, #28
 8014060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	deff      	udf	#255	; 0xff

08014068 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 8014068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801406c:	b08b      	sub	sp, #44	; 0x2c
 801406e:	461e      	mov	r6, r3
 8014070:	460f      	mov	r7, r1
 8014072:	4615      	mov	r5, r2
 8014074:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 8014078:	429e      	cmp	r6, r3
 801407a:	9304      	str	r3, [sp, #16]
 801407c:	d074      	beq.n	8014168 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 801407e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8014082:	4631      	mov	r1, r6
 8014084:	4610      	mov	r0, r2
 8014086:	4634      	mov	r4, r6
 8014088:	015b      	lsls	r3, r3, #5
 801408a:	9303      	str	r3, [sp, #12]
 801408c:	6813      	ldr	r3, [r2, #0]
 801408e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8014092:	4798      	blx	r3
 8014094:	ab0a      	add	r3, sp, #40	; 0x28
 8014096:	f843 0d10 	str.w	r0, [r3, #-16]!
 801409a:	4618      	mov	r0, r3
 801409c:	f7ff fc12 	bl	80138c4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80140a0:	682b      	ldr	r3, [r5, #0]
 80140a2:	4631      	mov	r1, r6
 80140a4:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80140a8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80140ac:	4628      	mov	r0, r5
 80140ae:	4798      	blx	r3
 80140b0:	ab0a      	add	r3, sp, #40	; 0x28
 80140b2:	f843 0d0c 	str.w	r0, [r3, #-12]!
 80140b6:	4618      	mov	r0, r3
 80140b8:	f7ff fc04 	bl	80138c4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80140bc:	4641      	mov	r1, r8
 80140be:	ea4f 1940 	mov.w	r9, r0, lsl #5
 80140c2:	4638      	mov	r0, r7
 80140c4:	464a      	mov	r2, r9
 80140c6:	f014 ffcf 	bl	8029068 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80140ca:	2301      	movs	r3, #1
 80140cc:	9300      	str	r3, [sp, #0]
 80140ce:	4628      	mov	r0, r5
 80140d0:	9b00      	ldr	r3, [sp, #0]
 80140d2:	441c      	add	r4, r3
 80140d4:	682b      	ldr	r3, [r5, #0]
 80140d6:	b224      	sxth	r4, r4
 80140d8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80140dc:	4621      	mov	r1, r4
 80140de:	4798      	blx	r3
 80140e0:	9008      	str	r0, [sp, #32]
 80140e2:	a808      	add	r0, sp, #32
 80140e4:	f7ff fbee 	bl	80138c4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80140e8:	4621      	mov	r1, r4
 80140ea:	0143      	lsls	r3, r0, #5
 80140ec:	4628      	mov	r0, r5
 80140ee:	9301      	str	r3, [sp, #4]
 80140f0:	682b      	ldr	r3, [r5, #0]
 80140f2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80140f6:	4798      	blx	r3
 80140f8:	9009      	str	r0, [sp, #36]	; 0x24
 80140fa:	a809      	add	r0, sp, #36	; 0x24
 80140fc:	f7ff fbe2 	bl	80138c4 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8014100:	0143      	lsls	r3, r0, #5
 8014102:	9302      	str	r3, [sp, #8]
 8014104:	9b01      	ldr	r3, [sp, #4]
 8014106:	eba3 0b08 	sub.w	fp, r3, r8
 801410a:	9b02      	ldr	r3, [sp, #8]
 801410c:	eba3 0a09 	sub.w	sl, r3, r9
 8014110:	4658      	mov	r0, fp
 8014112:	4651      	mov	r1, sl
 8014114:	f7ff fecb 	bl	8013eae <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8014118:	b320      	cbz	r0, 8014164 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 801411a:	4602      	mov	r2, r0
 801411c:	4651      	mov	r1, sl
 801411e:	9005      	str	r0, [sp, #20]
 8014120:	9803      	ldr	r0, [sp, #12]
 8014122:	f005 f9a0 	bl	8019466 <_ZN8touchgfx6muldivElll>
 8014126:	2302      	movs	r3, #2
 8014128:	4659      	mov	r1, fp
 801412a:	fb90 faf3 	sdiv	sl, r0, r3
 801412e:	9b05      	ldr	r3, [sp, #20]
 8014130:	9803      	ldr	r0, [sp, #12]
 8014132:	461a      	mov	r2, r3
 8014134:	f005 f997 	bl	8019466 <_ZN8touchgfx6muldivElll>
 8014138:	2302      	movs	r3, #2
 801413a:	eba8 010a 	sub.w	r1, r8, sl
 801413e:	fb90 fbf3 	sdiv	fp, r0, r3
 8014142:	683b      	ldr	r3, [r7, #0]
 8014144:	eb0b 0209 	add.w	r2, fp, r9
 8014148:	4638      	mov	r0, r7
 801414a:	689b      	ldr	r3, [r3, #8]
 801414c:	4798      	blx	r3
 801414e:	683b      	ldr	r3, [r7, #0]
 8014150:	9a02      	ldr	r2, [sp, #8]
 8014152:	4638      	mov	r0, r7
 8014154:	9901      	ldr	r1, [sp, #4]
 8014156:	689b      	ldr	r3, [r3, #8]
 8014158:	445a      	add	r2, fp
 801415a:	eba1 010a 	sub.w	r1, r1, sl
 801415e:	4798      	blx	r3
 8014160:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 8014164:	42a6      	cmp	r6, r4
 8014166:	db02      	blt.n	801416e <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 8014168:	b00b      	add	sp, #44	; 0x2c
 801416a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801416e:	9b00      	ldr	r3, [sp, #0]
 8014170:	9a04      	ldr	r2, [sp, #16]
 8014172:	42a2      	cmp	r2, r4
 8014174:	bf08      	it	eq
 8014176:	f04f 33ff 	moveq.w	r3, #4294967295
 801417a:	e7a7      	b.n	80140cc <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>

0801417c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 801417c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014180:	6943      	ldr	r3, [r0, #20]
 8014182:	b0a2      	sub	sp, #136	; 0x88
 8014184:	4606      	mov	r6, r0
 8014186:	460f      	mov	r7, r1
 8014188:	2b00      	cmp	r3, #0
 801418a:	d06c      	beq.n	8014266 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xea>
 801418c:	695c      	ldr	r4, [r3, #20]
 801418e:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8014192:	2b01      	cmp	r3, #1
 8014194:	dc04      	bgt.n	80141a0 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 8014196:	2401      	movs	r4, #1
 8014198:	4620      	mov	r0, r4
 801419a:	b022      	add	sp, #136	; 0x88
 801419c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141a0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80141a4:	ad22      	add	r5, sp, #136	; 0x88
 80141a6:	011b      	lsls	r3, r3, #4
 80141a8:	f845 3d70 	str.w	r3, [r5, #-112]!
 80141ac:	4628      	mov	r0, r5
 80141ae:	f7ff fe75 	bl	8013e9c <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80141b2:	8839      	ldrh	r1, [r7, #0]
 80141b4:	88ba      	ldrh	r2, [r7, #4]
 80141b6:	b280      	uxth	r0, r0
 80141b8:	6823      	ldr	r3, [r4, #0]
 80141ba:	440a      	add	r2, r1
 80141bc:	1a09      	subs	r1, r1, r0
 80141be:	4402      	add	r2, r0
 80141c0:	f10d 000e 	add.w	r0, sp, #14
 80141c4:	b209      	sxth	r1, r1
 80141c6:	9000      	str	r0, [sp, #0]
 80141c8:	b212      	sxth	r2, r2
 80141ca:	f8d3 8124 	ldr.w	r8, [r3, #292]	; 0x124
 80141ce:	4620      	mov	r0, r4
 80141d0:	ab03      	add	r3, sp, #12
 80141d2:	47c0      	blx	r8
 80141d4:	2800      	cmp	r0, #0
 80141d6:	d0de      	beq.n	8014196 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 80141d8:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 80141dc:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 80141e0:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 80141e4:	18ca      	adds	r2, r1, r3
 80141e6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80141ea:	f8ad 1012 	strh.w	r1, [sp, #18]
 80141ee:	4639      	mov	r1, r7
 80141f0:	1a9b      	subs	r3, r3, r2
 80141f2:	2200      	movs	r2, #0
 80141f4:	f8ad 0014 	strh.w	r0, [sp, #20]
 80141f8:	a804      	add	r0, sp, #16
 80141fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80141fe:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014202:	f7fd fdcf 	bl	8011da4 <_ZN8touchgfx4RectaNERKS0_>
 8014206:	aa04      	add	r2, sp, #16
 8014208:	4631      	mov	r1, r6
 801420a:	4628      	mov	r0, r5
 801420c:	f014 fdac 	bl	8028d68 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8014210:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	; 0x120
 8014214:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8014218:	2f00      	cmp	r7, #0
 801421a:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 801421e:	dd03      	ble.n	8014228 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 8014220:	42bb      	cmp	r3, r7
 8014222:	da01      	bge.n	8014228 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 8014224:	42ba      	cmp	r2, r7
 8014226:	da11      	bge.n	801424c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xd0>
 8014228:	9200      	str	r2, [sp, #0]
 801422a:	4622      	mov	r2, r4
 801422c:	4629      	mov	r1, r5
 801422e:	4630      	mov	r0, r6
 8014230:	f7ff ff1a 	bl	8014068 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8014234:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014238:	4628      	mov	r0, r5
 801423a:	f014 fe51 	bl	8028ee0 <_ZN8touchgfx6Canvas6renderEh>
 801423e:	4b0b      	ldr	r3, [pc, #44]	; (801426c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xf0>)
 8014240:	4604      	mov	r4, r0
 8014242:	a80e      	add	r0, sp, #56	; 0x38
 8014244:	9306      	str	r3, [sp, #24]
 8014246:	f001 faf5 	bl	8015834 <_ZN8touchgfx7OutlineD1Ev>
 801424a:	e7a5      	b.n	8014198 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 801424c:	1e7a      	subs	r2, r7, #1
 801424e:	4629      	mov	r1, r5
 8014250:	4630      	mov	r0, r6
 8014252:	b212      	sxth	r2, r2
 8014254:	9200      	str	r2, [sp, #0]
 8014256:	4622      	mov	r2, r4
 8014258:	f7ff ff06 	bl	8014068 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 801425c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014260:	9300      	str	r3, [sp, #0]
 8014262:	463b      	mov	r3, r7
 8014264:	e7e1      	b.n	801422a <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xae>
 8014266:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 801426a:	deff      	udf	#255	; 0xff
 801426c:	08031198 	.word	0x08031198

08014270 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8014270:	790b      	ldrb	r3, [r1, #4]
 8014272:	2b00      	cmp	r3, #0
 8014274:	bf0c      	ite	eq
 8014276:	2301      	moveq	r3, #1
 8014278:	2300      	movne	r3, #0
 801427a:	b570      	push	{r4, r5, r6, lr}
 801427c:	4604      	mov	r4, r0
 801427e:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8014282:	460e      	mov	r6, r1
 8014284:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8014288:	d109      	bne.n	801429e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801428a:	b14d      	cbz	r5, 80142a0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801428c:	7933      	ldrb	r3, [r6, #4]
 801428e:	2b01      	cmp	r3, #1
 8014290:	d10c      	bne.n	80142ac <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8014292:	6823      	ldr	r3, [r4, #0]
 8014294:	4620      	mov	r0, r4
 8014296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014298:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801429c:	4718      	bx	r3
 801429e:	b12d      	cbz	r5, 80142ac <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80142a0:	6823      	ldr	r3, [r4, #0]
 80142a2:	4620      	mov	r0, r4
 80142a4:	695b      	ldr	r3, [r3, #20]
 80142a6:	4798      	blx	r3
 80142a8:	2d00      	cmp	r5, #0
 80142aa:	d1ef      	bne.n	801428c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80142ac:	bd70      	pop	{r4, r5, r6, pc}

080142ae <_ZN8touchgfx13AnimatedImage12setBitmapEndERKNS_6BitmapE>:
 80142ae:	880b      	ldrh	r3, [r1, #0]
 80142b0:	8643      	strh	r3, [r0, #50]	; 0x32
 80142b2:	4770      	bx	lr

080142b4 <_ZN8touchgfx13AnimatedImageD1Ev>:
 80142b4:	4770      	bx	lr

080142b6 <_ZN8touchgfx13AnimatedImage9setBitmapERKNS_6BitmapE>:
 80142b6:	880b      	ldrh	r3, [r1, #0]
 80142b8:	8603      	strh	r3, [r0, #48]	; 0x30
 80142ba:	f001 b956 	b.w	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

080142be <_ZN8touchgfx13AnimatedImage13stopAnimationEv>:
 80142be:	b513      	push	{r0, r1, r4, lr}
 80142c0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80142c4:	4604      	mov	r4, r0
 80142c6:	b143      	cbz	r3, 80142da <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x1c>
 80142c8:	f003 fdf6 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 80142cc:	4621      	mov	r1, r4
 80142ce:	3004      	adds	r0, #4
 80142d0:	f003 fe3f 	bl	8017f52 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 80142d4:	2300      	movs	r3, #0
 80142d6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80142da:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80142de:	b163      	cbz	r3, 80142fa <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x3c>
 80142e0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80142e2:	a901      	add	r1, sp, #4
 80142e4:	4620      	mov	r0, r4
 80142e6:	f8ad 3004 	strh.w	r3, [sp, #4]
 80142ea:	f001 f93e 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80142ee:	6823      	ldr	r3, [r4, #0]
 80142f0:	4620      	mov	r0, r4
 80142f2:	695b      	ldr	r3, [r3, #20]
 80142f4:	4798      	blx	r3
 80142f6:	b002      	add	sp, #8
 80142f8:	bd10      	pop	{r4, pc}
 80142fa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80142fc:	e7f1      	b.n	80142e2 <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x24>

080142fe <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>:
 80142fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014300:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8014304:	8e05      	ldrh	r5, [r0, #48]	; 0x30
 8014306:	4604      	mov	r4, r0
 8014308:	42bd      	cmp	r5, r7
 801430a:	d01a      	beq.n	8014342 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x44>
 801430c:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 801430e:	42be      	cmp	r6, r7
 8014310:	d017      	beq.n	8014342 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x44>
 8014312:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 8014316:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
 801431a:	b1a1      	cbz	r1, 8014346 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x48>
 801431c:	b142      	cbz	r2, 8014330 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
 801431e:	a902      	add	r1, sp, #8
 8014320:	f821 6d04 	strh.w	r6, [r1, #-4]!
 8014324:	f001 f921 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014328:	6823      	ldr	r3, [r4, #0]
 801432a:	4620      	mov	r0, r4
 801432c:	695b      	ldr	r3, [r3, #20]
 801432e:	4798      	blx	r3
 8014330:	f003 fdc2 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 8014334:	4621      	mov	r1, r4
 8014336:	3004      	adds	r0, #4
 8014338:	f003 feb4 	bl	80180a4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 801433c:	2301      	movs	r3, #1
 801433e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8014342:	b003      	add	sp, #12
 8014344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014346:	2a00      	cmp	r2, #0
 8014348:	d0f2      	beq.n	8014330 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
 801434a:	a902      	add	r1, sp, #8
 801434c:	f821 5d04 	strh.w	r5, [r1, #-4]!
 8014350:	e7e8      	b.n	8014324 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x26>

08014352 <_ZN8touchgfx13AnimatedImageD0Ev>:
 8014352:	b510      	push	{r4, lr}
 8014354:	4604      	mov	r4, r0
 8014356:	213c      	movs	r1, #60	; 0x3c
 8014358:	f016 fb33 	bl	802a9c2 <_ZdlPvj>
 801435c:	4620      	mov	r0, r4
 801435e:	bd10      	pop	{r4, pc}

08014360 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv>:
 8014360:	b510      	push	{r4, lr}
 8014362:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8014366:	4604      	mov	r4, r0
 8014368:	b14b      	cbz	r3, 801437e <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x1e>
 801436a:	f003 fda5 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 801436e:	4621      	mov	r1, r4
 8014370:	3004      	adds	r0, #4
 8014372:	f003 fdee 	bl	8017f52 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8014376:	2300      	movs	r3, #0
 8014378:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 801437c:	bd10      	pop	{r4, pc}
 801437e:	f003 fd9b 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 8014382:	4621      	mov	r1, r4
 8014384:	3004      	adds	r0, #4
 8014386:	f003 fe8d 	bl	80180a4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 801438a:	2301      	movs	r3, #1
 801438c:	e7f4      	b.n	8014378 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x18>

0801438e <_ZN8touchgfx13AnimatedImage15handleTickEventEv>:
 801438e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014390:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8014394:	4604      	mov	r4, r0
 8014396:	2b00      	cmp	r3, #0
 8014398:	d042      	beq.n	8014420 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
 801439a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801439e:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 80143a2:	3301      	adds	r3, #1
 80143a4:	b2db      	uxtb	r3, r3
 80143a6:	429a      	cmp	r2, r3
 80143a8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
 80143ac:	d138      	bne.n	8014420 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
 80143ae:	2300      	movs	r3, #0
 80143b0:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 80143b2:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 80143b6:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
 80143ba:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80143bc:	4299      	cmp	r1, r3
 80143be:	d100      	bne.n	80143c2 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x34>
 80143c0:	b122      	cbz	r2, 80143cc <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x3e>
 80143c2:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80143c4:	4299      	cmp	r1, r3
 80143c6:	d12f      	bne.n	8014428 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9a>
 80143c8:	2a00      	cmp	r2, #0
 80143ca:	d034      	beq.n	8014436 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa8>
 80143cc:	f894 5037 	ldrb.w	r5, [r4, #55]	; 0x37
 80143d0:	b93d      	cbnz	r5, 80143e2 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x54>
 80143d2:	f003 fd71 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 80143d6:	4621      	mov	r1, r4
 80143d8:	3004      	adds	r0, #4
 80143da:	f003 fdba 	bl	8017f52 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 80143de:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
 80143e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80143e4:	b140      	cbz	r0, 80143f8 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x6a>
 80143e6:	6803      	ldr	r3, [r0, #0]
 80143e8:	68db      	ldr	r3, [r3, #12]
 80143ea:	4798      	blx	r3
 80143ec:	b120      	cbz	r0, 80143f8 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x6a>
 80143ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80143f0:	4621      	mov	r1, r4
 80143f2:	6803      	ldr	r3, [r0, #0]
 80143f4:	689b      	ldr	r3, [r3, #8]
 80143f6:	4798      	blx	r3
 80143f8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80143fc:	b183      	cbz	r3, 8014420 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
 80143fe:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8014402:	b16b      	cbz	r3, 8014420 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
 8014404:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8014408:	b163      	cbz	r3, 8014424 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x96>
 801440a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801440c:	a901      	add	r1, sp, #4
 801440e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014412:	4620      	mov	r0, r4
 8014414:	f001 f8a9 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014418:	6823      	ldr	r3, [r4, #0]
 801441a:	4620      	mov	r0, r4
 801441c:	695b      	ldr	r3, [r3, #20]
 801441e:	4798      	blx	r3
 8014420:	b003      	add	sp, #12
 8014422:	bd30      	pop	{r4, r5, pc}
 8014424:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8014426:	e7f1      	b.n	801440c <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x7e>
 8014428:	b12a      	cbz	r2, 8014436 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa8>
 801442a:	3b01      	subs	r3, #1
 801442c:	b29b      	uxth	r3, r3
 801442e:	a902      	add	r1, sp, #8
 8014430:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8014434:	e7ed      	b.n	8014412 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x84>
 8014436:	3301      	adds	r3, #1
 8014438:	e7f8      	b.n	801442c <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9e>

0801443a <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>:
 801443a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801443c:	ac02      	add	r4, sp, #8
 801443e:	6803      	ldr	r3, [r0, #0]
 8014440:	4605      	mov	r5, r0
 8014442:	4616      	mov	r6, r2
 8014444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014446:	f824 1d04 	strh.w	r1, [r4, #-4]!
 801444a:	4621      	mov	r1, r4
 801444c:	4798      	blx	r3
 801444e:	682b      	ldr	r3, [r5, #0]
 8014450:	4621      	mov	r1, r4
 8014452:	4628      	mov	r0, r5
 8014454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014456:	f8ad 6004 	strh.w	r6, [sp, #4]
 801445a:	4798      	blx	r3
 801445c:	b002      	add	sp, #8
 801445e:	bd70      	pop	{r4, r5, r6, pc}

08014460 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>:
 8014460:	2300      	movs	r3, #0
 8014462:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
 8014466:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
 801446a:	4770      	bx	lr

0801446c <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 801446c:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8014470:	4770      	bx	lr

08014472 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 8014472:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8014476:	4770      	bx	lr

08014478 <_ZN8touchgfx13ScalableImageD1Ev>:
 8014478:	4770      	bx	lr

0801447a <_ZN8touchgfx13ScalableImageD0Ev>:
 801447a:	b510      	push	{r4, lr}
 801447c:	4604      	mov	r4, r0
 801447e:	212c      	movs	r1, #44	; 0x2c
 8014480:	f016 fa9f 	bl	802a9c2 <_ZdlPvj>
 8014484:	4620      	mov	r0, r4
 8014486:	bd10      	pop	{r4, pc}

08014488 <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 8014488:	b5f0      	push	{r4, r5, r6, r7, lr}
 801448a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801448e:	b085      	sub	sp, #20
 8014490:	4604      	mov	r4, r0
 8014492:	460d      	mov	r5, r1
 8014494:	2bff      	cmp	r3, #255	; 0xff
 8014496:	d128      	bne.n	80144ea <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 8014498:	f101 0626 	add.w	r6, r1, #38	; 0x26
 801449c:	4668      	mov	r0, sp
 801449e:	4631      	mov	r1, r6
 80144a0:	f006 ff94 	bl	801b3cc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80144a4:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 80144a8:	4630      	mov	r0, r6
 80144aa:	f006 ff27 	bl	801b2fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80144ae:	4287      	cmp	r7, r0
 80144b0:	d11b      	bne.n	80144ea <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 80144b2:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80144b6:	4630      	mov	r0, r6
 80144b8:	f006 ff54 	bl	801b364 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80144bc:	4287      	cmp	r7, r0
 80144be:	d114      	bne.n	80144ea <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 80144c0:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80144c4:	2100      	movs	r1, #0
 80144c6:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80144ca:	f8ad 300e 	strh.w	r3, [sp, #14]
 80144ce:	466b      	mov	r3, sp
 80144d0:	9102      	str	r1, [sp, #8]
 80144d2:	f8ad 200c 	strh.w	r2, [sp, #12]
 80144d6:	cb03      	ldmia	r3!, {r0, r1}
 80144d8:	6020      	str	r0, [r4, #0]
 80144da:	4620      	mov	r0, r4
 80144dc:	6061      	str	r1, [r4, #4]
 80144de:	4619      	mov	r1, r3
 80144e0:	f7fd fc60 	bl	8011da4 <_ZN8touchgfx4RectaNERKS0_>
 80144e4:	4620      	mov	r0, r4
 80144e6:	b005      	add	sp, #20
 80144e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144ea:	2300      	movs	r3, #0
 80144ec:	8023      	strh	r3, [r4, #0]
 80144ee:	8063      	strh	r3, [r4, #2]
 80144f0:	80a3      	strh	r3, [r4, #4]
 80144f2:	80e3      	strh	r3, [r4, #6]
 80144f4:	e7f6      	b.n	80144e4 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x5c>
	...

080144f8 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 80144f8:	b538      	push	{r3, r4, r5, lr}
 80144fa:	2300      	movs	r3, #0
 80144fc:	2501      	movs	r5, #1
 80144fe:	4604      	mov	r4, r0
 8014500:	8083      	strh	r3, [r0, #4]
 8014502:	80c3      	strh	r3, [r0, #6]
 8014504:	8103      	strh	r3, [r0, #8]
 8014506:	8143      	strh	r3, [r0, #10]
 8014508:	8183      	strh	r3, [r0, #12]
 801450a:	81c3      	strh	r3, [r0, #14]
 801450c:	8203      	strh	r3, [r0, #16]
 801450e:	8243      	strh	r3, [r0, #18]
 8014510:	61c3      	str	r3, [r0, #28]
 8014512:	8403      	strh	r3, [r0, #32]
 8014514:	8443      	strh	r3, [r0, #34]	; 0x22
 8014516:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 801451a:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 801451e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8014522:	4b07      	ldr	r3, [pc, #28]	; (8014540 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 8014524:	6003      	str	r3, [r0, #0]
 8014526:	880b      	ldrh	r3, [r1, #0]
 8014528:	84c3      	strh	r3, [r0, #38]	; 0x26
 801452a:	23ff      	movs	r3, #255	; 0xff
 801452c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8014530:	f001 f81b 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014534:	4b03      	ldr	r3, [pc, #12]	; (8014544 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 8014536:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 801453a:	4620      	mov	r0, r4
 801453c:	6023      	str	r3, [r4, #0]
 801453e:	bd38      	pop	{r3, r4, r5, pc}
 8014540:	08030c40 	.word	0x08030c40
 8014544:	08030978 	.word	0x08030978

08014548 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 8014548:	4603      	mov	r3, r0
 801454a:	3026      	adds	r0, #38	; 0x26
 801454c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014550:	b90b      	cbnz	r3, 8014556 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 8014552:	f004 bedb 	b.w	801930c <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 8014556:	f004 bee9 	b.w	801932c <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

0801455c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 801455c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014560:	4604      	mov	r4, r0
 8014562:	b0b3      	sub	sp, #204	; 0xcc
 8014564:	469b      	mov	fp, r3
 8014566:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 801456a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801456e:	2500      	movs	r5, #0
 8014570:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 8014574:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8014578:	ab11      	add	r3, sp, #68	; 0x44
 801457a:	9206      	str	r2, [sp, #24]
 801457c:	4618      	mov	r0, r3
 801457e:	9511      	str	r5, [sp, #68]	; 0x44
 8014580:	9307      	str	r3, [sp, #28]
 8014582:	ad13      	add	r5, sp, #76	; 0x4c
 8014584:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	; 0xf0
 8014588:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
 801458c:	f7fd fc0a 	bl	8011da4 <_ZN8touchgfx4RectaNERKS0_>
 8014590:	9b07      	ldr	r3, [sp, #28]
 8014592:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014596:	e885 0003 	stmia.w	r5, {r0, r1}
 801459a:	6821      	ldr	r1, [r4, #0]
 801459c:	4620      	mov	r0, r4
 801459e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80145a0:	4629      	mov	r1, r5
 80145a2:	47b0      	blx	r6
 80145a4:	4621      	mov	r1, r4
 80145a6:	a815      	add	r0, sp, #84	; 0x54
 80145a8:	1d26      	adds	r6, r4, #4
 80145aa:	f004 fe0b 	bl	80191c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80145ae:	a815      	add	r0, sp, #84	; 0x54
 80145b0:	f003 fb14 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80145b4:	9b07      	ldr	r3, [sp, #28]
 80145b6:	4631      	mov	r1, r6
 80145b8:	4618      	mov	r0, r3
 80145ba:	f003 fb53 	bl	8017c64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80145be:	4628      	mov	r0, r5
 80145c0:	f104 0526 	add.w	r5, r4, #38	; 0x26
 80145c4:	f003 fb0a 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80145c8:	4628      	mov	r0, r5
 80145ca:	f006 ff83 	bl	801b4d4 <_ZNK8touchgfx6Bitmap7getDataEv>
 80145ce:	9007      	str	r0, [sp, #28]
 80145d0:	2800      	cmp	r0, #0
 80145d2:	f000 80ce 	beq.w	8014772 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x216>
 80145d6:	f8db 200c 	ldr.w	r2, [fp, #12]
 80145da:	a809      	add	r0, sp, #36	; 0x24
 80145dc:	f8db 1000 	ldr.w	r1, [fp]
 80145e0:	920c      	str	r2, [sp, #48]	; 0x30
 80145e2:	f8da 2000 	ldr.w	r2, [sl]
 80145e6:	9109      	str	r1, [sp, #36]	; 0x24
 80145e8:	920d      	str	r2, [sp, #52]	; 0x34
 80145ea:	f8da 2004 	ldr.w	r2, [sl, #4]
 80145ee:	f8db 1004 	ldr.w	r1, [fp, #4]
 80145f2:	920e      	str	r2, [sp, #56]	; 0x38
 80145f4:	f8da 2008 	ldr.w	r2, [sl, #8]
 80145f8:	910a      	str	r1, [sp, #40]	; 0x28
 80145fa:	920f      	str	r2, [sp, #60]	; 0x3c
 80145fc:	f8db 1008 	ldr.w	r1, [fp, #8]
 8014600:	f8da 200c 	ldr.w	r2, [sl, #12]
 8014604:	910b      	str	r1, [sp, #44]	; 0x2c
 8014606:	a90d      	add	r1, sp, #52	; 0x34
 8014608:	9210      	str	r2, [sp, #64]	; 0x40
 801460a:	4632      	mov	r2, r6
 801460c:	f003 fb0e 	bl	8017c2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8014610:	4632      	mov	r2, r6
 8014612:	a90e      	add	r1, sp, #56	; 0x38
 8014614:	a80a      	add	r0, sp, #40	; 0x28
 8014616:	f003 fb09 	bl	8017c2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801461a:	4632      	mov	r2, r6
 801461c:	a90f      	add	r1, sp, #60	; 0x3c
 801461e:	a80b      	add	r0, sp, #44	; 0x2c
 8014620:	f003 fb04 	bl	8017c2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8014624:	4632      	mov	r2, r6
 8014626:	a910      	add	r1, sp, #64	; 0x40
 8014628:	a80c      	add	r0, sp, #48	; 0x30
 801462a:	f003 faff 	bl	8017c2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801462e:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8014632:	ed97 3a00 	vldr	s6, [r7]
 8014636:	eef0 6a67 	vmov.f32	s13, s15
 801463a:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 801463e:	edd7 4a01 	vldr	s9, [r7, #4]
 8014642:	eeb0 7a67 	vmov.f32	s14, s15
 8014646:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801464a:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 801464e:	ed99 2a00 	vldr	s4, [r9]
 8014652:	eeb0 6a67 	vmov.f32	s12, s15
 8014656:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 801465a:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 801465e:	edd8 2a00 	vldr	s5, [r8]
 8014662:	edd9 3a01 	vldr	s7, [r9, #4]
 8014666:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801466a:	ed98 4a01 	vldr	s8, [r8, #4]
 801466e:	ed99 5a02 	vldr	s10, [r9, #8]
 8014672:	edd8 5a02 	vldr	s11, [r8, #8]
 8014676:	ee16 6a10 	vmov	r6, s12
 801467a:	eeb0 6a67 	vmov.f32	s12, s15
 801467e:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8014682:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8014686:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801468a:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 801468e:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8014692:	ed8d 2a20 	vstr	s4, [sp, #128]	; 0x80
 8014696:	ee16 0a10 	vmov	r0, s12
 801469a:	eeb0 6a67 	vmov.f32	s12, s15
 801469e:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 80146a2:	edcd 2a21 	vstr	s5, [sp, #132]	; 0x84
 80146a6:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80146aa:	ed8d 3a22 	vstr	s6, [sp, #136]	; 0x88
 80146ae:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 80146b2:	edcd 3a25 	vstr	s7, [sp, #148]	; 0x94
 80146b6:	ee16 1a10 	vmov	r1, s12
 80146ba:	eeb0 6a67 	vmov.f32	s12, s15
 80146be:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 80146c2:	ed8d 4a26 	vstr	s8, [sp, #152]	; 0x98
 80146c6:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80146ca:	edcd 4a27 	vstr	s9, [sp, #156]	; 0x9c
 80146ce:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80146d2:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 80146d6:	68ff      	ldr	r7, [r7, #12]
 80146d8:	ee16 2a10 	vmov	r2, s12
 80146dc:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 80146e0:	9624      	str	r6, [sp, #144]	; 0x90
 80146e2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80146e6:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 80146ea:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 80146ee:	4628      	mov	r0, r5
 80146f0:	ed8d 5a2a 	vstr	s10, [sp, #168]	; 0xa8
 80146f4:	9b06      	ldr	r3, [sp, #24]
 80146f6:	922d      	str	r2, [sp, #180]	; 0xb4
 80146f8:	4a1f      	ldr	r2, [pc, #124]	; (8014778 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x21c>)
 80146fa:	9317      	str	r3, [sp, #92]	; 0x5c
 80146fc:	8812      	ldrh	r2, [r2, #0]
 80146fe:	9b07      	ldr	r3, [sp, #28]
 8014700:	9218      	str	r2, [sp, #96]	; 0x60
 8014702:	9319      	str	r3, [sp, #100]	; 0x64
 8014704:	edcd 5a2b 	vstr	s11, [sp, #172]	; 0xac
 8014708:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 801470c:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 8014710:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 8014714:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 8014718:	9731      	str	r7, [sp, #196]	; 0xc4
 801471a:	f006 ff0b 	bl	801b534 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801471e:	901a      	str	r0, [sp, #104]	; 0x68
 8014720:	4628      	mov	r0, r5
 8014722:	f006 fdeb 	bl	801b2fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014726:	901b      	str	r0, [sp, #108]	; 0x6c
 8014728:	4628      	mov	r0, r5
 801472a:	f006 fe1b 	bl	801b364 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801472e:	901c      	str	r0, [sp, #112]	; 0x70
 8014730:	4628      	mov	r0, r5
 8014732:	f006 fde3 	bl	801b2fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014736:	4b11      	ldr	r3, [pc, #68]	; (801477c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x220>)
 8014738:	901d      	str	r0, [sp, #116]	; 0x74
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8014740:	b10a      	cbz	r2, 8014746 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ea>
 8014742:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8014744:	b905      	cbnz	r5, 8014748 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ec>
 8014746:	689d      	ldr	r5, [r3, #8]
 8014748:	682b      	ldr	r3, [r5, #0]
 801474a:	4620      	mov	r0, r4
 801474c:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 801474e:	f7ff fefb 	bl	8014548 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 8014752:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014756:	aa1e      	add	r2, sp, #120	; 0x78
 8014758:	a917      	add	r1, sp, #92	; 0x5c
 801475a:	9304      	str	r3, [sp, #16]
 801475c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8014760:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014764:	ab13      	add	r3, sp, #76	; 0x4c
 8014766:	4628      	mov	r0, r5
 8014768:	9301      	str	r3, [sp, #4]
 801476a:	ab15      	add	r3, sp, #84	; 0x54
 801476c:	9300      	str	r3, [sp, #0]
 801476e:	ab19      	add	r3, sp, #100	; 0x64
 8014770:	47b0      	blx	r6
 8014772:	b033      	add	sp, #204	; 0xcc
 8014774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014778:	20027ca2 	.word	0x20027ca2
 801477c:	20027ca8 	.word	0x20027ca8

08014780 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 8014780:	b570      	push	{r4, r5, r6, lr}
 8014782:	ed2d 8b04 	vpush	{d8-d9}
 8014786:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801478a:	b098      	sub	sp, #96	; 0x60
 801478c:	4604      	mov	r4, r0
 801478e:	460e      	mov	r6, r1
 8014790:	2b00      	cmp	r3, #0
 8014792:	d065      	beq.n	8014860 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 8014794:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8014798:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801479c:	ed9f 8a37 	vldr	s16, [pc, #220]	; 801487c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 80147a0:	ee09 3a10 	vmov	s18, r3
 80147a4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80147a8:	4628      	mov	r0, r5
 80147aa:	ee08 3a90 	vmov	s17, r3
 80147ae:	4b34      	ldr	r3, [pc, #208]	; (8014880 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 80147b0:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 80147b4:	930c      	str	r3, [sp, #48]	; 0x30
 80147b6:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 80147ba:	930d      	str	r3, [sp, #52]	; 0x34
 80147bc:	930e      	str	r3, [sp, #56]	; 0x38
 80147be:	ee39 9a08 	vadd.f32	s18, s18, s16
 80147c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80147c4:	f006 fd9a 	bl	801b2fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80147c8:	ee07 0a90 	vmov	s15, r0
 80147cc:	4628      	mov	r0, r5
 80147ce:	ee78 8a88 	vadd.f32	s17, s17, s16
 80147d2:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 80147d6:	f006 fdc5 	bl	801b364 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80147da:	4b2a      	ldr	r3, [pc, #168]	; (8014884 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 80147dc:	ee07 0a90 	vmov	s15, r0
 80147e0:	781b      	ldrb	r3, [r3, #0]
 80147e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80147e6:	eef0 7a48 	vmov.f32	s15, s16
 80147ea:	2b01      	cmp	r3, #1
 80147ec:	d13c      	bne.n	8014868 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 80147ee:	eef0 6a69 	vmov.f32	s13, s19
 80147f2:	ee19 3a90 	vmov	r3, s19
 80147f6:	eeb0 6a47 	vmov.f32	s12, s14
 80147fa:	eef0 5a47 	vmov.f32	s11, s14
 80147fe:	eef0 9a48 	vmov.f32	s19, s16
 8014802:	eeb0 7a48 	vmov.f32	s14, s16
 8014806:	9314      	str	r3, [sp, #80]	; 0x50
 8014808:	ab14      	add	r3, sp, #80	; 0x50
 801480a:	2200      	movs	r2, #0
 801480c:	4631      	mov	r1, r6
 801480e:	9303      	str	r3, [sp, #12]
 8014810:	ab10      	add	r3, sp, #64	; 0x40
 8014812:	4620      	mov	r0, r4
 8014814:	edcd 7a04 	vstr	s15, [sp, #16]
 8014818:	9302      	str	r3, [sp, #8]
 801481a:	ab0c      	add	r3, sp, #48	; 0x30
 801481c:	ed8d 9a05 	vstr	s18, [sp, #20]
 8014820:	9301      	str	r3, [sp, #4]
 8014822:	ab08      	add	r3, sp, #32
 8014824:	ed8d 9a06 	vstr	s18, [sp, #24]
 8014828:	9300      	str	r3, [sp, #0]
 801482a:	ab04      	add	r3, sp, #16
 801482c:	edcd 7a07 	vstr	s15, [sp, #28]
 8014830:	edcd 7a08 	vstr	s15, [sp, #32]
 8014834:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 8014838:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 801483c:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
 8014840:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 8014844:	edcd 9a11 	vstr	s19, [sp, #68]	; 0x44
 8014848:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 801484c:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 8014850:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 8014854:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
 8014858:	edcd 6a17 	vstr	s13, [sp, #92]	; 0x5c
 801485c:	f7ff fe7e 	bl	801455c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8014860:	b018      	add	sp, #96	; 0x60
 8014862:	ecbd 8b04 	vpop	{d8-d9}
 8014866:	bd70      	pop	{r4, r5, r6, pc}
 8014868:	eef0 6a47 	vmov.f32	s13, s14
 801486c:	ee18 3a10 	vmov	r3, s16
 8014870:	eef0 5a69 	vmov.f32	s11, s19
 8014874:	eeb0 6a48 	vmov.f32	s12, s16
 8014878:	e7c5      	b.n	8014806 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 801487a:	bf00      	nop
 801487c:	00000000 	.word	0x00000000
 8014880:	42c80000 	.word	0x42c80000
 8014884:	20027ca0 	.word	0x20027ca0

08014888 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8014888:	4b07      	ldr	r3, [pc, #28]	; (80148a8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 801488a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801488c:	881b      	ldrh	r3, [r3, #0]
 801488e:	4293      	cmp	r3, r2
 8014890:	bf81      	itttt	hi
 8014892:	4b06      	ldrhi	r3, [pc, #24]	; (80148ac <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8014894:	681b      	ldrhi	r3, [r3, #0]
 8014896:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 801489a:	7858      	ldrbhi	r0, [r3, #1]
 801489c:	bf8c      	ite	hi
 801489e:	f000 0003 	andhi.w	r0, r0, #3
 80148a2:	2000      	movls	r0, #0
 80148a4:	4770      	bx	lr
 80148a6:	bf00      	nop
 80148a8:	20027d04 	.word	0x20027d04
 80148ac:	20027d00 	.word	0x20027d00

080148b0 <_ZN8touchgfx8TextAreaD1Ev>:
 80148b0:	4770      	bx	lr
	...

080148b4 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 80148b4:	4b11      	ldr	r3, [pc, #68]	; (80148fc <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 80148b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148ba:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80148bc:	4604      	mov	r4, r0
 80148be:	881b      	ldrh	r3, [r3, #0]
 80148c0:	428b      	cmp	r3, r1
 80148c2:	d918      	bls.n	80148f6 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 80148c4:	6803      	ldr	r3, [r0, #0]
 80148c6:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 80148c8:	4b0d      	ldr	r3, [pc, #52]	; (8014900 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 80148ca:	6818      	ldr	r0, [r3, #0]
 80148cc:	f7f1 fa16 	bl	8005cfc <_ZNK8touchgfx5Texts7getTextEt>
 80148d0:	6823      	ldr	r3, [r4, #0]
 80148d2:	4606      	mov	r6, r0
 80148d4:	4620      	mov	r0, r4
 80148d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80148d8:	4798      	blx	r3
 80148da:	6823      	ldr	r3, [r4, #0]
 80148dc:	4607      	mov	r7, r0
 80148de:	4620      	mov	r0, r4
 80148e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80148e4:	4798      	blx	r3
 80148e6:	463a      	mov	r2, r7
 80148e8:	4603      	mov	r3, r0
 80148ea:	4631      	mov	r1, r6
 80148ec:	4620      	mov	r0, r4
 80148ee:	46ac      	mov	ip, r5
 80148f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80148f4:	4760      	bx	ip
 80148f6:	2000      	movs	r0, #0
 80148f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148fc:	20027d04 	.word	0x20027d04
 8014900:	20027d0c 	.word	0x20027d0c

08014904 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8014904:	4b18      	ldr	r3, [pc, #96]	; (8014968 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8014906:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801490a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801490c:	4604      	mov	r4, r0
 801490e:	881b      	ldrh	r3, [r3, #0]
 8014910:	428b      	cmp	r3, r1
 8014912:	d926      	bls.n	8014962 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8014914:	4b15      	ldr	r3, [pc, #84]	; (801496c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801491c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8014920:	4b13      	ldr	r3, [pc, #76]	; (8014970 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8014922:	7855      	ldrb	r5, [r2, #1]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	f3c5 0581 	ubfx	r5, r5, #2, #2
 801492a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801492e:	6833      	ldr	r3, [r6, #0]
 8014930:	69df      	ldr	r7, [r3, #28]
 8014932:	4b10      	ldr	r3, [pc, #64]	; (8014974 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8014934:	6818      	ldr	r0, [r3, #0]
 8014936:	f7f1 f9e1 	bl	8005cfc <_ZNK8touchgfx5Texts7getTextEt>
 801493a:	6823      	ldr	r3, [r4, #0]
 801493c:	4680      	mov	r8, r0
 801493e:	4620      	mov	r0, r4
 8014940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014942:	4798      	blx	r3
 8014944:	6823      	ldr	r3, [r4, #0]
 8014946:	4681      	mov	r9, r0
 8014948:	4620      	mov	r0, r4
 801494a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801494e:	4798      	blx	r3
 8014950:	464b      	mov	r3, r9
 8014952:	9000      	str	r0, [sp, #0]
 8014954:	4642      	mov	r2, r8
 8014956:	4629      	mov	r1, r5
 8014958:	4630      	mov	r0, r6
 801495a:	47b8      	blx	r7
 801495c:	b003      	add	sp, #12
 801495e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014962:	2000      	movs	r0, #0
 8014964:	e7fa      	b.n	801495c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8014966:	bf00      	nop
 8014968:	20027d04 	.word	0x20027d04
 801496c:	20027d00 	.word	0x20027d00
 8014970:	20027d08 	.word	0x20027d08
 8014974:	20027d0c 	.word	0x20027d0c

08014978 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8014978:	b40e      	push	{r1, r2, r3}
 801497a:	4b30      	ldr	r3, [pc, #192]	; (8014a3c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 801497c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014980:	881a      	ldrh	r2, [r3, #0]
 8014982:	b09d      	sub	sp, #116	; 0x74
 8014984:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8014986:	4604      	mov	r4, r0
 8014988:	429a      	cmp	r2, r3
 801498a:	d954      	bls.n	8014a36 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 801498c:	aa26      	add	r2, sp, #152	; 0x98
 801498e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8014a40 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8014992:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8014a44 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8014996:	9202      	str	r2, [sp, #8]
 8014998:	f8d9 2000 	ldr.w	r2, [r9]
 801499c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80149a0:	f8d8 3000 	ldr.w	r3, [r8]
 80149a4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80149a8:	682b      	ldr	r3, [r5, #0]
 80149aa:	4628      	mov	r0, r5
 80149ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149ae:	4798      	blx	r3
 80149b0:	4606      	mov	r6, r0
 80149b2:	b207      	sxth	r7, r0
 80149b4:	a803      	add	r0, sp, #12
 80149b6:	f005 f915 	bl	8019be4 <_ZN8touchgfx12TextProviderC1Ev>
 80149ba:	682b      	ldr	r3, [r5, #0]
 80149bc:	4628      	mov	r0, r5
 80149be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80149c0:	4798      	blx	r3
 80149c2:	682b      	ldr	r3, [r5, #0]
 80149c4:	4682      	mov	sl, r0
 80149c6:	4628      	mov	r0, r5
 80149c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80149ca:	4798      	blx	r3
 80149cc:	4653      	mov	r3, sl
 80149ce:	9000      	str	r0, [sp, #0]
 80149d0:	a803      	add	r0, sp, #12
 80149d2:	9a02      	ldr	r2, [sp, #8]
 80149d4:	9925      	ldr	r1, [sp, #148]	; 0x94
 80149d6:	f005 f960 	bl	8019c9a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80149da:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80149dc:	f8d9 3000 	ldr.w	r3, [r9]
 80149e0:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 80149e4:	8925      	ldrh	r5, [r4, #8]
 80149e6:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 80149ea:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80149ee:	eba5 050c 	sub.w	r5, r5, ip
 80149f2:	784a      	ldrb	r2, [r1, #1]
 80149f4:	f8d8 3000 	ldr.w	r3, [r8]
 80149f8:	b22d      	sxth	r5, r5
 80149fa:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 80149fe:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8014a02:	9500      	str	r5, [sp, #0]
 8014a04:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014a08:	a803      	add	r0, sp, #12
 8014a0a:	f002 fded 	bl	80175e8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8014a0e:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8014a12:	b203      	sxth	r3, r0
 8014a14:	18b9      	adds	r1, r7, r2
 8014a16:	2900      	cmp	r1, #0
 8014a18:	dd0b      	ble.n	8014a32 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8014a1a:	3b01      	subs	r3, #1
 8014a1c:	fb13 f302 	smulbb	r3, r3, r2
 8014a20:	fb16 3300 	smlabb	r3, r6, r0, r3
 8014a24:	b21f      	sxth	r7, r3
 8014a26:	4638      	mov	r0, r7
 8014a28:	b01d      	add	sp, #116	; 0x74
 8014a2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a2e:	b003      	add	sp, #12
 8014a30:	4770      	bx	lr
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	dcf7      	bgt.n	8014a26 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8014a36:	2700      	movs	r7, #0
 8014a38:	e7f5      	b.n	8014a26 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8014a3a:	bf00      	nop
 8014a3c:	20027d04 	.word	0x20027d04
 8014a40:	20027d00 	.word	0x20027d00
 8014a44:	20027d08 	.word	0x20027d08

08014a48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8014a48:	4bbd      	ldr	r3, [pc, #756]	; (8014d40 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8014a4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a4e:	460c      	mov	r4, r1
 8014a50:	881b      	ldrh	r3, [r3, #0]
 8014a52:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8014a54:	b0a9      	sub	sp, #164	; 0xa4
 8014a56:	4680      	mov	r8, r0
 8014a58:	428b      	cmp	r3, r1
 8014a5a:	d809      	bhi.n	8014a70 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8014a5c:	2300      	movs	r3, #0
 8014a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8014a62:	6083      	str	r3, [r0, #8]
 8014a64:	e9c0 3200 	strd	r3, r2, [r0]
 8014a68:	4640      	mov	r0, r8
 8014a6a:	b029      	add	sp, #164	; 0xa4
 8014a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a70:	4eb4      	ldr	r6, [pc, #720]	; (8014d44 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8014a72:	6833      	ldr	r3, [r6, #0]
 8014a74:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8014a78:	4bb3      	ldr	r3, [pc, #716]	; (8014d48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014a80:	4bb2      	ldr	r3, [pc, #712]	; (8014d4c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8014a82:	6818      	ldr	r0, [r3, #0]
 8014a84:	f7f1 f93a 	bl	8005cfc <_ZNK8touchgfx5Texts7getTextEt>
 8014a88:	682b      	ldr	r3, [r5, #0]
 8014a8a:	4681      	mov	r9, r0
 8014a8c:	4628      	mov	r0, r5
 8014a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a90:	4798      	blx	r3
 8014a92:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 8014a94:	b203      	sxth	r3, r0
 8014a96:	4682      	mov	sl, r0
 8014a98:	4407      	add	r7, r0
 8014a9a:	a80f      	add	r0, sp, #60	; 0x3c
 8014a9c:	9304      	str	r3, [sp, #16]
 8014a9e:	b2bb      	uxth	r3, r7
 8014aa0:	9303      	str	r3, [sp, #12]
 8014aa2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	f040 80a5 	bne.w	8014bf6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8014aac:	f005 f89a 	bl	8019be4 <_ZN8touchgfx12TextProviderC1Ev>
 8014ab0:	682b      	ldr	r3, [r5, #0]
 8014ab2:	4628      	mov	r0, r5
 8014ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014ab6:	4798      	blx	r3
 8014ab8:	682b      	ldr	r3, [r5, #0]
 8014aba:	4606      	mov	r6, r0
 8014abc:	4628      	mov	r0, r5
 8014abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ac0:	4798      	blx	r3
 8014ac2:	6823      	ldr	r3, [r4, #0]
 8014ac4:	4607      	mov	r7, r0
 8014ac6:	4620      	mov	r0, r4
 8014ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014aca:	4798      	blx	r3
 8014acc:	6823      	ldr	r3, [r4, #0]
 8014ace:	4683      	mov	fp, r0
 8014ad0:	4620      	mov	r0, r4
 8014ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014ad6:	4798      	blx	r3
 8014ad8:	463b      	mov	r3, r7
 8014ada:	4649      	mov	r1, r9
 8014adc:	4632      	mov	r2, r6
 8014ade:	2600      	movs	r6, #0
 8014ae0:	e9cd b000 	strd	fp, r0, [sp]
 8014ae4:	a80f      	add	r0, sp, #60	; 0x3c
 8014ae6:	4637      	mov	r7, r6
 8014ae8:	f005 f8ec 	bl	8019cc4 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8014aec:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014af0:	f8df b250 	ldr.w	fp, [pc, #592]	; 8014d44 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8014af4:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8014af8:	bf0c      	ite	eq
 8014afa:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8014afe:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8014b02:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8014b04:	4629      	mov	r1, r5
 8014b06:	f8db 3000 	ldr.w	r3, [fp]
 8014b0a:	a80f      	add	r0, sp, #60	; 0x3c
 8014b0c:	3701      	adds	r7, #1
 8014b0e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8014b12:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014b16:	b2bf      	uxth	r7, r7
 8014b18:	785b      	ldrb	r3, [r3, #1]
 8014b1a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8014b1e:	f002 fa7e 	bl	801701e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8014b22:	9b03      	ldr	r3, [sp, #12]
 8014b24:	4286      	cmp	r6, r0
 8014b26:	eba9 0903 	sub.w	r9, r9, r3
 8014b2a:	bfb8      	it	lt
 8014b2c:	4606      	movlt	r6, r0
 8014b2e:	a80f      	add	r0, sp, #60	; 0x3c
 8014b30:	fa0f f989 	sxth.w	r9, r9
 8014b34:	b236      	sxth	r6, r6
 8014b36:	f005 f87c 	bl	8019c32 <_ZN8touchgfx12TextProvider11endOfStringEv>
 8014b3a:	b918      	cbnz	r0, 8014b44 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8014b3c:	7a2b      	ldrb	r3, [r5, #8]
 8014b3e:	444b      	add	r3, r9
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	dcde      	bgt.n	8014b02 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8014b44:	9b03      	ldr	r3, [sp, #12]
 8014b46:	4620      	mov	r0, r4
 8014b48:	9a04      	ldr	r2, [sp, #16]
 8014b4a:	fb13 f707 	smulbb	r7, r3, r7
 8014b4e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8014b50:	f895 9009 	ldrb.w	r9, [r5, #9]
 8014b54:	1aff      	subs	r7, r7, r3
 8014b56:	b2bf      	uxth	r7, r7
 8014b58:	b23b      	sxth	r3, r7
 8014b5a:	429a      	cmp	r2, r3
 8014b5c:	bfa8      	it	ge
 8014b5e:	4657      	movge	r7, sl
 8014b60:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014b64:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8014b68:	6823      	ldr	r3, [r4, #0]
 8014b6a:	444f      	add	r7, r9
 8014b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b6e:	bf08      	it	eq
 8014b70:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8014b74:	fa1f f987 	uxth.w	r9, r7
 8014b78:	bf18      	it	ne
 8014b7a:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8014b7e:	4798      	blx	r3
 8014b80:	2801      	cmp	r0, #1
 8014b82:	fa0f f789 	sxth.w	r7, r9
 8014b86:	b2b3      	uxth	r3, r6
 8014b88:	f000 80e2 	beq.w	8014d50 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8014b8c:	2802      	cmp	r0, #2
 8014b8e:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 8014b92:	f000 80e3 	beq.w	8014d5c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8014b96:	7aea      	ldrb	r2, [r5, #11]
 8014b98:	b236      	sxth	r6, r6
 8014b9a:	7b2d      	ldrb	r5, [r5, #12]
 8014b9c:	1ab6      	subs	r6, r6, r2
 8014b9e:	442a      	add	r2, r5
 8014ba0:	fa1f fa86 	uxth.w	sl, r6
 8014ba4:	4413      	add	r3, r2
 8014ba6:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8014baa:	fa0f fb8a 	sxth.w	fp, sl
 8014bae:	b29b      	uxth	r3, r3
 8014bb0:	2a02      	cmp	r2, #2
 8014bb2:	b21e      	sxth	r6, r3
 8014bb4:	f000 80d6 	beq.w	8014d64 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8014bb8:	2a03      	cmp	r2, #3
 8014bba:	f000 80de 	beq.w	8014d7a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8014bbe:	2a01      	cmp	r2, #1
 8014bc0:	f040 80e6 	bne.w	8014d90 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8014bc4:	8925      	ldrh	r5, [r4, #8]
 8014bc6:	4633      	mov	r3, r6
 8014bc8:	463e      	mov	r6, r7
 8014bca:	eba5 0909 	sub.w	r9, r5, r9
 8014bce:	461f      	mov	r7, r3
 8014bd0:	465d      	mov	r5, fp
 8014bd2:	fa0f fb89 	sxth.w	fp, r9
 8014bd6:	4b5d      	ldr	r3, [pc, #372]	; (8014d4c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8014bd8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8014bda:	6818      	ldr	r0, [r3, #0]
 8014bdc:	f7f1 f88e 	bl	8005cfc <_ZNK8touchgfx5Texts7getTextEt>
 8014be0:	f8a8 b000 	strh.w	fp, [r8]
 8014be4:	f8a8 5002 	strh.w	r5, [r8, #2]
 8014be8:	f8a8 6004 	strh.w	r6, [r8, #4]
 8014bec:	f8a8 7006 	strh.w	r7, [r8, #6]
 8014bf0:	f8c8 0008 	str.w	r0, [r8, #8]
 8014bf4:	e738      	b.n	8014a68 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8014bf6:	f004 fff5 	bl	8019be4 <_ZN8touchgfx12TextProviderC1Ev>
 8014bfa:	682b      	ldr	r3, [r5, #0]
 8014bfc:	4628      	mov	r0, r5
 8014bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014c00:	4798      	blx	r3
 8014c02:	682b      	ldr	r3, [r5, #0]
 8014c04:	4607      	mov	r7, r0
 8014c06:	4628      	mov	r0, r5
 8014c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014c0a:	4798      	blx	r3
 8014c0c:	6823      	ldr	r3, [r4, #0]
 8014c0e:	4683      	mov	fp, r0
 8014c10:	4620      	mov	r0, r4
 8014c12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c14:	4798      	blx	r3
 8014c16:	6822      	ldr	r2, [r4, #0]
 8014c18:	9005      	str	r0, [sp, #20]
 8014c1a:	4620      	mov	r0, r4
 8014c1c:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8014c20:	4790      	blx	r2
 8014c22:	9b05      	ldr	r3, [sp, #20]
 8014c24:	463a      	mov	r2, r7
 8014c26:	4649      	mov	r1, r9
 8014c28:	9001      	str	r0, [sp, #4]
 8014c2a:	a80f      	add	r0, sp, #60	; 0x3c
 8014c2c:	9300      	str	r3, [sp, #0]
 8014c2e:	465b      	mov	r3, fp
 8014c30:	f005 f848 	bl	8019cc4 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8014c34:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014c38:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8014c3c:	af0f      	add	r7, sp, #60	; 0x3c
 8014c3e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8014c42:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014c46:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8014c48:	bf0a      	itet	eq
 8014c4a:	464a      	moveq	r2, r9
 8014c4c:	461a      	movne	r2, r3
 8014c4e:	4699      	moveq	r9, r3
 8014c50:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8014c54:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8014c58:	1ad2      	subs	r2, r2, r3
 8014c5a:	6833      	ldr	r3, [r6, #0]
 8014c5c:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 8014c60:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8014c64:	7859      	ldrb	r1, [r3, #1]
 8014c66:	2300      	movs	r3, #0
 8014c68:	9707      	str	r7, [sp, #28]
 8014c6a:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8014c6e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014c72:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8014c76:	f88d 1020 	strb.w	r1, [sp, #32]
 8014c7a:	9509      	str	r5, [sp, #36]	; 0x24
 8014c7c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8014c80:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8014c84:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8014c88:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8014c8c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8014c90:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8014c94:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8014c98:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8014c9c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8014ca0:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8014ca4:	b350      	cbz	r0, 8014cfc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8014ca6:	682b      	ldr	r3, [r5, #0]
 8014ca8:	4628      	mov	r0, r5
 8014caa:	695b      	ldr	r3, [r3, #20]
 8014cac:	4798      	blx	r3
 8014cae:	4607      	mov	r7, r0
 8014cb0:	b320      	cbz	r0, 8014cfc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8014cb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014cb4:	4639      	mov	r1, r7
 8014cb6:	6803      	ldr	r3, [r0, #0]
 8014cb8:	68db      	ldr	r3, [r3, #12]
 8014cba:	4798      	blx	r3
 8014cbc:	4606      	mov	r6, r0
 8014cbe:	b1e8      	cbz	r0, 8014cfc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8014cc0:	7b43      	ldrb	r3, [r0, #13]
 8014cc2:	7a82      	ldrb	r2, [r0, #10]
 8014cc4:	005b      	lsls	r3, r3, #1
 8014cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014cca:	4313      	orrs	r3, r2
 8014ccc:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8014cd0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8014cd4:	2b06      	cmp	r3, #6
 8014cd6:	d111      	bne.n	8014cfc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8014cd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014cda:	4632      	mov	r2, r6
 8014cdc:	4639      	mov	r1, r7
 8014cde:	6803      	ldr	r3, [r0, #0]
 8014ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ce2:	4798      	blx	r3
 8014ce4:	7b73      	ldrb	r3, [r6, #13]
 8014ce6:	005b      	lsls	r3, r3, #1
 8014ce8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014cec:	7ab3      	ldrb	r3, [r6, #10]
 8014cee:	4313      	orrs	r3, r2
 8014cf0:	4418      	add	r0, r3
 8014cf2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8014cf6:	4418      	add	r0, r3
 8014cf8:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8014cfc:	2600      	movs	r6, #0
 8014cfe:	4637      	mov	r7, r6
 8014d00:	a806      	add	r0, sp, #24
 8014d02:	3701      	adds	r7, #1
 8014d04:	f002 fb6d 	bl	80173e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8014d08:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 8014d0c:	9b03      	ldr	r3, [sp, #12]
 8014d0e:	b2bf      	uxth	r7, r7
 8014d10:	4286      	cmp	r6, r0
 8014d12:	eba9 0903 	sub.w	r9, r9, r3
 8014d16:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8014d1a:	bfb8      	it	lt
 8014d1c:	4606      	movlt	r6, r0
 8014d1e:	fa0f f989 	sxth.w	r9, r9
 8014d22:	b236      	sxth	r6, r6
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	f43f af0d 	beq.w	8014b44 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8014d2a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	f47f af08 	bne.w	8014b44 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8014d34:	7a2b      	ldrb	r3, [r5, #8]
 8014d36:	444b      	add	r3, r9
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	dce1      	bgt.n	8014d00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8014d3c:	e702      	b.n	8014b44 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8014d3e:	bf00      	nop
 8014d40:	20027d04 	.word	0x20027d04
 8014d44:	20027d00 	.word	0x20027d00
 8014d48:	20027d08 	.word	0x20027d08
 8014d4c:	20027d0c 	.word	0x20027d0c
 8014d50:	ebaa 0606 	sub.w	r6, sl, r6
 8014d54:	2002      	movs	r0, #2
 8014d56:	fb96 f6f0 	sdiv	r6, r6, r0
 8014d5a:	e71c      	b.n	8014b96 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8014d5c:	441e      	add	r6, r3
 8014d5e:	ebaa 0606 	sub.w	r6, sl, r6
 8014d62:	e718      	b.n	8014b96 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8014d64:	8925      	ldrh	r5, [r4, #8]
 8014d66:	1aed      	subs	r5, r5, r3
 8014d68:	eba5 050a 	sub.w	r5, r5, sl
 8014d6c:	fa0f fb85 	sxth.w	fp, r5
 8014d70:	8965      	ldrh	r5, [r4, #10]
 8014d72:	eba5 0509 	sub.w	r5, r5, r9
 8014d76:	b22d      	sxth	r5, r5
 8014d78:	e72d      	b.n	8014bd6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8014d7a:	8965      	ldrh	r5, [r4, #10]
 8014d7c:	f04f 0b00 	mov.w	fp, #0
 8014d80:	1aed      	subs	r5, r5, r3
 8014d82:	4633      	mov	r3, r6
 8014d84:	463e      	mov	r6, r7
 8014d86:	eba5 050a 	sub.w	r5, r5, sl
 8014d8a:	461f      	mov	r7, r3
 8014d8c:	b22d      	sxth	r5, r5
 8014d8e:	e722      	b.n	8014bd6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8014d90:	2500      	movs	r5, #0
 8014d92:	e720      	b.n	8014bd6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08014d94 <_ZN8touchgfx8TextAreaD0Ev>:
 8014d94:	b510      	push	{r4, lr}
 8014d96:	4604      	mov	r4, r0
 8014d98:	2148      	movs	r1, #72	; 0x48
 8014d9a:	f015 fe12 	bl	802a9c2 <_ZdlPvj>
 8014d9e:	4620      	mov	r0, r4
 8014da0:	bd10      	pop	{r4, pc}
	...

08014da4 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8014da4:	b513      	push	{r0, r1, r4, lr}
 8014da6:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8014daa:	4604      	mov	r4, r0
 8014dac:	b1fb      	cbz	r3, 8014dee <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8014dae:	4b16      	ldr	r3, [pc, #88]	; (8014e08 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8014db0:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8014db2:	881b      	ldrh	r3, [r3, #0]
 8014db4:	428b      	cmp	r3, r1
 8014db6:	d91a      	bls.n	8014dee <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8014db8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	dd16      	ble.n	8014dee <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8014dc0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	dd12      	ble.n	8014dee <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8014dc8:	4b10      	ldr	r3, [pc, #64]	; (8014e0c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8014dca:	6818      	ldr	r0, [r3, #0]
 8014dcc:	f7f0 ff96 	bl	8005cfc <_ZNK8touchgfx5Texts7getTextEt>
 8014dd0:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8014dd4:	6822      	ldr	r2, [r4, #0]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	db06      	blt.n	8014de8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8014dda:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	db02      	blt.n	8014de8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8014de2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014de4:	4298      	cmp	r0, r3
 8014de6:	d004      	beq.n	8014df2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8014de8:	6953      	ldr	r3, [r2, #20]
 8014dea:	4620      	mov	r0, r4
 8014dec:	4798      	blx	r3
 8014dee:	b002      	add	sp, #8
 8014df0:	bd10      	pop	{r4, pc}
 8014df2:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8014df6:	466b      	mov	r3, sp
 8014df8:	6912      	ldr	r2, [r2, #16]
 8014dfa:	c903      	ldmia	r1, {r0, r1}
 8014dfc:	e883 0003 	stmia.w	r3, {r0, r1}
 8014e00:	4619      	mov	r1, r3
 8014e02:	4620      	mov	r0, r4
 8014e04:	4790      	blx	r2
 8014e06:	e7f2      	b.n	8014dee <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8014e08:	20027d04 	.word	0x20027d04
 8014e0c:	20027d0c 	.word	0x20027d0c

08014e10 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8014e10:	4b45      	ldr	r3, [pc, #276]	; (8014f28 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8014e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e16:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8014e18:	b08e      	sub	sp, #56	; 0x38
 8014e1a:	881b      	ldrh	r3, [r3, #0]
 8014e1c:	4604      	mov	r4, r0
 8014e1e:	4293      	cmp	r3, r2
 8014e20:	d97e      	bls.n	8014f20 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8014e22:	6808      	ldr	r0, [r1, #0]
 8014e24:	ab05      	add	r3, sp, #20
 8014e26:	6849      	ldr	r1, [r1, #4]
 8014e28:	4d40      	ldr	r5, [pc, #256]	; (8014f2c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8014e2a:	c303      	stmia	r3!, {r0, r1}
 8014e2c:	4611      	mov	r1, r2
 8014e2e:	6828      	ldr	r0, [r5, #0]
 8014e30:	f7f0 ff64 	bl	8005cfc <_ZNK8touchgfx5Texts7getTextEt>
 8014e34:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	db11      	blt.n	8014e60 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8014e3c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	db0d      	blt.n	8014e60 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8014e44:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014e46:	4298      	cmp	r0, r3
 8014e48:	d10a      	bne.n	8014e60 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8014e4a:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8014e4e:	ab09      	add	r3, sp, #36	; 0x24
 8014e50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014e54:	e883 0003 	stmia.w	r3, {r0, r1}
 8014e58:	4619      	mov	r1, r3
 8014e5a:	a805      	add	r0, sp, #20
 8014e5c:	f7fc ffa2 	bl	8011da4 <_ZN8touchgfx4RectaNERKS0_>
 8014e60:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	dd5b      	ble.n	8014f20 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8014e68:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	dd57      	ble.n	8014f20 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8014e70:	4f2f      	ldr	r7, [pc, #188]	; (8014f30 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8014e72:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8014e74:	683b      	ldr	r3, [r7, #0]
 8014e76:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8014e7a:	4b2e      	ldr	r3, [pc, #184]	; (8014f34 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8014e82:	2e00      	cmp	r6, #0
 8014e84:	d04c      	beq.n	8014f20 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8014e86:	6823      	ldr	r3, [r4, #0]
 8014e88:	4620      	mov	r0, r4
 8014e8a:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8014e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e90:	4798      	blx	r3
 8014e92:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8014e94:	683b      	ldr	r3, [r7, #0]
 8014e96:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8014e9a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8014e9e:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 8014ea2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8014ea6:	785b      	ldrb	r3, [r3, #1]
 8014ea8:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8014eac:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8014eb0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014eb2:	9609      	str	r6, [sp, #36]	; 0x24
 8014eb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014eb8:	4b1f      	ldr	r3, [pc, #124]	; (8014f38 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8014eba:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 8014ec4:	910b      	str	r1, [sp, #44]	; 0x2c
 8014ec6:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 8014eca:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8014ece:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 8014ed2:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8014ed6:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8014eda:	b10a      	cbz	r2, 8014ee0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8014edc:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8014ede:	b906      	cbnz	r6, 8014ee2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8014ee0:	689e      	ldr	r6, [r3, #8]
 8014ee2:	af07      	add	r7, sp, #28
 8014ee4:	4621      	mov	r1, r4
 8014ee6:	4638      	mov	r0, r7
 8014ee8:	f004 f96c 	bl	80191c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014eec:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8014eee:	6828      	ldr	r0, [r5, #0]
 8014ef0:	f7f0 ff04 	bl	8005cfc <_ZNK8touchgfx5Texts7getTextEt>
 8014ef4:	6823      	ldr	r3, [r4, #0]
 8014ef6:	4605      	mov	r5, r0
 8014ef8:	4620      	mov	r0, r4
 8014efa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014efc:	4798      	blx	r3
 8014efe:	6823      	ldr	r3, [r4, #0]
 8014f00:	4680      	mov	r8, r0
 8014f02:	4620      	mov	r0, r4
 8014f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014f08:	4798      	blx	r3
 8014f0a:	ab09      	add	r3, sp, #36	; 0x24
 8014f0c:	9501      	str	r5, [sp, #4]
 8014f0e:	9300      	str	r3, [sp, #0]
 8014f10:	ab05      	add	r3, sp, #20
 8014f12:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8014f16:	4630      	mov	r0, r6
 8014f18:	e897 0006 	ldmia.w	r7, {r1, r2}
 8014f1c:	f7f0 fea0 	bl	8005c60 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8014f20:	b00e      	add	sp, #56	; 0x38
 8014f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f26:	bf00      	nop
 8014f28:	20027d04 	.word	0x20027d04
 8014f2c:	20027d0c 	.word	0x20027d0c
 8014f30:	20027d00 	.word	0x20027d00
 8014f34:	20027d08 	.word	0x20027d08
 8014f38:	20027ca8 	.word	0x20027ca8

08014f3c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8014f3c:	b538      	push	{r3, r4, r5, lr}
 8014f3e:	4b0e      	ldr	r3, [pc, #56]	; (8014f78 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8014f40:	4604      	mov	r4, r0
 8014f42:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8014f44:	881b      	ldrh	r3, [r3, #0]
 8014f46:	429a      	cmp	r2, r3
 8014f48:	d214      	bcs.n	8014f74 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8014f4a:	6803      	ldr	r3, [r0, #0]
 8014f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f4e:	4798      	blx	r3
 8014f50:	6823      	ldr	r3, [r4, #0]
 8014f52:	4605      	mov	r5, r0
 8014f54:	4620      	mov	r0, r4
 8014f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f58:	4798      	blx	r3
 8014f5a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014f5e:	b22d      	sxth	r5, r5
 8014f60:	4601      	mov	r1, r0
 8014f62:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8014f66:	bf06      	itte	eq
 8014f68:	4602      	moveq	r2, r0
 8014f6a:	4629      	moveq	r1, r5
 8014f6c:	462a      	movne	r2, r5
 8014f6e:	4620      	mov	r0, r4
 8014f70:	f7fc fcfa 	bl	8011968 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014f74:	bd38      	pop	{r3, r4, r5, pc}
 8014f76:	bf00      	nop
 8014f78:	20027d04 	.word	0x20027d04

08014f7c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8014f7c:	b530      	push	{r4, r5, lr}
 8014f7e:	888b      	ldrh	r3, [r1, #4]
 8014f80:	b085      	sub	sp, #20
 8014f82:	4604      	mov	r4, r0
 8014f84:	8583      	strh	r3, [r0, #44]	; 0x2c
 8014f86:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8014f8a:	b923      	cbnz	r3, 8014f96 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8014f8c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014f90:	b90b      	cbnz	r3, 8014f96 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8014f92:	f7ff ffd3 	bl	8014f3c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8014f96:	6823      	ldr	r3, [r4, #0]
 8014f98:	466d      	mov	r5, sp
 8014f9a:	4621      	mov	r1, r4
 8014f9c:	343c      	adds	r4, #60	; 0x3c
 8014f9e:	4628      	mov	r0, r5
 8014fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014fa4:	4798      	blx	r3
 8014fa6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014faa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014fae:	b005      	add	sp, #20
 8014fb0:	bd30      	pop	{r4, r5, pc}

08014fb2 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	8083      	strh	r3, [r0, #4]
 8014fb6:	80c3      	strh	r3, [r0, #6]
 8014fb8:	8003      	strh	r3, [r0, #0]
 8014fba:	8043      	strh	r3, [r0, #2]
 8014fbc:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8014fc0:	2bff      	cmp	r3, #255	; 0xff
 8014fc2:	bf01      	itttt	eq
 8014fc4:	890b      	ldrheq	r3, [r1, #8]
 8014fc6:	8083      	strheq	r3, [r0, #4]
 8014fc8:	894b      	ldrheq	r3, [r1, #10]
 8014fca:	80c3      	strheq	r3, [r0, #6]
 8014fcc:	4770      	bx	lr
	...

08014fd0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8014fd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014fd2:	4604      	mov	r4, r0
 8014fd4:	466b      	mov	r3, sp
 8014fd6:	6808      	ldr	r0, [r1, #0]
 8014fd8:	6849      	ldr	r1, [r1, #4]
 8014fda:	c303      	stmia	r3!, {r0, r1}
 8014fdc:	6823      	ldr	r3, [r4, #0]
 8014fde:	4669      	mov	r1, sp
 8014fe0:	4620      	mov	r0, r4
 8014fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fe4:	4798      	blx	r3
 8014fe6:	4b08      	ldr	r3, [pc, #32]	; (8015008 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8014fee:	b10a      	cbz	r2, 8014ff4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8014ff0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014ff2:	b900      	cbnz	r0, 8014ff6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8014ff4:	6898      	ldr	r0, [r3, #8]
 8014ff6:	6803      	ldr	r3, [r0, #0]
 8014ff8:	4669      	mov	r1, sp
 8014ffa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8014ffc:	6a1d      	ldr	r5, [r3, #32]
 8014ffe:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8015002:	47a8      	blx	r5
 8015004:	b003      	add	sp, #12
 8015006:	bd30      	pop	{r4, r5, pc}
 8015008:	20027ca8 	.word	0x20027ca8

0801500c <_ZN8touchgfx3BoxD1Ev>:
 801500c:	4770      	bx	lr

0801500e <_ZN8touchgfx3BoxD0Ev>:
 801500e:	b510      	push	{r4, lr}
 8015010:	4604      	mov	r4, r0
 8015012:	212c      	movs	r1, #44	; 0x2c
 8015014:	f015 fcd5 	bl	802a9c2 <_ZdlPvj>
 8015018:	4620      	mov	r0, r4
 801501a:	bd10      	pop	{r4, pc}

0801501c <_ZNK8touchgfx5Gauge9getCenterERiS1_>:
 801501c:	f9b0 3150 	ldrsh.w	r3, [r0, #336]	; 0x150
 8015020:	600b      	str	r3, [r1, #0]
 8015022:	f9b0 3152 	ldrsh.w	r3, [r0, #338]	; 0x152
 8015026:	6013      	str	r3, [r2, #0]
 8015028:	4770      	bx	lr

0801502a <_ZN8touchgfx5Gauge8setWidthEs>:
 801502a:	8101      	strh	r1, [r0, #8]
 801502c:	f8a0 10bc 	strh.w	r1, [r0, #188]	; 0xbc
 8015030:	f8a0 1160 	strh.w	r1, [r0, #352]	; 0x160
 8015034:	4770      	bx	lr

08015036 <_ZN8touchgfx5Gauge9setHeightEs>:
 8015036:	8141      	strh	r1, [r0, #10]
 8015038:	f8a0 10be 	strh.w	r1, [r0, #190]	; 0xbe
 801503c:	f8a0 1162 	strh.w	r1, [r0, #354]	; 0x162
 8015040:	4770      	bx	lr

08015042 <_ZNK8touchgfx5Gauge13getStartAngleEv>:
 8015042:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 8015046:	4770      	bx	lr

08015048 <_ZNK8touchgfx5Gauge11getEndAngleEv>:
 8015048:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 801504c:	4770      	bx	lr

0801504e <_ZN8touchgfx5Gauge28setProgressIndicatorPositionEssss>:
 801504e:	4770      	bx	lr

08015050 <_ZN8touchgfx5GaugeD1Ev>:
 8015050:	4770      	bx	lr

08015052 <_ZN8touchgfx5Gauge8setAlphaEh>:
 8015052:	b538      	push	{r3, r4, r5, lr}
 8015054:	4604      	mov	r4, r0
 8015056:	460d      	mov	r5, r1
 8015058:	f7fc fbb7 	bl	80117ca <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 801505c:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
 8015060:	f884 517e 	strb.w	r5, [r4, #382]	; 0x17e
 8015064:	bd38      	pop	{r3, r4, r5, pc}

08015066 <_ZN8touchgfx5GaugeD0Ev>:
 8015066:	b510      	push	{r4, lr}
 8015068:	4604      	mov	r4, r0
 801506a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801506e:	f015 fca8 	bl	802a9c2 <_ZdlPvj>
 8015072:	4620      	mov	r0, r4
 8015074:	bd10      	pop	{r4, pc}

08015076 <_ZNK8touchgfx5Gauge17invalidateContentEv>:
 8015076:	b510      	push	{r4, lr}
 8015078:	6803      	ldr	r3, [r0, #0]
 801507a:	4604      	mov	r4, r0
 801507c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8015080:	4798      	blx	r3
 8015082:	b170      	cbz	r0, 80150a2 <_ZNK8touchgfx5Gauge17invalidateContentEv+0x2c>
 8015084:	6823      	ldr	r3, [r4, #0]
 8015086:	4620      	mov	r0, r4
 8015088:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801508c:	4798      	blx	r3
 801508e:	b140      	cbz	r0, 80150a2 <_ZNK8touchgfx5Gauge17invalidateContentEv+0x2c>
 8015090:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015094:	b12b      	cbz	r3, 80150a2 <_ZNK8touchgfx5Gauge17invalidateContentEv+0x2c>
 8015096:	6823      	ldr	r3, [r4, #0]
 8015098:	4620      	mov	r0, r4
 801509a:	695b      	ldr	r3, [r3, #20]
 801509c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80150a0:	4718      	bx	r3
 80150a2:	bd10      	pop	{r4, pc}

080150a4 <_ZN8touchgfx5GaugeC1Ev>:
 80150a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80150a6:	4604      	mov	r4, r0
 80150a8:	f7fc fc98 	bl	80119dc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 80150ac:	4b18      	ldr	r3, [pc, #96]	; (8015110 <_ZN8touchgfx5GaugeC1Ev+0x6c>)
 80150ae:	a902      	add	r1, sp, #8
 80150b0:	4626      	mov	r6, r4
 80150b2:	2500      	movs	r5, #0
 80150b4:	f504 77ac 	add.w	r7, r4, #344	; 0x158
 80150b8:	f846 3bb4 	str.w	r3, [r6], #180
 80150bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80150c0:	4630      	mov	r0, r6
 80150c2:	f821 3d04 	strh.w	r3, [r1, #-4]!
 80150c6:	f014 fe7d 	bl	8029dc4 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>
 80150ca:	2301      	movs	r3, #1
 80150cc:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 80150d0:	4638      	mov	r0, r7
 80150d2:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
 80150d6:	f884 3145 	strb.w	r3, [r4, #325]	; 0x145
 80150da:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 80150de:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
 80150e2:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 80150e6:	f014 f8d5 	bl	8029294 <_ZN8touchgfx6CircleC1Ev>
 80150ea:	f104 0158 	add.w	r1, r4, #88	; 0x58
 80150ee:	4620      	mov	r0, r4
 80150f0:	f7fc fd15 	bl	8011b1e <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 80150f4:	4639      	mov	r1, r7
 80150f6:	4620      	mov	r0, r4
 80150f8:	f7fc fcd0 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80150fc:	4620      	mov	r0, r4
 80150fe:	4631      	mov	r1, r6
 8015100:	f7fc fccc 	bl	8011a9c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015104:	4620      	mov	r0, r4
 8015106:	f884 517d 	strb.w	r5, [r4, #381]	; 0x17d
 801510a:	b003      	add	sp, #12
 801510c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801510e:	bf00      	nop
 8015110:	08030ae4 	.word	0x08030ae4

08015114 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 8015114:	f880 1144 	strb.w	r1, [r0, #324]	; 0x144
 8015118:	4770      	bx	lr

0801511a <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 801511a:	f880 1145 	strb.w	r1, [r0, #325]	; 0x145
 801511e:	4770      	bx	lr

08015120 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>:
 8015120:	b538      	push	{r3, r4, r5, lr}
 8015122:	8902      	ldrh	r2, [r0, #8]
 8015124:	f100 05b4 	add.w	r5, r0, #180	; 0xb4
 8015128:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801512c:	4604      	mov	r4, r0
 801512e:	f8a0 20bc 	strh.w	r2, [r0, #188]	; 0xbc
 8015132:	2200      	movs	r2, #0
 8015134:	f8a0 30be 	strh.w	r3, [r0, #190]	; 0xbe
 8015138:	4628      	mov	r0, r5
 801513a:	4611      	mov	r1, r2
 801513c:	f7f0 ff06 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 8015140:	f9b4 2156 	ldrsh.w	r2, [r4, #342]	; 0x156
 8015144:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	; 0x152
 8015148:	4628      	mov	r0, r5
 801514a:	1a9b      	subs	r3, r3, r2
 801514c:	f9b4 2154 	ldrsh.w	r2, [r4, #340]	; 0x154
 8015150:	ee07 3a90 	vmov	s15, r3
 8015154:	f9b4 3150 	ldrsh.w	r3, [r4, #336]	; 0x150
 8015158:	1a9b      	subs	r3, r3, r2
 801515a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801515e:	ee07 3a10 	vmov	s14, r3
 8015162:	edc4 7a39 	vstr	s15, [r4, #228]	; 0xe4
 8015166:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801516a:	ed84 7a38 	vstr	s14, [r4, #224]	; 0xe0
 801516e:	f014 fe75 	bl	8029e5c <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 8015172:	4b16      	ldr	r3, [pc, #88]	; (80151cc <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv+0xac>)
 8015174:	4628      	mov	r0, r5
 8015176:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 801517a:	f014 fe6f 	bl	8029e5c <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801517e:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	; 0x152
 8015182:	f9b4 2150 	ldrsh.w	r2, [r4, #336]	; 0x150
 8015186:	4628      	mov	r0, r5
 8015188:	ee07 3a90 	vmov	s15, r3
 801518c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8015190:	ee07 2a10 	vmov	s14, r2
 8015194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015198:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 801519c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80151a0:	edc4 7a3f 	vstr	s15, [r4, #252]	; 0xfc
 80151a4:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 80151a8:	f014 fe58 	bl	8029e5c <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 80151ac:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 80151b0:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 80151b4:	4628      	mov	r0, r5
 80151b6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 80151ba:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
 80151be:	f014 fe4d 	bl	8029e5c <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 80151c2:	2301      	movs	r3, #1
 80151c4:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 80151c8:	bd38      	pop	{r3, r4, r5, pc}
 80151ca:	bf00      	nop
 80151cc:	43960000 	.word	0x43960000

080151d0 <_ZN8touchgfx5Gauge9setNeedleEtss>:
 80151d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80151d2:	4604      	mov	r4, r0
 80151d4:	a802      	add	r0, sp, #8
 80151d6:	4616      	mov	r6, r2
 80151d8:	461d      	mov	r5, r3
 80151da:	f820 1d04 	strh.w	r1, [r0, #-4]!
 80151de:	4601      	mov	r1, r0
 80151e0:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 80151e4:	f014 ff90 	bl	802a108 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>
 80151e8:	4620      	mov	r0, r4
 80151ea:	f8a4 6154 	strh.w	r6, [r4, #340]	; 0x154
 80151ee:	f8a4 5156 	strh.w	r5, [r4, #342]	; 0x156
 80151f2:	f7ff ff95 	bl	8015120 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 80151f6:	b002      	add	sp, #8
 80151f8:	bd70      	pop	{r4, r5, r6, pc}

080151fa <_ZN8touchgfx5Gauge9setCenterEii>:
 80151fa:	b570      	push	{r4, r5, r6, lr}
 80151fc:	4606      	mov	r6, r0
 80151fe:	460d      	mov	r5, r1
 8015200:	4614      	mov	r4, r2
 8015202:	f8a6 1150 	strh.w	r1, [r6, #336]	; 0x150
 8015206:	f8a6 2152 	strh.w	r2, [r6, #338]	; 0x152
 801520a:	f7ff ff89 	bl	8015120 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 801520e:	f9b6 215e 	ldrsh.w	r2, [r6, #350]	; 0x15e
 8015212:	f9b6 115c 	ldrsh.w	r1, [r6, #348]	; 0x15c
 8015216:	1aa4      	subs	r4, r4, r2
 8015218:	1a6d      	subs	r5, r5, r1
 801521a:	0164      	lsls	r4, r4, #5
 801521c:	016d      	lsls	r5, r5, #5
 801521e:	3410      	adds	r4, #16
 8015220:	3510      	adds	r5, #16
 8015222:	f8c6 4188 	str.w	r4, [r6, #392]	; 0x188
 8015226:	f8c6 5184 	str.w	r5, [r6, #388]	; 0x184
 801522a:	bd70      	pop	{r4, r5, r6, pc}

0801522c <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>:
 801522c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801522e:	0149      	lsls	r1, r1, #5
 8015230:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8015232:	4604      	mov	r4, r0
 8015234:	4299      	cmp	r1, r3
 8015236:	9101      	str	r1, [sp, #4]
 8015238:	d00b      	beq.n	8015252 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_+0x26>
 801523a:	4601      	mov	r1, r0
 801523c:	aa01      	add	r2, sp, #4
 801523e:	a802      	add	r0, sp, #8
 8015240:	f014 fa24 	bl	802968c <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>
 8015244:	9b01      	ldr	r3, [sp, #4]
 8015246:	a902      	add	r1, sp, #8
 8015248:	4620      	mov	r0, r4
 801524a:	63e3      	str	r3, [r4, #60]	; 0x3c
 801524c:	6823      	ldr	r3, [r4, #0]
 801524e:	691b      	ldr	r3, [r3, #16]
 8015250:	4798      	blx	r3
 8015252:	b004      	add	sp, #16
 8015254:	bd10      	pop	{r4, pc}
	...

08015258 <_ZN8touchgfx5Gauge8setValueEi>:
 8015258:	b570      	push	{r4, r5, r6, lr}
 801525a:	4604      	mov	r4, r0
 801525c:	f7fc fb08 	bl	8011870 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8015260:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 8015264:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 8015268:	4620      	mov	r0, r4
 801526a:	429a      	cmp	r2, r3
 801526c:	f504 76ac 	add.w	r6, r4, #344	; 0x158
 8015270:	bfac      	ite	ge
 8015272:	f894 3145 	ldrbge.w	r3, [r4, #325]	; 0x145
 8015276:	f894 3144 	ldrblt.w	r3, [r4, #324]	; 0x144
 801527a:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 801527e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8015282:	1ac9      	subs	r1, r1, r3
 8015284:	2900      	cmp	r1, #0
 8015286:	bfb8      	it	lt
 8015288:	4249      	neglt	r1, r1
 801528a:	b289      	uxth	r1, r1
 801528c:	f7fc fb12 	bl	80118b4 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8015290:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8015294:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 8015298:	4605      	mov	r5, r0
 801529a:	eddf 6a18 	vldr	s13, [pc, #96]	; 80152fc <_ZN8touchgfx5Gauge8setValueEi+0xa4>
 801529e:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 80152a2:	429a      	cmp	r2, r3
 80152a4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8015300 <_ZN8touchgfx5Gauge8setValueEi+0xa8>
 80152a8:	da15      	bge.n	80152d6 <_ZN8touchgfx5Gauge8setValueEi+0x7e>
 80152aa:	1b5b      	subs	r3, r3, r5
 80152ac:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 80152b0:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 80152b4:	ee07 3a90 	vmov	s15, r3
 80152b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80152bc:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 80152c0:	ee21 1a07 	vmul.f32	s2, s2, s14
 80152c4:	f014 fd38 	bl	8029d38 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 80152c8:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 80152cc:	1b49      	subs	r1, r1, r5
 80152ce:	4630      	mov	r0, r6
 80152d0:	f7ff ffac 	bl	801522c <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>
 80152d4:	bd70      	pop	{r4, r5, r6, pc}
 80152d6:	442b      	add	r3, r5
 80152d8:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 80152dc:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 80152e0:	ee07 3a90 	vmov	s15, r3
 80152e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80152e8:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 80152ec:	ee21 1a07 	vmul.f32	s2, s2, s14
 80152f0:	f014 fd22 	bl	8029d38 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 80152f4:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 80152f8:	4429      	add	r1, r5
 80152fa:	e7e8      	b.n	80152ce <_ZN8touchgfx5Gauge8setValueEi+0x76>
 80152fc:	43340000 	.word	0x43340000
 8015300:	40490fdb 	.word	0x40490fdb

08015304 <_ZN8touchgfx5Gauge16setStartEndAngleEii>:
 8015304:	b510      	push	{r4, lr}
 8015306:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
 801530a:	0149      	lsls	r1, r1, #5
 801530c:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
 8015310:	0152      	lsls	r2, r2, #5
 8015312:	4604      	mov	r4, r0
 8015314:	f8c0 1190 	str.w	r1, [r0, #400]	; 0x190
 8015318:	f8c0 2194 	str.w	r2, [r0, #404]	; 0x194
 801531c:	f7fc fa52 	bl	80117c4 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 8015320:	4601      	mov	r1, r0
 8015322:	4620      	mov	r0, r4
 8015324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015328:	f7ff bf96 	b.w	8015258 <_ZN8touchgfx5Gauge8setValueEi>

0801532c <_ZN8touchgfx6ButtonD1Ev>:
 801532c:	4770      	bx	lr

0801532e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801532e:	b570      	push	{r4, r5, r6, lr}
 8015330:	880b      	ldrh	r3, [r1, #0]
 8015332:	4605      	mov	r5, r0
 8015334:	4604      	mov	r4, r0
 8015336:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8015338:	8813      	ldrh	r3, [r2, #0]
 801533a:	f825 3f30 	strh.w	r3, [r5, #48]!
 801533e:	4628      	mov	r0, r5
 8015340:	f005 ffdc 	bl	801b2fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015344:	4606      	mov	r6, r0
 8015346:	4628      	mov	r0, r5
 8015348:	f006 f80c 	bl	801b364 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801534c:	6823      	ldr	r3, [r4, #0]
 801534e:	4605      	mov	r5, r0
 8015350:	4631      	mov	r1, r6
 8015352:	4620      	mov	r0, r4
 8015354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015356:	4798      	blx	r3
 8015358:	6823      	ldr	r3, [r4, #0]
 801535a:	4629      	mov	r1, r5
 801535c:	4620      	mov	r0, r4
 801535e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015360:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015364:	4718      	bx	r3

08015366 <_ZN8touchgfx6ButtonD0Ev>:
 8015366:	b510      	push	{r4, lr}
 8015368:	4604      	mov	r4, r0
 801536a:	2134      	movs	r1, #52	; 0x34
 801536c:	f015 fb29 	bl	802a9c2 <_ZdlPvj>
 8015370:	4620      	mov	r0, r4
 8015372:	bd10      	pop	{r4, pc}

08015374 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8015374:	b510      	push	{r4, lr}
 8015376:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801537a:	4604      	mov	r4, r0
 801537c:	2bff      	cmp	r3, #255	; 0xff
 801537e:	d006      	beq.n	801538e <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8015380:	2300      	movs	r3, #0
 8015382:	8003      	strh	r3, [r0, #0]
 8015384:	8043      	strh	r3, [r0, #2]
 8015386:	8083      	strh	r3, [r0, #4]
 8015388:	80c3      	strh	r3, [r0, #6]
 801538a:	4620      	mov	r0, r4
 801538c:	bd10      	pop	{r4, pc}
 801538e:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8015392:	b11b      	cbz	r3, 801539c <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8015394:	3130      	adds	r1, #48	; 0x30
 8015396:	f006 f819 	bl	801b3cc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801539a:	e7f6      	b.n	801538a <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801539c:	312e      	adds	r1, #46	; 0x2e
 801539e:	e7fa      	b.n	8015396 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

080153a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 80153a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153a4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80153a8:	b08a      	sub	sp, #40	; 0x28
 80153aa:	4604      	mov	r4, r0
 80153ac:	4688      	mov	r8, r1
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d066      	beq.n	8015480 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 80153b2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80153b4:	a805      	add	r0, sp, #20
 80153b6:	f8ad 3014 	strh.w	r3, [sp, #20]
 80153ba:	f005 ff9f 	bl	801b2fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80153be:	4607      	mov	r7, r0
 80153c0:	a805      	add	r0, sp, #20
 80153c2:	f005 ffcf 	bl	801b364 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80153c6:	f9b8 6000 	ldrsh.w	r6, [r8]
 80153ca:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80153ce:	2300      	movs	r3, #0
 80153d0:	4432      	add	r2, r6
 80153d2:	9306      	str	r3, [sp, #24]
 80153d4:	b292      	uxth	r2, r2
 80153d6:	fa0f fc82 	sxth.w	ip, r2
 80153da:	459c      	cmp	ip, r3
 80153dc:	dd52      	ble.n	8015484 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80153de:	42b7      	cmp	r7, r6
 80153e0:	dd50      	ble.n	8015484 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80153e2:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 80153e6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80153ea:	442b      	add	r3, r5
 80153ec:	b29b      	uxth	r3, r3
 80153ee:	b219      	sxth	r1, r3
 80153f0:	2900      	cmp	r1, #0
 80153f2:	dd47      	ble.n	8015484 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80153f4:	42a8      	cmp	r0, r5
 80153f6:	dd45      	ble.n	8015484 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80153f8:	4567      	cmp	r7, ip
 80153fa:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80153fe:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8015402:	bfb8      	it	lt
 8015404:	b2ba      	uxthlt	r2, r7
 8015406:	4288      	cmp	r0, r1
 8015408:	f8ad 6018 	strh.w	r6, [sp, #24]
 801540c:	bfb8      	it	lt
 801540e:	b283      	uxthlt	r3, r0
 8015410:	1b92      	subs	r2, r2, r6
 8015412:	f8ad 501a 	strh.w	r5, [sp, #26]
 8015416:	1b5b      	subs	r3, r3, r5
 8015418:	f8ad 201c 	strh.w	r2, [sp, #28]
 801541c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015420:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8015424:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015428:	429a      	cmp	r2, r3
 801542a:	d026      	beq.n	801547a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801542c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8015430:	2b00      	cmp	r3, #0
 8015432:	dd22      	ble.n	801547a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8015434:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8015438:	2b00      	cmp	r3, #0
 801543a:	dd1e      	ble.n	801547a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801543c:	2300      	movs	r3, #0
 801543e:	a908      	add	r1, sp, #32
 8015440:	4620      	mov	r0, r4
 8015442:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8015446:	6823      	ldr	r3, [r4, #0]
 8015448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801544a:	4798      	blx	r3
 801544c:	4b0f      	ldr	r3, [pc, #60]	; (801548c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8015454:	b10a      	cbz	r2, 801545a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8015456:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015458:	b900      	cbnz	r0, 801545c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 801545a:	6898      	ldr	r0, [r3, #8]
 801545c:	2501      	movs	r5, #1
 801545e:	6801      	ldr	r1, [r0, #0]
 8015460:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8015464:	9502      	str	r5, [sp, #8]
 8015466:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801546a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801546e:	9401      	str	r4, [sp, #4]
 8015470:	ac06      	add	r4, sp, #24
 8015472:	9400      	str	r4, [sp, #0]
 8015474:	688c      	ldr	r4, [r1, #8]
 8015476:	a905      	add	r1, sp, #20
 8015478:	47a0      	blx	r4
 801547a:	b00a      	add	sp, #40	; 0x28
 801547c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015480:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8015482:	e797      	b.n	80153b4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8015484:	2300      	movs	r3, #0
 8015486:	9307      	str	r3, [sp, #28]
 8015488:	e7ca      	b.n	8015420 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 801548a:	bf00      	nop
 801548c:	20027ca8 	.word	0x20027ca8

08015490 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8015490:	4b30      	ldr	r3, [pc, #192]	; (8015554 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8015492:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015496:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8015498:	b08d      	sub	sp, #52	; 0x34
 801549a:	881b      	ldrh	r3, [r3, #0]
 801549c:	4604      	mov	r4, r0
 801549e:	460f      	mov	r7, r1
 80154a0:	4293      	cmp	r3, r2
 80154a2:	d954      	bls.n	801554e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80154a4:	4b2c      	ldr	r3, [pc, #176]	; (8015558 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 80154a6:	6819      	ldr	r1, [r3, #0]
 80154a8:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 80154ac:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 80154b0:	4a2a      	ldr	r2, [pc, #168]	; (801555c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 80154b2:	6812      	ldr	r2, [r2, #0]
 80154b4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80154b8:	2900      	cmp	r1, #0
 80154ba:	d048      	beq.n	801554e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80154bc:	785a      	ldrb	r2, [r3, #1]
 80154be:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80154c2:	f3c2 0801 	ubfx	r8, r2, #0, #2
 80154c6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80154ca:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80154ce:	4b24      	ldr	r3, [pc, #144]	; (8015560 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 80154d0:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 80154d4:	681a      	ldr	r2, [r3, #0]
 80154d6:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 80154da:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 80154de:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 80154e2:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80154e4:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 80154e8:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 80154ec:	9107      	str	r1, [sp, #28]
 80154ee:	f88d 8020 	strb.w	r8, [sp, #32]
 80154f2:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 80154f6:	9609      	str	r6, [sp, #36]	; 0x24
 80154f8:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 80154fc:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8015500:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8015504:	b10b      	cbz	r3, 801550a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8015506:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8015508:	b905      	cbnz	r5, 801550c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 801550a:	6895      	ldr	r5, [r2, #8]
 801550c:	ae05      	add	r6, sp, #20
 801550e:	4621      	mov	r1, r4
 8015510:	4630      	mov	r0, r6
 8015512:	f003 fe57 	bl	80191c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015516:	4b13      	ldr	r3, [pc, #76]	; (8015564 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8015518:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801551a:	6818      	ldr	r0, [r3, #0]
 801551c:	f7f0 fbee 	bl	8005cfc <_ZNK8touchgfx5Texts7getTextEt>
 8015520:	6823      	ldr	r3, [r4, #0]
 8015522:	4680      	mov	r8, r0
 8015524:	4620      	mov	r0, r4
 8015526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015528:	4798      	blx	r3
 801552a:	6823      	ldr	r3, [r4, #0]
 801552c:	4681      	mov	r9, r0
 801552e:	4620      	mov	r0, r4
 8015530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015534:	4798      	blx	r3
 8015536:	ab07      	add	r3, sp, #28
 8015538:	f8cd 8004 	str.w	r8, [sp, #4]
 801553c:	9300      	str	r3, [sp, #0]
 801553e:	463b      	mov	r3, r7
 8015540:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8015544:	4628      	mov	r0, r5
 8015546:	e896 0006 	ldmia.w	r6, {r1, r2}
 801554a:	f7f0 fb89 	bl	8005c60 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801554e:	b00d      	add	sp, #52	; 0x34
 8015550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015554:	20027d04 	.word	0x20027d04
 8015558:	20027d00 	.word	0x20027d00
 801555c:	20027d08 	.word	0x20027d08
 8015560:	20027ca8 	.word	0x20027ca8
 8015564:	20027d0c 	.word	0x20027d0c

08015568 <_ZN8touchgfx5ImageD1Ev>:
 8015568:	4770      	bx	lr

0801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801556a:	b570      	push	{r4, r5, r6, lr}
 801556c:	880b      	ldrh	r3, [r1, #0]
 801556e:	460d      	mov	r5, r1
 8015570:	4604      	mov	r4, r0
 8015572:	84c3      	strh	r3, [r0, #38]	; 0x26
 8015574:	4608      	mov	r0, r1
 8015576:	f005 fec1 	bl	801b2fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801557a:	4606      	mov	r6, r0
 801557c:	4628      	mov	r0, r5
 801557e:	f005 fef1 	bl	801b364 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015582:	6823      	ldr	r3, [r4, #0]
 8015584:	4605      	mov	r5, r0
 8015586:	4631      	mov	r1, r6
 8015588:	4620      	mov	r0, r4
 801558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801558c:	4798      	blx	r3
 801558e:	6823      	ldr	r3, [r4, #0]
 8015590:	4629      	mov	r1, r5
 8015592:	4620      	mov	r0, r4
 8015594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801559a:	4718      	bx	r3

0801559c <_ZN8touchgfx5ImageD0Ev>:
 801559c:	b510      	push	{r4, lr}
 801559e:	4604      	mov	r4, r0
 80155a0:	212c      	movs	r1, #44	; 0x2c
 80155a2:	f015 fa0e 	bl	802a9c2 <_ZdlPvj>
 80155a6:	4620      	mov	r0, r4
 80155a8:	bd10      	pop	{r4, pc}

080155aa <_ZNK8touchgfx5Image12getSolidRectEv>:
 80155aa:	b510      	push	{r4, lr}
 80155ac:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80155b0:	4604      	mov	r4, r0
 80155b2:	2bff      	cmp	r3, #255	; 0xff
 80155b4:	d006      	beq.n	80155c4 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80155b6:	2300      	movs	r3, #0
 80155b8:	8003      	strh	r3, [r0, #0]
 80155ba:	8043      	strh	r3, [r0, #2]
 80155bc:	8083      	strh	r3, [r0, #4]
 80155be:	80c3      	strh	r3, [r0, #6]
 80155c0:	4620      	mov	r0, r4
 80155c2:	bd10      	pop	{r4, pc}
 80155c4:	3126      	adds	r1, #38	; 0x26
 80155c6:	f005 ff01 	bl	801b3cc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80155ca:	e7f9      	b.n	80155c0 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

080155cc <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80155cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155d0:	4604      	mov	r4, r0
 80155d2:	b088      	sub	sp, #32
 80155d4:	2500      	movs	r5, #0
 80155d6:	460f      	mov	r7, r1
 80155d8:	f854 3b26 	ldr.w	r3, [r4], #38
 80155dc:	a904      	add	r1, sp, #16
 80155de:	4606      	mov	r6, r0
 80155e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80155e6:	4798      	blx	r3
 80155e8:	4620      	mov	r0, r4
 80155ea:	f005 fe87 	bl	801b2fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80155ee:	4680      	mov	r8, r0
 80155f0:	4620      	mov	r0, r4
 80155f2:	f005 feb7 	bl	801b364 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80155f6:	9506      	str	r5, [sp, #24]
 80155f8:	ad06      	add	r5, sp, #24
 80155fa:	f8ad 001e 	strh.w	r0, [sp, #30]
 80155fe:	4639      	mov	r1, r7
 8015600:	f8ad 801c 	strh.w	r8, [sp, #28]
 8015604:	4628      	mov	r0, r5
 8015606:	f7fc fbcd 	bl	8011da4 <_ZN8touchgfx4RectaNERKS0_>
 801560a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801560e:	2b00      	cmp	r3, #0
 8015610:	dd19      	ble.n	8015646 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8015612:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8015616:	2b00      	cmp	r3, #0
 8015618:	dd15      	ble.n	8015646 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801561a:	4b0c      	ldr	r3, [pc, #48]	; (801564c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8015622:	b10a      	cbz	r2, 8015628 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8015624:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015626:	b900      	cbnz	r0, 801562a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8015628:	6898      	ldr	r0, [r3, #8]
 801562a:	2701      	movs	r7, #1
 801562c:	6801      	ldr	r1, [r0, #0]
 801562e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8015632:	9702      	str	r7, [sp, #8]
 8015634:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8015638:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801563c:	e9cd 5600 	strd	r5, r6, [sp]
 8015640:	688d      	ldr	r5, [r1, #8]
 8015642:	4621      	mov	r1, r4
 8015644:	47a8      	blx	r5
 8015646:	b008      	add	sp, #32
 8015648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801564c:	20027ca8 	.word	0x20027ca8

08015650 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 8015650:	4770      	bx	lr

08015652 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8015652:	b510      	push	{r4, lr}
 8015654:	4604      	mov	r4, r0
 8015656:	2148      	movs	r1, #72	; 0x48
 8015658:	f015 f9b3 	bl	802a9c2 <_ZdlPvj>
 801565c:	4620      	mov	r0, r4
 801565e:	bd10      	pop	{r4, pc}

08015660 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8015660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015664:	b08d      	sub	sp, #52	; 0x34
 8015666:	4604      	mov	r4, r0
 8015668:	460f      	mov	r7, r1
 801566a:	f7ff fe99 	bl	80153a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801566e:	4a55      	ldr	r2, [pc, #340]	; (80157c4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 8015670:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8015672:	8812      	ldrh	r2, [r2, #0]
 8015674:	429a      	cmp	r2, r3
 8015676:	f240 8082 	bls.w	801577e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 801567a:	4d53      	ldr	r5, [pc, #332]	; (80157c8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 801567c:	682a      	ldr	r2, [r5, #0]
 801567e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8015682:	4b52      	ldr	r3, [pc, #328]	; (80157cc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801568a:	2200      	movs	r2, #0
 801568c:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	; 0x46
 8015690:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8015694:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8015698:	2a03      	cmp	r2, #3
 801569a:	d811      	bhi.n	80156c0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 801569c:	e8df f002 	tbb	[pc, r2]
 80156a0:	89727902 	.word	0x89727902
 80156a4:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80156a8:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80156ac:	1ad2      	subs	r2, r2, r3
 80156ae:	2002      	movs	r0, #2
 80156b0:	f8ad 1010 	strh.w	r1, [sp, #16]
 80156b4:	f8ad 3012 	strh.w	r3, [sp, #18]
 80156b8:	fb92 f2f0 	sdiv	r2, r2, r0
 80156bc:	f8ad 200e 	strh.w	r2, [sp, #14]
 80156c0:	f10d 080c 	add.w	r8, sp, #12
 80156c4:	f10d 0914 	add.w	r9, sp, #20
 80156c8:	e898 0003 	ldmia.w	r8, {r0, r1}
 80156cc:	e889 0003 	stmia.w	r9, {r0, r1}
 80156d0:	4639      	mov	r1, r7
 80156d2:	4648      	mov	r0, r9
 80156d4:	f7fc fb66 	bl	8011da4 <_ZN8touchgfx4RectaNERKS0_>
 80156d8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	dd4e      	ble.n	801577e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 80156e0:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	dd4a      	ble.n	801577e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 80156e8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80156ec:	4641      	mov	r1, r8
 80156ee:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80156f2:	4620      	mov	r0, r4
 80156f4:	1a9b      	subs	r3, r3, r2
 80156f6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80156fa:	f8ad 3014 	strh.w	r3, [sp, #20]
 80156fe:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8015702:	1a9b      	subs	r3, r3, r2
 8015704:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015708:	6823      	ldr	r3, [r4, #0]
 801570a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801570c:	4798      	blx	r3
 801570e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015712:	2b00      	cmp	r3, #0
 8015714:	d053      	beq.n	80157be <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 8015716:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8015718:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801571a:	682b      	ldr	r3, [r5, #0]
 801571c:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 8015720:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8015724:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
 8015728:	785b      	ldrb	r3, [r3, #1]
 801572a:	9209      	str	r2, [sp, #36]	; 0x24
 801572c:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8015730:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8015734:	9607      	str	r6, [sp, #28]
 8015736:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801573a:	2300      	movs	r3, #0
 801573c:	f88d 5020 	strb.w	r5, [sp, #32]
 8015740:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8015744:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8015748:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801574c:	4b20      	ldr	r3, [pc, #128]	; (80157d0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 801574e:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8015758:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 801575c:	b10a      	cbz	r2, 8015762 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 801575e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015760:	b904      	cbnz	r4, 8015764 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 8015762:	689c      	ldr	r4, [r3, #8]
 8015764:	4b1b      	ldr	r3, [pc, #108]	; (80157d4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8015766:	6818      	ldr	r0, [r3, #0]
 8015768:	f7f0 fac8 	bl	8005cfc <_ZNK8touchgfx5Texts7getTextEt>
 801576c:	ab07      	add	r3, sp, #28
 801576e:	9001      	str	r0, [sp, #4]
 8015770:	4620      	mov	r0, r4
 8015772:	9300      	str	r3, [sp, #0]
 8015774:	464b      	mov	r3, r9
 8015776:	e898 0006 	ldmia.w	r8, {r1, r2}
 801577a:	f7f0 fa71 	bl	8005c60 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801577e:	b00d      	add	sp, #52	; 0x34
 8015780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015784:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8015788:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 801578c:	1ad2      	subs	r2, r2, r3
 801578e:	3201      	adds	r2, #1
 8015790:	e78d      	b.n	80156ae <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 8015792:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8015796:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 801579a:	1ad2      	subs	r2, r2, r3
 801579c:	3201      	adds	r2, #1
 801579e:	2002      	movs	r0, #2
 80157a0:	f8ad 3010 	strh.w	r3, [sp, #16]
 80157a4:	f8ad 1012 	strh.w	r1, [sp, #18]
 80157a8:	fb92 f2f0 	sdiv	r2, r2, r0
 80157ac:	f8ad 200c 	strh.w	r2, [sp, #12]
 80157b0:	e786      	b.n	80156c0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 80157b2:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80157b6:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80157ba:	1ad2      	subs	r2, r2, r3
 80157bc:	e7ef      	b.n	801579e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 80157be:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80157c0:	e7aa      	b.n	8015718 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 80157c2:	bf00      	nop
 80157c4:	20027d04 	.word	0x20027d04
 80157c8:	20027d00 	.word	0x20027d00
 80157cc:	20027d08 	.word	0x20027d08
 80157d0:	20027ca8 	.word	0x20027ca8
 80157d4:	20027d0c 	.word	0x20027d0c

080157d8 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 80157d8:	2101      	movs	r1, #1
 80157da:	2200      	movs	r2, #0
 80157dc:	b510      	push	{r4, lr}
 80157de:	4c13      	ldr	r4, [pc, #76]	; (801582c <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 80157e0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80157e4:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80157e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80157ec:	6004      	str	r4, [r0, #0]
 80157ee:	4c10      	ldr	r4, [pc, #64]	; (8015830 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 80157f0:	8082      	strh	r2, [r0, #4]
 80157f2:	80c2      	strh	r2, [r0, #6]
 80157f4:	8102      	strh	r2, [r0, #8]
 80157f6:	8142      	strh	r2, [r0, #10]
 80157f8:	8182      	strh	r2, [r0, #12]
 80157fa:	81c2      	strh	r2, [r0, #14]
 80157fc:	8202      	strh	r2, [r0, #16]
 80157fe:	8242      	strh	r2, [r0, #18]
 8015800:	61c2      	str	r2, [r0, #28]
 8015802:	8402      	strh	r2, [r0, #32]
 8015804:	8442      	strh	r2, [r0, #34]	; 0x22
 8015806:	6282      	str	r2, [r0, #40]	; 0x28
 8015808:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 801580c:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801580e:	8601      	strh	r1, [r0, #48]	; 0x30
 8015810:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8015814:	6344      	str	r4, [r0, #52]	; 0x34
 8015816:	8701      	strh	r1, [r0, #56]	; 0x38
 8015818:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801581c:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
 8015820:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015824:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 8015828:	bd10      	pop	{r4, pc}
 801582a:	bf00      	nop
 801582c:	08030cac 	.word	0x08030cac
 8015830:	0802e2a4 	.word	0x0802e2a4

08015834 <_ZN8touchgfx7OutlineD1Ev>:
 8015834:	4770      	bx	lr

08015836 <_ZN8touchgfx7OutlineD0Ev>:
 8015836:	b510      	push	{r4, lr}
 8015838:	4604      	mov	r4, r0
 801583a:	2130      	movs	r1, #48	; 0x30
 801583c:	f015 f8c1 	bl	802a9c2 <_ZdlPvj>
 8015840:	4620      	mov	r0, r4
 8015842:	bd10      	pop	{r4, pc}

08015844 <_ZN8touchgfx7Outline5resetEv>:
 8015844:	b510      	push	{r4, lr}
 8015846:	4604      	mov	r4, r0
 8015848:	f000 fe86 	bl	8016558 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 801584c:	60e0      	str	r0, [r4, #12]
 801584e:	f000 fe89 	bl	8016564 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8015852:	68e3      	ldr	r3, [r4, #12]
 8015854:	08c0      	lsrs	r0, r0, #3
 8015856:	2200      	movs	r2, #0
 8015858:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801585c:	6123      	str	r3, [r4, #16]
 801585e:	3801      	subs	r0, #1
 8015860:	60a2      	str	r2, [r4, #8]
 8015862:	6060      	str	r0, [r4, #4]
 8015864:	8019      	strh	r1, [r3, #0]
 8015866:	8059      	strh	r1, [r3, #2]
 8015868:	809a      	strh	r2, [r3, #4]
 801586a:	80da      	strh	r2, [r3, #6]
 801586c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801586e:	f023 0301 	bic.w	r3, r3, #1
 8015872:	f043 0302 	orr.w	r3, r3, #2
 8015876:	6263      	str	r3, [r4, #36]	; 0x24
 8015878:	bd10      	pop	{r4, pc}
	...

0801587c <_ZN8touchgfx7OutlineC1Ev>:
 801587c:	4b0a      	ldr	r3, [pc, #40]	; (80158a8 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 801587e:	b510      	push	{r4, lr}
 8015880:	6003      	str	r3, [r0, #0]
 8015882:	2300      	movs	r3, #0
 8015884:	4604      	mov	r4, r0
 8015886:	6243      	str	r3, [r0, #36]	; 0x24
 8015888:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801588c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015890:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8015894:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8015898:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801589c:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 80158a0:	f7ff ffd0 	bl	8015844 <_ZN8touchgfx7Outline5resetEv>
 80158a4:	4620      	mov	r0, r4
 80158a6:	bd10      	pop	{r4, pc}
 80158a8:	08030d20 	.word	0x08030d20

080158ac <_ZN8touchgfx7Outline10renderLineEiiii>:
 80158ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158b0:	b093      	sub	sp, #76	; 0x4c
 80158b2:	1156      	asrs	r6, r2, #5
 80158b4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80158b6:	9305      	str	r3, [sp, #20]
 80158b8:	1153      	asrs	r3, r2, #5
 80158ba:	f004 051f 	and.w	r5, r4, #31
 80158be:	9303      	str	r3, [sp, #12]
 80158c0:	1163      	asrs	r3, r4, #5
 80158c2:	9504      	str	r5, [sp, #16]
 80158c4:	1165      	asrs	r5, r4, #5
 80158c6:	9306      	str	r3, [sp, #24]
 80158c8:	f002 031f 	and.w	r3, r2, #31
 80158cc:	42ae      	cmp	r6, r5
 80158ce:	f040 80f4 	bne.w	8015aba <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 80158d2:	9c04      	ldr	r4, [sp, #16]
 80158d4:	9a05      	ldr	r2, [sp, #20]
 80158d6:	42a3      	cmp	r3, r4
 80158d8:	ea4f 1e62 	mov.w	lr, r2, asr #5
 80158dc:	6902      	ldr	r2, [r0, #16]
 80158de:	d125      	bne.n	801592c <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 80158e0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80158e4:	459e      	cmp	lr, r3
 80158e6:	d103      	bne.n	80158f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 80158e8:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80158ec:	429e      	cmp	r6, r3
 80158ee:	d035      	beq.n	801595c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80158f0:	88d1      	ldrh	r1, [r2, #6]
 80158f2:	8893      	ldrh	r3, [r2, #4]
 80158f4:	430b      	orrs	r3, r1
 80158f6:	d010      	beq.n	801591a <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 80158f8:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	db0c      	blt.n	801591a <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8015900:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8015902:	428b      	cmp	r3, r1
 8015904:	da09      	bge.n	801591a <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8015906:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801590a:	428b      	cmp	r3, r1
 801590c:	f103 0301 	add.w	r3, r3, #1
 8015910:	bf38      	it	cc
 8015912:	3208      	addcc	r2, #8
 8015914:	6083      	str	r3, [r0, #8]
 8015916:	bf38      	it	cc
 8015918:	6102      	strcc	r2, [r0, #16]
 801591a:	6903      	ldr	r3, [r0, #16]
 801591c:	9a03      	ldr	r2, [sp, #12]
 801591e:	f8a3 e000 	strh.w	lr, [r3]
 8015922:	805a      	strh	r2, [r3, #2]
 8015924:	2200      	movs	r2, #0
 8015926:	809a      	strh	r2, [r3, #4]
 8015928:	80da      	strh	r2, [r3, #6]
 801592a:	e017      	b.n	801595c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801592c:	9c05      	ldr	r4, [sp, #20]
 801592e:	114e      	asrs	r6, r1, #5
 8015930:	f001 0c1f 	and.w	ip, r1, #31
 8015934:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8015938:	f004 041f 	and.w	r4, r4, #31
 801593c:	4576      	cmp	r6, lr
 801593e:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8015942:	9402      	str	r4, [sp, #8]
 8015944:	9c04      	ldr	r4, [sp, #16]
 8015946:	eba4 0403 	sub.w	r4, r4, r3
 801594a:	d10a      	bne.n	8015962 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 801594c:	9b02      	ldr	r3, [sp, #8]
 801594e:	44a0      	add	r8, r4
 8015950:	449c      	add	ip, r3
 8015952:	f8a2 8004 	strh.w	r8, [r2, #4]
 8015956:	fb04 a40c 	mla	r4, r4, ip, sl
 801595a:	80d4      	strh	r4, [r2, #6]
 801595c:	b013      	add	sp, #76	; 0x4c
 801595e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015962:	9d05      	ldr	r5, [sp, #20]
 8015964:	1a69      	subs	r1, r5, r1
 8015966:	bf51      	iteee	pl
 8015968:	f1cc 0520 	rsbpl	r5, ip, #32
 801596c:	fb04 f40c 	mulmi.w	r4, r4, ip
 8015970:	4249      	negmi	r1, r1
 8015972:	2500      	movmi	r5, #0
 8015974:	bf5d      	ittte	pl
 8015976:	436c      	mulpl	r4, r5
 8015978:	2520      	movpl	r5, #32
 801597a:	f04f 0901 	movpl.w	r9, #1
 801597e:	f04f 39ff 	movmi.w	r9, #4294967295
 8015982:	9501      	str	r5, [sp, #4]
 8015984:	9f01      	ldr	r7, [sp, #4]
 8015986:	444e      	add	r6, r9
 8015988:	fb94 f5f1 	sdiv	r5, r4, r1
 801598c:	fb01 4415 	mls	r4, r1, r5, r4
 8015990:	44bc      	add	ip, r7
 8015992:	2c00      	cmp	r4, #0
 8015994:	bfbc      	itt	lt
 8015996:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801599a:	1864      	addlt	r4, r4, r1
 801599c:	44a8      	add	r8, r5
 801599e:	fb05 ac0c 	mla	ip, r5, ip, sl
 80159a2:	f8a2 8004 	strh.w	r8, [r2, #4]
 80159a6:	f8a2 c006 	strh.w	ip, [r2, #6]
 80159aa:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80159ae:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80159b2:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80159b6:	ea58 0202 	orrs.w	r2, r8, r2
 80159ba:	d011      	beq.n	80159e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80159bc:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80159c0:	f1b8 0f00 	cmp.w	r8, #0
 80159c4:	db0c      	blt.n	80159e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80159c6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80159c8:	4590      	cmp	r8, r2
 80159ca:	da09      	bge.n	80159e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80159cc:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 80159d0:	4590      	cmp	r8, r2
 80159d2:	bf3c      	itt	cc
 80159d4:	f10c 0208 	addcc.w	r2, ip, #8
 80159d8:	6102      	strcc	r2, [r0, #16]
 80159da:	f108 0201 	add.w	r2, r8, #1
 80159de:	6082      	str	r2, [r0, #8]
 80159e0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80159e4:	2700      	movs	r7, #0
 80159e6:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80159ea:	45b6      	cmp	lr, r6
 80159ec:	f8ac 6000 	strh.w	r6, [ip]
 80159f0:	442b      	add	r3, r5
 80159f2:	f8ac 2002 	strh.w	r2, [ip, #2]
 80159f6:	f8ac 7004 	strh.w	r7, [ip, #4]
 80159fa:	f8ac 7006 	strh.w	r7, [ip, #6]
 80159fe:	d04b      	beq.n	8015a98 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8015a00:	9f04      	ldr	r7, [sp, #16]
 8015a02:	1a64      	subs	r4, r4, r1
 8015a04:	f04f 0a00 	mov.w	sl, #0
 8015a08:	1aff      	subs	r7, r7, r3
 8015a0a:	443d      	add	r5, r7
 8015a0c:	016d      	lsls	r5, r5, #5
 8015a0e:	fb95 f8f1 	sdiv	r8, r5, r1
 8015a12:	fb01 5518 	mls	r5, r1, r8, r5
 8015a16:	2d00      	cmp	r5, #0
 8015a18:	bfbc      	itt	lt
 8015a1a:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8015a1e:	186d      	addlt	r5, r5, r1
 8015a20:	f108 0701 	add.w	r7, r8, #1
 8015a24:	9703      	str	r7, [sp, #12]
 8015a26:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015a2a:	1964      	adds	r4, r4, r5
 8015a2c:	444e      	add	r6, r9
 8015a2e:	bf54      	ite	pl
 8015a30:	9f03      	ldrpl	r7, [sp, #12]
 8015a32:	4647      	movmi	r7, r8
 8015a34:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8015a38:	bf58      	it	pl
 8015a3a:	1a64      	subpl	r4, r4, r1
 8015a3c:	443b      	add	r3, r7
 8015a3e:	44bb      	add	fp, r7
 8015a40:	f8ac b004 	strh.w	fp, [ip, #4]
 8015a44:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8015a48:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8015a4c:	f8ac b006 	strh.w	fp, [ip, #6]
 8015a50:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015a54:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8015a58:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8015a5c:	ea5b 0707 	orrs.w	r7, fp, r7
 8015a60:	d011      	beq.n	8015a86 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8015a62:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8015a66:	f1bb 0f00 	cmp.w	fp, #0
 8015a6a:	db0c      	blt.n	8015a86 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8015a6c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8015a6e:	45bb      	cmp	fp, r7
 8015a70:	da09      	bge.n	8015a86 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8015a72:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8015a76:	45bb      	cmp	fp, r7
 8015a78:	bf3c      	itt	cc
 8015a7a:	f10c 0708 	addcc.w	r7, ip, #8
 8015a7e:	6107      	strcc	r7, [r0, #16]
 8015a80:	f10b 0701 	add.w	r7, fp, #1
 8015a84:	6087      	str	r7, [r0, #8]
 8015a86:	6907      	ldr	r7, [r0, #16]
 8015a88:	45b6      	cmp	lr, r6
 8015a8a:	803e      	strh	r6, [r7, #0]
 8015a8c:	807a      	strh	r2, [r7, #2]
 8015a8e:	f8a7 a004 	strh.w	sl, [r7, #4]
 8015a92:	f8a7 a006 	strh.w	sl, [r7, #6]
 8015a96:	d1c6      	bne.n	8015a26 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8015a98:	9a04      	ldr	r2, [sp, #16]
 8015a9a:	1ad3      	subs	r3, r2, r3
 8015a9c:	6902      	ldr	r2, [r0, #16]
 8015a9e:	8891      	ldrh	r1, [r2, #4]
 8015aa0:	88d6      	ldrh	r6, [r2, #6]
 8015aa2:	4419      	add	r1, r3
 8015aa4:	8091      	strh	r1, [r2, #4]
 8015aa6:	9902      	ldr	r1, [sp, #8]
 8015aa8:	f101 0c20 	add.w	ip, r1, #32
 8015aac:	9901      	ldr	r1, [sp, #4]
 8015aae:	ebac 0c01 	sub.w	ip, ip, r1
 8015ab2:	fb03 630c 	mla	r3, r3, ip, r6
 8015ab6:	80d3      	strh	r3, [r2, #6]
 8015ab8:	e750      	b.n	801595c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8015aba:	9d05      	ldr	r5, [sp, #20]
 8015abc:	1aa2      	subs	r2, r4, r2
 8015abe:	eba5 0501 	sub.w	r5, r5, r1
 8015ac2:	9202      	str	r2, [sp, #8]
 8015ac4:	9508      	str	r5, [sp, #32]
 8015ac6:	f140 8128 	bpl.w	8015d1a <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8015aca:	9a03      	ldr	r2, [sp, #12]
 8015acc:	2a00      	cmp	r2, #0
 8015ace:	f6ff af45 	blt.w	801595c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8015ad2:	9a02      	ldr	r2, [sp, #8]
 8015ad4:	f04f 34ff 	mov.w	r4, #4294967295
 8015ad8:	4252      	negs	r2, r2
 8015ada:	940b      	str	r4, [sp, #44]	; 0x2c
 8015adc:	2400      	movs	r4, #0
 8015ade:	9202      	str	r2, [sp, #8]
 8015ae0:	9a06      	ldr	r2, [sp, #24]
 8015ae2:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8015ae6:	9206      	str	r2, [sp, #24]
 8015ae8:	462a      	mov	r2, r5
 8015aea:	435a      	muls	r2, r3
 8015aec:	9401      	str	r4, [sp, #4]
 8015aee:	9c02      	ldr	r4, [sp, #8]
 8015af0:	9d02      	ldr	r5, [sp, #8]
 8015af2:	fb92 f4f4 	sdiv	r4, r2, r4
 8015af6:	fb05 2214 	mls	r2, r5, r4, r2
 8015afa:	2a00      	cmp	r2, #0
 8015afc:	9207      	str	r2, [sp, #28]
 8015afe:	bfbc      	itt	lt
 8015b00:	1952      	addlt	r2, r2, r5
 8015b02:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8015b06:	6905      	ldr	r5, [r0, #16]
 8015b08:	bfb8      	it	lt
 8015b0a:	9207      	strlt	r2, [sp, #28]
 8015b0c:	eb04 0901 	add.w	r9, r4, r1
 8015b10:	9a01      	ldr	r2, [sp, #4]
 8015b12:	ea4f 1669 	mov.w	r6, r9, asr #5
 8015b16:	429a      	cmp	r2, r3
 8015b18:	f040 8111 	bne.w	8015d3e <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8015b1c:	f9b5 3000 	ldrsh.w	r3, [r5]
 8015b20:	429e      	cmp	r6, r3
 8015b22:	d104      	bne.n	8015b2e <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8015b24:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8015b28:	9a03      	ldr	r2, [sp, #12]
 8015b2a:	429a      	cmp	r2, r3
 8015b2c:	d01b      	beq.n	8015b66 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8015b2e:	88ea      	ldrh	r2, [r5, #6]
 8015b30:	88ab      	ldrh	r3, [r5, #4]
 8015b32:	4313      	orrs	r3, r2
 8015b34:	d010      	beq.n	8015b58 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8015b36:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015b3a:	2a00      	cmp	r2, #0
 8015b3c:	db0c      	blt.n	8015b58 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8015b3e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015b40:	429a      	cmp	r2, r3
 8015b42:	da09      	bge.n	8015b58 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8015b44:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8015b48:	429a      	cmp	r2, r3
 8015b4a:	f102 0201 	add.w	r2, r2, #1
 8015b4e:	bf38      	it	cc
 8015b50:	3508      	addcc	r5, #8
 8015b52:	6082      	str	r2, [r0, #8]
 8015b54:	bf38      	it	cc
 8015b56:	6105      	strcc	r5, [r0, #16]
 8015b58:	6903      	ldr	r3, [r0, #16]
 8015b5a:	9a03      	ldr	r2, [sp, #12]
 8015b5c:	801e      	strh	r6, [r3, #0]
 8015b5e:	805a      	strh	r2, [r3, #2]
 8015b60:	2200      	movs	r2, #0
 8015b62:	809a      	strh	r2, [r3, #4]
 8015b64:	80da      	strh	r2, [r3, #6]
 8015b66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b68:	9a03      	ldr	r2, [sp, #12]
 8015b6a:	6901      	ldr	r1, [r0, #16]
 8015b6c:	441a      	add	r2, r3
 8015b6e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015b72:	42b3      	cmp	r3, r6
 8015b74:	d103      	bne.n	8015b7e <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8015b76:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8015b7a:	429a      	cmp	r2, r3
 8015b7c:	d01a      	beq.n	8015bb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8015b7e:	88cc      	ldrh	r4, [r1, #6]
 8015b80:	888b      	ldrh	r3, [r1, #4]
 8015b82:	4323      	orrs	r3, r4
 8015b84:	d010      	beq.n	8015ba8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8015b86:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8015b8a:	2c00      	cmp	r4, #0
 8015b8c:	db0c      	blt.n	8015ba8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8015b8e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015b90:	429c      	cmp	r4, r3
 8015b92:	da09      	bge.n	8015ba8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8015b94:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8015b98:	429c      	cmp	r4, r3
 8015b9a:	f104 0401 	add.w	r4, r4, #1
 8015b9e:	bf38      	it	cc
 8015ba0:	3108      	addcc	r1, #8
 8015ba2:	6084      	str	r4, [r0, #8]
 8015ba4:	bf38      	it	cc
 8015ba6:	6101      	strcc	r1, [r0, #16]
 8015ba8:	6903      	ldr	r3, [r0, #16]
 8015baa:	2100      	movs	r1, #0
 8015bac:	801e      	strh	r6, [r3, #0]
 8015bae:	805a      	strh	r2, [r3, #2]
 8015bb0:	8099      	strh	r1, [r3, #4]
 8015bb2:	80d9      	strh	r1, [r3, #6]
 8015bb4:	9b06      	ldr	r3, [sp, #24]
 8015bb6:	4293      	cmp	r3, r2
 8015bb8:	f000 8082 	beq.w	8015cc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8015bbc:	9b08      	ldr	r3, [sp, #32]
 8015bbe:	9902      	ldr	r1, [sp, #8]
 8015bc0:	015b      	lsls	r3, r3, #5
 8015bc2:	9c02      	ldr	r4, [sp, #8]
 8015bc4:	fb93 f1f1 	sdiv	r1, r3, r1
 8015bc8:	fb04 3311 	mls	r3, r4, r1, r3
 8015bcc:	9103      	str	r1, [sp, #12]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	9308      	str	r3, [sp, #32]
 8015bd2:	da04      	bge.n	8015bde <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8015bd4:	1e4b      	subs	r3, r1, #1
 8015bd6:	9303      	str	r3, [sp, #12]
 8015bd8:	9b08      	ldr	r3, [sp, #32]
 8015bda:	4423      	add	r3, r4
 8015bdc:	9308      	str	r3, [sp, #32]
 8015bde:	9b07      	ldr	r3, [sp, #28]
 8015be0:	464f      	mov	r7, r9
 8015be2:	9902      	ldr	r1, [sp, #8]
 8015be4:	2600      	movs	r6, #0
 8015be6:	1a5b      	subs	r3, r3, r1
 8015be8:	9307      	str	r3, [sp, #28]
 8015bea:	9b01      	ldr	r3, [sp, #4]
 8015bec:	f1c3 0320 	rsb	r3, r3, #32
 8015bf0:	930e      	str	r3, [sp, #56]	; 0x38
 8015bf2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015bf4:	9b01      	ldr	r3, [sp, #4]
 8015bf6:	1a5b      	subs	r3, r3, r1
 8015bf8:	930a      	str	r3, [sp, #40]	; 0x28
 8015bfa:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8015bfe:	185b      	adds	r3, r3, r1
 8015c00:	bf58      	it	pl
 8015c02:	9902      	ldrpl	r1, [sp, #8]
 8015c04:	9307      	str	r3, [sp, #28]
 8015c06:	bf57      	itett	pl
 8015c08:	1a5b      	subpl	r3, r3, r1
 8015c0a:	9903      	ldrmi	r1, [sp, #12]
 8015c0c:	9307      	strpl	r3, [sp, #28]
 8015c0e:	9b03      	ldrpl	r3, [sp, #12]
 8015c10:	bf58      	it	pl
 8015c12:	1c59      	addpl	r1, r3, #1
 8015c14:	2a00      	cmp	r2, #0
 8015c16:	4489      	add	r9, r1
 8015c18:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8015c1c:	db2e      	blt.n	8015c7c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8015c1e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015c20:	4293      	cmp	r3, r2
 8015c22:	dd2b      	ble.n	8015c7c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8015c24:	9c01      	ldr	r4, [sp, #4]
 8015c26:	6905      	ldr	r5, [r0, #16]
 8015c28:	46a0      	mov	r8, r4
 8015c2a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015c2c:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8015c30:	45a0      	cmp	r8, r4
 8015c32:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8015c36:	f040 814c 	bne.w	8015ed2 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8015c3a:	f9b5 1000 	ldrsh.w	r1, [r5]
 8015c3e:	4551      	cmp	r1, sl
 8015c40:	d103      	bne.n	8015c4a <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8015c42:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8015c46:	4291      	cmp	r1, r2
 8015c48:	d018      	beq.n	8015c7c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8015c4a:	ea5c 010e 	orrs.w	r1, ip, lr
 8015c4e:	d00f      	beq.n	8015c70 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8015c50:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8015c54:	2900      	cmp	r1, #0
 8015c56:	db0b      	blt.n	8015c70 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8015c58:	428b      	cmp	r3, r1
 8015c5a:	dd09      	ble.n	8015c70 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8015c5c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8015c60:	4299      	cmp	r1, r3
 8015c62:	f101 0101 	add.w	r1, r1, #1
 8015c66:	bf38      	it	cc
 8015c68:	3508      	addcc	r5, #8
 8015c6a:	6081      	str	r1, [r0, #8]
 8015c6c:	bf38      	it	cc
 8015c6e:	6105      	strcc	r5, [r0, #16]
 8015c70:	6903      	ldr	r3, [r0, #16]
 8015c72:	f8a3 a000 	strh.w	sl, [r3]
 8015c76:	805a      	strh	r2, [r3, #2]
 8015c78:	809e      	strh	r6, [r3, #4]
 8015c7a:	80de      	strh	r6, [r3, #6]
 8015c7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c7e:	6901      	ldr	r1, [r0, #16]
 8015c80:	441a      	add	r2, r3
 8015c82:	88cc      	ldrh	r4, [r1, #6]
 8015c84:	888b      	ldrh	r3, [r1, #4]
 8015c86:	4323      	orrs	r3, r4
 8015c88:	d010      	beq.n	8015cac <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8015c8a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8015c8e:	2c00      	cmp	r4, #0
 8015c90:	db0c      	blt.n	8015cac <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8015c92:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015c94:	429c      	cmp	r4, r3
 8015c96:	da09      	bge.n	8015cac <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8015c98:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8015c9c:	429c      	cmp	r4, r3
 8015c9e:	f104 0401 	add.w	r4, r4, #1
 8015ca2:	bf38      	it	cc
 8015ca4:	3108      	addcc	r1, #8
 8015ca6:	6084      	str	r4, [r0, #8]
 8015ca8:	bf38      	it	cc
 8015caa:	6101      	strcc	r1, [r0, #16]
 8015cac:	6903      	ldr	r3, [r0, #16]
 8015cae:	464f      	mov	r7, r9
 8015cb0:	f8a3 a000 	strh.w	sl, [r3]
 8015cb4:	805a      	strh	r2, [r3, #2]
 8015cb6:	809e      	strh	r6, [r3, #4]
 8015cb8:	80de      	strh	r6, [r3, #6]
 8015cba:	9b06      	ldr	r3, [sp, #24]
 8015cbc:	4293      	cmp	r3, r2
 8015cbe:	d19c      	bne.n	8015bfa <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8015cc0:	9b01      	ldr	r3, [sp, #4]
 8015cc2:	6907      	ldr	r7, [r0, #16]
 8015cc4:	f1c3 0620 	rsb	r6, r3, #32
 8015cc8:	9b05      	ldr	r3, [sp, #20]
 8015cca:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8015cce:	9b04      	ldr	r3, [sp, #16]
 8015cd0:	429e      	cmp	r6, r3
 8015cd2:	f040 81c7 	bne.w	8016064 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8015cd6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015cda:	459e      	cmp	lr, r3
 8015cdc:	d104      	bne.n	8015ce8 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8015cde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015ce2:	429a      	cmp	r2, r3
 8015ce4:	f43f ae3a 	beq.w	801595c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8015ce8:	88f9      	ldrh	r1, [r7, #6]
 8015cea:	88bb      	ldrh	r3, [r7, #4]
 8015cec:	430b      	orrs	r3, r1
 8015cee:	d010      	beq.n	8015d12 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8015cf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	db0c      	blt.n	8015d12 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8015cf8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8015cfa:	428b      	cmp	r3, r1
 8015cfc:	da09      	bge.n	8015d12 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8015cfe:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8015d02:	428b      	cmp	r3, r1
 8015d04:	f103 0301 	add.w	r3, r3, #1
 8015d08:	bf38      	it	cc
 8015d0a:	3708      	addcc	r7, #8
 8015d0c:	6083      	str	r3, [r0, #8]
 8015d0e:	bf38      	it	cc
 8015d10:	6107      	strcc	r7, [r0, #16]
 8015d12:	6903      	ldr	r3, [r0, #16]
 8015d14:	f8a3 e000 	strh.w	lr, [r3]
 8015d18:	e603      	b.n	8015922 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8015d1a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8015d1c:	9c03      	ldr	r4, [sp, #12]
 8015d1e:	42a2      	cmp	r2, r4
 8015d20:	f6ff ae1c 	blt.w	801595c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8015d24:	9c06      	ldr	r4, [sp, #24]
 8015d26:	42a2      	cmp	r2, r4
 8015d28:	9c08      	ldr	r4, [sp, #32]
 8015d2a:	bfbc      	itt	lt
 8015d2c:	3201      	addlt	r2, #1
 8015d2e:	9206      	strlt	r2, [sp, #24]
 8015d30:	f1c3 0220 	rsb	r2, r3, #32
 8015d34:	4362      	muls	r2, r4
 8015d36:	2401      	movs	r4, #1
 8015d38:	940b      	str	r4, [sp, #44]	; 0x2c
 8015d3a:	2420      	movs	r4, #32
 8015d3c:	e6d6      	b.n	8015aec <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8015d3e:	ea4f 1861 	mov.w	r8, r1, asr #5
 8015d42:	f009 021f 	and.w	r2, r9, #31
 8015d46:	f001 011f 	and.w	r1, r1, #31
 8015d4a:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8015d4e:	920c      	str	r2, [sp, #48]	; 0x30
 8015d50:	45b0      	cmp	r8, r6
 8015d52:	9a01      	ldr	r2, [sp, #4]
 8015d54:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8015d58:	eba2 0203 	sub.w	r2, r2, r3
 8015d5c:	d108      	bne.n	8015d70 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8015d5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d60:	4496      	add	lr, r2
 8015d62:	4419      	add	r1, r3
 8015d64:	f8a5 e004 	strh.w	lr, [r5, #4]
 8015d68:	fb02 a101 	mla	r1, r2, r1, sl
 8015d6c:	80e9      	strh	r1, [r5, #6]
 8015d6e:	e6fa      	b.n	8015b66 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8015d70:	2c00      	cmp	r4, #0
 8015d72:	f2c0 80a7 	blt.w	8015ec4 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8015d76:	2701      	movs	r7, #1
 8015d78:	f1c1 0c20 	rsb	ip, r1, #32
 8015d7c:	970a      	str	r7, [sp, #40]	; 0x28
 8015d7e:	2720      	movs	r7, #32
 8015d80:	fb02 f20c 	mul.w	r2, r2, ip
 8015d84:	9709      	str	r7, [sp, #36]	; 0x24
 8015d86:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015d88:	fb92 fcf4 	sdiv	ip, r2, r4
 8015d8c:	fb04 221c 	mls	r2, r4, ip, r2
 8015d90:	4439      	add	r1, r7
 8015d92:	2a00      	cmp	r2, #0
 8015d94:	bfbc      	itt	lt
 8015d96:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8015d9a:	1912      	addlt	r2, r2, r4
 8015d9c:	fb0c a101 	mla	r1, ip, r1, sl
 8015da0:	44e6      	add	lr, ip
 8015da2:	80e9      	strh	r1, [r5, #6]
 8015da4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015da6:	f8a5 e004 	strh.w	lr, [r5, #4]
 8015daa:	eb08 0501 	add.w	r5, r8, r1
 8015dae:	6901      	ldr	r1, [r0, #16]
 8015db0:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8015db4:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8015db8:	ea58 070e 	orrs.w	r7, r8, lr
 8015dbc:	d010      	beq.n	8015de0 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8015dbe:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8015dc2:	f1be 0f00 	cmp.w	lr, #0
 8015dc6:	db0b      	blt.n	8015de0 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8015dc8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8015dca:	45be      	cmp	lr, r7
 8015dcc:	da08      	bge.n	8015de0 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8015dce:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8015dd2:	45be      	cmp	lr, r7
 8015dd4:	bf3c      	itt	cc
 8015dd6:	3108      	addcc	r1, #8
 8015dd8:	6101      	strcc	r1, [r0, #16]
 8015dda:	f10e 0101 	add.w	r1, lr, #1
 8015dde:	6081      	str	r1, [r0, #8]
 8015de0:	6901      	ldr	r1, [r0, #16]
 8015de2:	f04f 0e00 	mov.w	lr, #0
 8015de6:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8015dea:	42ae      	cmp	r6, r5
 8015dec:	800d      	strh	r5, [r1, #0]
 8015dee:	4463      	add	r3, ip
 8015df0:	f8a1 8002 	strh.w	r8, [r1, #2]
 8015df4:	f8a1 e004 	strh.w	lr, [r1, #4]
 8015df8:	f8a1 e006 	strh.w	lr, [r1, #6]
 8015dfc:	d053      	beq.n	8015ea6 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8015dfe:	9901      	ldr	r1, [sp, #4]
 8015e00:	1b12      	subs	r2, r2, r4
 8015e02:	1ac9      	subs	r1, r1, r3
 8015e04:	4461      	add	r1, ip
 8015e06:	0149      	lsls	r1, r1, #5
 8015e08:	fb91 fef4 	sdiv	lr, r1, r4
 8015e0c:	fb04 111e 	mls	r1, r4, lr, r1
 8015e10:	2900      	cmp	r1, #0
 8015e12:	bfbc      	itt	lt
 8015e14:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8015e18:	1909      	addlt	r1, r1, r4
 8015e1a:	f10e 0701 	add.w	r7, lr, #1
 8015e1e:	970d      	str	r7, [sp, #52]	; 0x34
 8015e20:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8015e24:	1852      	adds	r2, r2, r1
 8015e26:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015e28:	bf54      	ite	pl
 8015e2a:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 8015e2e:	46f4      	movmi	ip, lr
 8015e30:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8015e34:	bf58      	it	pl
 8015e36:	1b12      	subpl	r2, r2, r4
 8015e38:	4463      	add	r3, ip
 8015e3a:	443d      	add	r5, r7
 8015e3c:	44e3      	add	fp, ip
 8015e3e:	f8aa b004 	strh.w	fp, [sl, #4]
 8015e42:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8015e46:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8015e4a:	f8aa b006 	strh.w	fp, [sl, #6]
 8015e4e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015e52:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8015e56:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8015e5a:	ea5b 070a 	orrs.w	r7, fp, sl
 8015e5e:	d014      	beq.n	8015e8a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8015e60:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8015e64:	f1ba 0f00 	cmp.w	sl, #0
 8015e68:	db0f      	blt.n	8015e8a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8015e6a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8015e6c:	45ba      	cmp	sl, r7
 8015e6e:	da0c      	bge.n	8015e8a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8015e70:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8015e74:	45ba      	cmp	sl, r7
 8015e76:	f10a 0a01 	add.w	sl, sl, #1
 8015e7a:	bf38      	it	cc
 8015e7c:	f10c 0c08 	addcc.w	ip, ip, #8
 8015e80:	f8c0 a008 	str.w	sl, [r0, #8]
 8015e84:	bf38      	it	cc
 8015e86:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8015e8a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015e8e:	f04f 0700 	mov.w	r7, #0
 8015e92:	42ae      	cmp	r6, r5
 8015e94:	f8ac 5000 	strh.w	r5, [ip]
 8015e98:	f8ac 8002 	strh.w	r8, [ip, #2]
 8015e9c:	f8ac 7004 	strh.w	r7, [ip, #4]
 8015ea0:	f8ac 7006 	strh.w	r7, [ip, #6]
 8015ea4:	d1bc      	bne.n	8015e20 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8015ea6:	6904      	ldr	r4, [r0, #16]
 8015ea8:	9a01      	ldr	r2, [sp, #4]
 8015eaa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015eac:	1ad3      	subs	r3, r2, r3
 8015eae:	88a2      	ldrh	r2, [r4, #4]
 8015eb0:	3120      	adds	r1, #32
 8015eb2:	441a      	add	r2, r3
 8015eb4:	80a2      	strh	r2, [r4, #4]
 8015eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015eb8:	1a89      	subs	r1, r1, r2
 8015eba:	88e2      	ldrh	r2, [r4, #6]
 8015ebc:	fb03 2301 	mla	r3, r3, r1, r2
 8015ec0:	80e3      	strh	r3, [r4, #6]
 8015ec2:	e650      	b.n	8015b66 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8015ec4:	f04f 37ff 	mov.w	r7, #4294967295
 8015ec8:	434a      	muls	r2, r1
 8015eca:	4264      	negs	r4, r4
 8015ecc:	970a      	str	r7, [sp, #40]	; 0x28
 8015ece:	2700      	movs	r7, #0
 8015ed0:	e758      	b.n	8015d84 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8015ed2:	ea4f 1867 	mov.w	r8, r7, asr #5
 8015ed6:	f009 031f 	and.w	r3, r9, #31
 8015eda:	f007 071f 	and.w	r7, r7, #31
 8015ede:	fa1f fc8c 	uxth.w	ip, ip
 8015ee2:	45d0      	cmp	r8, sl
 8015ee4:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ee6:	fa1f fe8e 	uxth.w	lr, lr
 8015eea:	d10a      	bne.n	8015f02 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8015eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015eee:	449c      	add	ip, r3
 8015ef0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ef2:	441f      	add	r7, r3
 8015ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ef6:	f8a5 c004 	strh.w	ip, [r5, #4]
 8015efa:	fb03 e707 	mla	r7, r3, r7, lr
 8015efe:	80ef      	strh	r7, [r5, #6]
 8015f00:	e6bc      	b.n	8015c7c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8015f02:	2900      	cmp	r1, #0
 8015f04:	f2c0 80a6 	blt.w	8016054 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8015f08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015f0a:	f1c7 0320 	rsb	r3, r7, #32
 8015f0e:	4363      	muls	r3, r4
 8015f10:	2401      	movs	r4, #1
 8015f12:	940d      	str	r4, [sp, #52]	; 0x34
 8015f14:	2420      	movs	r4, #32
 8015f16:	940c      	str	r4, [sp, #48]	; 0x30
 8015f18:	fb93 f4f1 	sdiv	r4, r3, r1
 8015f1c:	fb01 3b14 	mls	fp, r1, r4, r3
 8015f20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f22:	f1bb 0f00 	cmp.w	fp, #0
 8015f26:	441f      	add	r7, r3
 8015f28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f2a:	bfbc      	itt	lt
 8015f2c:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8015f30:	448b      	addlt	fp, r1
 8015f32:	fb04 e707 	mla	r7, r4, r7, lr
 8015f36:	44a4      	add	ip, r4
 8015f38:	80ef      	strh	r7, [r5, #6]
 8015f3a:	f8a5 c004 	strh.w	ip, [r5, #4]
 8015f3e:	eb08 0503 	add.w	r5, r8, r3
 8015f42:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015f46:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8015f4a:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8015f4e:	ea5e 0307 	orrs.w	r3, lr, r7
 8015f52:	d011      	beq.n	8015f78 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8015f54:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8015f58:	f1be 0f00 	cmp.w	lr, #0
 8015f5c:	db0c      	blt.n	8015f78 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8015f5e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8015f60:	45be      	cmp	lr, r7
 8015f62:	da09      	bge.n	8015f78 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8015f64:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8015f68:	45be      	cmp	lr, r7
 8015f6a:	bf3c      	itt	cc
 8015f6c:	f10c 0708 	addcc.w	r7, ip, #8
 8015f70:	6107      	strcc	r7, [r0, #16]
 8015f72:	f10e 0701 	add.w	r7, lr, #1
 8015f76:	6087      	str	r7, [r0, #8]
 8015f78:	6907      	ldr	r7, [r0, #16]
 8015f7a:	b213      	sxth	r3, r2
 8015f7c:	4555      	cmp	r5, sl
 8015f7e:	9310      	str	r3, [sp, #64]	; 0x40
 8015f80:	807b      	strh	r3, [r7, #2]
 8015f82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f84:	803d      	strh	r5, [r7, #0]
 8015f86:	80be      	strh	r6, [r7, #4]
 8015f88:	eb04 0c03 	add.w	ip, r4, r3
 8015f8c:	80fe      	strh	r6, [r7, #6]
 8015f8e:	d050      	beq.n	8016032 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8015f90:	9b01      	ldr	r3, [sp, #4]
 8015f92:	eba3 070c 	sub.w	r7, r3, ip
 8015f96:	ebab 0301 	sub.w	r3, fp, r1
 8015f9a:	443c      	add	r4, r7
 8015f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8015f9e:	0164      	lsls	r4, r4, #5
 8015fa0:	fb94 f8f1 	sdiv	r8, r4, r1
 8015fa4:	fb01 4418 	mls	r4, r1, r8, r4
 8015fa8:	2c00      	cmp	r4, #0
 8015faa:	bfbc      	itt	lt
 8015fac:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8015fb0:	1864      	addlt	r4, r4, r1
 8015fb2:	f108 0701 	add.w	r7, r8, #1
 8015fb6:	9711      	str	r7, [sp, #68]	; 0x44
 8015fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fba:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8015fbe:	191b      	adds	r3, r3, r4
 8015fc0:	f8be b004 	ldrh.w	fp, [lr, #4]
 8015fc4:	bf54      	ite	pl
 8015fc6:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 8015fc8:	4647      	movmi	r7, r8
 8015fca:	9309      	str	r3, [sp, #36]	; 0x24
 8015fcc:	bf58      	it	pl
 8015fce:	1a5b      	subpl	r3, r3, r1
 8015fd0:	44bb      	add	fp, r7
 8015fd2:	44bc      	add	ip, r7
 8015fd4:	bf58      	it	pl
 8015fd6:	9309      	strpl	r3, [sp, #36]	; 0x24
 8015fd8:	f8ae b004 	strh.w	fp, [lr, #4]
 8015fdc:	f8be b006 	ldrh.w	fp, [lr, #6]
 8015fe0:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8015fe4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015fe6:	f8ae b006 	strh.w	fp, [lr, #6]
 8015fea:	443d      	add	r5, r7
 8015fec:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8015ff0:	f8be b006 	ldrh.w	fp, [lr, #6]
 8015ff4:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8015ff8:	ea5b 0307 	orrs.w	r3, fp, r7
 8015ffc:	d011      	beq.n	8016022 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8015ffe:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8016002:	f1bb 0f00 	cmp.w	fp, #0
 8016006:	db0c      	blt.n	8016022 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8016008:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801600a:	45bb      	cmp	fp, r7
 801600c:	da09      	bge.n	8016022 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801600e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8016012:	45bb      	cmp	fp, r7
 8016014:	bf3c      	itt	cc
 8016016:	f10e 0708 	addcc.w	r7, lr, #8
 801601a:	6107      	strcc	r7, [r0, #16]
 801601c:	f10b 0701 	add.w	r7, fp, #1
 8016020:	6087      	str	r7, [r0, #8]
 8016022:	6907      	ldr	r7, [r0, #16]
 8016024:	4555      	cmp	r5, sl
 8016026:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016028:	803d      	strh	r5, [r7, #0]
 801602a:	807b      	strh	r3, [r7, #2]
 801602c:	80be      	strh	r6, [r7, #4]
 801602e:	80fe      	strh	r6, [r7, #6]
 8016030:	d1c2      	bne.n	8015fb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8016032:	9b01      	ldr	r3, [sp, #4]
 8016034:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8016036:	eba3 0c0c 	sub.w	ip, r3, ip
 801603a:	6903      	ldr	r3, [r0, #16]
 801603c:	3720      	adds	r7, #32
 801603e:	8899      	ldrh	r1, [r3, #4]
 8016040:	4461      	add	r1, ip
 8016042:	8099      	strh	r1, [r3, #4]
 8016044:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016046:	1a7f      	subs	r7, r7, r1
 8016048:	88d9      	ldrh	r1, [r3, #6]
 801604a:	fb0c 1c07 	mla	ip, ip, r7, r1
 801604e:	f8a3 c006 	strh.w	ip, [r3, #6]
 8016052:	e613      	b.n	8015c7c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8016054:	f04f 34ff 	mov.w	r4, #4294967295
 8016058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801605a:	4249      	negs	r1, r1
 801605c:	940d      	str	r4, [sp, #52]	; 0x34
 801605e:	2400      	movs	r4, #0
 8016060:	437b      	muls	r3, r7
 8016062:	e758      	b.n	8015f16 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8016064:	9905      	ldr	r1, [sp, #20]
 8016066:	ea4f 1b69 	mov.w	fp, r9, asr #5
 801606a:	f009 0c1f 	and.w	ip, r9, #31
 801606e:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8016072:	f001 011f 	and.w	r1, r1, #31
 8016076:	45f3      	cmp	fp, lr
 8016078:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 801607c:	9102      	str	r1, [sp, #8]
 801607e:	9904      	ldr	r1, [sp, #16]
 8016080:	eba1 0406 	sub.w	r4, r1, r6
 8016084:	d108      	bne.n	8016098 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8016086:	9b02      	ldr	r3, [sp, #8]
 8016088:	44a0      	add	r8, r4
 801608a:	449c      	add	ip, r3
 801608c:	f8a7 8004 	strh.w	r8, [r7, #4]
 8016090:	fb04 a40c 	mla	r4, r4, ip, sl
 8016094:	80fc      	strh	r4, [r7, #6]
 8016096:	e461      	b.n	801595c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8016098:	9905      	ldr	r1, [sp, #20]
 801609a:	ebb1 0109 	subs.w	r1, r1, r9
 801609e:	bf51      	iteee	pl
 80160a0:	f1cc 0520 	rsbpl	r5, ip, #32
 80160a4:	fb04 f40c 	mulmi.w	r4, r4, ip
 80160a8:	4249      	negmi	r1, r1
 80160aa:	2500      	movmi	r5, #0
 80160ac:	bf5d      	ittte	pl
 80160ae:	436c      	mulpl	r4, r5
 80160b0:	2520      	movpl	r5, #32
 80160b2:	f04f 0901 	movpl.w	r9, #1
 80160b6:	f04f 39ff 	movmi.w	r9, #4294967295
 80160ba:	9501      	str	r5, [sp, #4]
 80160bc:	9b01      	ldr	r3, [sp, #4]
 80160be:	fb94 f5f1 	sdiv	r5, r4, r1
 80160c2:	fb01 4415 	mls	r4, r1, r5, r4
 80160c6:	449c      	add	ip, r3
 80160c8:	eb0b 0309 	add.w	r3, fp, r9
 80160cc:	2c00      	cmp	r4, #0
 80160ce:	bfbc      	itt	lt
 80160d0:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80160d4:	1864      	addlt	r4, r4, r1
 80160d6:	44a8      	add	r8, r5
 80160d8:	fb05 ac0c 	mla	ip, r5, ip, sl
 80160dc:	f8a7 8004 	strh.w	r8, [r7, #4]
 80160e0:	f8a7 c006 	strh.w	ip, [r7, #6]
 80160e4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80160e8:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80160ec:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80160f0:	ea58 0707 	orrs.w	r7, r8, r7
 80160f4:	d011      	beq.n	801611a <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80160f6:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80160fa:	f1b8 0f00 	cmp.w	r8, #0
 80160fe:	db0c      	blt.n	801611a <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8016100:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8016102:	45b8      	cmp	r8, r7
 8016104:	da09      	bge.n	801611a <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8016106:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 801610a:	45b8      	cmp	r8, r7
 801610c:	bf3c      	itt	cc
 801610e:	f10c 0708 	addcc.w	r7, ip, #8
 8016112:	6107      	strcc	r7, [r0, #16]
 8016114:	f108 0701 	add.w	r7, r8, #1
 8016118:	6087      	str	r7, [r0, #8]
 801611a:	6907      	ldr	r7, [r0, #16]
 801611c:	f04f 0c00 	mov.w	ip, #0
 8016120:	b212      	sxth	r2, r2
 8016122:	459e      	cmp	lr, r3
 8016124:	803b      	strh	r3, [r7, #0]
 8016126:	442e      	add	r6, r5
 8016128:	807a      	strh	r2, [r7, #2]
 801612a:	f8a7 c004 	strh.w	ip, [r7, #4]
 801612e:	f8a7 c006 	strh.w	ip, [r7, #6]
 8016132:	d04b      	beq.n	80161cc <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8016134:	9f04      	ldr	r7, [sp, #16]
 8016136:	1a64      	subs	r4, r4, r1
 8016138:	f04f 0a00 	mov.w	sl, #0
 801613c:	1bbf      	subs	r7, r7, r6
 801613e:	443d      	add	r5, r7
 8016140:	016d      	lsls	r5, r5, #5
 8016142:	fb95 f8f1 	sdiv	r8, r5, r1
 8016146:	fb01 5518 	mls	r5, r1, r8, r5
 801614a:	4565      	cmp	r5, ip
 801614c:	bfbc      	itt	lt
 801614e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8016152:	186d      	addlt	r5, r5, r1
 8016154:	f108 0701 	add.w	r7, r8, #1
 8016158:	9703      	str	r7, [sp, #12]
 801615a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801615e:	1964      	adds	r4, r4, r5
 8016160:	444b      	add	r3, r9
 8016162:	bf54      	ite	pl
 8016164:	9f03      	ldrpl	r7, [sp, #12]
 8016166:	4647      	movmi	r7, r8
 8016168:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801616c:	bf58      	it	pl
 801616e:	1a64      	subpl	r4, r4, r1
 8016170:	443e      	add	r6, r7
 8016172:	44bb      	add	fp, r7
 8016174:	f8ac b004 	strh.w	fp, [ip, #4]
 8016178:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801617c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8016180:	f8ac b006 	strh.w	fp, [ip, #6]
 8016184:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016188:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801618c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8016190:	ea5b 0707 	orrs.w	r7, fp, r7
 8016194:	d011      	beq.n	80161ba <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8016196:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801619a:	f1bb 0f00 	cmp.w	fp, #0
 801619e:	db0c      	blt.n	80161ba <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80161a0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80161a2:	45bb      	cmp	fp, r7
 80161a4:	da09      	bge.n	80161ba <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80161a6:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80161aa:	45bb      	cmp	fp, r7
 80161ac:	bf3c      	itt	cc
 80161ae:	f10c 0708 	addcc.w	r7, ip, #8
 80161b2:	6107      	strcc	r7, [r0, #16]
 80161b4:	f10b 0701 	add.w	r7, fp, #1
 80161b8:	6087      	str	r7, [r0, #8]
 80161ba:	6907      	ldr	r7, [r0, #16]
 80161bc:	459e      	cmp	lr, r3
 80161be:	803b      	strh	r3, [r7, #0]
 80161c0:	807a      	strh	r2, [r7, #2]
 80161c2:	f8a7 a004 	strh.w	sl, [r7, #4]
 80161c6:	f8a7 a006 	strh.w	sl, [r7, #6]
 80161ca:	d1c6      	bne.n	801615a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 80161cc:	9b04      	ldr	r3, [sp, #16]
 80161ce:	1b9e      	subs	r6, r3, r6
 80161d0:	6903      	ldr	r3, [r0, #16]
 80161d2:	889a      	ldrh	r2, [r3, #4]
 80161d4:	4432      	add	r2, r6
 80161d6:	809a      	strh	r2, [r3, #4]
 80161d8:	9a02      	ldr	r2, [sp, #8]
 80161da:	f102 0c20 	add.w	ip, r2, #32
 80161de:	9a01      	ldr	r2, [sp, #4]
 80161e0:	ebac 0c02 	sub.w	ip, ip, r2
 80161e4:	88da      	ldrh	r2, [r3, #6]
 80161e6:	fb06 260c 	mla	r6, r6, ip, r2
 80161ea:	80de      	strh	r6, [r3, #6]
 80161ec:	f7ff bbb6 	b.w	801595c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

080161f0 <_ZN8touchgfx7Outline6lineToEii>:
 80161f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80161f2:	079b      	lsls	r3, r3, #30
 80161f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80161f6:	460e      	mov	r6, r1
 80161f8:	4615      	mov	r5, r2
 80161fa:	d511      	bpl.n	8016220 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80161fc:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8016200:	ea86 0701 	eor.w	r7, r6, r1
 8016204:	ea85 0302 	eor.w	r3, r5, r2
 8016208:	433b      	orrs	r3, r7
 801620a:	d009      	beq.n	8016220 <_ZN8touchgfx7Outline6lineToEii+0x30>
 801620c:	4633      	mov	r3, r6
 801620e:	9500      	str	r5, [sp, #0]
 8016210:	f7ff fb4c 	bl	80158ac <_ZN8touchgfx7Outline10renderLineEiiii>
 8016214:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016216:	f043 0301 	orr.w	r3, r3, #1
 801621a:	e9c0 6505 	strd	r6, r5, [r0, #20]
 801621e:	6243      	str	r3, [r0, #36]	; 0x24
 8016220:	b003      	add	sp, #12
 8016222:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016224 <_ZN8touchgfx7Outline6moveToEii>:
 8016224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016226:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016228:	4615      	mov	r5, r2
 801622a:	4604      	mov	r4, r0
 801622c:	460e      	mov	r6, r1
 801622e:	079a      	lsls	r2, r3, #30
 8016230:	d401      	bmi.n	8016236 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8016232:	f7ff fb07 	bl	8015844 <_ZN8touchgfx7Outline5resetEv>
 8016236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016238:	07db      	lsls	r3, r3, #31
 801623a:	d504      	bpl.n	8016246 <_ZN8touchgfx7Outline6moveToEii+0x22>
 801623c:	4620      	mov	r0, r4
 801623e:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8016242:	f7ff ffd5 	bl	80161f0 <_ZN8touchgfx7Outline6lineToEii>
 8016246:	6923      	ldr	r3, [r4, #16]
 8016248:	1170      	asrs	r0, r6, #5
 801624a:	1169      	asrs	r1, r5, #5
 801624c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016250:	4290      	cmp	r0, r2
 8016252:	d103      	bne.n	801625c <_ZN8touchgfx7Outline6moveToEii+0x38>
 8016254:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016258:	4291      	cmp	r1, r2
 801625a:	d01a      	beq.n	8016292 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 801625c:	88df      	ldrh	r7, [r3, #6]
 801625e:	889a      	ldrh	r2, [r3, #4]
 8016260:	433a      	orrs	r2, r7
 8016262:	d010      	beq.n	8016286 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8016264:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016268:	2a00      	cmp	r2, #0
 801626a:	db0c      	blt.n	8016286 <_ZN8touchgfx7Outline6moveToEii+0x62>
 801626c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801626e:	42ba      	cmp	r2, r7
 8016270:	da09      	bge.n	8016286 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8016272:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8016276:	42ba      	cmp	r2, r7
 8016278:	f102 0201 	add.w	r2, r2, #1
 801627c:	bf38      	it	cc
 801627e:	3308      	addcc	r3, #8
 8016280:	60a2      	str	r2, [r4, #8]
 8016282:	bf38      	it	cc
 8016284:	6123      	strcc	r3, [r4, #16]
 8016286:	6923      	ldr	r3, [r4, #16]
 8016288:	2200      	movs	r2, #0
 801628a:	8018      	strh	r0, [r3, #0]
 801628c:	8059      	strh	r1, [r3, #2]
 801628e:	809a      	strh	r2, [r3, #4]
 8016290:	80da      	strh	r2, [r3, #6]
 8016292:	6166      	str	r6, [r4, #20]
 8016294:	6225      	str	r5, [r4, #32]
 8016296:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801629a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801629c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 801629c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162a0:	b0d0      	sub	sp, #320	; 0x140
 80162a2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80162a6:	466c      	mov	r4, sp
 80162a8:	4627      	mov	r7, r4
 80162aa:	1a0d      	subs	r5, r1, r0
 80162ac:	f100 0308 	add.w	r3, r0, #8
 80162b0:	2d48      	cmp	r5, #72	; 0x48
 80162b2:	f340 80d5 	ble.w	8016460 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80162b6:	112d      	asrs	r5, r5, #4
 80162b8:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80162bc:	f9b0 9000 	ldrsh.w	r9, [r0]
 80162c0:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 80162c4:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 80162c8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80162cc:	6816      	ldr	r6, [r2, #0]
 80162ce:	6006      	str	r6, [r0, #0]
 80162d0:	6856      	ldr	r6, [r2, #4]
 80162d2:	6046      	str	r6, [r0, #4]
 80162d4:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80162d8:	f8a2 8002 	strh.w	r8, [r2, #2]
 80162dc:	f8a2 e004 	strh.w	lr, [r2, #4]
 80162e0:	f8a2 c006 	strh.w	ip, [r2, #6]
 80162e4:	f1a1 0208 	sub.w	r2, r1, #8
 80162e8:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80162ec:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80162f0:	4565      	cmp	r5, ip
 80162f2:	db06      	blt.n	8016302 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 80162f4:	d119      	bne.n	801632a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80162f6:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80162fa:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80162fe:	42ae      	cmp	r6, r5
 8016300:	dd13      	ble.n	801632a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8016302:	460e      	mov	r6, r1
 8016304:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8016308:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 801630c:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8016310:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8016314:	601d      	str	r5, [r3, #0]
 8016316:	6875      	ldr	r5, [r6, #4]
 8016318:	605d      	str	r5, [r3, #4]
 801631a:	f821 9c08 	strh.w	r9, [r1, #-8]
 801631e:	f821 cc06 	strh.w	ip, [r1, #-6]
 8016322:	f821 8c04 	strh.w	r8, [r1, #-4]
 8016326:	f821 ec02 	strh.w	lr, [r1, #-2]
 801632a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801632e:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8016332:	42ae      	cmp	r6, r5
 8016334:	db06      	blt.n	8016344 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8016336:	d116      	bne.n	8016366 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8016338:	f9b0 c000 	ldrsh.w	ip, [r0]
 801633c:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8016340:	45ac      	cmp	ip, r5
 8016342:	da10      	bge.n	8016366 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8016344:	681d      	ldr	r5, [r3, #0]
 8016346:	f9b0 8000 	ldrsh.w	r8, [r0]
 801634a:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801634e:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8016352:	6005      	str	r5, [r0, #0]
 8016354:	685d      	ldr	r5, [r3, #4]
 8016356:	f8a0 8008 	strh.w	r8, [r0, #8]
 801635a:	6045      	str	r5, [r0, #4]
 801635c:	8146      	strh	r6, [r0, #10]
 801635e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8016362:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016366:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801636a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801636e:	4565      	cmp	r5, ip
 8016370:	db06      	blt.n	8016380 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8016372:	d119      	bne.n	80163a8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016374:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8016378:	f9b0 5000 	ldrsh.w	r5, [r0]
 801637c:	42ae      	cmp	r6, r5
 801637e:	da13      	bge.n	80163a8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016380:	460e      	mov	r6, r1
 8016382:	f9b0 9000 	ldrsh.w	r9, [r0]
 8016386:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801638a:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801638e:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8016392:	6005      	str	r5, [r0, #0]
 8016394:	6875      	ldr	r5, [r6, #4]
 8016396:	6045      	str	r5, [r0, #4]
 8016398:	f821 9c08 	strh.w	r9, [r1, #-8]
 801639c:	f821 cc06 	strh.w	ip, [r1, #-6]
 80163a0:	f821 8c04 	strh.w	r8, [r1, #-4]
 80163a4:	f821 ec02 	strh.w	lr, [r1, #-2]
 80163a8:	3308      	adds	r3, #8
 80163aa:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80163ae:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 80163b2:	45e6      	cmp	lr, ip
 80163b4:	dbf8      	blt.n	80163a8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80163b6:	d105      	bne.n	80163c4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80163b8:	f9b3 6000 	ldrsh.w	r6, [r3]
 80163bc:	f9b0 5000 	ldrsh.w	r5, [r0]
 80163c0:	42ae      	cmp	r6, r5
 80163c2:	dbf1      	blt.n	80163a8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80163c4:	4615      	mov	r5, r2
 80163c6:	3a08      	subs	r2, #8
 80163c8:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 80163cc:	45b4      	cmp	ip, r6
 80163ce:	dbf9      	blt.n	80163c4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80163d0:	d105      	bne.n	80163de <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 80163d2:	f9b0 8000 	ldrsh.w	r8, [r0]
 80163d6:	f9b2 6000 	ldrsh.w	r6, [r2]
 80163da:	45b0      	cmp	r8, r6
 80163dc:	dbf2      	blt.n	80163c4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80163de:	4293      	cmp	r3, r2
 80163e0:	f1a5 0608 	sub.w	r6, r5, #8
 80163e4:	d816      	bhi.n	8016414 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 80163e6:	f8d6 c000 	ldr.w	ip, [r6]
 80163ea:	f9b3 a000 	ldrsh.w	sl, [r3]
 80163ee:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 80163f2:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 80163f6:	f8c3 c000 	str.w	ip, [r3]
 80163fa:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80163fe:	f8c3 c004 	str.w	ip, [r3, #4]
 8016402:	f825 ac08 	strh.w	sl, [r5, #-8]
 8016406:	f825 ec06 	strh.w	lr, [r5, #-6]
 801640a:	f825 9c04 	strh.w	r9, [r5, #-4]
 801640e:	f825 8c02 	strh.w	r8, [r5, #-2]
 8016412:	e7c9      	b.n	80163a8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8016414:	f8d6 e000 	ldr.w	lr, [r6]
 8016418:	f9b0 a000 	ldrsh.w	sl, [r0]
 801641c:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8016420:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8016424:	f8c0 e000 	str.w	lr, [r0]
 8016428:	f8d6 e004 	ldr.w	lr, [r6, #4]
 801642c:	1a16      	subs	r6, r2, r0
 801642e:	f8c0 e004 	str.w	lr, [r0, #4]
 8016432:	f825 ac08 	strh.w	sl, [r5, #-8]
 8016436:	f825 cc06 	strh.w	ip, [r5, #-6]
 801643a:	f825 9c04 	strh.w	r9, [r5, #-4]
 801643e:	f825 8c02 	strh.w	r8, [r5, #-2]
 8016442:	1acd      	subs	r5, r1, r3
 8016444:	10ed      	asrs	r5, r5, #3
 8016446:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 801644a:	bfb5      	itete	lt
 801644c:	e9c4 0200 	strdlt	r0, r2, [r4]
 8016450:	e9c4 3100 	strdge	r3, r1, [r4]
 8016454:	460a      	movlt	r2, r1
 8016456:	4603      	movge	r3, r0
 8016458:	3408      	adds	r4, #8
 801645a:	4618      	mov	r0, r3
 801645c:	4611      	mov	r1, r2
 801645e:	e724      	b.n	80162aa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8016460:	4299      	cmp	r1, r3
 8016462:	d927      	bls.n	80164b4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8016464:	f1a3 0210 	sub.w	r2, r3, #16
 8016468:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 801646c:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8016470:	45ac      	cmp	ip, r5
 8016472:	db06      	blt.n	8016482 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8016474:	d11c      	bne.n	80164b0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8016476:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 801647a:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801647e:	42ae      	cmp	r6, r5
 8016480:	da16      	bge.n	80164b0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8016482:	4615      	mov	r5, r2
 8016484:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8016488:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 801648c:	3a08      	subs	r2, #8
 801648e:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8016492:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8016496:	6196      	str	r6, [r2, #24]
 8016498:	42a8      	cmp	r0, r5
 801649a:	686e      	ldr	r6, [r5, #4]
 801649c:	f8a2 9010 	strh.w	r9, [r2, #16]
 80164a0:	61d6      	str	r6, [r2, #28]
 80164a2:	f8a2 c012 	strh.w	ip, [r2, #18]
 80164a6:	f8a2 8014 	strh.w	r8, [r2, #20]
 80164aa:	f8a2 e016 	strh.w	lr, [r2, #22]
 80164ae:	d1db      	bne.n	8016468 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 80164b0:	3308      	adds	r3, #8
 80164b2:	e7d5      	b.n	8016460 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80164b4:	42bc      	cmp	r4, r7
 80164b6:	d903      	bls.n	80164c0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 80164b8:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80164bc:	3c08      	subs	r4, #8
 80164be:	e6f4      	b.n	80162aa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80164c0:	b050      	add	sp, #320	; 0x140
 80164c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080164c6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 80164c6:	b510      	push	{r4, lr}
 80164c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80164ca:	4604      	mov	r4, r0
 80164cc:	07da      	lsls	r2, r3, #31
 80164ce:	d507      	bpl.n	80164e0 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 80164d0:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80164d4:	f7ff fe8c 	bl	80161f0 <_ZN8touchgfx7Outline6lineToEii>
 80164d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80164da:	f023 0301 	bic.w	r3, r3, #1
 80164de:	6243      	str	r3, [r0, #36]	; 0x24
 80164e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80164e2:	079b      	lsls	r3, r3, #30
 80164e4:	d521      	bpl.n	801652a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 80164e6:	6923      	ldr	r3, [r4, #16]
 80164e8:	88d9      	ldrh	r1, [r3, #6]
 80164ea:	889a      	ldrh	r2, [r3, #4]
 80164ec:	430a      	orrs	r2, r1
 80164ee:	d010      	beq.n	8016512 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80164f0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80164f4:	2a00      	cmp	r2, #0
 80164f6:	db0c      	blt.n	8016512 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80164f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80164fa:	428a      	cmp	r2, r1
 80164fc:	da09      	bge.n	8016512 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80164fe:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8016502:	4291      	cmp	r1, r2
 8016504:	f102 0201 	add.w	r2, r2, #1
 8016508:	bf88      	it	hi
 801650a:	3308      	addhi	r3, #8
 801650c:	60a2      	str	r2, [r4, #8]
 801650e:	bf88      	it	hi
 8016510:	6123      	strhi	r3, [r4, #16]
 8016512:	68a1      	ldr	r1, [r4, #8]
 8016514:	b129      	cbz	r1, 8016522 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8016516:	6863      	ldr	r3, [r4, #4]
 8016518:	4299      	cmp	r1, r3
 801651a:	d802      	bhi.n	8016522 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801651c:	68e0      	ldr	r0, [r4, #12]
 801651e:	f7ff febd 	bl	801629c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8016522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016524:	f023 0302 	bic.w	r3, r3, #2
 8016528:	6263      	str	r3, [r4, #36]	; 0x24
 801652a:	68e0      	ldr	r0, [r4, #12]
 801652c:	bd10      	pop	{r4, pc}
	...

08016530 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8016530:	4b02      	ldr	r3, [pc, #8]	; (801653c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8016532:	6018      	str	r0, [r3, #0]
 8016534:	4b02      	ldr	r3, [pc, #8]	; (8016540 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8016536:	6019      	str	r1, [r3, #0]
 8016538:	4770      	bx	lr
 801653a:	bf00      	nop
 801653c:	20027cb0 	.word	0x20027cb0
 8016540:	20027cb4 	.word	0x20027cb4

08016544 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 8016544:	2300      	movs	r3, #0
 8016546:	4a02      	ldr	r2, [pc, #8]	; (8016550 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8016548:	6013      	str	r3, [r2, #0]
 801654a:	4a02      	ldr	r2, [pc, #8]	; (8016554 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 801654c:	6013      	str	r3, [r2, #0]
 801654e:	4770      	bx	lr
 8016550:	20027cb0 	.word	0x20027cb0
 8016554:	20027cb4 	.word	0x20027cb4

08016558 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8016558:	4b01      	ldr	r3, [pc, #4]	; (8016560 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801655a:	6818      	ldr	r0, [r3, #0]
 801655c:	4770      	bx	lr
 801655e:	bf00      	nop
 8016560:	20027cb0 	.word	0x20027cb0

08016564 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8016564:	4b01      	ldr	r3, [pc, #4]	; (801656c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8016566:	6818      	ldr	r0, [r3, #0]
 8016568:	4770      	bx	lr
 801656a:	bf00      	nop
 801656c:	20027cb4 	.word	0x20027cb4

08016570 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8016570:	b510      	push	{r4, lr}
 8016572:	6803      	ldr	r3, [r0, #0]
 8016574:	460c      	mov	r4, r1
 8016576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016578:	4798      	blx	r3
 801657a:	1b03      	subs	r3, r0, r4
 801657c:	4258      	negs	r0, r3
 801657e:	4158      	adcs	r0, r3
 8016580:	bd10      	pop	{r4, pc}
	...

08016584 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8016584:	4b01      	ldr	r3, [pc, #4]	; (801658c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8016586:	6019      	str	r1, [r3, #0]
 8016588:	4770      	bx	lr
 801658a:	bf00      	nop
 801658c:	20027cb8 	.word	0x20027cb8

08016590 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016594:	4696      	mov	lr, r2
 8016596:	b097      	sub	sp, #92	; 0x5c
 8016598:	4605      	mov	r5, r0
 801659a:	4614      	mov	r4, r2
 801659c:	460e      	mov	r6, r1
 801659e:	461f      	mov	r7, r3
 80165a0:	f10d 0c1c 	add.w	ip, sp, #28
 80165a4:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80165a8:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 80165ac:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 80165b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80165b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80165b8:	f8de 3000 	ldr.w	r3, [lr]
 80165bc:	f104 0e14 	add.w	lr, r4, #20
 80165c0:	f8cc 3000 	str.w	r3, [ip]
 80165c4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80165c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80165cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80165d0:	f8de 3000 	ldr.w	r3, [lr]
 80165d4:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80165d8:	f8cc 3000 	str.w	r3, [ip]
 80165dc:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80165e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80165e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80165e8:	f8de 3000 	ldr.w	r3, [lr]
 80165ec:	4631      	mov	r1, r6
 80165ee:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80165f0:	4628      	mov	r0, r5
 80165f2:	f8cc 3000 	str.w	r3, [ip]
 80165f6:	682b      	ldr	r3, [r5, #0]
 80165f8:	9201      	str	r2, [sp, #4]
 80165fa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80165fc:	f8cd 8008 	str.w	r8, [sp, #8]
 8016600:	9200      	str	r2, [sp, #0]
 8016602:	aa07      	add	r2, sp, #28
 8016604:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8016608:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801660c:	463b      	mov	r3, r7
 801660e:	47d8      	blx	fp
 8016610:	46a6      	mov	lr, r4
 8016612:	f10d 0c1c 	add.w	ip, sp, #28
 8016616:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801661a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801661e:	f8de 3000 	ldr.w	r3, [lr]
 8016622:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8016626:	343c      	adds	r4, #60	; 0x3c
 8016628:	f8cc 3000 	str.w	r3, [ip]
 801662c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016630:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016634:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016638:	f8de 3000 	ldr.w	r3, [lr]
 801663c:	f8cc 3000 	str.w	r3, [ip]
 8016640:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8016644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016646:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801664a:	6823      	ldr	r3, [r4, #0]
 801664c:	4631      	mov	r1, r6
 801664e:	4628      	mov	r0, r5
 8016650:	f8cc 3000 	str.w	r3, [ip]
 8016654:	682b      	ldr	r3, [r5, #0]
 8016656:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801665a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801665c:	f8cd 8008 	str.w	r8, [sp, #8]
 8016660:	9201      	str	r2, [sp, #4]
 8016662:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016664:	9200      	str	r2, [sp, #0]
 8016666:	aa07      	add	r2, sp, #28
 8016668:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801666a:	463b      	mov	r3, r7
 801666c:	47a0      	blx	r4
 801666e:	b017      	add	sp, #92	; 0x5c
 8016670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016674 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8016674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016678:	b08d      	sub	sp, #52	; 0x34
 801667a:	4688      	mov	r8, r1
 801667c:	f8d3 c000 	ldr.w	ip, [r3]
 8016680:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016682:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8016686:	680f      	ldr	r7, [r1, #0]
 8016688:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801668c:	eba7 070c 	sub.w	r7, r7, ip
 8016690:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8016694:	edd3 6a07 	vldr	s13, [r3, #28]
 8016698:	42bc      	cmp	r4, r7
 801669a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801669c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80166a0:	bfa8      	it	ge
 80166a2:	463c      	movge	r4, r7
 80166a4:	f9b1 9000 	ldrsh.w	r9, [r1]
 80166a8:	f9ba 1000 	ldrsh.w	r1, [sl]
 80166ac:	ee07 4a90 	vmov	s15, r4
 80166b0:	eb09 0e0c 	add.w	lr, r9, ip
 80166b4:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 80166b8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80166bc:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80166c0:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 80166c4:	4571      	cmp	r1, lr
 80166c6:	ee25 4a04 	vmul.f32	s8, s10, s8
 80166ca:	ee65 4a24 	vmul.f32	s9, s10, s9
 80166ce:	ee25 5a27 	vmul.f32	s10, s10, s15
 80166d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80166d6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80166da:	ee32 1a05 	vadd.f32	s2, s4, s10
 80166de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80166e2:	ee36 0a84 	vadd.f32	s0, s13, s8
 80166e6:	ee61 1a87 	vmul.f32	s3, s3, s14
 80166ea:	ee22 2a07 	vmul.f32	s4, s4, s14
 80166ee:	f340 808c 	ble.w	801680a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80166f2:	eba1 060e 	sub.w	r6, r1, lr
 80166f6:	fb96 f5f4 	sdiv	r5, r6, r4
 80166fa:	ee07 5a10 	vmov	s14, r5
 80166fe:	2d00      	cmp	r5, #0
 8016700:	fb04 6615 	mls	r6, r4, r5, r6
 8016704:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016708:	eea7 0a04 	vfma.f32	s0, s14, s8
 801670c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8016710:	eea7 1a05 	vfma.f32	s2, s14, s10
 8016714:	dd12      	ble.n	801673c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8016716:	ee70 6a44 	vsub.f32	s13, s0, s8
 801671a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801671e:	ee31 2a45 	vsub.f32	s4, s2, s10
 8016722:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801672a:	bf14      	ite	ne
 801672c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8016730:	eeb0 7a67 	vmoveq.f32	s14, s15
 8016734:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016738:	ee22 2a07 	vmul.f32	s4, s4, s14
 801673c:	fb05 f204 	mul.w	r2, r5, r4
 8016740:	1abf      	subs	r7, r7, r2
 8016742:	4494      	add	ip, r2
 8016744:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8016748:	4411      	add	r1, r2
 801674a:	eb09 020c 	add.w	r2, r9, ip
 801674e:	b209      	sxth	r1, r1
 8016750:	443a      	add	r2, r7
 8016752:	428a      	cmp	r2, r1
 8016754:	bfc4      	itt	gt
 8016756:	eba1 0209 	subgt.w	r2, r1, r9
 801675a:	eba2 070c 	subgt.w	r7, r2, ip
 801675e:	2f00      	cmp	r7, #0
 8016760:	dd50      	ble.n	8016804 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8016762:	fb97 f1f4 	sdiv	r1, r7, r4
 8016766:	fb04 7211 	mls	r2, r4, r1, r7
 801676a:	b90a      	cbnz	r2, 8016770 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801676c:	3901      	subs	r1, #1
 801676e:	4622      	mov	r2, r4
 8016770:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8016774:	6840      	ldr	r0, [r0, #4]
 8016776:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801677a:	44b6      	add	lr, r6
 801677c:	f8d0 a000 	ldr.w	sl, [r0]
 8016780:	2900      	cmp	r1, #0
 8016782:	bfcc      	ite	gt
 8016784:	46a1      	movgt	r9, r4
 8016786:	4691      	movle	r9, r2
 8016788:	900b      	str	r0, [sp, #44]	; 0x2c
 801678a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801678c:	fb04 e505 	mla	r5, r4, r5, lr
 8016790:	eef0 6a42 	vmov.f32	s13, s4
 8016794:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8016798:	9008      	str	r0, [sp, #32]
 801679a:	eeb0 7a61 	vmov.f32	s14, s3
 801679e:	9818      	ldr	r0, [sp, #96]	; 0x60
 80167a0:	695b      	ldr	r3, [r3, #20]
 80167a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80167a6:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80167aa:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80167ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80167b0:	445b      	add	r3, fp
 80167b2:	9307      	str	r3, [sp, #28]
 80167b4:	ee16 3a90 	vmov	r3, s13
 80167b8:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80167bc:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80167c0:	ee21 3a23 	vmul.f32	s6, s2, s7
 80167c4:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80167c8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80167cc:	ee17 7a90 	vmov	r7, s15
 80167d0:	ee73 7a42 	vsub.f32	s15, s6, s4
 80167d4:	fb97 f7f4 	sdiv	r7, r7, r4
 80167d8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80167dc:	ee17 ca90 	vmov	ip, s15
 80167e0:	fb9c fcf4 	sdiv	ip, ip, r4
 80167e4:	fb0c 3306 	mla	r3, ip, r6, r3
 80167e8:	9302      	str	r3, [sp, #8]
 80167ea:	ee17 3a10 	vmov	r3, s14
 80167ee:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80167f2:	fb07 3706 	mla	r7, r7, r6, r3
 80167f6:	eba9 0306 	sub.w	r3, r9, r6
 80167fa:	e9cd 4700 	strd	r4, r7, [sp]
 80167fe:	f8da 4008 	ldr.w	r4, [sl, #8]
 8016802:	47a0      	blx	r4
 8016804:	b00d      	add	sp, #52	; 0x34
 8016806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801680a:	2500      	movs	r5, #0
 801680c:	462e      	mov	r6, r5
 801680e:	e799      	b.n	8016744 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08016810 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016814:	b0db      	sub	sp, #364	; 0x16c
 8016816:	461d      	mov	r5, r3
 8016818:	4614      	mov	r4, r2
 801681a:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801681e:	910f      	str	r1, [sp, #60]	; 0x3c
 8016820:	4629      	mov	r1, r5
 8016822:	930a      	str	r3, [sp, #40]	; 0x28
 8016824:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8016828:	9009      	str	r0, [sp, #36]	; 0x24
 801682a:	930b      	str	r3, [sp, #44]	; 0x2c
 801682c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8016830:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8016834:	9310      	str	r3, [sp, #64]	; 0x40
 8016836:	6803      	ldr	r3, [r0, #0]
 8016838:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801683a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801683e:	47b8      	blx	r7
 8016840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016842:	6058      	str	r0, [r3, #4]
 8016844:	2800      	cmp	r0, #0
 8016846:	f000 83a1 	beq.w	8016f8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801684a:	682b      	ldr	r3, [r5, #0]
 801684c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8016850:	ed94 7a02 	vldr	s14, [r4, #8]
 8016854:	9314      	str	r3, [sp, #80]	; 0x50
 8016856:	686b      	ldr	r3, [r5, #4]
 8016858:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801685c:	9315      	str	r3, [sp, #84]	; 0x54
 801685e:	4bc1      	ldr	r3, [pc, #772]	; (8016b64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8016860:	7819      	ldrb	r1, [r3, #0]
 8016862:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8016866:	2900      	cmp	r1, #0
 8016868:	bf16      	itet	ne
 801686a:	4619      	movne	r1, r3
 801686c:	4611      	moveq	r1, r2
 801686e:	4613      	movne	r3, r2
 8016870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016874:	9116      	str	r1, [sp, #88]	; 0x58
 8016876:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801687a:	f240 8387 	bls.w	8016f8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801687e:	ed94 7a07 	vldr	s14, [r4, #28]
 8016882:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801688a:	f240 837f 	bls.w	8016f8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801688e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8016892:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801689a:	f240 8377 	bls.w	8016f8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801689e:	6822      	ldr	r2, [r4, #0]
 80168a0:	4bb1      	ldr	r3, [pc, #708]	; (8016b68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80168a2:	429a      	cmp	r2, r3
 80168a4:	f2c0 8372 	blt.w	8016f8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80168a8:	49b0      	ldr	r1, [pc, #704]	; (8016b6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80168aa:	6963      	ldr	r3, [r4, #20]
 80168ac:	428a      	cmp	r2, r1
 80168ae:	f300 836d 	bgt.w	8016f8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80168b2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80168b6:	48ae      	ldr	r0, [pc, #696]	; (8016b70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80168b8:	33ff      	adds	r3, #255	; 0xff
 80168ba:	4283      	cmp	r3, r0
 80168bc:	f200 8366 	bhi.w	8016f8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80168c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80168c2:	4dac      	ldr	r5, [pc, #688]	; (8016b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80168c4:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80168c8:	33ff      	adds	r3, #255	; 0xff
 80168ca:	42ab      	cmp	r3, r5
 80168cc:	f200 835e 	bhi.w	8016f8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80168d0:	6862      	ldr	r2, [r4, #4]
 80168d2:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 80168d6:	33ff      	adds	r3, #255	; 0xff
 80168d8:	4283      	cmp	r3, r0
 80168da:	f200 8357 	bhi.w	8016f8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80168de:	69a1      	ldr	r1, [r4, #24]
 80168e0:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 80168e4:	33ff      	adds	r3, #255	; 0xff
 80168e6:	4283      	cmp	r3, r0
 80168e8:	f200 8350 	bhi.w	8016f8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80168ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80168ee:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 80168f2:	30ff      	adds	r0, #255	; 0xff
 80168f4:	42a8      	cmp	r0, r5
 80168f6:	f200 8349 	bhi.w	8016f8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80168fa:	428a      	cmp	r2, r1
 80168fc:	f280 8110 	bge.w	8016b20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8016900:	429a      	cmp	r2, r3
 8016902:	f300 8119 	bgt.w	8016b38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8016906:	4299      	cmp	r1, r3
 8016908:	f280 811d 	bge.w	8016b46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801690c:	2502      	movs	r5, #2
 801690e:	2701      	movs	r7, #1
 8016910:	46a9      	mov	r9, r5
 8016912:	46b8      	mov	r8, r7
 8016914:	f04f 0a00 	mov.w	sl, #0
 8016918:	4621      	mov	r1, r4
 801691a:	a849      	add	r0, sp, #292	; 0x124
 801691c:	f003 feac 	bl	801a678 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8016920:	4622      	mov	r2, r4
 8016922:	4653      	mov	r3, sl
 8016924:	a949      	add	r1, sp, #292	; 0x124
 8016926:	f8cd 9000 	str.w	r9, [sp]
 801692a:	a819      	add	r0, sp, #100	; 0x64
 801692c:	f003 ffd4 	bl	801a8d8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016930:	4622      	mov	r2, r4
 8016932:	4653      	mov	r3, sl
 8016934:	a949      	add	r1, sp, #292	; 0x124
 8016936:	f8cd 8000 	str.w	r8, [sp]
 801693a:	a829      	add	r0, sp, #164	; 0xa4
 801693c:	f003 ffcc 	bl	801a8d8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016940:	4643      	mov	r3, r8
 8016942:	4622      	mov	r2, r4
 8016944:	a949      	add	r1, sp, #292	; 0x124
 8016946:	f8cd 9000 	str.w	r9, [sp]
 801694a:	a839      	add	r0, sp, #228	; 0xe4
 801694c:	f003 ffc4 	bl	801a8d8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016950:	42af      	cmp	r7, r5
 8016952:	af12      	add	r7, sp, #72	; 0x48
 8016954:	bfb7      	itett	lt
 8016956:	2300      	movlt	r3, #0
 8016958:	2301      	movge	r3, #1
 801695a:	ad29      	addlt	r5, sp, #164	; 0xa4
 801695c:	ac19      	addlt	r4, sp, #100	; 0x64
 801695e:	bfb1      	iteee	lt
 8016960:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016962:	ad19      	addge	r5, sp, #100	; 0x64
 8016964:	930e      	strge	r3, [sp, #56]	; 0x38
 8016966:	ac29      	addge	r4, sp, #164	; 0xa4
 8016968:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801696a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801696e:	e887 0003 	stmia.w	r7, {r0, r1}
 8016972:	b928      	cbnz	r0, 8016980 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8016974:	4b80      	ldr	r3, [pc, #512]	; (8016b78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8016976:	6818      	ldr	r0, [r3, #0]
 8016978:	6803      	ldr	r3, [r0, #0]
 801697a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801697c:	4798      	blx	r3
 801697e:	6038      	str	r0, [r7, #0]
 8016980:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016982:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8016986:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801698a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801698c:	930c      	str	r3, [sp, #48]	; 0x30
 801698e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016990:	6963      	ldr	r3, [r4, #20]
 8016992:	440b      	add	r3, r1
 8016994:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016998:	4408      	add	r0, r1
 801699a:	b200      	sxth	r0, r0
 801699c:	4283      	cmp	r3, r0
 801699e:	900d      	str	r0, [sp, #52]	; 0x34
 80169a0:	f280 80dd 	bge.w	8016b5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80169a4:	428b      	cmp	r3, r1
 80169a6:	da08      	bge.n	80169ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80169a8:	2a00      	cmp	r2, #0
 80169aa:	dd06      	ble.n	80169ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80169ac:	1acb      	subs	r3, r1, r3
 80169ae:	429a      	cmp	r2, r3
 80169b0:	f2c0 80e4 	blt.w	8016b7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	f300 80e2 	bgt.w	8016b7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80169ba:	6967      	ldr	r7, [r4, #20]
 80169bc:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80169c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169c2:	443b      	add	r3, r7
 80169c4:	461f      	mov	r7, r3
 80169c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80169c8:	1bdf      	subs	r7, r3, r7
 80169ca:	4297      	cmp	r7, r2
 80169cc:	bfa8      	it	ge
 80169ce:	4617      	movge	r7, r2
 80169d0:	2f00      	cmp	r7, #0
 80169d2:	f340 8166 	ble.w	8016ca2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80169d6:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80169d8:	6829      	ldr	r1, [r5, #0]
 80169da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80169de:	f9bb 3000 	ldrsh.w	r3, [fp]
 80169e2:	4411      	add	r1, r2
 80169e4:	6820      	ldr	r0, [r4, #0]
 80169e6:	4299      	cmp	r1, r3
 80169e8:	dd1a      	ble.n	8016a20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80169ea:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80169ee:	4402      	add	r2, r0
 80169f0:	440b      	add	r3, r1
 80169f2:	b21b      	sxth	r3, r3
 80169f4:	429a      	cmp	r2, r3
 80169f6:	dc13      	bgt.n	8016a20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80169f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80169fa:	a912      	add	r1, sp, #72	; 0x48
 80169fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	9206      	str	r2, [sp, #24]
 8016a04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016a06:	9500      	str	r5, [sp, #0]
 8016a08:	9205      	str	r2, [sp, #20]
 8016a0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016a0c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016a10:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016a12:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016a16:	aa49      	add	r2, sp, #292	; 0x124
 8016a18:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8016a1c:	4623      	mov	r3, r4
 8016a1e:	47c8      	blx	r9
 8016a20:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8016a24:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016a28:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016a2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016a30:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8016a34:	68a1      	ldr	r1, [r4, #8]
 8016a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016a3a:	ed94 6a08 	vldr	s12, [r4, #32]
 8016a3e:	edd4 6a07 	vldr	s13, [r4, #28]
 8016a42:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016a46:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016a4a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016a4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016a52:	edc4 6a07 	vstr	s13, [r4, #28]
 8016a56:	441a      	add	r2, r3
 8016a58:	6963      	ldr	r3, [r4, #20]
 8016a5a:	3301      	adds	r3, #1
 8016a5c:	6022      	str	r2, [r4, #0]
 8016a5e:	6163      	str	r3, [r4, #20]
 8016a60:	69a3      	ldr	r3, [r4, #24]
 8016a62:	3b01      	subs	r3, #1
 8016a64:	61a3      	str	r3, [r4, #24]
 8016a66:	6923      	ldr	r3, [r4, #16]
 8016a68:	440b      	add	r3, r1
 8016a6a:	68e1      	ldr	r1, [r4, #12]
 8016a6c:	428b      	cmp	r3, r1
 8016a6e:	6123      	str	r3, [r4, #16]
 8016a70:	db15      	blt.n	8016a9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8016a72:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8016a76:	3201      	adds	r2, #1
 8016a78:	1a5b      	subs	r3, r3, r1
 8016a7a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016a7e:	6022      	str	r2, [r4, #0]
 8016a80:	6123      	str	r3, [r4, #16]
 8016a82:	edc4 6a07 	vstr	s13, [r4, #28]
 8016a86:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016a8a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016a8e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016a92:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016a9a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016a9e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8016aa2:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8016aa6:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8016aaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016aae:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8016ab2:	68a9      	ldr	r1, [r5, #8]
 8016ab4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016ab8:	ed95 6a08 	vldr	s12, [r5, #32]
 8016abc:	edd5 6a07 	vldr	s13, [r5, #28]
 8016ac0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016ac4:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016ac8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016acc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016ad0:	edc5 6a07 	vstr	s13, [r5, #28]
 8016ad4:	441a      	add	r2, r3
 8016ad6:	696b      	ldr	r3, [r5, #20]
 8016ad8:	3301      	adds	r3, #1
 8016ada:	602a      	str	r2, [r5, #0]
 8016adc:	616b      	str	r3, [r5, #20]
 8016ade:	69ab      	ldr	r3, [r5, #24]
 8016ae0:	3b01      	subs	r3, #1
 8016ae2:	61ab      	str	r3, [r5, #24]
 8016ae4:	692b      	ldr	r3, [r5, #16]
 8016ae6:	440b      	add	r3, r1
 8016ae8:	68e9      	ldr	r1, [r5, #12]
 8016aea:	428b      	cmp	r3, r1
 8016aec:	612b      	str	r3, [r5, #16]
 8016aee:	db15      	blt.n	8016b1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8016af0:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016af4:	3201      	adds	r2, #1
 8016af6:	1a5b      	subs	r3, r3, r1
 8016af8:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016afc:	602a      	str	r2, [r5, #0]
 8016afe:	612b      	str	r3, [r5, #16]
 8016b00:	edc5 6a07 	vstr	s13, [r5, #28]
 8016b04:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016b08:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016b0c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016b10:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016b18:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016b1c:	3f01      	subs	r7, #1
 8016b1e:	e757      	b.n	80169d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8016b20:	4299      	cmp	r1, r3
 8016b22:	dc13      	bgt.n	8016b4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8016b24:	429a      	cmp	r2, r3
 8016b26:	da14      	bge.n	8016b52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8016b28:	2502      	movs	r5, #2
 8016b2a:	2703      	movs	r7, #3
 8016b2c:	f04f 0800 	mov.w	r8, #0
 8016b30:	46a9      	mov	r9, r5
 8016b32:	f04f 0a01 	mov.w	sl, #1
 8016b36:	e6ef      	b.n	8016918 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016b38:	2501      	movs	r5, #1
 8016b3a:	2700      	movs	r7, #0
 8016b3c:	46a9      	mov	r9, r5
 8016b3e:	46b8      	mov	r8, r7
 8016b40:	f04f 0a02 	mov.w	sl, #2
 8016b44:	e6e8      	b.n	8016918 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016b46:	2501      	movs	r5, #1
 8016b48:	2702      	movs	r7, #2
 8016b4a:	e6e1      	b.n	8016910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8016b4c:	2500      	movs	r5, #0
 8016b4e:	2701      	movs	r7, #1
 8016b50:	e7f4      	b.n	8016b3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8016b52:	2702      	movs	r7, #2
 8016b54:	2503      	movs	r5, #3
 8016b56:	f04f 0900 	mov.w	r9, #0
 8016b5a:	46b8      	mov	r8, r7
 8016b5c:	e7e9      	b.n	8016b32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8016b5e:	4613      	mov	r3, r2
 8016b60:	e728      	b.n	80169b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8016b62:	bf00      	nop
 8016b64:	20027ca0 	.word	0x20027ca0
 8016b68:	fffd8f01 	.word	0xfffd8f01
 8016b6c:	00027100 	.word	0x00027100
 8016b70:	0004e1ff 	.word	0x0004e1ff
 8016b74:	0004e1fe 	.word	0x0004e1fe
 8016b78:	20027ca8 	.word	0x20027ca8
 8016b7c:	4613      	mov	r3, r2
 8016b7e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016b80:	469e      	mov	lr, r3
 8016b82:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8016b84:	469c      	mov	ip, r3
 8016b86:	9111      	str	r1, [sp, #68]	; 0x44
 8016b88:	f04f 0900 	mov.w	r9, #0
 8016b8c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8016b90:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8016b94:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8016b98:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8016b9c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8016ba0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8016ba4:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8016ba8:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8016bac:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8016bb0:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8016bb4:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8016bb8:	f1bc 0f00 	cmp.w	ip, #0
 8016bbc:	d147      	bne.n	8016c4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8016bbe:	eb03 0c07 	add.w	ip, r3, r7
 8016bc2:	1ad7      	subs	r7, r2, r3
 8016bc4:	f1b9 0f00 	cmp.w	r9, #0
 8016bc8:	d009      	beq.n	8016bde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8016bca:	9029      	str	r0, [sp, #164]	; 0xa4
 8016bcc:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8016bd0:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8016bd4:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8016bd8:	912d      	str	r1, [sp, #180]	; 0xb4
 8016bda:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8016bde:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016be0:	f04f 0800 	mov.w	r8, #0
 8016be4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8016be8:	9111      	str	r1, [sp, #68]	; 0x44
 8016bea:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8016bee:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8016bf2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8016bf6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8016bfa:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8016bfe:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8016c02:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8016c06:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8016c0a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8016c0e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8016c12:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8016c16:	f1be 0f00 	cmp.w	lr, #0
 8016c1a:	d031      	beq.n	8016c80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8016c1c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016c1e:	4450      	add	r0, sl
 8016c20:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016c24:	4431      	add	r1, r6
 8016c26:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016c2a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016c2e:	4549      	cmp	r1, r9
 8016c30:	db08      	blt.n	8016c44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8016c32:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016c36:	3001      	adds	r0, #1
 8016c38:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016c3c:	eba1 0109 	sub.w	r1, r1, r9
 8016c40:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016c44:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016c48:	f04f 0801 	mov.w	r8, #1
 8016c4c:	e7e3      	b.n	8016c16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8016c4e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016c50:	4450      	add	r0, sl
 8016c52:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016c56:	4431      	add	r1, r6
 8016c58:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016c5c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016c60:	4541      	cmp	r1, r8
 8016c62:	db08      	blt.n	8016c76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8016c64:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016c68:	3001      	adds	r0, #1
 8016c6a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016c6e:	eba1 0108 	sub.w	r1, r1, r8
 8016c72:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016c76:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016c7a:	f04f 0901 	mov.w	r9, #1
 8016c7e:	e79b      	b.n	8016bb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8016c80:	449c      	add	ip, r3
 8016c82:	1aff      	subs	r7, r7, r3
 8016c84:	f1b8 0f00 	cmp.w	r8, #0
 8016c88:	d009      	beq.n	8016c9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8016c8a:	9019      	str	r0, [sp, #100]	; 0x64
 8016c8c:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8016c90:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8016c94:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8016c98:	911d      	str	r1, [sp, #116]	; 0x74
 8016c9a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8016c9e:	1ad2      	subs	r2, r2, r3
 8016ca0:	e68b      	b.n	80169ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016ca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016ca4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	f000 80d1 	beq.w	8016e4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8016cac:	ad19      	add	r5, sp, #100	; 0x64
 8016cae:	ac39      	add	r4, sp, #228	; 0xe4
 8016cb0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016cb2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8016cb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016cba:	930c      	str	r3, [sp, #48]	; 0x30
 8016cbc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016cbe:	6963      	ldr	r3, [r4, #20]
 8016cc0:	440b      	add	r3, r1
 8016cc2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016cc6:	4408      	add	r0, r1
 8016cc8:	b200      	sxth	r0, r0
 8016cca:	4283      	cmp	r3, r0
 8016ccc:	900d      	str	r0, [sp, #52]	; 0x34
 8016cce:	f280 80c1 	bge.w	8016e54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8016cd2:	428b      	cmp	r3, r1
 8016cd4:	da08      	bge.n	8016ce8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016cd6:	2a00      	cmp	r2, #0
 8016cd8:	dd06      	ble.n	8016ce8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016cda:	1acb      	subs	r3, r1, r3
 8016cdc:	429a      	cmp	r2, r3
 8016cde:	f2c0 80bb 	blt.w	8016e58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	f300 80b9 	bgt.w	8016e5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8016ce8:	6967      	ldr	r7, [r4, #20]
 8016cea:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8016cee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016cf0:	443b      	add	r3, r7
 8016cf2:	461f      	mov	r7, r3
 8016cf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016cf6:	1bdf      	subs	r7, r3, r7
 8016cf8:	4297      	cmp	r7, r2
 8016cfa:	bfa8      	it	ge
 8016cfc:	4617      	movge	r7, r2
 8016cfe:	2f00      	cmp	r7, #0
 8016d00:	f340 813c 	ble.w	8016f7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8016d04:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016d06:	6829      	ldr	r1, [r5, #0]
 8016d08:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016d0c:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016d10:	4411      	add	r1, r2
 8016d12:	6820      	ldr	r0, [r4, #0]
 8016d14:	4299      	cmp	r1, r3
 8016d16:	dd1a      	ble.n	8016d4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016d18:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016d1c:	4402      	add	r2, r0
 8016d1e:	440b      	add	r3, r1
 8016d20:	b21b      	sxth	r3, r3
 8016d22:	429a      	cmp	r2, r3
 8016d24:	dc13      	bgt.n	8016d4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016d26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016d28:	a912      	add	r1, sp, #72	; 0x48
 8016d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	9206      	str	r2, [sp, #24]
 8016d32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016d34:	9500      	str	r5, [sp, #0]
 8016d36:	9205      	str	r2, [sp, #20]
 8016d38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016d3a:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016d3e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016d40:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016d44:	aa49      	add	r2, sp, #292	; 0x124
 8016d46:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8016d4a:	4623      	mov	r3, r4
 8016d4c:	47c8      	blx	r9
 8016d4e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8016d52:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016d56:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016d5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016d5e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8016d62:	68a1      	ldr	r1, [r4, #8]
 8016d64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016d68:	ed94 6a08 	vldr	s12, [r4, #32]
 8016d6c:	edd4 6a07 	vldr	s13, [r4, #28]
 8016d70:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016d74:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016d78:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016d7c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016d80:	edc4 6a07 	vstr	s13, [r4, #28]
 8016d84:	441a      	add	r2, r3
 8016d86:	6963      	ldr	r3, [r4, #20]
 8016d88:	3301      	adds	r3, #1
 8016d8a:	6022      	str	r2, [r4, #0]
 8016d8c:	6163      	str	r3, [r4, #20]
 8016d8e:	69a3      	ldr	r3, [r4, #24]
 8016d90:	3b01      	subs	r3, #1
 8016d92:	61a3      	str	r3, [r4, #24]
 8016d94:	6923      	ldr	r3, [r4, #16]
 8016d96:	440b      	add	r3, r1
 8016d98:	68e1      	ldr	r1, [r4, #12]
 8016d9a:	428b      	cmp	r3, r1
 8016d9c:	6123      	str	r3, [r4, #16]
 8016d9e:	db15      	blt.n	8016dcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8016da0:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8016da4:	3201      	adds	r2, #1
 8016da6:	1a5b      	subs	r3, r3, r1
 8016da8:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016dac:	6022      	str	r2, [r4, #0]
 8016dae:	6123      	str	r3, [r4, #16]
 8016db0:	edc4 6a07 	vstr	s13, [r4, #28]
 8016db4:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016db8:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016dbc:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016dc0:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016dc8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016dcc:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8016dd0:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8016dd4:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8016dd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016ddc:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8016de0:	68a9      	ldr	r1, [r5, #8]
 8016de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016de6:	ed95 6a08 	vldr	s12, [r5, #32]
 8016dea:	edd5 6a07 	vldr	s13, [r5, #28]
 8016dee:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016df2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016df6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016dfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016dfe:	edc5 6a07 	vstr	s13, [r5, #28]
 8016e02:	441a      	add	r2, r3
 8016e04:	696b      	ldr	r3, [r5, #20]
 8016e06:	3301      	adds	r3, #1
 8016e08:	602a      	str	r2, [r5, #0]
 8016e0a:	616b      	str	r3, [r5, #20]
 8016e0c:	69ab      	ldr	r3, [r5, #24]
 8016e0e:	3b01      	subs	r3, #1
 8016e10:	61ab      	str	r3, [r5, #24]
 8016e12:	692b      	ldr	r3, [r5, #16]
 8016e14:	440b      	add	r3, r1
 8016e16:	68e9      	ldr	r1, [r5, #12]
 8016e18:	428b      	cmp	r3, r1
 8016e1a:	612b      	str	r3, [r5, #16]
 8016e1c:	db15      	blt.n	8016e4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8016e1e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016e22:	3201      	adds	r2, #1
 8016e24:	1a5b      	subs	r3, r3, r1
 8016e26:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016e2a:	602a      	str	r2, [r5, #0]
 8016e2c:	612b      	str	r3, [r5, #16]
 8016e2e:	edc5 6a07 	vstr	s13, [r5, #28]
 8016e32:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016e36:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016e3a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016e3e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e46:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016e4a:	3f01      	subs	r7, #1
 8016e4c:	e757      	b.n	8016cfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8016e4e:	ad39      	add	r5, sp, #228	; 0xe4
 8016e50:	ac19      	add	r4, sp, #100	; 0x64
 8016e52:	e72d      	b.n	8016cb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8016e54:	4613      	mov	r3, r2
 8016e56:	e744      	b.n	8016ce2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8016e58:	4613      	mov	r3, r2
 8016e5a:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8016e5c:	469e      	mov	lr, r3
 8016e5e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8016e62:	461f      	mov	r7, r3
 8016e64:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8016e68:	f04f 0900 	mov.w	r9, #0
 8016e6c:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8016e70:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8016e74:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8016e78:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8016e7c:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8016e80:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8016e82:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8016e86:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8016e8a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8016e8e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8016e92:	960e      	str	r6, [sp, #56]	; 0x38
 8016e94:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8016e98:	2f00      	cmp	r7, #0
 8016e9a:	d146      	bne.n	8016f2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8016e9c:	449c      	add	ip, r3
 8016e9e:	1ad7      	subs	r7, r2, r3
 8016ea0:	f1b9 0f00 	cmp.w	r9, #0
 8016ea4:	d009      	beq.n	8016eba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8016ea6:	9039      	str	r0, [sp, #228]	; 0xe4
 8016ea8:	913d      	str	r1, [sp, #244]	; 0xf4
 8016eaa:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8016eae:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8016eb2:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8016eb6:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8016eba:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016ebc:	f04f 0800 	mov.w	r8, #0
 8016ec0:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8016ec4:	910e      	str	r1, [sp, #56]	; 0x38
 8016ec6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8016eca:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8016ece:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8016ed2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8016ed6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8016eda:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8016ede:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8016ee2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8016ee6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8016eea:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8016eee:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8016ef2:	f1be 0f00 	cmp.w	lr, #0
 8016ef6:	d030      	beq.n	8016f5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8016ef8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016efa:	4450      	add	r0, sl
 8016efc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016f00:	4431      	add	r1, r6
 8016f02:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016f06:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016f0a:	4549      	cmp	r1, r9
 8016f0c:	db08      	blt.n	8016f20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8016f0e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016f12:	3001      	adds	r0, #1
 8016f14:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016f18:	eba1 0109 	sub.w	r1, r1, r9
 8016f1c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016f20:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016f24:	f04f 0801 	mov.w	r8, #1
 8016f28:	e7e3      	b.n	8016ef2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8016f2a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016f2c:	4450      	add	r0, sl
 8016f2e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016f32:	4431      	add	r1, r6
 8016f34:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016f38:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016f3c:	4541      	cmp	r1, r8
 8016f3e:	db08      	blt.n	8016f52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8016f40:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016f44:	3001      	adds	r0, #1
 8016f46:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016f4a:	eba1 0108 	sub.w	r1, r1, r8
 8016f4e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016f52:	3f01      	subs	r7, #1
 8016f54:	f04f 0901 	mov.w	r9, #1
 8016f58:	e79e      	b.n	8016e98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8016f5a:	449c      	add	ip, r3
 8016f5c:	1aff      	subs	r7, r7, r3
 8016f5e:	f1b8 0f00 	cmp.w	r8, #0
 8016f62:	d009      	beq.n	8016f78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8016f64:	9019      	str	r0, [sp, #100]	; 0x64
 8016f66:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8016f6a:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8016f6e:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8016f72:	911d      	str	r1, [sp, #116]	; 0x74
 8016f74:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8016f78:	1ad2      	subs	r2, r2, r3
 8016f7a:	e6b5      	b.n	8016ce8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016f7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f7e:	681b      	ldr	r3, [r3, #0]
 8016f80:	b923      	cbnz	r3, 8016f8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016f82:	4b04      	ldr	r3, [pc, #16]	; (8016f94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8016f84:	6818      	ldr	r0, [r3, #0]
 8016f86:	6803      	ldr	r3, [r0, #0]
 8016f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f8a:	4798      	blx	r3
 8016f8c:	b05b      	add	sp, #364	; 0x16c
 8016f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f92:	bf00      	nop
 8016f94:	20027ca8 	.word	0x20027ca8

08016f98 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8016f98:	b570      	push	{r4, r5, r6, lr}
 8016f9a:	4604      	mov	r4, r0
 8016f9c:	2500      	movs	r5, #0
 8016f9e:	9805      	ldr	r0, [sp, #20]
 8016fa0:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8016fa4:	6061      	str	r1, [r4, #4]
 8016fa6:	8263      	strh	r3, [r4, #18]
 8016fa8:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8016fac:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8016fb0:	8025      	strh	r5, [r4, #0]
 8016fb2:	7221      	strb	r1, [r4, #8]
 8016fb4:	7266      	strb	r6, [r4, #9]
 8016fb6:	60e0      	str	r0, [r4, #12]
 8016fb8:	8222      	strh	r2, [r4, #16]
 8016fba:	82a3      	strh	r3, [r4, #20]
 8016fbc:	82e5      	strh	r5, [r4, #22]
 8016fbe:	8325      	strh	r5, [r4, #24]
 8016fc0:	8365      	strh	r5, [r4, #26]
 8016fc2:	83a5      	strh	r5, [r4, #28]
 8016fc4:	83e5      	strh	r5, [r4, #30]
 8016fc6:	8425      	strh	r5, [r4, #32]
 8016fc8:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8016fcc:	b32e      	cbz	r6, 801701a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8016fce:	6803      	ldr	r3, [r0, #0]
 8016fd0:	695b      	ldr	r3, [r3, #20]
 8016fd2:	4798      	blx	r3
 8016fd4:	4606      	mov	r6, r0
 8016fd6:	b300      	cbz	r0, 801701a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8016fd8:	68e0      	ldr	r0, [r4, #12]
 8016fda:	4631      	mov	r1, r6
 8016fdc:	6803      	ldr	r3, [r0, #0]
 8016fde:	68db      	ldr	r3, [r3, #12]
 8016fe0:	4798      	blx	r3
 8016fe2:	4605      	mov	r5, r0
 8016fe4:	b1c8      	cbz	r0, 801701a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8016fe6:	7b43      	ldrb	r3, [r0, #13]
 8016fe8:	7a82      	ldrb	r2, [r0, #10]
 8016fea:	005b      	lsls	r3, r3, #1
 8016fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016ff0:	4313      	orrs	r3, r2
 8016ff2:	8423      	strh	r3, [r4, #32]
 8016ff4:	7a63      	ldrb	r3, [r4, #9]
 8016ff6:	2b06      	cmp	r3, #6
 8016ff8:	d10f      	bne.n	801701a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8016ffa:	68e0      	ldr	r0, [r4, #12]
 8016ffc:	462a      	mov	r2, r5
 8016ffe:	4631      	mov	r1, r6
 8017000:	6803      	ldr	r3, [r0, #0]
 8017002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017004:	4798      	blx	r3
 8017006:	7b6b      	ldrb	r3, [r5, #13]
 8017008:	005b      	lsls	r3, r3, #1
 801700a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801700e:	7aab      	ldrb	r3, [r5, #10]
 8017010:	4313      	orrs	r3, r2
 8017012:	4418      	add	r0, r3
 8017014:	8c23      	ldrh	r3, [r4, #32]
 8017016:	4418      	add	r0, r3
 8017018:	8420      	strh	r0, [r4, #32]
 801701a:	4620      	mov	r0, r4
 801701c:	bd70      	pop	{r4, r5, r6, pc}

0801701e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801701e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017022:	2400      	movs	r4, #0
 8017024:	b085      	sub	sp, #20
 8017026:	4681      	mov	r9, r0
 8017028:	4688      	mov	r8, r1
 801702a:	4692      	mov	sl, r2
 801702c:	469b      	mov	fp, r3
 801702e:	4627      	mov	r7, r4
 8017030:	4625      	mov	r5, r4
 8017032:	4626      	mov	r6, r4
 8017034:	4554      	cmp	r4, sl
 8017036:	da2a      	bge.n	801708e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017038:	2300      	movs	r3, #0
 801703a:	9303      	str	r3, [sp, #12]
 801703c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017040:	429d      	cmp	r5, r3
 8017042:	d004      	beq.n	801704e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8017044:	f242 030b 	movw	r3, #8203	; 0x200b
 8017048:	429d      	cmp	r5, r3
 801704a:	bf18      	it	ne
 801704c:	462f      	movne	r7, r5
 801704e:	ab03      	add	r3, sp, #12
 8017050:	4642      	mov	r2, r8
 8017052:	4659      	mov	r1, fp
 8017054:	4648      	mov	r0, r9
 8017056:	f003 f925 	bl	801a2a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801705a:	4605      	mov	r5, r0
 801705c:	b1b8      	cbz	r0, 801708e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801705e:	280a      	cmp	r0, #10
 8017060:	d015      	beq.n	801708e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017062:	9a03      	ldr	r2, [sp, #12]
 8017064:	b18a      	cbz	r2, 801708a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8017066:	7b50      	ldrb	r0, [r2, #13]
 8017068:	4639      	mov	r1, r7
 801706a:	7a93      	ldrb	r3, [r2, #10]
 801706c:	0040      	lsls	r0, r0, #1
 801706e:	8895      	ldrh	r5, [r2, #4]
 8017070:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017074:	4303      	orrs	r3, r0
 8017076:	4640      	mov	r0, r8
 8017078:	9301      	str	r3, [sp, #4]
 801707a:	f8d8 3000 	ldr.w	r3, [r8]
 801707e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017080:	4798      	blx	r3
 8017082:	9b01      	ldr	r3, [sp, #4]
 8017084:	4418      	add	r0, r3
 8017086:	4406      	add	r6, r0
 8017088:	b2b6      	uxth	r6, r6
 801708a:	3401      	adds	r4, #1
 801708c:	e7d2      	b.n	8017034 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801708e:	4630      	mov	r0, r6
 8017090:	b005      	add	sp, #20
 8017092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017096 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8017096:	2a02      	cmp	r2, #2
 8017098:	b530      	push	{r4, r5, lr}
 801709a:	d011      	beq.n	80170c0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801709c:	2a03      	cmp	r2, #3
 801709e:	d01c      	beq.n	80170da <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80170a0:	2a01      	cmp	r2, #1
 80170a2:	d10c      	bne.n	80170be <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80170a4:	888b      	ldrh	r3, [r1, #4]
 80170a6:	8801      	ldrh	r1, [r0, #0]
 80170a8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80170ac:	1a5b      	subs	r3, r3, r1
 80170ae:	8844      	ldrh	r4, [r0, #2]
 80170b0:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80170b4:	1a9b      	subs	r3, r3, r2
 80170b6:	8004      	strh	r4, [r0, #0]
 80170b8:	8081      	strh	r1, [r0, #4]
 80170ba:	8043      	strh	r3, [r0, #2]
 80170bc:	80c2      	strh	r2, [r0, #6]
 80170be:	bd30      	pop	{r4, r5, pc}
 80170c0:	88cb      	ldrh	r3, [r1, #6]
 80170c2:	8842      	ldrh	r2, [r0, #2]
 80170c4:	1a9b      	subs	r3, r3, r2
 80170c6:	88c2      	ldrh	r2, [r0, #6]
 80170c8:	1a9b      	subs	r3, r3, r2
 80170ca:	888a      	ldrh	r2, [r1, #4]
 80170cc:	8801      	ldrh	r1, [r0, #0]
 80170ce:	8043      	strh	r3, [r0, #2]
 80170d0:	1a52      	subs	r2, r2, r1
 80170d2:	8881      	ldrh	r1, [r0, #4]
 80170d4:	1a52      	subs	r2, r2, r1
 80170d6:	8002      	strh	r2, [r0, #0]
 80170d8:	e7f1      	b.n	80170be <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80170da:	88cb      	ldrh	r3, [r1, #6]
 80170dc:	8841      	ldrh	r1, [r0, #2]
 80170de:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80170e2:	1a5b      	subs	r3, r3, r1
 80170e4:	f9b0 5000 	ldrsh.w	r5, [r0]
 80170e8:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80170ec:	1a9b      	subs	r3, r3, r2
 80170ee:	8045      	strh	r5, [r0, #2]
 80170f0:	8082      	strh	r2, [r0, #4]
 80170f2:	8003      	strh	r3, [r0, #0]
 80170f4:	80c4      	strh	r4, [r0, #6]
 80170f6:	e7e2      	b.n	80170be <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

080170f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80170f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170fc:	b09f      	sub	sp, #124	; 0x7c
 80170fe:	9116      	str	r1, [sp, #88]	; 0x58
 8017100:	9317      	str	r3, [sp, #92]	; 0x5c
 8017102:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8017104:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017106:	8809      	ldrh	r1, [r1, #0]
 8017108:	889b      	ldrh	r3, [r3, #4]
 801710a:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801710e:	440b      	add	r3, r1
 8017110:	9212      	str	r2, [sp, #72]	; 0x48
 8017112:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8017116:	b21b      	sxth	r3, r3
 8017118:	9011      	str	r0, [sp, #68]	; 0x44
 801711a:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801711e:	9310      	str	r3, [sp, #64]	; 0x40
 8017120:	f8d8 3000 	ldr.w	r3, [r8]
 8017124:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 8017128:	7b19      	ldrb	r1, [r3, #12]
 801712a:	7adb      	ldrb	r3, [r3, #11]
 801712c:	9114      	str	r1, [sp, #80]	; 0x50
 801712e:	9315      	str	r3, [sp, #84]	; 0x54
 8017130:	2a00      	cmp	r2, #0
 8017132:	d06a      	beq.n	801720a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8017134:	f898 3010 	ldrb.w	r3, [r8, #16]
 8017138:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801713a:	2b06      	cmp	r3, #6
 801713c:	bf14      	ite	ne
 801713e:	2301      	movne	r3, #1
 8017140:	2302      	moveq	r3, #2
 8017142:	4413      	add	r3, r2
 8017144:	f04f 0900 	mov.w	r9, #0
 8017148:	930f      	str	r3, [sp, #60]	; 0x3c
 801714a:	464c      	mov	r4, r9
 801714c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8017150:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8017154:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8017158:	4293      	cmp	r3, r2
 801715a:	f280 808f 	bge.w	801727c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801715e:	2300      	movs	r3, #0
 8017160:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8017164:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8017168:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801716c:	429c      	cmp	r4, r3
 801716e:	d006      	beq.n	801717e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8017170:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017172:	f242 020b 	movw	r2, #8203	; 0x200b
 8017176:	4294      	cmp	r4, r2
 8017178:	bf18      	it	ne
 801717a:	4623      	movne	r3, r4
 801717c:	930d      	str	r3, [sp, #52]	; 0x34
 801717e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017180:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8017182:	f8d8 2000 	ldr.w	r2, [r8]
 8017186:	428b      	cmp	r3, r1
 8017188:	db41      	blt.n	801720e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801718a:	6813      	ldr	r3, [r2, #0]
 801718c:	4610      	mov	r0, r2
 801718e:	695b      	ldr	r3, [r3, #20]
 8017190:	4798      	blx	r3
 8017192:	4604      	mov	r4, r0
 8017194:	f8d8 0000 	ldr.w	r0, [r8]
 8017198:	aa1d      	add	r2, sp, #116	; 0x74
 801719a:	4621      	mov	r1, r4
 801719c:	6803      	ldr	r3, [r0, #0]
 801719e:	689d      	ldr	r5, [r3, #8]
 80171a0:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80171a4:	47a8      	blx	r5
 80171a6:	901c      	str	r0, [sp, #112]	; 0x70
 80171a8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80171ac:	429c      	cmp	r4, r3
 80171ae:	f000 80ec 	beq.w	801738a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80171b2:	f242 030b 	movw	r3, #8203	; 0x200b
 80171b6:	429c      	cmp	r4, r3
 80171b8:	f000 80e7 	beq.w	801738a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80171bc:	2c00      	cmp	r4, #0
 80171be:	f000 80f9 	beq.w	80173b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 80171c2:	2c0a      	cmp	r4, #10
 80171c4:	d060      	beq.n	8017288 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 80171c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80171c8:	b36a      	cbz	r2, 8017226 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 80171ca:	8894      	ldrh	r4, [r2, #4]
 80171cc:	f1bb 0f00 	cmp.w	fp, #0
 80171d0:	d03b      	beq.n	801724a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 80171d2:	f892 900d 	ldrb.w	r9, [r2, #13]
 80171d6:	f1bb 0f01 	cmp.w	fp, #1
 80171da:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80171de:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80171e2:	f892 900a 	ldrb.w	r9, [r2, #10]
 80171e6:	ea49 0903 	orr.w	r9, r9, r3
 80171ea:	d134      	bne.n	8017256 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 80171ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80171ee:	eba6 0609 	sub.w	r6, r6, r9
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d14f      	bne.n	8017296 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80171f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80171f8:	eb09 0306 	add.w	r3, r9, r6
 80171fc:	4413      	add	r3, r2
 80171fe:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8017200:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017204:	4293      	cmp	r3, r2
 8017206:	da51      	bge.n	80172ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8017208:	e038      	b.n	801727c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801720a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801720c:	e79a      	b.n	8017144 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 801720e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8017212:	4659      	mov	r1, fp
 8017214:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8017216:	9301      	str	r3, [sp, #4]
 8017218:	ab1d      	add	r3, sp, #116	; 0x74
 801721a:	9300      	str	r3, [sp, #0]
 801721c:	ab1c      	add	r3, sp, #112	; 0x70
 801721e:	f003 f88a 	bl	801a336 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8017222:	4604      	mov	r4, r0
 8017224:	e7c0      	b.n	80171a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8017226:	f8d8 0000 	ldr.w	r0, [r8]
 801722a:	6803      	ldr	r3, [r0, #0]
 801722c:	691b      	ldr	r3, [r3, #16]
 801722e:	4798      	blx	r3
 8017230:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017234:	4298      	cmp	r0, r3
 8017236:	f000 80a8 	beq.w	801738a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801723a:	f242 030b 	movw	r3, #8203	; 0x200b
 801723e:	4298      	cmp	r0, r3
 8017240:	f000 80a3 	beq.w	801738a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8017244:	f1bb 0f00 	cmp.w	fp, #0
 8017248:	d100      	bne.n	801724c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801724a:	444e      	add	r6, r9
 801724c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801724e:	2a00      	cmp	r2, #0
 8017250:	d1bf      	bne.n	80171d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8017252:	4691      	mov	r9, r2
 8017254:	e099      	b.n	801738a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8017256:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017258:	2b00      	cmp	r3, #0
 801725a:	f000 80ad 	beq.w	80173b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 801725e:	f1bb 0f00 	cmp.w	fp, #0
 8017262:	d118      	bne.n	8017296 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8017264:	f8d8 0000 	ldr.w	r0, [r8]
 8017268:	990d      	ldr	r1, [sp, #52]	; 0x34
 801726a:	6803      	ldr	r3, [r0, #0]
 801726c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801726e:	4798      	blx	r3
 8017270:	4406      	add	r6, r0
 8017272:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017274:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017276:	1af3      	subs	r3, r6, r3
 8017278:	4293      	cmp	r3, r2
 801727a:	dd17      	ble.n	80172ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801727c:	2c00      	cmp	r4, #0
 801727e:	f000 8099 	beq.w	80173b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8017282:	2c0a      	cmp	r4, #10
 8017284:	f040 8087 	bne.w	8017396 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8017288:	240a      	movs	r4, #10
 801728a:	fab4 f084 	clz	r0, r4
 801728e:	0940      	lsrs	r0, r0, #5
 8017290:	b01f      	add	sp, #124	; 0x7c
 8017292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017296:	f8d8 0000 	ldr.w	r0, [r8]
 801729a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801729c:	6803      	ldr	r3, [r0, #0]
 801729e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80172a0:	4798      	blx	r3
 80172a2:	f1bb 0f01 	cmp.w	fp, #1
 80172a6:	eba6 0600 	sub.w	r6, r6, r0
 80172aa:	d0a4      	beq.n	80171f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 80172ac:	981c      	ldr	r0, [sp, #112]	; 0x70
 80172ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80172b0:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80172b4:	f9b3 7000 	ldrsh.w	r7, [r3]
 80172b8:	7b43      	ldrb	r3, [r0, #13]
 80172ba:	4431      	add	r1, r6
 80172bc:	015b      	lsls	r3, r3, #5
 80172be:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80172c2:	7983      	ldrb	r3, [r0, #6]
 80172c4:	4313      	orrs	r3, r2
 80172c6:	440b      	add	r3, r1
 80172c8:	42bb      	cmp	r3, r7
 80172ca:	db5e      	blt.n	801738a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80172cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80172ce:	4299      	cmp	r1, r3
 80172d0:	da5b      	bge.n	801738a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80172d2:	f8d8 0000 	ldr.w	r0, [r8]
 80172d6:	42b7      	cmp	r7, r6
 80172d8:	6803      	ldr	r3, [r0, #0]
 80172da:	bfcc      	ite	gt
 80172dc:	1bbf      	subgt	r7, r7, r6
 80172de:	2700      	movle	r7, #0
 80172e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172e2:	bfc8      	it	gt
 80172e4:	b2bf      	uxthgt	r7, r7
 80172e6:	4798      	blx	r3
 80172e8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80172ea:	7b5a      	ldrb	r2, [r3, #13]
 80172ec:	00d1      	lsls	r1, r2, #3
 80172ee:	f401 7580 	and.w	r5, r1, #256	; 0x100
 80172f2:	7a19      	ldrb	r1, [r3, #8]
 80172f4:	4329      	orrs	r1, r5
 80172f6:	0655      	lsls	r5, r2, #25
 80172f8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80172fa:	bf48      	it	mi
 80172fc:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8017300:	4405      	add	r5, r0
 8017302:	bf48      	it	mi
 8017304:	b209      	sxthmi	r1, r1
 8017306:	1a6d      	subs	r5, r5, r1
 8017308:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801730a:	b2ad      	uxth	r5, r5
 801730c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8017310:	fa0f fa85 	sxth.w	sl, r5
 8017314:	4551      	cmp	r1, sl
 8017316:	dd3c      	ble.n	8017392 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8017318:	0112      	lsls	r2, r2, #4
 801731a:	79d8      	ldrb	r0, [r3, #7]
 801731c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8017320:	4302      	orrs	r2, r0
 8017322:	4492      	add	sl, r2
 8017324:	4551      	cmp	r1, sl
 8017326:	dc30      	bgt.n	801738a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8017328:	1b4d      	subs	r5, r1, r5
 801732a:	468a      	mov	sl, r1
 801732c:	b22d      	sxth	r5, r5
 801732e:	9319      	str	r3, [sp, #100]	; 0x64
 8017330:	b2ad      	uxth	r5, r5
 8017332:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017334:	f8d8 0000 	ldr.w	r0, [r8]
 8017338:	681a      	ldr	r2, [r3, #0]
 801733a:	6801      	ldr	r1, [r0, #0]
 801733c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801733e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017340:	9313      	str	r3, [sp, #76]	; 0x4c
 8017342:	9218      	str	r2, [sp, #96]	; 0x60
 8017344:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017346:	4788      	blx	r1
 8017348:	f898 1006 	ldrb.w	r1, [r8, #6]
 801734c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801734e:	910b      	str	r1, [sp, #44]	; 0x2c
 8017350:	f898 100e 	ldrb.w	r1, [r8, #14]
 8017354:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017356:	910a      	str	r1, [sp, #40]	; 0x28
 8017358:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801735c:	9109      	str	r1, [sp, #36]	; 0x24
 801735e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8017362:	9305      	str	r3, [sp, #20]
 8017364:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017366:	9206      	str	r2, [sp, #24]
 8017368:	9304      	str	r3, [sp, #16]
 801736a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801736c:	f8cd a004 	str.w	sl, [sp, #4]
 8017370:	e9cd 7502 	strd	r7, r5, [sp, #8]
 8017374:	4437      	add	r7, r6
 8017376:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8017378:	b23f      	sxth	r7, r7
 801737a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801737e:	9700      	str	r7, [sp, #0]
 8017380:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017382:	681a      	ldr	r2, [r3, #0]
 8017384:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017386:	685b      	ldr	r3, [r3, #4]
 8017388:	47a8      	blx	r5
 801738a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801738c:	3301      	adds	r3, #1
 801738e:	930e      	str	r3, [sp, #56]	; 0x38
 8017390:	e6e0      	b.n	8017154 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8017392:	2500      	movs	r5, #0
 8017394:	e7cb      	b.n	801732e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 8017396:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8017398:	3501      	adds	r5, #1
 801739a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801739c:	429d      	cmp	r5, r3
 801739e:	f6bf af74 	bge.w	801728a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 80173a2:	4659      	mov	r1, fp
 80173a4:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80173a6:	f7ee fc17 	bl	8005bd8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80173aa:	4604      	mov	r4, r0
 80173ac:	b110      	cbz	r0, 80173b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 80173ae:	280a      	cmp	r0, #10
 80173b0:	d1f2      	bne.n	8017398 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 80173b2:	e769      	b.n	8017288 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 80173b4:	2400      	movs	r4, #0
 80173b6:	e768      	b.n	801728a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 80173b8:	f1bb 0f00 	cmp.w	fp, #0
 80173bc:	f43f af59 	beq.w	8017272 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 80173c0:	e774      	b.n	80172ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

080173c2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80173c2:	b530      	push	{r4, r5, lr}
 80173c4:	8ac4      	ldrh	r4, [r0, #22]
 80173c6:	8b45      	ldrh	r5, [r0, #26]
 80173c8:	8343      	strh	r3, [r0, #26]
 80173ca:	442c      	add	r4, r5
 80173cc:	1ae4      	subs	r4, r4, r3
 80173ce:	8b83      	ldrh	r3, [r0, #28]
 80173d0:	82c4      	strh	r4, [r0, #22]
 80173d2:	8b04      	ldrh	r4, [r0, #24]
 80173d4:	4422      	add	r2, r4
 80173d6:	440c      	add	r4, r1
 80173d8:	1a59      	subs	r1, r3, r1
 80173da:	83c2      	strh	r2, [r0, #30]
 80173dc:	8304      	strh	r4, [r0, #24]
 80173de:	8381      	strh	r1, [r0, #28]
 80173e0:	bd30      	pop	{r4, r5, pc}

080173e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 80173e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173e6:	4604      	mov	r4, r0
 80173e8:	8a47      	ldrh	r7, [r0, #18]
 80173ea:	68c0      	ldr	r0, [r0, #12]
 80173ec:	b085      	sub	sp, #20
 80173ee:	6803      	ldr	r3, [r0, #0]
 80173f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173f2:	4798      	blx	r3
 80173f4:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 80173f8:	7a63      	ldrb	r3, [r4, #9]
 80173fa:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 80173fe:	3b01      	subs	r3, #1
 8017400:	42b7      	cmp	r7, r6
 8017402:	bfac      	ite	ge
 8017404:	f04f 0900 	movge.w	r9, #0
 8017408:	f04f 0901 	movlt.w	r9, #1
 801740c:	2b05      	cmp	r3, #5
 801740e:	d804      	bhi.n	801741a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8017410:	e8df f003 	tbb	[pc, r3]
 8017414:	470f0854 	.word	0x470f0854
 8017418:	4c4c      	.short	0x4c4c
 801741a:	2500      	movs	r5, #0
 801741c:	46a9      	mov	r9, r5
 801741e:	462e      	mov	r6, r5
 8017420:	462f      	mov	r7, r5
 8017422:	e00e      	b.n	8017442 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8017424:	42b7      	cmp	r7, r6
 8017426:	f04f 0500 	mov.w	r5, #0
 801742a:	bfb4      	ite	lt
 801742c:	2600      	movlt	r6, #0
 801742e:	2601      	movge	r6, #1
 8017430:	e7f6      	b.n	8017420 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8017432:	42b7      	cmp	r7, r6
 8017434:	464d      	mov	r5, r9
 8017436:	f04f 0900 	mov.w	r9, #0
 801743a:	bfb4      	ite	lt
 801743c:	2600      	movlt	r6, #0
 801743e:	2601      	movge	r6, #1
 8017440:	464f      	mov	r7, r9
 8017442:	f04f 0800 	mov.w	r8, #0
 8017446:	f8a4 8016 	strh.w	r8, [r4, #22]
 801744a:	f8a4 8018 	strh.w	r8, [r4, #24]
 801744e:	f8cd 8004 	str.w	r8, [sp, #4]
 8017452:	2300      	movs	r3, #0
 8017454:	9303      	str	r3, [sp, #12]
 8017456:	8823      	ldrh	r3, [r4, #0]
 8017458:	2b20      	cmp	r3, #32
 801745a:	d033      	beq.n	80174c4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 801745c:	f242 010b 	movw	r1, #8203	; 0x200b
 8017460:	1a5a      	subs	r2, r3, r1
 8017462:	f1d2 0a00 	rsbs	sl, r2, #0
 8017466:	eb4a 0a02 	adc.w	sl, sl, r2
 801746a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801746e:	4293      	cmp	r3, r2
 8017470:	d008      	beq.n	8017484 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8017472:	428b      	cmp	r3, r1
 8017474:	9a01      	ldr	r2, [sp, #4]
 8017476:	bf0e      	itee	eq
 8017478:	f04f 0a01 	moveq.w	sl, #1
 801747c:	461a      	movne	r2, r3
 801747e:	f04f 0a00 	movne.w	sl, #0
 8017482:	9201      	str	r2, [sp, #4]
 8017484:	ab03      	add	r3, sp, #12
 8017486:	68e2      	ldr	r2, [r4, #12]
 8017488:	7a21      	ldrb	r1, [r4, #8]
 801748a:	6860      	ldr	r0, [r4, #4]
 801748c:	f002 ff0a 	bl	801a2a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017490:	8020      	strh	r0, [r4, #0]
 8017492:	b9d8      	cbnz	r0, 80174cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8017494:	8ba2      	ldrh	r2, [r4, #28]
 8017496:	2300      	movs	r3, #0
 8017498:	4611      	mov	r1, r2
 801749a:	4620      	mov	r0, r4
 801749c:	f7ff ff91 	bl	80173c2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80174a0:	e06e      	b.n	8017580 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80174a2:	2500      	movs	r5, #0
 80174a4:	2701      	movs	r7, #1
 80174a6:	46a9      	mov	r9, r5
 80174a8:	462e      	mov	r6, r5
 80174aa:	e7ca      	b.n	8017442 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80174ac:	42b7      	cmp	r7, r6
 80174ae:	f04f 0500 	mov.w	r5, #0
 80174b2:	bfb4      	ite	lt
 80174b4:	2700      	movlt	r7, #0
 80174b6:	2701      	movge	r7, #1
 80174b8:	462e      	mov	r6, r5
 80174ba:	e7c2      	b.n	8017442 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80174bc:	2500      	movs	r5, #0
 80174be:	2601      	movs	r6, #1
 80174c0:	46a9      	mov	r9, r5
 80174c2:	e7ad      	b.n	8017420 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 80174c4:	9301      	str	r3, [sp, #4]
 80174c6:	f04f 0a01 	mov.w	sl, #1
 80174ca:	e7db      	b.n	8017484 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 80174cc:	8b63      	ldrh	r3, [r4, #26]
 80174ce:	280a      	cmp	r0, #10
 80174d0:	f103 0301 	add.w	r3, r3, #1
 80174d4:	8363      	strh	r3, [r4, #26]
 80174d6:	d0dd      	beq.n	8017494 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 80174d8:	9a03      	ldr	r2, [sp, #12]
 80174da:	bb62      	cbnz	r2, 8017536 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 80174dc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80174e0:	4298      	cmp	r0, r3
 80174e2:	d003      	beq.n	80174ec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 80174e4:	f242 030b 	movw	r3, #8203	; 0x200b
 80174e8:	4298      	cmp	r0, r3
 80174ea:	d1b2      	bne.n	8017452 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80174ec:	8823      	ldrh	r3, [r4, #0]
 80174ee:	8ba1      	ldrh	r1, [r4, #28]
 80174f0:	2b20      	cmp	r3, #32
 80174f2:	d003      	beq.n	80174fc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 80174f4:	f242 000b 	movw	r0, #8203	; 0x200b
 80174f8:	4283      	cmp	r3, r0
 80174fa:	d131      	bne.n	8017560 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 80174fc:	f1ba 0f00 	cmp.w	sl, #0
 8017500:	bf0a      	itet	eq
 8017502:	4688      	moveq	r8, r1
 8017504:	4650      	movne	r0, sl
 8017506:	2001      	moveq	r0, #1
 8017508:	440a      	add	r2, r1
 801750a:	8b23      	ldrh	r3, [r4, #24]
 801750c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8017510:	b292      	uxth	r2, r2
 8017512:	83a2      	strh	r2, [r4, #28]
 8017514:	4413      	add	r3, r2
 8017516:	f1b9 0f00 	cmp.w	r9, #0
 801751a:	d102      	bne.n	8017522 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 801751c:	2d00      	cmp	r5, #0
 801751e:	d042      	beq.n	80175a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8017520:	b300      	cbz	r0, 8017564 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8017522:	8c21      	ldrh	r1, [r4, #32]
 8017524:	4419      	add	r1, r3
 8017526:	458c      	cmp	ip, r1
 8017528:	da37      	bge.n	801759a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801752a:	8ae1      	ldrh	r1, [r4, #22]
 801752c:	2900      	cmp	r1, #0
 801752e:	d034      	beq.n	801759a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8017530:	4563      	cmp	r3, ip
 8017532:	dd8e      	ble.n	8017452 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8017534:	e01d      	b.n	8017572 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8017536:	8893      	ldrh	r3, [r2, #4]
 8017538:	9901      	ldr	r1, [sp, #4]
 801753a:	8023      	strh	r3, [r4, #0]
 801753c:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8017540:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8017544:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 8017548:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801754c:	ea4b 0b00 	orr.w	fp, fp, r0
 8017550:	68e0      	ldr	r0, [r4, #12]
 8017552:	6803      	ldr	r3, [r0, #0]
 8017554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017556:	4798      	blx	r3
 8017558:	eb0b 0200 	add.w	r2, fp, r0
 801755c:	b292      	uxth	r2, r2
 801755e:	e7c5      	b.n	80174ec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8017560:	2000      	movs	r0, #0
 8017562:	e7d1      	b.n	8017508 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8017564:	4563      	cmp	r3, ip
 8017566:	f77f af74 	ble.w	8017452 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801756a:	8ae3      	ldrh	r3, [r4, #22]
 801756c:	2b00      	cmp	r3, #0
 801756e:	f43f af70 	beq.w	8017452 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8017572:	2301      	movs	r3, #1
 8017574:	8c22      	ldrh	r2, [r4, #32]
 8017576:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801757a:	8be3      	ldrh	r3, [r4, #30]
 801757c:	4413      	add	r3, r2
 801757e:	83e3      	strh	r3, [r4, #30]
 8017580:	68e0      	ldr	r0, [r4, #12]
 8017582:	6803      	ldr	r3, [r0, #0]
 8017584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017586:	4798      	blx	r3
 8017588:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801758c:	4418      	add	r0, r3
 801758e:	8a63      	ldrh	r3, [r4, #18]
 8017590:	1a18      	subs	r0, r3, r0
 8017592:	8260      	strh	r0, [r4, #18]
 8017594:	b005      	add	sp, #20
 8017596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801759a:	2300      	movs	r3, #0
 801759c:	4611      	mov	r1, r2
 801759e:	4620      	mov	r0, r4
 80175a0:	f7ff ff0f 	bl	80173c2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80175a4:	e755      	b.n	8017452 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80175a6:	4563      	cmp	r3, ip
 80175a8:	dd14      	ble.n	80175d4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 80175aa:	b117      	cbz	r7, 80175b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 80175ac:	2301      	movs	r3, #1
 80175ae:	460a      	mov	r2, r1
 80175b0:	e772      	b.n	8017498 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 80175b2:	2e00      	cmp	r6, #0
 80175b4:	f43f af4d 	beq.w	8017452 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80175b8:	2800      	cmp	r0, #0
 80175ba:	f47f af4a 	bne.w	8017452 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80175be:	f1ba 0f00 	cmp.w	sl, #0
 80175c2:	d002      	beq.n	80175ca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 80175c4:	2301      	movs	r3, #1
 80175c6:	4642      	mov	r2, r8
 80175c8:	e767      	b.n	801749a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 80175ca:	8ae3      	ldrh	r3, [r4, #22]
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	f43f af40 	beq.w	8017452 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80175d2:	e7d5      	b.n	8017580 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80175d4:	2800      	cmp	r0, #0
 80175d6:	f47f af3c 	bne.w	8017452 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80175da:	f1ba 0f00 	cmp.w	sl, #0
 80175de:	f43f af38 	beq.w	8017452 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80175e2:	2301      	movs	r3, #1
 80175e4:	4642      	mov	r2, r8
 80175e6:	e7da      	b.n	801759e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

080175e8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80175e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80175ea:	4605      	mov	r5, r0
 80175ec:	b08f      	sub	sp, #60	; 0x3c
 80175ee:	4617      	mov	r7, r2
 80175f0:	461c      	mov	r4, r3
 80175f2:	460e      	mov	r6, r1
 80175f4:	b1d1      	cbz	r1, 801762c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 80175f6:	681b      	ldr	r3, [r3, #0]
 80175f8:	4620      	mov	r0, r4
 80175fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80175fc:	4798      	blx	r3
 80175fe:	4240      	negs	r0, r0
 8017600:	9603      	str	r6, [sp, #12]
 8017602:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017606:	b200      	sxth	r0, r0
 8017608:	9700      	str	r7, [sp, #0]
 801760a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801760e:	4629      	mov	r1, r5
 8017610:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8017614:	2401      	movs	r4, #1
 8017616:	a805      	add	r0, sp, #20
 8017618:	f7ff fcbe 	bl	8016f98 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801761c:	a805      	add	r0, sp, #20
 801761e:	f7ff fee0 	bl	80173e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8017622:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8017626:	b163      	cbz	r3, 8017642 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8017628:	3401      	adds	r4, #1
 801762a:	e7f7      	b.n	801761c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801762c:	2401      	movs	r4, #1
 801762e:	f002 ff05 	bl	801a43c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017632:	280a      	cmp	r0, #10
 8017634:	4628      	mov	r0, r5
 8017636:	bf08      	it	eq
 8017638:	3401      	addeq	r4, #1
 801763a:	f002 feff 	bl	801a43c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801763e:	2800      	cmp	r0, #0
 8017640:	d1f7      	bne.n	8017632 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8017642:	b2a0      	uxth	r0, r4
 8017644:	b00f      	add	sp, #60	; 0x3c
 8017646:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017648 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8017648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801764c:	b0e3      	sub	sp, #396	; 0x18c
 801764e:	461c      	mov	r4, r3
 8017650:	4683      	mov	fp, r0
 8017652:	4688      	mov	r8, r1
 8017654:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 8017656:	2b00      	cmp	r3, #0
 8017658:	f000 8112 	beq.w	8017880 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801765c:	6823      	ldr	r3, [r4, #0]
 801765e:	2b00      	cmp	r3, #0
 8017660:	f000 810e 	beq.w	8017880 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8017664:	7ba3      	ldrb	r3, [r4, #14]
 8017666:	2b00      	cmp	r3, #0
 8017668:	f000 810a 	beq.w	8017880 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801766c:	ad0a      	add	r5, sp, #40	; 0x28
 801766e:	6810      	ldr	r0, [r2, #0]
 8017670:	6851      	ldr	r1, [r2, #4]
 8017672:	462b      	mov	r3, r5
 8017674:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8017678:	c303      	stmia	r3!, {r0, r1}
 801767a:	2100      	movs	r1, #0
 801767c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8017680:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8017684:	4628      	mov	r0, r5
 8017686:	910c      	str	r1, [sp, #48]	; 0x30
 8017688:	a90c      	add	r1, sp, #48	; 0x30
 801768a:	79a2      	ldrb	r2, [r4, #6]
 801768c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017690:	f7ff fd01 	bl	8017096 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8017694:	a90c      	add	r1, sp, #48	; 0x30
 8017696:	79a2      	ldrb	r2, [r4, #6]
 8017698:	4608      	mov	r0, r1
 801769a:	f7ff fcfc 	bl	8017096 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801769e:	a817      	add	r0, sp, #92	; 0x5c
 80176a0:	f002 faa0 	bl	8019be4 <_ZN8touchgfx12TextProviderC1Ev>
 80176a4:	6820      	ldr	r0, [r4, #0]
 80176a6:	6803      	ldr	r3, [r0, #0]
 80176a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80176aa:	4798      	blx	r3
 80176ac:	4606      	mov	r6, r0
 80176ae:	6820      	ldr	r0, [r4, #0]
 80176b0:	6803      	ldr	r3, [r0, #0]
 80176b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80176b4:	4798      	blx	r3
 80176b6:	4633      	mov	r3, r6
 80176b8:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 80176ba:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 80176bc:	9000      	str	r0, [sp, #0]
 80176be:	a817      	add	r0, sp, #92	; 0x5c
 80176c0:	f002 faeb 	bl	8019c9a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80176c4:	6820      	ldr	r0, [r4, #0]
 80176c6:	f894 a004 	ldrb.w	sl, [r4, #4]
 80176ca:	6803      	ldr	r3, [r0, #0]
 80176cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176ce:	4798      	blx	r3
 80176d0:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80176d4:	6823      	ldr	r3, [r4, #0]
 80176d6:	4607      	mov	r7, r0
 80176d8:	4406      	add	r6, r0
 80176da:	a830      	add	r0, sp, #192	; 0xc0
 80176dc:	f893 9009 	ldrb.w	r9, [r3, #9]
 80176e0:	f002 fa80 	bl	8019be4 <_ZN8touchgfx12TextProviderC1Ev>
 80176e4:	7c23      	ldrb	r3, [r4, #16]
 80176e6:	b17b      	cbz	r3, 8017708 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 80176e8:	6820      	ldr	r0, [r4, #0]
 80176ea:	6803      	ldr	r3, [r0, #0]
 80176ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80176ee:	4798      	blx	r3
 80176f0:	9009      	str	r0, [sp, #36]	; 0x24
 80176f2:	6820      	ldr	r0, [r4, #0]
 80176f4:	6802      	ldr	r2, [r0, #0]
 80176f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80176f8:	4790      	blx	r2
 80176fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176fc:	9000      	str	r0, [sp, #0]
 80176fe:	a830      	add	r0, sp, #192	; 0xc0
 8017700:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8017702:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8017704:	f002 fac9 	bl	8019c9a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017708:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801770c:	a80e      	add	r0, sp, #56	; 0x38
 801770e:	7be2      	ldrb	r2, [r4, #15]
 8017710:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8017714:	1a8a      	subs	r2, r1, r2
 8017716:	7c21      	ldrb	r1, [r4, #16]
 8017718:	9103      	str	r1, [sp, #12]
 801771a:	b292      	uxth	r2, r2
 801771c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8017720:	9102      	str	r1, [sp, #8]
 8017722:	6821      	ldr	r1, [r4, #0]
 8017724:	9101      	str	r1, [sp, #4]
 8017726:	7961      	ldrb	r1, [r4, #5]
 8017728:	9100      	str	r1, [sp, #0]
 801772a:	a930      	add	r1, sp, #192	; 0xc0
 801772c:	f7ff fc34 	bl	8016f98 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8017730:	2e00      	cmp	r6, #0
 8017732:	dc5b      	bgt.n	80177ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8017734:	af17      	add	r7, sp, #92	; 0x5c
 8017736:	f04f 0900 	mov.w	r9, #0
 801773a:	7c23      	ldrb	r3, [r4, #16]
 801773c:	2b00      	cmp	r3, #0
 801773e:	f000 80b1 	beq.w	80178a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8017742:	a80e      	add	r0, sp, #56	; 0x38
 8017744:	f7ff fe4d 	bl	80173e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8017748:	f1ba 0f00 	cmp.w	sl, #0
 801774c:	f000 80a5 	beq.w	801789a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8017750:	7c23      	ldrb	r3, [r4, #16]
 8017752:	2264      	movs	r2, #100	; 0x64
 8017754:	4639      	mov	r1, r7
 8017756:	a849      	add	r0, sp, #292	; 0x124
 8017758:	9309      	str	r3, [sp, #36]	; 0x24
 801775a:	f013 fee1 	bl	802b520 <memcpy>
 801775e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017760:	2b00      	cmp	r3, #0
 8017762:	f000 80a7 	beq.w	80178b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8017766:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801776a:	7922      	ldrb	r2, [r4, #4]
 801776c:	2a01      	cmp	r2, #1
 801776e:	f040 808a 	bne.w	8017886 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8017772:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8017776:	1ac0      	subs	r0, r0, r3
 8017778:	2302      	movs	r3, #2
 801777a:	fb90 f0f3 	sdiv	r0, r0, r3
 801777e:	b200      	sxth	r0, r0
 8017780:	7c23      	ldrb	r3, [r4, #16]
 8017782:	2b00      	cmp	r3, #0
 8017784:	f000 808b 	beq.w	801789e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8017788:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 801778c:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 8017790:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8017794:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8017798:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801779c:	2100      	movs	r1, #0
 801779e:	4410      	add	r0, r2
 80177a0:	4642      	mov	r2, r8
 80177a2:	b200      	sxth	r0, r0
 80177a4:	e9cd 9703 	strd	r9, r7, [sp, #12]
 80177a8:	9000      	str	r0, [sp, #0]
 80177aa:	4658      	mov	r0, fp
 80177ac:	e9cd 5401 	strd	r5, r4, [sp, #4]
 80177b0:	f7ff fca2 	bl	80170f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80177b4:	2800      	cmp	r0, #0
 80177b6:	d163      	bne.n	8017880 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80177b8:	b2b2      	uxth	r2, r6
 80177ba:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80177be:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80177c2:	4413      	add	r3, r2
 80177c4:	1a8a      	subs	r2, r1, r2
 80177c6:	b21b      	sxth	r3, r3
 80177c8:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 80177cc:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 80177d0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80177d4:	2a00      	cmp	r2, #0
 80177d6:	d153      	bne.n	8017880 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80177d8:	6822      	ldr	r2, [r4, #0]
 80177da:	8869      	ldrh	r1, [r5, #2]
 80177dc:	7a12      	ldrb	r2, [r2, #8]
 80177de:	1a9b      	subs	r3, r3, r2
 80177e0:	88ea      	ldrh	r2, [r5, #6]
 80177e2:	440a      	add	r2, r1
 80177e4:	b212      	sxth	r2, r2
 80177e6:	4293      	cmp	r3, r2
 80177e8:	dda7      	ble.n	801773a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 80177ea:	e049      	b.n	8017880 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80177ec:	7c23      	ldrb	r3, [r4, #16]
 80177ee:	444f      	add	r7, r9
 80177f0:	b1c3      	cbz	r3, 8017824 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 80177f2:	f64f 79ff 	movw	r9, #65535	; 0xffff
 80177f6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80177fa:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80177fe:	443b      	add	r3, r7
 8017800:	4293      	cmp	r3, r2
 8017802:	da97      	bge.n	8017734 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8017804:	a80e      	add	r0, sp, #56	; 0x38
 8017806:	f7ff fdec 	bl	80173e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801780a:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801780e:	3b01      	subs	r3, #1
 8017810:	b29b      	uxth	r3, r3
 8017812:	454b      	cmp	r3, r9
 8017814:	9309      	str	r3, [sp, #36]	; 0x24
 8017816:	d021      	beq.n	801785c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8017818:	7961      	ldrb	r1, [r4, #5]
 801781a:	a817      	add	r0, sp, #92	; 0x5c
 801781c:	f7ee f9dc 	bl	8005bd8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017822:	e7f4      	b.n	801780e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8017824:	fa1f f986 	uxth.w	r9, r6
 8017828:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801782c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8017830:	443b      	add	r3, r7
 8017832:	4293      	cmp	r3, r2
 8017834:	f6bf af7e 	bge.w	8017734 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8017838:	a817      	add	r0, sp, #92	; 0x5c
 801783a:	f002 fdff 	bl	801a43c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801783e:	b1f8      	cbz	r0, 8017880 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8017840:	280a      	cmp	r0, #10
 8017842:	d1f1      	bne.n	8017828 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8017844:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8017848:	444b      	add	r3, r9
 801784a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801784e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8017852:	eba3 0309 	sub.w	r3, r3, r9
 8017856:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801785a:	e7e5      	b.n	8017828 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801785c:	b2b3      	uxth	r3, r6
 801785e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8017862:	441a      	add	r2, r3
 8017864:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8017868:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 801786c:	1ad3      	subs	r3, r2, r3
 801786e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017872:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017876:	b11b      	cbz	r3, 8017880 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8017878:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 801787c:	2b00      	cmp	r3, #0
 801787e:	d0ba      	beq.n	80177f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8017880:	b063      	add	sp, #396	; 0x18c
 8017882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017886:	2a02      	cmp	r2, #2
 8017888:	d105      	bne.n	8017896 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801788a:	7be2      	ldrb	r2, [r4, #15]
 801788c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8017890:	1a80      	subs	r0, r0, r2
 8017892:	1ac0      	subs	r0, r0, r3
 8017894:	e773      	b.n	801777e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8017896:	2000      	movs	r0, #0
 8017898:	e772      	b.n	8017780 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801789a:	7be0      	ldrb	r0, [r4, #15]
 801789c:	e770      	b.n	8017780 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801789e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80178a2:	e773      	b.n	801778c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 80178a4:	f1ba 0f00 	cmp.w	sl, #0
 80178a8:	d0f7      	beq.n	801789a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80178aa:	2264      	movs	r2, #100	; 0x64
 80178ac:	4639      	mov	r1, r7
 80178ae:	a849      	add	r0, sp, #292	; 0x124
 80178b0:	f013 fe36 	bl	802b520 <memcpy>
 80178b4:	2300      	movs	r3, #0
 80178b6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80178ba:	6821      	ldr	r1, [r4, #0]
 80178bc:	a849      	add	r0, sp, #292	; 0x124
 80178be:	f7ff fbae 	bl	801701e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80178c2:	b203      	sxth	r3, r0
 80178c4:	e751      	b.n	801776a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

080178c6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80178c6:	2b03      	cmp	r3, #3
 80178c8:	d818      	bhi.n	80178fc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80178ca:	e8df f003 	tbb	[pc, r3]
 80178ce:	0602      	.short	0x0602
 80178d0:	130d      	.short	0x130d
 80178d2:	f9b0 2000 	ldrsh.w	r2, [r0]
 80178d6:	1850      	adds	r0, r2, r1
 80178d8:	4770      	bx	lr
 80178da:	8803      	ldrh	r3, [r0, #0]
 80178dc:	8880      	ldrh	r0, [r0, #4]
 80178de:	4418      	add	r0, r3
 80178e0:	b200      	sxth	r0, r0
 80178e2:	1a80      	subs	r0, r0, r2
 80178e4:	3801      	subs	r0, #1
 80178e6:	4770      	bx	lr
 80178e8:	8803      	ldrh	r3, [r0, #0]
 80178ea:	8880      	ldrh	r0, [r0, #4]
 80178ec:	4418      	add	r0, r3
 80178ee:	b200      	sxth	r0, r0
 80178f0:	1a40      	subs	r0, r0, r1
 80178f2:	e7f7      	b.n	80178e4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80178f4:	f9b0 0000 	ldrsh.w	r0, [r0]
 80178f8:	4410      	add	r0, r2
 80178fa:	4770      	bx	lr
 80178fc:	2000      	movs	r0, #0
 80178fe:	4770      	bx	lr

08017900 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8017900:	2b03      	cmp	r3, #3
 8017902:	d817      	bhi.n	8017934 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8017904:	e8df f003 	tbb	[pc, r3]
 8017908:	10090602 	.word	0x10090602
 801790c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8017910:	1850      	adds	r0, r2, r1
 8017912:	4770      	bx	lr
 8017914:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017918:	e7fa      	b.n	8017910 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801791a:	8843      	ldrh	r3, [r0, #2]
 801791c:	88c0      	ldrh	r0, [r0, #6]
 801791e:	4418      	add	r0, r3
 8017920:	b200      	sxth	r0, r0
 8017922:	1a80      	subs	r0, r0, r2
 8017924:	3801      	subs	r0, #1
 8017926:	4770      	bx	lr
 8017928:	8843      	ldrh	r3, [r0, #2]
 801792a:	88c0      	ldrh	r0, [r0, #6]
 801792c:	4418      	add	r0, r3
 801792e:	b200      	sxth	r0, r0
 8017930:	1a40      	subs	r0, r0, r1
 8017932:	e7f7      	b.n	8017924 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8017934:	2000      	movs	r0, #0
 8017936:	4770      	bx	lr

08017938 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8017938:	4b01      	ldr	r3, [pc, #4]	; (8017940 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801793a:	2200      	movs	r2, #0
 801793c:	601a      	str	r2, [r3, #0]
 801793e:	4770      	bx	lr
 8017940:	20027cb8 	.word	0x20027cb8

08017944 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8017944:	4603      	mov	r3, r0
 8017946:	b1c8      	cbz	r0, 801797c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8017948:	0c02      	lsrs	r2, r0, #16
 801794a:	0412      	lsls	r2, r2, #16
 801794c:	b9a2      	cbnz	r2, 8017978 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801794e:	0403      	lsls	r3, r0, #16
 8017950:	2010      	movs	r0, #16
 8017952:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017956:	bf04      	itt	eq
 8017958:	021b      	lsleq	r3, r3, #8
 801795a:	3008      	addeq	r0, #8
 801795c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017960:	bf04      	itt	eq
 8017962:	011b      	lsleq	r3, r3, #4
 8017964:	3004      	addeq	r0, #4
 8017966:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801796a:	bf04      	itt	eq
 801796c:	009b      	lsleq	r3, r3, #2
 801796e:	3002      	addeq	r0, #2
 8017970:	2b00      	cmp	r3, #0
 8017972:	db04      	blt.n	801797e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8017974:	3001      	adds	r0, #1
 8017976:	4770      	bx	lr
 8017978:	2000      	movs	r0, #0
 801797a:	e7ea      	b.n	8017952 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801797c:	2020      	movs	r0, #32
 801797e:	4770      	bx	lr

08017980 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8017980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017984:	b087      	sub	sp, #28
 8017986:	460d      	mov	r5, r1
 8017988:	4616      	mov	r6, r2
 801798a:	4698      	mov	r8, r3
 801798c:	4601      	mov	r1, r0
 801798e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8017992:	b120      	cbz	r0, 801799e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8017994:	b11a      	cbz	r2, 801799e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8017996:	2d1f      	cmp	r5, #31
 8017998:	d801      	bhi.n	801799e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801799a:	2b1f      	cmp	r3, #31
 801799c:	d904      	bls.n	80179a8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801799e:	2000      	movs	r0, #0
 80179a0:	6038      	str	r0, [r7, #0]
 80179a2:	b007      	add	sp, #28
 80179a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179a8:	b97d      	cbnz	r5, 80179ca <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 80179aa:	b143      	cbz	r3, 80179be <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 80179ac:	4602      	mov	r2, r0
 80179ae:	462b      	mov	r3, r5
 80179b0:	4641      	mov	r1, r8
 80179b2:	4630      	mov	r0, r6
 80179b4:	e9cd 4700 	strd	r4, r7, [sp]
 80179b8:	f7ff ffe2 	bl	8017980 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80179bc:	e7f1      	b.n	80179a2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80179be:	f04f 33ff 	mov.w	r3, #4294967295
 80179c2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80179c6:	603b      	str	r3, [r7, #0]
 80179c8:	e7eb      	b.n	80179a2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80179ca:	fa32 fa05 	lsrs.w	sl, r2, r5
 80179ce:	d106      	bne.n	80179de <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 80179d0:	4346      	muls	r6, r0
 80179d2:	fbb6 f0f4 	udiv	r0, r6, r4
 80179d6:	fb04 6610 	mls	r6, r4, r0, r6
 80179da:	603e      	str	r6, [r7, #0]
 80179dc:	e7e1      	b.n	80179a2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80179de:	2201      	movs	r2, #1
 80179e0:	fa00 fb05 	lsl.w	fp, r0, r5
 80179e4:	40aa      	lsls	r2, r5
 80179e6:	fbbb f9f4 	udiv	r9, fp, r4
 80179ea:	3a01      	subs	r2, #1
 80179ec:	fb0a f309 	mul.w	r3, sl, r9
 80179f0:	fb04 b919 	mls	r9, r4, r9, fp
 80179f4:	4016      	ands	r6, r2
 80179f6:	9303      	str	r3, [sp, #12]
 80179f8:	4630      	mov	r0, r6
 80179fa:	f7ff ffa3 	bl	8017944 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80179fe:	462b      	mov	r3, r5
 8017a00:	460a      	mov	r2, r1
 8017a02:	4601      	mov	r1, r0
 8017a04:	4630      	mov	r0, r6
 8017a06:	e9cd 4700 	strd	r4, r7, [sp]
 8017a0a:	f7ff ffb9 	bl	8017980 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017a0e:	4606      	mov	r6, r0
 8017a10:	4648      	mov	r0, r9
 8017a12:	eb05 0108 	add.w	r1, r5, r8
 8017a16:	f7ff ff95 	bl	8017944 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017a1a:	ab05      	add	r3, sp, #20
 8017a1c:	464a      	mov	r2, r9
 8017a1e:	e9cd 4300 	strd	r4, r3, [sp]
 8017a22:	4603      	mov	r3, r0
 8017a24:	4650      	mov	r0, sl
 8017a26:	f7ff ffab 	bl	8017980 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017a2a:	6839      	ldr	r1, [r7, #0]
 8017a2c:	9a05      	ldr	r2, [sp, #20]
 8017a2e:	9b03      	ldr	r3, [sp, #12]
 8017a30:	4411      	add	r1, r2
 8017a32:	fbb1 f2f4 	udiv	r2, r1, r4
 8017a36:	18d3      	adds	r3, r2, r3
 8017a38:	fb04 1412 	mls	r4, r4, r2, r1
 8017a3c:	441e      	add	r6, r3
 8017a3e:	603c      	str	r4, [r7, #0]
 8017a40:	4430      	add	r0, r6
 8017a42:	e7ae      	b.n	80179a2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08017a44 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8017a44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a48:	b085      	sub	sp, #20
 8017a4a:	f1b0 0900 	subs.w	r9, r0, #0
 8017a4e:	461d      	mov	r5, r3
 8017a50:	4617      	mov	r7, r2
 8017a52:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017a54:	bfbb      	ittet	lt
 8017a56:	f1c9 0900 	rsblt	r9, r9, #0
 8017a5a:	f04f 36ff 	movlt.w	r6, #4294967295
 8017a5e:	2601      	movge	r6, #1
 8017a60:	6823      	ldrlt	r3, [r4, #0]
 8017a62:	bfbc      	itt	lt
 8017a64:	425b      	neglt	r3, r3
 8017a66:	6023      	strlt	r3, [r4, #0]
 8017a68:	2a00      	cmp	r2, #0
 8017a6a:	da04      	bge.n	8017a76 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8017a6c:	6823      	ldr	r3, [r4, #0]
 8017a6e:	4257      	negs	r7, r2
 8017a70:	4276      	negs	r6, r6
 8017a72:	425b      	negs	r3, r3
 8017a74:	6023      	str	r3, [r4, #0]
 8017a76:	2d00      	cmp	r5, #0
 8017a78:	4638      	mov	r0, r7
 8017a7a:	bfba      	itte	lt
 8017a7c:	426d      	neglt	r5, r5
 8017a7e:	f04f 38ff 	movlt.w	r8, #4294967295
 8017a82:	f04f 0801 	movge.w	r8, #1
 8017a86:	f7ff ff5d 	bl	8017944 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017a8a:	ab03      	add	r3, sp, #12
 8017a8c:	463a      	mov	r2, r7
 8017a8e:	e9cd 5300 	strd	r5, r3, [sp]
 8017a92:	4603      	mov	r3, r0
 8017a94:	4648      	mov	r0, r9
 8017a96:	f7ff ff73 	bl	8017980 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017a9a:	6823      	ldr	r3, [r4, #0]
 8017a9c:	9a03      	ldr	r2, [sp, #12]
 8017a9e:	4546      	cmp	r6, r8
 8017aa0:	441a      	add	r2, r3
 8017aa2:	fb92 f3f5 	sdiv	r3, r2, r5
 8017aa6:	4418      	add	r0, r3
 8017aa8:	fb05 2313 	mls	r3, r5, r3, r2
 8017aac:	bf18      	it	ne
 8017aae:	4240      	negne	r0, r0
 8017ab0:	1c72      	adds	r2, r6, #1
 8017ab2:	6023      	str	r3, [r4, #0]
 8017ab4:	d105      	bne.n	8017ac2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	f1c3 0200 	rsb	r2, r3, #0
 8017abc:	db0b      	blt.n	8017ad6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8017abe:	6022      	str	r2, [r4, #0]
 8017ac0:	e006      	b.n	8017ad0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017ac2:	2e01      	cmp	r6, #1
 8017ac4:	d104      	bne.n	8017ad0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	da02      	bge.n	8017ad0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017aca:	442b      	add	r3, r5
 8017acc:	3801      	subs	r0, #1
 8017ace:	6023      	str	r3, [r4, #0]
 8017ad0:	b005      	add	sp, #20
 8017ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ad6:	3801      	subs	r0, #1
 8017ad8:	1b52      	subs	r2, r2, r5
 8017ada:	e7f0      	b.n	8017abe <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08017adc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8017adc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8017ae0:	4c1c      	ldr	r4, [pc, #112]	; (8017b54 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8017ae2:	4605      	mov	r5, r0
 8017ae4:	6807      	ldr	r7, [r0, #0]
 8017ae6:	69a3      	ldr	r3, [r4, #24]
 8017ae8:	b92b      	cbnz	r3, 8017af6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8017aea:	6840      	ldr	r0, [r0, #4]
 8017aec:	e9c5 7000 	strd	r7, r0, [r5]
 8017af0:	b004      	add	sp, #16
 8017af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017af6:	f04f 0802 	mov.w	r8, #2
 8017afa:	68a2      	ldr	r2, [r4, #8]
 8017afc:	ae04      	add	r6, sp, #16
 8017afe:	6820      	ldr	r0, [r4, #0]
 8017b00:	fb93 f1f8 	sdiv	r1, r3, r8
 8017b04:	440a      	add	r2, r1
 8017b06:	69e1      	ldr	r1, [r4, #28]
 8017b08:	f846 2d04 	str.w	r2, [r6, #-4]!
 8017b0c:	463a      	mov	r2, r7
 8017b0e:	9600      	str	r6, [sp, #0]
 8017b10:	f7ff ff98 	bl	8017a44 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017b14:	69a3      	ldr	r3, [r4, #24]
 8017b16:	4607      	mov	r7, r0
 8017b18:	686a      	ldr	r2, [r5, #4]
 8017b1a:	6a21      	ldr	r1, [r4, #32]
 8017b1c:	9600      	str	r6, [sp, #0]
 8017b1e:	6860      	ldr	r0, [r4, #4]
 8017b20:	f7ff ff90 	bl	8017a44 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017b24:	69a3      	ldr	r3, [r4, #24]
 8017b26:	6962      	ldr	r2, [r4, #20]
 8017b28:	4407      	add	r7, r0
 8017b2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017b2c:	9600      	str	r6, [sp, #0]
 8017b2e:	68e0      	ldr	r0, [r4, #12]
 8017b30:	fb93 f8f8 	sdiv	r8, r3, r8
 8017b34:	4442      	add	r2, r8
 8017b36:	9203      	str	r2, [sp, #12]
 8017b38:	682a      	ldr	r2, [r5, #0]
 8017b3a:	f7ff ff83 	bl	8017a44 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017b3e:	4680      	mov	r8, r0
 8017b40:	9600      	str	r6, [sp, #0]
 8017b42:	69a3      	ldr	r3, [r4, #24]
 8017b44:	686a      	ldr	r2, [r5, #4]
 8017b46:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8017b48:	6920      	ldr	r0, [r4, #16]
 8017b4a:	f7ff ff7b 	bl	8017a44 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017b4e:	4440      	add	r0, r8
 8017b50:	e7cc      	b.n	8017aec <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8017b52:	bf00      	nop
 8017b54:	20027cbc 	.word	0x20027cbc

08017b58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8017b58:	4b07      	ldr	r3, [pc, #28]	; (8017b78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8017b5a:	781b      	ldrb	r3, [r3, #0]
 8017b5c:	2b01      	cmp	r3, #1
 8017b5e:	d109      	bne.n	8017b74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8017b60:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017b64:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017b68:	8003      	strh	r3, [r0, #0]
 8017b6a:	4b04      	ldr	r3, [pc, #16]	; (8017b7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8017b6c:	881b      	ldrh	r3, [r3, #0]
 8017b6e:	3b01      	subs	r3, #1
 8017b70:	1a9b      	subs	r3, r3, r2
 8017b72:	800b      	strh	r3, [r1, #0]
 8017b74:	4770      	bx	lr
 8017b76:	bf00      	nop
 8017b78:	20027ca0 	.word	0x20027ca0
 8017b7c:	20027c9c 	.word	0x20027c9c

08017b80 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8017b80:	4b07      	ldr	r3, [pc, #28]	; (8017ba0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8017b82:	b510      	push	{r4, lr}
 8017b84:	781b      	ldrb	r3, [r3, #0]
 8017b86:	2b01      	cmp	r3, #1
 8017b88:	d108      	bne.n	8017b9c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8017b8a:	4b06      	ldr	r3, [pc, #24]	; (8017ba4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8017b8c:	880c      	ldrh	r4, [r1, #0]
 8017b8e:	881b      	ldrh	r3, [r3, #0]
 8017b90:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017b94:	3b01      	subs	r3, #1
 8017b96:	1b1b      	subs	r3, r3, r4
 8017b98:	8003      	strh	r3, [r0, #0]
 8017b9a:	800a      	strh	r2, [r1, #0]
 8017b9c:	bd10      	pop	{r4, pc}
 8017b9e:	bf00      	nop
 8017ba0:	20027ca0 	.word	0x20027ca0
 8017ba4:	20027c9c 	.word	0x20027c9c

08017ba8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8017ba8:	4b0a      	ldr	r3, [pc, #40]	; (8017bd4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8017baa:	b510      	push	{r4, lr}
 8017bac:	781b      	ldrb	r3, [r3, #0]
 8017bae:	2b01      	cmp	r3, #1
 8017bb0:	d10e      	bne.n	8017bd0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8017bb2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017bb6:	8843      	ldrh	r3, [r0, #2]
 8017bb8:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017bbc:	18ca      	adds	r2, r1, r3
 8017bbe:	4b06      	ldr	r3, [pc, #24]	; (8017bd8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8017bc0:	8044      	strh	r4, [r0, #2]
 8017bc2:	881b      	ldrh	r3, [r3, #0]
 8017bc4:	1a9b      	subs	r3, r3, r2
 8017bc6:	8003      	strh	r3, [r0, #0]
 8017bc8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017bcc:	8081      	strh	r1, [r0, #4]
 8017bce:	80c3      	strh	r3, [r0, #6]
 8017bd0:	bd10      	pop	{r4, pc}
 8017bd2:	bf00      	nop
 8017bd4:	20027ca0 	.word	0x20027ca0
 8017bd8:	20027c9c 	.word	0x20027c9c

08017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8017bdc:	4b08      	ldr	r3, [pc, #32]	; (8017c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8017bde:	781b      	ldrb	r3, [r3, #0]
 8017be0:	2b01      	cmp	r3, #1
 8017be2:	d10c      	bne.n	8017bfe <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8017be4:	8803      	ldrh	r3, [r0, #0]
 8017be6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8017bea:	8842      	ldrh	r2, [r0, #2]
 8017bec:	8002      	strh	r2, [r0, #0]
 8017bee:	185a      	adds	r2, r3, r1
 8017bf0:	4b04      	ldr	r3, [pc, #16]	; (8017c04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8017bf2:	881b      	ldrh	r3, [r3, #0]
 8017bf4:	1a9b      	subs	r3, r3, r2
 8017bf6:	8043      	strh	r3, [r0, #2]
 8017bf8:	88c3      	ldrh	r3, [r0, #6]
 8017bfa:	80c1      	strh	r1, [r0, #6]
 8017bfc:	8083      	strh	r3, [r0, #4]
 8017bfe:	4770      	bx	lr
 8017c00:	20027ca0 	.word	0x20027ca0
 8017c04:	20027c9c 	.word	0x20027c9c

08017c08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8017c08:	4b07      	ldr	r3, [pc, #28]	; (8017c28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8017c0a:	b510      	push	{r4, lr}
 8017c0c:	781b      	ldrb	r3, [r3, #0]
 8017c0e:	2b01      	cmp	r3, #1
 8017c10:	d108      	bne.n	8017c24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8017c12:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017c16:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017c1a:	8003      	strh	r3, [r0, #0]
 8017c1c:	8893      	ldrh	r3, [r2, #4]
 8017c1e:	3b01      	subs	r3, #1
 8017c20:	1b1b      	subs	r3, r3, r4
 8017c22:	800b      	strh	r3, [r1, #0]
 8017c24:	bd10      	pop	{r4, pc}
 8017c26:	bf00      	nop
 8017c28:	20027ca0 	.word	0x20027ca0

08017c2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 8017c2c:	4b0b      	ldr	r3, [pc, #44]	; (8017c5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 8017c2e:	781b      	ldrb	r3, [r3, #0]
 8017c30:	2b01      	cmp	r3, #1
 8017c32:	d111      	bne.n	8017c58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 8017c34:	680b      	ldr	r3, [r1, #0]
 8017c36:	ed90 7a00 	vldr	s14, [r0]
 8017c3a:	6003      	str	r3, [r0, #0]
 8017c3c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8017c40:	eddf 6a07 	vldr	s13, [pc, #28]	; 8017c60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 8017c44:	ee07 3a90 	vmov	s15, r3
 8017c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017c50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017c54:	edc1 7a00 	vstr	s15, [r1]
 8017c58:	4770      	bx	lr
 8017c5a:	bf00      	nop
 8017c5c:	20027ca0 	.word	0x20027ca0
 8017c60:	38d1b717 	.word	0x38d1b717

08017c64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8017c64:	4b0a      	ldr	r3, [pc, #40]	; (8017c90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8017c66:	460a      	mov	r2, r1
 8017c68:	b510      	push	{r4, lr}
 8017c6a:	781b      	ldrb	r3, [r3, #0]
 8017c6c:	2b01      	cmp	r3, #1
 8017c6e:	d10d      	bne.n	8017c8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8017c70:	8881      	ldrh	r1, [r0, #4]
 8017c72:	8803      	ldrh	r3, [r0, #0]
 8017c74:	440b      	add	r3, r1
 8017c76:	4601      	mov	r1, r0
 8017c78:	3b01      	subs	r3, #1
 8017c7a:	f821 3b02 	strh.w	r3, [r1], #2
 8017c7e:	f7ff ffc3 	bl	8017c08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8017c82:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017c86:	88c2      	ldrh	r2, [r0, #6]
 8017c88:	80c3      	strh	r3, [r0, #6]
 8017c8a:	8082      	strh	r2, [r0, #4]
 8017c8c:	bd10      	pop	{r4, pc}
 8017c8e:	bf00      	nop
 8017c90:	20027ca0 	.word	0x20027ca0

08017c94 <_ZN8touchgfx11Application13requestRedrawEv>:
 8017c94:	4b06      	ldr	r3, [pc, #24]	; (8017cb0 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8017c96:	2100      	movs	r1, #0
 8017c98:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017c9c:	4b05      	ldr	r3, [pc, #20]	; (8017cb4 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8017c9e:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 8017ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ca6:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 8017caa:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 8017cae:	4770      	bx	lr
 8017cb0:	20027c9c 	.word	0x20027c9c
 8017cb4:	20027c9e 	.word	0x20027c9e

08017cb8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8017cb8:	4b03      	ldr	r3, [pc, #12]	; (8017cc8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8017cba:	6818      	ldr	r0, [r3, #0]
 8017cbc:	b110      	cbz	r0, 8017cc4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8017cbe:	6803      	ldr	r3, [r0, #0]
 8017cc0:	699b      	ldr	r3, [r3, #24]
 8017cc2:	4718      	bx	r3
 8017cc4:	4770      	bx	lr
 8017cc6:	bf00      	nop
 8017cc8:	20027cec 	.word	0x20027cec

08017ccc <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8017ccc:	4770      	bx	lr
	...

08017cd0 <_ZN8touchgfx11Application4drawEv>:
 8017cd0:	4b09      	ldr	r3, [pc, #36]	; (8017cf8 <_ZN8touchgfx11Application4drawEv+0x28>)
 8017cd2:	b507      	push	{r0, r1, r2, lr}
 8017cd4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017cd8:	2100      	movs	r1, #0
 8017cda:	4b08      	ldr	r3, [pc, #32]	; (8017cfc <_ZN8touchgfx11Application4drawEv+0x2c>)
 8017cdc:	9100      	str	r1, [sp, #0]
 8017cde:	4669      	mov	r1, sp
 8017ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ce4:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017ce8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017cec:	6803      	ldr	r3, [r0, #0]
 8017cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017cf0:	4798      	blx	r3
 8017cf2:	b003      	add	sp, #12
 8017cf4:	f85d fb04 	ldr.w	pc, [sp], #4
 8017cf8:	20027c9c 	.word	0x20027c9c
 8017cfc:	20027c9e 	.word	0x20027c9e

08017d00 <_ZN8touchgfx11Application10invalidateEv>:
 8017d00:	4b09      	ldr	r3, [pc, #36]	; (8017d28 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8017d02:	b082      	sub	sp, #8
 8017d04:	2100      	movs	r1, #0
 8017d06:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017d0a:	4b08      	ldr	r3, [pc, #32]	; (8017d2c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8017d0c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017d10:	aa02      	add	r2, sp, #8
 8017d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017d16:	9100      	str	r1, [sp, #0]
 8017d18:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017d1c:	6803      	ldr	r3, [r0, #0]
 8017d1e:	e912 0006 	ldmdb	r2, {r1, r2}
 8017d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017d24:	b002      	add	sp, #8
 8017d26:	4718      	bx	r3
 8017d28:	20027c9c 	.word	0x20027c9c
 8017d2c:	20027c9e 	.word	0x20027c9e

08017d30 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8017d30:	4b03      	ldr	r3, [pc, #12]	; (8017d40 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8017d32:	6818      	ldr	r0, [r3, #0]
 8017d34:	b110      	cbz	r0, 8017d3c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8017d36:	6803      	ldr	r3, [r0, #0]
 8017d38:	69db      	ldr	r3, [r3, #28]
 8017d3a:	4718      	bx	r3
 8017d3c:	4770      	bx	lr
 8017d3e:	bf00      	nop
 8017d40:	20027cec 	.word	0x20027cec

08017d44 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8017d44:	4b03      	ldr	r3, [pc, #12]	; (8017d54 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8017d46:	6818      	ldr	r0, [r3, #0]
 8017d48:	b110      	cbz	r0, 8017d50 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8017d4a:	6803      	ldr	r3, [r0, #0]
 8017d4c:	6a1b      	ldr	r3, [r3, #32]
 8017d4e:	4718      	bx	r3
 8017d50:	4770      	bx	lr
 8017d52:	bf00      	nop
 8017d54:	20027cec 	.word	0x20027cec

08017d58 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8017d58:	2300      	movs	r3, #0
 8017d5a:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 8017d5e:	4770      	bx	lr

08017d60 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8017d60:	4b03      	ldr	r3, [pc, #12]	; (8017d70 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8017d62:	6818      	ldr	r0, [r3, #0]
 8017d64:	b110      	cbz	r0, 8017d6c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8017d66:	6803      	ldr	r3, [r0, #0]
 8017d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d6a:	4718      	bx	r3
 8017d6c:	4770      	bx	lr
 8017d6e:	bf00      	nop
 8017d70:	20027cec 	.word	0x20027cec

08017d74 <_ZN8touchgfx11ApplicationD1Ev>:
 8017d74:	4770      	bx	lr

08017d76 <_ZN8touchgfx11ApplicationD0Ev>:
 8017d76:	b510      	push	{r4, lr}
 8017d78:	4604      	mov	r4, r0
 8017d7a:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8017d7e:	f012 fe20 	bl	802a9c2 <_ZdlPvj>
 8017d82:	4620      	mov	r0, r4
 8017d84:	bd10      	pop	{r4, pc}

08017d86 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8017d86:	b510      	push	{r4, lr}
 8017d88:	f9b1 4000 	ldrsh.w	r4, [r1]
 8017d8c:	888a      	ldrh	r2, [r1, #4]
 8017d8e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017d92:	4422      	add	r2, r4
 8017d94:	b212      	sxth	r2, r2
 8017d96:	4293      	cmp	r3, r2
 8017d98:	da15      	bge.n	8017dc6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017d9a:	8882      	ldrh	r2, [r0, #4]
 8017d9c:	4413      	add	r3, r2
 8017d9e:	b21b      	sxth	r3, r3
 8017da0:	429c      	cmp	r4, r3
 8017da2:	da10      	bge.n	8017dc6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017da4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8017da8:	88c9      	ldrh	r1, [r1, #6]
 8017daa:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017dae:	4419      	add	r1, r3
 8017db0:	b209      	sxth	r1, r1
 8017db2:	428a      	cmp	r2, r1
 8017db4:	da07      	bge.n	8017dc6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017db6:	88c0      	ldrh	r0, [r0, #6]
 8017db8:	4410      	add	r0, r2
 8017dba:	b200      	sxth	r0, r0
 8017dbc:	4283      	cmp	r3, r0
 8017dbe:	bfac      	ite	ge
 8017dc0:	2000      	movge	r0, #0
 8017dc2:	2001      	movlt	r0, #1
 8017dc4:	bd10      	pop	{r4, pc}
 8017dc6:	2000      	movs	r0, #0
 8017dc8:	e7fc      	b.n	8017dc4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08017dca <_ZN8touchgfx4Rect10restrictToEss>:
 8017dca:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	b510      	push	{r4, lr}
 8017dd2:	da04      	bge.n	8017dde <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8017dd4:	8884      	ldrh	r4, [r0, #4]
 8017dd6:	4423      	add	r3, r4
 8017dd8:	8083      	strh	r3, [r0, #4]
 8017dda:	2300      	movs	r3, #0
 8017ddc:	8003      	strh	r3, [r0, #0]
 8017dde:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017de2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017de6:	1b09      	subs	r1, r1, r4
 8017de8:	428b      	cmp	r3, r1
 8017dea:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8017dee:	bfc8      	it	gt
 8017df0:	8081      	strhgt	r1, [r0, #4]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	da04      	bge.n	8017e00 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8017df6:	88c1      	ldrh	r1, [r0, #6]
 8017df8:	440b      	add	r3, r1
 8017dfa:	80c3      	strh	r3, [r0, #6]
 8017dfc:	2300      	movs	r3, #0
 8017dfe:	8043      	strh	r3, [r0, #2]
 8017e00:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8017e04:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8017e08:	1a52      	subs	r2, r2, r1
 8017e0a:	4293      	cmp	r3, r2
 8017e0c:	bfc8      	it	gt
 8017e0e:	80c2      	strhgt	r2, [r0, #6]
 8017e10:	bd10      	pop	{r4, pc}
	...

08017e14 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8017e14:	4b10      	ldr	r3, [pc, #64]	; (8017e58 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8017e16:	b510      	push	{r4, lr}
 8017e18:	460c      	mov	r4, r1
 8017e1a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017e1e:	4b0f      	ldr	r3, [pc, #60]	; (8017e5c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8017e20:	4620      	mov	r0, r4
 8017e22:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017e26:	f7ff ffd0 	bl	8017dca <_ZN8touchgfx4Rect10restrictToEss>
 8017e2a:	4b0d      	ldr	r3, [pc, #52]	; (8017e60 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8017e2c:	6818      	ldr	r0, [r3, #0]
 8017e2e:	b190      	cbz	r0, 8017e56 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8017e30:	6803      	ldr	r3, [r0, #0]
 8017e32:	4621      	mov	r1, r4
 8017e34:	689b      	ldr	r3, [r3, #8]
 8017e36:	4798      	blx	r3
 8017e38:	4b0a      	ldr	r3, [pc, #40]	; (8017e64 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8017e3a:	6818      	ldr	r0, [r3, #0]
 8017e3c:	b118      	cbz	r0, 8017e46 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8017e3e:	6803      	ldr	r3, [r0, #0]
 8017e40:	4621      	mov	r1, r4
 8017e42:	689b      	ldr	r3, [r3, #8]
 8017e44:	4798      	blx	r3
 8017e46:	4b08      	ldr	r3, [pc, #32]	; (8017e68 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8017e48:	4621      	mov	r1, r4
 8017e4a:	6818      	ldr	r0, [r3, #0]
 8017e4c:	6803      	ldr	r3, [r0, #0]
 8017e4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e52:	69db      	ldr	r3, [r3, #28]
 8017e54:	4718      	bx	r3
 8017e56:	bd10      	pop	{r4, pc}
 8017e58:	20027c9e 	.word	0x20027c9e
 8017e5c:	20027c9c 	.word	0x20027c9c
 8017e60:	20027cec 	.word	0x20027cec
 8017e64:	20027ce8 	.word	0x20027ce8
 8017e68:	20027ca8 	.word	0x20027ca8

08017e6c <_ZNK8touchgfx4Rect8includesERKS0_>:
 8017e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e6e:	4606      	mov	r6, r0
 8017e70:	4608      	mov	r0, r1
 8017e72:	460f      	mov	r7, r1
 8017e74:	f7f9 ffd9 	bl	8011e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017e78:	b9e8      	cbnz	r0, 8017eb6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017e7a:	f9b7 5000 	ldrsh.w	r5, [r7]
 8017e7e:	f9b6 4000 	ldrsh.w	r4, [r6]
 8017e82:	42a5      	cmp	r5, r4
 8017e84:	db17      	blt.n	8017eb6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017e86:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8017e8a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8017e8e:	429a      	cmp	r2, r3
 8017e90:	db11      	blt.n	8017eb6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017e92:	88b9      	ldrh	r1, [r7, #4]
 8017e94:	440d      	add	r5, r1
 8017e96:	88b1      	ldrh	r1, [r6, #4]
 8017e98:	440c      	add	r4, r1
 8017e9a:	b22d      	sxth	r5, r5
 8017e9c:	b224      	sxth	r4, r4
 8017e9e:	42a5      	cmp	r5, r4
 8017ea0:	dc09      	bgt.n	8017eb6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017ea2:	88f8      	ldrh	r0, [r7, #6]
 8017ea4:	4410      	add	r0, r2
 8017ea6:	88f2      	ldrh	r2, [r6, #6]
 8017ea8:	4413      	add	r3, r2
 8017eaa:	b200      	sxth	r0, r0
 8017eac:	b21b      	sxth	r3, r3
 8017eae:	4298      	cmp	r0, r3
 8017eb0:	bfcc      	ite	gt
 8017eb2:	2000      	movgt	r0, #0
 8017eb4:	2001      	movle	r0, #1
 8017eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017eb8 <_ZN8touchgfx11Application11getInstanceEv>:
 8017eb8:	4b01      	ldr	r3, [pc, #4]	; (8017ec0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8017eba:	6818      	ldr	r0, [r3, #0]
 8017ebc:	4770      	bx	lr
 8017ebe:	bf00      	nop
 8017ec0:	20027cfc 	.word	0x20027cfc

08017ec4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 8017ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ec6:	4b10      	ldr	r3, [pc, #64]	; (8017f08 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 8017ec8:	4605      	mov	r5, r0
 8017eca:	781b      	ldrb	r3, [r3, #0]
 8017ecc:	b1d3      	cbz	r3, 8017f04 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 8017ece:	4b0f      	ldr	r3, [pc, #60]	; (8017f0c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 8017ed0:	f100 06ee 	add.w	r6, r0, #238	; 0xee
 8017ed4:	4f0e      	ldr	r7, [pc, #56]	; (8017f10 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 8017ed6:	881c      	ldrh	r4, [r3, #0]
 8017ed8:	f8b5 312e 	ldrh.w	r3, [r5, #302]	; 0x12e
 8017edc:	42a3      	cmp	r3, r4
 8017ede:	d90e      	bls.n	8017efe <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 8017ee0:	683b      	ldr	r3, [r7, #0]
 8017ee2:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8017ee6:	b10a      	cbz	r2, 8017eec <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 8017ee8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017eea:	b900      	cbnz	r0, 8017eee <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 8017eec:	6898      	ldr	r0, [r3, #8]
 8017eee:	6803      	ldr	r3, [r0, #0]
 8017ef0:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 8017ef4:	3401      	adds	r4, #1
 8017ef6:	69db      	ldr	r3, [r3, #28]
 8017ef8:	4798      	blx	r3
 8017efa:	b2a4      	uxth	r4, r4
 8017efc:	e7ec      	b.n	8017ed8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 8017efe:	2300      	movs	r3, #0
 8017f00:	f8a5 312e 	strh.w	r3, [r5, #302]	; 0x12e
 8017f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f06:	bf00      	nop
 8017f08:	20027ca6 	.word	0x20027ca6
 8017f0c:	20000070 	.word	0x20000070
 8017f10:	20027ca8 	.word	0x20027ca8

08017f14 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8017f14:	2300      	movs	r3, #0
 8017f16:	b510      	push	{r4, lr}
 8017f18:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8017f1c:	4604      	mov	r4, r0
 8017f1e:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8017f22:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8017f26:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8017f2a:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8017f2e:	429a      	cmp	r2, r3
 8017f30:	d90e      	bls.n	8017f50 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8017f32:	18e2      	adds	r2, r4, r3
 8017f34:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8017f38:	b122      	cbz	r2, 8017f44 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8017f3a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8017f3e:	6803      	ldr	r3, [r0, #0]
 8017f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017f42:	4798      	blx	r3
 8017f44:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8017f48:	3301      	adds	r3, #1
 8017f4a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8017f4e:	e7ea      	b.n	8017f26 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8017f50:	bd10      	pop	{r4, pc}

08017f52 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 8017f52:	b530      	push	{r4, r5, lr}
 8017f54:	2200      	movs	r2, #0
 8017f56:	f8b0 5080 	ldrh.w	r5, [r0, #128]	; 0x80
 8017f5a:	b293      	uxth	r3, r2
 8017f5c:	429d      	cmp	r5, r3
 8017f5e:	d90e      	bls.n	8017f7e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8017f60:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8017f64:	428b      	cmp	r3, r1
 8017f66:	d10b      	bne.n	8017f80 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8017f68:	1884      	adds	r4, r0, r2
 8017f6a:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 8017f6e:	b13b      	cbz	r3, 8017f80 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8017f70:	3b01      	subs	r3, #1
 8017f72:	b2db      	uxtb	r3, r3
 8017f74:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
 8017f78:	b90b      	cbnz	r3, 8017f7e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8017f7a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8017f7e:	bd30      	pop	{r4, r5, pc}
 8017f80:	3201      	adds	r2, #1
 8017f82:	e7ea      	b.n	8017f5a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

08017f84 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8017f84:	2300      	movs	r3, #0
 8017f86:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8017f8a:	30a4      	adds	r0, #164	; 0xa4
 8017f8c:	f820 3c24 	strh.w	r3, [r0, #-36]
 8017f90:	f802 3b01 	strb.w	r3, [r2], #1
 8017f94:	4282      	cmp	r2, r0
 8017f96:	d1fb      	bne.n	8017f90 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8017f98:	4770      	bx	lr
	...

08017f9c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8017f9c:	b570      	push	{r4, r5, r6, lr}
 8017f9e:	4c0b      	ldr	r4, [pc, #44]	; (8017fcc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8017fa0:	4605      	mov	r5, r0
 8017fa2:	460e      	mov	r6, r1
 8017fa4:	6820      	ldr	r0, [r4, #0]
 8017fa6:	b110      	cbz	r0, 8017fae <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8017fa8:	6803      	ldr	r3, [r0, #0]
 8017faa:	695b      	ldr	r3, [r3, #20]
 8017fac:	4798      	blx	r3
 8017fae:	1d28      	adds	r0, r5, #4
 8017fb0:	f7ff ffe8 	bl	8017f84 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8017fb4:	6026      	str	r6, [r4, #0]
 8017fb6:	6833      	ldr	r3, [r6, #0]
 8017fb8:	4630      	mov	r0, r6
 8017fba:	68db      	ldr	r3, [r3, #12]
 8017fbc:	4798      	blx	r3
 8017fbe:	682b      	ldr	r3, [r5, #0]
 8017fc0:	4628      	mov	r0, r5
 8017fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017fc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017fc8:	4718      	bx	r3
 8017fca:	bf00      	nop
 8017fcc:	20027cec 	.word	0x20027cec

08017fd0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 8017fd6:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8017fda:	461a      	mov	r2, r3
 8017fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fde:	461c      	mov	r4, r3
 8017fe0:	461d      	mov	r5, r3
 8017fe2:	459c      	cmp	ip, r3
 8017fe4:	dd1a      	ble.n	801801c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8017fe6:	18c6      	adds	r6, r0, r3
 8017fe8:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8017fec:	b16e      	cbz	r6, 801800a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8017fee:	429a      	cmp	r2, r3
 8017ff0:	d008      	beq.n	8018004 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8017ff2:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8017ff6:	fa1f fe82 	uxth.w	lr, r2
 8017ffa:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8017ffe:	1887      	adds	r7, r0, r2
 8018000:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8018004:	3201      	adds	r2, #1
 8018006:	3301      	adds	r3, #1
 8018008:	e7eb      	b.n	8017fe2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801800a:	4299      	cmp	r1, r3
 801800c:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8018010:	bfa8      	it	ge
 8018012:	3501      	addge	r5, #1
 8018014:	429e      	cmp	r6, r3
 8018016:	bfc8      	it	gt
 8018018:	3401      	addgt	r4, #1
 801801a:	e7f4      	b.n	8018006 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801801c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8018020:	1b49      	subs	r1, r1, r5
 8018022:	1b1b      	subs	r3, r3, r4
 8018024:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8018028:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801802c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8018030:	4293      	cmp	r3, r2
 8018032:	dd03      	ble.n	801803c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8018034:	3b01      	subs	r3, #1
 8018036:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 801803a:	e7f7      	b.n	801802c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801803c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018040 <_ZN8touchgfx11Application15handleTickEventEv>:
 8018040:	b570      	push	{r4, r5, r6, lr}
 8018042:	4d16      	ldr	r5, [pc, #88]	; (801809c <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8018044:	4604      	mov	r4, r0
 8018046:	6828      	ldr	r0, [r5, #0]
 8018048:	b140      	cbz	r0, 801805c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801804a:	7a03      	ldrb	r3, [r0, #8]
 801804c:	b933      	cbnz	r3, 801805c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801804e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8018052:	6803      	ldr	r3, [r0, #0]
 8018054:	689b      	ldr	r3, [r3, #8]
 8018056:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801805a:	4718      	bx	r3
 801805c:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8018060:	4e0f      	ldr	r6, [pc, #60]	; (80180a0 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8018062:	b973      	cbnz	r3, 8018082 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018064:	b168      	cbz	r0, 8018082 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018066:	7a03      	ldrb	r3, [r0, #8]
 8018068:	b15b      	cbz	r3, 8018082 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801806a:	6830      	ldr	r0, [r6, #0]
 801806c:	b110      	cbz	r0, 8018074 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801806e:	6803      	ldr	r3, [r0, #0]
 8018070:	691b      	ldr	r3, [r3, #16]
 8018072:	4798      	blx	r3
 8018074:	6828      	ldr	r0, [r5, #0]
 8018076:	6803      	ldr	r3, [r0, #0]
 8018078:	68db      	ldr	r3, [r3, #12]
 801807a:	4798      	blx	r3
 801807c:	2301      	movs	r3, #1
 801807e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8018082:	3404      	adds	r4, #4
 8018084:	4620      	mov	r0, r4
 8018086:	f7ff ff45 	bl	8017f14 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801808a:	4620      	mov	r0, r4
 801808c:	f7ff ffa0 	bl	8017fd0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8018090:	6830      	ldr	r0, [r6, #0]
 8018092:	b110      	cbz	r0, 801809a <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8018094:	6803      	ldr	r3, [r0, #0]
 8018096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018098:	e7dd      	b.n	8018056 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801809a:	bd70      	pop	{r4, r5, r6, pc}
 801809c:	20027cf0 	.word	0x20027cf0
 80180a0:	20027cec 	.word	0x20027cec

080180a4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 80180a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180a6:	2300      	movs	r3, #0
 80180a8:	4604      	mov	r4, r0
 80180aa:	460d      	mov	r5, r1
 80180ac:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
 80180b0:	4618      	mov	r0, r3
 80180b2:	b29a      	uxth	r2, r3
 80180b4:	4291      	cmp	r1, r2
 80180b6:	d912      	bls.n	80180de <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 80180b8:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 80180bc:	18e6      	adds	r6, r4, r3
 80180be:	42af      	cmp	r7, r5
 80180c0:	f896 2084 	ldrb.w	r2, [r6, #132]	; 0x84
 80180c4:	d105      	bne.n	80180d2 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 80180c6:	2aff      	cmp	r2, #255	; 0xff
 80180c8:	d002      	beq.n	80180d0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 80180ca:	3201      	adds	r2, #1
 80180cc:	f886 2084 	strb.w	r2, [r6, #132]	; 0x84
 80180d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80180d2:	2a00      	cmp	r2, #0
 80180d4:	f103 0301 	add.w	r3, r3, #1
 80180d8:	bf08      	it	eq
 80180da:	2001      	moveq	r0, #1
 80180dc:	e7e9      	b.n	80180b2 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 80180de:	b120      	cbz	r0, 80180ea <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 80180e0:	2920      	cmp	r1, #32
 80180e2:	d102      	bne.n	80180ea <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 80180e4:	4620      	mov	r0, r4
 80180e6:	f7ff ff73 	bl	8017fd0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80180ea:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 80180ee:	2b1f      	cmp	r3, #31
 80180f0:	d8ee      	bhi.n	80180d0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 80180f2:	18e2      	adds	r2, r4, r3
 80180f4:	2101      	movs	r1, #1
 80180f6:	f882 1084 	strb.w	r1, [r2, #132]	; 0x84
 80180fa:	185a      	adds	r2, r3, r1
 80180fc:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
 8018100:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8018104:	e7e4      	b.n	80180d0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

08018106 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8018106:	4603      	mov	r3, r0
 8018108:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801810c:	2200      	movs	r2, #0
 801810e:	801a      	strh	r2, [r3, #0]
 8018110:	3308      	adds	r3, #8
 8018112:	f823 2c06 	strh.w	r2, [r3, #-6]
 8018116:	f823 2c04 	strh.w	r2, [r3, #-4]
 801811a:	f823 2c02 	strh.w	r2, [r3, #-2]
 801811e:	428b      	cmp	r3, r1
 8018120:	d1f5      	bne.n	801810e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8018122:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8018126:	4770      	bx	lr

08018128 <_ZN8touchgfx11ApplicationC1Ev>:
 8018128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801812a:	4b1d      	ldr	r3, [pc, #116]	; (80181a0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801812c:	4606      	mov	r6, r0
 801812e:	4604      	mov	r4, r0
 8018130:	2500      	movs	r5, #0
 8018132:	f846 3b04 	str.w	r3, [r6], #4
 8018136:	22a8      	movs	r2, #168	; 0xa8
 8018138:	2100      	movs	r1, #0
 801813a:	4630      	mov	r0, r6
 801813c:	f013 f8a6 	bl	802b28c <memset>
 8018140:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 8018144:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8018148:	4f16      	ldr	r7, [pc, #88]	; (80181a4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801814a:	f7ff ffdc 	bl	8018106 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801814e:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8018152:	f7ff ffd8 	bl	8018106 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018156:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801815a:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801815e:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 8018162:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 8018166:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 801816a:	490f      	ldr	r1, [pc, #60]	; (80181a8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801816c:	480f      	ldr	r0, [pc, #60]	; (80181ac <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801816e:	f010 fc0b 	bl	8028988 <CRC_Lock>
 8018172:	4b0f      	ldr	r3, [pc, #60]	; (80181b0 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8018174:	b158      	cbz	r0, 801818e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8018176:	801d      	strh	r5, [r3, #0]
 8018178:	2300      	movs	r3, #0
 801817a:	4a0e      	ldr	r2, [pc, #56]	; (80181b4 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801817c:	4630      	mov	r0, r6
 801817e:	6013      	str	r3, [r2, #0]
 8018180:	4a0d      	ldr	r2, [pc, #52]	; (80181b8 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8018182:	603b      	str	r3, [r7, #0]
 8018184:	6013      	str	r3, [r2, #0]
 8018186:	f7ff fefd 	bl	8017f84 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801818a:	4620      	mov	r0, r4
 801818c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801818e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018192:	2002      	movs	r0, #2
 8018194:	801a      	strh	r2, [r3, #0]
 8018196:	6038      	str	r0, [r7, #0]
 8018198:	f001 fb48 	bl	801982c <_ZN8touchgfx6Screen4drawEv>
 801819c:	e7ec      	b.n	8018178 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801819e:	bf00      	nop
 80181a0:	08030d30 	.word	0x08030d30
 80181a4:	20027cec 	.word	0x20027cec
 80181a8:	b5e8b5cd 	.word	0xb5e8b5cd
 80181ac:	f407a5c2 	.word	0xf407a5c2
 80181b0:	20000070 	.word	0x20000070
 80181b4:	20027cfc 	.word	0x20027cfc
 80181b8:	20027cf0 	.word	0x20027cf0

080181bc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80181bc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80181c0:	3b01      	subs	r3, #1
 80181c2:	b29b      	uxth	r3, r3
 80181c4:	428b      	cmp	r3, r1
 80181c6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 80181ca:	b510      	push	{r4, lr}
 80181cc:	d908      	bls.n	80181e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 80181ce:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80181d2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80181d6:	681a      	ldr	r2, [r3, #0]
 80181d8:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80181dc:	685a      	ldr	r2, [r3, #4]
 80181de:	6062      	str	r2, [r4, #4]
 80181e0:	bd10      	pop	{r4, pc}
	...

080181e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80181e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181e8:	b08f      	sub	sp, #60	; 0x3c
 80181ea:	4b8f      	ldr	r3, [pc, #572]	; (8018428 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 80181ec:	4683      	mov	fp, r0
 80181ee:	ac0a      	add	r4, sp, #40	; 0x28
 80181f0:	e884 0006 	stmia.w	r4, {r1, r2}
 80181f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80181f8:	4620      	mov	r0, r4
 80181fa:	4b8c      	ldr	r3, [pc, #560]	; (801842c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 80181fc:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018200:	f7ff fde3 	bl	8017dca <_ZN8touchgfx4Rect10restrictToEss>
 8018204:	4620      	mov	r0, r4
 8018206:	f7f9 fe10 	bl	8011e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 801820a:	2800      	cmp	r0, #0
 801820c:	d16a      	bne.n	80182e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801820e:	9403      	str	r4, [sp, #12]
 8018210:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8018214:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8018218:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801821c:	9301      	str	r3, [sp, #4]
 801821e:	35a4      	adds	r5, #164	; 0xa4
 8018220:	b15c      	cbz	r4, 801823a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8018222:	4629      	mov	r1, r5
 8018224:	9803      	ldr	r0, [sp, #12]
 8018226:	f7ff fe21 	bl	8017e6c <_ZNK8touchgfx4Rect8includesERKS0_>
 801822a:	3c01      	subs	r4, #1
 801822c:	b118      	cbz	r0, 8018236 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801822e:	b2a1      	uxth	r1, r4
 8018230:	9801      	ldr	r0, [sp, #4]
 8018232:	f7ff ffc3 	bl	80181bc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018236:	3d08      	subs	r5, #8
 8018238:	e7f2      	b.n	8018220 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801823a:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	; 0xec
 801823e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018242:	f8cd a010 	str.w	sl, [sp, #16]
 8018246:	9302      	str	r3, [sp, #8]
 8018248:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801824c:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8018250:	9306      	str	r3, [sp, #24]
 8018252:	445c      	add	r4, fp
 8018254:	2500      	movs	r5, #0
 8018256:	4626      	mov	r6, r4
 8018258:	f8cd a014 	str.w	sl, [sp, #20]
 801825c:	462f      	mov	r7, r5
 801825e:	9b05      	ldr	r3, [sp, #20]
 8018260:	2b00      	cmp	r3, #0
 8018262:	d073      	beq.n	801834c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8018264:	9903      	ldr	r1, [sp, #12]
 8018266:	4630      	mov	r0, r6
 8018268:	f7ff fd8d 	bl	8017d86 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801826c:	b350      	cbz	r0, 80182c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801826e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8018272:	f9b6 c000 	ldrsh.w	ip, [r6]
 8018276:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 801827a:	45e6      	cmp	lr, ip
 801827c:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8018280:	db33      	blt.n	80182ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8018282:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8018286:	88b3      	ldrh	r3, [r6, #4]
 8018288:	4472      	add	r2, lr
 801828a:	4463      	add	r3, ip
 801828c:	b212      	sxth	r2, r2
 801828e:	b21b      	sxth	r3, r3
 8018290:	429a      	cmp	r2, r3
 8018292:	dc2a      	bgt.n	80182ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8018294:	fa1f f289 	uxth.w	r2, r9
 8018298:	88f3      	ldrh	r3, [r6, #6]
 801829a:	45c8      	cmp	r8, r9
 801829c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80182a0:	4413      	add	r3, r2
 80182a2:	fa1f fc88 	uxth.w	ip, r8
 80182a6:	b29b      	uxth	r3, r3
 80182a8:	fa0f fe83 	sxth.w	lr, r3
 80182ac:	db0f      	blt.n	80182ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80182ae:	eba3 030c 	sub.w	r3, r3, ip
 80182b2:	1ac9      	subs	r1, r1, r3
 80182b4:	b209      	sxth	r1, r1
 80182b6:	2900      	cmp	r1, #0
 80182b8:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80182bc:	dd12      	ble.n	80182e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80182be:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 80182c2:	4605      	mov	r5, r0
 80182c4:	9b05      	ldr	r3, [sp, #20]
 80182c6:	3e08      	subs	r6, #8
 80182c8:	3b01      	subs	r3, #1
 80182ca:	9305      	str	r3, [sp, #20]
 80182cc:	e7c7      	b.n	801825e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 80182ce:	4461      	add	r1, ip
 80182d0:	b209      	sxth	r1, r1
 80182d2:	4571      	cmp	r1, lr
 80182d4:	dc38      	bgt.n	8018348 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80182d6:	eba2 020c 	sub.w	r2, r2, ip
 80182da:	b212      	sxth	r2, r2
 80182dc:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 80182e0:	2a00      	cmp	r2, #0
 80182e2:	dcee      	bgt.n	80182c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80182e4:	b00f      	add	sp, #60	; 0x3c
 80182e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182ea:	45c8      	cmp	r8, r9
 80182ec:	db2c      	blt.n	8018348 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80182ee:	88f3      	ldrh	r3, [r6, #6]
 80182f0:	4499      	add	r9, r3
 80182f2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80182f6:	4498      	add	r8, r3
 80182f8:	fa0f f989 	sxth.w	r9, r9
 80182fc:	fa0f f888 	sxth.w	r8, r8
 8018300:	45c1      	cmp	r9, r8
 8018302:	db21      	blt.n	8018348 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8018304:	fa1f f28c 	uxth.w	r2, ip
 8018308:	88b3      	ldrh	r3, [r6, #4]
 801830a:	45e6      	cmp	lr, ip
 801830c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8018310:	4413      	add	r3, r2
 8018312:	fa1f f88e 	uxth.w	r8, lr
 8018316:	b29b      	uxth	r3, r3
 8018318:	fa0f f983 	sxth.w	r9, r3
 801831c:	db0a      	blt.n	8018334 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801831e:	eba3 0308 	sub.w	r3, r3, r8
 8018322:	1ac9      	subs	r1, r1, r3
 8018324:	b209      	sxth	r1, r1
 8018326:	2900      	cmp	r1, #0
 8018328:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801832c:	ddda      	ble.n	80182e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801832e:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8018332:	e7c6      	b.n	80182c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8018334:	4441      	add	r1, r8
 8018336:	b209      	sxth	r1, r1
 8018338:	4549      	cmp	r1, r9
 801833a:	dc05      	bgt.n	8018348 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801833c:	eba2 0208 	sub.w	r2, r2, r8
 8018340:	b212      	sxth	r2, r2
 8018342:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8018346:	e7cb      	b.n	80182e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8018348:	4607      	mov	r7, r0
 801834a:	e7bb      	b.n	80182c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801834c:	2d00      	cmp	r5, #0
 801834e:	d181      	bne.n	8018254 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8018350:	2f00      	cmp	r7, #0
 8018352:	f000 81dd 	beq.w	8018710 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8018356:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801835a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801835e:	b2b3      	uxth	r3, r6
 8018360:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 8018364:	9305      	str	r3, [sp, #20]
 8018366:	9a05      	ldr	r2, [sp, #20]
 8018368:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801836c:	4413      	add	r3, r2
 801836e:	b2ba      	uxth	r2, r7
 8018370:	4492      	add	sl, r2
 8018372:	b29b      	uxth	r3, r3
 8018374:	fa1f fa8a 	uxth.w	sl, sl
 8018378:	fa0f f883 	sxth.w	r8, r3
 801837c:	fa0f f98a 	sxth.w	r9, sl
 8018380:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8018384:	9b04      	ldr	r3, [sp, #16]
 8018386:	2b00      	cmp	r3, #0
 8018388:	d052      	beq.n	8018430 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801838a:	9903      	ldr	r1, [sp, #12]
 801838c:	4620      	mov	r0, r4
 801838e:	f7ff fcfa 	bl	8017d86 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018392:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018396:	b1c0      	cbz	r0, 80183ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018398:	f9b4 e000 	ldrsh.w	lr, [r4]
 801839c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80183a0:	4576      	cmp	r6, lr
 80183a2:	dc22      	bgt.n	80183ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80183a4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80183a8:	44f4      	add	ip, lr
 80183aa:	fa0f fc8c 	sxth.w	ip, ip
 80183ae:	45e0      	cmp	r8, ip
 80183b0:	db1b      	blt.n	80183ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80183b2:	428f      	cmp	r7, r1
 80183b4:	fa1f fc81 	uxth.w	ip, r1
 80183b8:	88e1      	ldrh	r1, [r4, #6]
 80183ba:	dc0d      	bgt.n	80183d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 80183bc:	ebaa 0c0c 	sub.w	ip, sl, ip
 80183c0:	f8a4 9002 	strh.w	r9, [r4, #2]
 80183c4:	eba1 010c 	sub.w	r1, r1, ip
 80183c8:	80e1      	strh	r1, [r4, #6]
 80183ca:	4628      	mov	r0, r5
 80183cc:	9904      	ldr	r1, [sp, #16]
 80183ce:	3c08      	subs	r4, #8
 80183d0:	4605      	mov	r5, r0
 80183d2:	3901      	subs	r1, #1
 80183d4:	9104      	str	r1, [sp, #16]
 80183d6:	e7d3      	b.n	8018380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 80183d8:	4461      	add	r1, ip
 80183da:	b209      	sxth	r1, r1
 80183dc:	4549      	cmp	r1, r9
 80183de:	dcf5      	bgt.n	80183cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80183e0:	eba2 0c0c 	sub.w	ip, r2, ip
 80183e4:	f8a4 c006 	strh.w	ip, [r4, #6]
 80183e8:	e7ef      	b.n	80183ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80183ea:	428f      	cmp	r7, r1
 80183ec:	dcee      	bgt.n	80183cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80183ee:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 80183f2:	4461      	add	r1, ip
 80183f4:	b209      	sxth	r1, r1
 80183f6:	4589      	cmp	r9, r1
 80183f8:	dbe8      	blt.n	80183cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80183fa:	4576      	cmp	r6, lr
 80183fc:	fa1f fc8e 	uxth.w	ip, lr
 8018400:	88a1      	ldrh	r1, [r4, #4]
 8018402:	dc07      	bgt.n	8018414 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8018404:	eba3 0c0c 	sub.w	ip, r3, ip
 8018408:	f8a4 8000 	strh.w	r8, [r4]
 801840c:	eba1 010c 	sub.w	r1, r1, ip
 8018410:	80a1      	strh	r1, [r4, #4]
 8018412:	e7da      	b.n	80183ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018414:	4461      	add	r1, ip
 8018416:	b209      	sxth	r1, r1
 8018418:	4588      	cmp	r8, r1
 801841a:	dbd7      	blt.n	80183cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801841c:	9905      	ldr	r1, [sp, #20]
 801841e:	eba1 0c0c 	sub.w	ip, r1, ip
 8018422:	f8a4 c004 	strh.w	ip, [r4, #4]
 8018426:	e7d0      	b.n	80183ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018428:	20027c9e 	.word	0x20027c9e
 801842c:	20027c9c 	.word	0x20027c9c
 8018430:	2d00      	cmp	r5, #0
 8018432:	f000 816d 	beq.w	8018710 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8018436:	9b06      	ldr	r3, [sp, #24]
 8018438:	445b      	add	r3, fp
 801843a:	461c      	mov	r4, r3
 801843c:	9b02      	ldr	r3, [sp, #8]
 801843e:	3301      	adds	r3, #1
 8018440:	f000 8166 	beq.w	8018710 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8018444:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 8018448:	9803      	ldr	r0, [sp, #12]
 801844a:	4629      	mov	r1, r5
 801844c:	f7ff fd0e 	bl	8017e6c <_ZNK8touchgfx4Rect8includesERKS0_>
 8018450:	b120      	cbz	r0, 801845c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8018452:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8018456:	9801      	ldr	r0, [sp, #4]
 8018458:	f7ff feb0 	bl	80181bc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801845c:	9903      	ldr	r1, [sp, #12]
 801845e:	4628      	mov	r0, r5
 8018460:	f7ff fc91 	bl	8017d86 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018464:	2800      	cmp	r0, #0
 8018466:	f000 809c 	beq.w	80185a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801846a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 801846e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8018472:	fa1f f189 	uxth.w	r1, r9
 8018476:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801847a:	9309      	str	r3, [sp, #36]	; 0x24
 801847c:	eb01 0c03 	add.w	ip, r1, r3
 8018480:	b283      	uxth	r3, r0
 8018482:	4548      	cmp	r0, r9
 8018484:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8018488:	fa1f fa8c 	uxth.w	sl, ip
 801848c:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8018490:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8018494:	eb03 050c 	add.w	r5, r3, ip
 8018498:	b2ad      	uxth	r5, r5
 801849a:	9505      	str	r5, [sp, #20]
 801849c:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 80184a0:	9504      	str	r5, [sp, #16]
 80184a2:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 80184a6:	f340 8099 	ble.w	80185dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 80184aa:	1a5b      	subs	r3, r3, r1
 80184ac:	4596      	cmp	lr, r2
 80184ae:	fa0f f08a 	sxth.w	r0, sl
 80184b2:	b29b      	uxth	r3, r3
 80184b4:	b21e      	sxth	r6, r3
 80184b6:	dd2e      	ble.n	8018516 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 80184b8:	9f02      	ldr	r7, [sp, #8]
 80184ba:	fa1f fe8e 	uxth.w	lr, lr
 80184be:	b292      	uxth	r2, r2
 80184c0:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 80184c4:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 80184c8:	9f04      	ldr	r7, [sp, #16]
 80184ca:	ebae 0102 	sub.w	r1, lr, r2
 80184ce:	44a6      	add	lr, r4
 80184d0:	1a3f      	subs	r7, r7, r0
 80184d2:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 80184d6:	b289      	uxth	r1, r1
 80184d8:	4402      	add	r2, r0
 80184da:	fa0f fe8e 	sxth.w	lr, lr
 80184de:	b20d      	sxth	r5, r1
 80184e0:	b212      	sxth	r2, r2
 80184e2:	436f      	muls	r7, r5
 80184e4:	ebae 0202 	sub.w	r2, lr, r2
 80184e8:	4372      	muls	r2, r6
 80184ea:	4297      	cmp	r7, r2
 80184ec:	db09      	blt.n	8018502 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 80184ee:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 80184f2:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 80184f6:	449c      	add	ip, r3
 80184f8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80184fc:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8018500:	e686      	b.n	8018210 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018502:	4421      	add	r1, r4
 8018504:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 8018508:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 801850c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8018510:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8018514:	e67c      	b.n	8018210 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018516:	9f04      	ldr	r7, [sp, #16]
 8018518:	42b8      	cmp	r0, r7
 801851a:	da27      	bge.n	801856c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801851c:	9902      	ldr	r1, [sp, #8]
 801851e:	1a3f      	subs	r7, r7, r0
 8018520:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 8018524:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8018528:	eb05 010e 	add.w	r1, r5, lr
 801852c:	fa1f f881 	uxth.w	r8, r1
 8018530:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 8018534:	4411      	add	r1, r2
 8018536:	fa0f f988 	sxth.w	r9, r8
 801853a:	eba2 020e 	sub.w	r2, r2, lr
 801853e:	eba1 0108 	sub.w	r1, r1, r8
 8018542:	4372      	muls	r2, r6
 8018544:	b289      	uxth	r1, r1
 8018546:	fa0f f881 	sxth.w	r8, r1
 801854a:	fb08 f707 	mul.w	r7, r8, r7
 801854e:	42ba      	cmp	r2, r7
 8018550:	dc06      	bgt.n	8018560 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8018552:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 8018556:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 801855a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 801855e:	e7ca      	b.n	80184f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8018560:	4429      	add	r1, r5
 8018562:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8018566:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801856a:	e651      	b.n	8018210 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801856c:	9805      	ldr	r0, [sp, #20]
 801856e:	2d06      	cmp	r5, #6
 8018570:	ebaa 0000 	sub.w	r0, sl, r0
 8018574:	b280      	uxth	r0, r0
 8018576:	fa0f fe80 	sxth.w	lr, r0
 801857a:	d817      	bhi.n	80185ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801857c:	9b04      	ldr	r3, [sp, #16]
 801857e:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8018582:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8018586:	1c6b      	adds	r3, r5, #1
 8018588:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 801858c:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8018590:	9b01      	ldr	r3, [sp, #4]
 8018592:	9801      	ldr	r0, [sp, #4]
 8018594:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018598:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801859c:	805a      	strh	r2, [r3, #2]
 801859e:	809e      	strh	r6, [r3, #4]
 80185a0:	80d9      	strh	r1, [r3, #6]
 80185a2:	9b02      	ldr	r3, [sp, #8]
 80185a4:	3c08      	subs	r4, #8
 80185a6:	3b01      	subs	r3, #1
 80185a8:	9302      	str	r3, [sp, #8]
 80185aa:	e747      	b.n	801843c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 80185ac:	9a02      	ldr	r2, [sp, #8]
 80185ae:	45b6      	cmp	lr, r6
 80185b0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80185b4:	db0d      	blt.n	80185d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 80185b6:	449c      	add	ip, r3
 80185b8:	445a      	add	r2, fp
 80185ba:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 80185be:	fa1f fc8c 	uxth.w	ip, ip
 80185c2:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 80185c6:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 80185ca:	448c      	add	ip, r1
 80185cc:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 80185d0:	e61e      	b.n	8018210 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80185d2:	445a      	add	r2, fp
 80185d4:	4484      	add	ip, r0
 80185d6:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 80185da:	e78f      	b.n	80184fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80185dc:	fa1f f18e 	uxth.w	r1, lr
 80185e0:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 80185e4:	b293      	uxth	r3, r2
 80185e6:	4596      	cmp	lr, r2
 80185e8:	eb01 0806 	add.w	r8, r1, r6
 80185ec:	9306      	str	r3, [sp, #24]
 80185ee:	fa1f f888 	uxth.w	r8, r8
 80185f2:	9f06      	ldr	r7, [sp, #24]
 80185f4:	fa0f f388 	sxth.w	r3, r8
 80185f8:	9307      	str	r3, [sp, #28]
 80185fa:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 80185fe:	443b      	add	r3, r7
 8018600:	b29b      	uxth	r3, r3
 8018602:	9308      	str	r3, [sp, #32]
 8018604:	da24      	bge.n	8018650 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8018606:	9905      	ldr	r1, [sp, #20]
 8018608:	eba3 0308 	sub.w	r3, r3, r8
 801860c:	eba2 020e 	sub.w	r2, r2, lr
 8018610:	eba9 0000 	sub.w	r0, r9, r0
 8018614:	ebaa 0401 	sub.w	r4, sl, r1
 8018618:	b29b      	uxth	r3, r3
 801861a:	b2a4      	uxth	r4, r4
 801861c:	b219      	sxth	r1, r3
 801861e:	b225      	sxth	r5, r4
 8018620:	4348      	muls	r0, r1
 8018622:	436a      	muls	r2, r5
 8018624:	4282      	cmp	r2, r0
 8018626:	9a02      	ldr	r2, [sp, #8]
 8018628:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801862c:	445a      	add	r2, fp
 801862e:	dc06      	bgt.n	801863e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8018630:	9b07      	ldr	r3, [sp, #28]
 8018632:	44a4      	add	ip, r4
 8018634:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 8018638:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 801863c:	e75e      	b.n	80184fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801863e:	9904      	ldr	r1, [sp, #16]
 8018640:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 8018644:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 8018648:	4433      	add	r3, r6
 801864a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801864e:	e5df      	b.n	8018210 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018650:	9f06      	ldr	r7, [sp, #24]
 8018652:	9b04      	ldr	r3, [sp, #16]
 8018654:	1bc9      	subs	r1, r1, r7
 8018656:	fa0f f78a 	sxth.w	r7, sl
 801865a:	b289      	uxth	r1, r1
 801865c:	429f      	cmp	r7, r3
 801865e:	fa0f fe81 	sxth.w	lr, r1
 8018662:	dd23      	ble.n	80186ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8018664:	9a05      	ldr	r2, [sp, #20]
 8018666:	eba9 0000 	sub.w	r0, r9, r0
 801866a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801866e:	ebaa 0202 	sub.w	r2, sl, r2
 8018672:	9d07      	ldr	r5, [sp, #28]
 8018674:	fb0e f000 	mul.w	r0, lr, r0
 8018678:	b292      	uxth	r2, r2
 801867a:	eba5 0a03 	sub.w	sl, r5, r3
 801867e:	9b02      	ldr	r3, [sp, #8]
 8018680:	b214      	sxth	r4, r2
 8018682:	00db      	lsls	r3, r3, #3
 8018684:	fb04 fa0a 	mul.w	sl, r4, sl
 8018688:	445b      	add	r3, fp
 801868a:	4550      	cmp	r0, sl
 801868c:	db03      	blt.n	8018696 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801868e:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 8018692:	4494      	add	ip, r2
 8018694:	e732      	b.n	80184fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8018696:	9a04      	ldr	r2, [sp, #16]
 8018698:	4431      	add	r1, r6
 801869a:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 801869e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80186a2:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 80186a6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80186aa:	e75c      	b.n	8018566 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 80186ac:	9b08      	ldr	r3, [sp, #32]
 80186ae:	2d06      	cmp	r5, #6
 80186b0:	eba3 0308 	sub.w	r3, r3, r8
 80186b4:	b29b      	uxth	r3, r3
 80186b6:	b218      	sxth	r0, r3
 80186b8:	d813      	bhi.n	80186e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 80186ba:	9b07      	ldr	r3, [sp, #28]
 80186bc:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 80186c0:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 80186c4:	1c6b      	adds	r3, r5, #1
 80186c6:	9901      	ldr	r1, [sp, #4]
 80186c8:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 80186cc:	9b01      	ldr	r3, [sp, #4]
 80186ce:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 80186d2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80186d6:	805a      	strh	r2, [r3, #2]
 80186d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80186da:	f8a3 e006 	strh.w	lr, [r3, #6]
 80186de:	809a      	strh	r2, [r3, #4]
 80186e0:	e75f      	b.n	80185a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80186e2:	9c02      	ldr	r4, [sp, #8]
 80186e4:	4570      	cmp	r0, lr
 80186e6:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80186ea:	db0d      	blt.n	8018708 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 80186ec:	4431      	add	r1, r6
 80186ee:	9b06      	ldr	r3, [sp, #24]
 80186f0:	445c      	add	r4, fp
 80186f2:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80186f6:	b289      	uxth	r1, r1
 80186f8:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 80186fc:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8018700:	4419      	add	r1, r3
 8018702:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 8018706:	e583      	b.n	8018210 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018708:	445c      	add	r4, fp
 801870a:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 801870e:	e79b      	b.n	8018648 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8018710:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8018714:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8018718:	1e65      	subs	r5, r4, #1
 801871a:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801871e:	b2ad      	uxth	r5, r5
 8018720:	42b5      	cmp	r5, r6
 8018722:	d044      	beq.n	80187ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8018724:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8018728:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	; 0xa6
 801872c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8018730:	4282      	cmp	r2, r0
 8018732:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	; 0xa4
 8018736:	d11f      	bne.n	8018778 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8018738:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 801873c:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8018740:	459c      	cmp	ip, r3
 8018742:	d119      	bne.n	8018778 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8018744:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 8018748:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801874c:	19d8      	adds	r0, r3, r7
 801874e:	b200      	sxth	r0, r0
 8018750:	4288      	cmp	r0, r1
 8018752:	d109      	bne.n	8018768 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8018754:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 8018758:	4413      	add	r3, r2
 801875a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801875e:	4629      	mov	r1, r5
 8018760:	9801      	ldr	r0, [sp, #4]
 8018762:	f7ff fd2b 	bl	80181bc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018766:	e003      	b.n	8018770 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8018768:	4411      	add	r1, r2
 801876a:	b209      	sxth	r1, r1
 801876c:	42b9      	cmp	r1, r7
 801876e:	d0f3      	beq.n	8018758 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8018770:	3d01      	subs	r5, #1
 8018772:	3c08      	subs	r4, #8
 8018774:	b2ad      	uxth	r5, r5
 8018776:	e7d3      	b.n	8018720 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8018778:	42b9      	cmp	r1, r7
 801877a:	d1f9      	bne.n	8018770 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801877c:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 8018780:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8018784:	4299      	cmp	r1, r3
 8018786:	d1f3      	bne.n	8018770 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8018788:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801878c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8018790:	181f      	adds	r7, r3, r0
 8018792:	b23f      	sxth	r7, r7
 8018794:	42ba      	cmp	r2, r7
 8018796:	d105      	bne.n	80187a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8018798:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 801879c:	440b      	add	r3, r1
 801879e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80187a2:	e7dc      	b.n	801875e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 80187a4:	440a      	add	r2, r1
 80187a6:	b212      	sxth	r2, r2
 80187a8:	4290      	cmp	r0, r2
 80187aa:	d1e1      	bne.n	8018770 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80187ac:	e7f6      	b.n	801879c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 80187ae:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 80187b2:	2e07      	cmp	r6, #7
 80187b4:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 80187b8:	d812      	bhi.n	80187e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 80187ba:	1c75      	adds	r5, r6, #1
 80187bc:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80187c0:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80187c4:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 80187c8:	9d01      	ldr	r5, [sp, #4]
 80187ca:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80187ce:	442c      	add	r4, r5
 80187d0:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80187d4:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80187d8:	8061      	strh	r1, [r4, #2]
 80187da:	80a2      	strh	r2, [r4, #4]
 80187dc:	80e3      	strh	r3, [r4, #6]
 80187de:	e581      	b.n	80182e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80187e0:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 80187e4:	3e01      	subs	r6, #1
 80187e6:	445c      	add	r4, fp
 80187e8:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80187ec:	f04f 37ff 	mov.w	r7, #4294967295
 80187f0:	2500      	movs	r5, #0
 80187f2:	9305      	str	r3, [sp, #20]
 80187f4:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80187f8:	1e72      	subs	r2, r6, #1
 80187fa:	9302      	str	r3, [sp, #8]
 80187fc:	4691      	mov	r9, r2
 80187fe:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8018802:	9304      	str	r3, [sp, #16]
 8018804:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 8018808:	f1b9 3fff 	cmp.w	r9, #4294967295
 801880c:	6818      	ldr	r0, [r3, #0]
 801880e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8018812:	9207      	str	r2, [sp, #28]
 8018814:	bf16      	itet	ne
 8018816:	9905      	ldrne	r1, [sp, #20]
 8018818:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801881c:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8018820:	9306      	str	r3, [sp, #24]
 8018822:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8018826:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801882a:	fb18 f801 	smulbb	r8, r8, r1
 801882e:	6859      	ldr	r1, [r3, #4]
 8018830:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8018834:	4671      	mov	r1, lr
 8018836:	a80c      	add	r0, sp, #48	; 0x30
 8018838:	f7fb faeb 	bl	8013e12 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801883c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8018840:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8018844:	f04f 0c08 	mov.w	ip, #8
 8018848:	9b04      	ldr	r3, [sp, #16]
 801884a:	9a02      	ldr	r2, [sp, #8]
 801884c:	fb10 f001 	smulbb	r0, r0, r1
 8018850:	fb02 8803 	mla	r8, r2, r3, r8
 8018854:	eba0 0108 	sub.w	r1, r0, r8
 8018858:	fb90 f0fc 	sdiv	r0, r0, ip
 801885c:	4288      	cmp	r0, r1
 801885e:	dc20      	bgt.n	80188a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8018860:	4551      	cmp	r1, sl
 8018862:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8018866:	da03      	bge.n	8018870 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 8018868:	b1d9      	cbz	r1, 80188a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801886a:	468a      	mov	sl, r1
 801886c:	464f      	mov	r7, r9
 801886e:	4635      	mov	r5, r6
 8018870:	f109 39ff 	add.w	r9, r9, #4294967295
 8018874:	f119 0f02 	cmn.w	r9, #2
 8018878:	d1c6      	bne.n	8018808 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801887a:	4616      	mov	r6, r2
 801887c:	3201      	adds	r2, #1
 801887e:	f1a4 0408 	sub.w	r4, r4, #8
 8018882:	d1b7      	bne.n	80187f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8018884:	9b01      	ldr	r3, [sp, #4]
 8018886:	b2ac      	uxth	r4, r5
 8018888:	00ed      	lsls	r5, r5, #3
 801888a:	1958      	adds	r0, r3, r5
 801888c:	1c7b      	adds	r3, r7, #1
 801888e:	d10b      	bne.n	80188a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8018890:	4601      	mov	r1, r0
 8018892:	9803      	ldr	r0, [sp, #12]
 8018894:	f7fb fabd 	bl	8013e12 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018898:	4621      	mov	r1, r4
 801889a:	9801      	ldr	r0, [sp, #4]
 801889c:	f7ff fc8e 	bl	80181bc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80188a0:	e4b6      	b.n	8018210 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80188a2:	464f      	mov	r7, r9
 80188a4:	4635      	mov	r5, r6
 80188a6:	e7ed      	b.n	8018884 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 80188a8:	9b01      	ldr	r3, [sp, #4]
 80188aa:	00ff      	lsls	r7, r7, #3
 80188ac:	445d      	add	r5, fp
 80188ae:	19d9      	adds	r1, r3, r7
 80188b0:	445f      	add	r7, fp
 80188b2:	f7fb faae 	bl	8013e12 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80188b6:	9b03      	ldr	r3, [sp, #12]
 80188b8:	cb03      	ldmia	r3!, {r0, r1}
 80188ba:	9b03      	ldr	r3, [sp, #12]
 80188bc:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 80188c0:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80188c4:	f855 0fac 	ldr.w	r0, [r5, #172]!
 80188c8:	6869      	ldr	r1, [r5, #4]
 80188ca:	c303      	stmia	r3!, {r0, r1}
 80188cc:	e7e4      	b.n	8018898 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 80188ce:	bf00      	nop

080188d0 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80188d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188d4:	f500 7698 	add.w	r6, r0, #304	; 0x130
 80188d8:	b09b      	sub	sp, #108	; 0x6c
 80188da:	4604      	mov	r4, r0
 80188dc:	4630      	mov	r0, r6
 80188de:	f7f9 faa4 	bl	8011e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 80188e2:	4605      	mov	r5, r0
 80188e4:	b948      	cbnz	r0, 80188fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 80188e6:	6823      	ldr	r3, [r4, #0]
 80188e8:	4620      	mov	r0, r4
 80188ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80188ec:	e896 0006 	ldmia.w	r6, {r1, r2}
 80188f0:	4798      	blx	r3
 80188f2:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80188f6:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 80188fa:	4bc5      	ldr	r3, [pc, #788]	; (8018c10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d03f      	beq.n	8018982 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8018902:	4dc4      	ldr	r5, [pc, #784]	; (8018c14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8018904:	4628      	mov	r0, r5
 8018906:	f7f9 fa90 	bl	8011e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 801890a:	4606      	mov	r6, r0
 801890c:	2800      	cmp	r0, #0
 801890e:	d138      	bne.n	8018982 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8018910:	4628      	mov	r0, r5
 8018912:	f7ff f949 	bl	8017ba8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018916:	6823      	ldr	r3, [r4, #0]
 8018918:	6829      	ldr	r1, [r5, #0]
 801891a:	4620      	mov	r0, r4
 801891c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801891e:	686a      	ldr	r2, [r5, #4]
 8018920:	4798      	blx	r3
 8018922:	802e      	strh	r6, [r5, #0]
 8018924:	806e      	strh	r6, [r5, #2]
 8018926:	80ae      	strh	r6, [r5, #4]
 8018928:	80ee      	strh	r6, [r5, #6]
 801892a:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 801892e:	4dba      	ldr	r5, [pc, #744]	; (8018c18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8018930:	4640      	mov	r0, r8
 8018932:	f7ff fbe8 	bl	8018106 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018936:	882e      	ldrh	r6, [r5, #0]
 8018938:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801893c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8018940:	4633      	mov	r3, r6
 8018942:	42bb      	cmp	r3, r7
 8018944:	d224      	bcs.n	8018990 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8018946:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801894a:	2907      	cmp	r1, #7
 801894c:	d816      	bhi.n	801897c <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801894e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8018952:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8018956:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801895a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801895e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8018962:	1c4a      	adds	r2, r1, #1
 8018964:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8018968:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801896c:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 8018970:	f8a2 a002 	strh.w	sl, [r2, #2]
 8018974:	f8a2 e004 	strh.w	lr, [r2, #4]
 8018978:	f8a2 c006 	strh.w	ip, [r2, #6]
 801897c:	3301      	adds	r3, #1
 801897e:	b29b      	uxth	r3, r3
 8018980:	e7df      	b.n	8018942 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 8018982:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8018986:	2b00      	cmp	r3, #0
 8018988:	d1cf      	bne.n	801892a <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801898a:	b01b      	add	sp, #108	; 0x6c
 801898c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018990:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 8018994:	42b3      	cmp	r3, r6
 8018996:	d90c      	bls.n	80189b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8018998:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801899c:	6822      	ldr	r2, [r4, #0]
 801899e:	3601      	adds	r6, #1
 80189a0:	4620      	mov	r0, r4
 80189a2:	6c17      	ldr	r7, [r2, #64]	; 0x40
 80189a4:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 80189a8:	b2b6      	uxth	r6, r6
 80189aa:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 80189ae:	47b8      	blx	r7
 80189b0:	e7ee      	b.n	8018990 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80189b2:	4a9a      	ldr	r2, [pc, #616]	; (8018c1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80189b4:	6813      	ldr	r3, [r2, #0]
 80189b6:	4691      	mov	r9, r2
 80189b8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80189bc:	2b01      	cmp	r3, #1
 80189be:	f040 80e0 	bne.w	8018b82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 80189c2:	8829      	ldrh	r1, [r5, #0]
 80189c4:	2600      	movs	r6, #0
 80189c6:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 80189ca:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 80189ce:	33ae      	adds	r3, #174	; 0xae
 80189d0:	428f      	cmp	r7, r1
 80189d2:	f103 0308 	add.w	r3, r3, #8
 80189d6:	dd0a      	ble.n	80189ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 80189d8:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 80189dc:	3101      	adds	r1, #1
 80189de:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 80189e2:	4402      	add	r2, r0
 80189e4:	b212      	sxth	r2, r2
 80189e6:	4296      	cmp	r6, r2
 80189e8:	bfb8      	it	lt
 80189ea:	4616      	movlt	r6, r2
 80189ec:	e7f0      	b.n	80189d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 80189ee:	4b8c      	ldr	r3, [pc, #560]	; (8018c20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 80189f0:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8018c1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 80189f4:	881b      	ldrh	r3, [r3, #0]
 80189f6:	2b0f      	cmp	r3, #15
 80189f8:	bf8c      	ite	hi
 80189fa:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 80189fe:	f04f 0b01 	movls.w	fp, #1
 8018a02:	2300      	movs	r3, #0
 8018a04:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8018a08:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8018a0c:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8018a10:	4b82      	ldr	r3, [pc, #520]	; (8018c1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8018a12:	4438      	add	r0, r7
 8018a14:	b207      	sxth	r7, r0
 8018a16:	6818      	ldr	r0, [r3, #0]
 8018a18:	42b7      	cmp	r7, r6
 8018a1a:	6803      	ldr	r3, [r0, #0]
 8018a1c:	f280 8083 	bge.w	8018b26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8018a20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018a24:	4798      	blx	r3
 8018a26:	eb07 030b 	add.w	r3, r7, fp
 8018a2a:	4298      	cmp	r0, r3
 8018a2c:	da07      	bge.n	8018a3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8018a2e:	42b0      	cmp	r0, r6
 8018a30:	da05      	bge.n	8018a3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8018a32:	4287      	cmp	r7, r0
 8018a34:	dd6c      	ble.n	8018b10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8018a36:	2f00      	cmp	r7, #0
 8018a38:	dd6a      	ble.n	8018b10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8018a3a:	4630      	mov	r0, r6
 8018a3c:	e004      	b.n	8018a48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 8018a3e:	4287      	cmp	r7, r0
 8018a40:	dcfb      	bgt.n	8018a3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 8018a42:	42b0      	cmp	r0, r6
 8018a44:	bfa8      	it	ge
 8018a46:	4630      	movge	r0, r6
 8018a48:	4b76      	ldr	r3, [pc, #472]	; (8018c24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8018a4a:	1bc0      	subs	r0, r0, r7
 8018a4c:	2200      	movs	r2, #0
 8018a4e:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018a52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018a56:	882f      	ldrh	r7, [r5, #0]
 8018a58:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018a5c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018a60:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018a64:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8018a68:	42bb      	cmp	r3, r7
 8018a6a:	d9cd      	bls.n	8018a08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8018a6c:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8018a70:	ab07      	add	r3, sp, #28
 8018a72:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8018a76:	6851      	ldr	r1, [r2, #4]
 8018a78:	c303      	stmia	r3!, {r0, r1}
 8018a7a:	a905      	add	r1, sp, #20
 8018a7c:	a807      	add	r0, sp, #28
 8018a7e:	f7ff f982 	bl	8017d86 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018a82:	2800      	cmp	r0, #0
 8018a84:	d04c      	beq.n	8018b20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8018a86:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8018a8a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8018a8e:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8018a92:	4686      	mov	lr, r0
 8018a94:	4290      	cmp	r0, r2
 8018a96:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8018a9a:	4450      	add	r0, sl
 8018a9c:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8018aa0:	bfb8      	it	lt
 8018aa2:	4696      	movlt	lr, r2
 8018aa4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018aa8:	4452      	add	r2, sl
 8018aaa:	b280      	uxth	r0, r0
 8018aac:	4299      	cmp	r1, r3
 8018aae:	468c      	mov	ip, r1
 8018ab0:	b292      	uxth	r2, r2
 8018ab2:	9302      	str	r3, [sp, #8]
 8018ab4:	bfb8      	it	lt
 8018ab6:	469c      	movlt	ip, r3
 8018ab8:	b203      	sxth	r3, r0
 8018aba:	fa0f fa82 	sxth.w	sl, r2
 8018abe:	f8ad e01c 	strh.w	lr, [sp, #28]
 8018ac2:	f8ad c01e 	strh.w	ip, [sp, #30]
 8018ac6:	4553      	cmp	r3, sl
 8018ac8:	bfb8      	it	lt
 8018aca:	4602      	movlt	r2, r0
 8018acc:	9b02      	ldr	r3, [sp, #8]
 8018ace:	eba2 020e 	sub.w	r2, r2, lr
 8018ad2:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018ad6:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8018ada:	4411      	add	r1, r2
 8018adc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018ae0:	4413      	add	r3, r2
 8018ae2:	b289      	uxth	r1, r1
 8018ae4:	b29b      	uxth	r3, r3
 8018ae6:	b208      	sxth	r0, r1
 8018ae8:	b21a      	sxth	r2, r3
 8018aea:	4290      	cmp	r0, r2
 8018aec:	bfb8      	it	lt
 8018aee:	460b      	movlt	r3, r1
 8018af0:	eba3 030c 	sub.w	r3, r3, ip
 8018af4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018af8:	a807      	add	r0, sp, #28
 8018afa:	f7f9 f996 	bl	8011e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8018afe:	b920      	cbnz	r0, 8018b0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8018b00:	6823      	ldr	r3, [r4, #0]
 8018b02:	a907      	add	r1, sp, #28
 8018b04:	4620      	mov	r0, r4
 8018b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018b08:	4798      	blx	r3
 8018b0a:	3701      	adds	r7, #1
 8018b0c:	b2bf      	uxth	r7, r7
 8018b0e:	e7a9      	b.n	8018a64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8018b10:	f8d9 0000 	ldr.w	r0, [r9]
 8018b14:	2101      	movs	r1, #1
 8018b16:	6803      	ldr	r3, [r0, #0]
 8018b18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018b1c:	4798      	blx	r3
 8018b1e:	e773      	b.n	8018a08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8018b20:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8018b24:	e7e8      	b.n	8018af8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8018b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b28:	4798      	blx	r3
 8018b2a:	4b3f      	ldr	r3, [pc, #252]	; (8018c28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8018b2c:	781b      	ldrb	r3, [r3, #0]
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	f43f af2b 	beq.w	801898a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8018b34:	2300      	movs	r3, #0
 8018b36:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8018b3a:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 8018b3e:	882b      	ldrh	r3, [r5, #0]
 8018b40:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8018b44:	42ab      	cmp	r3, r5
 8018b46:	f4bf af20 	bcs.w	801898a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8018b4a:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8018b4e:	2907      	cmp	r1, #7
 8018b50:	d814      	bhi.n	8018b7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 8018b52:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8018b56:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 8018b5a:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 8018b5e:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8018b62:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8018b66:	1c4a      	adds	r2, r1, #1
 8018b68:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8018b6c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8018b70:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 8018b74:	f8a2 c002 	strh.w	ip, [r2, #2]
 8018b78:	8097      	strh	r7, [r2, #4]
 8018b7a:	80d6      	strh	r6, [r2, #6]
 8018b7c:	3301      	adds	r3, #1
 8018b7e:	b29b      	uxth	r3, r3
 8018b80:	e7e0      	b.n	8018b44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 8018b82:	2b02      	cmp	r3, #2
 8018b84:	f040 8133 	bne.w	8018dee <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 8018b88:	4b28      	ldr	r3, [pc, #160]	; (8018c2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8018b8a:	f104 0aac 	add.w	sl, r4, #172	; 0xac
 8018b8e:	781b      	ldrb	r3, [r3, #0]
 8018b90:	2b01      	cmp	r3, #1
 8018b92:	f000 8098 	beq.w	8018cc6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8018b96:	882a      	ldrh	r2, [r5, #0]
 8018b98:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
 8018b9c:	3201      	adds	r2, #1
 8018b9e:	b292      	uxth	r2, r2
 8018ba0:	2900      	cmp	r1, #0
 8018ba2:	d0c2      	beq.n	8018b2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8018ba4:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	; 0xae
 8018ba8:	4694      	mov	ip, r2
 8018baa:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8018bae:	f04f 0900 	mov.w	r9, #0
 8018bb2:	441e      	add	r6, r3
 8018bb4:	b236      	sxth	r6, r6
 8018bb6:	fa1f f38c 	uxth.w	r3, ip
 8018bba:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8018bbe:	4299      	cmp	r1, r3
 8018bc0:	f240 80be 	bls.w	8018d40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 8018bc4:	4427      	add	r7, r4
 8018bc6:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8018bca:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8018bce:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	; 0xae
 8018bd2:	4283      	cmp	r3, r0
 8018bd4:	f340 80a0 	ble.w	8018d18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 8018bd8:	f8be 60b2 	ldrh.w	r6, [lr, #178]	; 0xb2
 8018bdc:	46e1      	mov	r9, ip
 8018bde:	4406      	add	r6, r0
 8018be0:	b236      	sxth	r6, r6
 8018be2:	429e      	cmp	r6, r3
 8018be4:	bfa8      	it	ge
 8018be6:	461e      	movge	r6, r3
 8018be8:	f10c 0c01 	add.w	ip, ip, #1
 8018bec:	e7e3      	b.n	8018bb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 8018bee:	d10a      	bne.n	8018c06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 8018bf0:	4562      	cmp	r2, ip
 8018bf2:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	; 0xb2
 8018bf6:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	; 0xb2
 8018bfa:	bfb8      	it	lt
 8018bfc:	4662      	movlt	r2, ip
 8018bfe:	4288      	cmp	r0, r1
 8018c00:	bfb8      	it	lt
 8018c02:	461f      	movlt	r7, r3
 8018c04:	e086      	b.n	8018d14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8018c06:	428a      	cmp	r2, r1
 8018c08:	bfb8      	it	lt
 8018c0a:	460a      	movlt	r2, r1
 8018c0c:	e082      	b.n	8018d14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8018c0e:	bf00      	nop
 8018c10:	20027ce8 	.word	0x20027ce8
 8018c14:	20027cf4 	.word	0x20027cf4
 8018c18:	20000070 	.word	0x20000070
 8018c1c:	20027ca8 	.word	0x20027ca8
 8018c20:	20027c9e 	.word	0x20027c9e
 8018c24:	20027c9c 	.word	0x20027c9c
 8018c28:	20027ca6 	.word	0x20027ca6
 8018c2c:	20027ca0 	.word	0x20027ca0
 8018c30:	19a1      	adds	r1, r4, r6
 8018c32:	ab07      	add	r3, sp, #28
 8018c34:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8018c38:	6849      	ldr	r1, [r1, #4]
 8018c3a:	c303      	stmia	r3!, {r0, r1}
 8018c3c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8018c40:	a807      	add	r0, sp, #28
 8018c42:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018c46:	2b13      	cmp	r3, #19
 8018c48:	440b      	add	r3, r1
 8018c4a:	bfd8      	it	le
 8018c4c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8018c50:	1a9b      	subs	r3, r3, r2
 8018c52:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018c56:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018c5a:	f7fe ffbf 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018c5e:	a807      	add	r0, sp, #28
 8018c60:	f7f9 f8e3 	bl	8011e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8018c64:	bb78      	cbnz	r0, 8018cc6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8018c66:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8018c6a:	4426      	add	r6, r4
 8018c6c:	f8d9 0000 	ldr.w	r0, [r9]
 8018c70:	f1bc 0f14 	cmp.w	ip, #20
 8018c74:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018c78:	f8d0 e000 	ldr.w	lr, [r0]
 8018c7c:	bfa8      	it	ge
 8018c7e:	f04f 0c14 	movge.w	ip, #20
 8018c82:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8018c86:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018c8a:	fa1f fc8c 	uxth.w	ip, ip
 8018c8e:	f8cd c000 	str.w	ip, [sp]
 8018c92:	f8de b090 	ldr.w	fp, [lr, #144]	; 0x90
 8018c96:	47d8      	blx	fp
 8018c98:	4683      	mov	fp, r0
 8018c9a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018c9e:	a807      	add	r0, sp, #28
 8018ca0:	f7fe ff82 	bl	8017ba8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018ca4:	6823      	ldr	r3, [r4, #0]
 8018ca6:	4620      	mov	r0, r4
 8018ca8:	a907      	add	r1, sp, #28
 8018caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018cac:	4798      	blx	r3
 8018cae:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 8018cb2:	eba0 000b 	sub.w	r0, r0, fp
 8018cb6:	b200      	sxth	r0, r0
 8018cb8:	f8a6 00b0 	strh.w	r0, [r6, #176]	; 0xb0
 8018cbc:	b918      	cbnz	r0, 8018cc6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8018cbe:	b2b9      	uxth	r1, r7
 8018cc0:	4650      	mov	r0, sl
 8018cc2:	f7ff fa7b 	bl	80181bc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018cc6:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 8018cca:	f1bb 0f00 	cmp.w	fp, #0
 8018cce:	f43f af2c 	beq.w	8018b2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8018cd2:	882b      	ldrh	r3, [r5, #0]
 8018cd4:	2700      	movs	r7, #0
 8018cd6:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8018cda:	3301      	adds	r3, #1
 8018cdc:	b29b      	uxth	r3, r3
 8018cde:	b299      	uxth	r1, r3
 8018ce0:	00fe      	lsls	r6, r7, #3
 8018ce2:	458b      	cmp	fp, r1
 8018ce4:	d9a4      	bls.n	8018c30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 8018ce6:	4426      	add	r6, r4
 8018ce8:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8018cec:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	; 0xac
 8018cf0:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 8018cf4:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	; 0xac
 8018cf8:	4408      	add	r0, r1
 8018cfa:	f8be 10b0 	ldrh.w	r1, [lr, #176]	; 0xb0
 8018cfe:	4461      	add	r1, ip
 8018d00:	b200      	sxth	r0, r0
 8018d02:	b209      	sxth	r1, r1
 8018d04:	4288      	cmp	r0, r1
 8018d06:	f6bf af72 	bge.w	8018bee <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 8018d0a:	4584      	cmp	ip, r0
 8018d0c:	4662      	mov	r2, ip
 8018d0e:	461f      	mov	r7, r3
 8018d10:	bfb8      	it	lt
 8018d12:	4602      	movlt	r2, r0
 8018d14:	3301      	adds	r3, #1
 8018d16:	e7e2      	b.n	8018cde <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 8018d18:	d10e      	bne.n	8018d38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 8018d1a:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8018d1e:	f8be e0b2 	ldrh.w	lr, [lr, #178]	; 0xb2
 8018d22:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8018d26:	4473      	add	r3, lr
 8018d28:	b21b      	sxth	r3, r3
 8018d2a:	429e      	cmp	r6, r3
 8018d2c:	bfa8      	it	ge
 8018d2e:	461e      	movge	r6, r3
 8018d30:	4287      	cmp	r7, r0
 8018d32:	bfb8      	it	lt
 8018d34:	46e1      	movlt	r9, ip
 8018d36:	e757      	b.n	8018be8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8018d38:	4286      	cmp	r6, r0
 8018d3a:	bfa8      	it	ge
 8018d3c:	4606      	movge	r6, r0
 8018d3e:	e753      	b.n	8018be8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8018d40:	eb0a 0007 	add.w	r0, sl, r7
 8018d44:	4427      	add	r7, r4
 8018d46:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	; 0xb2
 8018d4a:	f1bb 0f13 	cmp.w	fp, #19
 8018d4e:	bfdc      	itt	le
 8018d50:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	; 0xae
 8018d54:	445e      	addle	r6, fp
 8018d56:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8018d5a:	bfd8      	it	le
 8018d5c:	b236      	sxthle	r6, r6
 8018d5e:	f7f9 f864 	bl	8011e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8018d62:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018d66:	2800      	cmp	r0, #0
 8018d68:	f47f af1a 	bne.w	8018ba0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 8018d6c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8018d70:	fa1f fb8b 	uxth.w	fp, fp
 8018d74:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018d78:	1ab6      	subs	r6, r6, r2
 8018d7a:	4829      	ldr	r0, [pc, #164]	; (8018e20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 8018d7c:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8018d80:	2e14      	cmp	r6, #20
 8018d82:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8018d86:	6800      	ldr	r0, [r0, #0]
 8018d88:	bfa8      	it	ge
 8018d8a:	2614      	movge	r6, #20
 8018d8c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8018d90:	f8ad 201e 	strh.w	r2, [sp, #30]
 8018d94:	b289      	uxth	r1, r1
 8018d96:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018d9a:	b2b6      	uxth	r6, r6
 8018d9c:	f8d0 c000 	ldr.w	ip, [r0]
 8018da0:	b292      	uxth	r2, r2
 8018da2:	455e      	cmp	r6, fp
 8018da4:	bf94      	ite	ls
 8018da6:	9600      	strls	r6, [sp, #0]
 8018da8:	f8cd b000 	strhi.w	fp, [sp]
 8018dac:	b29b      	uxth	r3, r3
 8018dae:	f8dc 6090 	ldr.w	r6, [ip, #144]	; 0x90
 8018db2:	47b0      	blx	r6
 8018db4:	6823      	ldr	r3, [r4, #0]
 8018db6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018dba:	a907      	add	r1, sp, #28
 8018dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018dbe:	4620      	mov	r0, r4
 8018dc0:	4798      	blx	r3
 8018dc2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8018dc6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8018dca:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8018dce:	1a5b      	subs	r3, r3, r1
 8018dd0:	440a      	add	r2, r1
 8018dd2:	b21b      	sxth	r3, r3
 8018dd4:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 8018dd8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	f47f aeda 	bne.w	8018b96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8018de2:	fa1f f189 	uxth.w	r1, r9
 8018de6:	4650      	mov	r0, sl
 8018de8:	f7ff f9e8 	bl	80181bc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018dec:	e6d3      	b.n	8018b96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8018dee:	882e      	ldrh	r6, [r5, #0]
 8018df0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8018df4:	42b3      	cmp	r3, r6
 8018df6:	f67f ae98 	bls.w	8018b2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8018dfa:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 8018dfe:	ab07      	add	r3, sp, #28
 8018e00:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8018e04:	6851      	ldr	r1, [r2, #4]
 8018e06:	c303      	stmia	r3!, {r0, r1}
 8018e08:	a807      	add	r0, sp, #28
 8018e0a:	f7f9 f80e 	bl	8011e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8018e0e:	b920      	cbnz	r0, 8018e1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 8018e10:	6823      	ldr	r3, [r4, #0]
 8018e12:	a907      	add	r1, sp, #28
 8018e14:	4620      	mov	r0, r4
 8018e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018e18:	4798      	blx	r3
 8018e1a:	3601      	adds	r6, #1
 8018e1c:	b2b6      	uxth	r6, r6
 8018e1e:	e7e7      	b.n	8018df0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8018e20:	20027ca8 	.word	0x20027ca8

08018e24 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8018e24:	4b03      	ldr	r3, [pc, #12]	; (8018e34 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8018e26:	2200      	movs	r2, #0
 8018e28:	801a      	strh	r2, [r3, #0]
 8018e2a:	805a      	strh	r2, [r3, #2]
 8018e2c:	809a      	strh	r2, [r3, #4]
 8018e2e:	80da      	strh	r2, [r3, #6]
 8018e30:	4770      	bx	lr
 8018e32:	bf00      	nop
 8018e34:	20027cf4 	.word	0x20027cf4

08018e38 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8018e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e3c:	b09d      	sub	sp, #116	; 0x74
 8018e3e:	4606      	mov	r6, r0
 8018e40:	4614      	mov	r4, r2
 8018e42:	468a      	mov	sl, r1
 8018e44:	a803      	add	r0, sp, #12
 8018e46:	461d      	mov	r5, r3
 8018e48:	f000 fecc 	bl	8019be4 <_ZN8touchgfx12TextProviderC1Ev>
 8018e4c:	6833      	ldr	r3, [r6, #0]
 8018e4e:	4630      	mov	r0, r6
 8018e50:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8018e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018e56:	4798      	blx	r3
 8018e58:	6833      	ldr	r3, [r6, #0]
 8018e5a:	4607      	mov	r7, r0
 8018e5c:	4630      	mov	r0, r6
 8018e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e60:	4798      	blx	r3
 8018e62:	462a      	mov	r2, r5
 8018e64:	2500      	movs	r5, #0
 8018e66:	4621      	mov	r1, r4
 8018e68:	9000      	str	r0, [sp, #0]
 8018e6a:	463b      	mov	r3, r7
 8018e6c:	462c      	mov	r4, r5
 8018e6e:	46a9      	mov	r9, r5
 8018e70:	46a8      	mov	r8, r5
 8018e72:	a803      	add	r0, sp, #12
 8018e74:	f000 ff11 	bl	8019c9a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018e78:	2300      	movs	r3, #0
 8018e7a:	9302      	str	r3, [sp, #8]
 8018e7c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018e80:	429c      	cmp	r4, r3
 8018e82:	d002      	beq.n	8018e8a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8018e84:	455c      	cmp	r4, fp
 8018e86:	bf18      	it	ne
 8018e88:	4625      	movne	r5, r4
 8018e8a:	ab02      	add	r3, sp, #8
 8018e8c:	4632      	mov	r2, r6
 8018e8e:	4651      	mov	r1, sl
 8018e90:	a803      	add	r0, sp, #12
 8018e92:	f001 fa07 	bl	801a2a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018e96:	4604      	mov	r4, r0
 8018e98:	b108      	cbz	r0, 8018e9e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8018e9a:	280a      	cmp	r0, #10
 8018e9c:	d10a      	bne.n	8018eb4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8018e9e:	45c1      	cmp	r9, r8
 8018ea0:	bf38      	it	cc
 8018ea2:	46c1      	movcc	r9, r8
 8018ea4:	f04f 0800 	mov.w	r8, #0
 8018ea8:	2c00      	cmp	r4, #0
 8018eaa:	d1e5      	bne.n	8018e78 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018eac:	4648      	mov	r0, r9
 8018eae:	b01d      	add	sp, #116	; 0x74
 8018eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018eb4:	9a02      	ldr	r2, [sp, #8]
 8018eb6:	2a00      	cmp	r2, #0
 8018eb8:	d0de      	beq.n	8018e78 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018eba:	7b57      	ldrb	r7, [r2, #13]
 8018ebc:	4629      	mov	r1, r5
 8018ebe:	6833      	ldr	r3, [r6, #0]
 8018ec0:	007f      	lsls	r7, r7, #1
 8018ec2:	8894      	ldrh	r4, [r2, #4]
 8018ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ec6:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8018eca:	7a97      	ldrb	r7, [r2, #10]
 8018ecc:	4307      	orrs	r7, r0
 8018ece:	4630      	mov	r0, r6
 8018ed0:	4798      	blx	r3
 8018ed2:	4438      	add	r0, r7
 8018ed4:	4480      	add	r8, r0
 8018ed6:	fa1f f888 	uxth.w	r8, r8
 8018eda:	e7e5      	b.n	8018ea8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08018edc <_ZNK8touchgfx4Font12getCharWidthEt>:
 8018edc:	b508      	push	{r3, lr}
 8018ede:	6803      	ldr	r3, [r0, #0]
 8018ee0:	68db      	ldr	r3, [r3, #12]
 8018ee2:	4798      	blx	r3
 8018ee4:	b128      	cbz	r0, 8018ef2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8018ee6:	7b43      	ldrb	r3, [r0, #13]
 8018ee8:	7a80      	ldrb	r0, [r0, #10]
 8018eea:	005b      	lsls	r3, r3, #1
 8018eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018ef0:	4318      	orrs	r0, r3
 8018ef2:	bd08      	pop	{r3, pc}

08018ef4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8018ef4:	b40e      	push	{r1, r2, r3}
 8018ef6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ef8:	b09e      	sub	sp, #120	; 0x78
 8018efa:	4605      	mov	r5, r0
 8018efc:	ab23      	add	r3, sp, #140	; 0x8c
 8018efe:	a805      	add	r0, sp, #20
 8018f00:	f853 4b04 	ldr.w	r4, [r3], #4
 8018f04:	9303      	str	r3, [sp, #12]
 8018f06:	f000 fe6d 	bl	8019be4 <_ZN8touchgfx12TextProviderC1Ev>
 8018f0a:	682b      	ldr	r3, [r5, #0]
 8018f0c:	4628      	mov	r0, r5
 8018f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018f10:	4798      	blx	r3
 8018f12:	682b      	ldr	r3, [r5, #0]
 8018f14:	4606      	mov	r6, r0
 8018f16:	4628      	mov	r0, r5
 8018f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f1a:	4798      	blx	r3
 8018f1c:	4633      	mov	r3, r6
 8018f1e:	4621      	mov	r1, r4
 8018f20:	ae1e      	add	r6, sp, #120	; 0x78
 8018f22:	2400      	movs	r4, #0
 8018f24:	9000      	str	r0, [sp, #0]
 8018f26:	9a03      	ldr	r2, [sp, #12]
 8018f28:	a805      	add	r0, sp, #20
 8018f2a:	f000 feb6 	bl	8019c9a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018f2e:	f846 4d68 	str.w	r4, [r6, #-104]!
 8018f32:	462a      	mov	r2, r5
 8018f34:	4633      	mov	r3, r6
 8018f36:	4621      	mov	r1, r4
 8018f38:	a805      	add	r0, sp, #20
 8018f3a:	f001 f9b3 	bl	801a2a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018f3e:	b300      	cbz	r0, 8018f82 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8018f40:	280a      	cmp	r0, #10
 8018f42:	d01a      	beq.n	8018f7a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018f44:	9f04      	ldr	r7, [sp, #16]
 8018f46:	b1c7      	cbz	r7, 8018f7a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018f48:	7b78      	ldrb	r0, [r7, #13]
 8018f4a:	7a3b      	ldrb	r3, [r7, #8]
 8018f4c:	00c1      	lsls	r1, r0, #3
 8018f4e:	88ea      	ldrh	r2, [r5, #6]
 8018f50:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018f54:	4319      	orrs	r1, r3
 8018f56:	0643      	lsls	r3, r0, #25
 8018f58:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8018f5c:	bf48      	it	mi
 8018f5e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8018f62:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8018f66:	bf48      	it	mi
 8018f68:	b219      	sxthmi	r1, r3
 8018f6a:	79fb      	ldrb	r3, [r7, #7]
 8018f6c:	4303      	orrs	r3, r0
 8018f6e:	4413      	add	r3, r2
 8018f70:	1a5b      	subs	r3, r3, r1
 8018f72:	b21b      	sxth	r3, r3
 8018f74:	429c      	cmp	r4, r3
 8018f76:	bfb8      	it	lt
 8018f78:	461c      	movlt	r4, r3
 8018f7a:	4633      	mov	r3, r6
 8018f7c:	462a      	mov	r2, r5
 8018f7e:	2100      	movs	r1, #0
 8018f80:	e7da      	b.n	8018f38 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8018f82:	b2a0      	uxth	r0, r4
 8018f84:	b01e      	add	sp, #120	; 0x78
 8018f86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018f8a:	b003      	add	sp, #12
 8018f8c:	4770      	bx	lr

08018f8e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8018f8e:	7a43      	ldrb	r3, [r0, #9]
 8018f90:	8880      	ldrh	r0, [r0, #4]
 8018f92:	4418      	add	r0, r3
 8018f94:	b280      	uxth	r0, r0
 8018f96:	4770      	bx	lr

08018f98 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8018f98:	6803      	ldr	r3, [r0, #0]
 8018f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f9c:	4718      	bx	r3

08018f9e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8018f9e:	b40e      	push	{r1, r2, r3}
 8018fa0:	b570      	push	{r4, r5, r6, lr}
 8018fa2:	b09d      	sub	sp, #116	; 0x74
 8018fa4:	4604      	mov	r4, r0
 8018fa6:	ab21      	add	r3, sp, #132	; 0x84
 8018fa8:	a803      	add	r0, sp, #12
 8018faa:	f853 5b04 	ldr.w	r5, [r3], #4
 8018fae:	9302      	str	r3, [sp, #8]
 8018fb0:	f000 fe18 	bl	8019be4 <_ZN8touchgfx12TextProviderC1Ev>
 8018fb4:	6823      	ldr	r3, [r4, #0]
 8018fb6:	4620      	mov	r0, r4
 8018fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018fba:	4798      	blx	r3
 8018fbc:	6823      	ldr	r3, [r4, #0]
 8018fbe:	4606      	mov	r6, r0
 8018fc0:	4620      	mov	r0, r4
 8018fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018fc4:	2401      	movs	r4, #1
 8018fc6:	4798      	blx	r3
 8018fc8:	4633      	mov	r3, r6
 8018fca:	9000      	str	r0, [sp, #0]
 8018fcc:	4629      	mov	r1, r5
 8018fce:	9a02      	ldr	r2, [sp, #8]
 8018fd0:	a803      	add	r0, sp, #12
 8018fd2:	f000 fe62 	bl	8019c9a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018fd6:	a803      	add	r0, sp, #12
 8018fd8:	f001 fa30 	bl	801a43c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018fdc:	b2a3      	uxth	r3, r4
 8018fde:	b138      	cbz	r0, 8018ff0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8018fe0:	280a      	cmp	r0, #10
 8018fe2:	a803      	add	r0, sp, #12
 8018fe4:	bf04      	itt	eq
 8018fe6:	3301      	addeq	r3, #1
 8018fe8:	b21c      	sxtheq	r4, r3
 8018fea:	f001 fa27 	bl	801a43c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018fee:	e7f5      	b.n	8018fdc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8018ff0:	4618      	mov	r0, r3
 8018ff2:	b01d      	add	sp, #116	; 0x74
 8018ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ff8:	b003      	add	sp, #12
 8018ffa:	4770      	bx	lr

08018ffc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8018ffc:	b40e      	push	{r1, r2, r3}
 8018ffe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019000:	b09e      	sub	sp, #120	; 0x78
 8019002:	4604      	mov	r4, r0
 8019004:	ab23      	add	r3, sp, #140	; 0x8c
 8019006:	a805      	add	r0, sp, #20
 8019008:	f853 5b04 	ldr.w	r5, [r3], #4
 801900c:	9303      	str	r3, [sp, #12]
 801900e:	f000 fde9 	bl	8019be4 <_ZN8touchgfx12TextProviderC1Ev>
 8019012:	6823      	ldr	r3, [r4, #0]
 8019014:	4620      	mov	r0, r4
 8019016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019018:	4798      	blx	r3
 801901a:	6823      	ldr	r3, [r4, #0]
 801901c:	4606      	mov	r6, r0
 801901e:	4620      	mov	r0, r4
 8019020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019022:	4798      	blx	r3
 8019024:	4633      	mov	r3, r6
 8019026:	4629      	mov	r1, r5
 8019028:	9000      	str	r0, [sp, #0]
 801902a:	9a03      	ldr	r2, [sp, #12]
 801902c:	a805      	add	r0, sp, #20
 801902e:	f000 fe34 	bl	8019c9a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019032:	ad1e      	add	r5, sp, #120	; 0x78
 8019034:	2100      	movs	r1, #0
 8019036:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801903a:	4622      	mov	r2, r4
 801903c:	a805      	add	r0, sp, #20
 801903e:	f845 1d68 	str.w	r1, [r5, #-104]!
 8019042:	462b      	mov	r3, r5
 8019044:	f001 f92e 	bl	801a2a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019048:	b1d8      	cbz	r0, 8019082 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801904a:	280a      	cmp	r0, #10
 801904c:	d012      	beq.n	8019074 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801904e:	9804      	ldr	r0, [sp, #16]
 8019050:	b180      	cbz	r0, 8019074 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8019052:	7b47      	ldrb	r7, [r0, #13]
 8019054:	88e2      	ldrh	r2, [r4, #6]
 8019056:	00fb      	lsls	r3, r7, #3
 8019058:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801905c:	7a03      	ldrb	r3, [r0, #8]
 801905e:	430b      	orrs	r3, r1
 8019060:	0679      	lsls	r1, r7, #25
 8019062:	bf44      	itt	mi
 8019064:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019068:	b21b      	sxthmi	r3, r3
 801906a:	1ad3      	subs	r3, r2, r3
 801906c:	b21b      	sxth	r3, r3
 801906e:	429e      	cmp	r6, r3
 8019070:	bfa8      	it	ge
 8019072:	461e      	movge	r6, r3
 8019074:	462b      	mov	r3, r5
 8019076:	4622      	mov	r2, r4
 8019078:	2100      	movs	r1, #0
 801907a:	a805      	add	r0, sp, #20
 801907c:	f001 f912 	bl	801a2a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019080:	e7e2      	b.n	8019048 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8019082:	4630      	mov	r0, r6
 8019084:	b01e      	add	sp, #120	; 0x78
 8019086:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801908a:	b003      	add	sp, #12
 801908c:	4770      	bx	lr

0801908e <_ZNK8touchgfx8Drawable10invalidateEv>:
 801908e:	b513      	push	{r0, r1, r4, lr}
 8019090:	6803      	ldr	r3, [r0, #0]
 8019092:	2400      	movs	r4, #0
 8019094:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019098:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801909c:	f8ad 1004 	strh.w	r1, [sp, #4]
 80190a0:	4669      	mov	r1, sp
 80190a2:	691b      	ldr	r3, [r3, #16]
 80190a4:	9400      	str	r4, [sp, #0]
 80190a6:	f8ad 2006 	strh.w	r2, [sp, #6]
 80190aa:	4798      	blx	r3
 80190ac:	b002      	add	sp, #8
 80190ae:	bd10      	pop	{r4, pc}

080190b0 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80190b0:	b538      	push	{r3, r4, r5, lr}
 80190b2:	680b      	ldr	r3, [r1, #0]
 80190b4:	460c      	mov	r4, r1
 80190b6:	4605      	mov	r5, r0
 80190b8:	68db      	ldr	r3, [r3, #12]
 80190ba:	4798      	blx	r3
 80190bc:	6823      	ldr	r3, [r4, #0]
 80190be:	4620      	mov	r0, r4
 80190c0:	4629      	mov	r1, r5
 80190c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190c4:	4798      	blx	r3
 80190c6:	4628      	mov	r0, r5
 80190c8:	bd38      	pop	{r3, r4, r5, pc}

080190ca <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80190ca:	b410      	push	{r4}
 80190cc:	880a      	ldrh	r2, [r1, #0]
 80190ce:	8884      	ldrh	r4, [r0, #4]
 80190d0:	4422      	add	r2, r4
 80190d2:	800a      	strh	r2, [r1, #0]
 80190d4:	884a      	ldrh	r2, [r1, #2]
 80190d6:	88c4      	ldrh	r4, [r0, #6]
 80190d8:	4422      	add	r2, r4
 80190da:	804a      	strh	r2, [r1, #2]
 80190dc:	6940      	ldr	r0, [r0, #20]
 80190de:	b120      	cbz	r0, 80190ea <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80190e0:	6803      	ldr	r3, [r0, #0]
 80190e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80190e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190e8:	4718      	bx	r3
 80190ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80190ee:	4770      	bx	lr

080190f0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80190f0:	b570      	push	{r4, r5, r6, lr}
 80190f2:	8882      	ldrh	r2, [r0, #4]
 80190f4:	460c      	mov	r4, r1
 80190f6:	880b      	ldrh	r3, [r1, #0]
 80190f8:	4605      	mov	r5, r0
 80190fa:	4413      	add	r3, r2
 80190fc:	800b      	strh	r3, [r1, #0]
 80190fe:	884b      	ldrh	r3, [r1, #2]
 8019100:	88c2      	ldrh	r2, [r0, #6]
 8019102:	4413      	add	r3, r2
 8019104:	804b      	strh	r3, [r1, #2]
 8019106:	1d01      	adds	r1, r0, #4
 8019108:	4620      	mov	r0, r4
 801910a:	f7f8 fe4b 	bl	8011da4 <_ZN8touchgfx4RectaNERKS0_>
 801910e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019112:	2b00      	cmp	r3, #0
 8019114:	dd0b      	ble.n	801912e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019116:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801911a:	2b00      	cmp	r3, #0
 801911c:	dd07      	ble.n	801912e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801911e:	6968      	ldr	r0, [r5, #20]
 8019120:	b128      	cbz	r0, 801912e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019122:	6803      	ldr	r3, [r0, #0]
 8019124:	4621      	mov	r1, r4
 8019126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801912c:	4718      	bx	r3
 801912e:	bd70      	pop	{r4, r5, r6, pc}

08019130 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019130:	b570      	push	{r4, r5, r6, lr}
 8019132:	8882      	ldrh	r2, [r0, #4]
 8019134:	460c      	mov	r4, r1
 8019136:	880b      	ldrh	r3, [r1, #0]
 8019138:	4605      	mov	r5, r0
 801913a:	4413      	add	r3, r2
 801913c:	800b      	strh	r3, [r1, #0]
 801913e:	884b      	ldrh	r3, [r1, #2]
 8019140:	88c2      	ldrh	r2, [r0, #6]
 8019142:	4413      	add	r3, r2
 8019144:	804b      	strh	r3, [r1, #2]
 8019146:	1d01      	adds	r1, r0, #4
 8019148:	4620      	mov	r0, r4
 801914a:	f7f8 fe2b 	bl	8011da4 <_ZN8touchgfx4RectaNERKS0_>
 801914e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019152:	2b00      	cmp	r3, #0
 8019154:	dd19      	ble.n	801918a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8019156:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801915a:	2b00      	cmp	r3, #0
 801915c:	dd15      	ble.n	801918a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801915e:	6968      	ldr	r0, [r5, #20]
 8019160:	b128      	cbz	r0, 801916e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8019162:	6803      	ldr	r3, [r0, #0]
 8019164:	4621      	mov	r1, r4
 8019166:	691b      	ldr	r3, [r3, #16]
 8019168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801916c:	4718      	bx	r3
 801916e:	4b07      	ldr	r3, [pc, #28]	; (801918c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8019170:	681b      	ldr	r3, [r3, #0]
 8019172:	3304      	adds	r3, #4
 8019174:	429d      	cmp	r5, r3
 8019176:	d108      	bne.n	801918a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8019178:	f7fe fe9e 	bl	8017eb8 <_ZN8touchgfx11Application11getInstanceEv>
 801917c:	6803      	ldr	r3, [r0, #0]
 801917e:	6821      	ldr	r1, [r4, #0]
 8019180:	6862      	ldr	r2, [r4, #4]
 8019182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019188:	4718      	bx	r3
 801918a:	bd70      	pop	{r4, r5, r6, pc}
 801918c:	20027cec 	.word	0x20027cec

08019190 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019190:	b570      	push	{r4, r5, r6, lr}
 8019192:	4604      	mov	r4, r0
 8019194:	4616      	mov	r6, r2
 8019196:	460d      	mov	r5, r1
 8019198:	b901      	cbnz	r1, 801919c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801919a:	b192      	cbz	r2, 80191c2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801919c:	6823      	ldr	r3, [r4, #0]
 801919e:	4620      	mov	r0, r4
 80191a0:	699b      	ldr	r3, [r3, #24]
 80191a2:	4798      	blx	r3
 80191a4:	88e2      	ldrh	r2, [r4, #6]
 80191a6:	88a1      	ldrh	r1, [r4, #4]
 80191a8:	4620      	mov	r0, r4
 80191aa:	4432      	add	r2, r6
 80191ac:	4429      	add	r1, r5
 80191ae:	b212      	sxth	r2, r2
 80191b0:	b209      	sxth	r1, r1
 80191b2:	f7ec fecb 	bl	8005f4c <_ZN8touchgfx8Drawable5setXYEss>
 80191b6:	6823      	ldr	r3, [r4, #0]
 80191b8:	4620      	mov	r0, r4
 80191ba:	699b      	ldr	r3, [r3, #24]
 80191bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80191c0:	4718      	bx	r3
 80191c2:	bd70      	pop	{r4, r5, r6, pc}

080191c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80191c4:	b510      	push	{r4, lr}
 80191c6:	2300      	movs	r3, #0
 80191c8:	4604      	mov	r4, r0
 80191ca:	4608      	mov	r0, r1
 80191cc:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80191d0:	8023      	strh	r3, [r4, #0]
 80191d2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80191d6:	8063      	strh	r3, [r4, #2]
 80191d8:	6803      	ldr	r3, [r0, #0]
 80191da:	80a1      	strh	r1, [r4, #4]
 80191dc:	4621      	mov	r1, r4
 80191de:	80e2      	strh	r2, [r4, #6]
 80191e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191e2:	4798      	blx	r3
 80191e4:	4620      	mov	r0, r4
 80191e6:	bd10      	pop	{r4, pc}

080191e8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 80191e8:	b530      	push	{r4, r5, lr}
 80191ea:	8083      	strh	r3, [r0, #4]
 80191ec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80191f0:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80191f4:	80c3      	strh	r3, [r0, #6]
 80191f6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80191fa:	6141      	str	r1, [r0, #20]
 80191fc:	7203      	strb	r3, [r0, #8]
 80191fe:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8019202:	8302      	strh	r2, [r0, #24]
 8019204:	7243      	strb	r3, [r0, #9]
 8019206:	7a83      	ldrb	r3, [r0, #10]
 8019208:	f365 0306 	bfi	r3, r5, #0, #7
 801920c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8019210:	f365 13c7 	bfi	r3, r5, #7, #1
 8019214:	7283      	strb	r3, [r0, #10]
 8019216:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801921a:	72c3      	strb	r3, [r0, #11]
 801921c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8019220:	7303      	strb	r3, [r0, #12]
 8019222:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8019226:	81c3      	strh	r3, [r0, #14]
 8019228:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801922c:	8203      	strh	r3, [r0, #16]
 801922e:	4b01      	ldr	r3, [pc, #4]	; (8019234 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8019230:	6003      	str	r3, [r0, #0]
 8019232:	bd30      	pop	{r4, r5, pc}
 8019234:	08030dec 	.word	0x08030dec

08019238 <_ZNK8touchgfx9ConstFont4findEt>:
 8019238:	b5f0      	push	{r4, r5, r6, r7, lr}
 801923a:	6944      	ldr	r4, [r0, #20]
 801923c:	b3bc      	cbz	r4, 80192ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801923e:	88a3      	ldrh	r3, [r4, #4]
 8019240:	8b02      	ldrh	r2, [r0, #24]
 8019242:	1acb      	subs	r3, r1, r3
 8019244:	f102 32ff 	add.w	r2, r2, #4294967295
 8019248:	d431      	bmi.n	80192ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801924a:	4293      	cmp	r3, r2
 801924c:	dd0c      	ble.n	8019268 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801924e:	230e      	movs	r3, #14
 8019250:	fb03 4302 	mla	r3, r3, r2, r4
 8019254:	889b      	ldrh	r3, [r3, #4]
 8019256:	1a5b      	subs	r3, r3, r1
 8019258:	1ad3      	subs	r3, r2, r3
 801925a:	429a      	cmp	r2, r3
 801925c:	db27      	blt.n	80192ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801925e:	2b00      	cmp	r3, #0
 8019260:	bfbc      	itt	lt
 8019262:	2302      	movlt	r3, #2
 8019264:	fb92 f3f3 	sdivlt	r3, r2, r3
 8019268:	2500      	movs	r5, #0
 801926a:	260e      	movs	r6, #14
 801926c:	4295      	cmp	r5, r2
 801926e:	dc1e      	bgt.n	80192ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019270:	fb06 4003 	mla	r0, r6, r3, r4
 8019274:	8887      	ldrh	r7, [r0, #4]
 8019276:	42b9      	cmp	r1, r7
 8019278:	d01a      	beq.n	80192b0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801927a:	d20d      	bcs.n	8019298 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801927c:	1e5a      	subs	r2, r3, #1
 801927e:	4295      	cmp	r5, r2
 8019280:	dc15      	bgt.n	80192ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019282:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8019286:	1a5b      	subs	r3, r3, r1
 8019288:	1ad3      	subs	r3, r2, r3
 801928a:	429a      	cmp	r2, r3
 801928c:	db0f      	blt.n	80192ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801928e:	429d      	cmp	r5, r3
 8019290:	ddec      	ble.n	801926c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019292:	1953      	adds	r3, r2, r5
 8019294:	105b      	asrs	r3, r3, #1
 8019296:	e7e9      	b.n	801926c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019298:	1c5d      	adds	r5, r3, #1
 801929a:	42aa      	cmp	r2, r5
 801929c:	db07      	blt.n	80192ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801929e:	8a43      	ldrh	r3, [r0, #18]
 80192a0:	1acb      	subs	r3, r1, r3
 80192a2:	442b      	add	r3, r5
 80192a4:	429d      	cmp	r5, r3
 80192a6:	dc02      	bgt.n	80192ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80192a8:	429a      	cmp	r2, r3
 80192aa:	dadf      	bge.n	801926c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80192ac:	e7f1      	b.n	8019292 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80192ae:	2000      	movs	r0, #0
 80192b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080192b2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80192b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192b4:	4604      	mov	r4, r0
 80192b6:	4617      	mov	r7, r2
 80192b8:	461e      	mov	r6, r3
 80192ba:	b911      	cbnz	r1, 80192c2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80192bc:	2500      	movs	r5, #0
 80192be:	4628      	mov	r0, r5
 80192c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80192c2:	290a      	cmp	r1, #10
 80192c4:	d0fa      	beq.n	80192bc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80192c6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80192ca:	4291      	cmp	r1, r2
 80192cc:	d0f6      	beq.n	80192bc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80192ce:	f242 020b 	movw	r2, #8203	; 0x200b
 80192d2:	4291      	cmp	r1, r2
 80192d4:	d0f2      	beq.n	80192bc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80192d6:	f7ff ffaf 	bl	8019238 <_ZNK8touchgfx9ConstFont4findEt>
 80192da:	4605      	mov	r5, r0
 80192dc:	b950      	cbnz	r0, 80192f4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80192de:	6823      	ldr	r3, [r4, #0]
 80192e0:	4620      	mov	r0, r4
 80192e2:	691b      	ldr	r3, [r3, #16]
 80192e4:	4798      	blx	r3
 80192e6:	4601      	mov	r1, r0
 80192e8:	4620      	mov	r0, r4
 80192ea:	f7ff ffa5 	bl	8019238 <_ZNK8touchgfx9ConstFont4findEt>
 80192ee:	4605      	mov	r5, r0
 80192f0:	2800      	cmp	r0, #0
 80192f2:	d0e3      	beq.n	80192bc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80192f4:	6823      	ldr	r3, [r4, #0]
 80192f6:	4629      	mov	r1, r5
 80192f8:	4620      	mov	r0, r4
 80192fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80192fc:	4798      	blx	r3
 80192fe:	6038      	str	r0, [r7, #0]
 8019300:	6823      	ldr	r3, [r4, #0]
 8019302:	4620      	mov	r0, r4
 8019304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019306:	4798      	blx	r3
 8019308:	7030      	strb	r0, [r6, #0]
 801930a:	e7d8      	b.n	80192be <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801930c <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801930c:	b538      	push	{r3, r4, r5, lr}
 801930e:	4605      	mov	r5, r0
 8019310:	f002 f964 	bl	801b5dc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019314:	4604      	mov	r4, r0
 8019316:	4628      	mov	r0, r5
 8019318:	f002 f8a4 	bl	801b464 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801931c:	2800      	cmp	r0, #0
 801931e:	bf14      	ite	ne
 8019320:	2002      	movne	r0, #2
 8019322:	2000      	moveq	r0, #0
 8019324:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8019328:	b280      	uxth	r0, r0
 801932a:	bd38      	pop	{r3, r4, r5, pc}

0801932c <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801932c:	b538      	push	{r3, r4, r5, lr}
 801932e:	4605      	mov	r5, r0
 8019330:	f002 f954 	bl	801b5dc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019334:	4604      	mov	r4, r0
 8019336:	4628      	mov	r0, r5
 8019338:	f002 f894 	bl	801b464 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801933c:	2800      	cmp	r0, #0
 801933e:	bf14      	ite	ne
 8019340:	2002      	movne	r0, #2
 8019342:	2000      	moveq	r0, #0
 8019344:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8019348:	f040 0001 	orr.w	r0, r0, #1
 801934c:	b280      	uxth	r0, r0
 801934e:	bd38      	pop	{r3, r4, r5, pc}

08019350 <_ZN8touchgfx4clzuEm>:
 8019350:	4603      	mov	r3, r0
 8019352:	b1c8      	cbz	r0, 8019388 <_ZN8touchgfx4clzuEm+0x38>
 8019354:	0c02      	lsrs	r2, r0, #16
 8019356:	0412      	lsls	r2, r2, #16
 8019358:	b9a2      	cbnz	r2, 8019384 <_ZN8touchgfx4clzuEm+0x34>
 801935a:	0403      	lsls	r3, r0, #16
 801935c:	2010      	movs	r0, #16
 801935e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8019362:	bf04      	itt	eq
 8019364:	021b      	lsleq	r3, r3, #8
 8019366:	3008      	addeq	r0, #8
 8019368:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801936c:	bf04      	itt	eq
 801936e:	011b      	lsleq	r3, r3, #4
 8019370:	3004      	addeq	r0, #4
 8019372:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8019376:	bf04      	itt	eq
 8019378:	009b      	lsleq	r3, r3, #2
 801937a:	3002      	addeq	r0, #2
 801937c:	2b00      	cmp	r3, #0
 801937e:	db04      	blt.n	801938a <_ZN8touchgfx4clzuEm+0x3a>
 8019380:	3001      	adds	r0, #1
 8019382:	4770      	bx	lr
 8019384:	2000      	movs	r0, #0
 8019386:	e7ea      	b.n	801935e <_ZN8touchgfx4clzuEm+0xe>
 8019388:	2020      	movs	r0, #32
 801938a:	4770      	bx	lr

0801938c <_ZN8touchgfx7muldivuEmmmRm>:
 801938c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8019390:	460f      	mov	r7, r1
 8019392:	4615      	mov	r5, r2
 8019394:	461e      	mov	r6, r3
 8019396:	4601      	mov	r1, r0
 8019398:	b100      	cbz	r0, 801939c <_ZN8touchgfx7muldivuEmmmRm+0x10>
 801939a:	b927      	cbnz	r7, 80193a6 <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 801939c:	2000      	movs	r0, #0
 801939e:	6030      	str	r0, [r6, #0]
 80193a0:	b002      	add	sp, #8
 80193a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193a6:	f7ff ffd3 	bl	8019350 <_ZN8touchgfx4clzuEm>
 80193aa:	b980      	cbnz	r0, 80193ce <_ZN8touchgfx7muldivuEmmmRm+0x42>
 80193ac:	4638      	mov	r0, r7
 80193ae:	f7ff ffcf 	bl	8019350 <_ZN8touchgfx4clzuEm>
 80193b2:	2800      	cmp	r0, #0
 80193b4:	dd05      	ble.n	80193c2 <_ZN8touchgfx7muldivuEmmmRm+0x36>
 80193b6:	4633      	mov	r3, r6
 80193b8:	462a      	mov	r2, r5
 80193ba:	4638      	mov	r0, r7
 80193bc:	f7ff ffe6 	bl	801938c <_ZN8touchgfx7muldivuEmmmRm>
 80193c0:	e7ee      	b.n	80193a0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 80193c2:	f04f 33ff 	mov.w	r3, #4294967295
 80193c6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80193ca:	6033      	str	r3, [r6, #0]
 80193cc:	e7e8      	b.n	80193a0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 80193ce:	fa37 f800 	lsrs.w	r8, r7, r0
 80193d2:	fb07 f301 	mul.w	r3, r7, r1
 80193d6:	d105      	bne.n	80193e4 <_ZN8touchgfx7muldivuEmmmRm+0x58>
 80193d8:	fbb3 f0f5 	udiv	r0, r3, r5
 80193dc:	fb05 3510 	mls	r5, r5, r0, r3
 80193e0:	6035      	str	r5, [r6, #0]
 80193e2:	e7dd      	b.n	80193a0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 80193e4:	2301      	movs	r3, #1
 80193e6:	fa01 fa00 	lsl.w	sl, r1, r0
 80193ea:	462a      	mov	r2, r5
 80193ec:	fa03 f000 	lsl.w	r0, r3, r0
 80193f0:	4633      	mov	r3, r6
 80193f2:	fbba f9f5 	udiv	r9, sl, r5
 80193f6:	3801      	subs	r0, #1
 80193f8:	fb08 f409 	mul.w	r4, r8, r9
 80193fc:	4038      	ands	r0, r7
 80193fe:	f7ff ffc5 	bl	801938c <_ZN8touchgfx7muldivuEmmmRm>
 8019402:	462a      	mov	r2, r5
 8019404:	4607      	mov	r7, r0
 8019406:	ab01      	add	r3, sp, #4
 8019408:	fb05 a119 	mls	r1, r5, r9, sl
 801940c:	4640      	mov	r0, r8
 801940e:	f7ff ffbd 	bl	801938c <_ZN8touchgfx7muldivuEmmmRm>
 8019412:	9b01      	ldr	r3, [sp, #4]
 8019414:	6832      	ldr	r2, [r6, #0]
 8019416:	441a      	add	r2, r3
 8019418:	fbb2 f3f5 	udiv	r3, r2, r5
 801941c:	441c      	add	r4, r3
 801941e:	fb05 2513 	mls	r5, r5, r3, r2
 8019422:	443c      	add	r4, r7
 8019424:	4420      	add	r0, r4
 8019426:	e7db      	b.n	80193e0 <_ZN8touchgfx7muldivuEmmmRm+0x54>

08019428 <_ZN8touchgfx6muldivElllRl>:
 8019428:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801942a:	2800      	cmp	r0, #0
 801942c:	461e      	mov	r6, r3
 801942e:	bfba      	itte	lt
 8019430:	4240      	neglt	r0, r0
 8019432:	f04f 34ff 	movlt.w	r4, #4294967295
 8019436:	2401      	movge	r4, #1
 8019438:	2900      	cmp	r1, #0
 801943a:	bfbc      	itt	lt
 801943c:	4249      	neglt	r1, r1
 801943e:	4264      	neglt	r4, r4
 8019440:	2a00      	cmp	r2, #0
 8019442:	bfb6      	itet	lt
 8019444:	4265      	neglt	r5, r4
 8019446:	4625      	movge	r5, r4
 8019448:	4252      	neglt	r2, r2
 801944a:	4288      	cmp	r0, r1
 801944c:	bfc2      	ittt	gt
 801944e:	4603      	movgt	r3, r0
 8019450:	4608      	movgt	r0, r1
 8019452:	4619      	movgt	r1, r3
 8019454:	ab01      	add	r3, sp, #4
 8019456:	f7ff ff99 	bl	801938c <_ZN8touchgfx7muldivuEmmmRm>
 801945a:	9b01      	ldr	r3, [sp, #4]
 801945c:	4368      	muls	r0, r5
 801945e:	435c      	muls	r4, r3
 8019460:	6034      	str	r4, [r6, #0]
 8019462:	b002      	add	sp, #8
 8019464:	bd70      	pop	{r4, r5, r6, pc}

08019466 <_ZN8touchgfx6muldivElll>:
 8019466:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019468:	4606      	mov	r6, r0
 801946a:	ab01      	add	r3, sp, #4
 801946c:	460d      	mov	r5, r1
 801946e:	4614      	mov	r4, r2
 8019470:	f7ff ffda 	bl	8019428 <_ZN8touchgfx6muldivElllRl>
 8019474:	2e00      	cmp	r6, #0
 8019476:	db20      	blt.n	80194ba <_ZN8touchgfx6muldivElll+0x54>
 8019478:	bf14      	ite	ne
 801947a:	2301      	movne	r3, #1
 801947c:	2300      	moveq	r3, #0
 801947e:	2d00      	cmp	r5, #0
 8019480:	db1e      	blt.n	80194c0 <_ZN8touchgfx6muldivElll+0x5a>
 8019482:	bf14      	ite	ne
 8019484:	2201      	movne	r2, #1
 8019486:	2200      	moveq	r2, #0
 8019488:	2c00      	cmp	r4, #0
 801948a:	fb03 f202 	mul.w	r2, r3, r2
 801948e:	db1a      	blt.n	80194c6 <_ZN8touchgfx6muldivElll+0x60>
 8019490:	bf14      	ite	ne
 8019492:	2301      	movne	r3, #1
 8019494:	2300      	moveq	r3, #0
 8019496:	4353      	muls	r3, r2
 8019498:	2b01      	cmp	r3, #1
 801949a:	d117      	bne.n	80194cc <_ZN8touchgfx6muldivElll+0x66>
 801949c:	2c00      	cmp	r4, #0
 801949e:	9b01      	ldr	r3, [sp, #4]
 80194a0:	bfb8      	it	lt
 80194a2:	4264      	neglt	r4, r4
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	f104 0401 	add.w	r4, r4, #1
 80194aa:	bfb8      	it	lt
 80194ac:	425b      	neglt	r3, r3
 80194ae:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 80194b2:	db00      	blt.n	80194b6 <_ZN8touchgfx6muldivElll+0x50>
 80194b4:	3001      	adds	r0, #1
 80194b6:	b002      	add	sp, #8
 80194b8:	bd70      	pop	{r4, r5, r6, pc}
 80194ba:	f04f 33ff 	mov.w	r3, #4294967295
 80194be:	e7de      	b.n	801947e <_ZN8touchgfx6muldivElll+0x18>
 80194c0:	f04f 32ff 	mov.w	r2, #4294967295
 80194c4:	e7e0      	b.n	8019488 <_ZN8touchgfx6muldivElll+0x22>
 80194c6:	f04f 33ff 	mov.w	r3, #4294967295
 80194ca:	e7e4      	b.n	8019496 <_ZN8touchgfx6muldivElll+0x30>
 80194cc:	3301      	adds	r3, #1
 80194ce:	d1f2      	bne.n	80194b6 <_ZN8touchgfx6muldivElll+0x50>
 80194d0:	9b01      	ldr	r3, [sp, #4]
 80194d2:	2c00      	cmp	r4, #0
 80194d4:	bfb8      	it	lt
 80194d6:	4264      	neglt	r4, r4
 80194d8:	2b00      	cmp	r3, #0
 80194da:	bfb8      	it	lt
 80194dc:	425b      	neglt	r3, r3
 80194de:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 80194e2:	bfc8      	it	gt
 80194e4:	f100 30ff 	addgt.w	r0, r0, #4294967295
 80194e8:	e7e5      	b.n	80194b6 <_ZN8touchgfx6muldivElll+0x50>

080194ea <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80194ea:	2000      	movs	r0, #0
 80194ec:	4770      	bx	lr

080194ee <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80194ee:	2001      	movs	r0, #1
 80194f0:	4770      	bx	lr

080194f2 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80194f2:	2002      	movs	r0, #2
 80194f4:	4770      	bx	lr

080194f6 <_ZN8touchgfx6ScreenD1Ev>:
 80194f6:	4770      	bx	lr

080194f8 <_ZN8touchgfx12GestureEventD1Ev>:
 80194f8:	4770      	bx	lr

080194fa <_ZN8touchgfx9DragEventD1Ev>:
 80194fa:	4770      	bx	lr

080194fc <_ZN8touchgfx10ClickEventD1Ev>:
 80194fc:	4770      	bx	lr

080194fe <_ZN8touchgfx10ClickEventD0Ev>:
 80194fe:	b510      	push	{r4, lr}
 8019500:	4604      	mov	r4, r0
 8019502:	210c      	movs	r1, #12
 8019504:	f011 fa5d 	bl	802a9c2 <_ZdlPvj>
 8019508:	4620      	mov	r0, r4
 801950a:	bd10      	pop	{r4, pc}

0801950c <_ZN8touchgfx9DragEventD0Ev>:
 801950c:	b510      	push	{r4, lr}
 801950e:	4604      	mov	r4, r0
 8019510:	2110      	movs	r1, #16
 8019512:	f011 fa56 	bl	802a9c2 <_ZdlPvj>
 8019516:	4620      	mov	r0, r4
 8019518:	bd10      	pop	{r4, pc}

0801951a <_ZN8touchgfx12GestureEventD0Ev>:
 801951a:	b510      	push	{r4, lr}
 801951c:	4604      	mov	r4, r0
 801951e:	210c      	movs	r1, #12
 8019520:	f011 fa4f 	bl	802a9c2 <_ZdlPvj>
 8019524:	4620      	mov	r0, r4
 8019526:	bd10      	pop	{r4, pc}

08019528 <_ZN8touchgfx6ScreenD0Ev>:
 8019528:	b510      	push	{r4, lr}
 801952a:	4604      	mov	r4, r0
 801952c:	213c      	movs	r1, #60	; 0x3c
 801952e:	f011 fa48 	bl	802a9c2 <_ZdlPvj>
 8019532:	4620      	mov	r0, r4
 8019534:	bd10      	pop	{r4, pc}
	...

08019538 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019538:	b530      	push	{r4, r5, lr}
 801953a:	460d      	mov	r5, r1
 801953c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801953e:	b087      	sub	sp, #28
 8019540:	4604      	mov	r4, r0
 8019542:	b301      	cbz	r1, 8019586 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8019544:	a801      	add	r0, sp, #4
 8019546:	f7ff fe3d 	bl	80191c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801954a:	892a      	ldrh	r2, [r5, #8]
 801954c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019550:	7928      	ldrb	r0, [r5, #4]
 8019552:	1ad2      	subs	r2, r2, r3
 8019554:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019556:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801955a:	441a      	add	r2, r3
 801955c:	896b      	ldrh	r3, [r5, #10]
 801955e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8019562:	f88d 0010 	strb.w	r0, [sp, #16]
 8019566:	1b5b      	subs	r3, r3, r5
 8019568:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801956a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801956c:	442b      	add	r3, r5
 801956e:	4d07      	ldr	r5, [pc, #28]	; (801958c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8019570:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019574:	a903      	add	r1, sp, #12
 8019576:	9503      	str	r5, [sp, #12]
 8019578:	f8ad 2014 	strh.w	r2, [sp, #20]
 801957c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019580:	6803      	ldr	r3, [r0, #0]
 8019582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019584:	4798      	blx	r3
 8019586:	b007      	add	sp, #28
 8019588:	bd30      	pop	{r4, r5, pc}
 801958a:	bf00      	nop
 801958c:	08030e74 	.word	0x08030e74

08019590 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8019590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019594:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8019596:	b08a      	sub	sp, #40	; 0x28
 8019598:	4604      	mov	r4, r0
 801959a:	460d      	mov	r5, r1
 801959c:	b113      	cbz	r3, 80195a4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801959e:	790b      	ldrb	r3, [r1, #4]
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d044      	beq.n	801962e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80195a4:	f104 0804 	add.w	r8, r4, #4
 80195a8:	a803      	add	r0, sp, #12
 80195aa:	4641      	mov	r1, r8
 80195ac:	f7ff fe0a 	bl	80191c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80195b0:	792b      	ldrb	r3, [r5, #4]
 80195b2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80195b6:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80195ba:	b983      	cbnz	r3, 80195de <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80195bc:	f104 0336 	add.w	r3, r4, #54	; 0x36
 80195c0:	892a      	ldrh	r2, [r5, #8]
 80195c2:	88e9      	ldrh	r1, [r5, #6]
 80195c4:	4640      	mov	r0, r8
 80195c6:	1b92      	subs	r2, r2, r6
 80195c8:	9301      	str	r3, [sp, #4]
 80195ca:	1bc9      	subs	r1, r1, r7
 80195cc:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80195d0:	b212      	sxth	r2, r2
 80195d2:	9300      	str	r3, [sp, #0]
 80195d4:	b209      	sxth	r1, r1
 80195d6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80195da:	f7f8 fb01 	bl	8011be0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80195de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80195e0:	b329      	cbz	r1, 801962e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80195e2:	a805      	add	r0, sp, #20
 80195e4:	f7ff fdee 	bl	80191c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80195e8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80195ec:	792b      	ldrb	r3, [r5, #4]
 80195ee:	a907      	add	r1, sp, #28
 80195f0:	1abf      	subs	r7, r7, r2
 80195f2:	88ea      	ldrh	r2, [r5, #6]
 80195f4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80195f6:	4417      	add	r7, r2
 80195f8:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80195fa:	f88d 3020 	strb.w	r3, [sp, #32]
 80195fe:	4417      	add	r7, r2
 8019600:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019604:	1ab6      	subs	r6, r6, r2
 8019606:	892a      	ldrh	r2, [r5, #8]
 8019608:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801960c:	4416      	add	r6, r2
 801960e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019610:	4416      	add	r6, r2
 8019612:	4a08      	ldr	r2, [pc, #32]	; (8019634 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8019614:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8019618:	2600      	movs	r6, #0
 801961a:	9207      	str	r2, [sp, #28]
 801961c:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8019620:	6803      	ldr	r3, [r0, #0]
 8019622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019624:	4798      	blx	r3
 8019626:	792b      	ldrb	r3, [r5, #4]
 8019628:	b10b      	cbz	r3, 801962e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801962a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801962e:	b00a      	add	sp, #40	; 0x28
 8019630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019634:	08030e4c 	.word	0x08030e4c

08019638 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8019638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801963c:	460c      	mov	r4, r1
 801963e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019640:	b088      	sub	sp, #32
 8019642:	4605      	mov	r5, r0
 8019644:	2900      	cmp	r1, #0
 8019646:	d06d      	beq.n	8019724 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8019648:	4668      	mov	r0, sp
 801964a:	f7ff fdbb 	bl	80191c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801964e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8019650:	88e3      	ldrh	r3, [r4, #6]
 8019652:	f9bd 8000 	ldrsh.w	r8, [sp]
 8019656:	440b      	add	r3, r1
 8019658:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801965c:	b21b      	sxth	r3, r3
 801965e:	4543      	cmp	r3, r8
 8019660:	db31      	blt.n	80196c6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019662:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8019666:	44c4      	add	ip, r8
 8019668:	fa0f fc8c 	sxth.w	ip, ip
 801966c:	4563      	cmp	r3, ip
 801966e:	da2a      	bge.n	80196c6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019670:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8019672:	8926      	ldrh	r6, [r4, #8]
 8019674:	4416      	add	r6, r2
 8019676:	b236      	sxth	r6, r6
 8019678:	42be      	cmp	r6, r7
 801967a:	db24      	blt.n	80196c6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801967c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8019680:	4438      	add	r0, r7
 8019682:	b200      	sxth	r0, r0
 8019684:	4286      	cmp	r6, r0
 8019686:	da1e      	bge.n	80196c6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019688:	8963      	ldrh	r3, [r4, #10]
 801968a:	4419      	add	r1, r3
 801968c:	b209      	sxth	r1, r1
 801968e:	4541      	cmp	r1, r8
 8019690:	db08      	blt.n	80196a4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019692:	4561      	cmp	r1, ip
 8019694:	da06      	bge.n	80196a4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019696:	89a3      	ldrh	r3, [r4, #12]
 8019698:	441a      	add	r2, r3
 801969a:	b212      	sxth	r2, r2
 801969c:	42ba      	cmp	r2, r7
 801969e:	db01      	blt.n	80196a4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80196a0:	4282      	cmp	r2, r0
 80196a2:	db10      	blt.n	80196c6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80196a4:	4b21      	ldr	r3, [pc, #132]	; (801972c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 80196a6:	a904      	add	r1, sp, #16
 80196a8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80196aa:	9304      	str	r3, [sp, #16]
 80196ac:	2302      	movs	r3, #2
 80196ae:	f88d 3014 	strb.w	r3, [sp, #20]
 80196b2:	2300      	movs	r3, #0
 80196b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80196b8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80196bc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80196c0:	6803      	ldr	r3, [r0, #0]
 80196c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80196c4:	4798      	blx	r3
 80196c6:	1d29      	adds	r1, r5, #4
 80196c8:	a802      	add	r0, sp, #8
 80196ca:	f7ff fd7b 	bl	80191c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80196ce:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80196d2:	88e0      	ldrh	r0, [r4, #6]
 80196d4:	eba3 0808 	sub.w	r8, r3, r8
 80196d8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80196dc:	7921      	ldrb	r1, [r4, #4]
 80196de:	fa1f f888 	uxth.w	r8, r8
 80196e2:	1bdf      	subs	r7, r3, r7
 80196e4:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80196e8:	b2bb      	uxth	r3, r7
 80196ea:	4440      	add	r0, r8
 80196ec:	8922      	ldrh	r2, [r4, #8]
 80196ee:	8967      	ldrh	r7, [r4, #10]
 80196f0:	4460      	add	r0, ip
 80196f2:	89a4      	ldrh	r4, [r4, #12]
 80196f4:	441a      	add	r2, r3
 80196f6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80196f8:	44b8      	add	r8, r7
 80196fa:	4423      	add	r3, r4
 80196fc:	f8ad 0016 	strh.w	r0, [sp, #22]
 8019700:	4432      	add	r2, r6
 8019702:	44e0      	add	r8, ip
 8019704:	4433      	add	r3, r6
 8019706:	4c0a      	ldr	r4, [pc, #40]	; (8019730 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8019708:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801970a:	f88d 1014 	strb.w	r1, [sp, #20]
 801970e:	a904      	add	r1, sp, #16
 8019710:	9404      	str	r4, [sp, #16]
 8019712:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019716:	f8ad 801a 	strh.w	r8, [sp, #26]
 801971a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801971e:	6803      	ldr	r3, [r0, #0]
 8019720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019722:	4798      	blx	r3
 8019724:	b008      	add	sp, #32
 8019726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801972a:	bf00      	nop
 801972c:	08030e4c 	.word	0x08030e4c
 8019730:	08030e60 	.word	0x08030e60

08019734 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8019734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019736:	4604      	mov	r4, r0
 8019738:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801973c:	3201      	adds	r2, #1
 801973e:	d112      	bne.n	8019766 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8019740:	2500      	movs	r5, #0
 8019742:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019746:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801974a:	6803      	ldr	r3, [r0, #0]
 801974c:	9500      	str	r5, [sp, #0]
 801974e:	466d      	mov	r5, sp
 8019750:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019754:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019758:	4629      	mov	r1, r5
 801975a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801975c:	4798      	blx	r3
 801975e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019762:	e884 0003 	stmia.w	r4, {r0, r1}
 8019766:	4620      	mov	r0, r4
 8019768:	b003      	add	sp, #12
 801976a:	bd30      	pop	{r4, r5, pc}

0801976c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801976c:	b513      	push	{r0, r1, r4, lr}
 801976e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8019772:	4604      	mov	r4, r0
 8019774:	3301      	adds	r3, #1
 8019776:	d109      	bne.n	801978c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8019778:	4601      	mov	r1, r0
 801977a:	4668      	mov	r0, sp
 801977c:	f7ff fd22 	bl	80191c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019780:	f8bd 3000 	ldrh.w	r3, [sp]
 8019784:	8423      	strh	r3, [r4, #32]
 8019786:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801978a:	8463      	strh	r3, [r4, #34]	; 0x22
 801978c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8019790:	b002      	add	sp, #8
 8019792:	bd10      	pop	{r4, pc}

08019794 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8019794:	b513      	push	{r0, r1, r4, lr}
 8019796:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801979a:	4604      	mov	r4, r0
 801979c:	3301      	adds	r3, #1
 801979e:	d109      	bne.n	80197b4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80197a0:	4601      	mov	r1, r0
 80197a2:	4668      	mov	r0, sp
 80197a4:	f7ff fd0e 	bl	80191c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80197a8:	f8bd 3000 	ldrh.w	r3, [sp]
 80197ac:	8423      	strh	r3, [r4, #32]
 80197ae:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80197b2:	8463      	strh	r3, [r4, #34]	; 0x22
 80197b4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80197b8:	b002      	add	sp, #8
 80197ba:	bd10      	pop	{r4, pc}

080197bc <_ZN8touchgfx6ScreenC1Ev>:
 80197bc:	b570      	push	{r4, r5, r6, lr}
 80197be:	4b17      	ldr	r3, [pc, #92]	; (801981c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80197c0:	4605      	mov	r5, r0
 80197c2:	4a17      	ldr	r2, [pc, #92]	; (8019820 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80197c4:	2101      	movs	r1, #1
 80197c6:	f845 3b04 	str.w	r3, [r5], #4
 80197ca:	2300      	movs	r3, #0
 80197cc:	6042      	str	r2, [r0, #4]
 80197ce:	4604      	mov	r4, r0
 80197d0:	8103      	strh	r3, [r0, #8]
 80197d2:	8143      	strh	r3, [r0, #10]
 80197d4:	8183      	strh	r3, [r0, #12]
 80197d6:	81c3      	strh	r3, [r0, #14]
 80197d8:	8203      	strh	r3, [r0, #16]
 80197da:	8243      	strh	r3, [r0, #18]
 80197dc:	8283      	strh	r3, [r0, #20]
 80197de:	82c3      	strh	r3, [r0, #22]
 80197e0:	6203      	str	r3, [r0, #32]
 80197e2:	8483      	strh	r3, [r0, #36]	; 0x24
 80197e4:	84c3      	strh	r3, [r0, #38]	; 0x26
 80197e6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80197ea:	6343      	str	r3, [r0, #52]	; 0x34
 80197ec:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80197f0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80197f4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80197f8:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 80197fc:	4b09      	ldr	r3, [pc, #36]	; (8019824 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80197fe:	4628      	mov	r0, r5
 8019800:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019804:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8019806:	4a08      	ldr	r2, [pc, #32]	; (8019828 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8019808:	f9b2 1000 	ldrsh.w	r1, [r2]
 801980c:	4798      	blx	r3
 801980e:	6863      	ldr	r3, [r4, #4]
 8019810:	4628      	mov	r0, r5
 8019812:	4631      	mov	r1, r6
 8019814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019816:	4798      	blx	r3
 8019818:	4620      	mov	r0, r4
 801981a:	bd70      	pop	{r4, r5, r6, pc}
 801981c:	08030e88 	.word	0x08030e88
 8019820:	080303d8 	.word	0x080303d8
 8019824:	20027c9e 	.word	0x20027c9e
 8019828:	20027c9c 	.word	0x20027c9c

0801982c <_ZN8touchgfx6Screen4drawEv>:
 801982c:	4b09      	ldr	r3, [pc, #36]	; (8019854 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801982e:	b507      	push	{r0, r1, r2, lr}
 8019830:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019834:	2100      	movs	r1, #0
 8019836:	4b08      	ldr	r3, [pc, #32]	; (8019858 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8019838:	9100      	str	r1, [sp, #0]
 801983a:	4669      	mov	r1, sp
 801983c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019840:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019844:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019848:	6803      	ldr	r3, [r0, #0]
 801984a:	689b      	ldr	r3, [r3, #8]
 801984c:	4798      	blx	r3
 801984e:	b003      	add	sp, #12
 8019850:	f85d fb04 	ldr.w	pc, [sp], #4
 8019854:	20027c9c 	.word	0x20027c9c
 8019858:	20027c9e 	.word	0x20027c9e

0801985c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801985c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019860:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019864:	b089      	sub	sp, #36	; 0x24
 8019866:	4680      	mov	r8, r0
 8019868:	460c      	mov	r4, r1
 801986a:	2b00      	cmp	r3, #0
 801986c:	4615      	mov	r5, r2
 801986e:	dd0e      	ble.n	801988e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019870:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019874:	2b00      	cmp	r3, #0
 8019876:	dd0a      	ble.n	801988e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019878:	4628      	mov	r0, r5
 801987a:	f7ff ff5b 	bl	8019734 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801987e:	4621      	mov	r1, r4
 8019880:	f7fe fa81 	bl	8017d86 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019884:	69eb      	ldr	r3, [r5, #28]
 8019886:	b928      	cbnz	r0, 8019894 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8019888:	461d      	mov	r5, r3
 801988a:	2b00      	cmp	r3, #0
 801988c:	d1f4      	bne.n	8019878 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801988e:	b009      	add	sp, #36	; 0x24
 8019890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019894:	ae04      	add	r6, sp, #16
 8019896:	2b00      	cmp	r3, #0
 8019898:	f000 80b5 	beq.w	8019a06 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801989c:	682b      	ldr	r3, [r5, #0]
 801989e:	4629      	mov	r1, r5
 80198a0:	a802      	add	r0, sp, #8
 80198a2:	68db      	ldr	r3, [r3, #12]
 80198a4:	4798      	blx	r3
 80198a6:	4628      	mov	r0, r5
 80198a8:	f7ff ff60 	bl	801976c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80198ac:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80198b0:	4407      	add	r7, r0
 80198b2:	4628      	mov	r0, r5
 80198b4:	f7ff ff6e 	bl	8019794 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80198b8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80198bc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80198c0:	b23f      	sxth	r7, r7
 80198c2:	4418      	add	r0, r3
 80198c4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80198c8:	4621      	mov	r1, r4
 80198ca:	f8ad 2014 	strh.w	r2, [sp, #20]
 80198ce:	f8ad 0012 	strh.w	r0, [sp, #18]
 80198d2:	4630      	mov	r0, r6
 80198d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80198d8:	f8ad 7010 	strh.w	r7, [sp, #16]
 80198dc:	f7f8 fa62 	bl	8011da4 <_ZN8touchgfx4RectaNERKS0_>
 80198e0:	4628      	mov	r0, r5
 80198e2:	f7ff ff27 	bl	8019734 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80198e6:	ab06      	add	r3, sp, #24
 80198e8:	4602      	mov	r2, r0
 80198ea:	e896 0003 	ldmia.w	r6, {r0, r1}
 80198ee:	e883 0003 	stmia.w	r3, {r0, r1}
 80198f2:	4611      	mov	r1, r2
 80198f4:	4618      	mov	r0, r3
 80198f6:	f7f8 fa55 	bl	8011da4 <_ZN8touchgfx4RectaNERKS0_>
 80198fa:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80198fe:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019902:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8019906:	4299      	cmp	r1, r3
 8019908:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801990c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8019910:	d10b      	bne.n	801992a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8019912:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019916:	4552      	cmp	r2, sl
 8019918:	d107      	bne.n	801992a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801991a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801991e:	455a      	cmp	r2, fp
 8019920:	d103      	bne.n	801992a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8019922:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019926:	454a      	cmp	r2, r9
 8019928:	d06d      	beq.n	8019a06 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801992a:	f1bb 0f00 	cmp.w	fp, #0
 801992e:	dd65      	ble.n	80199fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8019930:	f1b9 0f00 	cmp.w	r9, #0
 8019934:	dd62      	ble.n	80199fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8019936:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801993a:	fa1f f08a 	uxth.w	r0, sl
 801993e:	4552      	cmp	r2, sl
 8019940:	9000      	str	r0, [sp, #0]
 8019942:	da12      	bge.n	801996a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8019944:	9301      	str	r3, [sp, #4]
 8019946:	9b00      	ldr	r3, [sp, #0]
 8019948:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801994c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019950:	1a9a      	subs	r2, r3, r2
 8019952:	f8ad 1010 	strh.w	r1, [sp, #16]
 8019956:	4631      	mov	r1, r6
 8019958:	f8ad 0014 	strh.w	r0, [sp, #20]
 801995c:	4640      	mov	r0, r8
 801995e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8019962:	69ea      	ldr	r2, [r5, #28]
 8019964:	f7ff ff7a 	bl	801985c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019968:	9b01      	ldr	r3, [sp, #4]
 801996a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801996e:	b29f      	uxth	r7, r3
 8019970:	429a      	cmp	r2, r3
 8019972:	da0d      	bge.n	8019990 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8019974:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019978:	1aba      	subs	r2, r7, r2
 801997a:	f8ad a012 	strh.w	sl, [sp, #18]
 801997e:	4631      	mov	r1, r6
 8019980:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019984:	4640      	mov	r0, r8
 8019986:	f8ad 9016 	strh.w	r9, [sp, #22]
 801998a:	69ea      	ldr	r2, [r5, #28]
 801998c:	f7ff ff66 	bl	801985c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019990:	8822      	ldrh	r2, [r4, #0]
 8019992:	445f      	add	r7, fp
 8019994:	88a3      	ldrh	r3, [r4, #4]
 8019996:	b2bf      	uxth	r7, r7
 8019998:	4413      	add	r3, r2
 801999a:	b23a      	sxth	r2, r7
 801999c:	b29b      	uxth	r3, r3
 801999e:	b219      	sxth	r1, r3
 80199a0:	4291      	cmp	r1, r2
 80199a2:	dd0d      	ble.n	80199c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80199a4:	1bdb      	subs	r3, r3, r7
 80199a6:	f8ad 2010 	strh.w	r2, [sp, #16]
 80199aa:	f8ad a012 	strh.w	sl, [sp, #18]
 80199ae:	4631      	mov	r1, r6
 80199b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80199b4:	4640      	mov	r0, r8
 80199b6:	f8ad 9016 	strh.w	r9, [sp, #22]
 80199ba:	69ea      	ldr	r2, [r5, #28]
 80199bc:	f7ff ff4e 	bl	801985c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80199c0:	88e2      	ldrh	r2, [r4, #6]
 80199c2:	8863      	ldrh	r3, [r4, #2]
 80199c4:	4413      	add	r3, r2
 80199c6:	9a00      	ldr	r2, [sp, #0]
 80199c8:	444a      	add	r2, r9
 80199ca:	b29b      	uxth	r3, r3
 80199cc:	fa1f f982 	uxth.w	r9, r2
 80199d0:	b219      	sxth	r1, r3
 80199d2:	fa0f f289 	sxth.w	r2, r9
 80199d6:	428a      	cmp	r2, r1
 80199d8:	da15      	bge.n	8019a06 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80199da:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80199de:	eba3 0309 	sub.w	r3, r3, r9
 80199e2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80199e6:	f8ad 1014 	strh.w	r1, [sp, #20]
 80199ea:	4631      	mov	r1, r6
 80199ec:	f8ad 0010 	strh.w	r0, [sp, #16]
 80199f0:	f8ad 2012 	strh.w	r2, [sp, #18]
 80199f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80199f8:	69ea      	ldr	r2, [r5, #28]
 80199fa:	e001      	b.n	8019a00 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80199fc:	69ea      	ldr	r2, [r5, #28]
 80199fe:	4621      	mov	r1, r4
 8019a00:	4640      	mov	r0, r8
 8019a02:	f7ff ff2b 	bl	801985c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019a06:	4628      	mov	r0, r5
 8019a08:	f7ff fe94 	bl	8019734 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019a0c:	6861      	ldr	r1, [r4, #4]
 8019a0e:	4602      	mov	r2, r0
 8019a10:	4633      	mov	r3, r6
 8019a12:	6820      	ldr	r0, [r4, #0]
 8019a14:	c303      	stmia	r3!, {r0, r1}
 8019a16:	4611      	mov	r1, r2
 8019a18:	4630      	mov	r0, r6
 8019a1a:	f7f8 f9c3 	bl	8011da4 <_ZN8touchgfx4RectaNERKS0_>
 8019a1e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8019a22:	2b00      	cmp	r3, #0
 8019a24:	f77f af33 	ble.w	801988e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019a28:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	f77f af2e 	ble.w	801988e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019a32:	4628      	mov	r0, r5
 8019a34:	f7ff fe9a 	bl	801976c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019a38:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019a3c:	1a18      	subs	r0, r3, r0
 8019a3e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019a42:	4628      	mov	r0, r5
 8019a44:	f7ff fea6 	bl	8019794 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019a48:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019a4c:	4631      	mov	r1, r6
 8019a4e:	1a18      	subs	r0, r3, r0
 8019a50:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019a54:	4628      	mov	r0, r5
 8019a56:	682b      	ldr	r3, [r5, #0]
 8019a58:	689b      	ldr	r3, [r3, #8]
 8019a5a:	4798      	blx	r3
 8019a5c:	e717      	b.n	801988e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08019a5e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8019a5e:	b570      	push	{r4, r5, r6, lr}
 8019a60:	1d06      	adds	r6, r0, #4
 8019a62:	b086      	sub	sp, #24
 8019a64:	460c      	mov	r4, r1
 8019a66:	2300      	movs	r3, #0
 8019a68:	4631      	mov	r1, r6
 8019a6a:	4605      	mov	r5, r0
 8019a6c:	a802      	add	r0, sp, #8
 8019a6e:	9301      	str	r3, [sp, #4]
 8019a70:	f7ff fba8 	bl	80191c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019a74:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019a78:	8822      	ldrh	r2, [r4, #0]
 8019a7a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8019a7e:	1ad2      	subs	r2, r2, r3
 8019a80:	8863      	ldrh	r3, [r4, #2]
 8019a82:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019a86:	1a5b      	subs	r3, r3, r1
 8019a88:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8019a8c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019a90:	aa01      	add	r2, sp, #4
 8019a92:	f8ad 0014 	strh.w	r0, [sp, #20]
 8019a96:	4630      	mov	r0, r6
 8019a98:	f8ad 1016 	strh.w	r1, [sp, #22]
 8019a9c:	a904      	add	r1, sp, #16
 8019a9e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8019aa2:	f7f8 fa57 	bl	8011f54 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8019aa6:	9a01      	ldr	r2, [sp, #4]
 8019aa8:	b11a      	cbz	r2, 8019ab2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8019aaa:	4621      	mov	r1, r4
 8019aac:	4628      	mov	r0, r5
 8019aae:	f7ff fed5 	bl	801985c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019ab2:	b006      	add	sp, #24
 8019ab4:	bd70      	pop	{r4, r5, r6, pc}

08019ab6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8019ab6:	4602      	mov	r2, r0
 8019ab8:	b530      	push	{r4, r5, lr}
 8019aba:	4604      	mov	r4, r0
 8019abc:	b085      	sub	sp, #20
 8019abe:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8019ac2:	460d      	mov	r5, r1
 8019ac4:	466b      	mov	r3, sp
 8019ac6:	6851      	ldr	r1, [r2, #4]
 8019ac8:	c303      	stmia	r3!, {r0, r1}
 8019aca:	4629      	mov	r1, r5
 8019acc:	4668      	mov	r0, sp
 8019ace:	f7f8 f969 	bl	8011da4 <_ZN8touchgfx4RectaNERKS0_>
 8019ad2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019ad6:	b12b      	cbz	r3, 8019ae4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8019ad8:	4669      	mov	r1, sp
 8019ada:	4620      	mov	r0, r4
 8019adc:	f7ff ffbf 	bl	8019a5e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8019ae0:	b005      	add	sp, #20
 8019ae2:	bd30      	pop	{r4, r5, pc}
 8019ae4:	3404      	adds	r4, #4
 8019ae6:	a802      	add	r0, sp, #8
 8019ae8:	4621      	mov	r1, r4
 8019aea:	f7ff fb6b 	bl	80191c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019aee:	f8bd 3000 	ldrh.w	r3, [sp]
 8019af2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019af6:	4669      	mov	r1, sp
 8019af8:	4620      	mov	r0, r4
 8019afa:	1a9b      	subs	r3, r3, r2
 8019afc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8019b00:	f8ad 3000 	strh.w	r3, [sp]
 8019b04:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019b08:	1a9b      	subs	r3, r3, r2
 8019b0a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019b0e:	f7f8 f9e8 	bl	8011ee2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8019b12:	e7e5      	b.n	8019ae0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08019b14 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8019b14:	460b      	mov	r3, r1
 8019b16:	680a      	ldr	r2, [r1, #0]
 8019b18:	1d01      	adds	r1, r0, #4
 8019b1a:	6992      	ldr	r2, [r2, #24]
 8019b1c:	4618      	mov	r0, r3
 8019b1e:	4710      	bx	r2

08019b20 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 8019b20:	4298      	cmp	r0, r3
 8019b22:	d200      	bcs.n	8019b26 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 8019b24:	b913      	cbnz	r3, 8019b2c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 8019b26:	440a      	add	r2, r1
 8019b28:	b210      	sxth	r0, r2
 8019b2a:	4770      	bx	lr
 8019b2c:	ee07 0a90 	vmov	s15, r0
 8019b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8019b34:	ee07 3a90 	vmov	s15, r3
 8019b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019b40:	ee07 2a90 	vmov	s15, r2
 8019b44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019b48:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8019b4c:	ee07 1a90 	vmov	s15, r1
 8019b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b54:	ee37 7a66 	vsub.f32	s14, s14, s13
 8019b58:	ee67 5a07 	vmul.f32	s11, s14, s14
 8019b5c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8019b60:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019b64:	eee6 7a26 	vfma.f32	s15, s12, s13
 8019b68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b70:	bfcc      	ite	gt
 8019b72:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8019b76:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8019b7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019b7e:	ee17 3a90 	vmov	r3, s15
 8019b82:	b218      	sxth	r0, r3
 8019b84:	4770      	bx	lr

08019b86 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 8019b86:	4298      	cmp	r0, r3
 8019b88:	d200      	bcs.n	8019b8c <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 8019b8a:	b913      	cbnz	r3, 8019b92 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 8019b8c:	440a      	add	r2, r1
 8019b8e:	b210      	sxth	r0, r2
 8019b90:	4770      	bx	lr
 8019b92:	ee07 2a90 	vmov	s15, r2
 8019b96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019b9a:	ee07 0a90 	vmov	s15, r0
 8019b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019ba6:	ee07 3a10 	vmov	s14, r3
 8019baa:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8019bae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019bb2:	ee07 1a90 	vmov	s15, r1
 8019bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019bbe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019bc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bca:	bfcc      	ite	gt
 8019bcc:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8019bd0:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8019bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019bd8:	ee17 3a90 	vmov	r3, s15
 8019bdc:	b218      	sxth	r0, r3
 8019bde:	4770      	bx	lr

08019be0 <_ZN8touchgfx15EasingEquations12linearEaseInEtsst>:
 8019be0:	f7ff bfd1 	b.w	8019b86 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>

08019be4 <_ZN8touchgfx12TextProviderC1Ev>:
 8019be4:	b538      	push	{r3, r4, r5, lr}
 8019be6:	2500      	movs	r5, #0
 8019be8:	2302      	movs	r3, #2
 8019bea:	4604      	mov	r4, r0
 8019bec:	220e      	movs	r2, #14
 8019bee:	7403      	strb	r3, [r0, #16]
 8019bf0:	4629      	mov	r1, r5
 8019bf2:	6145      	str	r5, [r0, #20]
 8019bf4:	7605      	strb	r5, [r0, #24]
 8019bf6:	83c5      	strh	r5, [r0, #30]
 8019bf8:	8405      	strh	r5, [r0, #32]
 8019bfa:	86c5      	strh	r5, [r0, #54]	; 0x36
 8019bfc:	8705      	strh	r5, [r0, #56]	; 0x38
 8019bfe:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8019c00:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8019c04:	e9c0 5500 	strd	r5, r5, [r0]
 8019c08:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8019c0c:	304c      	adds	r0, #76	; 0x4c
 8019c0e:	f011 fb3d 	bl	802b28c <memset>
 8019c12:	2301      	movs	r3, #1
 8019c14:	4620      	mov	r0, r4
 8019c16:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8019c1a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8019c1e:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8019c22:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8019c26:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8019c2a:	f7ec f817 	bl	8005c5c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8019c2e:	4620      	mov	r0, r4
 8019c30:	bd38      	pop	{r3, r4, r5, pc}

08019c32 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8019c32:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019c34:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019c38:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8019c3a:	fab0 f080 	clz	r0, r0
 8019c3e:	0940      	lsrs	r0, r0, #5
 8019c40:	4770      	bx	lr

08019c42 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8019c42:	b530      	push	{r4, r5, lr}
 8019c44:	2500      	movs	r5, #0
 8019c46:	2401      	movs	r4, #1
 8019c48:	6843      	ldr	r3, [r0, #4]
 8019c4a:	b913      	cbnz	r3, 8019c52 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8019c4c:	6803      	ldr	r3, [r0, #0]
 8019c4e:	b313      	cbz	r3, 8019c96 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8019c50:	6043      	str	r3, [r0, #4]
 8019c52:	7e03      	ldrb	r3, [r0, #24]
 8019c54:	b143      	cbz	r3, 8019c68 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8019c56:	6943      	ldr	r3, [r0, #20]
 8019c58:	b12b      	cbz	r3, 8019c66 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019c5a:	881a      	ldrh	r2, [r3, #0]
 8019c5c:	b11a      	cbz	r2, 8019c66 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019c5e:	1c9a      	adds	r2, r3, #2
 8019c60:	6142      	str	r2, [r0, #20]
 8019c62:	8818      	ldrh	r0, [r3, #0]
 8019c64:	bd30      	pop	{r4, r5, pc}
 8019c66:	7605      	strb	r5, [r0, #24]
 8019c68:	6843      	ldr	r3, [r0, #4]
 8019c6a:	8819      	ldrh	r1, [r3, #0]
 8019c6c:	b199      	cbz	r1, 8019c96 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8019c6e:	1c9a      	adds	r2, r3, #2
 8019c70:	2902      	cmp	r1, #2
 8019c72:	6042      	str	r2, [r0, #4]
 8019c74:	d1f5      	bne.n	8019c62 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8019c76:	7c03      	ldrb	r3, [r0, #16]
 8019c78:	2b01      	cmp	r3, #1
 8019c7a:	d8e5      	bhi.n	8019c48 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019c7c:	1c5a      	adds	r2, r3, #1
 8019c7e:	3302      	adds	r3, #2
 8019c80:	7402      	strb	r2, [r0, #16]
 8019c82:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8019c86:	6143      	str	r3, [r0, #20]
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d0dd      	beq.n	8019c48 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019c8c:	881b      	ldrh	r3, [r3, #0]
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d0da      	beq.n	8019c48 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019c92:	7604      	strb	r4, [r0, #24]
 8019c94:	e7d8      	b.n	8019c48 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019c96:	2000      	movs	r0, #0
 8019c98:	e7e4      	b.n	8019c64 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08019c9a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8019c9a:	6001      	str	r1, [r0, #0]
 8019c9c:	2100      	movs	r1, #0
 8019c9e:	b430      	push	{r4, r5}
 8019ca0:	6041      	str	r1, [r0, #4]
 8019ca2:	6815      	ldr	r5, [r2, #0]
 8019ca4:	6085      	str	r5, [r0, #8]
 8019ca6:	6852      	ldr	r2, [r2, #4]
 8019ca8:	6443      	str	r3, [r0, #68]	; 0x44
 8019caa:	9b02      	ldr	r3, [sp, #8]
 8019cac:	60c2      	str	r2, [r0, #12]
 8019cae:	7401      	strb	r1, [r0, #16]
 8019cb0:	6141      	str	r1, [r0, #20]
 8019cb2:	7601      	strb	r1, [r0, #24]
 8019cb4:	8701      	strh	r1, [r0, #56]	; 0x38
 8019cb6:	8401      	strh	r1, [r0, #32]
 8019cb8:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8019cbc:	6483      	str	r3, [r0, #72]	; 0x48
 8019cbe:	bc30      	pop	{r4, r5}
 8019cc0:	f7eb bfcc 	b.w	8005c5c <_ZN8touchgfx12TextProvider18initializeInternalEv>

08019cc4 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8019cc4:	b408      	push	{r3}
 8019cc6:	b510      	push	{r4, lr}
 8019cc8:	b085      	sub	sp, #20
 8019cca:	ac07      	add	r4, sp, #28
 8019ccc:	f854 3b04 	ldr.w	r3, [r4], #4
 8019cd0:	9300      	str	r3, [sp, #0]
 8019cd2:	4613      	mov	r3, r2
 8019cd4:	4622      	mov	r2, r4
 8019cd6:	9403      	str	r4, [sp, #12]
 8019cd8:	f7ff ffdf 	bl	8019c9a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019cdc:	b005      	add	sp, #20
 8019cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ce2:	b001      	add	sp, #4
 8019ce4:	4770      	bx	lr

08019ce6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8019ce6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ce8:	4605      	mov	r5, r0
 8019cea:	4608      	mov	r0, r1
 8019cec:	b1f1      	cbz	r1, 8019d2c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8019cee:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8019cf2:	460b      	mov	r3, r1
 8019cf4:	f101 0708 	add.w	r7, r1, #8
 8019cf8:	4622      	mov	r2, r4
 8019cfa:	6818      	ldr	r0, [r3, #0]
 8019cfc:	3308      	adds	r3, #8
 8019cfe:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019d02:	4626      	mov	r6, r4
 8019d04:	42bb      	cmp	r3, r7
 8019d06:	c603      	stmia	r6!, {r0, r1}
 8019d08:	4634      	mov	r4, r6
 8019d0a:	d1f6      	bne.n	8019cfa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8019d0c:	6818      	ldr	r0, [r3, #0]
 8019d0e:	6030      	str	r0, [r6, #0]
 8019d10:	4610      	mov	r0, r2
 8019d12:	889b      	ldrh	r3, [r3, #4]
 8019d14:	80b3      	strh	r3, [r6, #4]
 8019d16:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8019d1a:	015b      	lsls	r3, r3, #5
 8019d1c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019d20:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8019d24:	430b      	orrs	r3, r1
 8019d26:	425b      	negs	r3, r3
 8019d28:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8019d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019d2e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8019d2e:	b538      	push	{r3, r4, r5, lr}
 8019d30:	460c      	mov	r4, r1
 8019d32:	6811      	ldr	r1, [r2, #0]
 8019d34:	4610      	mov	r0, r2
 8019d36:	68cd      	ldr	r5, [r1, #12]
 8019d38:	4619      	mov	r1, r3
 8019d3a:	47a8      	blx	r5
 8019d3c:	2800      	cmp	r0, #0
 8019d3e:	bf08      	it	eq
 8019d40:	4620      	moveq	r0, r4
 8019d42:	bd38      	pop	{r3, r4, r5, pc}

08019d44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8019d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d46:	4604      	mov	r4, r0
 8019d48:	4615      	mov	r5, r2
 8019d4a:	4608      	mov	r0, r1
 8019d4c:	b93a      	cbnz	r2, 8019d5e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8019d4e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8019d52:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8019d56:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8019d5a:	4628      	mov	r0, r5
 8019d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d5e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8019d62:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8019d66:	8893      	ldrh	r3, [r2, #4]
 8019d68:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8019d6c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8019d70:	79ee      	ldrb	r6, [r5, #7]
 8019d72:	4316      	orrs	r6, r2
 8019d74:	19da      	adds	r2, r3, r7
 8019d76:	b291      	uxth	r1, r2
 8019d78:	b2b7      	uxth	r7, r6
 8019d7a:	291d      	cmp	r1, #29
 8019d7c:	d87b      	bhi.n	8019e76 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8019d7e:	2201      	movs	r2, #1
 8019d80:	10f6      	asrs	r6, r6, #3
 8019d82:	408a      	lsls	r2, r1
 8019d84:	4974      	ldr	r1, [pc, #464]	; (8019f58 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8019d86:	420a      	tst	r2, r1
 8019d88:	d12e      	bne.n	8019de8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8019d8a:	f412 7f60 	tst.w	r2, #896	; 0x380
 8019d8e:	d072      	beq.n	8019e76 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8019d90:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8019d94:	462b      	mov	r3, r5
 8019d96:	f105 0e08 	add.w	lr, r5, #8
 8019d9a:	4615      	mov	r5, r2
 8019d9c:	6818      	ldr	r0, [r3, #0]
 8019d9e:	3308      	adds	r3, #8
 8019da0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019da4:	4694      	mov	ip, r2
 8019da6:	4573      	cmp	r3, lr
 8019da8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019dac:	4662      	mov	r2, ip
 8019dae:	d1f5      	bne.n	8019d9c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8019db0:	6818      	ldr	r0, [r3, #0]
 8019db2:	f8cc 0000 	str.w	r0, [ip]
 8019db6:	889b      	ldrh	r3, [r3, #4]
 8019db8:	f8ac 3004 	strh.w	r3, [ip, #4]
 8019dbc:	b2b3      	uxth	r3, r6
 8019dbe:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8019dc2:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8019dc6:	1aca      	subs	r2, r1, r3
 8019dc8:	1bcf      	subs	r7, r1, r7
 8019dca:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8019dce:	b292      	uxth	r2, r2
 8019dd0:	1afb      	subs	r3, r7, r3
 8019dd2:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8019dd6:	10d2      	asrs	r2, r2, #3
 8019dd8:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8019ddc:	4302      	orrs	r2, r0
 8019dde:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8019de2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8019de6:	e7b8      	b.n	8019d5a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8019de8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019dea:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019dee:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8019df0:	f640 6333 	movw	r3, #3635	; 0xe33
 8019df4:	4299      	cmp	r1, r3
 8019df6:	d110      	bne.n	8019e1a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8019df8:	6803      	ldr	r3, [r0, #0]
 8019dfa:	68db      	ldr	r3, [r3, #12]
 8019dfc:	4798      	blx	r3
 8019dfe:	7b41      	ldrb	r1, [r0, #13]
 8019e00:	00cb      	lsls	r3, r1, #3
 8019e02:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019e06:	7a03      	ldrb	r3, [r0, #8]
 8019e08:	0648      	lsls	r0, r1, #25
 8019e0a:	ea43 0302 	orr.w	r3, r3, r2
 8019e0e:	bf44      	itt	mi
 8019e10:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019e14:	b21b      	sxthmi	r3, r3
 8019e16:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019e1a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8019e1e:	462a      	mov	r2, r5
 8019e20:	f105 0c08 	add.w	ip, r5, #8
 8019e24:	443b      	add	r3, r7
 8019e26:	4433      	add	r3, r6
 8019e28:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8019e2c:	b29b      	uxth	r3, r3
 8019e2e:	4635      	mov	r5, r6
 8019e30:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019e34:	6810      	ldr	r0, [r2, #0]
 8019e36:	3208      	adds	r2, #8
 8019e38:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8019e3c:	4637      	mov	r7, r6
 8019e3e:	4562      	cmp	r2, ip
 8019e40:	c703      	stmia	r7!, {r0, r1}
 8019e42:	463e      	mov	r6, r7
 8019e44:	d1f6      	bne.n	8019e34 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8019e46:	6810      	ldr	r0, [r2, #0]
 8019e48:	6038      	str	r0, [r7, #0]
 8019e4a:	8892      	ldrh	r2, [r2, #4]
 8019e4c:	80ba      	strh	r2, [r7, #4]
 8019e4e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8019e52:	10db      	asrs	r3, r3, #3
 8019e54:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8019e58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019e5c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019e60:	4313      	orrs	r3, r2
 8019e62:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8019e66:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8019e6a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8019e6e:	1a9b      	subs	r3, r3, r2
 8019e70:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8019e74:	e771      	b.n	8019d5a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8019e76:	f023 0204 	bic.w	r2, r3, #4
 8019e7a:	f640 611b 	movw	r1, #3611	; 0xe1b
 8019e7e:	428a      	cmp	r2, r1
 8019e80:	d003      	beq.n	8019e8a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8019e82:	f640 621d 	movw	r2, #3613	; 0xe1d
 8019e86:	4293      	cmp	r3, r2
 8019e88:	d120      	bne.n	8019ecc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8019e8a:	3b01      	subs	r3, #1
 8019e8c:	4602      	mov	r2, r0
 8019e8e:	4629      	mov	r1, r5
 8019e90:	4620      	mov	r0, r4
 8019e92:	b29b      	uxth	r3, r3
 8019e94:	f7ff ff4b 	bl	8019d2e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019e98:	7b41      	ldrb	r1, [r0, #13]
 8019e9a:	00cb      	lsls	r3, r1, #3
 8019e9c:	0649      	lsls	r1, r1, #25
 8019e9e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019ea2:	7a03      	ldrb	r3, [r0, #8]
 8019ea4:	ea43 0302 	orr.w	r3, r3, r2
 8019ea8:	bf44      	itt	mi
 8019eaa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019eae:	b21b      	sxthmi	r3, r3
 8019eb0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019eb4:	7b6b      	ldrb	r3, [r5, #13]
 8019eb6:	7aaa      	ldrb	r2, [r5, #10]
 8019eb8:	005b      	lsls	r3, r3, #1
 8019eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019ebe:	4313      	orrs	r3, r2
 8019ec0:	115a      	asrs	r2, r3, #5
 8019ec2:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8019ec6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8019eca:	e035      	b.n	8019f38 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8019ecc:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8019ed0:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8019ed4:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8019ed8:	7a2a      	ldrb	r2, [r5, #8]
 8019eda:	ea42 0201 	orr.w	r2, r2, r1
 8019ede:	f640 6109 	movw	r1, #3593	; 0xe09
 8019ee2:	bf1c      	itt	ne
 8019ee4:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8019ee8:	b212      	sxthne	r2, r2
 8019eea:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8019eee:	f023 0210 	bic.w	r2, r3, #16
 8019ef2:	428a      	cmp	r2, r1
 8019ef4:	d003      	beq.n	8019efe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8019ef6:	f640 6213 	movw	r2, #3603	; 0xe13
 8019efa:	4293      	cmp	r3, r2
 8019efc:	d129      	bne.n	8019f52 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8019efe:	7b6e      	ldrb	r6, [r5, #13]
 8019f00:	4629      	mov	r1, r5
 8019f02:	0076      	lsls	r6, r6, #1
 8019f04:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8019f08:	7aae      	ldrb	r6, [r5, #10]
 8019f0a:	4316      	orrs	r6, r2
 8019f0c:	f640 6213 	movw	r2, #3603	; 0xe13
 8019f10:	4293      	cmp	r3, r2
 8019f12:	4602      	mov	r2, r0
 8019f14:	4620      	mov	r0, r4
 8019f16:	bf16      	itet	ne
 8019f18:	f103 33ff 	addne.w	r3, r3, #4294967295
 8019f1c:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8019f20:	b29b      	uxthne	r3, r3
 8019f22:	f7ff ff04 	bl	8019d2e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019f26:	7b43      	ldrb	r3, [r0, #13]
 8019f28:	7a82      	ldrb	r2, [r0, #10]
 8019f2a:	005b      	lsls	r3, r3, #1
 8019f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019f30:	4313      	orrs	r3, r2
 8019f32:	1af6      	subs	r6, r6, r3
 8019f34:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8019f38:	7b69      	ldrb	r1, [r5, #13]
 8019f3a:	00cb      	lsls	r3, r1, #3
 8019f3c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019f40:	7a2b      	ldrb	r3, [r5, #8]
 8019f42:	4313      	orrs	r3, r2
 8019f44:	064a      	lsls	r2, r1, #25
 8019f46:	bf44      	itt	mi
 8019f48:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019f4c:	b21b      	sxthmi	r3, r3
 8019f4e:	1bdb      	subs	r3, r3, r7
 8019f50:	e747      	b.n	8019de2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8019f52:	2300      	movs	r3, #0
 8019f54:	e7b7      	b.n	8019ec6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8019f56:	bf00      	nop
 8019f58:	3fc00079 	.word	0x3fc00079

08019f5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8019f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019f60:	4604      	mov	r4, r0
 8019f62:	b942      	cbnz	r2, 8019f76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8019f64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019f68:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8019f6c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8019f70:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8019f74:	e047      	b.n	801a006 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8019f76:	7b51      	ldrb	r1, [r2, #13]
 8019f78:	8893      	ldrh	r3, [r2, #4]
 8019f7a:	010d      	lsls	r5, r1, #4
 8019f7c:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8019f80:	79d5      	ldrb	r5, [r2, #7]
 8019f82:	4305      	orrs	r5, r0
 8019f84:	2d04      	cmp	r5, #4
 8019f86:	bfcc      	ite	gt
 8019f88:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8019f8c:	f04f 0e01 	movle.w	lr, #1
 8019f90:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8019f94:	f200 80ab 	bhi.w	801a0ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8019f98:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8019f9c:	4283      	cmp	r3, r0
 8019f9e:	d216      	bcs.n	8019fce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019fa0:	f240 605b 	movw	r0, #1627	; 0x65b
 8019fa4:	4283      	cmp	r3, r0
 8019fa6:	d859      	bhi.n	801a05c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8019fa8:	f240 6057 	movw	r0, #1623	; 0x657
 8019fac:	4283      	cmp	r3, r0
 8019fae:	d20e      	bcs.n	8019fce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019fb0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8019fb4:	d24a      	bcs.n	801a04c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8019fb6:	f240 604e 	movw	r0, #1614	; 0x64e
 8019fba:	4283      	cmp	r3, r0
 8019fbc:	d207      	bcs.n	8019fce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019fbe:	f240 601a 	movw	r0, #1562	; 0x61a
 8019fc2:	4283      	cmp	r3, r0
 8019fc4:	d02a      	beq.n	801a01c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019fc6:	d821      	bhi.n	801a00c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8019fc8:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8019fcc:	d35b      	bcc.n	801a086 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019fce:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8019fd2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019fd6:	f040 80d0 	bne.w	801a17a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8019fda:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8019fde:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019fe2:	f040 80ca 	bne.w	801a17a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8019fe6:	00cb      	lsls	r3, r1, #3
 8019fe8:	0649      	lsls	r1, r1, #25
 8019fea:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019fee:	7a13      	ldrb	r3, [r2, #8]
 8019ff0:	ea43 0300 	orr.w	r3, r3, r0
 8019ff4:	bf44      	itt	mi
 8019ff6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019ffa:	b21b      	sxthmi	r3, r3
 8019ffc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a000:	1b5d      	subs	r5, r3, r5
 801a002:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a006:	4610      	mov	r0, r2
 801a008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a00c:	f240 604b 	movw	r0, #1611	; 0x64b
 801a010:	4283      	cmp	r3, r0
 801a012:	d338      	bcc.n	801a086 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a014:	f240 604c 	movw	r0, #1612	; 0x64c
 801a018:	4283      	cmp	r3, r0
 801a01a:	d9d8      	bls.n	8019fce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a01c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801a020:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801a024:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a028:	f040 80f3 	bne.w	801a212 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801a02c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a030:	f040 80ef 	bne.w	801a212 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801a034:	00cb      	lsls	r3, r1, #3
 801a036:	064e      	lsls	r6, r1, #25
 801a038:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a03c:	7a13      	ldrb	r3, [r2, #8]
 801a03e:	ea43 0300 	orr.w	r3, r3, r0
 801a042:	bf44      	itt	mi
 801a044:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a048:	b21b      	sxthmi	r3, r3
 801a04a:	e7d9      	b.n	801a000 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801a04c:	f240 6054 	movw	r0, #1620	; 0x654
 801a050:	4283      	cmp	r3, r0
 801a052:	d8e3      	bhi.n	801a01c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a054:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801a058:	d9e0      	bls.n	801a01c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a05a:	e7b8      	b.n	8019fce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a05c:	f240 6074 	movw	r0, #1652	; 0x674
 801a060:	4283      	cmp	r3, r0
 801a062:	d0b4      	beq.n	8019fce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a064:	d82d      	bhi.n	801a0c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801a066:	f240 605e 	movw	r0, #1630	; 0x65e
 801a06a:	4283      	cmp	r3, r0
 801a06c:	d804      	bhi.n	801a078 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801a06e:	f240 605d 	movw	r0, #1629	; 0x65d
 801a072:	4283      	cmp	r3, r0
 801a074:	d3d2      	bcc.n	801a01c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a076:	e7aa      	b.n	8019fce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a078:	f240 605f 	movw	r0, #1631	; 0x65f
 801a07c:	4283      	cmp	r3, r0
 801a07e:	d0cd      	beq.n	801a01c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a080:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801a084:	d0a3      	beq.n	8019fce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a086:	00cb      	lsls	r3, r1, #3
 801a088:	0649      	lsls	r1, r1, #25
 801a08a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a08e:	7a13      	ldrb	r3, [r2, #8]
 801a090:	ea43 0300 	orr.w	r3, r3, r0
 801a094:	bf44      	itt	mi
 801a096:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a09a:	b21b      	sxthmi	r3, r3
 801a09c:	1b5d      	subs	r5, r3, r5
 801a09e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a0a2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a0a6:	7b53      	ldrb	r3, [r2, #13]
 801a0a8:	015b      	lsls	r3, r3, #5
 801a0aa:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a0ae:	7993      	ldrb	r3, [r2, #6]
 801a0b0:	430b      	orrs	r3, r1
 801a0b2:	2105      	movs	r1, #5
 801a0b4:	005b      	lsls	r3, r3, #1
 801a0b6:	fb93 f3f1 	sdiv	r3, r3, r1
 801a0ba:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801a0be:	440b      	add	r3, r1
 801a0c0:	e756      	b.n	8019f70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801a0c2:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801a0c6:	4283      	cmp	r3, r0
 801a0c8:	d809      	bhi.n	801a0de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801a0ca:	f240 60df 	movw	r0, #1759	; 0x6df
 801a0ce:	4283      	cmp	r3, r0
 801a0d0:	f4bf af7d 	bcs.w	8019fce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a0d4:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801a0d8:	2b05      	cmp	r3, #5
 801a0da:	d8d4      	bhi.n	801a086 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a0dc:	e777      	b.n	8019fce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a0de:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801a0e2:	4283      	cmp	r3, r0
 801a0e4:	d09a      	beq.n	801a01c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a0e6:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801a0ea:	4283      	cmp	r3, r0
 801a0ec:	e7ca      	b.n	801a084 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801a0ee:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801a0f2:	d22b      	bcs.n	801a14c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801a0f4:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801a0f8:	4283      	cmp	r3, r0
 801a0fa:	d28f      	bcs.n	801a01c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a0fc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a100:	4283      	cmp	r3, r0
 801a102:	d816      	bhi.n	801a132 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801a104:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801a108:	4283      	cmp	r3, r0
 801a10a:	f4bf af60 	bcs.w	8019fce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a10e:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801a112:	4283      	cmp	r3, r0
 801a114:	d80a      	bhi.n	801a12c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801a116:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801a11a:	4283      	cmp	r3, r0
 801a11c:	f4bf af57 	bcs.w	8019fce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a120:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801a124:	4283      	cmp	r3, r0
 801a126:	f43f af79 	beq.w	801a01c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a12a:	e7ac      	b.n	801a086 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a12c:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801a130:	e7f8      	b.n	801a124 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801a132:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801a136:	4283      	cmp	r3, r0
 801a138:	d802      	bhi.n	801a140 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801a13a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801a13e:	e798      	b.n	801a072 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801a140:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801a144:	4283      	cmp	r3, r0
 801a146:	f47f af42 	bne.w	8019fce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a14a:	e767      	b.n	801a01c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a14c:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801a150:	4283      	cmp	r3, r0
 801a152:	f43f af63 	beq.w	801a01c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a156:	d802      	bhi.n	801a15e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801a158:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801a15c:	e7f2      	b.n	801a144 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801a15e:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801a162:	4283      	cmp	r3, r0
 801a164:	d805      	bhi.n	801a172 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801a166:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801a16a:	4283      	cmp	r3, r0
 801a16c:	f4ff af2f 	bcc.w	8019fce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a170:	e754      	b.n	801a01c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a172:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801a176:	4283      	cmp	r3, r0
 801a178:	e7af      	b.n	801a0da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801a17a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801a17e:	4617      	mov	r7, r2
 801a180:	f102 0808 	add.w	r8, r2, #8
 801a184:	4666      	mov	r6, ip
 801a186:	6838      	ldr	r0, [r7, #0]
 801a188:	3708      	adds	r7, #8
 801a18a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801a18e:	46e6      	mov	lr, ip
 801a190:	4547      	cmp	r7, r8
 801a192:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801a196:	46f4      	mov	ip, lr
 801a198:	d1f5      	bne.n	801a186 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801a19a:	6838      	ldr	r0, [r7, #0]
 801a19c:	f8ce 0000 	str.w	r0, [lr]
 801a1a0:	88b9      	ldrh	r1, [r7, #4]
 801a1a2:	f8ae 1004 	strh.w	r1, [lr, #4]
 801a1a6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801a1aa:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a1ae:	d009      	beq.n	801a1c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801a1b0:	7b51      	ldrb	r1, [r2, #13]
 801a1b2:	7992      	ldrb	r2, [r2, #6]
 801a1b4:	0149      	lsls	r1, r1, #5
 801a1b6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a1ba:	4311      	orrs	r1, r2
 801a1bc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801a1c0:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801a1c4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a1c8:	b2ad      	uxth	r5, r5
 801a1ca:	d00d      	beq.n	801a1e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801a1cc:	442b      	add	r3, r5
 801a1ce:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801a1d2:	b29b      	uxth	r3, r3
 801a1d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a1d8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801a1dc:	10db      	asrs	r3, r3, #3
 801a1de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a1e2:	4313      	orrs	r3, r2
 801a1e4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801a1e8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801a1ec:	00cb      	lsls	r3, r1, #3
 801a1ee:	064f      	lsls	r7, r1, #25
 801a1f0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a1f4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801a1f8:	ea43 0302 	orr.w	r3, r3, r2
 801a1fc:	bf44      	itt	mi
 801a1fe:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a202:	b21b      	sxthmi	r3, r3
 801a204:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a208:	1b5b      	subs	r3, r3, r5
 801a20a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801a20e:	4632      	mov	r2, r6
 801a210:	e6f9      	b.n	801a006 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801a212:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801a216:	4617      	mov	r7, r2
 801a218:	f102 0908 	add.w	r9, r2, #8
 801a21c:	4666      	mov	r6, ip
 801a21e:	6838      	ldr	r0, [r7, #0]
 801a220:	3708      	adds	r7, #8
 801a222:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801a226:	46e0      	mov	r8, ip
 801a228:	454f      	cmp	r7, r9
 801a22a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801a22e:	46c4      	mov	ip, r8
 801a230:	d1f5      	bne.n	801a21e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801a232:	6838      	ldr	r0, [r7, #0]
 801a234:	f8c8 0000 	str.w	r0, [r8]
 801a238:	88b9      	ldrh	r1, [r7, #4]
 801a23a:	f8a8 1004 	strh.w	r1, [r8, #4]
 801a23e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801a242:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a246:	d009      	beq.n	801a25c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801a248:	7b51      	ldrb	r1, [r2, #13]
 801a24a:	7992      	ldrb	r2, [r2, #6]
 801a24c:	0149      	lsls	r1, r1, #5
 801a24e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a252:	4311      	orrs	r1, r2
 801a254:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801a258:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801a25c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a260:	d00e      	beq.n	801a280 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801a262:	eba3 030e 	sub.w	r3, r3, lr
 801a266:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801a26a:	b29b      	uxth	r3, r3
 801a26c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a270:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801a274:	10db      	asrs	r3, r3, #3
 801a276:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a27a:	4313      	orrs	r3, r2
 801a27c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801a280:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801a284:	00cb      	lsls	r3, r1, #3
 801a286:	0648      	lsls	r0, r1, #25
 801a288:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a28c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801a290:	ea43 0302 	orr.w	r3, r3, r2
 801a294:	bf44      	itt	mi
 801a296:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a29a:	b21b      	sxthmi	r3, r3
 801a29c:	1b5d      	subs	r5, r3, r5
 801a29e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a2a2:	e7b4      	b.n	801a20e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801a2a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801a2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2a8:	461e      	mov	r6, r3
 801a2aa:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801a2ac:	4604      	mov	r4, r0
 801a2ae:	4617      	mov	r7, r2
 801a2b0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a2b4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801a2b8:	f7eb fc8e 	bl	8005bd8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a2bc:	4605      	mov	r5, r0
 801a2be:	b918      	cbnz	r0, 801a2c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801a2c0:	6030      	str	r0, [r6, #0]
 801a2c2:	4628      	mov	r0, r5
 801a2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2c8:	683b      	ldr	r3, [r7, #0]
 801a2ca:	4601      	mov	r1, r0
 801a2cc:	4638      	mov	r0, r7
 801a2ce:	68db      	ldr	r3, [r3, #12]
 801a2d0:	4798      	blx	r3
 801a2d2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801a2d6:	4602      	mov	r2, r0
 801a2d8:	6030      	str	r0, [r6, #0]
 801a2da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801a2de:	d213      	bcs.n	801a308 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801a2e0:	4643      	mov	r3, r8
 801a2e2:	4639      	mov	r1, r7
 801a2e4:	4620      	mov	r0, r4
 801a2e6:	f7ff fe39 	bl	8019f5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801a2ea:	6030      	str	r0, [r6, #0]
 801a2ec:	6833      	ldr	r3, [r6, #0]
 801a2ee:	b143      	cbz	r3, 801a302 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801a2f0:	7b5a      	ldrb	r2, [r3, #13]
 801a2f2:	7a9b      	ldrb	r3, [r3, #10]
 801a2f4:	0052      	lsls	r2, r2, #1
 801a2f6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a2fa:	4313      	orrs	r3, r2
 801a2fc:	bf0c      	ite	eq
 801a2fe:	2301      	moveq	r3, #1
 801a300:	2300      	movne	r3, #0
 801a302:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801a306:	e7dc      	b.n	801a2c2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801a308:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801a30c:	b29b      	uxth	r3, r3
 801a30e:	2b7f      	cmp	r3, #127	; 0x7f
 801a310:	d804      	bhi.n	801a31c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801a312:	4639      	mov	r1, r7
 801a314:	4620      	mov	r0, r4
 801a316:	f7ff fd15 	bl	8019d44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a31a:	e7e6      	b.n	801a2ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801a31c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801a320:	2b00      	cmp	r3, #0
 801a322:	d0e3      	beq.n	801a2ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801a324:	f640 1302 	movw	r3, #2306	; 0x902
 801a328:	429d      	cmp	r5, r3
 801a32a:	d1df      	bne.n	801a2ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801a32c:	4601      	mov	r1, r0
 801a32e:	4620      	mov	r0, r4
 801a330:	f7ff fcd9 	bl	8019ce6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a334:	e7d9      	b.n	801a2ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801a336 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801a336:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a33a:	461e      	mov	r6, r3
 801a33c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801a33e:	4604      	mov	r4, r0
 801a340:	4617      	mov	r7, r2
 801a342:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a346:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801a34a:	f7eb fc45 	bl	8005bd8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a34e:	4605      	mov	r5, r0
 801a350:	b918      	cbnz	r0, 801a35a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801a352:	6030      	str	r0, [r6, #0]
 801a354:	4628      	mov	r0, r5
 801a356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a35a:	683b      	ldr	r3, [r7, #0]
 801a35c:	4601      	mov	r1, r0
 801a35e:	4638      	mov	r0, r7
 801a360:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801a364:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a368:	47c8      	blx	r9
 801a36a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801a36e:	4602      	mov	r2, r0
 801a370:	6030      	str	r0, [r6, #0]
 801a372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801a376:	d213      	bcs.n	801a3a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801a378:	4643      	mov	r3, r8
 801a37a:	4639      	mov	r1, r7
 801a37c:	4620      	mov	r0, r4
 801a37e:	f7ff fded 	bl	8019f5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801a382:	6030      	str	r0, [r6, #0]
 801a384:	6833      	ldr	r3, [r6, #0]
 801a386:	b143      	cbz	r3, 801a39a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801a388:	7b5a      	ldrb	r2, [r3, #13]
 801a38a:	7a9b      	ldrb	r3, [r3, #10]
 801a38c:	0052      	lsls	r2, r2, #1
 801a38e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a392:	4313      	orrs	r3, r2
 801a394:	bf0c      	ite	eq
 801a396:	2301      	moveq	r3, #1
 801a398:	2300      	movne	r3, #0
 801a39a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801a39e:	e7d9      	b.n	801a354 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801a3a0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801a3a4:	b29b      	uxth	r3, r3
 801a3a6:	2b7f      	cmp	r3, #127	; 0x7f
 801a3a8:	d804      	bhi.n	801a3b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801a3aa:	4639      	mov	r1, r7
 801a3ac:	4620      	mov	r0, r4
 801a3ae:	f7ff fcc9 	bl	8019d44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a3b2:	e7e6      	b.n	801a382 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801a3b4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801a3b8:	2b00      	cmp	r3, #0
 801a3ba:	d0e3      	beq.n	801a384 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801a3bc:	f640 1302 	movw	r3, #2306	; 0x902
 801a3c0:	429d      	cmp	r5, r3
 801a3c2:	d1df      	bne.n	801a384 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801a3c4:	4601      	mov	r1, r0
 801a3c6:	4620      	mov	r0, r4
 801a3c8:	f7ff fc8d 	bl	8019ce6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a3cc:	e7d9      	b.n	801a382 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801a3ce <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801a3ce:	b510      	push	{r4, lr}
 801a3d0:	4604      	mov	r4, r0
 801a3d2:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801a3d6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801a3d8:	b1e1      	cbz	r1, 801a414 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801a3da:	2b0a      	cmp	r3, #10
 801a3dc:	d02d      	beq.n	801a43a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801a3de:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801a3e0:	3901      	subs	r1, #1
 801a3e2:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801a3e6:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801a3e8:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801a3ec:	1c51      	adds	r1, r2, #1
 801a3ee:	b289      	uxth	r1, r1
 801a3f0:	2901      	cmp	r1, #1
 801a3f2:	bf8a      	itet	hi
 801a3f4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a3f8:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801a3fa:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801a3fc:	1c5a      	adds	r2, r3, #1
 801a3fe:	8722      	strh	r2, [r4, #56]	; 0x38
 801a400:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801a402:	4413      	add	r3, r2
 801a404:	b29b      	uxth	r3, r3
 801a406:	2b09      	cmp	r3, #9
 801a408:	bf88      	it	hi
 801a40a:	3b0a      	subhi	r3, #10
 801a40c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a410:	8458      	strh	r0, [r3, #34]	; 0x22
 801a412:	e7de      	b.n	801a3d2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801a414:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801a416:	2b0a      	cmp	r3, #10
 801a418:	d00f      	beq.n	801a43a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801a41a:	4620      	mov	r0, r4
 801a41c:	f7ff fc11 	bl	8019c42 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801a420:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801a422:	1c5a      	adds	r2, r3, #1
 801a424:	8722      	strh	r2, [r4, #56]	; 0x38
 801a426:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801a428:	4413      	add	r3, r2
 801a42a:	b29b      	uxth	r3, r3
 801a42c:	2b09      	cmp	r3, #9
 801a42e:	bf88      	it	hi
 801a430:	3b0a      	subhi	r3, #10
 801a432:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a436:	8458      	strh	r0, [r3, #34]	; 0x22
 801a438:	e7ec      	b.n	801a414 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801a43a:	bd10      	pop	{r4, pc}

0801a43c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801a43c:	b538      	push	{r3, r4, r5, lr}
 801a43e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801a440:	4604      	mov	r4, r0
 801a442:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801a446:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801a448:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801a44a:	3a01      	subs	r2, #1
 801a44c:	8702      	strh	r2, [r0, #56]	; 0x38
 801a44e:	1c5a      	adds	r2, r3, #1
 801a450:	b292      	uxth	r2, r2
 801a452:	2a09      	cmp	r2, #9
 801a454:	bf8a      	itet	hi
 801a456:	3b09      	subhi	r3, #9
 801a458:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801a45a:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801a45c:	f7ff ffb7 	bl	801a3ce <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a460:	8c23      	ldrh	r3, [r4, #32]
 801a462:	2b01      	cmp	r3, #1
 801a464:	bf9c      	itt	ls
 801a466:	3301      	addls	r3, #1
 801a468:	8423      	strhls	r3, [r4, #32]
 801a46a:	8be3      	ldrh	r3, [r4, #30]
 801a46c:	b90b      	cbnz	r3, 801a472 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801a46e:	2302      	movs	r3, #2
 801a470:	83e3      	strh	r3, [r4, #30]
 801a472:	8be3      	ldrh	r3, [r4, #30]
 801a474:	4628      	mov	r0, r5
 801a476:	3b01      	subs	r3, #1
 801a478:	b29b      	uxth	r3, r3
 801a47a:	83e3      	strh	r3, [r4, #30]
 801a47c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a480:	8365      	strh	r5, [r4, #26]
 801a482:	bd38      	pop	{r3, r4, r5, pc}

0801a484 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801a484:	428a      	cmp	r2, r1
 801a486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a48a:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801a48c:	d932      	bls.n	801a4f4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801a48e:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801a490:	1a54      	subs	r4, r2, r1
 801a492:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801a496:	19ee      	adds	r6, r5, r7
 801a498:	fa1f fe84 	uxth.w	lr, r4
 801a49c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801a4a0:	3e01      	subs	r6, #1
 801a4a2:	b2b4      	uxth	r4, r6
 801a4a4:	eba4 090e 	sub.w	r9, r4, lr
 801a4a8:	fa1f f989 	uxth.w	r9, r9
 801a4ac:	2c09      	cmp	r4, #9
 801a4ae:	4626      	mov	r6, r4
 801a4b0:	bf88      	it	hi
 801a4b2:	f1a4 060a 	subhi.w	r6, r4, #10
 801a4b6:	f1bc 0f00 	cmp.w	ip, #0
 801a4ba:	f104 34ff 	add.w	r4, r4, #4294967295
 801a4be:	bf08      	it	eq
 801a4c0:	f04f 0c02 	moveq.w	ip, #2
 801a4c4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801a4c8:	b2a4      	uxth	r4, r4
 801a4ca:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a4ce:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801a4d2:	454c      	cmp	r4, r9
 801a4d4:	fa1f fc8c 	uxth.w	ip, ip
 801a4d8:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801a4dc:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801a4e0:	d1e4      	bne.n	801a4ac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801a4e2:	eba5 050e 	sub.w	r5, r5, lr
 801a4e6:	eb0e 0408 	add.w	r4, lr, r8
 801a4ea:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801a4ee:	8705      	strh	r5, [r0, #56]	; 0x38
 801a4f0:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801a4f4:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801a4f6:	250a      	movs	r5, #10
 801a4f8:	1a64      	subs	r4, r4, r1
 801a4fa:	4439      	add	r1, r7
 801a4fc:	b289      	uxth	r1, r1
 801a4fe:	8704      	strh	r4, [r0, #56]	; 0x38
 801a500:	2909      	cmp	r1, #9
 801a502:	bf88      	it	hi
 801a504:	390a      	subhi	r1, #10
 801a506:	86c1      	strh	r1, [r0, #54]	; 0x36
 801a508:	b18a      	cbz	r2, 801a52e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801a50a:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801a50c:	3a01      	subs	r2, #1
 801a50e:	3101      	adds	r1, #1
 801a510:	b292      	uxth	r2, r2
 801a512:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801a516:	8701      	strh	r1, [r0, #56]	; 0x38
 801a518:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801a51a:	b901      	cbnz	r1, 801a51e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801a51c:	86c5      	strh	r5, [r0, #54]	; 0x36
 801a51e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801a520:	3901      	subs	r1, #1
 801a522:	b289      	uxth	r1, r1
 801a524:	86c1      	strh	r1, [r0, #54]	; 0x36
 801a526:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801a52a:	844c      	strh	r4, [r1, #34]	; 0x22
 801a52c:	e7ec      	b.n	801a508 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801a52e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a532:	f7ff bf4c 	b.w	801a3ce <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801a536 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801a536:	b570      	push	{r4, r5, r6, lr}
 801a538:	2500      	movs	r5, #0
 801a53a:	4295      	cmp	r5, r2
 801a53c:	d011      	beq.n	801a562 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801a53e:	8bc4      	ldrh	r4, [r0, #30]
 801a540:	f831 6b02 	ldrh.w	r6, [r1], #2
 801a544:	4414      	add	r4, r2
 801a546:	3c01      	subs	r4, #1
 801a548:	1b64      	subs	r4, r4, r5
 801a54a:	b2a4      	uxth	r4, r4
 801a54c:	2c01      	cmp	r4, #1
 801a54e:	bf88      	it	hi
 801a550:	3c02      	subhi	r4, #2
 801a552:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801a556:	8b64      	ldrh	r4, [r4, #26]
 801a558:	42b4      	cmp	r4, r6
 801a55a:	d117      	bne.n	801a58c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801a55c:	3501      	adds	r5, #1
 801a55e:	b2ad      	uxth	r5, r5
 801a560:	e7eb      	b.n	801a53a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801a562:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a566:	2400      	movs	r4, #0
 801a568:	4413      	add	r3, r2
 801a56a:	b2a2      	uxth	r2, r4
 801a56c:	429a      	cmp	r2, r3
 801a56e:	da0f      	bge.n	801a590 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801a570:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801a572:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801a576:	3401      	adds	r4, #1
 801a578:	4432      	add	r2, r6
 801a57a:	b292      	uxth	r2, r2
 801a57c:	2a09      	cmp	r2, #9
 801a57e:	bf88      	it	hi
 801a580:	3a0a      	subhi	r2, #10
 801a582:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801a586:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801a588:	42aa      	cmp	r2, r5
 801a58a:	d0ee      	beq.n	801a56a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801a58c:	2000      	movs	r0, #0
 801a58e:	bd70      	pop	{r4, r5, r6, pc}
 801a590:	2001      	movs	r0, #1
 801a592:	e7fc      	b.n	801a58e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801a594 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801a594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a598:	4605      	mov	r5, r0
 801a59a:	4616      	mov	r6, r2
 801a59c:	1c8c      	adds	r4, r1, #2
 801a59e:	8809      	ldrh	r1, [r1, #0]
 801a5a0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801a5a4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801a5a8:	42b3      	cmp	r3, r6
 801a5aa:	d124      	bne.n	801a5f6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801a5ac:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801a5b0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801a5b4:	f001 070f 	and.w	r7, r1, #15
 801a5b8:	4652      	mov	r2, sl
 801a5ba:	f8cd 8000 	str.w	r8, [sp]
 801a5be:	464b      	mov	r3, r9
 801a5c0:	4621      	mov	r1, r4
 801a5c2:	4628      	mov	r0, r5
 801a5c4:	f7ff ffb7 	bl	801a536 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801a5c8:	4683      	mov	fp, r0
 801a5ca:	b168      	cbz	r0, 801a5e8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801a5cc:	eb0a 0109 	add.w	r1, sl, r9
 801a5d0:	463a      	mov	r2, r7
 801a5d2:	4628      	mov	r0, r5
 801a5d4:	4441      	add	r1, r8
 801a5d6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801a5da:	4649      	mov	r1, r9
 801a5dc:	f7ff ff52 	bl	801a484 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801a5e0:	4658      	mov	r0, fp
 801a5e2:	b003      	add	sp, #12
 801a5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5e8:	eb07 010a 	add.w	r1, r7, sl
 801a5ec:	4449      	add	r1, r9
 801a5ee:	4441      	add	r1, r8
 801a5f0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801a5f4:	e7d2      	b.n	801a59c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801a5f6:	f04f 0b00 	mov.w	fp, #0
 801a5fa:	e7f1      	b.n	801a5e0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801a5fc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801a5fc:	b570      	push	{r4, r5, r6, lr}
 801a5fe:	8810      	ldrh	r0, [r2, #0]
 801a600:	4298      	cmp	r0, r3
 801a602:	d817      	bhi.n	801a634 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a604:	1e48      	subs	r0, r1, #1
 801a606:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801a60a:	4298      	cmp	r0, r3
 801a60c:	d312      	bcc.n	801a634 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a60e:	2400      	movs	r4, #0
 801a610:	428c      	cmp	r4, r1
 801a612:	d20f      	bcs.n	801a634 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a614:	1860      	adds	r0, r4, r1
 801a616:	1040      	asrs	r0, r0, #1
 801a618:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801a61c:	0085      	lsls	r5, r0, #2
 801a61e:	42b3      	cmp	r3, r6
 801a620:	d902      	bls.n	801a628 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801a622:	3001      	adds	r0, #1
 801a624:	b284      	uxth	r4, r0
 801a626:	e7f3      	b.n	801a610 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a628:	d201      	bcs.n	801a62e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801a62a:	b281      	uxth	r1, r0
 801a62c:	e7f0      	b.n	801a610 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a62e:	442a      	add	r2, r5
 801a630:	8850      	ldrh	r0, [r2, #2]
 801a632:	bd70      	pop	{r4, r5, r6, pc}
 801a634:	2000      	movs	r0, #0
 801a636:	e7fc      	b.n	801a632 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801a638 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801a638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a63c:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801a63e:	4604      	mov	r4, r0
 801a640:	260b      	movs	r6, #11
 801a642:	886f      	ldrh	r7, [r5, #2]
 801a644:	087f      	lsrs	r7, r7, #1
 801a646:	3e01      	subs	r6, #1
 801a648:	d013      	beq.n	801a672 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801a64a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a64c:	462a      	mov	r2, r5
 801a64e:	4639      	mov	r1, r7
 801a650:	4620      	mov	r0, r4
 801a652:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a656:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801a65a:	4643      	mov	r3, r8
 801a65c:	f7ff ffce 	bl	801a5fc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801a660:	b138      	cbz	r0, 801a672 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801a662:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801a666:	4642      	mov	r2, r8
 801a668:	4620      	mov	r0, r4
 801a66a:	f7ff ff93 	bl	801a594 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801a66e:	2800      	cmp	r0, #0
 801a670:	d1e9      	bne.n	801a646 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801a672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801a678 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801a678:	b570      	push	{r4, r5, r6, lr}
 801a67a:	694a      	ldr	r2, [r1, #20]
 801a67c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801a67e:	684b      	ldr	r3, [r1, #4]
 801a680:	1b54      	subs	r4, r2, r5
 801a682:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801a684:	f000 8106 	beq.w	801a894 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801a688:	1b9b      	subs	r3, r3, r6
 801a68a:	d003      	beq.n	801a694 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801a68c:	4363      	muls	r3, r4
 801a68e:	2210      	movs	r2, #16
 801a690:	fb93 f3f2 	sdiv	r3, r3, r2
 801a694:	680c      	ldr	r4, [r1, #0]
 801a696:	698a      	ldr	r2, [r1, #24]
 801a698:	1b65      	subs	r5, r4, r5
 801a69a:	f000 80fd 	beq.w	801a898 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801a69e:	1b92      	subs	r2, r2, r6
 801a6a0:	d003      	beq.n	801a6aa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801a6a2:	436a      	muls	r2, r5
 801a6a4:	2410      	movs	r4, #16
 801a6a6:	fb92 f2f4 	sdiv	r2, r2, r4
 801a6aa:	1a9b      	subs	r3, r3, r2
 801a6ac:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801a8d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801a6b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a6b4:	460a      	mov	r2, r1
 801a6b6:	ee07 3a90 	vmov	s15, r3
 801a6ba:	f100 040c 	add.w	r4, r0, #12
 801a6be:	4603      	mov	r3, r0
 801a6c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a6c4:	ee67 7a84 	vmul.f32	s15, s15, s8
 801a6c8:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801a6cc:	eeb1 6a43 	vneg.f32	s12, s6
 801a6d0:	edd2 7a02 	vldr	s15, [r2, #8]
 801a6d4:	3214      	adds	r2, #20
 801a6d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801a6da:	ece3 6a01 	vstmia	r3!, {s13}
 801a6de:	429c      	cmp	r4, r3
 801a6e0:	ed52 7a02 	vldr	s15, [r2, #-8]
 801a6e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a6e8:	edc3 7a02 	vstr	s15, [r3, #8]
 801a6ec:	ed52 7a01 	vldr	s15, [r2, #-4]
 801a6f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a6f4:	edc3 7a05 	vstr	s15, [r3, #20]
 801a6f8:	d1ea      	bne.n	801a6d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801a6fa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a6fc:	698b      	ldr	r3, [r1, #24]
 801a6fe:	edd0 4a02 	vldr	s9, [r0, #8]
 801a702:	1a9b      	subs	r3, r3, r2
 801a704:	edd0 3a00 	vldr	s7, [r0]
 801a708:	edd0 6a01 	vldr	s13, [r0, #4]
 801a70c:	ee07 3a90 	vmov	s15, r3
 801a710:	684b      	ldr	r3, [r1, #4]
 801a712:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801a716:	ed90 5a05 	vldr	s10, [r0, #20]
 801a71a:	1a9b      	subs	r3, r3, r2
 801a71c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a720:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801a724:	ed90 2a03 	vldr	s4, [r0, #12]
 801a728:	ee07 3a10 	vmov	s14, r3
 801a72c:	edd0 5a04 	vldr	s11, [r0, #16]
 801a730:	ee67 7a84 	vmul.f32	s15, s15, s8
 801a734:	ed90 1a07 	vldr	s2, [r0, #28]
 801a738:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a73c:	edd0 2a06 	vldr	s5, [r0, #24]
 801a740:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801a744:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801a748:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a74c:	ee32 5a45 	vsub.f32	s10, s4, s10
 801a750:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a754:	ee67 7a83 	vmul.f32	s15, s15, s6
 801a758:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801a75c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a75e:	694a      	ldr	r2, [r1, #20]
 801a760:	1b13      	subs	r3, r2, r4
 801a762:	ee07 3a10 	vmov	s14, r3
 801a766:	680b      	ldr	r3, [r1, #0]
 801a768:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a76c:	1b1b      	subs	r3, r3, r4
 801a76e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a772:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801a776:	ee07 3a10 	vmov	s14, r3
 801a77a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a77e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a782:	eee6 4a87 	vfma.f32	s9, s13, s14
 801a786:	ee64 4a86 	vmul.f32	s9, s9, s12
 801a78a:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801a78e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a790:	698b      	ldr	r3, [r1, #24]
 801a792:	1a9b      	subs	r3, r3, r2
 801a794:	ee06 3a90 	vmov	s13, r3
 801a798:	684b      	ldr	r3, [r1, #4]
 801a79a:	1a9b      	subs	r3, r3, r2
 801a79c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a7a0:	ee07 3a10 	vmov	s14, r3
 801a7a4:	ee66 6a84 	vmul.f32	s13, s13, s8
 801a7a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a7ac:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801a7b0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a7b4:	eee5 6a87 	vfma.f32	s13, s11, s14
 801a7b8:	ee66 6a83 	vmul.f32	s13, s13, s6
 801a7bc:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801a7c0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a7c2:	694a      	ldr	r2, [r1, #20]
 801a7c4:	1b13      	subs	r3, r2, r4
 801a7c6:	ee07 3a10 	vmov	s14, r3
 801a7ca:	680b      	ldr	r3, [r1, #0]
 801a7cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a7d0:	1b1b      	subs	r3, r3, r4
 801a7d2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a7d6:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801a7da:	ee07 3a10 	vmov	s14, r3
 801a7de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a7e2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a7e6:	eea5 5a87 	vfma.f32	s10, s11, s14
 801a7ea:	edd0 5a08 	vldr	s11, [r0, #32]
 801a7ee:	ee31 1a65 	vsub.f32	s2, s2, s11
 801a7f2:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801a7f6:	ee25 5a06 	vmul.f32	s10, s10, s12
 801a7fa:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801a7fe:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a800:	698b      	ldr	r3, [r1, #24]
 801a802:	1a9b      	subs	r3, r3, r2
 801a804:	ee07 3a10 	vmov	s14, r3
 801a808:	684b      	ldr	r3, [r1, #4]
 801a80a:	1a9b      	subs	r3, r3, r2
 801a80c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a810:	ee01 3a90 	vmov	s3, r3
 801a814:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a818:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a81c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801a820:	ee61 1a84 	vmul.f32	s3, s3, s8
 801a824:	eea1 7a21 	vfma.f32	s14, s2, s3
 801a828:	ee27 7a03 	vmul.f32	s14, s14, s6
 801a82c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801a830:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a832:	694a      	ldr	r2, [r1, #20]
 801a834:	1b13      	subs	r3, r2, r4
 801a836:	ee03 3a10 	vmov	s6, r3
 801a83a:	680b      	ldr	r3, [r1, #0]
 801a83c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a840:	1b1b      	subs	r3, r3, r4
 801a842:	ee23 3a04 	vmul.f32	s6, s6, s8
 801a846:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801a84a:	ee03 3a10 	vmov	s6, r3
 801a84e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a852:	ee23 4a04 	vmul.f32	s8, s6, s8
 801a856:	eee1 5a04 	vfma.f32	s11, s2, s8
 801a85a:	ee25 6a86 	vmul.f32	s12, s11, s12
 801a85e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801a862:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801a866:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801a86a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801a86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a872:	dd13      	ble.n	801a89c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801a874:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a878:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801a87c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a87e:	eee3 7a87 	vfma.f32	s15, s7, s14
 801a882:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a88a:	dd15      	ble.n	801a8b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801a88c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a890:	6403      	str	r3, [r0, #64]	; 0x40
 801a892:	bd70      	pop	{r4, r5, r6, pc}
 801a894:	4623      	mov	r3, r4
 801a896:	e6fd      	b.n	801a694 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801a898:	462a      	mov	r2, r5
 801a89a:	e706      	b.n	801a6aa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801a89c:	d502      	bpl.n	801a8a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801a89e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a8a2:	e7e9      	b.n	801a878 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801a8a4:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801a8a8:	eea3 2a85 	vfma.f32	s4, s7, s10
 801a8ac:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801a8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8b4:	dade      	bge.n	801a874 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801a8b6:	e7f2      	b.n	801a89e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801a8b8:	d502      	bpl.n	801a8c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801a8ba:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a8be:	e7e7      	b.n	801a890 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801a8c0:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801a8c4:	eee3 4a86 	vfma.f32	s9, s7, s12
 801a8c8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801a8cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8d0:	dadc      	bge.n	801a88c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801a8d2:	e7f2      	b.n	801a8ba <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801a8d4:	3d800000 	.word	0x3d800000

0801a8d8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801a8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a8dc:	2714      	movs	r7, #20
 801a8de:	435f      	muls	r7, r3
 801a8e0:	eb02 0c07 	add.w	ip, r2, r7
 801a8e4:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801a8e8:	f115 0e0f 	adds.w	lr, r5, #15
 801a8ec:	f100 80a2 	bmi.w	801aa34 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801a8f0:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801a8f4:	9c08      	ldr	r4, [sp, #32]
 801a8f6:	2614      	movs	r6, #20
 801a8f8:	f8c0 e014 	str.w	lr, [r0, #20]
 801a8fc:	4366      	muls	r6, r4
 801a8fe:	eb02 0806 	add.w	r8, r2, r6
 801a902:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801a906:	f115 040f 	adds.w	r4, r5, #15
 801a90a:	f100 809f 	bmi.w	801aa4c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801a90e:	1124      	asrs	r4, r4, #4
 801a910:	eba4 040e 	sub.w	r4, r4, lr
 801a914:	6184      	str	r4, [r0, #24]
 801a916:	2c00      	cmp	r4, #0
 801a918:	f000 808a 	beq.w	801aa30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801a91c:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801a920:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801a924:	5995      	ldr	r5, [r2, r6]
 801a926:	eba4 0809 	sub.w	r8, r4, r9
 801a92a:	59d4      	ldr	r4, [r2, r7]
 801a92c:	eba5 0a04 	sub.w	sl, r5, r4
 801a930:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801a934:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801a938:	fb0e fe05 	mul.w	lr, lr, r5
 801a93c:	fb0a ee19 	mls	lr, sl, r9, lr
 801a940:	fb08 e404 	mla	r4, r8, r4, lr
 801a944:	3c01      	subs	r4, #1
 801a946:	19a4      	adds	r4, r4, r6
 801a948:	f100 808c 	bmi.w	801aa64 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801a94c:	fb94 fef6 	sdiv	lr, r4, r6
 801a950:	fb06 441e 	mls	r4, r6, lr, r4
 801a954:	f8c0 e000 	str.w	lr, [r0]
 801a958:	6104      	str	r4, [r0, #16]
 801a95a:	2d00      	cmp	r5, #0
 801a95c:	f2c0 8095 	blt.w	801aa8a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801a960:	fb95 f4f6 	sdiv	r4, r5, r6
 801a964:	fb06 5514 	mls	r5, r6, r4, r5
 801a968:	6044      	str	r4, [r0, #4]
 801a96a:	6085      	str	r5, [r0, #8]
 801a96c:	60c6      	str	r6, [r0, #12]
 801a96e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a972:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801a976:	6945      	ldr	r5, [r0, #20]
 801a978:	59d2      	ldr	r2, [r2, r7]
 801a97a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801a97e:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801aaac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801a982:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801a986:	ee07 4a10 	vmov	s14, r4
 801a98a:	6804      	ldr	r4, [r0, #0]
 801a98c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801a990:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a994:	ee07 2a90 	vmov	s15, r2
 801a998:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a99c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a9a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a9a4:	edd3 6a00 	vldr	s13, [r3]
 801a9a8:	eee6 6a07 	vfma.f32	s13, s12, s14
 801a9ac:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801a9b0:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a9b4:	edc0 6a07 	vstr	s13, [r0, #28]
 801a9b8:	edd0 6a01 	vldr	s13, [r0, #4]
 801a9bc:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801a9c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a9c4:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801a9c8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a9cc:	ed80 6a08 	vstr	s12, [r0, #32]
 801a9d0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801a9d2:	6242      	str	r2, [r0, #36]	; 0x24
 801a9d4:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801a9d8:	ed93 6a03 	vldr	s12, [r3, #12]
 801a9dc:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a9e0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801a9e4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801a9e8:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801a9ec:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801a9f0:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801a9f4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a9f8:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801a9fc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a9fe:	6302      	str	r2, [r0, #48]	; 0x30
 801aa00:	ed93 6a06 	vldr	s12, [r3, #24]
 801aa04:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801aa08:	eea5 6a87 	vfma.f32	s12, s11, s14
 801aa0c:	eeb0 7a46 	vmov.f32	s14, s12
 801aa10:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801aa14:	eea6 7a27 	vfma.f32	s14, s12, s15
 801aa18:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801aa1c:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801aa20:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801aa24:	eee6 7a87 	vfma.f32	s15, s13, s14
 801aa28:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801aa2c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801aa2e:	63c3      	str	r3, [r0, #60]	; 0x3c
 801aa30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa34:	2410      	movs	r4, #16
 801aa36:	f1c5 0501 	rsb	r5, r5, #1
 801aa3a:	fb9e fef4 	sdiv	lr, lr, r4
 801aa3e:	f015 050f 	ands.w	r5, r5, #15
 801aa42:	bf18      	it	ne
 801aa44:	2501      	movne	r5, #1
 801aa46:	ebae 0e05 	sub.w	lr, lr, r5
 801aa4a:	e753      	b.n	801a8f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801aa4c:	f04f 0910 	mov.w	r9, #16
 801aa50:	f1c5 0501 	rsb	r5, r5, #1
 801aa54:	fb94 f4f9 	sdiv	r4, r4, r9
 801aa58:	f015 050f 	ands.w	r5, r5, #15
 801aa5c:	bf18      	it	ne
 801aa5e:	2501      	movne	r5, #1
 801aa60:	1b64      	subs	r4, r4, r5
 801aa62:	e755      	b.n	801a910 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801aa64:	4264      	negs	r4, r4
 801aa66:	fb94 fef6 	sdiv	lr, r4, r6
 801aa6a:	f1ce 0800 	rsb	r8, lr, #0
 801aa6e:	fb06 441e 	mls	r4, r6, lr, r4
 801aa72:	f8c0 8000 	str.w	r8, [r0]
 801aa76:	6104      	str	r4, [r0, #16]
 801aa78:	2c00      	cmp	r4, #0
 801aa7a:	f43f af6e 	beq.w	801a95a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801aa7e:	ea6f 0e0e 	mvn.w	lr, lr
 801aa82:	1b34      	subs	r4, r6, r4
 801aa84:	f8c0 e000 	str.w	lr, [r0]
 801aa88:	e766      	b.n	801a958 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801aa8a:	426d      	negs	r5, r5
 801aa8c:	fb95 f4f6 	sdiv	r4, r5, r6
 801aa90:	f1c4 0e00 	rsb	lr, r4, #0
 801aa94:	fb06 5514 	mls	r5, r6, r4, r5
 801aa98:	f8c0 e004 	str.w	lr, [r0, #4]
 801aa9c:	6085      	str	r5, [r0, #8]
 801aa9e:	2d00      	cmp	r5, #0
 801aaa0:	f43f af64 	beq.w	801a96c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801aaa4:	43e4      	mvns	r4, r4
 801aaa6:	1b75      	subs	r5, r6, r5
 801aaa8:	6044      	str	r4, [r0, #4]
 801aaaa:	e75e      	b.n	801a96a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801aaac:	3d800000 	.word	0x3d800000

0801aab0 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801aab0:	4602      	mov	r2, r0
 801aab2:	b148      	cbz	r0, 801aac8 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801aab4:	2300      	movs	r3, #0
 801aab6:	b298      	uxth	r0, r3
 801aab8:	3301      	adds	r3, #1
 801aaba:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801aabe:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801aac2:	2900      	cmp	r1, #0
 801aac4:	d1f7      	bne.n	801aab6 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801aac6:	4770      	bx	lr
 801aac8:	4770      	bx	lr

0801aaca <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801aaca:	b530      	push	{r4, r5, lr}
 801aacc:	4604      	mov	r4, r0
 801aace:	b159      	cbz	r1, 801aae8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801aad0:	b148      	cbz	r0, 801aae6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801aad2:	2300      	movs	r3, #0
 801aad4:	b298      	uxth	r0, r3
 801aad6:	4282      	cmp	r2, r0
 801aad8:	d905      	bls.n	801aae6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801aada:	5ccd      	ldrb	r5, [r1, r3]
 801aadc:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801aae0:	3301      	adds	r3, #1
 801aae2:	2d00      	cmp	r5, #0
 801aae4:	d1f6      	bne.n	801aad4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801aae6:	bd30      	pop	{r4, r5, pc}
 801aae8:	4608      	mov	r0, r1
 801aaea:	e7fc      	b.n	801aae6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801aaec <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 801aaec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aaee:	b08b      	sub	sp, #44	; 0x2c
 801aaf0:	468c      	mov	ip, r1
 801aaf2:	4604      	mov	r4, r0
 801aaf4:	2100      	movs	r1, #0
 801aaf6:	261f      	movs	r6, #31
 801aaf8:	af01      	add	r7, sp, #4
 801aafa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801aafe:	1e71      	subs	r1, r6, #1
 801ab00:	fb94 fef3 	sdiv	lr, r4, r3
 801ab04:	fb03 441e 	mls	r4, r3, lr, r4
 801ab08:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801ab0c:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801ab10:	b2ec      	uxtb	r4, r5
 801ab12:	2d09      	cmp	r5, #9
 801ab14:	bfd4      	ite	le
 801ab16:	3430      	addle	r4, #48	; 0x30
 801ab18:	3457      	addgt	r4, #87	; 0x57
 801ab1a:	b2e4      	uxtb	r4, r4
 801ab1c:	55bc      	strb	r4, [r7, r6]
 801ab1e:	4674      	mov	r4, lr
 801ab20:	b974      	cbnz	r4, 801ab40 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 801ab22:	2800      	cmp	r0, #0
 801ab24:	da05      	bge.n	801ab32 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 801ab26:	ab0a      	add	r3, sp, #40	; 0x28
 801ab28:	4419      	add	r1, r3
 801ab2a:	232d      	movs	r3, #45	; 0x2d
 801ab2c:	f801 3c24 	strb.w	r3, [r1, #-36]
 801ab30:	1eb1      	subs	r1, r6, #2
 801ab32:	3101      	adds	r1, #1
 801ab34:	4660      	mov	r0, ip
 801ab36:	4439      	add	r1, r7
 801ab38:	f7ff ffc7 	bl	801aaca <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801ab3c:	b00b      	add	sp, #44	; 0x2c
 801ab3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab40:	460e      	mov	r6, r1
 801ab42:	e7dc      	b.n	801aafe <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0801ab44 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801ab44:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab46:	468c      	mov	ip, r1
 801ab48:	b08b      	sub	sp, #44	; 0x2c
 801ab4a:	2100      	movs	r1, #0
 801ab4c:	ae01      	add	r6, sp, #4
 801ab4e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801ab52:	211f      	movs	r1, #31
 801ab54:	fbb0 f7f3 	udiv	r7, r0, r3
 801ab58:	fb03 0517 	mls	r5, r3, r7, r0
 801ab5c:	4638      	mov	r0, r7
 801ab5e:	b2ec      	uxtb	r4, r5
 801ab60:	2d09      	cmp	r5, #9
 801ab62:	bfd4      	ite	le
 801ab64:	3430      	addle	r4, #48	; 0x30
 801ab66:	3457      	addgt	r4, #87	; 0x57
 801ab68:	b2e4      	uxtb	r4, r4
 801ab6a:	558c      	strb	r4, [r1, r6]
 801ab6c:	1e4c      	subs	r4, r1, #1
 801ab6e:	b92f      	cbnz	r7, 801ab7c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801ab70:	4431      	add	r1, r6
 801ab72:	4660      	mov	r0, ip
 801ab74:	f7ff ffa9 	bl	801aaca <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801ab78:	b00b      	add	sp, #44	; 0x2c
 801ab7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab7c:	4621      	mov	r1, r4
 801ab7e:	e7e9      	b.n	801ab54 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801ab80 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801ab80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab84:	b085      	sub	sp, #20
 801ab86:	4691      	mov	r9, r2
 801ab88:	6802      	ldr	r2, [r0, #0]
 801ab8a:	4688      	mov	r8, r1
 801ab8c:	461c      	mov	r4, r3
 801ab8e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801ab92:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801ab96:	4683      	mov	fp, r0
 801ab98:	4610      	mov	r0, r2
 801ab9a:	9103      	str	r1, [sp, #12]
 801ab9c:	9302      	str	r3, [sp, #8]
 801ab9e:	9201      	str	r2, [sp, #4]
 801aba0:	f7ff ff86 	bl	801aab0 <_ZN8touchgfx7Unicode6strlenEPKt>
 801aba4:	f1b8 0f00 	cmp.w	r8, #0
 801aba8:	bf0c      	ite	eq
 801abaa:	4684      	moveq	ip, r0
 801abac:	f100 0c01 	addne.w	ip, r0, #1
 801abb0:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801abb4:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801abb8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801abba:	fa1f fc8c 	uxth.w	ip, ip
 801abbe:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801abc0:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801abc4:	9903      	ldr	r1, [sp, #12]
 801abc6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801abca:	d041      	beq.n	801ac50 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801abcc:	d834      	bhi.n	801ac38 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801abce:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801abd2:	d059      	beq.n	801ac88 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801abd4:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801abd8:	d03a      	beq.n	801ac50 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801abda:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801abde:	d034      	beq.n	801ac4a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801abe0:	2400      	movs	r4, #0
 801abe2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801abe6:	3a01      	subs	r2, #1
 801abe8:	b169      	cbz	r1, 801ac06 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801abea:	9911      	ldr	r1, [sp, #68]	; 0x44
 801abec:	458c      	cmp	ip, r1
 801abee:	da09      	bge.n	801ac04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801abf0:	eba1 010c 	sub.w	r1, r1, ip
 801abf4:	b289      	uxth	r1, r1
 801abf6:	b933      	cbnz	r3, 801ac06 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801abf8:	2e00      	cmp	r6, #0
 801abfa:	d051      	beq.n	801aca0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801abfc:	2800      	cmp	r0, #0
 801abfe:	d04f      	beq.n	801aca0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801ac00:	440c      	add	r4, r1
 801ac02:	b2a4      	uxth	r4, r4
 801ac04:	2100      	movs	r1, #0
 801ac06:	682b      	ldr	r3, [r5, #0]
 801ac08:	4293      	cmp	r3, r2
 801ac0a:	da07      	bge.n	801ac1c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801ac0c:	f1b8 0f00 	cmp.w	r8, #0
 801ac10:	d004      	beq.n	801ac1c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801ac12:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801ac16:	682b      	ldr	r3, [r5, #0]
 801ac18:	3301      	adds	r3, #1
 801ac1a:	602b      	str	r3, [r5, #0]
 801ac1c:	2730      	movs	r7, #48	; 0x30
 801ac1e:	2c00      	cmp	r4, #0
 801ac20:	d04e      	beq.n	801acc0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ac22:	682e      	ldr	r6, [r5, #0]
 801ac24:	3c01      	subs	r4, #1
 801ac26:	42b2      	cmp	r2, r6
 801ac28:	b2a4      	uxth	r4, r4
 801ac2a:	dd49      	ble.n	801acc0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ac2c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801ac30:	682b      	ldr	r3, [r5, #0]
 801ac32:	3301      	adds	r3, #1
 801ac34:	602b      	str	r3, [r5, #0]
 801ac36:	e7f2      	b.n	801ac1e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801ac38:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801ac3c:	d01d      	beq.n	801ac7a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801ac3e:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801ac42:	d002      	beq.n	801ac4a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801ac44:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801ac48:	e7c9      	b.n	801abde <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801ac4a:	4684      	mov	ip, r0
 801ac4c:	f04f 0800 	mov.w	r8, #0
 801ac50:	2c00      	cmp	r4, #0
 801ac52:	d0c6      	beq.n	801abe2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801ac54:	b947      	cbnz	r7, 801ac68 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801ac56:	2801      	cmp	r0, #1
 801ac58:	d106      	bne.n	801ac68 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801ac5a:	8814      	ldrh	r4, [r2, #0]
 801ac5c:	2c30      	cmp	r4, #48	; 0x30
 801ac5e:	bf02      	ittt	eq
 801ac60:	3202      	addeq	r2, #2
 801ac62:	4638      	moveq	r0, r7
 801ac64:	f8cb 2000 	streq.w	r2, [fp]
 801ac68:	45bc      	cmp	ip, r7
 801ac6a:	da14      	bge.n	801ac96 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801ac6c:	b2bf      	uxth	r7, r7
 801ac6e:	eba7 040c 	sub.w	r4, r7, ip
 801ac72:	46bc      	mov	ip, r7
 801ac74:	b2a4      	uxth	r4, r4
 801ac76:	2600      	movs	r6, #0
 801ac78:	e7b3      	b.n	801abe2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801ac7a:	4684      	mov	ip, r0
 801ac7c:	b16c      	cbz	r4, 801ac9a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801ac7e:	42b8      	cmp	r0, r7
 801ac80:	dd00      	ble.n	801ac84 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801ac82:	b2b8      	uxth	r0, r7
 801ac84:	2400      	movs	r4, #0
 801ac86:	e003      	b.n	801ac90 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801ac88:	f04f 0c01 	mov.w	ip, #1
 801ac8c:	2400      	movs	r4, #0
 801ac8e:	4660      	mov	r0, ip
 801ac90:	4626      	mov	r6, r4
 801ac92:	46a0      	mov	r8, r4
 801ac94:	e7a5      	b.n	801abe2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801ac96:	2400      	movs	r4, #0
 801ac98:	e7ed      	b.n	801ac76 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801ac9a:	4626      	mov	r6, r4
 801ac9c:	46a0      	mov	r8, r4
 801ac9e:	e7a0      	b.n	801abe2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801aca0:	2900      	cmp	r1, #0
 801aca2:	d0b0      	beq.n	801ac06 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801aca4:	2720      	movs	r7, #32
 801aca6:	682e      	ldr	r6, [r5, #0]
 801aca8:	2900      	cmp	r1, #0
 801acaa:	d0ac      	beq.n	801ac06 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801acac:	3901      	subs	r1, #1
 801acae:	4296      	cmp	r6, r2
 801acb0:	b289      	uxth	r1, r1
 801acb2:	daa7      	bge.n	801ac04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801acb4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801acb8:	682b      	ldr	r3, [r5, #0]
 801acba:	3301      	adds	r3, #1
 801acbc:	602b      	str	r3, [r5, #0]
 801acbe:	e7f2      	b.n	801aca6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801acc0:	b188      	cbz	r0, 801ace6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801acc2:	682b      	ldr	r3, [r5, #0]
 801acc4:	3801      	subs	r0, #1
 801acc6:	429a      	cmp	r2, r3
 801acc8:	b280      	uxth	r0, r0
 801acca:	dd0c      	ble.n	801ace6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801accc:	f8db 3000 	ldr.w	r3, [fp]
 801acd0:	1c9c      	adds	r4, r3, #2
 801acd2:	f8cb 4000 	str.w	r4, [fp]
 801acd6:	881c      	ldrh	r4, [r3, #0]
 801acd8:	682b      	ldr	r3, [r5, #0]
 801acda:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801acde:	682b      	ldr	r3, [r5, #0]
 801ace0:	3301      	adds	r3, #1
 801ace2:	602b      	str	r3, [r5, #0]
 801ace4:	e7ec      	b.n	801acc0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ace6:	2620      	movs	r6, #32
 801ace8:	b151      	cbz	r1, 801ad00 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801acea:	6828      	ldr	r0, [r5, #0]
 801acec:	3901      	subs	r1, #1
 801acee:	4282      	cmp	r2, r0
 801acf0:	b289      	uxth	r1, r1
 801acf2:	dd05      	ble.n	801ad00 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801acf4:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801acf8:	682b      	ldr	r3, [r5, #0]
 801acfa:	3301      	adds	r3, #1
 801acfc:	602b      	str	r3, [r5, #0]
 801acfe:	e7f3      	b.n	801ace8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801ad00:	b005      	add	sp, #20
 801ad02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ad06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801ad06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ad0a:	2400      	movs	r4, #0
 801ad0c:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801ad10:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801ad14:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801ad18:	8014      	strh	r4, [r2, #0]
 801ad1a:	701c      	strb	r4, [r3, #0]
 801ad1c:	f888 4000 	strb.w	r4, [r8]
 801ad20:	f88c 4000 	strb.w	r4, [ip]
 801ad24:	f88e 4000 	strb.w	r4, [lr]
 801ad28:	703c      	strb	r4, [r7, #0]
 801ad2a:	6804      	ldr	r4, [r0, #0]
 801ad2c:	b1a4      	cbz	r4, 801ad58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801ad2e:	8824      	ldrh	r4, [r4, #0]
 801ad30:	f04f 0901 	mov.w	r9, #1
 801ad34:	b314      	cbz	r4, 801ad7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801ad36:	2c2b      	cmp	r4, #43	; 0x2b
 801ad38:	d001      	beq.n	801ad3e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801ad3a:	2c20      	cmp	r4, #32
 801ad3c:	d110      	bne.n	801ad60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801ad3e:	8014      	strh	r4, [r2, #0]
 801ad40:	6804      	ldr	r4, [r0, #0]
 801ad42:	b10c      	cbz	r4, 801ad48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801ad44:	3402      	adds	r4, #2
 801ad46:	6004      	str	r4, [r0, #0]
 801ad48:	680c      	ldr	r4, [r1, #0]
 801ad4a:	b10c      	cbz	r4, 801ad50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801ad4c:	3401      	adds	r4, #1
 801ad4e:	600c      	str	r4, [r1, #0]
 801ad50:	6804      	ldr	r4, [r0, #0]
 801ad52:	b17c      	cbz	r4, 801ad74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801ad54:	8824      	ldrh	r4, [r4, #0]
 801ad56:	e7ed      	b.n	801ad34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801ad58:	680c      	ldr	r4, [r1, #0]
 801ad5a:	b17c      	cbz	r4, 801ad7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801ad5c:	7824      	ldrb	r4, [r4, #0]
 801ad5e:	e7e7      	b.n	801ad30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801ad60:	2c2d      	cmp	r4, #45	; 0x2d
 801ad62:	d102      	bne.n	801ad6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801ad64:	f883 9000 	strb.w	r9, [r3]
 801ad68:	e7ea      	b.n	801ad40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801ad6a:	2c23      	cmp	r4, #35	; 0x23
 801ad6c:	d107      	bne.n	801ad7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801ad6e:	f888 9000 	strb.w	r9, [r8]
 801ad72:	e7e5      	b.n	801ad40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801ad74:	680c      	ldr	r4, [r1, #0]
 801ad76:	b10c      	cbz	r4, 801ad7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801ad78:	7824      	ldrb	r4, [r4, #0]
 801ad7a:	e7db      	b.n	801ad34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801ad7c:	2400      	movs	r4, #0
 801ad7e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801ad82:	2b09      	cmp	r3, #9
 801ad84:	d901      	bls.n	801ad8a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801ad86:	2c2a      	cmp	r4, #42	; 0x2a
 801ad88:	d122      	bne.n	801add0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801ad8a:	2301      	movs	r3, #1
 801ad8c:	2c30      	cmp	r4, #48	; 0x30
 801ad8e:	f88e 3000 	strb.w	r3, [lr]
 801ad92:	d10d      	bne.n	801adb0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801ad94:	f88c 3000 	strb.w	r3, [ip]
 801ad98:	6803      	ldr	r3, [r0, #0]
 801ad9a:	b10b      	cbz	r3, 801ada0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801ad9c:	3302      	adds	r3, #2
 801ad9e:	6003      	str	r3, [r0, #0]
 801ada0:	680b      	ldr	r3, [r1, #0]
 801ada2:	b10b      	cbz	r3, 801ada8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801ada4:	3301      	adds	r3, #1
 801ada6:	600b      	str	r3, [r1, #0]
 801ada8:	6803      	ldr	r3, [r0, #0]
 801adaa:	2b00      	cmp	r3, #0
 801adac:	d02f      	beq.n	801ae0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801adae:	881c      	ldrh	r4, [r3, #0]
 801adb0:	2c2a      	cmp	r4, #42	; 0x2a
 801adb2:	d135      	bne.n	801ae20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801adb4:	f04f 33ff 	mov.w	r3, #4294967295
 801adb8:	6033      	str	r3, [r6, #0]
 801adba:	6803      	ldr	r3, [r0, #0]
 801adbc:	b10b      	cbz	r3, 801adc2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801adbe:	3302      	adds	r3, #2
 801adc0:	6003      	str	r3, [r0, #0]
 801adc2:	680b      	ldr	r3, [r1, #0]
 801adc4:	b10b      	cbz	r3, 801adca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801adc6:	3301      	adds	r3, #1
 801adc8:	600b      	str	r3, [r1, #0]
 801adca:	6803      	ldr	r3, [r0, #0]
 801adcc:	b31b      	cbz	r3, 801ae16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801adce:	881c      	ldrh	r4, [r3, #0]
 801add0:	2c2e      	cmp	r4, #46	; 0x2e
 801add2:	d11a      	bne.n	801ae0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801add4:	2301      	movs	r3, #1
 801add6:	703b      	strb	r3, [r7, #0]
 801add8:	6803      	ldr	r3, [r0, #0]
 801adda:	b10b      	cbz	r3, 801ade0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801addc:	3302      	adds	r3, #2
 801adde:	6003      	str	r3, [r0, #0]
 801ade0:	680b      	ldr	r3, [r1, #0]
 801ade2:	b10b      	cbz	r3, 801ade8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801ade4:	3301      	adds	r3, #1
 801ade6:	600b      	str	r3, [r1, #0]
 801ade8:	6803      	ldr	r3, [r0, #0]
 801adea:	2b00      	cmp	r3, #0
 801adec:	d036      	beq.n	801ae5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801adee:	881b      	ldrh	r3, [r3, #0]
 801adf0:	2b2a      	cmp	r3, #42	; 0x2a
 801adf2:	d137      	bne.n	801ae64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801adf4:	f04f 33ff 	mov.w	r3, #4294967295
 801adf8:	602b      	str	r3, [r5, #0]
 801adfa:	6803      	ldr	r3, [r0, #0]
 801adfc:	b10b      	cbz	r3, 801ae02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801adfe:	3302      	adds	r3, #2
 801ae00:	6003      	str	r3, [r0, #0]
 801ae02:	680b      	ldr	r3, [r1, #0]
 801ae04:	b10b      	cbz	r3, 801ae0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ae06:	3301      	adds	r3, #1
 801ae08:	600b      	str	r3, [r1, #0]
 801ae0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ae0e:	680c      	ldr	r4, [r1, #0]
 801ae10:	b134      	cbz	r4, 801ae20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801ae12:	7824      	ldrb	r4, [r4, #0]
 801ae14:	e7cc      	b.n	801adb0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801ae16:	680b      	ldr	r3, [r1, #0]
 801ae18:	2b00      	cmp	r3, #0
 801ae1a:	d0f6      	beq.n	801ae0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ae1c:	781c      	ldrb	r4, [r3, #0]
 801ae1e:	e7d7      	b.n	801add0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801ae20:	2300      	movs	r3, #0
 801ae22:	220a      	movs	r2, #10
 801ae24:	6033      	str	r3, [r6, #0]
 801ae26:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801ae2a:	fa1f f38c 	uxth.w	r3, ip
 801ae2e:	2b09      	cmp	r3, #9
 801ae30:	d8ce      	bhi.n	801add0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801ae32:	6833      	ldr	r3, [r6, #0]
 801ae34:	fb02 c303 	mla	r3, r2, r3, ip
 801ae38:	6033      	str	r3, [r6, #0]
 801ae3a:	6803      	ldr	r3, [r0, #0]
 801ae3c:	b10b      	cbz	r3, 801ae42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801ae3e:	3302      	adds	r3, #2
 801ae40:	6003      	str	r3, [r0, #0]
 801ae42:	680b      	ldr	r3, [r1, #0]
 801ae44:	b10b      	cbz	r3, 801ae4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801ae46:	3301      	adds	r3, #1
 801ae48:	600b      	str	r3, [r1, #0]
 801ae4a:	6803      	ldr	r3, [r0, #0]
 801ae4c:	b10b      	cbz	r3, 801ae52 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801ae4e:	881c      	ldrh	r4, [r3, #0]
 801ae50:	e7e9      	b.n	801ae26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ae52:	680c      	ldr	r4, [r1, #0]
 801ae54:	2c00      	cmp	r4, #0
 801ae56:	d0e6      	beq.n	801ae26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ae58:	7824      	ldrb	r4, [r4, #0]
 801ae5a:	e7e4      	b.n	801ae26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ae5c:	680b      	ldr	r3, [r1, #0]
 801ae5e:	b10b      	cbz	r3, 801ae64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801ae60:	781b      	ldrb	r3, [r3, #0]
 801ae62:	e7c5      	b.n	801adf0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801ae64:	2200      	movs	r2, #0
 801ae66:	240a      	movs	r4, #10
 801ae68:	602a      	str	r2, [r5, #0]
 801ae6a:	3b30      	subs	r3, #48	; 0x30
 801ae6c:	682a      	ldr	r2, [r5, #0]
 801ae6e:	b29e      	uxth	r6, r3
 801ae70:	2e09      	cmp	r6, #9
 801ae72:	d813      	bhi.n	801ae9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801ae74:	fb04 3302 	mla	r3, r4, r2, r3
 801ae78:	602b      	str	r3, [r5, #0]
 801ae7a:	6803      	ldr	r3, [r0, #0]
 801ae7c:	b10b      	cbz	r3, 801ae82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801ae7e:	3302      	adds	r3, #2
 801ae80:	6003      	str	r3, [r0, #0]
 801ae82:	680b      	ldr	r3, [r1, #0]
 801ae84:	b10b      	cbz	r3, 801ae8a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801ae86:	3301      	adds	r3, #1
 801ae88:	600b      	str	r3, [r1, #0]
 801ae8a:	6803      	ldr	r3, [r0, #0]
 801ae8c:	b10b      	cbz	r3, 801ae92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801ae8e:	881b      	ldrh	r3, [r3, #0]
 801ae90:	e7eb      	b.n	801ae6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801ae92:	680b      	ldr	r3, [r1, #0]
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	d0e8      	beq.n	801ae6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801ae98:	781b      	ldrb	r3, [r3, #0]
 801ae9a:	e7e6      	b.n	801ae6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801ae9c:	2a06      	cmp	r2, #6
 801ae9e:	bfa8      	it	ge
 801aea0:	2206      	movge	r2, #6
 801aea2:	602a      	str	r2, [r5, #0]
 801aea4:	e7b1      	b.n	801ae0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801aea6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801aea6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aeaa:	b0a3      	sub	sp, #140	; 0x8c
 801aeac:	2600      	movs	r6, #0
 801aeae:	4607      	mov	r7, r0
 801aeb0:	4688      	mov	r8, r1
 801aeb2:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801aeb6:	4631      	mov	r1, r6
 801aeb8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801aeba:	4648      	mov	r0, r9
 801aebc:	960d      	str	r6, [sp, #52]	; 0x34
 801aebe:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801aec2:	2242      	movs	r2, #66	; 0x42
 801aec4:	f010 f9e2 	bl	802b28c <memset>
 801aec8:	b15f      	cbz	r7, 801aee2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801aeca:	f108 3aff 	add.w	sl, r8, #4294967295
 801aece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aed0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aed2:	b152      	cbz	r2, 801aeea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801aed4:	8812      	ldrh	r2, [r2, #0]
 801aed6:	b10a      	cbz	r2, 801aedc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801aed8:	459a      	cmp	sl, r3
 801aeda:	dc2e      	bgt.n	801af3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801aedc:	2200      	movs	r2, #0
 801aede:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801aee2:	4638      	mov	r0, r7
 801aee4:	b023      	add	sp, #140	; 0x8c
 801aee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aeea:	9a08      	ldr	r2, [sp, #32]
 801aeec:	2a00      	cmp	r2, #0
 801aeee:	d0f5      	beq.n	801aedc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801aef0:	7812      	ldrb	r2, [r2, #0]
 801aef2:	e7f0      	b.n	801aed6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801aef4:	2d00      	cmp	r5, #0
 801aef6:	d0ea      	beq.n	801aece <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801aef8:	782a      	ldrb	r2, [r5, #0]
 801aefa:	b142      	cbz	r2, 801af0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801aefc:	2a25      	cmp	r2, #37	; 0x25
 801aefe:	d001      	beq.n	801af04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801af00:	459a      	cmp	sl, r3
 801af02:	dc08      	bgt.n	801af16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801af04:	f1bb 0f00 	cmp.w	fp, #0
 801af08:	d121      	bne.n	801af4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801af0a:	2d00      	cmp	r5, #0
 801af0c:	d0df      	beq.n	801aece <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801af0e:	782a      	ldrb	r2, [r5, #0]
 801af10:	f04f 0b00 	mov.w	fp, #0
 801af14:	e01d      	b.n	801af52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801af16:	f1bb 0f00 	cmp.w	fp, #0
 801af1a:	d077      	beq.n	801b00c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801af1c:	f8bb 2000 	ldrh.w	r2, [fp]
 801af20:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801af24:	f1bb 0f00 	cmp.w	fp, #0
 801af28:	d002      	beq.n	801af30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801af2a:	f10b 0202 	add.w	r2, fp, #2
 801af2e:	9209      	str	r2, [sp, #36]	; 0x24
 801af30:	b10d      	cbz	r5, 801af36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801af32:	3501      	adds	r5, #1
 801af34:	9508      	str	r5, [sp, #32]
 801af36:	3301      	adds	r3, #1
 801af38:	930d      	str	r3, [sp, #52]	; 0x34
 801af3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801af3c:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801af40:	f1bb 0f00 	cmp.w	fp, #0
 801af44:	d0d6      	beq.n	801aef4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801af46:	f8bb 2000 	ldrh.w	r2, [fp]
 801af4a:	2a00      	cmp	r2, #0
 801af4c:	d1d6      	bne.n	801aefc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801af4e:	f8bb 2000 	ldrh.w	r2, [fp]
 801af52:	2a00      	cmp	r2, #0
 801af54:	d0bb      	beq.n	801aece <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801af56:	459a      	cmp	sl, r3
 801af58:	ddb9      	ble.n	801aece <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801af5a:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801af5e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801af62:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801af66:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801af6a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801af6e:	960e      	str	r6, [sp, #56]	; 0x38
 801af70:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801af74:	960f      	str	r6, [sp, #60]	; 0x3c
 801af76:	f1bb 0f00 	cmp.w	fp, #0
 801af7a:	d002      	beq.n	801af82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801af7c:	f10b 0302 	add.w	r3, fp, #2
 801af80:	9309      	str	r3, [sp, #36]	; 0x24
 801af82:	b10d      	cbz	r5, 801af88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801af84:	1c6b      	adds	r3, r5, #1
 801af86:	9308      	str	r3, [sp, #32]
 801af88:	ab0f      	add	r3, sp, #60	; 0x3c
 801af8a:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801af8e:	a908      	add	r1, sp, #32
 801af90:	a809      	add	r0, sp, #36	; 0x24
 801af92:	9305      	str	r3, [sp, #20]
 801af94:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801af98:	9304      	str	r3, [sp, #16]
 801af9a:	ab0e      	add	r3, sp, #56	; 0x38
 801af9c:	9303      	str	r3, [sp, #12]
 801af9e:	ab0c      	add	r3, sp, #48	; 0x30
 801afa0:	9302      	str	r3, [sp, #8]
 801afa2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801afa6:	9301      	str	r3, [sp, #4]
 801afa8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801afac:	9300      	str	r3, [sp, #0]
 801afae:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801afb2:	f7ff fea8 	bl	801ad06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801afb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801afb8:	2b00      	cmp	r3, #0
 801afba:	bfbf      	itttt	lt
 801afbc:	6823      	ldrlt	r3, [r4, #0]
 801afbe:	3404      	addlt	r4, #4
 801afc0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801afc4:	930e      	strlt	r3, [sp, #56]	; 0x38
 801afc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801afc8:	2b00      	cmp	r3, #0
 801afca:	bfbe      	ittt	lt
 801afcc:	6823      	ldrlt	r3, [r4, #0]
 801afce:	3404      	addlt	r4, #4
 801afd0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801afd4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801afd8:	bfb8      	it	lt
 801afda:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801afdc:	b1d9      	cbz	r1, 801b016 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801afde:	880b      	ldrh	r3, [r1, #0]
 801afe0:	2b69      	cmp	r3, #105	; 0x69
 801afe2:	d01f      	beq.n	801b024 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801afe4:	d82f      	bhi.n	801b046 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801afe6:	2b58      	cmp	r3, #88	; 0x58
 801afe8:	d01c      	beq.n	801b024 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801afea:	d818      	bhi.n	801b01e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801afec:	2b25      	cmp	r3, #37	; 0x25
 801afee:	d034      	beq.n	801b05a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801aff0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aff2:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801aff6:	f1bb 0f00 	cmp.w	fp, #0
 801affa:	f000 80b7 	beq.w	801b16c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801affe:	f8bb 5000 	ldrh.w	r5, [fp]
 801b002:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801b006:	3301      	adds	r3, #1
 801b008:	930d      	str	r3, [sp, #52]	; 0x34
 801b00a:	e029      	b.n	801b060 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801b00c:	b10d      	cbz	r5, 801b012 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801b00e:	782a      	ldrb	r2, [r5, #0]
 801b010:	e786      	b.n	801af20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801b012:	462a      	mov	r2, r5
 801b014:	e784      	b.n	801af20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801b016:	2a00      	cmp	r2, #0
 801b018:	d0ea      	beq.n	801aff0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b01a:	7813      	ldrb	r3, [r2, #0]
 801b01c:	e7e0      	b.n	801afe0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801b01e:	3b63      	subs	r3, #99	; 0x63
 801b020:	2b01      	cmp	r3, #1
 801b022:	d8e5      	bhi.n	801aff0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b024:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801b028:	b329      	cbz	r1, 801b076 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801b02a:	880b      	ldrh	r3, [r1, #0]
 801b02c:	2b69      	cmp	r3, #105	; 0x69
 801b02e:	d063      	beq.n	801b0f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801b030:	d825      	bhi.n	801b07e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801b032:	2b63      	cmp	r3, #99	; 0x63
 801b034:	d038      	beq.n	801b0a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801b036:	2b64      	cmp	r3, #100	; 0x64
 801b038:	d05e      	beq.n	801b0f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801b03a:	2b58      	cmp	r3, #88	; 0x58
 801b03c:	d07a      	beq.n	801b134 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801b03e:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801b042:	4625      	mov	r5, r4
 801b044:	e036      	b.n	801b0b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b046:	2b73      	cmp	r3, #115	; 0x73
 801b048:	d0ec      	beq.n	801b024 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b04a:	d802      	bhi.n	801b052 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801b04c:	2b6f      	cmp	r3, #111	; 0x6f
 801b04e:	d1cf      	bne.n	801aff0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b050:	e7e8      	b.n	801b024 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b052:	2b75      	cmp	r3, #117	; 0x75
 801b054:	d0e6      	beq.n	801b024 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b056:	2b78      	cmp	r3, #120	; 0x78
 801b058:	e7f9      	b.n	801b04e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801b05a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b05c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801b060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b062:	b10b      	cbz	r3, 801b068 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801b064:	3302      	adds	r3, #2
 801b066:	9309      	str	r3, [sp, #36]	; 0x24
 801b068:	9b08      	ldr	r3, [sp, #32]
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	f43f af2f 	beq.w	801aece <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b070:	3301      	adds	r3, #1
 801b072:	9308      	str	r3, [sp, #32]
 801b074:	e72b      	b.n	801aece <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b076:	2a00      	cmp	r2, #0
 801b078:	d0e1      	beq.n	801b03e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b07a:	7813      	ldrb	r3, [r2, #0]
 801b07c:	e7d6      	b.n	801b02c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801b07e:	2b73      	cmp	r3, #115	; 0x73
 801b080:	d036      	beq.n	801b0f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801b082:	d807      	bhi.n	801b094 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801b084:	2b6f      	cmp	r3, #111	; 0x6f
 801b086:	d1da      	bne.n	801b03e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b088:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b08a:	1d25      	adds	r5, r4, #4
 801b08c:	2308      	movs	r3, #8
 801b08e:	eba8 0202 	sub.w	r2, r8, r2
 801b092:	e049      	b.n	801b128 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801b094:	2b75      	cmp	r3, #117	; 0x75
 801b096:	d042      	beq.n	801b11e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801b098:	2b78      	cmp	r3, #120	; 0x78
 801b09a:	d1d0      	bne.n	801b03e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b09c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b09e:	1d25      	adds	r5, r4, #4
 801b0a0:	2310      	movs	r3, #16
 801b0a2:	eba8 0202 	sub.w	r2, r8, r2
 801b0a6:	e03f      	b.n	801b128 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801b0a8:	6823      	ldr	r3, [r4, #0]
 801b0aa:	1d25      	adds	r5, r4, #4
 801b0ac:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801b0b0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801b0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b0b6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	d051      	beq.n	801b162 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801b0be:	881a      	ldrh	r2, [r3, #0]
 801b0c0:	a80d      	add	r0, sp, #52	; 0x34
 801b0c2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801b0c6:	462c      	mov	r4, r5
 801b0c8:	9005      	str	r0, [sp, #20]
 801b0ca:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801b0ce:	9004      	str	r0, [sp, #16]
 801b0d0:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b0d2:	9003      	str	r0, [sp, #12]
 801b0d4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801b0d8:	9002      	str	r0, [sp, #8]
 801b0da:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b0dc:	9001      	str	r0, [sp, #4]
 801b0de:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801b0e2:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801b0e6:	9000      	str	r0, [sp, #0]
 801b0e8:	a810      	add	r0, sp, #64	; 0x40
 801b0ea:	f7ff fd49 	bl	801ab80 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801b0ee:	e7b7      	b.n	801b060 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801b0f0:	1d25      	adds	r5, r4, #4
 801b0f2:	6823      	ldr	r3, [r4, #0]
 801b0f4:	9310      	str	r3, [sp, #64]	; 0x40
 801b0f6:	e7dd      	b.n	801b0b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b0f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b0fa:	230a      	movs	r3, #10
 801b0fc:	4649      	mov	r1, r9
 801b0fe:	6820      	ldr	r0, [r4, #0]
 801b100:	eba8 0202 	sub.w	r2, r8, r2
 801b104:	1d25      	adds	r5, r4, #4
 801b106:	b292      	uxth	r2, r2
 801b108:	f7ff fcf0 	bl	801aaec <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801b10c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801b110:	2b2d      	cmp	r3, #45	; 0x2d
 801b112:	d1cf      	bne.n	801b0b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b114:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b118:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b11a:	3302      	adds	r3, #2
 801b11c:	e7ea      	b.n	801b0f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801b11e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b120:	1d25      	adds	r5, r4, #4
 801b122:	230a      	movs	r3, #10
 801b124:	eba8 0202 	sub.w	r2, r8, r2
 801b128:	b292      	uxth	r2, r2
 801b12a:	4649      	mov	r1, r9
 801b12c:	6820      	ldr	r0, [r4, #0]
 801b12e:	f7ff fd09 	bl	801ab44 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801b132:	e7bf      	b.n	801b0b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b134:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b136:	2310      	movs	r3, #16
 801b138:	4649      	mov	r1, r9
 801b13a:	6820      	ldr	r0, [r4, #0]
 801b13c:	eba8 0202 	sub.w	r2, r8, r2
 801b140:	1d25      	adds	r5, r4, #4
 801b142:	b292      	uxth	r2, r2
 801b144:	f7ff fcfe 	bl	801ab44 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801b148:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801b14c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801b150:	2b00      	cmp	r3, #0
 801b152:	d0af      	beq.n	801b0b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b154:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801b158:	2919      	cmp	r1, #25
 801b15a:	d8f7      	bhi.n	801b14c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801b15c:	3b20      	subs	r3, #32
 801b15e:	8013      	strh	r3, [r2, #0]
 801b160:	e7f4      	b.n	801b14c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801b162:	9a08      	ldr	r2, [sp, #32]
 801b164:	2a00      	cmp	r2, #0
 801b166:	d0ab      	beq.n	801b0c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801b168:	7812      	ldrb	r2, [r2, #0]
 801b16a:	e7a9      	b.n	801b0c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801b16c:	2d00      	cmp	r5, #0
 801b16e:	f43f af48 	beq.w	801b002 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801b172:	782d      	ldrb	r5, [r5, #0]
 801b174:	e745      	b.n	801b002 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801b176 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801b176:	b507      	push	{r0, r1, r2, lr}
 801b178:	9300      	str	r3, [sp, #0]
 801b17a:	4613      	mov	r3, r2
 801b17c:	2200      	movs	r2, #0
 801b17e:	f7ff fe92 	bl	801aea6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801b182:	b003      	add	sp, #12
 801b184:	f85d fb04 	ldr.w	pc, [sp], #4

0801b188 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801b188:	b40c      	push	{r2, r3}
 801b18a:	b507      	push	{r0, r1, r2, lr}
 801b18c:	ab04      	add	r3, sp, #16
 801b18e:	f853 2b04 	ldr.w	r2, [r3], #4
 801b192:	9301      	str	r3, [sp, #4]
 801b194:	f7ff ffef 	bl	801b176 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801b198:	b003      	add	sp, #12
 801b19a:	f85d eb04 	ldr.w	lr, [sp], #4
 801b19e:	b002      	add	sp, #8
 801b1a0:	4770      	bx	lr
	...

0801b1a4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801b1a4:	4b01      	ldr	r3, [pc, #4]	; (801b1ac <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801b1a6:	6018      	str	r0, [r3, #0]
 801b1a8:	4770      	bx	lr
 801b1aa:	bf00      	nop
 801b1ac:	20027d10 	.word	0x20027d10

0801b1b0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801b1b0:	4b06      	ldr	r3, [pc, #24]	; (801b1cc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801b1b2:	881a      	ldrh	r2, [r3, #0]
 801b1b4:	4282      	cmp	r2, r0
 801b1b6:	d807      	bhi.n	801b1c8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801b1b8:	4b05      	ldr	r3, [pc, #20]	; (801b1d0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801b1ba:	881b      	ldrh	r3, [r3, #0]
 801b1bc:	4413      	add	r3, r2
 801b1be:	4298      	cmp	r0, r3
 801b1c0:	bfac      	ite	ge
 801b1c2:	2000      	movge	r0, #0
 801b1c4:	2001      	movlt	r0, #1
 801b1c6:	4770      	bx	lr
 801b1c8:	2000      	movs	r0, #0
 801b1ca:	4770      	bx	lr
 801b1cc:	20027d30 	.word	0x20027d30
 801b1d0:	20027d34 	.word	0x20027d34

0801b1d4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801b1d4:	b508      	push	{r3, lr}
 801b1d6:	4601      	mov	r1, r0
 801b1d8:	f7ff ffea 	bl	801b1b0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801b1dc:	b118      	cbz	r0, 801b1e6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801b1de:	4b02      	ldr	r3, [pc, #8]	; (801b1e8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801b1e0:	681b      	ldr	r3, [r3, #0]
 801b1e2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801b1e6:	bd08      	pop	{r3, pc}
 801b1e8:	20027d14 	.word	0x20027d14

0801b1ec <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801b1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b1ee:	4c24      	ldr	r4, [pc, #144]	; (801b280 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801b1f0:	6823      	ldr	r3, [r4, #0]
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	d042      	beq.n	801b27c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801b1f6:	4a23      	ldr	r2, [pc, #140]	; (801b284 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801b1f8:	4d23      	ldr	r5, [pc, #140]	; (801b288 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801b1fa:	8811      	ldrh	r1, [r2, #0]
 801b1fc:	f8b5 c000 	ldrh.w	ip, [r5]
 801b200:	4822      	ldr	r0, [pc, #136]	; (801b28c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801b202:	4461      	add	r1, ip
 801b204:	1c4a      	adds	r2, r1, #1
 801b206:	008f      	lsls	r7, r1, #2
 801b208:	f022 0201 	bic.w	r2, r2, #1
 801b20c:	19de      	adds	r6, r3, r7
 801b20e:	0412      	lsls	r2, r2, #16
 801b210:	6006      	str	r6, [r0, #0]
 801b212:	4e1f      	ldr	r6, [pc, #124]	; (801b290 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801b214:	0c12      	lsrs	r2, r2, #16
 801b216:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801b21a:	19da      	adds	r2, r3, r7
 801b21c:	6032      	str	r2, [r6, #0]
 801b21e:	220e      	movs	r2, #14
 801b220:	fb02 f20c 	mul.w	r2, r2, ip
 801b224:	3203      	adds	r2, #3
 801b226:	f022 0203 	bic.w	r2, r2, #3
 801b22a:	443a      	add	r2, r7
 801b22c:	4f19      	ldr	r7, [pc, #100]	; (801b294 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801b22e:	4413      	add	r3, r2
 801b230:	603b      	str	r3, [r7, #0]
 801b232:	2300      	movs	r3, #0
 801b234:	4f18      	ldr	r7, [pc, #96]	; (801b298 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801b236:	469c      	mov	ip, r3
 801b238:	803b      	strh	r3, [r7, #0]
 801b23a:	4f18      	ldr	r7, [pc, #96]	; (801b29c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801b23c:	683f      	ldr	r7, [r7, #0]
 801b23e:	1aba      	subs	r2, r7, r2
 801b240:	4f17      	ldr	r7, [pc, #92]	; (801b2a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801b242:	603a      	str	r2, [r7, #0]
 801b244:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801b248:	4a16      	ldr	r2, [pc, #88]	; (801b2a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801b24a:	8013      	strh	r3, [r2, #0]
 801b24c:	428b      	cmp	r3, r1
 801b24e:	d10d      	bne.n	801b26c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801b250:	882d      	ldrh	r5, [r5, #0]
 801b252:	2300      	movs	r3, #0
 801b254:	6830      	ldr	r0, [r6, #0]
 801b256:	240e      	movs	r4, #14
 801b258:	429d      	cmp	r5, r3
 801b25a:	d90f      	bls.n	801b27c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801b25c:	fb04 0203 	mla	r2, r4, r3, r0
 801b260:	3301      	adds	r3, #1
 801b262:	7b11      	ldrb	r1, [r2, #12]
 801b264:	f36f 1145 	bfc	r1, #5, #1
 801b268:	7311      	strb	r1, [r2, #12]
 801b26a:	e7f5      	b.n	801b258 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801b26c:	6822      	ldr	r2, [r4, #0]
 801b26e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801b272:	6802      	ldr	r2, [r0, #0]
 801b274:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801b278:	3301      	adds	r3, #1
 801b27a:	e7e7      	b.n	801b24c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801b27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b27e:	bf00      	nop
 801b280:	20027d14 	.word	0x20027d14
 801b284:	20027d30 	.word	0x20027d30
 801b288:	20027d34 	.word	0x20027d34
 801b28c:	20027d28 	.word	0x20027d28
 801b290:	20027d18 	.word	0x20027d18
 801b294:	20027d20 	.word	0x20027d20
 801b298:	20027d32 	.word	0x20027d32
 801b29c:	20027d1c 	.word	0x20027d1c
 801b2a0:	20027d2c 	.word	0x20027d2c
 801b2a4:	20027d24 	.word	0x20027d24

0801b2a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801b2a8:	4b06      	ldr	r3, [pc, #24]	; (801b2c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801b2aa:	681b      	ldr	r3, [r3, #0]
 801b2ac:	b943      	cbnz	r3, 801b2c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801b2ae:	b139      	cbz	r1, 801b2c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801b2b0:	4b05      	ldr	r3, [pc, #20]	; (801b2c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801b2b2:	801a      	strh	r2, [r3, #0]
 801b2b4:	4b05      	ldr	r3, [pc, #20]	; (801b2cc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801b2b6:	6019      	str	r1, [r3, #0]
 801b2b8:	4b05      	ldr	r3, [pc, #20]	; (801b2d0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801b2ba:	6018      	str	r0, [r3, #0]
 801b2bc:	f7ff bf96 	b.w	801b1ec <_ZN8touchgfx6Bitmap10clearCacheEv>
 801b2c0:	4770      	bx	lr
 801b2c2:	bf00      	nop
 801b2c4:	20027d20 	.word	0x20027d20
 801b2c8:	20027d34 	.word	0x20027d34
 801b2cc:	20027d1c 	.word	0x20027d1c
 801b2d0:	20027d14 	.word	0x20027d14

0801b2d4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801b2d4:	b470      	push	{r4, r5, r6}
 801b2d6:	4c07      	ldr	r4, [pc, #28]	; (801b2f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801b2d8:	4605      	mov	r5, r0
 801b2da:	4610      	mov	r0, r2
 801b2dc:	9a03      	ldr	r2, [sp, #12]
 801b2de:	6826      	ldr	r6, [r4, #0]
 801b2e0:	b936      	cbnz	r6, 801b2f0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801b2e2:	6025      	str	r5, [r4, #0]
 801b2e4:	4c04      	ldr	r4, [pc, #16]	; (801b2f8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801b2e6:	8021      	strh	r1, [r4, #0]
 801b2e8:	4619      	mov	r1, r3
 801b2ea:	bc70      	pop	{r4, r5, r6}
 801b2ec:	f7ff bfdc 	b.w	801b2a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801b2f0:	bc70      	pop	{r4, r5, r6}
 801b2f2:	4770      	bx	lr
 801b2f4:	20027d38 	.word	0x20027d38
 801b2f8:	20027d30 	.word	0x20027d30

0801b2fc <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801b2fc:	4a12      	ldr	r2, [pc, #72]	; (801b348 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801b2fe:	8803      	ldrh	r3, [r0, #0]
 801b300:	8812      	ldrh	r2, [r2, #0]
 801b302:	4293      	cmp	r3, r2
 801b304:	d207      	bcs.n	801b316 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801b306:	4a11      	ldr	r2, [pc, #68]	; (801b34c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801b308:	2114      	movs	r1, #20
 801b30a:	6812      	ldr	r2, [r2, #0]
 801b30c:	fb01 2303 	mla	r3, r1, r3, r2
 801b310:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801b314:	4770      	bx	lr
 801b316:	490e      	ldr	r1, [pc, #56]	; (801b350 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801b318:	8809      	ldrh	r1, [r1, #0]
 801b31a:	4411      	add	r1, r2
 801b31c:	428b      	cmp	r3, r1
 801b31e:	da04      	bge.n	801b32a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801b320:	1a9b      	subs	r3, r3, r2
 801b322:	4a0c      	ldr	r2, [pc, #48]	; (801b354 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801b324:	210e      	movs	r1, #14
 801b326:	6812      	ldr	r2, [r2, #0]
 801b328:	e7f0      	b.n	801b30c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801b32a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b32e:	4293      	cmp	r3, r2
 801b330:	d108      	bne.n	801b344 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801b332:	4b09      	ldr	r3, [pc, #36]	; (801b358 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801b334:	781b      	ldrb	r3, [r3, #0]
 801b336:	b91b      	cbnz	r3, 801b340 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801b338:	4b08      	ldr	r3, [pc, #32]	; (801b35c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801b33a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801b33e:	4770      	bx	lr
 801b340:	4b07      	ldr	r3, [pc, #28]	; (801b360 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801b342:	e7fa      	b.n	801b33a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801b344:	2000      	movs	r0, #0
 801b346:	4770      	bx	lr
 801b348:	20027d30 	.word	0x20027d30
 801b34c:	20027d38 	.word	0x20027d38
 801b350:	20027d34 	.word	0x20027d34
 801b354:	20027d18 	.word	0x20027d18
 801b358:	20027ca0 	.word	0x20027ca0
 801b35c:	20027ca2 	.word	0x20027ca2
 801b360:	20027ca4 	.word	0x20027ca4

0801b364 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801b364:	4a12      	ldr	r2, [pc, #72]	; (801b3b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801b366:	8803      	ldrh	r3, [r0, #0]
 801b368:	8812      	ldrh	r2, [r2, #0]
 801b36a:	4293      	cmp	r3, r2
 801b36c:	d207      	bcs.n	801b37e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801b36e:	4a11      	ldr	r2, [pc, #68]	; (801b3b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801b370:	2114      	movs	r1, #20
 801b372:	6812      	ldr	r2, [r2, #0]
 801b374:	fb01 2303 	mla	r3, r1, r3, r2
 801b378:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801b37c:	4770      	bx	lr
 801b37e:	490e      	ldr	r1, [pc, #56]	; (801b3b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801b380:	8809      	ldrh	r1, [r1, #0]
 801b382:	4411      	add	r1, r2
 801b384:	428b      	cmp	r3, r1
 801b386:	da04      	bge.n	801b392 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801b388:	1a9b      	subs	r3, r3, r2
 801b38a:	4a0c      	ldr	r2, [pc, #48]	; (801b3bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801b38c:	210e      	movs	r1, #14
 801b38e:	6812      	ldr	r2, [r2, #0]
 801b390:	e7f0      	b.n	801b374 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801b392:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b396:	4293      	cmp	r3, r2
 801b398:	d108      	bne.n	801b3ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801b39a:	4b09      	ldr	r3, [pc, #36]	; (801b3c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801b39c:	781b      	ldrb	r3, [r3, #0]
 801b39e:	b91b      	cbnz	r3, 801b3a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801b3a0:	4b08      	ldr	r3, [pc, #32]	; (801b3c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801b3a2:	f9b3 0000 	ldrsh.w	r0, [r3]
 801b3a6:	4770      	bx	lr
 801b3a8:	4b07      	ldr	r3, [pc, #28]	; (801b3c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801b3aa:	e7fa      	b.n	801b3a2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801b3ac:	2000      	movs	r0, #0
 801b3ae:	4770      	bx	lr
 801b3b0:	20027d30 	.word	0x20027d30
 801b3b4:	20027d38 	.word	0x20027d38
 801b3b8:	20027d34 	.word	0x20027d34
 801b3bc:	20027d18 	.word	0x20027d18
 801b3c0:	20027ca0 	.word	0x20027ca0
 801b3c4:	20027ca4 	.word	0x20027ca4
 801b3c8:	20027ca2 	.word	0x20027ca2

0801b3cc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801b3cc:	4a1f      	ldr	r2, [pc, #124]	; (801b44c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801b3ce:	b510      	push	{r4, lr}
 801b3d0:	880b      	ldrh	r3, [r1, #0]
 801b3d2:	8812      	ldrh	r2, [r2, #0]
 801b3d4:	4293      	cmp	r3, r2
 801b3d6:	d213      	bcs.n	801b400 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801b3d8:	4a1d      	ldr	r2, [pc, #116]	; (801b450 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801b3da:	2114      	movs	r1, #20
 801b3dc:	6812      	ldr	r2, [r2, #0]
 801b3de:	fb01 2303 	mla	r3, r1, r3, r2
 801b3e2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801b3e6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801b3ea:	8a1a      	ldrh	r2, [r3, #16]
 801b3ec:	8a5b      	ldrh	r3, [r3, #18]
 801b3ee:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b3f2:	8004      	strh	r4, [r0, #0]
 801b3f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b3f8:	8041      	strh	r1, [r0, #2]
 801b3fa:	8082      	strh	r2, [r0, #4]
 801b3fc:	80c3      	strh	r3, [r0, #6]
 801b3fe:	e00e      	b.n	801b41e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801b400:	4914      	ldr	r1, [pc, #80]	; (801b454 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801b402:	8809      	ldrh	r1, [r1, #0]
 801b404:	4411      	add	r1, r2
 801b406:	428b      	cmp	r3, r1
 801b408:	da0a      	bge.n	801b420 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801b40a:	1a9b      	subs	r3, r3, r2
 801b40c:	4a12      	ldr	r2, [pc, #72]	; (801b458 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801b40e:	210e      	movs	r1, #14
 801b410:	6812      	ldr	r2, [r2, #0]
 801b412:	fb01 2303 	mla	r3, r1, r3, r2
 801b416:	681a      	ldr	r2, [r3, #0]
 801b418:	6002      	str	r2, [r0, #0]
 801b41a:	685a      	ldr	r2, [r3, #4]
 801b41c:	6042      	str	r2, [r0, #4]
 801b41e:	bd10      	pop	{r4, pc}
 801b420:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b424:	4293      	cmp	r3, r2
 801b426:	d10b      	bne.n	801b440 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801b428:	4b0c      	ldr	r3, [pc, #48]	; (801b45c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801b42a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b42e:	4b0c      	ldr	r3, [pc, #48]	; (801b460 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801b430:	8081      	strh	r1, [r0, #4]
 801b432:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b436:	2300      	movs	r3, #0
 801b438:	80c2      	strh	r2, [r0, #6]
 801b43a:	8003      	strh	r3, [r0, #0]
 801b43c:	8043      	strh	r3, [r0, #2]
 801b43e:	e7ee      	b.n	801b41e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801b440:	2300      	movs	r3, #0
 801b442:	8003      	strh	r3, [r0, #0]
 801b444:	8043      	strh	r3, [r0, #2]
 801b446:	8083      	strh	r3, [r0, #4]
 801b448:	e7d8      	b.n	801b3fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801b44a:	bf00      	nop
 801b44c:	20027d30 	.word	0x20027d30
 801b450:	20027d38 	.word	0x20027d38
 801b454:	20027d34 	.word	0x20027d34
 801b458:	20027d18 	.word	0x20027d18
 801b45c:	20027c9c 	.word	0x20027c9c
 801b460:	20027c9e 	.word	0x20027c9e

0801b464 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801b464:	4a17      	ldr	r2, [pc, #92]	; (801b4c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801b466:	8803      	ldrh	r3, [r0, #0]
 801b468:	8812      	ldrh	r2, [r2, #0]
 801b46a:	4293      	cmp	r3, r2
 801b46c:	d213      	bcs.n	801b496 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801b46e:	4a16      	ldr	r2, [pc, #88]	; (801b4c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801b470:	2114      	movs	r1, #20
 801b472:	6812      	ldr	r2, [r2, #0]
 801b474:	fb01 2303 	mla	r3, r1, r3, r2
 801b478:	8a1a      	ldrh	r2, [r3, #16]
 801b47a:	8919      	ldrh	r1, [r3, #8]
 801b47c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b480:	428a      	cmp	r2, r1
 801b482:	db1d      	blt.n	801b4c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801b484:	8a58      	ldrh	r0, [r3, #18]
 801b486:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801b48a:	895b      	ldrh	r3, [r3, #10]
 801b48c:	4298      	cmp	r0, r3
 801b48e:	bfac      	ite	ge
 801b490:	2000      	movge	r0, #0
 801b492:	2001      	movlt	r0, #1
 801b494:	4770      	bx	lr
 801b496:	490d      	ldr	r1, [pc, #52]	; (801b4cc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801b498:	8809      	ldrh	r1, [r1, #0]
 801b49a:	4411      	add	r1, r2
 801b49c:	428b      	cmp	r3, r1
 801b49e:	da0d      	bge.n	801b4bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801b4a0:	1a9b      	subs	r3, r3, r2
 801b4a2:	4a0b      	ldr	r2, [pc, #44]	; (801b4d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801b4a4:	210e      	movs	r1, #14
 801b4a6:	6812      	ldr	r2, [r2, #0]
 801b4a8:	fb01 2303 	mla	r3, r1, r3, r2
 801b4ac:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801b4b0:	891a      	ldrh	r2, [r3, #8]
 801b4b2:	4291      	cmp	r1, r2
 801b4b4:	db04      	blt.n	801b4c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801b4b6:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801b4ba:	e7e6      	b.n	801b48a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801b4bc:	2000      	movs	r0, #0
 801b4be:	4770      	bx	lr
 801b4c0:	2001      	movs	r0, #1
 801b4c2:	4770      	bx	lr
 801b4c4:	20027d30 	.word	0x20027d30
 801b4c8:	20027d38 	.word	0x20027d38
 801b4cc:	20027d34 	.word	0x20027d34
 801b4d0:	20027d18 	.word	0x20027d18

0801b4d4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801b4d4:	4a12      	ldr	r2, [pc, #72]	; (801b520 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801b4d6:	8803      	ldrh	r3, [r0, #0]
 801b4d8:	8811      	ldrh	r1, [r2, #0]
 801b4da:	428b      	cmp	r3, r1
 801b4dc:	d20b      	bcs.n	801b4f6 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801b4de:	4a11      	ldr	r2, [pc, #68]	; (801b524 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b4e0:	6812      	ldr	r2, [r2, #0]
 801b4e2:	b112      	cbz	r2, 801b4ea <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801b4e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b4e8:	b9c0      	cbnz	r0, 801b51c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801b4ea:	4a0f      	ldr	r2, [pc, #60]	; (801b528 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801b4ec:	6811      	ldr	r1, [r2, #0]
 801b4ee:	2214      	movs	r2, #20
 801b4f0:	4353      	muls	r3, r2
 801b4f2:	58c8      	ldr	r0, [r1, r3]
 801b4f4:	4770      	bx	lr
 801b4f6:	4a0d      	ldr	r2, [pc, #52]	; (801b52c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801b4f8:	8812      	ldrh	r2, [r2, #0]
 801b4fa:	440a      	add	r2, r1
 801b4fc:	4293      	cmp	r3, r2
 801b4fe:	da04      	bge.n	801b50a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801b500:	4a08      	ldr	r2, [pc, #32]	; (801b524 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b502:	6812      	ldr	r2, [r2, #0]
 801b504:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b508:	4770      	bx	lr
 801b50a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b50e:	4293      	cmp	r3, r2
 801b510:	d103      	bne.n	801b51a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801b512:	4b07      	ldr	r3, [pc, #28]	; (801b530 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801b514:	681b      	ldr	r3, [r3, #0]
 801b516:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801b518:	4770      	bx	lr
 801b51a:	2000      	movs	r0, #0
 801b51c:	4770      	bx	lr
 801b51e:	bf00      	nop
 801b520:	20027d30 	.word	0x20027d30
 801b524:	20027d14 	.word	0x20027d14
 801b528:	20027d38 	.word	0x20027d38
 801b52c:	20027d34 	.word	0x20027d34
 801b530:	20027ca8 	.word	0x20027ca8

0801b534 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801b534:	4b24      	ldr	r3, [pc, #144]	; (801b5c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801b536:	8802      	ldrh	r2, [r0, #0]
 801b538:	8818      	ldrh	r0, [r3, #0]
 801b53a:	4282      	cmp	r2, r0
 801b53c:	d221      	bcs.n	801b582 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801b53e:	4b23      	ldr	r3, [pc, #140]	; (801b5cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801b540:	6819      	ldr	r1, [r3, #0]
 801b542:	2314      	movs	r3, #20
 801b544:	fb03 1302 	mla	r3, r3, r2, r1
 801b548:	6858      	ldr	r0, [r3, #4]
 801b54a:	2800      	cmp	r0, #0
 801b54c:	d03a      	beq.n	801b5c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b54e:	4920      	ldr	r1, [pc, #128]	; (801b5d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b550:	6809      	ldr	r1, [r1, #0]
 801b552:	2900      	cmp	r1, #0
 801b554:	d036      	beq.n	801b5c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b556:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b55a:	2900      	cmp	r1, #0
 801b55c:	d032      	beq.n	801b5c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b55e:	891a      	ldrh	r2, [r3, #8]
 801b560:	8958      	ldrh	r0, [r3, #10]
 801b562:	4350      	muls	r0, r2
 801b564:	7c5a      	ldrb	r2, [r3, #17]
 801b566:	7cdb      	ldrb	r3, [r3, #19]
 801b568:	0952      	lsrs	r2, r2, #5
 801b56a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801b56e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801b572:	2b0b      	cmp	r3, #11
 801b574:	bf18      	it	ne
 801b576:	0040      	lslne	r0, r0, #1
 801b578:	3003      	adds	r0, #3
 801b57a:	f020 0003 	bic.w	r0, r0, #3
 801b57e:	4408      	add	r0, r1
 801b580:	4770      	bx	lr
 801b582:	4b14      	ldr	r3, [pc, #80]	; (801b5d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801b584:	881b      	ldrh	r3, [r3, #0]
 801b586:	4403      	add	r3, r0
 801b588:	429a      	cmp	r2, r3
 801b58a:	da1a      	bge.n	801b5c2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b58c:	4b12      	ldr	r3, [pc, #72]	; (801b5d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801b58e:	1a10      	subs	r0, r2, r0
 801b590:	210e      	movs	r1, #14
 801b592:	681b      	ldr	r3, [r3, #0]
 801b594:	fb01 3000 	mla	r0, r1, r0, r3
 801b598:	7b03      	ldrb	r3, [r0, #12]
 801b59a:	f003 031f 	and.w	r3, r3, #31
 801b59e:	2b0b      	cmp	r3, #11
 801b5a0:	d10b      	bne.n	801b5ba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801b5a2:	8903      	ldrh	r3, [r0, #8]
 801b5a4:	8940      	ldrh	r0, [r0, #10]
 801b5a6:	4358      	muls	r0, r3
 801b5a8:	4b09      	ldr	r3, [pc, #36]	; (801b5d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b5aa:	3003      	adds	r0, #3
 801b5ac:	6819      	ldr	r1, [r3, #0]
 801b5ae:	f020 0303 	bic.w	r3, r0, #3
 801b5b2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801b5b6:	4418      	add	r0, r3
 801b5b8:	4770      	bx	lr
 801b5ba:	2b0d      	cmp	r3, #13
 801b5bc:	d101      	bne.n	801b5c2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b5be:	300d      	adds	r0, #13
 801b5c0:	4770      	bx	lr
 801b5c2:	2000      	movs	r0, #0
 801b5c4:	4770      	bx	lr
 801b5c6:	bf00      	nop
 801b5c8:	20027d30 	.word	0x20027d30
 801b5cc:	20027d38 	.word	0x20027d38
 801b5d0:	20027d14 	.word	0x20027d14
 801b5d4:	20027d34 	.word	0x20027d34
 801b5d8:	20027d18 	.word	0x20027d18

0801b5dc <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801b5dc:	4a17      	ldr	r2, [pc, #92]	; (801b63c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801b5de:	b510      	push	{r4, lr}
 801b5e0:	8803      	ldrh	r3, [r0, #0]
 801b5e2:	8812      	ldrh	r2, [r2, #0]
 801b5e4:	4293      	cmp	r3, r2
 801b5e6:	d20c      	bcs.n	801b602 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801b5e8:	4a15      	ldr	r2, [pc, #84]	; (801b640 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801b5ea:	2114      	movs	r1, #20
 801b5ec:	6812      	ldr	r2, [r2, #0]
 801b5ee:	fb01 2303 	mla	r3, r1, r3, r2
 801b5f2:	7c58      	ldrb	r0, [r3, #17]
 801b5f4:	0942      	lsrs	r2, r0, #5
 801b5f6:	7cd8      	ldrb	r0, [r3, #19]
 801b5f8:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801b5fc:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801b600:	bd10      	pop	{r4, pc}
 801b602:	4910      	ldr	r1, [pc, #64]	; (801b644 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801b604:	8809      	ldrh	r1, [r1, #0]
 801b606:	4411      	add	r1, r2
 801b608:	428b      	cmp	r3, r1
 801b60a:	da09      	bge.n	801b620 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801b60c:	1a9b      	subs	r3, r3, r2
 801b60e:	4a0e      	ldr	r2, [pc, #56]	; (801b648 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801b610:	210e      	movs	r1, #14
 801b612:	6812      	ldr	r2, [r2, #0]
 801b614:	fb01 2303 	mla	r3, r1, r3, r2
 801b618:	7b18      	ldrb	r0, [r3, #12]
 801b61a:	f000 001f 	and.w	r0, r0, #31
 801b61e:	e7ef      	b.n	801b600 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801b620:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b624:	4293      	cmp	r3, r2
 801b626:	d106      	bne.n	801b636 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801b628:	f7e9 fbaa 	bl	8004d80 <_ZN8touchgfx3HAL3lcdEv>
 801b62c:	6803      	ldr	r3, [r0, #0]
 801b62e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b634:	4718      	bx	r3
 801b636:	2000      	movs	r0, #0
 801b638:	e7e2      	b.n	801b600 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801b63a:	bf00      	nop
 801b63c:	20027d30 	.word	0x20027d30
 801b640:	20027d38 	.word	0x20027d38
 801b644:	20027d34 	.word	0x20027d34
 801b648:	20027d18 	.word	0x20027d18

0801b64c <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801b64c:	2010      	movs	r0, #16
 801b64e:	4770      	bx	lr

0801b650 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801b650:	2000      	movs	r0, #0
 801b652:	4770      	bx	lr

0801b654 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801b654:	4b02      	ldr	r3, [pc, #8]	; (801b660 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801b656:	8818      	ldrh	r0, [r3, #0]
 801b658:	0040      	lsls	r0, r0, #1
 801b65a:	b280      	uxth	r0, r0
 801b65c:	4770      	bx	lr
 801b65e:	bf00      	nop
 801b660:	20027ca2 	.word	0x20027ca2

0801b664 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801b664:	2bff      	cmp	r3, #255	; 0xff
 801b666:	d050      	beq.n	801b70a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801b668:	2a0b      	cmp	r2, #11
 801b66a:	d04a      	beq.n	801b702 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801b66c:	d80e      	bhi.n	801b68c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801b66e:	2a03      	cmp	r2, #3
 801b670:	d03f      	beq.n	801b6f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801b672:	d804      	bhi.n	801b67e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b674:	2a01      	cmp	r2, #1
 801b676:	d03e      	beq.n	801b6f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801b678:	d93f      	bls.n	801b6fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801b67a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801b67c:	4770      	bx	lr
 801b67e:	2a09      	cmp	r2, #9
 801b680:	d03f      	beq.n	801b702 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801b682:	d83c      	bhi.n	801b6fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801b684:	2a08      	cmp	r2, #8
 801b686:	d03a      	beq.n	801b6fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801b688:	2000      	movs	r0, #0
 801b68a:	4770      	bx	lr
 801b68c:	2a2f      	cmp	r2, #47	; 0x2f
 801b68e:	d024      	beq.n	801b6da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801b690:	d80d      	bhi.n	801b6ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801b692:	2a2d      	cmp	r2, #45	; 0x2d
 801b694:	d014      	beq.n	801b6c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801b696:	d826      	bhi.n	801b6e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801b698:	2a2c      	cmp	r2, #44	; 0x2c
 801b69a:	d1f5      	bne.n	801b688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b69c:	684b      	ldr	r3, [r1, #4]
 801b69e:	781b      	ldrb	r3, [r3, #0]
 801b6a0:	2b01      	cmp	r3, #1
 801b6a2:	d018      	beq.n	801b6d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801b6a4:	d323      	bcc.n	801b6ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801b6a6:	2b02      	cmp	r3, #2
 801b6a8:	d1ee      	bne.n	801b688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b6aa:	6880      	ldr	r0, [r0, #8]
 801b6ac:	4770      	bx	lr
 801b6ae:	2a31      	cmp	r2, #49	; 0x31
 801b6b0:	d004      	beq.n	801b6bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801b6b2:	d328      	bcc.n	801b706 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801b6b4:	2a32      	cmp	r2, #50	; 0x32
 801b6b6:	d026      	beq.n	801b706 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801b6b8:	2a33      	cmp	r2, #51	; 0x33
 801b6ba:	d1e5      	bne.n	801b688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b6bc:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801b6be:	4770      	bx	lr
 801b6c0:	684b      	ldr	r3, [r1, #4]
 801b6c2:	781b      	ldrb	r3, [r3, #0]
 801b6c4:	2b01      	cmp	r3, #1
 801b6c6:	d004      	beq.n	801b6d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b6c8:	d30b      	bcc.n	801b6e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801b6ca:	2b02      	cmp	r3, #2
 801b6cc:	d1dc      	bne.n	801b688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b6ce:	6900      	ldr	r0, [r0, #16]
 801b6d0:	4770      	bx	lr
 801b6d2:	6a00      	ldr	r0, [r0, #32]
 801b6d4:	4770      	bx	lr
 801b6d6:	6980      	ldr	r0, [r0, #24]
 801b6d8:	4770      	bx	lr
 801b6da:	684b      	ldr	r3, [r1, #4]
 801b6dc:	781b      	ldrb	r3, [r3, #0]
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	d1d2      	bne.n	801b688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b6e2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801b6e4:	4770      	bx	lr
 801b6e6:	684b      	ldr	r3, [r1, #4]
 801b6e8:	781b      	ldrb	r3, [r3, #0]
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d1cc      	bne.n	801b688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b6ee:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801b6f0:	4770      	bx	lr
 801b6f2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801b6f4:	4770      	bx	lr
 801b6f6:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801b6f8:	4770      	bx	lr
 801b6fa:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801b6fc:	4770      	bx	lr
 801b6fe:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801b700:	4770      	bx	lr
 801b702:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801b704:	4770      	bx	lr
 801b706:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801b708:	4770      	bx	lr
 801b70a:	2a0b      	cmp	r2, #11
 801b70c:	d049      	beq.n	801b7a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801b70e:	d80e      	bhi.n	801b72e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801b710:	2a03      	cmp	r2, #3
 801b712:	d040      	beq.n	801b796 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801b714:	d804      	bhi.n	801b720 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801b716:	2a01      	cmp	r2, #1
 801b718:	d03f      	beq.n	801b79a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801b71a:	d940      	bls.n	801b79e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801b71c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801b71e:	4770      	bx	lr
 801b720:	2a09      	cmp	r2, #9
 801b722:	d03e      	beq.n	801b7a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801b724:	d801      	bhi.n	801b72a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801b726:	2a08      	cmp	r2, #8
 801b728:	d1ae      	bne.n	801b688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b72a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801b72c:	4770      	bx	lr
 801b72e:	2a2f      	cmp	r2, #47	; 0x2f
 801b730:	d024      	beq.n	801b77c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801b732:	d80d      	bhi.n	801b750 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801b734:	2a2d      	cmp	r2, #45	; 0x2d
 801b736:	d014      	beq.n	801b762 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801b738:	d826      	bhi.n	801b788 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801b73a:	2a2c      	cmp	r2, #44	; 0x2c
 801b73c:	d1a4      	bne.n	801b688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b73e:	684b      	ldr	r3, [r1, #4]
 801b740:	781b      	ldrb	r3, [r3, #0]
 801b742:	2b01      	cmp	r3, #1
 801b744:	d018      	beq.n	801b778 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801b746:	d324      	bcc.n	801b792 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801b748:	2b02      	cmp	r3, #2
 801b74a:	d19d      	bne.n	801b688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b74c:	68c0      	ldr	r0, [r0, #12]
 801b74e:	4770      	bx	lr
 801b750:	2a31      	cmp	r2, #49	; 0x31
 801b752:	d004      	beq.n	801b75e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801b754:	d327      	bcc.n	801b7a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801b756:	2a32      	cmp	r2, #50	; 0x32
 801b758:	d025      	beq.n	801b7a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801b75a:	2a33      	cmp	r2, #51	; 0x33
 801b75c:	d194      	bne.n	801b688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b75e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801b760:	4770      	bx	lr
 801b762:	684b      	ldr	r3, [r1, #4]
 801b764:	781b      	ldrb	r3, [r3, #0]
 801b766:	2b01      	cmp	r3, #1
 801b768:	d004      	beq.n	801b774 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801b76a:	d30b      	bcc.n	801b784 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801b76c:	2b02      	cmp	r3, #2
 801b76e:	d18b      	bne.n	801b688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b770:	6940      	ldr	r0, [r0, #20]
 801b772:	4770      	bx	lr
 801b774:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801b776:	4770      	bx	lr
 801b778:	69c0      	ldr	r0, [r0, #28]
 801b77a:	4770      	bx	lr
 801b77c:	684b      	ldr	r3, [r1, #4]
 801b77e:	781b      	ldrb	r3, [r3, #0]
 801b780:	2b00      	cmp	r3, #0
 801b782:	d181      	bne.n	801b688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b784:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801b786:	4770      	bx	lr
 801b788:	684b      	ldr	r3, [r1, #4]
 801b78a:	781b      	ldrb	r3, [r3, #0]
 801b78c:	2b00      	cmp	r3, #0
 801b78e:	f47f af7b 	bne.w	801b688 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801b792:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801b794:	4770      	bx	lr
 801b796:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801b798:	4770      	bx	lr
 801b79a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801b79c:	4770      	bx	lr
 801b79e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801b7a0:	4770      	bx	lr
 801b7a2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801b7a4:	4770      	bx	lr
 801b7a6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801b7a8:	4770      	bx	lr

0801b7aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b7aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7ae:	b087      	sub	sp, #28
 801b7b0:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b7b2:	9205      	str	r2, [sp, #20]
 801b7b4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801b7b8:	9101      	str	r1, [sp, #4]
 801b7ba:	9202      	str	r2, [sp, #8]
 801b7bc:	6841      	ldr	r1, [r0, #4]
 801b7be:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801b7c2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801b7c6:	fb01 2404 	mla	r4, r1, r4, r2
 801b7ca:	6802      	ldr	r2, [r0, #0]
 801b7cc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b7d0:	f8de 2000 	ldr.w	r2, [lr]
 801b7d4:	9203      	str	r2, [sp, #12]
 801b7d6:	f8de 2004 	ldr.w	r2, [lr, #4]
 801b7da:	3204      	adds	r2, #4
 801b7dc:	9204      	str	r2, [sp, #16]
 801b7de:	9a02      	ldr	r2, [sp, #8]
 801b7e0:	43d6      	mvns	r6, r2
 801b7e2:	b2f6      	uxtb	r6, r6
 801b7e4:	9a01      	ldr	r2, [sp, #4]
 801b7e6:	2a00      	cmp	r2, #0
 801b7e8:	dc03      	bgt.n	801b7f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b7ea:	9a05      	ldr	r2, [sp, #20]
 801b7ec:	2a00      	cmp	r2, #0
 801b7ee:	f340 8129 	ble.w	801ba44 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b7f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b7f4:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801b7f8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b7fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b7fe:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801b802:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b806:	2b00      	cmp	r3, #0
 801b808:	dd0e      	ble.n	801b828 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b80a:	1408      	asrs	r0, r1, #16
 801b80c:	d405      	bmi.n	801b81a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b80e:	4560      	cmp	r0, ip
 801b810:	da03      	bge.n	801b81a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b812:	1410      	asrs	r0, r2, #16
 801b814:	d401      	bmi.n	801b81a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b816:	42b8      	cmp	r0, r7
 801b818:	db07      	blt.n	801b82a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b81a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b81c:	3b01      	subs	r3, #1
 801b81e:	3402      	adds	r4, #2
 801b820:	4401      	add	r1, r0
 801b822:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b824:	4402      	add	r2, r0
 801b826:	e7ee      	b.n	801b806 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b828:	d071      	beq.n	801b90e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b82a:	1e58      	subs	r0, r3, #1
 801b82c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b82e:	fb05 1500 	mla	r5, r5, r0, r1
 801b832:	142d      	asrs	r5, r5, #16
 801b834:	d45f      	bmi.n	801b8f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801b836:	4565      	cmp	r5, ip
 801b838:	da5d      	bge.n	801b8f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801b83a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b83c:	fb05 2000 	mla	r0, r5, r0, r2
 801b840:	1400      	asrs	r0, r0, #16
 801b842:	d458      	bmi.n	801b8f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801b844:	42b8      	cmp	r0, r7
 801b846:	da56      	bge.n	801b8f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801b848:	4699      	mov	r9, r3
 801b84a:	46a2      	mov	sl, r4
 801b84c:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801b850:	f1b9 0f00 	cmp.w	r9, #0
 801b854:	dd57      	ble.n	801b906 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801b856:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b85a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801b85e:	9803      	ldr	r0, [sp, #12]
 801b860:	140d      	asrs	r5, r1, #16
 801b862:	f109 39ff 	add.w	r9, r9, #4294967295
 801b866:	fb07 000c 	mla	r0, r7, ip, r0
 801b86a:	5d40      	ldrb	r0, [r0, r5]
 801b86c:	9d04      	ldr	r5, [sp, #16]
 801b86e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801b872:	f8ba 5000 	ldrh.w	r5, [sl]
 801b876:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b87a:	122f      	asrs	r7, r5, #8
 801b87c:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801b880:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b884:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b888:	00ed      	lsls	r5, r5, #3
 801b88a:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801b88e:	fb17 f706 	smulbb	r7, r7, r6
 801b892:	b2ed      	uxtb	r5, r5
 801b894:	fb18 f806 	smulbb	r8, r8, r6
 801b898:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801b89c:	10c7      	asrs	r7, r0, #3
 801b89e:	fb15 f506 	smulbb	r5, r5, r6
 801b8a2:	00c0      	lsls	r0, r0, #3
 801b8a4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b8a8:	fa1f fc8c 	uxth.w	ip, ip
 801b8ac:	b2c0      	uxtb	r0, r0
 801b8ae:	fb07 870b 	mla	r7, r7, fp, r8
 801b8b2:	fb00 500b 	mla	r0, r0, fp, r5
 801b8b6:	f10c 0501 	add.w	r5, ip, #1
 801b8ba:	b2bf      	uxth	r7, r7
 801b8bc:	b280      	uxth	r0, r0
 801b8be:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b8c2:	f107 0801 	add.w	r8, r7, #1
 801b8c6:	1c45      	adds	r5, r0, #1
 801b8c8:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801b8cc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b8d0:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b8d4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b8d6:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801b8da:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b8de:	4401      	add	r1, r0
 801b8e0:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801b8e4:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b8e6:	ea45 0c0c 	orr.w	ip, r5, ip
 801b8ea:	4402      	add	r2, r0
 801b8ec:	ea4c 0c08 	orr.w	ip, ip, r8
 801b8f0:	f82a cb02 	strh.w	ip, [sl], #2
 801b8f4:	e7ac      	b.n	801b850 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b8f6:	f04f 0800 	mov.w	r8, #0
 801b8fa:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801b8fe:	eb03 0008 	add.w	r0, r3, r8
 801b902:	2800      	cmp	r0, #0
 801b904:	dc41      	bgt.n	801b98a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801b906:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b90a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b90e:	9b01      	ldr	r3, [sp, #4]
 801b910:	2b00      	cmp	r3, #0
 801b912:	f340 8097 	ble.w	801ba44 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b91a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b91c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b920:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b924:	eef0 6a62 	vmov.f32	s13, s5
 801b928:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b92c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b930:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b934:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801b938:	eef0 6a43 	vmov.f32	s13, s6
 801b93c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b940:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801b944:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b948:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b94c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b950:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b954:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b958:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b95c:	ee12 2a90 	vmov	r2, s5
 801b960:	eef0 2a47 	vmov.f32	s5, s14
 801b964:	fb92 f3f3 	sdiv	r3, r2, r3
 801b968:	ee13 2a10 	vmov	r2, s6
 801b96c:	9313      	str	r3, [sp, #76]	; 0x4c
 801b96e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b970:	eeb0 3a67 	vmov.f32	s6, s15
 801b974:	fb92 f3f3 	sdiv	r3, r2, r3
 801b978:	9314      	str	r3, [sp, #80]	; 0x50
 801b97a:	9b01      	ldr	r3, [sp, #4]
 801b97c:	9a05      	ldr	r2, [sp, #20]
 801b97e:	3b01      	subs	r3, #1
 801b980:	9301      	str	r3, [sp, #4]
 801b982:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b984:	bf08      	it	eq
 801b986:	4613      	moveq	r3, r2
 801b988:	e72c      	b.n	801b7e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801b98a:	140f      	asrs	r7, r1, #16
 801b98c:	d453      	bmi.n	801ba36 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b98e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801b992:	42bd      	cmp	r5, r7
 801b994:	dd4f      	ble.n	801ba36 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b996:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b99a:	d44c      	bmi.n	801ba36 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b99c:	f8de 000c 	ldr.w	r0, [lr, #12]
 801b9a0:	4560      	cmp	r0, ip
 801b9a2:	dd48      	ble.n	801ba36 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b9a4:	9803      	ldr	r0, [sp, #12]
 801b9a6:	b22d      	sxth	r5, r5
 801b9a8:	fb0c 0505 	mla	r5, ip, r5, r0
 801b9ac:	5de8      	ldrb	r0, [r5, r7]
 801b9ae:	9d04      	ldr	r5, [sp, #16]
 801b9b0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801b9b4:	f06f 0501 	mvn.w	r5, #1
 801b9b8:	fb05 fb08 	mul.w	fp, r5, r8
 801b9bc:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b9c0:	f834 500b 	ldrh.w	r5, [r4, fp]
 801b9c4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b9c8:	122f      	asrs	r7, r5, #8
 801b9ca:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801b9ce:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b9d2:	00ed      	lsls	r5, r5, #3
 801b9d4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801b9d8:	fb17 f706 	smulbb	r7, r7, r6
 801b9dc:	b2ed      	uxtb	r5, r5
 801b9de:	fb19 f906 	smulbb	r9, r9, r6
 801b9e2:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801b9e6:	10c7      	asrs	r7, r0, #3
 801b9e8:	fb15 f506 	smulbb	r5, r5, r6
 801b9ec:	00c0      	lsls	r0, r0, #3
 801b9ee:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b9f2:	fa1f fc8c 	uxth.w	ip, ip
 801b9f6:	b2c0      	uxtb	r0, r0
 801b9f8:	fb07 970a 	mla	r7, r7, sl, r9
 801b9fc:	fb00 500a 	mla	r0, r0, sl, r5
 801ba00:	f10c 0501 	add.w	r5, ip, #1
 801ba04:	b2bf      	uxth	r7, r7
 801ba06:	b280      	uxth	r0, r0
 801ba08:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ba0c:	f107 0901 	add.w	r9, r7, #1
 801ba10:	1c45      	adds	r5, r0, #1
 801ba12:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801ba16:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ba1a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801ba1e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801ba22:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ba26:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ba2a:	ea45 0c0c 	orr.w	ip, r5, ip
 801ba2e:	ea4c 0c09 	orr.w	ip, ip, r9
 801ba32:	f824 c00b 	strh.w	ip, [r4, fp]
 801ba36:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ba38:	f108 38ff 	add.w	r8, r8, #4294967295
 801ba3c:	4401      	add	r1, r0
 801ba3e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ba40:	4402      	add	r2, r0
 801ba42:	e75c      	b.n	801b8fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ba44:	b007      	add	sp, #28
 801ba46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ba4a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ba4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba4e:	b085      	sub	sp, #20
 801ba50:	4693      	mov	fp, r2
 801ba52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ba56:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ba58:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ba5a:	6870      	ldr	r0, [r6, #4]
 801ba5c:	9100      	str	r1, [sp, #0]
 801ba5e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ba62:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801ba66:	fb00 2404 	mla	r4, r0, r4, r2
 801ba6a:	6832      	ldr	r2, [r6, #0]
 801ba6c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ba70:	682a      	ldr	r2, [r5, #0]
 801ba72:	9201      	str	r2, [sp, #4]
 801ba74:	686a      	ldr	r2, [r5, #4]
 801ba76:	3204      	adds	r2, #4
 801ba78:	9202      	str	r2, [sp, #8]
 801ba7a:	9a00      	ldr	r2, [sp, #0]
 801ba7c:	2a00      	cmp	r2, #0
 801ba7e:	dc03      	bgt.n	801ba88 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801ba80:	f1bb 0f00 	cmp.w	fp, #0
 801ba84:	f340 80a0 	ble.w	801bbc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801ba88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ba8a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ba8e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ba92:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ba94:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801ba98:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ba9c:	2b00      	cmp	r3, #0
 801ba9e:	dd0c      	ble.n	801baba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801baa0:	1406      	asrs	r6, r0, #16
 801baa2:	d405      	bmi.n	801bab0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801baa4:	454e      	cmp	r6, r9
 801baa6:	da03      	bge.n	801bab0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801baa8:	1416      	asrs	r6, r2, #16
 801baaa:	d401      	bmi.n	801bab0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801baac:	4546      	cmp	r6, r8
 801baae:	db05      	blt.n	801babc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bab0:	4470      	add	r0, lr
 801bab2:	4462      	add	r2, ip
 801bab4:	3b01      	subs	r3, #1
 801bab6:	3402      	adds	r4, #2
 801bab8:	e7f0      	b.n	801ba9c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801baba:	d00f      	beq.n	801badc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801babc:	1e5e      	subs	r6, r3, #1
 801babe:	fb0e 0706 	mla	r7, lr, r6, r0
 801bac2:	143f      	asrs	r7, r7, #16
 801bac4:	d541      	bpl.n	801bb4a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801bac6:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801baca:	4698      	mov	r8, r3
 801bacc:	9603      	str	r6, [sp, #12]
 801bace:	f1b8 0f00 	cmp.w	r8, #0
 801bad2:	dc59      	bgt.n	801bb88 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801bad4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bad8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801badc:	9b00      	ldr	r3, [sp, #0]
 801bade:	2b00      	cmp	r3, #0
 801bae0:	dd72      	ble.n	801bbc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801bae2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bae6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bae8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801baec:	eeb0 6a62 	vmov.f32	s12, s5
 801baf0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801baf4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801baf8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bafc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bb00:	eeb0 6a43 	vmov.f32	s12, s6
 801bb04:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bb08:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bb0c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bb10:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bb14:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bb18:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bb1c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bb20:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bb24:	ee12 2a90 	vmov	r2, s5
 801bb28:	eef0 2a47 	vmov.f32	s5, s14
 801bb2c:	fb92 fef3 	sdiv	lr, r2, r3
 801bb30:	ee13 2a10 	vmov	r2, s6
 801bb34:	eeb0 3a67 	vmov.f32	s6, s15
 801bb38:	fb92 fcf3 	sdiv	ip, r2, r3
 801bb3c:	9b00      	ldr	r3, [sp, #0]
 801bb3e:	3b01      	subs	r3, #1
 801bb40:	9300      	str	r3, [sp, #0]
 801bb42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bb44:	bf08      	it	eq
 801bb46:	465b      	moveq	r3, fp
 801bb48:	e797      	b.n	801ba7a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801bb4a:	454f      	cmp	r7, r9
 801bb4c:	dabb      	bge.n	801bac6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801bb4e:	fb0c 2606 	mla	r6, ip, r6, r2
 801bb52:	1436      	asrs	r6, r6, #16
 801bb54:	d4b7      	bmi.n	801bac6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801bb56:	4546      	cmp	r6, r8
 801bb58:	dab5      	bge.n	801bac6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801bb5a:	461e      	mov	r6, r3
 801bb5c:	46a0      	mov	r8, r4
 801bb5e:	2e00      	cmp	r6, #0
 801bb60:	ddb8      	ble.n	801bad4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801bb62:	1417      	asrs	r7, r2, #16
 801bb64:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801bb68:	9901      	ldr	r1, [sp, #4]
 801bb6a:	ea4f 4920 	mov.w	r9, r0, asr #16
 801bb6e:	4462      	add	r2, ip
 801bb70:	4470      	add	r0, lr
 801bb72:	fb0a 1707 	mla	r7, sl, r7, r1
 801bb76:	9902      	ldr	r1, [sp, #8]
 801bb78:	3e01      	subs	r6, #1
 801bb7a:	f817 7009 	ldrb.w	r7, [r7, r9]
 801bb7e:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801bb82:	f828 7b02 	strh.w	r7, [r8], #2
 801bb86:	e7ea      	b.n	801bb5e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801bb88:	ea5f 4920 	movs.w	r9, r0, asr #16
 801bb8c:	d417      	bmi.n	801bbbe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801bb8e:	68ae      	ldr	r6, [r5, #8]
 801bb90:	454e      	cmp	r6, r9
 801bb92:	dd14      	ble.n	801bbbe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801bb94:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801bb98:	d411      	bmi.n	801bbbe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801bb9a:	68ef      	ldr	r7, [r5, #12]
 801bb9c:	4557      	cmp	r7, sl
 801bb9e:	dd0e      	ble.n	801bbbe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801bba0:	9f01      	ldr	r7, [sp, #4]
 801bba2:	b236      	sxth	r6, r6
 801bba4:	f06f 0101 	mvn.w	r1, #1
 801bba8:	fb0a 7606 	mla	r6, sl, r6, r7
 801bbac:	9f02      	ldr	r7, [sp, #8]
 801bbae:	f816 6009 	ldrb.w	r6, [r6, r9]
 801bbb2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801bbb6:	fb01 f608 	mul.w	r6, r1, r8
 801bbba:	9903      	ldr	r1, [sp, #12]
 801bbbc:	538f      	strh	r7, [r1, r6]
 801bbbe:	4470      	add	r0, lr
 801bbc0:	4462      	add	r2, ip
 801bbc2:	f108 38ff 	add.w	r8, r8, #4294967295
 801bbc6:	e782      	b.n	801bace <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801bbc8:	b005      	add	sp, #20
 801bbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bbce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bbce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbd2:	b087      	sub	sp, #28
 801bbd4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801bbd6:	9205      	str	r2, [sp, #20]
 801bbd8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801bbdc:	9102      	str	r1, [sp, #8]
 801bbde:	9203      	str	r2, [sp, #12]
 801bbe0:	6861      	ldr	r1, [r4, #4]
 801bbe2:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801bbe6:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801bbea:	fb01 2000 	mla	r0, r1, r0, r2
 801bbee:	6822      	ldr	r2, [r4, #0]
 801bbf0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801bbf4:	9200      	str	r2, [sp, #0]
 801bbf6:	f8dc 2000 	ldr.w	r2, [ip]
 801bbfa:	9204      	str	r2, [sp, #16]
 801bbfc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801bc00:	3204      	adds	r2, #4
 801bc02:	9201      	str	r2, [sp, #4]
 801bc04:	9a03      	ldr	r2, [sp, #12]
 801bc06:	43d5      	mvns	r5, r2
 801bc08:	b2ed      	uxtb	r5, r5
 801bc0a:	9a02      	ldr	r2, [sp, #8]
 801bc0c:	2a00      	cmp	r2, #0
 801bc0e:	dc03      	bgt.n	801bc18 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801bc10:	9a05      	ldr	r2, [sp, #20]
 801bc12:	2a00      	cmp	r2, #0
 801bc14:	f340 812c 	ble.w	801be70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801bc18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bc1a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801bc1e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801bc22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bc24:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801bc28:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bc2c:	2b00      	cmp	r3, #0
 801bc2e:	dd10      	ble.n	801bc52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801bc30:	140c      	asrs	r4, r1, #16
 801bc32:	d405      	bmi.n	801bc40 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bc34:	4574      	cmp	r4, lr
 801bc36:	da03      	bge.n	801bc40 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bc38:	1414      	asrs	r4, r2, #16
 801bc3a:	d401      	bmi.n	801bc40 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bc3c:	42bc      	cmp	r4, r7
 801bc3e:	db09      	blt.n	801bc54 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801bc40:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bc42:	3b01      	subs	r3, #1
 801bc44:	9800      	ldr	r0, [sp, #0]
 801bc46:	4421      	add	r1, r4
 801bc48:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bc4a:	3002      	adds	r0, #2
 801bc4c:	4422      	add	r2, r4
 801bc4e:	9000      	str	r0, [sp, #0]
 801bc50:	e7ec      	b.n	801bc2c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801bc52:	d071      	beq.n	801bd38 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801bc54:	1e5c      	subs	r4, r3, #1
 801bc56:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801bc58:	fb06 1604 	mla	r6, r6, r4, r1
 801bc5c:	1436      	asrs	r6, r6, #16
 801bc5e:	d45d      	bmi.n	801bd1c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801bc60:	4576      	cmp	r6, lr
 801bc62:	da5b      	bge.n	801bd1c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801bc64:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801bc66:	fb06 2404 	mla	r4, r6, r4, r2
 801bc6a:	1424      	asrs	r4, r4, #16
 801bc6c:	d456      	bmi.n	801bd1c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801bc6e:	42bc      	cmp	r4, r7
 801bc70:	da54      	bge.n	801bd1c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801bc72:	4698      	mov	r8, r3
 801bc74:	f8dd 9000 	ldr.w	r9, [sp]
 801bc78:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801bc7c:	f1b8 0f00 	cmp.w	r8, #0
 801bc80:	dd54      	ble.n	801bd2c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801bc82:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801bc86:	1414      	asrs	r4, r2, #16
 801bc88:	9804      	ldr	r0, [sp, #16]
 801bc8a:	140e      	asrs	r6, r1, #16
 801bc8c:	f108 38ff 	add.w	r8, r8, #4294967295
 801bc90:	fb07 0404 	mla	r4, r7, r4, r0
 801bc94:	9801      	ldr	r0, [sp, #4]
 801bc96:	f814 e006 	ldrb.w	lr, [r4, r6]
 801bc9a:	f8b9 4000 	ldrh.w	r4, [r9]
 801bc9e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801bca2:	1227      	asrs	r7, r4, #8
 801bca4:	eb00 0b0e 	add.w	fp, r0, lr
 801bca8:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801bcac:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801bcb0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bcb2:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801bcb6:	f89b b001 	ldrb.w	fp, [fp, #1]
 801bcba:	4401      	add	r1, r0
 801bcbc:	fb16 f60a 	smulbb	r6, r6, sl
 801bcc0:	9814      	ldr	r0, [sp, #80]	; 0x50
 801bcc2:	fb1b fb0a 	smulbb	fp, fp, sl
 801bcc6:	fb07 6705 	mla	r7, r7, r5, r6
 801bcca:	10e6      	asrs	r6, r4, #3
 801bccc:	00e4      	lsls	r4, r4, #3
 801bcce:	4402      	add	r2, r0
 801bcd0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801bcd4:	b2bf      	uxth	r7, r7
 801bcd6:	b2e4      	uxtb	r4, r4
 801bcd8:	fb06 b605 	mla	r6, r6, r5, fp
 801bcdc:	fb14 f405 	smulbb	r4, r4, r5
 801bce0:	b2b6      	uxth	r6, r6
 801bce2:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801bce6:	1c7c      	adds	r4, r7, #1
 801bce8:	f106 0b01 	add.w	fp, r6, #1
 801bcec:	fa1f fe8e 	uxth.w	lr, lr
 801bcf0:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801bcf4:	f10e 0401 	add.w	r4, lr, #1
 801bcf8:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801bcfc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801bd00:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801bd04:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801bd08:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801bd0c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801bd10:	4327      	orrs	r7, r4
 801bd12:	ea47 070b 	orr.w	r7, r7, fp
 801bd16:	f829 7b02 	strh.w	r7, [r9], #2
 801bd1a:	e7af      	b.n	801bc7c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801bd1c:	f04f 0e00 	mov.w	lr, #0
 801bd20:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801bd24:	eb03 040e 	add.w	r4, r3, lr
 801bd28:	2c00      	cmp	r4, #0
 801bd2a:	dc43      	bgt.n	801bdb4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801bd2c:	9a00      	ldr	r2, [sp, #0]
 801bd2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bd32:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801bd36:	9300      	str	r3, [sp, #0]
 801bd38:	9b02      	ldr	r3, [sp, #8]
 801bd3a:	2b00      	cmp	r3, #0
 801bd3c:	f340 8098 	ble.w	801be70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801bd40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bd44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd46:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bd4a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bd4e:	eef0 6a62 	vmov.f32	s13, s5
 801bd52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bd56:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bd5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bd5e:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801bd62:	eef0 6a43 	vmov.f32	s13, s6
 801bd66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bd6a:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801bd6e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bd72:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bd76:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bd7a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bd7e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bd82:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bd86:	ee12 2a90 	vmov	r2, s5
 801bd8a:	eef0 2a47 	vmov.f32	s5, s14
 801bd8e:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd92:	ee13 2a10 	vmov	r2, s6
 801bd96:	9313      	str	r3, [sp, #76]	; 0x4c
 801bd98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd9a:	eeb0 3a67 	vmov.f32	s6, s15
 801bd9e:	fb92 f3f3 	sdiv	r3, r2, r3
 801bda2:	9314      	str	r3, [sp, #80]	; 0x50
 801bda4:	9b02      	ldr	r3, [sp, #8]
 801bda6:	9a05      	ldr	r2, [sp, #20]
 801bda8:	3b01      	subs	r3, #1
 801bdaa:	9302      	str	r3, [sp, #8]
 801bdac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bdae:	bf08      	it	eq
 801bdb0:	4613      	moveq	r3, r2
 801bdb2:	e72a      	b.n	801bc0a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801bdb4:	140f      	asrs	r7, r1, #16
 801bdb6:	d454      	bmi.n	801be62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801bdb8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801bdbc:	42be      	cmp	r6, r7
 801bdbe:	dd50      	ble.n	801be62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801bdc0:	ea5f 4822 	movs.w	r8, r2, asr #16
 801bdc4:	d44d      	bmi.n	801be62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801bdc6:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801bdca:	4544      	cmp	r4, r8
 801bdcc:	dd49      	ble.n	801be62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801bdce:	9c04      	ldr	r4, [sp, #16]
 801bdd0:	b236      	sxth	r6, r6
 801bdd2:	f06f 0001 	mvn.w	r0, #1
 801bdd6:	fb08 4606 	mla	r6, r8, r6, r4
 801bdda:	9c01      	ldr	r4, [sp, #4]
 801bddc:	fb00 fa0e 	mul.w	sl, r0, lr
 801bde0:	9800      	ldr	r0, [sp, #0]
 801bde2:	f816 8007 	ldrb.w	r8, [r6, r7]
 801bde6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801bdea:	eb04 0b08 	add.w	fp, r4, r8
 801bdee:	f830 400a 	ldrh.w	r4, [r0, sl]
 801bdf2:	9801      	ldr	r0, [sp, #4]
 801bdf4:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801bdf8:	1227      	asrs	r7, r4, #8
 801bdfa:	f89b b001 	ldrb.w	fp, [fp, #1]
 801bdfe:	fb16 f609 	smulbb	r6, r6, r9
 801be02:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801be06:	f810 8008 	ldrb.w	r8, [r0, r8]
 801be0a:	fb1b fb09 	smulbb	fp, fp, r9
 801be0e:	fb07 6705 	mla	r7, r7, r5, r6
 801be12:	10e6      	asrs	r6, r4, #3
 801be14:	00e4      	lsls	r4, r4, #3
 801be16:	9800      	ldr	r0, [sp, #0]
 801be18:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801be1c:	b2bf      	uxth	r7, r7
 801be1e:	b2e4      	uxtb	r4, r4
 801be20:	fb06 b605 	mla	r6, r6, r5, fp
 801be24:	fb14 f405 	smulbb	r4, r4, r5
 801be28:	b2b6      	uxth	r6, r6
 801be2a:	fb08 4809 	mla	r8, r8, r9, r4
 801be2e:	1c7c      	adds	r4, r7, #1
 801be30:	f106 0b01 	add.w	fp, r6, #1
 801be34:	fa1f f888 	uxth.w	r8, r8
 801be38:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801be3c:	f108 0401 	add.w	r4, r8, #1
 801be40:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801be44:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801be48:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801be4c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801be50:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801be54:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801be58:	4327      	orrs	r7, r4
 801be5a:	ea47 070b 	orr.w	r7, r7, fp
 801be5e:	f820 700a 	strh.w	r7, [r0, sl]
 801be62:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801be64:	f10e 3eff 	add.w	lr, lr, #4294967295
 801be68:	4401      	add	r1, r0
 801be6a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801be6c:	4402      	add	r2, r0
 801be6e:	e759      	b.n	801bd24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801be70:	b007      	add	sp, #28
 801be72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801be78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801be78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be7c:	b085      	sub	sp, #20
 801be7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801be82:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801be84:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801be86:	9203      	str	r2, [sp, #12]
 801be88:	6870      	ldr	r0, [r6, #4]
 801be8a:	686f      	ldr	r7, [r5, #4]
 801be8c:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801be90:	3704      	adds	r7, #4
 801be92:	9101      	str	r1, [sp, #4]
 801be94:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801be98:	fb00 2404 	mla	r4, r0, r4, r2
 801be9c:	6832      	ldr	r2, [r6, #0]
 801be9e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801bea2:	682a      	ldr	r2, [r5, #0]
 801bea4:	9202      	str	r2, [sp, #8]
 801bea6:	9a01      	ldr	r2, [sp, #4]
 801bea8:	2a00      	cmp	r2, #0
 801beaa:	dc03      	bgt.n	801beb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801beac:	9a03      	ldr	r2, [sp, #12]
 801beae:	2a00      	cmp	r2, #0
 801beb0:	f340 80cc 	ble.w	801c04c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801beb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801beb6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801beba:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bebe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bec0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801bec4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bec8:	2b00      	cmp	r3, #0
 801beca:	dd0d      	ble.n	801bee8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801becc:	1406      	asrs	r6, r0, #16
 801bece:	d405      	bmi.n	801bedc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801bed0:	454e      	cmp	r6, r9
 801bed2:	da03      	bge.n	801bedc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801bed4:	1416      	asrs	r6, r2, #16
 801bed6:	d401      	bmi.n	801bedc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801bed8:	4546      	cmp	r6, r8
 801beda:	db06      	blt.n	801beea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bedc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801bede:	4460      	add	r0, ip
 801bee0:	3b01      	subs	r3, #1
 801bee2:	3402      	adds	r4, #2
 801bee4:	4432      	add	r2, r6
 801bee6:	e7ef      	b.n	801bec8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801bee8:	d00f      	beq.n	801bf0a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801beea:	1e5e      	subs	r6, r3, #1
 801beec:	fb0c 0e06 	mla	lr, ip, r6, r0
 801bef0:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801bef4:	d543      	bpl.n	801bf7e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801bef6:	4698      	mov	r8, r3
 801bef8:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801befc:	f1b8 0f00 	cmp.w	r8, #0
 801bf00:	dc71      	bgt.n	801bfe6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801bf02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bf06:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bf0a:	9b01      	ldr	r3, [sp, #4]
 801bf0c:	2b00      	cmp	r3, #0
 801bf0e:	f340 809d 	ble.w	801c04c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801bf12:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bf16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf18:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bf1c:	eeb0 6a62 	vmov.f32	s12, s5
 801bf20:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bf24:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bf28:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bf2c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bf30:	eeb0 6a43 	vmov.f32	s12, s6
 801bf34:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bf38:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bf3c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bf40:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bf44:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bf48:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bf4c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bf50:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bf54:	ee12 2a90 	vmov	r2, s5
 801bf58:	eef0 2a47 	vmov.f32	s5, s14
 801bf5c:	fb92 fcf3 	sdiv	ip, r2, r3
 801bf60:	ee13 2a10 	vmov	r2, s6
 801bf64:	eeb0 3a67 	vmov.f32	s6, s15
 801bf68:	fb92 f3f3 	sdiv	r3, r2, r3
 801bf6c:	9312      	str	r3, [sp, #72]	; 0x48
 801bf6e:	9b01      	ldr	r3, [sp, #4]
 801bf70:	9a03      	ldr	r2, [sp, #12]
 801bf72:	3b01      	subs	r3, #1
 801bf74:	9301      	str	r3, [sp, #4]
 801bf76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf78:	bf08      	it	eq
 801bf7a:	4613      	moveq	r3, r2
 801bf7c:	e793      	b.n	801bea6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801bf7e:	45ce      	cmp	lr, r9
 801bf80:	dab9      	bge.n	801bef6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bf82:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bf84:	fb01 2606 	mla	r6, r1, r6, r2
 801bf88:	1436      	asrs	r6, r6, #16
 801bf8a:	d4b4      	bmi.n	801bef6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bf8c:	4546      	cmp	r6, r8
 801bf8e:	dab2      	bge.n	801bef6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bf90:	4698      	mov	r8, r3
 801bf92:	46a2      	mov	sl, r4
 801bf94:	f1b8 0f00 	cmp.w	r8, #0
 801bf98:	ddb3      	ble.n	801bf02 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801bf9a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801bf9e:	1416      	asrs	r6, r2, #16
 801bfa0:	9902      	ldr	r1, [sp, #8]
 801bfa2:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801bfa6:	f108 38ff 	add.w	r8, r8, #4294967295
 801bfaa:	4460      	add	r0, ip
 801bfac:	fb09 1606 	mla	r6, r9, r6, r1
 801bfb0:	4928      	ldr	r1, [pc, #160]	; (801c054 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801bfb2:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801bfb6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801bfba:	eb07 0b0e 	add.w	fp, r7, lr
 801bfbe:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801bfc2:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801bfc6:	00f6      	lsls	r6, r6, #3
 801bfc8:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801bfcc:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bfce:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bfd2:	440a      	add	r2, r1
 801bfd4:	ea49 0606 	orr.w	r6, r9, r6
 801bfd8:	f817 900e 	ldrb.w	r9, [r7, lr]
 801bfdc:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801bfe0:	f82a 6b02 	strh.w	r6, [sl], #2
 801bfe4:	e7d6      	b.n	801bf94 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801bfe6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801bfea:	d429      	bmi.n	801c040 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801bfec:	68ae      	ldr	r6, [r5, #8]
 801bfee:	454e      	cmp	r6, r9
 801bff0:	dd26      	ble.n	801c040 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801bff2:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801bff6:	d423      	bmi.n	801c040 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801bff8:	68e9      	ldr	r1, [r5, #12]
 801bffa:	4559      	cmp	r1, fp
 801bffc:	dd20      	ble.n	801c040 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801bffe:	fa0f fe86 	sxth.w	lr, r6
 801c002:	9902      	ldr	r1, [sp, #8]
 801c004:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801c008:	f06f 0101 	mvn.w	r1, #1
 801c00c:	f81e e009 	ldrb.w	lr, [lr, r9]
 801c010:	fb01 f908 	mul.w	r9, r1, r8
 801c014:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801c018:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c01c:	eb07 060e 	add.w	r6, r7, lr
 801c020:	f896 b002 	ldrb.w	fp, [r6, #2]
 801c024:	7876      	ldrb	r6, [r6, #1]
 801c026:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801c02a:	00f6      	lsls	r6, r6, #3
 801c02c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c030:	ea4b 0606 	orr.w	r6, fp, r6
 801c034:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801c038:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801c03c:	f82a 6009 	strh.w	r6, [sl, r9]
 801c040:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c042:	4460      	add	r0, ip
 801c044:	f108 38ff 	add.w	r8, r8, #4294967295
 801c048:	440a      	add	r2, r1
 801c04a:	e757      	b.n	801befc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c04c:	b005      	add	sp, #20
 801c04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c052:	bf00      	nop
 801c054:	fffff800 	.word	0xfffff800

0801c058 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c05c:	b087      	sub	sp, #28
 801c05e:	468b      	mov	fp, r1
 801c060:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c064:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c066:	9204      	str	r2, [sp, #16]
 801c068:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c06c:	6841      	ldr	r1, [r0, #4]
 801c06e:	9205      	str	r2, [sp, #20]
 801c070:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801c074:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801c078:	fb01 2404 	mla	r4, r1, r4, r2
 801c07c:	6802      	ldr	r2, [r0, #0]
 801c07e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c082:	f8dc 2000 	ldr.w	r2, [ip]
 801c086:	9201      	str	r2, [sp, #4]
 801c088:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c08c:	3204      	adds	r2, #4
 801c08e:	9202      	str	r2, [sp, #8]
 801c090:	f1bb 0f00 	cmp.w	fp, #0
 801c094:	dc03      	bgt.n	801c09e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801c096:	9a04      	ldr	r2, [sp, #16]
 801c098:	2a00      	cmp	r2, #0
 801c09a:	f340 8138 	ble.w	801c30e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801c09e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c0a0:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801c0a4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c0a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c0aa:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801c0ae:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	dd0e      	ble.n	801c0d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c0b6:	1402      	asrs	r2, r0, #16
 801c0b8:	d405      	bmi.n	801c0c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c0ba:	42ba      	cmp	r2, r7
 801c0bc:	da03      	bge.n	801c0c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c0be:	140a      	asrs	r2, r1, #16
 801c0c0:	d401      	bmi.n	801c0c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c0c2:	42b2      	cmp	r2, r6
 801c0c4:	db07      	blt.n	801c0d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c0c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c0c8:	3b01      	subs	r3, #1
 801c0ca:	3402      	adds	r4, #2
 801c0cc:	4410      	add	r0, r2
 801c0ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c0d0:	4411      	add	r1, r2
 801c0d2:	e7ee      	b.n	801c0b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801c0d4:	d019      	beq.n	801c10a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801c0d6:	1e5a      	subs	r2, r3, #1
 801c0d8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c0da:	fb05 0502 	mla	r5, r5, r2, r0
 801c0de:	142d      	asrs	r5, r5, #16
 801c0e0:	d409      	bmi.n	801c0f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c0e2:	42bd      	cmp	r5, r7
 801c0e4:	da07      	bge.n	801c0f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c0e6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c0e8:	fb05 1202 	mla	r2, r5, r2, r1
 801c0ec:	1412      	asrs	r2, r2, #16
 801c0ee:	d402      	bmi.n	801c0f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c0f0:	42b2      	cmp	r2, r6
 801c0f2:	f2c0 80ac 	blt.w	801c24e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801c0f6:	f04f 0e00 	mov.w	lr, #0
 801c0fa:	eb03 020e 	add.w	r2, r3, lr
 801c0fe:	2a00      	cmp	r2, #0
 801c100:	dc3e      	bgt.n	801c180 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801c102:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c106:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c10a:	f1bb 0f00 	cmp.w	fp, #0
 801c10e:	f340 80fe 	ble.w	801c30e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801c112:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c116:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c118:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c11c:	f1bb 0b01 	subs.w	fp, fp, #1
 801c120:	eeb0 6a62 	vmov.f32	s12, s5
 801c124:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c128:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c12c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c130:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c134:	eeb0 6a43 	vmov.f32	s12, s6
 801c138:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c13c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c140:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c144:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c148:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c14c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c150:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c154:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c158:	ee12 2a90 	vmov	r2, s5
 801c15c:	eef0 2a47 	vmov.f32	s5, s14
 801c160:	fb92 f3f3 	sdiv	r3, r2, r3
 801c164:	ee13 2a10 	vmov	r2, s6
 801c168:	9313      	str	r3, [sp, #76]	; 0x4c
 801c16a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c16c:	eeb0 3a67 	vmov.f32	s6, s15
 801c170:	fb92 f3f3 	sdiv	r3, r2, r3
 801c174:	9a04      	ldr	r2, [sp, #16]
 801c176:	9314      	str	r3, [sp, #80]	; 0x50
 801c178:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c17a:	bf08      	it	eq
 801c17c:	4613      	moveq	r3, r2
 801c17e:	e787      	b.n	801c090 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801c180:	1406      	asrs	r6, r0, #16
 801c182:	d45d      	bmi.n	801c240 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c184:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801c188:	42b5      	cmp	r5, r6
 801c18a:	dd59      	ble.n	801c240 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c18c:	140f      	asrs	r7, r1, #16
 801c18e:	d457      	bmi.n	801c240 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c190:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c194:	42ba      	cmp	r2, r7
 801c196:	dd53      	ble.n	801c240 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c198:	9a01      	ldr	r2, [sp, #4]
 801c19a:	b22d      	sxth	r5, r5
 801c19c:	fb07 2505 	mla	r5, r7, r5, r2
 801c1a0:	5daa      	ldrb	r2, [r5, r6]
 801c1a2:	9d02      	ldr	r5, [sp, #8]
 801c1a4:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801c1a8:	0e2e      	lsrs	r6, r5, #24
 801c1aa:	d049      	beq.n	801c240 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801c1ac:	f06f 0201 	mvn.w	r2, #1
 801c1b0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c1b4:	fb02 f20e 	mul.w	r2, r2, lr
 801c1b8:	f834 8002 	ldrh.w	r8, [r4, r2]
 801c1bc:	9203      	str	r2, [sp, #12]
 801c1be:	9a05      	ldr	r2, [sp, #20]
 801c1c0:	ea4f 2728 	mov.w	r7, r8, asr #8
 801c1c4:	4356      	muls	r6, r2
 801c1c6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c1ca:	1c72      	adds	r2, r6, #1
 801c1cc:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801c1d0:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801c1d4:	b2ed      	uxtb	r5, r5
 801c1d6:	1212      	asrs	r2, r2, #8
 801c1d8:	fa1f f982 	uxth.w	r9, r2
 801c1dc:	43d2      	mvns	r2, r2
 801c1de:	fb16 f609 	smulbb	r6, r6, r9
 801c1e2:	b2d2      	uxtb	r2, r2
 801c1e4:	fb15 f509 	smulbb	r5, r5, r9
 801c1e8:	fb07 6702 	mla	r7, r7, r2, r6
 801c1ec:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801c1f0:	fb1a fa09 	smulbb	sl, sl, r9
 801c1f4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c1f8:	b2bf      	uxth	r7, r7
 801c1fa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c1fe:	fa5f f888 	uxtb.w	r8, r8
 801c202:	fb06 a602 	mla	r6, r6, r2, sl
 801c206:	fb08 5502 	mla	r5, r8, r2, r5
 801c20a:	1c7a      	adds	r2, r7, #1
 801c20c:	b2b6      	uxth	r6, r6
 801c20e:	b2ad      	uxth	r5, r5
 801c210:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801c214:	9a03      	ldr	r2, [sp, #12]
 801c216:	f105 0a01 	add.w	sl, r5, #1
 801c21a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c21e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c222:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c226:	ea4a 0707 	orr.w	r7, sl, r7
 801c22a:	f106 0a01 	add.w	sl, r6, #1
 801c22e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c232:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c236:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c23a:	ea47 070a 	orr.w	r7, r7, sl
 801c23e:	52a7      	strh	r7, [r4, r2]
 801c240:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c242:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c246:	4410      	add	r0, r2
 801c248:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c24a:	4411      	add	r1, r2
 801c24c:	e755      	b.n	801c0fa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801c24e:	f04f 0800 	mov.w	r8, #0
 801c252:	eba3 0208 	sub.w	r2, r3, r8
 801c256:	2a00      	cmp	r2, #0
 801c258:	f77f af53 	ble.w	801c102 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801c25c:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801c260:	140a      	asrs	r2, r1, #16
 801c262:	9f01      	ldr	r7, [sp, #4]
 801c264:	1405      	asrs	r5, r0, #16
 801c266:	fb06 7202 	mla	r2, r6, r2, r7
 801c26a:	5d52      	ldrb	r2, [r2, r5]
 801c26c:	9d02      	ldr	r5, [sp, #8]
 801c26e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801c272:	0e2e      	lsrs	r6, r5, #24
 801c274:	d044      	beq.n	801c300 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801c276:	9a05      	ldr	r2, [sp, #20]
 801c278:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c27c:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801c280:	4356      	muls	r6, r2
 801c282:	ea4f 272e 	mov.w	r7, lr, asr #8
 801c286:	1c72      	adds	r2, r6, #1
 801c288:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c28c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801c290:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801c294:	b2ed      	uxtb	r5, r5
 801c296:	1212      	asrs	r2, r2, #8
 801c298:	fa1f f982 	uxth.w	r9, r2
 801c29c:	43d2      	mvns	r2, r2
 801c29e:	fb16 f609 	smulbb	r6, r6, r9
 801c2a2:	b2d2      	uxtb	r2, r2
 801c2a4:	fb15 f509 	smulbb	r5, r5, r9
 801c2a8:	fb07 6702 	mla	r7, r7, r2, r6
 801c2ac:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801c2b0:	fb1a fa09 	smulbb	sl, sl, r9
 801c2b4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c2b8:	b2bf      	uxth	r7, r7
 801c2ba:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c2be:	fa5f fe8e 	uxtb.w	lr, lr
 801c2c2:	fb06 a602 	mla	r6, r6, r2, sl
 801c2c6:	fb0e 5502 	mla	r5, lr, r2, r5
 801c2ca:	1c7a      	adds	r2, r7, #1
 801c2cc:	b2b6      	uxth	r6, r6
 801c2ce:	b2ad      	uxth	r5, r5
 801c2d0:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801c2d4:	f105 0a01 	add.w	sl, r5, #1
 801c2d8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c2dc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c2e0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c2e4:	ea4a 0707 	orr.w	r7, sl, r7
 801c2e8:	f106 0a01 	add.w	sl, r6, #1
 801c2ec:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c2f0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c2f4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c2f8:	ea47 070a 	orr.w	r7, r7, sl
 801c2fc:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801c300:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c302:	f108 0801 	add.w	r8, r8, #1
 801c306:	4410      	add	r0, r2
 801c308:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c30a:	4411      	add	r1, r2
 801c30c:	e7a1      	b.n	801c252 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801c30e:	b007      	add	sp, #28
 801c310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c314 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c318:	b085      	sub	sp, #20
 801c31a:	468b      	mov	fp, r1
 801c31c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c320:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801c322:	9203      	str	r2, [sp, #12]
 801c324:	6841      	ldr	r1, [r0, #4]
 801c326:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801c32a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c32e:	fb01 2404 	mla	r4, r1, r4, r2
 801c332:	6802      	ldr	r2, [r0, #0]
 801c334:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c338:	f8de 2000 	ldr.w	r2, [lr]
 801c33c:	9200      	str	r2, [sp, #0]
 801c33e:	f8de 2004 	ldr.w	r2, [lr, #4]
 801c342:	3204      	adds	r2, #4
 801c344:	9201      	str	r2, [sp, #4]
 801c346:	f1bb 0f00 	cmp.w	fp, #0
 801c34a:	dc03      	bgt.n	801c354 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801c34c:	9a03      	ldr	r2, [sp, #12]
 801c34e:	2a00      	cmp	r2, #0
 801c350:	f340 8153 	ble.w	801c5fa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801c354:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c356:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801c35a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c35e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c360:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801c364:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c368:	2b00      	cmp	r3, #0
 801c36a:	dd0e      	ble.n	801c38a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c36c:	1408      	asrs	r0, r1, #16
 801c36e:	d405      	bmi.n	801c37c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c370:	42b8      	cmp	r0, r7
 801c372:	da03      	bge.n	801c37c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c374:	1410      	asrs	r0, r2, #16
 801c376:	d401      	bmi.n	801c37c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c378:	42b0      	cmp	r0, r6
 801c37a:	db07      	blt.n	801c38c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c37c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c37e:	3b01      	subs	r3, #1
 801c380:	3402      	adds	r4, #2
 801c382:	4401      	add	r1, r0
 801c384:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c386:	4402      	add	r2, r0
 801c388:	e7ee      	b.n	801c368 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801c38a:	d017      	beq.n	801c3bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801c38c:	1e58      	subs	r0, r3, #1
 801c38e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c390:	fb05 1500 	mla	r5, r5, r0, r1
 801c394:	142d      	asrs	r5, r5, #16
 801c396:	d409      	bmi.n	801c3ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c398:	42bd      	cmp	r5, r7
 801c39a:	da07      	bge.n	801c3ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c39c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c39e:	fb05 2000 	mla	r0, r5, r0, r2
 801c3a2:	1400      	asrs	r0, r0, #16
 801c3a4:	d402      	bmi.n	801c3ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c3a6:	42b0      	cmp	r0, r6
 801c3a8:	f2c0 80bc 	blt.w	801c524 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801c3ac:	2600      	movs	r6, #0
 801c3ae:	1998      	adds	r0, r3, r6
 801c3b0:	2800      	cmp	r0, #0
 801c3b2:	dc3e      	bgt.n	801c432 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801c3b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c3b8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c3bc:	f1bb 0f00 	cmp.w	fp, #0
 801c3c0:	f340 811b 	ble.w	801c5fa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801c3c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c3c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c3ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c3ce:	f1bb 0b01 	subs.w	fp, fp, #1
 801c3d2:	eeb0 6a62 	vmov.f32	s12, s5
 801c3d6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c3da:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c3de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c3e2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c3e6:	eeb0 6a43 	vmov.f32	s12, s6
 801c3ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c3ee:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c3f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c3f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c3fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c3fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c402:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c406:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c40a:	ee12 2a90 	vmov	r2, s5
 801c40e:	eef0 2a47 	vmov.f32	s5, s14
 801c412:	fb92 f3f3 	sdiv	r3, r2, r3
 801c416:	ee13 2a10 	vmov	r2, s6
 801c41a:	9311      	str	r3, [sp, #68]	; 0x44
 801c41c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c41e:	eeb0 3a67 	vmov.f32	s6, s15
 801c422:	fb92 f3f3 	sdiv	r3, r2, r3
 801c426:	9a03      	ldr	r2, [sp, #12]
 801c428:	9312      	str	r3, [sp, #72]	; 0x48
 801c42a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c42c:	bf08      	it	eq
 801c42e:	4613      	moveq	r3, r2
 801c430:	e789      	b.n	801c346 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801c432:	140f      	asrs	r7, r1, #16
 801c434:	d426      	bmi.n	801c484 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c436:	f8de 5008 	ldr.w	r5, [lr, #8]
 801c43a:	42bd      	cmp	r5, r7
 801c43c:	dd22      	ble.n	801c484 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c43e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c442:	d41f      	bmi.n	801c484 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c444:	f8de 000c 	ldr.w	r0, [lr, #12]
 801c448:	4560      	cmp	r0, ip
 801c44a:	dd1b      	ble.n	801c484 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c44c:	9800      	ldr	r0, [sp, #0]
 801c44e:	b22d      	sxth	r5, r5
 801c450:	fb0c 0505 	mla	r5, ip, r5, r0
 801c454:	5de8      	ldrb	r0, [r5, r7]
 801c456:	9d01      	ldr	r5, [sp, #4]
 801c458:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801c45c:	0e07      	lsrs	r7, r0, #24
 801c45e:	2fff      	cmp	r7, #255	; 0xff
 801c460:	d116      	bne.n	801c490 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c462:	f06f 0501 	mvn.w	r5, #1
 801c466:	fb05 f706 	mul.w	r7, r5, r6
 801c46a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801c46e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801c472:	0945      	lsrs	r5, r0, #5
 801c474:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801c478:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c47c:	ea4c 0505 	orr.w	r5, ip, r5
 801c480:	4305      	orrs	r5, r0
 801c482:	53e5      	strh	r5, [r4, r7]
 801c484:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c486:	3e01      	subs	r6, #1
 801c488:	4401      	add	r1, r0
 801c48a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c48c:	4402      	add	r2, r0
 801c48e:	e78e      	b.n	801c3ae <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801c490:	b2fd      	uxtb	r5, r7
 801c492:	2f00      	cmp	r7, #0
 801c494:	d0f6      	beq.n	801c484 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c496:	f06f 0701 	mvn.w	r7, #1
 801c49a:	fa1f f985 	uxth.w	r9, r5
 801c49e:	43ed      	mvns	r5, r5
 801c4a0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801c4a4:	4377      	muls	r7, r6
 801c4a6:	fb1a fa09 	smulbb	sl, sl, r9
 801c4aa:	b2ed      	uxtb	r5, r5
 801c4ac:	f834 8007 	ldrh.w	r8, [r4, r7]
 801c4b0:	9702      	str	r7, [sp, #8]
 801c4b2:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801c4b6:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801c4ba:	fb17 f709 	smulbb	r7, r7, r9
 801c4be:	b2c0      	uxtb	r0, r0
 801c4c0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c4c4:	fb10 f009 	smulbb	r0, r0, r9
 801c4c8:	fb0c 7c05 	mla	ip, ip, r5, r7
 801c4cc:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801c4d0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c4d4:	fa1f fc8c 	uxth.w	ip, ip
 801c4d8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c4dc:	fa5f f888 	uxtb.w	r8, r8
 801c4e0:	fb07 a705 	mla	r7, r7, r5, sl
 801c4e4:	fb08 0005 	mla	r0, r8, r5, r0
 801c4e8:	f10c 0501 	add.w	r5, ip, #1
 801c4ec:	b2bf      	uxth	r7, r7
 801c4ee:	b280      	uxth	r0, r0
 801c4f0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c4f4:	f100 0a01 	add.w	sl, r0, #1
 801c4f8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c4fc:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801c500:	9802      	ldr	r0, [sp, #8]
 801c502:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c506:	ea4a 0c0c 	orr.w	ip, sl, ip
 801c50a:	f107 0a01 	add.w	sl, r7, #1
 801c50e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801c512:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c516:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c51a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c51e:	f824 c000 	strh.w	ip, [r4, r0]
 801c522:	e7af      	b.n	801c484 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c524:	f04f 0800 	mov.w	r8, #0
 801c528:	eba3 0008 	sub.w	r0, r3, r8
 801c52c:	2800      	cmp	r0, #0
 801c52e:	f77f af41 	ble.w	801c3b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c532:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801c536:	1410      	asrs	r0, r2, #16
 801c538:	9f00      	ldr	r7, [sp, #0]
 801c53a:	140d      	asrs	r5, r1, #16
 801c53c:	fb06 7000 	mla	r0, r6, r0, r7
 801c540:	5d40      	ldrb	r0, [r0, r5]
 801c542:	9d01      	ldr	r5, [sp, #4]
 801c544:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801c548:	0e2e      	lsrs	r6, r5, #24
 801c54a:	2eff      	cmp	r6, #255	; 0xff
 801c54c:	d112      	bne.n	801c574 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801c54e:	482c      	ldr	r0, [pc, #176]	; (801c600 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801c550:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801c554:	0968      	lsrs	r0, r5, #5
 801c556:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801c55a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c55e:	4330      	orrs	r0, r6
 801c560:	4328      	orrs	r0, r5
 801c562:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801c566:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c568:	f108 0801 	add.w	r8, r8, #1
 801c56c:	4401      	add	r1, r0
 801c56e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c570:	4402      	add	r2, r0
 801c572:	e7d9      	b.n	801c528 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c574:	b2f0      	uxtb	r0, r6
 801c576:	2e00      	cmp	r6, #0
 801c578:	d0f5      	beq.n	801c566 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801c57a:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801c57e:	fa1f f980 	uxth.w	r9, r0
 801c582:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801c586:	43c0      	mvns	r0, r0
 801c588:	ea4f 272c 	mov.w	r7, ip, asr #8
 801c58c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c590:	fb16 f609 	smulbb	r6, r6, r9
 801c594:	b2c0      	uxtb	r0, r0
 801c596:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c59a:	b2ed      	uxtb	r5, r5
 801c59c:	fb1a fa09 	smulbb	sl, sl, r9
 801c5a0:	fb07 6700 	mla	r7, r7, r0, r6
 801c5a4:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801c5a8:	fb15 f509 	smulbb	r5, r5, r9
 801c5ac:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c5b0:	b2bf      	uxth	r7, r7
 801c5b2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c5b6:	fa5f fc8c 	uxtb.w	ip, ip
 801c5ba:	fb06 a600 	mla	r6, r6, r0, sl
 801c5be:	fb0c 5500 	mla	r5, ip, r0, r5
 801c5c2:	1c78      	adds	r0, r7, #1
 801c5c4:	b2b6      	uxth	r6, r6
 801c5c6:	b2ad      	uxth	r5, r5
 801c5c8:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801c5cc:	f105 0a01 	add.w	sl, r5, #1
 801c5d0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c5d4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c5d8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c5dc:	ea4a 0707 	orr.w	r7, sl, r7
 801c5e0:	f106 0a01 	add.w	sl, r6, #1
 801c5e4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c5e8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c5ec:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c5f0:	ea47 070a 	orr.w	r7, r7, sl
 801c5f4:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801c5f8:	e7b5      	b.n	801c566 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801c5fa:	b005      	add	sp, #20
 801c5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c600:	fffff800 	.word	0xfffff800

0801c604 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c608:	b087      	sub	sp, #28
 801c60a:	468b      	mov	fp, r1
 801c60c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c610:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c612:	9204      	str	r2, [sp, #16]
 801c614:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c618:	6861      	ldr	r1, [r4, #4]
 801c61a:	9205      	str	r2, [sp, #20]
 801c61c:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801c620:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801c624:	fb01 2000 	mla	r0, r1, r0, r2
 801c628:	6822      	ldr	r2, [r4, #0]
 801c62a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801c62e:	f8de 2000 	ldr.w	r2, [lr]
 801c632:	9201      	str	r2, [sp, #4]
 801c634:	f8de 2004 	ldr.w	r2, [lr, #4]
 801c638:	9202      	str	r2, [sp, #8]
 801c63a:	f1bb 0f00 	cmp.w	fp, #0
 801c63e:	dc03      	bgt.n	801c648 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801c640:	9a04      	ldr	r2, [sp, #16]
 801c642:	2a00      	cmp	r2, #0
 801c644:	f340 8142 	ble.w	801c8cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801c648:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c64a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801c64e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c652:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c654:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801c658:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	dd0e      	ble.n	801c67e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c660:	140c      	asrs	r4, r1, #16
 801c662:	d405      	bmi.n	801c670 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c664:	42bc      	cmp	r4, r7
 801c666:	da03      	bge.n	801c670 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c668:	1414      	asrs	r4, r2, #16
 801c66a:	d401      	bmi.n	801c670 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c66c:	42b4      	cmp	r4, r6
 801c66e:	db07      	blt.n	801c680 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c670:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c672:	3b01      	subs	r3, #1
 801c674:	3002      	adds	r0, #2
 801c676:	4421      	add	r1, r4
 801c678:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c67a:	4422      	add	r2, r4
 801c67c:	e7ee      	b.n	801c65c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801c67e:	d019      	beq.n	801c6b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801c680:	1e5c      	subs	r4, r3, #1
 801c682:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c684:	fb05 1504 	mla	r5, r5, r4, r1
 801c688:	142d      	asrs	r5, r5, #16
 801c68a:	d409      	bmi.n	801c6a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801c68c:	42bd      	cmp	r5, r7
 801c68e:	da07      	bge.n	801c6a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801c690:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801c692:	fb05 2404 	mla	r4, r5, r4, r2
 801c696:	1424      	asrs	r4, r4, #16
 801c698:	d402      	bmi.n	801c6a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801c69a:	42b4      	cmp	r4, r6
 801c69c:	f2c0 80b1 	blt.w	801c802 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801c6a0:	f04f 0800 	mov.w	r8, #0
 801c6a4:	eb03 0408 	add.w	r4, r3, r8
 801c6a8:	2c00      	cmp	r4, #0
 801c6aa:	dc3e      	bgt.n	801c72a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c6ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c6b0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c6b4:	f1bb 0f00 	cmp.w	fp, #0
 801c6b8:	f340 8108 	ble.w	801c8cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801c6bc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c6c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c6c2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c6c6:	f1bb 0b01 	subs.w	fp, fp, #1
 801c6ca:	eeb0 6a62 	vmov.f32	s12, s5
 801c6ce:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c6d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c6d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c6da:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c6de:	eeb0 6a43 	vmov.f32	s12, s6
 801c6e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c6e6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c6ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c6ee:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c6f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c6f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c6fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c6fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c702:	ee12 2a90 	vmov	r2, s5
 801c706:	eef0 2a47 	vmov.f32	s5, s14
 801c70a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c70e:	ee13 2a10 	vmov	r2, s6
 801c712:	9313      	str	r3, [sp, #76]	; 0x4c
 801c714:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c716:	eeb0 3a67 	vmov.f32	s6, s15
 801c71a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c71e:	9a04      	ldr	r2, [sp, #16]
 801c720:	9314      	str	r3, [sp, #80]	; 0x50
 801c722:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c724:	bf08      	it	eq
 801c726:	4613      	moveq	r3, r2
 801c728:	e787      	b.n	801c63a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801c72a:	140e      	asrs	r6, r1, #16
 801c72c:	d462      	bmi.n	801c7f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c72e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801c732:	42b5      	cmp	r5, r6
 801c734:	dd5e      	ble.n	801c7f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c736:	1417      	asrs	r7, r2, #16
 801c738:	d45c      	bmi.n	801c7f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c73a:	f8de 400c 	ldr.w	r4, [lr, #12]
 801c73e:	42bc      	cmp	r4, r7
 801c740:	dd58      	ble.n	801c7f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c742:	b22d      	sxth	r5, r5
 801c744:	9c02      	ldr	r4, [sp, #8]
 801c746:	fb07 6505 	mla	r5, r7, r5, r6
 801c74a:	5d66      	ldrb	r6, [r4, r5]
 801c74c:	2e00      	cmp	r6, #0
 801c74e:	d051      	beq.n	801c7f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c750:	9c01      	ldr	r4, [sp, #4]
 801c752:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801c756:	f06f 0401 	mvn.w	r4, #1
 801c75a:	fb04 f408 	mul.w	r4, r4, r8
 801c75e:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801c762:	5b05      	ldrh	r5, [r0, r4]
 801c764:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c768:	9403      	str	r4, [sp, #12]
 801c76a:	9c05      	ldr	r4, [sp, #20]
 801c76c:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801c770:	4366      	muls	r6, r4
 801c772:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801c776:	1c74      	adds	r4, r6, #1
 801c778:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801c77c:	122e      	asrs	r6, r5, #8
 801c77e:	1224      	asrs	r4, r4, #8
 801c780:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c784:	00ed      	lsls	r5, r5, #3
 801c786:	b2a7      	uxth	r7, r4
 801c788:	43e4      	mvns	r4, r4
 801c78a:	b2ed      	uxtb	r5, r5
 801c78c:	b2e4      	uxtb	r4, r4
 801c78e:	fb16 f604 	smulbb	r6, r6, r4
 801c792:	fb15 f504 	smulbb	r5, r5, r4
 801c796:	fb0c 6c07 	mla	ip, ip, r7, r6
 801c79a:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801c79e:	fb1a fa04 	smulbb	sl, sl, r4
 801c7a2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801c7a6:	fa1f fc8c 	uxth.w	ip, ip
 801c7aa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c7ae:	fa5f f989 	uxtb.w	r9, r9
 801c7b2:	fb06 a607 	mla	r6, r6, r7, sl
 801c7b6:	f10c 0401 	add.w	r4, ip, #1
 801c7ba:	fb09 5507 	mla	r5, r9, r7, r5
 801c7be:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801c7c2:	9c03      	ldr	r4, [sp, #12]
 801c7c4:	b2ad      	uxth	r5, r5
 801c7c6:	b2b6      	uxth	r6, r6
 801c7c8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c7cc:	f105 0a01 	add.w	sl, r5, #1
 801c7d0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c7d4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c7d8:	ea4a 0c0c 	orr.w	ip, sl, ip
 801c7dc:	f106 0a01 	add.w	sl, r6, #1
 801c7e0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c7e4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c7e8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c7ec:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c7f0:	f820 c004 	strh.w	ip, [r0, r4]
 801c7f4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c7f6:	f108 38ff 	add.w	r8, r8, #4294967295
 801c7fa:	4421      	add	r1, r4
 801c7fc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c7fe:	4422      	add	r2, r4
 801c800:	e750      	b.n	801c6a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c802:	f04f 0900 	mov.w	r9, #0
 801c806:	eba3 0409 	sub.w	r4, r3, r9
 801c80a:	2c00      	cmp	r4, #0
 801c80c:	f77f af4e 	ble.w	801c6ac <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801c810:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801c814:	140d      	asrs	r5, r1, #16
 801c816:	1414      	asrs	r4, r2, #16
 801c818:	fb06 5404 	mla	r4, r6, r4, r5
 801c81c:	9d02      	ldr	r5, [sp, #8]
 801c81e:	5d2e      	ldrb	r6, [r5, r4]
 801c820:	2e00      	cmp	r6, #0
 801c822:	d04c      	beq.n	801c8be <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801c824:	9d01      	ldr	r5, [sp, #4]
 801c826:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801c82a:	9c05      	ldr	r4, [sp, #20]
 801c82c:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801c830:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801c834:	4366      	muls	r6, r4
 801c836:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801c83a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c83e:	1c74      	adds	r4, r6, #1
 801c840:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801c844:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801c848:	122e      	asrs	r6, r5, #8
 801c84a:	1224      	asrs	r4, r4, #8
 801c84c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c850:	00ed      	lsls	r5, r5, #3
 801c852:	b2a7      	uxth	r7, r4
 801c854:	43e4      	mvns	r4, r4
 801c856:	b2ed      	uxtb	r5, r5
 801c858:	b2e4      	uxtb	r4, r4
 801c85a:	fb16 f604 	smulbb	r6, r6, r4
 801c85e:	fb15 f504 	smulbb	r5, r5, r4
 801c862:	fb0c 6c07 	mla	ip, ip, r7, r6
 801c866:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801c86a:	fb1a fa04 	smulbb	sl, sl, r4
 801c86e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c872:	fa1f fc8c 	uxth.w	ip, ip
 801c876:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c87a:	fa5f f888 	uxtb.w	r8, r8
 801c87e:	fb06 a607 	mla	r6, r6, r7, sl
 801c882:	f10c 0401 	add.w	r4, ip, #1
 801c886:	fb08 5507 	mla	r5, r8, r7, r5
 801c88a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801c88e:	b2ad      	uxth	r5, r5
 801c890:	b2b6      	uxth	r6, r6
 801c892:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c896:	f105 0a01 	add.w	sl, r5, #1
 801c89a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c89e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c8a2:	ea4a 0c0c 	orr.w	ip, sl, ip
 801c8a6:	f106 0a01 	add.w	sl, r6, #1
 801c8aa:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c8ae:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c8b2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c8b6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c8ba:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801c8be:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c8c0:	f109 0901 	add.w	r9, r9, #1
 801c8c4:	4421      	add	r1, r4
 801c8c6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c8c8:	4422      	add	r2, r4
 801c8ca:	e79c      	b.n	801c806 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801c8cc:	b007      	add	sp, #28
 801c8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c8d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c8d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8d6:	b085      	sub	sp, #20
 801c8d8:	468b      	mov	fp, r1
 801c8da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c8de:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c8e0:	9203      	str	r2, [sp, #12]
 801c8e2:	6861      	ldr	r1, [r4, #4]
 801c8e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801c8e8:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801c8ec:	fb01 2000 	mla	r0, r1, r0, r2
 801c8f0:	6822      	ldr	r2, [r4, #0]
 801c8f2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801c8f6:	f8d8 2000 	ldr.w	r2, [r8]
 801c8fa:	9200      	str	r2, [sp, #0]
 801c8fc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801c900:	9201      	str	r2, [sp, #4]
 801c902:	f1bb 0f00 	cmp.w	fp, #0
 801c906:	dc03      	bgt.n	801c910 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c908:	9a03      	ldr	r2, [sp, #12]
 801c90a:	2a00      	cmp	r2, #0
 801c90c:	f340 8146 	ble.w	801cb9c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801c910:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c912:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801c916:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801c91a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c91c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801c920:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c924:	2b00      	cmp	r3, #0
 801c926:	dd0e      	ble.n	801c946 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801c928:	140c      	asrs	r4, r1, #16
 801c92a:	d405      	bmi.n	801c938 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c92c:	42bc      	cmp	r4, r7
 801c92e:	da03      	bge.n	801c938 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c930:	1414      	asrs	r4, r2, #16
 801c932:	d401      	bmi.n	801c938 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c934:	42b4      	cmp	r4, r6
 801c936:	db07      	blt.n	801c948 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c938:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c93a:	3b01      	subs	r3, #1
 801c93c:	3002      	adds	r0, #2
 801c93e:	4421      	add	r1, r4
 801c940:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c942:	4422      	add	r2, r4
 801c944:	e7ee      	b.n	801c924 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c946:	d017      	beq.n	801c978 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801c948:	1e5c      	subs	r4, r3, #1
 801c94a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c94c:	fb05 1504 	mla	r5, r5, r4, r1
 801c950:	142d      	asrs	r5, r5, #16
 801c952:	d409      	bmi.n	801c968 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c954:	42bd      	cmp	r5, r7
 801c956:	da07      	bge.n	801c968 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c958:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c95a:	fb05 2404 	mla	r4, r5, r4, r2
 801c95e:	1424      	asrs	r4, r4, #16
 801c960:	d402      	bmi.n	801c968 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c962:	42b4      	cmp	r4, r6
 801c964:	f2c0 80b3 	blt.w	801cace <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801c968:	2600      	movs	r6, #0
 801c96a:	199c      	adds	r4, r3, r6
 801c96c:	2c00      	cmp	r4, #0
 801c96e:	dc3e      	bgt.n	801c9ee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801c970:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c974:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c978:	f1bb 0f00 	cmp.w	fp, #0
 801c97c:	f340 810e 	ble.w	801cb9c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801c980:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c986:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c98a:	f1bb 0b01 	subs.w	fp, fp, #1
 801c98e:	eeb0 6a62 	vmov.f32	s12, s5
 801c992:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c996:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c99a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c99e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c9a2:	eeb0 6a43 	vmov.f32	s12, s6
 801c9a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c9aa:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c9ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c9b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c9b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c9ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c9be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c9c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c9c6:	ee12 2a90 	vmov	r2, s5
 801c9ca:	eef0 2a47 	vmov.f32	s5, s14
 801c9ce:	fb92 f3f3 	sdiv	r3, r2, r3
 801c9d2:	ee13 2a10 	vmov	r2, s6
 801c9d6:	9311      	str	r3, [sp, #68]	; 0x44
 801c9d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c9da:	eeb0 3a67 	vmov.f32	s6, s15
 801c9de:	fb92 f3f3 	sdiv	r3, r2, r3
 801c9e2:	9a03      	ldr	r2, [sp, #12]
 801c9e4:	9312      	str	r3, [sp, #72]	; 0x48
 801c9e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c9e8:	bf08      	it	eq
 801c9ea:	4613      	moveq	r3, r2
 801c9ec:	e789      	b.n	801c902 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801c9ee:	140f      	asrs	r7, r1, #16
 801c9f0:	d418      	bmi.n	801ca24 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c9f2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801c9f6:	42bd      	cmp	r5, r7
 801c9f8:	dd14      	ble.n	801ca24 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c9fa:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c9fe:	d411      	bmi.n	801ca24 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ca00:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801ca04:	4564      	cmp	r4, ip
 801ca06:	dd0d      	ble.n	801ca24 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ca08:	b22d      	sxth	r5, r5
 801ca0a:	9c01      	ldr	r4, [sp, #4]
 801ca0c:	fb0c 7505 	mla	r5, ip, r5, r7
 801ca10:	5d64      	ldrb	r4, [r4, r5]
 801ca12:	2cff      	cmp	r4, #255	; 0xff
 801ca14:	d10c      	bne.n	801ca30 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801ca16:	9c00      	ldr	r4, [sp, #0]
 801ca18:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801ca1c:	f06f 0401 	mvn.w	r4, #1
 801ca20:	4374      	muls	r4, r6
 801ca22:	5305      	strh	r5, [r0, r4]
 801ca24:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ca26:	3e01      	subs	r6, #1
 801ca28:	4421      	add	r1, r4
 801ca2a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ca2c:	4422      	add	r2, r4
 801ca2e:	e79c      	b.n	801c96a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ca30:	2c00      	cmp	r4, #0
 801ca32:	d0f7      	beq.n	801ca24 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ca34:	9f00      	ldr	r7, [sp, #0]
 801ca36:	fa1f fc84 	uxth.w	ip, r4
 801ca3a:	43e4      	mvns	r4, r4
 801ca3c:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801ca40:	f06f 0501 	mvn.w	r5, #1
 801ca44:	b2e4      	uxtb	r4, r4
 801ca46:	4375      	muls	r5, r6
 801ca48:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801ca4c:	9502      	str	r5, [sp, #8]
 801ca4e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801ca52:	5b45      	ldrh	r5, [r0, r5]
 801ca54:	122f      	asrs	r7, r5, #8
 801ca56:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ca5a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ca5e:	00ed      	lsls	r5, r5, #3
 801ca60:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ca64:	fb17 f704 	smulbb	r7, r7, r4
 801ca68:	b2ed      	uxtb	r5, r5
 801ca6a:	fb1a fa04 	smulbb	sl, sl, r4
 801ca6e:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801ca72:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801ca76:	fb15 f504 	smulbb	r5, r5, r4
 801ca7a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801ca7e:	fa1f fe8e 	uxth.w	lr, lr
 801ca82:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ca86:	fa5f f989 	uxtb.w	r9, r9
 801ca8a:	fb07 a70c 	mla	r7, r7, ip, sl
 801ca8e:	f10e 0401 	add.w	r4, lr, #1
 801ca92:	fb09 550c 	mla	r5, r9, ip, r5
 801ca96:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801ca9a:	9c02      	ldr	r4, [sp, #8]
 801ca9c:	b2ad      	uxth	r5, r5
 801ca9e:	b2bf      	uxth	r7, r7
 801caa0:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801caa4:	f105 0a01 	add.w	sl, r5, #1
 801caa8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801caac:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cab0:	ea4a 0e0e 	orr.w	lr, sl, lr
 801cab4:	f107 0a01 	add.w	sl, r7, #1
 801cab8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801cabc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cac0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cac4:	ea4e 0e0a 	orr.w	lr, lr, sl
 801cac8:	f820 e004 	strh.w	lr, [r0, r4]
 801cacc:	e7aa      	b.n	801ca24 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801cace:	f04f 0900 	mov.w	r9, #0
 801cad2:	eba3 0409 	sub.w	r4, r3, r9
 801cad6:	2c00      	cmp	r4, #0
 801cad8:	f77f af4a 	ble.w	801c970 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801cadc:	1414      	asrs	r4, r2, #16
 801cade:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801cae2:	140d      	asrs	r5, r1, #16
 801cae4:	fb06 5504 	mla	r5, r6, r4, r5
 801cae8:	9c01      	ldr	r4, [sp, #4]
 801caea:	5d64      	ldrb	r4, [r4, r5]
 801caec:	2cff      	cmp	r4, #255	; 0xff
 801caee:	d10b      	bne.n	801cb08 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801caf0:	9c00      	ldr	r4, [sp, #0]
 801caf2:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801caf6:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801cafa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cafc:	f109 0901 	add.w	r9, r9, #1
 801cb00:	4421      	add	r1, r4
 801cb02:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cb04:	4422      	add	r2, r4
 801cb06:	e7e4      	b.n	801cad2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801cb08:	2c00      	cmp	r4, #0
 801cb0a:	d0f6      	beq.n	801cafa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801cb0c:	9e00      	ldr	r6, [sp, #0]
 801cb0e:	b2a7      	uxth	r7, r4
 801cb10:	43e4      	mvns	r4, r4
 801cb12:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801cb16:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801cb1a:	b2e4      	uxtb	r4, r4
 801cb1c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801cb20:	122e      	asrs	r6, r5, #8
 801cb22:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801cb26:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cb2a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801cb2e:	00ed      	lsls	r5, r5, #3
 801cb30:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801cb34:	fb16 f604 	smulbb	r6, r6, r4
 801cb38:	b2ed      	uxtb	r5, r5
 801cb3a:	fb1a fa04 	smulbb	sl, sl, r4
 801cb3e:	fb0c 6c07 	mla	ip, ip, r7, r6
 801cb42:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801cb46:	fb15 f504 	smulbb	r5, r5, r4
 801cb4a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801cb4e:	fa1f fc8c 	uxth.w	ip, ip
 801cb52:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801cb56:	fa5f fe8e 	uxtb.w	lr, lr
 801cb5a:	fb06 a607 	mla	r6, r6, r7, sl
 801cb5e:	f10c 0401 	add.w	r4, ip, #1
 801cb62:	fb0e 5507 	mla	r5, lr, r7, r5
 801cb66:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801cb6a:	b2ad      	uxth	r5, r5
 801cb6c:	b2b6      	uxth	r6, r6
 801cb6e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801cb72:	f105 0a01 	add.w	sl, r5, #1
 801cb76:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cb7a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cb7e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801cb82:	f106 0a01 	add.w	sl, r6, #1
 801cb86:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801cb8a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cb8e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cb92:	ea4c 0c0a 	orr.w	ip, ip, sl
 801cb96:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801cb9a:	e7ae      	b.n	801cafa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801cb9c:	b005      	add	sp, #20
 801cb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cba2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cba2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cba6:	b085      	sub	sp, #20
 801cba8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801cbaa:	9203      	str	r2, [sp, #12]
 801cbac:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801cbb0:	9100      	str	r1, [sp, #0]
 801cbb2:	9201      	str	r2, [sp, #4]
 801cbb4:	6841      	ldr	r1, [r0, #4]
 801cbb6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801cbba:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801cbbe:	fb01 2404 	mla	r4, r1, r4, r2
 801cbc2:	6802      	ldr	r2, [r0, #0]
 801cbc4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801cbc8:	f8de 2000 	ldr.w	r2, [lr]
 801cbcc:	9202      	str	r2, [sp, #8]
 801cbce:	9a01      	ldr	r2, [sp, #4]
 801cbd0:	43d6      	mvns	r6, r2
 801cbd2:	b2f6      	uxtb	r6, r6
 801cbd4:	9a00      	ldr	r2, [sp, #0]
 801cbd6:	2a00      	cmp	r2, #0
 801cbd8:	dc03      	bgt.n	801cbe2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801cbda:	9a03      	ldr	r2, [sp, #12]
 801cbdc:	2a00      	cmp	r2, #0
 801cbde:	f340 8124 	ble.w	801ce2a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801cbe2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cbe4:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801cbe8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801cbec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cbee:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801cbf2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cbf6:	2b00      	cmp	r3, #0
 801cbf8:	dd0e      	ble.n	801cc18 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cbfa:	1408      	asrs	r0, r1, #16
 801cbfc:	d405      	bmi.n	801cc0a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cbfe:	4560      	cmp	r0, ip
 801cc00:	da03      	bge.n	801cc0a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cc02:	1410      	asrs	r0, r2, #16
 801cc04:	d401      	bmi.n	801cc0a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cc06:	42b8      	cmp	r0, r7
 801cc08:	db07      	blt.n	801cc1a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801cc0a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801cc0c:	3b01      	subs	r3, #1
 801cc0e:	3402      	adds	r4, #2
 801cc10:	4401      	add	r1, r0
 801cc12:	9812      	ldr	r0, [sp, #72]	; 0x48
 801cc14:	4402      	add	r2, r0
 801cc16:	e7ee      	b.n	801cbf6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801cc18:	d06e      	beq.n	801ccf8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801cc1a:	1e58      	subs	r0, r3, #1
 801cc1c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801cc1e:	fb05 1500 	mla	r5, r5, r0, r1
 801cc22:	142d      	asrs	r5, r5, #16
 801cc24:	d45c      	bmi.n	801cce0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801cc26:	4565      	cmp	r5, ip
 801cc28:	da5a      	bge.n	801cce0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801cc2a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801cc2c:	fb05 2000 	mla	r0, r5, r0, r2
 801cc30:	1400      	asrs	r0, r0, #16
 801cc32:	d455      	bmi.n	801cce0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801cc34:	42b8      	cmp	r0, r7
 801cc36:	da53      	bge.n	801cce0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801cc38:	4699      	mov	r9, r3
 801cc3a:	46a2      	mov	sl, r4
 801cc3c:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801cc40:	f1b9 0f00 	cmp.w	r9, #0
 801cc44:	dd54      	ble.n	801ccf0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801cc46:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801cc4a:	140d      	asrs	r5, r1, #16
 801cc4c:	1410      	asrs	r0, r2, #16
 801cc4e:	f109 39ff 	add.w	r9, r9, #4294967295
 801cc52:	fb07 5000 	mla	r0, r7, r0, r5
 801cc56:	9d02      	ldr	r5, [sp, #8]
 801cc58:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801cc5c:	f8ba 5000 	ldrh.w	r5, [sl]
 801cc60:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801cc64:	122f      	asrs	r7, r5, #8
 801cc66:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801cc6a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cc6e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801cc72:	00ed      	lsls	r5, r5, #3
 801cc74:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801cc78:	fb17 f706 	smulbb	r7, r7, r6
 801cc7c:	b2ed      	uxtb	r5, r5
 801cc7e:	fb18 f806 	smulbb	r8, r8, r6
 801cc82:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801cc86:	10c7      	asrs	r7, r0, #3
 801cc88:	fb15 f506 	smulbb	r5, r5, r6
 801cc8c:	00c0      	lsls	r0, r0, #3
 801cc8e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801cc92:	fa1f fc8c 	uxth.w	ip, ip
 801cc96:	b2c0      	uxtb	r0, r0
 801cc98:	fb07 870b 	mla	r7, r7, fp, r8
 801cc9c:	fb00 500b 	mla	r0, r0, fp, r5
 801cca0:	f10c 0501 	add.w	r5, ip, #1
 801cca4:	b2bf      	uxth	r7, r7
 801cca6:	b280      	uxth	r0, r0
 801cca8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ccac:	f107 0801 	add.w	r8, r7, #1
 801ccb0:	1c45      	adds	r5, r0, #1
 801ccb2:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801ccb6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ccba:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801ccbe:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ccc0:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801ccc4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ccc8:	4401      	add	r1, r0
 801ccca:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801ccce:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ccd0:	ea45 0c0c 	orr.w	ip, r5, ip
 801ccd4:	4402      	add	r2, r0
 801ccd6:	ea4c 0c08 	orr.w	ip, ip, r8
 801ccda:	f82a cb02 	strh.w	ip, [sl], #2
 801ccde:	e7af      	b.n	801cc40 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801cce0:	f04f 0800 	mov.w	r8, #0
 801cce4:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801cce8:	eb03 0008 	add.w	r0, r3, r8
 801ccec:	2800      	cmp	r0, #0
 801ccee:	dc41      	bgt.n	801cd74 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801ccf0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ccf4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ccf8:	9b00      	ldr	r3, [sp, #0]
 801ccfa:	2b00      	cmp	r3, #0
 801ccfc:	f340 8095 	ble.w	801ce2a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801cd00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cd04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd06:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cd0a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cd0e:	eef0 6a62 	vmov.f32	s13, s5
 801cd12:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cd16:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cd1a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cd1e:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801cd22:	eef0 6a43 	vmov.f32	s13, s6
 801cd26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cd2a:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801cd2e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cd32:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cd36:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cd3a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cd3e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cd42:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cd46:	ee12 2a90 	vmov	r2, s5
 801cd4a:	eef0 2a47 	vmov.f32	s5, s14
 801cd4e:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd52:	ee13 2a10 	vmov	r2, s6
 801cd56:	9311      	str	r3, [sp, #68]	; 0x44
 801cd58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd5a:	eeb0 3a67 	vmov.f32	s6, s15
 801cd5e:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd62:	9312      	str	r3, [sp, #72]	; 0x48
 801cd64:	9b00      	ldr	r3, [sp, #0]
 801cd66:	9a03      	ldr	r2, [sp, #12]
 801cd68:	3b01      	subs	r3, #1
 801cd6a:	9300      	str	r3, [sp, #0]
 801cd6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd6e:	bf08      	it	eq
 801cd70:	4613      	moveq	r3, r2
 801cd72:	e72f      	b.n	801cbd4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801cd74:	140f      	asrs	r7, r1, #16
 801cd76:	d451      	bmi.n	801ce1c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801cd78:	f8de 5008 	ldr.w	r5, [lr, #8]
 801cd7c:	42bd      	cmp	r5, r7
 801cd7e:	dd4d      	ble.n	801ce1c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801cd80:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801cd84:	d44a      	bmi.n	801ce1c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801cd86:	f8de 000c 	ldr.w	r0, [lr, #12]
 801cd8a:	4560      	cmp	r0, ip
 801cd8c:	dd46      	ble.n	801ce1c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801cd8e:	b22d      	sxth	r5, r5
 801cd90:	9802      	ldr	r0, [sp, #8]
 801cd92:	fb0c 7505 	mla	r5, ip, r5, r7
 801cd96:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801cd9a:	f06f 0501 	mvn.w	r5, #1
 801cd9e:	fb05 fb08 	mul.w	fp, r5, r8
 801cda2:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801cda6:	f834 500b 	ldrh.w	r5, [r4, fp]
 801cdaa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cdae:	122f      	asrs	r7, r5, #8
 801cdb0:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801cdb4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801cdb8:	00ed      	lsls	r5, r5, #3
 801cdba:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801cdbe:	fb17 f706 	smulbb	r7, r7, r6
 801cdc2:	b2ed      	uxtb	r5, r5
 801cdc4:	fb19 f906 	smulbb	r9, r9, r6
 801cdc8:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801cdcc:	10c7      	asrs	r7, r0, #3
 801cdce:	fb15 f506 	smulbb	r5, r5, r6
 801cdd2:	00c0      	lsls	r0, r0, #3
 801cdd4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801cdd8:	fa1f fc8c 	uxth.w	ip, ip
 801cddc:	b2c0      	uxtb	r0, r0
 801cdde:	fb07 970a 	mla	r7, r7, sl, r9
 801cde2:	fb00 500a 	mla	r0, r0, sl, r5
 801cde6:	f10c 0501 	add.w	r5, ip, #1
 801cdea:	b2bf      	uxth	r7, r7
 801cdec:	b280      	uxth	r0, r0
 801cdee:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801cdf2:	f107 0901 	add.w	r9, r7, #1
 801cdf6:	1c45      	adds	r5, r0, #1
 801cdf8:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801cdfc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ce00:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801ce04:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801ce08:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ce0c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ce10:	ea45 0c0c 	orr.w	ip, r5, ip
 801ce14:	ea4c 0c09 	orr.w	ip, ip, r9
 801ce18:	f824 c00b 	strh.w	ip, [r4, fp]
 801ce1c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ce1e:	f108 38ff 	add.w	r8, r8, #4294967295
 801ce22:	4401      	add	r1, r0
 801ce24:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ce26:	4402      	add	r2, r0
 801ce28:	e75e      	b.n	801cce8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801ce2a:	b005      	add	sp, #20
 801ce2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce30 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ce30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce34:	b085      	sub	sp, #20
 801ce36:	4693      	mov	fp, r2
 801ce38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ce3c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ce3e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ce40:	6870      	ldr	r0, [r6, #4]
 801ce42:	9101      	str	r1, [sp, #4]
 801ce44:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ce48:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801ce4c:	fb00 2404 	mla	r4, r0, r4, r2
 801ce50:	6832      	ldr	r2, [r6, #0]
 801ce52:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ce56:	682a      	ldr	r2, [r5, #0]
 801ce58:	9202      	str	r2, [sp, #8]
 801ce5a:	9a01      	ldr	r2, [sp, #4]
 801ce5c:	2a00      	cmp	r2, #0
 801ce5e:	dc03      	bgt.n	801ce68 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ce60:	f1bb 0f00 	cmp.w	fp, #0
 801ce64:	f340 809a 	ble.w	801cf9c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ce68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ce6a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ce6e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ce72:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ce74:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801ce78:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	dd0c      	ble.n	801ce9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ce80:	1406      	asrs	r6, r0, #16
 801ce82:	d405      	bmi.n	801ce90 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ce84:	454e      	cmp	r6, r9
 801ce86:	da03      	bge.n	801ce90 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ce88:	1416      	asrs	r6, r2, #16
 801ce8a:	d401      	bmi.n	801ce90 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ce8c:	4546      	cmp	r6, r8
 801ce8e:	db05      	blt.n	801ce9c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ce90:	4470      	add	r0, lr
 801ce92:	4462      	add	r2, ip
 801ce94:	3b01      	subs	r3, #1
 801ce96:	3402      	adds	r4, #2
 801ce98:	e7f0      	b.n	801ce7c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ce9a:	d00f      	beq.n	801cebc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ce9c:	1e5e      	subs	r6, r3, #1
 801ce9e:	fb0e 0706 	mla	r7, lr, r6, r0
 801cea2:	143f      	asrs	r7, r7, #16
 801cea4:	d541      	bpl.n	801cf2a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801cea6:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801ceaa:	4698      	mov	r8, r3
 801ceac:	9603      	str	r6, [sp, #12]
 801ceae:	f1b8 0f00 	cmp.w	r8, #0
 801ceb2:	dc56      	bgt.n	801cf62 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801ceb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ceb8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cebc:	9b01      	ldr	r3, [sp, #4]
 801cebe:	2b00      	cmp	r3, #0
 801cec0:	dd6c      	ble.n	801cf9c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801cec2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cec8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cecc:	eeb0 6a62 	vmov.f32	s12, s5
 801ced0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ced4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ced8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cedc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801cee0:	eeb0 6a43 	vmov.f32	s12, s6
 801cee4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cee8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ceec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cef0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cef4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cef8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cefc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cf00:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cf04:	ee12 2a90 	vmov	r2, s5
 801cf08:	eef0 2a47 	vmov.f32	s5, s14
 801cf0c:	fb92 fef3 	sdiv	lr, r2, r3
 801cf10:	ee13 2a10 	vmov	r2, s6
 801cf14:	eeb0 3a67 	vmov.f32	s6, s15
 801cf18:	fb92 fcf3 	sdiv	ip, r2, r3
 801cf1c:	9b01      	ldr	r3, [sp, #4]
 801cf1e:	3b01      	subs	r3, #1
 801cf20:	9301      	str	r3, [sp, #4]
 801cf22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cf24:	bf08      	it	eq
 801cf26:	465b      	moveq	r3, fp
 801cf28:	e797      	b.n	801ce5a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801cf2a:	454f      	cmp	r7, r9
 801cf2c:	dabb      	bge.n	801cea6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cf2e:	fb0c 2606 	mla	r6, ip, r6, r2
 801cf32:	1436      	asrs	r6, r6, #16
 801cf34:	d4b7      	bmi.n	801cea6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cf36:	4546      	cmp	r6, r8
 801cf38:	dab5      	bge.n	801cea6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cf3a:	461e      	mov	r6, r3
 801cf3c:	46a0      	mov	r8, r4
 801cf3e:	2e00      	cmp	r6, #0
 801cf40:	ddb8      	ble.n	801ceb4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801cf42:	1417      	asrs	r7, r2, #16
 801cf44:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801cf48:	ea4f 4920 	mov.w	r9, r0, asr #16
 801cf4c:	9902      	ldr	r1, [sp, #8]
 801cf4e:	4470      	add	r0, lr
 801cf50:	4462      	add	r2, ip
 801cf52:	fb0a 9707 	mla	r7, sl, r7, r9
 801cf56:	3e01      	subs	r6, #1
 801cf58:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801cf5c:	f828 7b02 	strh.w	r7, [r8], #2
 801cf60:	e7ed      	b.n	801cf3e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801cf62:	ea5f 4920 	movs.w	r9, r0, asr #16
 801cf66:	d414      	bmi.n	801cf92 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801cf68:	68ae      	ldr	r6, [r5, #8]
 801cf6a:	454e      	cmp	r6, r9
 801cf6c:	dd11      	ble.n	801cf92 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801cf6e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801cf72:	d40e      	bmi.n	801cf92 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801cf74:	68ef      	ldr	r7, [r5, #12]
 801cf76:	4557      	cmp	r7, sl
 801cf78:	dd0b      	ble.n	801cf92 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801cf7a:	b236      	sxth	r6, r6
 801cf7c:	f06f 0101 	mvn.w	r1, #1
 801cf80:	9f02      	ldr	r7, [sp, #8]
 801cf82:	fb0a 9606 	mla	r6, sl, r6, r9
 801cf86:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801cf8a:	fb01 f608 	mul.w	r6, r1, r8
 801cf8e:	9903      	ldr	r1, [sp, #12]
 801cf90:	538f      	strh	r7, [r1, r6]
 801cf92:	4470      	add	r0, lr
 801cf94:	4462      	add	r2, ip
 801cf96:	f108 38ff 	add.w	r8, r8, #4294967295
 801cf9a:	e788      	b.n	801ceae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801cf9c:	b005      	add	sp, #20
 801cf9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cfa2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cfa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfa6:	b087      	sub	sp, #28
 801cfa8:	468b      	mov	fp, r1
 801cfaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cfae:	9815      	ldr	r0, [sp, #84]	; 0x54
 801cfb0:	9203      	str	r2, [sp, #12]
 801cfb2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801cfb6:	6841      	ldr	r1, [r0, #4]
 801cfb8:	9204      	str	r2, [sp, #16]
 801cfba:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801cfbe:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801cfc2:	fb01 2505 	mla	r5, r1, r5, r2
 801cfc6:	6802      	ldr	r2, [r0, #0]
 801cfc8:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801cfcc:	f8d9 2000 	ldr.w	r2, [r9]
 801cfd0:	9201      	str	r2, [sp, #4]
 801cfd2:	f1bb 0f00 	cmp.w	fp, #0
 801cfd6:	dc03      	bgt.n	801cfe0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801cfd8:	9a03      	ldr	r2, [sp, #12]
 801cfda:	2a00      	cmp	r2, #0
 801cfdc:	f340 8158 	ble.w	801d290 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801cfe0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cfe2:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801cfe6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cfea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cfec:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801cff0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801cff4:	2b00      	cmp	r3, #0
 801cff6:	dd0e      	ble.n	801d016 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801cff8:	1402      	asrs	r2, r0, #16
 801cffa:	d405      	bmi.n	801d008 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801cffc:	42ba      	cmp	r2, r7
 801cffe:	da03      	bge.n	801d008 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d000:	140a      	asrs	r2, r1, #16
 801d002:	d401      	bmi.n	801d008 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d004:	42b2      	cmp	r2, r6
 801d006:	db07      	blt.n	801d018 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d008:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d00a:	3b01      	subs	r3, #1
 801d00c:	3502      	adds	r5, #2
 801d00e:	4410      	add	r0, r2
 801d010:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d012:	4411      	add	r1, r2
 801d014:	e7ee      	b.n	801cff4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d016:	d017      	beq.n	801d048 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d018:	1e5a      	subs	r2, r3, #1
 801d01a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d01c:	fb04 0402 	mla	r4, r4, r2, r0
 801d020:	1424      	asrs	r4, r4, #16
 801d022:	d409      	bmi.n	801d038 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d024:	42bc      	cmp	r4, r7
 801d026:	da07      	bge.n	801d038 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d028:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d02a:	fb04 1202 	mla	r2, r4, r2, r1
 801d02e:	1412      	asrs	r2, r2, #16
 801d030:	d402      	bmi.n	801d038 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d032:	42b2      	cmp	r2, r6
 801d034:	f2c0 80bf 	blt.w	801d1b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801d038:	2700      	movs	r7, #0
 801d03a:	19da      	adds	r2, r3, r7
 801d03c:	2a00      	cmp	r2, #0
 801d03e:	dc3e      	bgt.n	801d0be <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d040:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d044:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801d048:	f1bb 0f00 	cmp.w	fp, #0
 801d04c:	f340 8120 	ble.w	801d290 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801d050:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d054:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d056:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d05a:	f1bb 0b01 	subs.w	fp, fp, #1
 801d05e:	eeb0 6a62 	vmov.f32	s12, s5
 801d062:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d066:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d06a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d06e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d072:	eeb0 6a43 	vmov.f32	s12, s6
 801d076:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d07a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d07e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d082:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d086:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d08a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d08e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d092:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d096:	ee12 2a90 	vmov	r2, s5
 801d09a:	eef0 2a47 	vmov.f32	s5, s14
 801d09e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d0a2:	ee13 2a10 	vmov	r2, s6
 801d0a6:	9313      	str	r3, [sp, #76]	; 0x4c
 801d0a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d0aa:	eeb0 3a67 	vmov.f32	s6, s15
 801d0ae:	fb92 f3f3 	sdiv	r3, r2, r3
 801d0b2:	9a03      	ldr	r2, [sp, #12]
 801d0b4:	9314      	str	r3, [sp, #80]	; 0x50
 801d0b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d0b8:	bf08      	it	eq
 801d0ba:	4613      	moveq	r3, r2
 801d0bc:	e789      	b.n	801cfd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801d0be:	1406      	asrs	r6, r0, #16
 801d0c0:	d42d      	bmi.n	801d11e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d0c2:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801d0c6:	42b4      	cmp	r4, r6
 801d0c8:	dd29      	ble.n	801d11e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d0ca:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801d0ce:	d426      	bmi.n	801d11e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d0d0:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801d0d4:	4562      	cmp	r2, ip
 801d0d6:	dd22      	ble.n	801d11e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d0d8:	b224      	sxth	r4, r4
 801d0da:	9a01      	ldr	r2, [sp, #4]
 801d0dc:	fb0c 6404 	mla	r4, ip, r4, r6
 801d0e0:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801d0e4:	0e22      	lsrs	r2, r4, #24
 801d0e6:	d01a      	beq.n	801d11e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d0e8:	9e04      	ldr	r6, [sp, #16]
 801d0ea:	4372      	muls	r2, r6
 801d0ec:	1c56      	adds	r6, r2, #1
 801d0ee:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d0f2:	0a26      	lsrs	r6, r4, #8
 801d0f4:	1212      	asrs	r2, r2, #8
 801d0f6:	9605      	str	r6, [sp, #20]
 801d0f8:	2aff      	cmp	r2, #255	; 0xff
 801d0fa:	d116      	bne.n	801d12a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801d0fc:	f06f 0201 	mvn.w	r2, #1
 801d100:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801d104:	fb02 fc07 	mul.w	ip, r2, r7
 801d108:	0962      	lsrs	r2, r4, #5
 801d10a:	f026 0607 	bic.w	r6, r6, #7
 801d10e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801d112:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d116:	4316      	orrs	r6, r2
 801d118:	4326      	orrs	r6, r4
 801d11a:	f825 600c 	strh.w	r6, [r5, ip]
 801d11e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d120:	3f01      	subs	r7, #1
 801d122:	4410      	add	r0, r2
 801d124:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d126:	4411      	add	r1, r2
 801d128:	e787      	b.n	801d03a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d12a:	f06f 0601 	mvn.w	r6, #1
 801d12e:	fa1f fa82 	uxth.w	sl, r2
 801d132:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801d136:	43d2      	mvns	r2, r2
 801d138:	437e      	muls	r6, r7
 801d13a:	b2e4      	uxtb	r4, r4
 801d13c:	fb1c fc0a 	smulbb	ip, ip, sl
 801d140:	b2d2      	uxtb	r2, r2
 801d142:	f835 8006 	ldrh.w	r8, [r5, r6]
 801d146:	fb14 f40a 	smulbb	r4, r4, sl
 801d14a:	9602      	str	r6, [sp, #8]
 801d14c:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801d150:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801d154:	fb16 f60a 	smulbb	r6, r6, sl
 801d158:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801d15c:	fb0e ce02 	mla	lr, lr, r2, ip
 801d160:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801d164:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801d168:	fa1f fe8e 	uxth.w	lr, lr
 801d16c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801d170:	fa5f f888 	uxtb.w	r8, r8
 801d174:	fb0c 6c02 	mla	ip, ip, r2, r6
 801d178:	fb08 4402 	mla	r4, r8, r2, r4
 801d17c:	f10e 0201 	add.w	r2, lr, #1
 801d180:	fa1f fc8c 	uxth.w	ip, ip
 801d184:	b2a4      	uxth	r4, r4
 801d186:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801d18a:	9a02      	ldr	r2, [sp, #8]
 801d18c:	1c66      	adds	r6, r4, #1
 801d18e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801d192:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801d196:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d19a:	ea46 0e0e 	orr.w	lr, r6, lr
 801d19e:	f10c 0601 	add.w	r6, ip, #1
 801d1a2:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801d1a6:	0976      	lsrs	r6, r6, #5
 801d1a8:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d1ac:	ea4e 0e06 	orr.w	lr, lr, r6
 801d1b0:	f825 e002 	strh.w	lr, [r5, r2]
 801d1b4:	e7b3      	b.n	801d11e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d1b6:	f04f 0800 	mov.w	r8, #0
 801d1ba:	eba3 0208 	sub.w	r2, r3, r8
 801d1be:	2a00      	cmp	r2, #0
 801d1c0:	f77f af3e 	ble.w	801d040 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d1c4:	1404      	asrs	r4, r0, #16
 801d1c6:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801d1ca:	140a      	asrs	r2, r1, #16
 801d1cc:	fb06 4202 	mla	r2, r6, r2, r4
 801d1d0:	9c01      	ldr	r4, [sp, #4]
 801d1d2:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801d1d6:	0e22      	lsrs	r2, r4, #24
 801d1d8:	d015      	beq.n	801d206 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801d1da:	9e04      	ldr	r6, [sp, #16]
 801d1dc:	4372      	muls	r2, r6
 801d1de:	1c56      	adds	r6, r2, #1
 801d1e0:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d1e4:	0a26      	lsrs	r6, r4, #8
 801d1e6:	1212      	asrs	r2, r2, #8
 801d1e8:	2aff      	cmp	r2, #255	; 0xff
 801d1ea:	d113      	bne.n	801d214 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801d1ec:	0962      	lsrs	r2, r4, #5
 801d1ee:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801d1f2:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801d1f6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d1fa:	f026 0607 	bic.w	r6, r6, #7
 801d1fe:	4316      	orrs	r6, r2
 801d200:	4326      	orrs	r6, r4
 801d202:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801d206:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d208:	f108 0801 	add.w	r8, r8, #1
 801d20c:	4410      	add	r0, r2
 801d20e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d210:	4411      	add	r1, r2
 801d212:	e7d2      	b.n	801d1ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801d214:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801d218:	fa1f fa82 	uxth.w	sl, r2
 801d21c:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801d220:	43d2      	mvns	r2, r2
 801d222:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d226:	fb17 f70a 	smulbb	r7, r7, sl
 801d22a:	b2d2      	uxtb	r2, r2
 801d22c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d230:	b2e4      	uxtb	r4, r4
 801d232:	b2f6      	uxtb	r6, r6
 801d234:	fb0c 7c02 	mla	ip, ip, r2, r7
 801d238:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801d23c:	fb14 f40a 	smulbb	r4, r4, sl
 801d240:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d244:	fa1f fc8c 	uxth.w	ip, ip
 801d248:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d24c:	fb16 f60a 	smulbb	r6, r6, sl
 801d250:	fa5f fe8e 	uxtb.w	lr, lr
 801d254:	fb0e 4402 	mla	r4, lr, r2, r4
 801d258:	fb07 6702 	mla	r7, r7, r2, r6
 801d25c:	f10c 0201 	add.w	r2, ip, #1
 801d260:	b2a4      	uxth	r4, r4
 801d262:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801d266:	1c66      	adds	r6, r4, #1
 801d268:	b2bf      	uxth	r7, r7
 801d26a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d26e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801d272:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d276:	ea46 0c0c 	orr.w	ip, r6, ip
 801d27a:	1c7e      	adds	r6, r7, #1
 801d27c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801d280:	0976      	lsrs	r6, r6, #5
 801d282:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d286:	ea4c 0c06 	orr.w	ip, ip, r6
 801d28a:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801d28e:	e7ba      	b.n	801d206 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801d290:	b007      	add	sp, #28
 801d292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d298 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d29c:	b085      	sub	sp, #20
 801d29e:	468b      	mov	fp, r1
 801d2a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d2a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d2a6:	9203      	str	r2, [sp, #12]
 801d2a8:	6841      	ldr	r1, [r0, #4]
 801d2aa:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801d2ae:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d2b2:	fb01 2404 	mla	r4, r1, r4, r2
 801d2b6:	6802      	ldr	r2, [r0, #0]
 801d2b8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d2bc:	f8d8 2000 	ldr.w	r2, [r8]
 801d2c0:	9201      	str	r2, [sp, #4]
 801d2c2:	f1bb 0f00 	cmp.w	fp, #0
 801d2c6:	dc03      	bgt.n	801d2d0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d2c8:	9a03      	ldr	r2, [sp, #12]
 801d2ca:	2a00      	cmp	r2, #0
 801d2cc:	f340 814f 	ble.w	801d56e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801d2d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d2d2:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801d2d6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d2da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d2dc:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801d2e0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d2e4:	2b00      	cmp	r3, #0
 801d2e6:	dd0e      	ble.n	801d306 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d2e8:	1408      	asrs	r0, r1, #16
 801d2ea:	d405      	bmi.n	801d2f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d2ec:	42b8      	cmp	r0, r7
 801d2ee:	da03      	bge.n	801d2f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d2f0:	1410      	asrs	r0, r2, #16
 801d2f2:	d401      	bmi.n	801d2f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d2f4:	42b0      	cmp	r0, r6
 801d2f6:	db07      	blt.n	801d308 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d2f8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d2fa:	3b01      	subs	r3, #1
 801d2fc:	3402      	adds	r4, #2
 801d2fe:	4401      	add	r1, r0
 801d300:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d302:	4402      	add	r2, r0
 801d304:	e7ee      	b.n	801d2e4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801d306:	d017      	beq.n	801d338 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d308:	1e58      	subs	r0, r3, #1
 801d30a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d30c:	fb05 1500 	mla	r5, r5, r0, r1
 801d310:	142d      	asrs	r5, r5, #16
 801d312:	d409      	bmi.n	801d328 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d314:	42bd      	cmp	r5, r7
 801d316:	da07      	bge.n	801d328 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d318:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d31a:	fb05 2000 	mla	r0, r5, r0, r2
 801d31e:	1400      	asrs	r0, r0, #16
 801d320:	d402      	bmi.n	801d328 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d322:	42b0      	cmp	r0, r6
 801d324:	f2c0 80ba 	blt.w	801d49c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801d328:	2600      	movs	r6, #0
 801d32a:	1998      	adds	r0, r3, r6
 801d32c:	2800      	cmp	r0, #0
 801d32e:	dc3e      	bgt.n	801d3ae <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801d330:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d334:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d338:	f1bb 0f00 	cmp.w	fp, #0
 801d33c:	f340 8117 	ble.w	801d56e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801d340:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d344:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d346:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d34a:	f1bb 0b01 	subs.w	fp, fp, #1
 801d34e:	eeb0 6a62 	vmov.f32	s12, s5
 801d352:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d356:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d35a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d35e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d362:	eeb0 6a43 	vmov.f32	s12, s6
 801d366:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d36a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d36e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d372:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d376:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d37a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d37e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d382:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d386:	ee12 2a90 	vmov	r2, s5
 801d38a:	eef0 2a47 	vmov.f32	s5, s14
 801d38e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d392:	ee13 2a10 	vmov	r2, s6
 801d396:	9311      	str	r3, [sp, #68]	; 0x44
 801d398:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d39a:	eeb0 3a67 	vmov.f32	s6, s15
 801d39e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d3a2:	9a03      	ldr	r2, [sp, #12]
 801d3a4:	9312      	str	r3, [sp, #72]	; 0x48
 801d3a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d3a8:	bf08      	it	eq
 801d3aa:	4613      	moveq	r3, r2
 801d3ac:	e789      	b.n	801d2c2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801d3ae:	140f      	asrs	r7, r1, #16
 801d3b0:	d424      	bmi.n	801d3fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d3b2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801d3b6:	42bd      	cmp	r5, r7
 801d3b8:	dd20      	ble.n	801d3fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d3ba:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d3be:	d41d      	bmi.n	801d3fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d3c0:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801d3c4:	4560      	cmp	r0, ip
 801d3c6:	dd19      	ble.n	801d3fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d3c8:	b22d      	sxth	r5, r5
 801d3ca:	9801      	ldr	r0, [sp, #4]
 801d3cc:	fb0c 7505 	mla	r5, ip, r5, r7
 801d3d0:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801d3d4:	0e07      	lsrs	r7, r0, #24
 801d3d6:	2fff      	cmp	r7, #255	; 0xff
 801d3d8:	d116      	bne.n	801d408 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801d3da:	f06f 0501 	mvn.w	r5, #1
 801d3de:	fb05 f706 	mul.w	r7, r5, r6
 801d3e2:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801d3e6:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801d3ea:	0945      	lsrs	r5, r0, #5
 801d3ec:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801d3f0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d3f4:	ea4c 0505 	orr.w	r5, ip, r5
 801d3f8:	4305      	orrs	r5, r0
 801d3fa:	53e5      	strh	r5, [r4, r7]
 801d3fc:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d3fe:	3e01      	subs	r6, #1
 801d400:	4401      	add	r1, r0
 801d402:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d404:	4402      	add	r2, r0
 801d406:	e790      	b.n	801d32a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d408:	b2fd      	uxtb	r5, r7
 801d40a:	2f00      	cmp	r7, #0
 801d40c:	d0f6      	beq.n	801d3fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d40e:	f06f 0701 	mvn.w	r7, #1
 801d412:	fa1f f985 	uxth.w	r9, r5
 801d416:	43ed      	mvns	r5, r5
 801d418:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801d41c:	4377      	muls	r7, r6
 801d41e:	fb1a fa09 	smulbb	sl, sl, r9
 801d422:	b2ed      	uxtb	r5, r5
 801d424:	f834 e007 	ldrh.w	lr, [r4, r7]
 801d428:	9702      	str	r7, [sp, #8]
 801d42a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801d42e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d432:	fb17 f709 	smulbb	r7, r7, r9
 801d436:	b2c0      	uxtb	r0, r0
 801d438:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d43c:	fb10 f009 	smulbb	r0, r0, r9
 801d440:	fb0c 7c05 	mla	ip, ip, r5, r7
 801d444:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801d448:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d44c:	fa1f fc8c 	uxth.w	ip, ip
 801d450:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d454:	fa5f fe8e 	uxtb.w	lr, lr
 801d458:	fb07 a705 	mla	r7, r7, r5, sl
 801d45c:	fb0e 0005 	mla	r0, lr, r5, r0
 801d460:	f10c 0501 	add.w	r5, ip, #1
 801d464:	b2bf      	uxth	r7, r7
 801d466:	b280      	uxth	r0, r0
 801d468:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d46c:	f100 0a01 	add.w	sl, r0, #1
 801d470:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d474:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801d478:	9802      	ldr	r0, [sp, #8]
 801d47a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d47e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801d482:	f107 0a01 	add.w	sl, r7, #1
 801d486:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801d48a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d48e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d492:	ea4c 0c0a 	orr.w	ip, ip, sl
 801d496:	f824 c000 	strh.w	ip, [r4, r0]
 801d49a:	e7af      	b.n	801d3fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d49c:	f04f 0e00 	mov.w	lr, #0
 801d4a0:	eba3 000e 	sub.w	r0, r3, lr
 801d4a4:	2800      	cmp	r0, #0
 801d4a6:	f77f af43 	ble.w	801d330 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d4aa:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801d4ae:	140d      	asrs	r5, r1, #16
 801d4b0:	1410      	asrs	r0, r2, #16
 801d4b2:	fb06 5000 	mla	r0, r6, r0, r5
 801d4b6:	9d01      	ldr	r5, [sp, #4]
 801d4b8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801d4bc:	0e2e      	lsrs	r6, r5, #24
 801d4be:	2eff      	cmp	r6, #255	; 0xff
 801d4c0:	d112      	bne.n	801d4e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801d4c2:	482c      	ldr	r0, [pc, #176]	; (801d574 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801d4c4:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801d4c8:	0968      	lsrs	r0, r5, #5
 801d4ca:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801d4ce:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d4d2:	4330      	orrs	r0, r6
 801d4d4:	4328      	orrs	r0, r5
 801d4d6:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801d4da:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d4dc:	f10e 0e01 	add.w	lr, lr, #1
 801d4e0:	4401      	add	r1, r0
 801d4e2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d4e4:	4402      	add	r2, r0
 801d4e6:	e7db      	b.n	801d4a0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d4e8:	b2f0      	uxtb	r0, r6
 801d4ea:	2e00      	cmp	r6, #0
 801d4ec:	d0f5      	beq.n	801d4da <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801d4ee:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801d4f2:	fa1f f980 	uxth.w	r9, r0
 801d4f6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801d4fa:	43c0      	mvns	r0, r0
 801d4fc:	ea4f 272c 	mov.w	r7, ip, asr #8
 801d500:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801d504:	fb16 f609 	smulbb	r6, r6, r9
 801d508:	b2c0      	uxtb	r0, r0
 801d50a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d50e:	b2ed      	uxtb	r5, r5
 801d510:	fb1a fa09 	smulbb	sl, sl, r9
 801d514:	fb07 6700 	mla	r7, r7, r0, r6
 801d518:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801d51c:	fb15 f509 	smulbb	r5, r5, r9
 801d520:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d524:	b2bf      	uxth	r7, r7
 801d526:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d52a:	fa5f fc8c 	uxtb.w	ip, ip
 801d52e:	fb06 a600 	mla	r6, r6, r0, sl
 801d532:	fb0c 5500 	mla	r5, ip, r0, r5
 801d536:	1c78      	adds	r0, r7, #1
 801d538:	b2b6      	uxth	r6, r6
 801d53a:	b2ad      	uxth	r5, r5
 801d53c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801d540:	f105 0a01 	add.w	sl, r5, #1
 801d544:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d548:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d54c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d550:	ea4a 0707 	orr.w	r7, sl, r7
 801d554:	f106 0a01 	add.w	sl, r6, #1
 801d558:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d55c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d560:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d564:	ea47 070a 	orr.w	r7, r7, sl
 801d568:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801d56c:	e7b5      	b.n	801d4da <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801d56e:	b005      	add	sp, #20
 801d570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d574:	fffff800 	.word	0xfffff800

0801d578 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d57c:	b087      	sub	sp, #28
 801d57e:	468b      	mov	fp, r1
 801d580:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d584:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d586:	9203      	str	r2, [sp, #12]
 801d588:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d58c:	6841      	ldr	r1, [r0, #4]
 801d58e:	9204      	str	r2, [sp, #16]
 801d590:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801d594:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801d598:	fb01 2404 	mla	r4, r1, r4, r2
 801d59c:	6802      	ldr	r2, [r0, #0]
 801d59e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d5a2:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801d5a6:	3201      	adds	r2, #1
 801d5a8:	f022 0201 	bic.w	r2, r2, #1
 801d5ac:	9200      	str	r2, [sp, #0]
 801d5ae:	f8d9 2000 	ldr.w	r2, [r9]
 801d5b2:	9201      	str	r2, [sp, #4]
 801d5b4:	f1bb 0f00 	cmp.w	fp, #0
 801d5b8:	dc03      	bgt.n	801d5c2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d5ba:	9a03      	ldr	r2, [sp, #12]
 801d5bc:	2a00      	cmp	r2, #0
 801d5be:	f340 816a 	ble.w	801d896 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801d5c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d5c4:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801d5c8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d5cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d5ce:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801d5d2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d5d6:	2b00      	cmp	r3, #0
 801d5d8:	dd0e      	ble.n	801d5f8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801d5da:	1402      	asrs	r2, r0, #16
 801d5dc:	d405      	bmi.n	801d5ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d5de:	42ba      	cmp	r2, r7
 801d5e0:	da03      	bge.n	801d5ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d5e2:	140a      	asrs	r2, r1, #16
 801d5e4:	d401      	bmi.n	801d5ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d5e6:	42b2      	cmp	r2, r6
 801d5e8:	db07      	blt.n	801d5fa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801d5ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d5ec:	3b01      	subs	r3, #1
 801d5ee:	3402      	adds	r4, #2
 801d5f0:	4410      	add	r0, r2
 801d5f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d5f4:	4411      	add	r1, r2
 801d5f6:	e7ee      	b.n	801d5d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801d5f8:	d017      	beq.n	801d62a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801d5fa:	1e5a      	subs	r2, r3, #1
 801d5fc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d5fe:	fb05 0502 	mla	r5, r5, r2, r0
 801d602:	142d      	asrs	r5, r5, #16
 801d604:	d409      	bmi.n	801d61a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801d606:	42bd      	cmp	r5, r7
 801d608:	da07      	bge.n	801d61a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801d60a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d60c:	fb05 1202 	mla	r2, r5, r2, r1
 801d610:	1412      	asrs	r2, r2, #16
 801d612:	d402      	bmi.n	801d61a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801d614:	42b2      	cmp	r2, r6
 801d616:	f2c0 80c8 	blt.w	801d7aa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801d61a:	2700      	movs	r7, #0
 801d61c:	19da      	adds	r2, r3, r7
 801d61e:	2a00      	cmp	r2, #0
 801d620:	dc3e      	bgt.n	801d6a0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801d622:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d626:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d62a:	f1bb 0f00 	cmp.w	fp, #0
 801d62e:	f340 8132 	ble.w	801d896 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801d632:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d636:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d638:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d63c:	f1bb 0b01 	subs.w	fp, fp, #1
 801d640:	eeb0 6a62 	vmov.f32	s12, s5
 801d644:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d648:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d64c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d650:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d654:	eeb0 6a43 	vmov.f32	s12, s6
 801d658:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d65c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d660:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d664:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d668:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d66c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d670:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d674:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d678:	ee12 2a90 	vmov	r2, s5
 801d67c:	eef0 2a47 	vmov.f32	s5, s14
 801d680:	fb92 f3f3 	sdiv	r3, r2, r3
 801d684:	ee13 2a10 	vmov	r2, s6
 801d688:	9313      	str	r3, [sp, #76]	; 0x4c
 801d68a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d68c:	eeb0 3a67 	vmov.f32	s6, s15
 801d690:	fb92 f3f3 	sdiv	r3, r2, r3
 801d694:	9a03      	ldr	r2, [sp, #12]
 801d696:	9314      	str	r3, [sp, #80]	; 0x50
 801d698:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d69a:	bf08      	it	eq
 801d69c:	4613      	moveq	r3, r2
 801d69e:	e789      	b.n	801d5b4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d6a0:	1405      	asrs	r5, r0, #16
 801d6a2:	d436      	bmi.n	801d712 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801d6a4:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801d6a8:	42aa      	cmp	r2, r5
 801d6aa:	dd32      	ble.n	801d712 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801d6ac:	140e      	asrs	r6, r1, #16
 801d6ae:	d430      	bmi.n	801d712 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801d6b0:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801d6b4:	42b2      	cmp	r2, r6
 801d6b6:	dd2c      	ble.n	801d712 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801d6b8:	9a00      	ldr	r2, [sp, #0]
 801d6ba:	fb06 5502 	mla	r5, r6, r2, r5
 801d6be:	9e01      	ldr	r6, [sp, #4]
 801d6c0:	086a      	lsrs	r2, r5, #1
 801d6c2:	5cb2      	ldrb	r2, [r6, r2]
 801d6c4:	07ee      	lsls	r6, r5, #31
 801d6c6:	bf54      	ite	pl
 801d6c8:	f002 020f 	andpl.w	r2, r2, #15
 801d6cc:	1112      	asrmi	r2, r2, #4
 801d6ce:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d6d2:	b2d2      	uxtb	r2, r2
 801d6d4:	b1ea      	cbz	r2, 801d712 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801d6d6:	9d04      	ldr	r5, [sp, #16]
 801d6d8:	436a      	muls	r2, r5
 801d6da:	1c55      	adds	r5, r2, #1
 801d6dc:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801d6e0:	4d6e      	ldr	r5, [pc, #440]	; (801d89c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801d6e2:	1212      	asrs	r2, r2, #8
 801d6e4:	682d      	ldr	r5, [r5, #0]
 801d6e6:	2aff      	cmp	r2, #255	; 0xff
 801d6e8:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801d6ec:	9605      	str	r6, [sp, #20]
 801d6ee:	d116      	bne.n	801d71e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d6f0:	f06f 0201 	mvn.w	r2, #1
 801d6f4:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801d6f8:	fb02 fc07 	mul.w	ip, r2, r7
 801d6fc:	096a      	lsrs	r2, r5, #5
 801d6fe:	f026 0607 	bic.w	r6, r6, #7
 801d702:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801d706:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d70a:	4316      	orrs	r6, r2
 801d70c:	432e      	orrs	r6, r5
 801d70e:	f824 600c 	strh.w	r6, [r4, ip]
 801d712:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d714:	3f01      	subs	r7, #1
 801d716:	4410      	add	r0, r2
 801d718:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d71a:	4411      	add	r1, r2
 801d71c:	e77e      	b.n	801d61c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801d71e:	f06f 0601 	mvn.w	r6, #1
 801d722:	fa1f fa82 	uxth.w	sl, r2
 801d726:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801d72a:	43d2      	mvns	r2, r2
 801d72c:	437e      	muls	r6, r7
 801d72e:	b2ed      	uxtb	r5, r5
 801d730:	fb1c fc0a 	smulbb	ip, ip, sl
 801d734:	b2d2      	uxtb	r2, r2
 801d736:	f834 8006 	ldrh.w	r8, [r4, r6]
 801d73a:	fb15 f50a 	smulbb	r5, r5, sl
 801d73e:	9602      	str	r6, [sp, #8]
 801d740:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801d744:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801d748:	fb16 f60a 	smulbb	r6, r6, sl
 801d74c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801d750:	fb0e ce02 	mla	lr, lr, r2, ip
 801d754:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801d758:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801d75c:	fa1f fe8e 	uxth.w	lr, lr
 801d760:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801d764:	fa5f f888 	uxtb.w	r8, r8
 801d768:	fb0c 6c02 	mla	ip, ip, r2, r6
 801d76c:	fb08 5502 	mla	r5, r8, r2, r5
 801d770:	f10e 0201 	add.w	r2, lr, #1
 801d774:	fa1f fc8c 	uxth.w	ip, ip
 801d778:	b2ad      	uxth	r5, r5
 801d77a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801d77e:	9a02      	ldr	r2, [sp, #8]
 801d780:	1c6e      	adds	r6, r5, #1
 801d782:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801d786:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801d78a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801d78e:	ea46 0e0e 	orr.w	lr, r6, lr
 801d792:	f10c 0601 	add.w	r6, ip, #1
 801d796:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801d79a:	0976      	lsrs	r6, r6, #5
 801d79c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d7a0:	ea4e 0e06 	orr.w	lr, lr, r6
 801d7a4:	f824 e002 	strh.w	lr, [r4, r2]
 801d7a8:	e7b3      	b.n	801d712 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801d7aa:	f04f 0800 	mov.w	r8, #0
 801d7ae:	eba3 0208 	sub.w	r2, r3, r8
 801d7b2:	2a00      	cmp	r2, #0
 801d7b4:	f77f af35 	ble.w	801d622 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801d7b8:	1402      	asrs	r2, r0, #16
 801d7ba:	9e00      	ldr	r6, [sp, #0]
 801d7bc:	140d      	asrs	r5, r1, #16
 801d7be:	fb06 2505 	mla	r5, r6, r5, r2
 801d7c2:	9e01      	ldr	r6, [sp, #4]
 801d7c4:	086a      	lsrs	r2, r5, #1
 801d7c6:	07ed      	lsls	r5, r5, #31
 801d7c8:	5cb2      	ldrb	r2, [r6, r2]
 801d7ca:	bf54      	ite	pl
 801d7cc:	f002 020f 	andpl.w	r2, r2, #15
 801d7d0:	1112      	asrmi	r2, r2, #4
 801d7d2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d7d6:	b2d2      	uxtb	r2, r2
 801d7d8:	b1c2      	cbz	r2, 801d80c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d7da:	9d04      	ldr	r5, [sp, #16]
 801d7dc:	436a      	muls	r2, r5
 801d7de:	1c55      	adds	r5, r2, #1
 801d7e0:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801d7e4:	4d2d      	ldr	r5, [pc, #180]	; (801d89c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801d7e6:	1212      	asrs	r2, r2, #8
 801d7e8:	682e      	ldr	r6, [r5, #0]
 801d7ea:	2aff      	cmp	r2, #255	; 0xff
 801d7ec:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801d7f0:	d113      	bne.n	801d81a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801d7f2:	0972      	lsrs	r2, r6, #5
 801d7f4:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801d7f8:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801d7fc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d800:	f025 0507 	bic.w	r5, r5, #7
 801d804:	4315      	orrs	r5, r2
 801d806:	4335      	orrs	r5, r6
 801d808:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801d80c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d80e:	f108 0801 	add.w	r8, r8, #1
 801d812:	4410      	add	r0, r2
 801d814:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d816:	4411      	add	r1, r2
 801d818:	e7c9      	b.n	801d7ae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801d81a:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801d81e:	fa1f fa82 	uxth.w	sl, r2
 801d822:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801d826:	43d2      	mvns	r2, r2
 801d828:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801d82c:	fb17 f70a 	smulbb	r7, r7, sl
 801d830:	b2d2      	uxtb	r2, r2
 801d832:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d836:	b2f6      	uxtb	r6, r6
 801d838:	b2ed      	uxtb	r5, r5
 801d83a:	fb0c 7c02 	mla	ip, ip, r2, r7
 801d83e:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801d842:	fb16 f60a 	smulbb	r6, r6, sl
 801d846:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d84a:	fa1f fc8c 	uxth.w	ip, ip
 801d84e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d852:	fb15 f50a 	smulbb	r5, r5, sl
 801d856:	fa5f fe8e 	uxtb.w	lr, lr
 801d85a:	fb0e 6602 	mla	r6, lr, r2, r6
 801d85e:	fb07 5702 	mla	r7, r7, r2, r5
 801d862:	f10c 0201 	add.w	r2, ip, #1
 801d866:	b2b6      	uxth	r6, r6
 801d868:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801d86c:	1c75      	adds	r5, r6, #1
 801d86e:	b2bf      	uxth	r7, r7
 801d870:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d874:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801d878:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d87c:	ea45 0c0c 	orr.w	ip, r5, ip
 801d880:	1c7d      	adds	r5, r7, #1
 801d882:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801d886:	096d      	lsrs	r5, r5, #5
 801d888:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d88c:	ea4c 0c05 	orr.w	ip, ip, r5
 801d890:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801d894:	e7ba      	b.n	801d80c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d896:	b007      	add	sp, #28
 801d898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d89c:	20027cb8 	.word	0x20027cb8

0801d8a0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8a4:	b087      	sub	sp, #28
 801d8a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d8aa:	f8df 8308 	ldr.w	r8, [pc, #776]	; 801dbb4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801d8ae:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d8b0:	9101      	str	r1, [sp, #4]
 801d8b2:	9205      	str	r2, [sp, #20]
 801d8b4:	6841      	ldr	r1, [r0, #4]
 801d8b6:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801d8ba:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801d8be:	fb01 2404 	mla	r4, r1, r4, r2
 801d8c2:	6802      	ldr	r2, [r0, #0]
 801d8c4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d8c8:	f8db 2008 	ldr.w	r2, [fp, #8]
 801d8cc:	3201      	adds	r2, #1
 801d8ce:	f022 0201 	bic.w	r2, r2, #1
 801d8d2:	9202      	str	r2, [sp, #8]
 801d8d4:	f8db 2000 	ldr.w	r2, [fp]
 801d8d8:	9203      	str	r2, [sp, #12]
 801d8da:	9a01      	ldr	r2, [sp, #4]
 801d8dc:	2a00      	cmp	r2, #0
 801d8de:	dc03      	bgt.n	801d8e8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d8e0:	9a05      	ldr	r2, [sp, #20]
 801d8e2:	2a00      	cmp	r2, #0
 801d8e4:	f340 8162 	ble.w	801dbac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801d8e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d8ea:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801d8ee:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d8f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d8f4:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801d8f8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d8fc:	2b00      	cmp	r3, #0
 801d8fe:	dd0e      	ble.n	801d91e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d900:	1402      	asrs	r2, r0, #16
 801d902:	d405      	bmi.n	801d910 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d904:	42ba      	cmp	r2, r7
 801d906:	da03      	bge.n	801d910 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d908:	140a      	asrs	r2, r1, #16
 801d90a:	d401      	bmi.n	801d910 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d90c:	42b2      	cmp	r2, r6
 801d90e:	db07      	blt.n	801d920 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801d910:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d912:	3b01      	subs	r3, #1
 801d914:	3402      	adds	r4, #2
 801d916:	4410      	add	r0, r2
 801d918:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d91a:	4411      	add	r1, r2
 801d91c:	e7ee      	b.n	801d8fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d91e:	d017      	beq.n	801d950 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801d920:	1e5a      	subs	r2, r3, #1
 801d922:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d924:	fb05 0502 	mla	r5, r5, r2, r0
 801d928:	142d      	asrs	r5, r5, #16
 801d92a:	d409      	bmi.n	801d940 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d92c:	42bd      	cmp	r5, r7
 801d92e:	da07      	bge.n	801d940 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d930:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d932:	fb05 1202 	mla	r2, r5, r2, r1
 801d936:	1412      	asrs	r2, r2, #16
 801d938:	d402      	bmi.n	801d940 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d93a:	42b2      	cmp	r2, r6
 801d93c:	f2c0 80c3 	blt.w	801dac6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801d940:	2500      	movs	r5, #0
 801d942:	195a      	adds	r2, r3, r5
 801d944:	2a00      	cmp	r2, #0
 801d946:	dc3f      	bgt.n	801d9c8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801d948:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d94c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d950:	9b01      	ldr	r3, [sp, #4]
 801d952:	2b00      	cmp	r3, #0
 801d954:	f340 812a 	ble.w	801dbac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801d958:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d95c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d95e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d962:	eeb0 6a62 	vmov.f32	s12, s5
 801d966:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d96a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d96e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d972:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d976:	eeb0 6a43 	vmov.f32	s12, s6
 801d97a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d97e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d982:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d986:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d98a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d98e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d992:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d996:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d99a:	ee12 2a90 	vmov	r2, s5
 801d99e:	eef0 2a47 	vmov.f32	s5, s14
 801d9a2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d9a6:	ee13 2a10 	vmov	r2, s6
 801d9aa:	9313      	str	r3, [sp, #76]	; 0x4c
 801d9ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d9ae:	eeb0 3a67 	vmov.f32	s6, s15
 801d9b2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d9b6:	9314      	str	r3, [sp, #80]	; 0x50
 801d9b8:	9b01      	ldr	r3, [sp, #4]
 801d9ba:	9a05      	ldr	r2, [sp, #20]
 801d9bc:	3b01      	subs	r3, #1
 801d9be:	9301      	str	r3, [sp, #4]
 801d9c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d9c2:	bf08      	it	eq
 801d9c4:	4613      	moveq	r3, r2
 801d9c6:	e788      	b.n	801d8da <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d9c8:	1406      	asrs	r6, r0, #16
 801d9ca:	d42c      	bmi.n	801da26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d9cc:	f8db 2008 	ldr.w	r2, [fp, #8]
 801d9d0:	42b2      	cmp	r2, r6
 801d9d2:	dd28      	ble.n	801da26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d9d4:	140f      	asrs	r7, r1, #16
 801d9d6:	d426      	bmi.n	801da26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d9d8:	f8db 200c 	ldr.w	r2, [fp, #12]
 801d9dc:	42ba      	cmp	r2, r7
 801d9de:	dd22      	ble.n	801da26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d9e0:	9a02      	ldr	r2, [sp, #8]
 801d9e2:	fb07 6602 	mla	r6, r7, r2, r6
 801d9e6:	9f03      	ldr	r7, [sp, #12]
 801d9e8:	0872      	lsrs	r2, r6, #1
 801d9ea:	07f6      	lsls	r6, r6, #31
 801d9ec:	5cba      	ldrb	r2, [r7, r2]
 801d9ee:	bf54      	ite	pl
 801d9f0:	f002 020f 	andpl.w	r2, r2, #15
 801d9f4:	1112      	asrmi	r2, r2, #4
 801d9f6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d9fa:	b2d2      	uxtb	r2, r2
 801d9fc:	2aff      	cmp	r2, #255	; 0xff
 801d9fe:	d118      	bne.n	801da32 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801da00:	f06f 0601 	mvn.w	r6, #1
 801da04:	f8d8 2000 	ldr.w	r2, [r8]
 801da08:	fb06 f705 	mul.w	r7, r6, r5
 801da0c:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801da10:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801da14:	0956      	lsrs	r6, r2, #5
 801da16:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801da1a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801da1e:	ea4c 0606 	orr.w	r6, ip, r6
 801da22:	4316      	orrs	r6, r2
 801da24:	53e6      	strh	r6, [r4, r7]
 801da26:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801da28:	3d01      	subs	r5, #1
 801da2a:	4410      	add	r0, r2
 801da2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801da2e:	4411      	add	r1, r2
 801da30:	e787      	b.n	801d942 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801da32:	2a00      	cmp	r2, #0
 801da34:	d0f7      	beq.n	801da26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801da36:	f06f 0601 	mvn.w	r6, #1
 801da3a:	f8d8 c000 	ldr.w	ip, [r8]
 801da3e:	fa1f f982 	uxth.w	r9, r2
 801da42:	43d2      	mvns	r2, r2
 801da44:	436e      	muls	r6, r5
 801da46:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801da4a:	b2d2      	uxtb	r2, r2
 801da4c:	f834 e006 	ldrh.w	lr, [r4, r6]
 801da50:	fb1a fa09 	smulbb	sl, sl, r9
 801da54:	9604      	str	r6, [sp, #16]
 801da56:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801da5a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801da5e:	fb16 f609 	smulbb	r6, r6, r9
 801da62:	fa5f fc8c 	uxtb.w	ip, ip
 801da66:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801da6a:	fb1c fc09 	smulbb	ip, ip, r9
 801da6e:	fb07 6702 	mla	r7, r7, r2, r6
 801da72:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801da76:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801da7a:	b2bf      	uxth	r7, r7
 801da7c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801da80:	fa5f fe8e 	uxtb.w	lr, lr
 801da84:	fb06 a602 	mla	r6, r6, r2, sl
 801da88:	fb0e cc02 	mla	ip, lr, r2, ip
 801da8c:	1c7a      	adds	r2, r7, #1
 801da8e:	b2b6      	uxth	r6, r6
 801da90:	fa1f fc8c 	uxth.w	ip, ip
 801da94:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801da98:	9a04      	ldr	r2, [sp, #16]
 801da9a:	f10c 0a01 	add.w	sl, ip, #1
 801da9e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801daa2:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801daa6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801daaa:	ea4a 0707 	orr.w	r7, sl, r7
 801daae:	f106 0a01 	add.w	sl, r6, #1
 801dab2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801dab6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801daba:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801dabe:	ea47 070a 	orr.w	r7, r7, sl
 801dac2:	52a7      	strh	r7, [r4, r2]
 801dac4:	e7af      	b.n	801da26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801dac6:	f04f 0e00 	mov.w	lr, #0
 801daca:	eba3 020e 	sub.w	r2, r3, lr
 801dace:	2a00      	cmp	r2, #0
 801dad0:	f77f af3a 	ble.w	801d948 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801dad4:	1402      	asrs	r2, r0, #16
 801dad6:	9e02      	ldr	r6, [sp, #8]
 801dad8:	140d      	asrs	r5, r1, #16
 801dada:	fb06 2505 	mla	r5, r6, r5, r2
 801dade:	9e03      	ldr	r6, [sp, #12]
 801dae0:	086a      	lsrs	r2, r5, #1
 801dae2:	07ed      	lsls	r5, r5, #31
 801dae4:	5cb2      	ldrb	r2, [r6, r2]
 801dae6:	bf54      	ite	pl
 801dae8:	f002 020f 	andpl.w	r2, r2, #15
 801daec:	1112      	asrmi	r2, r2, #4
 801daee:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801daf2:	b2d2      	uxtb	r2, r2
 801daf4:	2aff      	cmp	r2, #255	; 0xff
 801daf6:	d115      	bne.n	801db24 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801daf8:	f8d8 5000 	ldr.w	r5, [r8]
 801dafc:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801db00:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801db04:	096a      	lsrs	r2, r5, #5
 801db06:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801db0a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801db0e:	4332      	orrs	r2, r6
 801db10:	432a      	orrs	r2, r5
 801db12:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801db16:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801db18:	f10e 0e01 	add.w	lr, lr, #1
 801db1c:	4410      	add	r0, r2
 801db1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801db20:	4411      	add	r1, r2
 801db22:	e7d2      	b.n	801daca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801db24:	2a00      	cmp	r2, #0
 801db26:	d0f6      	beq.n	801db16 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801db28:	f8d8 7000 	ldr.w	r7, [r8]
 801db2c:	fa1f f982 	uxth.w	r9, r2
 801db30:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801db34:	43d2      	mvns	r2, r2
 801db36:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801db3a:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801db3e:	ea4f 262c 	mov.w	r6, ip, asr #8
 801db42:	fb15 f509 	smulbb	r5, r5, r9
 801db46:	b2d2      	uxtb	r2, r2
 801db48:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801db4c:	b2ff      	uxtb	r7, r7
 801db4e:	fb1a fa09 	smulbb	sl, sl, r9
 801db52:	fb06 5602 	mla	r6, r6, r2, r5
 801db56:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801db5a:	fb17 f709 	smulbb	r7, r7, r9
 801db5e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801db62:	b2b6      	uxth	r6, r6
 801db64:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801db68:	fa5f fc8c 	uxtb.w	ip, ip
 801db6c:	fb05 a502 	mla	r5, r5, r2, sl
 801db70:	fb0c 7702 	mla	r7, ip, r2, r7
 801db74:	1c72      	adds	r2, r6, #1
 801db76:	b2ad      	uxth	r5, r5
 801db78:	b2bf      	uxth	r7, r7
 801db7a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801db7e:	f107 0a01 	add.w	sl, r7, #1
 801db82:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801db86:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801db8a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801db8e:	ea4a 0606 	orr.w	r6, sl, r6
 801db92:	f105 0a01 	add.w	sl, r5, #1
 801db96:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801db9a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801db9e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801dba2:	ea46 060a 	orr.w	r6, r6, sl
 801dba6:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801dbaa:	e7b4      	b.n	801db16 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801dbac:	b007      	add	sp, #28
 801dbae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbb2:	bf00      	nop
 801dbb4:	20027cb8 	.word	0x20027cb8

0801dbb8 <_ZN8touchgfx8LCD16bppD1Ev>:
 801dbb8:	4770      	bx	lr

0801dbba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 801dbba:	4770      	bx	lr

0801dbbc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 801dbbc:	4770      	bx	lr

0801dbbe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 801dbbe:	4770      	bx	lr

0801dbc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801dbc0:	4770      	bx	lr

0801dbc2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801dbc2:	4770      	bx	lr

0801dbc4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801dbc4:	4770      	bx	lr

0801dbc6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801dbc6:	4770      	bx	lr

0801dbc8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801dbc8:	4770      	bx	lr

0801dbca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801dbca:	4770      	bx	lr

0801dbcc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801dbcc:	4770      	bx	lr

0801dbce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801dbce:	4770      	bx	lr

0801dbd0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801dbd0:	4770      	bx	lr

0801dbd2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801dbd2:	4770      	bx	lr

0801dbd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801dbd4:	4770      	bx	lr

0801dbd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801dbd6:	4770      	bx	lr

0801dbd8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801dbd8:	4770      	bx	lr

0801dbda <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801dbda:	4770      	bx	lr

0801dbdc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801dbdc:	4770      	bx	lr

0801dbde <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801dbde:	4770      	bx	lr

0801dbe0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801dbe0:	4770      	bx	lr

0801dbe2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801dbe2:	4770      	bx	lr

0801dbe4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801dbe4:	4770      	bx	lr

0801dbe6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801dbe6:	4770      	bx	lr

0801dbe8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801dbe8:	4770      	bx	lr

0801dbea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801dbea:	4770      	bx	lr

0801dbec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801dbec:	4770      	bx	lr

0801dbee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801dbee:	4770      	bx	lr

0801dbf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801dbf0:	4770      	bx	lr

0801dbf2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801dbf2:	4770      	bx	lr

0801dbf4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801dbf4:	4770      	bx	lr

0801dbf6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801dbf6:	4770      	bx	lr

0801dbf8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801dbf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dbfc:	b088      	sub	sp, #32
 801dbfe:	4606      	mov	r6, r0
 801dc00:	4688      	mov	r8, r1
 801dc02:	4691      	mov	r9, r2
 801dc04:	ac08      	add	r4, sp, #32
 801dc06:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801dc0a:	4620      	mov	r0, r4
 801dc0c:	f7fd fc62 	bl	801b4d4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dc10:	6833      	ldr	r3, [r6, #0]
 801dc12:	4605      	mov	r5, r0
 801dc14:	4620      	mov	r0, r4
 801dc16:	699f      	ldr	r7, [r3, #24]
 801dc18:	f7fd fb70 	bl	801b2fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dc1c:	4682      	mov	sl, r0
 801dc1e:	4620      	mov	r0, r4
 801dc20:	f7fd fba0 	bl	801b364 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dc24:	9500      	str	r5, [sp, #0]
 801dc26:	464b      	mov	r3, r9
 801dc28:	4642      	mov	r2, r8
 801dc2a:	4631      	mov	r1, r6
 801dc2c:	e9cd a001 	strd	sl, r0, [sp, #4]
 801dc30:	a806      	add	r0, sp, #24
 801dc32:	47b8      	blx	r7
 801dc34:	4628      	mov	r0, r5
 801dc36:	b008      	add	sp, #32
 801dc38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801dc3c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801dc3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dc40:	2300      	movs	r3, #0
 801dc42:	9300      	str	r3, [sp, #0]
 801dc44:	4b3d      	ldr	r3, [pc, #244]	; (801dd3c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801dc46:	781b      	ldrb	r3, [r3, #0]
 801dc48:	2b00      	cmp	r3, #0
 801dc4a:	d137      	bne.n	801dcbc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801dc4c:	4a3c      	ldr	r2, [pc, #240]	; (801dd40 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801dc4e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801dc52:	f8ad 2004 	strh.w	r2, [sp, #4]
 801dc56:	2b00      	cmp	r3, #0
 801dc58:	d132      	bne.n	801dcc0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801dc5a:	4b3a      	ldr	r3, [pc, #232]	; (801dd44 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801dc5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dc60:	ac02      	add	r4, sp, #8
 801dc62:	6808      	ldr	r0, [r1, #0]
 801dc64:	f8ad 3006 	strh.w	r3, [sp, #6]
 801dc68:	ab02      	add	r3, sp, #8
 801dc6a:	6849      	ldr	r1, [r1, #4]
 801dc6c:	4d36      	ldr	r5, [pc, #216]	; (801dd48 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801dc6e:	c303      	stmia	r3!, {r0, r1}
 801dc70:	4669      	mov	r1, sp
 801dc72:	4620      	mov	r0, r4
 801dc74:	f7f9 fff6 	bl	8017c64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dc78:	4668      	mov	r0, sp
 801dc7a:	f7f9 ffaf 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dc7e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801dc82:	f8bd 2000 	ldrh.w	r2, [sp]
 801dc86:	462f      	mov	r7, r5
 801dc88:	6828      	ldr	r0, [r5, #0]
 801dc8a:	4413      	add	r3, r2
 801dc8c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801dc90:	f8ad 3008 	strh.w	r3, [sp, #8]
 801dc94:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801dc98:	4413      	add	r3, r2
 801dc9a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801dc9e:	6803      	ldr	r3, [r0, #0]
 801dca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dca2:	4798      	blx	r3
 801dca4:	f010 0f01 	tst.w	r0, #1
 801dca8:	d00c      	beq.n	801dcc4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801dcaa:	6828      	ldr	r0, [r5, #0]
 801dcac:	6803      	ldr	r3, [r0, #0]
 801dcae:	e894 0006 	ldmia.w	r4, {r1, r2}
 801dcb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801dcb4:	4798      	blx	r3
 801dcb6:	b004      	add	sp, #16
 801dcb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dcbc:	4a21      	ldr	r2, [pc, #132]	; (801dd44 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801dcbe:	e7c6      	b.n	801dc4e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801dcc0:	4b1f      	ldr	r3, [pc, #124]	; (801dd40 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801dcc2:	e7cb      	b.n	801dc5c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801dcc4:	6838      	ldr	r0, [r7, #0]
 801dcc6:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801dcca:	6803      	ldr	r3, [r0, #0]
 801dccc:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801dcd0:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801dcd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dcd6:	4798      	blx	r3
 801dcd8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801dcdc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801dce0:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801dce4:	fb16 3602 	smlabb	r6, r6, r2, r3
 801dce8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801dcec:	6838      	ldr	r0, [r7, #0]
 801dcee:	6803      	ldr	r3, [r0, #0]
 801dcf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dcf2:	4798      	blx	r3
 801dcf4:	4a12      	ldr	r2, [pc, #72]	; (801dd40 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801dcf6:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801dcfa:	8813      	ldrh	r3, [r2, #0]
 801dcfc:	4691      	mov	r9, r2
 801dcfe:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801dd02:	435d      	muls	r5, r3
 801dd04:	fb03 1404 	mla	r4, r3, r4, r1
 801dd08:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801dd0c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801dd10:	6838      	ldr	r0, [r7, #0]
 801dd12:	42ac      	cmp	r4, r5
 801dd14:	6803      	ldr	r3, [r0, #0]
 801dd16:	d20e      	bcs.n	801dd36 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801dd18:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801dd1c:	4632      	mov	r2, r6
 801dd1e:	4643      	mov	r3, r8
 801dd20:	4621      	mov	r1, r4
 801dd22:	47d0      	blx	sl
 801dd24:	f8b9 3000 	ldrh.w	r3, [r9]
 801dd28:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801dd2c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801dd30:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801dd34:	e7ec      	b.n	801dd10 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801dd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dd38:	4798      	blx	r3
 801dd3a:	e7bc      	b.n	801dcb6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801dd3c:	20027ca0 	.word	0x20027ca0
 801dd40:	20027ca2 	.word	0x20027ca2
 801dd44:	20027ca4 	.word	0x20027ca4
 801dd48:	20027ca8 	.word	0x20027ca8

0801dd4c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801dd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd50:	b08b      	sub	sp, #44	; 0x2c
 801dd52:	460f      	mov	r7, r1
 801dd54:	4616      	mov	r6, r2
 801dd56:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801dd5a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801dd5e:	f1bb 0f00 	cmp.w	fp, #0
 801dd62:	d04a      	beq.n	801ddfa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801dd64:	6810      	ldr	r0, [r2, #0]
 801dd66:	ad06      	add	r5, sp, #24
 801dd68:	6851      	ldr	r1, [r2, #4]
 801dd6a:	c503      	stmia	r5!, {r0, r1}
 801dd6c:	6818      	ldr	r0, [r3, #0]
 801dd6e:	ad08      	add	r5, sp, #32
 801dd70:	6859      	ldr	r1, [r3, #4]
 801dd72:	c503      	stmia	r5!, {r0, r1}
 801dd74:	a806      	add	r0, sp, #24
 801dd76:	f7f9 ff31 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dd7a:	4631      	mov	r1, r6
 801dd7c:	a808      	add	r0, sp, #32
 801dd7e:	f7f9 ff71 	bl	8017c64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dd82:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801dd86:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801dd8a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801dd8e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801dd92:	fb16 2103 	smlabb	r1, r6, r3, r2
 801dd96:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801dd9a:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801dd9e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801dda2:	4f5f      	ldr	r7, [pc, #380]	; (801df20 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801dda4:	440a      	add	r2, r1
 801dda6:	6838      	ldr	r0, [r7, #0]
 801dda8:	46b9      	mov	r9, r7
 801ddaa:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ddae:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801ddb2:	4413      	add	r3, r2
 801ddb4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801ddb8:	6803      	ldr	r3, [r0, #0]
 801ddba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ddbc:	4798      	blx	r3
 801ddbe:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801ddc2:	d11d      	bne.n	801de00 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801ddc4:	b9fc      	cbnz	r4, 801de06 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801ddc6:	f010 0f01 	tst.w	r0, #1
 801ddca:	d01c      	beq.n	801de06 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801ddcc:	f8d9 0000 	ldr.w	r0, [r9]
 801ddd0:	2700      	movs	r7, #0
 801ddd2:	b2ad      	uxth	r5, r5
 801ddd4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801ddd8:	6801      	ldr	r1, [r0, #0]
 801ddda:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ddde:	f8cd b00c 	str.w	fp, [sp, #12]
 801dde2:	9501      	str	r5, [sp, #4]
 801dde4:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801dde8:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801ddec:	9402      	str	r4, [sp, #8]
 801ddee:	fa1f f488 	uxth.w	r4, r8
 801ddf2:	9400      	str	r4, [sp, #0]
 801ddf4:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801ddf6:	4631      	mov	r1, r6
 801ddf8:	47a0      	blx	r4
 801ddfa:	b00b      	add	sp, #44	; 0x2c
 801ddfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de00:	f010 0f04 	tst.w	r0, #4
 801de04:	e7e1      	b.n	801ddca <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801de06:	f8d9 0000 	ldr.w	r0, [r9]
 801de0a:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801de0e:	6803      	ldr	r3, [r0, #0]
 801de10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801de12:	4798      	blx	r3
 801de14:	4b43      	ldr	r3, [pc, #268]	; (801df24 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801de16:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801de1a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801de1e:	881a      	ldrh	r2, [r3, #0]
 801de20:	469a      	mov	sl, r3
 801de22:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801de26:	fb05 f502 	mul.w	r5, r5, r2
 801de2a:	fb02 1404 	mla	r4, r2, r4, r1
 801de2e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801de32:	d059      	beq.n	801dee8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801de34:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801de38:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801de3c:	fa1f f28b 	uxth.w	r2, fp
 801de40:	469e      	mov	lr, r3
 801de42:	fa1f f989 	uxth.w	r9, r9
 801de46:	42ac      	cmp	r4, r5
 801de48:	d264      	bcs.n	801df14 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801de4a:	eb04 0a07 	add.w	sl, r4, r7
 801de4e:	4554      	cmp	r4, sl
 801de50:	d23d      	bcs.n	801dece <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801de52:	8821      	ldrh	r1, [r4, #0]
 801de54:	f836 3b02 	ldrh.w	r3, [r6], #2
 801de58:	1208      	asrs	r0, r1, #8
 801de5a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801de5e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801de62:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801de66:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801de6a:	00c9      	lsls	r1, r1, #3
 801de6c:	fb10 f009 	smulbb	r0, r0, r9
 801de70:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801de74:	b2c9      	uxtb	r1, r1
 801de76:	fb0c 0c02 	mla	ip, ip, r2, r0
 801de7a:	10d8      	asrs	r0, r3, #3
 801de7c:	fb1b fb09 	smulbb	fp, fp, r9
 801de80:	00db      	lsls	r3, r3, #3
 801de82:	fa1f fc8c 	uxth.w	ip, ip
 801de86:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801de8a:	fb11 f109 	smulbb	r1, r1, r9
 801de8e:	b2db      	uxtb	r3, r3
 801de90:	fb00 b002 	mla	r0, r0, r2, fp
 801de94:	f10c 0b01 	add.w	fp, ip, #1
 801de98:	fb03 1302 	mla	r3, r3, r2, r1
 801de9c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801dea0:	b29b      	uxth	r3, r3
 801dea2:	b280      	uxth	r0, r0
 801dea4:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801dea8:	f103 0c01 	add.w	ip, r3, #1
 801deac:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801deb0:	1c43      	adds	r3, r0, #1
 801deb2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801deb6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801deba:	0940      	lsrs	r0, r0, #5
 801debc:	ea4c 0c0b 	orr.w	ip, ip, fp
 801dec0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801dec4:	ea4c 0c00 	orr.w	ip, ip, r0
 801dec8:	f824 cb02 	strh.w	ip, [r4], #2
 801decc:	e7bf      	b.n	801de4e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801dece:	f8be 3000 	ldrh.w	r3, [lr]
 801ded2:	eba3 0308 	sub.w	r3, r3, r8
 801ded6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801deda:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801dede:	eba3 0308 	sub.w	r3, r3, r8
 801dee2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801dee6:	e7ae      	b.n	801de46 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801dee8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801deec:	f8d9 0000 	ldr.w	r0, [r9]
 801def0:	42ac      	cmp	r4, r5
 801def2:	6803      	ldr	r3, [r0, #0]
 801def4:	d20e      	bcs.n	801df14 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801def6:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801defa:	4632      	mov	r2, r6
 801defc:	463b      	mov	r3, r7
 801defe:	4621      	mov	r1, r4
 801df00:	47c0      	blx	r8
 801df02:	f8ba 3000 	ldrh.w	r3, [sl]
 801df06:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801df0a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801df0e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801df12:	e7eb      	b.n	801deec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801df14:	4b02      	ldr	r3, [pc, #8]	; (801df20 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801df16:	6818      	ldr	r0, [r3, #0]
 801df18:	6803      	ldr	r3, [r0, #0]
 801df1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801df1c:	4798      	blx	r3
 801df1e:	e76c      	b.n	801ddfa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801df20:	20027ca8 	.word	0x20027ca8
 801df24:	20027ca2 	.word	0x20027ca2

0801df28 <_ZN8touchgfx8LCD16bppD0Ev>:
 801df28:	b510      	push	{r4, lr}
 801df2a:	4604      	mov	r4, r0
 801df2c:	2184      	movs	r1, #132	; 0x84
 801df2e:	f00c fd48 	bl	802a9c2 <_ZdlPvj>
 801df32:	4620      	mov	r0, r4
 801df34:	bd10      	pop	{r4, pc}

0801df36 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 801df36:	b510      	push	{r4, lr}
 801df38:	4604      	mov	r4, r0
 801df3a:	2104      	movs	r1, #4
 801df3c:	f00c fd41 	bl	802a9c2 <_ZdlPvj>
 801df40:	4620      	mov	r0, r4
 801df42:	bd10      	pop	{r4, pc}

0801df44 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 801df44:	b510      	push	{r4, lr}
 801df46:	4604      	mov	r4, r0
 801df48:	2104      	movs	r1, #4
 801df4a:	f00c fd3a 	bl	802a9c2 <_ZdlPvj>
 801df4e:	4620      	mov	r0, r4
 801df50:	bd10      	pop	{r4, pc}

0801df52 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 801df52:	b510      	push	{r4, lr}
 801df54:	4604      	mov	r4, r0
 801df56:	f640 0144 	movw	r1, #2116	; 0x844
 801df5a:	f00c fd32 	bl	802a9c2 <_ZdlPvj>
 801df5e:	4620      	mov	r0, r4
 801df60:	bd10      	pop	{r4, pc}

0801df62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801df62:	b510      	push	{r4, lr}
 801df64:	4604      	mov	r4, r0
 801df66:	2104      	movs	r1, #4
 801df68:	f00c fd2b 	bl	802a9c2 <_ZdlPvj>
 801df6c:	4620      	mov	r0, r4
 801df6e:	bd10      	pop	{r4, pc}

0801df70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801df70:	b510      	push	{r4, lr}
 801df72:	4604      	mov	r4, r0
 801df74:	2104      	movs	r1, #4
 801df76:	f00c fd24 	bl	802a9c2 <_ZdlPvj>
 801df7a:	4620      	mov	r0, r4
 801df7c:	bd10      	pop	{r4, pc}

0801df7e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801df7e:	b510      	push	{r4, lr}
 801df80:	4604      	mov	r4, r0
 801df82:	2104      	movs	r1, #4
 801df84:	f00c fd1d 	bl	802a9c2 <_ZdlPvj>
 801df88:	4620      	mov	r0, r4
 801df8a:	bd10      	pop	{r4, pc}

0801df8c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801df8c:	b510      	push	{r4, lr}
 801df8e:	4604      	mov	r4, r0
 801df90:	2104      	movs	r1, #4
 801df92:	f00c fd16 	bl	802a9c2 <_ZdlPvj>
 801df96:	4620      	mov	r0, r4
 801df98:	bd10      	pop	{r4, pc}

0801df9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801df9a:	b510      	push	{r4, lr}
 801df9c:	4604      	mov	r4, r0
 801df9e:	2104      	movs	r1, #4
 801dfa0:	f00c fd0f 	bl	802a9c2 <_ZdlPvj>
 801dfa4:	4620      	mov	r0, r4
 801dfa6:	bd10      	pop	{r4, pc}

0801dfa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801dfa8:	b510      	push	{r4, lr}
 801dfaa:	4604      	mov	r4, r0
 801dfac:	2104      	movs	r1, #4
 801dfae:	f00c fd08 	bl	802a9c2 <_ZdlPvj>
 801dfb2:	4620      	mov	r0, r4
 801dfb4:	bd10      	pop	{r4, pc}

0801dfb6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801dfb6:	b510      	push	{r4, lr}
 801dfb8:	4604      	mov	r4, r0
 801dfba:	2104      	movs	r1, #4
 801dfbc:	f00c fd01 	bl	802a9c2 <_ZdlPvj>
 801dfc0:	4620      	mov	r0, r4
 801dfc2:	bd10      	pop	{r4, pc}

0801dfc4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801dfc4:	b510      	push	{r4, lr}
 801dfc6:	4604      	mov	r4, r0
 801dfc8:	2104      	movs	r1, #4
 801dfca:	f00c fcfa 	bl	802a9c2 <_ZdlPvj>
 801dfce:	4620      	mov	r0, r4
 801dfd0:	bd10      	pop	{r4, pc}

0801dfd2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801dfd2:	b510      	push	{r4, lr}
 801dfd4:	4604      	mov	r4, r0
 801dfd6:	2104      	movs	r1, #4
 801dfd8:	f00c fcf3 	bl	802a9c2 <_ZdlPvj>
 801dfdc:	4620      	mov	r0, r4
 801dfde:	bd10      	pop	{r4, pc}

0801dfe0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801dfe0:	b510      	push	{r4, lr}
 801dfe2:	4604      	mov	r4, r0
 801dfe4:	2104      	movs	r1, #4
 801dfe6:	f00c fcec 	bl	802a9c2 <_ZdlPvj>
 801dfea:	4620      	mov	r0, r4
 801dfec:	bd10      	pop	{r4, pc}

0801dfee <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801dfee:	b510      	push	{r4, lr}
 801dff0:	4604      	mov	r4, r0
 801dff2:	2104      	movs	r1, #4
 801dff4:	f00c fce5 	bl	802a9c2 <_ZdlPvj>
 801dff8:	4620      	mov	r0, r4
 801dffa:	bd10      	pop	{r4, pc}

0801dffc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801dffc:	b510      	push	{r4, lr}
 801dffe:	4604      	mov	r4, r0
 801e000:	2104      	movs	r1, #4
 801e002:	f00c fcde 	bl	802a9c2 <_ZdlPvj>
 801e006:	4620      	mov	r0, r4
 801e008:	bd10      	pop	{r4, pc}

0801e00a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e00a:	b510      	push	{r4, lr}
 801e00c:	4604      	mov	r4, r0
 801e00e:	2104      	movs	r1, #4
 801e010:	f00c fcd7 	bl	802a9c2 <_ZdlPvj>
 801e014:	4620      	mov	r0, r4
 801e016:	bd10      	pop	{r4, pc}

0801e018 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801e018:	b510      	push	{r4, lr}
 801e01a:	4604      	mov	r4, r0
 801e01c:	2104      	movs	r1, #4
 801e01e:	f00c fcd0 	bl	802a9c2 <_ZdlPvj>
 801e022:	4620      	mov	r0, r4
 801e024:	bd10      	pop	{r4, pc}

0801e026 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e026:	b510      	push	{r4, lr}
 801e028:	4604      	mov	r4, r0
 801e02a:	2104      	movs	r1, #4
 801e02c:	f00c fcc9 	bl	802a9c2 <_ZdlPvj>
 801e030:	4620      	mov	r0, r4
 801e032:	bd10      	pop	{r4, pc}

0801e034 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e034:	b510      	push	{r4, lr}
 801e036:	4604      	mov	r4, r0
 801e038:	2104      	movs	r1, #4
 801e03a:	f00c fcc2 	bl	802a9c2 <_ZdlPvj>
 801e03e:	4620      	mov	r0, r4
 801e040:	bd10      	pop	{r4, pc}

0801e042 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e042:	b510      	push	{r4, lr}
 801e044:	4604      	mov	r4, r0
 801e046:	2104      	movs	r1, #4
 801e048:	f00c fcbb 	bl	802a9c2 <_ZdlPvj>
 801e04c:	4620      	mov	r0, r4
 801e04e:	bd10      	pop	{r4, pc}

0801e050 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801e050:	b510      	push	{r4, lr}
 801e052:	4604      	mov	r4, r0
 801e054:	2104      	movs	r1, #4
 801e056:	f00c fcb4 	bl	802a9c2 <_ZdlPvj>
 801e05a:	4620      	mov	r0, r4
 801e05c:	bd10      	pop	{r4, pc}

0801e05e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e05e:	b510      	push	{r4, lr}
 801e060:	4604      	mov	r4, r0
 801e062:	2104      	movs	r1, #4
 801e064:	f00c fcad 	bl	802a9c2 <_ZdlPvj>
 801e068:	4620      	mov	r0, r4
 801e06a:	bd10      	pop	{r4, pc}

0801e06c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e06c:	b510      	push	{r4, lr}
 801e06e:	4604      	mov	r4, r0
 801e070:	2104      	movs	r1, #4
 801e072:	f00c fca6 	bl	802a9c2 <_ZdlPvj>
 801e076:	4620      	mov	r0, r4
 801e078:	bd10      	pop	{r4, pc}

0801e07a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e07a:	b510      	push	{r4, lr}
 801e07c:	4604      	mov	r4, r0
 801e07e:	2104      	movs	r1, #4
 801e080:	f00c fc9f 	bl	802a9c2 <_ZdlPvj>
 801e084:	4620      	mov	r0, r4
 801e086:	bd10      	pop	{r4, pc}

0801e088 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e088:	b510      	push	{r4, lr}
 801e08a:	4604      	mov	r4, r0
 801e08c:	2104      	movs	r1, #4
 801e08e:	f00c fc98 	bl	802a9c2 <_ZdlPvj>
 801e092:	4620      	mov	r0, r4
 801e094:	bd10      	pop	{r4, pc}

0801e096 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e096:	b510      	push	{r4, lr}
 801e098:	4604      	mov	r4, r0
 801e09a:	2104      	movs	r1, #4
 801e09c:	f00c fc91 	bl	802a9c2 <_ZdlPvj>
 801e0a0:	4620      	mov	r0, r4
 801e0a2:	bd10      	pop	{r4, pc}

0801e0a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e0a4:	b510      	push	{r4, lr}
 801e0a6:	4604      	mov	r4, r0
 801e0a8:	2104      	movs	r1, #4
 801e0aa:	f00c fc8a 	bl	802a9c2 <_ZdlPvj>
 801e0ae:	4620      	mov	r0, r4
 801e0b0:	bd10      	pop	{r4, pc}

0801e0b2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801e0b2:	b510      	push	{r4, lr}
 801e0b4:	4604      	mov	r4, r0
 801e0b6:	2104      	movs	r1, #4
 801e0b8:	f00c fc83 	bl	802a9c2 <_ZdlPvj>
 801e0bc:	4620      	mov	r0, r4
 801e0be:	bd10      	pop	{r4, pc}

0801e0c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801e0c0:	b510      	push	{r4, lr}
 801e0c2:	4604      	mov	r4, r0
 801e0c4:	2104      	movs	r1, #4
 801e0c6:	f00c fc7c 	bl	802a9c2 <_ZdlPvj>
 801e0ca:	4620      	mov	r0, r4
 801e0cc:	bd10      	pop	{r4, pc}

0801e0ce <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801e0ce:	b510      	push	{r4, lr}
 801e0d0:	4604      	mov	r4, r0
 801e0d2:	2104      	movs	r1, #4
 801e0d4:	f00c fc75 	bl	802a9c2 <_ZdlPvj>
 801e0d8:	4620      	mov	r0, r4
 801e0da:	bd10      	pop	{r4, pc}

0801e0dc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801e0dc:	b510      	push	{r4, lr}
 801e0de:	4604      	mov	r4, r0
 801e0e0:	2104      	movs	r1, #4
 801e0e2:	f00c fc6e 	bl	802a9c2 <_ZdlPvj>
 801e0e6:	4620      	mov	r0, r4
 801e0e8:	bd10      	pop	{r4, pc}
	...

0801e0ec <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801e0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0f0:	b08f      	sub	sp, #60	; 0x3c
 801e0f2:	461c      	mov	r4, r3
 801e0f4:	9205      	str	r2, [sp, #20]
 801e0f6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e0fa:	9100      	str	r1, [sp, #0]
 801e0fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e0fe:	9201      	str	r2, [sp, #4]
 801e100:	2a00      	cmp	r2, #0
 801e102:	f000 8116 	beq.w	801e332 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x246>
 801e106:	6820      	ldr	r0, [r4, #0]
 801e108:	aa0a      	add	r2, sp, #40	; 0x28
 801e10a:	6861      	ldr	r1, [r4, #4]
 801e10c:	c203      	stmia	r2!, {r0, r1}
 801e10e:	6818      	ldr	r0, [r3, #0]
 801e110:	aa0c      	add	r2, sp, #48	; 0x30
 801e112:	6859      	ldr	r1, [r3, #4]
 801e114:	c203      	stmia	r2!, {r0, r1}
 801e116:	a80a      	add	r0, sp, #40	; 0x28
 801e118:	f7f9 fd60 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e11c:	4621      	mov	r1, r4
 801e11e:	a80c      	add	r0, sp, #48	; 0x30
 801e120:	f7f9 fda0 	bl	8017c64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e124:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801e128:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 801e12c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801e130:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801e134:	bfdb      	ittet	le
 801e136:	b2b3      	uxthle	r3, r6
 801e138:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801e13c:	2301      	movgt	r3, #1
 801e13e:	fb92 f3f3 	sdivle	r3, r2, r3
 801e142:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801e146:	441d      	add	r5, r3
 801e148:	fb92 f1f3 	sdiv	r1, r2, r3
 801e14c:	fa1f fc81 	uxth.w	ip, r1
 801e150:	3d01      	subs	r5, #1
 801e152:	fb0c 2413 	mls	r4, ip, r3, r2
 801e156:	4661      	mov	r1, ip
 801e158:	fb14 f406 	smulbb	r4, r4, r6
 801e15c:	4404      	add	r4, r0
 801e15e:	fb95 f5f3 	sdiv	r5, r5, r3
 801e162:	b2a4      	uxth	r4, r4
 801e164:	b131      	cbz	r1, 801e174 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x88>
 801e166:	9b05      	ldr	r3, [sp, #20]
 801e168:	9900      	ldr	r1, [sp, #0]
 801e16a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801e16e:	ba1b      	rev	r3, r3
 801e170:	4419      	add	r1, r3
 801e172:	9100      	str	r1, [sp, #0]
 801e174:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801e178:	b2ad      	uxth	r5, r5
 801e17a:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801e17e:	4418      	add	r0, r3
 801e180:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801e184:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801e188:	00ad      	lsls	r5, r5, #2
 801e18a:	441a      	add	r2, r3
 801e18c:	4b6a      	ldr	r3, [pc, #424]	; (801e338 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801e18e:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 801e192:	6818      	ldr	r0, [r3, #0]
 801e194:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801e198:	6803      	ldr	r3, [r0, #0]
 801e19a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e19c:	4798      	blx	r3
 801e19e:	4967      	ldr	r1, [pc, #412]	; (801e33c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 801e1a0:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801e1a4:	2c00      	cmp	r4, #0
 801e1a6:	880b      	ldrh	r3, [r1, #0]
 801e1a8:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801e1ac:	bf0c      	ite	eq
 801e1ae:	46c6      	moveq	lr, r8
 801e1b0:	f04f 0e00 	movne.w	lr, #0
 801e1b4:	9109      	str	r1, [sp, #36]	; 0x24
 801e1b6:	fb03 c202 	mla	r2, r3, r2, ip
 801e1ba:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801e1be:	4373      	muls	r3, r6
 801e1c0:	fa1f fe8e 	uxth.w	lr, lr
 801e1c4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801e1c8:	9103      	str	r1, [sp, #12]
 801e1ca:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e1ce:	9306      	str	r3, [sp, #24]
 801e1d0:	1d2b      	adds	r3, r5, #4
 801e1d2:	9307      	str	r3, [sp, #28]
 801e1d4:	9b01      	ldr	r3, [sp, #4]
 801e1d6:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 801e1da:	2300      	movs	r3, #0
 801e1dc:	b292      	uxth	r2, r2
 801e1de:	9302      	str	r3, [sp, #8]
 801e1e0:	9204      	str	r2, [sp, #16]
 801e1e2:	9a06      	ldr	r2, [sp, #24]
 801e1e4:	4282      	cmp	r2, r0
 801e1e6:	f240 809f 	bls.w	801e328 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 801e1ea:	b963      	cbnz	r3, 801e206 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 801e1ec:	9b00      	ldr	r3, [sp, #0]
 801e1ee:	781a      	ldrb	r2, [r3, #0]
 801e1f0:	0993      	lsrs	r3, r2, #6
 801e1f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801e1f6:	9202      	str	r2, [sp, #8]
 801e1f8:	1e5a      	subs	r2, r3, #1
 801e1fa:	2a02      	cmp	r2, #2
 801e1fc:	d815      	bhi.n	801e22a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 801e1fe:	9a00      	ldr	r2, [sp, #0]
 801e200:	b29b      	uxth	r3, r3
 801e202:	3201      	adds	r2, #1
 801e204:	9200      	str	r2, [sp, #0]
 801e206:	b1b4      	cbz	r4, 801e236 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 801e208:	429c      	cmp	r4, r3
 801e20a:	bf91      	iteee	ls
 801e20c:	1b1c      	subls	r4, r3, r4
 801e20e:	1ae4      	subhi	r4, r4, r3
 801e210:	4671      	movhi	r1, lr
 801e212:	f04f 0a00 	movhi.w	sl, #0
 801e216:	bf9b      	ittet	ls
 801e218:	fa1f fa84 	uxthls.w	sl, r4
 801e21c:	2400      	movls	r4, #0
 801e21e:	b2a4      	uxthhi	r4, r4
 801e220:	fa1f f188 	uxthls.w	r1, r8
 801e224:	4653      	mov	r3, sl
 801e226:	468e      	mov	lr, r1
 801e228:	e7db      	b.n	801e1e2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf6>
 801e22a:	9a00      	ldr	r2, [sp, #0]
 801e22c:	9b00      	ldr	r3, [sp, #0]
 801e22e:	3202      	adds	r2, #2
 801e230:	785b      	ldrb	r3, [r3, #1]
 801e232:	9200      	str	r2, [sp, #0]
 801e234:	e7e7      	b.n	801e206 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 801e236:	2202      	movs	r2, #2
 801e238:	9907      	ldr	r1, [sp, #28]
 801e23a:	4573      	cmp	r3, lr
 801e23c:	4615      	mov	r5, r2
 801e23e:	9a02      	ldr	r2, [sp, #8]
 801e240:	bf24      	itt	cs
 801e242:	eba3 0a0e 	subcs.w	sl, r3, lr
 801e246:	46f1      	movcs	r9, lr
 801e248:	fb15 1202 	smlabb	r2, r5, r2, r1
 801e24c:	9905      	ldr	r1, [sp, #20]
 801e24e:	bf34      	ite	cc
 801e250:	4699      	movcc	r9, r3
 801e252:	fa1f fa8a 	uxthcs.w	sl, sl
 801e256:	f831 c002 	ldrh.w	ip, [r1, r2]
 801e25a:	bf38      	it	cc
 801e25c:	ebae 0103 	subcc.w	r1, lr, r3
 801e260:	9a01      	ldr	r2, [sp, #4]
 801e262:	bf2e      	itee	cs
 801e264:	4621      	movcs	r1, r4
 801e266:	b289      	uxthcc	r1, r1
 801e268:	46a2      	movcc	sl, r4
 801e26a:	2aff      	cmp	r2, #255	; 0xff
 801e26c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801e270:	d105      	bne.n	801e27e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x192>
 801e272:	4481      	add	r9, r0
 801e274:	4581      	cmp	r9, r0
 801e276:	d045      	beq.n	801e304 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 801e278:	f820 cb02 	strh.w	ip, [r0], #2
 801e27c:	e7fa      	b.n	801e274 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x188>
 801e27e:	ea4f 222c 	mov.w	r2, ip, asr #8
 801e282:	9d03      	ldr	r5, [sp, #12]
 801e284:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801e288:	4481      	add	r9, r0
 801e28a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e28e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801e292:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801e296:	fa5f fc8c 	uxtb.w	ip, ip
 801e29a:	436a      	muls	r2, r5
 801e29c:	fb0b fb05 	mul.w	fp, fp, r5
 801e2a0:	fb0c fc05 	mul.w	ip, ip, r5
 801e2a4:	9208      	str	r2, [sp, #32]
 801e2a6:	4581      	cmp	r9, r0
 801e2a8:	d02c      	beq.n	801e304 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 801e2aa:	8802      	ldrh	r2, [r0, #0]
 801e2ac:	9d04      	ldr	r5, [sp, #16]
 801e2ae:	1216      	asrs	r6, r2, #8
 801e2b0:	9f04      	ldr	r7, [sp, #16]
 801e2b2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e2b6:	fb16 f605 	smulbb	r6, r6, r5
 801e2ba:	9d08      	ldr	r5, [sp, #32]
 801e2bc:	442e      	add	r6, r5
 801e2be:	10d5      	asrs	r5, r2, #3
 801e2c0:	00d2      	lsls	r2, r2, #3
 801e2c2:	b2b6      	uxth	r6, r6
 801e2c4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e2c8:	b2d2      	uxtb	r2, r2
 801e2ca:	fb15 f507 	smulbb	r5, r5, r7
 801e2ce:	fb12 f207 	smulbb	r2, r2, r7
 801e2d2:	1c77      	adds	r7, r6, #1
 801e2d4:	445d      	add	r5, fp
 801e2d6:	4462      	add	r2, ip
 801e2d8:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801e2dc:	b2ad      	uxth	r5, r5
 801e2de:	b292      	uxth	r2, r2
 801e2e0:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801e2e4:	1c57      	adds	r7, r2, #1
 801e2e6:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 801e2ea:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e2ee:	4316      	orrs	r6, r2
 801e2f0:	1c6a      	adds	r2, r5, #1
 801e2f2:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801e2f6:	096d      	lsrs	r5, r5, #5
 801e2f8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e2fc:	432e      	orrs	r6, r5
 801e2fe:	f820 6b02 	strh.w	r6, [r0], #2
 801e302:	e7d0      	b.n	801e2a6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ba>
 801e304:	4573      	cmp	r3, lr
 801e306:	d38d      	bcc.n	801e224 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 801e308:	fa1f f188 	uxth.w	r1, r8
 801e30c:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801e310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e312:	1a64      	subs	r4, r4, r1
 801e314:	881b      	ldrh	r3, [r3, #0]
 801e316:	b2a4      	uxth	r4, r4
 801e318:	eba3 0308 	sub.w	r3, r3, r8
 801e31c:	2c00      	cmp	r4, #0
 801e31e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e322:	bf18      	it	ne
 801e324:	2100      	movne	r1, #0
 801e326:	e77d      	b.n	801e224 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 801e328:	4b03      	ldr	r3, [pc, #12]	; (801e338 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801e32a:	6818      	ldr	r0, [r3, #0]
 801e32c:	6803      	ldr	r3, [r0, #0]
 801e32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e330:	4798      	blx	r3
 801e332:	b00f      	add	sp, #60	; 0x3c
 801e334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e338:	20027ca8 	.word	0x20027ca8
 801e33c:	20027ca2 	.word	0x20027ca2

0801e340 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801e340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e344:	b09f      	sub	sp, #124	; 0x7c
 801e346:	461d      	mov	r5, r3
 801e348:	4604      	mov	r4, r0
 801e34a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e34c:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
 801e350:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 801e354:	9209      	str	r2, [sp, #36]	; 0x24
 801e356:	2a00      	cmp	r2, #0
 801e358:	f000 81ed 	beq.w	801e736 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f6>
 801e35c:	6828      	ldr	r0, [r5, #0]
 801e35e:	aa1a      	add	r2, sp, #104	; 0x68
 801e360:	6869      	ldr	r1, [r5, #4]
 801e362:	c203      	stmia	r2!, {r0, r1}
 801e364:	6818      	ldr	r0, [r3, #0]
 801e366:	aa1c      	add	r2, sp, #112	; 0x70
 801e368:	6859      	ldr	r1, [r3, #4]
 801e36a:	c203      	stmia	r2!, {r0, r1}
 801e36c:	a81a      	add	r0, sp, #104	; 0x68
 801e36e:	f7f9 fc35 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e372:	4629      	mov	r1, r5
 801e374:	a81c      	add	r0, sp, #112	; 0x70
 801e376:	f7f9 fc75 	bl	8017c64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e37a:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801e37e:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	; 0x6e
 801e382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e386:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	; 0x76
 801e38a:	bfdb      	ittet	le
 801e38c:	b29a      	uxthle	r2, r3
 801e38e:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801e392:	2201      	movgt	r2, #1
 801e394:	fb91 f2f2 	sdivle	r2, r1, r2
 801e398:	9202      	str	r2, [sp, #8]
 801e39a:	9802      	ldr	r0, [sp, #8]
 801e39c:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 801e3a0:	9902      	ldr	r1, [sp, #8]
 801e3a2:	fb92 f0f0 	sdiv	r0, r2, r0
 801e3a6:	b280      	uxth	r0, r0
 801e3a8:	4488      	add	r8, r1
 801e3aa:	9010      	str	r0, [sp, #64]	; 0x40
 801e3ac:	f108 38ff 	add.w	r8, r8, #4294967295
 801e3b0:	9802      	ldr	r0, [sp, #8]
 801e3b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801e3b4:	fb05 2510 	mls	r5, r5, r0, r2
 801e3b8:	fb98 f8f1 	sdiv	r8, r8, r1
 801e3bc:	fb15 f503 	smulbb	r5, r5, r3
 801e3c0:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 801e3c4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801e3c8:	f108 0801 	add.w	r8, r8, #1
 801e3cc:	440d      	add	r5, r1
 801e3ce:	4419      	add	r1, r3
 801e3d0:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 801e3d4:	fa1f f888 	uxth.w	r8, r8
 801e3d8:	441a      	add	r2, r3
 801e3da:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 801e3de:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
 801e3e2:	b2ad      	uxth	r5, r5
 801e3e4:	9304      	str	r3, [sp, #16]
 801e3e6:	4b94      	ldr	r3, [pc, #592]	; (801e638 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 801e3e8:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
 801e3ec:	6818      	ldr	r0, [r3, #0]
 801e3ee:	6803      	ldr	r3, [r0, #0]
 801e3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e3f2:	4798      	blx	r3
 801e3f4:	4b91      	ldr	r3, [pc, #580]	; (801e63c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801e3f6:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
 801e3fa:	2d00      	cmp	r5, #0
 801e3fc:	881a      	ldrh	r2, [r3, #0]
 801e3fe:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801e402:	fb02 f606 	mul.w	r6, r2, r6
 801e406:	fb02 7101 	mla	r1, r2, r1, r7
 801e40a:	9318      	str	r3, [sp, #96]	; 0x60
 801e40c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801e410:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801e414:	f04f 0100 	mov.w	r1, #0
 801e418:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 801e41c:	930f      	str	r3, [sp, #60]	; 0x3c
 801e41e:	4b88      	ldr	r3, [pc, #544]	; (801e640 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>)
 801e420:	920a      	str	r2, [sp, #40]	; 0x28
 801e422:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e424:	eba3 0304 	sub.w	r3, r3, r4
 801e428:	910d      	str	r1, [sp, #52]	; 0x34
 801e42a:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 801e42e:	9319      	str	r3, [sp, #100]	; 0x64
 801e430:	f108 0204 	add.w	r2, r8, #4
 801e434:	9211      	str	r2, [sp, #68]	; 0x44
 801e436:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e438:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801e43c:	9215      	str	r2, [sp, #84]	; 0x54
 801e43e:	9a04      	ldr	r2, [sp, #16]
 801e440:	bf18      	it	ne
 801e442:	2200      	movne	r2, #0
 801e444:	b292      	uxth	r2, r2
 801e446:	9910      	ldr	r1, [sp, #64]	; 0x40
 801e448:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e44a:	fa11 f383 	uxtah	r3, r1, r3
 801e44e:	9914      	ldr	r1, [sp, #80]	; 0x50
 801e450:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e454:	3304      	adds	r3, #4
 801e456:	9306      	str	r3, [sp, #24]
 801e458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e45a:	4283      	cmp	r3, r0
 801e45c:	f240 8166 	bls.w	801e72c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ec>
 801e460:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 801e464:	f04f 0a01 	mov.w	sl, #1
 801e468:	9902      	ldr	r1, [sp, #8]
 801e46a:	9e06      	ldr	r6, [sp, #24]
 801e46c:	46d3      	mov	fp, sl
 801e46e:	4657      	mov	r7, sl
 801e470:	7836      	ldrb	r6, [r6, #0]
 801e472:	fbb5 f3f3 	udiv	r3, r5, r3
 801e476:	1acb      	subs	r3, r1, r3
 801e478:	9612      	str	r6, [sp, #72]	; 0x48
 801e47a:	3601      	adds	r6, #1
 801e47c:	b29b      	uxth	r3, r3
 801e47e:	9605      	str	r6, [sp, #20]
 801e480:	9316      	str	r3, [sp, #88]	; 0x58
 801e482:	9b06      	ldr	r3, [sp, #24]
 801e484:	7859      	ldrb	r1, [r3, #1]
 801e486:	789b      	ldrb	r3, [r3, #2]
 801e488:	021b      	lsls	r3, r3, #8
 801e48a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801e48e:	9906      	ldr	r1, [sp, #24]
 801e490:	78c9      	ldrb	r1, [r1, #3]
 801e492:	430b      	orrs	r3, r1
 801e494:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801e496:	4419      	add	r1, r3
 801e498:	1c4e      	adds	r6, r1, #1
 801e49a:	7849      	ldrb	r1, [r1, #1]
 801e49c:	9603      	str	r6, [sp, #12]
 801e49e:	0209      	lsls	r1, r1, #8
 801e4a0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e4a2:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 801e4a6:	5cf3      	ldrb	r3, [r6, r3]
 801e4a8:	4319      	orrs	r1, r3
 801e4aa:	b28b      	uxth	r3, r1
 801e4ac:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 801e4b0:	930c      	str	r3, [sp, #48]	; 0x30
 801e4b2:	2300      	movs	r3, #0
 801e4b4:	9307      	str	r3, [sp, #28]
 801e4b6:	469c      	mov	ip, r3
 801e4b8:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801e4bc:	930e      	str	r3, [sp, #56]	; 0x38
 801e4be:	2d00      	cmp	r5, #0
 801e4c0:	d07e      	beq.n	801e5c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x280>
 801e4c2:	42af      	cmp	r7, r5
 801e4c4:	d26e      	bcs.n	801e5a4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x264>
 801e4c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e4c8:	1bed      	subs	r5, r5, r7
 801e4ca:	9201      	str	r2, [sp, #4]
 801e4cc:	4283      	cmp	r3, r0
 801e4ce:	b2ad      	uxth	r5, r5
 801e4d0:	d802      	bhi.n	801e4d8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x198>
 801e4d2:	e073      	b.n	801e5bc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 801e4d4:	2b00      	cmp	r3, #0
 801e4d6:	d15f      	bne.n	801e598 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x258>
 801e4d8:	9b03      	ldr	r3, [sp, #12]
 801e4da:	f1cb 0207 	rsb	r2, fp, #7
 801e4de:	785b      	ldrb	r3, [r3, #1]
 801e4e0:	4093      	lsls	r3, r2
 801e4e2:	005b      	lsls	r3, r3, #1
 801e4e4:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801e4e8:	9b03      	ldr	r3, [sp, #12]
 801e4ea:	781b      	ldrb	r3, [r3, #0]
 801e4ec:	fa43 f30b 	asr.w	r3, r3, fp
 801e4f0:	b2db      	uxtb	r3, r3
 801e4f2:	4313      	orrs	r3, r2
 801e4f4:	f10b 0201 	add.w	r2, fp, #1
 801e4f8:	fa5f fb82 	uxtb.w	fp, r2
 801e4fc:	9a03      	ldr	r2, [sp, #12]
 801e4fe:	b29f      	uxth	r7, r3
 801e500:	f1bb 0f08 	cmp.w	fp, #8
 801e504:	bf13      	iteet	ne
 801e506:	3201      	addne	r2, #1
 801e508:	3202      	addeq	r2, #2
 801e50a:	f04f 0b00 	moveq.w	fp, #0
 801e50e:	9203      	strne	r2, [sp, #12]
 801e510:	bf08      	it	eq
 801e512:	9203      	streq	r2, [sp, #12]
 801e514:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e516:	42ba      	cmp	r2, r7
 801e518:	d309      	bcc.n	801e52e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ee>
 801e51a:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 801e51e:	2301      	movs	r3, #1
 801e520:	9a05      	ldr	r2, [sp, #20]
 801e522:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 801e526:	d30e      	bcc.n	801e546 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 801e528:	469a      	mov	sl, r3
 801e52a:	2600      	movs	r6, #0
 801e52c:	e035      	b.n	801e59a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x25a>
 801e52e:	9b05      	ldr	r3, [sp, #20]
 801e530:	429f      	cmp	r7, r3
 801e532:	d318      	bcc.n	801e566 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x226>
 801e534:	eb04 030a 	add.w	r3, r4, sl
 801e538:	f894 2804 	ldrb.w	r2, [r4, #2052]	; 0x804
 801e53c:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
 801e540:	f10a 0301 	add.w	r3, sl, #1
 801e544:	b29b      	uxth	r3, r3
 801e546:	9a05      	ldr	r2, [sp, #20]
 801e548:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 801e54c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801e550:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e552:	7116      	strb	r6, [r2, #4]
 801e554:	f10a 0601 	add.w	r6, sl, #1
 801e558:	80d1      	strh	r1, [r2, #6]
 801e55a:	7156      	strb	r6, [r2, #5]
 801e55c:	9a05      	ldr	r2, [sp, #20]
 801e55e:	3201      	adds	r2, #1
 801e560:	b292      	uxth	r2, r2
 801e562:	9205      	str	r2, [sp, #20]
 801e564:	e7e0      	b.n	801e528 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e8>
 801e566:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 801e56a:	463a      	mov	r2, r7
 801e56c:	795b      	ldrb	r3, [r3, #5]
 801e56e:	f603 0604 	addw	r6, r3, #2052	; 0x804
 801e572:	4426      	add	r6, r4
 801e574:	9919      	ldr	r1, [sp, #100]	; 0x64
 801e576:	eb01 0c06 	add.w	ip, r1, r6
 801e57a:	f1bc 0f00 	cmp.w	ip, #0
 801e57e:	dd07      	ble.n	801e590 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>
 801e580:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801e584:	f892 c004 	ldrb.w	ip, [r2, #4]
 801e588:	f806 cd01 	strb.w	ip, [r6, #-1]!
 801e58c:	88d2      	ldrh	r2, [r2, #6]
 801e58e:	e7f1      	b.n	801e574 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x234>
 801e590:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 801e594:	b29b      	uxth	r3, r3
 801e596:	e7c3      	b.n	801e520 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 801e598:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e59a:	970c      	str	r7, [sp, #48]	; 0x30
 801e59c:	46b4      	mov	ip, r6
 801e59e:	9a01      	ldr	r2, [sp, #4]
 801e5a0:	461f      	mov	r7, r3
 801e5a2:	e78c      	b.n	801e4be <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17e>
 801e5a4:	1b7b      	subs	r3, r7, r5
 801e5a6:	eb0c 0605 	add.w	r6, ip, r5
 801e5aa:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e5ae:	b29b      	uxth	r3, r3
 801e5b0:	b2b6      	uxth	r6, r6
 801e5b2:	9201      	str	r2, [sp, #4]
 801e5b4:	2500      	movs	r5, #0
 801e5b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e5b8:	4282      	cmp	r2, r0
 801e5ba:	d88b      	bhi.n	801e4d4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 801e5bc:	9a01      	ldr	r2, [sp, #4]
 801e5be:	e74b      	b.n	801e458 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x118>
 801e5c0:	4297      	cmp	r7, r2
 801e5c2:	d332      	bcc.n	801e62a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2ea>
 801e5c4:	1abb      	subs	r3, r7, r2
 801e5c6:	9208      	str	r2, [sp, #32]
 801e5c8:	9501      	str	r5, [sp, #4]
 801e5ca:	b29b      	uxth	r3, r3
 801e5cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e5ce:	29ff      	cmp	r1, #255	; 0xff
 801e5d0:	9908      	ldr	r1, [sp, #32]
 801e5d2:	eb0c 0601 	add.w	r6, ip, r1
 801e5d6:	d135      	bne.n	801e644 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x304>
 801e5d8:	f1a0 0e02 	sub.w	lr, r0, #2
 801e5dc:	b2b6      	uxth	r6, r6
 801e5de:	45b4      	cmp	ip, r6
 801e5e0:	f040 808c 	bne.w	801e6fc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3bc>
 801e5e4:	9908      	ldr	r1, [sp, #32]
 801e5e6:	4297      	cmp	r7, r2
 801e5e8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801e5ec:	d3e2      	bcc.n	801e5b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x274>
 801e5ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e5f0:	9904      	ldr	r1, [sp, #16]
 801e5f2:	8812      	ldrh	r2, [r2, #0]
 801e5f4:	1a52      	subs	r2, r2, r1
 801e5f6:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e5f8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801e5fc:	9a07      	ldr	r2, [sp, #28]
 801e5fe:	3201      	adds	r2, #1
 801e600:	428a      	cmp	r2, r1
 801e602:	9207      	str	r2, [sp, #28]
 801e604:	f040 8087 	bne.w	801e716 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3d6>
 801e608:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 801e60c:	f8bd 7068 	ldrh.w	r7, [sp, #104]	; 0x68
 801e610:	9b04      	ldr	r3, [sp, #16]
 801e612:	1bed      	subs	r5, r5, r7
 801e614:	b2ad      	uxth	r5, r5
 801e616:	2d00      	cmp	r5, #0
 801e618:	bf08      	it	eq
 801e61a:	461a      	moveq	r2, r3
 801e61c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e61e:	bf18      	it	ne
 801e620:	2200      	movne	r2, #0
 801e622:	3301      	adds	r3, #1
 801e624:	b292      	uxth	r2, r2
 801e626:	930d      	str	r3, [sp, #52]	; 0x34
 801e628:	e70d      	b.n	801e446 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x106>
 801e62a:	1bd1      	subs	r1, r2, r7
 801e62c:	9708      	str	r7, [sp, #32]
 801e62e:	b28b      	uxth	r3, r1
 801e630:	9301      	str	r3, [sp, #4]
 801e632:	462b      	mov	r3, r5
 801e634:	e7ca      	b.n	801e5cc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x28c>
 801e636:	bf00      	nop
 801e638:	20027ca8 	.word	0x20027ca8
 801e63c:	20027ca2 	.word	0x20027ca2
 801e640:	fffff7fb 	.word	0xfffff7fb
 801e644:	b2b6      	uxth	r6, r6
 801e646:	900b      	str	r0, [sp, #44]	; 0x2c
 801e648:	45b4      	cmp	ip, r6
 801e64a:	d0cb      	beq.n	801e5e4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a4>
 801e64c:	f10c 0101 	add.w	r1, ip, #1
 801e650:	44a4      	add	ip, r4
 801e652:	9117      	str	r1, [sp, #92]	; 0x5c
 801e654:	f89c 5804 	ldrb.w	r5, [ip, #2052]	; 0x804
 801e658:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e65a:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801e65e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e660:	ea4f 2825 	mov.w	r8, r5, asr #8
 801e664:	f8b1 c000 	ldrh.w	ip, [r1]
 801e668:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e66a:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801e66e:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 801e672:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801e676:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801e67a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e67e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801e682:	fb1e fe01 	smulbb	lr, lr, r1
 801e686:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801e688:	fa5f fc8c 	uxtb.w	ip, ip
 801e68c:	fb08 e801 	mla	r8, r8, r1, lr
 801e690:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 801e694:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e696:	00ed      	lsls	r5, r5, #3
 801e698:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801e69c:	fa1f f888 	uxth.w	r8, r8
 801e6a0:	fb19 f901 	smulbb	r9, r9, r1
 801e6a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801e6a6:	b2ed      	uxtb	r5, r5
 801e6a8:	fb0e 9e01 	mla	lr, lr, r1, r9
 801e6ac:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e6ae:	fb1c fc01 	smulbb	ip, ip, r1
 801e6b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801e6b4:	fa1f fe8e 	uxth.w	lr, lr
 801e6b8:	fb05 c501 	mla	r5, r5, r1, ip
 801e6bc:	f108 0c01 	add.w	ip, r8, #1
 801e6c0:	f10e 0901 	add.w	r9, lr, #1
 801e6c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e6c6:	b2ad      	uxth	r5, r5
 801e6c8:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801e6cc:	f105 0c01 	add.w	ip, r5, #1
 801e6d0:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 801e6d4:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801e6d8:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801e6dc:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e6e0:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801e6e4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e6e8:	ea4c 0808 	orr.w	r8, ip, r8
 801e6ec:	f8bd c05c 	ldrh.w	ip, [sp, #92]	; 0x5c
 801e6f0:	ea48 0809 	orr.w	r8, r8, r9
 801e6f4:	f821 8b02 	strh.w	r8, [r1], #2
 801e6f8:	910b      	str	r1, [sp, #44]	; 0x2c
 801e6fa:	e7a5      	b.n	801e648 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x308>
 801e6fc:	f10c 0801 	add.w	r8, ip, #1
 801e700:	44a4      	add	ip, r4
 801e702:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e704:	f89c 5804 	ldrb.w	r5, [ip, #2052]	; 0x804
 801e708:	fa1f fc88 	uxth.w	ip, r8
 801e70c:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801e710:	f82e 5f02 	strh.w	r5, [lr, #2]!
 801e714:	e763      	b.n	801e5de <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29e>
 801e716:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e71a:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801e71e:	1aad      	subs	r5, r5, r2
 801e720:	b2ad      	uxth	r5, r5
 801e722:	2d00      	cmp	r5, #0
 801e724:	bf18      	it	ne
 801e726:	2200      	movne	r2, #0
 801e728:	9201      	str	r2, [sp, #4]
 801e72a:	e744      	b.n	801e5b6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x276>
 801e72c:	4b03      	ldr	r3, [pc, #12]	; (801e73c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3fc>)
 801e72e:	6818      	ldr	r0, [r3, #0]
 801e730:	6803      	ldr	r3, [r0, #0]
 801e732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e734:	4798      	blx	r3
 801e736:	b01f      	add	sp, #124	; 0x7c
 801e738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e73c:	20027ca8 	.word	0x20027ca8

0801e740 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801e740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e744:	b08f      	sub	sp, #60	; 0x3c
 801e746:	461c      	mov	r4, r3
 801e748:	460f      	mov	r7, r1
 801e74a:	9203      	str	r2, [sp, #12]
 801e74c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e750:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e752:	9202      	str	r2, [sp, #8]
 801e754:	2a00      	cmp	r2, #0
 801e756:	f000 8128 	beq.w	801e9aa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801e75a:	6820      	ldr	r0, [r4, #0]
 801e75c:	aa0a      	add	r2, sp, #40	; 0x28
 801e75e:	6861      	ldr	r1, [r4, #4]
 801e760:	c203      	stmia	r2!, {r0, r1}
 801e762:	6818      	ldr	r0, [r3, #0]
 801e764:	aa0c      	add	r2, sp, #48	; 0x30
 801e766:	6859      	ldr	r1, [r3, #4]
 801e768:	c203      	stmia	r2!, {r0, r1}
 801e76a:	a80a      	add	r0, sp, #40	; 0x28
 801e76c:	f7f9 fa36 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e770:	4621      	mov	r1, r4
 801e772:	a80c      	add	r0, sp, #48	; 0x30
 801e774:	f7f9 fa76 	bl	8017c64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e778:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801e77c:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 801e780:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801e784:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801e788:	bfdb      	ittet	le
 801e78a:	b2b3      	uxthle	r3, r6
 801e78c:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801e790:	2301      	movgt	r3, #1
 801e792:	fb92 f3f3 	sdivle	r3, r2, r3
 801e796:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801e79a:	441d      	add	r5, r3
 801e79c:	fb92 f1f3 	sdiv	r1, r2, r3
 801e7a0:	fa1f fc81 	uxth.w	ip, r1
 801e7a4:	3d01      	subs	r5, #1
 801e7a6:	fb0c 2413 	mls	r4, ip, r3, r2
 801e7aa:	4661      	mov	r1, ip
 801e7ac:	fb14 f406 	smulbb	r4, r4, r6
 801e7b0:	4404      	add	r4, r0
 801e7b2:	fb95 f5f3 	sdiv	r5, r5, r3
 801e7b6:	b2a4      	uxth	r4, r4
 801e7b8:	b121      	cbz	r1, 801e7c4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x84>
 801e7ba:	9b03      	ldr	r3, [sp, #12]
 801e7bc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801e7c0:	ba1b      	rev	r3, r3
 801e7c2:	441f      	add	r7, r3
 801e7c4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801e7c8:	b2ad      	uxth	r5, r5
 801e7ca:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801e7ce:	4418      	add	r0, r3
 801e7d0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801e7d4:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801e7d8:	00ad      	lsls	r5, r5, #2
 801e7da:	441a      	add	r2, r3
 801e7dc:	4b74      	ldr	r3, [pc, #464]	; (801e9b0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801e7de:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 801e7e2:	6818      	ldr	r0, [r3, #0]
 801e7e4:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801e7e8:	6803      	ldr	r3, [r0, #0]
 801e7ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e7ec:	4798      	blx	r3
 801e7ee:	4a71      	ldr	r2, [pc, #452]	; (801e9b4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 801e7f0:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 801e7f4:	2c00      	cmp	r4, #0
 801e7f6:	8813      	ldrh	r3, [r2, #0]
 801e7f8:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801e7fc:	bf0c      	ite	eq
 801e7fe:	46c8      	moveq	r8, r9
 801e800:	f04f 0800 	movne.w	r8, #0
 801e804:	9209      	str	r2, [sp, #36]	; 0x24
 801e806:	fb03 c101 	mla	r1, r3, r1, ip
 801e80a:	4373      	muls	r3, r6
 801e80c:	fa1f f888 	uxth.w	r8, r8
 801e810:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801e814:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e818:	9304      	str	r3, [sp, #16]
 801e81a:	1d2b      	adds	r3, r5, #4
 801e81c:	9305      	str	r3, [sp, #20]
 801e81e:	2300      	movs	r3, #0
 801e820:	9301      	str	r3, [sp, #4]
 801e822:	9a04      	ldr	r2, [sp, #16]
 801e824:	4282      	cmp	r2, r0
 801e826:	f240 80bb 	bls.w	801e9a0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801e82a:	b95b      	cbnz	r3, 801e844 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x104>
 801e82c:	783a      	ldrb	r2, [r7, #0]
 801e82e:	0993      	lsrs	r3, r2, #6
 801e830:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801e834:	9201      	str	r2, [sp, #4]
 801e836:	1e5a      	subs	r2, r3, #1
 801e838:	2a02      	cmp	r2, #2
 801e83a:	bf8d      	iteet	hi
 801e83c:	787b      	ldrbhi	r3, [r7, #1]
 801e83e:	3701      	addls	r7, #1
 801e840:	b29b      	uxthls	r3, r3
 801e842:	3702      	addhi	r7, #2
 801e844:	b184      	cbz	r4, 801e868 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x128>
 801e846:	429c      	cmp	r4, r3
 801e848:	bf91      	iteee	ls
 801e84a:	1b1c      	subls	r4, r3, r4
 801e84c:	1ae4      	subhi	r4, r4, r3
 801e84e:	46c4      	movhi	ip, r8
 801e850:	f04f 0a00 	movhi.w	sl, #0
 801e854:	bf9b      	ittet	ls
 801e856:	fa1f fa84 	uxthls.w	sl, r4
 801e85a:	2400      	movls	r4, #0
 801e85c:	b2a4      	uxthhi	r4, r4
 801e85e:	fa1f fc89 	uxthls.w	ip, r9
 801e862:	4653      	mov	r3, sl
 801e864:	46e0      	mov	r8, ip
 801e866:	e7dc      	b.n	801e822 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe2>
 801e868:	2204      	movs	r2, #4
 801e86a:	9905      	ldr	r1, [sp, #20]
 801e86c:	4543      	cmp	r3, r8
 801e86e:	4615      	mov	r5, r2
 801e870:	9a01      	ldr	r2, [sp, #4]
 801e872:	bf24      	itt	cs
 801e874:	eba3 0a08 	subcs.w	sl, r3, r8
 801e878:	46c6      	movcs	lr, r8
 801e87a:	fb15 1202 	smlabb	r2, r5, r2, r1
 801e87e:	9903      	ldr	r1, [sp, #12]
 801e880:	bf3c      	itt	cc
 801e882:	eba8 0c03 	subcc.w	ip, r8, r3
 801e886:	469e      	movcc	lr, r3
 801e888:	588a      	ldr	r2, [r1, r2]
 801e88a:	bf26      	itte	cs
 801e88c:	fa1f fa8a 	uxthcs.w	sl, sl
 801e890:	46a4      	movcs	ip, r4
 801e892:	fa1f fc8c 	uxthcc.w	ip, ip
 801e896:	ea4f 6112 	mov.w	r1, r2, lsr #24
 801e89a:	bf38      	it	cc
 801e89c:	46a2      	movcc	sl, r4
 801e89e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801e8a2:	2900      	cmp	r1, #0
 801e8a4:	d066      	beq.n	801e974 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x234>
 801e8a6:	29ff      	cmp	r1, #255	; 0xff
 801e8a8:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801e8ac:	d114      	bne.n	801e8d8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801e8ae:	9d02      	ldr	r5, [sp, #8]
 801e8b0:	2dff      	cmp	r5, #255	; 0xff
 801e8b2:	d111      	bne.n	801e8d8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801e8b4:	0951      	lsrs	r1, r2, #5
 801e8b6:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801e8ba:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e8be:	4486      	add	lr, r0
 801e8c0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e8c4:	f026 0607 	bic.w	r6, r6, #7
 801e8c8:	430e      	orrs	r6, r1
 801e8ca:	4316      	orrs	r6, r2
 801e8cc:	b2b6      	uxth	r6, r6
 801e8ce:	4586      	cmp	lr, r0
 801e8d0:	d051      	beq.n	801e976 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801e8d2:	f820 6b02 	strh.w	r6, [r0], #2
 801e8d6:	e7fa      	b.n	801e8ce <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801e8d8:	9d02      	ldr	r5, [sp, #8]
 801e8da:	b2f6      	uxtb	r6, r6
 801e8dc:	4486      	add	lr, r0
 801e8de:	4369      	muls	r1, r5
 801e8e0:	1c4d      	adds	r5, r1, #1
 801e8e2:	eb05 2521 	add.w	r5, r5, r1, asr #8
 801e8e6:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801e8ea:	b2d2      	uxtb	r2, r2
 801e8ec:	122d      	asrs	r5, r5, #8
 801e8ee:	ea6f 0b05 	mvn.w	fp, r5
 801e8f2:	b2ad      	uxth	r5, r5
 801e8f4:	fb11 f105 	smulbb	r1, r1, r5
 801e8f8:	fa5f fb8b 	uxtb.w	fp, fp
 801e8fc:	fb16 f605 	smulbb	r6, r6, r5
 801e900:	fb12 f205 	smulbb	r2, r2, r5
 801e904:	b289      	uxth	r1, r1
 801e906:	b2b6      	uxth	r6, r6
 801e908:	b292      	uxth	r2, r2
 801e90a:	9106      	str	r1, [sp, #24]
 801e90c:	9607      	str	r6, [sp, #28]
 801e90e:	9208      	str	r2, [sp, #32]
 801e910:	4586      	cmp	lr, r0
 801e912:	d030      	beq.n	801e976 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801e914:	8802      	ldrh	r2, [r0, #0]
 801e916:	9906      	ldr	r1, [sp, #24]
 801e918:	1216      	asrs	r6, r2, #8
 801e91a:	10d5      	asrs	r5, r2, #3
 801e91c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e920:	00d2      	lsls	r2, r2, #3
 801e922:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e926:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801e92a:	b2d2      	uxtb	r2, r2
 801e92c:	fb06 160b 	mla	r6, r6, fp, r1
 801e930:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801e934:	9907      	ldr	r1, [sp, #28]
 801e936:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801e93a:	b2b6      	uxth	r6, r6
 801e93c:	fb05 150b 	mla	r5, r5, fp, r1
 801e940:	9908      	ldr	r1, [sp, #32]
 801e942:	fb02 120b 	mla	r2, r2, fp, r1
 801e946:	1c71      	adds	r1, r6, #1
 801e948:	b2ad      	uxth	r5, r5
 801e94a:	b292      	uxth	r2, r2
 801e94c:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 801e950:	1c51      	adds	r1, r2, #1
 801e952:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801e956:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801e95a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e95e:	4316      	orrs	r6, r2
 801e960:	1c6a      	adds	r2, r5, #1
 801e962:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801e966:	096d      	lsrs	r5, r5, #5
 801e968:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e96c:	432e      	orrs	r6, r5
 801e96e:	f820 6b02 	strh.w	r6, [r0], #2
 801e972:	e7cd      	b.n	801e910 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d0>
 801e974:	4470      	add	r0, lr
 801e976:	4543      	cmp	r3, r8
 801e978:	f4ff af73 	bcc.w	801e862 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 801e97c:	fa1f fc89 	uxth.w	ip, r9
 801e980:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801e984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e986:	eba4 040c 	sub.w	r4, r4, ip
 801e98a:	881b      	ldrh	r3, [r3, #0]
 801e98c:	b2a4      	uxth	r4, r4
 801e98e:	eba3 0309 	sub.w	r3, r3, r9
 801e992:	2c00      	cmp	r4, #0
 801e994:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e998:	bf18      	it	ne
 801e99a:	f04f 0c00 	movne.w	ip, #0
 801e99e:	e760      	b.n	801e862 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 801e9a0:	4b03      	ldr	r3, [pc, #12]	; (801e9b0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801e9a2:	6818      	ldr	r0, [r3, #0]
 801e9a4:	6803      	ldr	r3, [r0, #0]
 801e9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e9a8:	4798      	blx	r3
 801e9aa:	b00f      	add	sp, #60	; 0x3c
 801e9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9b0:	20027ca8 	.word	0x20027ca8
 801e9b4:	20027ca2 	.word	0x20027ca2

0801e9b8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801e9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9bc:	b093      	sub	sp, #76	; 0x4c
 801e9be:	461c      	mov	r4, r3
 801e9c0:	9205      	str	r2, [sp, #20]
 801e9c2:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 801e9c6:	9101      	str	r1, [sp, #4]
 801e9c8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e9ca:	9202      	str	r2, [sp, #8]
 801e9cc:	2a00      	cmp	r2, #0
 801e9ce:	f000 812e 	beq.w	801ec2e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 801e9d2:	6820      	ldr	r0, [r4, #0]
 801e9d4:	aa0e      	add	r2, sp, #56	; 0x38
 801e9d6:	6861      	ldr	r1, [r4, #4]
 801e9d8:	c203      	stmia	r2!, {r0, r1}
 801e9da:	6818      	ldr	r0, [r3, #0]
 801e9dc:	aa10      	add	r2, sp, #64	; 0x40
 801e9de:	6859      	ldr	r1, [r3, #4]
 801e9e0:	c203      	stmia	r2!, {r0, r1}
 801e9e2:	a80e      	add	r0, sp, #56	; 0x38
 801e9e4:	f7f9 f8fa 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e9e8:	4621      	mov	r1, r4
 801e9ea:	a810      	add	r0, sp, #64	; 0x40
 801e9ec:	f7f9 f93a 	bl	8017c64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e9f0:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801e9f4:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801e9f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801e9fc:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801ea00:	bfdb      	ittet	le
 801ea02:	b2b3      	uxthle	r3, r6
 801ea04:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801ea08:	2301      	movgt	r3, #1
 801ea0a:	fb92 f3f3 	sdivle	r3, r2, r3
 801ea0e:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801ea12:	441d      	add	r5, r3
 801ea14:	fb92 f1f3 	sdiv	r1, r2, r3
 801ea18:	fa1f fc81 	uxth.w	ip, r1
 801ea1c:	3d01      	subs	r5, #1
 801ea1e:	fb0c 2413 	mls	r4, ip, r3, r2
 801ea22:	4661      	mov	r1, ip
 801ea24:	fb14 f406 	smulbb	r4, r4, r6
 801ea28:	4404      	add	r4, r0
 801ea2a:	fb95 f5f3 	sdiv	r5, r5, r3
 801ea2e:	b2a4      	uxth	r4, r4
 801ea30:	b131      	cbz	r1, 801ea40 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x88>
 801ea32:	9b05      	ldr	r3, [sp, #20]
 801ea34:	9901      	ldr	r1, [sp, #4]
 801ea36:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801ea3a:	ba1b      	rev	r3, r3
 801ea3c:	4419      	add	r1, r3
 801ea3e:	9101      	str	r1, [sp, #4]
 801ea40:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801ea44:	b2ad      	uxth	r5, r5
 801ea46:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801ea4a:	4418      	add	r0, r3
 801ea4c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801ea50:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	; 0x46
 801ea54:	00ad      	lsls	r5, r5, #2
 801ea56:	441a      	add	r2, r3
 801ea58:	4b76      	ldr	r3, [pc, #472]	; (801ec34 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 801ea5a:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 801ea5e:	6818      	ldr	r0, [r3, #0]
 801ea60:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801ea64:	6803      	ldr	r3, [r0, #0]
 801ea66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ea68:	4798      	blx	r3
 801ea6a:	4973      	ldr	r1, [pc, #460]	; (801ec38 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 801ea6c:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 801ea70:	2c00      	cmp	r4, #0
 801ea72:	880b      	ldrh	r3, [r1, #0]
 801ea74:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801ea78:	910d      	str	r1, [sp, #52]	; 0x34
 801ea7a:	fb03 c202 	mla	r2, r3, r2, ip
 801ea7e:	bf08      	it	eq
 801ea80:	46dc      	moveq	ip, fp
 801ea82:	fb03 f306 	mul.w	r3, r3, r6
 801ea86:	bf18      	it	ne
 801ea88:	f04f 0c00 	movne.w	ip, #0
 801ea8c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ea90:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801ea94:	fa1f fc8c 	uxth.w	ip, ip
 801ea98:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ea9c:	9106      	str	r1, [sp, #24]
 801ea9e:	9308      	str	r3, [sp, #32]
 801eaa0:	1d2b      	adds	r3, r5, #4
 801eaa2:	9309      	str	r3, [sp, #36]	; 0x24
 801eaa4:	9b02      	ldr	r3, [sp, #8]
 801eaa6:	43da      	mvns	r2, r3
 801eaa8:	2300      	movs	r3, #0
 801eaaa:	b2d2      	uxtb	r2, r2
 801eaac:	9303      	str	r3, [sp, #12]
 801eaae:	9207      	str	r2, [sp, #28]
 801eab0:	9a08      	ldr	r2, [sp, #32]
 801eab2:	4282      	cmp	r2, r0
 801eab4:	f240 80b6 	bls.w	801ec24 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26c>
 801eab8:	b963      	cbnz	r3, 801ead4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 801eaba:	9b01      	ldr	r3, [sp, #4]
 801eabc:	781a      	ldrb	r2, [r3, #0]
 801eabe:	0993      	lsrs	r3, r2, #6
 801eac0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801eac4:	9203      	str	r2, [sp, #12]
 801eac6:	1e5a      	subs	r2, r3, #1
 801eac8:	2a02      	cmp	r2, #2
 801eaca:	d815      	bhi.n	801eaf8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x140>
 801eacc:	9a01      	ldr	r2, [sp, #4]
 801eace:	b29b      	uxth	r3, r3
 801ead0:	3201      	adds	r2, #1
 801ead2:	9201      	str	r2, [sp, #4]
 801ead4:	b1b4      	cbz	r4, 801eb04 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14c>
 801ead6:	429c      	cmp	r4, r3
 801ead8:	bf91      	iteee	ls
 801eada:	1b1c      	subls	r4, r3, r4
 801eadc:	1ae4      	subhi	r4, r4, r3
 801eade:	4666      	movhi	r6, ip
 801eae0:	f04f 0800 	movhi.w	r8, #0
 801eae4:	bf9b      	ittet	ls
 801eae6:	fa1f f884 	uxthls.w	r8, r4
 801eaea:	2400      	movls	r4, #0
 801eaec:	b2a4      	uxthhi	r4, r4
 801eaee:	fa1f f68b 	uxthls.w	r6, fp
 801eaf2:	4643      	mov	r3, r8
 801eaf4:	46b4      	mov	ip, r6
 801eaf6:	e7db      	b.n	801eab0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf8>
 801eaf8:	9a01      	ldr	r2, [sp, #4]
 801eafa:	9b01      	ldr	r3, [sp, #4]
 801eafc:	3202      	adds	r2, #2
 801eafe:	785b      	ldrb	r3, [r3, #1]
 801eb00:	9201      	str	r2, [sp, #4]
 801eb02:	e7e7      	b.n	801ead4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 801eb04:	2203      	movs	r2, #3
 801eb06:	9909      	ldr	r1, [sp, #36]	; 0x24
 801eb08:	4563      	cmp	r3, ip
 801eb0a:	4615      	mov	r5, r2
 801eb0c:	9a03      	ldr	r2, [sp, #12]
 801eb0e:	bf2c      	ite	cs
 801eb10:	eba3 080c 	subcs.w	r8, r3, ip
 801eb14:	ebac 0603 	subcc.w	r6, ip, r3
 801eb18:	fb15 1202 	smlabb	r2, r5, r2, r1
 801eb1c:	9905      	ldr	r1, [sp, #20]
 801eb1e:	bf24      	itt	cs
 801eb20:	fa1f f888 	uxthcs.w	r8, r8
 801eb24:	46e1      	movcs	r9, ip
 801eb26:	eb01 0502 	add.w	r5, r1, r2
 801eb2a:	9902      	ldr	r1, [sp, #8]
 801eb2c:	bf2f      	iteee	cs
 801eb2e:	4626      	movcs	r6, r4
 801eb30:	b2b6      	uxthcc	r6, r6
 801eb32:	4699      	movcc	r9, r3
 801eb34:	46a0      	movcc	r8, r4
 801eb36:	29ff      	cmp	r1, #255	; 0xff
 801eb38:	d04a      	beq.n	801ebd0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x218>
 801eb3a:	9f06      	ldr	r7, [sp, #24]
 801eb3c:	46ca      	mov	sl, r9
 801eb3e:	78a9      	ldrb	r1, [r5, #2]
 801eb40:	9004      	str	r0, [sp, #16]
 801eb42:	4379      	muls	r1, r7
 801eb44:	910a      	str	r1, [sp, #40]	; 0x28
 801eb46:	7869      	ldrb	r1, [r5, #1]
 801eb48:	4379      	muls	r1, r7
 801eb4a:	910b      	str	r1, [sp, #44]	; 0x2c
 801eb4c:	9905      	ldr	r1, [sp, #20]
 801eb4e:	5c8a      	ldrb	r2, [r1, r2]
 801eb50:	437a      	muls	r2, r7
 801eb52:	920c      	str	r2, [sp, #48]	; 0x30
 801eb54:	f1ba 0f00 	cmp.w	sl, #0
 801eb58:	d03d      	beq.n	801ebd6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21e>
 801eb5a:	9a04      	ldr	r2, [sp, #16]
 801eb5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801eb60:	9f07      	ldr	r7, [sp, #28]
 801eb62:	8812      	ldrh	r2, [r2, #0]
 801eb64:	fa1f fa8a 	uxth.w	sl, sl
 801eb68:	46be      	mov	lr, r7
 801eb6a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801eb6c:	1215      	asrs	r5, r2, #8
 801eb6e:	10d1      	asrs	r1, r2, #3
 801eb70:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801eb74:	00d2      	lsls	r2, r2, #3
 801eb76:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801eb7a:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801eb7e:	b2d2      	uxtb	r2, r2
 801eb80:	fb05 750e 	mla	r5, r5, lr, r7
 801eb84:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801eb88:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801eb8a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801eb8e:	b2ad      	uxth	r5, r5
 801eb90:	fb01 710e 	mla	r1, r1, lr, r7
 801eb94:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801eb96:	fb02 720e 	mla	r2, r2, lr, r7
 801eb9a:	f105 0e01 	add.w	lr, r5, #1
 801eb9e:	b289      	uxth	r1, r1
 801eba0:	b292      	uxth	r2, r2
 801eba2:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801eba6:	f102 0e01 	add.w	lr, r2, #1
 801ebaa:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801ebae:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801ebb2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ebb6:	4315      	orrs	r5, r2
 801ebb8:	1c4a      	adds	r2, r1, #1
 801ebba:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801ebbe:	9a04      	ldr	r2, [sp, #16]
 801ebc0:	0949      	lsrs	r1, r1, #5
 801ebc2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ebc6:	430d      	orrs	r5, r1
 801ebc8:	f822 5b02 	strh.w	r5, [r2], #2
 801ebcc:	9204      	str	r2, [sp, #16]
 801ebce:	e7c1      	b.n	801eb54 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801ebd0:	4649      	mov	r1, r9
 801ebd2:	4686      	mov	lr, r0
 801ebd4:	b999      	cbnz	r1, 801ebfe <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x246>
 801ebd6:	4563      	cmp	r3, ip
 801ebd8:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 801ebdc:	d389      	bcc.n	801eaf2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 801ebde:	fa1f f68b 	uxth.w	r6, fp
 801ebe2:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
 801ebe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ebe8:	1ba4      	subs	r4, r4, r6
 801ebea:	881b      	ldrh	r3, [r3, #0]
 801ebec:	b2a4      	uxth	r4, r4
 801ebee:	eba3 030b 	sub.w	r3, r3, fp
 801ebf2:	2c00      	cmp	r4, #0
 801ebf4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ebf8:	bf18      	it	ne
 801ebfa:	2600      	movne	r6, #0
 801ebfc:	e779      	b.n	801eaf2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 801ebfe:	78aa      	ldrb	r2, [r5, #2]
 801ec00:	3901      	subs	r1, #1
 801ec02:	4f0e      	ldr	r7, [pc, #56]	; (801ec3c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x284>)
 801ec04:	b289      	uxth	r1, r1
 801ec06:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 801ec0a:	786a      	ldrb	r2, [r5, #1]
 801ec0c:	00d2      	lsls	r2, r2, #3
 801ec0e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ec12:	ea4a 0202 	orr.w	r2, sl, r2
 801ec16:	f895 a000 	ldrb.w	sl, [r5]
 801ec1a:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 801ec1e:	f82e 2b02 	strh.w	r2, [lr], #2
 801ec22:	e7d7      	b.n	801ebd4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21c>
 801ec24:	4b03      	ldr	r3, [pc, #12]	; (801ec34 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 801ec26:	6818      	ldr	r0, [r3, #0]
 801ec28:	6803      	ldr	r3, [r0, #0]
 801ec2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ec2c:	4798      	blx	r3
 801ec2e:	b013      	add	sp, #76	; 0x4c
 801ec30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec34:	20027ca8 	.word	0x20027ca8
 801ec38:	20027ca2 	.word	0x20027ca2
 801ec3c:	fffff800 	.word	0xfffff800

0801ec40 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801ec40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec44:	b09d      	sub	sp, #116	; 0x74
 801ec46:	461c      	mov	r4, r3
 801ec48:	4683      	mov	fp, r0
 801ec4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ec4c:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
 801ec50:	f89d 209c 	ldrb.w	r2, [sp, #156]	; 0x9c
 801ec54:	920e      	str	r2, [sp, #56]	; 0x38
 801ec56:	2a00      	cmp	r2, #0
 801ec58:	f000 81e4 	beq.w	801f024 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>
 801ec5c:	6820      	ldr	r0, [r4, #0]
 801ec5e:	aa18      	add	r2, sp, #96	; 0x60
 801ec60:	6861      	ldr	r1, [r4, #4]
 801ec62:	c203      	stmia	r2!, {r0, r1}
 801ec64:	6818      	ldr	r0, [r3, #0]
 801ec66:	aa1a      	add	r2, sp, #104	; 0x68
 801ec68:	6859      	ldr	r1, [r3, #4]
 801ec6a:	c203      	stmia	r2!, {r0, r1}
 801ec6c:	a818      	add	r0, sp, #96	; 0x60
 801ec6e:	f7f8 ffb5 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ec72:	4621      	mov	r1, r4
 801ec74:	a81a      	add	r0, sp, #104	; 0x68
 801ec76:	f7f8 fff5 	bl	8017c64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ec7a:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 801ec7e:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	; 0x66
 801ec82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ec86:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 801ec8a:	bfdb      	ittet	le
 801ec8c:	b29a      	uxthle	r2, r3
 801ec8e:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801ec92:	2201      	movgt	r2, #1
 801ec94:	fb91 f2f2 	sdivle	r2, r1, r2
 801ec98:	9202      	str	r2, [sp, #8]
 801ec9a:	9802      	ldr	r0, [sp, #8]
 801ec9c:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 801eca0:	9902      	ldr	r1, [sp, #8]
 801eca2:	fb92 f0f0 	sdiv	r0, r2, r0
 801eca6:	b280      	uxth	r0, r0
 801eca8:	440c      	add	r4, r1
 801ecaa:	900f      	str	r0, [sp, #60]	; 0x3c
 801ecac:	3c01      	subs	r4, #1
 801ecae:	9802      	ldr	r0, [sp, #8]
 801ecb0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801ecb2:	fb05 2510 	mls	r5, r5, r0, r2
 801ecb6:	fb94 f4f1 	sdiv	r4, r4, r1
 801ecba:	fb15 f503 	smulbb	r5, r5, r3
 801ecbe:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 801ecc2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801ecc6:	3401      	adds	r4, #1
 801ecc8:	440d      	add	r5, r1
 801ecca:	4419      	add	r1, r3
 801eccc:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 801ecd0:	b2a4      	uxth	r4, r4
 801ecd2:	441a      	add	r2, r3
 801ecd4:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801ecd8:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
 801ecdc:	00a4      	lsls	r4, r4, #2
 801ecde:	9306      	str	r3, [sp, #24]
 801ece0:	b2ad      	uxth	r5, r5
 801ece2:	4bb3      	ldr	r3, [pc, #716]	; (801efb0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 801ece4:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 801ece8:	6818      	ldr	r0, [r3, #0]
 801ecea:	6803      	ldr	r3, [r0, #0]
 801ecec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ecee:	4798      	blx	r3
 801ecf0:	4bb0      	ldr	r3, [pc, #704]	; (801efb4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>)
 801ecf2:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	; 0x6a
 801ecf6:	2d00      	cmp	r5, #0
 801ecf8:	881a      	ldrh	r2, [r3, #0]
 801ecfa:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	; 0x68
 801ecfe:	fb02 f606 	mul.w	r6, r2, r6
 801ed02:	fb02 7101 	mla	r1, r2, r1, r7
 801ed06:	9316      	str	r3, [sp, #88]	; 0x58
 801ed08:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 801ed0c:	4baa      	ldr	r3, [pc, #680]	; (801efb8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x378>)
 801ed0e:	bf18      	it	ne
 801ed10:	2100      	movne	r1, #0
 801ed12:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 801ed16:	eba3 030b 	sub.w	r3, r3, fp
 801ed1a:	920a      	str	r2, [sp, #40]	; 0x28
 801ed1c:	f104 0204 	add.w	r2, r4, #4
 801ed20:	9317      	str	r3, [sp, #92]	; 0x5c
 801ed22:	9213      	str	r2, [sp, #76]	; 0x4c
 801ed24:	9a06      	ldr	r2, [sp, #24]
 801ed26:	bf08      	it	eq
 801ed28:	4611      	moveq	r1, r2
 801ed2a:	2200      	movs	r2, #0
 801ed2c:	b289      	uxth	r1, r1
 801ed2e:	920d      	str	r2, [sp, #52]	; 0x34
 801ed30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ed32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ed34:	fa12 f383 	uxtah	r3, r2, r3
 801ed38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ed3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ed3e:	3304      	adds	r3, #4
 801ed40:	9308      	str	r3, [sp, #32]
 801ed42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ed44:	4543      	cmp	r3, r8
 801ed46:	f240 8168 	bls.w	801f01a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3da>
 801ed4a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801ed4e:	f04f 0e01 	mov.w	lr, #1
 801ed52:	9a02      	ldr	r2, [sp, #8]
 801ed54:	9808      	ldr	r0, [sp, #32]
 801ed56:	fbb5 f3f3 	udiv	r3, r5, r3
 801ed5a:	1ad3      	subs	r3, r2, r3
 801ed5c:	7800      	ldrb	r0, [r0, #0]
 801ed5e:	b29b      	uxth	r3, r3
 801ed60:	9010      	str	r0, [sp, #64]	; 0x40
 801ed62:	3001      	adds	r0, #1
 801ed64:	9314      	str	r3, [sp, #80]	; 0x50
 801ed66:	9b08      	ldr	r3, [sp, #32]
 801ed68:	9007      	str	r0, [sp, #28]
 801ed6a:	785a      	ldrb	r2, [r3, #1]
 801ed6c:	789b      	ldrb	r3, [r3, #2]
 801ed6e:	021b      	lsls	r3, r3, #8
 801ed70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ed74:	9a08      	ldr	r2, [sp, #32]
 801ed76:	78d2      	ldrb	r2, [r2, #3]
 801ed78:	4313      	orrs	r3, r2
 801ed7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ed7c:	441a      	add	r2, r3
 801ed7e:	1c50      	adds	r0, r2, #1
 801ed80:	7852      	ldrb	r2, [r2, #1]
 801ed82:	9005      	str	r0, [sp, #20]
 801ed84:	0212      	lsls	r2, r2, #8
 801ed86:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ed88:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 801ed8c:	5cc3      	ldrb	r3, [r0, r3]
 801ed8e:	431a      	orrs	r2, r3
 801ed90:	b293      	uxth	r3, r2
 801ed92:	f88b 2804 	strb.w	r2, [fp, #2052]	; 0x804
 801ed96:	930b      	str	r3, [sp, #44]	; 0x2c
 801ed98:	2300      	movs	r3, #0
 801ed9a:	9309      	str	r3, [sp, #36]	; 0x24
 801ed9c:	2301      	movs	r3, #1
 801ed9e:	9301      	str	r3, [sp, #4]
 801eda0:	9304      	str	r3, [sp, #16]
 801eda2:	2300      	movs	r3, #0
 801eda4:	9303      	str	r3, [sp, #12]
 801eda6:	2d00      	cmp	r5, #0
 801eda8:	d07d      	beq.n	801eea6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801edaa:	45ae      	cmp	lr, r5
 801edac:	d26c      	bcs.n	801ee88 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x248>
 801edae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801edb0:	eba5 050e 	sub.w	r5, r5, lr
 801edb4:	460c      	mov	r4, r1
 801edb6:	4543      	cmp	r3, r8
 801edb8:	b2ad      	uxth	r5, r5
 801edba:	d802      	bhi.n	801edc2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801edbc:	e071      	b.n	801eea2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x262>
 801edbe:	2b00      	cmp	r3, #0
 801edc0:	d15d      	bne.n	801ee7e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23e>
 801edc2:	9b05      	ldr	r3, [sp, #20]
 801edc4:	9a04      	ldr	r2, [sp, #16]
 801edc6:	785b      	ldrb	r3, [r3, #1]
 801edc8:	f1c2 0207 	rsb	r2, r2, #7
 801edcc:	9904      	ldr	r1, [sp, #16]
 801edce:	4093      	lsls	r3, r2
 801edd0:	005b      	lsls	r3, r3, #1
 801edd2:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801edd6:	9b05      	ldr	r3, [sp, #20]
 801edd8:	781b      	ldrb	r3, [r3, #0]
 801edda:	410b      	asrs	r3, r1
 801eddc:	3101      	adds	r1, #1
 801edde:	b2c9      	uxtb	r1, r1
 801ede0:	b2db      	uxtb	r3, r3
 801ede2:	2908      	cmp	r1, #8
 801ede4:	9104      	str	r1, [sp, #16]
 801ede6:	9905      	ldr	r1, [sp, #20]
 801ede8:	ea43 0302 	orr.w	r3, r3, r2
 801edec:	bf0c      	ite	eq
 801edee:	3102      	addeq	r1, #2
 801edf0:	3101      	addne	r1, #1
 801edf2:	b29a      	uxth	r2, r3
 801edf4:	bf05      	ittet	eq
 801edf6:	9105      	streq	r1, [sp, #20]
 801edf8:	2100      	moveq	r1, #0
 801edfa:	9105      	strne	r1, [sp, #20]
 801edfc:	9104      	streq	r1, [sp, #16]
 801edfe:	9910      	ldr	r1, [sp, #64]	; 0x40
 801ee00:	4291      	cmp	r1, r2
 801ee02:	d30a      	bcc.n	801ee1a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1da>
 801ee04:	f88b 3804 	strb.w	r3, [fp, #2052]	; 0x804
 801ee08:	2301      	movs	r3, #1
 801ee0a:	9907      	ldr	r1, [sp, #28]
 801ee0c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801ee10:	d30f      	bcc.n	801ee32 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801ee12:	2100      	movs	r1, #0
 801ee14:	9301      	str	r3, [sp, #4]
 801ee16:	9103      	str	r1, [sp, #12]
 801ee18:	e032      	b.n	801ee80 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 801ee1a:	9b07      	ldr	r3, [sp, #28]
 801ee1c:	429a      	cmp	r2, r3
 801ee1e:	d318      	bcc.n	801ee52 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x212>
 801ee20:	9b01      	ldr	r3, [sp, #4]
 801ee22:	f89b 1804 	ldrb.w	r1, [fp, #2052]	; 0x804
 801ee26:	445b      	add	r3, fp
 801ee28:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 801ee2c:	9b01      	ldr	r3, [sp, #4]
 801ee2e:	3301      	adds	r3, #1
 801ee30:	b29b      	uxth	r3, r3
 801ee32:	9907      	ldr	r1, [sp, #28]
 801ee34:	f89b 0804 	ldrb.w	r0, [fp, #2052]	; 0x804
 801ee38:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801ee3c:	7108      	strb	r0, [r1, #4]
 801ee3e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ee40:	80c8      	strh	r0, [r1, #6]
 801ee42:	9801      	ldr	r0, [sp, #4]
 801ee44:	3001      	adds	r0, #1
 801ee46:	7148      	strb	r0, [r1, #5]
 801ee48:	9907      	ldr	r1, [sp, #28]
 801ee4a:	3101      	adds	r1, #1
 801ee4c:	b289      	uxth	r1, r1
 801ee4e:	9107      	str	r1, [sp, #28]
 801ee50:	e7df      	b.n	801ee12 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801ee52:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 801ee56:	4611      	mov	r1, r2
 801ee58:	795b      	ldrb	r3, [r3, #5]
 801ee5a:	f603 0004 	addw	r0, r3, #2052	; 0x804
 801ee5e:	4458      	add	r0, fp
 801ee60:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801ee62:	4406      	add	r6, r0
 801ee64:	2e00      	cmp	r6, #0
 801ee66:	dd06      	ble.n	801ee76 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801ee68:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801ee6c:	790e      	ldrb	r6, [r1, #4]
 801ee6e:	f800 6d01 	strb.w	r6, [r0, #-1]!
 801ee72:	88c9      	ldrh	r1, [r1, #6]
 801ee74:	e7f4      	b.n	801ee60 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x220>
 801ee76:	f88b 1804 	strb.w	r1, [fp, #2052]	; 0x804
 801ee7a:	b29b      	uxth	r3, r3
 801ee7c:	e7c5      	b.n	801ee0a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 801ee7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ee80:	4621      	mov	r1, r4
 801ee82:	920b      	str	r2, [sp, #44]	; 0x2c
 801ee84:	469e      	mov	lr, r3
 801ee86:	e78e      	b.n	801eda6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x166>
 801ee88:	9a03      	ldr	r2, [sp, #12]
 801ee8a:	ebae 0305 	sub.w	r3, lr, r5
 801ee8e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801ee92:	442a      	add	r2, r5
 801ee94:	b29b      	uxth	r3, r3
 801ee96:	b292      	uxth	r2, r2
 801ee98:	9203      	str	r2, [sp, #12]
 801ee9a:	2500      	movs	r5, #0
 801ee9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ee9e:	4542      	cmp	r2, r8
 801eea0:	d88d      	bhi.n	801edbe <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17e>
 801eea2:	4621      	mov	r1, r4
 801eea4:	e74d      	b.n	801ed42 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x102>
 801eea6:	458e      	cmp	lr, r1
 801eea8:	f04f 0900 	mov.w	r9, #0
 801eeac:	bf2b      	itete	cs
 801eeae:	ebae 0301 	subcs.w	r3, lr, r1
 801eeb2:	eba1 040e 	subcc.w	r4, r1, lr
 801eeb6:	462c      	movcs	r4, r5
 801eeb8:	462b      	movcc	r3, r5
 801eeba:	bf27      	ittee	cs
 801eebc:	b29b      	uxthcs	r3, r3
 801eebe:	910c      	strcs	r1, [sp, #48]	; 0x30
 801eec0:	b2a4      	uxthcc	r4, r4
 801eec2:	f8cd e030 	strcc.w	lr, [sp, #48]	; 0x30
 801eec6:	9a03      	ldr	r2, [sp, #12]
 801eec8:	980c      	ldr	r0, [sp, #48]	; 0x30
 801eeca:	444a      	add	r2, r9
 801eecc:	4548      	cmp	r0, r9
 801eece:	b292      	uxth	r2, r2
 801eed0:	d074      	beq.n	801efbc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x37c>
 801eed2:	2004      	movs	r0, #4
 801eed4:	445a      	add	r2, fp
 801eed6:	4605      	mov	r5, r0
 801eed8:	f892 2804 	ldrb.w	r2, [r2, #2052]	; 0x804
 801eedc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801eede:	fb15 0202 	smlabb	r2, r5, r2, r0
 801eee2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801eee4:	5880      	ldr	r0, [r0, r2]
 801eee6:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 801eeea:	d014      	beq.n	801ef16 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 801eeec:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801eef0:	ea4f 2510 	mov.w	r5, r0, lsr #8
 801eef4:	d112      	bne.n	801ef1c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 801eef6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801eef8:	2aff      	cmp	r2, #255	; 0xff
 801eefa:	d10f      	bne.n	801ef1c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 801eefc:	0942      	lsrs	r2, r0, #5
 801eefe:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801ef02:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ef06:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ef0a:	f025 0507 	bic.w	r5, r5, #7
 801ef0e:	4315      	orrs	r5, r2
 801ef10:	4305      	orrs	r5, r0
 801ef12:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 801ef16:	f109 0901 	add.w	r9, r9, #1
 801ef1a:	e7d4      	b.n	801eec6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x286>
 801ef1c:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 801ef20:	b2ed      	uxtb	r5, r5
 801ef22:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801ef26:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ef2a:	f006 02fc 	and.w	r2, r6, #252	; 0xfc
 801ef2e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ef32:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801ef36:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ef3a:	9215      	str	r2, [sp, #84]	; 0x54
 801ef3c:	fa5f fc8c 	uxtb.w	ip, ip
 801ef40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ef42:	b2c0      	uxtb	r0, r0
 801ef44:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801ef48:	fb02 fa0a 	mul.w	sl, r2, sl
 801ef4c:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801ef50:	f10a 0201 	add.w	r2, sl, #1
 801ef54:	eb02 222a 	add.w	r2, r2, sl, asr #8
 801ef58:	1212      	asrs	r2, r2, #8
 801ef5a:	fa1f fa82 	uxth.w	sl, r2
 801ef5e:	43d2      	mvns	r2, r2
 801ef60:	fb16 f60a 	smulbb	r6, r6, sl
 801ef64:	b2d2      	uxtb	r2, r2
 801ef66:	fb10 f00a 	smulbb	r0, r0, sl
 801ef6a:	fb07 6702 	mla	r7, r7, r2, r6
 801ef6e:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801ef70:	fb0c 0002 	mla	r0, ip, r2, r0
 801ef74:	fb15 f50a 	smulbb	r5, r5, sl
 801ef78:	b2bf      	uxth	r7, r7
 801ef7a:	b280      	uxth	r0, r0
 801ef7c:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801ef80:	fb06 5602 	mla	r6, r6, r2, r5
 801ef84:	1c7a      	adds	r2, r7, #1
 801ef86:	1c45      	adds	r5, r0, #1
 801ef88:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ef8c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801ef90:	b2b6      	uxth	r6, r6
 801ef92:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ef96:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ef9a:	432f      	orrs	r7, r5
 801ef9c:	1c75      	adds	r5, r6, #1
 801ef9e:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801efa2:	096d      	lsrs	r5, r5, #5
 801efa4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801efa8:	432f      	orrs	r7, r5
 801efaa:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 801efae:	e7b2      	b.n	801ef16 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 801efb0:	20027ca8 	.word	0x20027ca8
 801efb4:	20027ca2 	.word	0x20027ca2
 801efb8:	fffff7fb 	.word	0xfffff7fb
 801efbc:	9203      	str	r2, [sp, #12]
 801efbe:	458e      	cmp	lr, r1
 801efc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801efc2:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801efc6:	f4ff af68 	bcc.w	801ee9a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 801efca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801efcc:	9906      	ldr	r1, [sp, #24]
 801efce:	8812      	ldrh	r2, [r2, #0]
 801efd0:	1a52      	subs	r2, r2, r1
 801efd2:	9914      	ldr	r1, [sp, #80]	; 0x50
 801efd4:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801efd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801efda:	3201      	adds	r2, #1
 801efdc:	428a      	cmp	r2, r1
 801efde:	9209      	str	r2, [sp, #36]	; 0x24
 801efe0:	d111      	bne.n	801f006 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c6>
 801efe2:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 801efe6:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801efea:	9b06      	ldr	r3, [sp, #24]
 801efec:	eba5 0509 	sub.w	r5, r5, r9
 801eff0:	b2ad      	uxth	r5, r5
 801eff2:	2d00      	cmp	r5, #0
 801eff4:	bf08      	it	eq
 801eff6:	4619      	moveq	r1, r3
 801eff8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801effa:	bf18      	it	ne
 801effc:	2100      	movne	r1, #0
 801effe:	3301      	adds	r3, #1
 801f000:	b289      	uxth	r1, r1
 801f002:	930d      	str	r3, [sp, #52]	; 0x34
 801f004:	e694      	b.n	801ed30 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf0>
 801f006:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801f00a:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801f00e:	1b2d      	subs	r5, r5, r4
 801f010:	b2ad      	uxth	r5, r5
 801f012:	2d00      	cmp	r5, #0
 801f014:	bf18      	it	ne
 801f016:	2400      	movne	r4, #0
 801f018:	e740      	b.n	801ee9c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25c>
 801f01a:	4b04      	ldr	r3, [pc, #16]	; (801f02c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ec>)
 801f01c:	6818      	ldr	r0, [r3, #0]
 801f01e:	6803      	ldr	r3, [r0, #0]
 801f020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f022:	4798      	blx	r3
 801f024:	b01d      	add	sp, #116	; 0x74
 801f026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f02a:	bf00      	nop
 801f02c:	20027ca8 	.word	0x20027ca8

0801f030 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801f030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f034:	b09f      	sub	sp, #124	; 0x7c
 801f036:	461d      	mov	r5, r3
 801f038:	4604      	mov	r4, r0
 801f03a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f03c:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
 801f040:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 801f044:	920a      	str	r2, [sp, #40]	; 0x28
 801f046:	2a00      	cmp	r2, #0
 801f048:	f000 81fe 	beq.w	801f448 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x418>
 801f04c:	6828      	ldr	r0, [r5, #0]
 801f04e:	aa1a      	add	r2, sp, #104	; 0x68
 801f050:	6869      	ldr	r1, [r5, #4]
 801f052:	c203      	stmia	r2!, {r0, r1}
 801f054:	6818      	ldr	r0, [r3, #0]
 801f056:	aa1c      	add	r2, sp, #112	; 0x70
 801f058:	6859      	ldr	r1, [r3, #4]
 801f05a:	c203      	stmia	r2!, {r0, r1}
 801f05c:	a81a      	add	r0, sp, #104	; 0x68
 801f05e:	f7f8 fdbd 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f062:	4629      	mov	r1, r5
 801f064:	a81c      	add	r0, sp, #112	; 0x70
 801f066:	f7f8 fdfd 	bl	8017c64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f06a:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801f06e:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 801f072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f076:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	; 0x76
 801f07a:	bfdb      	ittet	le
 801f07c:	b29a      	uxthle	r2, r3
 801f07e:	f44f 6180 	movle.w	r1, #1024	; 0x400
 801f082:	2201      	movgt	r2, #1
 801f084:	fb91 f2f2 	sdivle	r2, r1, r2
 801f088:	9201      	str	r2, [sp, #4]
 801f08a:	9801      	ldr	r0, [sp, #4]
 801f08c:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 801f090:	9901      	ldr	r1, [sp, #4]
 801f092:	fb92 f0f0 	sdiv	r0, r2, r0
 801f096:	b280      	uxth	r0, r0
 801f098:	440e      	add	r6, r1
 801f09a:	9010      	str	r0, [sp, #64]	; 0x40
 801f09c:	3e01      	subs	r6, #1
 801f09e:	9801      	ldr	r0, [sp, #4]
 801f0a0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801f0a2:	fb05 2510 	mls	r5, r5, r0, r2
 801f0a6:	fb96 f6f1 	sdiv	r6, r6, r1
 801f0aa:	fb15 f503 	smulbb	r5, r5, r3
 801f0ae:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 801f0b2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801f0b6:	3601      	adds	r6, #1
 801f0b8:	440d      	add	r5, r1
 801f0ba:	4419      	add	r1, r3
 801f0bc:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 801f0c0:	b2b6      	uxth	r6, r6
 801f0c2:	441a      	add	r2, r3
 801f0c4:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 801f0c8:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
 801f0cc:	b2ad      	uxth	r5, r5
 801f0ce:	9304      	str	r3, [sp, #16]
 801f0d0:	4b96      	ldr	r3, [pc, #600]	; (801f32c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801f0d2:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
 801f0d6:	6818      	ldr	r0, [r3, #0]
 801f0d8:	6803      	ldr	r3, [r0, #0]
 801f0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f0dc:	4798      	blx	r3
 801f0de:	4b94      	ldr	r3, [pc, #592]	; (801f330 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>)
 801f0e0:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
 801f0e4:	2d00      	cmp	r5, #0
 801f0e6:	881a      	ldrh	r2, [r3, #0]
 801f0e8:	f9bd c070 	ldrsh.w	ip, [sp, #112]	; 0x70
 801f0ec:	fb02 f707 	mul.w	r7, r2, r7
 801f0f0:	fb02 c101 	mla	r1, r2, r1, ip
 801f0f4:	9318      	str	r3, [sp, #96]	; 0x60
 801f0f6:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 801f0fa:	4b8e      	ldr	r3, [pc, #568]	; (801f334 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801f0fc:	bf18      	it	ne
 801f0fe:	2100      	movne	r1, #0
 801f100:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 801f104:	eba3 0304 	sub.w	r3, r3, r4
 801f108:	920b      	str	r2, [sp, #44]	; 0x2c
 801f10a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f10c:	9319      	str	r3, [sp, #100]	; 0x64
 801f10e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801f112:	f106 0204 	add.w	r2, r6, #4
 801f116:	9206      	str	r2, [sp, #24]
 801f118:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f11a:	ea6f 0202 	mvn.w	r2, r2
 801f11e:	b2d2      	uxtb	r2, r2
 801f120:	9215      	str	r2, [sp, #84]	; 0x54
 801f122:	9a04      	ldr	r2, [sp, #16]
 801f124:	bf08      	it	eq
 801f126:	4611      	moveq	r1, r2
 801f128:	2200      	movs	r2, #0
 801f12a:	b289      	uxth	r1, r1
 801f12c:	920d      	str	r2, [sp, #52]	; 0x34
 801f12e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f132:	fa12 f383 	uxtah	r3, r2, r3
 801f136:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f138:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f13c:	3304      	adds	r3, #4
 801f13e:	9307      	str	r3, [sp, #28]
 801f140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f142:	455b      	cmp	r3, fp
 801f144:	f240 817b 	bls.w	801f43e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x40e>
 801f148:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 801f14c:	f04f 0801 	mov.w	r8, #1
 801f150:	9a01      	ldr	r2, [sp, #4]
 801f152:	9807      	ldr	r0, [sp, #28]
 801f154:	46c4      	mov	ip, r8
 801f156:	f8cd 8008 	str.w	r8, [sp, #8]
 801f15a:	7800      	ldrb	r0, [r0, #0]
 801f15c:	fbb5 f3f3 	udiv	r3, r5, r3
 801f160:	1ad3      	subs	r3, r2, r3
 801f162:	9011      	str	r0, [sp, #68]	; 0x44
 801f164:	3001      	adds	r0, #1
 801f166:	b29b      	uxth	r3, r3
 801f168:	9005      	str	r0, [sp, #20]
 801f16a:	9316      	str	r3, [sp, #88]	; 0x58
 801f16c:	9b07      	ldr	r3, [sp, #28]
 801f16e:	785a      	ldrb	r2, [r3, #1]
 801f170:	789b      	ldrb	r3, [r3, #2]
 801f172:	021b      	lsls	r3, r3, #8
 801f174:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f178:	9a07      	ldr	r2, [sp, #28]
 801f17a:	78d2      	ldrb	r2, [r2, #3]
 801f17c:	4313      	orrs	r3, r2
 801f17e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f180:	441a      	add	r2, r3
 801f182:	1c50      	adds	r0, r2, #1
 801f184:	7852      	ldrb	r2, [r2, #1]
 801f186:	9003      	str	r0, [sp, #12]
 801f188:	0212      	lsls	r2, r2, #8
 801f18a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f18c:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 801f190:	5cc3      	ldrb	r3, [r0, r3]
 801f192:	431a      	orrs	r2, r3
 801f194:	b293      	uxth	r3, r2
 801f196:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 801f19a:	930c      	str	r3, [sp, #48]	; 0x30
 801f19c:	2300      	movs	r3, #0
 801f19e:	9308      	str	r3, [sp, #32]
 801f1a0:	461a      	mov	r2, r3
 801f1a2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801f1a6:	930e      	str	r3, [sp, #56]	; 0x38
 801f1a8:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801f1ac:	930f      	str	r3, [sp, #60]	; 0x3c
 801f1ae:	2d00      	cmp	r5, #0
 801f1b0:	d07d      	beq.n	801f2ae <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27e>
 801f1b2:	45ac      	cmp	ip, r5
 801f1b4:	d26d      	bcs.n	801f292 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x262>
 801f1b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f1b8:	eba5 050c 	sub.w	r5, r5, ip
 801f1bc:	4608      	mov	r0, r1
 801f1be:	455b      	cmp	r3, fp
 801f1c0:	b2ad      	uxth	r5, r5
 801f1c2:	d802      	bhi.n	801f1ca <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19a>
 801f1c4:	e071      	b.n	801f2aa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27a>
 801f1c6:	2b00      	cmp	r3, #0
 801f1c8:	d15d      	bne.n	801f286 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x256>
 801f1ca:	9b03      	ldr	r3, [sp, #12]
 801f1cc:	9a02      	ldr	r2, [sp, #8]
 801f1ce:	785b      	ldrb	r3, [r3, #1]
 801f1d0:	f1c2 0207 	rsb	r2, r2, #7
 801f1d4:	9902      	ldr	r1, [sp, #8]
 801f1d6:	4093      	lsls	r3, r2
 801f1d8:	005b      	lsls	r3, r3, #1
 801f1da:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801f1de:	9b03      	ldr	r3, [sp, #12]
 801f1e0:	781b      	ldrb	r3, [r3, #0]
 801f1e2:	410b      	asrs	r3, r1
 801f1e4:	3101      	adds	r1, #1
 801f1e6:	b2c9      	uxtb	r1, r1
 801f1e8:	b2db      	uxtb	r3, r3
 801f1ea:	2908      	cmp	r1, #8
 801f1ec:	9102      	str	r1, [sp, #8]
 801f1ee:	9903      	ldr	r1, [sp, #12]
 801f1f0:	ea43 0302 	orr.w	r3, r3, r2
 801f1f4:	bf0c      	ite	eq
 801f1f6:	3102      	addeq	r1, #2
 801f1f8:	3101      	addne	r1, #1
 801f1fa:	b29a      	uxth	r2, r3
 801f1fc:	bf05      	ittet	eq
 801f1fe:	9103      	streq	r1, [sp, #12]
 801f200:	2100      	moveq	r1, #0
 801f202:	9103      	strne	r1, [sp, #12]
 801f204:	9102      	streq	r1, [sp, #8]
 801f206:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f208:	4291      	cmp	r1, r2
 801f20a:	d30a      	bcc.n	801f222 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801f20c:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 801f210:	2301      	movs	r3, #1
 801f212:	9905      	ldr	r1, [sp, #20]
 801f214:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801f218:	d30f      	bcc.n	801f23a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801f21a:	2100      	movs	r1, #0
 801f21c:	4698      	mov	r8, r3
 801f21e:	9100      	str	r1, [sp, #0]
 801f220:	e032      	b.n	801f288 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x258>
 801f222:	9b05      	ldr	r3, [sp, #20]
 801f224:	429a      	cmp	r2, r3
 801f226:	d318      	bcc.n	801f25a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801f228:	eb04 0308 	add.w	r3, r4, r8
 801f22c:	f894 1804 	ldrb.w	r1, [r4, #2052]	; 0x804
 801f230:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 801f234:	f108 0301 	add.w	r3, r8, #1
 801f238:	b29b      	uxth	r3, r3
 801f23a:	9905      	ldr	r1, [sp, #20]
 801f23c:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 801f240:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801f244:	710e      	strb	r6, [r1, #4]
 801f246:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f248:	80ce      	strh	r6, [r1, #6]
 801f24a:	f108 0601 	add.w	r6, r8, #1
 801f24e:	714e      	strb	r6, [r1, #5]
 801f250:	9905      	ldr	r1, [sp, #20]
 801f252:	3101      	adds	r1, #1
 801f254:	b289      	uxth	r1, r1
 801f256:	9105      	str	r1, [sp, #20]
 801f258:	e7df      	b.n	801f21a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ea>
 801f25a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f25e:	4611      	mov	r1, r2
 801f260:	795b      	ldrb	r3, [r3, #5]
 801f262:	f603 0604 	addw	r6, r3, #2052	; 0x804
 801f266:	4426      	add	r6, r4
 801f268:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801f26a:	4437      	add	r7, r6
 801f26c:	2f00      	cmp	r7, #0
 801f26e:	dd06      	ble.n	801f27e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24e>
 801f270:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801f274:	790f      	ldrb	r7, [r1, #4]
 801f276:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801f27a:	88c9      	ldrh	r1, [r1, #6]
 801f27c:	e7f4      	b.n	801f268 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801f27e:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 801f282:	b29b      	uxth	r3, r3
 801f284:	e7c5      	b.n	801f212 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e2>
 801f286:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f288:	920c      	str	r2, [sp, #48]	; 0x30
 801f28a:	4601      	mov	r1, r0
 801f28c:	9a00      	ldr	r2, [sp, #0]
 801f28e:	469c      	mov	ip, r3
 801f290:	e78d      	b.n	801f1ae <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801f292:	ebac 0305 	sub.w	r3, ip, r5
 801f296:	1957      	adds	r7, r2, r5
 801f298:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801f29c:	b2ba      	uxth	r2, r7
 801f29e:	b29b      	uxth	r3, r3
 801f2a0:	9200      	str	r2, [sp, #0]
 801f2a2:	2500      	movs	r5, #0
 801f2a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f2a6:	455a      	cmp	r2, fp
 801f2a8:	d88d      	bhi.n	801f1c6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 801f2aa:	4601      	mov	r1, r0
 801f2ac:	e748      	b.n	801f140 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x110>
 801f2ae:	458c      	cmp	ip, r1
 801f2b0:	bf27      	ittee	cs
 801f2b2:	ebac 0301 	subcs.w	r3, ip, r1
 801f2b6:	4628      	movcs	r0, r5
 801f2b8:	eba1 000c 	subcc.w	r0, r1, ip
 801f2bc:	462b      	movcc	r3, r5
 801f2be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801f2c0:	bf27      	ittee	cs
 801f2c2:	b29b      	uxthcs	r3, r3
 801f2c4:	9109      	strcs	r1, [sp, #36]	; 0x24
 801f2c6:	b280      	uxthcc	r0, r0
 801f2c8:	f8cd c024 	strcc.w	ip, [sp, #36]	; 0x24
 801f2cc:	2dff      	cmp	r5, #255	; 0xff
 801f2ce:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801f2d0:	eb02 0705 	add.w	r7, r2, r5
 801f2d4:	b2bd      	uxth	r5, r7
 801f2d6:	9500      	str	r5, [sp, #0]
 801f2d8:	d12e      	bne.n	801f338 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>
 801f2da:	465e      	mov	r6, fp
 801f2dc:	9d00      	ldr	r5, [sp, #0]
 801f2de:	42aa      	cmp	r2, r5
 801f2e0:	f040 8083 	bne.w	801f3ea <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801f2e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f2e6:	458c      	cmp	ip, r1
 801f2e8:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801f2ec:	d3d9      	bcc.n	801f2a2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 801f2ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f2f0:	9904      	ldr	r1, [sp, #16]
 801f2f2:	8812      	ldrh	r2, [r2, #0]
 801f2f4:	1a52      	subs	r2, r2, r1
 801f2f6:	9916      	ldr	r1, [sp, #88]	; 0x58
 801f2f8:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801f2fc:	9a08      	ldr	r2, [sp, #32]
 801f2fe:	3201      	adds	r2, #1
 801f300:	428a      	cmp	r2, r1
 801f302:	9208      	str	r2, [sp, #32]
 801f304:	f040 8091 	bne.w	801f42a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3fa>
 801f308:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 801f30c:	f8bd c068 	ldrh.w	ip, [sp, #104]	; 0x68
 801f310:	9b04      	ldr	r3, [sp, #16]
 801f312:	eba5 050c 	sub.w	r5, r5, ip
 801f316:	b2ad      	uxth	r5, r5
 801f318:	2d00      	cmp	r5, #0
 801f31a:	bf08      	it	eq
 801f31c:	4619      	moveq	r1, r3
 801f31e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f320:	bf18      	it	ne
 801f322:	2100      	movne	r1, #0
 801f324:	3301      	adds	r3, #1
 801f326:	b289      	uxth	r1, r1
 801f328:	930d      	str	r3, [sp, #52]	; 0x34
 801f32a:	e700      	b.n	801f12e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xfe>
 801f32c:	20027ca8 	.word	0x20027ca8
 801f330:	20027ca2 	.word	0x20027ca2
 801f334:	fffff7fb 	.word	0xfffff7fb
 801f338:	46d9      	mov	r9, fp
 801f33a:	9d00      	ldr	r5, [sp, #0]
 801f33c:	42aa      	cmp	r2, r5
 801f33e:	d0d1      	beq.n	801f2e4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b4>
 801f340:	1c55      	adds	r5, r2, #1
 801f342:	4422      	add	r2, r4
 801f344:	f892 e804 	ldrb.w	lr, [r2, #2052]	; 0x804
 801f348:	9a06      	ldr	r2, [sp, #24]
 801f34a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f34e:	9517      	str	r5, [sp, #92]	; 0x5c
 801f350:	4472      	add	r2, lr
 801f352:	9212      	str	r2, [sp, #72]	; 0x48
 801f354:	f8b9 2000 	ldrh.w	r2, [r9]
 801f358:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801f35a:	1216      	asrs	r6, r2, #8
 801f35c:	f897 a002 	ldrb.w	sl, [r7, #2]
 801f360:	10d5      	asrs	r5, r2, #3
 801f362:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f364:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f368:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801f36c:	00d2      	lsls	r2, r2, #3
 801f36e:	fb1a fa07 	smulbb	sl, sl, r7
 801f372:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801f376:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f378:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801f37c:	b2d2      	uxtb	r2, r2
 801f37e:	fb06 a607 	mla	r6, r6, r7, sl
 801f382:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801f384:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f388:	f897 a001 	ldrb.w	sl, [r7, #1]
 801f38c:	b2b6      	uxth	r6, r6
 801f38e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f390:	fb1a fa07 	smulbb	sl, sl, r7
 801f394:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f396:	fb05 a507 	mla	r5, r5, r7, sl
 801f39a:	9f06      	ldr	r7, [sp, #24]
 801f39c:	f106 0a01 	add.w	sl, r6, #1
 801f3a0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801f3a4:	b2ad      	uxth	r5, r5
 801f3a6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f3a8:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801f3ac:	f105 0a01 	add.w	sl, r5, #1
 801f3b0:	fb1e fe07 	smulbb	lr, lr, r7
 801f3b4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f3b6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f3ba:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801f3be:	fb02 e207 	mla	r2, r2, r7, lr
 801f3c2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f3c6:	b292      	uxth	r2, r2
 801f3c8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f3cc:	f102 0e01 	add.w	lr, r2, #1
 801f3d0:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 801f3d4:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801f3d8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801f3dc:	ea4e 0606 	orr.w	r6, lr, r6
 801f3e0:	ea46 060a 	orr.w	r6, r6, sl
 801f3e4:	f829 6b02 	strh.w	r6, [r9], #2
 801f3e8:	e7a7      	b.n	801f33a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30a>
 801f3ea:	f102 0e01 	add.w	lr, r2, #1
 801f3ee:	4422      	add	r2, r4
 801f3f0:	9f06      	ldr	r7, [sp, #24]
 801f3f2:	f892 5804 	ldrb.w	r5, [r2, #2052]	; 0x804
 801f3f6:	9a06      	ldr	r2, [sp, #24]
 801f3f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f3fc:	eb02 0a05 	add.w	sl, r2, r5
 801f400:	4a13      	ldr	r2, [pc, #76]	; (801f450 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x420>)
 801f402:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801f406:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 801f40a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801f40e:	00d2      	lsls	r2, r2, #3
 801f410:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f414:	ea49 0202 	orr.w	r2, r9, r2
 801f418:	f817 9005 	ldrb.w	r9, [r7, r5]
 801f41c:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 801f420:	f826 2b02 	strh.w	r2, [r6], #2
 801f424:	fa1f f28e 	uxth.w	r2, lr
 801f428:	e758      	b.n	801f2dc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>
 801f42a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801f42e:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801f432:	1a2d      	subs	r5, r5, r0
 801f434:	b2ad      	uxth	r5, r5
 801f436:	2d00      	cmp	r5, #0
 801f438:	bf18      	it	ne
 801f43a:	2000      	movne	r0, #0
 801f43c:	e732      	b.n	801f2a4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 801f43e:	4b05      	ldr	r3, [pc, #20]	; (801f454 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x424>)
 801f440:	6818      	ldr	r0, [r3, #0]
 801f442:	6803      	ldr	r3, [r0, #0]
 801f444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f446:	4798      	blx	r3
 801f448:	b01f      	add	sp, #124	; 0x7c
 801f44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f44e:	bf00      	nop
 801f450:	fffff800 	.word	0xfffff800
 801f454:	20027ca8 	.word	0x20027ca8

0801f458 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801f458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f45c:	b091      	sub	sp, #68	; 0x44
 801f45e:	469b      	mov	fp, r3
 801f460:	4616      	mov	r6, r2
 801f462:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f466:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801f46a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f46e:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801f472:	4604      	mov	r4, r0
 801f474:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801f478:	4640      	mov	r0, r8
 801f47a:	460d      	mov	r5, r1
 801f47c:	4659      	mov	r1, fp
 801f47e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801f482:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801f486:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801f48a:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801f48e:	f7f2 fc89 	bl	8011da4 <_ZN8touchgfx4RectaNERKS0_>
 801f492:	4631      	mov	r1, r6
 801f494:	4640      	mov	r0, r8
 801f496:	f7f2 fc85 	bl	8011da4 <_ZN8touchgfx4RectaNERKS0_>
 801f49a:	4b74      	ldr	r3, [pc, #464]	; (801f66c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801f49c:	8818      	ldrh	r0, [r3, #0]
 801f49e:	4b74      	ldr	r3, [pc, #464]	; (801f670 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801f4a0:	b202      	sxth	r2, r0
 801f4a2:	8819      	ldrh	r1, [r3, #0]
 801f4a4:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801f4a8:	b20e      	sxth	r6, r1
 801f4aa:	2b00      	cmp	r3, #0
 801f4ac:	da07      	bge.n	801f4be <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801f4ae:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801f4b2:	4463      	add	r3, ip
 801f4b4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801f4b8:	2300      	movs	r3, #0
 801f4ba:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801f4be:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801f4c2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801f4c6:	1ad2      	subs	r2, r2, r3
 801f4c8:	4594      	cmp	ip, r2
 801f4ca:	bfc4      	itt	gt
 801f4cc:	1ac2      	subgt	r2, r0, r3
 801f4ce:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801f4d2:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801f4d6:	2a00      	cmp	r2, #0
 801f4d8:	da07      	bge.n	801f4ea <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801f4da:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801f4de:	4462      	add	r2, ip
 801f4e0:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801f4e4:	2200      	movs	r2, #0
 801f4e6:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801f4ea:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801f4ee:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801f4f2:	eba6 060a 	sub.w	r6, r6, sl
 801f4f6:	42b2      	cmp	r2, r6
 801f4f8:	bfc4      	itt	gt
 801f4fa:	eba1 020a 	subgt.w	r2, r1, sl
 801f4fe:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801f502:	4a5c      	ldr	r2, [pc, #368]	; (801f674 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801f504:	7812      	ldrb	r2, [r2, #0]
 801f506:	b9a2      	cbnz	r2, 801f532 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801f508:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801f50c:	4286      	cmp	r6, r0
 801f50e:	4640      	mov	r0, r8
 801f510:	9303      	str	r3, [sp, #12]
 801f512:	bf14      	ite	ne
 801f514:	2600      	movne	r6, #0
 801f516:	2601      	moveq	r6, #1
 801f518:	f7f2 fc87 	bl	8011e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f51c:	9b03      	ldr	r3, [sp, #12]
 801f51e:	b160      	cbz	r0, 801f53a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801f520:	2300      	movs	r3, #0
 801f522:	8023      	strh	r3, [r4, #0]
 801f524:	8063      	strh	r3, [r4, #2]
 801f526:	80a3      	strh	r3, [r4, #4]
 801f528:	4620      	mov	r0, r4
 801f52a:	80e3      	strh	r3, [r4, #6]
 801f52c:	b011      	add	sp, #68	; 0x44
 801f52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f532:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801f536:	428e      	cmp	r6, r1
 801f538:	e7e9      	b.n	801f50e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801f53a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801f53e:	a90e      	add	r1, sp, #56	; 0x38
 801f540:	900e      	str	r0, [sp, #56]	; 0x38
 801f542:	a80c      	add	r0, sp, #48	; 0x30
 801f544:	9205      	str	r2, [sp, #20]
 801f546:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801f54a:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801f54e:	9206      	str	r2, [sp, #24]
 801f550:	f8bb 2000 	ldrh.w	r2, [fp]
 801f554:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801f558:	1a9b      	subs	r3, r3, r2
 801f55a:	b21b      	sxth	r3, r3
 801f55c:	9303      	str	r3, [sp, #12]
 801f55e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801f562:	f8df b118 	ldr.w	fp, [pc, #280]	; 801f67c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801f566:	ebaa 0a03 	sub.w	sl, sl, r3
 801f56a:	fa0f f38a 	sxth.w	r3, sl
 801f56e:	9304      	str	r3, [sp, #16]
 801f570:	9b03      	ldr	r3, [sp, #12]
 801f572:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801f576:	9b04      	ldr	r3, [sp, #16]
 801f578:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801f57c:	9b05      	ldr	r3, [sp, #20]
 801f57e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801f582:	9b06      	ldr	r3, [sp, #24]
 801f584:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801f588:	f7f8 fb6c 	bl	8017c64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f58c:	4640      	mov	r0, r8
 801f58e:	f7f8 fb25 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f592:	a80e      	add	r0, sp, #56	; 0x38
 801f594:	f7f8 fb22 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f598:	4b37      	ldr	r3, [pc, #220]	; (801f678 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801f59a:	4628      	mov	r0, r5
 801f59c:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801f5a0:	881b      	ldrh	r3, [r3, #0]
 801f5a2:	9307      	str	r3, [sp, #28]
 801f5a4:	682b      	ldr	r3, [r5, #0]
 801f5a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f5a8:	4798      	blx	r3
 801f5aa:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801f5ae:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801f5b2:	4681      	mov	r9, r0
 801f5b4:	f8db 0000 	ldr.w	r0, [fp]
 801f5b8:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801f5bc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801f5be:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801f5c2:	6803      	ldr	r3, [r0, #0]
 801f5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f5c6:	4798      	blx	r3
 801f5c8:	4607      	mov	r7, r0
 801f5ca:	f8db 0000 	ldr.w	r0, [fp]
 801f5ce:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801f5d2:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801f5d6:	6803      	ldr	r3, [r0, #0]
 801f5d8:	9109      	str	r1, [sp, #36]	; 0x24
 801f5da:	9208      	str	r2, [sp, #32]
 801f5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f5de:	4798      	blx	r3
 801f5e0:	f010 0f01 	tst.w	r0, #1
 801f5e4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801f5e8:	d012      	beq.n	801f610 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801f5ea:	f8db 0000 	ldr.w	r0, [fp]
 801f5ee:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801f5f2:	6803      	ldr	r3, [r0, #0]
 801f5f4:	9200      	str	r2, [sp, #0]
 801f5f6:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801f5f8:	462b      	mov	r3, r5
 801f5fa:	e898 0006 	ldmia.w	r8, {r1, r2}
 801f5fe:	47b0      	blx	r6
 801f600:	9b03      	ldr	r3, [sp, #12]
 801f602:	8023      	strh	r3, [r4, #0]
 801f604:	9b04      	ldr	r3, [sp, #16]
 801f606:	8063      	strh	r3, [r4, #2]
 801f608:	9b05      	ldr	r3, [sp, #20]
 801f60a:	80a3      	strh	r3, [r4, #4]
 801f60c:	9b06      	ldr	r3, [sp, #24]
 801f60e:	e78b      	b.n	801f528 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801f610:	fb09 f202 	mul.w	r2, r9, r2
 801f614:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801f618:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801f61c:	440f      	add	r7, r1
 801f61e:	b166      	cbz	r6, 801f63a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801f620:	9a07      	ldr	r2, [sp, #28]
 801f622:	4592      	cmp	sl, r2
 801f624:	d109      	bne.n	801f63a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801f626:	f8db 0000 	ldr.w	r0, [fp]
 801f62a:	fb09 f303 	mul.w	r3, r9, r3
 801f62e:	4629      	mov	r1, r5
 801f630:	6802      	ldr	r2, [r0, #0]
 801f632:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801f634:	463a      	mov	r2, r7
 801f636:	47b0      	blx	r6
 801f638:	e7e2      	b.n	801f600 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801f63a:	fb0a f303 	mul.w	r3, sl, r3
 801f63e:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801f642:	f8df b038 	ldr.w	fp, [pc, #56]	; 801f67c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801f646:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801f64a:	4545      	cmp	r5, r8
 801f64c:	d2d8      	bcs.n	801f600 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801f64e:	f8db 0000 	ldr.w	r0, [fp]
 801f652:	4629      	mov	r1, r5
 801f654:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801f658:	4435      	add	r5, r6
 801f65a:	6802      	ldr	r2, [r0, #0]
 801f65c:	005b      	lsls	r3, r3, #1
 801f65e:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801f662:	463a      	mov	r2, r7
 801f664:	47d0      	blx	sl
 801f666:	444f      	add	r7, r9
 801f668:	e7ef      	b.n	801f64a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801f66a:	bf00      	nop
 801f66c:	20027c9c 	.word	0x20027c9c
 801f670:	20027c9e 	.word	0x20027c9e
 801f674:	20027ca0 	.word	0x20027ca0
 801f678:	20027ca2 	.word	0x20027ca2
 801f67c:	20027ca8 	.word	0x20027ca8

0801f680 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801f680:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f682:	4606      	mov	r6, r0
 801f684:	b087      	sub	sp, #28
 801f686:	460c      	mov	r4, r1
 801f688:	4617      	mov	r7, r2
 801f68a:	461d      	mov	r5, r3
 801f68c:	b333      	cbz	r3, 801f6dc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801f68e:	4608      	mov	r0, r1
 801f690:	f7f2 fbcb 	bl	8011e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f694:	bb10      	cbnz	r0, 801f6dc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801f696:	6820      	ldr	r0, [r4, #0]
 801f698:	ab04      	add	r3, sp, #16
 801f69a:	6861      	ldr	r1, [r4, #4]
 801f69c:	4c1b      	ldr	r4, [pc, #108]	; (801f70c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801f69e:	c303      	stmia	r3!, {r0, r1}
 801f6a0:	a804      	add	r0, sp, #16
 801f6a2:	f7f8 fa9b 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f6a6:	6820      	ldr	r0, [r4, #0]
 801f6a8:	6803      	ldr	r3, [r0, #0]
 801f6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f6ac:	4798      	blx	r3
 801f6ae:	2dff      	cmp	r5, #255	; 0xff
 801f6b0:	d016      	beq.n	801f6e0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801f6b2:	f010 0f08 	tst.w	r0, #8
 801f6b6:	6820      	ldr	r0, [r4, #0]
 801f6b8:	d015      	beq.n	801f6e6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801f6ba:	2400      	movs	r4, #0
 801f6bc:	6801      	ldr	r1, [r0, #0]
 801f6be:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801f6c2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f6c6:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801f6ca:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801f6ce:	9401      	str	r4, [sp, #4]
 801f6d0:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801f6d4:	9400      	str	r4, [sp, #0]
 801f6d6:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801f6d8:	4639      	mov	r1, r7
 801f6da:	47a0      	blx	r4
 801f6dc:	b007      	add	sp, #28
 801f6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f6e0:	f010 0f02 	tst.w	r0, #2
 801f6e4:	e7e7      	b.n	801f6b6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801f6e6:	6803      	ldr	r3, [r0, #0]
 801f6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f6ea:	4798      	blx	r3
 801f6ec:	4b08      	ldr	r3, [pc, #32]	; (801f710 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801f6ee:	4601      	mov	r1, r0
 801f6f0:	4630      	mov	r0, r6
 801f6f2:	881a      	ldrh	r2, [r3, #0]
 801f6f4:	6833      	ldr	r3, [r6, #0]
 801f6f6:	e9cd 7500 	strd	r7, r5, [sp]
 801f6fa:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801f6fc:	ab04      	add	r3, sp, #16
 801f6fe:	47a8      	blx	r5
 801f700:	6820      	ldr	r0, [r4, #0]
 801f702:	6803      	ldr	r3, [r0, #0]
 801f704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f706:	4798      	blx	r3
 801f708:	e7e8      	b.n	801f6dc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801f70a:	bf00      	nop
 801f70c:	20027ca8 	.word	0x20027ca8
 801f710:	20027ca2 	.word	0x20027ca2

0801f714 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801f714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f718:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801f71c:	4688      	mov	r8, r1
 801f71e:	4614      	mov	r4, r2
 801f720:	461d      	mov	r5, r3
 801f722:	9e08      	ldr	r6, [sp, #32]
 801f724:	2f00      	cmp	r7, #0
 801f726:	f000 80ab 	beq.w	801f880 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801f72a:	4618      	mov	r0, r3
 801f72c:	f7f2 fb7d 	bl	8011e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f730:	2800      	cmp	r0, #0
 801f732:	f040 80a5 	bne.w	801f880 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801f736:	f9b5 1000 	ldrsh.w	r1, [r5]
 801f73a:	2fff      	cmp	r7, #255	; 0xff
 801f73c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801f740:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801f744:	fb04 1303 	mla	r3, r4, r3, r1
 801f748:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801f74c:	eba4 0200 	sub.w	r2, r4, r0
 801f750:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801f754:	fb04 f505 	mul.w	r5, r4, r5
 801f758:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801f75c:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801f760:	d04a      	beq.n	801f7f8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801f762:	b2bc      	uxth	r4, r7
 801f764:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801f768:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801f76c:	fa5f f788 	uxtb.w	r7, r8
 801f770:	b2f3      	uxtb	r3, r6
 801f772:	0040      	lsls	r0, r0, #1
 801f774:	fb0e fe04 	mul.w	lr, lr, r4
 801f778:	4367      	muls	r7, r4
 801f77a:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801f77e:	4363      	muls	r3, r4
 801f780:	fa1f fc8c 	uxth.w	ip, ip
 801f784:	42a9      	cmp	r1, r5
 801f786:	d27b      	bcs.n	801f880 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801f788:	eb01 0900 	add.w	r9, r1, r0
 801f78c:	4549      	cmp	r1, r9
 801f78e:	d231      	bcs.n	801f7f4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 801f790:	880a      	ldrh	r2, [r1, #0]
 801f792:	1214      	asrs	r4, r2, #8
 801f794:	10d6      	asrs	r6, r2, #3
 801f796:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801f79a:	00d2      	lsls	r2, r2, #3
 801f79c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f7a0:	b2d2      	uxtb	r2, r2
 801f7a2:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801f7a6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f7aa:	fb14 f40c 	smulbb	r4, r4, ip
 801f7ae:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801f7b2:	fb12 f20c 	smulbb	r2, r2, ip
 801f7b6:	fb16 f60c 	smulbb	r6, r6, ip
 801f7ba:	4474      	add	r4, lr
 801f7bc:	441a      	add	r2, r3
 801f7be:	b2a4      	uxth	r4, r4
 801f7c0:	443e      	add	r6, r7
 801f7c2:	b292      	uxth	r2, r2
 801f7c4:	f104 0a01 	add.w	sl, r4, #1
 801f7c8:	b2b6      	uxth	r6, r6
 801f7ca:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801f7ce:	f102 0a01 	add.w	sl, r2, #1
 801f7d2:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801f7d6:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801f7da:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f7de:	4322      	orrs	r2, r4
 801f7e0:	1c74      	adds	r4, r6, #1
 801f7e2:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801f7e6:	0976      	lsrs	r6, r6, #5
 801f7e8:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f7ec:	4332      	orrs	r2, r6
 801f7ee:	f821 2b02 	strh.w	r2, [r1], #2
 801f7f2:	e7cb      	b.n	801f78c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 801f7f4:	4441      	add	r1, r8
 801f7f6:	e7c5      	b.n	801f784 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801f7f8:	0973      	lsrs	r3, r6, #5
 801f7fa:	4f22      	ldr	r7, [pc, #136]	; (801f884 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 801f7fc:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801f800:	ea08 0707 	and.w	r7, r8, r7
 801f804:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f808:	433b      	orrs	r3, r7
 801f80a:	07e7      	lsls	r7, r4, #31
 801f80c:	ea43 0306 	orr.w	r3, r3, r6
 801f810:	b29b      	uxth	r3, r3
 801f812:	d50b      	bpl.n	801f82c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801f814:	0040      	lsls	r0, r0, #1
 801f816:	0052      	lsls	r2, r2, #1
 801f818:	42a9      	cmp	r1, r5
 801f81a:	d231      	bcs.n	801f880 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801f81c:	180c      	adds	r4, r1, r0
 801f81e:	42a1      	cmp	r1, r4
 801f820:	d202      	bcs.n	801f828 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801f822:	f821 3b02 	strh.w	r3, [r1], #2
 801f826:	e7fa      	b.n	801f81e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801f828:	4411      	add	r1, r2
 801f82a:	e7f5      	b.n	801f818 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801f82c:	078e      	lsls	r6, r1, #30
 801f82e:	d008      	beq.n	801f842 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801f830:	0066      	lsls	r6, r4, #1
 801f832:	460a      	mov	r2, r1
 801f834:	42aa      	cmp	r2, r5
 801f836:	d202      	bcs.n	801f83e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801f838:	8013      	strh	r3, [r2, #0]
 801f83a:	4432      	add	r2, r6
 801f83c:	e7fa      	b.n	801f834 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801f83e:	3102      	adds	r1, #2
 801f840:	3801      	subs	r0, #1
 801f842:	07c2      	lsls	r2, r0, #31
 801f844:	d50b      	bpl.n	801f85e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801f846:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801f84a:	0066      	lsls	r6, r4, #1
 801f84c:	3a01      	subs	r2, #1
 801f84e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801f852:	42aa      	cmp	r2, r5
 801f854:	d202      	bcs.n	801f85c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801f856:	8013      	strh	r3, [r2, #0]
 801f858:	4432      	add	r2, r6
 801f85a:	e7fa      	b.n	801f852 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801f85c:	3801      	subs	r0, #1
 801f85e:	b178      	cbz	r0, 801f880 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801f860:	1040      	asrs	r0, r0, #1
 801f862:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801f866:	0080      	lsls	r0, r0, #2
 801f868:	0064      	lsls	r4, r4, #1
 801f86a:	42a9      	cmp	r1, r5
 801f86c:	d208      	bcs.n	801f880 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801f86e:	180e      	adds	r6, r1, r0
 801f870:	460a      	mov	r2, r1
 801f872:	42b2      	cmp	r2, r6
 801f874:	d202      	bcs.n	801f87c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801f876:	f842 3b04 	str.w	r3, [r2], #4
 801f87a:	e7fa      	b.n	801f872 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 801f87c:	4421      	add	r1, r4
 801f87e:	e7f4      	b.n	801f86a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801f880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f884:	00fff800 	.word	0x00fff800

0801f888 <_ZN8touchgfx8LCD16bppC1Ev>:
 801f888:	2200      	movs	r2, #0
 801f88a:	4912      	ldr	r1, [pc, #72]	; (801f8d4 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 801f88c:	6042      	str	r2, [r0, #4]
 801f88e:	6001      	str	r1, [r0, #0]
 801f890:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801f894:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801f898:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801f89c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801f8a0:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801f8a4:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801f8a8:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801f8ac:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801f8b0:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801f8b4:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801f8b8:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801f8bc:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801f8c0:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801f8c4:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801f8c8:	e9c0 221e 	strd	r2, r2, [r0, #120]	; 0x78
 801f8cc:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 801f8d0:	4770      	bx	lr
 801f8d2:	bf00      	nop
 801f8d4:	08031140 	.word	0x08031140

0801f8d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801f8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8dc:	b08d      	sub	sp, #52	; 0x34
 801f8de:	460d      	mov	r5, r1
 801f8e0:	4604      	mov	r4, r0
 801f8e2:	4699      	mov	r9, r3
 801f8e4:	6808      	ldr	r0, [r1, #0]
 801f8e6:	ab08      	add	r3, sp, #32
 801f8e8:	6849      	ldr	r1, [r1, #4]
 801f8ea:	c303      	stmia	r3!, {r0, r1}
 801f8ec:	6810      	ldr	r0, [r2, #0]
 801f8ee:	ab0a      	add	r3, sp, #40	; 0x28
 801f8f0:	6851      	ldr	r1, [r2, #4]
 801f8f2:	c303      	stmia	r3!, {r0, r1}
 801f8f4:	a808      	add	r0, sp, #32
 801f8f6:	f7f8 f971 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f8fa:	4629      	mov	r1, r5
 801f8fc:	a80a      	add	r0, sp, #40	; 0x28
 801f8fe:	4d67      	ldr	r5, [pc, #412]	; (801fa9c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801f900:	f7f8 f9b0 	bl	8017c64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f904:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801f908:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801f90c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801f910:	6828      	ldr	r0, [r5, #0]
 801f912:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f916:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801f91a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801f91e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801f922:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801f926:	440a      	add	r2, r1
 801f928:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801f92c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801f930:	4413      	add	r3, r2
 801f932:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801f936:	6803      	ldr	r3, [r0, #0]
 801f938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f93a:	4798      	blx	r3
 801f93c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f940:	d119      	bne.n	801f976 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801f942:	f010 0f20 	tst.w	r0, #32
 801f946:	6828      	ldr	r0, [r5, #0]
 801f948:	d018      	beq.n	801f97c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801f94a:	2500      	movs	r5, #0
 801f94c:	6801      	ldr	r1, [r0, #0]
 801f94e:	b2b6      	uxth	r6, r6
 801f950:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801f954:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801f958:	9601      	str	r6, [sp, #4]
 801f95a:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801f95e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801f962:	9502      	str	r5, [sp, #8]
 801f964:	fa1f f588 	uxth.w	r5, r8
 801f968:	9500      	str	r5, [sp, #0]
 801f96a:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801f96c:	4621      	mov	r1, r4
 801f96e:	47a8      	blx	r5
 801f970:	b00d      	add	sp, #52	; 0x34
 801f972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f976:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f97a:	e7e4      	b.n	801f946 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801f97c:	6803      	ldr	r3, [r0, #0]
 801f97e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f980:	4798      	blx	r3
 801f982:	4947      	ldr	r1, [pc, #284]	; (801faa0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801f984:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801f988:	880b      	ldrh	r3, [r1, #0]
 801f98a:	468a      	mov	sl, r1
 801f98c:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801f990:	fb03 5202 	mla	r2, r3, r2, r5
 801f994:	4373      	muls	r3, r6
 801f996:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801f99a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801f99e:	9307      	str	r3, [sp, #28]
 801f9a0:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801f9a4:	9306      	str	r3, [sp, #24]
 801f9a6:	9b07      	ldr	r3, [sp, #28]
 801f9a8:	4298      	cmp	r0, r3
 801f9aa:	d270      	bcs.n	801fa8e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801f9ac:	9b06      	ldr	r3, [sp, #24]
 801f9ae:	4621      	mov	r1, r4
 801f9b0:	eb00 0b03 	add.w	fp, r0, r3
 801f9b4:	4558      	cmp	r0, fp
 801f9b6:	d25d      	bcs.n	801fa74 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801f9b8:	f851 4b04 	ldr.w	r4, [r1], #4
 801f9bc:	0e23      	lsrs	r3, r4, #24
 801f9be:	d014      	beq.n	801f9ea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801f9c0:	2bff      	cmp	r3, #255	; 0xff
 801f9c2:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801f9c6:	d112      	bne.n	801f9ee <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801f9c8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f9cc:	d10f      	bne.n	801f9ee <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801f9ce:	0963      	lsrs	r3, r4, #5
 801f9d0:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801f9d4:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801f9d8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f9dc:	f02c 0c07 	bic.w	ip, ip, #7
 801f9e0:	ea43 0c0c 	orr.w	ip, r3, ip
 801f9e4:	ea4c 0404 	orr.w	r4, ip, r4
 801f9e8:	8004      	strh	r4, [r0, #0]
 801f9ea:	3002      	adds	r0, #2
 801f9ec:	e7e2      	b.n	801f9b4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801f9ee:	fb09 f303 	mul.w	r3, r9, r3
 801f9f2:	8807      	ldrh	r7, [r0, #0]
 801f9f4:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801f9f8:	fa5f fc8c 	uxtb.w	ip, ip
 801f9fc:	1c5a      	adds	r2, r3, #1
 801f9fe:	123e      	asrs	r6, r7, #8
 801fa00:	10fd      	asrs	r5, r7, #3
 801fa02:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801fa06:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801fa0a:	00ff      	lsls	r7, r7, #3
 801fa0c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801fa10:	1212      	asrs	r2, r2, #8
 801fa12:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801fa16:	b293      	uxth	r3, r2
 801fa18:	43d2      	mvns	r2, r2
 801fa1a:	b2ff      	uxtb	r7, r7
 801fa1c:	fb1e fe03 	smulbb	lr, lr, r3
 801fa20:	b2d2      	uxtb	r2, r2
 801fa22:	fb1c fc03 	smulbb	ip, ip, r3
 801fa26:	b2e4      	uxtb	r4, r4
 801fa28:	fb06 e602 	mla	r6, r6, r2, lr
 801fa2c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801fa30:	fb14 f403 	smulbb	r4, r4, r3
 801fa34:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801fa38:	b2b6      	uxth	r6, r6
 801fa3a:	fb05 c502 	mla	r5, r5, r2, ip
 801fa3e:	fb07 4702 	mla	r7, r7, r2, r4
 801fa42:	f106 0e01 	add.w	lr, r6, #1
 801fa46:	b2ad      	uxth	r5, r5
 801fa48:	b2bf      	uxth	r7, r7
 801fa4a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801fa4e:	f105 0c01 	add.w	ip, r5, #1
 801fa52:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801fa56:	1c7e      	adds	r6, r7, #1
 801fa58:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801fa5c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801fa60:	096d      	lsrs	r5, r5, #5
 801fa62:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fa66:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fa6a:	ea46 060e 	orr.w	r6, r6, lr
 801fa6e:	432e      	orrs	r6, r5
 801fa70:	8006      	strh	r6, [r0, #0]
 801fa72:	e7ba      	b.n	801f9ea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801fa74:	f8ba 3000 	ldrh.w	r3, [sl]
 801fa78:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801fa7c:	eba3 0308 	sub.w	r3, r3, r8
 801fa80:	eba4 0408 	sub.w	r4, r4, r8
 801fa84:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fa88:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801fa8c:	e78b      	b.n	801f9a6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801fa8e:	4b03      	ldr	r3, [pc, #12]	; (801fa9c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801fa90:	6818      	ldr	r0, [r3, #0]
 801fa92:	6803      	ldr	r3, [r0, #0]
 801fa94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fa96:	4798      	blx	r3
 801fa98:	e76a      	b.n	801f970 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801fa9a:	bf00      	nop
 801fa9c:	20027ca8 	.word	0x20027ca8
 801faa0:	20027ca2 	.word	0x20027ca2

0801faa4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801faa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801faa8:	b085      	sub	sp, #20
 801faaa:	6810      	ldr	r0, [r2, #0]
 801faac:	460c      	mov	r4, r1
 801faae:	6851      	ldr	r1, [r2, #4]
 801fab0:	466d      	mov	r5, sp
 801fab2:	4616      	mov	r6, r2
 801fab4:	c503      	stmia	r5!, {r0, r1}
 801fab6:	6818      	ldr	r0, [r3, #0]
 801fab8:	6859      	ldr	r1, [r3, #4]
 801faba:	c503      	stmia	r5!, {r0, r1}
 801fabc:	4668      	mov	r0, sp
 801fabe:	4d2e      	ldr	r5, [pc, #184]	; (801fb78 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801fac0:	f7f8 f88c 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fac4:	4631      	mov	r1, r6
 801fac6:	a802      	add	r0, sp, #8
 801fac8:	4e2c      	ldr	r6, [pc, #176]	; (801fb7c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801faca:	f7f8 f8cb 	bl	8017c64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801face:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801fad2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801fad6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801fada:	6828      	ldr	r0, [r5, #0]
 801fadc:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fae0:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801fae4:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801fae8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801faec:	f8bd 1000 	ldrh.w	r1, [sp]
 801faf0:	440a      	add	r2, r1
 801faf2:	f8ad 2008 	strh.w	r2, [sp, #8]
 801faf6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801fafa:	4413      	add	r3, r2
 801fafc:	f8ad 300a 	strh.w	r3, [sp, #10]
 801fb00:	6803      	ldr	r3, [r0, #0]
 801fb02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fb04:	4798      	blx	r3
 801fb06:	8833      	ldrh	r3, [r6, #0]
 801fb08:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801fb0c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801fb10:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801fb14:	f8df e068 	ldr.w	lr, [pc, #104]	; 801fb80 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801fb18:	fb03 1202 	mla	r2, r3, r2, r1
 801fb1c:	fb08 f303 	mul.w	r3, r8, r3
 801fb20:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801fb24:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801fb28:	4298      	cmp	r0, r3
 801fb2a:	d21d      	bcs.n	801fb68 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801fb2c:	eb00 080c 	add.w	r8, r0, ip
 801fb30:	4540      	cmp	r0, r8
 801fb32:	d20f      	bcs.n	801fb54 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801fb34:	f854 1b04 	ldr.w	r1, [r4], #4
 801fb38:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801fb3c:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801fb40:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801fb44:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801fb48:	ea42 0209 	orr.w	r2, r2, r9
 801fb4c:	430a      	orrs	r2, r1
 801fb4e:	f820 2b02 	strh.w	r2, [r0], #2
 801fb52:	e7ed      	b.n	801fb30 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801fb54:	8832      	ldrh	r2, [r6, #0]
 801fb56:	1bd2      	subs	r2, r2, r7
 801fb58:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801fb5c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801fb60:	1bd2      	subs	r2, r2, r7
 801fb62:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801fb66:	e7df      	b.n	801fb28 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801fb68:	6828      	ldr	r0, [r5, #0]
 801fb6a:	6803      	ldr	r3, [r0, #0]
 801fb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fb6e:	4798      	blx	r3
 801fb70:	b005      	add	sp, #20
 801fb72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fb76:	bf00      	nop
 801fb78:	20027ca8 	.word	0x20027ca8
 801fb7c:	20027ca2 	.word	0x20027ca2
 801fb80:	fffff800 	.word	0xfffff800

0801fb84 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801fb84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fb88:	b08e      	sub	sp, #56	; 0x38
 801fb8a:	460e      	mov	r6, r1
 801fb8c:	4604      	mov	r4, r0
 801fb8e:	461d      	mov	r5, r3
 801fb90:	6808      	ldr	r0, [r1, #0]
 801fb92:	ab0a      	add	r3, sp, #40	; 0x28
 801fb94:	6849      	ldr	r1, [r1, #4]
 801fb96:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801fd6c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801fb9a:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801fd70 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801fb9e:	c303      	stmia	r3!, {r0, r1}
 801fba0:	6810      	ldr	r0, [r2, #0]
 801fba2:	ab0c      	add	r3, sp, #48	; 0x30
 801fba4:	6851      	ldr	r1, [r2, #4]
 801fba6:	c303      	stmia	r3!, {r0, r1}
 801fba8:	a80a      	add	r0, sp, #40	; 0x28
 801fbaa:	f7f8 f817 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fbae:	4631      	mov	r1, r6
 801fbb0:	a80c      	add	r0, sp, #48	; 0x30
 801fbb2:	f7f8 f857 	bl	8017c64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fbb6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801fbba:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801fbbe:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801fbc2:	f8d8 0000 	ldr.w	r0, [r8]
 801fbc6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fbca:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801fbce:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801fbd2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801fbd6:	440c      	add	r4, r1
 801fbd8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801fbdc:	440a      	add	r2, r1
 801fbde:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801fbe2:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801fbe6:	4413      	add	r3, r2
 801fbe8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801fbec:	6803      	ldr	r3, [r0, #0]
 801fbee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fbf0:	4798      	blx	r3
 801fbf2:	2dff      	cmp	r5, #255	; 0xff
 801fbf4:	d124      	bne.n	801fc40 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801fbf6:	f010 0f01 	tst.w	r0, #1
 801fbfa:	f8d8 0000 	ldr.w	r0, [r8]
 801fbfe:	d022      	beq.n	801fc46 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801fc00:	2100      	movs	r1, #0
 801fc02:	f04f 0e01 	mov.w	lr, #1
 801fc06:	f8d0 c000 	ldr.w	ip, [r0]
 801fc0a:	b2b6      	uxth	r6, r6
 801fc0c:	f8cd e018 	str.w	lr, [sp, #24]
 801fc10:	b2bf      	uxth	r7, r7
 801fc12:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801fc16:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801fc1a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801fc1e:	f8b9 e000 	ldrh.w	lr, [r9]
 801fc22:	9503      	str	r5, [sp, #12]
 801fc24:	9601      	str	r6, [sp, #4]
 801fc26:	9700      	str	r7, [sp, #0]
 801fc28:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801fc2c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801fc30:	9102      	str	r1, [sp, #8]
 801fc32:	4621      	mov	r1, r4
 801fc34:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801fc38:	47a8      	blx	r5
 801fc3a:	b00e      	add	sp, #56	; 0x38
 801fc3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fc40:	f010 0f04 	tst.w	r0, #4
 801fc44:	e7d9      	b.n	801fbfa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801fc46:	6803      	ldr	r3, [r0, #0]
 801fc48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fc4a:	4798      	blx	r3
 801fc4c:	f8b9 3000 	ldrh.w	r3, [r9]
 801fc50:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801fc54:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801fc58:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801fc5c:	435e      	muls	r6, r3
 801fc5e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801fc62:	2dff      	cmp	r5, #255	; 0xff
 801fc64:	fb03 1202 	mla	r2, r3, r2, r1
 801fc68:	ebac 0c07 	sub.w	ip, ip, r7
 801fc6c:	eba3 0707 	sub.w	r7, r3, r7
 801fc70:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801fc74:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801fc78:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801fc7c:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801fc80:	d049      	beq.n	801fd16 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801fc82:	43eb      	mvns	r3, r5
 801fc84:	fa1f f985 	uxth.w	r9, r5
 801fc88:	b2db      	uxtb	r3, r3
 801fc8a:	42b0      	cmp	r0, r6
 801fc8c:	d266      	bcs.n	801fd5c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801fc8e:	eb00 0a0e 	add.w	sl, r0, lr
 801fc92:	4550      	cmp	r0, sl
 801fc94:	4621      	mov	r1, r4
 801fc96:	f104 0403 	add.w	r4, r4, #3
 801fc9a:	d25b      	bcs.n	801fd54 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801fc9c:	8802      	ldrh	r2, [r0, #0]
 801fc9e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801fca2:	ea4f 2822 	mov.w	r8, r2, asr #8
 801fca6:	fb11 f109 	smulbb	r1, r1, r9
 801fcaa:	10d5      	asrs	r5, r2, #3
 801fcac:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801fcb0:	00d2      	lsls	r2, r2, #3
 801fcb2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801fcb6:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801fcba:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801fcbe:	fb08 1803 	mla	r8, r8, r3, r1
 801fcc2:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801fcc6:	b2d2      	uxtb	r2, r2
 801fcc8:	fb11 f109 	smulbb	r1, r1, r9
 801fccc:	fa1f f888 	uxth.w	r8, r8
 801fcd0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801fcd4:	fb05 1503 	mla	r5, r5, r3, r1
 801fcd8:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801fcdc:	fb11 f109 	smulbb	r1, r1, r9
 801fce0:	b2ad      	uxth	r5, r5
 801fce2:	fb02 1203 	mla	r2, r2, r3, r1
 801fce6:	f108 0101 	add.w	r1, r8, #1
 801fcea:	b292      	uxth	r2, r2
 801fcec:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801fcf0:	1c51      	adds	r1, r2, #1
 801fcf2:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801fcf6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801fcfa:	1c69      	adds	r1, r5, #1
 801fcfc:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801fd00:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801fd04:	096d      	lsrs	r5, r5, #5
 801fd06:	ea42 0208 	orr.w	r2, r2, r8
 801fd0a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fd0e:	432a      	orrs	r2, r5
 801fd10:	f820 2b02 	strh.w	r2, [r0], #2
 801fd14:	e7bd      	b.n	801fc92 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801fd16:	4a14      	ldr	r2, [pc, #80]	; (801fd68 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801fd18:	42b0      	cmp	r0, r6
 801fd1a:	d21f      	bcs.n	801fd5c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801fd1c:	eb00 050e 	add.w	r5, r0, lr
 801fd20:	42a8      	cmp	r0, r5
 801fd22:	4621      	mov	r1, r4
 801fd24:	f104 0403 	add.w	r4, r4, #3
 801fd28:	d210      	bcs.n	801fd4c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801fd2a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801fd2e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801fd32:	00db      	lsls	r3, r3, #3
 801fd34:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801fd38:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fd3c:	430b      	orrs	r3, r1
 801fd3e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801fd42:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801fd46:	f820 3b02 	strh.w	r3, [r0], #2
 801fd4a:	e7e9      	b.n	801fd20 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801fd4c:	4438      	add	r0, r7
 801fd4e:	eb01 040c 	add.w	r4, r1, ip
 801fd52:	e7e1      	b.n	801fd18 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801fd54:	4438      	add	r0, r7
 801fd56:	eb01 040c 	add.w	r4, r1, ip
 801fd5a:	e796      	b.n	801fc8a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801fd5c:	4b03      	ldr	r3, [pc, #12]	; (801fd6c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801fd5e:	6818      	ldr	r0, [r3, #0]
 801fd60:	6803      	ldr	r3, [r0, #0]
 801fd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fd64:	4798      	blx	r3
 801fd66:	e768      	b.n	801fc3a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801fd68:	fffff800 	.word	0xfffff800
 801fd6c:	20027ca8 	.word	0x20027ca8
 801fd70:	20027ca2 	.word	0x20027ca2

0801fd74 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801fd74:	b4f0      	push	{r4, r5, r6, r7}
 801fd76:	4616      	mov	r6, r2
 801fd78:	461c      	mov	r4, r3
 801fd7a:	460d      	mov	r5, r1
 801fd7c:	9a04      	ldr	r2, [sp, #16]
 801fd7e:	2e01      	cmp	r6, #1
 801fd80:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801fd84:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801fd88:	d012      	beq.n	801fdb0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801fd8a:	d303      	bcc.n	801fd94 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801fd8c:	2e02      	cmp	r6, #2
 801fd8e:	d00a      	beq.n	801fda6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801fd90:	bcf0      	pop	{r4, r5, r6, r7}
 801fd92:	4770      	bx	lr
 801fd94:	6805      	ldr	r5, [r0, #0]
 801fd96:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801fd9a:	68ed      	ldr	r5, [r5, #12]
 801fd9c:	4613      	mov	r3, r2
 801fd9e:	4622      	mov	r2, r4
 801fda0:	46ac      	mov	ip, r5
 801fda2:	bcf0      	pop	{r4, r5, r6, r7}
 801fda4:	4760      	bx	ip
 801fda6:	4621      	mov	r1, r4
 801fda8:	4628      	mov	r0, r5
 801fdaa:	bcf0      	pop	{r4, r5, r6, r7}
 801fdac:	f7ff bd94 	b.w	801f8d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801fdb0:	4621      	mov	r1, r4
 801fdb2:	4628      	mov	r0, r5
 801fdb4:	bcf0      	pop	{r4, r5, r6, r7}
 801fdb6:	f7ff bee5 	b.w	801fb84 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801fdbc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801fdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdc0:	b093      	sub	sp, #76	; 0x4c
 801fdc2:	4681      	mov	r9, r0
 801fdc4:	4688      	mov	r8, r1
 801fdc6:	6810      	ldr	r0, [r2, #0]
 801fdc8:	6851      	ldr	r1, [r2, #4]
 801fdca:	ac0e      	add	r4, sp, #56	; 0x38
 801fdcc:	4616      	mov	r6, r2
 801fdce:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801fdd2:	4f6b      	ldr	r7, [pc, #428]	; (801ff80 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801fdd4:	c403      	stmia	r4!, {r0, r1}
 801fdd6:	6818      	ldr	r0, [r3, #0]
 801fdd8:	ac10      	add	r4, sp, #64	; 0x40
 801fdda:	6859      	ldr	r1, [r3, #4]
 801fddc:	c403      	stmia	r4!, {r0, r1}
 801fdde:	a80e      	add	r0, sp, #56	; 0x38
 801fde0:	f7f7 fefc 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fde4:	4631      	mov	r1, r6
 801fde6:	a810      	add	r0, sp, #64	; 0x40
 801fde8:	4e66      	ldr	r6, [pc, #408]	; (801ff84 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801fdea:	f7f7 ff3b 	bl	8017c64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fdee:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801fdf2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801fdf6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801fdfa:	6830      	ldr	r0, [r6, #0]
 801fdfc:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fe00:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801fe04:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801fe08:	4489      	add	r9, r1
 801fe0a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801fe0e:	440a      	add	r2, r1
 801fe10:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801fe14:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801fe18:	4413      	add	r3, r2
 801fe1a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801fe1e:	6803      	ldr	r3, [r0, #0]
 801fe20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fe22:	4798      	blx	r3
 801fe24:	f010 0f80 	tst.w	r0, #128	; 0x80
 801fe28:	6830      	ldr	r0, [r6, #0]
 801fe2a:	d01d      	beq.n	801fe68 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801fe2c:	2200      	movs	r2, #0
 801fe2e:	6801      	ldr	r1, [r0, #0]
 801fe30:	b2a4      	uxth	r4, r4
 801fe32:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801fe36:	b2ad      	uxth	r5, r5
 801fe38:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801fe3c:	220b      	movs	r2, #11
 801fe3e:	9207      	str	r2, [sp, #28]
 801fe40:	883a      	ldrh	r2, [r7, #0]
 801fe42:	9502      	str	r5, [sp, #8]
 801fe44:	9206      	str	r2, [sp, #24]
 801fe46:	2201      	movs	r2, #1
 801fe48:	9401      	str	r4, [sp, #4]
 801fe4a:	e9cd a204 	strd	sl, r2, [sp, #16]
 801fe4e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801fe52:	9203      	str	r2, [sp, #12]
 801fe54:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801fe58:	9200      	str	r2, [sp, #0]
 801fe5a:	4642      	mov	r2, r8
 801fe5c:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801fe5e:	4649      	mov	r1, r9
 801fe60:	47a0      	blx	r4
 801fe62:	b013      	add	sp, #76	; 0x4c
 801fe64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe68:	6803      	ldr	r3, [r0, #0]
 801fe6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fe6c:	4798      	blx	r3
 801fe6e:	883b      	ldrh	r3, [r7, #0]
 801fe70:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801fe74:	f04f 0e04 	mov.w	lr, #4
 801fe78:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801fe7c:	435d      	muls	r5, r3
 801fe7e:	fb03 1202 	mla	r2, r3, r2, r1
 801fe82:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801fe86:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801fe8a:	920c      	str	r2, [sp, #48]	; 0x30
 801fe8c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801fe90:	1b12      	subs	r2, r2, r4
 801fe92:	920d      	str	r2, [sp, #52]	; 0x34
 801fe94:	0062      	lsls	r2, r4, #1
 801fe96:	1b1c      	subs	r4, r3, r4
 801fe98:	920a      	str	r2, [sp, #40]	; 0x28
 801fe9a:	0063      	lsls	r3, r4, #1
 801fe9c:	930b      	str	r3, [sp, #44]	; 0x2c
 801fe9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fea0:	4298      	cmp	r0, r3
 801fea2:	d266      	bcs.n	801ff72 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801fea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fea6:	eb00 0b03 	add.w	fp, r0, r3
 801feaa:	4558      	cmp	r0, fp
 801feac:	d25c      	bcs.n	801ff68 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801feae:	f819 3b01 	ldrb.w	r3, [r9], #1
 801feb2:	fb1e e303 	smlabb	r3, lr, r3, lr
 801feb6:	f858 2003 	ldr.w	r2, [r8, r3]
 801feba:	0e11      	lsrs	r1, r2, #24
 801febc:	d012      	beq.n	801fee4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801febe:	29ff      	cmp	r1, #255	; 0xff
 801fec0:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801fec4:	d110      	bne.n	801fee8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801fec6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801feca:	d10d      	bne.n	801fee8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801fecc:	0953      	lsrs	r3, r2, #5
 801fece:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801fed2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801fed6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801feda:	f027 0707 	bic.w	r7, r7, #7
 801fede:	431f      	orrs	r7, r3
 801fee0:	433a      	orrs	r2, r7
 801fee2:	8002      	strh	r2, [r0, #0]
 801fee4:	3002      	adds	r0, #2
 801fee6:	e7e0      	b.n	801feaa <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801fee8:	fb0a f101 	mul.w	r1, sl, r1
 801feec:	8806      	ldrh	r6, [r0, #0]
 801feee:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801fef2:	b2d2      	uxtb	r2, r2
 801fef4:	1c4b      	adds	r3, r1, #1
 801fef6:	1235      	asrs	r5, r6, #8
 801fef8:	10f4      	asrs	r4, r6, #3
 801fefa:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801fefe:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801ff02:	00f6      	lsls	r6, r6, #3
 801ff04:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801ff08:	121b      	asrs	r3, r3, #8
 801ff0a:	b2f6      	uxtb	r6, r6
 801ff0c:	b299      	uxth	r1, r3
 801ff0e:	43db      	mvns	r3, r3
 801ff10:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801ff14:	fb1c fc01 	smulbb	ip, ip, r1
 801ff18:	b2db      	uxtb	r3, r3
 801ff1a:	fb12 f201 	smulbb	r2, r2, r1
 801ff1e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801ff22:	fb05 c503 	mla	r5, r5, r3, ip
 801ff26:	b2ff      	uxtb	r7, r7
 801ff28:	fb06 2203 	mla	r2, r6, r3, r2
 801ff2c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801ff30:	fb17 f701 	smulbb	r7, r7, r1
 801ff34:	b2ad      	uxth	r5, r5
 801ff36:	b292      	uxth	r2, r2
 801ff38:	fb04 7403 	mla	r4, r4, r3, r7
 801ff3c:	f105 0c01 	add.w	ip, r5, #1
 801ff40:	1c57      	adds	r7, r2, #1
 801ff42:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801ff46:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801ff4a:	b2a4      	uxth	r4, r4
 801ff4c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801ff50:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801ff54:	433d      	orrs	r5, r7
 801ff56:	1c67      	adds	r7, r4, #1
 801ff58:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801ff5c:	0964      	lsrs	r4, r4, #5
 801ff5e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801ff62:	4325      	orrs	r5, r4
 801ff64:	8005      	strh	r5, [r0, #0]
 801ff66:	e7bd      	b.n	801fee4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801ff68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ff6a:	4418      	add	r0, r3
 801ff6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ff6e:	4499      	add	r9, r3
 801ff70:	e795      	b.n	801fe9e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801ff72:	4b04      	ldr	r3, [pc, #16]	; (801ff84 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801ff74:	6818      	ldr	r0, [r3, #0]
 801ff76:	6803      	ldr	r3, [r0, #0]
 801ff78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ff7a:	4798      	blx	r3
 801ff7c:	e771      	b.n	801fe62 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801ff7e:	bf00      	nop
 801ff80:	20027ca2 	.word	0x20027ca2
 801ff84:	20027ca8 	.word	0x20027ca8

0801ff88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801ff88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff8c:	b087      	sub	sp, #28
 801ff8e:	4680      	mov	r8, r0
 801ff90:	460d      	mov	r5, r1
 801ff92:	4614      	mov	r4, r2
 801ff94:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801ff98:	2e00      	cmp	r6, #0
 801ff9a:	f000 80b9 	beq.w	8020110 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801ff9e:	6810      	ldr	r0, [r2, #0]
 801ffa0:	af02      	add	r7, sp, #8
 801ffa2:	6851      	ldr	r1, [r2, #4]
 801ffa4:	c703      	stmia	r7!, {r0, r1}
 801ffa6:	6818      	ldr	r0, [r3, #0]
 801ffa8:	af04      	add	r7, sp, #16
 801ffaa:	6859      	ldr	r1, [r3, #4]
 801ffac:	c703      	stmia	r7!, {r0, r1}
 801ffae:	a802      	add	r0, sp, #8
 801ffb0:	f7f7 fe14 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ffb4:	4621      	mov	r1, r4
 801ffb6:	a804      	add	r0, sp, #16
 801ffb8:	f7f7 fe54 	bl	8017c64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ffbc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801ffc0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801ffc4:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801ffc8:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801ffcc:	fb14 2103 	smlabb	r1, r4, r3, r2
 801ffd0:	eb08 0401 	add.w	r4, r8, r1
 801ffd4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801ffd8:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801ffdc:	440a      	add	r2, r1
 801ffde:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801ffe2:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ffe6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801ffea:	4413      	add	r3, r2
 801ffec:	f8ad 3012 	strh.w	r3, [sp, #18]
 801fff0:	4b49      	ldr	r3, [pc, #292]	; (8020118 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801fff2:	6818      	ldr	r0, [r3, #0]
 801fff4:	6803      	ldr	r3, [r0, #0]
 801fff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fff8:	4798      	blx	r3
 801fffa:	4b48      	ldr	r3, [pc, #288]	; (802011c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801fffc:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8020000:	2eff      	cmp	r6, #255	; 0xff
 8020002:	881a      	ldrh	r2, [r3, #0]
 8020004:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8020008:	fb02 c101 	mla	r1, r2, r1, ip
 802000c:	fb02 f207 	mul.w	r2, r2, r7
 8020010:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8020014:	f105 0104 	add.w	r1, r5, #4
 8020018:	461d      	mov	r5, r3
 802001a:	d05a      	beq.n	80200d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 802001c:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8020020:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8020024:	b2b6      	uxth	r6, r6
 8020026:	9301      	str	r3, [sp, #4]
 8020028:	fa1f fe8e 	uxth.w	lr, lr
 802002c:	4282      	cmp	r2, r0
 802002e:	d96a      	bls.n	8020106 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8020030:	eb00 0b0a 	add.w	fp, r0, sl
 8020034:	4583      	cmp	fp, r0
 8020036:	d940      	bls.n	80200ba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8020038:	8805      	ldrh	r5, [r0, #0]
 802003a:	f814 3b01 	ldrb.w	r3, [r4], #1
 802003e:	122f      	asrs	r7, r5, #8
 8020040:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8020044:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8020048:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802004c:	00ed      	lsls	r5, r5, #3
 802004e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8020052:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8020056:	fb17 f70e 	smulbb	r7, r7, lr
 802005a:	b2ed      	uxtb	r5, r5
 802005c:	fb19 f90e 	smulbb	r9, r9, lr
 8020060:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020064:	fb15 f50e 	smulbb	r5, r5, lr
 8020068:	fb0c 7c06 	mla	ip, ip, r6, r7
 802006c:	10df      	asrs	r7, r3, #3
 802006e:	00db      	lsls	r3, r3, #3
 8020070:	fa1f fc8c 	uxth.w	ip, ip
 8020074:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020078:	b2db      	uxtb	r3, r3
 802007a:	fb07 9706 	mla	r7, r7, r6, r9
 802007e:	f10c 0901 	add.w	r9, ip, #1
 8020082:	fb03 5306 	mla	r3, r3, r6, r5
 8020086:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 802008a:	b29b      	uxth	r3, r3
 802008c:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8020090:	b2bf      	uxth	r7, r7
 8020092:	f103 0c01 	add.w	ip, r3, #1
 8020096:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802009a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802009e:	ea4c 0c09 	orr.w	ip, ip, r9
 80200a2:	f107 0901 	add.w	r9, r7, #1
 80200a6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80200aa:	097f      	lsrs	r7, r7, #5
 80200ac:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80200b0:	ea4c 0c07 	orr.w	ip, ip, r7
 80200b4:	f820 cb02 	strh.w	ip, [r0], #2
 80200b8:	e7bc      	b.n	8020034 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 80200ba:	9b01      	ldr	r3, [sp, #4]
 80200bc:	881b      	ldrh	r3, [r3, #0]
 80200be:	eba3 0308 	sub.w	r3, r3, r8
 80200c2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80200c6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80200ca:	eba3 0308 	sub.w	r3, r3, r8
 80200ce:	441c      	add	r4, r3
 80200d0:	e7ac      	b.n	802002c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 80200d2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80200d6:	4282      	cmp	r2, r0
 80200d8:	d915      	bls.n	8020106 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 80200da:	eb00 060a 	add.w	r6, r0, sl
 80200de:	4286      	cmp	r6, r0
 80200e0:	d906      	bls.n	80200f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 80200e2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80200e6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80200ea:	f820 3b02 	strh.w	r3, [r0], #2
 80200ee:	e7f6      	b.n	80200de <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 80200f0:	882b      	ldrh	r3, [r5, #0]
 80200f2:	eba3 0308 	sub.w	r3, r3, r8
 80200f6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80200fa:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80200fe:	eba3 0308 	sub.w	r3, r3, r8
 8020102:	441c      	add	r4, r3
 8020104:	e7e7      	b.n	80200d6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8020106:	4b04      	ldr	r3, [pc, #16]	; (8020118 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8020108:	6818      	ldr	r0, [r3, #0]
 802010a:	6803      	ldr	r3, [r0, #0]
 802010c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802010e:	4798      	blx	r3
 8020110:	b007      	add	sp, #28
 8020112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020116:	bf00      	nop
 8020118:	20027ca8 	.word	0x20027ca8
 802011c:	20027ca2 	.word	0x20027ca2

08020120 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8020120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020124:	b091      	sub	sp, #68	; 0x44
 8020126:	4680      	mov	r8, r0
 8020128:	460f      	mov	r7, r1
 802012a:	4614      	mov	r4, r2
 802012c:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8020130:	2d00      	cmp	r5, #0
 8020132:	d051      	beq.n	80201d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8020134:	6810      	ldr	r0, [r2, #0]
 8020136:	ae0c      	add	r6, sp, #48	; 0x30
 8020138:	6851      	ldr	r1, [r2, #4]
 802013a:	f8df 9200 	ldr.w	r9, [pc, #512]	; 802033c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 802013e:	c603      	stmia	r6!, {r0, r1}
 8020140:	6818      	ldr	r0, [r3, #0]
 8020142:	ae0e      	add	r6, sp, #56	; 0x38
 8020144:	6859      	ldr	r1, [r3, #4]
 8020146:	c603      	stmia	r6!, {r0, r1}
 8020148:	a80c      	add	r0, sp, #48	; 0x30
 802014a:	f7f7 fd47 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802014e:	4621      	mov	r1, r4
 8020150:	a80e      	add	r0, sp, #56	; 0x38
 8020152:	f7f7 fd87 	bl	8017c64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020156:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 802015a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 802015e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8020162:	f8d9 0000 	ldr.w	r0, [r9]
 8020166:	fb11 2103 	smlabb	r1, r1, r3, r2
 802016a:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 802016e:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8020172:	eb08 0401 	add.w	r4, r8, r1
 8020176:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 802017a:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8020340 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 802017e:	440a      	add	r2, r1
 8020180:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8020184:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8020188:	4413      	add	r3, r2
 802018a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 802018e:	6803      	ldr	r3, [r0, #0]
 8020190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020192:	4798      	blx	r3
 8020194:	f010 0f80 	tst.w	r0, #128	; 0x80
 8020198:	f8d9 0000 	ldr.w	r0, [r9]
 802019c:	d01f      	beq.n	80201de <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 802019e:	2200      	movs	r2, #0
 80201a0:	6801      	ldr	r1, [r0, #0]
 80201a2:	b2b6      	uxth	r6, r6
 80201a4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80201a8:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80201ac:	220b      	movs	r2, #11
 80201ae:	9207      	str	r2, [sp, #28]
 80201b0:	f8b8 2000 	ldrh.w	r2, [r8]
 80201b4:	9601      	str	r6, [sp, #4]
 80201b6:	9206      	str	r2, [sp, #24]
 80201b8:	2201      	movs	r2, #1
 80201ba:	e9cd 5204 	strd	r5, r2, [sp, #16]
 80201be:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80201c2:	9203      	str	r2, [sp, #12]
 80201c4:	fa1f f28a 	uxth.w	r2, sl
 80201c8:	9202      	str	r2, [sp, #8]
 80201ca:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80201ce:	9200      	str	r2, [sp, #0]
 80201d0:	463a      	mov	r2, r7
 80201d2:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 80201d4:	4621      	mov	r1, r4
 80201d6:	47a8      	blx	r5
 80201d8:	b011      	add	sp, #68	; 0x44
 80201da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201de:	6803      	ldr	r3, [r0, #0]
 80201e0:	ea4f 0946 	mov.w	r9, r6, lsl #1
 80201e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80201e6:	4798      	blx	r3
 80201e8:	f8b8 2000 	ldrh.w	r2, [r8]
 80201ec:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80201f0:	2dff      	cmp	r5, #255	; 0xff
 80201f2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 80201f6:	fb0a fa02 	mul.w	sl, sl, r2
 80201fa:	fb02 1303 	mla	r3, r2, r3, r1
 80201fe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020202:	d062      	beq.n	80202ca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8020204:	ea6f 0c05 	mvn.w	ip, r5
 8020208:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 802020c:	b2ad      	uxth	r5, r5
 802020e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8020212:	fa5f fc8c 	uxtb.w	ip, ip
 8020216:	930a      	str	r3, [sp, #40]	; 0x28
 8020218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802021a:	4298      	cmp	r0, r3
 802021c:	f080 8085 	bcs.w	802032a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8020220:	eb00 0b09 	add.w	fp, r0, r9
 8020224:	4558      	cmp	r0, fp
 8020226:	d246      	bcs.n	80202b6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8020228:	f814 eb01 	ldrb.w	lr, [r4], #1
 802022c:	2303      	movs	r3, #3
 802022e:	2204      	movs	r2, #4
 8020230:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8020234:	8803      	ldrh	r3, [r0, #0]
 8020236:	eb07 0a0e 	add.w	sl, r7, lr
 802023a:	1219      	asrs	r1, r3, #8
 802023c:	10da      	asrs	r2, r3, #3
 802023e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8020242:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8020246:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802024a:	00db      	lsls	r3, r3, #3
 802024c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020250:	fb18 f805 	smulbb	r8, r8, r5
 8020254:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8020258:	fb1e fe05 	smulbb	lr, lr, r5
 802025c:	b2db      	uxtb	r3, r3
 802025e:	fb01 810c 	mla	r1, r1, ip, r8
 8020262:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8020266:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 802026a:	fb18 f805 	smulbb	r8, r8, r5
 802026e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8020272:	b289      	uxth	r1, r1
 8020274:	fb02 820c 	mla	r2, r2, ip, r8
 8020278:	fb03 e30c 	mla	r3, r3, ip, lr
 802027c:	f101 0801 	add.w	r8, r1, #1
 8020280:	b292      	uxth	r2, r2
 8020282:	b29b      	uxth	r3, r3
 8020284:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8020288:	f102 0801 	add.w	r8, r2, #1
 802028c:	f103 0e01 	add.w	lr, r3, #1
 8020290:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8020294:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8020298:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 802029c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80202a0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80202a4:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80202a8:	ea4e 0101 	orr.w	r1, lr, r1
 80202ac:	ea41 0108 	orr.w	r1, r1, r8
 80202b0:	f820 1b02 	strh.w	r1, [r0], #2
 80202b4:	e7b6      	b.n	8020224 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 80202b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80202b8:	881b      	ldrh	r3, [r3, #0]
 80202ba:	1b9b      	subs	r3, r3, r6
 80202bc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80202c0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80202c4:	1b9b      	subs	r3, r3, r6
 80202c6:	441c      	add	r4, r3
 80202c8:	e7a6      	b.n	8020218 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 80202ca:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 80202ce:	2203      	movs	r2, #3
 80202d0:	2504      	movs	r5, #4
 80202d2:	4919      	ldr	r1, [pc, #100]	; (8020338 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 80202d4:	4550      	cmp	r0, sl
 80202d6:	d228      	bcs.n	802032a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 80202d8:	eb00 0c09 	add.w	ip, r0, r9
 80202dc:	4560      	cmp	r0, ip
 80202de:	4623      	mov	r3, r4
 80202e0:	d219      	bcs.n	8020316 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 80202e2:	f893 e000 	ldrb.w	lr, [r3]
 80202e6:	3401      	adds	r4, #1
 80202e8:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 80202ec:	eb07 0b0e 	add.w	fp, r7, lr
 80202f0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80202f4:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80202f8:	f89b b001 	ldrb.w	fp, [fp, #1]
 80202fc:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8020300:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8020304:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020308:	ea43 030b 	orr.w	r3, r3, fp
 802030c:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8020310:	f820 3b02 	strh.w	r3, [r0], #2
 8020314:	e7e2      	b.n	80202dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8020316:	f8b8 3000 	ldrh.w	r3, [r8]
 802031a:	1b9b      	subs	r3, r3, r6
 802031c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020320:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020324:	1b9b      	subs	r3, r3, r6
 8020326:	441c      	add	r4, r3
 8020328:	e7d4      	b.n	80202d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 802032a:	4b04      	ldr	r3, [pc, #16]	; (802033c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 802032c:	6818      	ldr	r0, [r3, #0]
 802032e:	6803      	ldr	r3, [r0, #0]
 8020330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020332:	4798      	blx	r3
 8020334:	e750      	b.n	80201d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8020336:	bf00      	nop
 8020338:	fffff800 	.word	0xfffff800
 802033c:	20027ca8 	.word	0x20027ca8
 8020340:	20027ca2 	.word	0x20027ca2

08020344 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8020344:	b4f0      	push	{r4, r5, r6, r7}
 8020346:	460c      	mov	r4, r1
 8020348:	4611      	mov	r1, r2
 802034a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802034e:	461a      	mov	r2, r3
 8020350:	780f      	ldrb	r7, [r1, #0]
 8020352:	9b04      	ldr	r3, [sp, #16]
 8020354:	2f01      	cmp	r7, #1
 8020356:	784e      	ldrb	r6, [r1, #1]
 8020358:	d036      	beq.n	80203c8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x84>
 802035a:	d31e      	bcc.n	802039a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x56>
 802035c:	2f02      	cmp	r7, #2
 802035e:	d14a      	bne.n	80203f6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8020360:	2e03      	cmp	r6, #3
 8020362:	d848      	bhi.n	80203f6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8020364:	e8df f006 	tbb	[pc, r6]
 8020368:	16140702 	.word	0x16140702
 802036c:	9504      	str	r5, [sp, #16]
 802036e:	4620      	mov	r0, r4
 8020370:	bcf0      	pop	{r4, r5, r6, r7}
 8020372:	f7ff be09 	b.w	801ff88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8020376:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8020378:	2800      	cmp	r0, #0
 802037a:	d03c      	beq.n	80203f6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 802037c:	6806      	ldr	r6, [r0, #0]
 802037e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8020382:	68b5      	ldr	r5, [r6, #8]
 8020384:	4613      	mov	r3, r2
 8020386:	46ac      	mov	ip, r5
 8020388:	460a      	mov	r2, r1
 802038a:	4621      	mov	r1, r4
 802038c:	bcf0      	pop	{r4, r5, r6, r7}
 802038e:	4760      	bx	ip
 8020390:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8020392:	e7f1      	b.n	8020378 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8020394:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8020398:	e7ee      	b.n	8020378 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 802039a:	2e03      	cmp	r6, #3
 802039c:	d82b      	bhi.n	80203f6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 802039e:	e8df f006 	tbb	[pc, r6]
 80203a2:	0702      	.short	0x0702
 80203a4:	100e      	.short	0x100e
 80203a6:	9504      	str	r5, [sp, #16]
 80203a8:	4620      	mov	r0, r4
 80203aa:	bcf0      	pop	{r4, r5, r6, r7}
 80203ac:	f7ff bd06 	b.w	801fdbc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80203b0:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80203b2:	b300      	cbz	r0, 80203f6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 80203b4:	6806      	ldr	r6, [r0, #0]
 80203b6:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80203ba:	68f5      	ldr	r5, [r6, #12]
 80203bc:	e7e2      	b.n	8020384 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80203be:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 80203c0:	e7f7      	b.n	80203b2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 80203c2:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80203c6:	e7f4      	b.n	80203b2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 80203c8:	2e03      	cmp	r6, #3
 80203ca:	d814      	bhi.n	80203f6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 80203cc:	e8df f006 	tbb	[pc, r6]
 80203d0:	100e0702 	.word	0x100e0702
 80203d4:	9504      	str	r5, [sp, #16]
 80203d6:	4620      	mov	r0, r4
 80203d8:	bcf0      	pop	{r4, r5, r6, r7}
 80203da:	f7ff bea1 	b.w	8020120 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80203de:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80203e0:	b148      	cbz	r0, 80203f6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 80203e2:	6806      	ldr	r6, [r0, #0]
 80203e4:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80203e8:	6935      	ldr	r5, [r6, #16]
 80203ea:	e7cb      	b.n	8020384 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80203ec:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 80203ee:	e7f7      	b.n	80203e0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 80203f0:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80203f4:	e7f4      	b.n	80203e0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 80203f6:	bcf0      	pop	{r4, r5, r6, r7}
 80203f8:	4770      	bx	lr
	...

080203fc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 80203fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020400:	b087      	sub	sp, #28
 8020402:	4604      	mov	r4, r0
 8020404:	460e      	mov	r6, r1
 8020406:	6810      	ldr	r0, [r2, #0]
 8020408:	6851      	ldr	r1, [r2, #4]
 802040a:	ad02      	add	r5, sp, #8
 802040c:	4617      	mov	r7, r2
 802040e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8020412:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8020644 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8020416:	c503      	stmia	r5!, {r0, r1}
 8020418:	6818      	ldr	r0, [r3, #0]
 802041a:	ad04      	add	r5, sp, #16
 802041c:	6859      	ldr	r1, [r3, #4]
 802041e:	c503      	stmia	r5!, {r0, r1}
 8020420:	a802      	add	r0, sp, #8
 8020422:	f7f7 fbdb 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020426:	4639      	mov	r1, r7
 8020428:	a804      	add	r0, sp, #16
 802042a:	f7f7 fc1b 	bl	8017c64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802042e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020432:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020436:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 802043a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 802043e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020442:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8020446:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 802044a:	440e      	add	r6, r1
 802044c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8020450:	440a      	add	r2, r1
 8020452:	f8ad 2010 	strh.w	r2, [sp, #16]
 8020456:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802045a:	4413      	add	r3, r2
 802045c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8020460:	4b77      	ldr	r3, [pc, #476]	; (8020640 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8020462:	6818      	ldr	r0, [r3, #0]
 8020464:	6803      	ldr	r3, [r0, #0]
 8020466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020468:	4798      	blx	r3
 802046a:	f8b9 b000 	ldrh.w	fp, [r9]
 802046e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020472:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020476:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802047a:	fb05 f50b 	mul.w	r5, r5, fp
 802047e:	fb0b 2303 	mla	r3, fp, r3, r2
 8020482:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020486:	ea4f 0348 	mov.w	r3, r8, lsl #1
 802048a:	9300      	str	r3, [sp, #0]
 802048c:	d069      	beq.n	8020562 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 802048e:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8020492:	4558      	cmp	r0, fp
 8020494:	f080 80cc 	bcs.w	8020630 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8020498:	9b00      	ldr	r3, [sp, #0]
 802049a:	4631      	mov	r1, r6
 802049c:	18c3      	adds	r3, r0, r3
 802049e:	9301      	str	r3, [sp, #4]
 80204a0:	9b01      	ldr	r3, [sp, #4]
 80204a2:	4298      	cmp	r0, r3
 80204a4:	d24f      	bcs.n	8020546 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 80204a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80204aa:	2a00      	cmp	r2, #0
 80204ac:	d048      	beq.n	8020540 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80204ae:	fb0a f202 	mul.w	r2, sl, r2
 80204b2:	1c53      	adds	r3, r2, #1
 80204b4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80204b8:	121b      	asrs	r3, r3, #8
 80204ba:	d041      	beq.n	8020540 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80204bc:	8802      	ldrh	r2, [r0, #0]
 80204be:	b29e      	uxth	r6, r3
 80204c0:	f8b4 c000 	ldrh.w	ip, [r4]
 80204c4:	43db      	mvns	r3, r3
 80204c6:	1215      	asrs	r5, r2, #8
 80204c8:	b2db      	uxtb	r3, r3
 80204ca:	ea4f 272c 	mov.w	r7, ip, asr #8
 80204ce:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80204d2:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 80204d6:	fb15 f503 	smulbb	r5, r5, r3
 80204da:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80204de:	00d2      	lsls	r2, r2, #3
 80204e0:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80204e4:	fb07 5706 	mla	r7, r7, r6, r5
 80204e8:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80204ec:	b2d2      	uxtb	r2, r2
 80204ee:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80204f2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80204f6:	fb1e fe03 	smulbb	lr, lr, r3
 80204fa:	b2bf      	uxth	r7, r7
 80204fc:	fb12 f203 	smulbb	r2, r2, r3
 8020500:	fa5f fc8c 	uxtb.w	ip, ip
 8020504:	fb05 e506 	mla	r5, r5, r6, lr
 8020508:	f107 0e01 	add.w	lr, r7, #1
 802050c:	fb0c 2c06 	mla	ip, ip, r6, r2
 8020510:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8020514:	fa1f fc8c 	uxth.w	ip, ip
 8020518:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 802051c:	b2ad      	uxth	r5, r5
 802051e:	f10c 0701 	add.w	r7, ip, #1
 8020522:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020526:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802052a:	ea47 070e 	orr.w	r7, r7, lr
 802052e:	f105 0e01 	add.w	lr, r5, #1
 8020532:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8020536:	096d      	lsrs	r5, r5, #5
 8020538:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802053c:	432f      	orrs	r7, r5
 802053e:	8007      	strh	r7, [r0, #0]
 8020540:	3002      	adds	r0, #2
 8020542:	3402      	adds	r4, #2
 8020544:	e7ac      	b.n	80204a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8020546:	f8b9 3000 	ldrh.w	r3, [r9]
 802054a:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 802054e:	eba3 0308 	sub.w	r3, r3, r8
 8020552:	eba6 0608 	sub.w	r6, r6, r8
 8020556:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802055a:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 802055e:	440e      	add	r6, r1
 8020560:	e797      	b.n	8020492 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8020562:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8020566:	42a8      	cmp	r0, r5
 8020568:	d262      	bcs.n	8020630 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 802056a:	9b00      	ldr	r3, [sp, #0]
 802056c:	4631      	mov	r1, r6
 802056e:	eb00 0b03 	add.w	fp, r0, r3
 8020572:	4558      	cmp	r0, fp
 8020574:	d24e      	bcs.n	8020614 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8020576:	f811 3b01 	ldrb.w	r3, [r1], #1
 802057a:	b12b      	cbz	r3, 8020588 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 802057c:	2bff      	cmp	r3, #255	; 0xff
 802057e:	f8b4 e000 	ldrh.w	lr, [r4]
 8020582:	d104      	bne.n	802058e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8020584:	f8a0 e000 	strh.w	lr, [r0]
 8020588:	3002      	adds	r0, #2
 802058a:	3402      	adds	r4, #2
 802058c:	e7f1      	b.n	8020572 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 802058e:	8802      	ldrh	r2, [r0, #0]
 8020590:	b29f      	uxth	r7, r3
 8020592:	43db      	mvns	r3, r3
 8020594:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020598:	1216      	asrs	r6, r2, #8
 802059a:	b2db      	uxtb	r3, r3
 802059c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80205a0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80205a4:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 80205a8:	00d2      	lsls	r2, r2, #3
 80205aa:	fb16 f603 	smulbb	r6, r6, r3
 80205ae:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80205b2:	b2d2      	uxtb	r2, r2
 80205b4:	fb0c 6c07 	mla	ip, ip, r7, r6
 80205b8:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80205bc:	fb1a fa03 	smulbb	sl, sl, r3
 80205c0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80205c4:	fa1f fc8c 	uxth.w	ip, ip
 80205c8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80205cc:	fb12 f303 	smulbb	r3, r2, r3
 80205d0:	fa5f fe8e 	uxtb.w	lr, lr
 80205d4:	fb06 a607 	mla	r6, r6, r7, sl
 80205d8:	f10c 0201 	add.w	r2, ip, #1
 80205dc:	fb0e 3307 	mla	r3, lr, r7, r3
 80205e0:	b2b6      	uxth	r6, r6
 80205e2:	b29b      	uxth	r3, r3
 80205e4:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80205e8:	f106 0a01 	add.w	sl, r6, #1
 80205ec:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 80205f0:	f103 0c01 	add.w	ip, r3, #1
 80205f4:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 80205f8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80205fc:	0976      	lsrs	r6, r6, #5
 80205fe:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8020602:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020606:	ea4c 0c02 	orr.w	ip, ip, r2
 802060a:	ea4c 0c06 	orr.w	ip, ip, r6
 802060e:	f8a0 c000 	strh.w	ip, [r0]
 8020612:	e7b9      	b.n	8020588 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8020614:	f8b9 3000 	ldrh.w	r3, [r9]
 8020618:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 802061c:	eba3 0308 	sub.w	r3, r3, r8
 8020620:	eba6 0608 	sub.w	r6, r6, r8
 8020624:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020628:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 802062c:	440e      	add	r6, r1
 802062e:	e79a      	b.n	8020566 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8020630:	4b03      	ldr	r3, [pc, #12]	; (8020640 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8020632:	6818      	ldr	r0, [r3, #0]
 8020634:	6803      	ldr	r3, [r0, #0]
 8020636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020638:	4798      	blx	r3
 802063a:	b007      	add	sp, #28
 802063c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020640:	20027ca8 	.word	0x20027ca8
 8020644:	20027ca2 	.word	0x20027ca2

08020648 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8020648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802064c:	b089      	sub	sp, #36	; 0x24
 802064e:	4682      	mov	sl, r0
 8020650:	460f      	mov	r7, r1
 8020652:	4691      	mov	r9, r2
 8020654:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8020658:	4698      	mov	r8, r3
 802065a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802065c:	2e00      	cmp	r6, #0
 802065e:	d03d      	beq.n	80206dc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8020660:	4608      	mov	r0, r1
 8020662:	f7fa fe4b 	bl	801b2fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020666:	4605      	mov	r5, r0
 8020668:	4638      	mov	r0, r7
 802066a:	f7fa fe7b 	bl	801b364 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802066e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8020672:	4638      	mov	r0, r7
 8020674:	f8ad 9008 	strh.w	r9, [sp, #8]
 8020678:	f8ad 500c 	strh.w	r5, [sp, #12]
 802067c:	f8ad 800a 	strh.w	r8, [sp, #10]
 8020680:	f7fa ff28 	bl	801b4d4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020684:	4605      	mov	r5, r0
 8020686:	4638      	mov	r0, r7
 8020688:	f7fa ff54 	bl	801b534 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 802068c:	4681      	mov	r9, r0
 802068e:	4638      	mov	r0, r7
 8020690:	f7fa ffa4 	bl	801b5dc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020694:	280b      	cmp	r0, #11
 8020696:	d821      	bhi.n	80206dc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8020698:	e8df f000 	tbb	[pc, r0]
 802069c:	2006aebe 	.word	0x2006aebe
 80206a0:	20202020 	.word	0x20202020
 80206a4:	b5202020 	.word	0xb5202020
 80206a8:	4bb0      	ldr	r3, [pc, #704]	; (802096c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 80206aa:	6818      	ldr	r0, [r3, #0]
 80206ac:	6803      	ldr	r3, [r0, #0]
 80206ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80206b0:	4798      	blx	r3
 80206b2:	2eff      	cmp	r6, #255	; 0xff
 80206b4:	d101      	bne.n	80206ba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 80206b6:	0683      	lsls	r3, r0, #26
 80206b8:	d506      	bpl.n	80206c8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x80>
 80206ba:	4633      	mov	r3, r6
 80206bc:	4622      	mov	r2, r4
 80206be:	a902      	add	r1, sp, #8
 80206c0:	4628      	mov	r0, r5
 80206c2:	f7ff f909 	bl	801f8d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80206c6:	e009      	b.n	80206dc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80206c8:	4638      	mov	r0, r7
 80206ca:	f7fa fecb 	bl	801b464 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80206ce:	b940      	cbnz	r0, 80206e2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 80206d0:	4623      	mov	r3, r4
 80206d2:	aa02      	add	r2, sp, #8
 80206d4:	4629      	mov	r1, r5
 80206d6:	4650      	mov	r0, sl
 80206d8:	f7ff f9e4 	bl	801faa4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 80206dc:	b009      	add	sp, #36	; 0x24
 80206de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206e2:	f10d 0818 	add.w	r8, sp, #24
 80206e6:	4639      	mov	r1, r7
 80206e8:	af04      	add	r7, sp, #16
 80206ea:	4640      	mov	r0, r8
 80206ec:	f7fa fe6e 	bl	801b3cc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80206f0:	e898 0003 	ldmia.w	r8, {r0, r1}
 80206f4:	e887 0003 	stmia.w	r7, {r0, r1}
 80206f8:	4638      	mov	r0, r7
 80206fa:	4621      	mov	r1, r4
 80206fc:	f7f1 fb52 	bl	8011da4 <_ZN8touchgfx4RectaNERKS0_>
 8020700:	4638      	mov	r0, r7
 8020702:	f7f1 fb92 	bl	8011e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 8020706:	2800      	cmp	r0, #0
 8020708:	d1d7      	bne.n	80206ba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 802070a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802070e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8020712:	4293      	cmp	r3, r2
 8020714:	dd12      	ble.n	802073c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf4>
 8020716:	1a9b      	subs	r3, r3, r2
 8020718:	f9b4 0000 	ldrsh.w	r0, [r4]
 802071c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020720:	f8ad 0018 	strh.w	r0, [sp, #24]
 8020724:	4628      	mov	r0, r5
 8020726:	f8ad 201a 	strh.w	r2, [sp, #26]
 802072a:	4642      	mov	r2, r8
 802072c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8020730:	a902      	add	r1, sp, #8
 8020732:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020736:	4633      	mov	r3, r6
 8020738:	f7ff f8ce 	bl	801f8d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802073c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8020740:	f9b4 2000 	ldrsh.w	r2, [r4]
 8020744:	4293      	cmp	r3, r2
 8020746:	dd12      	ble.n	802076e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x126>
 8020748:	1a9b      	subs	r3, r3, r2
 802074a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 802074e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8020752:	f8ad 2018 	strh.w	r2, [sp, #24]
 8020756:	4642      	mov	r2, r8
 8020758:	f8ad 001a 	strh.w	r0, [sp, #26]
 802075c:	4628      	mov	r0, r5
 802075e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020762:	23ff      	movs	r3, #255	; 0xff
 8020764:	f8ad 101e 	strh.w	r1, [sp, #30]
 8020768:	a902      	add	r1, sp, #8
 802076a:	f7ff f8b5 	bl	801f8d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802076e:	463b      	mov	r3, r7
 8020770:	aa02      	add	r2, sp, #8
 8020772:	4629      	mov	r1, r5
 8020774:	4650      	mov	r0, sl
 8020776:	f7ff f995 	bl	801faa4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 802077a:	88a2      	ldrh	r2, [r4, #4]
 802077c:	8823      	ldrh	r3, [r4, #0]
 802077e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8020782:	4413      	add	r3, r2
 8020784:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020788:	440a      	add	r2, r1
 802078a:	b29b      	uxth	r3, r3
 802078c:	b292      	uxth	r2, r2
 802078e:	b218      	sxth	r0, r3
 8020790:	b211      	sxth	r1, r2
 8020792:	4288      	cmp	r0, r1
 8020794:	dd12      	ble.n	80207bc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 8020796:	1a9b      	subs	r3, r3, r2
 8020798:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 802079c:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 80207a0:	4642      	mov	r2, r8
 80207a2:	f8ad 1018 	strh.w	r1, [sp, #24]
 80207a6:	a902      	add	r1, sp, #8
 80207a8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80207ac:	23ff      	movs	r3, #255	; 0xff
 80207ae:	f8ad 001e 	strh.w	r0, [sp, #30]
 80207b2:	4628      	mov	r0, r5
 80207b4:	f8ad 601a 	strh.w	r6, [sp, #26]
 80207b8:	f7ff f88e 	bl	801f8d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80207bc:	88e2      	ldrh	r2, [r4, #6]
 80207be:	8863      	ldrh	r3, [r4, #2]
 80207c0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80207c4:	4413      	add	r3, r2
 80207c6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80207ca:	440a      	add	r2, r1
 80207cc:	b29b      	uxth	r3, r3
 80207ce:	b292      	uxth	r2, r2
 80207d0:	b218      	sxth	r0, r3
 80207d2:	b211      	sxth	r1, r2
 80207d4:	4288      	cmp	r0, r1
 80207d6:	dd81      	ble.n	80206dc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80207d8:	1a9b      	subs	r3, r3, r2
 80207da:	f9b4 6000 	ldrsh.w	r6, [r4]
 80207de:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80207e2:	4642      	mov	r2, r8
 80207e4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80207e8:	23ff      	movs	r3, #255	; 0xff
 80207ea:	f8ad 6018 	strh.w	r6, [sp, #24]
 80207ee:	f8ad 101a 	strh.w	r1, [sp, #26]
 80207f2:	f8ad 001c 	strh.w	r0, [sp, #28]
 80207f6:	e762      	b.n	80206be <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 80207f8:	4633      	mov	r3, r6
 80207fa:	4622      	mov	r2, r4
 80207fc:	a902      	add	r1, sp, #8
 80207fe:	4628      	mov	r0, r5
 8020800:	f7ff f9c0 	bl	801fb84 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8020804:	e76a      	b.n	80206dc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8020806:	e9cd 4600 	strd	r4, r6, [sp]
 802080a:	ab02      	add	r3, sp, #8
 802080c:	464a      	mov	r2, r9
 802080e:	4629      	mov	r1, r5
 8020810:	4650      	mov	r0, sl
 8020812:	f7ff fd97 	bl	8020344 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8020816:	e761      	b.n	80206dc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8020818:	4638      	mov	r0, r7
 802081a:	f7fa fe23 	bl	801b464 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 802081e:	b950      	cbnz	r0, 8020836 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ee>
 8020820:	f8da 3000 	ldr.w	r3, [sl]
 8020824:	aa02      	add	r2, sp, #8
 8020826:	4629      	mov	r1, r5
 8020828:	e9cd 6000 	strd	r6, r0, [sp]
 802082c:	4650      	mov	r0, sl
 802082e:	68de      	ldr	r6, [r3, #12]
 8020830:	4623      	mov	r3, r4
 8020832:	47b0      	blx	r6
 8020834:	e752      	b.n	80206dc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8020836:	f10d 0818 	add.w	r8, sp, #24
 802083a:	4639      	mov	r1, r7
 802083c:	af04      	add	r7, sp, #16
 802083e:	4640      	mov	r0, r8
 8020840:	f7fa fdc4 	bl	801b3cc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8020844:	e898 0003 	ldmia.w	r8, {r0, r1}
 8020848:	e887 0003 	stmia.w	r7, {r0, r1}
 802084c:	4638      	mov	r0, r7
 802084e:	4621      	mov	r1, r4
 8020850:	f7f1 faa8 	bl	8011da4 <_ZN8touchgfx4RectaNERKS0_>
 8020854:	4638      	mov	r0, r7
 8020856:	f7f1 fae8 	bl	8011e2a <_ZNK8touchgfx4Rect7isEmptyEv>
 802085a:	b138      	cbz	r0, 802086c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 802085c:	4623      	mov	r3, r4
 802085e:	9600      	str	r6, [sp, #0]
 8020860:	aa02      	add	r2, sp, #8
 8020862:	4649      	mov	r1, r9
 8020864:	4628      	mov	r0, r5
 8020866:	f7ff fdc9 	bl	80203fc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802086a:	e737      	b.n	80206dc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802086c:	f8da 3000 	ldr.w	r3, [sl]
 8020870:	aa02      	add	r2, sp, #8
 8020872:	4629      	mov	r1, r5
 8020874:	e9cd 6000 	strd	r6, r0, [sp]
 8020878:	4650      	mov	r0, sl
 802087a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 802087e:	463b      	mov	r3, r7
 8020880:	47d8      	blx	fp
 8020882:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020886:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 802088a:	4293      	cmp	r3, r2
 802088c:	dd13      	ble.n	80208b6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26e>
 802088e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8020892:	1a9b      	subs	r3, r3, r2
 8020894:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020898:	f8ad 0018 	strh.w	r0, [sp, #24]
 802089c:	4628      	mov	r0, r5
 802089e:	f8ad 201a 	strh.w	r2, [sp, #26]
 80208a2:	aa02      	add	r2, sp, #8
 80208a4:	f8ad 101c 	strh.w	r1, [sp, #28]
 80208a8:	4649      	mov	r1, r9
 80208aa:	f8ad 301e 	strh.w	r3, [sp, #30]
 80208ae:	4643      	mov	r3, r8
 80208b0:	9600      	str	r6, [sp, #0]
 80208b2:	f7ff fda3 	bl	80203fc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80208b6:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80208ba:	f9b4 2000 	ldrsh.w	r2, [r4]
 80208be:	4293      	cmp	r3, r2
 80208c0:	dd13      	ble.n	80208ea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a2>
 80208c2:	1a9b      	subs	r3, r3, r2
 80208c4:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80208c8:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80208cc:	f8ad 2018 	strh.w	r2, [sp, #24]
 80208d0:	aa02      	add	r2, sp, #8
 80208d2:	f8ad 001a 	strh.w	r0, [sp, #26]
 80208d6:	4628      	mov	r0, r5
 80208d8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80208dc:	4643      	mov	r3, r8
 80208de:	f8ad 101e 	strh.w	r1, [sp, #30]
 80208e2:	4649      	mov	r1, r9
 80208e4:	9600      	str	r6, [sp, #0]
 80208e6:	f7ff fd89 	bl	80203fc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80208ea:	88a2      	ldrh	r2, [r4, #4]
 80208ec:	8823      	ldrh	r3, [r4, #0]
 80208ee:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80208f2:	4413      	add	r3, r2
 80208f4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80208f8:	440a      	add	r2, r1
 80208fa:	b29b      	uxth	r3, r3
 80208fc:	b292      	uxth	r2, r2
 80208fe:	b218      	sxth	r0, r3
 8020900:	b211      	sxth	r1, r2
 8020902:	4288      	cmp	r0, r1
 8020904:	dd13      	ble.n	802092e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e6>
 8020906:	1a9b      	subs	r3, r3, r2
 8020908:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 802090c:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8020910:	aa02      	add	r2, sp, #8
 8020912:	f8ad 1018 	strh.w	r1, [sp, #24]
 8020916:	4649      	mov	r1, r9
 8020918:	f8ad 301c 	strh.w	r3, [sp, #28]
 802091c:	4643      	mov	r3, r8
 802091e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8020922:	4628      	mov	r0, r5
 8020924:	9600      	str	r6, [sp, #0]
 8020926:	f8ad 701a 	strh.w	r7, [sp, #26]
 802092a:	f7ff fd67 	bl	80203fc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802092e:	88e2      	ldrh	r2, [r4, #6]
 8020930:	8863      	ldrh	r3, [r4, #2]
 8020932:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8020936:	4413      	add	r3, r2
 8020938:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 802093c:	440a      	add	r2, r1
 802093e:	b29b      	uxth	r3, r3
 8020940:	b292      	uxth	r2, r2
 8020942:	b218      	sxth	r0, r3
 8020944:	b211      	sxth	r1, r2
 8020946:	4288      	cmp	r0, r1
 8020948:	f77f aec8 	ble.w	80206dc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802094c:	f9b4 7000 	ldrsh.w	r7, [r4]
 8020950:	1a9b      	subs	r3, r3, r2
 8020952:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8020956:	f8ad 301e 	strh.w	r3, [sp, #30]
 802095a:	4643      	mov	r3, r8
 802095c:	f8ad 7018 	strh.w	r7, [sp, #24]
 8020960:	f8ad 101a 	strh.w	r1, [sp, #26]
 8020964:	f8ad 001c 	strh.w	r0, [sp, #28]
 8020968:	9600      	str	r6, [sp, #0]
 802096a:	e779      	b.n	8020860 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x218>
 802096c:	20027ca8 	.word	0x20027ca8

08020970 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8020970:	b180      	cbz	r0, 8020994 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8020972:	2903      	cmp	r1, #3
 8020974:	d81c      	bhi.n	80209b0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8020976:	e8df f001 	tbb	[pc, r1]
 802097a:	1d02      	.short	0x1d02
 802097c:	1f08      	.short	0x1f08
 802097e:	4b10      	ldr	r3, [pc, #64]	; (80209c0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8020980:	8818      	ldrh	r0, [r3, #0]
 8020982:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8020986:	4240      	negs	r0, r0
 8020988:	4770      	bx	lr
 802098a:	4b0d      	ldr	r3, [pc, #52]	; (80209c0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 802098c:	8818      	ldrh	r0, [r3, #0]
 802098e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8020992:	4770      	bx	lr
 8020994:	2903      	cmp	r1, #3
 8020996:	d80b      	bhi.n	80209b0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8020998:	a301      	add	r3, pc, #4	; (adr r3, 80209a0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 802099a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 802099e:	bf00      	nop
 80209a0:	080209b5 	.word	0x080209b5
 80209a4:	0802098b 	.word	0x0802098b
 80209a8:	080209b9 	.word	0x080209b9
 80209ac:	0802097f 	.word	0x0802097f
 80209b0:	2000      	movs	r0, #0
 80209b2:	4770      	bx	lr
 80209b4:	2001      	movs	r0, #1
 80209b6:	4770      	bx	lr
 80209b8:	f04f 30ff 	mov.w	r0, #4294967295
 80209bc:	4770      	bx	lr
 80209be:	bf00      	nop
 80209c0:	20027ca2 	.word	0x20027ca2

080209c4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 80209c4:	b180      	cbz	r0, 80209e8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 80209c6:	2903      	cmp	r1, #3
 80209c8:	d81c      	bhi.n	8020a04 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 80209ca:	e8df f001 	tbb	[pc, r1]
 80209ce:	021d      	.short	0x021d
 80209d0:	071f      	.short	0x071f
 80209d2:	4b10      	ldr	r3, [pc, #64]	; (8020a14 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80209d4:	8818      	ldrh	r0, [r3, #0]
 80209d6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80209da:	4770      	bx	lr
 80209dc:	4b0d      	ldr	r3, [pc, #52]	; (8020a14 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80209de:	8818      	ldrh	r0, [r3, #0]
 80209e0:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80209e4:	4240      	negs	r0, r0
 80209e6:	4770      	bx	lr
 80209e8:	2903      	cmp	r1, #3
 80209ea:	d80b      	bhi.n	8020a04 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 80209ec:	a301      	add	r3, pc, #4	; (adr r3, 80209f4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 80209ee:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80209f2:	bf00      	nop
 80209f4:	080209d3 	.word	0x080209d3
 80209f8:	08020a0d 	.word	0x08020a0d
 80209fc:	080209dd 	.word	0x080209dd
 8020a00:	08020a09 	.word	0x08020a09
 8020a04:	2000      	movs	r0, #0
 8020a06:	4770      	bx	lr
 8020a08:	2001      	movs	r0, #1
 8020a0a:	4770      	bx	lr
 8020a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8020a10:	4770      	bx	lr
 8020a12:	bf00      	nop
 8020a14:	20027ca2 	.word	0x20027ca2

08020a18 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8020a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a1c:	b099      	sub	sp, #100	; 0x64
 8020a1e:	910b      	str	r1, [sp, #44]	; 0x2c
 8020a20:	a914      	add	r1, sp, #80	; 0x50
 8020a22:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 8020a26:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 8020a2a:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 8020a2e:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8020a32:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8020a36:	e881 000c 	stmia.w	r1, {r2, r3}
 8020a3a:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8020a3e:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8020a42:	9309      	str	r3, [sp, #36]	; 0x24
 8020a44:	f891 900d 	ldrb.w	r9, [r1, #13]
 8020a48:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8020a4c:	ea4f 1749 	mov.w	r7, r9, lsl #5
 8020a50:	9310      	str	r3, [sp, #64]	; 0x40
 8020a52:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8020a56:	930c      	str	r3, [sp, #48]	; 0x30
 8020a58:	f407 7380 	and.w	r3, r7, #256	; 0x100
 8020a5c:	798f      	ldrb	r7, [r1, #6]
 8020a5e:	431f      	orrs	r7, r3
 8020a60:	f000 8195 	beq.w	8020d8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8020a64:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8020a68:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8020a6c:	f891 9007 	ldrb.w	r9, [r1, #7]
 8020a70:	ea59 0903 	orrs.w	r9, r9, r3
 8020a74:	f000 818b 	beq.w	8020d8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8020a78:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8020a7c:	b29b      	uxth	r3, r3
 8020a7e:	2d00      	cmp	r5, #0
 8020a80:	f000 812e 	beq.w	8020ce0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 8020a84:	1aed      	subs	r5, r5, r3
 8020a86:	b2ad      	uxth	r5, r5
 8020a88:	042b      	lsls	r3, r5, #16
 8020a8a:	d502      	bpl.n	8020a92 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8020a8c:	1b64      	subs	r4, r4, r5
 8020a8e:	2500      	movs	r5, #0
 8020a90:	b224      	sxth	r4, r4
 8020a92:	f9b2 1000 	ldrsh.w	r1, [r2]
 8020a96:	a814      	add	r0, sp, #80	; 0x50
 8020a98:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8020a9c:	428c      	cmp	r4, r1
 8020a9e:	b28b      	uxth	r3, r1
 8020aa0:	bfbf      	itttt	lt
 8020aa2:	18ed      	addlt	r5, r5, r3
 8020aa4:	1b2c      	sublt	r4, r5, r4
 8020aa6:	b2a5      	uxthlt	r5, r4
 8020aa8:	460c      	movlt	r4, r1
 8020aaa:	8891      	ldrh	r1, [r2, #4]
 8020aac:	440b      	add	r3, r1
 8020aae:	4621      	mov	r1, r4
 8020ab0:	b21b      	sxth	r3, r3
 8020ab2:	930f      	str	r3, [sp, #60]	; 0x3c
 8020ab4:	88d3      	ldrh	r3, [r2, #6]
 8020ab6:	8852      	ldrh	r2, [r2, #2]
 8020ab8:	4413      	add	r3, r2
 8020aba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020abc:	b21b      	sxth	r3, r3
 8020abe:	930d      	str	r3, [sp, #52]	; 0x34
 8020ac0:	4bbd      	ldr	r3, [pc, #756]	; (8020db8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8020ac2:	f893 b000 	ldrb.w	fp, [r3]
 8020ac6:	f10b 3cff 	add.w	ip, fp, #4294967295
 8020aca:	f1dc 0300 	rsbs	r3, ip, #0
 8020ace:	eb43 030c 	adc.w	r3, r3, ip
 8020ad2:	930e      	str	r3, [sp, #56]	; 0x38
 8020ad4:	4653      	mov	r3, sl
 8020ad6:	f7f6 fef6 	bl	80178c6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8020ada:	4621      	mov	r1, r4
 8020adc:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8020ae0:	4653      	mov	r3, sl
 8020ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020ae4:	a814      	add	r0, sp, #80	; 0x50
 8020ae6:	f7f6 ff0b 	bl	8017900 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8020aea:	a918      	add	r1, sp, #96	; 0x60
 8020aec:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8020af0:	a817      	add	r0, sp, #92	; 0x5c
 8020af2:	f7f7 f831 	bl	8017b58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8020af6:	f1ba 0f00 	cmp.w	sl, #0
 8020afa:	f040 80f4 	bne.w	8020ce6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8020afe:	f1bb 0f01 	cmp.w	fp, #1
 8020b02:	f040 80f8 	bne.w	8020cf6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8020b06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020b08:	2b00      	cmp	r3, #0
 8020b0a:	f040 8145 	bne.w	8020d98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8020b0e:	b2ba      	uxth	r2, r7
 8020b10:	b905      	cbnz	r5, 8020b14 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 8020b12:	b16e      	cbz	r6, 8020b30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 8020b14:	fb06 5302 	mla	r3, r6, r2, r5
 8020b18:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8020b1a:	4631      	mov	r1, r6
 8020b1c:	fb08 f303 	mul.w	r3, r8, r3
 8020b20:	f003 0607 	and.w	r6, r3, #7
 8020b24:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 8020b28:	9328      	str	r3, [sp, #160]	; 0xa0
 8020b2a:	eba9 0301 	sub.w	r3, r9, r1
 8020b2e:	930a      	str	r3, [sp, #40]	; 0x28
 8020b30:	4651      	mov	r1, sl
 8020b32:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020b34:	f7ff ff1c 	bl	8020970 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8020b38:	4681      	mov	r9, r0
 8020b3a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020b3c:	f7ff ff42 	bl	80209c4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8020b40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020b42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020b44:	4683      	mov	fp, r0
 8020b46:	eba3 0a01 	sub.w	sl, r3, r1
 8020b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020b4c:	459a      	cmp	sl, r3
 8020b4e:	bfa8      	it	ge
 8020b50:	469a      	movge	sl, r3
 8020b52:	f1ba 0f00 	cmp.w	sl, #0
 8020b56:	f340 811a 	ble.w	8020d8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8020b5a:	1b64      	subs	r4, r4, r5
 8020b5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020b5e:	1b1c      	subs	r4, r3, r4
 8020b60:	42bc      	cmp	r4, r7
 8020b62:	bfd4      	ite	le
 8020b64:	ebc5 0504 	rsble	r5, r5, r4
 8020b68:	ebc5 0507 	rsbgt	r5, r5, r7
 8020b6c:	2d00      	cmp	r5, #0
 8020b6e:	f340 810e 	ble.w	8020d8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8020b72:	1b52      	subs	r2, r2, r5
 8020b74:	fb08 f302 	mul.w	r3, r8, r2
 8020b78:	930f      	str	r3, [sp, #60]	; 0x3c
 8020b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020b7c:	2b00      	cmp	r3, #0
 8020b7e:	f040 8116 	bne.w	8020dae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8020b82:	4b8e      	ldr	r3, [pc, #568]	; (8020dbc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8020b84:	6818      	ldr	r0, [r3, #0]
 8020b86:	6803      	ldr	r3, [r0, #0]
 8020b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020b8a:	4798      	blx	r3
 8020b8c:	2301      	movs	r3, #1
 8020b8e:	4a8c      	ldr	r2, [pc, #560]	; (8020dc0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8020b90:	fa03 f308 	lsl.w	r3, r3, r8
 8020b94:	8811      	ldrh	r1, [r2, #0]
 8020b96:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8020b9a:	3b01      	subs	r3, #1
 8020b9c:	b2db      	uxtb	r3, r3
 8020b9e:	930e      	str	r3, [sp, #56]	; 0x38
 8020ba0:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8020ba4:	fb01 2303 	mla	r3, r1, r3, r2
 8020ba8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020bac:	930a      	str	r3, [sp, #40]	; 0x28
 8020bae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020bb0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8020bb4:	9313      	str	r3, [sp, #76]	; 0x4c
 8020bb6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020bb8:	0a19      	lsrs	r1, r3, #8
 8020bba:	b2cb      	uxtb	r3, r1
 8020bbc:	9312      	str	r3, [sp, #72]	; 0x48
 8020bbe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020bc0:	b2db      	uxtb	r3, r3
 8020bc2:	9311      	str	r3, [sp, #68]	; 0x44
 8020bc4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020bc6:	095a      	lsrs	r2, r3, #5
 8020bc8:	4b7e      	ldr	r3, [pc, #504]	; (8020dc4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8020bca:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020bce:	400b      	ands	r3, r1
 8020bd0:	4313      	orrs	r3, r2
 8020bd2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020bd4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020bd8:	4313      	orrs	r3, r2
 8020bda:	b29b      	uxth	r3, r3
 8020bdc:	9310      	str	r3, [sp, #64]	; 0x40
 8020bde:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020be0:	781a      	ldrb	r2, [r3, #0]
 8020be2:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8020be6:	fb05 b919 	mls	r9, r5, r9, fp
 8020bea:	4132      	asrs	r2, r6
 8020bec:	fb03 fb05 	mul.w	fp, r3, r5
 8020bf0:	930d      	str	r3, [sp, #52]	; 0x34
 8020bf2:	b2d2      	uxtb	r2, r2
 8020bf4:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8020bf8:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8020bfc:	f0c0 80f5 	bcc.w	8020dea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 8020c00:	46ae      	mov	lr, r5
 8020c02:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8020c06:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8020c0a:	f0c0 80dd 	bcc.w	8020dc8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8020c0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020c10:	4013      	ands	r3, r2
 8020c12:	d055      	beq.n	8020cc0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8020c14:	20ff      	movs	r0, #255	; 0xff
 8020c16:	990e      	ldr	r1, [sp, #56]	; 0x38
 8020c18:	fb90 f1f1 	sdiv	r1, r0, r1
 8020c1c:	434b      	muls	r3, r1
 8020c1e:	2bfe      	cmp	r3, #254	; 0xfe
 8020c20:	dd03      	ble.n	8020c2a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 8020c22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020c24:	4281      	cmp	r1, r0
 8020c26:	f000 80c4 	beq.w	8020db2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8020c2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020c2c:	f8bc 4000 	ldrh.w	r4, [ip]
 8020c30:	fb11 f303 	smulbb	r3, r1, r3
 8020c34:	1220      	asrs	r0, r4, #8
 8020c36:	b29b      	uxth	r3, r3
 8020c38:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020c3c:	1c59      	adds	r1, r3, #1
 8020c3e:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8020c42:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8020c46:	10e1      	asrs	r1, r4, #3
 8020c48:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020c4c:	00e4      	lsls	r4, r4, #3
 8020c4e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020c52:	b29f      	uxth	r7, r3
 8020c54:	43db      	mvns	r3, r3
 8020c56:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8020c5a:	b2db      	uxtb	r3, r3
 8020c5c:	b2e4      	uxtb	r4, r4
 8020c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8020c60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020c62:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8020c66:	fb13 f907 	smulbb	r9, r3, r7
 8020c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020c6c:	fb00 9003 	mla	r0, r0, r3, r9
 8020c70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020c72:	fb13 f907 	smulbb	r9, r3, r7
 8020c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020c78:	b280      	uxth	r0, r0
 8020c7a:	fb01 9103 	mla	r1, r1, r3, r9
 8020c7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020c80:	fb13 f707 	smulbb	r7, r3, r7
 8020c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020c86:	b289      	uxth	r1, r1
 8020c88:	fb04 7403 	mla	r4, r4, r3, r7
 8020c8c:	1c43      	adds	r3, r0, #1
 8020c8e:	b2a4      	uxth	r4, r4
 8020c90:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020c94:	f104 0901 	add.w	r9, r4, #1
 8020c98:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8020c9c:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8020ca0:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8020ca4:	ea49 0000 	orr.w	r0, r9, r0
 8020ca8:	f101 0901 	add.w	r9, r1, #1
 8020cac:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8020cb0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8020cb4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8020cb8:	ea40 0009 	orr.w	r0, r0, r9
 8020cbc:	f8ac 0000 	strh.w	r0, [ip]
 8020cc0:	4446      	add	r6, r8
 8020cc2:	b2b6      	uxth	r6, r6
 8020cc4:	2e07      	cmp	r6, #7
 8020cc6:	bf89      	itett	hi
 8020cc8:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8020cca:	fa42 f208 	asrls.w	r2, r2, r8
 8020cce:	2600      	movhi	r6, #0
 8020cd0:	785a      	ldrbhi	r2, [r3, #1]
 8020cd2:	bf8a      	itet	hi
 8020cd4:	3301      	addhi	r3, #1
 8020cd6:	b2d2      	uxtbls	r2, r2
 8020cd8:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8020cda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020cdc:	449c      	add	ip, r3
 8020cde:	e792      	b.n	8020c06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 8020ce0:	441c      	add	r4, r3
 8020ce2:	b224      	sxth	r4, r4
 8020ce4:	e6d5      	b.n	8020a92 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8020ce6:	f1ba 0f01 	cmp.w	sl, #1
 8020cea:	f47f af0c 	bne.w	8020b06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8020cee:	f1bb 0f01 	cmp.w	fp, #1
 8020cf2:	f47f af08 	bne.w	8020b06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8020cf6:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8020dbc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 8020cfa:	f8db 0000 	ldr.w	r0, [fp]
 8020cfe:	6803      	ldr	r3, [r0, #0]
 8020d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020d02:	4798      	blx	r3
 8020d04:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8020d08:	465a      	mov	r2, fp
 8020d0a:	d006      	beq.n	8020d1a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8020d0c:	f1b8 0f04 	cmp.w	r8, #4
 8020d10:	d140      	bne.n	8020d94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8020d12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020d14:	3300      	adds	r3, #0
 8020d16:	bf18      	it	ne
 8020d18:	2301      	movne	r3, #1
 8020d1a:	0580      	lsls	r0, r0, #22
 8020d1c:	d56e      	bpl.n	8020dfc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8020d1e:	f1b8 0f08 	cmp.w	r8, #8
 8020d22:	d16b      	bne.n	8020dfc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8020d24:	2b00      	cmp	r3, #0
 8020d26:	bf0c      	ite	eq
 8020d28:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8020d2c:	f44f 7180 	movne.w	r1, #256	; 0x100
 8020d30:	2d00      	cmp	r5, #0
 8020d32:	f47f aee8 	bne.w	8020b06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8020d36:	2e00      	cmp	r6, #0
 8020d38:	f47f aee5 	bne.w	8020b06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8020d3c:	19e3      	adds	r3, r4, r7
 8020d3e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020d40:	4283      	cmp	r3, r0
 8020d42:	f73f aee0 	bgt.w	8020b06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8020d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d48:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020d4a:	444b      	add	r3, r9
 8020d4c:	4283      	cmp	r3, r0
 8020d4e:	f73f aeda 	bgt.w	8020b06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8020d52:	b2bf      	uxth	r7, r7
 8020d54:	f1b8 0f08 	cmp.w	r8, #8
 8020d58:	6810      	ldr	r0, [r2, #0]
 8020d5a:	f04f 0500 	mov.w	r5, #0
 8020d5e:	bf18      	it	ne
 8020d60:	3701      	addne	r7, #1
 8020d62:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8020d66:	6804      	ldr	r4, [r0, #0]
 8020d68:	bf18      	it	ne
 8020d6a:	f027 0701 	bicne.w	r7, r7, #1
 8020d6e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8020d72:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8020d76:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020d78:	bf18      	it	ne
 8020d7a:	b2bf      	uxthne	r7, r7
 8020d7c:	9104      	str	r1, [sp, #16]
 8020d7e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020d80:	e9cd 7900 	strd	r7, r9, [sp]
 8020d84:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8020d88:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020d8a:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8020d8c:	47a0      	blx	r4
 8020d8e:	b019      	add	sp, #100	; 0x64
 8020d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d94:	2300      	movs	r3, #0
 8020d96:	e7c0      	b.n	8020d1a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8020d98:	2208      	movs	r2, #8
 8020d9a:	fb92 f3f8 	sdiv	r3, r2, r8
 8020d9e:	1e5a      	subs	r2, r3, #1
 8020da0:	443a      	add	r2, r7
 8020da2:	fb92 f2f3 	sdiv	r2, r2, r3
 8020da6:	fb12 f203 	smulbb	r2, r2, r3
 8020daa:	b292      	uxth	r2, r2
 8020dac:	e6b0      	b.n	8020b10 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 8020dae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020db0:	e6ec      	b.n	8020b8c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 8020db2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020db4:	e782      	b.n	8020cbc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 8020db6:	bf00      	nop
 8020db8:	20027ca0 	.word	0x20027ca0
 8020dbc:	20027ca8 	.word	0x20027ca8
 8020dc0:	20027ca2 	.word	0x20027ca2
 8020dc4:	00fff800 	.word	0x00fff800
 8020dc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020dca:	b153      	cbz	r3, 8020de2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8020dcc:	441e      	add	r6, r3
 8020dce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020dd0:	b2b6      	uxth	r6, r6
 8020dd2:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 8020dd6:	f006 0607 	and.w	r6, r6, #7
 8020dda:	781a      	ldrb	r2, [r3, #0]
 8020ddc:	9328      	str	r3, [sp, #160]	; 0xa0
 8020dde:	4132      	asrs	r2, r6
 8020de0:	b2d2      	uxtb	r2, r2
 8020de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020de4:	445b      	add	r3, fp
 8020de6:	930a      	str	r3, [sp, #40]	; 0x28
 8020de8:	e706      	b.n	8020bf8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 8020dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020dec:	2b00      	cmp	r3, #0
 8020dee:	d1ce      	bne.n	8020d8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8020df0:	4b05      	ldr	r3, [pc, #20]	; (8020e08 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 8020df2:	6818      	ldr	r0, [r3, #0]
 8020df4:	6803      	ldr	r3, [r0, #0]
 8020df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020df8:	4798      	blx	r3
 8020dfa:	e7c8      	b.n	8020d8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8020dfc:	2b00      	cmp	r3, #0
 8020dfe:	f43f ae82 	beq.w	8020b06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8020e02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8020e06:	e793      	b.n	8020d30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 8020e08:	20027ca8 	.word	0x20027ca8

08020e0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8020e0c:	b538      	push	{r3, r4, r5, lr}
 8020e0e:	4c15      	ldr	r4, [pc, #84]	; (8020e64 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8020e10:	4605      	mov	r5, r0
 8020e12:	7823      	ldrb	r3, [r4, #0]
 8020e14:	f3bf 8f5b 	dmb	ish
 8020e18:	07da      	lsls	r2, r3, #31
 8020e1a:	d40b      	bmi.n	8020e34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8020e1c:	4620      	mov	r0, r4
 8020e1e:	f009 fdd2 	bl	802a9c6 <__cxa_guard_acquire>
 8020e22:	b138      	cbz	r0, 8020e34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8020e24:	4620      	mov	r0, r4
 8020e26:	f009 fdda 	bl	802a9de <__cxa_guard_release>
 8020e2a:	4a0f      	ldr	r2, [pc, #60]	; (8020e68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8020e2c:	490f      	ldr	r1, [pc, #60]	; (8020e6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8020e2e:	4810      	ldr	r0, [pc, #64]	; (8020e70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8020e30:	f009 fdc2 	bl	802a9b8 <__aeabi_atexit>
 8020e34:	4c0f      	ldr	r4, [pc, #60]	; (8020e74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8020e36:	7823      	ldrb	r3, [r4, #0]
 8020e38:	f3bf 8f5b 	dmb	ish
 8020e3c:	07db      	lsls	r3, r3, #31
 8020e3e:	d40b      	bmi.n	8020e58 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8020e40:	4620      	mov	r0, r4
 8020e42:	f009 fdc0 	bl	802a9c6 <__cxa_guard_acquire>
 8020e46:	b138      	cbz	r0, 8020e58 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8020e48:	4620      	mov	r0, r4
 8020e4a:	f009 fdc8 	bl	802a9de <__cxa_guard_release>
 8020e4e:	4a06      	ldr	r2, [pc, #24]	; (8020e68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8020e50:	4909      	ldr	r1, [pc, #36]	; (8020e78 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8020e52:	480a      	ldr	r0, [pc, #40]	; (8020e7c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8020e54:	f009 fdb0 	bl	802a9b8 <__aeabi_atexit>
 8020e58:	4b05      	ldr	r3, [pc, #20]	; (8020e70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8020e5a:	612b      	str	r3, [r5, #16]
 8020e5c:	4b07      	ldr	r3, [pc, #28]	; (8020e7c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8020e5e:	616b      	str	r3, [r5, #20]
 8020e60:	bd38      	pop	{r3, r4, r5, pc}
 8020e62:	bf00      	nop
 8020e64:	20027d88 	.word	0x20027d88
 8020e68:	20000000 	.word	0x20000000
 8020e6c:	0801dbf3 	.word	0x0801dbf3
 8020e70:	200000bc 	.word	0x200000bc
 8020e74:	20027d8c 	.word	0x20027d8c
 8020e78:	0801dbf1 	.word	0x0801dbf1
 8020e7c:	200000c0 	.word	0x200000c0

08020e80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8020e80:	b538      	push	{r3, r4, r5, lr}
 8020e82:	4c15      	ldr	r4, [pc, #84]	; (8020ed8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8020e84:	4605      	mov	r5, r0
 8020e86:	7823      	ldrb	r3, [r4, #0]
 8020e88:	f3bf 8f5b 	dmb	ish
 8020e8c:	07da      	lsls	r2, r3, #31
 8020e8e:	d40b      	bmi.n	8020ea8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8020e90:	4620      	mov	r0, r4
 8020e92:	f009 fd98 	bl	802a9c6 <__cxa_guard_acquire>
 8020e96:	b138      	cbz	r0, 8020ea8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8020e98:	4620      	mov	r0, r4
 8020e9a:	f009 fda0 	bl	802a9de <__cxa_guard_release>
 8020e9e:	4a0f      	ldr	r2, [pc, #60]	; (8020edc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8020ea0:	490f      	ldr	r1, [pc, #60]	; (8020ee0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8020ea2:	4810      	ldr	r0, [pc, #64]	; (8020ee4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8020ea4:	f009 fd88 	bl	802a9b8 <__aeabi_atexit>
 8020ea8:	4c0f      	ldr	r4, [pc, #60]	; (8020ee8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8020eaa:	7823      	ldrb	r3, [r4, #0]
 8020eac:	f3bf 8f5b 	dmb	ish
 8020eb0:	07db      	lsls	r3, r3, #31
 8020eb2:	d40b      	bmi.n	8020ecc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8020eb4:	4620      	mov	r0, r4
 8020eb6:	f009 fd86 	bl	802a9c6 <__cxa_guard_acquire>
 8020eba:	b138      	cbz	r0, 8020ecc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8020ebc:	4620      	mov	r0, r4
 8020ebe:	f009 fd8e 	bl	802a9de <__cxa_guard_release>
 8020ec2:	4a06      	ldr	r2, [pc, #24]	; (8020edc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8020ec4:	4909      	ldr	r1, [pc, #36]	; (8020eec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8020ec6:	480a      	ldr	r0, [pc, #40]	; (8020ef0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8020ec8:	f009 fd76 	bl	802a9b8 <__aeabi_atexit>
 8020ecc:	4b05      	ldr	r3, [pc, #20]	; (8020ee4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8020ece:	60ab      	str	r3, [r5, #8]
 8020ed0:	4b07      	ldr	r3, [pc, #28]	; (8020ef0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8020ed2:	60eb      	str	r3, [r5, #12]
 8020ed4:	bd38      	pop	{r3, r4, r5, pc}
 8020ed6:	bf00      	nop
 8020ed8:	20027d60 	.word	0x20027d60
 8020edc:	20000000 	.word	0x20000000
 8020ee0:	0801dbf7 	.word	0x0801dbf7
 8020ee4:	20000094 	.word	0x20000094
 8020ee8:	20027d64 	.word	0x20027d64
 8020eec:	0801dbf5 	.word	0x0801dbf5
 8020ef0:	20000098 	.word	0x20000098

08020ef4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8020ef4:	b510      	push	{r4, lr}
 8020ef6:	4604      	mov	r4, r0
 8020ef8:	f7ff ff88 	bl	8020e0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8020efc:	4620      	mov	r0, r4
 8020efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020f02:	f7ff bfbd 	b.w	8020e80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08020f08 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8020f08:	b538      	push	{r3, r4, r5, lr}
 8020f0a:	4c15      	ldr	r4, [pc, #84]	; (8020f60 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8020f0c:	4605      	mov	r5, r0
 8020f0e:	7823      	ldrb	r3, [r4, #0]
 8020f10:	f3bf 8f5b 	dmb	ish
 8020f14:	07da      	lsls	r2, r3, #31
 8020f16:	d40b      	bmi.n	8020f30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8020f18:	4620      	mov	r0, r4
 8020f1a:	f009 fd54 	bl	802a9c6 <__cxa_guard_acquire>
 8020f1e:	b138      	cbz	r0, 8020f30 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8020f20:	4620      	mov	r0, r4
 8020f22:	f009 fd5c 	bl	802a9de <__cxa_guard_release>
 8020f26:	4a0f      	ldr	r2, [pc, #60]	; (8020f64 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8020f28:	490f      	ldr	r1, [pc, #60]	; (8020f68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8020f2a:	4810      	ldr	r0, [pc, #64]	; (8020f6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8020f2c:	f009 fd44 	bl	802a9b8 <__aeabi_atexit>
 8020f30:	4c0f      	ldr	r4, [pc, #60]	; (8020f70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8020f32:	7823      	ldrb	r3, [r4, #0]
 8020f34:	f3bf 8f5b 	dmb	ish
 8020f38:	07db      	lsls	r3, r3, #31
 8020f3a:	d40b      	bmi.n	8020f54 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8020f3c:	4620      	mov	r0, r4
 8020f3e:	f009 fd42 	bl	802a9c6 <__cxa_guard_acquire>
 8020f42:	b138      	cbz	r0, 8020f54 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8020f44:	4620      	mov	r0, r4
 8020f46:	f009 fd4a 	bl	802a9de <__cxa_guard_release>
 8020f4a:	4a06      	ldr	r2, [pc, #24]	; (8020f64 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8020f4c:	4909      	ldr	r1, [pc, #36]	; (8020f74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8020f4e:	480a      	ldr	r0, [pc, #40]	; (8020f78 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8020f50:	f009 fd32 	bl	802a9b8 <__aeabi_atexit>
 8020f54:	4b05      	ldr	r3, [pc, #20]	; (8020f6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8020f56:	622b      	str	r3, [r5, #32]
 8020f58:	4b07      	ldr	r3, [pc, #28]	; (8020f78 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8020f5a:	626b      	str	r3, [r5, #36]	; 0x24
 8020f5c:	bd38      	pop	{r3, r4, r5, pc}
 8020f5e:	bf00      	nop
 8020f60:	20027d90 	.word	0x20027d90
 8020f64:	20000000 	.word	0x20000000
 8020f68:	0801dbeb 	.word	0x0801dbeb
 8020f6c:	200000c4 	.word	0x200000c4
 8020f70:	20027d94 	.word	0x20027d94
 8020f74:	0801dbe9 	.word	0x0801dbe9
 8020f78:	200000c8 	.word	0x200000c8

08020f7c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8020f7c:	b538      	push	{r3, r4, r5, lr}
 8020f7e:	4c15      	ldr	r4, [pc, #84]	; (8020fd4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8020f80:	4605      	mov	r5, r0
 8020f82:	7823      	ldrb	r3, [r4, #0]
 8020f84:	f3bf 8f5b 	dmb	ish
 8020f88:	07da      	lsls	r2, r3, #31
 8020f8a:	d40b      	bmi.n	8020fa4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8020f8c:	4620      	mov	r0, r4
 8020f8e:	f009 fd1a 	bl	802a9c6 <__cxa_guard_acquire>
 8020f92:	b138      	cbz	r0, 8020fa4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8020f94:	4620      	mov	r0, r4
 8020f96:	f009 fd22 	bl	802a9de <__cxa_guard_release>
 8020f9a:	4a0f      	ldr	r2, [pc, #60]	; (8020fd8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8020f9c:	490f      	ldr	r1, [pc, #60]	; (8020fdc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8020f9e:	4810      	ldr	r0, [pc, #64]	; (8020fe0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8020fa0:	f009 fd0a 	bl	802a9b8 <__aeabi_atexit>
 8020fa4:	4c0f      	ldr	r4, [pc, #60]	; (8020fe4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8020fa6:	7823      	ldrb	r3, [r4, #0]
 8020fa8:	f3bf 8f5b 	dmb	ish
 8020fac:	07db      	lsls	r3, r3, #31
 8020fae:	d40b      	bmi.n	8020fc8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8020fb0:	4620      	mov	r0, r4
 8020fb2:	f009 fd08 	bl	802a9c6 <__cxa_guard_acquire>
 8020fb6:	b138      	cbz	r0, 8020fc8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8020fb8:	4620      	mov	r0, r4
 8020fba:	f009 fd10 	bl	802a9de <__cxa_guard_release>
 8020fbe:	4a06      	ldr	r2, [pc, #24]	; (8020fd8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8020fc0:	4909      	ldr	r1, [pc, #36]	; (8020fe8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8020fc2:	480a      	ldr	r0, [pc, #40]	; (8020fec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8020fc4:	f009 fcf8 	bl	802a9b8 <__aeabi_atexit>
 8020fc8:	4b05      	ldr	r3, [pc, #20]	; (8020fe0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8020fca:	61ab      	str	r3, [r5, #24]
 8020fcc:	4b07      	ldr	r3, [pc, #28]	; (8020fec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8020fce:	61eb      	str	r3, [r5, #28]
 8020fd0:	bd38      	pop	{r3, r4, r5, pc}
 8020fd2:	bf00      	nop
 8020fd4:	20027d68 	.word	0x20027d68
 8020fd8:	20000000 	.word	0x20000000
 8020fdc:	0801dbef 	.word	0x0801dbef
 8020fe0:	2000009c 	.word	0x2000009c
 8020fe4:	20027d6c 	.word	0x20027d6c
 8020fe8:	0801dbed 	.word	0x0801dbed
 8020fec:	200000a0 	.word	0x200000a0

08020ff0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8020ff0:	b510      	push	{r4, lr}
 8020ff2:	4604      	mov	r4, r0
 8020ff4:	f7ff ff88 	bl	8020f08 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8020ff8:	4620      	mov	r0, r4
 8020ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020ffe:	f7ff bfbd 	b.w	8020f7c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08021004 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8021004:	b538      	push	{r3, r4, r5, lr}
 8021006:	4c15      	ldr	r4, [pc, #84]	; (802105c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8021008:	4605      	mov	r5, r0
 802100a:	7823      	ldrb	r3, [r4, #0]
 802100c:	f3bf 8f5b 	dmb	ish
 8021010:	07da      	lsls	r2, r3, #31
 8021012:	d40b      	bmi.n	802102c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021014:	4620      	mov	r0, r4
 8021016:	f009 fcd6 	bl	802a9c6 <__cxa_guard_acquire>
 802101a:	b138      	cbz	r0, 802102c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 802101c:	4620      	mov	r0, r4
 802101e:	f009 fcde 	bl	802a9de <__cxa_guard_release>
 8021022:	4a0f      	ldr	r2, [pc, #60]	; (8021060 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021024:	490f      	ldr	r1, [pc, #60]	; (8021064 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8021026:	4810      	ldr	r0, [pc, #64]	; (8021068 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021028:	f009 fcc6 	bl	802a9b8 <__aeabi_atexit>
 802102c:	4c0f      	ldr	r4, [pc, #60]	; (802106c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 802102e:	7823      	ldrb	r3, [r4, #0]
 8021030:	f3bf 8f5b 	dmb	ish
 8021034:	07db      	lsls	r3, r3, #31
 8021036:	d40b      	bmi.n	8021050 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021038:	4620      	mov	r0, r4
 802103a:	f009 fcc4 	bl	802a9c6 <__cxa_guard_acquire>
 802103e:	b138      	cbz	r0, 8021050 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021040:	4620      	mov	r0, r4
 8021042:	f009 fccc 	bl	802a9de <__cxa_guard_release>
 8021046:	4a06      	ldr	r2, [pc, #24]	; (8021060 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021048:	4909      	ldr	r1, [pc, #36]	; (8021070 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 802104a:	480a      	ldr	r0, [pc, #40]	; (8021074 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802104c:	f009 fcb4 	bl	802a9b8 <__aeabi_atexit>
 8021050:	4b05      	ldr	r3, [pc, #20]	; (8021068 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021052:	632b      	str	r3, [r5, #48]	; 0x30
 8021054:	4b07      	ldr	r3, [pc, #28]	; (8021074 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021056:	636b      	str	r3, [r5, #52]	; 0x34
 8021058:	bd38      	pop	{r3, r4, r5, pc}
 802105a:	bf00      	nop
 802105c:	20027da0 	.word	0x20027da0
 8021060:	20000000 	.word	0x20000000
 8021064:	0801dbe3 	.word	0x0801dbe3
 8021068:	200000d4 	.word	0x200000d4
 802106c:	20027da4 	.word	0x20027da4
 8021070:	0801dbe1 	.word	0x0801dbe1
 8021074:	200000d8 	.word	0x200000d8

08021078 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8021078:	b538      	push	{r3, r4, r5, lr}
 802107a:	4c15      	ldr	r4, [pc, #84]	; (80210d0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 802107c:	4605      	mov	r5, r0
 802107e:	7823      	ldrb	r3, [r4, #0]
 8021080:	f3bf 8f5b 	dmb	ish
 8021084:	07da      	lsls	r2, r3, #31
 8021086:	d40b      	bmi.n	80210a0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021088:	4620      	mov	r0, r4
 802108a:	f009 fc9c 	bl	802a9c6 <__cxa_guard_acquire>
 802108e:	b138      	cbz	r0, 80210a0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021090:	4620      	mov	r0, r4
 8021092:	f009 fca4 	bl	802a9de <__cxa_guard_release>
 8021096:	4a0f      	ldr	r2, [pc, #60]	; (80210d4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021098:	490f      	ldr	r1, [pc, #60]	; (80210d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 802109a:	4810      	ldr	r0, [pc, #64]	; (80210dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802109c:	f009 fc8c 	bl	802a9b8 <__aeabi_atexit>
 80210a0:	4c0f      	ldr	r4, [pc, #60]	; (80210e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80210a2:	7823      	ldrb	r3, [r4, #0]
 80210a4:	f3bf 8f5b 	dmb	ish
 80210a8:	07db      	lsls	r3, r3, #31
 80210aa:	d40b      	bmi.n	80210c4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80210ac:	4620      	mov	r0, r4
 80210ae:	f009 fc8a 	bl	802a9c6 <__cxa_guard_acquire>
 80210b2:	b138      	cbz	r0, 80210c4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80210b4:	4620      	mov	r0, r4
 80210b6:	f009 fc92 	bl	802a9de <__cxa_guard_release>
 80210ba:	4a06      	ldr	r2, [pc, #24]	; (80210d4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80210bc:	4909      	ldr	r1, [pc, #36]	; (80210e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80210be:	480a      	ldr	r0, [pc, #40]	; (80210e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80210c0:	f009 fc7a 	bl	802a9b8 <__aeabi_atexit>
 80210c4:	4b05      	ldr	r3, [pc, #20]	; (80210dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80210c6:	62ab      	str	r3, [r5, #40]	; 0x28
 80210c8:	4b07      	ldr	r3, [pc, #28]	; (80210e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80210ca:	62eb      	str	r3, [r5, #44]	; 0x2c
 80210cc:	bd38      	pop	{r3, r4, r5, pc}
 80210ce:	bf00      	nop
 80210d0:	20027d70 	.word	0x20027d70
 80210d4:	20000000 	.word	0x20000000
 80210d8:	0801dbe7 	.word	0x0801dbe7
 80210dc:	200000a4 	.word	0x200000a4
 80210e0:	20027d74 	.word	0x20027d74
 80210e4:	0801dbe5 	.word	0x0801dbe5
 80210e8:	200000a8 	.word	0x200000a8

080210ec <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 80210ec:	b510      	push	{r4, lr}
 80210ee:	4604      	mov	r4, r0
 80210f0:	f7ff ff88 	bl	8021004 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80210f4:	4620      	mov	r0, r4
 80210f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80210fa:	f7ff bfbd 	b.w	8021078 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08021100 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8021100:	b538      	push	{r3, r4, r5, lr}
 8021102:	4c15      	ldr	r4, [pc, #84]	; (8021158 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8021104:	4605      	mov	r5, r0
 8021106:	7823      	ldrb	r3, [r4, #0]
 8021108:	f3bf 8f5b 	dmb	ish
 802110c:	07da      	lsls	r2, r3, #31
 802110e:	d40b      	bmi.n	8021128 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8021110:	4620      	mov	r0, r4
 8021112:	f009 fc58 	bl	802a9c6 <__cxa_guard_acquire>
 8021116:	b138      	cbz	r0, 8021128 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8021118:	4620      	mov	r0, r4
 802111a:	f009 fc60 	bl	802a9de <__cxa_guard_release>
 802111e:	4a0f      	ldr	r2, [pc, #60]	; (802115c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021120:	490f      	ldr	r1, [pc, #60]	; (8021160 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8021122:	4810      	ldr	r0, [pc, #64]	; (8021164 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8021124:	f009 fc48 	bl	802a9b8 <__aeabi_atexit>
 8021128:	4c0f      	ldr	r4, [pc, #60]	; (8021168 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 802112a:	7823      	ldrb	r3, [r4, #0]
 802112c:	f3bf 8f5b 	dmb	ish
 8021130:	07db      	lsls	r3, r3, #31
 8021132:	d40b      	bmi.n	802114c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8021134:	4620      	mov	r0, r4
 8021136:	f009 fc46 	bl	802a9c6 <__cxa_guard_acquire>
 802113a:	b138      	cbz	r0, 802114c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 802113c:	4620      	mov	r0, r4
 802113e:	f009 fc4e 	bl	802a9de <__cxa_guard_release>
 8021142:	4a06      	ldr	r2, [pc, #24]	; (802115c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021144:	4909      	ldr	r1, [pc, #36]	; (802116c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8021146:	480a      	ldr	r0, [pc, #40]	; (8021170 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8021148:	f009 fc36 	bl	802a9b8 <__aeabi_atexit>
 802114c:	4b05      	ldr	r3, [pc, #20]	; (8021164 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 802114e:	652b      	str	r3, [r5, #80]	; 0x50
 8021150:	4b07      	ldr	r3, [pc, #28]	; (8021170 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8021152:	656b      	str	r3, [r5, #84]	; 0x54
 8021154:	bd38      	pop	{r3, r4, r5, pc}
 8021156:	bf00      	nop
 8021158:	20027da8 	.word	0x20027da8
 802115c:	20000000 	.word	0x20000000
 8021160:	0801dbd3 	.word	0x0801dbd3
 8021164:	200000dc 	.word	0x200000dc
 8021168:	20027dac 	.word	0x20027dac
 802116c:	0801dbd1 	.word	0x0801dbd1
 8021170:	200000e0 	.word	0x200000e0

08021174 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8021174:	b538      	push	{r3, r4, r5, lr}
 8021176:	4c15      	ldr	r4, [pc, #84]	; (80211cc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8021178:	4605      	mov	r5, r0
 802117a:	7823      	ldrb	r3, [r4, #0]
 802117c:	f3bf 8f5b 	dmb	ish
 8021180:	07da      	lsls	r2, r3, #31
 8021182:	d40b      	bmi.n	802119c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8021184:	4620      	mov	r0, r4
 8021186:	f009 fc1e 	bl	802a9c6 <__cxa_guard_acquire>
 802118a:	b138      	cbz	r0, 802119c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 802118c:	4620      	mov	r0, r4
 802118e:	f009 fc26 	bl	802a9de <__cxa_guard_release>
 8021192:	4a0f      	ldr	r2, [pc, #60]	; (80211d0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8021194:	490f      	ldr	r1, [pc, #60]	; (80211d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8021196:	4810      	ldr	r0, [pc, #64]	; (80211d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8021198:	f009 fc0e 	bl	802a9b8 <__aeabi_atexit>
 802119c:	4c0f      	ldr	r4, [pc, #60]	; (80211dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 802119e:	7823      	ldrb	r3, [r4, #0]
 80211a0:	f3bf 8f5b 	dmb	ish
 80211a4:	07db      	lsls	r3, r3, #31
 80211a6:	d40b      	bmi.n	80211c0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80211a8:	4620      	mov	r0, r4
 80211aa:	f009 fc0c 	bl	802a9c6 <__cxa_guard_acquire>
 80211ae:	b138      	cbz	r0, 80211c0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80211b0:	4620      	mov	r0, r4
 80211b2:	f009 fc14 	bl	802a9de <__cxa_guard_release>
 80211b6:	4a06      	ldr	r2, [pc, #24]	; (80211d0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80211b8:	4909      	ldr	r1, [pc, #36]	; (80211e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80211ba:	480a      	ldr	r0, [pc, #40]	; (80211e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80211bc:	f009 fbfc 	bl	802a9b8 <__aeabi_atexit>
 80211c0:	4b05      	ldr	r3, [pc, #20]	; (80211d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80211c2:	64ab      	str	r3, [r5, #72]	; 0x48
 80211c4:	4b07      	ldr	r3, [pc, #28]	; (80211e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80211c6:	64eb      	str	r3, [r5, #76]	; 0x4c
 80211c8:	bd38      	pop	{r3, r4, r5, pc}
 80211ca:	bf00      	nop
 80211cc:	20027db0 	.word	0x20027db0
 80211d0:	20000000 	.word	0x20000000
 80211d4:	0801dbd7 	.word	0x0801dbd7
 80211d8:	200000e4 	.word	0x200000e4
 80211dc:	20027db4 	.word	0x20027db4
 80211e0:	0801dbd5 	.word	0x0801dbd5
 80211e4:	200000e8 	.word	0x200000e8

080211e8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 80211e8:	b538      	push	{r3, r4, r5, lr}
 80211ea:	4c15      	ldr	r4, [pc, #84]	; (8021240 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 80211ec:	4605      	mov	r5, r0
 80211ee:	7823      	ldrb	r3, [r4, #0]
 80211f0:	f3bf 8f5b 	dmb	ish
 80211f4:	07da      	lsls	r2, r3, #31
 80211f6:	d40b      	bmi.n	8021210 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 80211f8:	4620      	mov	r0, r4
 80211fa:	f009 fbe4 	bl	802a9c6 <__cxa_guard_acquire>
 80211fe:	b138      	cbz	r0, 8021210 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8021200:	4620      	mov	r0, r4
 8021202:	f009 fbec 	bl	802a9de <__cxa_guard_release>
 8021206:	4a0f      	ldr	r2, [pc, #60]	; (8021244 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8021208:	490f      	ldr	r1, [pc, #60]	; (8021248 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 802120a:	4810      	ldr	r0, [pc, #64]	; (802124c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 802120c:	f009 fbd4 	bl	802a9b8 <__aeabi_atexit>
 8021210:	4c0f      	ldr	r4, [pc, #60]	; (8021250 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8021212:	7823      	ldrb	r3, [r4, #0]
 8021214:	f3bf 8f5b 	dmb	ish
 8021218:	07db      	lsls	r3, r3, #31
 802121a:	d40b      	bmi.n	8021234 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 802121c:	4620      	mov	r0, r4
 802121e:	f009 fbd2 	bl	802a9c6 <__cxa_guard_acquire>
 8021222:	b138      	cbz	r0, 8021234 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8021224:	4620      	mov	r0, r4
 8021226:	f009 fbda 	bl	802a9de <__cxa_guard_release>
 802122a:	4a06      	ldr	r2, [pc, #24]	; (8021244 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 802122c:	4909      	ldr	r1, [pc, #36]	; (8021254 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 802122e:	480a      	ldr	r0, [pc, #40]	; (8021258 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8021230:	f009 fbc2 	bl	802a9b8 <__aeabi_atexit>
 8021234:	4b05      	ldr	r3, [pc, #20]	; (802124c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8021236:	642b      	str	r3, [r5, #64]	; 0x40
 8021238:	4b07      	ldr	r3, [pc, #28]	; (8021258 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 802123a:	646b      	str	r3, [r5, #68]	; 0x44
 802123c:	bd38      	pop	{r3, r4, r5, pc}
 802123e:	bf00      	nop
 8021240:	20027d78 	.word	0x20027d78
 8021244:	20000000 	.word	0x20000000
 8021248:	0801dbdb 	.word	0x0801dbdb
 802124c:	200000ac 	.word	0x200000ac
 8021250:	20027d7c 	.word	0x20027d7c
 8021254:	0801dbd9 	.word	0x0801dbd9
 8021258:	200000b0 	.word	0x200000b0

0802125c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 802125c:	b538      	push	{r3, r4, r5, lr}
 802125e:	4c15      	ldr	r4, [pc, #84]	; (80212b4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8021260:	4605      	mov	r5, r0
 8021262:	7823      	ldrb	r3, [r4, #0]
 8021264:	f3bf 8f5b 	dmb	ish
 8021268:	07da      	lsls	r2, r3, #31
 802126a:	d40b      	bmi.n	8021284 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 802126c:	4620      	mov	r0, r4
 802126e:	f009 fbaa 	bl	802a9c6 <__cxa_guard_acquire>
 8021272:	b138      	cbz	r0, 8021284 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8021274:	4620      	mov	r0, r4
 8021276:	f009 fbb2 	bl	802a9de <__cxa_guard_release>
 802127a:	4a0f      	ldr	r2, [pc, #60]	; (80212b8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 802127c:	490f      	ldr	r1, [pc, #60]	; (80212bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 802127e:	4810      	ldr	r0, [pc, #64]	; (80212c0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8021280:	f009 fb9a 	bl	802a9b8 <__aeabi_atexit>
 8021284:	4c0f      	ldr	r4, [pc, #60]	; (80212c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8021286:	7823      	ldrb	r3, [r4, #0]
 8021288:	f3bf 8f5b 	dmb	ish
 802128c:	07db      	lsls	r3, r3, #31
 802128e:	d40b      	bmi.n	80212a8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8021290:	4620      	mov	r0, r4
 8021292:	f009 fb98 	bl	802a9c6 <__cxa_guard_acquire>
 8021296:	b138      	cbz	r0, 80212a8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8021298:	4620      	mov	r0, r4
 802129a:	f009 fba0 	bl	802a9de <__cxa_guard_release>
 802129e:	4a06      	ldr	r2, [pc, #24]	; (80212b8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80212a0:	4909      	ldr	r1, [pc, #36]	; (80212c8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80212a2:	480a      	ldr	r0, [pc, #40]	; (80212cc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80212a4:	f009 fb88 	bl	802a9b8 <__aeabi_atexit>
 80212a8:	4b05      	ldr	r3, [pc, #20]	; (80212c0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80212aa:	63ab      	str	r3, [r5, #56]	; 0x38
 80212ac:	4b07      	ldr	r3, [pc, #28]	; (80212cc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80212ae:	63eb      	str	r3, [r5, #60]	; 0x3c
 80212b0:	bd38      	pop	{r3, r4, r5, pc}
 80212b2:	bf00      	nop
 80212b4:	20027d98 	.word	0x20027d98
 80212b8:	20000000 	.word	0x20000000
 80212bc:	0801dbdf 	.word	0x0801dbdf
 80212c0:	200000cc 	.word	0x200000cc
 80212c4:	20027d9c 	.word	0x20027d9c
 80212c8:	0801dbdd 	.word	0x0801dbdd
 80212cc:	200000d0 	.word	0x200000d0

080212d0 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 80212d0:	b510      	push	{r4, lr}
 80212d2:	4604      	mov	r4, r0
 80212d4:	f7ff ff14 	bl	8021100 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 80212d8:	4620      	mov	r0, r4
 80212da:	f7ff ff85 	bl	80211e8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 80212de:	4620      	mov	r0, r4
 80212e0:	f7ff ff48 	bl	8021174 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 80212e4:	4620      	mov	r0, r4
 80212e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80212ea:	f7ff bfb7 	b.w	802125c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

080212f0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80212f0:	b538      	push	{r3, r4, r5, lr}
 80212f2:	4c15      	ldr	r4, [pc, #84]	; (8021348 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80212f4:	4605      	mov	r5, r0
 80212f6:	7823      	ldrb	r3, [r4, #0]
 80212f8:	f3bf 8f5b 	dmb	ish
 80212fc:	07da      	lsls	r2, r3, #31
 80212fe:	d40b      	bmi.n	8021318 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021300:	4620      	mov	r0, r4
 8021302:	f009 fb60 	bl	802a9c6 <__cxa_guard_acquire>
 8021306:	b138      	cbz	r0, 8021318 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021308:	4620      	mov	r0, r4
 802130a:	f009 fb68 	bl	802a9de <__cxa_guard_release>
 802130e:	4a0f      	ldr	r2, [pc, #60]	; (802134c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021310:	490f      	ldr	r1, [pc, #60]	; (8021350 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8021312:	4810      	ldr	r0, [pc, #64]	; (8021354 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021314:	f009 fb50 	bl	802a9b8 <__aeabi_atexit>
 8021318:	4c0f      	ldr	r4, [pc, #60]	; (8021358 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 802131a:	7823      	ldrb	r3, [r4, #0]
 802131c:	f3bf 8f5b 	dmb	ish
 8021320:	07db      	lsls	r3, r3, #31
 8021322:	d40b      	bmi.n	802133c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021324:	4620      	mov	r0, r4
 8021326:	f009 fb4e 	bl	802a9c6 <__cxa_guard_acquire>
 802132a:	b138      	cbz	r0, 802133c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 802132c:	4620      	mov	r0, r4
 802132e:	f009 fb56 	bl	802a9de <__cxa_guard_release>
 8021332:	4a06      	ldr	r2, [pc, #24]	; (802134c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021334:	4909      	ldr	r1, [pc, #36]	; (802135c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8021336:	480a      	ldr	r0, [pc, #40]	; (8021360 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021338:	f009 fb3e 	bl	802a9b8 <__aeabi_atexit>
 802133c:	4b05      	ldr	r3, [pc, #20]	; (8021354 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 802133e:	662b      	str	r3, [r5, #96]	; 0x60
 8021340:	4b07      	ldr	r3, [pc, #28]	; (8021360 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021342:	666b      	str	r3, [r5, #100]	; 0x64
 8021344:	bd38      	pop	{r3, r4, r5, pc}
 8021346:	bf00      	nop
 8021348:	20027d80 	.word	0x20027d80
 802134c:	20000000 	.word	0x20000000
 8021350:	0801dbcb 	.word	0x0801dbcb
 8021354:	200000b4 	.word	0x200000b4
 8021358:	20027d84 	.word	0x20027d84
 802135c:	0801dbc9 	.word	0x0801dbc9
 8021360:	200000b8 	.word	0x200000b8

08021364 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8021364:	b538      	push	{r3, r4, r5, lr}
 8021366:	4c15      	ldr	r4, [pc, #84]	; (80213bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8021368:	4605      	mov	r5, r0
 802136a:	7823      	ldrb	r3, [r4, #0]
 802136c:	f3bf 8f5b 	dmb	ish
 8021370:	07da      	lsls	r2, r3, #31
 8021372:	d40b      	bmi.n	802138c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021374:	4620      	mov	r0, r4
 8021376:	f009 fb26 	bl	802a9c6 <__cxa_guard_acquire>
 802137a:	b138      	cbz	r0, 802138c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 802137c:	4620      	mov	r0, r4
 802137e:	f009 fb2e 	bl	802a9de <__cxa_guard_release>
 8021382:	4a0f      	ldr	r2, [pc, #60]	; (80213c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021384:	490f      	ldr	r1, [pc, #60]	; (80213c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8021386:	4810      	ldr	r0, [pc, #64]	; (80213c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021388:	f009 fb16 	bl	802a9b8 <__aeabi_atexit>
 802138c:	4c0f      	ldr	r4, [pc, #60]	; (80213cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 802138e:	7823      	ldrb	r3, [r4, #0]
 8021390:	f3bf 8f5b 	dmb	ish
 8021394:	07db      	lsls	r3, r3, #31
 8021396:	d40b      	bmi.n	80213b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021398:	4620      	mov	r0, r4
 802139a:	f009 fb14 	bl	802a9c6 <__cxa_guard_acquire>
 802139e:	b138      	cbz	r0, 80213b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80213a0:	4620      	mov	r0, r4
 80213a2:	f009 fb1c 	bl	802a9de <__cxa_guard_release>
 80213a6:	4a06      	ldr	r2, [pc, #24]	; (80213c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80213a8:	4909      	ldr	r1, [pc, #36]	; (80213d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80213aa:	480a      	ldr	r0, [pc, #40]	; (80213d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80213ac:	f009 fb04 	bl	802a9b8 <__aeabi_atexit>
 80213b0:	4b05      	ldr	r3, [pc, #20]	; (80213c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80213b2:	65ab      	str	r3, [r5, #88]	; 0x58
 80213b4:	4b07      	ldr	r3, [pc, #28]	; (80213d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80213b6:	65eb      	str	r3, [r5, #92]	; 0x5c
 80213b8:	bd38      	pop	{r3, r4, r5, pc}
 80213ba:	bf00      	nop
 80213bc:	20027d58 	.word	0x20027d58
 80213c0:	20000000 	.word	0x20000000
 80213c4:	0801dbcf 	.word	0x0801dbcf
 80213c8:	2000008c 	.word	0x2000008c
 80213cc:	20027d5c 	.word	0x20027d5c
 80213d0:	0801dbcd 	.word	0x0801dbcd
 80213d4:	20000090 	.word	0x20000090

080213d8 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 80213d8:	b510      	push	{r4, lr}
 80213da:	4604      	mov	r4, r0
 80213dc:	f7ff ff88 	bl	80212f0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80213e0:	4620      	mov	r0, r4
 80213e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80213e6:	f7ff bfbd 	b.w	8021364 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080213ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80213ec:	b538      	push	{r3, r4, r5, lr}
 80213ee:	4c15      	ldr	r4, [pc, #84]	; (8021444 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80213f0:	4605      	mov	r5, r0
 80213f2:	7823      	ldrb	r3, [r4, #0]
 80213f4:	f3bf 8f5b 	dmb	ish
 80213f8:	07da      	lsls	r2, r3, #31
 80213fa:	d40b      	bmi.n	8021414 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80213fc:	4620      	mov	r0, r4
 80213fe:	f009 fae2 	bl	802a9c6 <__cxa_guard_acquire>
 8021402:	b138      	cbz	r0, 8021414 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021404:	4620      	mov	r0, r4
 8021406:	f009 faea 	bl	802a9de <__cxa_guard_release>
 802140a:	4a0f      	ldr	r2, [pc, #60]	; (8021448 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 802140c:	490f      	ldr	r1, [pc, #60]	; (802144c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 802140e:	4810      	ldr	r0, [pc, #64]	; (8021450 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021410:	f009 fad2 	bl	802a9b8 <__aeabi_atexit>
 8021414:	4c0f      	ldr	r4, [pc, #60]	; (8021454 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8021416:	7823      	ldrb	r3, [r4, #0]
 8021418:	f3bf 8f5b 	dmb	ish
 802141c:	07db      	lsls	r3, r3, #31
 802141e:	d40b      	bmi.n	8021438 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021420:	4620      	mov	r0, r4
 8021422:	f009 fad0 	bl	802a9c6 <__cxa_guard_acquire>
 8021426:	b138      	cbz	r0, 8021438 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021428:	4620      	mov	r0, r4
 802142a:	f009 fad8 	bl	802a9de <__cxa_guard_release>
 802142e:	4a06      	ldr	r2, [pc, #24]	; (8021448 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021430:	4909      	ldr	r1, [pc, #36]	; (8021458 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8021432:	480a      	ldr	r0, [pc, #40]	; (802145c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021434:	f009 fac0 	bl	802a9b8 <__aeabi_atexit>
 8021438:	4b05      	ldr	r3, [pc, #20]	; (8021450 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802143a:	672b      	str	r3, [r5, #112]	; 0x70
 802143c:	4b07      	ldr	r3, [pc, #28]	; (802145c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802143e:	676b      	str	r3, [r5, #116]	; 0x74
 8021440:	bd38      	pop	{r3, r4, r5, pc}
 8021442:	bf00      	nop
 8021444:	20027d50 	.word	0x20027d50
 8021448:	20000000 	.word	0x20000000
 802144c:	0801dbc3 	.word	0x0801dbc3
 8021450:	20000084 	.word	0x20000084
 8021454:	20027d54 	.word	0x20027d54
 8021458:	0801dbc1 	.word	0x0801dbc1
 802145c:	20000088 	.word	0x20000088

08021460 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8021460:	b538      	push	{r3, r4, r5, lr}
 8021462:	4c15      	ldr	r4, [pc, #84]	; (80214b8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8021464:	4605      	mov	r5, r0
 8021466:	7823      	ldrb	r3, [r4, #0]
 8021468:	f3bf 8f5b 	dmb	ish
 802146c:	07da      	lsls	r2, r3, #31
 802146e:	d40b      	bmi.n	8021488 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021470:	4620      	mov	r0, r4
 8021472:	f009 faa8 	bl	802a9c6 <__cxa_guard_acquire>
 8021476:	b138      	cbz	r0, 8021488 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021478:	4620      	mov	r0, r4
 802147a:	f009 fab0 	bl	802a9de <__cxa_guard_release>
 802147e:	4a0f      	ldr	r2, [pc, #60]	; (80214bc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021480:	490f      	ldr	r1, [pc, #60]	; (80214c0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8021482:	4810      	ldr	r0, [pc, #64]	; (80214c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021484:	f009 fa98 	bl	802a9b8 <__aeabi_atexit>
 8021488:	4c0f      	ldr	r4, [pc, #60]	; (80214c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 802148a:	7823      	ldrb	r3, [r4, #0]
 802148c:	f3bf 8f5b 	dmb	ish
 8021490:	07db      	lsls	r3, r3, #31
 8021492:	d40b      	bmi.n	80214ac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021494:	4620      	mov	r0, r4
 8021496:	f009 fa96 	bl	802a9c6 <__cxa_guard_acquire>
 802149a:	b138      	cbz	r0, 80214ac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 802149c:	4620      	mov	r0, r4
 802149e:	f009 fa9e 	bl	802a9de <__cxa_guard_release>
 80214a2:	4a06      	ldr	r2, [pc, #24]	; (80214bc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80214a4:	4909      	ldr	r1, [pc, #36]	; (80214cc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80214a6:	480a      	ldr	r0, [pc, #40]	; (80214d0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80214a8:	f009 fa86 	bl	802a9b8 <__aeabi_atexit>
 80214ac:	4b05      	ldr	r3, [pc, #20]	; (80214c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80214ae:	66ab      	str	r3, [r5, #104]	; 0x68
 80214b0:	4b07      	ldr	r3, [pc, #28]	; (80214d0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80214b2:	66eb      	str	r3, [r5, #108]	; 0x6c
 80214b4:	bd38      	pop	{r3, r4, r5, pc}
 80214b6:	bf00      	nop
 80214b8:	20027d48 	.word	0x20027d48
 80214bc:	20000000 	.word	0x20000000
 80214c0:	0801dbc7 	.word	0x0801dbc7
 80214c4:	2000007c 	.word	0x2000007c
 80214c8:	20027d4c 	.word	0x20027d4c
 80214cc:	0801dbc5 	.word	0x0801dbc5
 80214d0:	20000080 	.word	0x20000080

080214d4 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 80214d4:	b510      	push	{r4, lr}
 80214d6:	4604      	mov	r4, r0
 80214d8:	f7ff ff88 	bl	80213ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80214dc:	4620      	mov	r0, r4
 80214de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80214e2:	f7ff bfbd 	b.w	8021460 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

080214e6 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 80214e6:	b510      	push	{r4, lr}
 80214e8:	4604      	mov	r4, r0
 80214ea:	f7ff fff3 	bl	80214d4 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 80214ee:	4620      	mov	r0, r4
 80214f0:	f7ff ff72 	bl	80213d8 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 80214f4:	4620      	mov	r0, r4
 80214f6:	f7ff fdf9 	bl	80210ec <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 80214fa:	4620      	mov	r0, r4
 80214fc:	f7ff fcfa 	bl	8020ef4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8021500:	4620      	mov	r0, r4
 8021502:	f7ff fd75 	bl	8020ff0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8021506:	4620      	mov	r0, r4
 8021508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802150c:	f7ff bee0 	b.w	80212d0 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08021510 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 8021510:	b538      	push	{r3, r4, r5, lr}
 8021512:	4c0b      	ldr	r4, [pc, #44]	; (8021540 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 8021514:	4605      	mov	r5, r0
 8021516:	7823      	ldrb	r3, [r4, #0]
 8021518:	f3bf 8f5b 	dmb	ish
 802151c:	07db      	lsls	r3, r3, #31
 802151e:	d40b      	bmi.n	8021538 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8021520:	4620      	mov	r0, r4
 8021522:	f009 fa50 	bl	802a9c6 <__cxa_guard_acquire>
 8021526:	b138      	cbz	r0, 8021538 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8021528:	4620      	mov	r0, r4
 802152a:	f009 fa58 	bl	802a9de <__cxa_guard_release>
 802152e:	4a05      	ldr	r2, [pc, #20]	; (8021544 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 8021530:	4905      	ldr	r1, [pc, #20]	; (8021548 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8021532:	4806      	ldr	r0, [pc, #24]	; (802154c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8021534:	f009 fa40 	bl	802a9b8 <__aeabi_atexit>
 8021538:	4b04      	ldr	r3, [pc, #16]	; (802154c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 802153a:	67ab      	str	r3, [r5, #120]	; 0x78
 802153c:	bd38      	pop	{r3, r4, r5, pc}
 802153e:	bf00      	nop
 8021540:	20027d3c 	.word	0x20027d3c
 8021544:	20000000 	.word	0x20000000
 8021548:	0801dbbf 	.word	0x0801dbbf
 802154c:	20000074 	.word	0x20000074

08021550 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 8021550:	b538      	push	{r3, r4, r5, lr}
 8021552:	4c0b      	ldr	r4, [pc, #44]	; (8021580 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 8021554:	4605      	mov	r5, r0
 8021556:	7823      	ldrb	r3, [r4, #0]
 8021558:	f3bf 8f5b 	dmb	ish
 802155c:	07db      	lsls	r3, r3, #31
 802155e:	d40b      	bmi.n	8021578 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 8021560:	4620      	mov	r0, r4
 8021562:	f009 fa30 	bl	802a9c6 <__cxa_guard_acquire>
 8021566:	b138      	cbz	r0, 8021578 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 8021568:	4620      	mov	r0, r4
 802156a:	f009 fa38 	bl	802a9de <__cxa_guard_release>
 802156e:	4a05      	ldr	r2, [pc, #20]	; (8021584 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 8021570:	4905      	ldr	r1, [pc, #20]	; (8021588 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 8021572:	4806      	ldr	r0, [pc, #24]	; (802158c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8021574:	f009 fa20 	bl	802a9b8 <__aeabi_atexit>
 8021578:	4b04      	ldr	r3, [pc, #16]	; (802158c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 802157a:	67eb      	str	r3, [r5, #124]	; 0x7c
 802157c:	bd38      	pop	{r3, r4, r5, pc}
 802157e:	bf00      	nop
 8021580:	20027d40 	.word	0x20027d40
 8021584:	20000000 	.word	0x20000000
 8021588:	0801dbbd 	.word	0x0801dbbd
 802158c:	20000078 	.word	0x20000078

08021590 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 8021590:	b570      	push	{r4, r5, r6, lr}
 8021592:	4d0d      	ldr	r5, [pc, #52]	; (80215c8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8021594:	4606      	mov	r6, r0
 8021596:	4c0d      	ldr	r4, [pc, #52]	; (80215cc <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8021598:	782b      	ldrb	r3, [r5, #0]
 802159a:	f3bf 8f5b 	dmb	ish
 802159e:	f013 0f01 	tst.w	r3, #1
 80215a2:	d10d      	bne.n	80215c0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 80215a4:	4628      	mov	r0, r5
 80215a6:	f009 fa0e 	bl	802a9c6 <__cxa_guard_acquire>
 80215aa:	b148      	cbz	r0, 80215c0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 80215ac:	4b08      	ldr	r3, [pc, #32]	; (80215d0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 80215ae:	4628      	mov	r0, r5
 80215b0:	6023      	str	r3, [r4, #0]
 80215b2:	f009 fa14 	bl	802a9de <__cxa_guard_release>
 80215b6:	4a07      	ldr	r2, [pc, #28]	; (80215d4 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 80215b8:	4620      	mov	r0, r4
 80215ba:	4907      	ldr	r1, [pc, #28]	; (80215d8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x48>)
 80215bc:	f009 f9fc 	bl	802a9b8 <__aeabi_atexit>
 80215c0:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
 80215c4:	bd70      	pop	{r4, r5, r6, pc}
 80215c6:	bf00      	nop
 80215c8:	20027d44 	.word	0x20027d44
 80215cc:	20027db8 	.word	0x20027db8
 80215d0:	08030ef4 	.word	0x08030ef4
 80215d4:	20000000 	.word	0x20000000
 80215d8:	0801dbbb 	.word	0x0801dbbb

080215dc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 80215dc:	b510      	push	{r4, lr}
 80215de:	4604      	mov	r4, r0
 80215e0:	f7ff ff96 	bl	8021510 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 80215e4:	4620      	mov	r0, r4
 80215e6:	f7ff ffb3 	bl	8021550 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 80215ea:	4620      	mov	r0, r4
 80215ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80215f0:	f7ff bfce 	b.w	8021590 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

080215f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 80215f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215f8:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 80215fc:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 8021600:	2d00      	cmp	r5, #0
 8021602:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 8021606:	fb05 4c0e 	mla	ip, r5, lr, r4
 802160a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 802160e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8021612:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8021616:	eb02 0a0c 	add.w	sl, r2, ip
 802161a:	8808      	ldrh	r0, [r1, #0]
 802161c:	f2c0 80b0 	blt.w	8021780 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8021620:	45ab      	cmp	fp, r5
 8021622:	f340 80ad 	ble.w	8021780 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8021626:	2c00      	cmp	r4, #0
 8021628:	f2c0 80a8 	blt.w	802177c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 802162c:	45a6      	cmp	lr, r4
 802162e:	f340 80a5 	ble.w	802177c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8021632:	f812 200c 	ldrb.w	r2, [r2, ip]
 8021636:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 802163a:	1c62      	adds	r2, r4, #1
 802163c:	f100 80a3 	bmi.w	8021786 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8021640:	4596      	cmp	lr, r2
 8021642:	f340 80a0 	ble.w	8021786 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8021646:	f1b9 0f00 	cmp.w	r9, #0
 802164a:	f000 809c 	beq.w	8021786 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 802164e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8021652:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8021656:	3501      	adds	r5, #1
 8021658:	f100 8099 	bmi.w	802178e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 802165c:	45ab      	cmp	fp, r5
 802165e:	f340 8096 	ble.w	802178e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8021662:	2f00      	cmp	r7, #0
 8021664:	f000 8093 	beq.w	802178e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8021668:	2c00      	cmp	r4, #0
 802166a:	f2c0 808e 	blt.w	802178a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 802166e:	45a6      	cmp	lr, r4
 8021670:	f340 808b 	ble.w	802178a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8021674:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8021678:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 802167c:	3401      	adds	r4, #1
 802167e:	f100 8089 	bmi.w	8021794 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8021682:	45a6      	cmp	lr, r4
 8021684:	f340 8086 	ble.w	8021794 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8021688:	f1b9 0f00 	cmp.w	r9, #0
 802168c:	f000 8082 	beq.w	8021794 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8021690:	44d6      	add	lr, sl
 8021692:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8021696:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802169a:	ea4f 4408 	mov.w	r4, r8, lsl #16
 802169e:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 80216a2:	fb19 fe07 	smulbb	lr, r9, r7
 80216a6:	f1c7 0210 	rsb	r2, r7, #16
 80216aa:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80216ae:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 80216b2:	eba2 0209 	sub.w	r2, r2, r9
 80216b6:	ea44 0808 	orr.w	r8, r4, r8
 80216ba:	ea4f 440c 	mov.w	r4, ip, lsl #16
 80216be:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80216c2:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 80216c6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80216ca:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 80216ce:	ea44 0c0c 	orr.w	ip, r4, ip
 80216d2:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 80216d6:	fb04 f40c 	mul.w	r4, r4, ip
 80216da:	fb02 4808 	mla	r8, r2, r8, r4
 80216de:	041a      	lsls	r2, r3, #16
 80216e0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80216e4:	b2b4      	uxth	r4, r6
 80216e6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80216ea:	43f6      	mvns	r6, r6
 80216ec:	4313      	orrs	r3, r2
 80216ee:	042a      	lsls	r2, r5, #16
 80216f0:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80216f4:	b2f6      	uxtb	r6, r6
 80216f6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80216fa:	fb0e 8303 	mla	r3, lr, r3, r8
 80216fe:	432a      	orrs	r2, r5
 8021700:	fb07 3202 	mla	r2, r7, r2, r3
 8021704:	10c7      	asrs	r7, r0, #3
 8021706:	0d53      	lsrs	r3, r2, #21
 8021708:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802170c:	0952      	lsrs	r2, r2, #5
 802170e:	fb17 f706 	smulbb	r7, r7, r6
 8021712:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021716:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802171a:	431a      	orrs	r2, r3
 802171c:	b293      	uxth	r3, r2
 802171e:	1202      	asrs	r2, r0, #8
 8021720:	121d      	asrs	r5, r3, #8
 8021722:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8021726:	00c0      	lsls	r0, r0, #3
 8021728:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802172c:	fb12 f206 	smulbb	r2, r2, r6
 8021730:	b2c0      	uxtb	r0, r0
 8021732:	fb05 2504 	mla	r5, r5, r4, r2
 8021736:	10da      	asrs	r2, r3, #3
 8021738:	fb10 f006 	smulbb	r0, r0, r6
 802173c:	00db      	lsls	r3, r3, #3
 802173e:	b2ad      	uxth	r5, r5
 8021740:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021744:	b2db      	uxtb	r3, r3
 8021746:	fb02 7204 	mla	r2, r2, r4, r7
 802174a:	fb03 0004 	mla	r0, r3, r4, r0
 802174e:	1c6b      	adds	r3, r5, #1
 8021750:	b292      	uxth	r2, r2
 8021752:	b280      	uxth	r0, r0
 8021754:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021758:	1c43      	adds	r3, r0, #1
 802175a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802175e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021762:	1c50      	adds	r0, r2, #1
 8021764:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8021768:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802176c:	0952      	lsrs	r2, r2, #5
 802176e:	432b      	orrs	r3, r5
 8021770:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021774:	4313      	orrs	r3, r2
 8021776:	800b      	strh	r3, [r1, #0]
 8021778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802177c:	4680      	mov	r8, r0
 802177e:	e75c      	b.n	802163a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8021780:	4684      	mov	ip, r0
 8021782:	4680      	mov	r8, r0
 8021784:	e767      	b.n	8021656 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8021786:	4684      	mov	ip, r0
 8021788:	e765      	b.n	8021656 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 802178a:	4605      	mov	r5, r0
 802178c:	e776      	b.n	802167c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 802178e:	4603      	mov	r3, r0
 8021790:	4605      	mov	r5, r0
 8021792:	e782      	b.n	802169a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8021794:	4603      	mov	r3, r0
 8021796:	e780      	b.n	802169a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08021798 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802179c:	b099      	sub	sp, #100	; 0x64
 802179e:	9215      	str	r2, [sp, #84]	; 0x54
 80217a0:	9309      	str	r3, [sp, #36]	; 0x24
 80217a2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80217a4:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 80217a8:	9016      	str	r0, [sp, #88]	; 0x58
 80217aa:	930d      	str	r3, [sp, #52]	; 0x34
 80217ac:	6850      	ldr	r0, [r2, #4]
 80217ae:	910c      	str	r1, [sp, #48]	; 0x30
 80217b0:	6812      	ldr	r2, [r2, #0]
 80217b2:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 80217b6:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 80217ba:	fb00 1303 	mla	r3, r0, r3, r1
 80217be:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 80217c2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80217c4:	681b      	ldr	r3, [r3, #0]
 80217c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80217c8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80217ca:	685e      	ldr	r6, [r3, #4]
 80217cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80217ce:	3604      	adds	r6, #4
 80217d0:	43db      	mvns	r3, r3
 80217d2:	b2db      	uxtb	r3, r3
 80217d4:	930a      	str	r3, [sp, #40]	; 0x28
 80217d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80217d8:	2b00      	cmp	r3, #0
 80217da:	dc03      	bgt.n	80217e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80217dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80217de:	2b00      	cmp	r3, #0
 80217e0:	f340 8225 	ble.w	8021c2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 80217e4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80217e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80217ea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80217ee:	1e48      	subs	r0, r1, #1
 80217f0:	1e57      	subs	r7, r2, #1
 80217f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80217f4:	2b00      	cmp	r3, #0
 80217f6:	f340 80e3 	ble.w	80219c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80217fa:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 80217fe:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021802:	d406      	bmi.n	8021812 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021804:	4584      	cmp	ip, r0
 8021806:	da04      	bge.n	8021812 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021808:	2b00      	cmp	r3, #0
 802180a:	db02      	blt.n	8021812 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802180c:	42bb      	cmp	r3, r7
 802180e:	f2c0 80d8 	blt.w	80219c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8021812:	f11c 0c01 	adds.w	ip, ip, #1
 8021816:	f100 80c9 	bmi.w	80219ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802181a:	4561      	cmp	r1, ip
 802181c:	f2c0 80c6 	blt.w	80219ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021820:	3301      	adds	r3, #1
 8021822:	f100 80c3 	bmi.w	80219ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021826:	429a      	cmp	r2, r3
 8021828:	f2c0 80c0 	blt.w	80219ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802182c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8021830:	4647      	mov	r7, r8
 8021832:	f1bb 0f00 	cmp.w	fp, #0
 8021836:	f340 80e3 	ble.w	8021a00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 802183a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802183c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8021840:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021842:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8021846:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802184a:	ea5f 422a 	movs.w	r2, sl, asr #16
 802184e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021852:	689b      	ldr	r3, [r3, #8]
 8021854:	f100 8121 	bmi.w	8021a9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8021858:	f103 39ff 	add.w	r9, r3, #4294967295
 802185c:	454a      	cmp	r2, r9
 802185e:	f280 811c 	bge.w	8021a9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8021862:	f1bc 0f00 	cmp.w	ip, #0
 8021866:	f2c0 8118 	blt.w	8021a9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 802186a:	f10e 39ff 	add.w	r9, lr, #4294967295
 802186e:	45cc      	cmp	ip, r9
 8021870:	f280 8113 	bge.w	8021a9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8021874:	b21b      	sxth	r3, r3
 8021876:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021878:	fb0c 2203 	mla	r2, ip, r3, r2
 802187c:	eb04 0902 	add.w	r9, r4, r2
 8021880:	5ca2      	ldrb	r2, [r4, r2]
 8021882:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8021886:	2800      	cmp	r0, #0
 8021888:	f000 80fe 	beq.w	8021a88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 802188c:	f899 2001 	ldrb.w	r2, [r9, #1]
 8021890:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8021894:	9211      	str	r2, [sp, #68]	; 0x44
 8021896:	b151      	cbz	r1, 80218ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8021898:	eb09 0203 	add.w	r2, r9, r3
 802189c:	f819 3003 	ldrb.w	r3, [r9, r3]
 80218a0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80218a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80218a6:	7853      	ldrb	r3, [r2, #1]
 80218a8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80218ac:	9312      	str	r3, [sp, #72]	; 0x48
 80218ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80218b0:	fb10 f201 	smulbb	r2, r0, r1
 80218b4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80218b6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80218ba:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80218be:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80218c2:	10d2      	asrs	r2, r2, #3
 80218c4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80218c8:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 80218cc:	ea4c 0c03 	orr.w	ip, ip, r3
 80218d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80218d2:	041b      	lsls	r3, r3, #16
 80218d4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80218d8:	4323      	orrs	r3, r4
 80218da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80218dc:	4353      	muls	r3, r2
 80218de:	fb09 330c 	mla	r3, r9, ip, r3
 80218e2:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80218e6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80218ea:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80218ee:	ea4c 0e0e 	orr.w	lr, ip, lr
 80218f2:	f1c1 0c10 	rsb	ip, r1, #16
 80218f6:	ebac 0c00 	sub.w	ip, ip, r0
 80218fa:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80218fe:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8021902:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8021906:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021908:	0418      	lsls	r0, r3, #16
 802190a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802190e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8021912:	4318      	orrs	r0, r3
 8021914:	fb02 c200 	mla	r2, r2, r0, ip
 8021918:	8838      	ldrh	r0, [r7, #0]
 802191a:	0d53      	lsrs	r3, r2, #21
 802191c:	0952      	lsrs	r2, r2, #5
 802191e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021922:	1201      	asrs	r1, r0, #8
 8021924:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021928:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 802192c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021930:	00c0      	lsls	r0, r0, #3
 8021932:	431a      	orrs	r2, r3
 8021934:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8021938:	fb11 f104 	smulbb	r1, r1, r4
 802193c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8021940:	b292      	uxth	r2, r2
 8021942:	fb1e fe04 	smulbb	lr, lr, r4
 8021946:	b2c0      	uxtb	r0, r0
 8021948:	ea4f 2c22 	mov.w	ip, r2, asr #8
 802194c:	fb10 f004 	smulbb	r0, r0, r4
 8021950:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021954:	fb0c 1c03 	mla	ip, ip, r3, r1
 8021958:	10d1      	asrs	r1, r2, #3
 802195a:	00d2      	lsls	r2, r2, #3
 802195c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021960:	fa1f fc8c 	uxth.w	ip, ip
 8021964:	b2d2      	uxtb	r2, r2
 8021966:	fb01 e103 	mla	r1, r1, r3, lr
 802196a:	fb02 0303 	mla	r3, r2, r3, r0
 802196e:	b289      	uxth	r1, r1
 8021970:	b29a      	uxth	r2, r3
 8021972:	f10c 0301 	add.w	r3, ip, #1
 8021976:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802197a:	1c53      	adds	r3, r2, #1
 802197c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021980:	1c4a      	adds	r2, r1, #1
 8021982:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021986:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802198a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802198e:	0949      	lsrs	r1, r1, #5
 8021990:	ea43 030c 	orr.w	r3, r3, ip
 8021994:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021998:	430b      	orrs	r3, r1
 802199a:	803b      	strh	r3, [r7, #0]
 802199c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802199e:	3702      	adds	r7, #2
 80219a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80219a4:	449a      	add	sl, r3
 80219a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80219a8:	441d      	add	r5, r3
 80219aa:	e742      	b.n	8021832 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80219ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80219ae:	f108 0802 	add.w	r8, r8, #2
 80219b2:	449a      	add	sl, r3
 80219b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80219b6:	441d      	add	r5, r3
 80219b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80219ba:	3b01      	subs	r3, #1
 80219bc:	9309      	str	r3, [sp, #36]	; 0x24
 80219be:	e718      	b.n	80217f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80219c0:	d023      	beq.n	8021a0a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 80219c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80219c4:	9825      	ldr	r0, [sp, #148]	; 0x94
 80219c6:	3b01      	subs	r3, #1
 80219c8:	fb00 a003 	mla	r0, r0, r3, sl
 80219cc:	1400      	asrs	r0, r0, #16
 80219ce:	f53f af2d 	bmi.w	802182c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80219d2:	3901      	subs	r1, #1
 80219d4:	4288      	cmp	r0, r1
 80219d6:	f6bf af29 	bge.w	802182c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80219da:	9926      	ldr	r1, [sp, #152]	; 0x98
 80219dc:	fb01 5303 	mla	r3, r1, r3, r5
 80219e0:	141b      	asrs	r3, r3, #16
 80219e2:	f53f af23 	bmi.w	802182c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80219e6:	3a01      	subs	r2, #1
 80219e8:	4293      	cmp	r3, r2
 80219ea:	f6bf af1f 	bge.w	802182c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80219ee:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80219f2:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 80219f6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80219fa:	f1be 0f00 	cmp.w	lr, #0
 80219fe:	dc6c      	bgt.n	8021ada <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8021a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021a02:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021a06:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8021a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021a0c:	2b00      	cmp	r3, #0
 8021a0e:	f340 810e 	ble.w	8021c2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8021a12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021a16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021a18:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021a1c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021a20:	eef0 6a62 	vmov.f32	s13, s5
 8021a24:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021a28:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021a2c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021a30:	ee16 aa90 	vmov	sl, s13
 8021a34:	eef0 6a43 	vmov.f32	s13, s6
 8021a38:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021a3c:	ee16 5a90 	vmov	r5, s13
 8021a40:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021a44:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021a48:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021a4c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021a50:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021a54:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021a58:	ee12 2a90 	vmov	r2, s5
 8021a5c:	eef0 2a47 	vmov.f32	s5, s14
 8021a60:	fb92 f3f3 	sdiv	r3, r2, r3
 8021a64:	ee13 2a10 	vmov	r2, s6
 8021a68:	9325      	str	r3, [sp, #148]	; 0x94
 8021a6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021a6c:	eeb0 3a67 	vmov.f32	s6, s15
 8021a70:	fb92 f3f3 	sdiv	r3, r2, r3
 8021a74:	9326      	str	r3, [sp, #152]	; 0x98
 8021a76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021a78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8021a7a:	3b01      	subs	r3, #1
 8021a7c:	930c      	str	r3, [sp, #48]	; 0x30
 8021a7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021a80:	bf08      	it	eq
 8021a82:	4613      	moveq	r3, r2
 8021a84:	9309      	str	r3, [sp, #36]	; 0x24
 8021a86:	e6a6      	b.n	80217d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8021a88:	2900      	cmp	r1, #0
 8021a8a:	f43f af10 	beq.w	80218ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8021a8e:	f819 3003 	ldrb.w	r3, [r9, r3]
 8021a92:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021a96:	930f      	str	r3, [sp, #60]	; 0x3c
 8021a98:	e709      	b.n	80218ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8021a9a:	f112 0901 	adds.w	r9, r2, #1
 8021a9e:	f53f af7d 	bmi.w	802199c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021aa2:	454b      	cmp	r3, r9
 8021aa4:	f6ff af7a 	blt.w	802199c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021aa8:	f11c 0901 	adds.w	r9, ip, #1
 8021aac:	f53f af76 	bmi.w	802199c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021ab0:	45ce      	cmp	lr, r9
 8021ab2:	f6ff af73 	blt.w	802199c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021ab6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021ab8:	b21b      	sxth	r3, r3
 8021aba:	9202      	str	r2, [sp, #8]
 8021abc:	fa0f f28e 	sxth.w	r2, lr
 8021ac0:	9300      	str	r3, [sp, #0]
 8021ac2:	4633      	mov	r3, r6
 8021ac4:	9201      	str	r2, [sp, #4]
 8021ac6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021ac8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8021acc:	e9cd c003 	strd	ip, r0, [sp, #12]
 8021ad0:	4639      	mov	r1, r7
 8021ad2:	9816      	ldr	r0, [sp, #88]	; 0x58
 8021ad4:	f7ff fd8e 	bl	80215f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8021ad8:	e760      	b.n	802199c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021ada:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021adc:	ea4f 422a 	mov.w	r2, sl, asr #16
 8021ae0:	1429      	asrs	r1, r5, #16
 8021ae2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021ae4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8021ae8:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8021aec:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021af0:	fb03 2101 	mla	r1, r3, r1, r2
 8021af4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021af6:	440a      	add	r2, r1
 8021af8:	5c61      	ldrb	r1, [r4, r1]
 8021afa:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8021afe:	f1bc 0f00 	cmp.w	ip, #0
 8021b02:	f000 808c 	beq.w	8021c1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8021b06:	7857      	ldrb	r7, [r2, #1]
 8021b08:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8021b0c:	9413      	str	r4, [sp, #76]	; 0x4c
 8021b0e:	b140      	cbz	r0, 8021b22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021b10:	18d7      	adds	r7, r2, r3
 8021b12:	5cd3      	ldrb	r3, [r2, r3]
 8021b14:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021b18:	9310      	str	r3, [sp, #64]	; 0x40
 8021b1a:	787b      	ldrb	r3, [r7, #1]
 8021b1c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021b20:	9314      	str	r3, [sp, #80]	; 0x50
 8021b22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021b24:	fb1c f200 	smulbb	r2, ip, r0
 8021b28:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021b2a:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021b2e:	041f      	lsls	r7, r3, #16
 8021b30:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021b34:	10d2      	asrs	r2, r2, #3
 8021b36:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 8021b3a:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8021b3e:	431f      	orrs	r7, r3
 8021b40:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8021b44:	9317      	str	r3, [sp, #92]	; 0x5c
 8021b46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021b48:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8021b4a:	041b      	lsls	r3, r3, #16
 8021b4c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8021b50:	ea43 030b 	orr.w	r3, r3, fp
 8021b54:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8021b58:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021b5c:	4353      	muls	r3, r2
 8021b5e:	fb04 3707 	mla	r7, r4, r7, r3
 8021b62:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8021b66:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021b68:	ea43 0b01 	orr.w	fp, r3, r1
 8021b6c:	f1c0 0110 	rsb	r1, r0, #16
 8021b70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021b72:	eba1 0c0c 	sub.w	ip, r1, ip
 8021b76:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8021b7a:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8021b7e:	fb0c 770b 	mla	r7, ip, fp, r7
 8021b82:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8021b86:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8021b8a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021b8e:	ea4c 0c0b 	orr.w	ip, ip, fp
 8021b92:	fb02 770c 	mla	r7, r2, ip, r7
 8021b96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021b98:	0d79      	lsrs	r1, r7, #21
 8021b9a:	8812      	ldrh	r2, [r2, #0]
 8021b9c:	097f      	lsrs	r7, r7, #5
 8021b9e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021ba2:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8021ba6:	430f      	orrs	r7, r1
 8021ba8:	1211      	asrs	r1, r2, #8
 8021baa:	b2bb      	uxth	r3, r7
 8021bac:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021bb0:	10d7      	asrs	r7, r2, #3
 8021bb2:	fb11 f104 	smulbb	r1, r1, r4
 8021bb6:	1218      	asrs	r0, r3, #8
 8021bb8:	00d2      	lsls	r2, r2, #3
 8021bba:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021bbe:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021bc2:	fb17 f704 	smulbb	r7, r7, r4
 8021bc6:	b2d2      	uxtb	r2, r2
 8021bc8:	fb00 1009 	mla	r0, r0, r9, r1
 8021bcc:	10d9      	asrs	r1, r3, #3
 8021bce:	fb12 f204 	smulbb	r2, r2, r4
 8021bd2:	00db      	lsls	r3, r3, #3
 8021bd4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021bd8:	b280      	uxth	r0, r0
 8021bda:	b2db      	uxtb	r3, r3
 8021bdc:	fb01 7109 	mla	r1, r1, r9, r7
 8021be0:	fb03 2309 	mla	r3, r3, r9, r2
 8021be4:	1c42      	adds	r2, r0, #1
 8021be6:	b289      	uxth	r1, r1
 8021be8:	b29b      	uxth	r3, r3
 8021bea:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021bee:	1c4f      	adds	r7, r1, #1
 8021bf0:	1c5a      	adds	r2, r3, #1
 8021bf2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8021bf6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8021bfa:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021bfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021c00:	0949      	lsrs	r1, r1, #5
 8021c02:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021c06:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021c0a:	4310      	orrs	r0, r2
 8021c0c:	4308      	orrs	r0, r1
 8021c0e:	f823 0b02 	strh.w	r0, [r3], #2
 8021c12:	930e      	str	r3, [sp, #56]	; 0x38
 8021c14:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021c16:	449a      	add	sl, r3
 8021c18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021c1a:	441d      	add	r5, r3
 8021c1c:	e6ed      	b.n	80219fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 8021c1e:	2800      	cmp	r0, #0
 8021c20:	f43f af7f 	beq.w	8021b22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021c24:	5cd3      	ldrb	r3, [r2, r3]
 8021c26:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021c2a:	9310      	str	r3, [sp, #64]	; 0x40
 8021c2c:	e779      	b.n	8021b22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021c2e:	b019      	add	sp, #100	; 0x64
 8021c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021c34 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8021c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021c38:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 8021c3c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8021c40:	f1b8 0f00 	cmp.w	r8, #0
 8021c44:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 8021c48:	fb08 470e 	mla	r7, r8, lr, r4
 8021c4c:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8021c50:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8021c54:	eb02 0907 	add.w	r9, r2, r7
 8021c58:	8808      	ldrh	r0, [r1, #0]
 8021c5a:	db67      	blt.n	8021d2c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8021c5c:	45c2      	cmp	sl, r8
 8021c5e:	dd65      	ble.n	8021d2c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8021c60:	2c00      	cmp	r4, #0
 8021c62:	db61      	blt.n	8021d28 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8021c64:	45a6      	cmp	lr, r4
 8021c66:	dd5f      	ble.n	8021d28 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8021c68:	5dd2      	ldrb	r2, [r2, r7]
 8021c6a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8021c6e:	1c62      	adds	r2, r4, #1
 8021c70:	d45f      	bmi.n	8021d32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8021c72:	4596      	cmp	lr, r2
 8021c74:	dd5d      	ble.n	8021d32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8021c76:	2d00      	cmp	r5, #0
 8021c78:	d05b      	beq.n	8021d32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8021c7a:	f899 2001 	ldrb.w	r2, [r9, #1]
 8021c7e:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8021c82:	f118 0801 	adds.w	r8, r8, #1
 8021c86:	d458      	bmi.n	8021d3a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8021c88:	45c2      	cmp	sl, r8
 8021c8a:	dd56      	ble.n	8021d3a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8021c8c:	2e00      	cmp	r6, #0
 8021c8e:	d054      	beq.n	8021d3a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8021c90:	2c00      	cmp	r4, #0
 8021c92:	db50      	blt.n	8021d36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8021c94:	45a6      	cmp	lr, r4
 8021c96:	dd4e      	ble.n	8021d36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8021c98:	f819 200e 	ldrb.w	r2, [r9, lr]
 8021c9c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8021ca0:	3401      	adds	r4, #1
 8021ca2:	d407      	bmi.n	8021cb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8021ca4:	45a6      	cmp	lr, r4
 8021ca6:	dd05      	ble.n	8021cb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8021ca8:	b125      	cbz	r5, 8021cb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8021caa:	44ce      	add	lr, r9
 8021cac:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8021cb0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8021cb4:	fb15 f406 	smulbb	r4, r5, r6
 8021cb8:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8021cbc:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8021cc0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8021cc4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8021cc8:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8021ccc:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021cd0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8021cd4:	ea43 0c0c 	orr.w	ip, r3, ip
 8021cd8:	f1c6 0310 	rsb	r3, r6, #16
 8021cdc:	ea4e 0707 	orr.w	r7, lr, r7
 8021ce0:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8021ce4:	1b5b      	subs	r3, r3, r5
 8021ce6:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8021cea:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8021cee:	437d      	muls	r5, r7
 8021cf0:	fb03 5c0c 	mla	ip, r3, ip, r5
 8021cf4:	0403      	lsls	r3, r0, #16
 8021cf6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021cfa:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8021cfe:	4318      	orrs	r0, r3
 8021d00:	0413      	lsls	r3, r2, #16
 8021d02:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021d06:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8021d0a:	fb04 c000 	mla	r0, r4, r0, ip
 8021d0e:	4313      	orrs	r3, r2
 8021d10:	fb06 0003 	mla	r0, r6, r3, r0
 8021d14:	0d43      	lsrs	r3, r0, #21
 8021d16:	0940      	lsrs	r0, r0, #5
 8021d18:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021d1c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021d20:	4318      	orrs	r0, r3
 8021d22:	8008      	strh	r0, [r1, #0]
 8021d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021d28:	4684      	mov	ip, r0
 8021d2a:	e7a0      	b.n	8021c6e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 8021d2c:	4607      	mov	r7, r0
 8021d2e:	4684      	mov	ip, r0
 8021d30:	e7a7      	b.n	8021c82 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8021d32:	4607      	mov	r7, r0
 8021d34:	e7a5      	b.n	8021c82 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8021d36:	4602      	mov	r2, r0
 8021d38:	e7b2      	b.n	8021ca0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 8021d3a:	4602      	mov	r2, r0
 8021d3c:	e7ba      	b.n	8021cb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

08021d3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021d3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d42:	b093      	sub	sp, #76	; 0x4c
 8021d44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021d48:	920f      	str	r2, [sp, #60]	; 0x3c
 8021d4a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021d4c:	9010      	str	r0, [sp, #64]	; 0x40
 8021d4e:	9108      	str	r1, [sp, #32]
 8021d50:	6850      	ldr	r0, [r2, #4]
 8021d52:	9306      	str	r3, [sp, #24]
 8021d54:	6812      	ldr	r2, [r2, #0]
 8021d56:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8021d5a:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8021d5e:	fb00 1303 	mla	r3, r0, r3, r1
 8021d62:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8021d66:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021d68:	681b      	ldr	r3, [r3, #0]
 8021d6a:	9307      	str	r3, [sp, #28]
 8021d6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021d6e:	685f      	ldr	r7, [r3, #4]
 8021d70:	3704      	adds	r7, #4
 8021d72:	9b08      	ldr	r3, [sp, #32]
 8021d74:	2b00      	cmp	r3, #0
 8021d76:	dc03      	bgt.n	8021d80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8021d78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021d7a:	2b00      	cmp	r3, #0
 8021d7c:	f340 81b2 	ble.w	80220e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8021d80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021d82:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021d86:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021d8a:	1e48      	subs	r0, r1, #1
 8021d8c:	f102 3cff 	add.w	ip, r2, #4294967295
 8021d90:	9b06      	ldr	r3, [sp, #24]
 8021d92:	2b00      	cmp	r3, #0
 8021d94:	f340 80a9 	ble.w	8021eea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8021d98:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8021d9c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021da0:	d406      	bmi.n	8021db0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021da2:	4586      	cmp	lr, r0
 8021da4:	da04      	bge.n	8021db0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021da6:	2b00      	cmp	r3, #0
 8021da8:	db02      	blt.n	8021db0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021daa:	4563      	cmp	r3, ip
 8021dac:	f2c0 809e 	blt.w	8021eec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8021db0:	f11e 0e01 	adds.w	lr, lr, #1
 8021db4:	f100 808f 	bmi.w	8021ed6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021db8:	4571      	cmp	r1, lr
 8021dba:	f2c0 808c 	blt.w	8021ed6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021dbe:	3301      	adds	r3, #1
 8021dc0:	f100 8089 	bmi.w	8021ed6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021dc4:	429a      	cmp	r2, r3
 8021dc6:	f2c0 8086 	blt.w	8021ed6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021dca:	f8dd b018 	ldr.w	fp, [sp, #24]
 8021dce:	46c8      	mov	r8, r9
 8021dd0:	f1bb 0f00 	cmp.w	fp, #0
 8021dd4:	f340 80a6 	ble.w	8021f24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8021dd8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8021dda:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8021dde:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021de0:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8021de4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8021de8:	1422      	asrs	r2, r4, #16
 8021dea:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021dee:	689b      	ldr	r3, [r3, #8]
 8021df0:	f100 80e3 	bmi.w	8021fba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8021df4:	f103 3aff 	add.w	sl, r3, #4294967295
 8021df8:	4552      	cmp	r2, sl
 8021dfa:	f280 80de 	bge.w	8021fba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8021dfe:	f1bc 0f00 	cmp.w	ip, #0
 8021e02:	f2c0 80da 	blt.w	8021fba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8021e06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8021e0a:	45d4      	cmp	ip, sl
 8021e0c:	f280 80d5 	bge.w	8021fba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8021e10:	b21b      	sxth	r3, r3
 8021e12:	9d07      	ldr	r5, [sp, #28]
 8021e14:	fb0c 2203 	mla	r2, ip, r3, r2
 8021e18:	eb05 0a02 	add.w	sl, r5, r2
 8021e1c:	5caa      	ldrb	r2, [r5, r2]
 8021e1e:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8021e22:	2800      	cmp	r0, #0
 8021e24:	f000 80c0 	beq.w	8021fa8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8021e28:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8021e2c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8021e30:	920b      	str	r2, [sp, #44]	; 0x2c
 8021e32:	b151      	cbz	r1, 8021e4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8021e34:	eb0a 0203 	add.w	r2, sl, r3
 8021e38:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8021e3c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021e40:	9309      	str	r3, [sp, #36]	; 0x24
 8021e42:	7853      	ldrb	r3, [r2, #1]
 8021e44:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021e48:	930c      	str	r3, [sp, #48]	; 0x30
 8021e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021e4c:	fb10 f201 	smulbb	r2, r0, r1
 8021e50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021e52:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8021e56:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021e5a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8021e5e:	10d2      	asrs	r2, r2, #3
 8021e60:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021e64:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8021e68:	ea4c 0c03 	orr.w	ip, ip, r3
 8021e6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021e6e:	041b      	lsls	r3, r3, #16
 8021e70:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8021e74:	432b      	orrs	r3, r5
 8021e76:	4353      	muls	r3, r2
 8021e78:	fb0a 330c 	mla	r3, sl, ip, r3
 8021e7c:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8021e80:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021e84:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021e88:	ea4c 0e0e 	orr.w	lr, ip, lr
 8021e8c:	f1c1 0c10 	rsb	ip, r1, #16
 8021e90:	ebac 0c00 	sub.w	ip, ip, r0
 8021e94:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8021e98:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8021e9c:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8021ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021ea2:	0418      	lsls	r0, r3, #16
 8021ea4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021ea8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8021eac:	4318      	orrs	r0, r3
 8021eae:	fb02 c200 	mla	r2, r2, r0, ip
 8021eb2:	0d53      	lsrs	r3, r2, #21
 8021eb4:	0952      	lsrs	r2, r2, #5
 8021eb6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021eba:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021ebe:	431a      	orrs	r2, r3
 8021ec0:	f8a8 2000 	strh.w	r2, [r8]
 8021ec4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021ec6:	f108 0802 	add.w	r8, r8, #2
 8021eca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021ece:	441c      	add	r4, r3
 8021ed0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021ed2:	441e      	add	r6, r3
 8021ed4:	e77c      	b.n	8021dd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021ed6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021ed8:	f109 0902 	add.w	r9, r9, #2
 8021edc:	441c      	add	r4, r3
 8021ede:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021ee0:	441e      	add	r6, r3
 8021ee2:	9b06      	ldr	r3, [sp, #24]
 8021ee4:	3b01      	subs	r3, #1
 8021ee6:	9306      	str	r3, [sp, #24]
 8021ee8:	e752      	b.n	8021d90 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8021eea:	d020      	beq.n	8021f2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8021eec:	9b06      	ldr	r3, [sp, #24]
 8021eee:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8021ef0:	3b01      	subs	r3, #1
 8021ef2:	fb00 4003 	mla	r0, r0, r3, r4
 8021ef6:	1400      	asrs	r0, r0, #16
 8021ef8:	f53f af67 	bmi.w	8021dca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021efc:	3901      	subs	r1, #1
 8021efe:	4288      	cmp	r0, r1
 8021f00:	f6bf af63 	bge.w	8021dca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021f04:	9920      	ldr	r1, [sp, #128]	; 0x80
 8021f06:	fb01 6303 	mla	r3, r1, r3, r6
 8021f0a:	141b      	asrs	r3, r3, #16
 8021f0c:	f53f af5d 	bmi.w	8021dca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021f10:	3a01      	subs	r2, #1
 8021f12:	4293      	cmp	r3, r2
 8021f14:	f6bf af59 	bge.w	8021dca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021f18:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8021f1c:	46ca      	mov	sl, r9
 8021f1e:	f1b8 0f00 	cmp.w	r8, #0
 8021f22:	dc67      	bgt.n	8021ff4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8021f24:	9b06      	ldr	r3, [sp, #24]
 8021f26:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8021f2a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8021f2e:	9b08      	ldr	r3, [sp, #32]
 8021f30:	2b00      	cmp	r3, #0
 8021f32:	f340 80d7 	ble.w	80220e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8021f36:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021f3a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021f3c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021f40:	eeb0 6a62 	vmov.f32	s12, s5
 8021f44:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021f48:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021f4c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021f50:	ee16 4a10 	vmov	r4, s12
 8021f54:	eeb0 6a43 	vmov.f32	s12, s6
 8021f58:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021f5c:	ee16 6a10 	vmov	r6, s12
 8021f60:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021f64:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021f68:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021f6c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021f70:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021f74:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021f78:	ee12 2a90 	vmov	r2, s5
 8021f7c:	eef0 2a47 	vmov.f32	s5, s14
 8021f80:	fb92 f3f3 	sdiv	r3, r2, r3
 8021f84:	ee13 2a10 	vmov	r2, s6
 8021f88:	931f      	str	r3, [sp, #124]	; 0x7c
 8021f8a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021f8c:	eeb0 3a67 	vmov.f32	s6, s15
 8021f90:	fb92 f3f3 	sdiv	r3, r2, r3
 8021f94:	9320      	str	r3, [sp, #128]	; 0x80
 8021f96:	9b08      	ldr	r3, [sp, #32]
 8021f98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021f9a:	3b01      	subs	r3, #1
 8021f9c:	9308      	str	r3, [sp, #32]
 8021f9e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021fa0:	bf08      	it	eq
 8021fa2:	4613      	moveq	r3, r2
 8021fa4:	9306      	str	r3, [sp, #24]
 8021fa6:	e6e4      	b.n	8021d72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8021fa8:	2900      	cmp	r1, #0
 8021faa:	f43f af4e 	beq.w	8021e4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8021fae:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8021fb2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8021fb8:	e747      	b.n	8021e4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8021fba:	f112 0a01 	adds.w	sl, r2, #1
 8021fbe:	d481      	bmi.n	8021ec4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021fc0:	4553      	cmp	r3, sl
 8021fc2:	f6ff af7f 	blt.w	8021ec4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021fc6:	f11c 0a01 	adds.w	sl, ip, #1
 8021fca:	f53f af7b 	bmi.w	8021ec4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021fce:	45d6      	cmp	lr, sl
 8021fd0:	f6ff af78 	blt.w	8021ec4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021fd4:	b21b      	sxth	r3, r3
 8021fd6:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8021fda:	fa0f f28e 	sxth.w	r2, lr
 8021fde:	9300      	str	r3, [sp, #0]
 8021fe0:	463b      	mov	r3, r7
 8021fe2:	9201      	str	r2, [sp, #4]
 8021fe4:	9a07      	ldr	r2, [sp, #28]
 8021fe6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8021fea:	4641      	mov	r1, r8
 8021fec:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021fee:	f7ff fe21 	bl	8021c34 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8021ff2:	e767      	b.n	8021ec4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021ff4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021ff6:	1422      	asrs	r2, r4, #16
 8021ff8:	1431      	asrs	r1, r6, #16
 8021ffa:	9d07      	ldr	r5, [sp, #28]
 8021ffc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8022000:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8022004:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022008:	fb03 2101 	mla	r1, r3, r1, r2
 802200c:	9a07      	ldr	r2, [sp, #28]
 802200e:	440a      	add	r2, r1
 8022010:	5c69      	ldrb	r1, [r5, r1]
 8022012:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8022016:	f1be 0f00 	cmp.w	lr, #0
 802201a:	d05c      	beq.n	80220d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 802201c:	f892 c001 	ldrb.w	ip, [r2, #1]
 8022020:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8022024:	950d      	str	r5, [sp, #52]	; 0x34
 8022026:	b150      	cbz	r0, 802203e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8022028:	eb02 0c03 	add.w	ip, r2, r3
 802202c:	5cd3      	ldrb	r3, [r2, r3]
 802202e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022032:	930a      	str	r3, [sp, #40]	; 0x28
 8022034:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022038:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802203c:	930e      	str	r3, [sp, #56]	; 0x38
 802203e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022040:	fb1e f200 	smulbb	r2, lr, r0
 8022044:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022046:	f108 38ff 	add.w	r8, r8, #4294967295
 802204a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802204e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022052:	10d2      	asrs	r2, r2, #3
 8022054:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8022058:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802205c:	ea4c 0c03 	orr.w	ip, ip, r3
 8022060:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8022064:	9311      	str	r3, [sp, #68]	; 0x44
 8022066:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022068:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802206a:	041b      	lsls	r3, r3, #16
 802206c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022070:	ea43 030b 	orr.w	r3, r3, fp
 8022074:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022078:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802207c:	4353      	muls	r3, r2
 802207e:	fb05 3c0c 	mla	ip, r5, ip, r3
 8022082:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8022086:	ea43 0b01 	orr.w	fp, r3, r1
 802208a:	f1c0 0110 	rsb	r1, r0, #16
 802208e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022090:	eba1 0e0e 	sub.w	lr, r1, lr
 8022094:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8022098:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 802209c:	fb0e cc0b 	mla	ip, lr, fp, ip
 80220a0:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80220a4:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 80220a8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80220ac:	ea4b 0e0e 	orr.w	lr, fp, lr
 80220b0:	fb02 cc0e 	mla	ip, r2, lr, ip
 80220b4:	ea4f 535c 	mov.w	r3, ip, lsr #21
 80220b8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80220bc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80220c0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80220c4:	ea43 0c0c 	orr.w	ip, r3, ip
 80220c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80220ca:	441c      	add	r4, r3
 80220cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80220ce:	f82a cb02 	strh.w	ip, [sl], #2
 80220d2:	441e      	add	r6, r3
 80220d4:	e723      	b.n	8021f1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80220d6:	2800      	cmp	r0, #0
 80220d8:	d0b1      	beq.n	802203e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80220da:	5cd3      	ldrb	r3, [r2, r3]
 80220dc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80220e0:	930a      	str	r3, [sp, #40]	; 0x28
 80220e2:	e7ac      	b.n	802203e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80220e4:	b013      	add	sp, #76	; 0x4c
 80220e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080220ea <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 80220ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220ee:	880d      	ldrh	r5, [r1, #0]
 80220f0:	b087      	sub	sp, #28
 80220f2:	10ef      	asrs	r7, r5, #3
 80220f4:	9103      	str	r1, [sp, #12]
 80220f6:	ea4f 2a25 	mov.w	sl, r5, asr #8
 80220fa:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 80220fe:	00ed      	lsls	r5, r5, #3
 8022100:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022104:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 8022108:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 802210c:	b2ed      	uxtb	r5, r5
 802210e:	9701      	str	r7, [sp, #4]
 8022110:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8022114:	9502      	str	r5, [sp, #8]
 8022116:	9d01      	ldr	r5, [sp, #4]
 8022118:	9902      	ldr	r1, [sp, #8]
 802211a:	022d      	lsls	r5, r5, #8
 802211c:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8022120:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 8022124:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8022128:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 802212c:	430d      	orrs	r5, r1
 802212e:	fb06 0709 	mla	r7, r6, r9, r0
 8022132:	2e00      	cmp	r6, #0
 8022134:	9505      	str	r5, [sp, #20]
 8022136:	eb02 0c07 	add.w	ip, r2, r7
 802213a:	f2c0 80b6 	blt.w	80222aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 802213e:	45b3      	cmp	fp, r6
 8022140:	f340 80b3 	ble.w	80222aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8022144:	2800      	cmp	r0, #0
 8022146:	f2c0 80ae 	blt.w	80222a6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 802214a:	4581      	cmp	r9, r0
 802214c:	f340 80ab 	ble.w	80222a6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8022150:	5dd7      	ldrb	r7, [r2, r7]
 8022152:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022156:	441f      	add	r7, r3
 8022158:	1c42      	adds	r2, r0, #1
 802215a:	f100 80a9 	bmi.w	80222b0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 802215e:	4591      	cmp	r9, r2
 8022160:	f340 80a6 	ble.w	80222b0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8022164:	2c00      	cmp	r4, #0
 8022166:	f000 80a3 	beq.w	80222b0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 802216a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802216e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022172:	441d      	add	r5, r3
 8022174:	3601      	adds	r6, #1
 8022176:	f100 809f 	bmi.w	80222b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 802217a:	45b3      	cmp	fp, r6
 802217c:	f340 809c 	ble.w	80222b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8022180:	f1be 0f00 	cmp.w	lr, #0
 8022184:	f000 8098 	beq.w	80222b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8022188:	2800      	cmp	r0, #0
 802218a:	f2c0 8093 	blt.w	80222b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 802218e:	4581      	cmp	r9, r0
 8022190:	f340 8090 	ble.w	80222b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8022194:	f81c 6009 	ldrb.w	r6, [ip, r9]
 8022198:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802219c:	441e      	add	r6, r3
 802219e:	3001      	adds	r0, #1
 80221a0:	f100 808d 	bmi.w	80222be <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80221a4:	4581      	cmp	r9, r0
 80221a6:	f340 808a 	ble.w	80222be <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80221aa:	2c00      	cmp	r4, #0
 80221ac:	f000 8087 	beq.w	80222be <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80221b0:	44e1      	add	r9, ip
 80221b2:	f899 2001 	ldrb.w	r2, [r9, #1]
 80221b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80221ba:	4413      	add	r3, r2
 80221bc:	b2a4      	uxth	r4, r4
 80221be:	f897 c002 	ldrb.w	ip, [r7, #2]
 80221c2:	fa1f fe8e 	uxth.w	lr, lr
 80221c6:	9901      	ldr	r1, [sp, #4]
 80221c8:	fb04 fb0e 	mul.w	fp, r4, lr
 80221cc:	0124      	lsls	r4, r4, #4
 80221ce:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 80221d2:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 80221d6:	eba4 040b 	sub.w	r4, r4, fp
 80221da:	fa1f f08e 	uxth.w	r0, lr
 80221de:	b2a2      	uxth	r2, r4
 80221e0:	78ac      	ldrb	r4, [r5, #2]
 80221e2:	eba9 0900 	sub.w	r9, r9, r0
 80221e6:	fa1f fe88 	uxth.w	lr, r8
 80221ea:	4354      	muls	r4, r2
 80221ec:	ea6f 0808 	mvn.w	r8, r8
 80221f0:	fa1f f989 	uxth.w	r9, r9
 80221f4:	fa5f f888 	uxtb.w	r8, r8
 80221f8:	fb09 440c 	mla	r4, r9, ip, r4
 80221fc:	f896 c002 	ldrb.w	ip, [r6, #2]
 8022200:	fb1a fa08 	smulbb	sl, sl, r8
 8022204:	fb00 440c 	mla	r4, r0, ip, r4
 8022208:	f893 c002 	ldrb.w	ip, [r3, #2]
 802220c:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8022210:	787c      	ldrb	r4, [r7, #1]
 8022212:	783f      	ldrb	r7, [r7, #0]
 8022214:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8022218:	fb0c ac0e 	mla	ip, ip, lr, sl
 802221c:	f895 a001 	ldrb.w	sl, [r5, #1]
 8022220:	782d      	ldrb	r5, [r5, #0]
 8022222:	fb02 fa0a 	mul.w	sl, r2, sl
 8022226:	fa1f fc8c 	uxth.w	ip, ip
 802222a:	436a      	muls	r2, r5
 802222c:	7835      	ldrb	r5, [r6, #0]
 802222e:	fb09 aa04 	mla	sl, r9, r4, sl
 8022232:	7874      	ldrb	r4, [r6, #1]
 8022234:	fb09 2207 	mla	r2, r9, r7, r2
 8022238:	fb00 aa04 	mla	sl, r0, r4, sl
 802223c:	785c      	ldrb	r4, [r3, #1]
 802223e:	fb00 2005 	mla	r0, r0, r5, r2
 8022242:	781b      	ldrb	r3, [r3, #0]
 8022244:	fb0b a404 	mla	r4, fp, r4, sl
 8022248:	fb11 fa08 	smulbb	sl, r1, r8
 802224c:	fb0b 0b03 	mla	fp, fp, r3, r0
 8022250:	9b02      	ldr	r3, [sp, #8]
 8022252:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8022256:	fb13 f808 	smulbb	r8, r3, r8
 802225a:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 802225e:	fb04 a40e 	mla	r4, r4, lr, sl
 8022262:	f10c 0301 	add.w	r3, ip, #1
 8022266:	fb0b 8e0e 	mla	lr, fp, lr, r8
 802226a:	b2a4      	uxth	r4, r4
 802226c:	fa1f fe8e 	uxth.w	lr, lr
 8022270:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022274:	f104 0a01 	add.w	sl, r4, #1
 8022278:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 802227c:	f10e 0c01 	add.w	ip, lr, #1
 8022280:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8022284:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022288:	0964      	lsrs	r4, r4, #5
 802228a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802228e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8022292:	ea4c 0c03 	orr.w	ip, ip, r3
 8022296:	9b03      	ldr	r3, [sp, #12]
 8022298:	ea4c 0c04 	orr.w	ip, ip, r4
 802229c:	f8a3 c000 	strh.w	ip, [r3]
 80222a0:	b007      	add	sp, #28
 80222a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222a6:	af05      	add	r7, sp, #20
 80222a8:	e756      	b.n	8022158 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 80222aa:	ad05      	add	r5, sp, #20
 80222ac:	462f      	mov	r7, r5
 80222ae:	e761      	b.n	8022174 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 80222b0:	ad05      	add	r5, sp, #20
 80222b2:	e75f      	b.n	8022174 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 80222b4:	ae05      	add	r6, sp, #20
 80222b6:	e772      	b.n	802219e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80222b8:	ab05      	add	r3, sp, #20
 80222ba:	461e      	mov	r6, r3
 80222bc:	e77e      	b.n	80221bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 80222be:	ab05      	add	r3, sp, #20
 80222c0:	e77c      	b.n	80221bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

080222c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80222c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222c6:	b095      	sub	sp, #84	; 0x54
 80222c8:	9212      	str	r2, [sp, #72]	; 0x48
 80222ca:	9309      	str	r3, [sp, #36]	; 0x24
 80222cc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80222ce:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 80222d2:	9013      	str	r0, [sp, #76]	; 0x4c
 80222d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80222d6:	6850      	ldr	r0, [r2, #4]
 80222d8:	910e      	str	r1, [sp, #56]	; 0x38
 80222da:	6812      	ldr	r2, [r2, #0]
 80222dc:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 80222e0:	fb00 1303 	mla	r3, r0, r3, r1
 80222e4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80222e8:	930a      	str	r3, [sp, #40]	; 0x28
 80222ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80222ec:	681b      	ldr	r3, [r3, #0]
 80222ee:	930d      	str	r3, [sp, #52]	; 0x34
 80222f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80222f2:	685c      	ldr	r4, [r3, #4]
 80222f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80222f6:	3404      	adds	r4, #4
 80222f8:	43db      	mvns	r3, r3
 80222fa:	b2db      	uxtb	r3, r3
 80222fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80222fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022300:	2b00      	cmp	r3, #0
 8022302:	dc03      	bgt.n	802230c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8022304:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022306:	2b00      	cmp	r3, #0
 8022308:	f340 8255 	ble.w	80227b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 802230c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802230e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022312:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022316:	1e48      	subs	r0, r1, #1
 8022318:	1e55      	subs	r5, r2, #1
 802231a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802231c:	2b00      	cmp	r3, #0
 802231e:	f340 80f9 	ble.w	8022514 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8022322:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8022324:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022326:	1436      	asrs	r6, r6, #16
 8022328:	ea4f 4323 	mov.w	r3, r3, asr #16
 802232c:	d406      	bmi.n	802233c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802232e:	4286      	cmp	r6, r0
 8022330:	da04      	bge.n	802233c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022332:	2b00      	cmp	r3, #0
 8022334:	db02      	blt.n	802233c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022336:	42ab      	cmp	r3, r5
 8022338:	f2c0 80ed 	blt.w	8022516 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 802233c:	3601      	adds	r6, #1
 802233e:	f100 80da 	bmi.w	80224f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8022342:	42b1      	cmp	r1, r6
 8022344:	f2c0 80d7 	blt.w	80224f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8022348:	3301      	adds	r3, #1
 802234a:	f100 80d4 	bmi.w	80224f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802234e:	429a      	cmp	r2, r3
 8022350:	f2c0 80d1 	blt.w	80224f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8022354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022356:	9311      	str	r3, [sp, #68]	; 0x44
 8022358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802235a:	930c      	str	r3, [sp, #48]	; 0x30
 802235c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802235e:	2b00      	cmp	r3, #0
 8022360:	f340 80fa 	ble.w	8022558 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8022364:	9826      	ldr	r0, [sp, #152]	; 0x98
 8022366:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022368:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802236a:	68c6      	ldr	r6, [r0, #12]
 802236c:	141d      	asrs	r5, r3, #16
 802236e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022370:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022374:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022376:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022378:	1400      	asrs	r0, r0, #16
 802237a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802237e:	6892      	ldr	r2, [r2, #8]
 8022380:	f100 813e 	bmi.w	8022600 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022384:	1e57      	subs	r7, r2, #1
 8022386:	42b8      	cmp	r0, r7
 8022388:	f280 813a 	bge.w	8022600 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802238c:	2d00      	cmp	r5, #0
 802238e:	f2c0 8137 	blt.w	8022600 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022392:	1e77      	subs	r7, r6, #1
 8022394:	42bd      	cmp	r5, r7
 8022396:	f280 8133 	bge.w	8022600 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802239a:	b212      	sxth	r2, r2
 802239c:	fb05 0002 	mla	r0, r5, r2, r0
 80223a0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80223a2:	f815 a000 	ldrb.w	sl, [r5, r0]
 80223a6:	182e      	adds	r6, r5, r0
 80223a8:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 80223ac:	eb04 050a 	add.w	r5, r4, sl
 80223b0:	2b00      	cmp	r3, #0
 80223b2:	f000 8117 	beq.w	80225e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80223b6:	f896 c001 	ldrb.w	ip, [r6, #1]
 80223ba:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80223be:	44a4      	add	ip, r4
 80223c0:	2900      	cmp	r1, #0
 80223c2:	f000 8117 	beq.w	80225f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80223c6:	18b0      	adds	r0, r6, r2
 80223c8:	5cb2      	ldrb	r2, [r6, r2]
 80223ca:	7840      	ldrb	r0, [r0, #1]
 80223cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80223d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80223d4:	4422      	add	r2, r4
 80223d6:	4420      	add	r0, r4
 80223d8:	b29b      	uxth	r3, r3
 80223da:	f89c 7002 	ldrb.w	r7, [ip, #2]
 80223de:	b289      	uxth	r1, r1
 80223e0:	f895 b002 	ldrb.w	fp, [r5, #2]
 80223e4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80223e6:	fb03 f901 	mul.w	r9, r3, r1
 80223ea:	011b      	lsls	r3, r3, #4
 80223ec:	f8b6 e000 	ldrh.w	lr, [r6]
 80223f0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80223f4:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80223f8:	eba3 0309 	sub.w	r3, r3, r9
 80223fc:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8022400:	b289      	uxth	r1, r1
 8022402:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8022406:	b29b      	uxth	r3, r3
 8022408:	eba8 0801 	sub.w	r8, r8, r1
 802240c:	435f      	muls	r7, r3
 802240e:	fa1f f888 	uxth.w	r8, r8
 8022412:	9310      	str	r3, [sp, #64]	; 0x40
 8022414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022416:	fb08 770b 	mla	r7, r8, fp, r7
 802241a:	f892 b002 	ldrb.w	fp, [r2, #2]
 802241e:	fb01 770b 	mla	r7, r1, fp, r7
 8022422:	f890 b002 	ldrb.w	fp, [r0, #2]
 8022426:	fb09 770b 	mla	r7, r9, fp, r7
 802242a:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 802242e:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8022432:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8022436:	fb1b fb03 	smulbb	fp, fp, r3
 802243a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802243c:	fb07 b706 	mla	r7, r7, r6, fp
 8022440:	f895 b001 	ldrb.w	fp, [r5, #1]
 8022444:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8022448:	f89c c000 	ldrb.w	ip, [ip]
 802244c:	b2bf      	uxth	r7, r7
 802244e:	435d      	muls	r5, r3
 8022450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022452:	fb08 550b 	mla	r5, r8, fp, r5
 8022456:	f892 b001 	ldrb.w	fp, [r2, #1]
 802245a:	fb01 550b 	mla	r5, r1, fp, r5
 802245e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022462:	fb09 550b 	mla	r5, r9, fp, r5
 8022466:	ea4f 0bee 	mov.w	fp, lr, asr #3
 802246a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802246e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8022472:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8022476:	fa5f fe8e 	uxtb.w	lr, lr
 802247a:	fb1b fb03 	smulbb	fp, fp, r3
 802247e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022480:	fb03 f30c 	mul.w	r3, r3, ip
 8022484:	f892 c000 	ldrb.w	ip, [r2]
 8022488:	fb05 b506 	mla	r5, r5, r6, fp
 802248c:	fb08 330a 	mla	r3, r8, sl, r3
 8022490:	b2ad      	uxth	r5, r5
 8022492:	fb01 330c 	mla	r3, r1, ip, r3
 8022496:	f890 c000 	ldrb.w	ip, [r0]
 802249a:	f105 0b01 	add.w	fp, r5, #1
 802249e:	fb09 3c0c 	mla	ip, r9, ip, r3
 80224a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80224a4:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80224a8:	fb1e fe03 	smulbb	lr, lr, r3
 80224ac:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80224b0:	1c7b      	adds	r3, r7, #1
 80224b2:	096d      	lsrs	r5, r5, #5
 80224b4:	fb0c e606 	mla	r6, ip, r6, lr
 80224b8:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80224bc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80224c0:	b2b6      	uxth	r6, r6
 80224c2:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 80224c6:	1c77      	adds	r7, r6, #1
 80224c8:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80224cc:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80224d0:	431f      	orrs	r7, r3
 80224d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80224d4:	433d      	orrs	r5, r7
 80224d6:	801d      	strh	r5, [r3, #0]
 80224d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80224da:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80224dc:	3302      	adds	r3, #2
 80224de:	930c      	str	r3, [sp, #48]	; 0x30
 80224e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80224e2:	4413      	add	r3, r2
 80224e4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80224e6:	931f      	str	r3, [sp, #124]	; 0x7c
 80224e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80224ea:	4413      	add	r3, r2
 80224ec:	9320      	str	r3, [sp, #128]	; 0x80
 80224ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80224f0:	3b01      	subs	r3, #1
 80224f2:	9311      	str	r3, [sp, #68]	; 0x44
 80224f4:	e732      	b.n	802235c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80224f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80224f8:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80224fa:	4433      	add	r3, r6
 80224fc:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80224fe:	931f      	str	r3, [sp, #124]	; 0x7c
 8022500:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022502:	4433      	add	r3, r6
 8022504:	9320      	str	r3, [sp, #128]	; 0x80
 8022506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022508:	3b01      	subs	r3, #1
 802250a:	9309      	str	r3, [sp, #36]	; 0x24
 802250c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802250e:	3302      	adds	r3, #2
 8022510:	930a      	str	r3, [sp, #40]	; 0x28
 8022512:	e702      	b.n	802231a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022514:	d027      	beq.n	8022566 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8022516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022518:	9821      	ldr	r0, [sp, #132]	; 0x84
 802251a:	3b01      	subs	r3, #1
 802251c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 802251e:	fb00 5003 	mla	r0, r0, r3, r5
 8022522:	1400      	asrs	r0, r0, #16
 8022524:	f53f af16 	bmi.w	8022354 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022528:	3901      	subs	r1, #1
 802252a:	4288      	cmp	r0, r1
 802252c:	f6bf af12 	bge.w	8022354 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022530:	9922      	ldr	r1, [sp, #136]	; 0x88
 8022532:	9820      	ldr	r0, [sp, #128]	; 0x80
 8022534:	fb01 0303 	mla	r3, r1, r3, r0
 8022538:	141b      	asrs	r3, r3, #16
 802253a:	f53f af0b 	bmi.w	8022354 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802253e:	3a01      	subs	r2, #1
 8022540:	4293      	cmp	r3, r2
 8022542:	f6bf af07 	bge.w	8022354 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022548:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 802254c:	9311      	str	r3, [sp, #68]	; 0x44
 802254e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022550:	930c      	str	r3, [sp, #48]	; 0x30
 8022552:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022554:	2b00      	cmp	r3, #0
 8022556:	dc70      	bgt.n	802263a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8022558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802255a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802255c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022560:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022564:	930a      	str	r3, [sp, #40]	; 0x28
 8022566:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022568:	2b00      	cmp	r3, #0
 802256a:	f340 8124 	ble.w	80227b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 802256e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022572:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022574:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022578:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802257c:	eef0 6a62 	vmov.f32	s13, s5
 8022580:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022584:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022588:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802258c:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8022590:	eef0 6a43 	vmov.f32	s13, s6
 8022594:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022598:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 802259c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80225a0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80225a4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80225a8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80225ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80225b0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80225b4:	ee12 2a90 	vmov	r2, s5
 80225b8:	eef0 2a47 	vmov.f32	s5, s14
 80225bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80225c0:	ee13 2a10 	vmov	r2, s6
 80225c4:	9321      	str	r3, [sp, #132]	; 0x84
 80225c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80225c8:	eeb0 3a67 	vmov.f32	s6, s15
 80225cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80225d0:	9322      	str	r3, [sp, #136]	; 0x88
 80225d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80225d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80225d6:	3b01      	subs	r3, #1
 80225d8:	930e      	str	r3, [sp, #56]	; 0x38
 80225da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80225dc:	bf08      	it	eq
 80225de:	4613      	moveq	r3, r2
 80225e0:	9309      	str	r3, [sp, #36]	; 0x24
 80225e2:	e68c      	b.n	80222fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80225e4:	b149      	cbz	r1, 80225fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 80225e6:	5cb2      	ldrb	r2, [r6, r2]
 80225e8:	4628      	mov	r0, r5
 80225ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80225ee:	4422      	add	r2, r4
 80225f0:	46ac      	mov	ip, r5
 80225f2:	e6f1      	b.n	80223d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80225f4:	4628      	mov	r0, r5
 80225f6:	462a      	mov	r2, r5
 80225f8:	e6ee      	b.n	80223d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80225fa:	4628      	mov	r0, r5
 80225fc:	462a      	mov	r2, r5
 80225fe:	e7f7      	b.n	80225f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8022600:	1c47      	adds	r7, r0, #1
 8022602:	f53f af69 	bmi.w	80224d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8022606:	42ba      	cmp	r2, r7
 8022608:	f6ff af66 	blt.w	80224d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 802260c:	1c6f      	adds	r7, r5, #1
 802260e:	f53f af63 	bmi.w	80224d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8022612:	42be      	cmp	r6, r7
 8022614:	f6ff af60 	blt.w	80224d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8022618:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802261a:	b236      	sxth	r6, r6
 802261c:	b212      	sxth	r2, r2
 802261e:	9002      	str	r0, [sp, #8]
 8022620:	9601      	str	r6, [sp, #4]
 8022622:	9200      	str	r2, [sp, #0]
 8022624:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022626:	e9cd 1705 	strd	r1, r7, [sp, #20]
 802262a:	e9cd 5303 	strd	r5, r3, [sp, #12]
 802262e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8022632:	4623      	mov	r3, r4
 8022634:	f7ff fd59 	bl	80220ea <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8022638:	e74e      	b.n	80224d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 802263a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802263c:	9820      	ldr	r0, [sp, #128]	; 0x80
 802263e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022642:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8022644:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022646:	1400      	asrs	r0, r0, #16
 8022648:	142d      	asrs	r5, r5, #16
 802264a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802264c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8022650:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022654:	fb02 5000 	mla	r0, r2, r0, r5
 8022658:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802265a:	f815 9000 	ldrb.w	r9, [r5, r0]
 802265e:	182e      	adds	r6, r5, r0
 8022660:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8022664:	eb04 0509 	add.w	r5, r4, r9
 8022668:	2b00      	cmp	r3, #0
 802266a:	f000 8096 	beq.w	802279a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802266e:	7877      	ldrb	r7, [r6, #1]
 8022670:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022674:	4427      	add	r7, r4
 8022676:	2900      	cmp	r1, #0
 8022678:	f000 8097 	beq.w	80227aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 802267c:	18b0      	adds	r0, r6, r2
 802267e:	5cb2      	ldrb	r2, [r6, r2]
 8022680:	7840      	ldrb	r0, [r0, #1]
 8022682:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022686:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802268a:	4422      	add	r2, r4
 802268c:	4420      	add	r0, r4
 802268e:	b29b      	uxth	r3, r3
 8022690:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022692:	b289      	uxth	r1, r1
 8022694:	f895 b002 	ldrb.w	fp, [r5, #2]
 8022698:	f8b6 c000 	ldrh.w	ip, [r6]
 802269c:	fb03 f801 	mul.w	r8, r3, r1
 80226a0:	011b      	lsls	r3, r3, #4
 80226a2:	78be      	ldrb	r6, [r7, #2]
 80226a4:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80226a8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80226ac:	eba3 0308 	sub.w	r3, r3, r8
 80226b0:	f814 9009 	ldrb.w	r9, [r4, r9]
 80226b4:	b289      	uxth	r1, r1
 80226b6:	b29b      	uxth	r3, r3
 80226b8:	ebae 0e01 	sub.w	lr, lr, r1
 80226bc:	435e      	muls	r6, r3
 80226be:	fa1f fe8e 	uxth.w	lr, lr
 80226c2:	9310      	str	r3, [sp, #64]	; 0x40
 80226c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80226c6:	fb0e 660b 	mla	r6, lr, fp, r6
 80226ca:	f892 b002 	ldrb.w	fp, [r2, #2]
 80226ce:	fb01 660b 	mla	r6, r1, fp, r6
 80226d2:	f890 b002 	ldrb.w	fp, [r0, #2]
 80226d6:	fb08 660b 	mla	r6, r8, fp, r6
 80226da:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 80226de:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80226e2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80226e6:	fb1b fb03 	smulbb	fp, fp, r3
 80226ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80226ec:	fb06 b60a 	mla	r6, r6, sl, fp
 80226f0:	f895 b001 	ldrb.w	fp, [r5, #1]
 80226f4:	787d      	ldrb	r5, [r7, #1]
 80226f6:	783f      	ldrb	r7, [r7, #0]
 80226f8:	b2b6      	uxth	r6, r6
 80226fa:	435d      	muls	r5, r3
 80226fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80226fe:	fb0e 550b 	mla	r5, lr, fp, r5
 8022702:	f892 b001 	ldrb.w	fp, [r2, #1]
 8022706:	fb01 550b 	mla	r5, r1, fp, r5
 802270a:	f890 b001 	ldrb.w	fp, [r0, #1]
 802270e:	fb08 550b 	mla	r5, r8, fp, r5
 8022712:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8022716:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802271a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 802271e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8022722:	fa5f fc8c 	uxtb.w	ip, ip
 8022726:	fb1b fb03 	smulbb	fp, fp, r3
 802272a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802272c:	437b      	muls	r3, r7
 802272e:	7817      	ldrb	r7, [r2, #0]
 8022730:	fb05 b50a 	mla	r5, r5, sl, fp
 8022734:	fb0e 3309 	mla	r3, lr, r9, r3
 8022738:	b2ad      	uxth	r5, r5
 802273a:	fb01 3307 	mla	r3, r1, r7, r3
 802273e:	7807      	ldrb	r7, [r0, #0]
 8022740:	f105 0b01 	add.w	fp, r5, #1
 8022744:	fb08 3707 	mla	r7, r8, r7, r3
 8022748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802274a:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 802274e:	fb1c fc03 	smulbb	ip, ip, r3
 8022752:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8022756:	1c73      	adds	r3, r6, #1
 8022758:	096d      	lsrs	r5, r5, #5
 802275a:	fb07 c70a 	mla	r7, r7, sl, ip
 802275e:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8022762:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022766:	b2bf      	uxth	r7, r7
 8022768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802276a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 802276e:	1c7a      	adds	r2, r7, #1
 8022770:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8022774:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022778:	4316      	orrs	r6, r2
 802277a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802277c:	432e      	orrs	r6, r5
 802277e:	f823 6b02 	strh.w	r6, [r3], #2
 8022782:	930c      	str	r3, [sp, #48]	; 0x30
 8022784:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022786:	4413      	add	r3, r2
 8022788:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802278a:	931f      	str	r3, [sp, #124]	; 0x7c
 802278c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802278e:	4413      	add	r3, r2
 8022790:	9320      	str	r3, [sp, #128]	; 0x80
 8022792:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022794:	3b01      	subs	r3, #1
 8022796:	9311      	str	r3, [sp, #68]	; 0x44
 8022798:	e6db      	b.n	8022552 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 802279a:	b149      	cbz	r1, 80227b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 802279c:	5cb2      	ldrb	r2, [r6, r2]
 802279e:	4628      	mov	r0, r5
 80227a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80227a4:	4422      	add	r2, r4
 80227a6:	462f      	mov	r7, r5
 80227a8:	e771      	b.n	802268e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 80227aa:	4628      	mov	r0, r5
 80227ac:	462a      	mov	r2, r5
 80227ae:	e76e      	b.n	802268e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 80227b0:	4628      	mov	r0, r5
 80227b2:	462a      	mov	r2, r5
 80227b4:	e7f7      	b.n	80227a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80227b6:	b015      	add	sp, #84	; 0x54
 80227b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080227bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 80227bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227c0:	880f      	ldrh	r7, [r1, #0]
 80227c2:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80227c6:	023c      	lsls	r4, r7, #8
 80227c8:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80227cc:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 80227d0:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 80227d4:	017c      	lsls	r4, r7, #5
 80227d6:	00ff      	lsls	r7, r7, #3
 80227d8:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80227dc:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 80227e0:	b2ff      	uxtb	r7, r7
 80227e2:	ea4b 0404 	orr.w	r4, fp, r4
 80227e6:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 80227ea:	4327      	orrs	r7, r4
 80227ec:	fb05 ca0e 	mla	sl, r5, lr, ip
 80227f0:	2d00      	cmp	r5, #0
 80227f2:	9701      	str	r7, [sp, #4]
 80227f4:	eb02 080a 	add.w	r8, r2, sl
 80227f8:	db7e      	blt.n	80228f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 80227fa:	45a9      	cmp	r9, r5
 80227fc:	dd7c      	ble.n	80228f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 80227fe:	f1bc 0f00 	cmp.w	ip, #0
 8022802:	db77      	blt.n	80228f4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8022804:	45e6      	cmp	lr, ip
 8022806:	dd75      	ble.n	80228f4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8022808:	f812 700a 	ldrb.w	r7, [r2, sl]
 802280c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022810:	441f      	add	r7, r3
 8022812:	f11c 0201 	adds.w	r2, ip, #1
 8022816:	d472      	bmi.n	80228fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8022818:	4596      	cmp	lr, r2
 802281a:	dd70      	ble.n	80228fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 802281c:	2800      	cmp	r0, #0
 802281e:	d06e      	beq.n	80228fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8022820:	f898 4001 	ldrb.w	r4, [r8, #1]
 8022824:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022828:	441c      	add	r4, r3
 802282a:	3501      	adds	r5, #1
 802282c:	d46b      	bmi.n	8022906 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 802282e:	45a9      	cmp	r9, r5
 8022830:	dd69      	ble.n	8022906 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8022832:	2e00      	cmp	r6, #0
 8022834:	d067      	beq.n	8022906 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8022836:	f1bc 0f00 	cmp.w	ip, #0
 802283a:	db62      	blt.n	8022902 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 802283c:	45e6      	cmp	lr, ip
 802283e:	dd60      	ble.n	8022902 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8022840:	f818 500e 	ldrb.w	r5, [r8, lr]
 8022844:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022848:	441d      	add	r5, r3
 802284a:	f11c 0201 	adds.w	r2, ip, #1
 802284e:	d45d      	bmi.n	802290c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8022850:	4596      	cmp	lr, r2
 8022852:	dd5b      	ble.n	802290c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8022854:	2800      	cmp	r0, #0
 8022856:	d059      	beq.n	802290c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8022858:	44c6      	add	lr, r8
 802285a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802285e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022862:	4413      	add	r3, r2
 8022864:	b280      	uxth	r0, r0
 8022866:	f897 e002 	ldrb.w	lr, [r7, #2]
 802286a:	b2b2      	uxth	r2, r6
 802286c:	f897 9000 	ldrb.w	r9, [r7]
 8022870:	787f      	ldrb	r7, [r7, #1]
 8022872:	fb00 f602 	mul.w	r6, r0, r2
 8022876:	0100      	lsls	r0, r0, #4
 8022878:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 802287c:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 8022880:	1b80      	subs	r0, r0, r6
 8022882:	fa1f fc82 	uxth.w	ip, r2
 8022886:	b282      	uxth	r2, r0
 8022888:	78a0      	ldrb	r0, [r4, #2]
 802288a:	eba8 080c 	sub.w	r8, r8, ip
 802288e:	4350      	muls	r0, r2
 8022890:	fa1f f888 	uxth.w	r8, r8
 8022894:	fb08 0e0e 	mla	lr, r8, lr, r0
 8022898:	78a8      	ldrb	r0, [r5, #2]
 802289a:	fb0c e000 	mla	r0, ip, r0, lr
 802289e:	f893 e002 	ldrb.w	lr, [r3, #2]
 80228a2:	fb06 0e0e 	mla	lr, r6, lr, r0
 80228a6:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 80228aa:	f894 e000 	ldrb.w	lr, [r4]
 80228ae:	fb02 fe0e 	mul.w	lr, r2, lr
 80228b2:	fb08 e909 	mla	r9, r8, r9, lr
 80228b6:	f895 e000 	ldrb.w	lr, [r5]
 80228ba:	fb0c 990e 	mla	r9, ip, lr, r9
 80228be:	f893 e000 	ldrb.w	lr, [r3]
 80228c2:	785b      	ldrb	r3, [r3, #1]
 80228c4:	fb06 9e0e 	mla	lr, r6, lr, r9
 80228c8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80228cc:	ea4e 0e00 	orr.w	lr, lr, r0
 80228d0:	7860      	ldrb	r0, [r4, #1]
 80228d2:	4350      	muls	r0, r2
 80228d4:	786a      	ldrb	r2, [r5, #1]
 80228d6:	fb08 0007 	mla	r0, r8, r7, r0
 80228da:	fb0c 0202 	mla	r2, ip, r2, r0
 80228de:	fb06 2303 	mla	r3, r6, r3, r2
 80228e2:	095b      	lsrs	r3, r3, #5
 80228e4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80228e8:	ea4e 0303 	orr.w	r3, lr, r3
 80228ec:	800b      	strh	r3, [r1, #0]
 80228ee:	b003      	add	sp, #12
 80228f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228f4:	af01      	add	r7, sp, #4
 80228f6:	e78c      	b.n	8022812 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 80228f8:	ac01      	add	r4, sp, #4
 80228fa:	4627      	mov	r7, r4
 80228fc:	e795      	b.n	802282a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 80228fe:	ac01      	add	r4, sp, #4
 8022900:	e793      	b.n	802282a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8022902:	ad01      	add	r5, sp, #4
 8022904:	e7a1      	b.n	802284a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 8022906:	ab01      	add	r3, sp, #4
 8022908:	461d      	mov	r5, r3
 802290a:	e7ab      	b.n	8022864 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 802290c:	ab01      	add	r3, sp, #4
 802290e:	e7a9      	b.n	8022864 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08022910 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022914:	b08f      	sub	sp, #60	; 0x3c
 8022916:	920c      	str	r2, [sp, #48]	; 0x30
 8022918:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802291a:	900d      	str	r0, [sp, #52]	; 0x34
 802291c:	910a      	str	r1, [sp, #40]	; 0x28
 802291e:	6850      	ldr	r0, [r2, #4]
 8022920:	9306      	str	r3, [sp, #24]
 8022922:	6812      	ldr	r2, [r2, #0]
 8022924:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 8022928:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 802292c:	fb00 1303 	mla	r3, r0, r3, r1
 8022930:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022934:	9307      	str	r3, [sp, #28]
 8022936:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022938:	681b      	ldr	r3, [r3, #0]
 802293a:	9308      	str	r3, [sp, #32]
 802293c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802293e:	685c      	ldr	r4, [r3, #4]
 8022940:	3404      	adds	r4, #4
 8022942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022944:	2b00      	cmp	r3, #0
 8022946:	dc03      	bgt.n	8022950 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8022948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802294a:	2b00      	cmp	r3, #0
 802294c:	f340 81d5 	ble.w	8022cfa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8022950:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022952:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022956:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802295a:	1e48      	subs	r0, r1, #1
 802295c:	1e56      	subs	r6, r2, #1
 802295e:	9b06      	ldr	r3, [sp, #24]
 8022960:	2b00      	cmp	r3, #0
 8022962:	f340 80b6 	ble.w	8022ad2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022966:	ea5f 472b 	movs.w	r7, fp, asr #16
 802296a:	ea4f 4325 	mov.w	r3, r5, asr #16
 802296e:	d406      	bmi.n	802297e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022970:	4287      	cmp	r7, r0
 8022972:	da04      	bge.n	802297e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022974:	2b00      	cmp	r3, #0
 8022976:	db02      	blt.n	802297e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022978:	42b3      	cmp	r3, r6
 802297a:	f2c0 80ab 	blt.w	8022ad4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 802297e:	3701      	adds	r7, #1
 8022980:	f100 809c 	bmi.w	8022abc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022984:	42b9      	cmp	r1, r7
 8022986:	f2c0 8099 	blt.w	8022abc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802298a:	3301      	adds	r3, #1
 802298c:	f100 8096 	bmi.w	8022abc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022990:	429a      	cmp	r2, r3
 8022992:	f2c0 8093 	blt.w	8022abc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022996:	9b06      	ldr	r3, [sp, #24]
 8022998:	930b      	str	r3, [sp, #44]	; 0x2c
 802299a:	9b07      	ldr	r3, [sp, #28]
 802299c:	9309      	str	r3, [sp, #36]	; 0x24
 802299e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80229a0:	2b00      	cmp	r3, #0
 80229a2:	f340 80b4 	ble.w	8022b0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 80229a6:	9820      	ldr	r0, [sp, #128]	; 0x80
 80229a8:	142e      	asrs	r6, r5, #16
 80229aa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80229ac:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80229b0:	68c7      	ldr	r7, [r0, #12]
 80229b2:	ea5f 402b 	movs.w	r0, fp, asr #16
 80229b6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80229ba:	6892      	ldr	r2, [r2, #8]
 80229bc:	f100 80fb 	bmi.w	8022bb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80229c0:	f102 3cff 	add.w	ip, r2, #4294967295
 80229c4:	4560      	cmp	r0, ip
 80229c6:	f280 80f6 	bge.w	8022bb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80229ca:	2e00      	cmp	r6, #0
 80229cc:	f2c0 80f3 	blt.w	8022bb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80229d0:	f107 3cff 	add.w	ip, r7, #4294967295
 80229d4:	4566      	cmp	r6, ip
 80229d6:	f280 80ee 	bge.w	8022bb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80229da:	b212      	sxth	r2, r2
 80229dc:	fb06 0002 	mla	r0, r6, r2, r0
 80229e0:	9e08      	ldr	r6, [sp, #32]
 80229e2:	1837      	adds	r7, r6, r0
 80229e4:	5c30      	ldrb	r0, [r6, r0]
 80229e6:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 80229ea:	eb04 0c08 	add.w	ip, r4, r8
 80229ee:	2b00      	cmp	r3, #0
 80229f0:	f000 80d3 	beq.w	8022b9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80229f4:	787e      	ldrb	r6, [r7, #1]
 80229f6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80229fa:	4426      	add	r6, r4
 80229fc:	2900      	cmp	r1, #0
 80229fe:	f000 80d4 	beq.w	8022baa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8022a02:	18b8      	adds	r0, r7, r2
 8022a04:	5cba      	ldrb	r2, [r7, r2]
 8022a06:	7840      	ldrb	r0, [r0, #1]
 8022a08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022a0c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022a10:	4422      	add	r2, r4
 8022a12:	4420      	add	r0, r4
 8022a14:	b29b      	uxth	r3, r3
 8022a16:	78b7      	ldrb	r7, [r6, #2]
 8022a18:	b289      	uxth	r1, r1
 8022a1a:	f89c a002 	ldrb.w	sl, [ip, #2]
 8022a1e:	f89c c001 	ldrb.w	ip, [ip, #1]
 8022a22:	fb03 f901 	mul.w	r9, r3, r1
 8022a26:	011b      	lsls	r3, r3, #4
 8022a28:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022a2c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8022a30:	eba3 0309 	sub.w	r3, r3, r9
 8022a34:	b289      	uxth	r1, r1
 8022a36:	b29b      	uxth	r3, r3
 8022a38:	ebae 0e01 	sub.w	lr, lr, r1
 8022a3c:	435f      	muls	r7, r3
 8022a3e:	fa1f fe8e 	uxth.w	lr, lr
 8022a42:	fb0e 770a 	mla	r7, lr, sl, r7
 8022a46:	f892 a002 	ldrb.w	sl, [r2, #2]
 8022a4a:	fb01 770a 	mla	r7, r1, sl, r7
 8022a4e:	f890 a002 	ldrb.w	sl, [r0, #2]
 8022a52:	fb09 7a0a 	mla	sl, r9, sl, r7
 8022a56:	f814 7008 	ldrb.w	r7, [r4, r8]
 8022a5a:	f896 8000 	ldrb.w	r8, [r6]
 8022a5e:	7876      	ldrb	r6, [r6, #1]
 8022a60:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8022a64:	fb03 f808 	mul.w	r8, r3, r8
 8022a68:	4373      	muls	r3, r6
 8022a6a:	fb0e 8807 	mla	r8, lr, r7, r8
 8022a6e:	7817      	ldrb	r7, [r2, #0]
 8022a70:	fb0e 330c 	mla	r3, lr, ip, r3
 8022a74:	fb01 8807 	mla	r8, r1, r7, r8
 8022a78:	7807      	ldrb	r7, [r0, #0]
 8022a7a:	fb09 8707 	mla	r7, r9, r7, r8
 8022a7e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022a82:	ea47 070a 	orr.w	r7, r7, sl
 8022a86:	f892 a001 	ldrb.w	sl, [r2, #1]
 8022a8a:	fb01 310a 	mla	r1, r1, sl, r3
 8022a8e:	f890 a001 	ldrb.w	sl, [r0, #1]
 8022a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022a94:	fb09 1a0a 	mla	sl, r9, sl, r1
 8022a98:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022a9c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022aa0:	ea47 070a 	orr.w	r7, r7, sl
 8022aa4:	801f      	strh	r7, [r3, #0]
 8022aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022aa8:	3302      	adds	r3, #2
 8022aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8022aac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022aae:	449b      	add	fp, r3
 8022ab0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022ab2:	441d      	add	r5, r3
 8022ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022ab6:	3b01      	subs	r3, #1
 8022ab8:	930b      	str	r3, [sp, #44]	; 0x2c
 8022aba:	e770      	b.n	802299e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022abc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022abe:	449b      	add	fp, r3
 8022ac0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022ac2:	441d      	add	r5, r3
 8022ac4:	9b06      	ldr	r3, [sp, #24]
 8022ac6:	3b01      	subs	r3, #1
 8022ac8:	9306      	str	r3, [sp, #24]
 8022aca:	9b07      	ldr	r3, [sp, #28]
 8022acc:	3302      	adds	r3, #2
 8022ace:	9307      	str	r3, [sp, #28]
 8022ad0:	e745      	b.n	802295e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8022ad2:	d023      	beq.n	8022b1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8022ad4:	9b06      	ldr	r3, [sp, #24]
 8022ad6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8022ad8:	3b01      	subs	r3, #1
 8022ada:	fb00 b003 	mla	r0, r0, r3, fp
 8022ade:	1400      	asrs	r0, r0, #16
 8022ae0:	f53f af59 	bmi.w	8022996 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022ae4:	3901      	subs	r1, #1
 8022ae6:	4288      	cmp	r0, r1
 8022ae8:	f6bf af55 	bge.w	8022996 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022aec:	991c      	ldr	r1, [sp, #112]	; 0x70
 8022aee:	fb01 5303 	mla	r3, r1, r3, r5
 8022af2:	141b      	asrs	r3, r3, #16
 8022af4:	f53f af4f 	bmi.w	8022996 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022af8:	3a01      	subs	r2, #1
 8022afa:	4293      	cmp	r3, r2
 8022afc:	f6bf af4b 	bge.w	8022996 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022b00:	9b06      	ldr	r3, [sp, #24]
 8022b02:	9309      	str	r3, [sp, #36]	; 0x24
 8022b04:	9b07      	ldr	r3, [sp, #28]
 8022b06:	930b      	str	r3, [sp, #44]	; 0x2c
 8022b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022b0a:	2b00      	cmp	r3, #0
 8022b0c:	dc70      	bgt.n	8022bf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022b0e:	9b06      	ldr	r3, [sp, #24]
 8022b10:	9a07      	ldr	r2, [sp, #28]
 8022b12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022b16:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022b1a:	9307      	str	r3, [sp, #28]
 8022b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022b1e:	2b00      	cmp	r3, #0
 8022b20:	f340 80eb 	ble.w	8022cfa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8022b24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022b28:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022b2a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022b2e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022b32:	eef0 6a62 	vmov.f32	s13, s5
 8022b36:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022b3a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022b3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022b42:	ee16 ba90 	vmov	fp, s13
 8022b46:	eef0 6a43 	vmov.f32	s13, s6
 8022b4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022b4e:	ee16 5a90 	vmov	r5, s13
 8022b52:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022b56:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022b5a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022b5e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022b62:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022b66:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022b6a:	ee12 2a90 	vmov	r2, s5
 8022b6e:	eef0 2a47 	vmov.f32	s5, s14
 8022b72:	fb92 f3f3 	sdiv	r3, r2, r3
 8022b76:	ee13 2a10 	vmov	r2, s6
 8022b7a:	931b      	str	r3, [sp, #108]	; 0x6c
 8022b7c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022b7e:	eeb0 3a67 	vmov.f32	s6, s15
 8022b82:	fb92 f3f3 	sdiv	r3, r2, r3
 8022b86:	931c      	str	r3, [sp, #112]	; 0x70
 8022b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022b8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022b8c:	3b01      	subs	r3, #1
 8022b8e:	930a      	str	r3, [sp, #40]	; 0x28
 8022b90:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022b92:	bf08      	it	eq
 8022b94:	4613      	moveq	r3, r2
 8022b96:	9306      	str	r3, [sp, #24]
 8022b98:	e6d3      	b.n	8022942 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8022b9a:	b149      	cbz	r1, 8022bb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8022b9c:	5cba      	ldrb	r2, [r7, r2]
 8022b9e:	4660      	mov	r0, ip
 8022ba0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022ba4:	4422      	add	r2, r4
 8022ba6:	4666      	mov	r6, ip
 8022ba8:	e734      	b.n	8022a14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8022baa:	4660      	mov	r0, ip
 8022bac:	4662      	mov	r2, ip
 8022bae:	e731      	b.n	8022a14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8022bb0:	4660      	mov	r0, ip
 8022bb2:	4662      	mov	r2, ip
 8022bb4:	e7f7      	b.n	8022ba6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8022bb6:	f110 0c01 	adds.w	ip, r0, #1
 8022bba:	f53f af74 	bmi.w	8022aa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022bbe:	4562      	cmp	r2, ip
 8022bc0:	f6ff af71 	blt.w	8022aa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022bc4:	f116 0c01 	adds.w	ip, r6, #1
 8022bc8:	f53f af6d 	bmi.w	8022aa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022bcc:	4567      	cmp	r7, ip
 8022bce:	f6ff af6a 	blt.w	8022aa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022bd2:	b23f      	sxth	r7, r7
 8022bd4:	b212      	sxth	r2, r2
 8022bd6:	9701      	str	r7, [sp, #4]
 8022bd8:	9200      	str	r2, [sp, #0]
 8022bda:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8022bde:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8022be2:	4623      	mov	r3, r4
 8022be4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022be6:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8022bea:	f7ff fde7 	bl	80227bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8022bee:	e75a      	b.n	8022aa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022bf0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8022bf2:	ea4f 462b 	mov.w	r6, fp, asr #16
 8022bf6:	1428      	asrs	r0, r5, #16
 8022bf8:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8022bfc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8022c00:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022c04:	fb02 6000 	mla	r0, r2, r0, r6
 8022c08:	9e08      	ldr	r6, [sp, #32]
 8022c0a:	f816 8000 	ldrb.w	r8, [r6, r0]
 8022c0e:	1837      	adds	r7, r6, r0
 8022c10:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022c14:	eb04 0c08 	add.w	ip, r4, r8
 8022c18:	2b00      	cmp	r3, #0
 8022c1a:	d060      	beq.n	8022cde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8022c1c:	787e      	ldrb	r6, [r7, #1]
 8022c1e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022c22:	4426      	add	r6, r4
 8022c24:	2900      	cmp	r1, #0
 8022c26:	d062      	beq.n	8022cee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8022c28:	18b8      	adds	r0, r7, r2
 8022c2a:	5cba      	ldrb	r2, [r7, r2]
 8022c2c:	7840      	ldrb	r0, [r0, #1]
 8022c2e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022c32:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022c36:	4422      	add	r2, r4
 8022c38:	4420      	add	r0, r4
 8022c3a:	b29b      	uxth	r3, r3
 8022c3c:	78b7      	ldrb	r7, [r6, #2]
 8022c3e:	b289      	uxth	r1, r1
 8022c40:	f89c a002 	ldrb.w	sl, [ip, #2]
 8022c44:	f89c c001 	ldrb.w	ip, [ip, #1]
 8022c48:	fb03 f901 	mul.w	r9, r3, r1
 8022c4c:	011b      	lsls	r3, r3, #4
 8022c4e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022c52:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8022c56:	eba3 0309 	sub.w	r3, r3, r9
 8022c5a:	b289      	uxth	r1, r1
 8022c5c:	b29b      	uxth	r3, r3
 8022c5e:	ebae 0e01 	sub.w	lr, lr, r1
 8022c62:	435f      	muls	r7, r3
 8022c64:	fa1f fe8e 	uxth.w	lr, lr
 8022c68:	fb0e 770a 	mla	r7, lr, sl, r7
 8022c6c:	f892 a002 	ldrb.w	sl, [r2, #2]
 8022c70:	fb01 770a 	mla	r7, r1, sl, r7
 8022c74:	f890 a002 	ldrb.w	sl, [r0, #2]
 8022c78:	fb09 7a0a 	mla	sl, r9, sl, r7
 8022c7c:	f814 7008 	ldrb.w	r7, [r4, r8]
 8022c80:	f896 8000 	ldrb.w	r8, [r6]
 8022c84:	7876      	ldrb	r6, [r6, #1]
 8022c86:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8022c8a:	fb03 f808 	mul.w	r8, r3, r8
 8022c8e:	4373      	muls	r3, r6
 8022c90:	7856      	ldrb	r6, [r2, #1]
 8022c92:	fb0e 8807 	mla	r8, lr, r7, r8
 8022c96:	7817      	ldrb	r7, [r2, #0]
 8022c98:	fb0e 330c 	mla	r3, lr, ip, r3
 8022c9c:	fb01 8807 	mla	r8, r1, r7, r8
 8022ca0:	7807      	ldrb	r7, [r0, #0]
 8022ca2:	fb01 3306 	mla	r3, r1, r6, r3
 8022ca6:	fb09 8707 	mla	r7, r9, r7, r8
 8022caa:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022cae:	ea47 070a 	orr.w	r7, r7, sl
 8022cb2:	f890 a001 	ldrb.w	sl, [r0, #1]
 8022cb6:	fb09 3a0a 	mla	sl, r9, sl, r3
 8022cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022cbc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022cc0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022cc4:	ea47 070a 	orr.w	r7, r7, sl
 8022cc8:	f823 7b02 	strh.w	r7, [r3], #2
 8022ccc:	930b      	str	r3, [sp, #44]	; 0x2c
 8022cce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022cd0:	449b      	add	fp, r3
 8022cd2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022cd4:	441d      	add	r5, r3
 8022cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022cd8:	3b01      	subs	r3, #1
 8022cda:	9309      	str	r3, [sp, #36]	; 0x24
 8022cdc:	e714      	b.n	8022b08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8022cde:	b149      	cbz	r1, 8022cf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8022ce0:	5cba      	ldrb	r2, [r7, r2]
 8022ce2:	4660      	mov	r0, ip
 8022ce4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022ce8:	4422      	add	r2, r4
 8022cea:	4666      	mov	r6, ip
 8022cec:	e7a5      	b.n	8022c3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8022cee:	4660      	mov	r0, ip
 8022cf0:	4662      	mov	r2, ip
 8022cf2:	e7a2      	b.n	8022c3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8022cf4:	4660      	mov	r0, ip
 8022cf6:	4662      	mov	r2, ip
 8022cf8:	e7f7      	b.n	8022cea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 8022cfa:	b00f      	add	sp, #60	; 0x3c
 8022cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022d00 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8022d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d04:	b085      	sub	sp, #20
 8022d06:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 8022d0a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8022d0e:	9102      	str	r1, [sp, #8]
 8022d10:	2c00      	cmp	r4, #0
 8022d12:	fb04 710c 	mla	r1, r4, ip, r7
 8022d16:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8022d1a:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8022d1e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8022d22:	eb02 0e01 	add.w	lr, r2, r1
 8022d26:	f2c0 8122 	blt.w	8022f6e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8022d2a:	45a0      	cmp	r8, r4
 8022d2c:	f340 811f 	ble.w	8022f6e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8022d30:	2f00      	cmp	r7, #0
 8022d32:	f2c0 811a 	blt.w	8022f6a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8022d36:	45bc      	cmp	ip, r7
 8022d38:	f340 8117 	ble.w	8022f6a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8022d3c:	5c52      	ldrb	r2, [r2, r1]
 8022d3e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8022d42:	1c7a      	adds	r2, r7, #1
 8022d44:	f100 8116 	bmi.w	8022f74 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8022d48:	4594      	cmp	ip, r2
 8022d4a:	f340 8113 	ble.w	8022f74 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8022d4e:	2e00      	cmp	r6, #0
 8022d50:	f000 8112 	beq.w	8022f78 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 8022d54:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022d58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8022d5c:	3401      	adds	r4, #1
 8022d5e:	f100 810f 	bmi.w	8022f80 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8022d62:	45a0      	cmp	r8, r4
 8022d64:	f340 810c 	ble.w	8022f80 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8022d68:	2800      	cmp	r0, #0
 8022d6a:	f000 810c 	beq.w	8022f86 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 8022d6e:	2f00      	cmp	r7, #0
 8022d70:	f2c0 8104 	blt.w	8022f7c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8022d74:	45bc      	cmp	ip, r7
 8022d76:	f340 8101 	ble.w	8022f7c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8022d7a:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8022d7e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8022d82:	3701      	adds	r7, #1
 8022d84:	f100 8102 	bmi.w	8022f8c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8022d88:	45bc      	cmp	ip, r7
 8022d8a:	f340 80ff 	ble.w	8022f8c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8022d8e:	2e00      	cmp	r6, #0
 8022d90:	f000 80fe 	beq.w	8022f90 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 8022d94:	44f4      	add	ip, lr
 8022d96:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8022d9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8022d9e:	b2b6      	uxth	r6, r6
 8022da0:	b280      	uxth	r0, r0
 8022da2:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8022da6:	fb00 fe06 	mul.w	lr, r0, r6
 8022daa:	0136      	lsls	r6, r6, #4
 8022dac:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8022db0:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8022db4:	eba6 070e 	sub.w	r7, r6, lr
 8022db8:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8022dbc:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022dc0:	b280      	uxth	r0, r0
 8022dc2:	b2bf      	uxth	r7, r7
 8022dc4:	1a1b      	subs	r3, r3, r0
 8022dc6:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022dca:	fb0a f607 	mul.w	r6, sl, r7
 8022dce:	b29b      	uxth	r3, r3
 8022dd0:	fb0b 6603 	mla	r6, fp, r3, r6
 8022dd4:	fb00 6609 	mla	r6, r0, r9, r6
 8022dd8:	fb0e 6608 	mla	r6, lr, r8, r6
 8022ddc:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022de0:	9600      	str	r6, [sp, #0]
 8022de2:	2e00      	cmp	r6, #0
 8022de4:	f000 80be 	beq.w	8022f64 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 8022de8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8022dec:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022df0:	9e02      	ldr	r6, [sp, #8]
 8022df2:	fb0b fc0c 	mul.w	ip, fp, ip
 8022df6:	fb0b f505 	mul.w	r5, fp, r5
 8022dfa:	8836      	ldrh	r6, [r6, #0]
 8022dfc:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8022e00:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022e04:	9501      	str	r5, [sp, #4]
 8022e06:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8022e0a:	44dc      	add	ip, fp
 8022e0c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e10:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8022e14:	9503      	str	r5, [sp, #12]
 8022e16:	9d01      	ldr	r5, [sp, #4]
 8022e18:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8022e1c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8022e20:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8022e24:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8022e28:	fb0a fc0c 	mul.w	ip, sl, ip
 8022e2c:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8022e30:	fb0a fa01 	mul.w	sl, sl, r1
 8022e34:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8022e38:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022e3c:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8022e40:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022e44:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8022e48:	4465      	add	r5, ip
 8022e4a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022e4e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022e52:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022e56:	fb09 fc0c 	mul.w	ip, r9, ip
 8022e5a:	0a2d      	lsrs	r5, r5, #8
 8022e5c:	fb09 f904 	mul.w	r9, r9, r4
 8022e60:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022e64:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8022e68:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022e6c:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8022e70:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022e74:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8022e78:	437d      	muls	r5, r7
 8022e7a:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8022e7e:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8022e82:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022e86:	4461      	add	r1, ip
 8022e88:	fb08 f404 	mul.w	r4, r8, r4
 8022e8c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022e90:	fb08 f802 	mul.w	r8, r8, r2
 8022e94:	0a09      	lsrs	r1, r1, #8
 8022e96:	0a22      	lsrs	r2, r4, #8
 8022e98:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8022e9c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8022ea0:	fb07 f70a 	mul.w	r7, r7, sl
 8022ea4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022ea8:	4414      	add	r4, r2
 8022eaa:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8022eae:	0a24      	lsrs	r4, r4, #8
 8022eb0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8022eb4:	9a03      	ldr	r2, [sp, #12]
 8022eb6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022eba:	fb02 5503 	mla	r5, r2, r3, r5
 8022ebe:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022ec2:	9a00      	ldr	r2, [sp, #0]
 8022ec4:	fb04 540e 	mla	r4, r4, lr, r5
 8022ec8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022ecc:	1235      	asrs	r5, r6, #8
 8022ece:	fb01 4100 	mla	r1, r1, r0, r4
 8022ed2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022ed6:	0a09      	lsrs	r1, r1, #8
 8022ed8:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8022edc:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8022ee0:	fb03 7101 	mla	r1, r3, r1, r7
 8022ee4:	fb0e 1e08 	mla	lr, lr, r8, r1
 8022ee8:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8022eec:	fb00 e101 	mla	r1, r0, r1, lr
 8022ef0:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8022ef4:	b287      	uxth	r7, r0
 8022ef6:	0a09      	lsrs	r1, r1, #8
 8022ef8:	437a      	muls	r2, r7
 8022efa:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8022efe:	1c53      	adds	r3, r2, #1
 8022f00:	4321      	orrs	r1, r4
 8022f02:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022f06:	0c0a      	lsrs	r2, r1, #16
 8022f08:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8022f0c:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8022f10:	b2c8      	uxtb	r0, r1
 8022f12:	fb12 f207 	smulbb	r2, r2, r7
 8022f16:	fb14 f407 	smulbb	r4, r4, r7
 8022f1a:	b2db      	uxtb	r3, r3
 8022f1c:	fb10 f007 	smulbb	r0, r0, r7
 8022f20:	fb05 2503 	mla	r5, r5, r3, r2
 8022f24:	10f2      	asrs	r2, r6, #3
 8022f26:	00f6      	lsls	r6, r6, #3
 8022f28:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022f2c:	b2ad      	uxth	r5, r5
 8022f2e:	b2f6      	uxtb	r6, r6
 8022f30:	fb02 4203 	mla	r2, r2, r3, r4
 8022f34:	fb06 0303 	mla	r3, r6, r3, r0
 8022f38:	b294      	uxth	r4, r2
 8022f3a:	b299      	uxth	r1, r3
 8022f3c:	1c6b      	adds	r3, r5, #1
 8022f3e:	1c62      	adds	r2, r4, #1
 8022f40:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022f44:	1c4b      	adds	r3, r1, #1
 8022f46:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8022f4a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022f4e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022f52:	0952      	lsrs	r2, r2, #5
 8022f54:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022f58:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022f5c:	432b      	orrs	r3, r5
 8022f5e:	4313      	orrs	r3, r2
 8022f60:	9a02      	ldr	r2, [sp, #8]
 8022f62:	8013      	strh	r3, [r2, #0]
 8022f64:	b005      	add	sp, #20
 8022f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f6a:	2500      	movs	r5, #0
 8022f6c:	e6e9      	b.n	8022d42 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 8022f6e:	2100      	movs	r1, #0
 8022f70:	460d      	mov	r5, r1
 8022f72:	e6f3      	b.n	8022d5c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8022f74:	2100      	movs	r1, #0
 8022f76:	e6f1      	b.n	8022d5c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8022f78:	4631      	mov	r1, r6
 8022f7a:	e6ef      	b.n	8022d5c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8022f7c:	2400      	movs	r4, #0
 8022f7e:	e700      	b.n	8022d82 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8022f80:	2200      	movs	r2, #0
 8022f82:	4614      	mov	r4, r2
 8022f84:	e70b      	b.n	8022d9e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8022f86:	4602      	mov	r2, r0
 8022f88:	4604      	mov	r4, r0
 8022f8a:	e708      	b.n	8022d9e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8022f8c:	2200      	movs	r2, #0
 8022f8e:	e706      	b.n	8022d9e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8022f90:	4632      	mov	r2, r6
 8022f92:	e704      	b.n	8022d9e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

08022f94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f98:	b09f      	sub	sp, #124	; 0x7c
 8022f9a:	921b      	str	r2, [sp, #108]	; 0x6c
 8022f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8022f9e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022fa0:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8022fa4:	901d      	str	r0, [sp, #116]	; 0x74
 8022fa6:	931c      	str	r3, [sp, #112]	; 0x70
 8022fa8:	6850      	ldr	r0, [r2, #4]
 8022faa:	9119      	str	r1, [sp, #100]	; 0x64
 8022fac:	6812      	ldr	r2, [r2, #0]
 8022fae:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8022fb0:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8022fb4:	fb00 1303 	mla	r3, r0, r3, r1
 8022fb8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022fbc:	930c      	str	r3, [sp, #48]	; 0x30
 8022fbe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022fc0:	681b      	ldr	r3, [r3, #0]
 8022fc2:	9312      	str	r3, [sp, #72]	; 0x48
 8022fc4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022fc6:	685e      	ldr	r6, [r3, #4]
 8022fc8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8022fcc:	3604      	adds	r6, #4
 8022fce:	930d      	str	r3, [sp, #52]	; 0x34
 8022fd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022fd2:	2b00      	cmp	r3, #0
 8022fd4:	dc03      	bgt.n	8022fde <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8022fd6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022fd8:	2b00      	cmp	r3, #0
 8022fda:	f340 8387 	ble.w	80236ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8022fde:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022fe0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022fe4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022fe8:	1e48      	subs	r0, r1, #1
 8022fea:	1e57      	subs	r7, r2, #1
 8022fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022fee:	2b00      	cmp	r3, #0
 8022ff0:	f340 8194 	ble.w	802331c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8022ff4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8022ff6:	142b      	asrs	r3, r5, #16
 8022ff8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8022ffc:	d406      	bmi.n	802300c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022ffe:	4584      	cmp	ip, r0
 8023000:	da04      	bge.n	802300c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8023002:	2b00      	cmp	r3, #0
 8023004:	db02      	blt.n	802300c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8023006:	42bb      	cmp	r3, r7
 8023008:	f2c0 8189 	blt.w	802331e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802300c:	f11c 0c01 	adds.w	ip, ip, #1
 8023010:	f100 8177 	bmi.w	8023302 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8023014:	4561      	cmp	r1, ip
 8023016:	f2c0 8174 	blt.w	8023302 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802301a:	3301      	adds	r3, #1
 802301c:	f100 8171 	bmi.w	8023302 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8023020:	429a      	cmp	r2, r3
 8023022:	f2c0 816e 	blt.w	8023302 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8023026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023028:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802302a:	931a      	str	r3, [sp, #104]	; 0x68
 802302c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802302e:	2b00      	cmp	r3, #0
 8023030:	f340 8193 	ble.w	802335a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8023034:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023036:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802303a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802303e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023042:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023044:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8023048:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802304a:	141b      	asrs	r3, r3, #16
 802304c:	f100 81d6 	bmi.w	80233fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8023050:	f100 38ff 	add.w	r8, r0, #4294967295
 8023054:	4543      	cmp	r3, r8
 8023056:	f280 81d1 	bge.w	80233fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802305a:	f1bc 0f00 	cmp.w	ip, #0
 802305e:	f2c0 81cd 	blt.w	80233fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8023062:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023066:	45c4      	cmp	ip, r8
 8023068:	f280 81c8 	bge.w	80233fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802306c:	b200      	sxth	r0, r0
 802306e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023070:	fb0c 3300 	mla	r3, ip, r0, r3
 8023074:	eb04 0803 	add.w	r8, r4, r3
 8023078:	5ce3      	ldrb	r3, [r4, r3]
 802307a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802307e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023082:	2a00      	cmp	r2, #0
 8023084:	f000 81af 	beq.w	80233e6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023088:	f898 c001 	ldrb.w	ip, [r8, #1]
 802308c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8023090:	940e      	str	r4, [sp, #56]	; 0x38
 8023092:	0e24      	lsrs	r4, r4, #24
 8023094:	9415      	str	r4, [sp, #84]	; 0x54
 8023096:	b179      	cbz	r1, 80230b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8023098:	eb08 0c00 	add.w	ip, r8, r0
 802309c:	f818 0000 	ldrb.w	r0, [r8, r0]
 80230a0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80230a4:	900a      	str	r0, [sp, #40]	; 0x28
 80230a6:	0e00      	lsrs	r0, r0, #24
 80230a8:	9013      	str	r0, [sp, #76]	; 0x4c
 80230aa:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80230ae:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80230b2:	900f      	str	r0, [sp, #60]	; 0x3c
 80230b4:	0e00      	lsrs	r0, r0, #24
 80230b6:	9016      	str	r0, [sp, #88]	; 0x58
 80230b8:	b292      	uxth	r2, r2
 80230ba:	9815      	ldr	r0, [sp, #84]	; 0x54
 80230bc:	b289      	uxth	r1, r1
 80230be:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80230c0:	fb02 f901 	mul.w	r9, r2, r1
 80230c4:	0112      	lsls	r2, r2, #4
 80230c6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80230ca:	eba2 0809 	sub.w	r8, r2, r9
 80230ce:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80230d2:	b289      	uxth	r1, r1
 80230d4:	fa1f f888 	uxth.w	r8, r8
 80230d8:	1a52      	subs	r2, r2, r1
 80230da:	fb08 f000 	mul.w	r0, r8, r0
 80230de:	b292      	uxth	r2, r2
 80230e0:	fb02 000e 	mla	r0, r2, lr, r0
 80230e4:	fb01 0004 	mla	r0, r1, r4, r0
 80230e8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80230ea:	fb09 0004 	mla	r0, r9, r4, r0
 80230ee:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80230f2:	2800      	cmp	r0, #0
 80230f4:	f000 80fa 	beq.w	80232ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80230f8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80230fc:	d01b      	beq.n	8023136 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80230fe:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023102:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023106:	fb0e fa0a 	mul.w	sl, lr, sl
 802310a:	fb0e fe03 	mul.w	lr, lr, r3
 802310e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023112:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023116:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802311a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802311e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023122:	4453      	add	r3, sl
 8023124:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023128:	0a1b      	lsrs	r3, r3, #8
 802312a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802312e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023132:	ea43 030c 	orr.w	r3, r3, ip
 8023136:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023138:	2cff      	cmp	r4, #255	; 0xff
 802313a:	d021      	beq.n	8023180 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 802313c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802313e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023142:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023144:	fb04 fb0b 	mul.w	fp, r4, fp
 8023148:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802314a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802314e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023150:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023154:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023158:	fb04 fa0a 	mul.w	sl, r4, sl
 802315c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023160:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023164:	44de      	add	lr, fp
 8023166:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802316a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802316e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023172:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023176:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802317a:	ea4e 040a 	orr.w	r4, lr, sl
 802317e:	940e      	str	r4, [sp, #56]	; 0x38
 8023180:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023182:	2cff      	cmp	r4, #255	; 0xff
 8023184:	d021      	beq.n	80231ca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8023186:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023188:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802318c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802318e:	fb04 fb0b 	mul.w	fp, r4, fp
 8023192:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023194:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023198:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802319a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802319e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80231a2:	fb04 fa0a 	mul.w	sl, r4, sl
 80231a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80231aa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80231ae:	44de      	add	lr, fp
 80231b0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80231b4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80231b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80231bc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80231c0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80231c4:	ea4e 040a 	orr.w	r4, lr, sl
 80231c8:	940a      	str	r4, [sp, #40]	; 0x28
 80231ca:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80231cc:	2cff      	cmp	r4, #255	; 0xff
 80231ce:	d021      	beq.n	8023214 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 80231d0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80231d2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80231d6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80231d8:	fb04 fb0b 	mul.w	fp, r4, fp
 80231dc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80231de:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80231e2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80231e4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80231e8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80231ec:	fb04 fa0a 	mul.w	sl, r4, sl
 80231f0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80231f4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80231f8:	44de      	add	lr, fp
 80231fa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80231fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023202:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023206:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802320a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802320e:	ea4e 040a 	orr.w	r4, lr, sl
 8023212:	940f      	str	r4, [sp, #60]	; 0x3c
 8023214:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023216:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802321a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802321e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023222:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023224:	fb08 fc0c 	mul.w	ip, r8, ip
 8023228:	fb02 cc0e 	mla	ip, r2, lr, ip
 802322c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023230:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023232:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023236:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802323a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802323c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023240:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023244:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023246:	fb08 f80e 	mul.w	r8, r8, lr
 802324a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802324e:	fb02 8303 	mla	r3, r2, r3, r8
 8023252:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023254:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023258:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802325c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802325e:	fb01 330a 	mla	r3, r1, sl, r3
 8023262:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8023266:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023268:	fb09 3901 	mla	r9, r9, r1, r3
 802326c:	883b      	ldrh	r3, [r7, #0]
 802326e:	4342      	muls	r2, r0
 8023270:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023274:	1c50      	adds	r0, r2, #1
 8023276:	1219      	asrs	r1, r3, #8
 8023278:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802327c:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023280:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023284:	ea4c 0c09 	orr.w	ip, ip, r9
 8023288:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802328c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8023290:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8023294:	b2c0      	uxtb	r0, r0
 8023296:	fb12 f204 	smulbb	r2, r2, r4
 802329a:	fa5f fc8c 	uxtb.w	ip, ip
 802329e:	fb1e fe04 	smulbb	lr, lr, r4
 80232a2:	fb01 2100 	mla	r1, r1, r0, r2
 80232a6:	10da      	asrs	r2, r3, #3
 80232a8:	fb1c fc04 	smulbb	ip, ip, r4
 80232ac:	00db      	lsls	r3, r3, #3
 80232ae:	b289      	uxth	r1, r1
 80232b0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80232b4:	b2db      	uxtb	r3, r3
 80232b6:	fb02 e200 	mla	r2, r2, r0, lr
 80232ba:	fb03 c300 	mla	r3, r3, r0, ip
 80232be:	b292      	uxth	r2, r2
 80232c0:	fa1f fc83 	uxth.w	ip, r3
 80232c4:	1c4b      	adds	r3, r1, #1
 80232c6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80232ca:	f10c 0301 	add.w	r3, ip, #1
 80232ce:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80232d2:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80232d6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80232da:	430b      	orrs	r3, r1
 80232dc:	1c51      	adds	r1, r2, #1
 80232de:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80232e2:	0952      	lsrs	r2, r2, #5
 80232e4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80232e8:	4313      	orrs	r3, r2
 80232ea:	803b      	strh	r3, [r7, #0]
 80232ec:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80232ee:	3702      	adds	r7, #2
 80232f0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80232f2:	441a      	add	r2, r3
 80232f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80232f6:	441d      	add	r5, r3
 80232f8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80232fa:	9229      	str	r2, [sp, #164]	; 0xa4
 80232fc:	3b01      	subs	r3, #1
 80232fe:	931a      	str	r3, [sp, #104]	; 0x68
 8023300:	e694      	b.n	802302c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8023302:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023304:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8023306:	441c      	add	r4, r3
 8023308:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802330a:	441d      	add	r5, r3
 802330c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802330e:	9429      	str	r4, [sp, #164]	; 0xa4
 8023310:	3b01      	subs	r3, #1
 8023312:	9309      	str	r3, [sp, #36]	; 0x24
 8023314:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023316:	3302      	adds	r3, #2
 8023318:	930c      	str	r3, [sp, #48]	; 0x30
 802331a:	e667      	b.n	8022fec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802331c:	d024      	beq.n	8023368 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 802331e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023320:	982b      	ldr	r0, [sp, #172]	; 0xac
 8023322:	3b01      	subs	r3, #1
 8023324:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8023326:	fb00 4003 	mla	r0, r0, r3, r4
 802332a:	1400      	asrs	r0, r0, #16
 802332c:	f53f ae7b 	bmi.w	8023026 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023330:	3901      	subs	r1, #1
 8023332:	4288      	cmp	r0, r1
 8023334:	f6bf ae77 	bge.w	8023026 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023338:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802333a:	fb01 5303 	mla	r3, r1, r3, r5
 802333e:	141b      	asrs	r3, r3, #16
 8023340:	f53f ae71 	bmi.w	8023026 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023344:	3a01      	subs	r2, #1
 8023346:	4293      	cmp	r3, r2
 8023348:	f6bf ae6d 	bge.w	8023026 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802334c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8023350:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8023354:	f1bb 0f00 	cmp.w	fp, #0
 8023358:	dc70      	bgt.n	802343c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 802335a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802335c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023362:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8023366:	930c      	str	r3, [sp, #48]	; 0x30
 8023368:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802336a:	2b00      	cmp	r3, #0
 802336c:	f340 81be 	ble.w	80236ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8023370:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023374:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023376:	ee30 0a04 	vadd.f32	s0, s0, s8
 802337a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802337e:	eef0 6a62 	vmov.f32	s13, s5
 8023382:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023386:	ee31 1a05 	vadd.f32	s2, s2, s10
 802338a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802338e:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8023392:	eef0 6a43 	vmov.f32	s13, s6
 8023396:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802339a:	ee16 5a90 	vmov	r5, s13
 802339e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80233a2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80233a6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80233aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80233ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80233b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80233b6:	ee12 2a90 	vmov	r2, s5
 80233ba:	eef0 2a47 	vmov.f32	s5, s14
 80233be:	fb92 f3f3 	sdiv	r3, r2, r3
 80233c2:	ee13 2a10 	vmov	r2, s6
 80233c6:	932b      	str	r3, [sp, #172]	; 0xac
 80233c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80233ca:	eeb0 3a67 	vmov.f32	s6, s15
 80233ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80233d2:	932c      	str	r3, [sp, #176]	; 0xb0
 80233d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80233d6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80233d8:	3b01      	subs	r3, #1
 80233da:	9319      	str	r3, [sp, #100]	; 0x64
 80233dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80233de:	bf08      	it	eq
 80233e0:	4613      	moveq	r3, r2
 80233e2:	9309      	str	r3, [sp, #36]	; 0x24
 80233e4:	e5f4      	b.n	8022fd0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80233e6:	2900      	cmp	r1, #0
 80233e8:	f43f ae66 	beq.w	80230b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80233ec:	f818 0000 	ldrb.w	r0, [r8, r0]
 80233f0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80233f4:	900a      	str	r0, [sp, #40]	; 0x28
 80233f6:	0e00      	lsrs	r0, r0, #24
 80233f8:	9013      	str	r0, [sp, #76]	; 0x4c
 80233fa:	e65d      	b.n	80230b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80233fc:	f113 0801 	adds.w	r8, r3, #1
 8023400:	f53f af74 	bmi.w	80232ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023404:	4540      	cmp	r0, r8
 8023406:	f6ff af71 	blt.w	80232ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802340a:	f11c 0801 	adds.w	r8, ip, #1
 802340e:	f53f af6d 	bmi.w	80232ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023412:	45c6      	cmp	lr, r8
 8023414:	f6ff af6a 	blt.w	80232ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023418:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 802341a:	b200      	sxth	r0, r0
 802341c:	9302      	str	r3, [sp, #8]
 802341e:	fa0f f38e 	sxth.w	r3, lr
 8023422:	9000      	str	r0, [sp, #0]
 8023424:	9301      	str	r3, [sp, #4]
 8023426:	4633      	mov	r3, r6
 8023428:	981d      	ldr	r0, [sp, #116]	; 0x74
 802342a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802342e:	e9cd c203 	strd	ip, r2, [sp, #12]
 8023432:	4639      	mov	r1, r7
 8023434:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023436:	f7ff fc63 	bl	8022d00 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 802343a:	e757      	b.n	80232ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802343c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802343e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023442:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8023444:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023448:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802344a:	1427      	asrs	r7, r4, #16
 802344c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802344e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023452:	142b      	asrs	r3, r5, #16
 8023454:	fb01 7303 	mla	r3, r1, r3, r7
 8023458:	18e7      	adds	r7, r4, r3
 802345a:	5ce3      	ldrb	r3, [r4, r3]
 802345c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023460:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023464:	2a00      	cmp	r2, #0
 8023466:	f000 8137 	beq.w	80236d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 802346a:	f897 e001 	ldrb.w	lr, [r7, #1]
 802346e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8023472:	9410      	str	r4, [sp, #64]	; 0x40
 8023474:	0e24      	lsrs	r4, r4, #24
 8023476:	9417      	str	r4, [sp, #92]	; 0x5c
 8023478:	b170      	cbz	r0, 8023498 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 802347a:	eb07 0e01 	add.w	lr, r7, r1
 802347e:	5c79      	ldrb	r1, [r7, r1]
 8023480:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023484:	910b      	str	r1, [sp, #44]	; 0x2c
 8023486:	0e09      	lsrs	r1, r1, #24
 8023488:	9114      	str	r1, [sp, #80]	; 0x50
 802348a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802348e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023492:	9111      	str	r1, [sp, #68]	; 0x44
 8023494:	0e09      	lsrs	r1, r1, #24
 8023496:	9118      	str	r1, [sp, #96]	; 0x60
 8023498:	b292      	uxth	r2, r2
 802349a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802349c:	b280      	uxth	r0, r0
 802349e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80234a0:	fb02 f800 	mul.w	r8, r2, r0
 80234a4:	0112      	lsls	r2, r2, #4
 80234a6:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80234aa:	eba2 0e08 	sub.w	lr, r2, r8
 80234ae:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80234b2:	b280      	uxth	r0, r0
 80234b4:	fa1f fe8e 	uxth.w	lr, lr
 80234b8:	1a12      	subs	r2, r2, r0
 80234ba:	fb0e f101 	mul.w	r1, lr, r1
 80234be:	b292      	uxth	r2, r2
 80234c0:	fb02 110c 	mla	r1, r2, ip, r1
 80234c4:	fb00 1104 	mla	r1, r0, r4, r1
 80234c8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80234ca:	fb08 1104 	mla	r1, r8, r4, r1
 80234ce:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80234d2:	2900      	cmp	r1, #0
 80234d4:	f000 80f5 	beq.w	80236c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 80234d8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80234dc:	d019      	beq.n	8023512 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 80234de:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80234e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80234e6:	fb0c fa0a 	mul.w	sl, ip, sl
 80234ea:	fb0c fc03 	mul.w	ip, ip, r3
 80234ee:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80234f2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80234f6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80234fa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80234fe:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023502:	4453      	add	r3, sl
 8023504:	0a3f      	lsrs	r7, r7, #8
 8023506:	0a1b      	lsrs	r3, r3, #8
 8023508:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802350c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023510:	433b      	orrs	r3, r7
 8023512:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023514:	2cff      	cmp	r4, #255	; 0xff
 8023516:	d020      	beq.n	802355a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8023518:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802351a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802351e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023520:	4367      	muls	r7, r4
 8023522:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023524:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023528:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802352c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802352e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023532:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023536:	fb04 fa0a 	mul.w	sl, r4, sl
 802353a:	44bc      	add	ip, r7
 802353c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023540:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023544:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023548:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802354c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023550:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023554:	ea4c 040a 	orr.w	r4, ip, sl
 8023558:	9410      	str	r4, [sp, #64]	; 0x40
 802355a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802355c:	2cff      	cmp	r4, #255	; 0xff
 802355e:	d020      	beq.n	80235a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8023560:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023562:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023566:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023568:	4367      	muls	r7, r4
 802356a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802356c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023570:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023574:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023576:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802357a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802357e:	fb04 fa0a 	mul.w	sl, r4, sl
 8023582:	44bc      	add	ip, r7
 8023584:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023588:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802358c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023590:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023594:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023598:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802359c:	ea4c 040a 	orr.w	r4, ip, sl
 80235a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80235a2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80235a4:	2cff      	cmp	r4, #255	; 0xff
 80235a6:	d020      	beq.n	80235ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 80235a8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80235aa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80235ae:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80235b0:	4367      	muls	r7, r4
 80235b2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80235b4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80235b8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80235bc:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80235be:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80235c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80235c6:	fb04 fa0a 	mul.w	sl, r4, sl
 80235ca:	44bc      	add	ip, r7
 80235cc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80235d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80235d4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80235d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80235dc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80235e0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80235e4:	ea4c 040a 	orr.w	r4, ip, sl
 80235e8:	9411      	str	r4, [sp, #68]	; 0x44
 80235ea:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80235ec:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80235f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80235f4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80235f8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80235fa:	fb0e f707 	mul.w	r7, lr, r7
 80235fe:	fb02 770c 	mla	r7, r2, ip, r7
 8023602:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023606:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023608:	fb00 770c 	mla	r7, r0, ip, r7
 802360c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023610:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023612:	fb08 770c 	mla	r7, r8, ip, r7
 8023616:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802361a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802361c:	fb0e fe0c 	mul.w	lr, lr, ip
 8023620:	0a3f      	lsrs	r7, r7, #8
 8023622:	fb02 e303 	mla	r3, r2, r3, lr
 8023626:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023628:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802362c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8023630:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023632:	fb00 330a 	mla	r3, r0, sl, r3
 8023636:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802363a:	f8b9 0000 	ldrh.w	r0, [r9]
 802363e:	fb08 3c0c 	mla	ip, r8, ip, r3
 8023642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023644:	1202      	asrs	r2, r0, #8
 8023646:	434b      	muls	r3, r1
 8023648:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802364c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8023650:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023654:	1c59      	adds	r1, r3, #1
 8023656:	ea47 070c 	orr.w	r7, r7, ip
 802365a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802365e:	0c3b      	lsrs	r3, r7, #16
 8023660:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8023664:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8023668:	b2ff      	uxtb	r7, r7
 802366a:	fb13 f304 	smulbb	r3, r3, r4
 802366e:	b2c9      	uxtb	r1, r1
 8023670:	fb1c fc04 	smulbb	ip, ip, r4
 8023674:	fb02 3201 	mla	r2, r2, r1, r3
 8023678:	10c3      	asrs	r3, r0, #3
 802367a:	fb17 f704 	smulbb	r7, r7, r4
 802367e:	00c0      	lsls	r0, r0, #3
 8023680:	b292      	uxth	r2, r2
 8023682:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8023686:	b2c0      	uxtb	r0, r0
 8023688:	fb03 c301 	mla	r3, r3, r1, ip
 802368c:	f102 0c01 	add.w	ip, r2, #1
 8023690:	fb00 7001 	mla	r0, r0, r1, r7
 8023694:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023698:	b280      	uxth	r0, r0
 802369a:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 802369e:	b29b      	uxth	r3, r3
 80236a0:	1c42      	adds	r2, r0, #1
 80236a2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80236a6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80236aa:	ea42 020c 	orr.w	r2, r2, ip
 80236ae:	f103 0c01 	add.w	ip, r3, #1
 80236b2:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80236b6:	095b      	lsrs	r3, r3, #5
 80236b8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80236bc:	431a      	orrs	r2, r3
 80236be:	f8a9 2000 	strh.w	r2, [r9]
 80236c2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80236c4:	f109 0902 	add.w	r9, r9, #2
 80236c8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80236ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80236ce:	441a      	add	r2, r3
 80236d0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80236d2:	9229      	str	r2, [sp, #164]	; 0xa4
 80236d4:	441d      	add	r5, r3
 80236d6:	e63d      	b.n	8023354 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80236d8:	2800      	cmp	r0, #0
 80236da:	f43f aedd 	beq.w	8023498 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80236de:	5c79      	ldrb	r1, [r7, r1]
 80236e0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80236e4:	910b      	str	r1, [sp, #44]	; 0x2c
 80236e6:	0e09      	lsrs	r1, r1, #24
 80236e8:	9114      	str	r1, [sp, #80]	; 0x50
 80236ea:	e6d5      	b.n	8023498 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80236ec:	b01f      	add	sp, #124	; 0x7c
 80236ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080236f2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 80236f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236f6:	b089      	sub	sp, #36	; 0x24
 80236f8:	9101      	str	r1, [sp, #4]
 80236fa:	9801      	ldr	r0, [sp, #4]
 80236fc:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 8023700:	8800      	ldrh	r0, [r0, #0]
 8023702:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8023706:	1206      	asrs	r6, r0, #8
 8023708:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 802370c:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8023710:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8023714:	9602      	str	r6, [sp, #8]
 8023716:	10c6      	asrs	r6, r0, #3
 8023718:	00c0      	lsls	r0, r0, #3
 802371a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802371e:	b2c0      	uxtb	r0, r0
 8023720:	9603      	str	r6, [sp, #12]
 8023722:	9004      	str	r0, [sp, #16]
 8023724:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 8023728:	fb07 100c 	mla	r0, r7, ip, r1
 802372c:	2f00      	cmp	r7, #0
 802372e:	eb02 0e00 	add.w	lr, r2, r0
 8023732:	f2c0 810a 	blt.w	802394a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8023736:	45b8      	cmp	r8, r7
 8023738:	f340 8107 	ble.w	802394a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 802373c:	2900      	cmp	r1, #0
 802373e:	f2c0 8102 	blt.w	8023946 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8023742:	458c      	cmp	ip, r1
 8023744:	f340 80ff 	ble.w	8023946 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8023748:	5c12      	ldrb	r2, [r2, r0]
 802374a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802374e:	1c4a      	adds	r2, r1, #1
 8023750:	f100 80fe 	bmi.w	8023950 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8023754:	4594      	cmp	ip, r2
 8023756:	f340 80fb 	ble.w	8023950 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 802375a:	2d00      	cmp	r5, #0
 802375c:	f000 80fa 	beq.w	8023954 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8023760:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023764:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8023768:	3701      	adds	r7, #1
 802376a:	f100 80f7 	bmi.w	802395c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 802376e:	45b8      	cmp	r8, r7
 8023770:	f340 80f4 	ble.w	802395c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8023774:	2c00      	cmp	r4, #0
 8023776:	f000 80f4 	beq.w	8023962 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 802377a:	2900      	cmp	r1, #0
 802377c:	eb0e 020c 	add.w	r2, lr, ip
 8023780:	f2c0 80ea 	blt.w	8023958 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8023784:	458c      	cmp	ip, r1
 8023786:	f340 80e7 	ble.w	8023958 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 802378a:	f81e 700c 	ldrb.w	r7, [lr, ip]
 802378e:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8023792:	3101      	adds	r1, #1
 8023794:	f100 80e8 	bmi.w	8023968 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8023798:	458c      	cmp	ip, r1
 802379a:	f340 80e5 	ble.w	8023968 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 802379e:	2d00      	cmp	r5, #0
 80237a0:	f000 80e4 	beq.w	802396c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 80237a4:	7852      	ldrb	r2, [r2, #1]
 80237a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80237aa:	0e0b      	lsrs	r3, r1, #24
 80237ac:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80237b0:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80237b4:	9300      	str	r3, [sp, #0]
 80237b6:	b2a4      	uxth	r4, r4
 80237b8:	b2ab      	uxth	r3, r5
 80237ba:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 80237be:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80237c2:	fb03 f904 	mul.w	r9, r3, r4
 80237c6:	011b      	lsls	r3, r3, #4
 80237c8:	fb0a f505 	mul.w	r5, sl, r5
 80237cc:	ea4f 6817 	mov.w	r8, r7, lsr #24
 80237d0:	eba3 0e09 	sub.w	lr, r3, r9
 80237d4:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 80237d8:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 80237dc:	0a28      	lsrs	r0, r5, #8
 80237de:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 80237e2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80237e6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80237ea:	fb0a f303 	mul.w	r3, sl, r3
 80237ee:	fb08 f707 	mul.w	r7, r8, r7
 80237f2:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 80237f6:	4405      	add	r5, r0
 80237f8:	fb08 fc0c 	mul.w	ip, r8, ip
 80237fc:	b2a4      	uxth	r4, r4
 80237fe:	0a2d      	lsrs	r5, r5, #8
 8023800:	fa1f fe8e 	uxth.w	lr, lr
 8023804:	1b12      	subs	r2, r2, r4
 8023806:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 802380a:	b292      	uxth	r2, r2
 802380c:	9005      	str	r0, [sp, #20]
 802380e:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8023812:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8023816:	ea4f 201c 	mov.w	r0, ip, lsr #8
 802381a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802381e:	0a1b      	lsrs	r3, r3, #8
 8023820:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023824:	9306      	str	r3, [sp, #24]
 8023826:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 802382a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802382e:	4460      	add	r0, ip
 8023830:	fb0b f303 	mul.w	r3, fp, r3
 8023834:	fb0b f606 	mul.w	r6, fp, r6
 8023838:	0a00      	lsrs	r0, r0, #8
 802383a:	0a1d      	lsrs	r5, r3, #8
 802383c:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8023840:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023844:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023848:	441d      	add	r5, r3
 802384a:	f506 7380 	add.w	r3, r6, #256	; 0x100
 802384e:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8023852:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8023856:	0a2d      	lsrs	r5, r5, #8
 8023858:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 802385c:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8023860:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023864:	0a36      	lsrs	r6, r6, #8
 8023866:	0a1b      	lsrs	r3, r3, #8
 8023868:	fb05 f50e 	mul.w	r5, r5, lr
 802386c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023870:	9307      	str	r3, [sp, #28]
 8023872:	0e0b      	lsrs	r3, r1, #24
 8023874:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023878:	fb0e f606 	mul.w	r6, lr, r6
 802387c:	435f      	muls	r7, r3
 802387e:	4359      	muls	r1, r3
 8023880:	9b05      	ldr	r3, [sp, #20]
 8023882:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023886:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802388a:	fb03 5502 	mla	r5, r3, r2, r5
 802388e:	9b06      	ldr	r3, [sp, #24]
 8023890:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023894:	fb0e fe0b 	mul.w	lr, lr, fp
 8023898:	44bc      	add	ip, r7
 802389a:	f501 7780 	add.w	r7, r1, #256	; 0x100
 802389e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80238a2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80238a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80238aa:	0a09      	lsrs	r1, r1, #8
 80238ac:	fb0c 5509 	mla	r5, ip, r9, r5
 80238b0:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80238b4:	fb00 5504 	mla	r5, r0, r4, r5
 80238b8:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80238bc:	9b07      	ldr	r3, [sp, #28]
 80238be:	fb02 6000 	mla	r0, r2, r0, r6
 80238c2:	0a2d      	lsrs	r5, r5, #8
 80238c4:	fb02 e20a 	mla	r2, r2, sl, lr
 80238c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80238cc:	fb09 0001 	mla	r0, r9, r1, r0
 80238d0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80238d4:	fb04 0003 	mla	r0, r4, r3, r0
 80238d8:	9b00      	ldr	r3, [sp, #0]
 80238da:	fb04 2408 	mla	r4, r4, r8, r2
 80238de:	9a04      	ldr	r2, [sp, #16]
 80238e0:	0a00      	lsrs	r0, r0, #8
 80238e2:	fb09 4903 	mla	r9, r9, r3, r4
 80238e6:	9b02      	ldr	r3, [sp, #8]
 80238e8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80238ec:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80238f0:	4305      	orrs	r5, r0
 80238f2:	fa5f f989 	uxtb.w	r9, r9
 80238f6:	fb03 f109 	mul.w	r1, r3, r9
 80238fa:	9b03      	ldr	r3, [sp, #12]
 80238fc:	fb03 f309 	mul.w	r3, r3, r9
 8023900:	fb02 f909 	mul.w	r9, r2, r9
 8023904:	1c4a      	adds	r2, r1, #1
 8023906:	1c58      	adds	r0, r3, #1
 8023908:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802390c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023910:	0c2a      	lsrs	r2, r5, #16
 8023912:	0a2b      	lsrs	r3, r5, #8
 8023914:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8023918:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802391c:	0212      	lsls	r2, r2, #8
 802391e:	00db      	lsls	r3, r3, #3
 8023920:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8023924:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023928:	4313      	orrs	r3, r2
 802392a:	f109 0201 	add.w	r2, r9, #1
 802392e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8023932:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8023936:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802393a:	431d      	orrs	r5, r3
 802393c:	9b01      	ldr	r3, [sp, #4]
 802393e:	801d      	strh	r5, [r3, #0]
 8023940:	b009      	add	sp, #36	; 0x24
 8023942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023946:	2000      	movs	r0, #0
 8023948:	e701      	b.n	802374e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 802394a:	2600      	movs	r6, #0
 802394c:	4630      	mov	r0, r6
 802394e:	e70b      	b.n	8023768 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8023950:	2600      	movs	r6, #0
 8023952:	e709      	b.n	8023768 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8023954:	462e      	mov	r6, r5
 8023956:	e707      	b.n	8023768 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8023958:	2700      	movs	r7, #0
 802395a:	e71a      	b.n	8023792 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 802395c:	2100      	movs	r1, #0
 802395e:	460f      	mov	r7, r1
 8023960:	e723      	b.n	80237aa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8023962:	4621      	mov	r1, r4
 8023964:	4627      	mov	r7, r4
 8023966:	e720      	b.n	80237aa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8023968:	2100      	movs	r1, #0
 802396a:	e71e      	b.n	80237aa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 802396c:	4629      	mov	r1, r5
 802396e:	e71c      	b.n	80237aa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

08023970 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023974:	b09b      	sub	sp, #108	; 0x6c
 8023976:	9218      	str	r2, [sp, #96]	; 0x60
 8023978:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802397a:	9019      	str	r0, [sp, #100]	; 0x64
 802397c:	9116      	str	r1, [sp, #88]	; 0x58
 802397e:	6850      	ldr	r0, [r2, #4]
 8023980:	9307      	str	r3, [sp, #28]
 8023982:	6812      	ldr	r2, [r2, #0]
 8023984:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8023986:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802398a:	fb00 1303 	mla	r3, r0, r3, r1
 802398e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023992:	930a      	str	r3, [sp, #40]	; 0x28
 8023994:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023996:	681b      	ldr	r3, [r3, #0]
 8023998:	930f      	str	r3, [sp, #60]	; 0x3c
 802399a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802399c:	685e      	ldr	r6, [r3, #4]
 802399e:	3604      	adds	r6, #4
 80239a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80239a2:	2b00      	cmp	r3, #0
 80239a4:	dc03      	bgt.n	80239ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80239a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80239a8:	2b00      	cmp	r3, #0
 80239aa:	f340 8373 	ble.w	8024094 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 80239ae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80239b0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80239b4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80239b8:	1e48      	subs	r0, r1, #1
 80239ba:	1e57      	subs	r7, r2, #1
 80239bc:	9b07      	ldr	r3, [sp, #28]
 80239be:	2b00      	cmp	r3, #0
 80239c0:	f340 818f 	ble.w	8023ce2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80239c4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80239c6:	142b      	asrs	r3, r5, #16
 80239c8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80239cc:	d406      	bmi.n	80239dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80239ce:	4584      	cmp	ip, r0
 80239d0:	da04      	bge.n	80239dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80239d2:	2b00      	cmp	r3, #0
 80239d4:	db02      	blt.n	80239dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80239d6:	42bb      	cmp	r3, r7
 80239d8:	f2c0 8184 	blt.w	8023ce4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80239dc:	f11c 0c01 	adds.w	ip, ip, #1
 80239e0:	f100 8172 	bmi.w	8023cc8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80239e4:	4561      	cmp	r1, ip
 80239e6:	f2c0 816f 	blt.w	8023cc8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80239ea:	3301      	adds	r3, #1
 80239ec:	f100 816c 	bmi.w	8023cc8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80239f0:	429a      	cmp	r2, r3
 80239f2:	f2c0 8169 	blt.w	8023cc8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80239f6:	9b07      	ldr	r3, [sp, #28]
 80239f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80239fa:	9317      	str	r3, [sp, #92]	; 0x5c
 80239fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80239fe:	2b00      	cmp	r3, #0
 8023a00:	f340 818e 	ble.w	8023d20 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8023a04:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023a06:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023a0a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023a0e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023a12:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023a14:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8023a18:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023a1a:	141b      	asrs	r3, r3, #16
 8023a1c:	f100 81d1 	bmi.w	8023dc2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023a20:	f101 38ff 	add.w	r8, r1, #4294967295
 8023a24:	4543      	cmp	r3, r8
 8023a26:	f280 81cc 	bge.w	8023dc2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023a2a:	f1bc 0f00 	cmp.w	ip, #0
 8023a2e:	f2c0 81c8 	blt.w	8023dc2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023a32:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023a36:	45c4      	cmp	ip, r8
 8023a38:	f280 81c3 	bge.w	8023dc2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023a3c:	b209      	sxth	r1, r1
 8023a3e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023a40:	fb0c 3301 	mla	r3, ip, r1, r3
 8023a44:	eb04 0803 	add.w	r8, r4, r3
 8023a48:	5ce3      	ldrb	r3, [r4, r3]
 8023a4a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023a4e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023a52:	2a00      	cmp	r2, #0
 8023a54:	f000 81aa 	beq.w	8023dac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8023a58:	f898 c001 	ldrb.w	ip, [r8, #1]
 8023a5c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8023a60:	940b      	str	r4, [sp, #44]	; 0x2c
 8023a62:	0e24      	lsrs	r4, r4, #24
 8023a64:	9412      	str	r4, [sp, #72]	; 0x48
 8023a66:	b178      	cbz	r0, 8023a88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8023a68:	eb08 0c01 	add.w	ip, r8, r1
 8023a6c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023a70:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023a74:	9108      	str	r1, [sp, #32]
 8023a76:	0e09      	lsrs	r1, r1, #24
 8023a78:	9110      	str	r1, [sp, #64]	; 0x40
 8023a7a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8023a7e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023a82:	910c      	str	r1, [sp, #48]	; 0x30
 8023a84:	0e09      	lsrs	r1, r1, #24
 8023a86:	9113      	str	r1, [sp, #76]	; 0x4c
 8023a88:	b292      	uxth	r2, r2
 8023a8a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8023a8c:	b280      	uxth	r0, r0
 8023a8e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023a90:	fb02 f900 	mul.w	r9, r2, r0
 8023a94:	0112      	lsls	r2, r2, #4
 8023a96:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023a9a:	eba2 0809 	sub.w	r8, r2, r9
 8023a9e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023aa2:	b280      	uxth	r0, r0
 8023aa4:	fa1f f888 	uxth.w	r8, r8
 8023aa8:	1a12      	subs	r2, r2, r0
 8023aaa:	fb08 f101 	mul.w	r1, r8, r1
 8023aae:	b292      	uxth	r2, r2
 8023ab0:	fb02 110e 	mla	r1, r2, lr, r1
 8023ab4:	fb00 1104 	mla	r1, r0, r4, r1
 8023ab8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023aba:	fb09 1104 	mla	r1, r9, r4, r1
 8023abe:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023ac2:	2900      	cmp	r1, #0
 8023ac4:	f000 80f5 	beq.w	8023cb2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023ac8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023acc:	d01b      	beq.n	8023b06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8023ace:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023ad2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023ad6:	fb0e fa0a 	mul.w	sl, lr, sl
 8023ada:	fb0e fe03 	mul.w	lr, lr, r3
 8023ade:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023ae2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023ae6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023aea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023aee:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023af2:	4453      	add	r3, sl
 8023af4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023af8:	0a1b      	lsrs	r3, r3, #8
 8023afa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023afe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023b02:	ea43 030c 	orr.w	r3, r3, ip
 8023b06:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023b08:	2cff      	cmp	r4, #255	; 0xff
 8023b0a:	d021      	beq.n	8023b50 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8023b0c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023b0e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023b12:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023b14:	fb04 fb0b 	mul.w	fp, r4, fp
 8023b18:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023b1a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023b1e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023b20:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023b24:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023b28:	fb04 fa0a 	mul.w	sl, r4, sl
 8023b2c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b30:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023b34:	44de      	add	lr, fp
 8023b36:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023b3a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023b3e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023b42:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b46:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023b4a:	ea4e 040a 	orr.w	r4, lr, sl
 8023b4e:	940b      	str	r4, [sp, #44]	; 0x2c
 8023b50:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023b52:	2cff      	cmp	r4, #255	; 0xff
 8023b54:	d021      	beq.n	8023b9a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023b56:	9c08      	ldr	r4, [sp, #32]
 8023b58:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023b5c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023b5e:	fb04 fb0b 	mul.w	fp, r4, fp
 8023b62:	9c08      	ldr	r4, [sp, #32]
 8023b64:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023b68:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023b6a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023b6e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023b72:	fb04 fa0a 	mul.w	sl, r4, sl
 8023b76:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b7a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023b7e:	44de      	add	lr, fp
 8023b80:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023b84:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023b88:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023b8c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b90:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023b94:	ea4e 040a 	orr.w	r4, lr, sl
 8023b98:	9408      	str	r4, [sp, #32]
 8023b9a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023b9c:	2cff      	cmp	r4, #255	; 0xff
 8023b9e:	d021      	beq.n	8023be4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8023ba0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023ba2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023ba6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023ba8:	fb04 fb0b 	mul.w	fp, r4, fp
 8023bac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023bae:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023bb2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023bb4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023bb8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023bbc:	fb04 fa0a 	mul.w	sl, r4, sl
 8023bc0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023bc4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023bc8:	44de      	add	lr, fp
 8023bca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023bce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023bd2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023bd6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023bda:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023bde:	ea4e 040a 	orr.w	r4, lr, sl
 8023be2:	940c      	str	r4, [sp, #48]	; 0x30
 8023be4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023be6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023bea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023bee:	43c9      	mvns	r1, r1
 8023bf0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023bf4:	9c08      	ldr	r4, [sp, #32]
 8023bf6:	fb08 fc0c 	mul.w	ip, r8, ip
 8023bfa:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023bfe:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023c02:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023c04:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023c08:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023c0c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023c0e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023c12:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023c16:	fb08 f80e 	mul.w	r8, r8, lr
 8023c1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c1e:	fa5f fe81 	uxtb.w	lr, r1
 8023c22:	fb02 8303 	mla	r3, r2, r3, r8
 8023c26:	9a08      	ldr	r2, [sp, #32]
 8023c28:	f8b7 8000 	ldrh.w	r8, [r7]
 8023c2c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023c30:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8023c34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023c36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8023c3a:	fb00 330a 	mla	r3, r0, sl, r3
 8023c3e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8023c42:	ea4f 2228 	mov.w	r2, r8, asr #8
 8023c46:	fb09 3900 	mla	r9, r9, r0, r3
 8023c4a:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8023c4e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8023c52:	b2c9      	uxtb	r1, r1
 8023c54:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023c58:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023c5c:	fb02 f20e 	mul.w	r2, r2, lr
 8023c60:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023c64:	fb00 f00e 	mul.w	r0, r0, lr
 8023c68:	1c53      	adds	r3, r2, #1
 8023c6a:	fb01 f10e 	mul.w	r1, r1, lr
 8023c6e:	ea4c 0c09 	orr.w	ip, ip, r9
 8023c72:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023c76:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8023c7a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023c7e:	4a60      	ldr	r2, [pc, #384]	; (8023e00 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8023c80:	b2db      	uxtb	r3, r3
 8023c82:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8023c86:	1c43      	adds	r3, r0, #1
 8023c88:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8023c8c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8023c90:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023c94:	00db      	lsls	r3, r3, #3
 8023c96:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023c9a:	4313      	orrs	r3, r2
 8023c9c:	1c4a      	adds	r2, r1, #1
 8023c9e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023ca2:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8023ca6:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8023caa:	ea4c 0c03 	orr.w	ip, ip, r3
 8023cae:	f8a7 c000 	strh.w	ip, [r7]
 8023cb2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023cb4:	3702      	adds	r7, #2
 8023cb6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8023cb8:	441a      	add	r2, r3
 8023cba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023cbc:	441d      	add	r5, r3
 8023cbe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023cc0:	9225      	str	r2, [sp, #148]	; 0x94
 8023cc2:	3b01      	subs	r3, #1
 8023cc4:	9317      	str	r3, [sp, #92]	; 0x5c
 8023cc6:	e699      	b.n	80239fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023cc8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023cca:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8023ccc:	441c      	add	r4, r3
 8023cce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023cd0:	441d      	add	r5, r3
 8023cd2:	9b07      	ldr	r3, [sp, #28]
 8023cd4:	9425      	str	r4, [sp, #148]	; 0x94
 8023cd6:	3b01      	subs	r3, #1
 8023cd8:	9307      	str	r3, [sp, #28]
 8023cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023cdc:	3302      	adds	r3, #2
 8023cde:	930a      	str	r3, [sp, #40]	; 0x28
 8023ce0:	e66c      	b.n	80239bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8023ce2:	d024      	beq.n	8023d2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8023ce4:	9b07      	ldr	r3, [sp, #28]
 8023ce6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023ce8:	3b01      	subs	r3, #1
 8023cea:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8023cec:	fb00 4003 	mla	r0, r0, r3, r4
 8023cf0:	1400      	asrs	r0, r0, #16
 8023cf2:	f53f ae80 	bmi.w	80239f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023cf6:	3901      	subs	r1, #1
 8023cf8:	4288      	cmp	r0, r1
 8023cfa:	f6bf ae7c 	bge.w	80239f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023cfe:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023d00:	fb01 5303 	mla	r3, r1, r3, r5
 8023d04:	141b      	asrs	r3, r3, #16
 8023d06:	f53f ae76 	bmi.w	80239f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023d0a:	3a01      	subs	r2, #1
 8023d0c:	4293      	cmp	r3, r2
 8023d0e:	f6bf ae72 	bge.w	80239f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023d12:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023d16:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8023d1a:	f1bb 0f00 	cmp.w	fp, #0
 8023d1e:	dc71      	bgt.n	8023e04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8023d20:	9b07      	ldr	r3, [sp, #28]
 8023d22:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023d28:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8023d2c:	930a      	str	r3, [sp, #40]	; 0x28
 8023d2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023d30:	2b00      	cmp	r3, #0
 8023d32:	f340 81af 	ble.w	8024094 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8023d36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023d3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023d3c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023d40:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023d44:	eef0 6a62 	vmov.f32	s13, s5
 8023d48:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023d4c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023d50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d54:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8023d58:	eef0 6a43 	vmov.f32	s13, s6
 8023d5c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d60:	ee16 5a90 	vmov	r5, s13
 8023d64:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023d68:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023d6c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023d70:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023d74:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023d78:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023d7c:	ee12 2a90 	vmov	r2, s5
 8023d80:	eef0 2a47 	vmov.f32	s5, s14
 8023d84:	fb92 f3f3 	sdiv	r3, r2, r3
 8023d88:	ee13 2a10 	vmov	r2, s6
 8023d8c:	9327      	str	r3, [sp, #156]	; 0x9c
 8023d8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023d90:	eeb0 3a67 	vmov.f32	s6, s15
 8023d94:	fb92 f3f3 	sdiv	r3, r2, r3
 8023d98:	9328      	str	r3, [sp, #160]	; 0xa0
 8023d9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023d9c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8023d9e:	3b01      	subs	r3, #1
 8023da0:	9316      	str	r3, [sp, #88]	; 0x58
 8023da2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023da4:	bf08      	it	eq
 8023da6:	4613      	moveq	r3, r2
 8023da8:	9307      	str	r3, [sp, #28]
 8023daa:	e5f9      	b.n	80239a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8023dac:	2800      	cmp	r0, #0
 8023dae:	f43f ae6b 	beq.w	8023a88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8023db2:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023db6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023dba:	9108      	str	r1, [sp, #32]
 8023dbc:	0e09      	lsrs	r1, r1, #24
 8023dbe:	9110      	str	r1, [sp, #64]	; 0x40
 8023dc0:	e662      	b.n	8023a88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8023dc2:	f113 0801 	adds.w	r8, r3, #1
 8023dc6:	f53f af74 	bmi.w	8023cb2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023dca:	4541      	cmp	r1, r8
 8023dcc:	f6ff af71 	blt.w	8023cb2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023dd0:	f11c 0801 	adds.w	r8, ip, #1
 8023dd4:	f53f af6d 	bmi.w	8023cb2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023dd8:	45c6      	cmp	lr, r8
 8023dda:	f6ff af6a 	blt.w	8023cb2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023dde:	b209      	sxth	r1, r1
 8023de0:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8023de4:	fa0f f38e 	sxth.w	r3, lr
 8023de8:	9100      	str	r1, [sp, #0]
 8023dea:	4639      	mov	r1, r7
 8023dec:	9301      	str	r3, [sp, #4]
 8023dee:	4633      	mov	r3, r6
 8023df0:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8023df4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023df6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8023df8:	f7ff fc7b 	bl	80236f2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8023dfc:	e759      	b.n	8023cb2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023dfe:	bf00      	nop
 8023e00:	fffff800 	.word	0xfffff800
 8023e04:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023e06:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023e0a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8023e0c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023e10:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023e12:	1427      	asrs	r7, r4, #16
 8023e14:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023e16:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023e1a:	142b      	asrs	r3, r5, #16
 8023e1c:	fb01 7303 	mla	r3, r1, r3, r7
 8023e20:	18e7      	adds	r7, r4, r3
 8023e22:	5ce3      	ldrb	r3, [r4, r3]
 8023e24:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023e28:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023e2c:	2a00      	cmp	r2, #0
 8023e2e:	f000 8127 	beq.w	8024080 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8023e32:	f897 e001 	ldrb.w	lr, [r7, #1]
 8023e36:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8023e3a:	940d      	str	r4, [sp, #52]	; 0x34
 8023e3c:	0e24      	lsrs	r4, r4, #24
 8023e3e:	9414      	str	r4, [sp, #80]	; 0x50
 8023e40:	b170      	cbz	r0, 8023e60 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8023e42:	eb07 0e01 	add.w	lr, r7, r1
 8023e46:	5c79      	ldrb	r1, [r7, r1]
 8023e48:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023e4c:	9109      	str	r1, [sp, #36]	; 0x24
 8023e4e:	0e09      	lsrs	r1, r1, #24
 8023e50:	9111      	str	r1, [sp, #68]	; 0x44
 8023e52:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8023e56:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023e5a:	910e      	str	r1, [sp, #56]	; 0x38
 8023e5c:	0e09      	lsrs	r1, r1, #24
 8023e5e:	9115      	str	r1, [sp, #84]	; 0x54
 8023e60:	b292      	uxth	r2, r2
 8023e62:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023e64:	b280      	uxth	r0, r0
 8023e66:	fb02 f800 	mul.w	r8, r2, r0
 8023e6a:	0112      	lsls	r2, r2, #4
 8023e6c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8023e70:	eba2 0e08 	sub.w	lr, r2, r8
 8023e74:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023e78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023e7a:	b280      	uxth	r0, r0
 8023e7c:	fa1f fe8e 	uxth.w	lr, lr
 8023e80:	1a09      	subs	r1, r1, r0
 8023e82:	fb0e f202 	mul.w	r2, lr, r2
 8023e86:	b289      	uxth	r1, r1
 8023e88:	fb01 220c 	mla	r2, r1, ip, r2
 8023e8c:	fb00 2204 	mla	r2, r0, r4, r2
 8023e90:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023e92:	fb08 2204 	mla	r2, r8, r4, r2
 8023e96:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023e9a:	2a00      	cmp	r2, #0
 8023e9c:	f000 80e5 	beq.w	802406a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8023ea0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023ea4:	d019      	beq.n	8023eda <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 8023ea6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023eaa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023eae:	fb0c fa0a 	mul.w	sl, ip, sl
 8023eb2:	fb0c fc03 	mul.w	ip, ip, r3
 8023eb6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023eba:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023ebe:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023ec2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023ec6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023eca:	4453      	add	r3, sl
 8023ecc:	0a3f      	lsrs	r7, r7, #8
 8023ece:	0a1b      	lsrs	r3, r3, #8
 8023ed0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023ed4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023ed8:	433b      	orrs	r3, r7
 8023eda:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023edc:	2cff      	cmp	r4, #255	; 0xff
 8023ede:	d020      	beq.n	8023f22 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8023ee0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023ee2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023ee6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023ee8:	4367      	muls	r7, r4
 8023eea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023eec:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023ef0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023ef4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023ef6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023efa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023efe:	fb04 fa0a 	mul.w	sl, r4, sl
 8023f02:	44bc      	add	ip, r7
 8023f04:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023f08:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023f0c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023f10:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f14:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023f18:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023f1c:	ea4c 040a 	orr.w	r4, ip, sl
 8023f20:	940d      	str	r4, [sp, #52]	; 0x34
 8023f22:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023f24:	2cff      	cmp	r4, #255	; 0xff
 8023f26:	d020      	beq.n	8023f6a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8023f28:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023f2a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023f2e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023f30:	4367      	muls	r7, r4
 8023f32:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023f34:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023f38:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023f3c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023f3e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023f42:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f46:	fb04 fa0a 	mul.w	sl, r4, sl
 8023f4a:	44bc      	add	ip, r7
 8023f4c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023f50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023f54:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023f58:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f5c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023f60:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023f64:	ea4c 040a 	orr.w	r4, ip, sl
 8023f68:	9409      	str	r4, [sp, #36]	; 0x24
 8023f6a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023f6c:	2cff      	cmp	r4, #255	; 0xff
 8023f6e:	d020      	beq.n	8023fb2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8023f70:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023f72:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023f76:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023f78:	4367      	muls	r7, r4
 8023f7a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023f7c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023f80:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023f84:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023f86:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023f8a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f8e:	fb04 fa0a 	mul.w	sl, r4, sl
 8023f92:	44bc      	add	ip, r7
 8023f94:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023f98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023f9c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023fa0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023fa4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023fa8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023fac:	ea4c 040a 	orr.w	r4, ip, sl
 8023fb0:	940e      	str	r4, [sp, #56]	; 0x38
 8023fb2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023fb4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023fb8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023fbc:	43d2      	mvns	r2, r2
 8023fbe:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023fc2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023fc4:	b2d2      	uxtb	r2, r2
 8023fc6:	fb0e f707 	mul.w	r7, lr, r7
 8023fca:	fb01 770c 	mla	r7, r1, ip, r7
 8023fce:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023fd2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023fd4:	fb00 770c 	mla	r7, r0, ip, r7
 8023fd8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023fdc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023fde:	fb08 770c 	mla	r7, r8, ip, r7
 8023fe2:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8023fe6:	fb0e fe0c 	mul.w	lr, lr, ip
 8023fea:	0a3f      	lsrs	r7, r7, #8
 8023fec:	fb01 e303 	mla	r3, r1, r3, lr
 8023ff0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023ff2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023ff6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8023ffa:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023ffc:	fb00 330a 	mla	r3, r0, sl, r3
 8024000:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8024004:	fb08 3c0c 	mla	ip, r8, ip, r3
 8024008:	f8b9 3000 	ldrh.w	r3, [r9]
 802400c:	1218      	asrs	r0, r3, #8
 802400e:	10d9      	asrs	r1, r3, #3
 8024010:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024014:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024018:	00db      	lsls	r3, r3, #3
 802401a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802401e:	4350      	muls	r0, r2
 8024020:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024024:	b2db      	uxtb	r3, r3
 8024026:	4351      	muls	r1, r2
 8024028:	ea47 070c 	orr.w	r7, r7, ip
 802402c:	4353      	muls	r3, r2
 802402e:	1c42      	adds	r2, r0, #1
 8024030:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024034:	0c3a      	lsrs	r2, r7, #16
 8024036:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802403a:	4a18      	ldr	r2, [pc, #96]	; (802409c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 802403c:	b2c0      	uxtb	r0, r0
 802403e:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8024042:	1c4a      	adds	r2, r1, #1
 8024044:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024048:	0a3a      	lsrs	r2, r7, #8
 802404a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802404e:	00c9      	lsls	r1, r1, #3
 8024050:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024054:	4301      	orrs	r1, r0
 8024056:	1c58      	adds	r0, r3, #1
 8024058:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802405c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8024060:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8024064:	4308      	orrs	r0, r1
 8024066:	f8a9 0000 	strh.w	r0, [r9]
 802406a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802406c:	f109 0902 	add.w	r9, r9, #2
 8024070:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024072:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024076:	441a      	add	r2, r3
 8024078:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802407a:	9225      	str	r2, [sp, #148]	; 0x94
 802407c:	441d      	add	r5, r3
 802407e:	e64c      	b.n	8023d1a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8024080:	2800      	cmp	r0, #0
 8024082:	f43f aeed 	beq.w	8023e60 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8024086:	5c79      	ldrb	r1, [r7, r1]
 8024088:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802408c:	9109      	str	r1, [sp, #36]	; 0x24
 802408e:	0e09      	lsrs	r1, r1, #24
 8024090:	9111      	str	r1, [sp, #68]	; 0x44
 8024092:	e6e5      	b.n	8023e60 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8024094:	b01b      	add	sp, #108	; 0x6c
 8024096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802409a:	bf00      	nop
 802409c:	fffff800 	.word	0xfffff800

080240a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80240a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240a4:	b085      	sub	sp, #20
 80240a6:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 80240aa:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80240ae:	2800      	cmp	r0, #0
 80240b0:	9103      	str	r1, [sp, #12]
 80240b2:	fb00 7406 	mla	r4, r0, r6, r7
 80240b6:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 80240ba:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80240be:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 80240c2:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80240c6:	eb03 0904 	add.w	r9, r3, r4
 80240ca:	9501      	str	r5, [sp, #4]
 80240cc:	f2c0 8150 	blt.w	8024370 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80240d0:	4583      	cmp	fp, r0
 80240d2:	f340 814d 	ble.w	8024370 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80240d6:	2f00      	cmp	r7, #0
 80240d8:	f2c0 8146 	blt.w	8024368 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80240dc:	42be      	cmp	r6, r7
 80240de:	f340 8143 	ble.w	8024368 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80240e2:	f813 c004 	ldrb.w	ip, [r3, r4]
 80240e6:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 80240ea:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80240ee:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80240f2:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 80240f6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80240fa:	4355      	muls	r5, r2
 80240fc:	fb0c f203 	mul.w	r2, ip, r3
 8024100:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8024104:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8024108:	441d      	add	r5, r3
 802410a:	f102 0320 	add.w	r3, r2, #32
 802410e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024112:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8024116:	0a1b      	lsrs	r3, r3, #8
 8024118:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802411c:	431c      	orrs	r4, r3
 802411e:	1c7b      	adds	r3, r7, #1
 8024120:	f100 812b 	bmi.w	802437a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8024124:	429e      	cmp	r6, r3
 8024126:	f340 8128 	ble.w	802437a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 802412a:	2900      	cmp	r1, #0
 802412c:	f000 8128 	beq.w	8024380 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8024130:	9a01      	ldr	r2, [sp, #4]
 8024132:	f899 3001 	ldrb.w	r3, [r9, #1]
 8024136:	8855      	ldrh	r5, [r2, #2]
 8024138:	ea4f 08e3 	mov.w	r8, r3, asr #3
 802413c:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8024140:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024144:	fb08 f802 	mul.w	r8, r8, r2
 8024148:	f64f 021f 	movw	r2, #63519	; 0xf81f
 802414c:	435d      	muls	r5, r3
 802414e:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8024152:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024156:	44d0      	add	r8, sl
 8024158:	f105 0a20 	add.w	sl, r5, #32
 802415c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8024160:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8024164:	0a2d      	lsrs	r5, r5, #8
 8024166:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802416a:	432a      	orrs	r2, r5
 802416c:	3001      	adds	r0, #1
 802416e:	f100 810d 	bmi.w	802438c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8024172:	4583      	cmp	fp, r0
 8024174:	f340 810a 	ble.w	802438c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8024178:	f1be 0f00 	cmp.w	lr, #0
 802417c:	f000 810b 	beq.w	8024396 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8024180:	2f00      	cmp	r7, #0
 8024182:	f2c0 8100 	blt.w	8024386 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8024186:	42be      	cmp	r6, r7
 8024188:	f340 80fd 	ble.w	8024386 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 802418c:	9801      	ldr	r0, [sp, #4]
 802418e:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8024192:	f819 5006 	ldrb.w	r5, [r9, r6]
 8024196:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 802419a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802419e:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 80241a2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80241a6:	fb0a fa00 	mul.w	sl, sl, r0
 80241aa:	fb05 f808 	mul.w	r8, r5, r8
 80241ae:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80241b2:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 80241b6:	4482      	add	sl, r0
 80241b8:	f108 0020 	add.w	r0, r8, #32
 80241bc:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80241c0:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 80241c4:	0a00      	lsrs	r0, r0, #8
 80241c6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80241ca:	ea4b 0b00 	orr.w	fp, fp, r0
 80241ce:	3701      	adds	r7, #1
 80241d0:	f100 80e6 	bmi.w	80243a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80241d4:	42be      	cmp	r6, r7
 80241d6:	f340 80e3 	ble.w	80243a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80241da:	2900      	cmp	r1, #0
 80241dc:	f000 80e3 	beq.w	80243a6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 80241e0:	3601      	adds	r6, #1
 80241e2:	9801      	ldr	r0, [sp, #4]
 80241e4:	f819 7006 	ldrb.w	r7, [r9, r6]
 80241e8:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80241ec:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80241f0:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 80241f4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80241f8:	fb09 f906 	mul.w	r9, r9, r6
 80241fc:	fb07 f800 	mul.w	r8, r7, r0
 8024200:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8024204:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8024208:	f609 0901 	addw	r9, r9, #2049	; 0x801
 802420c:	44d1      	add	r9, sl
 802420e:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8024212:	f108 0020 	add.w	r0, r8, #32
 8024216:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802421a:	0a00      	lsrs	r0, r0, #8
 802421c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024220:	4330      	orrs	r0, r6
 8024222:	b28e      	uxth	r6, r1
 8024224:	fa1f f98e 	uxth.w	r9, lr
 8024228:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 802422c:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8024230:	fb06 f809 	mul.w	r8, r6, r9
 8024234:	0136      	lsls	r6, r6, #4
 8024236:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802423a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802423e:	9601      	str	r6, [sp, #4]
 8024240:	ea4a 0404 	orr.w	r4, sl, r4
 8024244:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8024248:	fa1f f689 	uxth.w	r6, r9
 802424c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024250:	fb11 f90e 	smulbb	r9, r1, lr
 8024254:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024258:	9602      	str	r6, [sp, #8]
 802425a:	4626      	mov	r6, r4
 802425c:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8024260:	f1ce 0410 	rsb	r4, lr, #16
 8024264:	ea4a 0202 	orr.w	r2, sl, r2
 8024268:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802426c:	1a64      	subs	r4, r4, r1
 802426e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8024272:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024276:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802427a:	434a      	muls	r2, r1
 802427c:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8024280:	ea4a 0000 	orr.w	r0, sl, r0
 8024284:	9903      	ldr	r1, [sp, #12]
 8024286:	fb04 2406 	mla	r4, r4, r6, r2
 802428a:	9e02      	ldr	r6, [sp, #8]
 802428c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8024290:	fb09 4200 	mla	r2, r9, r0, r4
 8024294:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8024298:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802429c:	8808      	ldrh	r0, [r1, #0]
 802429e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80242a2:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 80242a6:	ea44 0b0b 	orr.w	fp, r4, fp
 80242aa:	9c01      	ldr	r4, [sp, #4]
 80242ac:	b289      	uxth	r1, r1
 80242ae:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 80242b2:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80242b6:	1ba4      	subs	r4, r4, r6
 80242b8:	9e01      	ldr	r6, [sp, #4]
 80242ba:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80242be:	eba6 0608 	sub.w	r6, r6, r8
 80242c2:	b2a4      	uxth	r4, r4
 80242c4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80242c8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80242cc:	b2b6      	uxth	r6, r6
 80242ce:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80242d2:	4373      	muls	r3, r6
 80242d4:	ea42 0e0e 	orr.w	lr, r2, lr
 80242d8:	fb0c 3304 	mla	r3, ip, r4, r3
 80242dc:	9c02      	ldr	r4, [sp, #8]
 80242de:	fa1f f28e 	uxth.w	r2, lr
 80242e2:	fb04 3505 	mla	r5, r4, r5, r3
 80242e6:	10d4      	asrs	r4, r2, #3
 80242e8:	fb08 5707 	mla	r7, r8, r7, r5
 80242ec:	1215      	asrs	r5, r2, #8
 80242ee:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80242f2:	00d2      	lsls	r2, r2, #3
 80242f4:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80242f8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80242fc:	b2d2      	uxtb	r2, r2
 80242fe:	434f      	muls	r7, r1
 8024300:	1c7b      	adds	r3, r7, #1
 8024302:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8024306:	1203      	asrs	r3, r0, #8
 8024308:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 802430c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024310:	b2ff      	uxtb	r7, r7
 8024312:	fb13 f307 	smulbb	r3, r3, r7
 8024316:	fb05 3501 	mla	r5, r5, r1, r3
 802431a:	10c3      	asrs	r3, r0, #3
 802431c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8024320:	b2ad      	uxth	r5, r5
 8024322:	fb13 f307 	smulbb	r3, r3, r7
 8024326:	fb04 3401 	mla	r4, r4, r1, r3
 802432a:	00c3      	lsls	r3, r0, #3
 802432c:	b2db      	uxtb	r3, r3
 802432e:	b2a4      	uxth	r4, r4
 8024330:	fb13 f307 	smulbb	r3, r3, r7
 8024334:	fb02 3101 	mla	r1, r2, r1, r3
 8024338:	1c6b      	adds	r3, r5, #1
 802433a:	1c62      	adds	r2, r4, #1
 802433c:	b289      	uxth	r1, r1
 802433e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024342:	1c4b      	adds	r3, r1, #1
 8024344:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8024348:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802434c:	9a03      	ldr	r2, [sp, #12]
 802434e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8024352:	0964      	lsrs	r4, r4, #5
 8024354:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024358:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802435c:	432b      	orrs	r3, r5
 802435e:	4323      	orrs	r3, r4
 8024360:	8013      	strh	r3, [r2, #0]
 8024362:	b005      	add	sp, #20
 8024364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024368:	f04f 0c00 	mov.w	ip, #0
 802436c:	4664      	mov	r4, ip
 802436e:	e6d6      	b.n	802411e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8024370:	2300      	movs	r3, #0
 8024372:	469c      	mov	ip, r3
 8024374:	461a      	mov	r2, r3
 8024376:	461c      	mov	r4, r3
 8024378:	e6f8      	b.n	802416c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802437a:	2300      	movs	r3, #0
 802437c:	461a      	mov	r2, r3
 802437e:	e6f5      	b.n	802416c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8024380:	460b      	mov	r3, r1
 8024382:	460a      	mov	r2, r1
 8024384:	e6f2      	b.n	802416c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8024386:	2500      	movs	r5, #0
 8024388:	46ab      	mov	fp, r5
 802438a:	e720      	b.n	80241ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 802438c:	2700      	movs	r7, #0
 802438e:	463d      	mov	r5, r7
 8024390:	4638      	mov	r0, r7
 8024392:	46bb      	mov	fp, r7
 8024394:	e745      	b.n	8024222 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8024396:	4677      	mov	r7, lr
 8024398:	4675      	mov	r5, lr
 802439a:	4670      	mov	r0, lr
 802439c:	46f3      	mov	fp, lr
 802439e:	e740      	b.n	8024222 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80243a0:	2700      	movs	r7, #0
 80243a2:	4638      	mov	r0, r7
 80243a4:	e73d      	b.n	8024222 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80243a6:	460f      	mov	r7, r1
 80243a8:	4608      	mov	r0, r1
 80243aa:	e73a      	b.n	8024222 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

080243ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80243ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243b0:	b097      	sub	sp, #92	; 0x5c
 80243b2:	9214      	str	r2, [sp, #80]	; 0x50
 80243b4:	9308      	str	r3, [sp, #32]
 80243b6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80243b8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80243bc:	9015      	str	r0, [sp, #84]	; 0x54
 80243be:	9312      	str	r3, [sp, #72]	; 0x48
 80243c0:	6850      	ldr	r0, [r2, #4]
 80243c2:	9111      	str	r1, [sp, #68]	; 0x44
 80243c4:	6812      	ldr	r2, [r2, #0]
 80243c6:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80243ca:	fb00 1303 	mla	r3, r0, r3, r1
 80243ce:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80243d2:	9309      	str	r3, [sp, #36]	; 0x24
 80243d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80243d6:	681b      	ldr	r3, [r3, #0]
 80243d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80243da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80243dc:	685b      	ldr	r3, [r3, #4]
 80243de:	930c      	str	r3, [sp, #48]	; 0x30
 80243e0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80243e4:	930a      	str	r3, [sp, #40]	; 0x28
 80243e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80243e8:	2b00      	cmp	r3, #0
 80243ea:	dc03      	bgt.n	80243f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80243ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80243ee:	2b00      	cmp	r3, #0
 80243f0:	f340 83cd 	ble.w	8024b8e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 80243f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80243f6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80243fa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80243fe:	1e48      	subs	r0, r1, #1
 8024400:	1e55      	subs	r5, r2, #1
 8024402:	9b08      	ldr	r3, [sp, #32]
 8024404:	2b00      	cmp	r3, #0
 8024406:	f340 81a5 	ble.w	8024754 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 802440a:	9e21      	ldr	r6, [sp, #132]	; 0x84
 802440c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802440e:	1436      	asrs	r6, r6, #16
 8024410:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024414:	d406      	bmi.n	8024424 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024416:	4286      	cmp	r6, r0
 8024418:	da04      	bge.n	8024424 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802441a:	2b00      	cmp	r3, #0
 802441c:	db02      	blt.n	8024424 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802441e:	42ab      	cmp	r3, r5
 8024420:	f2c0 8199 	blt.w	8024756 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8024424:	3601      	adds	r6, #1
 8024426:	f100 8186 	bmi.w	8024736 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802442a:	42b1      	cmp	r1, r6
 802442c:	f2c0 8183 	blt.w	8024736 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024430:	3301      	adds	r3, #1
 8024432:	f100 8180 	bmi.w	8024736 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024436:	429a      	cmp	r2, r3
 8024438:	f2c0 817d 	blt.w	8024736 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802443c:	9b08      	ldr	r3, [sp, #32]
 802443e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8024442:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024444:	9313      	str	r3, [sp, #76]	; 0x4c
 8024446:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024448:	2b00      	cmp	r3, #0
 802444a:	f340 81a6 	ble.w	802479a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802444e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024450:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8024452:	1418      	asrs	r0, r3, #16
 8024454:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024456:	142d      	asrs	r5, r5, #16
 8024458:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802445c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802445e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8024462:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024464:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8024468:	f100 81fa 	bmi.w	8024860 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802446c:	f102 3eff 	add.w	lr, r2, #4294967295
 8024470:	4575      	cmp	r5, lr
 8024472:	f280 81f5 	bge.w	8024860 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024476:	2800      	cmp	r0, #0
 8024478:	f2c0 81f2 	blt.w	8024860 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802447c:	f103 3eff 	add.w	lr, r3, #4294967295
 8024480:	4570      	cmp	r0, lr
 8024482:	f280 81ed 	bge.w	8024860 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024486:	b212      	sxth	r2, r2
 8024488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802448a:	fa1f fe81 	uxth.w	lr, r1
 802448e:	fb00 5002 	mla	r0, r0, r2, r5
 8024492:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8024496:	eb03 0a00 	add.w	sl, r3, r0
 802449a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802449e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80244a2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80244a6:	b29b      	uxth	r3, r3
 80244a8:	f1bc 0f00 	cmp.w	ip, #0
 80244ac:	f000 81bb 	beq.w	8024826 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80244b0:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80244b4:	eb0a 0b02 	add.w	fp, sl, r2
 80244b8:	fa1f fa8c 	uxth.w	sl, ip
 80244bc:	940d      	str	r4, [sp, #52]	; 0x34
 80244be:	fb0a fe0e 	mul.w	lr, sl, lr
 80244c2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80244c6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80244ca:	eba5 050e 	sub.w	r5, r5, lr
 80244ce:	940e      	str	r4, [sp, #56]	; 0x38
 80244d0:	fa1f fa8a 	uxth.w	sl, sl
 80244d4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80244d6:	b2ad      	uxth	r5, r5
 80244d8:	eba3 030a 	sub.w	r3, r3, sl
 80244dc:	fb08 f505 	mul.w	r5, r8, r5
 80244e0:	b29b      	uxth	r3, r3
 80244e2:	fb09 5303 	mla	r3, r9, r3, r5
 80244e6:	fb0a 3304 	mla	r3, sl, r4, r3
 80244ea:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80244ec:	fb0e 3304 	mla	r3, lr, r4, r3
 80244f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80244f4:	2b00      	cmp	r3, #0
 80244f6:	f000 8111 	beq.w	802471c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80244fa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80244fc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024500:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8024504:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8024508:	f000 8192 	beq.w	8024830 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 802450c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8024510:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8024514:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024518:	fb0a fe0e 	mul.w	lr, sl, lr
 802451c:	fb09 f000 	mul.w	r0, r9, r0
 8024520:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8024524:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8024528:	f100 0b20 	add.w	fp, r0, #32
 802452c:	44ce      	add	lr, r9
 802452e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8024532:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8024536:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802453a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802453e:	ea4e 0909 	orr.w	r9, lr, r9
 8024542:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024546:	8868      	ldrh	r0, [r5, #2]
 8024548:	d019      	beq.n	802457e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802454a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802454e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8024552:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024556:	fb0a fe0e 	mul.w	lr, sl, lr
 802455a:	fb08 f800 	mul.w	r8, r8, r0
 802455e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8024562:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8024566:	f108 0b20 	add.w	fp, r8, #32
 802456a:	4486      	add	lr, r0
 802456c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8024570:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8024574:	0a00      	lsrs	r0, r0, #8
 8024576:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802457a:	ea4e 0000 	orr.w	r0, lr, r0
 802457e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8024582:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8024586:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802458a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802458e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8024592:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024596:	ea4e 0909 	orr.w	r9, lr, r9
 802459a:	ea4a 0000 	orr.w	r0, sl, r0
 802459e:	f1bc 0f00 	cmp.w	ip, #0
 80245a2:	f000 8147 	beq.w	8024834 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 80245a6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80245aa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80245ac:	3a01      	subs	r2, #1
 80245ae:	2cff      	cmp	r4, #255	; 0xff
 80245b0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80245b4:	f102 0202 	add.w	r2, r2, #2
 80245b8:	eb05 0e02 	add.w	lr, r5, r2
 80245bc:	5aaa      	ldrh	r2, [r5, r2]
 80245be:	d018      	beq.n	80245f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80245c0:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80245c4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80245c8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80245cc:	fb04 fa02 	mul.w	sl, r4, r2
 80245d0:	fb08 f805 	mul.w	r8, r8, r5
 80245d4:	f10a 0520 	add.w	r5, sl, #32
 80245d8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80245dc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80245e0:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80245e4:	4442      	add	r2, r8
 80245e6:	0a2d      	lsrs	r5, r5, #8
 80245e8:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80245ec:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80245f0:	432a      	orrs	r2, r5
 80245f2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80245f4:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80245f8:	2cff      	cmp	r4, #255	; 0xff
 80245fa:	d01a      	beq.n	8024632 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 80245fc:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8024600:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024604:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024608:	fb04 fa05 	mul.w	sl, r4, r5
 802460c:	fb08 f80e 	mul.w	r8, r8, lr
 8024610:	f10a 0e20 	add.w	lr, sl, #32
 8024614:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8024618:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802461c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8024620:	4445      	add	r5, r8
 8024622:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024626:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802462a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802462e:	ea45 050e 	orr.w	r5, r5, lr
 8024632:	fb1c fe01 	smulbb	lr, ip, r1
 8024636:	f1cc 0810 	rsb	r8, ip, #16
 802463a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802463e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024642:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8024646:	eba8 0801 	sub.w	r8, r8, r1
 802464a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802464e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024652:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8024656:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802465a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802465e:	ea4a 0202 	orr.w	r2, sl, r2
 8024662:	4341      	muls	r1, r0
 8024664:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8024668:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802466c:	fb09 1108 	mla	r1, r9, r8, r1
 8024670:	ea4b 0505 	orr.w	r5, fp, r5
 8024674:	fb0c 1102 	mla	r1, ip, r2, r1
 8024678:	fb0e 1e05 	mla	lr, lr, r5, r1
 802467c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8024680:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024684:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024688:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802468c:	ea42 0e0e 	orr.w	lr, r2, lr
 8024690:	fa1f f28e 	uxth.w	r2, lr
 8024694:	2bff      	cmp	r3, #255	; 0xff
 8024696:	d103      	bne.n	80246a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024698:	9912      	ldr	r1, [sp, #72]	; 0x48
 802469a:	29ff      	cmp	r1, #255	; 0xff
 802469c:	f000 80de 	beq.w	802485c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80246a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80246a2:	1215      	asrs	r5, r2, #8
 80246a4:	8838      	ldrh	r0, [r7, #0]
 80246a6:	434b      	muls	r3, r1
 80246a8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80246ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80246ae:	f103 0c01 	add.w	ip, r3, #1
 80246b2:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 80246b6:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80246ba:	fa5f fc83 	uxtb.w	ip, r3
 80246be:	1203      	asrs	r3, r0, #8
 80246c0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80246c4:	fb13 f30c 	smulbb	r3, r3, ip
 80246c8:	fb05 3501 	mla	r5, r5, r1, r3
 80246cc:	10c3      	asrs	r3, r0, #3
 80246ce:	10d1      	asrs	r1, r2, #3
 80246d0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80246d4:	00d2      	lsls	r2, r2, #3
 80246d6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80246da:	b2ad      	uxth	r5, r5
 80246dc:	fb13 f30c 	smulbb	r3, r3, ip
 80246e0:	b2d2      	uxtb	r2, r2
 80246e2:	fb01 3104 	mla	r1, r1, r4, r3
 80246e6:	00c3      	lsls	r3, r0, #3
 80246e8:	b2db      	uxtb	r3, r3
 80246ea:	b289      	uxth	r1, r1
 80246ec:	fb13 f30c 	smulbb	r3, r3, ip
 80246f0:	fb02 3304 	mla	r3, r2, r4, r3
 80246f4:	b29a      	uxth	r2, r3
 80246f6:	1c6b      	adds	r3, r5, #1
 80246f8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80246fc:	1c53      	adds	r3, r2, #1
 80246fe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024702:	1c4a      	adds	r2, r1, #1
 8024704:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8024708:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802470c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024710:	0949      	lsrs	r1, r1, #5
 8024712:	432b      	orrs	r3, r5
 8024714:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024718:	430b      	orrs	r3, r1
 802471a:	803b      	strh	r3, [r7, #0]
 802471c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802471e:	3702      	adds	r7, #2
 8024720:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8024722:	4413      	add	r3, r2
 8024724:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8024726:	9321      	str	r3, [sp, #132]	; 0x84
 8024728:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802472a:	441a      	add	r2, r3
 802472c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802472e:	3b01      	subs	r3, #1
 8024730:	9222      	str	r2, [sp, #136]	; 0x88
 8024732:	9313      	str	r3, [sp, #76]	; 0x4c
 8024734:	e687      	b.n	8024446 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024738:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 802473a:	9c22      	ldr	r4, [sp, #136]	; 0x88
 802473c:	4433      	add	r3, r6
 802473e:	9321      	str	r3, [sp, #132]	; 0x84
 8024740:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024742:	441c      	add	r4, r3
 8024744:	9b08      	ldr	r3, [sp, #32]
 8024746:	3b01      	subs	r3, #1
 8024748:	9422      	str	r4, [sp, #136]	; 0x88
 802474a:	9308      	str	r3, [sp, #32]
 802474c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802474e:	3302      	adds	r3, #2
 8024750:	9309      	str	r3, [sp, #36]	; 0x24
 8024752:	e656      	b.n	8024402 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8024754:	d028      	beq.n	80247a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8024756:	9b08      	ldr	r3, [sp, #32]
 8024758:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802475a:	3b01      	subs	r3, #1
 802475c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 802475e:	fb00 5003 	mla	r0, r0, r3, r5
 8024762:	1400      	asrs	r0, r0, #16
 8024764:	f53f ae6a 	bmi.w	802443c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024768:	3901      	subs	r1, #1
 802476a:	4288      	cmp	r0, r1
 802476c:	f6bf ae66 	bge.w	802443c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024770:	9924      	ldr	r1, [sp, #144]	; 0x90
 8024772:	9822      	ldr	r0, [sp, #136]	; 0x88
 8024774:	fb01 0303 	mla	r3, r1, r3, r0
 8024778:	141b      	asrs	r3, r3, #16
 802477a:	f53f ae5f 	bmi.w	802443c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802477e:	3a01      	subs	r2, #1
 8024780:	4293      	cmp	r3, r2
 8024782:	f6bf ae5b 	bge.w	802443c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024786:	9b08      	ldr	r3, [sp, #32]
 8024788:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802478c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8024790:	9313      	str	r3, [sp, #76]	; 0x4c
 8024792:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024794:	2b00      	cmp	r3, #0
 8024796:	f300 8082 	bgt.w	802489e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 802479a:	9b08      	ldr	r3, [sp, #32]
 802479c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80247a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80247a2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80247a6:	9309      	str	r3, [sp, #36]	; 0x24
 80247a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80247aa:	2b00      	cmp	r3, #0
 80247ac:	f340 81ef 	ble.w	8024b8e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 80247b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80247b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80247b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80247ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80247be:	eef0 6a62 	vmov.f32	s13, s5
 80247c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80247c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80247ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80247ce:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 80247d2:	eef0 6a43 	vmov.f32	s13, s6
 80247d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80247da:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 80247de:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80247e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80247e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80247ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80247ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80247f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80247f6:	ee12 2a90 	vmov	r2, s5
 80247fa:	eef0 2a47 	vmov.f32	s5, s14
 80247fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8024802:	ee13 2a10 	vmov	r2, s6
 8024806:	9323      	str	r3, [sp, #140]	; 0x8c
 8024808:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802480a:	eeb0 3a67 	vmov.f32	s6, s15
 802480e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024812:	9324      	str	r3, [sp, #144]	; 0x90
 8024814:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024816:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024818:	3b01      	subs	r3, #1
 802481a:	9311      	str	r3, [sp, #68]	; 0x44
 802481c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802481e:	bf08      	it	eq
 8024820:	4613      	moveq	r3, r2
 8024822:	9308      	str	r3, [sp, #32]
 8024824:	e5df      	b.n	80243e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8024826:	fb08 f505 	mul.w	r5, r8, r5
 802482a:	fb09 5303 	mla	r3, r9, r3, r5
 802482e:	e65f      	b.n	80244f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8024830:	4681      	mov	r9, r0
 8024832:	e686      	b.n	8024542 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8024834:	f1c1 0210 	rsb	r2, r1, #16
 8024838:	4341      	muls	r1, r0
 802483a:	fb09 1902 	mla	r9, r9, r2, r1
 802483e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8024842:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8024846:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802484a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802484e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8024852:	ea42 0909 	orr.w	r9, r2, r9
 8024856:	fa1f f289 	uxth.w	r2, r9
 802485a:	e71b      	b.n	8024694 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802485c:	803a      	strh	r2, [r7, #0]
 802485e:	e75d      	b.n	802471c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024860:	f115 0e01 	adds.w	lr, r5, #1
 8024864:	f53f af5a 	bmi.w	802471c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024868:	4572      	cmp	r2, lr
 802486a:	f6ff af57 	blt.w	802471c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802486e:	f110 0e01 	adds.w	lr, r0, #1
 8024872:	f53f af53 	bmi.w	802471c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024876:	4573      	cmp	r3, lr
 8024878:	f6ff af50 	blt.w	802471c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802487c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802487e:	b21b      	sxth	r3, r3
 8024880:	b212      	sxth	r2, r2
 8024882:	9502      	str	r5, [sp, #8]
 8024884:	9301      	str	r3, [sp, #4]
 8024886:	9200      	str	r2, [sp, #0]
 8024888:	e9cd 0103 	strd	r0, r1, [sp, #12]
 802488c:	e9cd c405 	strd	ip, r4, [sp, #20]
 8024890:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8024894:	4639      	mov	r1, r7
 8024896:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024898:	f7ff fc02 	bl	80240a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 802489c:	e73e      	b.n	802471c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802489e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80248a0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80248a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80248a6:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80248aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80248ac:	fa1f fc82 	uxth.w	ip, r2
 80248b0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80248b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80248b6:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80248ba:	141f      	asrs	r7, r3, #16
 80248bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80248be:	141b      	asrs	r3, r3, #16
 80248c0:	fb01 3707 	mla	r7, r1, r7, r3
 80248c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80248c6:	eb03 0a07 	add.w	sl, r3, r7
 80248ca:	f813 9007 	ldrb.w	r9, [r3, r7]
 80248ce:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80248d2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80248d6:	b29b      	uxth	r3, r3
 80248d8:	2d00      	cmp	r5, #0
 80248da:	f000 813d 	beq.w	8024b58 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 80248de:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80248e2:	eb0a 0b01 	add.w	fp, sl, r1
 80248e6:	fa1f fa85 	uxth.w	sl, r5
 80248ea:	940f      	str	r4, [sp, #60]	; 0x3c
 80248ec:	fb0a fc0c 	mul.w	ip, sl, ip
 80248f0:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80248f4:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80248f8:	eba0 000c 	sub.w	r0, r0, ip
 80248fc:	9410      	str	r4, [sp, #64]	; 0x40
 80248fe:	fa1f fa8a 	uxth.w	sl, sl
 8024902:	b280      	uxth	r0, r0
 8024904:	eba3 030a 	sub.w	r3, r3, sl
 8024908:	fb08 f000 	mul.w	r0, r8, r0
 802490c:	b29b      	uxth	r3, r3
 802490e:	fb09 0303 	mla	r3, r9, r3, r0
 8024912:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024914:	fb0a 3300 	mla	r3, sl, r0, r3
 8024918:	fb0c 3304 	mla	r3, ip, r4, r3
 802491c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024920:	2b00      	cmp	r3, #0
 8024922:	f000 810b 	beq.w	8024b3c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8024926:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8024928:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802492c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802492e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8024932:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8024936:	f000 8114 	beq.w	8024b62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 802493a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802493e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8024942:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8024946:	fb0a fc0c 	mul.w	ip, sl, ip
 802494a:	fb09 f707 	mul.w	r7, r9, r7
 802494e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8024952:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8024956:	f107 0b20 	add.w	fp, r7, #32
 802495a:	44cc      	add	ip, r9
 802495c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8024960:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8024964:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024968:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802496c:	ea4c 0909 	orr.w	r9, ip, r9
 8024970:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024974:	8847      	ldrh	r7, [r0, #2]
 8024976:	d019      	beq.n	80249ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8024978:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802497c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8024980:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8024984:	fb0a fc0c 	mul.w	ip, sl, ip
 8024988:	fb08 f807 	mul.w	r8, r8, r7
 802498c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8024990:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8024994:	f108 0b20 	add.w	fp, r8, #32
 8024998:	44bc      	add	ip, r7
 802499a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802499e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80249a2:	0a3f      	lsrs	r7, r7, #8
 80249a4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80249a8:	ea4c 0707 	orr.w	r7, ip, r7
 80249ac:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80249b0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80249b4:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80249b8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80249bc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80249c0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80249c4:	ea4c 0909 	orr.w	r9, ip, r9
 80249c8:	ea4a 0707 	orr.w	r7, sl, r7
 80249cc:	2d00      	cmp	r5, #0
 80249ce:	f000 80ca 	beq.w	8024b66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 80249d2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80249d6:	3901      	subs	r1, #1
 80249d8:	0049      	lsls	r1, r1, #1
 80249da:	3102      	adds	r1, #2
 80249dc:	eb00 0c01 	add.w	ip, r0, r1
 80249e0:	5a41      	ldrh	r1, [r0, r1]
 80249e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80249e4:	28ff      	cmp	r0, #255	; 0xff
 80249e6:	d019      	beq.n	8024a1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 80249e8:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80249ec:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80249ee:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80249f2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80249f6:	fb04 fa01 	mul.w	sl, r4, r1
 80249fa:	fb08 f800 	mul.w	r8, r8, r0
 80249fe:	f10a 0020 	add.w	r0, sl, #32
 8024a02:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8024a06:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024a0a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8024a0e:	4441      	add	r1, r8
 8024a10:	0a00      	lsrs	r0, r0, #8
 8024a12:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8024a16:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024a1a:	4301      	orrs	r1, r0
 8024a1c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024a1e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8024a22:	2cff      	cmp	r4, #255	; 0xff
 8024a24:	d01a      	beq.n	8024a5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8024a26:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8024a2a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024a2e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024a32:	fb04 fa00 	mul.w	sl, r4, r0
 8024a36:	fb08 f80c 	mul.w	r8, r8, ip
 8024a3a:	f10a 0c20 	add.w	ip, sl, #32
 8024a3e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8024a42:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024a46:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8024a4a:	4440      	add	r0, r8
 8024a4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024a50:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8024a54:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8024a58:	ea40 000c 	orr.w	r0, r0, ip
 8024a5c:	fb15 fc02 	smulbb	ip, r5, r2
 8024a60:	f1c5 0810 	rsb	r8, r5, #16
 8024a64:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8024a68:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024a6c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8024a70:	eba8 0802 	sub.w	r8, r8, r2
 8024a74:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8024a78:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024a7c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8024a80:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024a84:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8024a88:	ea4a 0101 	orr.w	r1, sl, r1
 8024a8c:	437a      	muls	r2, r7
 8024a8e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8024a92:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024a96:	fb09 2208 	mla	r2, r9, r8, r2
 8024a9a:	ea4b 0000 	orr.w	r0, fp, r0
 8024a9e:	fb05 2201 	mla	r2, r5, r1, r2
 8024aa2:	fb0c 2200 	mla	r2, ip, r0, r2
 8024aa6:	0d57      	lsrs	r7, r2, #21
 8024aa8:	0952      	lsrs	r2, r2, #5
 8024aaa:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8024aae:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024ab2:	433a      	orrs	r2, r7
 8024ab4:	2bff      	cmp	r3, #255	; 0xff
 8024ab6:	b292      	uxth	r2, r2
 8024ab8:	d102      	bne.n	8024ac0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8024aba:	9912      	ldr	r1, [sp, #72]	; 0x48
 8024abc:	29ff      	cmp	r1, #255	; 0xff
 8024abe:	d063      	beq.n	8024b88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 8024ac0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024ac2:	1215      	asrs	r5, r2, #8
 8024ac4:	f8be 1000 	ldrh.w	r1, [lr]
 8024ac8:	4343      	muls	r3, r0
 8024aca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024acc:	10cf      	asrs	r7, r1, #3
 8024ace:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8024ad2:	1c58      	adds	r0, r3, #1
 8024ad4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8024ad8:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8024adc:	1208      	asrs	r0, r1, #8
 8024ade:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8024ae2:	00c9      	lsls	r1, r1, #3
 8024ae4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024ae8:	b2db      	uxtb	r3, r3
 8024aea:	b2c9      	uxtb	r1, r1
 8024aec:	fb10 f003 	smulbb	r0, r0, r3
 8024af0:	fb11 f103 	smulbb	r1, r1, r3
 8024af4:	fb05 0504 	mla	r5, r5, r4, r0
 8024af8:	10d0      	asrs	r0, r2, #3
 8024afa:	fb17 f703 	smulbb	r7, r7, r3
 8024afe:	00d2      	lsls	r2, r2, #3
 8024b00:	b2ad      	uxth	r5, r5
 8024b02:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024b06:	b2d2      	uxtb	r2, r2
 8024b08:	fb00 7004 	mla	r0, r0, r4, r7
 8024b0c:	1c6b      	adds	r3, r5, #1
 8024b0e:	fb02 1204 	mla	r2, r2, r4, r1
 8024b12:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024b16:	b292      	uxth	r2, r2
 8024b18:	b280      	uxth	r0, r0
 8024b1a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8024b1e:	1c57      	adds	r7, r2, #1
 8024b20:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8024b24:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024b28:	433d      	orrs	r5, r7
 8024b2a:	1c47      	adds	r7, r0, #1
 8024b2c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8024b30:	097f      	lsrs	r7, r7, #5
 8024b32:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8024b36:	433d      	orrs	r5, r7
 8024b38:	f8ae 5000 	strh.w	r5, [lr]
 8024b3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024b3e:	f10e 0e02 	add.w	lr, lr, #2
 8024b42:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8024b44:	4413      	add	r3, r2
 8024b46:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8024b48:	9321      	str	r3, [sp, #132]	; 0x84
 8024b4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024b4c:	441a      	add	r2, r3
 8024b4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024b50:	3b01      	subs	r3, #1
 8024b52:	9222      	str	r2, [sp, #136]	; 0x88
 8024b54:	9313      	str	r3, [sp, #76]	; 0x4c
 8024b56:	e61c      	b.n	8024792 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8024b58:	fb08 f000 	mul.w	r0, r8, r0
 8024b5c:	fb09 0303 	mla	r3, r9, r3, r0
 8024b60:	e6dc      	b.n	802491c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8024b62:	46b9      	mov	r9, r7
 8024b64:	e704      	b.n	8024970 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8024b66:	f1c2 0110 	rsb	r1, r2, #16
 8024b6a:	437a      	muls	r2, r7
 8024b6c:	fb09 2901 	mla	r9, r9, r1, r2
 8024b70:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8024b74:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8024b78:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8024b7c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024b80:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024b84:	4302      	orrs	r2, r0
 8024b86:	e795      	b.n	8024ab4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8024b88:	f8ae 2000 	strh.w	r2, [lr]
 8024b8c:	e7d6      	b.n	8024b3c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8024b8e:	b017      	add	sp, #92	; 0x5c
 8024b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024b94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8024b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b98:	b085      	sub	sp, #20
 8024b9a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8024b9e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8024ba2:	2800      	cmp	r0, #0
 8024ba4:	9103      	str	r1, [sp, #12]
 8024ba6:	fb00 7406 	mla	r4, r0, r6, r7
 8024baa:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8024bae:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8024bb2:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8024bb6:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8024bba:	eb02 0904 	add.w	r9, r2, r4
 8024bbe:	9501      	str	r5, [sp, #4]
 8024bc0:	f2c0 8141 	blt.w	8024e46 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8024bc4:	4583      	cmp	fp, r0
 8024bc6:	f340 813e 	ble.w	8024e46 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8024bca:	2f00      	cmp	r7, #0
 8024bcc:	f2c0 8137 	blt.w	8024e3e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8024bd0:	42be      	cmp	r6, r7
 8024bd2:	f340 8134 	ble.w	8024e3e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8024bd6:	f812 c004 	ldrb.w	ip, [r2, r4]
 8024bda:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8024bde:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8024be2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024be6:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8024bea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024bee:	4355      	muls	r5, r2
 8024bf0:	fb0c f203 	mul.w	r2, ip, r3
 8024bf4:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8024bf8:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8024bfc:	441d      	add	r5, r3
 8024bfe:	f102 0320 	add.w	r3, r2, #32
 8024c02:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024c06:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8024c0a:	0a1b      	lsrs	r3, r3, #8
 8024c0c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024c10:	431c      	orrs	r4, r3
 8024c12:	1c7b      	adds	r3, r7, #1
 8024c14:	f100 811c 	bmi.w	8024e50 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8024c18:	429e      	cmp	r6, r3
 8024c1a:	f340 8119 	ble.w	8024e50 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8024c1e:	2900      	cmp	r1, #0
 8024c20:	f000 8119 	beq.w	8024e56 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8024c24:	9a01      	ldr	r2, [sp, #4]
 8024c26:	f899 3001 	ldrb.w	r3, [r9, #1]
 8024c2a:	8855      	ldrh	r5, [r2, #2]
 8024c2c:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8024c30:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8024c34:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024c38:	fb08 f802 	mul.w	r8, r8, r2
 8024c3c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8024c40:	435d      	muls	r5, r3
 8024c42:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8024c46:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024c4a:	44d0      	add	r8, sl
 8024c4c:	f105 0a20 	add.w	sl, r5, #32
 8024c50:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8024c54:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8024c58:	0a2d      	lsrs	r5, r5, #8
 8024c5a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024c5e:	432a      	orrs	r2, r5
 8024c60:	3001      	adds	r0, #1
 8024c62:	f100 80fe 	bmi.w	8024e62 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8024c66:	4583      	cmp	fp, r0
 8024c68:	f340 80fb 	ble.w	8024e62 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8024c6c:	f1be 0f00 	cmp.w	lr, #0
 8024c70:	f000 80fc 	beq.w	8024e6c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8024c74:	2f00      	cmp	r7, #0
 8024c76:	f2c0 80f1 	blt.w	8024e5c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8024c7a:	42be      	cmp	r6, r7
 8024c7c:	f340 80ee 	ble.w	8024e5c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8024c80:	9801      	ldr	r0, [sp, #4]
 8024c82:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8024c86:	f819 5006 	ldrb.w	r5, [r9, r6]
 8024c8a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8024c8e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8024c92:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8024c96:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8024c9a:	fb0a fa00 	mul.w	sl, sl, r0
 8024c9e:	fb05 f808 	mul.w	r8, r5, r8
 8024ca2:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8024ca6:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8024caa:	4482      	add	sl, r0
 8024cac:	f108 0020 	add.w	r0, r8, #32
 8024cb0:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8024cb4:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8024cb8:	0a00      	lsrs	r0, r0, #8
 8024cba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024cbe:	ea4b 0b00 	orr.w	fp, fp, r0
 8024cc2:	3701      	adds	r7, #1
 8024cc4:	f100 80d7 	bmi.w	8024e76 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8024cc8:	42be      	cmp	r6, r7
 8024cca:	f340 80d4 	ble.w	8024e76 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8024cce:	2900      	cmp	r1, #0
 8024cd0:	f000 80d4 	beq.w	8024e7c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8024cd4:	3601      	adds	r6, #1
 8024cd6:	9801      	ldr	r0, [sp, #4]
 8024cd8:	f819 7006 	ldrb.w	r7, [r9, r6]
 8024cdc:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8024ce0:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8024ce4:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8024ce8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024cec:	fb09 f906 	mul.w	r9, r9, r6
 8024cf0:	fb07 f800 	mul.w	r8, r7, r0
 8024cf4:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8024cf8:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8024cfc:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8024d00:	44d1      	add	r9, sl
 8024d02:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8024d06:	f108 0020 	add.w	r0, r8, #32
 8024d0a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8024d0e:	0a00      	lsrs	r0, r0, #8
 8024d10:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024d14:	4330      	orrs	r0, r6
 8024d16:	b28e      	uxth	r6, r1
 8024d18:	fa1f f98e 	uxth.w	r9, lr
 8024d1c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8024d20:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8024d24:	fb06 f809 	mul.w	r8, r6, r9
 8024d28:	0136      	lsls	r6, r6, #4
 8024d2a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024d2e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8024d32:	9601      	str	r6, [sp, #4]
 8024d34:	ea4a 0404 	orr.w	r4, sl, r4
 8024d38:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8024d3c:	fa1f f689 	uxth.w	r6, r9
 8024d40:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024d44:	fb11 f90e 	smulbb	r9, r1, lr
 8024d48:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024d4c:	9602      	str	r6, [sp, #8]
 8024d4e:	4626      	mov	r6, r4
 8024d50:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8024d54:	f1ce 0410 	rsb	r4, lr, #16
 8024d58:	ea4a 0202 	orr.w	r2, sl, r2
 8024d5c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8024d60:	1a64      	subs	r4, r4, r1
 8024d62:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8024d66:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024d6a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024d6e:	434a      	muls	r2, r1
 8024d70:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8024d74:	ea4a 0000 	orr.w	r0, sl, r0
 8024d78:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8024d7c:	fb04 2406 	mla	r4, r4, r6, r2
 8024d80:	9903      	ldr	r1, [sp, #12]
 8024d82:	fb09 4200 	mla	r2, r9, r0, r4
 8024d86:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8024d8a:	9801      	ldr	r0, [sp, #4]
 8024d8c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8024d90:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8024d94:	8809      	ldrh	r1, [r1, #0]
 8024d96:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8024d9a:	ea44 0b0b 	orr.w	fp, r4, fp
 8024d9e:	9c02      	ldr	r4, [sp, #8]
 8024da0:	1b00      	subs	r0, r0, r4
 8024da2:	9c01      	ldr	r4, [sp, #4]
 8024da4:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8024da8:	eba4 0608 	sub.w	r6, r4, r8
 8024dac:	b280      	uxth	r0, r0
 8024dae:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8024db2:	b2b6      	uxth	r6, r6
 8024db4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024db8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024dbc:	4373      	muls	r3, r6
 8024dbe:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024dc2:	fb0c 3300 	mla	r3, ip, r0, r3
 8024dc6:	9802      	ldr	r0, [sp, #8]
 8024dc8:	ea42 0e0e 	orr.w	lr, r2, lr
 8024dcc:	fb00 3505 	mla	r5, r0, r5, r3
 8024dd0:	120b      	asrs	r3, r1, #8
 8024dd2:	10c8      	asrs	r0, r1, #3
 8024dd4:	fb08 5707 	mla	r7, r8, r7, r5
 8024dd8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024ddc:	00c9      	lsls	r1, r1, #3
 8024dde:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024de2:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8024de6:	fa1f f28e 	uxth.w	r2, lr
 8024dea:	b2c9      	uxtb	r1, r1
 8024dec:	b2ff      	uxtb	r7, r7
 8024dee:	437b      	muls	r3, r7
 8024df0:	4378      	muls	r0, r7
 8024df2:	434f      	muls	r7, r1
 8024df4:	1c59      	adds	r1, r3, #1
 8024df6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024dfa:	1213      	asrs	r3, r2, #8
 8024dfc:	f023 0307 	bic.w	r3, r3, #7
 8024e00:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8024e04:	1c41      	adds	r1, r0, #1
 8024e06:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8024e0a:	10d1      	asrs	r1, r2, #3
 8024e0c:	021b      	lsls	r3, r3, #8
 8024e0e:	f021 0103 	bic.w	r1, r1, #3
 8024e12:	00d2      	lsls	r2, r2, #3
 8024e14:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8024e18:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8024e1c:	00c9      	lsls	r1, r1, #3
 8024e1e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024e22:	430b      	orrs	r3, r1
 8024e24:	1c79      	adds	r1, r7, #1
 8024e26:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8024e2a:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8024e2e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024e32:	431a      	orrs	r2, r3
 8024e34:	9b03      	ldr	r3, [sp, #12]
 8024e36:	801a      	strh	r2, [r3, #0]
 8024e38:	b005      	add	sp, #20
 8024e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024e3e:	f04f 0c00 	mov.w	ip, #0
 8024e42:	4664      	mov	r4, ip
 8024e44:	e6e5      	b.n	8024c12 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 8024e46:	2300      	movs	r3, #0
 8024e48:	469c      	mov	ip, r3
 8024e4a:	461a      	mov	r2, r3
 8024e4c:	461c      	mov	r4, r3
 8024e4e:	e707      	b.n	8024c60 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8024e50:	2300      	movs	r3, #0
 8024e52:	461a      	mov	r2, r3
 8024e54:	e704      	b.n	8024c60 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8024e56:	460b      	mov	r3, r1
 8024e58:	460a      	mov	r2, r1
 8024e5a:	e701      	b.n	8024c60 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8024e5c:	2500      	movs	r5, #0
 8024e5e:	46ab      	mov	fp, r5
 8024e60:	e72f      	b.n	8024cc2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8024e62:	2700      	movs	r7, #0
 8024e64:	463d      	mov	r5, r7
 8024e66:	4638      	mov	r0, r7
 8024e68:	46bb      	mov	fp, r7
 8024e6a:	e754      	b.n	8024d16 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8024e6c:	4677      	mov	r7, lr
 8024e6e:	4675      	mov	r5, lr
 8024e70:	4670      	mov	r0, lr
 8024e72:	46f3      	mov	fp, lr
 8024e74:	e74f      	b.n	8024d16 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8024e76:	2700      	movs	r7, #0
 8024e78:	4638      	mov	r0, r7
 8024e7a:	e74c      	b.n	8024d16 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8024e7c:	460f      	mov	r7, r1
 8024e7e:	4608      	mov	r0, r1
 8024e80:	e749      	b.n	8024d16 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08024e84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e88:	b093      	sub	sp, #76	; 0x4c
 8024e8a:	9210      	str	r2, [sp, #64]	; 0x40
 8024e8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024e8e:	9011      	str	r0, [sp, #68]	; 0x44
 8024e90:	910e      	str	r1, [sp, #56]	; 0x38
 8024e92:	6850      	ldr	r0, [r2, #4]
 8024e94:	9306      	str	r3, [sp, #24]
 8024e96:	6812      	ldr	r2, [r2, #0]
 8024e98:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8024e9c:	fb00 1303 	mla	r3, r0, r3, r1
 8024ea0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024ea4:	9307      	str	r3, [sp, #28]
 8024ea6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024ea8:	681b      	ldr	r3, [r3, #0]
 8024eaa:	9308      	str	r3, [sp, #32]
 8024eac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024eae:	685b      	ldr	r3, [r3, #4]
 8024eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8024eb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024eb4:	2b00      	cmp	r3, #0
 8024eb6:	dc03      	bgt.n	8024ec0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8024eb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024eba:	2b00      	cmp	r3, #0
 8024ebc:	f340 83b6 	ble.w	802562c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8024ec0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024ec2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024ec6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024eca:	1e48      	subs	r0, r1, #1
 8024ecc:	1e55      	subs	r5, r2, #1
 8024ece:	9b06      	ldr	r3, [sp, #24]
 8024ed0:	2b00      	cmp	r3, #0
 8024ed2:	f340 8165 	ble.w	80251a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8024ed6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8024ed8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024eda:	1436      	asrs	r6, r6, #16
 8024edc:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024ee0:	d406      	bmi.n	8024ef0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024ee2:	4286      	cmp	r6, r0
 8024ee4:	da04      	bge.n	8024ef0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024ee6:	2b00      	cmp	r3, #0
 8024ee8:	db02      	blt.n	8024ef0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024eea:	42ab      	cmp	r3, r5
 8024eec:	f2c0 8159 	blt.w	80251a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8024ef0:	3601      	adds	r6, #1
 8024ef2:	f100 8146 	bmi.w	8025182 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024ef6:	42b1      	cmp	r1, r6
 8024ef8:	f2c0 8143 	blt.w	8025182 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024efc:	3301      	adds	r3, #1
 8024efe:	f100 8140 	bmi.w	8025182 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024f02:	429a      	cmp	r2, r3
 8024f04:	f2c0 813d 	blt.w	8025182 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024f08:	9b06      	ldr	r3, [sp, #24]
 8024f0a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8024f0e:	9f07      	ldr	r7, [sp, #28]
 8024f10:	930f      	str	r3, [sp, #60]	; 0x3c
 8024f12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024f14:	2b00      	cmp	r3, #0
 8024f16:	f340 8166 	ble.w	80251e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8024f1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024f1c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8024f1e:	1418      	asrs	r0, r3, #16
 8024f20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8024f22:	142d      	asrs	r5, r5, #16
 8024f24:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8024f28:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024f2a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8024f2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024f30:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8024f34:	f100 81f0 	bmi.w	8025318 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8024f38:	f102 3eff 	add.w	lr, r2, #4294967295
 8024f3c:	4575      	cmp	r5, lr
 8024f3e:	f280 81eb 	bge.w	8025318 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8024f42:	2800      	cmp	r0, #0
 8024f44:	f2c0 81e8 	blt.w	8025318 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8024f48:	f103 3eff 	add.w	lr, r3, #4294967295
 8024f4c:	4570      	cmp	r0, lr
 8024f4e:	f280 81e3 	bge.w	8025318 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8024f52:	b212      	sxth	r2, r2
 8024f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f56:	fa1f fe81 	uxth.w	lr, r1
 8024f5a:	fb00 5002 	mla	r0, r0, r2, r5
 8024f5e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8024f62:	eb03 0a00 	add.w	sl, r3, r0
 8024f66:	f813 9000 	ldrb.w	r9, [r3, r0]
 8024f6a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8024f6e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8024f72:	b29b      	uxth	r3, r3
 8024f74:	f1bc 0f00 	cmp.w	ip, #0
 8024f78:	f000 817b 	beq.w	8025272 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8024f7c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8024f80:	eb0a 0b02 	add.w	fp, sl, r2
 8024f84:	fa1f fa8c 	uxth.w	sl, ip
 8024f88:	940a      	str	r4, [sp, #40]	; 0x28
 8024f8a:	fb0a fe0e 	mul.w	lr, sl, lr
 8024f8e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8024f92:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8024f96:	eba5 050e 	sub.w	r5, r5, lr
 8024f9a:	940b      	str	r4, [sp, #44]	; 0x2c
 8024f9c:	fa1f fa8a 	uxth.w	sl, sl
 8024fa0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024fa2:	b2ad      	uxth	r5, r5
 8024fa4:	eba3 030a 	sub.w	r3, r3, sl
 8024fa8:	fb08 f505 	mul.w	r5, r8, r5
 8024fac:	b29b      	uxth	r3, r3
 8024fae:	fb09 5303 	mla	r3, r9, r3, r5
 8024fb2:	fb0a 3304 	mla	r3, sl, r4, r3
 8024fb6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024fb8:	fb0e 3304 	mla	r3, lr, r4, r3
 8024fbc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024fc0:	2b00      	cmp	r3, #0
 8024fc2:	f000 80d1 	beq.w	8025168 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8024fc6:	9c08      	ldr	r4, [sp, #32]
 8024fc8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024fcc:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8024fd0:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8024fd4:	f000 8152 	beq.w	802527c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8024fd8:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8024fdc:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8024fe0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024fe4:	fb0a fe0e 	mul.w	lr, sl, lr
 8024fe8:	fb09 f000 	mul.w	r0, r9, r0
 8024fec:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8024ff0:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8024ff4:	f100 0b20 	add.w	fp, r0, #32
 8024ff8:	44ce      	add	lr, r9
 8024ffa:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8024ffe:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025002:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025006:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802500a:	ea4e 0909 	orr.w	r9, lr, r9
 802500e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025012:	8868      	ldrh	r0, [r5, #2]
 8025014:	d019      	beq.n	802504a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8025016:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802501a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802501e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025022:	fb0a fe0e 	mul.w	lr, sl, lr
 8025026:	fb08 f800 	mul.w	r8, r8, r0
 802502a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802502e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025032:	f108 0b20 	add.w	fp, r8, #32
 8025036:	4486      	add	lr, r0
 8025038:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 802503c:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025040:	0a00      	lsrs	r0, r0, #8
 8025042:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025046:	ea4e 0000 	orr.w	r0, lr, r0
 802504a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802504e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025052:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025056:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802505a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802505e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025062:	ea4e 0909 	orr.w	r9, lr, r9
 8025066:	ea4a 0000 	orr.w	r0, sl, r0
 802506a:	f1bc 0f00 	cmp.w	ip, #0
 802506e:	f000 8107 	beq.w	8025280 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8025072:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8025076:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025078:	3a01      	subs	r2, #1
 802507a:	2cff      	cmp	r4, #255	; 0xff
 802507c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025080:	f102 0202 	add.w	r2, r2, #2
 8025084:	eb05 0e02 	add.w	lr, r5, r2
 8025088:	5aaa      	ldrh	r2, [r5, r2]
 802508a:	d018      	beq.n	80250be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 802508c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8025090:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025094:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025098:	fb04 fa02 	mul.w	sl, r4, r2
 802509c:	fb08 f805 	mul.w	r8, r8, r5
 80250a0:	f10a 0520 	add.w	r5, sl, #32
 80250a4:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80250a8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80250ac:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80250b0:	4442      	add	r2, r8
 80250b2:	0a2d      	lsrs	r5, r5, #8
 80250b4:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80250b8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80250bc:	432a      	orrs	r2, r5
 80250be:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80250c0:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80250c4:	2cff      	cmp	r4, #255	; 0xff
 80250c6:	d01a      	beq.n	80250fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80250c8:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80250cc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80250d0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80250d4:	fb04 fa05 	mul.w	sl, r4, r5
 80250d8:	fb08 f80e 	mul.w	r8, r8, lr
 80250dc:	f10a 0e20 	add.w	lr, sl, #32
 80250e0:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80250e4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80250e8:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80250ec:	4445      	add	r5, r8
 80250ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80250f2:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80250f6:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80250fa:	ea45 050e 	orr.w	r5, r5, lr
 80250fe:	fb1c fe01 	smulbb	lr, ip, r1
 8025102:	f1cc 0810 	rsb	r8, ip, #16
 8025106:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802510a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802510e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025112:	eba8 0801 	sub.w	r8, r8, r1
 8025116:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802511a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802511e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8025122:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8025126:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802512a:	ea4a 0202 	orr.w	r2, sl, r2
 802512e:	4341      	muls	r1, r0
 8025130:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025134:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025138:	fb09 1108 	mla	r1, r9, r8, r1
 802513c:	ea4b 0505 	orr.w	r5, fp, r5
 8025140:	fb0c 1102 	mla	r1, ip, r2, r1
 8025144:	fb0e 1e05 	mla	lr, lr, r5, r1
 8025148:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802514c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025150:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025154:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025158:	ea42 0e0e 	orr.w	lr, r2, lr
 802515c:	fa1f f28e 	uxth.w	r2, lr
 8025160:	2bff      	cmp	r3, #255	; 0xff
 8025162:	f040 80a1 	bne.w	80252a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8025166:	803a      	strh	r2, [r7, #0]
 8025168:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802516a:	3702      	adds	r7, #2
 802516c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802516e:	4413      	add	r3, r2
 8025170:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8025172:	931d      	str	r3, [sp, #116]	; 0x74
 8025174:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025176:	441a      	add	r2, r3
 8025178:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802517a:	3b01      	subs	r3, #1
 802517c:	921e      	str	r2, [sp, #120]	; 0x78
 802517e:	930f      	str	r3, [sp, #60]	; 0x3c
 8025180:	e6c7      	b.n	8024f12 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025182:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025184:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8025186:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8025188:	4433      	add	r3, r6
 802518a:	931d      	str	r3, [sp, #116]	; 0x74
 802518c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802518e:	441c      	add	r4, r3
 8025190:	9b06      	ldr	r3, [sp, #24]
 8025192:	3b01      	subs	r3, #1
 8025194:	941e      	str	r4, [sp, #120]	; 0x78
 8025196:	9306      	str	r3, [sp, #24]
 8025198:	9b07      	ldr	r3, [sp, #28]
 802519a:	3302      	adds	r3, #2
 802519c:	9307      	str	r3, [sp, #28]
 802519e:	e696      	b.n	8024ece <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80251a0:	d028      	beq.n	80251f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80251a2:	9b06      	ldr	r3, [sp, #24]
 80251a4:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80251a6:	3b01      	subs	r3, #1
 80251a8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80251aa:	fb00 5003 	mla	r0, r0, r3, r5
 80251ae:	1400      	asrs	r0, r0, #16
 80251b0:	f53f aeaa 	bmi.w	8024f08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80251b4:	3901      	subs	r1, #1
 80251b6:	4288      	cmp	r0, r1
 80251b8:	f6bf aea6 	bge.w	8024f08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80251bc:	9920      	ldr	r1, [sp, #128]	; 0x80
 80251be:	981e      	ldr	r0, [sp, #120]	; 0x78
 80251c0:	fb01 0303 	mla	r3, r1, r3, r0
 80251c4:	141b      	asrs	r3, r3, #16
 80251c6:	f53f ae9f 	bmi.w	8024f08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80251ca:	3a01      	subs	r2, #1
 80251cc:	4293      	cmp	r3, r2
 80251ce:	f6bf ae9b 	bge.w	8024f08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80251d2:	9b06      	ldr	r3, [sp, #24]
 80251d4:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80251d8:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80251dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80251de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80251e0:	2b00      	cmp	r3, #0
 80251e2:	f300 80b6 	bgt.w	8025352 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 80251e6:	9b06      	ldr	r3, [sp, #24]
 80251e8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80251ec:	9b07      	ldr	r3, [sp, #28]
 80251ee:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80251f2:	9307      	str	r3, [sp, #28]
 80251f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80251f6:	2b00      	cmp	r3, #0
 80251f8:	f340 8218 	ble.w	802562c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 80251fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025200:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025202:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025206:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802520a:	eef0 6a62 	vmov.f32	s13, s5
 802520e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025212:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025216:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802521a:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 802521e:	eef0 6a43 	vmov.f32	s13, s6
 8025222:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025226:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 802522a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802522e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025232:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025236:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802523a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802523e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025242:	ee12 2a90 	vmov	r2, s5
 8025246:	eef0 2a47 	vmov.f32	s5, s14
 802524a:	fb92 f3f3 	sdiv	r3, r2, r3
 802524e:	ee13 2a10 	vmov	r2, s6
 8025252:	931f      	str	r3, [sp, #124]	; 0x7c
 8025254:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025256:	eeb0 3a67 	vmov.f32	s6, s15
 802525a:	fb92 f3f3 	sdiv	r3, r2, r3
 802525e:	9320      	str	r3, [sp, #128]	; 0x80
 8025260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025262:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025264:	3b01      	subs	r3, #1
 8025266:	930e      	str	r3, [sp, #56]	; 0x38
 8025268:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802526a:	bf08      	it	eq
 802526c:	4613      	moveq	r3, r2
 802526e:	9306      	str	r3, [sp, #24]
 8025270:	e61f      	b.n	8024eb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8025272:	fb08 f505 	mul.w	r5, r8, r5
 8025276:	fb09 5303 	mla	r3, r9, r3, r5
 802527a:	e69f      	b.n	8024fbc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 802527c:	4681      	mov	r9, r0
 802527e:	e6c6      	b.n	802500e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8025280:	f1c1 0210 	rsb	r2, r1, #16
 8025284:	4341      	muls	r1, r0
 8025286:	fb09 1902 	mla	r9, r9, r2, r1
 802528a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802528e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8025292:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8025296:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802529a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802529e:	ea42 0909 	orr.w	r9, r2, r9
 80252a2:	fa1f f289 	uxth.w	r2, r9
 80252a6:	e75b      	b.n	8025160 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 80252a8:	f8b7 c000 	ldrh.w	ip, [r7]
 80252ac:	43db      	mvns	r3, r3
 80252ae:	ea4f 202c 	mov.w	r0, ip, asr #8
 80252b2:	fa5f fe83 	uxtb.w	lr, r3
 80252b6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80252ba:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80252be:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80252c2:	fb00 f00e 	mul.w	r0, r0, lr
 80252c6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80252ca:	b2db      	uxtb	r3, r3
 80252cc:	1c41      	adds	r1, r0, #1
 80252ce:	fb05 f50e 	mul.w	r5, r5, lr
 80252d2:	fb03 f30e 	mul.w	r3, r3, lr
 80252d6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80252da:	1211      	asrs	r1, r2, #8
 80252dc:	f021 0107 	bic.w	r1, r1, #7
 80252e0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80252e4:	48d3      	ldr	r0, [pc, #844]	; (8025634 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 80252e6:	b2c9      	uxtb	r1, r1
 80252e8:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 80252ec:	1c69      	adds	r1, r5, #1
 80252ee:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80252f2:	10d1      	asrs	r1, r2, #3
 80252f4:	00d2      	lsls	r2, r2, #3
 80252f6:	f021 0103 	bic.w	r1, r1, #3
 80252fa:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80252fe:	00c9      	lsls	r1, r1, #3
 8025300:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025304:	4301      	orrs	r1, r0
 8025306:	1c58      	adds	r0, r3, #1
 8025308:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802530c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025310:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025314:	430a      	orrs	r2, r1
 8025316:	e726      	b.n	8025166 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8025318:	f115 0e01 	adds.w	lr, r5, #1
 802531c:	f53f af24 	bmi.w	8025168 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025320:	4572      	cmp	r2, lr
 8025322:	f6ff af21 	blt.w	8025168 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025326:	f110 0e01 	adds.w	lr, r0, #1
 802532a:	f53f af1d 	bmi.w	8025168 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802532e:	4573      	cmp	r3, lr
 8025330:	f6ff af1a 	blt.w	8025168 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025334:	b21b      	sxth	r3, r3
 8025336:	b212      	sxth	r2, r2
 8025338:	9301      	str	r3, [sp, #4]
 802533a:	9200      	str	r2, [sp, #0]
 802533c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8025340:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8025344:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8025348:	4639      	mov	r1, r7
 802534a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802534c:	f7ff fc22 	bl	8024b94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8025350:	e70a      	b.n	8025168 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025352:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025354:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025358:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802535a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802535e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025360:	fa1f fc82 	uxth.w	ip, r2
 8025364:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025368:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802536a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802536e:	141f      	asrs	r7, r3, #16
 8025370:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025372:	141b      	asrs	r3, r3, #16
 8025374:	fb01 3707 	mla	r7, r1, r7, r3
 8025378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802537a:	eb03 0a07 	add.w	sl, r3, r7
 802537e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8025382:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8025386:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802538a:	b29b      	uxth	r3, r3
 802538c:	2d00      	cmp	r5, #0
 802538e:	f000 80fe 	beq.w	802558e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 8025392:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8025396:	eb0a 0b01 	add.w	fp, sl, r1
 802539a:	fa1f fa85 	uxth.w	sl, r5
 802539e:	940c      	str	r4, [sp, #48]	; 0x30
 80253a0:	fb0a fc0c 	mul.w	ip, sl, ip
 80253a4:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80253a8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80253ac:	eba0 000c 	sub.w	r0, r0, ip
 80253b0:	940d      	str	r4, [sp, #52]	; 0x34
 80253b2:	fa1f fa8a 	uxth.w	sl, sl
 80253b6:	b280      	uxth	r0, r0
 80253b8:	eba3 030a 	sub.w	r3, r3, sl
 80253bc:	fb08 f000 	mul.w	r0, r8, r0
 80253c0:	b29b      	uxth	r3, r3
 80253c2:	fb09 0303 	mla	r3, r9, r3, r0
 80253c6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80253c8:	fb0a 3300 	mla	r3, sl, r0, r3
 80253cc:	fb0c 3304 	mla	r3, ip, r4, r3
 80253d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80253d4:	2b00      	cmp	r3, #0
 80253d6:	f000 80cc 	beq.w	8025572 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 80253da:	9808      	ldr	r0, [sp, #32]
 80253dc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80253e0:	9c08      	ldr	r4, [sp, #32]
 80253e2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80253e6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80253ea:	f000 80d5 	beq.w	8025598 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 80253ee:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80253f2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80253f6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80253fa:	fb0a fc0c 	mul.w	ip, sl, ip
 80253fe:	fb09 f707 	mul.w	r7, r9, r7
 8025402:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8025406:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802540a:	f107 0b20 	add.w	fp, r7, #32
 802540e:	44cc      	add	ip, r9
 8025410:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8025414:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025418:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802541c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025420:	ea4c 0909 	orr.w	r9, ip, r9
 8025424:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025428:	8847      	ldrh	r7, [r0, #2]
 802542a:	d019      	beq.n	8025460 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 802542c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8025430:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025434:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025438:	fb0a fc0c 	mul.w	ip, sl, ip
 802543c:	fb08 f807 	mul.w	r8, r8, r7
 8025440:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8025444:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025448:	f108 0b20 	add.w	fp, r8, #32
 802544c:	44bc      	add	ip, r7
 802544e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8025452:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025456:	0a3f      	lsrs	r7, r7, #8
 8025458:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802545c:	ea4c 0707 	orr.w	r7, ip, r7
 8025460:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8025464:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025468:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802546c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8025470:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8025474:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025478:	ea4c 0909 	orr.w	r9, ip, r9
 802547c:	ea4a 0707 	orr.w	r7, sl, r7
 8025480:	2d00      	cmp	r5, #0
 8025482:	f000 808b 	beq.w	802559c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8025486:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802548a:	3901      	subs	r1, #1
 802548c:	0049      	lsls	r1, r1, #1
 802548e:	3102      	adds	r1, #2
 8025490:	eb00 0c01 	add.w	ip, r0, r1
 8025494:	5a41      	ldrh	r1, [r0, r1]
 8025496:	980c      	ldr	r0, [sp, #48]	; 0x30
 8025498:	28ff      	cmp	r0, #255	; 0xff
 802549a:	d019      	beq.n	80254d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 802549c:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80254a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80254a2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80254a6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80254aa:	fb04 fa01 	mul.w	sl, r4, r1
 80254ae:	fb08 f800 	mul.w	r8, r8, r0
 80254b2:	f10a 0020 	add.w	r0, sl, #32
 80254b6:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80254ba:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80254be:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80254c2:	4441      	add	r1, r8
 80254c4:	0a00      	lsrs	r0, r0, #8
 80254c6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80254ca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80254ce:	4301      	orrs	r1, r0
 80254d0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80254d2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80254d6:	2cff      	cmp	r4, #255	; 0xff
 80254d8:	d01a      	beq.n	8025510 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 80254da:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80254de:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80254e2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80254e6:	fb04 fa00 	mul.w	sl, r4, r0
 80254ea:	fb08 f80c 	mul.w	r8, r8, ip
 80254ee:	f10a 0c20 	add.w	ip, sl, #32
 80254f2:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80254f6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80254fa:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80254fe:	4440      	add	r0, r8
 8025500:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025504:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8025508:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802550c:	ea40 000c 	orr.w	r0, r0, ip
 8025510:	fb15 fc02 	smulbb	ip, r5, r2
 8025514:	f1c5 0810 	rsb	r8, r5, #16
 8025518:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802551c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025520:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8025524:	eba8 0802 	sub.w	r8, r8, r2
 8025528:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802552c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025530:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8025534:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025538:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 802553c:	ea4a 0101 	orr.w	r1, sl, r1
 8025540:	437a      	muls	r2, r7
 8025542:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8025546:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802554a:	fb09 2208 	mla	r2, r9, r8, r2
 802554e:	ea4b 0000 	orr.w	r0, fp, r0
 8025552:	fb05 2201 	mla	r2, r5, r1, r2
 8025556:	fb0c 2200 	mla	r2, ip, r0, r2
 802555a:	0d57      	lsrs	r7, r2, #21
 802555c:	0952      	lsrs	r2, r2, #5
 802555e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025562:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025566:	433a      	orrs	r2, r7
 8025568:	2bff      	cmp	r3, #255	; 0xff
 802556a:	b292      	uxth	r2, r2
 802556c:	d127      	bne.n	80255be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 802556e:	f8ae 2000 	strh.w	r2, [lr]
 8025572:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025574:	f10e 0e02 	add.w	lr, lr, #2
 8025578:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802557a:	4413      	add	r3, r2
 802557c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 802557e:	931d      	str	r3, [sp, #116]	; 0x74
 8025580:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025582:	441a      	add	r2, r3
 8025584:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025586:	3b01      	subs	r3, #1
 8025588:	921e      	str	r2, [sp, #120]	; 0x78
 802558a:	930f      	str	r3, [sp, #60]	; 0x3c
 802558c:	e627      	b.n	80251de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802558e:	fb08 f000 	mul.w	r0, r8, r0
 8025592:	fb09 0303 	mla	r3, r9, r3, r0
 8025596:	e71b      	b.n	80253d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 8025598:	46b9      	mov	r9, r7
 802559a:	e743      	b.n	8025424 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 802559c:	f1c2 0110 	rsb	r1, r2, #16
 80255a0:	437a      	muls	r2, r7
 80255a2:	fb09 2901 	mla	r9, r9, r1, r2
 80255a6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80255aa:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80255ae:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80255b2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80255b6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80255ba:	4302      	orrs	r2, r0
 80255bc:	e7d4      	b.n	8025568 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 80255be:	f8be 7000 	ldrh.w	r7, [lr]
 80255c2:	43db      	mvns	r3, r3
 80255c4:	4c1b      	ldr	r4, [pc, #108]	; (8025634 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 80255c6:	1238      	asrs	r0, r7, #8
 80255c8:	fa5f fc83 	uxtb.w	ip, r3
 80255cc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80255d0:	10fd      	asrs	r5, r7, #3
 80255d2:	00fb      	lsls	r3, r7, #3
 80255d4:	fb00 f00c 	mul.w	r0, r0, ip
 80255d8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80255dc:	b2db      	uxtb	r3, r3
 80255de:	fb05 f10c 	mul.w	r1, r5, ip
 80255e2:	1c45      	adds	r5, r0, #1
 80255e4:	fb03 f30c 	mul.w	r3, r3, ip
 80255e8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80255ec:	1215      	asrs	r5, r2, #8
 80255ee:	f025 0507 	bic.w	r5, r5, #7
 80255f2:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80255f6:	1c4d      	adds	r5, r1, #1
 80255f8:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80255fc:	10d1      	asrs	r1, r2, #3
 80255fe:	b2c0      	uxtb	r0, r0
 8025600:	f021 0103 	bic.w	r1, r1, #3
 8025604:	00d2      	lsls	r2, r2, #3
 8025606:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 802560a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802560e:	00c9      	lsls	r1, r1, #3
 8025610:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025614:	4308      	orrs	r0, r1
 8025616:	1c59      	adds	r1, r3, #1
 8025618:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802561c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025620:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8025624:	4318      	orrs	r0, r3
 8025626:	f8ae 0000 	strh.w	r0, [lr]
 802562a:	e7a2      	b.n	8025572 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 802562c:	b013      	add	sp, #76	; 0x4c
 802562e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025632:	bf00      	nop
 8025634:	fffff800 	.word	0xfffff800

08025638 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8025638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802563c:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8025640:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8025644:	fb05 4c03 	mla	ip, r5, r3, r4
 8025648:	2d00      	cmp	r5, #0
 802564a:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 802564e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8025652:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8025656:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 802565a:	8808      	ldrh	r0, [r1, #0]
 802565c:	f2c0 80a7 	blt.w	80257ae <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8025660:	45aa      	cmp	sl, r5
 8025662:	f340 80a4 	ble.w	80257ae <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8025666:	2c00      	cmp	r4, #0
 8025668:	f2c0 809f 	blt.w	80257aa <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 802566c:	42a3      	cmp	r3, r4
 802566e:	f340 809c 	ble.w	80257aa <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8025672:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8025676:	1c62      	adds	r2, r4, #1
 8025678:	f100 809c 	bmi.w	80257b4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802567c:	4293      	cmp	r3, r2
 802567e:	f340 8099 	ble.w	80257b4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8025682:	f1b9 0f00 	cmp.w	r9, #0
 8025686:	f000 8095 	beq.w	80257b4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802568a:	f8be c002 	ldrh.w	ip, [lr, #2]
 802568e:	3501      	adds	r5, #1
 8025690:	f100 8094 	bmi.w	80257bc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8025694:	45aa      	cmp	sl, r5
 8025696:	f340 8091 	ble.w	80257bc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802569a:	2f00      	cmp	r7, #0
 802569c:	f000 808e 	beq.w	80257bc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80256a0:	2c00      	cmp	r4, #0
 80256a2:	f2c0 8089 	blt.w	80257b8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 80256a6:	42a3      	cmp	r3, r4
 80256a8:	f340 8086 	ble.w	80257b8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 80256ac:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 80256b0:	3401      	adds	r4, #1
 80256b2:	f100 8086 	bmi.w	80257c2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80256b6:	42a3      	cmp	r3, r4
 80256b8:	f340 8083 	ble.w	80257c2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80256bc:	f1b9 0f00 	cmp.w	r9, #0
 80256c0:	d07f      	beq.n	80257c2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80256c2:	3301      	adds	r3, #1
 80256c4:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 80256c8:	ea4f 4408 	mov.w	r4, r8, lsl #16
 80256cc:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 80256d0:	fb19 fe07 	smulbb	lr, r9, r7
 80256d4:	f1c7 0210 	rsb	r2, r7, #16
 80256d8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80256dc:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 80256e0:	eba2 0209 	sub.w	r2, r2, r9
 80256e4:	ea44 0808 	orr.w	r8, r4, r8
 80256e8:	ea4f 440c 	mov.w	r4, ip, lsl #16
 80256ec:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80256f0:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 80256f4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80256f8:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 80256fc:	ea44 0c0c 	orr.w	ip, r4, ip
 8025700:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8025704:	fb04 f40c 	mul.w	r4, r4, ip
 8025708:	fb02 4808 	mla	r8, r2, r8, r4
 802570c:	041a      	lsls	r2, r3, #16
 802570e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025712:	b2b4      	uxth	r4, r6
 8025714:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8025718:	43f6      	mvns	r6, r6
 802571a:	4313      	orrs	r3, r2
 802571c:	042a      	lsls	r2, r5, #16
 802571e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8025722:	b2f6      	uxtb	r6, r6
 8025724:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8025728:	fb0e 8303 	mla	r3, lr, r3, r8
 802572c:	432a      	orrs	r2, r5
 802572e:	fb07 3202 	mla	r2, r7, r2, r3
 8025732:	10c7      	asrs	r7, r0, #3
 8025734:	0d53      	lsrs	r3, r2, #21
 8025736:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802573a:	0952      	lsrs	r2, r2, #5
 802573c:	fb17 f706 	smulbb	r7, r7, r6
 8025740:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025744:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025748:	431a      	orrs	r2, r3
 802574a:	b293      	uxth	r3, r2
 802574c:	1202      	asrs	r2, r0, #8
 802574e:	121d      	asrs	r5, r3, #8
 8025750:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8025754:	00c0      	lsls	r0, r0, #3
 8025756:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802575a:	fb12 f206 	smulbb	r2, r2, r6
 802575e:	b2c0      	uxtb	r0, r0
 8025760:	fb05 2504 	mla	r5, r5, r4, r2
 8025764:	10da      	asrs	r2, r3, #3
 8025766:	fb10 f006 	smulbb	r0, r0, r6
 802576a:	00db      	lsls	r3, r3, #3
 802576c:	b2ad      	uxth	r5, r5
 802576e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025772:	b2db      	uxtb	r3, r3
 8025774:	fb02 7204 	mla	r2, r2, r4, r7
 8025778:	fb03 0004 	mla	r0, r3, r4, r0
 802577c:	1c6b      	adds	r3, r5, #1
 802577e:	b292      	uxth	r2, r2
 8025780:	b280      	uxth	r0, r0
 8025782:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025786:	1c43      	adds	r3, r0, #1
 8025788:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802578c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025790:	1c50      	adds	r0, r2, #1
 8025792:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8025796:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802579a:	0952      	lsrs	r2, r2, #5
 802579c:	432b      	orrs	r3, r5
 802579e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80257a2:	4313      	orrs	r3, r2
 80257a4:	800b      	strh	r3, [r1, #0]
 80257a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80257aa:	4680      	mov	r8, r0
 80257ac:	e763      	b.n	8025676 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 80257ae:	4684      	mov	ip, r0
 80257b0:	4680      	mov	r8, r0
 80257b2:	e76c      	b.n	802568e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 80257b4:	4684      	mov	ip, r0
 80257b6:	e76a      	b.n	802568e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 80257b8:	4605      	mov	r5, r0
 80257ba:	e779      	b.n	80256b0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 80257bc:	4603      	mov	r3, r0
 80257be:	4605      	mov	r5, r0
 80257c0:	e782      	b.n	80256c8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 80257c2:	4603      	mov	r3, r0
 80257c4:	e780      	b.n	80256c8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

080257c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80257c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80257ca:	b093      	sub	sp, #76	; 0x4c
 80257cc:	461d      	mov	r5, r3
 80257ce:	9210      	str	r2, [sp, #64]	; 0x40
 80257d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80257d2:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 80257d6:	910a      	str	r1, [sp, #40]	; 0x28
 80257d8:	920b      	str	r2, [sp, #44]	; 0x2c
 80257da:	6859      	ldr	r1, [r3, #4]
 80257dc:	681b      	ldr	r3, [r3, #0]
 80257de:	9011      	str	r0, [sp, #68]	; 0x44
 80257e0:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 80257e4:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 80257e8:	fb01 2707 	mla	r7, r1, r7, r2
 80257ec:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80257f0:	9307      	str	r3, [sp, #28]
 80257f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80257f4:	681b      	ldr	r3, [r3, #0]
 80257f6:	9309      	str	r3, [sp, #36]	; 0x24
 80257f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80257fa:	43db      	mvns	r3, r3
 80257fc:	b2db      	uxtb	r3, r3
 80257fe:	9308      	str	r3, [sp, #32]
 8025800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025802:	2b00      	cmp	r3, #0
 8025804:	dc03      	bgt.n	802580e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025806:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025808:	2b00      	cmp	r3, #0
 802580a:	f340 8205 	ble.w	8025c18 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802580e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025810:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025814:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025818:	1e48      	subs	r0, r1, #1
 802581a:	f102 3cff 	add.w	ip, r2, #4294967295
 802581e:	2d00      	cmp	r5, #0
 8025820:	f340 80da 	ble.w	80259d8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8025824:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8025828:	ea4f 4326 	mov.w	r3, r6, asr #16
 802582c:	d406      	bmi.n	802583c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802582e:	4586      	cmp	lr, r0
 8025830:	da04      	bge.n	802583c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025832:	2b00      	cmp	r3, #0
 8025834:	db02      	blt.n	802583c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025836:	4563      	cmp	r3, ip
 8025838:	f2c0 80cf 	blt.w	80259da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802583c:	f11e 0e01 	adds.w	lr, lr, #1
 8025840:	f100 80c1 	bmi.w	80259c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8025844:	4571      	cmp	r1, lr
 8025846:	f2c0 80be 	blt.w	80259c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802584a:	3301      	adds	r3, #1
 802584c:	f100 80bb 	bmi.w	80259c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8025850:	429a      	cmp	r2, r3
 8025852:	f2c0 80b8 	blt.w	80259c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8025856:	46a9      	mov	r9, r5
 8025858:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802585c:	f1b9 0f00 	cmp.w	r9, #0
 8025860:	f340 80d8 	ble.w	8025a14 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8025864:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025866:	1421      	asrs	r1, r4, #16
 8025868:	ea4f 4026 	mov.w	r0, r6, asr #16
 802586c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025870:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8025874:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8025878:	f100 8112 	bmi.w	8025aa0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802587c:	f10e 3aff 	add.w	sl, lr, #4294967295
 8025880:	4551      	cmp	r1, sl
 8025882:	f280 810d 	bge.w	8025aa0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8025886:	2800      	cmp	r0, #0
 8025888:	f2c0 810a 	blt.w	8025aa0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802588c:	f103 3aff 	add.w	sl, r3, #4294967295
 8025890:	4550      	cmp	r0, sl
 8025892:	f280 8105 	bge.w	8025aa0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8025896:	fa0f f38e 	sxth.w	r3, lr
 802589a:	fb00 1103 	mla	r1, r0, r3, r1
 802589e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80258a0:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 80258a4:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 80258a8:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 80258ac:	f1bc 0f00 	cmp.w	ip, #0
 80258b0:	d007      	beq.n	80258c2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 80258b2:	005b      	lsls	r3, r3, #1
 80258b4:	eb0a 0003 	add.w	r0, sl, r3
 80258b8:	f83a 3003 	ldrh.w	r3, [sl, r3]
 80258bc:	930c      	str	r3, [sp, #48]	; 0x30
 80258be:	8843      	ldrh	r3, [r0, #2]
 80258c0:	930d      	str	r3, [sp, #52]	; 0x34
 80258c2:	ea4f 400e 	mov.w	r0, lr, lsl #16
 80258c6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80258ca:	fb12 f30c 	smulbb	r3, r2, ip
 80258ce:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80258d2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80258d6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80258da:	10db      	asrs	r3, r3, #3
 80258dc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80258e0:	ea40 000e 	orr.w	r0, r0, lr
 80258e4:	f1cc 0e10 	rsb	lr, ip, #16
 80258e8:	ea4a 0101 	orr.w	r1, sl, r1
 80258ec:	9f08      	ldr	r7, [sp, #32]
 80258ee:	ebae 0e02 	sub.w	lr, lr, r2
 80258f2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80258f6:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80258fa:	4351      	muls	r1, r2
 80258fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80258fe:	fb0e 1e00 	mla	lr, lr, r0, r1
 8025902:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025904:	0410      	lsls	r0, r2, #16
 8025906:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802590a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802590e:	4310      	orrs	r0, r2
 8025910:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025912:	0412      	lsls	r2, r2, #16
 8025914:	fb03 e000 	mla	r0, r3, r0, lr
 8025918:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802591c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8025920:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8025924:	ea42 020e 	orr.w	r2, r2, lr
 8025928:	fb03 0302 	mla	r3, r3, r2, r0
 802592c:	f8b8 0000 	ldrh.w	r0, [r8]
 8025930:	0d5a      	lsrs	r2, r3, #21
 8025932:	095b      	lsrs	r3, r3, #5
 8025934:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025938:	1201      	asrs	r1, r0, #8
 802593a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802593e:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8025942:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025946:	00c0      	lsls	r0, r0, #3
 8025948:	4313      	orrs	r3, r2
 802594a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 802594e:	fb11 f107 	smulbb	r1, r1, r7
 8025952:	b2c0      	uxtb	r0, r0
 8025954:	b29b      	uxth	r3, r3
 8025956:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802595a:	fb10 f007 	smulbb	r0, r0, r7
 802595e:	fb1e fe07 	smulbb	lr, lr, r7
 8025962:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8025966:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802596a:	fb0c 1c02 	mla	ip, ip, r2, r1
 802596e:	10d9      	asrs	r1, r3, #3
 8025970:	00db      	lsls	r3, r3, #3
 8025972:	fa1f fc8c 	uxth.w	ip, ip
 8025976:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802597a:	b2db      	uxtb	r3, r3
 802597c:	fb01 e102 	mla	r1, r1, r2, lr
 8025980:	fb03 0302 	mla	r3, r3, r2, r0
 8025984:	b289      	uxth	r1, r1
 8025986:	b29a      	uxth	r2, r3
 8025988:	f10c 0301 	add.w	r3, ip, #1
 802598c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8025990:	1c53      	adds	r3, r2, #1
 8025992:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025996:	1c4a      	adds	r2, r1, #1
 8025998:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802599c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80259a0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80259a4:	0949      	lsrs	r1, r1, #5
 80259a6:	ea43 030c 	orr.w	r3, r3, ip
 80259aa:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80259ae:	430b      	orrs	r3, r1
 80259b0:	f8a8 3000 	strh.w	r3, [r8]
 80259b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80259b6:	f108 0802 	add.w	r8, r8, #2
 80259ba:	f109 39ff 	add.w	r9, r9, #4294967295
 80259be:	441c      	add	r4, r3
 80259c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80259c2:	441e      	add	r6, r3
 80259c4:	e74a      	b.n	802585c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80259c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80259c8:	3d01      	subs	r5, #1
 80259ca:	441c      	add	r4, r3
 80259cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80259ce:	441e      	add	r6, r3
 80259d0:	9b07      	ldr	r3, [sp, #28]
 80259d2:	3302      	adds	r3, #2
 80259d4:	9307      	str	r3, [sp, #28]
 80259d6:	e722      	b.n	802581e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80259d8:	d022      	beq.n	8025a20 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80259da:	1e6b      	subs	r3, r5, #1
 80259dc:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80259de:	fb00 4003 	mla	r0, r0, r3, r4
 80259e2:	1400      	asrs	r0, r0, #16
 80259e4:	f53f af37 	bmi.w	8025856 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80259e8:	3901      	subs	r1, #1
 80259ea:	4288      	cmp	r0, r1
 80259ec:	f6bf af33 	bge.w	8025856 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80259f0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80259f2:	fb01 6303 	mla	r3, r1, r3, r6
 80259f6:	141b      	asrs	r3, r3, #16
 80259f8:	f53f af2d 	bmi.w	8025856 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80259fc:	3a01      	subs	r2, #1
 80259fe:	4293      	cmp	r3, r2
 8025a00:	f6bf af29 	bge.w	8025856 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025a04:	46a8      	mov	r8, r5
 8025a06:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8025a0a:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8025a0e:	f1b8 0f00 	cmp.w	r8, #0
 8025a12:	dc60      	bgt.n	8025ad6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8025a14:	9b07      	ldr	r3, [sp, #28]
 8025a16:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8025a1a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8025a1e:	9307      	str	r3, [sp, #28]
 8025a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025a22:	2b00      	cmp	r3, #0
 8025a24:	f340 80f8 	ble.w	8025c18 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025a28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025a2c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025a2e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025a32:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025a36:	eef0 6a62 	vmov.f32	s13, s5
 8025a3a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025a3e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025a42:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025a46:	ee16 4a90 	vmov	r4, s13
 8025a4a:	eef0 6a43 	vmov.f32	s13, s6
 8025a4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025a52:	ee16 6a90 	vmov	r6, s13
 8025a56:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025a5a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025a5e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025a62:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025a66:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025a6a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025a6e:	ee12 2a90 	vmov	r2, s5
 8025a72:	eef0 2a47 	vmov.f32	s5, s14
 8025a76:	fb92 f3f3 	sdiv	r3, r2, r3
 8025a7a:	ee13 2a10 	vmov	r2, s6
 8025a7e:	931f      	str	r3, [sp, #124]	; 0x7c
 8025a80:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025a82:	eeb0 3a67 	vmov.f32	s6, s15
 8025a86:	fb92 f3f3 	sdiv	r3, r2, r3
 8025a8a:	9320      	str	r3, [sp, #128]	; 0x80
 8025a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025a8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025a90:	3b01      	subs	r3, #1
 8025a92:	930a      	str	r3, [sp, #40]	; 0x28
 8025a94:	bf08      	it	eq
 8025a96:	4615      	moveq	r5, r2
 8025a98:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025a9a:	bf18      	it	ne
 8025a9c:	461d      	movne	r5, r3
 8025a9e:	e6af      	b.n	8025800 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025aa0:	f111 0a01 	adds.w	sl, r1, #1
 8025aa4:	d486      	bmi.n	80259b4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8025aa6:	45d6      	cmp	lr, sl
 8025aa8:	db84      	blt.n	80259b4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8025aaa:	f110 0a01 	adds.w	sl, r0, #1
 8025aae:	d481      	bmi.n	80259b4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8025ab0:	4553      	cmp	r3, sl
 8025ab2:	f6ff af7f 	blt.w	80259b4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8025ab6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8025ab8:	b21b      	sxth	r3, r3
 8025aba:	9101      	str	r1, [sp, #4]
 8025abc:	4641      	mov	r1, r8
 8025abe:	9300      	str	r3, [sp, #0]
 8025ac0:	fa0f f38e 	sxth.w	r3, lr
 8025ac4:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8025ac8:	e9cd c704 	strd	ip, r7, [sp, #16]
 8025acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025ace:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025ad0:	f7ff fdb2 	bl	8025638 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8025ad4:	e76e      	b.n	80259b4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8025ad6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025ad8:	1430      	asrs	r0, r6, #16
 8025ada:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025adc:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8025ae0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025ae4:	1423      	asrs	r3, r4, #16
 8025ae6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025aea:	fb01 3000 	mla	r0, r1, r0, r3
 8025aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025af0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8025af4:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8025af8:	8858      	ldrh	r0, [r3, #2]
 8025afa:	f1be 0f00 	cmp.w	lr, #0
 8025afe:	d00b      	beq.n	8025b18 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8025b00:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8025b04:	3901      	subs	r1, #1
 8025b06:	0049      	lsls	r1, r1, #1
 8025b08:	3102      	adds	r1, #2
 8025b0a:	eb03 0b01 	add.w	fp, r3, r1
 8025b0e:	5a5b      	ldrh	r3, [r3, r1]
 8025b10:	930e      	str	r3, [sp, #56]	; 0x38
 8025b12:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8025b16:	930f      	str	r3, [sp, #60]	; 0x3c
 8025b18:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8025b1c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025b20:	fb12 f30e 	smulbb	r3, r2, lr
 8025b24:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8025b28:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8025b2c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025b30:	10db      	asrs	r3, r3, #3
 8025b32:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025b36:	ea41 010c 	orr.w	r1, r1, ip
 8025b3a:	f1ce 0c10 	rsb	ip, lr, #16
 8025b3e:	ea4b 0000 	orr.w	r0, fp, r0
 8025b42:	9f08      	ldr	r7, [sp, #32]
 8025b44:	ebac 0c02 	sub.w	ip, ip, r2
 8025b48:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8025b4c:	f108 38ff 	add.w	r8, r8, #4294967295
 8025b50:	4350      	muls	r0, r2
 8025b52:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8025b56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025b58:	fb0c 0c01 	mla	ip, ip, r1, r0
 8025b5c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8025b5e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8025b62:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8025b66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025b68:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025b6c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025b70:	0412      	lsls	r2, r2, #16
 8025b72:	ea4b 0101 	orr.w	r1, fp, r1
 8025b76:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8025b7a:	fb03 c101 	mla	r1, r3, r1, ip
 8025b7e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8025b82:	4302      	orrs	r2, r0
 8025b84:	fb03 1202 	mla	r2, r3, r2, r1
 8025b88:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8025b8c:	0952      	lsrs	r2, r2, #5
 8025b8e:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8025b92:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8025b96:	f8b9 2000 	ldrh.w	r2, [r9]
 8025b9a:	ea4b 0303 	orr.w	r3, fp, r3
 8025b9e:	1211      	asrs	r1, r2, #8
 8025ba0:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8025ba4:	b29b      	uxth	r3, r3
 8025ba6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025baa:	00d2      	lsls	r2, r2, #3
 8025bac:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8025bb0:	fb11 f107 	smulbb	r1, r1, r7
 8025bb4:	1218      	asrs	r0, r3, #8
 8025bb6:	fb1c fc07 	smulbb	ip, ip, r7
 8025bba:	b2d2      	uxtb	r2, r2
 8025bbc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025bc0:	fb12 f207 	smulbb	r2, r2, r7
 8025bc4:	fb00 100a 	mla	r0, r0, sl, r1
 8025bc8:	10d9      	asrs	r1, r3, #3
 8025bca:	00db      	lsls	r3, r3, #3
 8025bcc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025bd0:	b280      	uxth	r0, r0
 8025bd2:	b2db      	uxtb	r3, r3
 8025bd4:	fb01 c10a 	mla	r1, r1, sl, ip
 8025bd8:	fb03 230a 	mla	r3, r3, sl, r2
 8025bdc:	1c42      	adds	r2, r0, #1
 8025bde:	b289      	uxth	r1, r1
 8025be0:	b29b      	uxth	r3, r3
 8025be2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025be6:	f101 0c01 	add.w	ip, r1, #1
 8025bea:	1c5a      	adds	r2, r3, #1
 8025bec:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8025bf0:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8025bf4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025bf8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025bfa:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8025bfe:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025c02:	441c      	add	r4, r3
 8025c04:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025c08:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025c0a:	4310      	orrs	r0, r2
 8025c0c:	441e      	add	r6, r3
 8025c0e:	ea40 000c 	orr.w	r0, r0, ip
 8025c12:	f829 0b02 	strh.w	r0, [r9], #2
 8025c16:	e6fa      	b.n	8025a0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8025c18:	b013      	add	sp, #76	; 0x4c
 8025c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025c1e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8025c1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025c22:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8025c26:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8025c2a:	fb0e 4703 	mla	r7, lr, r3, r4
 8025c2e:	f1be 0f00 	cmp.w	lr, #0
 8025c32:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8025c36:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8025c3a:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8025c3e:	8808      	ldrh	r0, [r1, #0]
 8025c40:	db60      	blt.n	8025d04 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8025c42:	45f1      	cmp	r9, lr
 8025c44:	dd5e      	ble.n	8025d04 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8025c46:	2c00      	cmp	r4, #0
 8025c48:	db5a      	blt.n	8025d00 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8025c4a:	42a3      	cmp	r3, r4
 8025c4c:	dd58      	ble.n	8025d00 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8025c4e:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8025c52:	1c62      	adds	r2, r4, #1
 8025c54:	d459      	bmi.n	8025d0a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8025c56:	4293      	cmp	r3, r2
 8025c58:	dd57      	ble.n	8025d0a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8025c5a:	2d00      	cmp	r5, #0
 8025c5c:	d055      	beq.n	8025d0a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8025c5e:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8025c62:	f11e 0e01 	adds.w	lr, lr, #1
 8025c66:	d454      	bmi.n	8025d12 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8025c68:	45f1      	cmp	r9, lr
 8025c6a:	dd52      	ble.n	8025d12 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8025c6c:	2e00      	cmp	r6, #0
 8025c6e:	d050      	beq.n	8025d12 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8025c70:	2c00      	cmp	r4, #0
 8025c72:	db4c      	blt.n	8025d0e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8025c74:	42a3      	cmp	r3, r4
 8025c76:	dd4a      	ble.n	8025d0e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8025c78:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8025c7c:	3401      	adds	r4, #1
 8025c7e:	d405      	bmi.n	8025c8c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8025c80:	42a3      	cmp	r3, r4
 8025c82:	dd03      	ble.n	8025c8c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8025c84:	b115      	cbz	r5, 8025c8c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8025c86:	3301      	adds	r3, #1
 8025c88:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8025c8c:	fb15 f406 	smulbb	r4, r5, r6
 8025c90:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8025c94:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8025c98:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025c9c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8025ca0:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8025ca4:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8025ca8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8025cac:	ea43 0c0c 	orr.w	ip, r3, ip
 8025cb0:	f1c6 0310 	rsb	r3, r6, #16
 8025cb4:	ea4e 0707 	orr.w	r7, lr, r7
 8025cb8:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8025cbc:	1b5b      	subs	r3, r3, r5
 8025cbe:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8025cc2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8025cc6:	437d      	muls	r5, r7
 8025cc8:	fb03 5c0c 	mla	ip, r3, ip, r5
 8025ccc:	0403      	lsls	r3, r0, #16
 8025cce:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025cd2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8025cd6:	4318      	orrs	r0, r3
 8025cd8:	0413      	lsls	r3, r2, #16
 8025cda:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025cde:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8025ce2:	fb04 c000 	mla	r0, r4, r0, ip
 8025ce6:	4313      	orrs	r3, r2
 8025ce8:	fb06 0003 	mla	r0, r6, r3, r0
 8025cec:	0d43      	lsrs	r3, r0, #21
 8025cee:	0940      	lsrs	r0, r0, #5
 8025cf0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025cf4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025cf8:	4318      	orrs	r0, r3
 8025cfa:	8008      	strh	r0, [r1, #0]
 8025cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025d00:	4684      	mov	ip, r0
 8025d02:	e7a6      	b.n	8025c52 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8025d04:	4607      	mov	r7, r0
 8025d06:	4684      	mov	ip, r0
 8025d08:	e7ab      	b.n	8025c62 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8025d0a:	4607      	mov	r7, r0
 8025d0c:	e7a9      	b.n	8025c62 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8025d0e:	4602      	mov	r2, r0
 8025d10:	e7b4      	b.n	8025c7c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8025d12:	4602      	mov	r2, r0
 8025d14:	e7ba      	b.n	8025c8c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08025d16 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025d16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d1a:	b08f      	sub	sp, #60	; 0x3c
 8025d1c:	461d      	mov	r5, r3
 8025d1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025d20:	9107      	str	r1, [sp, #28]
 8025d22:	920c      	str	r2, [sp, #48]	; 0x30
 8025d24:	6859      	ldr	r1, [r3, #4]
 8025d26:	681b      	ldr	r3, [r3, #0]
 8025d28:	900d      	str	r0, [sp, #52]	; 0x34
 8025d2a:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 8025d2e:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8025d32:	fb01 2707 	mla	r7, r1, r7, r2
 8025d36:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8025d3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025d3c:	f8d3 8000 	ldr.w	r8, [r3]
 8025d40:	9b07      	ldr	r3, [sp, #28]
 8025d42:	2b00      	cmp	r3, #0
 8025d44:	dc03      	bgt.n	8025d4e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8025d46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025d48:	2b00      	cmp	r3, #0
 8025d4a:	f340 8182 	ble.w	8026052 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8025d4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025d50:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025d54:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025d58:	1e48      	subs	r0, r1, #1
 8025d5a:	f102 3cff 	add.w	ip, r2, #4294967295
 8025d5e:	2d00      	cmp	r5, #0
 8025d60:	f340 809b 	ble.w	8025e9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8025d64:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8025d68:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025d6c:	d406      	bmi.n	8025d7c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8025d6e:	4586      	cmp	lr, r0
 8025d70:	da04      	bge.n	8025d7c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8025d72:	2b00      	cmp	r3, #0
 8025d74:	db02      	blt.n	8025d7c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8025d76:	4563      	cmp	r3, ip
 8025d78:	f2c0 8090 	blt.w	8025e9c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8025d7c:	f11e 0e01 	adds.w	lr, lr, #1
 8025d80:	f100 8084 	bmi.w	8025e8c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8025d84:	4571      	cmp	r1, lr
 8025d86:	f2c0 8081 	blt.w	8025e8c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8025d8a:	3301      	adds	r3, #1
 8025d8c:	d47e      	bmi.n	8025e8c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8025d8e:	429a      	cmp	r2, r3
 8025d90:	db7c      	blt.n	8025e8c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8025d92:	46aa      	mov	sl, r5
 8025d94:	46b9      	mov	r9, r7
 8025d96:	f1ba 0f00 	cmp.w	sl, #0
 8025d9a:	f340 8099 	ble.w	8025ed0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025d9e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025da0:	1421      	asrs	r1, r4, #16
 8025da2:	ea4f 4026 	mov.w	r0, r6, asr #16
 8025da6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025daa:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8025dae:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8025db2:	f100 80d1 	bmi.w	8025f58 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8025db6:	f10e 3bff 	add.w	fp, lr, #4294967295
 8025dba:	4559      	cmp	r1, fp
 8025dbc:	f280 80cc 	bge.w	8025f58 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8025dc0:	2800      	cmp	r0, #0
 8025dc2:	f2c0 80c9 	blt.w	8025f58 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8025dc6:	f103 3bff 	add.w	fp, r3, #4294967295
 8025dca:	4558      	cmp	r0, fp
 8025dcc:	f280 80c4 	bge.w	8025f58 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8025dd0:	fa0f fe8e 	sxth.w	lr, lr
 8025dd4:	fb00 110e 	mla	r1, r0, lr, r1
 8025dd8:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8025ddc:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8025de0:	8841      	ldrh	r1, [r0, #2]
 8025de2:	f1bc 0f00 	cmp.w	ip, #0
 8025de6:	d00b      	beq.n	8025e00 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8025de8:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8025dec:	3b01      	subs	r3, #1
 8025dee:	005b      	lsls	r3, r3, #1
 8025df0:	3302      	adds	r3, #2
 8025df2:	eb00 0e03 	add.w	lr, r0, r3
 8025df6:	5ac3      	ldrh	r3, [r0, r3]
 8025df8:	9308      	str	r3, [sp, #32]
 8025dfa:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8025dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8025e00:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8025e04:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8025e08:	fb12 f30c 	smulbb	r3, r2, ip
 8025e0c:	f1cc 0e10 	rsb	lr, ip, #16
 8025e10:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025e14:	10db      	asrs	r3, r3, #3
 8025e16:	ebae 0e02 	sub.w	lr, lr, r2
 8025e1a:	ea40 000b 	orr.w	r0, r0, fp
 8025e1e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8025e22:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025e26:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8025e2a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025e2e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8025e32:	ea4b 0101 	orr.w	r1, fp, r1
 8025e36:	4351      	muls	r1, r2
 8025e38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025e3a:	fb0e 1e00 	mla	lr, lr, r0, r1
 8025e3e:	0410      	lsls	r0, r2, #16
 8025e40:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025e44:	9908      	ldr	r1, [sp, #32]
 8025e46:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025e4a:	4310      	orrs	r0, r2
 8025e4c:	9a08      	ldr	r2, [sp, #32]
 8025e4e:	0412      	lsls	r2, r2, #16
 8025e50:	fb03 e000 	mla	r0, r3, r0, lr
 8025e54:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8025e58:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8025e5c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8025e60:	ea42 020e 	orr.w	r2, r2, lr
 8025e64:	fb03 0302 	mla	r3, r3, r2, r0
 8025e68:	0d5a      	lsrs	r2, r3, #21
 8025e6a:	095b      	lsrs	r3, r3, #5
 8025e6c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025e70:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025e74:	4313      	orrs	r3, r2
 8025e76:	f8a9 3000 	strh.w	r3, [r9]
 8025e7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025e7c:	f109 0902 	add.w	r9, r9, #2
 8025e80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025e84:	441c      	add	r4, r3
 8025e86:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025e88:	441e      	add	r6, r3
 8025e8a:	e784      	b.n	8025d96 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8025e8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025e8e:	3d01      	subs	r5, #1
 8025e90:	3702      	adds	r7, #2
 8025e92:	441c      	add	r4, r3
 8025e94:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025e96:	441e      	add	r6, r3
 8025e98:	e761      	b.n	8025d5e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025e9a:	d01d      	beq.n	8025ed8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8025e9c:	1e6b      	subs	r3, r5, #1
 8025e9e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8025ea0:	fb00 4003 	mla	r0, r0, r3, r4
 8025ea4:	1400      	asrs	r0, r0, #16
 8025ea6:	f53f af74 	bmi.w	8025d92 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025eaa:	3901      	subs	r1, #1
 8025eac:	4288      	cmp	r0, r1
 8025eae:	f6bf af70 	bge.w	8025d92 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025eb2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8025eb4:	fb01 6303 	mla	r3, r1, r3, r6
 8025eb8:	141b      	asrs	r3, r3, #16
 8025eba:	f53f af6a 	bmi.w	8025d92 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025ebe:	3a01      	subs	r2, #1
 8025ec0:	4293      	cmp	r3, r2
 8025ec2:	f6bf af66 	bge.w	8025d92 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025ec6:	46a9      	mov	r9, r5
 8025ec8:	46ba      	mov	sl, r7
 8025eca:	f1b9 0f00 	cmp.w	r9, #0
 8025ece:	dc5b      	bgt.n	8025f88 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8025ed0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8025ed4:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8025ed8:	9b07      	ldr	r3, [sp, #28]
 8025eda:	2b00      	cmp	r3, #0
 8025edc:	f340 80b9 	ble.w	8026052 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8025ee0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025ee4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025ee6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025eea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025eee:	eef0 6a62 	vmov.f32	s13, s5
 8025ef2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025ef6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025efa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025efe:	ee16 4a90 	vmov	r4, s13
 8025f02:	eef0 6a43 	vmov.f32	s13, s6
 8025f06:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025f0a:	ee16 6a90 	vmov	r6, s13
 8025f0e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025f12:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025f16:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025f1a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025f1e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025f22:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025f26:	ee12 2a90 	vmov	r2, s5
 8025f2a:	eef0 2a47 	vmov.f32	s5, s14
 8025f2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025f32:	ee13 2a10 	vmov	r2, s6
 8025f36:	931b      	str	r3, [sp, #108]	; 0x6c
 8025f38:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025f3a:	eeb0 3a67 	vmov.f32	s6, s15
 8025f3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025f42:	931c      	str	r3, [sp, #112]	; 0x70
 8025f44:	9b07      	ldr	r3, [sp, #28]
 8025f46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025f48:	3b01      	subs	r3, #1
 8025f4a:	9307      	str	r3, [sp, #28]
 8025f4c:	bf08      	it	eq
 8025f4e:	4615      	moveq	r5, r2
 8025f50:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025f52:	bf18      	it	ne
 8025f54:	461d      	movne	r5, r3
 8025f56:	e6f3      	b.n	8025d40 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8025f58:	f111 0b01 	adds.w	fp, r1, #1
 8025f5c:	d48d      	bmi.n	8025e7a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8025f5e:	45de      	cmp	lr, fp
 8025f60:	db8b      	blt.n	8025e7a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8025f62:	f110 0b01 	adds.w	fp, r0, #1
 8025f66:	d488      	bmi.n	8025e7a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8025f68:	455b      	cmp	r3, fp
 8025f6a:	db86      	blt.n	8025e7a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8025f6c:	b21b      	sxth	r3, r3
 8025f6e:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8025f72:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8025f76:	9300      	str	r3, [sp, #0]
 8025f78:	4642      	mov	r2, r8
 8025f7a:	fa0f f38e 	sxth.w	r3, lr
 8025f7e:	4649      	mov	r1, r9
 8025f80:	980d      	ldr	r0, [sp, #52]	; 0x34
 8025f82:	f7ff fe4c 	bl	8025c1e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8025f86:	e778      	b.n	8025e7a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8025f88:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025f8a:	1420      	asrs	r0, r4, #16
 8025f8c:	1431      	asrs	r1, r6, #16
 8025f8e:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8025f92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8025f96:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025f9a:	fb03 0101 	mla	r1, r3, r1, r0
 8025f9e:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8025fa2:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8025fa6:	8841      	ldrh	r1, [r0, #2]
 8025fa8:	f1be 0f00 	cmp.w	lr, #0
 8025fac:	d00b      	beq.n	8025fc6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8025fae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8025fb2:	3b01      	subs	r3, #1
 8025fb4:	005b      	lsls	r3, r3, #1
 8025fb6:	3302      	adds	r3, #2
 8025fb8:	eb00 0b03 	add.w	fp, r0, r3
 8025fbc:	5ac3      	ldrh	r3, [r0, r3]
 8025fbe:	930a      	str	r3, [sp, #40]	; 0x28
 8025fc0:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8025fc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8025fc6:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8025fca:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025fce:	fb12 f30e 	smulbb	r3, r2, lr
 8025fd2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8025fd6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025fda:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025fde:	10db      	asrs	r3, r3, #3
 8025fe0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025fe4:	ea40 000c 	orr.w	r0, r0, ip
 8025fe8:	f1ce 0c10 	rsb	ip, lr, #16
 8025fec:	ea4b 0101 	orr.w	r1, fp, r1
 8025ff0:	f109 39ff 	add.w	r9, r9, #4294967295
 8025ff4:	ebac 0c02 	sub.w	ip, ip, r2
 8025ff8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8025ffc:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8026000:	4351      	muls	r1, r2
 8026002:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026004:	fb0c 1c00 	mla	ip, ip, r0, r1
 8026008:	990a      	ldr	r1, [sp, #40]	; 0x28
 802600a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802600e:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8026012:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026014:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026018:	0412      	lsls	r2, r2, #16
 802601a:	ea4b 0000 	orr.w	r0, fp, r0
 802601e:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8026022:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026026:	fb03 c000 	mla	r0, r3, r0, ip
 802602a:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802602e:	ea42 0b0b 	orr.w	fp, r2, fp
 8026032:	fb03 000b 	mla	r0, r3, fp, r0
 8026036:	0d43      	lsrs	r3, r0, #21
 8026038:	0940      	lsrs	r0, r0, #5
 802603a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802603e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026042:	4318      	orrs	r0, r3
 8026044:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026046:	441c      	add	r4, r3
 8026048:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802604a:	f82a 0b02 	strh.w	r0, [sl], #2
 802604e:	441e      	add	r6, r3
 8026050:	e73b      	b.n	8025eca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026052:	b00f      	add	sp, #60	; 0x3c
 8026054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026058 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8026058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802605c:	b085      	sub	sp, #20
 802605e:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8026062:	9102      	str	r1, [sp, #8]
 8026064:	2c00      	cmp	r4, #0
 8026066:	fb04 7103 	mla	r1, r4, r3, r7
 802606a:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 802606e:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8026072:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8026076:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802607a:	f2c0 811b 	blt.w	80262b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 802607e:	45a6      	cmp	lr, r4
 8026080:	f340 8118 	ble.w	80262b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8026084:	2f00      	cmp	r7, #0
 8026086:	f2c0 8113 	blt.w	80262b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 802608a:	42bb      	cmp	r3, r7
 802608c:	f340 8110 	ble.w	80262b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8026090:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8026094:	1c7a      	adds	r2, r7, #1
 8026096:	f100 8110 	bmi.w	80262ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 802609a:	4293      	cmp	r3, r2
 802609c:	f340 810d 	ble.w	80262ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80260a0:	2e00      	cmp	r6, #0
 80260a2:	f000 810c 	beq.w	80262be <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 80260a6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80260aa:	3401      	adds	r4, #1
 80260ac:	f100 810b 	bmi.w	80262c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80260b0:	45a6      	cmp	lr, r4
 80260b2:	f340 8108 	ble.w	80262c6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80260b6:	2800      	cmp	r0, #0
 80260b8:	f000 8108 	beq.w	80262cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 80260bc:	2f00      	cmp	r7, #0
 80260be:	f2c0 8100 	blt.w	80262c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80260c2:	42bb      	cmp	r3, r7
 80260c4:	f340 80fd 	ble.w	80262c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80260c8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80260cc:	3701      	adds	r7, #1
 80260ce:	f100 8100 	bmi.w	80262d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80260d2:	42bb      	cmp	r3, r7
 80260d4:	f340 80fd 	ble.w	80262d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80260d8:	2e00      	cmp	r6, #0
 80260da:	f000 80fc 	beq.w	80262d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 80260de:	3301      	adds	r3, #1
 80260e0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80260e4:	b2b6      	uxth	r6, r6
 80260e6:	b280      	uxth	r0, r0
 80260e8:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80260ec:	fb00 fe06 	mul.w	lr, r0, r6
 80260f0:	0136      	lsls	r6, r6, #4
 80260f2:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80260f6:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80260fa:	eba6 070e 	sub.w	r7, r6, lr
 80260fe:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8026102:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026106:	b280      	uxth	r0, r0
 8026108:	b2bf      	uxth	r7, r7
 802610a:	1a1b      	subs	r3, r3, r0
 802610c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8026110:	fb0a f607 	mul.w	r6, sl, r7
 8026114:	b29b      	uxth	r3, r3
 8026116:	fb0b 6603 	mla	r6, fp, r3, r6
 802611a:	fb00 6609 	mla	r6, r0, r9, r6
 802611e:	fb0e 6608 	mla	r6, lr, r8, r6
 8026122:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8026126:	9600      	str	r6, [sp, #0]
 8026128:	2e00      	cmp	r6, #0
 802612a:	f000 80be 	beq.w	80262aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 802612e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8026132:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8026136:	9e02      	ldr	r6, [sp, #8]
 8026138:	fb0b fc0c 	mul.w	ip, fp, ip
 802613c:	fb0b f505 	mul.w	r5, fp, r5
 8026140:	8836      	ldrh	r6, [r6, #0]
 8026142:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8026146:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802614a:	9501      	str	r5, [sp, #4]
 802614c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8026150:	44dc      	add	ip, fp
 8026152:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026156:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 802615a:	9503      	str	r5, [sp, #12]
 802615c:	9d01      	ldr	r5, [sp, #4]
 802615e:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8026162:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8026166:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 802616a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802616e:	fb0a fc0c 	mul.w	ip, sl, ip
 8026172:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8026176:	fb0a fa01 	mul.w	sl, sl, r1
 802617a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802617e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026182:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8026186:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802618a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802618e:	4465      	add	r5, ip
 8026190:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026194:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026198:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802619c:	fb09 fc0c 	mul.w	ip, r9, ip
 80261a0:	0a2d      	lsrs	r5, r5, #8
 80261a2:	fb09 f904 	mul.w	r9, r9, r4
 80261a6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80261aa:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80261ae:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80261b2:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80261b6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80261ba:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80261be:	437d      	muls	r5, r7
 80261c0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80261c4:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 80261c8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80261cc:	4461      	add	r1, ip
 80261ce:	fb08 f404 	mul.w	r4, r8, r4
 80261d2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80261d6:	fb08 f802 	mul.w	r8, r8, r2
 80261da:	0a09      	lsrs	r1, r1, #8
 80261dc:	0a22      	lsrs	r2, r4, #8
 80261de:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 80261e2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80261e6:	fb07 f70a 	mul.w	r7, r7, sl
 80261ea:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80261ee:	4414      	add	r4, r2
 80261f0:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80261f4:	0a24      	lsrs	r4, r4, #8
 80261f6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80261fa:	9a03      	ldr	r2, [sp, #12]
 80261fc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026200:	fb02 5503 	mla	r5, r2, r3, r5
 8026204:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026208:	9a00      	ldr	r2, [sp, #0]
 802620a:	fb04 540e 	mla	r4, r4, lr, r5
 802620e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8026212:	1235      	asrs	r5, r6, #8
 8026214:	fb01 4100 	mla	r1, r1, r0, r4
 8026218:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802621c:	0a09      	lsrs	r1, r1, #8
 802621e:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8026222:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8026226:	fb03 7101 	mla	r1, r3, r1, r7
 802622a:	fb0e 1e08 	mla	lr, lr, r8, r1
 802622e:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8026232:	fb00 e101 	mla	r1, r0, r1, lr
 8026236:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 802623a:	b287      	uxth	r7, r0
 802623c:	0a09      	lsrs	r1, r1, #8
 802623e:	437a      	muls	r2, r7
 8026240:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8026244:	1c53      	adds	r3, r2, #1
 8026246:	4321      	orrs	r1, r4
 8026248:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802624c:	0c0a      	lsrs	r2, r1, #16
 802624e:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8026252:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8026256:	b2c8      	uxtb	r0, r1
 8026258:	fb12 f207 	smulbb	r2, r2, r7
 802625c:	fb14 f407 	smulbb	r4, r4, r7
 8026260:	b2db      	uxtb	r3, r3
 8026262:	fb10 f007 	smulbb	r0, r0, r7
 8026266:	fb05 2503 	mla	r5, r5, r3, r2
 802626a:	10f2      	asrs	r2, r6, #3
 802626c:	00f6      	lsls	r6, r6, #3
 802626e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026272:	b2ad      	uxth	r5, r5
 8026274:	b2f6      	uxtb	r6, r6
 8026276:	fb02 4203 	mla	r2, r2, r3, r4
 802627a:	fb06 0303 	mla	r3, r6, r3, r0
 802627e:	b294      	uxth	r4, r2
 8026280:	b299      	uxth	r1, r3
 8026282:	1c6b      	adds	r3, r5, #1
 8026284:	1c62      	adds	r2, r4, #1
 8026286:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802628a:	1c4b      	adds	r3, r1, #1
 802628c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8026290:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026294:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026298:	0952      	lsrs	r2, r2, #5
 802629a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802629e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80262a2:	432b      	orrs	r3, r5
 80262a4:	4313      	orrs	r3, r2
 80262a6:	9a02      	ldr	r2, [sp, #8]
 80262a8:	8013      	strh	r3, [r2, #0]
 80262aa:	b005      	add	sp, #20
 80262ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80262b0:	2500      	movs	r5, #0
 80262b2:	e6ef      	b.n	8026094 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 80262b4:	2100      	movs	r1, #0
 80262b6:	460d      	mov	r5, r1
 80262b8:	e6f7      	b.n	80260aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80262ba:	2100      	movs	r1, #0
 80262bc:	e6f5      	b.n	80260aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80262be:	4631      	mov	r1, r6
 80262c0:	e6f3      	b.n	80260aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80262c2:	2400      	movs	r4, #0
 80262c4:	e702      	b.n	80260cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 80262c6:	2200      	movs	r2, #0
 80262c8:	4614      	mov	r4, r2
 80262ca:	e70b      	b.n	80260e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80262cc:	4602      	mov	r2, r0
 80262ce:	4604      	mov	r4, r0
 80262d0:	e708      	b.n	80260e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80262d2:	2200      	movs	r2, #0
 80262d4:	e706      	b.n	80260e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80262d6:	4632      	mov	r2, r6
 80262d8:	e704      	b.n	80260e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

080262da <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80262da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80262de:	b09d      	sub	sp, #116	; 0x74
 80262e0:	9219      	str	r2, [sp, #100]	; 0x64
 80262e2:	9307      	str	r3, [sp, #28]
 80262e4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80262e6:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 80262ea:	901b      	str	r0, [sp, #108]	; 0x6c
 80262ec:	931a      	str	r3, [sp, #104]	; 0x68
 80262ee:	6850      	ldr	r0, [r2, #4]
 80262f0:	9117      	str	r1, [sp, #92]	; 0x5c
 80262f2:	6812      	ldr	r2, [r2, #0]
 80262f4:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80262f8:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 80262fc:	fb00 1303 	mla	r3, r0, r3, r1
 8026300:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026304:	930a      	str	r3, [sp, #40]	; 0x28
 8026306:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026308:	681b      	ldr	r3, [r3, #0]
 802630a:	9310      	str	r3, [sp, #64]	; 0x40
 802630c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8026310:	930b      	str	r3, [sp, #44]	; 0x2c
 8026312:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026314:	2b00      	cmp	r3, #0
 8026316:	dc03      	bgt.n	8026320 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8026318:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802631a:	2b00      	cmp	r3, #0
 802631c:	f340 8375 	ble.w	8026a0a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8026320:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026322:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026326:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802632a:	1e48      	subs	r0, r1, #1
 802632c:	1e57      	subs	r7, r2, #1
 802632e:	9b07      	ldr	r3, [sp, #28]
 8026330:	2b00      	cmp	r3, #0
 8026332:	f340 818e 	ble.w	8026652 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8026336:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802633a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802633e:	d406      	bmi.n	802634e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026340:	4584      	cmp	ip, r0
 8026342:	da04      	bge.n	802634e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026344:	2b00      	cmp	r3, #0
 8026346:	db02      	blt.n	802634e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026348:	42bb      	cmp	r3, r7
 802634a:	f2c0 8183 	blt.w	8026654 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802634e:	f11c 0c01 	adds.w	ip, ip, #1
 8026352:	f100 8173 	bmi.w	802663c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8026356:	4561      	cmp	r1, ip
 8026358:	f2c0 8170 	blt.w	802663c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802635c:	3301      	adds	r3, #1
 802635e:	f100 816d 	bmi.w	802663c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8026362:	429a      	cmp	r2, r3
 8026364:	f2c0 816a 	blt.w	802663c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8026368:	9b07      	ldr	r3, [sp, #28]
 802636a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802636c:	9318      	str	r3, [sp, #96]	; 0x60
 802636e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026370:	2b00      	cmp	r3, #0
 8026372:	f340 818c 	ble.w	802668e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8026376:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8026378:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802637c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802637e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8026382:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8026386:	1422      	asrs	r2, r4, #16
 8026388:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802638c:	689b      	ldr	r3, [r3, #8]
 802638e:	f100 81cd 	bmi.w	802672c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026392:	f103 38ff 	add.w	r8, r3, #4294967295
 8026396:	4542      	cmp	r2, r8
 8026398:	f280 81c8 	bge.w	802672c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802639c:	f1bc 0f00 	cmp.w	ip, #0
 80263a0:	f2c0 81c4 	blt.w	802672c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80263a4:	f10e 38ff 	add.w	r8, lr, #4294967295
 80263a8:	45c4      	cmp	ip, r8
 80263aa:	f280 81bf 	bge.w	802672c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80263ae:	b21b      	sxth	r3, r3
 80263b0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80263b2:	fb0c 2203 	mla	r2, ip, r3, r2
 80263b6:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80263ba:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80263be:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80263c2:	2800      	cmp	r0, #0
 80263c4:	f000 81a9 	beq.w	802671a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 80263c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80263cc:	950c      	str	r5, [sp, #48]	; 0x30
 80263ce:	0e2d      	lsrs	r5, r5, #24
 80263d0:	9513      	str	r5, [sp, #76]	; 0x4c
 80263d2:	b181      	cbz	r1, 80263f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80263d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80263d8:	3b01      	subs	r3, #1
 80263da:	009b      	lsls	r3, r3, #2
 80263dc:	3304      	adds	r3, #4
 80263de:	eb08 0c03 	add.w	ip, r8, r3
 80263e2:	f858 3003 	ldr.w	r3, [r8, r3]
 80263e6:	9308      	str	r3, [sp, #32]
 80263e8:	0e1b      	lsrs	r3, r3, #24
 80263ea:	9311      	str	r3, [sp, #68]	; 0x44
 80263ec:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80263f0:	930d      	str	r3, [sp, #52]	; 0x34
 80263f2:	0e1b      	lsrs	r3, r3, #24
 80263f4:	9314      	str	r3, [sp, #80]	; 0x50
 80263f6:	b280      	uxth	r0, r0
 80263f8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80263fa:	b289      	uxth	r1, r1
 80263fc:	fb00 f901 	mul.w	r9, r0, r1
 8026400:	0100      	lsls	r0, r0, #4
 8026402:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8026406:	eba0 0809 	sub.w	r8, r0, r9
 802640a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802640e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8026410:	b289      	uxth	r1, r1
 8026412:	fa1f f888 	uxth.w	r8, r8
 8026416:	1a5b      	subs	r3, r3, r1
 8026418:	fb08 f000 	mul.w	r0, r8, r0
 802641c:	b29b      	uxth	r3, r3
 802641e:	fb03 000e 	mla	r0, r3, lr, r0
 8026422:	fb01 0005 	mla	r0, r1, r5, r0
 8026426:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8026428:	fb09 0005 	mla	r0, r9, r5, r0
 802642c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026430:	2800      	cmp	r0, #0
 8026432:	f000 80fa 	beq.w	802662a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026436:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802643a:	d01b      	beq.n	8026474 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802643c:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8026440:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026444:	fb0e fa0a 	mul.w	sl, lr, sl
 8026448:	fb0e fe02 	mul.w	lr, lr, r2
 802644c:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8026450:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026454:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026458:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802645c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026460:	4452      	add	r2, sl
 8026462:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026466:	0a12      	lsrs	r2, r2, #8
 8026468:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802646c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026470:	ea42 020c 	orr.w	r2, r2, ip
 8026474:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026476:	2dff      	cmp	r5, #255	; 0xff
 8026478:	d021      	beq.n	80264be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802647a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802647c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026480:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026482:	fb05 fb0b 	mul.w	fp, r5, fp
 8026486:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026488:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802648c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802648e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026492:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026496:	fb05 fa0a 	mul.w	sl, r5, sl
 802649a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802649e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80264a2:	44de      	add	lr, fp
 80264a4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80264a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80264ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80264b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80264b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80264b8:	ea4e 050a 	orr.w	r5, lr, sl
 80264bc:	950c      	str	r5, [sp, #48]	; 0x30
 80264be:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80264c0:	2dff      	cmp	r5, #255	; 0xff
 80264c2:	d021      	beq.n	8026508 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80264c4:	9d08      	ldr	r5, [sp, #32]
 80264c6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80264ca:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80264cc:	fb05 fb0b 	mul.w	fp, r5, fp
 80264d0:	9d08      	ldr	r5, [sp, #32]
 80264d2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80264d6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80264d8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80264dc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80264e0:	fb05 fa0a 	mul.w	sl, r5, sl
 80264e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80264e8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80264ec:	44de      	add	lr, fp
 80264ee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80264f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80264f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80264fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80264fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026502:	ea4e 050a 	orr.w	r5, lr, sl
 8026506:	9508      	str	r5, [sp, #32]
 8026508:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802650a:	2dff      	cmp	r5, #255	; 0xff
 802650c:	d021      	beq.n	8026552 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 802650e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026510:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026514:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8026516:	fb05 fb0b 	mul.w	fp, r5, fp
 802651a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802651c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026520:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8026522:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026526:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802652a:	fb05 fa0a 	mul.w	sl, r5, sl
 802652e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026532:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026536:	44de      	add	lr, fp
 8026538:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802653c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026540:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026544:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026548:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802654c:	ea4e 050a 	orr.w	r5, lr, sl
 8026550:	950d      	str	r5, [sp, #52]	; 0x34
 8026552:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026554:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8026558:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802655c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8026560:	9d08      	ldr	r5, [sp, #32]
 8026562:	fb08 fc0c 	mul.w	ip, r8, ip
 8026566:	fb03 cc0e 	mla	ip, r3, lr, ip
 802656a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802656e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026570:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026574:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8026578:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802657a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802657e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8026582:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026584:	fb08 f80e 	mul.w	r8, r8, lr
 8026588:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802658c:	fb03 8202 	mla	r2, r3, r2, r8
 8026590:	9b08      	ldr	r3, [sp, #32]
 8026592:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026596:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 802659a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802659c:	fb01 220a 	mla	r2, r1, sl, r2
 80265a0:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80265a4:	883b      	ldrh	r3, [r7, #0]
 80265a6:	fb09 2901 	mla	r9, r9, r1, r2
 80265aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80265ac:	1219      	asrs	r1, r3, #8
 80265ae:	4342      	muls	r2, r0
 80265b0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80265b4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80265b8:	1c50      	adds	r0, r2, #1
 80265ba:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80265be:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80265c2:	ea4c 0c09 	orr.w	ip, ip, r9
 80265c6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80265ca:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80265ce:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80265d2:	fa5f fc8c 	uxtb.w	ip, ip
 80265d6:	fb12 f205 	smulbb	r2, r2, r5
 80265da:	b2c0      	uxtb	r0, r0
 80265dc:	fb1c fc05 	smulbb	ip, ip, r5
 80265e0:	fb01 2100 	mla	r1, r1, r0, r2
 80265e4:	10da      	asrs	r2, r3, #3
 80265e6:	fb1e fe05 	smulbb	lr, lr, r5
 80265ea:	00db      	lsls	r3, r3, #3
 80265ec:	b289      	uxth	r1, r1
 80265ee:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80265f2:	b2db      	uxtb	r3, r3
 80265f4:	fb02 e200 	mla	r2, r2, r0, lr
 80265f8:	fb03 c300 	mla	r3, r3, r0, ip
 80265fc:	b292      	uxth	r2, r2
 80265fe:	fa1f fc83 	uxth.w	ip, r3
 8026602:	1c4b      	adds	r3, r1, #1
 8026604:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8026608:	f10c 0301 	add.w	r3, ip, #1
 802660c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8026610:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8026614:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026618:	430b      	orrs	r3, r1
 802661a:	1c51      	adds	r1, r2, #1
 802661c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026620:	0952      	lsrs	r2, r2, #5
 8026622:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026626:	4313      	orrs	r3, r2
 8026628:	803b      	strh	r3, [r7, #0]
 802662a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802662c:	3702      	adds	r7, #2
 802662e:	441c      	add	r4, r3
 8026630:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026632:	441e      	add	r6, r3
 8026634:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026636:	3b01      	subs	r3, #1
 8026638:	9318      	str	r3, [sp, #96]	; 0x60
 802663a:	e698      	b.n	802636e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802663c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802663e:	441c      	add	r4, r3
 8026640:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026642:	441e      	add	r6, r3
 8026644:	9b07      	ldr	r3, [sp, #28]
 8026646:	3b01      	subs	r3, #1
 8026648:	9307      	str	r3, [sp, #28]
 802664a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802664c:	3302      	adds	r3, #2
 802664e:	930a      	str	r3, [sp, #40]	; 0x28
 8026650:	e66d      	b.n	802632e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8026652:	d023      	beq.n	802669c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8026654:	9b07      	ldr	r3, [sp, #28]
 8026656:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8026658:	3b01      	subs	r3, #1
 802665a:	fb00 4003 	mla	r0, r0, r3, r4
 802665e:	1400      	asrs	r0, r0, #16
 8026660:	f53f ae82 	bmi.w	8026368 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026664:	3901      	subs	r1, #1
 8026666:	4288      	cmp	r0, r1
 8026668:	f6bf ae7e 	bge.w	8026368 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802666c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 802666e:	fb01 6303 	mla	r3, r1, r3, r6
 8026672:	141b      	asrs	r3, r3, #16
 8026674:	f53f ae78 	bmi.w	8026368 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026678:	3a01      	subs	r2, #1
 802667a:	4293      	cmp	r3, r2
 802667c:	f6bf ae74 	bge.w	8026368 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026680:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026684:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8026688:	f1bb 0f00 	cmp.w	fp, #0
 802668c:	dc6c      	bgt.n	8026768 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802668e:	9b07      	ldr	r3, [sp, #28]
 8026690:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8026694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026696:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802669a:	930a      	str	r3, [sp, #40]	; 0x28
 802669c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802669e:	2b00      	cmp	r3, #0
 80266a0:	f340 81b3 	ble.w	8026a0a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80266a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80266a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80266aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80266ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80266b2:	eef0 6a62 	vmov.f32	s13, s5
 80266b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80266ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 80266be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80266c2:	ee16 4a90 	vmov	r4, s13
 80266c6:	eef0 6a43 	vmov.f32	s13, s6
 80266ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80266ce:	ee16 6a90 	vmov	r6, s13
 80266d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80266d6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80266da:	ee77 2a62 	vsub.f32	s5, s14, s5
 80266de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80266e2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80266e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80266ea:	ee12 2a90 	vmov	r2, s5
 80266ee:	eef0 2a47 	vmov.f32	s5, s14
 80266f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80266f6:	ee13 2a10 	vmov	r2, s6
 80266fa:	9329      	str	r3, [sp, #164]	; 0xa4
 80266fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80266fe:	eeb0 3a67 	vmov.f32	s6, s15
 8026702:	fb92 f3f3 	sdiv	r3, r2, r3
 8026706:	932a      	str	r3, [sp, #168]	; 0xa8
 8026708:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802670a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802670c:	3b01      	subs	r3, #1
 802670e:	9317      	str	r3, [sp, #92]	; 0x5c
 8026710:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026712:	bf08      	it	eq
 8026714:	4613      	moveq	r3, r2
 8026716:	9307      	str	r3, [sp, #28]
 8026718:	e5fb      	b.n	8026312 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802671a:	2900      	cmp	r1, #0
 802671c:	f43f ae6b 	beq.w	80263f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026720:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8026724:	9308      	str	r3, [sp, #32]
 8026726:	0e1b      	lsrs	r3, r3, #24
 8026728:	9311      	str	r3, [sp, #68]	; 0x44
 802672a:	e664      	b.n	80263f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802672c:	f112 0801 	adds.w	r8, r2, #1
 8026730:	f53f af7b 	bmi.w	802662a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026734:	4543      	cmp	r3, r8
 8026736:	f6ff af78 	blt.w	802662a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802673a:	f11c 0801 	adds.w	r8, ip, #1
 802673e:	f53f af74 	bmi.w	802662a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026742:	45c6      	cmp	lr, r8
 8026744:	f6ff af71 	blt.w	802662a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026748:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 802674a:	b21b      	sxth	r3, r3
 802674c:	9201      	str	r2, [sp, #4]
 802674e:	fa0f f28e 	sxth.w	r2, lr
 8026752:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8026756:	e9cd c002 	strd	ip, r0, [sp, #8]
 802675a:	9200      	str	r2, [sp, #0]
 802675c:	4639      	mov	r1, r7
 802675e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026760:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8026762:	f7ff fc79 	bl	8026058 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8026766:	e760      	b.n	802662a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026768:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802676a:	1427      	asrs	r7, r4, #16
 802676c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802676e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026772:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026776:	1433      	asrs	r3, r6, #16
 8026778:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802677c:	fb01 7303 	mla	r3, r1, r3, r7
 8026780:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8026784:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8026788:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802678c:	2a00      	cmp	r2, #0
 802678e:	f000 8133 	beq.w	80269f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8026792:	687d      	ldr	r5, [r7, #4]
 8026794:	950e      	str	r5, [sp, #56]	; 0x38
 8026796:	0e2d      	lsrs	r5, r5, #24
 8026798:	9515      	str	r5, [sp, #84]	; 0x54
 802679a:	b178      	cbz	r0, 80267bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802679c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80267a0:	3901      	subs	r1, #1
 80267a2:	0089      	lsls	r1, r1, #2
 80267a4:	3104      	adds	r1, #4
 80267a6:	eb07 0e01 	add.w	lr, r7, r1
 80267aa:	5879      	ldr	r1, [r7, r1]
 80267ac:	9109      	str	r1, [sp, #36]	; 0x24
 80267ae:	0e09      	lsrs	r1, r1, #24
 80267b0:	9112      	str	r1, [sp, #72]	; 0x48
 80267b2:	f8de 1004 	ldr.w	r1, [lr, #4]
 80267b6:	910f      	str	r1, [sp, #60]	; 0x3c
 80267b8:	0e09      	lsrs	r1, r1, #24
 80267ba:	9116      	str	r1, [sp, #88]	; 0x58
 80267bc:	b292      	uxth	r2, r2
 80267be:	9915      	ldr	r1, [sp, #84]	; 0x54
 80267c0:	b280      	uxth	r0, r0
 80267c2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80267c4:	fb02 f800 	mul.w	r8, r2, r0
 80267c8:	0112      	lsls	r2, r2, #4
 80267ca:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80267ce:	eba2 0e08 	sub.w	lr, r2, r8
 80267d2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80267d6:	b280      	uxth	r0, r0
 80267d8:	fa1f fe8e 	uxth.w	lr, lr
 80267dc:	1a12      	subs	r2, r2, r0
 80267de:	fb0e f101 	mul.w	r1, lr, r1
 80267e2:	b292      	uxth	r2, r2
 80267e4:	fb02 110c 	mla	r1, r2, ip, r1
 80267e8:	fb00 1105 	mla	r1, r0, r5, r1
 80267ec:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80267ee:	fb08 1105 	mla	r1, r8, r5, r1
 80267f2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80267f6:	2900      	cmp	r1, #0
 80267f8:	f000 80f5 	beq.w	80269e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 80267fc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026800:	d019      	beq.n	8026836 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8026802:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026806:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802680a:	fb0c fa0a 	mul.w	sl, ip, sl
 802680e:	fb0c fc03 	mul.w	ip, ip, r3
 8026812:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026816:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802681a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802681e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026822:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026826:	4453      	add	r3, sl
 8026828:	0a3f      	lsrs	r7, r7, #8
 802682a:	0a1b      	lsrs	r3, r3, #8
 802682c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026830:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026834:	433b      	orrs	r3, r7
 8026836:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8026838:	2dff      	cmp	r5, #255	; 0xff
 802683a:	d020      	beq.n	802687e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 802683c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802683e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8026842:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8026844:	436f      	muls	r7, r5
 8026846:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026848:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802684c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026850:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8026852:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026856:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802685a:	fb05 fa0a 	mul.w	sl, r5, sl
 802685e:	44bc      	add	ip, r7
 8026860:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026864:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026868:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802686c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026870:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026874:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026878:	ea4c 050a 	orr.w	r5, ip, sl
 802687c:	950e      	str	r5, [sp, #56]	; 0x38
 802687e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026880:	2dff      	cmp	r5, #255	; 0xff
 8026882:	d020      	beq.n	80268c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8026884:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8026886:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802688a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802688c:	436f      	muls	r7, r5
 802688e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8026890:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026894:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026898:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802689a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802689e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80268a2:	fb05 fa0a 	mul.w	sl, r5, sl
 80268a6:	44bc      	add	ip, r7
 80268a8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80268ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80268b0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80268b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80268b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80268bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80268c0:	ea4c 050a 	orr.w	r5, ip, sl
 80268c4:	9509      	str	r5, [sp, #36]	; 0x24
 80268c6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80268c8:	2dff      	cmp	r5, #255	; 0xff
 80268ca:	d020      	beq.n	802690e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 80268cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80268ce:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80268d2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80268d4:	436f      	muls	r7, r5
 80268d6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80268d8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80268dc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80268e0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80268e2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80268e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80268ea:	fb05 fa0a 	mul.w	sl, r5, sl
 80268ee:	44bc      	add	ip, r7
 80268f0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80268f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80268f8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80268fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026900:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026904:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026908:	ea4c 050a 	orr.w	r5, ip, sl
 802690c:	950f      	str	r5, [sp, #60]	; 0x3c
 802690e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026910:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8026914:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026918:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802691c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802691e:	fb0e f707 	mul.w	r7, lr, r7
 8026922:	fb02 770c 	mla	r7, r2, ip, r7
 8026926:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802692a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802692c:	fb00 770c 	mla	r7, r0, ip, r7
 8026930:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8026934:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026936:	fb08 770c 	mla	r7, r8, ip, r7
 802693a:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802693e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026940:	fb0e fe0c 	mul.w	lr, lr, ip
 8026944:	0a3f      	lsrs	r7, r7, #8
 8026946:	fb02 e303 	mla	r3, r2, r3, lr
 802694a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802694c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026950:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8026954:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026956:	fb00 330a 	mla	r3, r0, sl, r3
 802695a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802695e:	f8b9 0000 	ldrh.w	r0, [r9]
 8026962:	fb08 3c0c 	mla	ip, r8, ip, r3
 8026966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026968:	1202      	asrs	r2, r0, #8
 802696a:	4359      	muls	r1, r3
 802696c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026970:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026974:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026978:	1c4b      	adds	r3, r1, #1
 802697a:	ea47 070c 	orr.w	r7, r7, ip
 802697e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8026982:	0c3b      	lsrs	r3, r7, #16
 8026984:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026988:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 802698c:	b2ff      	uxtb	r7, r7
 802698e:	fb13 f305 	smulbb	r3, r3, r5
 8026992:	b2c9      	uxtb	r1, r1
 8026994:	fb17 f705 	smulbb	r7, r7, r5
 8026998:	fb02 3201 	mla	r2, r2, r1, r3
 802699c:	10c3      	asrs	r3, r0, #3
 802699e:	fb1c fc05 	smulbb	ip, ip, r5
 80269a2:	00c0      	lsls	r0, r0, #3
 80269a4:	b292      	uxth	r2, r2
 80269a6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80269aa:	b2c0      	uxtb	r0, r0
 80269ac:	fb03 c301 	mla	r3, r3, r1, ip
 80269b0:	fb00 7001 	mla	r0, r0, r1, r7
 80269b4:	1c51      	adds	r1, r2, #1
 80269b6:	b29b      	uxth	r3, r3
 80269b8:	b280      	uxth	r0, r0
 80269ba:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80269be:	f100 0c01 	add.w	ip, r0, #1
 80269c2:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80269c6:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 80269ca:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80269ce:	ea4c 0202 	orr.w	r2, ip, r2
 80269d2:	f103 0c01 	add.w	ip, r3, #1
 80269d6:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80269da:	095b      	lsrs	r3, r3, #5
 80269dc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80269e0:	431a      	orrs	r2, r3
 80269e2:	f8a9 2000 	strh.w	r2, [r9]
 80269e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80269e8:	f109 0902 	add.w	r9, r9, #2
 80269ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80269f0:	441c      	add	r4, r3
 80269f2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80269f4:	441e      	add	r6, r3
 80269f6:	e647      	b.n	8026688 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80269f8:	2800      	cmp	r0, #0
 80269fa:	f43f aedf 	beq.w	80267bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80269fe:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8026a02:	9109      	str	r1, [sp, #36]	; 0x24
 8026a04:	0e09      	lsrs	r1, r1, #24
 8026a06:	9112      	str	r1, [sp, #72]	; 0x48
 8026a08:	e6d8      	b.n	80267bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8026a0a:	b01d      	add	sp, #116	; 0x74
 8026a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026a10 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8026a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a14:	b085      	sub	sp, #20
 8026a16:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8026a1a:	9102      	str	r1, [sp, #8]
 8026a1c:	2c00      	cmp	r4, #0
 8026a1e:	fb04 7103 	mla	r1, r4, r3, r7
 8026a22:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8026a26:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8026a2a:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8026a2e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8026a32:	f2c0 810c 	blt.w	8026c4e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8026a36:	45a6      	cmp	lr, r4
 8026a38:	f340 8109 	ble.w	8026c4e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8026a3c:	2f00      	cmp	r7, #0
 8026a3e:	f2c0 8104 	blt.w	8026c4a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8026a42:	42bb      	cmp	r3, r7
 8026a44:	f340 8101 	ble.w	8026c4a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8026a48:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8026a4c:	1c7a      	adds	r2, r7, #1
 8026a4e:	f100 8101 	bmi.w	8026c54 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8026a52:	4293      	cmp	r3, r2
 8026a54:	f340 80fe 	ble.w	8026c54 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8026a58:	2e00      	cmp	r6, #0
 8026a5a:	f000 80fd 	beq.w	8026c58 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8026a5e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8026a62:	3401      	adds	r4, #1
 8026a64:	f100 80fc 	bmi.w	8026c60 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8026a68:	45a6      	cmp	lr, r4
 8026a6a:	f340 80f9 	ble.w	8026c60 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8026a6e:	2800      	cmp	r0, #0
 8026a70:	f000 80f9 	beq.w	8026c66 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8026a74:	2f00      	cmp	r7, #0
 8026a76:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8026a7a:	f2c0 80ef 	blt.w	8026c5c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8026a7e:	42bb      	cmp	r3, r7
 8026a80:	f340 80ec 	ble.w	8026c5c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8026a84:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8026a88:	3701      	adds	r7, #1
 8026a8a:	f100 80ef 	bmi.w	8026c6c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8026a8e:	42bb      	cmp	r3, r7
 8026a90:	f340 80ec 	ble.w	8026c6c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8026a94:	2e00      	cmp	r6, #0
 8026a96:	f000 80eb 	beq.w	8026c70 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8026a9a:	6852      	ldr	r2, [r2, #4]
 8026a9c:	b2b6      	uxth	r6, r6
 8026a9e:	b280      	uxth	r0, r0
 8026aa0:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8026aa4:	fb00 fe06 	mul.w	lr, r0, r6
 8026aa8:	0136      	lsls	r6, r6, #4
 8026aaa:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8026aae:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8026ab2:	eba6 070e 	sub.w	r7, r6, lr
 8026ab6:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8026aba:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026abe:	b280      	uxth	r0, r0
 8026ac0:	b2bf      	uxth	r7, r7
 8026ac2:	1a1b      	subs	r3, r3, r0
 8026ac4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8026ac8:	fb07 f60a 	mul.w	r6, r7, sl
 8026acc:	b29b      	uxth	r3, r3
 8026ace:	fb0b 6603 	mla	r6, fp, r3, r6
 8026ad2:	fb00 6609 	mla	r6, r0, r9, r6
 8026ad6:	fb0e 6608 	mla	r6, lr, r8, r6
 8026ada:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8026ade:	9600      	str	r6, [sp, #0]
 8026ae0:	2e00      	cmp	r6, #0
 8026ae2:	f000 80af 	beq.w	8026c44 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8026ae6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8026aea:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8026aee:	9e02      	ldr	r6, [sp, #8]
 8026af0:	fb0b fc0c 	mul.w	ip, fp, ip
 8026af4:	fb0b f505 	mul.w	r5, fp, r5
 8026af8:	8836      	ldrh	r6, [r6, #0]
 8026afa:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8026afe:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026b02:	9501      	str	r5, [sp, #4]
 8026b04:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8026b08:	44dc      	add	ip, fp
 8026b0a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026b0e:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8026b12:	9503      	str	r5, [sp, #12]
 8026b14:	9d01      	ldr	r5, [sp, #4]
 8026b16:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8026b1a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8026b1e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8026b22:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8026b26:	fb0a fc0c 	mul.w	ip, sl, ip
 8026b2a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8026b2e:	fb0a fa01 	mul.w	sl, sl, r1
 8026b32:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8026b36:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026b3a:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8026b3e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026b42:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8026b46:	4465      	add	r5, ip
 8026b48:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026b4c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026b50:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026b54:	fb09 fc0c 	mul.w	ip, r9, ip
 8026b58:	0a2d      	lsrs	r5, r5, #8
 8026b5a:	fb09 f904 	mul.w	r9, r9, r4
 8026b5e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026b62:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8026b66:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026b6a:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8026b6e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026b72:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026b76:	437d      	muls	r5, r7
 8026b78:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8026b7c:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8026b80:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026b84:	4461      	add	r1, ip
 8026b86:	fb08 f404 	mul.w	r4, r8, r4
 8026b8a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026b8e:	fb08 f802 	mul.w	r8, r8, r2
 8026b92:	0a09      	lsrs	r1, r1, #8
 8026b94:	0a22      	lsrs	r2, r4, #8
 8026b96:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8026b9a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026b9e:	fb07 f70a 	mul.w	r7, r7, sl
 8026ba2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026ba6:	4414      	add	r4, r2
 8026ba8:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8026bac:	0a24      	lsrs	r4, r4, #8
 8026bae:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8026bb2:	9a03      	ldr	r2, [sp, #12]
 8026bb4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026bb8:	fb02 5503 	mla	r5, r2, r3, r5
 8026bbc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026bc0:	fb04 540e 	mla	r4, r4, lr, r5
 8026bc4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8026bc8:	fb01 4100 	mla	r1, r1, r0, r4
 8026bcc:	0a09      	lsrs	r1, r1, #8
 8026bce:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8026bd2:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8026bd6:	fb03 7101 	mla	r1, r3, r1, r7
 8026bda:	9b00      	ldr	r3, [sp, #0]
 8026bdc:	fb0e 1e08 	mla	lr, lr, r8, r1
 8026be0:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8026be4:	43da      	mvns	r2, r3
 8026be6:	1233      	asrs	r3, r6, #8
 8026be8:	fb00 e101 	mla	r1, r0, r1, lr
 8026bec:	10f0      	asrs	r0, r6, #3
 8026bee:	b2d2      	uxtb	r2, r2
 8026bf0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8026bf4:	0a09      	lsrs	r1, r1, #8
 8026bf6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026bfa:	00f6      	lsls	r6, r6, #3
 8026bfc:	4353      	muls	r3, r2
 8026bfe:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8026c02:	4350      	muls	r0, r2
 8026c04:	b2f6      	uxtb	r6, r6
 8026c06:	4321      	orrs	r1, r4
 8026c08:	4356      	muls	r6, r2
 8026c0a:	1c5a      	adds	r2, r3, #1
 8026c0c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026c10:	0c0b      	lsrs	r3, r1, #16
 8026c12:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026c16:	1c42      	adds	r2, r0, #1
 8026c18:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026c1c:	0a0a      	lsrs	r2, r1, #8
 8026c1e:	021b      	lsls	r3, r3, #8
 8026c20:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8026c24:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8026c28:	00d2      	lsls	r2, r2, #3
 8026c2a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026c2e:	4313      	orrs	r3, r2
 8026c30:	1c72      	adds	r2, r6, #1
 8026c32:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8026c36:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8026c3a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8026c3e:	4319      	orrs	r1, r3
 8026c40:	9b02      	ldr	r3, [sp, #8]
 8026c42:	8019      	strh	r1, [r3, #0]
 8026c44:	b005      	add	sp, #20
 8026c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026c4a:	2500      	movs	r5, #0
 8026c4c:	e6fe      	b.n	8026a4c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8026c4e:	2100      	movs	r1, #0
 8026c50:	460d      	mov	r5, r1
 8026c52:	e706      	b.n	8026a62 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8026c54:	2100      	movs	r1, #0
 8026c56:	e704      	b.n	8026a62 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8026c58:	4631      	mov	r1, r6
 8026c5a:	e702      	b.n	8026a62 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8026c5c:	2400      	movs	r4, #0
 8026c5e:	e713      	b.n	8026a88 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8026c60:	2200      	movs	r2, #0
 8026c62:	4614      	mov	r4, r2
 8026c64:	e71a      	b.n	8026a9c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8026c66:	4602      	mov	r2, r0
 8026c68:	4604      	mov	r4, r0
 8026c6a:	e717      	b.n	8026a9c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8026c6c:	2200      	movs	r2, #0
 8026c6e:	e715      	b.n	8026a9c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8026c70:	4632      	mov	r2, r6
 8026c72:	e713      	b.n	8026a9c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08026c74 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026c78:	b09b      	sub	sp, #108	; 0x6c
 8026c7a:	9218      	str	r2, [sp, #96]	; 0x60
 8026c7c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8026c7e:	9019      	str	r0, [sp, #100]	; 0x64
 8026c80:	9116      	str	r1, [sp, #88]	; 0x58
 8026c82:	6850      	ldr	r0, [r2, #4]
 8026c84:	9307      	str	r3, [sp, #28]
 8026c86:	6812      	ldr	r2, [r2, #0]
 8026c88:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8026c8c:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8026c90:	fb00 1303 	mla	r3, r0, r3, r1
 8026c94:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026c98:	930a      	str	r3, [sp, #40]	; 0x28
 8026c9a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026c9c:	681b      	ldr	r3, [r3, #0]
 8026c9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8026ca0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026ca2:	2b00      	cmp	r3, #0
 8026ca4:	dc03      	bgt.n	8026cae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8026ca6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026ca8:	2b00      	cmp	r3, #0
 8026caa:	f340 8387 	ble.w	80273bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8026cae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026cb0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026cb4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026cb8:	1e48      	subs	r0, r1, #1
 8026cba:	1e57      	subs	r7, r2, #1
 8026cbc:	9b07      	ldr	r3, [sp, #28]
 8026cbe:	2b00      	cmp	r3, #0
 8026cc0:	f340 8166 	ble.w	8026f90 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8026cc4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026cc8:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026ccc:	d406      	bmi.n	8026cdc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8026cce:	4584      	cmp	ip, r0
 8026cd0:	da04      	bge.n	8026cdc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8026cd2:	2b00      	cmp	r3, #0
 8026cd4:	db02      	blt.n	8026cdc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8026cd6:	42bb      	cmp	r3, r7
 8026cd8:	f2c0 815b 	blt.w	8026f92 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8026cdc:	f11c 0c01 	adds.w	ip, ip, #1
 8026ce0:	f100 814b 	bmi.w	8026f7a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8026ce4:	4561      	cmp	r1, ip
 8026ce6:	f2c0 8148 	blt.w	8026f7a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8026cea:	3301      	adds	r3, #1
 8026cec:	f100 8145 	bmi.w	8026f7a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8026cf0:	429a      	cmp	r2, r3
 8026cf2:	f2c0 8142 	blt.w	8026f7a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8026cf6:	9b07      	ldr	r3, [sp, #28]
 8026cf8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8026cfa:	9317      	str	r3, [sp, #92]	; 0x5c
 8026cfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026cfe:	2b00      	cmp	r3, #0
 8026d00:	f340 8165 	ble.w	8026fce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8026d04:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8026d06:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8026d0a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026d0c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8026d10:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8026d14:	1422      	asrs	r2, r4, #16
 8026d16:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026d1a:	689b      	ldr	r3, [r3, #8]
 8026d1c:	f100 81d5 	bmi.w	80270ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8026d20:	f103 38ff 	add.w	r8, r3, #4294967295
 8026d24:	4542      	cmp	r2, r8
 8026d26:	f280 81d0 	bge.w	80270ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8026d2a:	f1bc 0f00 	cmp.w	ip, #0
 8026d2e:	f2c0 81cc 	blt.w	80270ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8026d32:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026d36:	45c4      	cmp	ip, r8
 8026d38:	f280 81c7 	bge.w	80270ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8026d3c:	b21b      	sxth	r3, r3
 8026d3e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026d40:	fb0c 2203 	mla	r2, ip, r3, r2
 8026d44:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8026d48:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8026d4c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8026d50:	2900      	cmp	r1, #0
 8026d52:	f000 8182 	beq.w	802705a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8026d56:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8026d5a:	950b      	str	r5, [sp, #44]	; 0x2c
 8026d5c:	0e2d      	lsrs	r5, r5, #24
 8026d5e:	9512      	str	r5, [sp, #72]	; 0x48
 8026d60:	b180      	cbz	r0, 8026d84 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8026d62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8026d66:	3b01      	subs	r3, #1
 8026d68:	009b      	lsls	r3, r3, #2
 8026d6a:	3304      	adds	r3, #4
 8026d6c:	eb08 0c03 	add.w	ip, r8, r3
 8026d70:	f858 3003 	ldr.w	r3, [r8, r3]
 8026d74:	9308      	str	r3, [sp, #32]
 8026d76:	0e1b      	lsrs	r3, r3, #24
 8026d78:	9310      	str	r3, [sp, #64]	; 0x40
 8026d7a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8026d7e:	930c      	str	r3, [sp, #48]	; 0x30
 8026d80:	0e1b      	lsrs	r3, r3, #24
 8026d82:	9313      	str	r3, [sp, #76]	; 0x4c
 8026d84:	b289      	uxth	r1, r1
 8026d86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8026d88:	b280      	uxth	r0, r0
 8026d8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026d8c:	fb01 f900 	mul.w	r9, r1, r0
 8026d90:	0109      	lsls	r1, r1, #4
 8026d92:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026d96:	eba1 0809 	sub.w	r8, r1, r9
 8026d9a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8026d9e:	b280      	uxth	r0, r0
 8026da0:	fa1f f888 	uxth.w	r8, r8
 8026da4:	1a09      	subs	r1, r1, r0
 8026da6:	fb08 f303 	mul.w	r3, r8, r3
 8026daa:	b289      	uxth	r1, r1
 8026dac:	fb01 330e 	mla	r3, r1, lr, r3
 8026db0:	fb00 3305 	mla	r3, r0, r5, r3
 8026db4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026db6:	fb09 3305 	mla	r3, r9, r5, r3
 8026dba:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026dbe:	2b00      	cmp	r3, #0
 8026dc0:	f000 80d2 	beq.w	8026f68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8026dc4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026dc8:	d01b      	beq.n	8026e02 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8026dca:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8026dce:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026dd2:	fb0e fa0a 	mul.w	sl, lr, sl
 8026dd6:	fb0e fe02 	mul.w	lr, lr, r2
 8026dda:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8026dde:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026de2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026de6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026dea:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026dee:	4452      	add	r2, sl
 8026df0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026df4:	0a12      	lsrs	r2, r2, #8
 8026df6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026dfa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026dfe:	ea42 020c 	orr.w	r2, r2, ip
 8026e02:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026e04:	2dff      	cmp	r5, #255	; 0xff
 8026e06:	d021      	beq.n	8026e4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8026e08:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026e0a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026e0e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026e10:	fb05 fb0b 	mul.w	fp, r5, fp
 8026e14:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026e16:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026e1a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026e1c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026e20:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026e24:	fb05 fa0a 	mul.w	sl, r5, sl
 8026e28:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026e2c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026e30:	44de      	add	lr, fp
 8026e32:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026e36:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026e3a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026e3e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026e42:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026e46:	ea4e 050a 	orr.w	r5, lr, sl
 8026e4a:	950b      	str	r5, [sp, #44]	; 0x2c
 8026e4c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026e4e:	2dff      	cmp	r5, #255	; 0xff
 8026e50:	d021      	beq.n	8026e96 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8026e52:	9d08      	ldr	r5, [sp, #32]
 8026e54:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026e58:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026e5a:	fb05 fb0b 	mul.w	fp, r5, fp
 8026e5e:	9d08      	ldr	r5, [sp, #32]
 8026e60:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8026e64:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026e66:	fb05 fa0e 	mul.w	sl, r5, lr
 8026e6a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026e6e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026e72:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026e76:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026e7a:	44de      	add	lr, fp
 8026e7c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026e80:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026e84:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026e88:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026e8c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026e90:	ea4e 050a 	orr.w	r5, lr, sl
 8026e94:	9508      	str	r5, [sp, #32]
 8026e96:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026e98:	2dff      	cmp	r5, #255	; 0xff
 8026e9a:	d021      	beq.n	8026ee0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8026e9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026e9e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026ea2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026ea4:	fb05 fb0b 	mul.w	fp, r5, fp
 8026ea8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026eaa:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026eae:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026eb0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026eb4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026eb8:	fb05 fa0a 	mul.w	sl, r5, sl
 8026ebc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026ec0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026ec4:	44de      	add	lr, fp
 8026ec6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026eca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026ece:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026ed2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026ed6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026eda:	ea4e 050a 	orr.w	r5, lr, sl
 8026ede:	950c      	str	r5, [sp, #48]	; 0x30
 8026ee0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026ee2:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8026ee6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026eea:	2bff      	cmp	r3, #255	; 0xff
 8026eec:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8026ef0:	9d08      	ldr	r5, [sp, #32]
 8026ef2:	fb08 fc0c 	mul.w	ip, r8, ip
 8026ef6:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026efa:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8026efe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026f00:	fb00 cc0e 	mla	ip, r0, lr, ip
 8026f04:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8026f08:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026f0a:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026f0e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8026f12:	fb08 f80e 	mul.w	r8, r8, lr
 8026f16:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026f1a:	fb01 8202 	mla	r2, r1, r2, r8
 8026f1e:	9908      	ldr	r1, [sp, #32]
 8026f20:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026f24:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8026f28:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026f2a:	fb00 220a 	mla	r2, r0, sl, r2
 8026f2e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8026f32:	fb09 2900 	mla	r9, r9, r0, r2
 8026f36:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026f3a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8026f3e:	ea4c 0c09 	orr.w	ip, ip, r9
 8026f42:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8026f46:	f040 8091 	bne.w	802706c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8026f4a:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8026f4e:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8026f52:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026f56:	f022 0207 	bic.w	r2, r2, #7
 8026f5a:	431a      	orrs	r2, r3
 8026f5c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8026f60:	ea4c 0c02 	orr.w	ip, ip, r2
 8026f64:	f8a7 c000 	strh.w	ip, [r7]
 8026f68:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026f6a:	3702      	adds	r7, #2
 8026f6c:	441c      	add	r4, r3
 8026f6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026f70:	441e      	add	r6, r3
 8026f72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026f74:	3b01      	subs	r3, #1
 8026f76:	9317      	str	r3, [sp, #92]	; 0x5c
 8026f78:	e6c0      	b.n	8026cfc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8026f7a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026f7c:	441c      	add	r4, r3
 8026f7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026f80:	441e      	add	r6, r3
 8026f82:	9b07      	ldr	r3, [sp, #28]
 8026f84:	3b01      	subs	r3, #1
 8026f86:	9307      	str	r3, [sp, #28]
 8026f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026f8a:	3302      	adds	r3, #2
 8026f8c:	930a      	str	r3, [sp, #40]	; 0x28
 8026f8e:	e695      	b.n	8026cbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026f90:	d024      	beq.n	8026fdc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8026f92:	9b07      	ldr	r3, [sp, #28]
 8026f94:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8026f96:	3b01      	subs	r3, #1
 8026f98:	fb00 4003 	mla	r0, r0, r3, r4
 8026f9c:	1400      	asrs	r0, r0, #16
 8026f9e:	f53f aeaa 	bmi.w	8026cf6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026fa2:	3901      	subs	r1, #1
 8026fa4:	4288      	cmp	r0, r1
 8026fa6:	f6bf aea6 	bge.w	8026cf6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026faa:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8026fac:	fb01 6303 	mla	r3, r1, r3, r6
 8026fb0:	141b      	asrs	r3, r3, #16
 8026fb2:	f53f aea0 	bmi.w	8026cf6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026fb6:	3a01      	subs	r2, #1
 8026fb8:	4293      	cmp	r3, r2
 8026fba:	f6bf ae9c 	bge.w	8026cf6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026fbe:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026fc2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8026fc6:	f1bb 0f00 	cmp.w	fp, #0
 8026fca:	f300 809a 	bgt.w	8027102 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8026fce:	9b07      	ldr	r3, [sp, #28]
 8026fd0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8026fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026fd6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8026fda:	930a      	str	r3, [sp, #40]	; 0x28
 8026fdc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026fde:	2b00      	cmp	r3, #0
 8026fe0:	f340 81ec 	ble.w	80273bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8026fe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026fe8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026fea:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026fee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026ff2:	eef0 6a62 	vmov.f32	s13, s5
 8026ff6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026ffa:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026ffe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027002:	ee16 4a90 	vmov	r4, s13
 8027006:	eef0 6a43 	vmov.f32	s13, s6
 802700a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802700e:	ee16 6a90 	vmov	r6, s13
 8027012:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027016:	ee61 7a27 	vmul.f32	s15, s2, s15
 802701a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802701e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027022:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027026:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802702a:	ee12 2a90 	vmov	r2, s5
 802702e:	eef0 2a47 	vmov.f32	s5, s14
 8027032:	fb92 f3f3 	sdiv	r3, r2, r3
 8027036:	ee13 2a10 	vmov	r2, s6
 802703a:	9327      	str	r3, [sp, #156]	; 0x9c
 802703c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802703e:	eeb0 3a67 	vmov.f32	s6, s15
 8027042:	fb92 f3f3 	sdiv	r3, r2, r3
 8027046:	9328      	str	r3, [sp, #160]	; 0xa0
 8027048:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802704a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802704c:	3b01      	subs	r3, #1
 802704e:	9316      	str	r3, [sp, #88]	; 0x58
 8027050:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027052:	bf08      	it	eq
 8027054:	4613      	moveq	r3, r2
 8027056:	9307      	str	r3, [sp, #28]
 8027058:	e622      	b.n	8026ca0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 802705a:	2800      	cmp	r0, #0
 802705c:	f43f ae92 	beq.w	8026d84 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8027060:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8027064:	9308      	str	r3, [sp, #32]
 8027066:	0e1b      	lsrs	r3, r3, #24
 8027068:	9310      	str	r3, [sp, #64]	; 0x40
 802706a:	e68b      	b.n	8026d84 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802706c:	8839      	ldrh	r1, [r7, #0]
 802706e:	43db      	mvns	r3, r3
 8027070:	4dd4      	ldr	r5, [pc, #848]	; (80273c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8027072:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8027076:	fa5f f883 	uxtb.w	r8, r3
 802707a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802707e:	10c8      	asrs	r0, r1, #3
 8027080:	00cb      	lsls	r3, r1, #3
 8027082:	fb0e fe08 	mul.w	lr, lr, r8
 8027086:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802708a:	b2db      	uxtb	r3, r3
 802708c:	f10e 0101 	add.w	r1, lr, #1
 8027090:	fb00 f008 	mul.w	r0, r0, r8
 8027094:	fb03 f308 	mul.w	r3, r3, r8
 8027098:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 802709c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80270a0:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 80270a4:	f100 0e01 	add.w	lr, r0, #1
 80270a8:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 80270ac:	b2c9      	uxtb	r1, r1
 80270ae:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80270b2:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 80270b6:	00d2      	lsls	r2, r2, #3
 80270b8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80270bc:	430a      	orrs	r2, r1
 80270be:	1c59      	adds	r1, r3, #1
 80270c0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80270c4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80270c8:	e748      	b.n	8026f5c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 80270ca:	f112 0801 	adds.w	r8, r2, #1
 80270ce:	f53f af4b 	bmi.w	8026f68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80270d2:	4543      	cmp	r3, r8
 80270d4:	f6ff af48 	blt.w	8026f68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80270d8:	f11c 0801 	adds.w	r8, ip, #1
 80270dc:	f53f af44 	bmi.w	8026f68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80270e0:	45c6      	cmp	lr, r8
 80270e2:	f6ff af41 	blt.w	8026f68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80270e6:	b21b      	sxth	r3, r3
 80270e8:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80270ec:	fa0f f28e 	sxth.w	r2, lr
 80270f0:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80270f4:	9200      	str	r2, [sp, #0]
 80270f6:	4639      	mov	r1, r7
 80270f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80270fa:	9819      	ldr	r0, [sp, #100]	; 0x64
 80270fc:	f7ff fc88 	bl	8026a10 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8027100:	e732      	b.n	8026f68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027102:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027104:	1421      	asrs	r1, r4, #16
 8027106:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027108:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802710c:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8027110:	1433      	asrs	r3, r6, #16
 8027112:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027116:	fb07 1303 	mla	r3, r7, r3, r1
 802711a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802711c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8027120:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027124:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027128:	2a00      	cmp	r2, #0
 802712a:	f000 8108 	beq.w	802733e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 802712e:	684d      	ldr	r5, [r1, #4]
 8027130:	950d      	str	r5, [sp, #52]	; 0x34
 8027132:	0e2d      	lsrs	r5, r5, #24
 8027134:	9514      	str	r5, [sp, #80]	; 0x50
 8027136:	b178      	cbz	r0, 8027158 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8027138:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 802713c:	3f01      	subs	r7, #1
 802713e:	00bf      	lsls	r7, r7, #2
 8027140:	3704      	adds	r7, #4
 8027142:	eb01 0e07 	add.w	lr, r1, r7
 8027146:	59c9      	ldr	r1, [r1, r7]
 8027148:	9109      	str	r1, [sp, #36]	; 0x24
 802714a:	0e09      	lsrs	r1, r1, #24
 802714c:	9111      	str	r1, [sp, #68]	; 0x44
 802714e:	f8de 1004 	ldr.w	r1, [lr, #4]
 8027152:	910e      	str	r1, [sp, #56]	; 0x38
 8027154:	0e09      	lsrs	r1, r1, #24
 8027156:	9115      	str	r1, [sp, #84]	; 0x54
 8027158:	b292      	uxth	r2, r2
 802715a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802715c:	b280      	uxth	r0, r0
 802715e:	fb02 f900 	mul.w	r9, r2, r0
 8027162:	0112      	lsls	r2, r2, #4
 8027164:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8027168:	eba2 0e09 	sub.w	lr, r2, r9
 802716c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8027170:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027172:	b280      	uxth	r0, r0
 8027174:	fa1f fe8e 	uxth.w	lr, lr
 8027178:	1a09      	subs	r1, r1, r0
 802717a:	fb0e f202 	mul.w	r2, lr, r2
 802717e:	b289      	uxth	r1, r1
 8027180:	fb01 220c 	mla	r2, r1, ip, r2
 8027184:	fb00 2205 	mla	r2, r0, r5, r2
 8027188:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802718a:	fb09 2205 	mla	r2, r9, r5, r2
 802718e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027192:	2a00      	cmp	r2, #0
 8027194:	f000 80ca 	beq.w	802732c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8027198:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802719c:	d019      	beq.n	80271d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 802719e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80271a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80271a6:	fb0c fa0a 	mul.w	sl, ip, sl
 80271aa:	fb0c fc03 	mul.w	ip, ip, r3
 80271ae:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80271b2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80271b6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80271ba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80271be:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80271c2:	4453      	add	r3, sl
 80271c4:	0a3f      	lsrs	r7, r7, #8
 80271c6:	0a1b      	lsrs	r3, r3, #8
 80271c8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80271cc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80271d0:	433b      	orrs	r3, r7
 80271d2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80271d4:	2dff      	cmp	r5, #255	; 0xff
 80271d6:	d020      	beq.n	802721a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 80271d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80271da:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80271de:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80271e0:	436f      	muls	r7, r5
 80271e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80271e4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80271e8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80271ec:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80271ee:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80271f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80271f6:	fb05 fa0a 	mul.w	sl, r5, sl
 80271fa:	44bc      	add	ip, r7
 80271fc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027200:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027204:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027208:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802720c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027210:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027214:	ea4c 050a 	orr.w	r5, ip, sl
 8027218:	950d      	str	r5, [sp, #52]	; 0x34
 802721a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802721c:	2dff      	cmp	r5, #255	; 0xff
 802721e:	d020      	beq.n	8027262 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8027220:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027222:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027226:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027228:	436f      	muls	r7, r5
 802722a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802722c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8027230:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027232:	fb05 fa0c 	mul.w	sl, r5, ip
 8027236:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802723a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802723e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027242:	44bc      	add	ip, r7
 8027244:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027248:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802724c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027250:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027254:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027258:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802725c:	ea4c 050a 	orr.w	r5, ip, sl
 8027260:	9509      	str	r5, [sp, #36]	; 0x24
 8027262:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027264:	2dff      	cmp	r5, #255	; 0xff
 8027266:	d020      	beq.n	80272aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8027268:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802726a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802726e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027270:	436f      	muls	r7, r5
 8027272:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027274:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027278:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802727c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802727e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027282:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027286:	fb05 fa0a 	mul.w	sl, r5, sl
 802728a:	44bc      	add	ip, r7
 802728c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027290:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027294:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027298:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802729c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80272a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80272a4:	ea4c 050a 	orr.w	r5, ip, sl
 80272a8:	950e      	str	r5, [sp, #56]	; 0x38
 80272aa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80272ac:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80272b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80272b4:	2aff      	cmp	r2, #255	; 0xff
 80272b6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80272ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80272bc:	fb0e f707 	mul.w	r7, lr, r7
 80272c0:	fb01 770c 	mla	r7, r1, ip, r7
 80272c4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80272c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80272ca:	fb00 770c 	mla	r7, r0, ip, r7
 80272ce:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80272d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80272d4:	fb09 770c 	mla	r7, r9, ip, r7
 80272d8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80272dc:	fb0e fe0c 	mul.w	lr, lr, ip
 80272e0:	ea4f 2717 	mov.w	r7, r7, lsr #8
 80272e4:	fb01 e303 	mla	r3, r1, r3, lr
 80272e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80272ea:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80272ee:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80272f2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80272f4:	fb00 330a 	mla	r3, r0, sl, r3
 80272f8:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80272fc:	fb09 3c0c 	mla	ip, r9, ip, r3
 8027300:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027304:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027308:	ea47 070c 	orr.w	r7, r7, ip
 802730c:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8027310:	d11e      	bne.n	8027350 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8027312:	097a      	lsrs	r2, r7, #5
 8027314:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8027318:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802731c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027320:	f023 0307 	bic.w	r3, r3, #7
 8027324:	4313      	orrs	r3, r2
 8027326:	431f      	orrs	r7, r3
 8027328:	f8a8 7000 	strh.w	r7, [r8]
 802732c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802732e:	f108 0802 	add.w	r8, r8, #2
 8027332:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027336:	441c      	add	r4, r3
 8027338:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802733a:	441e      	add	r6, r3
 802733c:	e643      	b.n	8026fc6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 802733e:	2800      	cmp	r0, #0
 8027340:	f43f af0a 	beq.w	8027158 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8027344:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8027348:	9109      	str	r1, [sp, #36]	; 0x24
 802734a:	0e09      	lsrs	r1, r1, #24
 802734c:	9111      	str	r1, [sp, #68]	; 0x44
 802734e:	e703      	b.n	8027158 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8027350:	f8b8 1000 	ldrh.w	r1, [r8]
 8027354:	43d2      	mvns	r2, r2
 8027356:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802735a:	fa5f fe82 	uxtb.w	lr, r2
 802735e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8027362:	10c8      	asrs	r0, r1, #3
 8027364:	00ca      	lsls	r2, r1, #3
 8027366:	fb0c fc0e 	mul.w	ip, ip, lr
 802736a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802736e:	b2d2      	uxtb	r2, r2
 8027370:	f10c 0101 	add.w	r1, ip, #1
 8027374:	fb00 f00e 	mul.w	r0, r0, lr
 8027378:	fb02 f20e 	mul.w	r2, r2, lr
 802737c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8027380:	0c39      	lsrs	r1, r7, #16
 8027382:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8027386:	490f      	ldr	r1, [pc, #60]	; (80273c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8027388:	fa5f fc8c 	uxtb.w	ip, ip
 802738c:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8027390:	1c41      	adds	r1, r0, #1
 8027392:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8027396:	1c51      	adds	r1, r2, #1
 8027398:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802739c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80273a0:	00c0      	lsls	r0, r0, #3
 80273a2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80273a6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80273aa:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80273ae:	ea4c 0c00 	orr.w	ip, ip, r0
 80273b2:	ea47 0c0c 	orr.w	ip, r7, ip
 80273b6:	f8a8 c000 	strh.w	ip, [r8]
 80273ba:	e7b7      	b.n	802732c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80273bc:	b01b      	add	sp, #108	; 0x6c
 80273be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80273c2:	bf00      	nop
 80273c4:	fffff800 	.word	0xfffff800

080273c8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 80273c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80273cc:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 80273d0:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80273d4:	2d00      	cmp	r5, #0
 80273d6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80273da:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80273de:	fb05 0e03 	mla	lr, r5, r3, r0
 80273e2:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80273e6:	f2c0 808c 	blt.w	8027502 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 80273ea:	45a9      	cmp	r9, r5
 80273ec:	f340 8089 	ble.w	8027502 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 80273f0:	2800      	cmp	r0, #0
 80273f2:	f2c0 8084 	blt.w	80274fe <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 80273f6:	4580      	cmp	r8, r0
 80273f8:	f340 8081 	ble.w	80274fe <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 80273fc:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8027400:	f01e 0f01 	tst.w	lr, #1
 8027404:	5d16      	ldrb	r6, [r2, r4]
 8027406:	bf0c      	ite	eq
 8027408:	f006 060f 	andeq.w	r6, r6, #15
 802740c:	1136      	asrne	r6, r6, #4
 802740e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027412:	b2f6      	uxtb	r6, r6
 8027414:	1c44      	adds	r4, r0, #1
 8027416:	d477      	bmi.n	8027508 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8027418:	45a0      	cmp	r8, r4
 802741a:	dd75      	ble.n	8027508 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802741c:	2f00      	cmp	r7, #0
 802741e:	d075      	beq.n	802750c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8027420:	f10e 0a01 	add.w	sl, lr, #1
 8027424:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8027428:	f01a 0f01 	tst.w	sl, #1
 802742c:	5d14      	ldrb	r4, [r2, r4]
 802742e:	bf0c      	ite	eq
 8027430:	f004 040f 	andeq.w	r4, r4, #15
 8027434:	1124      	asrne	r4, r4, #4
 8027436:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802743a:	b2e4      	uxtb	r4, r4
 802743c:	3501      	adds	r5, #1
 802743e:	d469      	bmi.n	8027514 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8027440:	45a9      	cmp	r9, r5
 8027442:	dd67      	ble.n	8027514 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8027444:	f1bc 0f00 	cmp.w	ip, #0
 8027448:	d067      	beq.n	802751a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 802744a:	2800      	cmp	r0, #0
 802744c:	db60      	blt.n	8027510 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802744e:	4580      	cmp	r8, r0
 8027450:	dd5e      	ble.n	8027510 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8027452:	eb03 090e 	add.w	r9, r3, lr
 8027456:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802745a:	f019 0f01 	tst.w	r9, #1
 802745e:	5d55      	ldrb	r5, [r2, r5]
 8027460:	bf0c      	ite	eq
 8027462:	f005 050f 	andeq.w	r5, r5, #15
 8027466:	112d      	asrne	r5, r5, #4
 8027468:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802746c:	b2ed      	uxtb	r5, r5
 802746e:	3001      	adds	r0, #1
 8027470:	d456      	bmi.n	8027520 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8027472:	4580      	cmp	r8, r0
 8027474:	dd54      	ble.n	8027520 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8027476:	2f00      	cmp	r7, #0
 8027478:	d054      	beq.n	8027524 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 802747a:	3301      	adds	r3, #1
 802747c:	449e      	add	lr, r3
 802747e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027482:	f01e 0f01 	tst.w	lr, #1
 8027486:	5cd0      	ldrb	r0, [r2, r3]
 8027488:	bf0c      	ite	eq
 802748a:	f000 000f 	andeq.w	r0, r0, #15
 802748e:	1100      	asrne	r0, r0, #4
 8027490:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027494:	b2c3      	uxtb	r3, r0
 8027496:	b2ba      	uxth	r2, r7
 8027498:	fa1f fc8c 	uxth.w	ip, ip
 802749c:	fb02 f00c 	mul.w	r0, r2, ip
 80274a0:	0112      	lsls	r2, r2, #4
 80274a2:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80274a6:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80274aa:	1a12      	subs	r2, r2, r0
 80274ac:	fa1f fc8c 	uxth.w	ip, ip
 80274b0:	b292      	uxth	r2, r2
 80274b2:	eba7 070c 	sub.w	r7, r7, ip
 80274b6:	4362      	muls	r2, r4
 80274b8:	b2bf      	uxth	r7, r7
 80274ba:	fb06 2207 	mla	r2, r6, r7, r2
 80274be:	fb0c 2505 	mla	r5, ip, r5, r2
 80274c2:	fb00 5303 	mla	r3, r0, r3, r5
 80274c6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80274ca:	b1b3      	cbz	r3, 80274fa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 80274cc:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80274d0:	435a      	muls	r2, r3
 80274d2:	1c53      	adds	r3, r2, #1
 80274d4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80274d8:	4a2d      	ldr	r2, [pc, #180]	; (8027590 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 80274da:	121b      	asrs	r3, r3, #8
 80274dc:	6812      	ldr	r2, [r2, #0]
 80274de:	2bff      	cmp	r3, #255	; 0xff
 80274e0:	ea4f 2612 	mov.w	r6, r2, lsr #8
 80274e4:	d120      	bne.n	8027528 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 80274e6:	0950      	lsrs	r0, r2, #5
 80274e8:	4b2a      	ldr	r3, [pc, #168]	; (8027594 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 80274ea:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80274ee:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80274f2:	4033      	ands	r3, r6
 80274f4:	4318      	orrs	r0, r3
 80274f6:	4302      	orrs	r2, r0
 80274f8:	800a      	strh	r2, [r1, #0]
 80274fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80274fe:	2600      	movs	r6, #0
 8027500:	e788      	b.n	8027414 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8027502:	2400      	movs	r4, #0
 8027504:	4626      	mov	r6, r4
 8027506:	e799      	b.n	802743c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8027508:	2400      	movs	r4, #0
 802750a:	e797      	b.n	802743c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802750c:	463c      	mov	r4, r7
 802750e:	e795      	b.n	802743c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8027510:	2500      	movs	r5, #0
 8027512:	e7ac      	b.n	802746e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8027514:	2300      	movs	r3, #0
 8027516:	461d      	mov	r5, r3
 8027518:	e7bd      	b.n	8027496 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802751a:	4663      	mov	r3, ip
 802751c:	4665      	mov	r5, ip
 802751e:	e7ba      	b.n	8027496 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8027520:	2300      	movs	r3, #0
 8027522:	e7b8      	b.n	8027496 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8027524:	463b      	mov	r3, r7
 8027526:	e7b6      	b.n	8027496 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8027528:	880d      	ldrh	r5, [r1, #0]
 802752a:	b29f      	uxth	r7, r3
 802752c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8027530:	43db      	mvns	r3, r3
 8027532:	122c      	asrs	r4, r5, #8
 8027534:	fb10 f007 	smulbb	r0, r0, r7
 8027538:	b2db      	uxtb	r3, r3
 802753a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802753e:	b2f6      	uxtb	r6, r6
 8027540:	b2d2      	uxtb	r2, r2
 8027542:	fb04 0403 	mla	r4, r4, r3, r0
 8027546:	10e8      	asrs	r0, r5, #3
 8027548:	fb12 f207 	smulbb	r2, r2, r7
 802754c:	00ed      	lsls	r5, r5, #3
 802754e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027552:	b2a4      	uxth	r4, r4
 8027554:	fb16 f607 	smulbb	r6, r6, r7
 8027558:	b2ed      	uxtb	r5, r5
 802755a:	fb00 6603 	mla	r6, r0, r3, r6
 802755e:	fb05 2303 	mla	r3, r5, r3, r2
 8027562:	b2b0      	uxth	r0, r6
 8027564:	b29a      	uxth	r2, r3
 8027566:	1c63      	adds	r3, r4, #1
 8027568:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802756c:	1c53      	adds	r3, r2, #1
 802756e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027572:	1c42      	adds	r2, r0, #1
 8027574:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8027578:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802757c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027580:	0940      	lsrs	r0, r0, #5
 8027582:	4323      	orrs	r3, r4
 8027584:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027588:	4303      	orrs	r3, r0
 802758a:	800b      	strh	r3, [r1, #0]
 802758c:	e7b5      	b.n	80274fa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802758e:	bf00      	nop
 8027590:	20027cb8 	.word	0x20027cb8
 8027594:	00fff800 	.word	0x00fff800

08027598 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802759c:	b097      	sub	sp, #92	; 0x5c
 802759e:	9214      	str	r2, [sp, #80]	; 0x50
 80275a0:	9309      	str	r3, [sp, #36]	; 0x24
 80275a2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80275a4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80275a8:	9015      	str	r0, [sp, #84]	; 0x54
 80275aa:	910d      	str	r1, [sp, #52]	; 0x34
 80275ac:	6850      	ldr	r0, [r2, #4]
 80275ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80275b0:	6812      	ldr	r2, [r2, #0]
 80275b2:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80275b6:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 80275ba:	fb00 1303 	mla	r3, r0, r3, r1
 80275be:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80275c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80275c4:	689b      	ldr	r3, [r3, #8]
 80275c6:	3301      	adds	r3, #1
 80275c8:	f023 0301 	bic.w	r3, r3, #1
 80275cc:	930a      	str	r3, [sp, #40]	; 0x28
 80275ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80275d0:	681f      	ldr	r7, [r3, #0]
 80275d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80275d4:	2b00      	cmp	r3, #0
 80275d6:	dc03      	bgt.n	80275e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80275d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80275da:	2b00      	cmp	r3, #0
 80275dc:	f340 8289 	ble.w	8027af2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 80275e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80275e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80275e6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80275ea:	1e48      	subs	r0, r1, #1
 80275ec:	f102 3cff 	add.w	ip, r2, #4294967295
 80275f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80275f2:	2b00      	cmp	r3, #0
 80275f4:	f340 80c5 	ble.w	8027782 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80275f8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80275fc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027600:	d406      	bmi.n	8027610 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027602:	4586      	cmp	lr, r0
 8027604:	da04      	bge.n	8027610 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027606:	2b00      	cmp	r3, #0
 8027608:	db02      	blt.n	8027610 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802760a:	4563      	cmp	r3, ip
 802760c:	f2c0 80ba 	blt.w	8027784 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8027610:	f11e 0e01 	adds.w	lr, lr, #1
 8027614:	f100 80ab 	bmi.w	802776e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8027618:	4571      	cmp	r1, lr
 802761a:	f2c0 80a8 	blt.w	802776e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802761e:	3301      	adds	r3, #1
 8027620:	f100 80a5 	bmi.w	802776e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8027624:	429a      	cmp	r2, r3
 8027626:	f2c0 80a2 	blt.w	802776e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802762a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802762c:	46c8      	mov	r8, r9
 802762e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8027632:	930e      	str	r3, [sp, #56]	; 0x38
 8027634:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027636:	2b00      	cmp	r3, #0
 8027638:	f340 80c4 	ble.w	80277c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 802763c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802763e:	1430      	asrs	r0, r6, #16
 8027640:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027644:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027648:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802764c:	1423      	asrs	r3, r4, #16
 802764e:	f100 814f 	bmi.w	80278f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8027652:	f10c 3bff 	add.w	fp, ip, #4294967295
 8027656:	455b      	cmp	r3, fp
 8027658:	f280 814a 	bge.w	80278f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802765c:	2800      	cmp	r0, #0
 802765e:	f2c0 8147 	blt.w	80278f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8027662:	f10e 3bff 	add.w	fp, lr, #4294967295
 8027666:	4558      	cmp	r0, fp
 8027668:	f280 8142 	bge.w	80278f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802766c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802766e:	fb00 3305 	mla	r3, r0, r5, r3
 8027672:	0858      	lsrs	r0, r3, #1
 8027674:	07dd      	lsls	r5, r3, #31
 8027676:	f817 c000 	ldrb.w	ip, [r7, r0]
 802767a:	bf54      	ite	pl
 802767c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027680:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027684:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027688:	fa5f fc8c 	uxtb.w	ip, ip
 802768c:	2a00      	cmp	r2, #0
 802768e:	f000 80dd 	beq.w	802784c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8027692:	1c58      	adds	r0, r3, #1
 8027694:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8027698:	07c0      	lsls	r0, r0, #31
 802769a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802769e:	bf54      	ite	pl
 80276a0:	f00e 0e0f 	andpl.w	lr, lr, #15
 80276a4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80276a8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80276ac:	fa5f f08e 	uxtb.w	r0, lr
 80276b0:	9010      	str	r0, [sp, #64]	; 0x40
 80276b2:	b1d9      	cbz	r1, 80276ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80276b4:	4453      	add	r3, sl
 80276b6:	0858      	lsrs	r0, r3, #1
 80276b8:	07dd      	lsls	r5, r3, #31
 80276ba:	f103 0301 	add.w	r3, r3, #1
 80276be:	5c38      	ldrb	r0, [r7, r0]
 80276c0:	bf54      	ite	pl
 80276c2:	f000 000f 	andpl.w	r0, r0, #15
 80276c6:	1100      	asrmi	r0, r0, #4
 80276c8:	07dd      	lsls	r5, r3, #31
 80276ca:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80276ce:	b2c0      	uxtb	r0, r0
 80276d0:	900b      	str	r0, [sp, #44]	; 0x2c
 80276d2:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80276d6:	f817 e000 	ldrb.w	lr, [r7, r0]
 80276da:	bf54      	ite	pl
 80276dc:	f00e 030f 	andpl.w	r3, lr, #15
 80276e0:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80276e4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80276e8:	b2db      	uxtb	r3, r3
 80276ea:	9311      	str	r3, [sp, #68]	; 0x44
 80276ec:	b292      	uxth	r2, r2
 80276ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80276f0:	b289      	uxth	r1, r1
 80276f2:	fb02 f301 	mul.w	r3, r2, r1
 80276f6:	0112      	lsls	r2, r2, #4
 80276f8:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80276fc:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8027700:	1ad2      	subs	r2, r2, r3
 8027702:	b289      	uxth	r1, r1
 8027704:	b292      	uxth	r2, r2
 8027706:	1a40      	subs	r0, r0, r1
 8027708:	436a      	muls	r2, r5
 802770a:	b280      	uxth	r0, r0
 802770c:	fb0c 2c00 	mla	ip, ip, r0, r2
 8027710:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027712:	fb01 c102 	mla	r1, r1, r2, ip
 8027716:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027718:	fb03 1302 	mla	r3, r3, r2, r1
 802771c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027720:	b1db      	cbz	r3, 802775a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027722:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027724:	4353      	muls	r3, r2
 8027726:	1c5a      	adds	r2, r3, #1
 8027728:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802772c:	4ac6      	ldr	r2, [pc, #792]	; (8027a48 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802772e:	121b      	asrs	r3, r3, #8
 8027730:	6812      	ldr	r2, [r2, #0]
 8027732:	2bff      	cmp	r3, #255	; 0xff
 8027734:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8027738:	f040 8099 	bne.w	802786e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 802773c:	0953      	lsrs	r3, r2, #5
 802773e:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8027742:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027746:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802774a:	f02c 0c07 	bic.w	ip, ip, #7
 802774e:	ea43 0c0c 	orr.w	ip, r3, ip
 8027752:	ea4c 0202 	orr.w	r2, ip, r2
 8027756:	f8a8 2000 	strh.w	r2, [r8]
 802775a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802775c:	f108 0802 	add.w	r8, r8, #2
 8027760:	441c      	add	r4, r3
 8027762:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027764:	441e      	add	r6, r3
 8027766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027768:	3b01      	subs	r3, #1
 802776a:	930e      	str	r3, [sp, #56]	; 0x38
 802776c:	e762      	b.n	8027634 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802776e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027770:	f109 0902 	add.w	r9, r9, #2
 8027774:	441c      	add	r4, r3
 8027776:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027778:	441e      	add	r6, r3
 802777a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802777c:	3b01      	subs	r3, #1
 802777e:	9309      	str	r3, [sp, #36]	; 0x24
 8027780:	e736      	b.n	80275f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8027782:	d024      	beq.n	80277ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8027784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027786:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8027788:	3b01      	subs	r3, #1
 802778a:	fb00 4003 	mla	r0, r0, r3, r4
 802778e:	1400      	asrs	r0, r0, #16
 8027790:	f53f af4b 	bmi.w	802762a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027794:	3901      	subs	r1, #1
 8027796:	4288      	cmp	r0, r1
 8027798:	f6bf af47 	bge.w	802762a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802779c:	9924      	ldr	r1, [sp, #144]	; 0x90
 802779e:	fb01 6303 	mla	r3, r1, r3, r6
 80277a2:	141b      	asrs	r3, r3, #16
 80277a4:	f53f af41 	bmi.w	802762a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80277a8:	3a01      	subs	r2, #1
 80277aa:	4293      	cmp	r3, r2
 80277ac:	f6bf af3d 	bge.w	802762a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80277b0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80277b4:	46c8      	mov	r8, r9
 80277b6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80277ba:	930e      	str	r3, [sp, #56]	; 0x38
 80277bc:	f1bb 0f00 	cmp.w	fp, #0
 80277c0:	f300 80b7 	bgt.w	8027932 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 80277c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80277c6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80277ca:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80277ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80277d0:	2b00      	cmp	r3, #0
 80277d2:	f340 818e 	ble.w	8027af2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 80277d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80277da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80277dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80277e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80277e4:	eef0 6a62 	vmov.f32	s13, s5
 80277e8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80277ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 80277f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80277f4:	ee16 4a90 	vmov	r4, s13
 80277f8:	eef0 6a43 	vmov.f32	s13, s6
 80277fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027800:	ee16 6a90 	vmov	r6, s13
 8027804:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027808:	ee61 7a27 	vmul.f32	s15, s2, s15
 802780c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027810:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027814:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027818:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802781c:	ee12 2a90 	vmov	r2, s5
 8027820:	eef0 2a47 	vmov.f32	s5, s14
 8027824:	fb92 f3f3 	sdiv	r3, r2, r3
 8027828:	ee13 2a10 	vmov	r2, s6
 802782c:	9323      	str	r3, [sp, #140]	; 0x8c
 802782e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027830:	eeb0 3a67 	vmov.f32	s6, s15
 8027834:	fb92 f3f3 	sdiv	r3, r2, r3
 8027838:	9324      	str	r3, [sp, #144]	; 0x90
 802783a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802783c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802783e:	3b01      	subs	r3, #1
 8027840:	930d      	str	r3, [sp, #52]	; 0x34
 8027842:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027844:	bf08      	it	eq
 8027846:	4613      	moveq	r3, r2
 8027848:	9309      	str	r3, [sp, #36]	; 0x24
 802784a:	e6c2      	b.n	80275d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802784c:	2900      	cmp	r1, #0
 802784e:	f43f af4d 	beq.w	80276ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8027852:	eb0a 0003 	add.w	r0, sl, r3
 8027856:	0843      	lsrs	r3, r0, #1
 8027858:	07c0      	lsls	r0, r0, #31
 802785a:	5cfb      	ldrb	r3, [r7, r3]
 802785c:	bf54      	ite	pl
 802785e:	f003 030f 	andpl.w	r3, r3, #15
 8027862:	111b      	asrmi	r3, r3, #4
 8027864:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027868:	b2db      	uxtb	r3, r3
 802786a:	930b      	str	r3, [sp, #44]	; 0x2c
 802786c:	e73e      	b.n	80276ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802786e:	f8b8 e000 	ldrh.w	lr, [r8]
 8027872:	fa1f fb83 	uxth.w	fp, r3
 8027876:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802787a:	43db      	mvns	r3, r3
 802787c:	ea4f 202e 	mov.w	r0, lr, asr #8
 8027880:	fb11 f10b 	smulbb	r1, r1, fp
 8027884:	b2db      	uxtb	r3, r3
 8027886:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802788a:	fa5f fc8c 	uxtb.w	ip, ip
 802788e:	b2d2      	uxtb	r2, r2
 8027890:	fb00 1003 	mla	r0, r0, r3, r1
 8027894:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8027898:	fb1c fc0b 	smulbb	ip, ip, fp
 802789c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80278a0:	b280      	uxth	r0, r0
 80278a2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80278a6:	fb12 fb0b 	smulbb	fp, r2, fp
 80278aa:	fa5f fe8e 	uxtb.w	lr, lr
 80278ae:	fb01 cc03 	mla	ip, r1, r3, ip
 80278b2:	fb0e bb03 	mla	fp, lr, r3, fp
 80278b6:	1c43      	adds	r3, r0, #1
 80278b8:	fa1f fc8c 	uxth.w	ip, ip
 80278bc:	fa1f fb8b 	uxth.w	fp, fp
 80278c0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80278c4:	f10c 0101 	add.w	r1, ip, #1
 80278c8:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 80278cc:	f10b 0001 	add.w	r0, fp, #1
 80278d0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80278d4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80278d8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80278dc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80278e0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80278e4:	4318      	orrs	r0, r3
 80278e6:	ea40 000c 	orr.w	r0, r0, ip
 80278ea:	f8a8 0000 	strh.w	r0, [r8]
 80278ee:	e734      	b.n	802775a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80278f0:	f113 0b01 	adds.w	fp, r3, #1
 80278f4:	f53f af31 	bmi.w	802775a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80278f8:	45dc      	cmp	ip, fp
 80278fa:	f6ff af2e 	blt.w	802775a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80278fe:	f110 0b01 	adds.w	fp, r0, #1
 8027902:	f53f af2a 	bmi.w	802775a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027906:	45de      	cmp	lr, fp
 8027908:	f6ff af27 	blt.w	802775a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802790c:	9302      	str	r3, [sp, #8]
 802790e:	fa0f f38e 	sxth.w	r3, lr
 8027912:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027914:	9301      	str	r3, [sp, #4]
 8027916:	fa0f f38c 	sxth.w	r3, ip
 802791a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802791e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8027922:	9300      	str	r3, [sp, #0]
 8027924:	463a      	mov	r2, r7
 8027926:	4653      	mov	r3, sl
 8027928:	4641      	mov	r1, r8
 802792a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802792c:	f7ff fd4c 	bl	80273c8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8027930:	e713      	b.n	802775a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027932:	1422      	asrs	r2, r4, #16
 8027934:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8027936:	1433      	asrs	r3, r6, #16
 8027938:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802793c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027940:	fb05 2303 	mla	r3, r5, r3, r2
 8027944:	085a      	lsrs	r2, r3, #1
 8027946:	07dd      	lsls	r5, r3, #31
 8027948:	5cba      	ldrb	r2, [r7, r2]
 802794a:	bf54      	ite	pl
 802794c:	f002 020f 	andpl.w	r2, r2, #15
 8027950:	1112      	asrmi	r2, r2, #4
 8027952:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8027956:	b2d2      	uxtb	r2, r2
 8027958:	2900      	cmp	r1, #0
 802795a:	d077      	beq.n	8027a4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802795c:	f103 0e01 	add.w	lr, r3, #1
 8027960:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8027964:	f01e 0f01 	tst.w	lr, #1
 8027968:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802796c:	bf0c      	ite	eq
 802796e:	f00c 0c0f 	andeq.w	ip, ip, #15
 8027972:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8027976:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802797a:	fa5f f58c 	uxtb.w	r5, ip
 802797e:	9512      	str	r5, [sp, #72]	; 0x48
 8027980:	b308      	cbz	r0, 80279c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8027982:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027984:	442b      	add	r3, r5
 8027986:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802798a:	07dd      	lsls	r5, r3, #31
 802798c:	f103 0301 	add.w	r3, r3, #1
 8027990:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027994:	bf54      	ite	pl
 8027996:	f00c 0c0f 	andpl.w	ip, ip, #15
 802799a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802799e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80279a2:	fa5f f58c 	uxtb.w	r5, ip
 80279a6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80279aa:	950c      	str	r5, [sp, #48]	; 0x30
 80279ac:	07dd      	lsls	r5, r3, #31
 80279ae:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80279b2:	bf54      	ite	pl
 80279b4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80279b8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80279bc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80279c0:	fa5f f38c 	uxtb.w	r3, ip
 80279c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80279c6:	b289      	uxth	r1, r1
 80279c8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80279ca:	b280      	uxth	r0, r0
 80279cc:	fb01 f300 	mul.w	r3, r1, r0
 80279d0:	0109      	lsls	r1, r1, #4
 80279d2:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80279d6:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80279da:	1ac9      	subs	r1, r1, r3
 80279dc:	b280      	uxth	r0, r0
 80279de:	b289      	uxth	r1, r1
 80279e0:	ebac 0c00 	sub.w	ip, ip, r0
 80279e4:	4369      	muls	r1, r5
 80279e6:	fa1f fc8c 	uxth.w	ip, ip
 80279ea:	fb02 120c 	mla	r2, r2, ip, r1
 80279ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80279f0:	fb00 2001 	mla	r0, r0, r1, r2
 80279f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80279f6:	fb03 0302 	mla	r3, r3, r2, r0
 80279fa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80279fe:	b1d3      	cbz	r3, 8027a36 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8027a00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027a02:	4353      	muls	r3, r2
 8027a04:	1c5a      	adds	r2, r3, #1
 8027a06:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027a0a:	4a0f      	ldr	r2, [pc, #60]	; (8027a48 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8027a0c:	121b      	asrs	r3, r3, #8
 8027a0e:	6812      	ldr	r2, [r2, #0]
 8027a10:	2bff      	cmp	r3, #255	; 0xff
 8027a12:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8027a16:	d12d      	bne.n	8027a74 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8027a18:	0953      	lsrs	r3, r2, #5
 8027a1a:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8027a1e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027a22:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027a26:	f02c 0c07 	bic.w	ip, ip, #7
 8027a2a:	ea43 0c0c 	orr.w	ip, r3, ip
 8027a2e:	ea4c 0202 	orr.w	r2, ip, r2
 8027a32:	f8a8 2000 	strh.w	r2, [r8]
 8027a36:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027a38:	f108 0802 	add.w	r8, r8, #2
 8027a3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027a40:	441c      	add	r4, r3
 8027a42:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027a44:	441e      	add	r6, r3
 8027a46:	e6b9      	b.n	80277bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027a48:	20027cb8 	.word	0x20027cb8
 8027a4c:	2800      	cmp	r0, #0
 8027a4e:	d0ba      	beq.n	80279c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8027a50:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027a52:	442b      	add	r3, r5
 8027a54:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027a58:	07db      	lsls	r3, r3, #31
 8027a5a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027a5e:	bf54      	ite	pl
 8027a60:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027a64:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027a68:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027a6c:	fa5f f38c 	uxtb.w	r3, ip
 8027a70:	930c      	str	r3, [sp, #48]	; 0x30
 8027a72:	e7a8      	b.n	80279c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8027a74:	f8b8 e000 	ldrh.w	lr, [r8]
 8027a78:	fa1f fa83 	uxth.w	sl, r3
 8027a7c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8027a80:	43db      	mvns	r3, r3
 8027a82:	ea4f 202e 	mov.w	r0, lr, asr #8
 8027a86:	fb11 f10a 	smulbb	r1, r1, sl
 8027a8a:	b2db      	uxtb	r3, r3
 8027a8c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027a90:	b2d2      	uxtb	r2, r2
 8027a92:	fa5f fc8c 	uxtb.w	ip, ip
 8027a96:	fb00 1003 	mla	r0, r0, r3, r1
 8027a9a:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8027a9e:	fb12 f20a 	smulbb	r2, r2, sl
 8027aa2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8027aa6:	b280      	uxth	r0, r0
 8027aa8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027aac:	fb1c fc0a 	smulbb	ip, ip, sl
 8027ab0:	fa5f fe8e 	uxtb.w	lr, lr
 8027ab4:	fb0e 2203 	mla	r2, lr, r3, r2
 8027ab8:	fb01 cc03 	mla	ip, r1, r3, ip
 8027abc:	1c43      	adds	r3, r0, #1
 8027abe:	b292      	uxth	r2, r2
 8027ac0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027ac4:	1c51      	adds	r1, r2, #1
 8027ac6:	fa1f fc8c 	uxth.w	ip, ip
 8027aca:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8027ace:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8027ad2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8027ad6:	4308      	orrs	r0, r1
 8027ad8:	f10c 0101 	add.w	r1, ip, #1
 8027adc:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8027ae0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8027ae4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8027ae8:	ea40 000c 	orr.w	r0, r0, ip
 8027aec:	f8a8 0000 	strh.w	r0, [r8]
 8027af0:	e7a1      	b.n	8027a36 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8027af2:	b017      	add	sp, #92	; 0x5c
 8027af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027af8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8027af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027afc:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8027b00:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8027b04:	2d00      	cmp	r5, #0
 8027b06:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8027b0a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8027b0e:	fb05 0e03 	mla	lr, r5, r3, r0
 8027b12:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8027b16:	f2c0 80b0 	blt.w	8027c7a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8027b1a:	45a9      	cmp	r9, r5
 8027b1c:	f340 80ad 	ble.w	8027c7a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8027b20:	2800      	cmp	r0, #0
 8027b22:	f2c0 80a8 	blt.w	8027c76 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8027b26:	4580      	cmp	r8, r0
 8027b28:	f340 80a5 	ble.w	8027c76 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8027b2c:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8027b30:	f01e 0f01 	tst.w	lr, #1
 8027b34:	5d16      	ldrb	r6, [r2, r4]
 8027b36:	bf0c      	ite	eq
 8027b38:	f006 060f 	andeq.w	r6, r6, #15
 8027b3c:	1136      	asrne	r6, r6, #4
 8027b3e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027b42:	b2f6      	uxtb	r6, r6
 8027b44:	1c44      	adds	r4, r0, #1
 8027b46:	f100 809b 	bmi.w	8027c80 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8027b4a:	45a0      	cmp	r8, r4
 8027b4c:	f340 8098 	ble.w	8027c80 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8027b50:	2f00      	cmp	r7, #0
 8027b52:	f000 8097 	beq.w	8027c84 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8027b56:	f10e 0a01 	add.w	sl, lr, #1
 8027b5a:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8027b5e:	f01a 0f01 	tst.w	sl, #1
 8027b62:	5d14      	ldrb	r4, [r2, r4]
 8027b64:	bf0c      	ite	eq
 8027b66:	f004 040f 	andeq.w	r4, r4, #15
 8027b6a:	1124      	asrne	r4, r4, #4
 8027b6c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8027b70:	b2e4      	uxtb	r4, r4
 8027b72:	3501      	adds	r5, #1
 8027b74:	f100 808a 	bmi.w	8027c8c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8027b78:	45a9      	cmp	r9, r5
 8027b7a:	f340 8087 	ble.w	8027c8c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8027b7e:	f1bc 0f00 	cmp.w	ip, #0
 8027b82:	f000 8086 	beq.w	8027c92 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8027b86:	2800      	cmp	r0, #0
 8027b88:	db7e      	blt.n	8027c88 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8027b8a:	4580      	cmp	r8, r0
 8027b8c:	dd7c      	ble.n	8027c88 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8027b8e:	eb03 090e 	add.w	r9, r3, lr
 8027b92:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8027b96:	f019 0f01 	tst.w	r9, #1
 8027b9a:	5d55      	ldrb	r5, [r2, r5]
 8027b9c:	bf0c      	ite	eq
 8027b9e:	f005 050f 	andeq.w	r5, r5, #15
 8027ba2:	112d      	asrne	r5, r5, #4
 8027ba4:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8027ba8:	b2ed      	uxtb	r5, r5
 8027baa:	3001      	adds	r0, #1
 8027bac:	d474      	bmi.n	8027c98 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8027bae:	4580      	cmp	r8, r0
 8027bb0:	dd72      	ble.n	8027c98 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8027bb2:	2f00      	cmp	r7, #0
 8027bb4:	d072      	beq.n	8027c9c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8027bb6:	3301      	adds	r3, #1
 8027bb8:	449e      	add	lr, r3
 8027bba:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027bbe:	f01e 0f01 	tst.w	lr, #1
 8027bc2:	5cd0      	ldrb	r0, [r2, r3]
 8027bc4:	bf0c      	ite	eq
 8027bc6:	f000 000f 	andeq.w	r0, r0, #15
 8027bca:	1100      	asrne	r0, r0, #4
 8027bcc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027bd0:	b2c3      	uxtb	r3, r0
 8027bd2:	b2ba      	uxth	r2, r7
 8027bd4:	fa1f fc8c 	uxth.w	ip, ip
 8027bd8:	fb02 f00c 	mul.w	r0, r2, ip
 8027bdc:	0112      	lsls	r2, r2, #4
 8027bde:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8027be2:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8027be6:	1a12      	subs	r2, r2, r0
 8027be8:	fa1f fc8c 	uxth.w	ip, ip
 8027bec:	b292      	uxth	r2, r2
 8027bee:	eba7 070c 	sub.w	r7, r7, ip
 8027bf2:	4362      	muls	r2, r4
 8027bf4:	b2bf      	uxth	r7, r7
 8027bf6:	fb06 2207 	mla	r2, r6, r7, r2
 8027bfa:	fb0c 2505 	mla	r5, ip, r5, r2
 8027bfe:	fb00 5303 	mla	r3, r0, r3, r5
 8027c02:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027c06:	b3a3      	cbz	r3, 8027c72 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8027c08:	4a25      	ldr	r2, [pc, #148]	; (8027ca0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8027c0a:	880e      	ldrh	r6, [r1, #0]
 8027c0c:	6815      	ldr	r5, [r2, #0]
 8027c0e:	b29a      	uxth	r2, r3
 8027c10:	1234      	asrs	r4, r6, #8
 8027c12:	43db      	mvns	r3, r3
 8027c14:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8027c18:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8027c1c:	b2db      	uxtb	r3, r3
 8027c1e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8027c22:	fb10 f002 	smulbb	r0, r0, r2
 8027c26:	b2ed      	uxtb	r5, r5
 8027c28:	fb17 f702 	smulbb	r7, r7, r2
 8027c2c:	fb04 0403 	mla	r4, r4, r3, r0
 8027c30:	10f0      	asrs	r0, r6, #3
 8027c32:	fb15 f202 	smulbb	r2, r5, r2
 8027c36:	00f6      	lsls	r6, r6, #3
 8027c38:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027c3c:	b2a4      	uxth	r4, r4
 8027c3e:	b2f6      	uxtb	r6, r6
 8027c40:	fb00 7003 	mla	r0, r0, r3, r7
 8027c44:	fb06 2303 	mla	r3, r6, r3, r2
 8027c48:	b280      	uxth	r0, r0
 8027c4a:	b29a      	uxth	r2, r3
 8027c4c:	1c63      	adds	r3, r4, #1
 8027c4e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8027c52:	1c53      	adds	r3, r2, #1
 8027c54:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027c58:	1c42      	adds	r2, r0, #1
 8027c5a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8027c5e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027c62:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027c66:	0940      	lsrs	r0, r0, #5
 8027c68:	4323      	orrs	r3, r4
 8027c6a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027c6e:	4303      	orrs	r3, r0
 8027c70:	800b      	strh	r3, [r1, #0]
 8027c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027c76:	2600      	movs	r6, #0
 8027c78:	e764      	b.n	8027b44 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8027c7a:	2400      	movs	r4, #0
 8027c7c:	4626      	mov	r6, r4
 8027c7e:	e778      	b.n	8027b72 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8027c80:	2400      	movs	r4, #0
 8027c82:	e776      	b.n	8027b72 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8027c84:	463c      	mov	r4, r7
 8027c86:	e774      	b.n	8027b72 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8027c88:	2500      	movs	r5, #0
 8027c8a:	e78e      	b.n	8027baa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8027c8c:	2300      	movs	r3, #0
 8027c8e:	461d      	mov	r5, r3
 8027c90:	e79f      	b.n	8027bd2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8027c92:	4663      	mov	r3, ip
 8027c94:	4665      	mov	r5, ip
 8027c96:	e79c      	b.n	8027bd2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8027c98:	2300      	movs	r3, #0
 8027c9a:	e79a      	b.n	8027bd2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8027c9c:	463b      	mov	r3, r7
 8027c9e:	e798      	b.n	8027bd2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8027ca0:	20027cb8 	.word	0x20027cb8

08027ca4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ca8:	b093      	sub	sp, #76	; 0x4c
 8027caa:	461d      	mov	r5, r3
 8027cac:	920c      	str	r2, [sp, #48]	; 0x30
 8027cae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8027cb0:	9011      	str	r0, [sp, #68]	; 0x44
 8027cb2:	9107      	str	r1, [sp, #28]
 8027cb4:	6850      	ldr	r0, [r2, #4]
 8027cb6:	6812      	ldr	r2, [r2, #0]
 8027cb8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8027cbc:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8027cc0:	fb00 1303 	mla	r3, r0, r3, r1
 8027cc4:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8027cc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027cca:	689b      	ldr	r3, [r3, #8]
 8027ccc:	3301      	adds	r3, #1
 8027cce:	f023 0301 	bic.w	r3, r3, #1
 8027cd2:	9306      	str	r3, [sp, #24]
 8027cd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027cd6:	681f      	ldr	r7, [r3, #0]
 8027cd8:	9b07      	ldr	r3, [sp, #28]
 8027cda:	2b00      	cmp	r3, #0
 8027cdc:	dc03      	bgt.n	8027ce6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8027cde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027ce0:	2b00      	cmp	r3, #0
 8027ce2:	f340 8267 	ble.w	80281b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8027ce6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027ce8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027cec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027cf0:	1e48      	subs	r0, r1, #1
 8027cf2:	f102 3cff 	add.w	ip, r2, #4294967295
 8027cf6:	2d00      	cmp	r5, #0
 8027cf8:	f340 80b7 	ble.w	8027e6a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8027cfc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027d00:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027d04:	d406      	bmi.n	8027d14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8027d06:	4586      	cmp	lr, r0
 8027d08:	da04      	bge.n	8027d14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8027d0a:	2b00      	cmp	r3, #0
 8027d0c:	db02      	blt.n	8027d14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8027d0e:	4563      	cmp	r3, ip
 8027d10:	f2c0 80ac 	blt.w	8027e6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8027d14:	f11e 0e01 	adds.w	lr, lr, #1
 8027d18:	f100 809f 	bmi.w	8027e5a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8027d1c:	4571      	cmp	r1, lr
 8027d1e:	f2c0 809c 	blt.w	8027e5a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8027d22:	3301      	adds	r3, #1
 8027d24:	f100 8099 	bmi.w	8027e5a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8027d28:	429a      	cmp	r2, r3
 8027d2a:	f2c0 8096 	blt.w	8027e5a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8027d2e:	46c8      	mov	r8, r9
 8027d30:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8027d34:	9509      	str	r5, [sp, #36]	; 0x24
 8027d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027d38:	2b00      	cmp	r3, #0
 8027d3a:	f340 80b5 	ble.w	8027ea8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8027d3e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8027d42:	1430      	asrs	r0, r6, #16
 8027d44:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027d48:	9308      	str	r3, [sp, #32]
 8027d4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027d4c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8027d50:	1423      	asrs	r3, r4, #16
 8027d52:	f100 813f 	bmi.w	8027fd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8027d56:	f10c 3bff 	add.w	fp, ip, #4294967295
 8027d5a:	455b      	cmp	r3, fp
 8027d5c:	f280 813a 	bge.w	8027fd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8027d60:	2800      	cmp	r0, #0
 8027d62:	f2c0 8137 	blt.w	8027fd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8027d66:	f10e 3bff 	add.w	fp, lr, #4294967295
 8027d6a:	4558      	cmp	r0, fp
 8027d6c:	f280 8132 	bge.w	8027fd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8027d70:	9a06      	ldr	r2, [sp, #24]
 8027d72:	fb00 3302 	mla	r3, r0, r2, r3
 8027d76:	0858      	lsrs	r0, r3, #1
 8027d78:	07da      	lsls	r2, r3, #31
 8027d7a:	9a08      	ldr	r2, [sp, #32]
 8027d7c:	f817 c000 	ldrb.w	ip, [r7, r0]
 8027d80:	bf54      	ite	pl
 8027d82:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027d86:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027d8a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027d8e:	fa5f fc8c 	uxtb.w	ip, ip
 8027d92:	2a00      	cmp	r2, #0
 8027d94:	f000 80cc 	beq.w	8027f30 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8027d98:	1c58      	adds	r0, r3, #1
 8027d9a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8027d9e:	07c0      	lsls	r0, r0, #31
 8027da0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8027da4:	bf54      	ite	pl
 8027da6:	f00e 0e0f 	andpl.w	lr, lr, #15
 8027daa:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8027dae:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8027db2:	fa5f fe8e 	uxtb.w	lr, lr
 8027db6:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8027dba:	b1b9      	cbz	r1, 8027dec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8027dbc:	4453      	add	r3, sl
 8027dbe:	0858      	lsrs	r0, r3, #1
 8027dc0:	07da      	lsls	r2, r3, #31
 8027dc2:	5c38      	ldrb	r0, [r7, r0]
 8027dc4:	bf54      	ite	pl
 8027dc6:	f000 000f 	andpl.w	r0, r0, #15
 8027dca:	1100      	asrmi	r0, r0, #4
 8027dcc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027dd0:	b2c0      	uxtb	r0, r0
 8027dd2:	900a      	str	r0, [sp, #40]	; 0x28
 8027dd4:	1c58      	adds	r0, r3, #1
 8027dd6:	0843      	lsrs	r3, r0, #1
 8027dd8:	07c2      	lsls	r2, r0, #31
 8027dda:	5cfb      	ldrb	r3, [r7, r3]
 8027ddc:	bf54      	ite	pl
 8027dde:	f003 030f 	andpl.w	r3, r3, #15
 8027de2:	111b      	asrmi	r3, r3, #4
 8027de4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027de8:	b2db      	uxtb	r3, r3
 8027dea:	930e      	str	r3, [sp, #56]	; 0x38
 8027dec:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8027df0:	b289      	uxth	r1, r1
 8027df2:	fb02 f301 	mul.w	r3, r2, r1
 8027df6:	0112      	lsls	r2, r2, #4
 8027df8:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8027dfc:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8027e00:	1ad2      	subs	r2, r2, r3
 8027e02:	b289      	uxth	r1, r1
 8027e04:	b292      	uxth	r2, r2
 8027e06:	1a40      	subs	r0, r0, r1
 8027e08:	fa1f fe80 	uxth.w	lr, r0
 8027e0c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8027e0e:	4342      	muls	r2, r0
 8027e10:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8027e14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027e16:	fb01 c102 	mla	r1, r1, r2, ip
 8027e1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027e1c:	fb03 1302 	mla	r3, r3, r2, r1
 8027e20:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027e24:	2bff      	cmp	r3, #255	; 0xff
 8027e26:	f040 8094 	bne.w	8027f52 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8027e2a:	4bbf      	ldr	r3, [pc, #764]	; (8028128 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8027e2c:	681a      	ldr	r2, [r3, #0]
 8027e2e:	4bbf      	ldr	r3, [pc, #764]	; (802812c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8027e30:	0951      	lsrs	r1, r2, #5
 8027e32:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8027e36:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027e3a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027e3e:	430b      	orrs	r3, r1
 8027e40:	4313      	orrs	r3, r2
 8027e42:	f8a8 3000 	strh.w	r3, [r8]
 8027e46:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8027e48:	f108 0802 	add.w	r8, r8, #2
 8027e4c:	441c      	add	r4, r3
 8027e4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027e50:	441e      	add	r6, r3
 8027e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027e54:	3b01      	subs	r3, #1
 8027e56:	9309      	str	r3, [sp, #36]	; 0x24
 8027e58:	e76d      	b.n	8027d36 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027e5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8027e5c:	3d01      	subs	r5, #1
 8027e5e:	f109 0902 	add.w	r9, r9, #2
 8027e62:	441c      	add	r4, r3
 8027e64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027e66:	441e      	add	r6, r3
 8027e68:	e745      	b.n	8027cf6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8027e6a:	d021      	beq.n	8027eb0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8027e6c:	1e6b      	subs	r3, r5, #1
 8027e6e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8027e70:	fb00 4003 	mla	r0, r0, r3, r4
 8027e74:	1400      	asrs	r0, r0, #16
 8027e76:	f53f af5a 	bmi.w	8027d2e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8027e7a:	3901      	subs	r1, #1
 8027e7c:	4288      	cmp	r0, r1
 8027e7e:	f6bf af56 	bge.w	8027d2e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8027e82:	9920      	ldr	r1, [sp, #128]	; 0x80
 8027e84:	fb01 6303 	mla	r3, r1, r3, r6
 8027e88:	141b      	asrs	r3, r3, #16
 8027e8a:	f53f af50 	bmi.w	8027d2e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8027e8e:	3a01      	subs	r2, #1
 8027e90:	4293      	cmp	r3, r2
 8027e92:	f6bf af4c 	bge.w	8027d2e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8027e96:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8027e9a:	46a8      	mov	r8, r5
 8027e9c:	46ce      	mov	lr, r9
 8027e9e:	9308      	str	r3, [sp, #32]
 8027ea0:	f1b8 0f00 	cmp.w	r8, #0
 8027ea4:	f300 80b6 	bgt.w	8028014 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8027ea8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8027eac:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8027eb0:	9b07      	ldr	r3, [sp, #28]
 8027eb2:	2b00      	cmp	r3, #0
 8027eb4:	f340 817e 	ble.w	80281b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8027eb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027ebc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027ebe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027ec2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027ec6:	eef0 6a62 	vmov.f32	s13, s5
 8027eca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027ece:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027ed2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027ed6:	ee16 4a90 	vmov	r4, s13
 8027eda:	eef0 6a43 	vmov.f32	s13, s6
 8027ede:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027ee2:	ee16 6a90 	vmov	r6, s13
 8027ee6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027eea:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027eee:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027ef2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027ef6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027efa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027efe:	ee12 2a90 	vmov	r2, s5
 8027f02:	eef0 2a47 	vmov.f32	s5, s14
 8027f06:	fb92 f3f3 	sdiv	r3, r2, r3
 8027f0a:	ee13 2a10 	vmov	r2, s6
 8027f0e:	931f      	str	r3, [sp, #124]	; 0x7c
 8027f10:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027f12:	eeb0 3a67 	vmov.f32	s6, s15
 8027f16:	fb92 f3f3 	sdiv	r3, r2, r3
 8027f1a:	9320      	str	r3, [sp, #128]	; 0x80
 8027f1c:	9b07      	ldr	r3, [sp, #28]
 8027f1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027f20:	3b01      	subs	r3, #1
 8027f22:	9307      	str	r3, [sp, #28]
 8027f24:	bf08      	it	eq
 8027f26:	4615      	moveq	r5, r2
 8027f28:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027f2a:	bf18      	it	ne
 8027f2c:	461d      	movne	r5, r3
 8027f2e:	e6d3      	b.n	8027cd8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8027f30:	2900      	cmp	r1, #0
 8027f32:	f43f af5b 	beq.w	8027dec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8027f36:	eb0a 0003 	add.w	r0, sl, r3
 8027f3a:	0843      	lsrs	r3, r0, #1
 8027f3c:	07c0      	lsls	r0, r0, #31
 8027f3e:	5cfb      	ldrb	r3, [r7, r3]
 8027f40:	bf54      	ite	pl
 8027f42:	f003 030f 	andpl.w	r3, r3, #15
 8027f46:	111b      	asrmi	r3, r3, #4
 8027f48:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027f4c:	b2db      	uxtb	r3, r3
 8027f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8027f50:	e74c      	b.n	8027dec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8027f52:	2b00      	cmp	r3, #0
 8027f54:	f43f af77 	beq.w	8027e46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8027f58:	4a73      	ldr	r2, [pc, #460]	; (8028128 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8027f5a:	fa1f fe83 	uxth.w	lr, r3
 8027f5e:	f8b8 c000 	ldrh.w	ip, [r8]
 8027f62:	43db      	mvns	r3, r3
 8027f64:	6810      	ldr	r0, [r2, #0]
 8027f66:	ea4f 212c 	mov.w	r1, ip, asr #8
 8027f6a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8027f6e:	b2db      	uxtb	r3, r3
 8027f70:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8027f74:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8027f78:	fb12 f20e 	smulbb	r2, r2, lr
 8027f7c:	b2c0      	uxtb	r0, r0
 8027f7e:	fb1b fb0e 	smulbb	fp, fp, lr
 8027f82:	fb01 2103 	mla	r1, r1, r3, r2
 8027f86:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8027f8a:	fb10 fe0e 	smulbb	lr, r0, lr
 8027f8e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8027f92:	b289      	uxth	r1, r1
 8027f94:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8027f98:	fa5f fc8c 	uxtb.w	ip, ip
 8027f9c:	fb02 b203 	mla	r2, r2, r3, fp
 8027fa0:	1c48      	adds	r0, r1, #1
 8027fa2:	fb0c e303 	mla	r3, ip, r3, lr
 8027fa6:	b292      	uxth	r2, r2
 8027fa8:	b29b      	uxth	r3, r3
 8027faa:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8027fae:	f102 0b01 	add.w	fp, r2, #1
 8027fb2:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8027fb6:	1c59      	adds	r1, r3, #1
 8027fb8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8027fbc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8027fc0:	0952      	lsrs	r2, r2, #5
 8027fc2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8027fc6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027fca:	4301      	orrs	r1, r0
 8027fcc:	4311      	orrs	r1, r2
 8027fce:	f8a8 1000 	strh.w	r1, [r8]
 8027fd2:	e738      	b.n	8027e46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8027fd4:	f113 0b01 	adds.w	fp, r3, #1
 8027fd8:	f53f af35 	bmi.w	8027e46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8027fdc:	45dc      	cmp	ip, fp
 8027fde:	f6ff af32 	blt.w	8027e46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8027fe2:	f110 0b01 	adds.w	fp, r0, #1
 8027fe6:	f53f af2e 	bmi.w	8027e46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8027fea:	45de      	cmp	lr, fp
 8027fec:	f6ff af2b 	blt.w	8027e46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8027ff0:	9302      	str	r3, [sp, #8]
 8027ff2:	fa0f f38e 	sxth.w	r3, lr
 8027ff6:	9a08      	ldr	r2, [sp, #32]
 8027ff8:	9301      	str	r3, [sp, #4]
 8027ffa:	fa0f f38c 	sxth.w	r3, ip
 8027ffe:	9105      	str	r1, [sp, #20]
 8028000:	4641      	mov	r1, r8
 8028002:	9300      	str	r3, [sp, #0]
 8028004:	4653      	mov	r3, sl
 8028006:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802800a:	463a      	mov	r2, r7
 802800c:	9811      	ldr	r0, [sp, #68]	; 0x44
 802800e:	f7ff fd73 	bl	8027af8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8028012:	e718      	b.n	8027e46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028014:	1422      	asrs	r2, r4, #16
 8028016:	9906      	ldr	r1, [sp, #24]
 8028018:	1433      	asrs	r3, r6, #16
 802801a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802801e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028022:	fb01 2303 	mla	r3, r1, r3, r2
 8028026:	085a      	lsrs	r2, r3, #1
 8028028:	07d9      	lsls	r1, r3, #31
 802802a:	5cba      	ldrb	r2, [r7, r2]
 802802c:	bf54      	ite	pl
 802802e:	f002 020f 	andpl.w	r2, r2, #15
 8028032:	1112      	asrmi	r2, r2, #4
 8028034:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8028038:	b2d2      	uxtb	r2, r2
 802803a:	2800      	cmp	r0, #0
 802803c:	d063      	beq.n	8028106 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 802803e:	f103 0a01 	add.w	sl, r3, #1
 8028042:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8028046:	f01a 0f01 	tst.w	sl, #1
 802804a:	5c79      	ldrb	r1, [r7, r1]
 802804c:	bf0c      	ite	eq
 802804e:	f001 010f 	andeq.w	r1, r1, #15
 8028052:	1109      	asrne	r1, r1, #4
 8028054:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028058:	b2c9      	uxtb	r1, r1
 802805a:	910f      	str	r1, [sp, #60]	; 0x3c
 802805c:	f1bc 0f00 	cmp.w	ip, #0
 8028060:	d01a      	beq.n	8028098 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8028062:	9908      	ldr	r1, [sp, #32]
 8028064:	440b      	add	r3, r1
 8028066:	0859      	lsrs	r1, r3, #1
 8028068:	f013 0f01 	tst.w	r3, #1
 802806c:	f103 0301 	add.w	r3, r3, #1
 8028070:	5c79      	ldrb	r1, [r7, r1]
 8028072:	bf0c      	ite	eq
 8028074:	f001 010f 	andeq.w	r1, r1, #15
 8028078:	1109      	asrne	r1, r1, #4
 802807a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802807e:	b2c9      	uxtb	r1, r1
 8028080:	910b      	str	r1, [sp, #44]	; 0x2c
 8028082:	0859      	lsrs	r1, r3, #1
 8028084:	07db      	lsls	r3, r3, #31
 8028086:	5c79      	ldrb	r1, [r7, r1]
 8028088:	bf54      	ite	pl
 802808a:	f001 010f 	andpl.w	r1, r1, #15
 802808e:	1109      	asrmi	r1, r1, #4
 8028090:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028094:	b2c9      	uxtb	r1, r1
 8028096:	9110      	str	r1, [sp, #64]	; 0x40
 8028098:	b280      	uxth	r0, r0
 802809a:	fa1f fc8c 	uxth.w	ip, ip
 802809e:	fb00 f30c 	mul.w	r3, r0, ip
 80280a2:	0100      	lsls	r0, r0, #4
 80280a4:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80280a8:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80280ac:	1ac0      	subs	r0, r0, r3
 80280ae:	fa1f fc8c 	uxth.w	ip, ip
 80280b2:	b280      	uxth	r0, r0
 80280b4:	eba1 010c 	sub.w	r1, r1, ip
 80280b8:	fa1f fa81 	uxth.w	sl, r1
 80280bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80280be:	4348      	muls	r0, r1
 80280c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80280c2:	fb02 020a 	mla	r2, r2, sl, r0
 80280c6:	fb0c 2c01 	mla	ip, ip, r1, r2
 80280ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80280cc:	fb03 c302 	mla	r3, r3, r2, ip
 80280d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80280d4:	2bff      	cmp	r3, #255	; 0xff
 80280d6:	d12b      	bne.n	8028130 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80280d8:	4b13      	ldr	r3, [pc, #76]	; (8028128 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80280da:	681a      	ldr	r2, [r3, #0]
 80280dc:	4b13      	ldr	r3, [pc, #76]	; (802812c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 80280de:	0951      	lsrs	r1, r2, #5
 80280e0:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 80280e4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80280e8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80280ec:	430b      	orrs	r3, r1
 80280ee:	4313      	orrs	r3, r2
 80280f0:	f8ae 3000 	strh.w	r3, [lr]
 80280f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80280f6:	f10e 0e02 	add.w	lr, lr, #2
 80280fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80280fe:	441c      	add	r4, r3
 8028100:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028102:	441e      	add	r6, r3
 8028104:	e6cc      	b.n	8027ea0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8028106:	f1bc 0f00 	cmp.w	ip, #0
 802810a:	d0c5      	beq.n	8028098 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802810c:	9908      	ldr	r1, [sp, #32]
 802810e:	440b      	add	r3, r1
 8028110:	0859      	lsrs	r1, r3, #1
 8028112:	07db      	lsls	r3, r3, #31
 8028114:	5c79      	ldrb	r1, [r7, r1]
 8028116:	bf54      	ite	pl
 8028118:	f001 010f 	andpl.w	r1, r1, #15
 802811c:	1109      	asrmi	r1, r1, #4
 802811e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028122:	b2c9      	uxtb	r1, r1
 8028124:	910b      	str	r1, [sp, #44]	; 0x2c
 8028126:	e7b7      	b.n	8028098 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8028128:	20027cb8 	.word	0x20027cb8
 802812c:	fffff800 	.word	0xfffff800
 8028130:	2b00      	cmp	r3, #0
 8028132:	d0df      	beq.n	80280f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8028134:	4a21      	ldr	r2, [pc, #132]	; (80281bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 8028136:	fa1f fa83 	uxth.w	sl, r3
 802813a:	f8be c000 	ldrh.w	ip, [lr]
 802813e:	43db      	mvns	r3, r3
 8028140:	6810      	ldr	r0, [r2, #0]
 8028142:	ea4f 212c 	mov.w	r1, ip, asr #8
 8028146:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802814a:	b2db      	uxtb	r3, r3
 802814c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028150:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8028154:	fb12 f20a 	smulbb	r2, r2, sl
 8028158:	b2c0      	uxtb	r0, r0
 802815a:	fb1b fb0a 	smulbb	fp, fp, sl
 802815e:	fb01 2103 	mla	r1, r1, r3, r2
 8028162:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8028166:	fb10 f00a 	smulbb	r0, r0, sl
 802816a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802816e:	b289      	uxth	r1, r1
 8028170:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028174:	fa5f fc8c 	uxtb.w	ip, ip
 8028178:	fb02 b203 	mla	r2, r2, r3, fp
 802817c:	fb0c 0003 	mla	r0, ip, r3, r0
 8028180:	1c4b      	adds	r3, r1, #1
 8028182:	b292      	uxth	r2, r2
 8028184:	b280      	uxth	r0, r0
 8028186:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802818a:	f100 0b01 	add.w	fp, r0, #1
 802818e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8028192:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8028196:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802819a:	ea4b 0101 	orr.w	r1, fp, r1
 802819e:	f102 0b01 	add.w	fp, r2, #1
 80281a2:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80281a6:	0952      	lsrs	r2, r2, #5
 80281a8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80281ac:	4311      	orrs	r1, r2
 80281ae:	f8ae 1000 	strh.w	r1, [lr]
 80281b2:	e79f      	b.n	80280f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 80281b4:	b013      	add	sp, #76	; 0x4c
 80281b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80281ba:	bf00      	nop
 80281bc:	20027cb8 	.word	0x20027cb8

080281c0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 80281c0:	b570      	push	{r4, r5, r6, lr}
 80281c2:	1208      	asrs	r0, r1, #8
 80281c4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80281c8:	b29e      	uxth	r6, r3
 80281ca:	1213      	asrs	r3, r2, #8
 80281cc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80281d0:	10cc      	asrs	r4, r1, #3
 80281d2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80281d6:	00c9      	lsls	r1, r1, #3
 80281d8:	fb10 f006 	smulbb	r0, r0, r6
 80281dc:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80281e0:	fb13 f305 	smulbb	r3, r3, r5
 80281e4:	fb14 f406 	smulbb	r4, r4, r6
 80281e8:	4418      	add	r0, r3
 80281ea:	10d3      	asrs	r3, r2, #3
 80281ec:	00d2      	lsls	r2, r2, #3
 80281ee:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80281f2:	b280      	uxth	r0, r0
 80281f4:	b2d2      	uxtb	r2, r2
 80281f6:	fb13 f305 	smulbb	r3, r3, r5
 80281fa:	fb12 f205 	smulbb	r2, r2, r5
 80281fe:	441c      	add	r4, r3
 8028200:	b2cb      	uxtb	r3, r1
 8028202:	fb13 f306 	smulbb	r3, r3, r6
 8028206:	b2a4      	uxth	r4, r4
 8028208:	4413      	add	r3, r2
 802820a:	1c42      	adds	r2, r0, #1
 802820c:	b29b      	uxth	r3, r3
 802820e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028212:	f400 4278 	and.w	r2, r0, #63488	; 0xf800
 8028216:	1c58      	adds	r0, r3, #1
 8028218:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802821c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8028220:	4310      	orrs	r0, r2
 8028222:	1c62      	adds	r2, r4, #1
 8028224:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8028228:	0964      	lsrs	r4, r4, #5
 802822a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802822e:	4320      	orrs	r0, r4
 8028230:	bd70      	pop	{r4, r5, r6, pc}
	...

08028234 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8028234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028238:	b08f      	sub	sp, #60	; 0x3c
 802823a:	461c      	mov	r4, r3
 802823c:	460d      	mov	r5, r1
 802823e:	4616      	mov	r6, r2
 8028240:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 8028244:	9004      	str	r0, [sp, #16]
 8028246:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028248:	2f00      	cmp	r7, #0
 802824a:	f000 80f6 	beq.w	802843a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 802824e:	6820      	ldr	r0, [r4, #0]
 8028250:	aa0a      	add	r2, sp, #40	; 0x28
 8028252:	6861      	ldr	r1, [r4, #4]
 8028254:	f04f 0802 	mov.w	r8, #2
 8028258:	3604      	adds	r6, #4
 802825a:	c203      	stmia	r2!, {r0, r1}
 802825c:	6818      	ldr	r0, [r3, #0]
 802825e:	aa0c      	add	r2, sp, #48	; 0x30
 8028260:	6859      	ldr	r1, [r3, #4]
 8028262:	c203      	stmia	r2!, {r0, r1}
 8028264:	a80a      	add	r0, sp, #40	; 0x28
 8028266:	f7ef fcb9 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802826a:	4621      	mov	r1, r4
 802826c:	a80c      	add	r0, sp, #48	; 0x30
 802826e:	f7ef fcf9 	bl	8017c64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028272:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8028276:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
 802827a:	f002 0301 	and.w	r3, r2, #1
 802827e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8028282:	9306      	str	r3, [sp, #24]
 8028284:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8028288:	f003 0101 	and.w	r1, r3, #1
 802828c:	9105      	str	r1, [sp, #20]
 802828e:	9805      	ldr	r0, [sp, #20]
 8028290:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8028294:	4403      	add	r3, r0
 8028296:	fb01 2303 	mla	r3, r1, r3, r2
 802829a:	fb93 f3f8 	sdiv	r3, r3, r8
 802829e:	441d      	add	r5, r3
 80282a0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80282a4:	441a      	add	r2, r3
 80282a6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80282aa:	4419      	add	r1, r3
 80282ac:	4b64      	ldr	r3, [pc, #400]	; (8028440 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 80282ae:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80282b2:	6818      	ldr	r0, [r3, #0]
 80282b4:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 80282b8:	6803      	ldr	r3, [r0, #0]
 80282ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80282bc:	4798      	blx	r3
 80282be:	4a61      	ldr	r2, [pc, #388]	; (8028444 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 80282c0:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 80282c4:	2fff      	cmp	r7, #255	; 0xff
 80282c6:	8813      	ldrh	r3, [r2, #0]
 80282c8:	4611      	mov	r1, r2
 80282ca:	f9bd a030 	ldrsh.w	sl, [sp, #48]	; 0x30
 80282ce:	fb03 fb0b 	mul.w	fp, r3, fp
 80282d2:	fb03 a404 	mla	r4, r3, r4, sl
 80282d6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80282da:	d06b      	beq.n	80283b4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 80282dc:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 80282e0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80282e4:	9303      	str	r3, [sp, #12]
 80282e6:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 80282ea:	e9cd 3207 	strd	r3, r2, [sp, #28]
 80282ee:	9b07      	ldr	r3, [sp, #28]
 80282f0:	42a3      	cmp	r3, r4
 80282f2:	f240 809d 	bls.w	8028430 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 80282f6:	9b06      	ldr	r3, [sp, #24]
 80282f8:	2b00      	cmp	r3, #0
 80282fa:	d039      	beq.n	8028370 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13c>
 80282fc:	782b      	ldrb	r3, [r5, #0]
 80282fe:	f105 0801 	add.w	r8, r5, #1
 8028302:	f109 3bff 	add.w	fp, r9, #4294967295
 8028306:	8822      	ldrh	r2, [r4, #0]
 8028308:	f003 030f 	and.w	r3, r3, #15
 802830c:	9804      	ldr	r0, [sp, #16]
 802830e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8028312:	9b03      	ldr	r3, [sp, #12]
 8028314:	9300      	str	r3, [sp, #0]
 8028316:	463b      	mov	r3, r7
 8028318:	f7ff ff52 	bl	80281c0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802831c:	f824 0b02 	strh.w	r0, [r4], #2
 8028320:	f1bb 0f01 	cmp.w	fp, #1
 8028324:	46a2      	mov	sl, r4
 8028326:	f104 0404 	add.w	r4, r4, #4
 802832a:	dd24      	ble.n	8028376 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x142>
 802832c:	f898 3000 	ldrb.w	r3, [r8]
 8028330:	f1ab 0b02 	sub.w	fp, fp, #2
 8028334:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8028338:	091b      	lsrs	r3, r3, #4
 802833a:	9804      	ldr	r0, [sp, #16]
 802833c:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8028340:	9b03      	ldr	r3, [sp, #12]
 8028342:	9300      	str	r3, [sp, #0]
 8028344:	463b      	mov	r3, r7
 8028346:	f7ff ff3b 	bl	80281c0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802834a:	f824 0c04 	strh.w	r0, [r4, #-4]
 802834e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8028352:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8028356:	f003 030f 	and.w	r3, r3, #15
 802835a:	9804      	ldr	r0, [sp, #16]
 802835c:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8028360:	9b03      	ldr	r3, [sp, #12]
 8028362:	9300      	str	r3, [sp, #0]
 8028364:	463b      	mov	r3, r7
 8028366:	f7ff ff2b 	bl	80281c0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802836a:	f824 0c02 	strh.w	r0, [r4, #-2]
 802836e:	e7d7      	b.n	8028320 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 8028370:	46a8      	mov	r8, r5
 8028372:	46cb      	mov	fp, r9
 8028374:	e7d4      	b.n	8028320 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 8028376:	d10e      	bne.n	8028396 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x162>
 8028378:	f898 3000 	ldrb.w	r3, [r8]
 802837c:	f8ba 2000 	ldrh.w	r2, [sl]
 8028380:	091b      	lsrs	r3, r3, #4
 8028382:	9804      	ldr	r0, [sp, #16]
 8028384:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8028388:	9b03      	ldr	r3, [sp, #12]
 802838a:	9300      	str	r3, [sp, #0]
 802838c:	463b      	mov	r3, r7
 802838e:	f7ff ff17 	bl	80281c0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8028392:	f82a 0b02 	strh.w	r0, [sl], #2
 8028396:	9b08      	ldr	r3, [sp, #32]
 8028398:	9a05      	ldr	r2, [sp, #20]
 802839a:	881c      	ldrh	r4, [r3, #0]
 802839c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80283a0:	eba4 0409 	sub.w	r4, r4, r9
 80283a4:	4413      	add	r3, r2
 80283a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80283a8:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 80283ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80283b0:	441d      	add	r5, r3
 80283b2:	e79c      	b.n	80282ee <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xba>
 80283b4:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 80283b8:	45a3      	cmp	fp, r4
 80283ba:	d939      	bls.n	8028430 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 80283bc:	9b06      	ldr	r3, [sp, #24]
 80283be:	b1fb      	cbz	r3, 8028400 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 80283c0:	782b      	ldrb	r3, [r5, #0]
 80283c2:	1c6a      	adds	r2, r5, #1
 80283c4:	f109 30ff 	add.w	r0, r9, #4294967295
 80283c8:	3402      	adds	r4, #2
 80283ca:	f003 030f 	and.w	r3, r3, #15
 80283ce:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80283d2:	f824 3c02 	strh.w	r3, [r4, #-2]
 80283d6:	2801      	cmp	r0, #1
 80283d8:	4623      	mov	r3, r4
 80283da:	f104 0404 	add.w	r4, r4, #4
 80283de:	dd12      	ble.n	8028406 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 80283e0:	7813      	ldrb	r3, [r2, #0]
 80283e2:	3802      	subs	r0, #2
 80283e4:	091b      	lsrs	r3, r3, #4
 80283e6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80283ea:	f824 3c04 	strh.w	r3, [r4, #-4]
 80283ee:	f812 3b01 	ldrb.w	r3, [r2], #1
 80283f2:	f003 030f 	and.w	r3, r3, #15
 80283f6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80283fa:	f824 3c02 	strh.w	r3, [r4, #-2]
 80283fe:	e7ea      	b.n	80283d6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8028400:	462a      	mov	r2, r5
 8028402:	4648      	mov	r0, r9
 8028404:	e7e7      	b.n	80283d6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8028406:	d106      	bne.n	8028416 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 8028408:	7812      	ldrb	r2, [r2, #0]
 802840a:	3302      	adds	r3, #2
 802840c:	0912      	lsrs	r2, r2, #4
 802840e:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8028412:	f823 2c02 	strh.w	r2, [r3, #-2]
 8028416:	880c      	ldrh	r4, [r1, #0]
 8028418:	9a05      	ldr	r2, [sp, #20]
 802841a:	eba4 0409 	sub.w	r4, r4, r9
 802841e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8028422:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8028426:	4413      	add	r3, r2
 8028428:	fb93 f3f8 	sdiv	r3, r3, r8
 802842c:	441d      	add	r5, r3
 802842e:	e7c3      	b.n	80283b8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x184>
 8028430:	4b03      	ldr	r3, [pc, #12]	; (8028440 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8028432:	6818      	ldr	r0, [r3, #0]
 8028434:	6803      	ldr	r3, [r0, #0]
 8028436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028438:	4798      	blx	r3
 802843a:	b00f      	add	sp, #60	; 0x3c
 802843c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028440:	20027ca8 	.word	0x20027ca8
 8028444:	20027ca2 	.word	0x20027ca2

08028448 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 8028448:	b5f0      	push	{r4, r5, r6, r7, lr}
 802844a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802844e:	0a0f      	lsrs	r7, r1, #8
 8028450:	2dff      	cmp	r5, #255	; 0xff
 8028452:	d10c      	bne.n	802846e <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 8028454:	2bff      	cmp	r3, #255	; 0xff
 8028456:	d10a      	bne.n	802846e <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 8028458:	0948      	lsrs	r0, r1, #5
 802845a:	4b25      	ldr	r3, [pc, #148]	; (80284f0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 802845c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8028460:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028464:	403b      	ands	r3, r7
 8028466:	4318      	orrs	r0, r3
 8028468:	4308      	orrs	r0, r1
 802846a:	b280      	uxth	r0, r0
 802846c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802846e:	fb15 f503 	smulbb	r5, r5, r3
 8028472:	1214      	asrs	r4, r2, #8
 8028474:	10d6      	asrs	r6, r2, #3
 8028476:	b2ab      	uxth	r3, r5
 8028478:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802847c:	00d0      	lsls	r0, r2, #3
 802847e:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8028482:	1c5d      	adds	r5, r3, #1
 8028484:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8028488:	b2c0      	uxtb	r0, r0
 802848a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802848e:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 8028492:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8028496:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802849a:	fa1f fc85 	uxth.w	ip, r5
 802849e:	43ed      	mvns	r5, r5
 80284a0:	fb12 f20c 	smulbb	r2, r2, ip
 80284a4:	b2eb      	uxtb	r3, r5
 80284a6:	b2fd      	uxtb	r5, r7
 80284a8:	fb04 2403 	mla	r4, r4, r3, r2
 80284ac:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 80284b0:	fb15 f50c 	smulbb	r5, r5, ip
 80284b4:	b2c8      	uxtb	r0, r1
 80284b6:	b2a4      	uxth	r4, r4
 80284b8:	fb10 f00c 	smulbb	r0, r0, ip
 80284bc:	fb06 5503 	mla	r5, r6, r3, r5
 80284c0:	fb02 0003 	mla	r0, r2, r3, r0
 80284c4:	b2ad      	uxth	r5, r5
 80284c6:	b283      	uxth	r3, r0
 80284c8:	1c60      	adds	r0, r4, #1
 80284ca:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 80284ce:	1c58      	adds	r0, r3, #1
 80284d0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80284d4:	1c6b      	adds	r3, r5, #1
 80284d6:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80284da:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80284de:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80284e2:	096d      	lsrs	r5, r5, #5
 80284e4:	4320      	orrs	r0, r4
 80284e6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80284ea:	4328      	orrs	r0, r5
 80284ec:	e7be      	b.n	802846c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x24>
 80284ee:	bf00      	nop
 80284f0:	00fff800 	.word	0x00fff800

080284f4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80284f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80284f8:	461c      	mov	r4, r3
 80284fa:	b08d      	sub	sp, #52	; 0x34
 80284fc:	460d      	mov	r5, r1
 80284fe:	4616      	mov	r6, r2
 8028500:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028502:	4680      	mov	r8, r0
 8028504:	6861      	ldr	r1, [r4, #4]
 8028506:	aa08      	add	r2, sp, #32
 8028508:	6820      	ldr	r0, [r4, #0]
 802850a:	f04f 0a02 	mov.w	sl, #2
 802850e:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 8028512:	3604      	adds	r6, #4
 8028514:	c203      	stmia	r2!, {r0, r1}
 8028516:	6818      	ldr	r0, [r3, #0]
 8028518:	aa0a      	add	r2, sp, #40	; 0x28
 802851a:	6859      	ldr	r1, [r3, #4]
 802851c:	c203      	stmia	r2!, {r0, r1}
 802851e:	a808      	add	r0, sp, #32
 8028520:	f7ef fb5c 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8028524:	4621      	mov	r1, r4
 8028526:	a80a      	add	r0, sp, #40	; 0x28
 8028528:	f7ef fb9c 	bl	8017c64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802852c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8028530:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 8028534:	f002 0301 	and.w	r3, r2, #1
 8028538:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 802853c:	9303      	str	r3, [sp, #12]
 802853e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8028542:	f003 0101 	and.w	r1, r3, #1
 8028546:	9102      	str	r1, [sp, #8]
 8028548:	9802      	ldr	r0, [sp, #8]
 802854a:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 802854e:	4403      	add	r3, r0
 8028550:	fb01 2303 	mla	r3, r1, r3, r2
 8028554:	fb93 f3fa 	sdiv	r3, r3, sl
 8028558:	441d      	add	r5, r3
 802855a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802855e:	441a      	add	r2, r3
 8028560:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8028564:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8028568:	4419      	add	r1, r3
 802856a:	4a3e      	ldr	r2, [pc, #248]	; (8028664 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 802856c:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 8028570:	6810      	ldr	r0, [r2, #0]
 8028572:	9205      	str	r2, [sp, #20]
 8028574:	6803      	ldr	r3, [r0, #0]
 8028576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028578:	4798      	blx	r3
 802857a:	4b3b      	ldr	r3, [pc, #236]	; (8028668 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 802857c:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
 8028580:	8819      	ldrh	r1, [r3, #0]
 8028582:	f9bd c028 	ldrsh.w	ip, [sp, #40]	; 0x28
 8028586:	434f      	muls	r7, r1
 8028588:	fb01 c404 	mla	r4, r1, r4, ip
 802858c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8028590:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 8028594:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 8028598:	9204      	str	r2, [sp, #16]
 802859a:	9b04      	ldr	r3, [sp, #16]
 802859c:	429c      	cmp	r4, r3
 802859e:	d258      	bcs.n	8028652 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 80285a0:	9b03      	ldr	r3, [sp, #12]
 80285a2:	2b00      	cmp	r3, #0
 80285a4:	d034      	beq.n	8028610 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 80285a6:	782b      	ldrb	r3, [r5, #0]
 80285a8:	1c6f      	adds	r7, r5, #1
 80285aa:	f003 030f 	and.w	r3, r3, #15
 80285ae:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80285b2:	0e0b      	lsrs	r3, r1, #24
 80285b4:	d006      	beq.n	80285c4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 80285b6:	8822      	ldrh	r2, [r4, #0]
 80285b8:	4640      	mov	r0, r8
 80285ba:	9300      	str	r3, [sp, #0]
 80285bc:	464b      	mov	r3, r9
 80285be:	f7ff ff43 	bl	8028448 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 80285c2:	8020      	strh	r0, [r4, #0]
 80285c4:	3402      	adds	r4, #2
 80285c6:	f10b 3aff 	add.w	sl, fp, #4294967295
 80285ca:	f1ba 0f01 	cmp.w	sl, #1
 80285ce:	dd22      	ble.n	8028616 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 80285d0:	783b      	ldrb	r3, [r7, #0]
 80285d2:	091b      	lsrs	r3, r3, #4
 80285d4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80285d8:	0e0b      	lsrs	r3, r1, #24
 80285da:	d006      	beq.n	80285ea <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 80285dc:	8822      	ldrh	r2, [r4, #0]
 80285de:	4640      	mov	r0, r8
 80285e0:	9300      	str	r3, [sp, #0]
 80285e2:	464b      	mov	r3, r9
 80285e4:	f7ff ff30 	bl	8028448 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 80285e8:	8020      	strh	r0, [r4, #0]
 80285ea:	f817 3b01 	ldrb.w	r3, [r7], #1
 80285ee:	f003 030f 	and.w	r3, r3, #15
 80285f2:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80285f6:	0e0b      	lsrs	r3, r1, #24
 80285f8:	d006      	beq.n	8028608 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 80285fa:	8862      	ldrh	r2, [r4, #2]
 80285fc:	4640      	mov	r0, r8
 80285fe:	9300      	str	r3, [sp, #0]
 8028600:	464b      	mov	r3, r9
 8028602:	f7ff ff21 	bl	8028448 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8028606:	8060      	strh	r0, [r4, #2]
 8028608:	3404      	adds	r4, #4
 802860a:	f1aa 0a02 	sub.w	sl, sl, #2
 802860e:	e7dc      	b.n	80285ca <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8028610:	462f      	mov	r7, r5
 8028612:	46da      	mov	sl, fp
 8028614:	e7d9      	b.n	80285ca <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8028616:	d10d      	bne.n	8028634 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 8028618:	783b      	ldrb	r3, [r7, #0]
 802861a:	091b      	lsrs	r3, r3, #4
 802861c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8028620:	0e0b      	lsrs	r3, r1, #24
 8028622:	d006      	beq.n	8028632 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8028624:	8822      	ldrh	r2, [r4, #0]
 8028626:	4640      	mov	r0, r8
 8028628:	9300      	str	r3, [sp, #0]
 802862a:	464b      	mov	r3, r9
 802862c:	f7ff ff0c 	bl	8028448 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8028630:	8020      	strh	r0, [r4, #0]
 8028632:	3402      	adds	r4, #2
 8028634:	9b06      	ldr	r3, [sp, #24]
 8028636:	9a02      	ldr	r2, [sp, #8]
 8028638:	881b      	ldrh	r3, [r3, #0]
 802863a:	eba3 030b 	sub.w	r3, r3, fp
 802863e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8028642:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8028646:	4413      	add	r3, r2
 8028648:	9a07      	ldr	r2, [sp, #28]
 802864a:	fb93 f3f2 	sdiv	r3, r3, r2
 802864e:	441d      	add	r5, r3
 8028650:	e7a3      	b.n	802859a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 8028652:	9b05      	ldr	r3, [sp, #20]
 8028654:	6818      	ldr	r0, [r3, #0]
 8028656:	6803      	ldr	r3, [r0, #0]
 8028658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802865a:	4798      	blx	r3
 802865c:	b00d      	add	sp, #52	; 0x34
 802865e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028662:	bf00      	nop
 8028664:	20027ca8 	.word	0x20027ca8
 8028668:	20027ca2 	.word	0x20027ca2

0802866c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 802866c:	b570      	push	{r4, r5, r6, lr}
 802866e:	1214      	asrs	r4, r2, #8
 8028670:	788d      	ldrb	r5, [r1, #2]
 8028672:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8028676:	10d0      	asrs	r0, r2, #3
 8028678:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802867c:	00d2      	lsls	r2, r2, #3
 802867e:	fb15 f503 	smulbb	r5, r5, r3
 8028682:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028686:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802868a:	b2d2      	uxtb	r2, r2
 802868c:	fb04 5506 	mla	r5, r4, r6, r5
 8028690:	784c      	ldrb	r4, [r1, #1]
 8028692:	7809      	ldrb	r1, [r1, #0]
 8028694:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8028698:	fb14 f403 	smulbb	r4, r4, r3
 802869c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80286a0:	fb11 f303 	smulbb	r3, r1, r3
 80286a4:	b2ad      	uxth	r5, r5
 80286a6:	fb00 4406 	mla	r4, r0, r6, r4
 80286aa:	fb02 3306 	mla	r3, r2, r6, r3
 80286ae:	1c68      	adds	r0, r5, #1
 80286b0:	b2a4      	uxth	r4, r4
 80286b2:	b29b      	uxth	r3, r3
 80286b4:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 80286b8:	1c62      	adds	r2, r4, #1
 80286ba:	1c58      	adds	r0, r3, #1
 80286bc:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80286c0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80286c4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80286c8:	0964      	lsrs	r4, r4, #5
 80286ca:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80286ce:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80286d2:	4328      	orrs	r0, r5
 80286d4:	4320      	orrs	r0, r4
 80286d6:	bd70      	pop	{r4, r5, r6, pc}

080286d8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80286d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80286dc:	b08f      	sub	sp, #60	; 0x3c
 80286de:	461c      	mov	r4, r3
 80286e0:	4682      	mov	sl, r0
 80286e2:	460e      	mov	r6, r1
 80286e4:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 80286e8:	4615      	mov	r5, r2
 80286ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80286ec:	2f00      	cmp	r7, #0
 80286ee:	f000 8141 	beq.w	8028974 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29c>
 80286f2:	6820      	ldr	r0, [r4, #0]
 80286f4:	aa0a      	add	r2, sp, #40	; 0x28
 80286f6:	6861      	ldr	r1, [r4, #4]
 80286f8:	f04f 0802 	mov.w	r8, #2
 80286fc:	3504      	adds	r5, #4
 80286fe:	c203      	stmia	r2!, {r0, r1}
 8028700:	6818      	ldr	r0, [r3, #0]
 8028702:	aa0c      	add	r2, sp, #48	; 0x30
 8028704:	6859      	ldr	r1, [r3, #4]
 8028706:	c203      	stmia	r2!, {r0, r1}
 8028708:	a80a      	add	r0, sp, #40	; 0x28
 802870a:	f7ef fa67 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802870e:	4621      	mov	r1, r4
 8028710:	a80c      	add	r0, sp, #48	; 0x30
 8028712:	f7ef faa7 	bl	8017c64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028716:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 802871a:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
 802871e:	f002 0301 	and.w	r3, r2, #1
 8028722:	9306      	str	r3, [sp, #24]
 8028724:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8028728:	f003 0101 	and.w	r1, r3, #1
 802872c:	9105      	str	r1, [sp, #20]
 802872e:	9805      	ldr	r0, [sp, #20]
 8028730:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8028734:	4403      	add	r3, r0
 8028736:	fb01 2303 	mla	r3, r1, r3, r2
 802873a:	fb93 f3f8 	sdiv	r3, r3, r8
 802873e:	441e      	add	r6, r3
 8028740:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8028744:	441a      	add	r2, r3
 8028746:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 802874a:	4419      	add	r1, r3
 802874c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8028750:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8028754:	9303      	str	r3, [sp, #12]
 8028756:	4b89      	ldr	r3, [pc, #548]	; (802897c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8028758:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 802875c:	6818      	ldr	r0, [r3, #0]
 802875e:	6803      	ldr	r3, [r0, #0]
 8028760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028762:	4798      	blx	r3
 8028764:	4a86      	ldr	r2, [pc, #536]	; (8028980 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 8028766:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 802876a:	2fff      	cmp	r7, #255	; 0xff
 802876c:	8813      	ldrh	r3, [r2, #0]
 802876e:	4694      	mov	ip, r2
 8028770:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
 8028774:	fb03 9404 	mla	r4, r3, r4, r9
 8028778:	fb03 f30b 	mul.w	r3, r3, fp
 802877c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8028780:	d071      	beq.n	8028866 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 8028782:	43f9      	mvns	r1, r7
 8028784:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8028788:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 802878c:	b2c9      	uxtb	r1, r1
 802878e:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8028792:	9104      	str	r1, [sp, #16]
 8028794:	9b07      	ldr	r3, [sp, #28]
 8028796:	42a3      	cmp	r3, r4
 8028798:	f240 80e7 	bls.w	802896a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 802879c:	9b06      	ldr	r3, [sp, #24]
 802879e:	2b00      	cmp	r3, #0
 80287a0:	d03d      	beq.n	802881e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x146>
 80287a2:	7831      	ldrb	r1, [r6, #0]
 80287a4:	4650      	mov	r0, sl
 80287a6:	9b04      	ldr	r3, [sp, #16]
 80287a8:	f106 0801 	add.w	r8, r6, #1
 80287ac:	f001 010f 	and.w	r1, r1, #15
 80287b0:	8822      	ldrh	r2, [r4, #0]
 80287b2:	9300      	str	r3, [sp, #0]
 80287b4:	463b      	mov	r3, r7
 80287b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80287ba:	4429      	add	r1, r5
 80287bc:	f7ff ff56 	bl	802866c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 80287c0:	9b03      	ldr	r3, [sp, #12]
 80287c2:	f824 0b02 	strh.w	r0, [r4], #2
 80287c6:	f103 3bff 	add.w	fp, r3, #4294967295
 80287ca:	f1bb 0f01 	cmp.w	fp, #1
 80287ce:	46a1      	mov	r9, r4
 80287d0:	f104 0404 	add.w	r4, r4, #4
 80287d4:	dd27      	ble.n	8028826 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14e>
 80287d6:	f898 1000 	ldrb.w	r1, [r8]
 80287da:	4650      	mov	r0, sl
 80287dc:	9b04      	ldr	r3, [sp, #16]
 80287de:	f1ab 0b02 	sub.w	fp, fp, #2
 80287e2:	0909      	lsrs	r1, r1, #4
 80287e4:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 80287e8:	9300      	str	r3, [sp, #0]
 80287ea:	463b      	mov	r3, r7
 80287ec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80287f0:	4429      	add	r1, r5
 80287f2:	f7ff ff3b 	bl	802866c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 80287f6:	f824 0c04 	strh.w	r0, [r4, #-4]
 80287fa:	f818 1b01 	ldrb.w	r1, [r8], #1
 80287fe:	4650      	mov	r0, sl
 8028800:	9b04      	ldr	r3, [sp, #16]
 8028802:	f001 010f 	and.w	r1, r1, #15
 8028806:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802880a:	9300      	str	r3, [sp, #0]
 802880c:	463b      	mov	r3, r7
 802880e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028812:	4429      	add	r1, r5
 8028814:	f7ff ff2a 	bl	802866c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8028818:	f824 0c02 	strh.w	r0, [r4, #-2]
 802881c:	e7d5      	b.n	80287ca <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 802881e:	46b0      	mov	r8, r6
 8028820:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8028824:	e7d1      	b.n	80287ca <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 8028826:	d10f      	bne.n	8028848 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x170>
 8028828:	f898 1000 	ldrb.w	r1, [r8]
 802882c:	4650      	mov	r0, sl
 802882e:	9b04      	ldr	r3, [sp, #16]
 8028830:	0909      	lsrs	r1, r1, #4
 8028832:	f8b9 2000 	ldrh.w	r2, [r9]
 8028836:	9300      	str	r3, [sp, #0]
 8028838:	463b      	mov	r3, r7
 802883a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802883e:	4429      	add	r1, r5
 8028840:	f7ff ff14 	bl	802866c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8028844:	f829 0b02 	strh.w	r0, [r9], #2
 8028848:	9b08      	ldr	r3, [sp, #32]
 802884a:	9a05      	ldr	r2, [sp, #20]
 802884c:	881c      	ldrh	r4, [r3, #0]
 802884e:	9b03      	ldr	r3, [sp, #12]
 8028850:	1ae4      	subs	r4, r4, r3
 8028852:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8028856:	4413      	add	r3, r2
 8028858:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802885a:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 802885e:	fb93 f3f2 	sdiv	r3, r3, r2
 8028862:	441e      	add	r6, r3
 8028864:	e796      	b.n	8028794 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbc>
 8028866:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802886a:	4f46      	ldr	r7, [pc, #280]	; (8028984 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 802886c:	42a3      	cmp	r3, r4
 802886e:	d97c      	bls.n	802896a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 8028870:	9a06      	ldr	r2, [sp, #24]
 8028872:	2a00      	cmp	r2, #0
 8028874:	d054      	beq.n	8028920 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 8028876:	7830      	ldrb	r0, [r6, #0]
 8028878:	1c71      	adds	r1, r6, #1
 802887a:	f000 000f 	and.w	r0, r0, #15
 802887e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028882:	eb05 0e00 	add.w	lr, r5, r0
 8028886:	5c28      	ldrb	r0, [r5, r0]
 8028888:	f89e 2002 	ldrb.w	r2, [lr, #2]
 802888c:	f89e e001 	ldrb.w	lr, [lr, #1]
 8028890:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8028894:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8028898:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802889c:	ea42 020e 	orr.w	r2, r2, lr
 80288a0:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 80288a4:	f824 2b02 	strh.w	r2, [r4], #2
 80288a8:	9a03      	ldr	r2, [sp, #12]
 80288aa:	f102 3eff 	add.w	lr, r2, #4294967295
 80288ae:	f1be 0f01 	cmp.w	lr, #1
 80288b2:	4620      	mov	r0, r4
 80288b4:	f104 0404 	add.w	r4, r4, #4
 80288b8:	dd36      	ble.n	8028928 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 80288ba:	7808      	ldrb	r0, [r1, #0]
 80288bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80288c0:	0900      	lsrs	r0, r0, #4
 80288c2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80288c6:	eb05 0a00 	add.w	sl, r5, r0
 80288ca:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80288ce:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80288d2:	00d2      	lsls	r2, r2, #3
 80288d4:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 80288d8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80288dc:	ea49 0202 	orr.w	r2, r9, r2
 80288e0:	f815 9000 	ldrb.w	r9, [r5, r0]
 80288e4:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 80288e8:	f824 2c04 	strh.w	r2, [r4, #-4]
 80288ec:	f811 0b01 	ldrb.w	r0, [r1], #1
 80288f0:	f000 000f 	and.w	r0, r0, #15
 80288f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80288f8:	eb05 0a00 	add.w	sl, r5, r0
 80288fc:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8028900:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8028904:	00d2      	lsls	r2, r2, #3
 8028906:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802890a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802890e:	ea49 0202 	orr.w	r2, r9, r2
 8028912:	f815 9000 	ldrb.w	r9, [r5, r0]
 8028916:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802891a:	f824 2c02 	strh.w	r2, [r4, #-2]
 802891e:	e7c6      	b.n	80288ae <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8028920:	4631      	mov	r1, r6
 8028922:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8028926:	e7c2      	b.n	80288ae <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8028928:	d111      	bne.n	802894e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 802892a:	7809      	ldrb	r1, [r1, #0]
 802892c:	0909      	lsrs	r1, r1, #4
 802892e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028932:	186c      	adds	r4, r5, r1
 8028934:	5c69      	ldrb	r1, [r5, r1]
 8028936:	78a2      	ldrb	r2, [r4, #2]
 8028938:	7864      	ldrb	r4, [r4, #1]
 802893a:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802893e:	00e4      	lsls	r4, r4, #3
 8028940:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8028944:	4322      	orrs	r2, r4
 8028946:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 802894a:	f820 2b02 	strh.w	r2, [r0], #2
 802894e:	9a03      	ldr	r2, [sp, #12]
 8028950:	f8bc 4000 	ldrh.w	r4, [ip]
 8028954:	9905      	ldr	r1, [sp, #20]
 8028956:	1aa4      	subs	r4, r4, r2
 8028958:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 802895c:	440a      	add	r2, r1
 802895e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8028962:	fb92 f2f8 	sdiv	r2, r2, r8
 8028966:	4416      	add	r6, r2
 8028968:	e780      	b.n	802886c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 802896a:	4b04      	ldr	r3, [pc, #16]	; (802897c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 802896c:	6818      	ldr	r0, [r3, #0]
 802896e:	6803      	ldr	r3, [r0, #0]
 8028970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028972:	4798      	blx	r3
 8028974:	b00f      	add	sp, #60	; 0x3c
 8028976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802897a:	bf00      	nop
 802897c:	20027ca8 	.word	0x20027ca8
 8028980:	20027ca2 	.word	0x20027ca2
 8028984:	fffff800 	.word	0xfffff800

08028988 <CRC_Lock>:
 8028988:	4a20      	ldr	r2, [pc, #128]	; (8028a0c <CRC_Lock+0x84>)
 802898a:	b530      	push	{r4, r5, lr}
 802898c:	6813      	ldr	r3, [r2, #0]
 802898e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8028992:	f24c 2540 	movw	r5, #49728	; 0xc240
 8028996:	f023 0301 	bic.w	r3, r3, #1
 802899a:	6013      	str	r3, [r2, #0]
 802899c:	4b1c      	ldr	r3, [pc, #112]	; (8028a10 <CRC_Lock+0x88>)
 802899e:	681a      	ldr	r2, [r3, #0]
 80289a0:	4022      	ands	r2, r4
 80289a2:	42aa      	cmp	r2, r5
 80289a4:	d005      	beq.n	80289b2 <CRC_Lock+0x2a>
 80289a6:	681b      	ldr	r3, [r3, #0]
 80289a8:	f24c 2270 	movw	r2, #49776	; 0xc270
 80289ac:	4023      	ands	r3, r4
 80289ae:	4293      	cmp	r3, r2
 80289b0:	d124      	bne.n	80289fc <CRC_Lock+0x74>
 80289b2:	4b18      	ldr	r3, [pc, #96]	; (8028a14 <CRC_Lock+0x8c>)
 80289b4:	681b      	ldr	r3, [r3, #0]
 80289b6:	bb0b      	cbnz	r3, 80289fc <CRC_Lock+0x74>
 80289b8:	4b17      	ldr	r3, [pc, #92]	; (8028a18 <CRC_Lock+0x90>)
 80289ba:	681a      	ldr	r2, [r3, #0]
 80289bc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80289c0:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80289c4:	d00d      	beq.n	80289e2 <CRC_Lock+0x5a>
 80289c6:	681a      	ldr	r2, [r3, #0]
 80289c8:	f240 4483 	movw	r4, #1155	; 0x483
 80289cc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80289d0:	42a2      	cmp	r2, r4
 80289d2:	d006      	beq.n	80289e2 <CRC_Lock+0x5a>
 80289d4:	681b      	ldr	r3, [r3, #0]
 80289d6:	f240 4285 	movw	r2, #1157	; 0x485
 80289da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80289de:	4293      	cmp	r3, r2
 80289e0:	d10c      	bne.n	80289fc <CRC_Lock+0x74>
 80289e2:	4b0e      	ldr	r3, [pc, #56]	; (8028a1c <CRC_Lock+0x94>)
 80289e4:	2201      	movs	r2, #1
 80289e6:	601a      	str	r2, [r3, #0]
 80289e8:	681a      	ldr	r2, [r3, #0]
 80289ea:	2a00      	cmp	r2, #0
 80289ec:	d1fc      	bne.n	80289e8 <CRC_Lock+0x60>
 80289ee:	4b0c      	ldr	r3, [pc, #48]	; (8028a20 <CRC_Lock+0x98>)
 80289f0:	6018      	str	r0, [r3, #0]
 80289f2:	6818      	ldr	r0, [r3, #0]
 80289f4:	1a43      	subs	r3, r0, r1
 80289f6:	4258      	negs	r0, r3
 80289f8:	4158      	adcs	r0, r3
 80289fa:	bd30      	pop	{r4, r5, pc}
 80289fc:	4b09      	ldr	r3, [pc, #36]	; (8028a24 <CRC_Lock+0x9c>)
 80289fe:	2201      	movs	r2, #1
 8028a00:	601a      	str	r2, [r3, #0]
 8028a02:	681a      	ldr	r2, [r3, #0]
 8028a04:	2a00      	cmp	r2, #0
 8028a06:	d1fc      	bne.n	8028a02 <CRC_Lock+0x7a>
 8028a08:	4b07      	ldr	r3, [pc, #28]	; (8028a28 <CRC_Lock+0xa0>)
 8028a0a:	e7f1      	b.n	80289f0 <CRC_Lock+0x68>
 8028a0c:	e0002000 	.word	0xe0002000
 8028a10:	e000ed00 	.word	0xe000ed00
 8028a14:	e0042000 	.word	0xe0042000
 8028a18:	5c001000 	.word	0x5c001000
 8028a1c:	58024c08 	.word	0x58024c08
 8028a20:	58024c00 	.word	0x58024c00
 8028a24:	40023008 	.word	0x40023008
 8028a28:	40023000 	.word	0x40023000

08028a2c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8028a2c:	6101      	str	r1, [r0, #16]
 8028a2e:	4770      	bx	lr

08028a30 <_ZN8touchgfx8Gestures4tickEv>:
 8028a30:	7b83      	ldrb	r3, [r0, #14]
 8028a32:	b14b      	cbz	r3, 8028a48 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8028a34:	8903      	ldrh	r3, [r0, #8]
 8028a36:	3301      	adds	r3, #1
 8028a38:	b29b      	uxth	r3, r3
 8028a3a:	2b07      	cmp	r3, #7
 8028a3c:	8103      	strh	r3, [r0, #8]
 8028a3e:	bf81      	itttt	hi
 8028a40:	2300      	movhi	r3, #0
 8028a42:	8143      	strhhi	r3, [r0, #10]
 8028a44:	8183      	strhhi	r3, [r0, #12]
 8028a46:	7383      	strbhi	r3, [r0, #14]
 8028a48:	4770      	bx	lr
	...

08028a4c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8028a4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8028a50:	4698      	mov	r8, r3
 8028a52:	8883      	ldrh	r3, [r0, #4]
 8028a54:	4604      	mov	r4, r0
 8028a56:	4617      	mov	r7, r2
 8028a58:	f8ad 3006 	strh.w	r3, [sp, #6]
 8028a5c:	eba8 0303 	sub.w	r3, r8, r3
 8028a60:	4a19      	ldr	r2, [pc, #100]	; (8028ac8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8028a62:	460e      	mov	r6, r1
 8028a64:	b21b      	sxth	r3, r3
 8028a66:	88c1      	ldrh	r1, [r0, #6]
 8028a68:	9200      	str	r2, [sp, #0]
 8028a6a:	2000      	movs	r0, #0
 8028a6c:	2b00      	cmp	r3, #0
 8028a6e:	8aa2      	ldrh	r2, [r4, #20]
 8028a70:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8028a74:	bfb8      	it	lt
 8028a76:	425b      	neglt	r3, r3
 8028a78:	f88d 0004 	strb.w	r0, [sp, #4]
 8028a7c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8028a80:	b21b      	sxth	r3, r3
 8028a82:	f8ad 800a 	strh.w	r8, [sp, #10]
 8028a86:	f8ad 500c 	strh.w	r5, [sp, #12]
 8028a8a:	4293      	cmp	r3, r2
 8028a8c:	dc07      	bgt.n	8028a9e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8028a8e:	1a69      	subs	r1, r5, r1
 8028a90:	b209      	sxth	r1, r1
 8028a92:	2900      	cmp	r1, #0
 8028a94:	bfb8      	it	lt
 8028a96:	4249      	neglt	r1, r1
 8028a98:	b209      	sxth	r1, r1
 8028a9a:	428a      	cmp	r2, r1
 8028a9c:	da10      	bge.n	8028ac0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8028a9e:	6920      	ldr	r0, [r4, #16]
 8028aa0:	4669      	mov	r1, sp
 8028aa2:	eba8 0606 	sub.w	r6, r8, r6
 8028aa6:	1bef      	subs	r7, r5, r7
 8028aa8:	6803      	ldr	r3, [r0, #0]
 8028aaa:	685b      	ldr	r3, [r3, #4]
 8028aac:	4798      	blx	r3
 8028aae:	2300      	movs	r3, #0
 8028ab0:	2001      	movs	r0, #1
 8028ab2:	8166      	strh	r6, [r4, #10]
 8028ab4:	8123      	strh	r3, [r4, #8]
 8028ab6:	81a7      	strh	r7, [r4, #12]
 8028ab8:	f8a4 8004 	strh.w	r8, [r4, #4]
 8028abc:	80e5      	strh	r5, [r4, #6]
 8028abe:	73a0      	strb	r0, [r4, #14]
 8028ac0:	b004      	add	sp, #16
 8028ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028ac6:	bf00      	nop
 8028ac8:	08030e60 	.word	0x08030e60

08028acc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8028acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028ace:	461e      	mov	r6, r3
 8028ad0:	1e4b      	subs	r3, r1, #1
 8028ad2:	b085      	sub	sp, #20
 8028ad4:	4604      	mov	r4, r0
 8028ad6:	2b01      	cmp	r3, #1
 8028ad8:	460d      	mov	r5, r1
 8028ada:	4617      	mov	r7, r2
 8028adc:	d84b      	bhi.n	8028b76 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8028ade:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8028ae2:	1cd3      	adds	r3, r2, #3
 8028ae4:	b29b      	uxth	r3, r3
 8028ae6:	2b06      	cmp	r3, #6
 8028ae8:	d916      	bls.n	8028b18 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8028aea:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8028b8c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8028aee:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028af2:	f8cd c004 	str.w	ip, [sp, #4]
 8028af6:	f04f 0c00 	mov.w	ip, #0
 8028afa:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028afe:	6900      	ldr	r0, [r0, #16]
 8028b00:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028b04:	a901      	add	r1, sp, #4
 8028b06:	f88d c008 	strb.w	ip, [sp, #8]
 8028b0a:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028b0e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028b12:	6803      	ldr	r3, [r0, #0]
 8028b14:	689b      	ldr	r3, [r3, #8]
 8028b16:	4798      	blx	r3
 8028b18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028b1c:	1cd3      	adds	r3, r2, #3
 8028b1e:	b29b      	uxth	r3, r3
 8028b20:	2b06      	cmp	r3, #6
 8028b22:	d916      	bls.n	8028b52 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028b24:	f8df c064 	ldr.w	ip, [pc, #100]	; 8028b8c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8028b28:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028b2c:	f8cd c004 	str.w	ip, [sp, #4]
 8028b30:	f04f 0c01 	mov.w	ip, #1
 8028b34:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028b38:	6920      	ldr	r0, [r4, #16]
 8028b3a:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028b3e:	a901      	add	r1, sp, #4
 8028b40:	f88d c008 	strb.w	ip, [sp, #8]
 8028b44:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028b48:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028b4c:	6803      	ldr	r3, [r0, #0]
 8028b4e:	689b      	ldr	r3, [r3, #8]
 8028b50:	4798      	blx	r3
 8028b52:	4b0d      	ldr	r3, [pc, #52]	; (8028b88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8028b54:	a901      	add	r1, sp, #4
 8028b56:	6920      	ldr	r0, [r4, #16]
 8028b58:	9301      	str	r3, [sp, #4]
 8028b5a:	2300      	movs	r3, #0
 8028b5c:	f88d 5008 	strb.w	r5, [sp, #8]
 8028b60:	f8ad 700a 	strh.w	r7, [sp, #10]
 8028b64:	f8ad 600c 	strh.w	r6, [sp, #12]
 8028b68:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028b6c:	6803      	ldr	r3, [r0, #0]
 8028b6e:	681b      	ldr	r3, [r3, #0]
 8028b70:	4798      	blx	r3
 8028b72:	b005      	add	sp, #20
 8028b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028b76:	2900      	cmp	r1, #0
 8028b78:	d1eb      	bne.n	8028b52 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028b7a:	80a2      	strh	r2, [r4, #4]
 8028b7c:	80c6      	strh	r6, [r0, #6]
 8028b7e:	60a1      	str	r1, [r4, #8]
 8028b80:	81a1      	strh	r1, [r4, #12]
 8028b82:	73a1      	strb	r1, [r4, #14]
 8028b84:	e7e5      	b.n	8028b52 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028b86:	bf00      	nop
 8028b88:	08030e4c 	.word	0x08030e4c
 8028b8c:	08030e74 	.word	0x08030e74

08028b90 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 8028b90:	10c9      	asrs	r1, r1, #3
 8028b92:	2900      	cmp	r1, #0
 8028b94:	bfb8      	it	lt
 8028b96:	4249      	neglt	r1, r1
 8028b98:	2801      	cmp	r0, #1
 8028b9a:	d108      	bne.n	8028bae <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8028b9c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8028ba0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8028ba4:	4601      	mov	r1, r0
 8028ba6:	dd02      	ble.n	8028bae <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8028ba8:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8028bac:	4770      	bx	lr
 8028bae:	29ff      	cmp	r1, #255	; 0xff
 8028bb0:	bfa8      	it	ge
 8028bb2:	21ff      	movge	r1, #255	; 0xff
 8028bb4:	4608      	mov	r0, r1
 8028bb6:	4770      	bx	lr

08028bb8 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8028bb8:	b410      	push	{r4}
 8028bba:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8028bbe:	429c      	cmp	r4, r3
 8028bc0:	d803      	bhi.n	8028bca <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8028bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028bc6:	f7ed bb13 	b.w	80161f0 <_ZN8touchgfx7Outline6lineToEii>
 8028bca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028bce:	4770      	bx	lr

08028bd0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8028bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028bd4:	b08b      	sub	sp, #44	; 0x2c
 8028bd6:	4606      	mov	r6, r0
 8028bd8:	468a      	mov	sl, r1
 8028bda:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8028bde:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8028be2:	9308      	str	r3, [sp, #32]
 8028be4:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8028be8:	9309      	str	r3, [sp, #36]	; 0x24
 8028bea:	f7ed fc6c 	bl	80164c6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8028bee:	68b5      	ldr	r5, [r6, #8]
 8028bf0:	4604      	mov	r4, r0
 8028bf2:	2d00      	cmp	r5, #0
 8028bf4:	d044      	beq.n	8028c80 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8028bf6:	6873      	ldr	r3, [r6, #4]
 8028bf8:	42ab      	cmp	r3, r5
 8028bfa:	d33d      	bcc.n	8028c78 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8028bfc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8028c00:	f04f 0800 	mov.w	r8, #0
 8028c04:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 8028c08:	eb02 0b03 	add.w	fp, r2, r3
 8028c0c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8028c10:	fb02 1203 	mla	r2, r2, r3, r1
 8028c14:	9205      	str	r2, [sp, #20]
 8028c16:	1e6a      	subs	r2, r5, #1
 8028c18:	9204      	str	r2, [sp, #16]
 8028c1a:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8028c1e:	f9b4 7000 	ldrsh.w	r7, [r4]
 8028c22:	454b      	cmp	r3, r9
 8028c24:	463a      	mov	r2, r7
 8028c26:	d008      	beq.n	8028c3a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8028c28:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 8028c2c:	eb03 0b09 	add.w	fp, r3, r9
 8028c30:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8028c34:	fb03 1309 	mla	r3, r3, r9, r1
 8028c38:	9305      	str	r3, [sp, #20]
 8028c3a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8028c3e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8028c42:	4498      	add	r8, r3
 8028c44:	9b04      	ldr	r3, [sp, #16]
 8028c46:	3b01      	subs	r3, #1
 8028c48:	9304      	str	r3, [sp, #16]
 8028c4a:	9b04      	ldr	r3, [sp, #16]
 8028c4c:	3301      	adds	r3, #1
 8028c4e:	d015      	beq.n	8028c7c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8028c50:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8028c54:	42bb      	cmp	r3, r7
 8028c56:	d117      	bne.n	8028c88 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8028c58:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8028c5c:	9b04      	ldr	r3, [sp, #16]
 8028c5e:	4548      	cmp	r0, r9
 8028c60:	f103 33ff 	add.w	r3, r3, #4294967295
 8028c64:	d17d      	bne.n	8028d62 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8028c66:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8028c6a:	4401      	add	r1, r0
 8028c6c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8028c70:	4480      	add	r8, r0
 8028c72:	e7e9      	b.n	8028c48 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8028c74:	461f      	mov	r7, r3
 8028c76:	e042      	b.n	8028cfe <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8028c78:	2000      	movs	r0, #0
 8028c7a:	e002      	b.n	8028c82 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8028c7c:	2900      	cmp	r1, #0
 8028c7e:	d16d      	bne.n	8028d5c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8028c80:	2001      	movs	r0, #1
 8028c82:	b00b      	add	sp, #44	; 0x2c
 8028c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028c88:	b379      	cbz	r1, 8028cea <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8028c8a:	2f00      	cmp	r7, #0
 8028c8c:	db29      	blt.n	8028ce2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8028c8e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8028c92:	42bb      	cmp	r3, r7
 8028c94:	dd25      	ble.n	8028ce2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8028c96:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8028c9a:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8028c9e:	f7ff ff77 	bl	8028b90 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 8028ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028ca4:	fb10 f003 	smulbb	r0, r0, r3
 8028ca8:	b280      	uxth	r0, r0
 8028caa:	1c41      	adds	r1, r0, #1
 8028cac:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8028cb0:	1209      	asrs	r1, r1, #8
 8028cb2:	f011 0fff 	tst.w	r1, #255	; 0xff
 8028cb6:	d014      	beq.n	8028ce2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8028cb8:	b2c9      	uxtb	r1, r1
 8028cba:	9808      	ldr	r0, [sp, #32]
 8028cbc:	b2ba      	uxth	r2, r7
 8028cbe:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8028cc0:	9102      	str	r1, [sp, #8]
 8028cc2:	2101      	movs	r1, #1
 8028cc4:	4413      	add	r3, r2
 8028cc6:	4402      	add	r2, r0
 8028cc8:	9101      	str	r1, [sp, #4]
 8028cca:	fa0f f18b 	sxth.w	r1, fp
 8028cce:	f8da 0000 	ldr.w	r0, [sl]
 8028cd2:	b21b      	sxth	r3, r3
 8028cd4:	9100      	str	r1, [sp, #0]
 8028cd6:	b212      	sxth	r2, r2
 8028cd8:	6941      	ldr	r1, [r0, #20]
 8028cda:	4650      	mov	r0, sl
 8028cdc:	460d      	mov	r5, r1
 8028cde:	9905      	ldr	r1, [sp, #20]
 8028ce0:	47a8      	blx	r5
 8028ce2:	9b04      	ldr	r3, [sp, #16]
 8028ce4:	1c7a      	adds	r2, r7, #1
 8028ce6:	3301      	adds	r3, #1
 8028ce8:	d0ca      	beq.n	8028c80 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8028cea:	f9b4 7000 	ldrsh.w	r7, [r4]
 8028cee:	1abb      	subs	r3, r7, r2
 8028cf0:	2b00      	cmp	r3, #0
 8028cf2:	dd31      	ble.n	8028d58 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8028cf4:	2a00      	cmp	r2, #0
 8028cf6:	dabd      	bge.n	8028c74 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8028cf8:	2f00      	cmp	r7, #0
 8028cfa:	dd2d      	ble.n	8028d58 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8028cfc:	2200      	movs	r2, #0
 8028cfe:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8028d02:	19d1      	adds	r1, r2, r7
 8028d04:	4299      	cmp	r1, r3
 8028d06:	db02      	blt.n	8028d0e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8028d08:	1a9f      	subs	r7, r3, r2
 8028d0a:	2f00      	cmp	r7, #0
 8028d0c:	dd24      	ble.n	8028d58 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8028d0e:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8028d12:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8028d16:	f7ff ff3b 	bl	8028b90 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 8028d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028d1c:	fb10 f003 	smulbb	r0, r0, r3
 8028d20:	b280      	uxth	r0, r0
 8028d22:	1c41      	adds	r1, r0, #1
 8028d24:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8028d28:	1209      	asrs	r1, r1, #8
 8028d2a:	f011 0fff 	tst.w	r1, #255	; 0xff
 8028d2e:	d013      	beq.n	8028d58 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8028d30:	b292      	uxth	r2, r2
 8028d32:	9808      	ldr	r0, [sp, #32]
 8028d34:	b2c9      	uxtb	r1, r1
 8028d36:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8028d38:	b23f      	sxth	r7, r7
 8028d3a:	4413      	add	r3, r2
 8028d3c:	9102      	str	r1, [sp, #8]
 8028d3e:	4402      	add	r2, r0
 8028d40:	fa0f f18b 	sxth.w	r1, fp
 8028d44:	f8da 0000 	ldr.w	r0, [sl]
 8028d48:	b21b      	sxth	r3, r3
 8028d4a:	9100      	str	r1, [sp, #0]
 8028d4c:	b212      	sxth	r2, r2
 8028d4e:	9701      	str	r7, [sp, #4]
 8028d50:	9905      	ldr	r1, [sp, #20]
 8028d52:	6947      	ldr	r7, [r0, #20]
 8028d54:	4650      	mov	r0, sl
 8028d56:	47b8      	blx	r7
 8028d58:	464b      	mov	r3, r9
 8028d5a:	e75e      	b.n	8028c1a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8028d5c:	2f00      	cmp	r7, #0
 8028d5e:	da96      	bge.n	8028c8e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8028d60:	e78e      	b.n	8028c80 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8028d62:	2900      	cmp	r1, #0
 8028d64:	d0f8      	beq.n	8028d58 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8028d66:	e790      	b.n	8028c8a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08028d68 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8028d68:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8028d6c:	4b4a      	ldr	r3, [pc, #296]	; (8028e98 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x130>)
 8028d6e:	2500      	movs	r5, #0
 8028d70:	f100 0620 	add.w	r6, r0, #32
 8028d74:	4604      	mov	r4, r0
 8028d76:	4690      	mov	r8, r2
 8028d78:	f100 0718 	add.w	r7, r0, #24
 8028d7c:	e9c0 3100 	strd	r3, r1, [r0]
 8028d80:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8028d84:	e9c0 5504 	strd	r5, r5, [r0, #16]
 8028d88:	e9c0 5506 	strd	r5, r5, [r0, #24]
 8028d8c:	4630      	mov	r0, r6
 8028d8e:	f7ec fd75 	bl	801587c <_ZN8touchgfx7OutlineC1Ev>
 8028d92:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8028d96:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 8028d9a:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8028d9e:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8028da2:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8028da6:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 8028daa:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8028dae:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8028db2:	9500      	str	r5, [sp, #0]
 8028db4:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 8028db8:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 8028dbc:	f9b8 2000 	ldrsh.w	r2, [r8]
 8028dc0:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8028dc4:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8028dc8:	4410      	add	r0, r2
 8028dca:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8028dce:	b280      	uxth	r0, r0
 8028dd0:	fa0f fa80 	sxth.w	sl, r0
 8028dd4:	45aa      	cmp	sl, r5
 8028dd6:	dd5c      	ble.n	8028e92 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 8028dd8:	4591      	cmp	r9, r2
 8028dda:	dd5a      	ble.n	8028e92 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 8028ddc:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8028de0:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8028de4:	440b      	add	r3, r1
 8028de6:	b29b      	uxth	r3, r3
 8028de8:	b21d      	sxth	r5, r3
 8028dea:	2d00      	cmp	r5, #0
 8028dec:	dd51      	ble.n	8028e92 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 8028dee:	458e      	cmp	lr, r1
 8028df0:	dd4f      	ble.n	8028e92 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 8028df2:	45d1      	cmp	r9, sl
 8028df4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8028df8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8028dfc:	bfb8      	it	lt
 8028dfe:	fa1f f089 	uxthlt.w	r0, r9
 8028e02:	45ae      	cmp	lr, r5
 8028e04:	f8ad 2000 	strh.w	r2, [sp]
 8028e08:	bfb8      	it	lt
 8028e0a:	fa1f f38e 	uxthlt.w	r3, lr
 8028e0e:	1a80      	subs	r0, r0, r2
 8028e10:	f8ad 1002 	strh.w	r1, [sp, #2]
 8028e14:	1a5b      	subs	r3, r3, r1
 8028e16:	f8ad 0004 	strh.w	r0, [sp, #4]
 8028e1a:	f8ad 3006 	strh.w	r3, [sp, #6]
 8028e1e:	466d      	mov	r5, sp
 8028e20:	e895 0003 	ldmia.w	r5, {r0, r1}
 8028e24:	e887 0003 	stmia.w	r7, {r0, r1}
 8028e28:	f8dc 3000 	ldr.w	r3, [ip]
 8028e2c:	4660      	mov	r0, ip
 8028e2e:	4639      	mov	r1, r7
 8028e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028e32:	4798      	blx	r3
 8028e34:	6861      	ldr	r1, [r4, #4]
 8028e36:	4628      	mov	r0, r5
 8028e38:	3104      	adds	r1, #4
 8028e3a:	f7ee ff13 	bl	8017c64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028e3e:	4638      	mov	r0, r7
 8028e40:	f7ee fecc 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8028e44:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8028e48:	f8bd 2000 	ldrh.w	r2, [sp]
 8028e4c:	4630      	mov	r0, r6
 8028e4e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8028e52:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8028e56:	f7ec fcf5 	bl	8015844 <_ZN8touchgfx7Outline5resetEv>
 8028e5a:	f9bd 3000 	ldrsh.w	r3, [sp]
 8028e5e:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 8028e62:	4620      	mov	r0, r4
 8028e64:	015b      	lsls	r3, r3, #5
 8028e66:	60a3      	str	r3, [r4, #8]
 8028e68:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8028e6c:	015b      	lsls	r3, r3, #5
 8028e6e:	60e3      	str	r3, [r4, #12]
 8028e70:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8028e74:	015b      	lsls	r3, r3, #5
 8028e76:	6123      	str	r3, [r4, #16]
 8028e78:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8028e7c:	015b      	lsls	r3, r3, #5
 8028e7e:	6163      	str	r3, [r4, #20]
 8028e80:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8028e84:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8028e88:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 8028e8c:	b002      	add	sp, #8
 8028e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028e92:	2300      	movs	r3, #0
 8028e94:	9301      	str	r3, [sp, #4]
 8028e96:	e7c2      	b.n	8028e1e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb6>
 8028e98:	08031198 	.word	0x08031198

08028e9c <_ZN8touchgfx6Canvas5closeEv>:
 8028e9c:	b538      	push	{r3, r4, r5, lr}
 8028e9e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8028ea2:	4604      	mov	r4, r0
 8028ea4:	b193      	cbz	r3, 8028ecc <_ZN8touchgfx6Canvas5closeEv+0x30>
 8028ea6:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8028eaa:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 8028eae:	4213      	tst	r3, r2
 8028eb0:	d10c      	bne.n	8028ecc <_ZN8touchgfx6Canvas5closeEv+0x30>
 8028eb2:	f100 0520 	add.w	r5, r0, #32
 8028eb6:	b123      	cbz	r3, 8028ec2 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8028eb8:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 8028ebc:	4628      	mov	r0, r5
 8028ebe:	f7ff fe7b 	bl	8028bb8 <_ZN8touchgfx10Rasterizer6lineToEii>
 8028ec2:	4628      	mov	r0, r5
 8028ec4:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 8028ec8:	f7ff fe76 	bl	8028bb8 <_ZN8touchgfx10Rasterizer6lineToEii>
 8028ecc:	2300      	movs	r3, #0
 8028ece:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8028ed2:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 8028ed6:	4298      	cmp	r0, r3
 8028ed8:	bf34      	ite	cc
 8028eda:	2000      	movcc	r0, #0
 8028edc:	2001      	movcs	r0, #1
 8028ede:	bd38      	pop	{r3, r4, r5, pc}

08028ee0 <_ZN8touchgfx6Canvas6renderEh>:
 8028ee0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8028ee4:	4604      	mov	r4, r0
 8028ee6:	6840      	ldr	r0, [r0, #4]
 8028ee8:	460d      	mov	r5, r1
 8028eea:	6803      	ldr	r3, [r0, #0]
 8028eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8028eee:	4798      	blx	r3
 8028ef0:	fb10 f105 	smulbb	r1, r0, r5
 8028ef4:	b289      	uxth	r1, r1
 8028ef6:	1c4d      	adds	r5, r1, #1
 8028ef8:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8028efc:	122d      	asrs	r5, r5, #8
 8028efe:	f000 809c 	beq.w	802903a <_ZN8touchgfx6Canvas6renderEh+0x15a>
 8028f02:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8028f06:	2b00      	cmp	r3, #0
 8028f08:	f000 8097 	beq.w	802903a <_ZN8touchgfx6Canvas6renderEh+0x15a>
 8028f0c:	4620      	mov	r0, r4
 8028f0e:	f7ff ffc5 	bl	8028e9c <_ZN8touchgfx6Canvas5closeEv>
 8028f12:	4607      	mov	r7, r0
 8028f14:	2800      	cmp	r0, #0
 8028f16:	d048      	beq.n	8028faa <_ZN8touchgfx6Canvas6renderEh+0xca>
 8028f18:	6863      	ldr	r3, [r4, #4]
 8028f1a:	4e49      	ldr	r6, [pc, #292]	; (8029040 <_ZN8touchgfx6Canvas6renderEh+0x160>)
 8028f1c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8028f1e:	6837      	ldr	r7, [r6, #0]
 8028f20:	6803      	ldr	r3, [r0, #0]
 8028f22:	689b      	ldr	r3, [r3, #8]
 8028f24:	4798      	blx	r3
 8028f26:	4601      	mov	r1, r0
 8028f28:	4638      	mov	r0, r7
 8028f2a:	f7ea f8db 	bl	80130e4 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8028f2e:	4607      	mov	r7, r0
 8028f30:	f7db ff26 	bl	8004d80 <_ZN8touchgfx3HAL3lcdEv>
 8028f34:	6803      	ldr	r3, [r0, #0]
 8028f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028f38:	4798      	blx	r3
 8028f3a:	4680      	mov	r8, r0
 8028f3c:	f7db ff20 	bl	8004d80 <_ZN8touchgfx3HAL3lcdEv>
 8028f40:	6803      	ldr	r3, [r0, #0]
 8028f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028f44:	4798      	blx	r3
 8028f46:	280b      	cmp	r0, #11
 8028f48:	d85c      	bhi.n	8029004 <_ZN8touchgfx6Canvas6renderEh+0x124>
 8028f4a:	e8df f000 	tbb	[pc, r0]
 8028f4e:	5d52      	.short	0x5d52
 8028f50:	325b066d 	.word	0x325b066d
 8028f54:	66666642 	.word	0x66666642
 8028f58:	6666      	.short	0x6666
 8028f5a:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8028f5e:	2208      	movs	r2, #8
 8028f60:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8028f64:	fb91 f2f2 	sdiv	r2, r1, r2
 8028f68:	fb08 2303 	mla	r3, r8, r3, r2
 8028f6c:	441f      	add	r7, r3
 8028f6e:	424b      	negs	r3, r1
 8028f70:	f001 0107 	and.w	r1, r1, #7
 8028f74:	f003 0307 	and.w	r3, r3, #7
 8028f78:	bf58      	it	pl
 8028f7a:	4259      	negpl	r1, r3
 8028f7c:	b2c9      	uxtb	r1, r1
 8028f7e:	6860      	ldr	r0, [r4, #4]
 8028f80:	b2ed      	uxtb	r5, r5
 8028f82:	463a      	mov	r2, r7
 8028f84:	fa0f f388 	sxth.w	r3, r8
 8028f88:	e9cd 1500 	strd	r1, r5, [sp]
 8028f8c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8028f8e:	f104 0020 	add.w	r0, r4, #32
 8028f92:	f7ff fe1d 	bl	8028bd0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8028f96:	6863      	ldr	r3, [r4, #4]
 8028f98:	4607      	mov	r7, r0
 8028f9a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8028f9c:	6803      	ldr	r3, [r0, #0]
 8028f9e:	691b      	ldr	r3, [r3, #16]
 8028fa0:	4798      	blx	r3
 8028fa2:	6830      	ldr	r0, [r6, #0]
 8028fa4:	6803      	ldr	r3, [r0, #0]
 8028fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028fa8:	4798      	blx	r3
 8028faa:	4638      	mov	r0, r7
 8028fac:	b002      	add	sp, #8
 8028fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028fb2:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8028fb6:	2204      	movs	r2, #4
 8028fb8:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8028fbc:	fb91 f2f2 	sdiv	r2, r1, r2
 8028fc0:	fb08 2303 	mla	r3, r8, r3, r2
 8028fc4:	441f      	add	r7, r3
 8028fc6:	424b      	negs	r3, r1
 8028fc8:	f001 0103 	and.w	r1, r1, #3
 8028fcc:	f003 0303 	and.w	r3, r3, #3
 8028fd0:	e7d2      	b.n	8028f78 <_ZN8touchgfx6Canvas6renderEh+0x98>
 8028fd2:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8028fd6:	2202      	movs	r2, #2
 8028fd8:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8028fdc:	2900      	cmp	r1, #0
 8028fde:	fb91 f2f2 	sdiv	r2, r1, r2
 8028fe2:	f001 0101 	and.w	r1, r1, #1
 8028fe6:	fb08 2303 	mla	r3, r8, r3, r2
 8028fea:	bfb8      	it	lt
 8028fec:	4249      	neglt	r1, r1
 8028fee:	441f      	add	r7, r3
 8028ff0:	e7c4      	b.n	8028f7c <_ZN8touchgfx6Canvas6renderEh+0x9c>
 8028ff2:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8028ff6:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8028ffa:	fb08 f303 	mul.w	r3, r8, r3
 8028ffe:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8029002:	441f      	add	r7, r3
 8029004:	2100      	movs	r1, #0
 8029006:	e7ba      	b.n	8028f7e <_ZN8touchgfx6Canvas6renderEh+0x9e>
 8029008:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802900c:	2103      	movs	r1, #3
 802900e:	fb08 f203 	mul.w	r2, r8, r3
 8029012:	8b23      	ldrh	r3, [r4, #24]
 8029014:	fb13 2301 	smlabb	r3, r3, r1, r2
 8029018:	e7f3      	b.n	8029002 <_ZN8touchgfx6Canvas6renderEh+0x122>
 802901a:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802901e:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8029022:	fb08 2303 	mla	r3, r8, r3, r2
 8029026:	e7ec      	b.n	8029002 <_ZN8touchgfx6Canvas6renderEh+0x122>
 8029028:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802902c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8029030:	fb08 f303 	mul.w	r3, r8, r3
 8029034:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8029038:	e7e3      	b.n	8029002 <_ZN8touchgfx6Canvas6renderEh+0x122>
 802903a:	2701      	movs	r7, #1
 802903c:	e7b5      	b.n	8028faa <_ZN8touchgfx6Canvas6renderEh+0xca>
 802903e:	bf00      	nop
 8029040:	20027ca8 	.word	0x20027ca8

08029044 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8029044:	4b07      	ldr	r3, [pc, #28]	; (8029064 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8029046:	b510      	push	{r4, lr}
 8029048:	781b      	ldrb	r3, [r3, #0]
 802904a:	2b01      	cmp	r3, #1
 802904c:	d108      	bne.n	8029060 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802904e:	6843      	ldr	r3, [r0, #4]
 8029050:	6814      	ldr	r4, [r2, #0]
 8029052:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8029056:	680b      	ldr	r3, [r1, #0]
 8029058:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802905c:	6013      	str	r3, [r2, #0]
 802905e:	600c      	str	r4, [r1, #0]
 8029060:	bd10      	pop	{r4, pc}
 8029062:	bf00      	nop
 8029064:	20027ca0 	.word	0x20027ca0

08029068 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8029068:	b513      	push	{r0, r1, r4, lr}
 802906a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 802906e:	4604      	mov	r4, r0
 8029070:	e9cd 2100 	strd	r2, r1, [sp]
 8029074:	b9a3      	cbnz	r3, 80290a0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8029076:	466a      	mov	r2, sp
 8029078:	a901      	add	r1, sp, #4
 802907a:	4620      	mov	r0, r4
 802907c:	f7ff ffe2 	bl	8029044 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8029080:	68a3      	ldr	r3, [r4, #8]
 8029082:	9901      	ldr	r1, [sp, #4]
 8029084:	9a00      	ldr	r2, [sp, #0]
 8029086:	1ac9      	subs	r1, r1, r3
 8029088:	68e3      	ldr	r3, [r4, #12]
 802908a:	1ad2      	subs	r2, r2, r3
 802908c:	9101      	str	r1, [sp, #4]
 802908e:	2a00      	cmp	r2, #0
 8029090:	9200      	str	r2, [sp, #0]
 8029092:	da0b      	bge.n	80290ac <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8029094:	2301      	movs	r3, #1
 8029096:	2900      	cmp	r1, #0
 8029098:	da0e      	bge.n	80290b8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802909a:	f043 0304 	orr.w	r3, r3, #4
 802909e:	e013      	b.n	80290c8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 80290a0:	f7ff fefc 	bl	8028e9c <_ZN8touchgfx6Canvas5closeEv>
 80290a4:	2800      	cmp	r0, #0
 80290a6:	d1e6      	bne.n	8029076 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 80290a8:	b002      	add	sp, #8
 80290aa:	bd10      	pop	{r4, pc}
 80290ac:	6963      	ldr	r3, [r4, #20]
 80290ae:	429a      	cmp	r2, r3
 80290b0:	bfac      	ite	ge
 80290b2:	2302      	movge	r3, #2
 80290b4:	2300      	movlt	r3, #0
 80290b6:	e7ee      	b.n	8029096 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 80290b8:	6920      	ldr	r0, [r4, #16]
 80290ba:	4281      	cmp	r1, r0
 80290bc:	bfac      	ite	ge
 80290be:	2008      	movge	r0, #8
 80290c0:	2000      	movlt	r0, #0
 80290c2:	4318      	orrs	r0, r3
 80290c4:	b2c3      	uxtb	r3, r0
 80290c6:	b158      	cbz	r0, 80290e0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 80290c8:	2200      	movs	r2, #0
 80290ca:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 80290ce:	9901      	ldr	r1, [sp, #4]
 80290d0:	9a00      	ldr	r2, [sp, #0]
 80290d2:	66a1      	str	r1, [r4, #104]	; 0x68
 80290d4:	66e2      	str	r2, [r4, #108]	; 0x6c
 80290d6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80290da:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 80290de:	e7e3      	b.n	80290a8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 80290e0:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 80290e4:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 80290e8:	4298      	cmp	r0, r3
 80290ea:	d803      	bhi.n	80290f4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 80290ec:	f104 0020 	add.w	r0, r4, #32
 80290f0:	f7ed f898 	bl	8016224 <_ZN8touchgfx7Outline6moveToEii>
 80290f4:	2301      	movs	r3, #1
 80290f6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80290fa:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80290fe:	2300      	movs	r3, #0
 8029100:	e7e5      	b.n	80290ce <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08029102 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8029102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8029104:	ab02      	add	r3, sp, #8
 8029106:	4604      	mov	r4, r0
 8029108:	9101      	str	r1, [sp, #4]
 802910a:	a901      	add	r1, sp, #4
 802910c:	f843 2d08 	str.w	r2, [r3, #-8]!
 8029110:	461a      	mov	r2, r3
 8029112:	f7ff ff97 	bl	8029044 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8029116:	68a3      	ldr	r3, [r4, #8]
 8029118:	9901      	ldr	r1, [sp, #4]
 802911a:	9a00      	ldr	r2, [sp, #0]
 802911c:	1ac9      	subs	r1, r1, r3
 802911e:	68e3      	ldr	r3, [r4, #12]
 8029120:	1ad2      	subs	r2, r2, r3
 8029122:	9101      	str	r1, [sp, #4]
 8029124:	2a00      	cmp	r2, #0
 8029126:	9200      	str	r2, [sp, #0]
 8029128:	db1c      	blt.n	8029164 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802912a:	6963      	ldr	r3, [r4, #20]
 802912c:	429a      	cmp	r2, r3
 802912e:	bfac      	ite	ge
 8029130:	2002      	movge	r0, #2
 8029132:	2000      	movlt	r0, #0
 8029134:	2900      	cmp	r1, #0
 8029136:	db17      	blt.n	8029168 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8029138:	6923      	ldr	r3, [r4, #16]
 802913a:	4299      	cmp	r1, r3
 802913c:	bfac      	ite	ge
 802913e:	2308      	movge	r3, #8
 8029140:	2300      	movlt	r3, #0
 8029142:	4303      	orrs	r3, r0
 8029144:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 8029148:	b2dd      	uxtb	r5, r3
 802914a:	b978      	cbnz	r0, 802916c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802914c:	f104 0020 	add.w	r0, r4, #32
 8029150:	f7ff fd32 	bl	8028bb8 <_ZN8touchgfx10Rasterizer6lineToEii>
 8029154:	9b01      	ldr	r3, [sp, #4]
 8029156:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 802915a:	65e3      	str	r3, [r4, #92]	; 0x5c
 802915c:	9b00      	ldr	r3, [sp, #0]
 802915e:	6623      	str	r3, [r4, #96]	; 0x60
 8029160:	b002      	add	sp, #8
 8029162:	bd70      	pop	{r4, r5, r6, pc}
 8029164:	2001      	movs	r0, #1
 8029166:	e7e5      	b.n	8029134 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8029168:	2304      	movs	r3, #4
 802916a:	e7ea      	b.n	8029142 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802916c:	b113      	cbz	r3, 8029174 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802916e:	ea10 0305 	ands.w	r3, r0, r5
 8029172:	d11c      	bne.n	80291ae <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8029174:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8029178:	f104 0620 	add.w	r6, r4, #32
 802917c:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 8029180:	b98b      	cbnz	r3, 80291a6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 8029182:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8029186:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 802918a:	4298      	cmp	r0, r3
 802918c:	d802      	bhi.n	8029194 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802918e:	4630      	mov	r0, r6
 8029190:	f7ed f848 	bl	8016224 <_ZN8touchgfx7Outline6moveToEii>
 8029194:	2301      	movs	r3, #1
 8029196:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802919a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 802919e:	4630      	mov	r0, r6
 80291a0:	e9dd 2100 	ldrd	r2, r1, [sp]
 80291a4:	e7d4      	b.n	8029150 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 80291a6:	4630      	mov	r0, r6
 80291a8:	f7ff fd06 	bl	8028bb8 <_ZN8touchgfx10Rasterizer6lineToEii>
 80291ac:	e7f7      	b.n	802919e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 80291ae:	461d      	mov	r5, r3
 80291b0:	e7d0      	b.n	8029154 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

080291b4 <_ZN8touchgfx6CanvasD1Ev>:
 80291b4:	4b04      	ldr	r3, [pc, #16]	; (80291c8 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 80291b6:	b510      	push	{r4, lr}
 80291b8:	4604      	mov	r4, r0
 80291ba:	f840 3b20 	str.w	r3, [r0], #32
 80291be:	f7ec fb39 	bl	8015834 <_ZN8touchgfx7OutlineD1Ev>
 80291c2:	4620      	mov	r0, r4
 80291c4:	bd10      	pop	{r4, pc}
 80291c6:	bf00      	nop
 80291c8:	08031198 	.word	0x08031198

080291cc <_ZN8touchgfx6CanvasD0Ev>:
 80291cc:	b510      	push	{r4, lr}
 80291ce:	4604      	mov	r4, r0
 80291d0:	f7ff fff0 	bl	80291b4 <_ZN8touchgfx6CanvasD1Ev>
 80291d4:	2170      	movs	r1, #112	; 0x70
 80291d6:	4620      	mov	r0, r4
 80291d8:	f001 fbf3 	bl	802a9c2 <_ZdlPvj>
 80291dc:	4620      	mov	r0, r4
 80291de:	bd10      	pop	{r4, pc}

080291e0 <_ZN8touchgfx6CircleD1Ev>:
 80291e0:	4770      	bx	lr

080291e2 <_ZN8touchgfx6CircleD0Ev>:
 80291e2:	b510      	push	{r4, lr}
 80291e4:	4604      	mov	r4, r0
 80291e6:	2148      	movs	r1, #72	; 0x48
 80291e8:	f001 fbeb 	bl	802a9c2 <_ZdlPvj>
 80291ec:	4620      	mov	r0, r4
 80291ee:	bd10      	pop	{r4, pc}

080291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 80291f0:	b507      	push	{r0, r1, r2, lr}
 80291f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80291f6:	ab01      	add	r3, sp, #4
 80291f8:	6809      	ldr	r1, [r1, #0]
 80291fa:	6800      	ldr	r0, [r0, #0]
 80291fc:	f7f0 f914 	bl	8019428 <_ZN8touchgfx6muldivElllRl>
 8029200:	b003      	add	sp, #12
 8029202:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08029208 <_ZN8touchgfx7CWRUtil4sineEi>:
 8029208:	f44f 73b4 	mov.w	r3, #360	; 0x168
 802920c:	fb90 f2f3 	sdiv	r2, r0, r3
 8029210:	fb02 0013 	mls	r0, r2, r3, r0
 8029214:	2800      	cmp	r0, #0
 8029216:	bfb8      	it	lt
 8029218:	18c0      	addlt	r0, r0, r3
 802921a:	4b0a      	ldr	r3, [pc, #40]	; (8029244 <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 802921c:	285a      	cmp	r0, #90	; 0x5a
 802921e:	dc02      	bgt.n	8029226 <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 8029220:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8029224:	4770      	bx	lr
 8029226:	28b4      	cmp	r0, #180	; 0xb4
 8029228:	dc02      	bgt.n	8029230 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 802922a:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 802922e:	e7f7      	b.n	8029220 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 8029230:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8029234:	bfd4      	ite	le
 8029236:	38b4      	suble	r0, #180	; 0xb4
 8029238:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 802923c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8029240:	4240      	negs	r0, r0
 8029242:	4770      	bx	lr
 8029244:	080311a4 	.word	0x080311a4

08029248 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8029248:	f44f 5334 	mov.w	r3, #11520	; 0x2d00
 802924c:	fb90 f2f3 	sdiv	r2, r0, r3
 8029250:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8029252:	fb02 0013 	mls	r0, r2, r3, r0
 8029256:	2800      	cmp	r0, #0
 8029258:	bfb8      	it	lt
 802925a:	18c0      	addlt	r0, r0, r3
 802925c:	1144      	asrs	r4, r0, #5
 802925e:	f000 061f 	and.w	r6, r0, #31
 8029262:	4620      	mov	r0, r4
 8029264:	f7ff ffd0 	bl	8029208 <_ZN8touchgfx7CWRUtil4sineEi>
 8029268:	4605      	mov	r5, r0
 802926a:	b90e      	cbnz	r6, 8029270 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>
 802926c:	b002      	add	sp, #8
 802926e:	bd70      	pop	{r4, r5, r6, pc}
 8029270:	1c60      	adds	r0, r4, #1
 8029272:	f7ff ffc9 	bl	8029208 <_ZN8touchgfx7CWRUtil4sineEi>
 8029276:	ab01      	add	r3, sp, #4
 8029278:	2220      	movs	r2, #32
 802927a:	4631      	mov	r1, r6
 802927c:	1b40      	subs	r0, r0, r5
 802927e:	f7f0 f8d3 	bl	8019428 <_ZN8touchgfx6muldivElllRl>
 8029282:	4428      	add	r0, r5
 8029284:	e7f2      	b.n	802926c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x24>

08029286 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 8029286:	b508      	push	{r3, lr}
 8029288:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 802928c:	f7ff ffdc 	bl	8029248 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8029290:	bd08      	pop	{r3, pc}
	...

08029294 <_ZN8touchgfx6CircleC1Ev>:
 8029294:	b510      	push	{r4, lr}
 8029296:	4604      	mov	r4, r0
 8029298:	f7ea f916 	bl	80134c8 <_ZN8touchgfx12CanvasWidgetC1Ev>
 802929c:	4b08      	ldr	r3, [pc, #32]	; (80292c0 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 802929e:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 80292a2:	4620      	mov	r0, r4
 80292a4:	6023      	str	r3, [r4, #0]
 80292a6:	2300      	movs	r3, #0
 80292a8:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
 80292ac:	f24b 4205 	movw	r2, #46085	; 0xb405
 80292b0:	60a3      	str	r3, [r4, #8]
 80292b2:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 80292b6:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80292ba:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
 80292be:	bd10      	pop	{r4, pc}
 80292c0:	08031264 	.word	0x08031264

080292c4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 80292c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80292c8:	428a      	cmp	r2, r1
 80292ca:	4680      	mov	r8, r0
 80292cc:	4610      	mov	r0, r2
 80292ce:	4699      	mov	r9, r3
 80292d0:	bfaa      	itet	ge
 80292d2:	460a      	movge	r2, r1
 80292d4:	460b      	movlt	r3, r1
 80292d6:	4603      	movge	r3, r0
 80292d8:	b085      	sub	sp, #20
 80292da:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
 80292de:	f108 0a34 	add.w	sl, r8, #52	; 0x34
 80292e2:	1a99      	subs	r1, r3, r2
 80292e4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80292e6:	f5b1 5f34 	cmp.w	r1, #11520	; 0x2d00
 80292ea:	bfa4      	itt	ge
 80292ec:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 80292f0:	2200      	movge	r2, #0
 80292f2:	e9dd 760e 	ldrd	r7, r6, [sp, #56]	; 0x38
 80292f6:	9300      	str	r3, [sp, #0]
 80292f8:	f102 0b01 	add.w	fp, r2, #1
 80292fc:	2c00      	cmp	r4, #0
 80292fe:	f040 80ae 	bne.w	802945e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x19a>
 8029302:	4610      	mov	r0, r2
 8029304:	9201      	str	r2, [sp, #4]
 8029306:	f7ff ff9f 	bl	8029248 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 802930a:	a903      	add	r1, sp, #12
 802930c:	9003      	str	r0, [sp, #12]
 802930e:	4650      	mov	r0, sl
 8029310:	f7ff ff6e 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8029314:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8029318:	9a01      	ldr	r2, [sp, #4]
 802931a:	4408      	add	r0, r1
 802931c:	f8d9 1000 	ldr.w	r1, [r9]
 8029320:	4281      	cmp	r1, r0
 8029322:	bfc8      	it	gt
 8029324:	f8c9 0000 	strgt.w	r0, [r9]
 8029328:	6839      	ldr	r1, [r7, #0]
 802932a:	4288      	cmp	r0, r1
 802932c:	bfc8      	it	gt
 802932e:	6038      	strgt	r0, [r7, #0]
 8029330:	4610      	mov	r0, r2
 8029332:	f7ff ffa8 	bl	8029286 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8029336:	a903      	add	r1, sp, #12
 8029338:	9003      	str	r0, [sp, #12]
 802933a:	4650      	mov	r0, sl
 802933c:	f7ff ff58 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8029340:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8029344:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8029348:	1a10      	subs	r0, r2, r0
 802934a:	6832      	ldr	r2, [r6, #0]
 802934c:	4282      	cmp	r2, r0
 802934e:	bfc8      	it	gt
 8029350:	6030      	strgt	r0, [r6, #0]
 8029352:	682a      	ldr	r2, [r5, #0]
 8029354:	4290      	cmp	r0, r2
 8029356:	fb9b f2f1 	sdiv	r2, fp, r1
 802935a:	fb01 b212 	mls	r2, r1, r2, fp
 802935e:	bfc8      	it	gt
 8029360:	6028      	strgt	r0, [r5, #0]
 8029362:	1a8a      	subs	r2, r1, r2
 8029364:	fb92 f0f1 	sdiv	r0, r2, r1
 8029368:	fb01 2210 	mls	r2, r1, r0, r2
 802936c:	4493      	add	fp, r2
 802936e:	9b00      	ldr	r3, [sp, #0]
 8029370:	455b      	cmp	r3, fp
 8029372:	db2a      	blt.n	80293ca <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x106>
 8029374:	4658      	mov	r0, fp
 8029376:	f7ff ff67 	bl	8029248 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 802937a:	a903      	add	r1, sp, #12
 802937c:	9003      	str	r0, [sp, #12]
 802937e:	4650      	mov	r0, sl
 8029380:	f7ff ff36 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8029384:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8029388:	4410      	add	r0, r2
 802938a:	f8d9 2000 	ldr.w	r2, [r9]
 802938e:	4282      	cmp	r2, r0
 8029390:	bfc8      	it	gt
 8029392:	f8c9 0000 	strgt.w	r0, [r9]
 8029396:	683a      	ldr	r2, [r7, #0]
 8029398:	4290      	cmp	r0, r2
 802939a:	bfc8      	it	gt
 802939c:	6038      	strgt	r0, [r7, #0]
 802939e:	4658      	mov	r0, fp
 80293a0:	f7ff ff71 	bl	8029286 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80293a4:	a903      	add	r1, sp, #12
 80293a6:	9003      	str	r0, [sp, #12]
 80293a8:	4650      	mov	r0, sl
 80293aa:	f7ff ff21 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80293ae:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 80293b2:	f50b 6b34 	add.w	fp, fp, #2880	; 0xb40
 80293b6:	1a10      	subs	r0, r2, r0
 80293b8:	6832      	ldr	r2, [r6, #0]
 80293ba:	4282      	cmp	r2, r0
 80293bc:	bfc8      	it	gt
 80293be:	6030      	strgt	r0, [r6, #0]
 80293c0:	682a      	ldr	r2, [r5, #0]
 80293c2:	4290      	cmp	r0, r2
 80293c4:	bfc8      	it	gt
 80293c6:	6028      	strgt	r0, [r5, #0]
 80293c8:	e7d1      	b.n	802936e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xaa>
 80293ca:	f5ab 6b34 	sub.w	fp, fp, #2880	; 0xb40
 80293ce:	9b00      	ldr	r3, [sp, #0]
 80293d0:	455b      	cmp	r3, fp
 80293d2:	dd27      	ble.n	8029424 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x160>
 80293d4:	4618      	mov	r0, r3
 80293d6:	f7ff ff37 	bl	8029248 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80293da:	a903      	add	r1, sp, #12
 80293dc:	9003      	str	r0, [sp, #12]
 80293de:	4650      	mov	r0, sl
 80293e0:	f7ff ff06 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80293e4:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 80293e8:	4410      	add	r0, r2
 80293ea:	f8d9 2000 	ldr.w	r2, [r9]
 80293ee:	4282      	cmp	r2, r0
 80293f0:	bfc8      	it	gt
 80293f2:	f8c9 0000 	strgt.w	r0, [r9]
 80293f6:	683a      	ldr	r2, [r7, #0]
 80293f8:	4290      	cmp	r0, r2
 80293fa:	bfc8      	it	gt
 80293fc:	6038      	strgt	r0, [r7, #0]
 80293fe:	9800      	ldr	r0, [sp, #0]
 8029400:	f7ff ff41 	bl	8029286 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8029404:	a903      	add	r1, sp, #12
 8029406:	9003      	str	r0, [sp, #12]
 8029408:	4650      	mov	r0, sl
 802940a:	f7ff fef1 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 802940e:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8029412:	1a10      	subs	r0, r2, r0
 8029414:	6832      	ldr	r2, [r6, #0]
 8029416:	4282      	cmp	r2, r0
 8029418:	bfc8      	it	gt
 802941a:	6030      	strgt	r0, [r6, #0]
 802941c:	682a      	ldr	r2, [r5, #0]
 802941e:	4290      	cmp	r0, r2
 8029420:	bfc8      	it	gt
 8029422:	6028      	strgt	r0, [r5, #0]
 8029424:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8029428:	f8d9 1000 	ldr.w	r1, [r9]
 802942c:	4291      	cmp	r1, r2
 802942e:	bfc8      	it	gt
 8029430:	f8c9 2000 	strgt.w	r2, [r9]
 8029434:	683a      	ldr	r2, [r7, #0]
 8029436:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 802943a:	429a      	cmp	r2, r3
 802943c:	bfb8      	it	lt
 802943e:	603b      	strlt	r3, [r7, #0]
 8029440:	6832      	ldr	r2, [r6, #0]
 8029442:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8029446:	429a      	cmp	r2, r3
 8029448:	bfc8      	it	gt
 802944a:	6033      	strgt	r3, [r6, #0]
 802944c:	682a      	ldr	r2, [r5, #0]
 802944e:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8029452:	429a      	cmp	r2, r3
 8029454:	da00      	bge.n	8029458 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>
 8029456:	602b      	str	r3, [r5, #0]
 8029458:	b005      	add	sp, #20
 802945a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802945e:	2002      	movs	r0, #2
 8029460:	3401      	adds	r4, #1
 8029462:	9201      	str	r2, [sp, #4]
 8029464:	fb94 f4f0 	sdiv	r4, r4, r0
 8029468:	4610      	mov	r0, r2
 802946a:	f7ff feed 	bl	8029248 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 802946e:	a903      	add	r1, sp, #12
 8029470:	9003      	str	r0, [sp, #12]
 8029472:	4650      	mov	r0, sl
 8029474:	f7ff febc 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8029478:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 802947c:	9a01      	ldr	r2, [sp, #4]
 802947e:	4408      	add	r0, r1
 8029480:	f8d9 1000 	ldr.w	r1, [r9]
 8029484:	1b03      	subs	r3, r0, r4
 8029486:	4420      	add	r0, r4
 8029488:	4299      	cmp	r1, r3
 802948a:	bfc8      	it	gt
 802948c:	f8c9 3000 	strgt.w	r3, [r9]
 8029490:	6839      	ldr	r1, [r7, #0]
 8029492:	428b      	cmp	r3, r1
 8029494:	bfc8      	it	gt
 8029496:	603b      	strgt	r3, [r7, #0]
 8029498:	f8d9 1000 	ldr.w	r1, [r9]
 802949c:	4281      	cmp	r1, r0
 802949e:	bfc8      	it	gt
 80294a0:	f8c9 0000 	strgt.w	r0, [r9]
 80294a4:	6839      	ldr	r1, [r7, #0]
 80294a6:	4288      	cmp	r0, r1
 80294a8:	bfc8      	it	gt
 80294aa:	6038      	strgt	r0, [r7, #0]
 80294ac:	4610      	mov	r0, r2
 80294ae:	f7ff feea 	bl	8029286 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80294b2:	a903      	add	r1, sp, #12
 80294b4:	9003      	str	r0, [sp, #12]
 80294b6:	4650      	mov	r0, sl
 80294b8:	f7ff fe9a 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80294bc:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 80294c0:	1a10      	subs	r0, r2, r0
 80294c2:	6832      	ldr	r2, [r6, #0]
 80294c4:	1b01      	subs	r1, r0, r4
 80294c6:	4420      	add	r0, r4
 80294c8:	428a      	cmp	r2, r1
 80294ca:	bfc8      	it	gt
 80294cc:	6031      	strgt	r1, [r6, #0]
 80294ce:	682a      	ldr	r2, [r5, #0]
 80294d0:	4291      	cmp	r1, r2
 80294d2:	bfc8      	it	gt
 80294d4:	6029      	strgt	r1, [r5, #0]
 80294d6:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 80294da:	6832      	ldr	r2, [r6, #0]
 80294dc:	4282      	cmp	r2, r0
 80294de:	bfc8      	it	gt
 80294e0:	6030      	strgt	r0, [r6, #0]
 80294e2:	682a      	ldr	r2, [r5, #0]
 80294e4:	4290      	cmp	r0, r2
 80294e6:	fb9b f2f1 	sdiv	r2, fp, r1
 80294ea:	fb01 b212 	mls	r2, r1, r2, fp
 80294ee:	bfc8      	it	gt
 80294f0:	6028      	strgt	r0, [r5, #0]
 80294f2:	1a8a      	subs	r2, r1, r2
 80294f4:	fb92 f0f1 	sdiv	r0, r2, r1
 80294f8:	fb01 2210 	mls	r2, r1, r0, r2
 80294fc:	4493      	add	fp, r2
 80294fe:	9b00      	ldr	r3, [sp, #0]
 8029500:	455b      	cmp	r3, fp
 8029502:	db40      	blt.n	8029586 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x2c2>
 8029504:	4658      	mov	r0, fp
 8029506:	f7ff fe9f 	bl	8029248 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 802950a:	a903      	add	r1, sp, #12
 802950c:	9003      	str	r0, [sp, #12]
 802950e:	4650      	mov	r0, sl
 8029510:	f7ff fe6e 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8029514:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8029518:	4410      	add	r0, r2
 802951a:	f8d9 2000 	ldr.w	r2, [r9]
 802951e:	1b01      	subs	r1, r0, r4
 8029520:	4420      	add	r0, r4
 8029522:	428a      	cmp	r2, r1
 8029524:	bfc8      	it	gt
 8029526:	f8c9 1000 	strgt.w	r1, [r9]
 802952a:	683a      	ldr	r2, [r7, #0]
 802952c:	4291      	cmp	r1, r2
 802952e:	bfc8      	it	gt
 8029530:	6039      	strgt	r1, [r7, #0]
 8029532:	f8d9 2000 	ldr.w	r2, [r9]
 8029536:	4282      	cmp	r2, r0
 8029538:	bfc8      	it	gt
 802953a:	f8c9 0000 	strgt.w	r0, [r9]
 802953e:	683a      	ldr	r2, [r7, #0]
 8029540:	4290      	cmp	r0, r2
 8029542:	bfc8      	it	gt
 8029544:	6038      	strgt	r0, [r7, #0]
 8029546:	4658      	mov	r0, fp
 8029548:	f7ff fe9d 	bl	8029286 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 802954c:	a903      	add	r1, sp, #12
 802954e:	9003      	str	r0, [sp, #12]
 8029550:	4650      	mov	r0, sl
 8029552:	f7ff fe4d 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8029556:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 802955a:	f50b 6b34 	add.w	fp, fp, #2880	; 0xb40
 802955e:	1a10      	subs	r0, r2, r0
 8029560:	6832      	ldr	r2, [r6, #0]
 8029562:	1b01      	subs	r1, r0, r4
 8029564:	4420      	add	r0, r4
 8029566:	428a      	cmp	r2, r1
 8029568:	bfc8      	it	gt
 802956a:	6031      	strgt	r1, [r6, #0]
 802956c:	682a      	ldr	r2, [r5, #0]
 802956e:	4291      	cmp	r1, r2
 8029570:	bfc8      	it	gt
 8029572:	6029      	strgt	r1, [r5, #0]
 8029574:	6832      	ldr	r2, [r6, #0]
 8029576:	4282      	cmp	r2, r0
 8029578:	bfc8      	it	gt
 802957a:	6030      	strgt	r0, [r6, #0]
 802957c:	682a      	ldr	r2, [r5, #0]
 802957e:	4290      	cmp	r0, r2
 8029580:	bfc8      	it	gt
 8029582:	6028      	strgt	r0, [r5, #0]
 8029584:	e7bb      	b.n	80294fe <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x23a>
 8029586:	f5ab 6b34 	sub.w	fp, fp, #2880	; 0xb40
 802958a:	9b00      	ldr	r3, [sp, #0]
 802958c:	455b      	cmp	r3, fp
 802958e:	f77f af63 	ble.w	8029458 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>
 8029592:	4618      	mov	r0, r3
 8029594:	f7ff fe58 	bl	8029248 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8029598:	a903      	add	r1, sp, #12
 802959a:	9003      	str	r0, [sp, #12]
 802959c:	4650      	mov	r0, sl
 802959e:	f7ff fe27 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80295a2:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 80295a6:	4410      	add	r0, r2
 80295a8:	f8d9 2000 	ldr.w	r2, [r9]
 80295ac:	1b01      	subs	r1, r0, r4
 80295ae:	4420      	add	r0, r4
 80295b0:	428a      	cmp	r2, r1
 80295b2:	bfc8      	it	gt
 80295b4:	f8c9 1000 	strgt.w	r1, [r9]
 80295b8:	683a      	ldr	r2, [r7, #0]
 80295ba:	4291      	cmp	r1, r2
 80295bc:	bfc8      	it	gt
 80295be:	6039      	strgt	r1, [r7, #0]
 80295c0:	f8d9 2000 	ldr.w	r2, [r9]
 80295c4:	4282      	cmp	r2, r0
 80295c6:	bfc8      	it	gt
 80295c8:	f8c9 0000 	strgt.w	r0, [r9]
 80295cc:	683b      	ldr	r3, [r7, #0]
 80295ce:	4298      	cmp	r0, r3
 80295d0:	bfc8      	it	gt
 80295d2:	6038      	strgt	r0, [r7, #0]
 80295d4:	9800      	ldr	r0, [sp, #0]
 80295d6:	f7ff fe56 	bl	8029286 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80295da:	a903      	add	r1, sp, #12
 80295dc:	9003      	str	r0, [sp, #12]
 80295de:	4650      	mov	r0, sl
 80295e0:	f7ff fe06 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80295e4:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 80295e8:	6832      	ldr	r2, [r6, #0]
 80295ea:	1a18      	subs	r0, r3, r0
 80295ec:	1b03      	subs	r3, r0, r4
 80295ee:	4404      	add	r4, r0
 80295f0:	429a      	cmp	r2, r3
 80295f2:	bfc8      	it	gt
 80295f4:	6033      	strgt	r3, [r6, #0]
 80295f6:	682a      	ldr	r2, [r5, #0]
 80295f8:	4293      	cmp	r3, r2
 80295fa:	bfc8      	it	gt
 80295fc:	602b      	strgt	r3, [r5, #0]
 80295fe:	6833      	ldr	r3, [r6, #0]
 8029600:	42a3      	cmp	r3, r4
 8029602:	bfc8      	it	gt
 8029604:	6034      	strgt	r4, [r6, #0]
 8029606:	682b      	ldr	r3, [r5, #0]
 8029608:	429c      	cmp	r4, r3
 802960a:	bfc8      	it	gt
 802960c:	602c      	strgt	r4, [r5, #0]
 802960e:	e723      	b.n	8029458 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>

08029610 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8029610:	b530      	push	{r4, r5, lr}
 8029612:	4604      	mov	r4, r0
 8029614:	4608      	mov	r0, r1
 8029616:	4611      	mov	r1, r2
 8029618:	461a      	mov	r2, r3
 802961a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 802961e:	b089      	sub	sp, #36	; 0x24
 8029620:	2500      	movs	r5, #0
 8029622:	015b      	lsls	r3, r3, #5
 8029624:	9505      	str	r5, [sp, #20]
 8029626:	9304      	str	r3, [sp, #16]
 8029628:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 802962c:	015b      	lsls	r3, r3, #5
 802962e:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8029632:	ab07      	add	r3, sp, #28
 8029634:	2520      	movs	r5, #32
 8029636:	9302      	str	r3, [sp, #8]
 8029638:	ab06      	add	r3, sp, #24
 802963a:	9301      	str	r3, [sp, #4]
 802963c:	ab05      	add	r3, sp, #20
 802963e:	9300      	str	r3, [sp, #0]
 8029640:	ab04      	add	r3, sp, #16
 8029642:	f7ff fe3f 	bl	80292c4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8029646:	9a04      	ldr	r2, [sp, #16]
 8029648:	9805      	ldr	r0, [sp, #20]
 802964a:	9b06      	ldr	r3, [sp, #24]
 802964c:	9907      	ldr	r1, [sp, #28]
 802964e:	fb92 f2f5 	sdiv	r2, r2, r5
 8029652:	fb90 f0f5 	sdiv	r0, r0, r5
 8029656:	fb93 f3f5 	sdiv	r3, r3, r5
 802965a:	fb91 f1f5 	sdiv	r1, r1, r5
 802965e:	b292      	uxth	r2, r2
 8029660:	3002      	adds	r0, #2
 8029662:	b29b      	uxth	r3, r3
 8029664:	3102      	adds	r1, #2
 8029666:	1a80      	subs	r0, r0, r2
 8029668:	3a01      	subs	r2, #1
 802966a:	1ac9      	subs	r1, r1, r3
 802966c:	3b01      	subs	r3, #1
 802966e:	80a0      	strh	r0, [r4, #4]
 8029670:	4620      	mov	r0, r4
 8029672:	8022      	strh	r2, [r4, #0]
 8029674:	8063      	strh	r3, [r4, #2]
 8029676:	80e1      	strh	r1, [r4, #6]
 8029678:	b009      	add	sp, #36	; 0x24
 802967a:	bd30      	pop	{r4, r5, pc}

0802967c <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 802967c:	b510      	push	{r4, lr}
 802967e:	4604      	mov	r4, r0
 8029680:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	; 0x38
 8029684:	f7ff ffc4 	bl	8029610 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8029688:	4620      	mov	r0, r4
 802968a:	bd10      	pop	{r4, pc}

0802968c <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>:
 802968c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802968e:	e9d1 540e 	ldrd	r5, r4, [r1, #56]	; 0x38
 8029692:	4606      	mov	r6, r0
 8029694:	f891 0044 	ldrb.w	r0, [r1, #68]	; 0x44
 8029698:	42a5      	cmp	r5, r4
 802969a:	6813      	ldr	r3, [r2, #0]
 802969c:	ea4f 1040 	mov.w	r0, r0, lsl #5
 80296a0:	da2b      	bge.n	80296fa <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x6e>
 80296a2:	42a3      	cmp	r3, r4
 80296a4:	dd14      	ble.n	80296d0 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x44>
 80296a6:	b168      	cbz	r0, 80296c4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 80296a8:	4267      	negs	r7, r4
 80296aa:	fb97 f2f0 	sdiv	r2, r7, r0
 80296ae:	fb00 7212 	mls	r2, r0, r2, r7
 80296b2:	1a82      	subs	r2, r0, r2
 80296b4:	fb92 f7f0 	sdiv	r7, r2, r0
 80296b8:	fb00 2017 	mls	r0, r0, r7, r2
 80296bc:	1a24      	subs	r4, r4, r0
 80296be:	42ac      	cmp	r4, r5
 80296c0:	bfb8      	it	lt
 80296c2:	462c      	movlt	r4, r5
 80296c4:	4630      	mov	r0, r6
 80296c6:	4622      	mov	r2, r4
 80296c8:	f7ff ffa2 	bl	8029610 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 80296cc:	4630      	mov	r0, r6
 80296ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80296d0:	42ab      	cmp	r3, r5
 80296d2:	dd0e      	ble.n	80296f2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 80296d4:	b168      	cbz	r0, 80296f2 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 80296d6:	425f      	negs	r7, r3
 80296d8:	fb97 f2f0 	sdiv	r2, r7, r0
 80296dc:	fb00 7212 	mls	r2, r0, r2, r7
 80296e0:	1a82      	subs	r2, r0, r2
 80296e2:	fb92 f7f0 	sdiv	r7, r2, r0
 80296e6:	fb00 2017 	mls	r0, r0, r7, r2
 80296ea:	1a1b      	subs	r3, r3, r0
 80296ec:	42ab      	cmp	r3, r5
 80296ee:	bfb8      	it	lt
 80296f0:	462b      	movlt	r3, r5
 80296f2:	4622      	mov	r2, r4
 80296f4:	461c      	mov	r4, r3
 80296f6:	4613      	mov	r3, r2
 80296f8:	e7e4      	b.n	80296c4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 80296fa:	42a3      	cmp	r3, r4
 80296fc:	da10      	bge.n	8029720 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x94>
 80296fe:	b148      	cbz	r0, 8029714 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x88>
 8029700:	fb94 f2f0 	sdiv	r2, r4, r0
 8029704:	fb00 4212 	mls	r2, r0, r2, r4
 8029708:	1a82      	subs	r2, r0, r2
 802970a:	fb92 f7f0 	sdiv	r7, r2, r0
 802970e:	fb00 2017 	mls	r0, r0, r7, r2
 8029712:	4404      	add	r4, r0
 8029714:	42a5      	cmp	r5, r4
 8029716:	bfa8      	it	ge
 8029718:	4625      	movge	r5, r4
 802971a:	461c      	mov	r4, r3
 802971c:	462b      	mov	r3, r5
 802971e:	e7d1      	b.n	80296c4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8029720:	42ab      	cmp	r3, r5
 8029722:	dacf      	bge.n	80296c4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8029724:	2800      	cmp	r0, #0
 8029726:	d0cd      	beq.n	80296c4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8029728:	fb93 f2f0 	sdiv	r2, r3, r0
 802972c:	fb00 3212 	mls	r2, r0, r2, r3
 8029730:	1a82      	subs	r2, r0, r2
 8029732:	fb92 f7f0 	sdiv	r7, r2, r0
 8029736:	fb00 2017 	mls	r0, r0, r7, r2
 802973a:	4403      	add	r3, r0
 802973c:	42ab      	cmp	r3, r5
 802973e:	bfa8      	it	ge
 8029740:	462b      	movge	r3, r5
 8029742:	e7bf      	b.n	80296c4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>

08029744 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8029744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029748:	e9d0 560e 	ldrd	r5, r6, [r0, #56]	; 0x38
 802974c:	2220      	movs	r2, #32
 802974e:	468b      	mov	fp, r1
 8029750:	42ae      	cmp	r6, r5
 8029752:	f9b0 902c 	ldrsh.w	r9, [r0, #44]	; 0x2c
 8029756:	f9b0 a030 	ldrsh.w	sl, [r0, #48]	; 0x30
 802975a:	b0ab      	sub	sp, #172	; 0xac
 802975c:	bfa4      	itt	ge
 802975e:	4633      	movge	r3, r6
 8029760:	462e      	movge	r6, r5
 8029762:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8029764:	4604      	mov	r4, r0
 8029766:	bfa8      	it	ge
 8029768:	461d      	movge	r5, r3
 802976a:	1bab      	subs	r3, r5, r6
 802976c:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8029770:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8029772:	bfa4      	itt	ge
 8029774:	f44f 5534 	movge.w	r5, #11520	; 0x2d00
 8029778:	2600      	movge	r6, #0
 802977a:	fb99 f9f2 	sdiv	r9, r9, r2
 802977e:	fb9a faf2 	sdiv	sl, sl, r2
 8029782:	2900      	cmp	r1, #0
 8029784:	f000 80f1 	beq.w	802996a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x226>
 8029788:	f9bb 0000 	ldrsh.w	r0, [fp]
 802978c:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 8029790:	eba9 0700 	sub.w	r7, r9, r0
 8029794:	ebaa 0802 	sub.w	r8, sl, r2
 8029798:	ea87 7ce7 	eor.w	ip, r7, r7, asr #31
 802979c:	ebac 7ce7 	sub.w	ip, ip, r7, asr #31
 80297a0:	f8bb 7004 	ldrh.w	r7, [fp, #4]
 80297a4:	4407      	add	r7, r0
 80297a6:	ea88 70e8 	eor.w	r0, r8, r8, asr #31
 80297aa:	eba0 70e8 	sub.w	r0, r0, r8, asr #31
 80297ae:	f8bb 8006 	ldrh.w	r8, [fp, #6]
 80297b2:	b23f      	sxth	r7, r7
 80297b4:	4490      	add	r8, r2
 80297b6:	2202      	movs	r2, #2
 80297b8:	eba9 0707 	sub.w	r7, r9, r7
 80297bc:	fa0f f888 	sxth.w	r8, r8
 80297c0:	9201      	str	r2, [sp, #4]
 80297c2:	2f00      	cmp	r7, #0
 80297c4:	ebaa 0808 	sub.w	r8, sl, r8
 80297c8:	bfb8      	it	lt
 80297ca:	427f      	neglt	r7, r7
 80297cc:	f1b8 0f00 	cmp.w	r8, #0
 80297d0:	bfb8      	it	lt
 80297d2:	f1c8 0800 	rsblt	r8, r8, #0
 80297d6:	45bc      	cmp	ip, r7
 80297d8:	bfcc      	ite	gt
 80297da:	f10c 0701 	addgt.w	r7, ip, #1
 80297de:	3701      	addle	r7, #1
 80297e0:	4540      	cmp	r0, r8
 80297e2:	bfc8      	it	gt
 80297e4:	f100 0801 	addgt.w	r8, r0, #1
 80297e8:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80297ec:	bfd8      	it	le
 80297ee:	f108 0801 	addle.w	r8, r8, #1
 80297f2:	3001      	adds	r0, #1
 80297f4:	fb08 f808 	mul.w	r8, r8, r8
 80297f8:	1040      	asrs	r0, r0, #1
 80297fa:	fb07 8707 	mla	r7, r7, r7, r8
 80297fe:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8029802:	fb91 f1f2 	sdiv	r1, r1, r2
 8029806:	1a5b      	subs	r3, r3, r1
 8029808:	930d      	str	r3, [sp, #52]	; 0x34
 802980a:	f7ff fcfd 	bl	8029208 <_ZN8touchgfx7CWRUtil4sineEi>
 802980e:	a92a      	add	r1, sp, #168	; 0xa8
 8029810:	f841 0d70 	str.w	r0, [r1, #-112]!
 8029814:	a80d      	add	r0, sp, #52	; 0x34
 8029816:	f7ff fceb 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 802981a:	f04f 0c20 	mov.w	ip, #32
 802981e:	9a01      	ldr	r2, [sp, #4]
 8029820:	fb90 f0fc 	sdiv	r0, r0, ip
 8029824:	4340      	muls	r0, r0
 8029826:	4287      	cmp	r7, r0
 8029828:	da04      	bge.n	8029834 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xf0>
 802982a:	2401      	movs	r4, #1
 802982c:	4620      	mov	r0, r4
 802982e:	b02b      	add	sp, #172	; 0xac
 8029830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029834:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8029836:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8029838:	fb91 f3f2 	sdiv	r3, r1, r2
 802983c:	4403      	add	r3, r0
 802983e:	fb93 f3fc 	sdiv	r3, r3, ip
 8029842:	f9bb 1000 	ldrsh.w	r1, [fp]
 8029846:	3301      	adds	r3, #1
 8029848:	f8bb 2004 	ldrh.w	r2, [fp, #4]
 802984c:	435b      	muls	r3, r3
 802984e:	440a      	add	r2, r1
 8029850:	b212      	sxth	r2, r2
 8029852:	454a      	cmp	r2, r9
 8029854:	bfa8      	it	ge
 8029856:	464a      	movge	r2, r9
 8029858:	428a      	cmp	r2, r1
 802985a:	bfac      	ite	ge
 802985c:	eba9 0902 	subge.w	r9, r9, r2
 8029860:	eba9 0901 	sublt.w	r9, r9, r1
 8029864:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 8029868:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 802986c:	440a      	add	r2, r1
 802986e:	b212      	sxth	r2, r2
 8029870:	4552      	cmp	r2, sl
 8029872:	bfa8      	it	ge
 8029874:	4652      	movge	r2, sl
 8029876:	428a      	cmp	r2, r1
 8029878:	bfac      	ite	ge
 802987a:	ebaa 0a02 	subge.w	sl, sl, r2
 802987e:	ebaa 0a01 	sublt.w	sl, sl, r1
 8029882:	fb0a fa0a 	mul.w	sl, sl, sl
 8029886:	fb09 a909 	mla	r9, r9, r9, sl
 802988a:	4599      	cmp	r9, r3
 802988c:	dccd      	bgt.n	802982a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xe6>
 802988e:	465a      	mov	r2, fp
 8029890:	4621      	mov	r1, r4
 8029892:	a80e      	add	r0, sp, #56	; 0x38
 8029894:	f7ff fa68 	bl	8028d68 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8029898:	6b62      	ldr	r2, [r4, #52]	; 0x34
 802989a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802989c:	9209      	str	r2, [sp, #36]	; 0x24
 802989e:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80298a2:	930a      	str	r3, [sp, #40]	; 0x28
 80298a4:	dd07      	ble.n	80298b6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x172>
 80298a6:	2102      	movs	r1, #2
 80298a8:	fb93 f3f1 	sdiv	r3, r3, r1
 80298ac:	4413      	add	r3, r2
 80298ae:	930a      	str	r3, [sp, #40]	; 0x28
 80298b0:	fb93 f3f1 	sdiv	r3, r3, r1
 80298b4:	9309      	str	r3, [sp, #36]	; 0x24
 80298b6:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 80298ba:	f04f 0a02 	mov.w	sl, #2
 80298be:	4630      	mov	r0, r6
 80298c0:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
 80298c4:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 80298c8:	017f      	lsls	r7, r7, #5
 80298ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80298ce:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80298d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80298d4:	f7ff fcb8 	bl	8029248 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80298d8:	f849 0d74 	str.w	r0, [r9, #-116]!
 80298dc:	a80b      	add	r0, sp, #44	; 0x2c
 80298de:	4649      	mov	r1, r9
 80298e0:	f7ff fc86 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80298e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80298e6:	fb90 f0fa 	sdiv	r0, r0, sl
 80298ea:	eb00 0b03 	add.w	fp, r0, r3
 80298ee:	4630      	mov	r0, r6
 80298f0:	f7ff fcc9 	bl	8029286 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80298f4:	f848 0d78 	str.w	r0, [r8, #-120]!
 80298f8:	a80b      	add	r0, sp, #44	; 0x2c
 80298fa:	4641      	mov	r1, r8
 80298fc:	f7ff fc78 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8029900:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8029902:	4659      	mov	r1, fp
 8029904:	fb90 f0fa 	sdiv	r0, r0, sl
 8029908:	1a12      	subs	r2, r2, r0
 802990a:	a80e      	add	r0, sp, #56	; 0x38
 802990c:	f7ff fbac 	bl	8029068 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8029910:	f106 0a20 	add.w	sl, r6, #32
 8029914:	bb67      	cbnz	r7, 8029970 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22c>
 8029916:	46b3      	mov	fp, r6
 8029918:	45aa      	cmp	sl, r5
 802991a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802991c:	dc33      	bgt.n	8029986 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x242>
 802991e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8029920:	4650      	mov	r0, sl
 8029922:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8029926:	920b      	str	r2, [sp, #44]	; 0x2c
 8029928:	f7ff fc8e 	bl	8029248 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 802992c:	4641      	mov	r1, r8
 802992e:	900c      	str	r0, [sp, #48]	; 0x30
 8029930:	a80b      	add	r0, sp, #44	; 0x2c
 8029932:	f7ff fc5d 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8029936:	2302      	movs	r3, #2
 8029938:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 802993a:	fb90 f0f3 	sdiv	r0, r0, r3
 802993e:	eb00 0b02 	add.w	fp, r0, r2
 8029942:	4650      	mov	r0, sl
 8029944:	f7ff fc9f 	bl	8029286 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8029948:	4649      	mov	r1, r9
 802994a:	900d      	str	r0, [sp, #52]	; 0x34
 802994c:	a80b      	add	r0, sp, #44	; 0x2c
 802994e:	f7ff fc4f 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8029952:	2302      	movs	r3, #2
 8029954:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8029956:	4659      	mov	r1, fp
 8029958:	46d3      	mov	fp, sl
 802995a:	44ba      	add	sl, r7
 802995c:	fb90 f0f3 	sdiv	r0, r0, r3
 8029960:	1a12      	subs	r2, r2, r0
 8029962:	a80e      	add	r0, sp, #56	; 0x38
 8029964:	f7ff fbcd 	bl	8029102 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8029968:	e7d6      	b.n	8029918 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1d4>
 802996a:	fb93 f3f2 	sdiv	r3, r3, r2
 802996e:	e768      	b.n	8029842 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xfe>
 8029970:	fb9a f2f7 	sdiv	r2, sl, r7
 8029974:	fb07 a212 	mls	r2, r7, r2, sl
 8029978:	1aba      	subs	r2, r7, r2
 802997a:	fb92 f1f7 	sdiv	r1, r2, r7
 802997e:	fb07 2211 	mls	r2, r7, r1, r2
 8029982:	4492      	add	sl, r2
 8029984:	e7c7      	b.n	8029916 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1d2>
 8029986:	45ab      	cmp	fp, r5
 8029988:	da23      	bge.n	80299d2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x28e>
 802998a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802998c:	f04f 0a02 	mov.w	sl, #2
 8029990:	4628      	mov	r0, r5
 8029992:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8029996:	920b      	str	r2, [sp, #44]	; 0x2c
 8029998:	f7ff fc56 	bl	8029248 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 802999c:	4641      	mov	r1, r8
 802999e:	900c      	str	r0, [sp, #48]	; 0x30
 80299a0:	a80b      	add	r0, sp, #44	; 0x2c
 80299a2:	f7ff fc25 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80299a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80299a8:	fb90 f0fa 	sdiv	r0, r0, sl
 80299ac:	4403      	add	r3, r0
 80299ae:	4628      	mov	r0, r5
 80299b0:	9301      	str	r3, [sp, #4]
 80299b2:	f7ff fc68 	bl	8029286 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80299b6:	4649      	mov	r1, r9
 80299b8:	900d      	str	r0, [sp, #52]	; 0x34
 80299ba:	a80b      	add	r0, sp, #44	; 0x2c
 80299bc:	f7ff fc18 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80299c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80299c2:	9b01      	ldr	r3, [sp, #4]
 80299c4:	fb90 f0fa 	sdiv	r0, r0, sl
 80299c8:	4619      	mov	r1, r3
 80299ca:	1a12      	subs	r2, r2, r0
 80299cc:	a80e      	add	r0, sp, #56	; 0x38
 80299ce:	f7ff fb98 	bl	8029102 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80299d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80299d4:	b99b      	cbnz	r3, 80299fe <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ba>
 80299d6:	1bad      	subs	r5, r5, r6
 80299d8:	f5b5 5f34 	cmp.w	r5, #11520	; 0x2d00
 80299dc:	da04      	bge.n	80299e8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a4>
 80299de:	a80e      	add	r0, sp, #56	; 0x38
 80299e0:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	; 0x2c
 80299e4:	f7ff fb8d 	bl	8029102 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80299e8:	21ff      	movs	r1, #255	; 0xff
 80299ea:	a80e      	add	r0, sp, #56	; 0x38
 80299ec:	f7ff fa78 	bl	8028ee0 <_ZN8touchgfx6Canvas6renderEh>
 80299f0:	4604      	mov	r4, r0
 80299f2:	4b8a      	ldr	r3, [pc, #552]	; (8029c1c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4d8>)
 80299f4:	a816      	add	r0, sp, #88	; 0x58
 80299f6:	930e      	str	r3, [sp, #56]	; 0x38
 80299f8:	f7eb ff1c 	bl	8015834 <_ZN8touchgfx7OutlineD1Ev>
 80299fc:	e716      	b.n	802982c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xe8>
 80299fe:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	; 0x5c
 8029a02:	429a      	cmp	r2, r3
 8029a04:	f0c0 8107 	bcc.w	8029c16 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4d2>
 8029a08:	1bab      	subs	r3, r5, r6
 8029a0a:	f894 a045 	ldrb.w	sl, [r4, #69]	; 0x45
 8029a0e:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8029a12:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 8029a16:	9301      	str	r3, [sp, #4]
 8029a18:	da43      	bge.n	8029aa2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x35e>
 8029a1a:	4628      	mov	r0, r5
 8029a1c:	f7ff fc14 	bl	8029248 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8029a20:	4649      	mov	r1, r9
 8029a22:	900d      	str	r0, [sp, #52]	; 0x34
 8029a24:	a809      	add	r0, sp, #36	; 0x24
 8029a26:	f7ff fbe3 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8029a2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8029a2c:	18c3      	adds	r3, r0, r3
 8029a2e:	4628      	mov	r0, r5
 8029a30:	9303      	str	r3, [sp, #12]
 8029a32:	f7ff fc28 	bl	8029286 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8029a36:	4649      	mov	r1, r9
 8029a38:	900d      	str	r0, [sp, #52]	; 0x34
 8029a3a:	a809      	add	r0, sp, #36	; 0x24
 8029a3c:	f7ff fbd8 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8029a40:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8029a42:	f505 52b4 	add.w	r2, r5, #5760	; 0x1680
 8029a46:	1a1b      	subs	r3, r3, r0
 8029a48:	9204      	str	r2, [sp, #16]
 8029a4a:	9302      	str	r3, [sp, #8]
 8029a4c:	eb0a 0305 	add.w	r3, sl, r5
 8029a50:	9a04      	ldr	r2, [sp, #16]
 8029a52:	4293      	cmp	r3, r2
 8029a54:	da25      	bge.n	8029aa2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x35e>
 8029a56:	4618      	mov	r0, r3
 8029a58:	9306      	str	r3, [sp, #24]
 8029a5a:	f7ff fbf5 	bl	8029248 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8029a5e:	4649      	mov	r1, r9
 8029a60:	900d      	str	r0, [sp, #52]	; 0x34
 8029a62:	a80a      	add	r0, sp, #40	; 0x28
 8029a64:	f7ff fbc4 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8029a68:	2202      	movs	r2, #2
 8029a6a:	9b03      	ldr	r3, [sp, #12]
 8029a6c:	9207      	str	r2, [sp, #28]
 8029a6e:	fb90 f0f2 	sdiv	r0, r0, r2
 8029a72:	18c3      	adds	r3, r0, r3
 8029a74:	9305      	str	r3, [sp, #20]
 8029a76:	9b06      	ldr	r3, [sp, #24]
 8029a78:	4618      	mov	r0, r3
 8029a7a:	f7ff fc04 	bl	8029286 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8029a7e:	a92a      	add	r1, sp, #168	; 0xa8
 8029a80:	f841 0d78 	str.w	r0, [r1, #-120]!
 8029a84:	a80a      	add	r0, sp, #40	; 0x28
 8029a86:	f7ff fbb3 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8029a8a:	9a07      	ldr	r2, [sp, #28]
 8029a8c:	9b02      	ldr	r3, [sp, #8]
 8029a8e:	9905      	ldr	r1, [sp, #20]
 8029a90:	fb90 f2f2 	sdiv	r2, r0, r2
 8029a94:	a80e      	add	r0, sp, #56	; 0x38
 8029a96:	1a9a      	subs	r2, r3, r2
 8029a98:	f7ff fb33 	bl	8029102 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8029a9c:	9b06      	ldr	r3, [sp, #24]
 8029a9e:	4453      	add	r3, sl
 8029aa0:	e7d6      	b.n	8029a50 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x30c>
 8029aa2:	45ab      	cmp	fp, r5
 8029aa4:	da25      	bge.n	8029af2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3ae>
 8029aa6:	4628      	mov	r0, r5
 8029aa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8029aac:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8029ab0:	930b      	str	r3, [sp, #44]	; 0x2c
 8029ab2:	f7ff fbc9 	bl	8029248 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8029ab6:	4641      	mov	r1, r8
 8029ab8:	900c      	str	r0, [sp, #48]	; 0x30
 8029aba:	a80b      	add	r0, sp, #44	; 0x2c
 8029abc:	f7ff fb98 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8029ac0:	2202      	movs	r2, #2
 8029ac2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8029ac4:	9202      	str	r2, [sp, #8]
 8029ac6:	fb90 f0f2 	sdiv	r0, r0, r2
 8029aca:	eb00 0903 	add.w	r9, r0, r3
 8029ace:	4628      	mov	r0, r5
 8029ad0:	f7ff fbd9 	bl	8029286 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8029ad4:	a92a      	add	r1, sp, #168	; 0xa8
 8029ad6:	f841 0d74 	str.w	r0, [r1, #-116]!
 8029ada:	a80b      	add	r0, sp, #44	; 0x2c
 8029adc:	f7ff fb88 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8029ae0:	9a02      	ldr	r2, [sp, #8]
 8029ae2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8029ae4:	4649      	mov	r1, r9
 8029ae6:	fb90 f2f2 	sdiv	r2, r0, r2
 8029aea:	a80e      	add	r0, sp, #56	; 0x38
 8029aec:	1a9a      	subs	r2, r3, r2
 8029aee:	f7ff fb08 	bl	8029102 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8029af2:	46d9      	mov	r9, fp
 8029af4:	2502      	movs	r5, #2
 8029af6:	45b1      	cmp	r9, r6
 8029af8:	db25      	blt.n	8029b46 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x402>
 8029afa:	4648      	mov	r0, r9
 8029afc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8029b00:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8029b04:	930b      	str	r3, [sp, #44]	; 0x2c
 8029b06:	f7ff fb9f 	bl	8029248 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8029b0a:	4641      	mov	r1, r8
 8029b0c:	900c      	str	r0, [sp, #48]	; 0x30
 8029b0e:	a80b      	add	r0, sp, #44	; 0x2c
 8029b10:	f7ff fb6e 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8029b14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8029b16:	fb90 f0f5 	sdiv	r0, r0, r5
 8029b1a:	eb00 0b03 	add.w	fp, r0, r3
 8029b1e:	4648      	mov	r0, r9
 8029b20:	f7ff fbb1 	bl	8029286 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8029b24:	a90d      	add	r1, sp, #52	; 0x34
 8029b26:	900d      	str	r0, [sp, #52]	; 0x34
 8029b28:	a80b      	add	r0, sp, #44	; 0x2c
 8029b2a:	f7ff fb61 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8029b2e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8029b30:	4659      	mov	r1, fp
 8029b32:	46cb      	mov	fp, r9
 8029b34:	eba9 0907 	sub.w	r9, r9, r7
 8029b38:	fb90 f0f5 	sdiv	r0, r0, r5
 8029b3c:	1a12      	subs	r2, r2, r0
 8029b3e:	a80e      	add	r0, sp, #56	; 0x38
 8029b40:	f7ff fadf 	bl	8029102 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8029b44:	e7d7      	b.n	8029af6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3b2>
 8029b46:	455e      	cmp	r6, fp
 8029b48:	da22      	bge.n	8029b90 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x44c>
 8029b4a:	2502      	movs	r5, #2
 8029b4c:	4630      	mov	r0, r6
 8029b4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8029b52:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8029b56:	930b      	str	r3, [sp, #44]	; 0x2c
 8029b58:	f7ff fb76 	bl	8029248 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8029b5c:	4641      	mov	r1, r8
 8029b5e:	900c      	str	r0, [sp, #48]	; 0x30
 8029b60:	a80b      	add	r0, sp, #44	; 0x2c
 8029b62:	f7ff fb45 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8029b66:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8029b68:	fb90 f0f5 	sdiv	r0, r0, r5
 8029b6c:	4407      	add	r7, r0
 8029b6e:	4630      	mov	r0, r6
 8029b70:	f7ff fb89 	bl	8029286 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8029b74:	a92a      	add	r1, sp, #168	; 0xa8
 8029b76:	f841 0d74 	str.w	r0, [r1, #-116]!
 8029b7a:	a80b      	add	r0, sp, #44	; 0x2c
 8029b7c:	f7ff fb38 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8029b80:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8029b82:	4639      	mov	r1, r7
 8029b84:	fb90 f0f5 	sdiv	r0, r0, r5
 8029b88:	1a12      	subs	r2, r2, r0
 8029b8a:	a80e      	add	r0, sp, #56	; 0x38
 8029b8c:	f7ff fab9 	bl	8029102 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8029b90:	9b01      	ldr	r3, [sp, #4]
 8029b92:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8029b96:	f6bf af27 	bge.w	80299e8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a4>
 8029b9a:	ad2a      	add	r5, sp, #168	; 0xa8
 8029b9c:	4630      	mov	r0, r6
 8029b9e:	f7ff fb53 	bl	8029248 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8029ba2:	f04f 0b02 	mov.w	fp, #2
 8029ba6:	f845 0d74 	str.w	r0, [r5, #-116]!
 8029baa:	a809      	add	r0, sp, #36	; 0x24
 8029bac:	4629      	mov	r1, r5
 8029bae:	f7ff fb1f 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8029bb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8029bb4:	eb00 0903 	add.w	r9, r0, r3
 8029bb8:	4630      	mov	r0, r6
 8029bba:	f7ff fb64 	bl	8029286 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8029bbe:	4629      	mov	r1, r5
 8029bc0:	900d      	str	r0, [sp, #52]	; 0x34
 8029bc2:	a809      	add	r0, sp, #36	; 0x24
 8029bc4:	f7ff fb14 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8029bc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8029bca:	f5a6 54b4 	sub.w	r4, r6, #5760	; 0x1680
 8029bce:	eba3 0800 	sub.w	r8, r3, r0
 8029bd2:	4454      	add	r4, sl
 8029bd4:	42a6      	cmp	r6, r4
 8029bd6:	f77f af07 	ble.w	80299e8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a4>
 8029bda:	4620      	mov	r0, r4
 8029bdc:	f7ff fb34 	bl	8029248 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8029be0:	4629      	mov	r1, r5
 8029be2:	900d      	str	r0, [sp, #52]	; 0x34
 8029be4:	a80a      	add	r0, sp, #40	; 0x28
 8029be6:	f7ff fb03 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8029bea:	fb90 f0fb 	sdiv	r0, r0, fp
 8029bee:	eb00 0709 	add.w	r7, r0, r9
 8029bf2:	4620      	mov	r0, r4
 8029bf4:	f7ff fb47 	bl	8029286 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8029bf8:	a90c      	add	r1, sp, #48	; 0x30
 8029bfa:	900c      	str	r0, [sp, #48]	; 0x30
 8029bfc:	a80a      	add	r0, sp, #40	; 0x28
 8029bfe:	f7ff faf7 	bl	80291f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8029c02:	4639      	mov	r1, r7
 8029c04:	4454      	add	r4, sl
 8029c06:	fb90 f2fb 	sdiv	r2, r0, fp
 8029c0a:	a80e      	add	r0, sp, #56	; 0x38
 8029c0c:	eba8 0202 	sub.w	r2, r8, r2
 8029c10:	f7ff fa77 	bl	8029102 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8029c14:	e7de      	b.n	8029bd4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x490>
 8029c16:	2400      	movs	r4, #0
 8029c18:	e6eb      	b.n	80299f2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ae>
 8029c1a:	bf00      	nop
 8029c1c:	08031198 	.word	0x08031198

08029c20 <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
 8029c20:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8029c24:	4770      	bx	lr

08029c26 <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
 8029c26:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8029c2a:	4770      	bx	lr

08029c2c <_ZN8touchgfx13TextureMapper9setXAngleEf>:
 8029c2c:	6802      	ldr	r2, [r0, #0]
 8029c2e:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8029c32:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8029c34:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8029c38:	4710      	bx	r2

08029c3a <_ZN8touchgfx13TextureMapper9setYAngleEf>:
 8029c3a:	6802      	ldr	r2, [r0, #0]
 8029c3c:	eef0 0a40 	vmov.f32	s1, s0
 8029c40:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8029c44:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8029c46:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8029c4a:	4710      	bx	r2

08029c4c <_ZN8touchgfx13TextureMapper9setZAngleEf>:
 8029c4c:	6802      	ldr	r2, [r0, #0]
 8029c4e:	eeb0 1a40 	vmov.f32	s2, s0
 8029c52:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8029c56:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8029c58:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8029c5c:	4710      	bx	r2

08029c5e <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
 8029c5e:	6802      	ldr	r2, [r0, #0]
 8029c60:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8029c64:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8029c66:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8029c6a:	4710      	bx	r2

08029c6c <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
 8029c6c:	6802      	ldr	r2, [r0, #0]
 8029c6e:	eef0 0a40 	vmov.f32	s1, s0
 8029c72:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8029c76:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8029c78:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8029c7c:	4710      	bx	r2

08029c7e <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
 8029c7e:	6802      	ldr	r2, [r0, #0]
 8029c80:	eeb0 1a40 	vmov.f32	s2, s0
 8029c84:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8029c88:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8029c8a:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8029c8e:	4710      	bx	r2

08029c90 <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
 8029c90:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8029c94:	4770      	bx	lr

08029c96 <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
 8029c96:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 8029c9a:	4770      	bx	lr

08029c9c <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
 8029c9c:	ed90 0a0f 	vldr	s0, [r0, #60]	; 0x3c
 8029ca0:	4770      	bx	lr

08029ca2 <_ZNK8touchgfx13TextureMapper8getScaleEv>:
 8029ca2:	ed90 0a10 	vldr	s0, [r0, #64]	; 0x40
 8029ca6:	4770      	bx	lr

08029ca8 <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
 8029ca8:	ed90 0a11 	vldr	s0, [r0, #68]	; 0x44
 8029cac:	4770      	bx	lr

08029cae <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
 8029cae:	ed90 0a12 	vldr	s0, [r0, #72]	; 0x48
 8029cb2:	4770      	bx	lr

08029cb4 <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
 8029cb4:	ed90 0a13 	vldr	s0, [r0, #76]	; 0x4c
 8029cb8:	4770      	bx	lr

08029cba <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
 8029cba:	ed90 0a14 	vldr	s0, [r0, #80]	; 0x50
 8029cbe:	4770      	bx	lr

08029cc0 <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
 8029cc0:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
 8029cc4:	4770      	bx	lr

08029cc6 <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
 8029cc6:	ed90 0a16 	vldr	s0, [r0, #88]	; 0x58
 8029cca:	4770      	bx	lr

08029ccc <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
 8029ccc:	ee07 2a90 	vmov	s15, r2
 8029cd0:	6803      	ldr	r3, [r0, #0]
 8029cd2:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8029cd6:	ee07 1a90 	vmov	s15, r1
 8029cda:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8029cde:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8029ce2:	4718      	bx	r3

08029ce4 <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
 8029ce4:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 8029ce8:	4770      	bx	lr

08029cea <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
 8029cea:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 8029cee:	4770      	bx	lr

08029cf0 <_ZNK8touchgfx13TextureMapper5getX0Ev>:
 8029cf0:	ed90 0a17 	vldr	s0, [r0, #92]	; 0x5c
 8029cf4:	4770      	bx	lr

08029cf6 <_ZNK8touchgfx13TextureMapper5getX1Ev>:
 8029cf6:	ed90 0a1a 	vldr	s0, [r0, #104]	; 0x68
 8029cfa:	4770      	bx	lr

08029cfc <_ZNK8touchgfx13TextureMapper5getX2Ev>:
 8029cfc:	ed90 0a1d 	vldr	s0, [r0, #116]	; 0x74
 8029d00:	4770      	bx	lr

08029d02 <_ZNK8touchgfx13TextureMapper5getX3Ev>:
 8029d02:	ed90 0a20 	vldr	s0, [r0, #128]	; 0x80
 8029d06:	4770      	bx	lr

08029d08 <_ZNK8touchgfx13TextureMapper5getY0Ev>:
 8029d08:	ed90 0a18 	vldr	s0, [r0, #96]	; 0x60
 8029d0c:	4770      	bx	lr

08029d0e <_ZNK8touchgfx13TextureMapper5getY1Ev>:
 8029d0e:	ed90 0a1b 	vldr	s0, [r0, #108]	; 0x6c
 8029d12:	4770      	bx	lr

08029d14 <_ZNK8touchgfx13TextureMapper5getY2Ev>:
 8029d14:	ed90 0a1e 	vldr	s0, [r0, #120]	; 0x78
 8029d18:	4770      	bx	lr

08029d1a <_ZNK8touchgfx13TextureMapper5getY3Ev>:
 8029d1a:	ed90 0a21 	vldr	s0, [r0, #132]	; 0x84
 8029d1e:	4770      	bx	lr

08029d20 <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
 8029d20:	ed90 0a19 	vldr	s0, [r0, #100]	; 0x64
 8029d24:	4770      	bx	lr

08029d26 <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
 8029d26:	ed90 0a1c 	vldr	s0, [r0, #112]	; 0x70
 8029d2a:	4770      	bx	lr

08029d2c <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
 8029d2c:	ed90 0a1f 	vldr	s0, [r0, #124]	; 0x7c
 8029d30:	4770      	bx	lr

08029d32 <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
 8029d32:	ed90 0a22 	vldr	s0, [r0, #136]	; 0x88
 8029d36:	4770      	bx	lr

08029d38 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:
 8029d38:	b510      	push	{r4, lr}
 8029d3a:	ed2d 8b04 	vpush	{d8-d9}
 8029d3e:	6803      	ldr	r3, [r0, #0]
 8029d40:	4604      	mov	r4, r0
 8029d42:	eeb0 8a40 	vmov.f32	s16, s0
 8029d46:	eef0 8a60 	vmov.f32	s17, s1
 8029d4a:	699b      	ldr	r3, [r3, #24]
 8029d4c:	eeb0 9a41 	vmov.f32	s18, s2
 8029d50:	4798      	blx	r3
 8029d52:	6823      	ldr	r3, [r4, #0]
 8029d54:	4620      	mov	r0, r4
 8029d56:	eef0 0a68 	vmov.f32	s1, s17
 8029d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029d5c:	eeb0 1a49 	vmov.f32	s2, s18
 8029d60:	eeb0 0a48 	vmov.f32	s0, s16
 8029d64:	4798      	blx	r3
 8029d66:	6823      	ldr	r3, [r4, #0]
 8029d68:	4620      	mov	r0, r4
 8029d6a:	699b      	ldr	r3, [r3, #24]
 8029d6c:	ecbd 8b04 	vpop	{d8-d9}
 8029d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029d74:	4718      	bx	r3

08029d76 <_ZN8touchgfx13TextureMapper11updateScaleEf>:
 8029d76:	b510      	push	{r4, lr}
 8029d78:	ed2d 8b02 	vpush	{d8}
 8029d7c:	6803      	ldr	r3, [r0, #0]
 8029d7e:	4604      	mov	r4, r0
 8029d80:	eeb0 8a40 	vmov.f32	s16, s0
 8029d84:	699b      	ldr	r3, [r3, #24]
 8029d86:	4798      	blx	r3
 8029d88:	6823      	ldr	r3, [r4, #0]
 8029d8a:	4620      	mov	r0, r4
 8029d8c:	eeb0 0a48 	vmov.f32	s0, s16
 8029d90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8029d94:	4798      	blx	r3
 8029d96:	6823      	ldr	r3, [r4, #0]
 8029d98:	4620      	mov	r0, r4
 8029d9a:	699b      	ldr	r3, [r3, #24]
 8029d9c:	ecbd 8b02 	vpop	{d8}
 8029da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029da4:	4718      	bx	r3

08029da6 <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:
 8029da6:	2200      	movs	r2, #0
 8029da8:	8002      	strh	r2, [r0, #0]
 8029daa:	8042      	strh	r2, [r0, #2]
 8029dac:	8082      	strh	r2, [r0, #4]
 8029dae:	80c2      	strh	r2, [r0, #6]
 8029db0:	4770      	bx	lr

08029db2 <_ZN8touchgfx13TextureMapperD1Ev>:
 8029db2:	4770      	bx	lr

08029db4 <_ZN8touchgfx13TextureMapperD0Ev>:
 8029db4:	b510      	push	{r4, lr}
 8029db6:	4604      	mov	r4, r0
 8029db8:	2190      	movs	r1, #144	; 0x90
 8029dba:	f000 fe02 	bl	802a9c2 <_ZdlPvj>
 8029dbe:	4620      	mov	r0, r4
 8029dc0:	bd10      	pop	{r4, pc}
	...

08029dc4 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>:
 8029dc4:	b538      	push	{r3, r4, r5, lr}
 8029dc6:	2301      	movs	r3, #1
 8029dc8:	2500      	movs	r5, #0
 8029dca:	4604      	mov	r4, r0
 8029dcc:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 8029dd0:	4b1f      	ldr	r3, [pc, #124]	; (8029e50 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x8c>)
 8029dd2:	8085      	strh	r5, [r0, #4]
 8029dd4:	80c5      	strh	r5, [r0, #6]
 8029dd6:	8105      	strh	r5, [r0, #8]
 8029dd8:	8145      	strh	r5, [r0, #10]
 8029dda:	8185      	strh	r5, [r0, #12]
 8029ddc:	81c5      	strh	r5, [r0, #14]
 8029dde:	8205      	strh	r5, [r0, #16]
 8029de0:	8245      	strh	r5, [r0, #18]
 8029de2:	61c5      	str	r5, [r0, #28]
 8029de4:	8405      	strh	r5, [r0, #32]
 8029de6:	8445      	strh	r5, [r0, #34]	; 0x22
 8029de8:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8029dec:	6003      	str	r3, [r0, #0]
 8029dee:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8029df2:	880b      	ldrh	r3, [r1, #0]
 8029df4:	84c3      	strh	r3, [r0, #38]	; 0x26
 8029df6:	23ff      	movs	r3, #255	; 0xff
 8029df8:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8029dfc:	f7eb fbb5 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8029e00:	4b14      	ldr	r3, [pc, #80]	; (8029e54 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x90>)
 8029e02:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8029e06:	4914      	ldr	r1, [pc, #80]	; (8029e58 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x94>)
 8029e08:	6023      	str	r3, [r4, #0]
 8029e0a:	2300      	movs	r3, #0
 8029e0c:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 8029e10:	4620      	mov	r0, r4
 8029e12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8029e14:	6323      	str	r3, [r4, #48]	; 0x30
 8029e16:	6363      	str	r3, [r4, #52]	; 0x34
 8029e18:	63a3      	str	r3, [r4, #56]	; 0x38
 8029e1a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8029e1c:	6463      	str	r3, [r4, #68]	; 0x44
 8029e1e:	64a3      	str	r3, [r4, #72]	; 0x48
 8029e20:	6523      	str	r3, [r4, #80]	; 0x50
 8029e22:	6563      	str	r3, [r4, #84]	; 0x54
 8029e24:	65e3      	str	r3, [r4, #92]	; 0x5c
 8029e26:	6623      	str	r3, [r4, #96]	; 0x60
 8029e28:	66a3      	str	r3, [r4, #104]	; 0x68
 8029e2a:	66e3      	str	r3, [r4, #108]	; 0x6c
 8029e2c:	6763      	str	r3, [r4, #116]	; 0x74
 8029e2e:	67a3      	str	r3, [r4, #120]	; 0x78
 8029e30:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8029e34:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8029e38:	230c      	movs	r3, #12
 8029e3a:	6422      	str	r2, [r4, #64]	; 0x40
 8029e3c:	64e1      	str	r1, [r4, #76]	; 0x4c
 8029e3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8029e40:	6662      	str	r2, [r4, #100]	; 0x64
 8029e42:	6722      	str	r2, [r4, #112]	; 0x70
 8029e44:	67e2      	str	r2, [r4, #124]	; 0x7c
 8029e46:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 8029e4a:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
 8029e4e:	bd38      	pop	{r3, r4, r5, pc}
 8029e50:	08030c40 	.word	0x08030c40
 8029e54:	080312dc 	.word	0x080312dc
 8029e58:	447a0000 	.word	0x447a0000

08029e5c <_ZN8touchgfx13TextureMapper19applyTransformationEv>:
 8029e5c:	b570      	push	{r4, r5, r6, lr}
 8029e5e:	ed2d 8b04 	vpush	{d8-d9}
 8029e62:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 8029e66:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8029e68:	4604      	mov	r4, r0
 8029e6a:	add0      	add	r5, sp, #832	; 0x340
 8029e6c:	f825 3d40 	strh.w	r3, [r5, #-64]!
 8029e70:	4628      	mov	r0, r5
 8029e72:	f7f1 fa43 	bl	801b2fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8029e76:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8029e78:	4606      	mov	r6, r0
 8029e7a:	4628      	mov	r0, r5
 8029e7c:	f8ad 3300 	strh.w	r3, [sp, #768]	; 0x300
 8029e80:	f7f1 fa70 	bl	801b364 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8029e84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029e88:	1c72      	adds	r2, r6, #1
 8029e8a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8029e8e:	3001      	adds	r0, #1
 8029e90:	ee07 2a90 	vmov	s15, r2
 8029e94:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 8029e98:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8029e9c:	ee06 0a90 	vmov	s13, r0
 8029ea0:	ee36 6a47 	vsub.f32	s12, s12, s14
 8029ea4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8029ea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8029eaa:	ed94 9a11 	vldr	s18, [r4, #68]	; 0x44
 8029eae:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8029eb2:	9312      	str	r3, [sp, #72]	; 0x48
 8029eb4:	9316      	str	r3, [sp, #88]	; 0x58
 8029eb6:	a830      	add	r0, sp, #192	; 0xc0
 8029eb8:	ee77 7a86 	vadd.f32	s15, s15, s12
 8029ebc:	931a      	str	r3, [sp, #104]	; 0x68
 8029ebe:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8029ec2:	931e      	str	r3, [sp, #120]	; 0x78
 8029ec4:	2300      	movs	r3, #0
 8029ec6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8029eca:	edcd 5a11 	vstr	s11, [sp, #68]	; 0x44
 8029ece:	ae70      	add	r6, sp, #448	; 0x1c0
 8029ed0:	9320      	str	r3, [sp, #128]	; 0x80
 8029ed2:	9321      	str	r3, [sp, #132]	; 0x84
 8029ed4:	9322      	str	r3, [sp, #136]	; 0x88
 8029ed6:	9324      	str	r3, [sp, #144]	; 0x90
 8029ed8:	9325      	str	r3, [sp, #148]	; 0x94
 8029eda:	9326      	str	r3, [sp, #152]	; 0x98
 8029edc:	9328      	str	r3, [sp, #160]	; 0xa0
 8029ede:	9329      	str	r3, [sp, #164]	; 0xa4
 8029ee0:	932a      	str	r3, [sp, #168]	; 0xa8
 8029ee2:	932c      	str	r3, [sp, #176]	; 0xb0
 8029ee4:	932d      	str	r3, [sp, #180]	; 0xb4
 8029ee6:	932e      	str	r3, [sp, #184]	; 0xb8
 8029ee8:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 8029eec:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 8029ef0:	edcd 5a15 	vstr	s11, [sp, #84]	; 0x54
 8029ef4:	ed8d 7a17 	vstr	s14, [sp, #92]	; 0x5c
 8029ef8:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
 8029efc:	edcd 6a19 	vstr	s13, [sp, #100]	; 0x64
 8029f00:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 8029f04:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 8029f08:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8029f0c:	ed8d 7a1f 	vstr	s14, [sp, #124]	; 0x7c
 8029f10:	edd4 8a12 	vldr	s17, [r4, #72]	; 0x48
 8029f14:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
 8029f18:	f000 fc2c 	bl	802a774 <_ZN8touchgfx9Matrix4x4C1Ev>
 8029f1c:	eeb1 0a49 	vneg.f32	s0, s18
 8029f20:	a830      	add	r0, sp, #192	; 0xc0
 8029f22:	f000 fcf7 	bl	802a914 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8029f26:	eeb1 0a68 	vneg.f32	s0, s17
 8029f2a:	f000 fd01 	bl	802a930 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8029f2e:	eeb1 0a48 	vneg.f32	s0, s16
 8029f32:	f000 fd0c 	bl	802a94e <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8029f36:	a840      	add	r0, sp, #256	; 0x100
 8029f38:	f000 fc1c 	bl	802a774 <_ZN8touchgfx9Matrix4x4C1Ev>
 8029f3c:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8029f40:	a840      	add	r0, sp, #256	; 0x100
 8029f42:	f000 fc6b 	bl	802a81c <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
 8029f46:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 8029f4a:	f000 fc91 	bl	802a870 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
 8029f4e:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 8029f52:	f000 fcb6 	bl	802a8c2 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>
 8029f56:	a850      	add	r0, sp, #320	; 0x140
 8029f58:	f000 fc0c 	bl	802a774 <_ZN8touchgfx9Matrix4x4C1Ev>
 8029f5c:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8029f60:	a850      	add	r0, sp, #320	; 0x140
 8029f62:	f000 fd03 	bl	802a96c <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
 8029f66:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8029f6a:	f000 fd0b 	bl	802a984 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
 8029f6e:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8029f72:	f000 fd14 	bl	802a99e <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>
 8029f76:	a860      	add	r0, sp, #384	; 0x180
 8029f78:	f000 fbfc 	bl	802a774 <_ZN8touchgfx9Matrix4x4C1Ev>
 8029f7c:	eeb0 0a49 	vmov.f32	s0, s18
 8029f80:	a860      	add	r0, sp, #384	; 0x180
 8029f82:	f000 fcc7 	bl	802a914 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8029f86:	eeb0 0a68 	vmov.f32	s0, s17
 8029f8a:	f000 fcd1 	bl	802a930 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8029f8e:	eeb0 0a48 	vmov.f32	s0, s16
 8029f92:	f000 fcdc 	bl	802a94e <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8029f96:	aa50      	add	r2, sp, #320	; 0x140
 8029f98:	a960      	add	r1, sp, #384	; 0x180
 8029f9a:	a8b0      	add	r0, sp, #704	; 0x2c0
 8029f9c:	f000 fc02 	bl	802a7a4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8029fa0:	4628      	mov	r0, r5
 8029fa2:	aa40      	add	r2, sp, #256	; 0x100
 8029fa4:	a9b0      	add	r1, sp, #704	; 0x2c0
 8029fa6:	f000 fbfd 	bl	802a7a4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8029faa:	4629      	mov	r1, r5
 8029fac:	aa30      	add	r2, sp, #192	; 0xc0
 8029fae:	a870      	add	r0, sp, #448	; 0x1c0
 8029fb0:	f000 fbf8 	bl	802a7a4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8029fb4:	a880      	add	r0, sp, #512	; 0x200
 8029fb6:	f000 fbdd 	bl	802a774 <_ZN8touchgfx9Matrix4x4C1Ev>
 8029fba:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 8029fbe:	a880      	add	r0, sp, #512	; 0x200
 8029fc0:	eeb1 0a40 	vneg.f32	s0, s0
 8029fc4:	f000 fca6 	bl	802a914 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8029fc8:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 8029fcc:	a880      	add	r0, sp, #512	; 0x200
 8029fce:	eeb1 0a40 	vneg.f32	s0, s0
 8029fd2:	f000 fcad 	bl	802a930 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8029fd6:	a890      	add	r0, sp, #576	; 0x240
 8029fd8:	f000 fbcc 	bl	802a774 <_ZN8touchgfx9Matrix4x4C1Ev>
 8029fdc:	ed94 0a16 	vldr	s0, [r4, #88]	; 0x58
 8029fe0:	a890      	add	r0, sp, #576	; 0x240
 8029fe2:	f000 fc0b 	bl	802a7fc <_ZN8touchgfx9Matrix4x415setViewDistanceEf>
 8029fe6:	a8a0      	add	r0, sp, #640	; 0x280
 8029fe8:	f000 fbc4 	bl	802a774 <_ZN8touchgfx9Matrix4x4C1Ev>
 8029fec:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 8029ff0:	a8a0      	add	r0, sp, #640	; 0x280
 8029ff2:	f000 fc8f 	bl	802a914 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8029ff6:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 8029ffa:	f000 fc99 	bl	802a930 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8029ffe:	aa90      	add	r2, sp, #576	; 0x240
 802a000:	a9a0      	add	r1, sp, #640	; 0x280
 802a002:	a8b0      	add	r0, sp, #704	; 0x2c0
 802a004:	f000 fbce 	bl	802a7a4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 802a008:	4628      	mov	r0, r5
 802a00a:	aa80      	add	r2, sp, #512	; 0x200
 802a00c:	a9b0      	add	r1, sp, #704	; 0x2c0
 802a00e:	f000 fbc9 	bl	802a7a4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 802a012:	4629      	mov	r1, r5
 802a014:	466d      	mov	r5, sp
 802a016:	aa70      	add	r2, sp, #448	; 0x1c0
 802a018:	4668      	mov	r0, sp
 802a01a:	f000 fbc3 	bl	802a7a4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 802a01e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802a020:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 802a022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802a024:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 802a026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802a028:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 802a02a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802a02e:	2500      	movs	r5, #0
 802a030:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 802a034:	0129      	lsls	r1, r5, #4
 802a036:	ab20      	add	r3, sp, #128	; 0x80
 802a038:	3501      	adds	r5, #1
 802a03a:	a870      	add	r0, sp, #448	; 0x1c0
 802a03c:	185e      	adds	r6, r3, r1
 802a03e:	ab10      	add	r3, sp, #64	; 0x40
 802a040:	4419      	add	r1, r3
 802a042:	f000 fb67 	bl	802a714 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
 802a046:	2d04      	cmp	r5, #4
 802a048:	ed86 0a00 	vstr	s0, [r6]
 802a04c:	edc6 0a01 	vstr	s1, [r6, #4]
 802a050:	ed86 1a02 	vstr	s2, [r6, #8]
 802a054:	edc6 1a03 	vstr	s3, [r6, #12]
 802a058:	d1ec      	bne.n	802a034 <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x1d8>
 802a05a:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 802a05e:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 802a062:	ed9d 7a22 	vldr	s14, [sp, #136]	; 0x88
 802a066:	ee67 6aa6 	vmul.f32	s13, s15, s13
 802a06a:	ed84 7a19 	vstr	s14, [r4, #100]	; 0x64
 802a06e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 802a072:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 802a076:	ee67 6aa6 	vmul.f32	s13, s15, s13
 802a07a:	ed84 6a17 	vstr	s12, [r4, #92]	; 0x5c
 802a07e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 802a082:	eddd 6a24 	vldr	s13, [sp, #144]	; 0x90
 802a086:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 802a08a:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
 802a08e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 802a092:	ed84 6a18 	vstr	s12, [r4, #96]	; 0x60
 802a096:	ee86 6a87 	vdiv.f32	s12, s13, s14
 802a09a:	eddd 6a25 	vldr	s13, [sp, #148]	; 0x94
 802a09e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 802a0a2:	ed84 6a1a 	vstr	s12, [r4, #104]	; 0x68
 802a0a6:	ee86 6a87 	vdiv.f32	s12, s13, s14
 802a0aa:	eddd 6a28 	vldr	s13, [sp, #160]	; 0xa0
 802a0ae:	ed9d 7a2a 	vldr	s14, [sp, #168]	; 0xa8
 802a0b2:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
 802a0b6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 802a0ba:	ed84 6a1b 	vstr	s12, [r4, #108]	; 0x6c
 802a0be:	ee86 6a87 	vdiv.f32	s12, s13, s14
 802a0c2:	eddd 6a29 	vldr	s13, [sp, #164]	; 0xa4
 802a0c6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 802a0ca:	ed84 6a1d 	vstr	s12, [r4, #116]	; 0x74
 802a0ce:	ee86 6a87 	vdiv.f32	s12, s13, s14
 802a0d2:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
 802a0d6:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 802a0da:	ed84 7a22 	vstr	s14, [r4, #136]	; 0x88
 802a0de:	ee67 6aa6 	vmul.f32	s13, s15, s13
 802a0e2:	ed84 6a1e 	vstr	s12, [r4, #120]	; 0x78
 802a0e6:	ee86 6a87 	vdiv.f32	s12, s13, s14
 802a0ea:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 802a0ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802a0f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 802a0f6:	ed84 6a20 	vstr	s12, [r4, #128]	; 0x80
 802a0fa:	edc4 6a21 	vstr	s13, [r4, #132]	; 0x84
 802a0fe:	f50d 7d50 	add.w	sp, sp, #832	; 0x340
 802a102:	ecbd 8b04 	vpop	{d8-d9}
 802a106:	bd70      	pop	{r4, r5, r6, pc}

0802a108 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:
 802a108:	b510      	push	{r4, lr}
 802a10a:	4604      	mov	r4, r0
 802a10c:	f7eb fa2d 	bl	801556a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802a110:	4620      	mov	r0, r4
 802a112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a116:	f7ff bea1 	b.w	8029e5c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0802a11a <_ZN8touchgfx13TextureMapper9setAnglesEfff>:
 802a11a:	ed80 0a0d 	vstr	s0, [r0, #52]	; 0x34
 802a11e:	edc0 0a0e 	vstr	s1, [r0, #56]	; 0x38
 802a122:	ed80 1a0f 	vstr	s2, [r0, #60]	; 0x3c
 802a126:	f7ff be99 	b.w	8029e5c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0802a12a <_ZN8touchgfx13TextureMapper8setScaleEf>:
 802a12a:	ed80 0a10 	vstr	s0, [r0, #64]	; 0x40
 802a12e:	f7ff be95 	b.w	8029e5c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0802a132 <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
 802a132:	ed80 0a0b 	vstr	s0, [r0, #44]	; 0x2c
 802a136:	edc0 0a0c 	vstr	s1, [r0, #48]	; 0x30
 802a13a:	f7ff be8f 	b.w	8029e5c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0802a13e <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
 802a13e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802a142:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802a146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a14a:	fe30 0a27 	vselgt.f32	s0, s0, s15
 802a14e:	ed80 0a16 	vstr	s0, [r0, #88]	; 0x58
 802a152:	f7ff be83 	b.w	8029e5c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0802a156 <_ZN8touchgfx13TextureMapper9setCameraEff>:
 802a156:	ed80 0a14 	vstr	s0, [r0, #80]	; 0x50
 802a15a:	edc0 0a15 	vstr	s1, [r0, #84]	; 0x54
 802a15e:	f7ff be7d 	b.w	8029e5c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0802a162 <_ZN8touchgfx13TextureMapper8setOrigoEff>:
 802a162:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 802a166:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 802a16a:	f7ff be77 	b.w	8029e5c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0802a16e <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
 802a16e:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 802a172:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 802a176:	ed80 1a13 	vstr	s2, [r0, #76]	; 0x4c
 802a17a:	f7ff be6f 	b.w	8029e5c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0802a17e <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:
 802a17e:	b510      	push	{r4, lr}
 802a180:	edd1 5a1a 	vldr	s11, [r1, #104]	; 0x68
 802a184:	edd1 7a17 	vldr	s15, [r1, #92]	; 0x5c
 802a188:	ed91 6a1d 	vldr	s12, [r1, #116]	; 0x74
 802a18c:	eef4 7ae5 	vcmpe.f32	s15, s11
 802a190:	edd1 6a20 	vldr	s13, [r1, #128]	; 0x80
 802a194:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 802a198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a19c:	bf54      	ite	pl
 802a19e:	eeb0 7a65 	vmovpl.f32	s14, s11
 802a1a2:	eeb0 7a67 	vmovmi.f32	s14, s15
 802a1a6:	eeb4 6ac7 	vcmpe.f32	s12, s14
 802a1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a1ae:	fe37 7a06 	vselgt.f32	s14, s14, s12
 802a1b2:	eef4 6ac7 	vcmpe.f32	s13, s14
 802a1b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a1ba:	fe37 7a26 	vselgt.f32	s14, s14, s13
 802a1be:	febb 7a47 	vrintm.f32	s14, s14
 802a1c2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802a1c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a1ca:	eef4 7ae5 	vcmpe.f32	s15, s11
 802a1ce:	bf56      	itet	pl
 802a1d0:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 802a1d4:	2200      	movmi	r2, #0
 802a1d6:	ee17 3a10 	vmovpl	r3, s14
 802a1da:	ee07 4a10 	vmov	s14, r4
 802a1de:	bf58      	it	pl
 802a1e0:	b21a      	sxthpl	r2, r3
 802a1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a1e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802a1ea:	8002      	strh	r2, [r0, #0]
 802a1ec:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 802a1f0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 802a1f4:	edd1 5a1b 	vldr	s11, [r1, #108]	; 0x6c
 802a1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a1fc:	bf58      	it	pl
 802a1fe:	eef0 7a46 	vmovpl.f32	s15, s12
 802a202:	ed91 6a1e 	vldr	s12, [r1, #120]	; 0x78
 802a206:	eef4 6ae7 	vcmpe.f32	s13, s15
 802a20a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a20e:	bf58      	it	pl
 802a210:	eef0 7a66 	vmovpl.f32	s15, s13
 802a214:	edd1 6a21 	vldr	s13, [r1, #132]	; 0x84
 802a218:	fefa 7a67 	vrintp.f32	s15, s15
 802a21c:	eef4 7ac7 	vcmpe.f32	s15, s14
 802a220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a224:	bfdc      	itt	le
 802a226:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 802a22a:	ee17 3a90 	vmovle	r3, s15
 802a22e:	edd1 7a18 	vldr	s15, [r1, #96]	; 0x60
 802a232:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 802a236:	eef4 7ae5 	vcmpe.f32	s15, s11
 802a23a:	bfd8      	it	le
 802a23c:	b21c      	sxthle	r4, r3
 802a23e:	1aa2      	subs	r2, r4, r2
 802a240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a244:	8082      	strh	r2, [r0, #4]
 802a246:	bf54      	ite	pl
 802a248:	eeb0 7a65 	vmovpl.f32	s14, s11
 802a24c:	eeb0 7a67 	vmovmi.f32	s14, s15
 802a250:	eeb4 6ac7 	vcmpe.f32	s12, s14
 802a254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a258:	fe37 7a06 	vselgt.f32	s14, s14, s12
 802a25c:	eef4 6ac7 	vcmpe.f32	s13, s14
 802a260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a264:	fe37 7a26 	vselgt.f32	s14, s14, s13
 802a268:	febb 7a47 	vrintm.f32	s14, s14
 802a26c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802a270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a274:	eef4 7ae5 	vcmpe.f32	s15, s11
 802a278:	bf56      	itet	pl
 802a27a:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 802a27e:	2300      	movmi	r3, #0
 802a280:	ee17 3a10 	vmovpl	r3, s14
 802a284:	ee07 1a10 	vmov	s14, r1
 802a288:	bf58      	it	pl
 802a28a:	b21b      	sxthpl	r3, r3
 802a28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a290:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802a294:	8043      	strh	r3, [r0, #2]
 802a296:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 802a29a:	eeb4 6ae7 	vcmpe.f32	s12, s15
 802a29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a2a2:	bf58      	it	pl
 802a2a4:	eef0 7a46 	vmovpl.f32	s15, s12
 802a2a8:	eef4 6ae7 	vcmpe.f32	s13, s15
 802a2ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a2b0:	bf58      	it	pl
 802a2b2:	eef0 7a66 	vmovpl.f32	s15, s13
 802a2b6:	fefa 7a67 	vrintp.f32	s15, s15
 802a2ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 802a2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a2c2:	bfde      	ittt	le
 802a2c4:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 802a2c8:	ee17 1a90 	vmovle	r1, s15
 802a2cc:	b209      	sxthle	r1, r1
 802a2ce:	1acb      	subs	r3, r1, r3
 802a2d0:	80c3      	strh	r3, [r0, #6]
 802a2d2:	bd10      	pop	{r4, pc}

0802a2d4 <_ZNK8touchgfx13TextureMapper17invalidateContentEv>:
 802a2d4:	b513      	push	{r0, r1, r4, lr}
 802a2d6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 802a2da:	4604      	mov	r4, r0
 802a2dc:	b143      	cbz	r3, 802a2f0 <_ZNK8touchgfx13TextureMapper17invalidateContentEv+0x1c>
 802a2de:	4601      	mov	r1, r0
 802a2e0:	4668      	mov	r0, sp
 802a2e2:	f7ff ff4c 	bl	802a17e <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 802a2e6:	6823      	ldr	r3, [r4, #0]
 802a2e8:	4669      	mov	r1, sp
 802a2ea:	4620      	mov	r0, r4
 802a2ec:	691b      	ldr	r3, [r3, #16]
 802a2ee:	4798      	blx	r3
 802a2f0:	b002      	add	sp, #8
 802a2f2:	bd10      	pop	{r4, pc}

0802a2f4 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:
 802a2f4:	4603      	mov	r3, r0
 802a2f6:	3026      	adds	r0, #38	; 0x26
 802a2f8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 802a2fc:	b90b      	cbnz	r3, 802a302 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0xe>
 802a2fe:	f7ef b805 	b.w	801930c <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 802a302:	f7ef b813 	b.w	801932c <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

0802a308 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 802a308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a30c:	4604      	mov	r4, r0
 802a30e:	469b      	mov	fp, r3
 802a310:	ed2d 8b04 	vpush	{d8-d9}
 802a314:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 802a318:	b0b3      	sub	sp, #204	; 0xcc
 802a31a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 802a31e:	f9b1 6000 	ldrsh.w	r6, [r1]
 802a322:	8888      	ldrh	r0, [r1, #4]
 802a324:	9206      	str	r2, [sp, #24]
 802a326:	2200      	movs	r2, #0
 802a328:	4430      	add	r0, r6
 802a32a:	f8dd a100 	ldr.w	sl, [sp, #256]	; 0x100
 802a32e:	f8dd 9104 	ldr.w	r9, [sp, #260]	; 0x104
 802a332:	b280      	uxth	r0, r0
 802a334:	f8dd 8108 	ldr.w	r8, [sp, #264]	; 0x108
 802a338:	9f43      	ldr	r7, [sp, #268]	; 0x10c
 802a33a:	fa0f fe80 	sxth.w	lr, r0
 802a33e:	9211      	str	r2, [sp, #68]	; 0x44
 802a340:	4596      	cmp	lr, r2
 802a342:	f340 8129 	ble.w	802a598 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 802a346:	45b4      	cmp	ip, r6
 802a348:	f340 8126 	ble.w	802a598 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 802a34c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 802a350:	88ca      	ldrh	r2, [r1, #6]
 802a352:	442a      	add	r2, r5
 802a354:	b292      	uxth	r2, r2
 802a356:	b211      	sxth	r1, r2
 802a358:	2900      	cmp	r1, #0
 802a35a:	f340 811d 	ble.w	802a598 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 802a35e:	42ab      	cmp	r3, r5
 802a360:	f340 811a 	ble.w	802a598 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 802a364:	45f4      	cmp	ip, lr
 802a366:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 802a36a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802a36e:	bfb8      	it	lt
 802a370:	fa1f f08c 	uxthlt.w	r0, ip
 802a374:	428b      	cmp	r3, r1
 802a376:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 802a37a:	bfb8      	it	lt
 802a37c:	b29a      	uxthlt	r2, r3
 802a37e:	1b80      	subs	r0, r0, r6
 802a380:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 802a384:	1b52      	subs	r2, r2, r5
 802a386:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 802a38a:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 802a38e:	ab11      	add	r3, sp, #68	; 0x44
 802a390:	ad13      	add	r5, sp, #76	; 0x4c
 802a392:	6822      	ldr	r2, [r4, #0]
 802a394:	1d26      	adds	r6, r4, #4
 802a396:	9307      	str	r3, [sp, #28]
 802a398:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 802a39a:	e893 0003 	ldmia.w	r3, {r0, r1}
 802a39e:	e885 0003 	stmia.w	r5, {r0, r1}
 802a3a2:	4629      	mov	r1, r5
 802a3a4:	4620      	mov	r0, r4
 802a3a6:	4790      	blx	r2
 802a3a8:	4621      	mov	r1, r4
 802a3aa:	a815      	add	r0, sp, #84	; 0x54
 802a3ac:	f7ee ff0a 	bl	80191c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 802a3b0:	a815      	add	r0, sp, #84	; 0x54
 802a3b2:	f7ed fc13 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802a3b6:	9b07      	ldr	r3, [sp, #28]
 802a3b8:	4631      	mov	r1, r6
 802a3ba:	4618      	mov	r0, r3
 802a3bc:	f7ed fc52 	bl	8017c64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802a3c0:	4628      	mov	r0, r5
 802a3c2:	f104 0526 	add.w	r5, r4, #38	; 0x26
 802a3c6:	f7ed fc09 	bl	8017bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802a3ca:	4628      	mov	r0, r5
 802a3cc:	f7f1 f882 	bl	801b4d4 <_ZNK8touchgfx6Bitmap7getDataEv>
 802a3d0:	9007      	str	r0, [sp, #28]
 802a3d2:	2800      	cmp	r0, #0
 802a3d4:	f000 80db 	beq.w	802a58e <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x286>
 802a3d8:	f8db 2000 	ldr.w	r2, [fp]
 802a3dc:	a90d      	add	r1, sp, #52	; 0x34
 802a3de:	a809      	add	r0, sp, #36	; 0x24
 802a3e0:	9209      	str	r2, [sp, #36]	; 0x24
 802a3e2:	f8db 2004 	ldr.w	r2, [fp, #4]
 802a3e6:	920a      	str	r2, [sp, #40]	; 0x28
 802a3e8:	f8db 2008 	ldr.w	r2, [fp, #8]
 802a3ec:	920b      	str	r2, [sp, #44]	; 0x2c
 802a3ee:	f8db 200c 	ldr.w	r2, [fp, #12]
 802a3f2:	920c      	str	r2, [sp, #48]	; 0x30
 802a3f4:	f8da 2000 	ldr.w	r2, [sl]
 802a3f8:	920d      	str	r2, [sp, #52]	; 0x34
 802a3fa:	f8da 2004 	ldr.w	r2, [sl, #4]
 802a3fe:	920e      	str	r2, [sp, #56]	; 0x38
 802a400:	f8da 2008 	ldr.w	r2, [sl, #8]
 802a404:	920f      	str	r2, [sp, #60]	; 0x3c
 802a406:	f8da 200c 	ldr.w	r2, [sl, #12]
 802a40a:	9210      	str	r2, [sp, #64]	; 0x40
 802a40c:	4632      	mov	r2, r6
 802a40e:	f7ed fc0d 	bl	8017c2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 802a412:	4632      	mov	r2, r6
 802a414:	a90e      	add	r1, sp, #56	; 0x38
 802a416:	a80a      	add	r0, sp, #40	; 0x28
 802a418:	f7ed fc08 	bl	8017c2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 802a41c:	4632      	mov	r2, r6
 802a41e:	a90f      	add	r1, sp, #60	; 0x3c
 802a420:	a80b      	add	r0, sp, #44	; 0x2c
 802a422:	f7ed fc03 	bl	8017c2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 802a426:	4632      	mov	r2, r6
 802a428:	a910      	add	r1, sp, #64	; 0x40
 802a42a:	a80c      	add	r0, sp, #48	; 0x30
 802a42c:	f7ed fbfe 	bl	8017c2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 802a430:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 802a434:	edd7 4a00 	vldr	s9, [r7]
 802a438:	eef0 6a67 	vmov.f32	s13, s15
 802a43c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 802a440:	edd7 5a01 	vldr	s11, [r7, #4]
 802a444:	eeb0 7a67 	vmov.f32	s14, s15
 802a448:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 802a44c:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 802a450:	ed98 4a00 	vldr	s8, [r8]
 802a454:	eeb0 6a67 	vmov.f32	s12, s15
 802a458:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 802a45c:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 802a460:	ed98 5a01 	vldr	s10, [r8, #4]
 802a464:	ed99 9a00 	vldr	s18, [r9]
 802a468:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 802a46c:	ed99 8a01 	vldr	s16, [r9, #4]
 802a470:	edd9 8a02 	vldr	s17, [r9, #8]
 802a474:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 802a478:	ee16 6a10 	vmov	r6, s12
 802a47c:	eeb0 6a67 	vmov.f32	s12, s15
 802a480:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 802a484:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 802a488:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 802a48c:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 802a490:	ed8d 4a21 	vstr	s8, [sp, #132]	; 0x84
 802a494:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 802a498:	ee16 0a10 	vmov	r0, s12
 802a49c:	eeb0 6a67 	vmov.f32	s12, s15
 802a4a0:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 802a4a4:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 802a4a8:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 802a4ac:	ed8d 5a26 	vstr	s10, [sp, #152]	; 0x98
 802a4b0:	edcd 5a27 	vstr	s11, [sp, #156]	; 0x9c
 802a4b4:	f8d7 a008 	ldr.w	sl, [r7, #8]
 802a4b8:	ee16 1a10 	vmov	r1, s12
 802a4bc:	eeb0 6a67 	vmov.f32	s12, s15
 802a4c0:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 802a4c4:	f8d8 b008 	ldr.w	fp, [r8, #8]
 802a4c8:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 802a4cc:	68ff      	ldr	r7, [r7, #12]
 802a4ce:	9624      	str	r6, [sp, #144]	; 0x90
 802a4d0:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 802a4d4:	ed8d 9a20 	vstr	s18, [sp, #128]	; 0x80
 802a4d8:	ee16 2a10 	vmov	r2, s12
 802a4dc:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 802a4e0:	ed8d 8a25 	vstr	s16, [sp, #148]	; 0x94
 802a4e4:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 802a4e8:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 802a4ec:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 802a4f0:	4628      	mov	r0, r5
 802a4f2:	edcd 8a2a 	vstr	s17, [sp, #168]	; 0xa8
 802a4f6:	9b06      	ldr	r3, [sp, #24]
 802a4f8:	922d      	str	r2, [sp, #180]	; 0xb4
 802a4fa:	4a29      	ldr	r2, [pc, #164]	; (802a5a0 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x298>)
 802a4fc:	9317      	str	r3, [sp, #92]	; 0x5c
 802a4fe:	8812      	ldrh	r2, [r2, #0]
 802a500:	9b07      	ldr	r3, [sp, #28]
 802a502:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 802a506:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 802a50a:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 802a50e:	9218      	str	r2, [sp, #96]	; 0x60
 802a510:	9319      	str	r3, [sp, #100]	; 0x64
 802a512:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 802a516:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 802a51a:	9731      	str	r7, [sp, #196]	; 0xc4
 802a51c:	f7f1 f80a 	bl	801b534 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 802a520:	901a      	str	r0, [sp, #104]	; 0x68
 802a522:	4628      	mov	r0, r5
 802a524:	f7f0 feea 	bl	801b2fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 802a528:	901b      	str	r0, [sp, #108]	; 0x6c
 802a52a:	4628      	mov	r0, r5
 802a52c:	f7f0 ff1a 	bl	801b364 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802a530:	901c      	str	r0, [sp, #112]	; 0x70
 802a532:	4628      	mov	r0, r5
 802a534:	f7f0 fee2 	bl	801b2fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 802a538:	eeb4 9a48 	vcmp.f32	s18, s16
 802a53c:	901d      	str	r0, [sp, #116]	; 0x74
 802a53e:	f8b4 608c 	ldrh.w	r6, [r4, #140]	; 0x8c
 802a542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a546:	d107      	bne.n	802a558 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x250>
 802a548:	eeb4 8a68 	vcmp.f32	s16, s17
 802a54c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802a550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a554:	bf08      	it	eq
 802a556:	461e      	moveq	r6, r3
 802a558:	4b12      	ldr	r3, [pc, #72]	; (802a5a4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x29c>)
 802a55a:	681b      	ldr	r3, [r3, #0]
 802a55c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 802a560:	b10a      	cbz	r2, 802a566 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x25e>
 802a562:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 802a564:	b905      	cbnz	r5, 802a568 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x260>
 802a566:	689d      	ldr	r5, [r3, #8]
 802a568:	682b      	ldr	r3, [r5, #0]
 802a56a:	4620      	mov	r0, r4
 802a56c:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 802a56e:	f7ff fec1 	bl	802a2f4 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
 802a572:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 802a576:	aa1e      	add	r2, sp, #120	; 0x78
 802a578:	9604      	str	r6, [sp, #16]
 802a57a:	a917      	add	r1, sp, #92	; 0x5c
 802a57c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 802a580:	ab13      	add	r3, sp, #76	; 0x4c
 802a582:	4628      	mov	r0, r5
 802a584:	9301      	str	r3, [sp, #4]
 802a586:	ab15      	add	r3, sp, #84	; 0x54
 802a588:	9300      	str	r3, [sp, #0]
 802a58a:	ab19      	add	r3, sp, #100	; 0x64
 802a58c:	47b8      	blx	r7
 802a58e:	b033      	add	sp, #204	; 0xcc
 802a590:	ecbd 8b04 	vpop	{d8-d9}
 802a594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a598:	2300      	movs	r3, #0
 802a59a:	9312      	str	r3, [sp, #72]	; 0x48
 802a59c:	e6f7      	b.n	802a38e <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x86>
 802a59e:	bf00      	nop
 802a5a0:	20027ca2 	.word	0x20027ca2
 802a5a4:	20027ca8 	.word	0x20027ca8

0802a5a8 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:
 802a5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a5ac:	ed2d 8b02 	vpush	{d8}
 802a5b0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 802a5b4:	b098      	sub	sp, #96	; 0x60
 802a5b6:	4604      	mov	r4, r0
 802a5b8:	4688      	mov	r8, r1
 802a5ba:	2b00      	cmp	r3, #0
 802a5bc:	d077      	beq.n	802a6ae <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x106>
 802a5be:	f100 0526 	add.w	r5, r0, #38	; 0x26
 802a5c2:	4628      	mov	r0, r5
 802a5c4:	f7f0 fe9a 	bl	801b2fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 802a5c8:	ee07 0a90 	vmov	s15, r0
 802a5cc:	4628      	mov	r0, r5
 802a5ce:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 802a5d2:	f7f0 fec7 	bl	801b364 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802a5d6:	4b4e      	ldr	r3, [pc, #312]	; (802a710 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x168>)
 802a5d8:	ee07 0a90 	vmov	s15, r0
 802a5dc:	781b      	ldrb	r3, [r3, #0]
 802a5de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802a5e2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 802a5e6:	2b01      	cmp	r3, #1
 802a5e8:	d066      	beq.n	802a6b8 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x110>
 802a5ea:	eeb0 6a47 	vmov.f32	s12, s14
 802a5ee:	ee17 3a10 	vmov	r3, s14
 802a5f2:	eeb0 4a48 	vmov.f32	s8, s16
 802a5f6:	eeb0 7a48 	vmov.f32	s14, s16
 802a5fa:	eef0 4a67 	vmov.f32	s9, s15
 802a5fe:	eeb0 8a67 	vmov.f32	s16, s15
 802a602:	ed94 5a17 	vldr	s10, [r4, #92]	; 0x5c
 802a606:	edd4 5a18 	vldr	s11, [r4, #96]	; 0x60
 802a60a:	ed94 3a1b 	vldr	s6, [r4, #108]	; 0x6c
 802a60e:	edd4 2a1d 	vldr	s5, [r4, #116]	; 0x74
 802a612:	ee73 1a65 	vsub.f32	s3, s6, s11
 802a616:	ed94 2a1a 	vldr	s4, [r4, #104]	; 0x68
 802a61a:	ee72 6ac5 	vsub.f32	s13, s5, s10
 802a61e:	edd4 3a1e 	vldr	s7, [r4, #120]	; 0x78
 802a622:	ee32 1a45 	vsub.f32	s2, s4, s10
 802a626:	6f25      	ldr	r5, [r4, #112]	; 0x70
 802a628:	6e66      	ldr	r6, [r4, #100]	; 0x64
 802a62a:	ee66 6ae1 	vnmul.f32	s13, s13, s3
 802a62e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 802a630:	ee73 1ae5 	vsub.f32	s3, s7, s11
 802a634:	f8d4 c080 	ldr.w	ip, [r4, #128]	; 0x80
 802a638:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 802a63c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802a640:	eee1 6a21 	vfma.f32	s13, s2, s3
 802a644:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 802a648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802a64c:	dd3d      	ble.n	802a6ca <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x122>
 802a64e:	ed8d 5a04 	vstr	s10, [sp, #16]
 802a652:	ed8d 2a05 	vstr	s4, [sp, #20]
 802a656:	edcd 2a06 	vstr	s5, [sp, #24]
 802a65a:	f8cd c01c 	str.w	ip, [sp, #28]
 802a65e:	edcd 5a08 	vstr	s11, [sp, #32]
 802a662:	ed8d 3a09 	vstr	s6, [sp, #36]	; 0x24
 802a666:	edcd 3a0a 	vstr	s7, [sp, #40]	; 0x28
 802a66a:	970b      	str	r7, [sp, #44]	; 0x2c
 802a66c:	960c      	str	r6, [sp, #48]	; 0x30
 802a66e:	950d      	str	r5, [sp, #52]	; 0x34
 802a670:	920e      	str	r2, [sp, #56]	; 0x38
 802a672:	900f      	str	r0, [sp, #60]	; 0x3c
 802a674:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 802a678:	ed8d 4a11 	vstr	s8, [sp, #68]	; 0x44
 802a67c:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 802a680:	edcd 4a13 	vstr	s9, [sp, #76]	; 0x4c
 802a684:	ed8d 8a14 	vstr	s16, [sp, #80]	; 0x50
 802a688:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 802a68c:	9316      	str	r3, [sp, #88]	; 0x58
 802a68e:	ed8d 6a17 	vstr	s12, [sp, #92]	; 0x5c
 802a692:	ab14      	add	r3, sp, #80	; 0x50
 802a694:	2200      	movs	r2, #0
 802a696:	4641      	mov	r1, r8
 802a698:	4620      	mov	r0, r4
 802a69a:	9303      	str	r3, [sp, #12]
 802a69c:	ab10      	add	r3, sp, #64	; 0x40
 802a69e:	9302      	str	r3, [sp, #8]
 802a6a0:	ab0c      	add	r3, sp, #48	; 0x30
 802a6a2:	9301      	str	r3, [sp, #4]
 802a6a4:	ab08      	add	r3, sp, #32
 802a6a6:	9300      	str	r3, [sp, #0]
 802a6a8:	ab04      	add	r3, sp, #16
 802a6aa:	f7ff fe2d 	bl	802a308 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 802a6ae:	b018      	add	sp, #96	; 0x60
 802a6b0:	ecbd 8b02 	vpop	{d8}
 802a6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a6b8:	eeb0 6a48 	vmov.f32	s12, s16
 802a6bc:	ee17 3a90 	vmov	r3, s15
 802a6c0:	eef0 4a47 	vmov.f32	s9, s14
 802a6c4:	eeb0 4a67 	vmov.f32	s8, s15
 802a6c8:	e79b      	b.n	802a602 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x5a>
 802a6ca:	ed8d 5a05 	vstr	s10, [sp, #20]
 802a6ce:	ed8d 2a04 	vstr	s4, [sp, #16]
 802a6d2:	f8cd c018 	str.w	ip, [sp, #24]
 802a6d6:	edcd 2a07 	vstr	s5, [sp, #28]
 802a6da:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 802a6de:	ed8d 3a08 	vstr	s6, [sp, #32]
 802a6e2:	970a      	str	r7, [sp, #40]	; 0x28
 802a6e4:	edcd 3a0b 	vstr	s7, [sp, #44]	; 0x2c
 802a6e8:	960d      	str	r6, [sp, #52]	; 0x34
 802a6ea:	950c      	str	r5, [sp, #48]	; 0x30
 802a6ec:	900e      	str	r0, [sp, #56]	; 0x38
 802a6ee:	920f      	str	r2, [sp, #60]	; 0x3c
 802a6f0:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 802a6f4:	ed8d 4a10 	vstr	s8, [sp, #64]	; 0x40
 802a6f8:	edcd 4a12 	vstr	s9, [sp, #72]	; 0x48
 802a6fc:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 802a700:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
 802a704:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 802a708:	ed8d 6a16 	vstr	s12, [sp, #88]	; 0x58
 802a70c:	9317      	str	r3, [sp, #92]	; 0x5c
 802a70e:	e7c0      	b.n	802a692 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xea>
 802a710:	20027ca0 	.word	0x20027ca0

0802a714 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
 802a714:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a716:	2300      	movs	r3, #0
 802a718:	b08d      	sub	sp, #52	; 0x34
 802a71a:	f100 0640 	add.w	r6, r0, #64	; 0x40
 802a71e:	f101 0710 	add.w	r7, r1, #16
 802a722:	9304      	str	r3, [sp, #16]
 802a724:	aa04      	add	r2, sp, #16
 802a726:	9305      	str	r3, [sp, #20]
 802a728:	9306      	str	r3, [sp, #24]
 802a72a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 802a72e:	9307      	str	r3, [sp, #28]
 802a730:	4613      	mov	r3, r2
 802a732:	460c      	mov	r4, r1
 802a734:	4605      	mov	r5, r0
 802a736:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802a770 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
 802a73a:	ecb4 7a01 	vldmia	r4!, {s14}
 802a73e:	ecf5 6a01 	vldmia	r5!, {s13}
 802a742:	42bc      	cmp	r4, r7
 802a744:	eee6 7a87 	vfma.f32	s15, s13, s14
 802a748:	d1f7      	bne.n	802a73a <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
 802a74a:	3010      	adds	r0, #16
 802a74c:	ece2 7a01 	vstmia	r2!, {s15}
 802a750:	42b0      	cmp	r0, r6
 802a752:	d1ee      	bne.n	802a732 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
 802a754:	ac0c      	add	r4, sp, #48	; 0x30
 802a756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802a758:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 802a75c:	ed9d 0a08 	vldr	s0, [sp, #32]
 802a760:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 802a764:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 802a768:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 802a76c:	b00d      	add	sp, #52	; 0x34
 802a76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a770:	00000000 	.word	0x00000000

0802a774 <_ZN8touchgfx9Matrix4x4C1Ev>:
 802a774:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802a778:	2300      	movs	r3, #0
 802a77a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 802a7a0 <_ZN8touchgfx9Matrix4x4C1Ev+0x2c>
 802a77e:	eb00 1103 	add.w	r1, r0, r3, lsl #4
 802a782:	2200      	movs	r2, #0
 802a784:	4293      	cmp	r3, r2
 802a786:	f102 0201 	add.w	r2, r2, #1
 802a78a:	fe47 6a87 	vseleq.f32	s13, s15, s14
 802a78e:	2a04      	cmp	r2, #4
 802a790:	ece1 6a01 	vstmia	r1!, {s13}
 802a794:	d1f6      	bne.n	802a784 <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
 802a796:	3301      	adds	r3, #1
 802a798:	2b04      	cmp	r3, #4
 802a79a:	d1f0      	bne.n	802a77e <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
 802a79c:	4770      	bx	lr
 802a79e:	bf00      	nop
 802a7a0:	00000000 	.word	0x00000000

0802a7a4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
 802a7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a7a8:	460c      	mov	r4, r1
 802a7aa:	4605      	mov	r5, r0
 802a7ac:	4690      	mov	r8, r2
 802a7ae:	f7ff ffe1 	bl	802a774 <_ZN8touchgfx9Matrix4x4C1Ev>
 802a7b2:	4628      	mov	r0, r5
 802a7b4:	4621      	mov	r1, r4
 802a7b6:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 802a7ba:	2300      	movs	r3, #0
 802a7bc:	eb08 0603 	add.w	r6, r8, r3
 802a7c0:	460f      	mov	r7, r1
 802a7c2:	2400      	movs	r4, #0
 802a7c4:	eddf 7a0c 	vldr	s15, [pc, #48]	; 802a7f8 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x54>
 802a7c8:	4632      	mov	r2, r6
 802a7ca:	3401      	adds	r4, #1
 802a7cc:	ecf7 6a01 	vldmia	r7!, {s13}
 802a7d0:	3610      	adds	r6, #16
 802a7d2:	ed92 7a00 	vldr	s14, [r2]
 802a7d6:	2c04      	cmp	r4, #4
 802a7d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 802a7dc:	d1f4      	bne.n	802a7c8 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x24>
 802a7de:	18c2      	adds	r2, r0, r3
 802a7e0:	3304      	adds	r3, #4
 802a7e2:	2b10      	cmp	r3, #16
 802a7e4:	edc2 7a00 	vstr	s15, [r2]
 802a7e8:	d1e8      	bne.n	802a7bc <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x18>
 802a7ea:	3110      	adds	r1, #16
 802a7ec:	3010      	adds	r0, #16
 802a7ee:	4561      	cmp	r1, ip
 802a7f0:	d1e3      	bne.n	802a7ba <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x16>
 802a7f2:	4628      	mov	r0, r5
 802a7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a7f8:	00000000 	.word	0x00000000

0802a7fc <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
 802a7fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802a800:	f100 0320 	add.w	r3, r0, #32
 802a804:	3030      	adds	r0, #48	; 0x30
 802a806:	ee87 0a80 	vdiv.f32	s0, s15, s0
 802a80a:	ecf3 7a01 	vldmia	r3!, {s15}
 802a80e:	4283      	cmp	r3, r0
 802a810:	ee60 7a27 	vmul.f32	s15, s0, s15
 802a814:	edc3 7a03 	vstr	s15, [r3, #12]
 802a818:	d1f7      	bne.n	802a80a <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
 802a81a:	4770      	bx	lr

0802a81c <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
 802a81c:	b510      	push	{r4, lr}
 802a81e:	ed2d 8b02 	vpush	{d8}
 802a822:	eef0 8a40 	vmov.f32	s17, s0
 802a826:	4604      	mov	r4, r0
 802a828:	f000 f91e 	bl	802aa68 <sinf>
 802a82c:	eeb0 8a40 	vmov.f32	s16, s0
 802a830:	eeb0 0a68 	vmov.f32	s0, s17
 802a834:	f000 f9dc 	bl	802abf0 <cosf>
 802a838:	eeb1 6a48 	vneg.f32	s12, s16
 802a83c:	f104 0310 	add.w	r3, r4, #16
 802a840:	f104 0220 	add.w	r2, r4, #32
 802a844:	edd3 7a04 	vldr	s15, [r3, #16]
 802a848:	edd3 6a00 	vldr	s13, [r3]
 802a84c:	ee26 7a27 	vmul.f32	s14, s12, s15
 802a850:	ee67 7a80 	vmul.f32	s15, s15, s0
 802a854:	eea6 7a80 	vfma.f32	s14, s13, s0
 802a858:	eee6 7a88 	vfma.f32	s15, s13, s16
 802a85c:	eca3 7a01 	vstmia	r3!, {s14}
 802a860:	429a      	cmp	r2, r3
 802a862:	edc3 7a03 	vstr	s15, [r3, #12]
 802a866:	d1ed      	bne.n	802a844 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
 802a868:	4620      	mov	r0, r4
 802a86a:	ecbd 8b02 	vpop	{d8}
 802a86e:	bd10      	pop	{r4, pc}

0802a870 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
 802a870:	b510      	push	{r4, lr}
 802a872:	ed2d 8b02 	vpush	{d8}
 802a876:	eef0 8a40 	vmov.f32	s17, s0
 802a87a:	4604      	mov	r4, r0
 802a87c:	f000 f8f4 	bl	802aa68 <sinf>
 802a880:	eeb0 8a40 	vmov.f32	s16, s0
 802a884:	eeb0 0a68 	vmov.f32	s0, s17
 802a888:	f000 f9b2 	bl	802abf0 <cosf>
 802a88c:	eeb1 6a48 	vneg.f32	s12, s16
 802a890:	4623      	mov	r3, r4
 802a892:	f104 0210 	add.w	r2, r4, #16
 802a896:	edd3 7a08 	vldr	s15, [r3, #32]
 802a89a:	edd3 6a00 	vldr	s13, [r3]
 802a89e:	ee27 7a88 	vmul.f32	s14, s15, s16
 802a8a2:	ee67 7a80 	vmul.f32	s15, s15, s0
 802a8a6:	eea6 7a80 	vfma.f32	s14, s13, s0
 802a8aa:	eee6 7a26 	vfma.f32	s15, s12, s13
 802a8ae:	eca3 7a01 	vstmia	r3!, {s14}
 802a8b2:	429a      	cmp	r2, r3
 802a8b4:	edc3 7a07 	vstr	s15, [r3, #28]
 802a8b8:	d1ed      	bne.n	802a896 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
 802a8ba:	4620      	mov	r0, r4
 802a8bc:	ecbd 8b02 	vpop	{d8}
 802a8c0:	bd10      	pop	{r4, pc}

0802a8c2 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
 802a8c2:	b510      	push	{r4, lr}
 802a8c4:	ed2d 8b02 	vpush	{d8}
 802a8c8:	eef0 8a40 	vmov.f32	s17, s0
 802a8cc:	4604      	mov	r4, r0
 802a8ce:	f000 f8cb 	bl	802aa68 <sinf>
 802a8d2:	eeb0 8a40 	vmov.f32	s16, s0
 802a8d6:	eeb0 0a68 	vmov.f32	s0, s17
 802a8da:	f000 f989 	bl	802abf0 <cosf>
 802a8de:	eeb1 6a48 	vneg.f32	s12, s16
 802a8e2:	4623      	mov	r3, r4
 802a8e4:	f104 0210 	add.w	r2, r4, #16
 802a8e8:	edd3 7a04 	vldr	s15, [r3, #16]
 802a8ec:	edd3 6a00 	vldr	s13, [r3]
 802a8f0:	ee26 7a27 	vmul.f32	s14, s12, s15
 802a8f4:	ee67 7a80 	vmul.f32	s15, s15, s0
 802a8f8:	eea6 7a80 	vfma.f32	s14, s13, s0
 802a8fc:	eee6 7a88 	vfma.f32	s15, s13, s16
 802a900:	eca3 7a01 	vstmia	r3!, {s14}
 802a904:	429a      	cmp	r2, r3
 802a906:	edc3 7a03 	vstr	s15, [r3, #12]
 802a90a:	d1ed      	bne.n	802a8e8 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
 802a90c:	4620      	mov	r0, r4
 802a90e:	ecbd 8b02 	vpop	{d8}
 802a912:	bd10      	pop	{r4, pc}

0802a914 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
 802a914:	4603      	mov	r3, r0
 802a916:	f100 0210 	add.w	r2, r0, #16
 802a91a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 802a91e:	edd3 7a00 	vldr	s15, [r3]
 802a922:	eee7 7a00 	vfma.f32	s15, s14, s0
 802a926:	ece3 7a01 	vstmia	r3!, {s15}
 802a92a:	4293      	cmp	r3, r2
 802a92c:	d1f5      	bne.n	802a91a <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
 802a92e:	4770      	bx	lr

0802a930 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
 802a930:	f100 0310 	add.w	r3, r0, #16
 802a934:	f100 0220 	add.w	r2, r0, #32
 802a938:	ed93 7a08 	vldr	s14, [r3, #32]
 802a93c:	edd3 7a00 	vldr	s15, [r3]
 802a940:	eee7 7a00 	vfma.f32	s15, s14, s0
 802a944:	ece3 7a01 	vstmia	r3!, {s15}
 802a948:	4293      	cmp	r3, r2
 802a94a:	d1f5      	bne.n	802a938 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
 802a94c:	4770      	bx	lr

0802a94e <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
 802a94e:	f100 0320 	add.w	r3, r0, #32
 802a952:	f100 0230 	add.w	r2, r0, #48	; 0x30
 802a956:	ed93 7a04 	vldr	s14, [r3, #16]
 802a95a:	edd3 7a00 	vldr	s15, [r3]
 802a95e:	eee7 7a00 	vfma.f32	s15, s14, s0
 802a962:	ece3 7a01 	vstmia	r3!, {s15}
 802a966:	4293      	cmp	r3, r2
 802a968:	d1f5      	bne.n	802a956 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
 802a96a:	4770      	bx	lr

0802a96c <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
 802a96c:	4603      	mov	r3, r0
 802a96e:	f100 0210 	add.w	r2, r0, #16
 802a972:	edd3 7a00 	vldr	s15, [r3]
 802a976:	ee67 7a80 	vmul.f32	s15, s15, s0
 802a97a:	ece3 7a01 	vstmia	r3!, {s15}
 802a97e:	4293      	cmp	r3, r2
 802a980:	d1f7      	bne.n	802a972 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
 802a982:	4770      	bx	lr

0802a984 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
 802a984:	f100 0310 	add.w	r3, r0, #16
 802a988:	f100 0220 	add.w	r2, r0, #32
 802a98c:	edd3 7a00 	vldr	s15, [r3]
 802a990:	ee67 7a80 	vmul.f32	s15, s15, s0
 802a994:	ece3 7a01 	vstmia	r3!, {s15}
 802a998:	4293      	cmp	r3, r2
 802a99a:	d1f7      	bne.n	802a98c <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
 802a99c:	4770      	bx	lr

0802a99e <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
 802a99e:	f100 0320 	add.w	r3, r0, #32
 802a9a2:	f100 0230 	add.w	r2, r0, #48	; 0x30
 802a9a6:	edd3 7a00 	vldr	s15, [r3]
 802a9aa:	ee67 7a80 	vmul.f32	s15, s15, s0
 802a9ae:	ece3 7a01 	vstmia	r3!, {s15}
 802a9b2:	4293      	cmp	r3, r2
 802a9b4:	d1f7      	bne.n	802a9a6 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
 802a9b6:	4770      	bx	lr

0802a9b8 <__aeabi_atexit>:
 802a9b8:	460b      	mov	r3, r1
 802a9ba:	4601      	mov	r1, r0
 802a9bc:	4618      	mov	r0, r3
 802a9be:	f000 babd 	b.w	802af3c <__cxa_atexit>

0802a9c2 <_ZdlPvj>:
 802a9c2:	f000 b812 	b.w	802a9ea <_ZdlPv>

0802a9c6 <__cxa_guard_acquire>:
 802a9c6:	6803      	ldr	r3, [r0, #0]
 802a9c8:	07db      	lsls	r3, r3, #31
 802a9ca:	d406      	bmi.n	802a9da <__cxa_guard_acquire+0x14>
 802a9cc:	7843      	ldrb	r3, [r0, #1]
 802a9ce:	b103      	cbz	r3, 802a9d2 <__cxa_guard_acquire+0xc>
 802a9d0:	deff      	udf	#255	; 0xff
 802a9d2:	2301      	movs	r3, #1
 802a9d4:	7043      	strb	r3, [r0, #1]
 802a9d6:	4618      	mov	r0, r3
 802a9d8:	4770      	bx	lr
 802a9da:	2000      	movs	r0, #0
 802a9dc:	4770      	bx	lr

0802a9de <__cxa_guard_release>:
 802a9de:	2301      	movs	r3, #1
 802a9e0:	6003      	str	r3, [r0, #0]
 802a9e2:	4770      	bx	lr

0802a9e4 <__cxa_pure_virtual>:
 802a9e4:	b508      	push	{r3, lr}
 802a9e6:	f000 f80f 	bl	802aa08 <_ZSt9terminatev>

0802a9ea <_ZdlPv>:
 802a9ea:	f000 b9f3 	b.w	802add4 <free>

0802a9ee <_ZN10__cxxabiv111__terminateEPFvvE>:
 802a9ee:	b508      	push	{r3, lr}
 802a9f0:	4780      	blx	r0
 802a9f2:	f000 f9bb 	bl	802ad6c <abort>
	...

0802a9f8 <_ZSt13get_terminatev>:
 802a9f8:	4b02      	ldr	r3, [pc, #8]	; (802aa04 <_ZSt13get_terminatev+0xc>)
 802a9fa:	6818      	ldr	r0, [r3, #0]
 802a9fc:	f3bf 8f5b 	dmb	ish
 802aa00:	4770      	bx	lr
 802aa02:	bf00      	nop
 802aa04:	200000ec 	.word	0x200000ec

0802aa08 <_ZSt9terminatev>:
 802aa08:	b508      	push	{r3, lr}
 802aa0a:	f7ff fff5 	bl	802a9f8 <_ZSt13get_terminatev>
 802aa0e:	f7ff ffee 	bl	802a9ee <_ZN10__cxxabiv111__terminateEPFvvE>

0802aa12 <sinf_poly>:
 802aa12:	07cb      	lsls	r3, r1, #31
 802aa14:	d412      	bmi.n	802aa3c <sinf_poly+0x2a>
 802aa16:	ee21 5b00 	vmul.f64	d5, d1, d0
 802aa1a:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 802aa1e:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 802aa22:	eea6 7b01 	vfma.f64	d7, d6, d1
 802aa26:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 802aa2a:	ee21 1b05 	vmul.f64	d1, d1, d5
 802aa2e:	eea6 0b05 	vfma.f64	d0, d6, d5
 802aa32:	eea7 0b01 	vfma.f64	d0, d7, d1
 802aa36:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802aa3a:	4770      	bx	lr
 802aa3c:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 802aa40:	ee21 5b01 	vmul.f64	d5, d1, d1
 802aa44:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 802aa48:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 802aa4c:	eea1 7b06 	vfma.f64	d7, d1, d6
 802aa50:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 802aa54:	eea1 0b06 	vfma.f64	d0, d1, d6
 802aa58:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 802aa5c:	ee21 1b05 	vmul.f64	d1, d1, d5
 802aa60:	eea5 0b06 	vfma.f64	d0, d5, d6
 802aa64:	e7e5      	b.n	802aa32 <sinf_poly+0x20>
	...

0802aa68 <sinf>:
 802aa68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802aa6a:	ee10 4a10 	vmov	r4, s0
 802aa6e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802aa72:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 802aa76:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 802aa7a:	eef0 7a40 	vmov.f32	s15, s0
 802aa7e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 802aa82:	d218      	bcs.n	802aab6 <sinf+0x4e>
 802aa84:	ee26 1b06 	vmul.f64	d1, d6, d6
 802aa88:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 802aa8c:	d20a      	bcs.n	802aaa4 <sinf+0x3c>
 802aa8e:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 802aa92:	d103      	bne.n	802aa9c <sinf+0x34>
 802aa94:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 802aa98:	ed8d 1a01 	vstr	s2, [sp, #4]
 802aa9c:	eeb0 0a67 	vmov.f32	s0, s15
 802aaa0:	b003      	add	sp, #12
 802aaa2:	bd30      	pop	{r4, r5, pc}
 802aaa4:	483a      	ldr	r0, [pc, #232]	; (802ab90 <sinf+0x128>)
 802aaa6:	eeb0 0b46 	vmov.f64	d0, d6
 802aaaa:	2100      	movs	r1, #0
 802aaac:	b003      	add	sp, #12
 802aaae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802aab2:	f7ff bfae 	b.w	802aa12 <sinf_poly>
 802aab6:	f240 422e 	movw	r2, #1070	; 0x42e
 802aaba:	4293      	cmp	r3, r2
 802aabc:	d824      	bhi.n	802ab08 <sinf+0xa0>
 802aabe:	4b34      	ldr	r3, [pc, #208]	; (802ab90 <sinf+0x128>)
 802aac0:	ed93 7b08 	vldr	d7, [r3, #32]
 802aac4:	ee26 7b07 	vmul.f64	d7, d6, d7
 802aac8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 802aacc:	f103 0070 	add.w	r0, r3, #112	; 0x70
 802aad0:	ee17 1a90 	vmov	r1, s15
 802aad4:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 802aad8:	1609      	asrs	r1, r1, #24
 802aada:	ee07 1a90 	vmov	s15, r1
 802aade:	f001 0203 	and.w	r2, r1, #3
 802aae2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802aae6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 802aaea:	ed92 0b00 	vldr	d0, [r2]
 802aaee:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 802aaf2:	f011 0f02 	tst.w	r1, #2
 802aaf6:	eea5 6b47 	vfms.f64	d6, d5, d7
 802aafa:	bf08      	it	eq
 802aafc:	4618      	moveq	r0, r3
 802aafe:	ee26 1b06 	vmul.f64	d1, d6, d6
 802ab02:	ee20 0b06 	vmul.f64	d0, d0, d6
 802ab06:	e7d1      	b.n	802aaac <sinf+0x44>
 802ab08:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 802ab0c:	d237      	bcs.n	802ab7e <sinf+0x116>
 802ab0e:	4a21      	ldr	r2, [pc, #132]	; (802ab94 <sinf+0x12c>)
 802ab10:	f3c4 6183 	ubfx	r1, r4, #26, #4
 802ab14:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 802ab18:	f3c4 0316 	ubfx	r3, r4, #0, #23
 802ab1c:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 802ab20:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 802ab24:	6a2a      	ldr	r2, [r5, #32]
 802ab26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 802ab2a:	4083      	lsls	r3, r0
 802ab2c:	fba3 2002 	umull	r2, r0, r3, r2
 802ab30:	692a      	ldr	r2, [r5, #16]
 802ab32:	4359      	muls	r1, r3
 802ab34:	fbe3 0102 	umlal	r0, r1, r3, r2
 802ab38:	f101 5300 	add.w	r3, r1, #536870912	; 0x20000000
 802ab3c:	0f9d      	lsrs	r5, r3, #30
 802ab3e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 802ab42:	1ac9      	subs	r1, r1, r3
 802ab44:	f7d5 fd5a 	bl	80005fc <__aeabi_l2d>
 802ab48:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802ab4c:	4b10      	ldr	r3, [pc, #64]	; (802ab90 <sinf+0x128>)
 802ab4e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 802ab88 <sinf+0x120>
 802ab52:	ec41 0b17 	vmov	d7, r0, r1
 802ab56:	f004 0203 	and.w	r2, r4, #3
 802ab5a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802ab5e:	ee27 0b00 	vmul.f64	d0, d7, d0
 802ab62:	ed92 7b00 	vldr	d7, [r2]
 802ab66:	ee20 1b00 	vmul.f64	d1, d0, d0
 802ab6a:	f014 0f02 	tst.w	r4, #2
 802ab6e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 802ab72:	4629      	mov	r1, r5
 802ab74:	bf08      	it	eq
 802ab76:	4618      	moveq	r0, r3
 802ab78:	ee27 0b00 	vmul.f64	d0, d7, d0
 802ab7c:	e796      	b.n	802aaac <sinf+0x44>
 802ab7e:	b003      	add	sp, #12
 802ab80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802ab84:	f000 b8e3 	b.w	802ad4e <__math_invalidf>
 802ab88:	54442d18 	.word	0x54442d18
 802ab8c:	3c1921fb 	.word	0x3c1921fb
 802ab90:	08031448 	.word	0x08031448
 802ab94:	080313e8 	.word	0x080313e8

0802ab98 <sinf_poly>:
 802ab98:	07cb      	lsls	r3, r1, #31
 802ab9a:	d412      	bmi.n	802abc2 <sinf_poly+0x2a>
 802ab9c:	ee21 5b00 	vmul.f64	d5, d1, d0
 802aba0:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 802aba4:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 802aba8:	eea6 7b01 	vfma.f64	d7, d6, d1
 802abac:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 802abb0:	ee21 1b05 	vmul.f64	d1, d1, d5
 802abb4:	eea6 0b05 	vfma.f64	d0, d6, d5
 802abb8:	eea7 0b01 	vfma.f64	d0, d7, d1
 802abbc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802abc0:	4770      	bx	lr
 802abc2:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 802abc6:	ee21 5b01 	vmul.f64	d5, d1, d1
 802abca:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 802abce:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 802abd2:	eea1 7b06 	vfma.f64	d7, d1, d6
 802abd6:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 802abda:	eea1 0b06 	vfma.f64	d0, d1, d6
 802abde:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 802abe2:	ee21 1b05 	vmul.f64	d1, d1, d5
 802abe6:	eea5 0b06 	vfma.f64	d0, d5, d6
 802abea:	e7e5      	b.n	802abb8 <sinf_poly+0x20>
 802abec:	0000      	movs	r0, r0
	...

0802abf0 <cosf>:
 802abf0:	b538      	push	{r3, r4, r5, lr}
 802abf2:	ee10 4a10 	vmov	r4, s0
 802abf6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802abfa:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 802abfe:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 802ac02:	d21f      	bcs.n	802ac44 <cosf+0x54>
 802ac04:	ee27 7b07 	vmul.f64	d7, d7, d7
 802ac08:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 802ac0c:	f0c0 8086 	bcc.w	802ad1c <cosf+0x12c>
 802ac10:	ee27 4b07 	vmul.f64	d4, d7, d7
 802ac14:	4b46      	ldr	r3, [pc, #280]	; (802ad30 <cosf+0x140>)
 802ac16:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 802ac1a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 802ac1e:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
 802ac22:	eea7 6b05 	vfma.f64	d6, d7, d5
 802ac26:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 802ac2a:	eea7 0b05 	vfma.f64	d0, d7, d5
 802ac2e:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 802ac32:	ee27 7b04 	vmul.f64	d7, d7, d4
 802ac36:	eea4 0b05 	vfma.f64	d0, d4, d5
 802ac3a:	eea6 0b07 	vfma.f64	d0, d6, d7
 802ac3e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802ac42:	bd38      	pop	{r3, r4, r5, pc}
 802ac44:	f240 422e 	movw	r2, #1070	; 0x42e
 802ac48:	4293      	cmp	r3, r2
 802ac4a:	d829      	bhi.n	802aca0 <cosf+0xb0>
 802ac4c:	4b38      	ldr	r3, [pc, #224]	; (802ad30 <cosf+0x140>)
 802ac4e:	ed93 6b08 	vldr	d6, [r3, #32]
 802ac52:	ee27 6b06 	vmul.f64	d6, d7, d6
 802ac56:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 802ac5a:	f103 0070 	add.w	r0, r3, #112	; 0x70
 802ac5e:	ee16 1a90 	vmov	r1, s13
 802ac62:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 802ac66:	1609      	asrs	r1, r1, #24
 802ac68:	ee06 1a90 	vmov	s13, r1
 802ac6c:	f001 0203 	and.w	r2, r1, #3
 802ac70:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802ac74:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 802ac78:	ed92 0b00 	vldr	d0, [r2]
 802ac7c:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 802ac80:	f011 0f02 	tst.w	r1, #2
 802ac84:	bf08      	it	eq
 802ac86:	4618      	moveq	r0, r3
 802ac88:	f081 0101 	eor.w	r1, r1, #1
 802ac8c:	eea5 7b46 	vfms.f64	d7, d5, d6
 802ac90:	ee27 1b07 	vmul.f64	d1, d7, d7
 802ac94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802ac98:	ee27 0b00 	vmul.f64	d0, d7, d0
 802ac9c:	f7ff bf7c 	b.w	802ab98 <sinf_poly>
 802aca0:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 802aca4:	d236      	bcs.n	802ad14 <cosf+0x124>
 802aca6:	4a23      	ldr	r2, [pc, #140]	; (802ad34 <cosf+0x144>)
 802aca8:	f3c4 6183 	ubfx	r1, r4, #26, #4
 802acac:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 802acb0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 802acb4:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 802acb8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 802acbc:	6a2a      	ldr	r2, [r5, #32]
 802acbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 802acc2:	4083      	lsls	r3, r0
 802acc4:	fba3 2002 	umull	r2, r0, r3, r2
 802acc8:	692a      	ldr	r2, [r5, #16]
 802acca:	4359      	muls	r1, r3
 802accc:	fbe3 0102 	umlal	r0, r1, r3, r2
 802acd0:	f101 5300 	add.w	r3, r1, #536870912	; 0x20000000
 802acd4:	0f9d      	lsrs	r5, r3, #30
 802acd6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 802acda:	1ac9      	subs	r1, r1, r3
 802acdc:	f7d5 fc8e 	bl	80005fc <__aeabi_l2d>
 802ace0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802ace4:	4b12      	ldr	r3, [pc, #72]	; (802ad30 <cosf+0x140>)
 802ace6:	ed9f 0b10 	vldr	d0, [pc, #64]	; 802ad28 <cosf+0x138>
 802acea:	ec41 0b17 	vmov	d7, r0, r1
 802acee:	f004 0203 	and.w	r2, r4, #3
 802acf2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802acf6:	f014 0f02 	tst.w	r4, #2
 802acfa:	ee27 0b00 	vmul.f64	d0, d7, d0
 802acfe:	f103 0070 	add.w	r0, r3, #112	; 0x70
 802ad02:	ed92 7b00 	vldr	d7, [r2]
 802ad06:	ee20 1b00 	vmul.f64	d1, d0, d0
 802ad0a:	f085 0101 	eor.w	r1, r5, #1
 802ad0e:	bf08      	it	eq
 802ad10:	4618      	moveq	r0, r3
 802ad12:	e7bf      	b.n	802ac94 <cosf+0xa4>
 802ad14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802ad18:	f000 b819 	b.w	802ad4e <__math_invalidf>
 802ad1c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802ad20:	e78f      	b.n	802ac42 <cosf+0x52>
 802ad22:	bf00      	nop
 802ad24:	f3af 8000 	nop.w
 802ad28:	54442d18 	.word	0x54442d18
 802ad2c:	3c1921fb 	.word	0x3c1921fb
 802ad30:	08031448 	.word	0x08031448
 802ad34:	080313e8 	.word	0x080313e8

0802ad38 <with_errnof>:
 802ad38:	b513      	push	{r0, r1, r4, lr}
 802ad3a:	4604      	mov	r4, r0
 802ad3c:	ed8d 0a01 	vstr	s0, [sp, #4]
 802ad40:	f000 fbc2 	bl	802b4c8 <__errno>
 802ad44:	ed9d 0a01 	vldr	s0, [sp, #4]
 802ad48:	6004      	str	r4, [r0, #0]
 802ad4a:	b002      	add	sp, #8
 802ad4c:	bd10      	pop	{r4, pc}

0802ad4e <__math_invalidf>:
 802ad4e:	eef0 7a40 	vmov.f32	s15, s0
 802ad52:	ee30 7a40 	vsub.f32	s14, s0, s0
 802ad56:	eef4 7a67 	vcmp.f32	s15, s15
 802ad5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ad5e:	ee87 0a07 	vdiv.f32	s0, s14, s14
 802ad62:	d602      	bvs.n	802ad6a <__math_invalidf+0x1c>
 802ad64:	2021      	movs	r0, #33	; 0x21
 802ad66:	f7ff bfe7 	b.w	802ad38 <with_errnof>
 802ad6a:	4770      	bx	lr

0802ad6c <abort>:
 802ad6c:	b508      	push	{r3, lr}
 802ad6e:	2006      	movs	r0, #6
 802ad70:	f000 fae2 	bl	802b338 <raise>
 802ad74:	2001      	movs	r0, #1
 802ad76:	f7d9 fd01 	bl	800477c <_exit>
	...

0802ad7c <__assert_func>:
 802ad7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802ad7e:	4614      	mov	r4, r2
 802ad80:	461a      	mov	r2, r3
 802ad82:	4b09      	ldr	r3, [pc, #36]	; (802ada8 <__assert_func+0x2c>)
 802ad84:	681b      	ldr	r3, [r3, #0]
 802ad86:	4605      	mov	r5, r0
 802ad88:	68d8      	ldr	r0, [r3, #12]
 802ad8a:	b14c      	cbz	r4, 802ada0 <__assert_func+0x24>
 802ad8c:	4b07      	ldr	r3, [pc, #28]	; (802adac <__assert_func+0x30>)
 802ad8e:	9100      	str	r1, [sp, #0]
 802ad90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802ad94:	4906      	ldr	r1, [pc, #24]	; (802adb0 <__assert_func+0x34>)
 802ad96:	462b      	mov	r3, r5
 802ad98:	f000 f970 	bl	802b07c <fiprintf>
 802ad9c:	f7ff ffe6 	bl	802ad6c <abort>
 802ada0:	4b04      	ldr	r3, [pc, #16]	; (802adb4 <__assert_func+0x38>)
 802ada2:	461c      	mov	r4, r3
 802ada4:	e7f3      	b.n	802ad8e <__assert_func+0x12>
 802ada6:	bf00      	nop
 802ada8:	20000148 	.word	0x20000148
 802adac:	08031528 	.word	0x08031528
 802adb0:	08031535 	.word	0x08031535
 802adb4:	08031563 	.word	0x08031563

0802adb8 <atexit>:
 802adb8:	2300      	movs	r3, #0
 802adba:	4601      	mov	r1, r0
 802adbc:	461a      	mov	r2, r3
 802adbe:	4618      	mov	r0, r3
 802adc0:	f000 bbbc 	b.w	802b53c <__register_exitproc>

0802adc4 <malloc>:
 802adc4:	4b02      	ldr	r3, [pc, #8]	; (802add0 <malloc+0xc>)
 802adc6:	4601      	mov	r1, r0
 802adc8:	6818      	ldr	r0, [r3, #0]
 802adca:	f000 b82b 	b.w	802ae24 <_malloc_r>
 802adce:	bf00      	nop
 802add0:	20000148 	.word	0x20000148

0802add4 <free>:
 802add4:	4b02      	ldr	r3, [pc, #8]	; (802ade0 <free+0xc>)
 802add6:	4601      	mov	r1, r0
 802add8:	6818      	ldr	r0, [r3, #0]
 802adda:	f000 bc0d 	b.w	802b5f8 <_free_r>
 802adde:	bf00      	nop
 802ade0:	20000148 	.word	0x20000148

0802ade4 <sbrk_aligned>:
 802ade4:	b570      	push	{r4, r5, r6, lr}
 802ade6:	4e0e      	ldr	r6, [pc, #56]	; (802ae20 <sbrk_aligned+0x3c>)
 802ade8:	460c      	mov	r4, r1
 802adea:	6831      	ldr	r1, [r6, #0]
 802adec:	4605      	mov	r5, r0
 802adee:	b911      	cbnz	r1, 802adf6 <sbrk_aligned+0x12>
 802adf0:	f000 fb48 	bl	802b484 <_sbrk_r>
 802adf4:	6030      	str	r0, [r6, #0]
 802adf6:	4621      	mov	r1, r4
 802adf8:	4628      	mov	r0, r5
 802adfa:	f000 fb43 	bl	802b484 <_sbrk_r>
 802adfe:	1c43      	adds	r3, r0, #1
 802ae00:	d00a      	beq.n	802ae18 <sbrk_aligned+0x34>
 802ae02:	1cc4      	adds	r4, r0, #3
 802ae04:	f024 0403 	bic.w	r4, r4, #3
 802ae08:	42a0      	cmp	r0, r4
 802ae0a:	d007      	beq.n	802ae1c <sbrk_aligned+0x38>
 802ae0c:	1a21      	subs	r1, r4, r0
 802ae0e:	4628      	mov	r0, r5
 802ae10:	f000 fb38 	bl	802b484 <_sbrk_r>
 802ae14:	3001      	adds	r0, #1
 802ae16:	d101      	bne.n	802ae1c <sbrk_aligned+0x38>
 802ae18:	f04f 34ff 	mov.w	r4, #4294967295
 802ae1c:	4620      	mov	r0, r4
 802ae1e:	bd70      	pop	{r4, r5, r6, pc}
 802ae20:	20028600 	.word	0x20028600

0802ae24 <_malloc_r>:
 802ae24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ae28:	1ccd      	adds	r5, r1, #3
 802ae2a:	f025 0503 	bic.w	r5, r5, #3
 802ae2e:	3508      	adds	r5, #8
 802ae30:	2d0c      	cmp	r5, #12
 802ae32:	bf38      	it	cc
 802ae34:	250c      	movcc	r5, #12
 802ae36:	2d00      	cmp	r5, #0
 802ae38:	4607      	mov	r7, r0
 802ae3a:	db01      	blt.n	802ae40 <_malloc_r+0x1c>
 802ae3c:	42a9      	cmp	r1, r5
 802ae3e:	d905      	bls.n	802ae4c <_malloc_r+0x28>
 802ae40:	230c      	movs	r3, #12
 802ae42:	603b      	str	r3, [r7, #0]
 802ae44:	2600      	movs	r6, #0
 802ae46:	4630      	mov	r0, r6
 802ae48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ae4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 802af20 <_malloc_r+0xfc>
 802ae50:	f000 f868 	bl	802af24 <__malloc_lock>
 802ae54:	f8d8 3000 	ldr.w	r3, [r8]
 802ae58:	461c      	mov	r4, r3
 802ae5a:	bb5c      	cbnz	r4, 802aeb4 <_malloc_r+0x90>
 802ae5c:	4629      	mov	r1, r5
 802ae5e:	4638      	mov	r0, r7
 802ae60:	f7ff ffc0 	bl	802ade4 <sbrk_aligned>
 802ae64:	1c43      	adds	r3, r0, #1
 802ae66:	4604      	mov	r4, r0
 802ae68:	d155      	bne.n	802af16 <_malloc_r+0xf2>
 802ae6a:	f8d8 4000 	ldr.w	r4, [r8]
 802ae6e:	4626      	mov	r6, r4
 802ae70:	2e00      	cmp	r6, #0
 802ae72:	d145      	bne.n	802af00 <_malloc_r+0xdc>
 802ae74:	2c00      	cmp	r4, #0
 802ae76:	d048      	beq.n	802af0a <_malloc_r+0xe6>
 802ae78:	6823      	ldr	r3, [r4, #0]
 802ae7a:	4631      	mov	r1, r6
 802ae7c:	4638      	mov	r0, r7
 802ae7e:	eb04 0903 	add.w	r9, r4, r3
 802ae82:	f000 faff 	bl	802b484 <_sbrk_r>
 802ae86:	4581      	cmp	r9, r0
 802ae88:	d13f      	bne.n	802af0a <_malloc_r+0xe6>
 802ae8a:	6821      	ldr	r1, [r4, #0]
 802ae8c:	1a6d      	subs	r5, r5, r1
 802ae8e:	4629      	mov	r1, r5
 802ae90:	4638      	mov	r0, r7
 802ae92:	f7ff ffa7 	bl	802ade4 <sbrk_aligned>
 802ae96:	3001      	adds	r0, #1
 802ae98:	d037      	beq.n	802af0a <_malloc_r+0xe6>
 802ae9a:	6823      	ldr	r3, [r4, #0]
 802ae9c:	442b      	add	r3, r5
 802ae9e:	6023      	str	r3, [r4, #0]
 802aea0:	f8d8 3000 	ldr.w	r3, [r8]
 802aea4:	2b00      	cmp	r3, #0
 802aea6:	d038      	beq.n	802af1a <_malloc_r+0xf6>
 802aea8:	685a      	ldr	r2, [r3, #4]
 802aeaa:	42a2      	cmp	r2, r4
 802aeac:	d12b      	bne.n	802af06 <_malloc_r+0xe2>
 802aeae:	2200      	movs	r2, #0
 802aeb0:	605a      	str	r2, [r3, #4]
 802aeb2:	e00f      	b.n	802aed4 <_malloc_r+0xb0>
 802aeb4:	6822      	ldr	r2, [r4, #0]
 802aeb6:	1b52      	subs	r2, r2, r5
 802aeb8:	d41f      	bmi.n	802aefa <_malloc_r+0xd6>
 802aeba:	2a0b      	cmp	r2, #11
 802aebc:	d917      	bls.n	802aeee <_malloc_r+0xca>
 802aebe:	1961      	adds	r1, r4, r5
 802aec0:	42a3      	cmp	r3, r4
 802aec2:	6025      	str	r5, [r4, #0]
 802aec4:	bf18      	it	ne
 802aec6:	6059      	strne	r1, [r3, #4]
 802aec8:	6863      	ldr	r3, [r4, #4]
 802aeca:	bf08      	it	eq
 802aecc:	f8c8 1000 	streq.w	r1, [r8]
 802aed0:	5162      	str	r2, [r4, r5]
 802aed2:	604b      	str	r3, [r1, #4]
 802aed4:	4638      	mov	r0, r7
 802aed6:	f104 060b 	add.w	r6, r4, #11
 802aeda:	f000 f829 	bl	802af30 <__malloc_unlock>
 802aede:	f026 0607 	bic.w	r6, r6, #7
 802aee2:	1d23      	adds	r3, r4, #4
 802aee4:	1af2      	subs	r2, r6, r3
 802aee6:	d0ae      	beq.n	802ae46 <_malloc_r+0x22>
 802aee8:	1b9b      	subs	r3, r3, r6
 802aeea:	50a3      	str	r3, [r4, r2]
 802aeec:	e7ab      	b.n	802ae46 <_malloc_r+0x22>
 802aeee:	42a3      	cmp	r3, r4
 802aef0:	6862      	ldr	r2, [r4, #4]
 802aef2:	d1dd      	bne.n	802aeb0 <_malloc_r+0x8c>
 802aef4:	f8c8 2000 	str.w	r2, [r8]
 802aef8:	e7ec      	b.n	802aed4 <_malloc_r+0xb0>
 802aefa:	4623      	mov	r3, r4
 802aefc:	6864      	ldr	r4, [r4, #4]
 802aefe:	e7ac      	b.n	802ae5a <_malloc_r+0x36>
 802af00:	4634      	mov	r4, r6
 802af02:	6876      	ldr	r6, [r6, #4]
 802af04:	e7b4      	b.n	802ae70 <_malloc_r+0x4c>
 802af06:	4613      	mov	r3, r2
 802af08:	e7cc      	b.n	802aea4 <_malloc_r+0x80>
 802af0a:	230c      	movs	r3, #12
 802af0c:	603b      	str	r3, [r7, #0]
 802af0e:	4638      	mov	r0, r7
 802af10:	f000 f80e 	bl	802af30 <__malloc_unlock>
 802af14:	e797      	b.n	802ae46 <_malloc_r+0x22>
 802af16:	6025      	str	r5, [r4, #0]
 802af18:	e7dc      	b.n	802aed4 <_malloc_r+0xb0>
 802af1a:	605b      	str	r3, [r3, #4]
 802af1c:	deff      	udf	#255	; 0xff
 802af1e:	bf00      	nop
 802af20:	200285fc 	.word	0x200285fc

0802af24 <__malloc_lock>:
 802af24:	4801      	ldr	r0, [pc, #4]	; (802af2c <__malloc_lock+0x8>)
 802af26:	f000 baf9 	b.w	802b51c <__retarget_lock_acquire_recursive>
 802af2a:	bf00      	nop
 802af2c:	20028745 	.word	0x20028745

0802af30 <__malloc_unlock>:
 802af30:	4801      	ldr	r0, [pc, #4]	; (802af38 <__malloc_unlock+0x8>)
 802af32:	f000 baf4 	b.w	802b51e <__retarget_lock_release_recursive>
 802af36:	bf00      	nop
 802af38:	20028745 	.word	0x20028745

0802af3c <__cxa_atexit>:
 802af3c:	b510      	push	{r4, lr}
 802af3e:	4c05      	ldr	r4, [pc, #20]	; (802af54 <__cxa_atexit+0x18>)
 802af40:	4613      	mov	r3, r2
 802af42:	b12c      	cbz	r4, 802af50 <__cxa_atexit+0x14>
 802af44:	460a      	mov	r2, r1
 802af46:	4601      	mov	r1, r0
 802af48:	2002      	movs	r0, #2
 802af4a:	f000 faf7 	bl	802b53c <__register_exitproc>
 802af4e:	bd10      	pop	{r4, pc}
 802af50:	4620      	mov	r0, r4
 802af52:	e7fc      	b.n	802af4e <__cxa_atexit+0x12>
 802af54:	0802b53d 	.word	0x0802b53d

0802af58 <std>:
 802af58:	2300      	movs	r3, #0
 802af5a:	b510      	push	{r4, lr}
 802af5c:	4604      	mov	r4, r0
 802af5e:	e9c0 3300 	strd	r3, r3, [r0]
 802af62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802af66:	6083      	str	r3, [r0, #8]
 802af68:	8181      	strh	r1, [r0, #12]
 802af6a:	6643      	str	r3, [r0, #100]	; 0x64
 802af6c:	81c2      	strh	r2, [r0, #14]
 802af6e:	6183      	str	r3, [r0, #24]
 802af70:	4619      	mov	r1, r3
 802af72:	2208      	movs	r2, #8
 802af74:	305c      	adds	r0, #92	; 0x5c
 802af76:	f000 f989 	bl	802b28c <memset>
 802af7a:	4b05      	ldr	r3, [pc, #20]	; (802af90 <std+0x38>)
 802af7c:	6263      	str	r3, [r4, #36]	; 0x24
 802af7e:	4b05      	ldr	r3, [pc, #20]	; (802af94 <std+0x3c>)
 802af80:	62a3      	str	r3, [r4, #40]	; 0x28
 802af82:	4b05      	ldr	r3, [pc, #20]	; (802af98 <std+0x40>)
 802af84:	62e3      	str	r3, [r4, #44]	; 0x2c
 802af86:	4b05      	ldr	r3, [pc, #20]	; (802af9c <std+0x44>)
 802af88:	6224      	str	r4, [r4, #32]
 802af8a:	6323      	str	r3, [r4, #48]	; 0x30
 802af8c:	bd10      	pop	{r4, pc}
 802af8e:	bf00      	nop
 802af90:	0802b0dd 	.word	0x0802b0dd
 802af94:	0802b0ff 	.word	0x0802b0ff
 802af98:	0802b137 	.word	0x0802b137
 802af9c:	0802b15b 	.word	0x0802b15b

0802afa0 <stdio_exit_handler>:
 802afa0:	4a02      	ldr	r2, [pc, #8]	; (802afac <stdio_exit_handler+0xc>)
 802afa2:	4903      	ldr	r1, [pc, #12]	; (802afb0 <stdio_exit_handler+0x10>)
 802afa4:	4803      	ldr	r0, [pc, #12]	; (802afb4 <stdio_exit_handler+0x14>)
 802afa6:	f000 b87b 	b.w	802b0a0 <_fwalk_sglue>
 802afaa:	bf00      	nop
 802afac:	200000f0 	.word	0x200000f0
 802afb0:	0802bd45 	.word	0x0802bd45
 802afb4:	200000fc 	.word	0x200000fc

0802afb8 <cleanup_stdio>:
 802afb8:	6841      	ldr	r1, [r0, #4]
 802afba:	4b0c      	ldr	r3, [pc, #48]	; (802afec <cleanup_stdio+0x34>)
 802afbc:	4299      	cmp	r1, r3
 802afbe:	b510      	push	{r4, lr}
 802afc0:	4604      	mov	r4, r0
 802afc2:	d001      	beq.n	802afc8 <cleanup_stdio+0x10>
 802afc4:	f000 febe 	bl	802bd44 <_fflush_r>
 802afc8:	68a1      	ldr	r1, [r4, #8]
 802afca:	4b09      	ldr	r3, [pc, #36]	; (802aff0 <cleanup_stdio+0x38>)
 802afcc:	4299      	cmp	r1, r3
 802afce:	d002      	beq.n	802afd6 <cleanup_stdio+0x1e>
 802afd0:	4620      	mov	r0, r4
 802afd2:	f000 feb7 	bl	802bd44 <_fflush_r>
 802afd6:	68e1      	ldr	r1, [r4, #12]
 802afd8:	4b06      	ldr	r3, [pc, #24]	; (802aff4 <cleanup_stdio+0x3c>)
 802afda:	4299      	cmp	r1, r3
 802afdc:	d004      	beq.n	802afe8 <cleanup_stdio+0x30>
 802afde:	4620      	mov	r0, r4
 802afe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802afe4:	f000 beae 	b.w	802bd44 <_fflush_r>
 802afe8:	bd10      	pop	{r4, pc}
 802afea:	bf00      	nop
 802afec:	20028604 	.word	0x20028604
 802aff0:	2002866c 	.word	0x2002866c
 802aff4:	200286d4 	.word	0x200286d4

0802aff8 <global_stdio_init.part.0>:
 802aff8:	b510      	push	{r4, lr}
 802affa:	4b0b      	ldr	r3, [pc, #44]	; (802b028 <global_stdio_init.part.0+0x30>)
 802affc:	4c0b      	ldr	r4, [pc, #44]	; (802b02c <global_stdio_init.part.0+0x34>)
 802affe:	4a0c      	ldr	r2, [pc, #48]	; (802b030 <global_stdio_init.part.0+0x38>)
 802b000:	601a      	str	r2, [r3, #0]
 802b002:	4620      	mov	r0, r4
 802b004:	2200      	movs	r2, #0
 802b006:	2104      	movs	r1, #4
 802b008:	f7ff ffa6 	bl	802af58 <std>
 802b00c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 802b010:	2201      	movs	r2, #1
 802b012:	2109      	movs	r1, #9
 802b014:	f7ff ffa0 	bl	802af58 <std>
 802b018:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 802b01c:	2202      	movs	r2, #2
 802b01e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b022:	2112      	movs	r1, #18
 802b024:	f7ff bf98 	b.w	802af58 <std>
 802b028:	2002873c 	.word	0x2002873c
 802b02c:	20028604 	.word	0x20028604
 802b030:	0802afa1 	.word	0x0802afa1

0802b034 <__sfp_lock_acquire>:
 802b034:	4801      	ldr	r0, [pc, #4]	; (802b03c <__sfp_lock_acquire+0x8>)
 802b036:	f000 ba71 	b.w	802b51c <__retarget_lock_acquire_recursive>
 802b03a:	bf00      	nop
 802b03c:	20028746 	.word	0x20028746

0802b040 <__sfp_lock_release>:
 802b040:	4801      	ldr	r0, [pc, #4]	; (802b048 <__sfp_lock_release+0x8>)
 802b042:	f000 ba6c 	b.w	802b51e <__retarget_lock_release_recursive>
 802b046:	bf00      	nop
 802b048:	20028746 	.word	0x20028746

0802b04c <__sinit>:
 802b04c:	b510      	push	{r4, lr}
 802b04e:	4604      	mov	r4, r0
 802b050:	f7ff fff0 	bl	802b034 <__sfp_lock_acquire>
 802b054:	6a23      	ldr	r3, [r4, #32]
 802b056:	b11b      	cbz	r3, 802b060 <__sinit+0x14>
 802b058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b05c:	f7ff bff0 	b.w	802b040 <__sfp_lock_release>
 802b060:	4b04      	ldr	r3, [pc, #16]	; (802b074 <__sinit+0x28>)
 802b062:	6223      	str	r3, [r4, #32]
 802b064:	4b04      	ldr	r3, [pc, #16]	; (802b078 <__sinit+0x2c>)
 802b066:	681b      	ldr	r3, [r3, #0]
 802b068:	2b00      	cmp	r3, #0
 802b06a:	d1f5      	bne.n	802b058 <__sinit+0xc>
 802b06c:	f7ff ffc4 	bl	802aff8 <global_stdio_init.part.0>
 802b070:	e7f2      	b.n	802b058 <__sinit+0xc>
 802b072:	bf00      	nop
 802b074:	0802afb9 	.word	0x0802afb9
 802b078:	2002873c 	.word	0x2002873c

0802b07c <fiprintf>:
 802b07c:	b40e      	push	{r1, r2, r3}
 802b07e:	b503      	push	{r0, r1, lr}
 802b080:	4601      	mov	r1, r0
 802b082:	ab03      	add	r3, sp, #12
 802b084:	4805      	ldr	r0, [pc, #20]	; (802b09c <fiprintf+0x20>)
 802b086:	f853 2b04 	ldr.w	r2, [r3], #4
 802b08a:	6800      	ldr	r0, [r0, #0]
 802b08c:	9301      	str	r3, [sp, #4]
 802b08e:	f000 fb29 	bl	802b6e4 <_vfiprintf_r>
 802b092:	b002      	add	sp, #8
 802b094:	f85d eb04 	ldr.w	lr, [sp], #4
 802b098:	b003      	add	sp, #12
 802b09a:	4770      	bx	lr
 802b09c:	20000148 	.word	0x20000148

0802b0a0 <_fwalk_sglue>:
 802b0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b0a4:	4607      	mov	r7, r0
 802b0a6:	4688      	mov	r8, r1
 802b0a8:	4614      	mov	r4, r2
 802b0aa:	2600      	movs	r6, #0
 802b0ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802b0b0:	f1b9 0901 	subs.w	r9, r9, #1
 802b0b4:	d505      	bpl.n	802b0c2 <_fwalk_sglue+0x22>
 802b0b6:	6824      	ldr	r4, [r4, #0]
 802b0b8:	2c00      	cmp	r4, #0
 802b0ba:	d1f7      	bne.n	802b0ac <_fwalk_sglue+0xc>
 802b0bc:	4630      	mov	r0, r6
 802b0be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b0c2:	89ab      	ldrh	r3, [r5, #12]
 802b0c4:	2b01      	cmp	r3, #1
 802b0c6:	d907      	bls.n	802b0d8 <_fwalk_sglue+0x38>
 802b0c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b0cc:	3301      	adds	r3, #1
 802b0ce:	d003      	beq.n	802b0d8 <_fwalk_sglue+0x38>
 802b0d0:	4629      	mov	r1, r5
 802b0d2:	4638      	mov	r0, r7
 802b0d4:	47c0      	blx	r8
 802b0d6:	4306      	orrs	r6, r0
 802b0d8:	3568      	adds	r5, #104	; 0x68
 802b0da:	e7e9      	b.n	802b0b0 <_fwalk_sglue+0x10>

0802b0dc <__sread>:
 802b0dc:	b510      	push	{r4, lr}
 802b0de:	460c      	mov	r4, r1
 802b0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b0e4:	f000 f9a8 	bl	802b438 <_read_r>
 802b0e8:	2800      	cmp	r0, #0
 802b0ea:	bfab      	itete	ge
 802b0ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802b0ee:	89a3      	ldrhlt	r3, [r4, #12]
 802b0f0:	181b      	addge	r3, r3, r0
 802b0f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802b0f6:	bfac      	ite	ge
 802b0f8:	6563      	strge	r3, [r4, #84]	; 0x54
 802b0fa:	81a3      	strhlt	r3, [r4, #12]
 802b0fc:	bd10      	pop	{r4, pc}

0802b0fe <__swrite>:
 802b0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b102:	461f      	mov	r7, r3
 802b104:	898b      	ldrh	r3, [r1, #12]
 802b106:	05db      	lsls	r3, r3, #23
 802b108:	4605      	mov	r5, r0
 802b10a:	460c      	mov	r4, r1
 802b10c:	4616      	mov	r6, r2
 802b10e:	d505      	bpl.n	802b11c <__swrite+0x1e>
 802b110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b114:	2302      	movs	r3, #2
 802b116:	2200      	movs	r2, #0
 802b118:	f000 f97c 	bl	802b414 <_lseek_r>
 802b11c:	89a3      	ldrh	r3, [r4, #12]
 802b11e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802b126:	81a3      	strh	r3, [r4, #12]
 802b128:	4632      	mov	r2, r6
 802b12a:	463b      	mov	r3, r7
 802b12c:	4628      	mov	r0, r5
 802b12e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b132:	f000 b9b7 	b.w	802b4a4 <_write_r>

0802b136 <__sseek>:
 802b136:	b510      	push	{r4, lr}
 802b138:	460c      	mov	r4, r1
 802b13a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b13e:	f000 f969 	bl	802b414 <_lseek_r>
 802b142:	1c43      	adds	r3, r0, #1
 802b144:	89a3      	ldrh	r3, [r4, #12]
 802b146:	bf15      	itete	ne
 802b148:	6560      	strne	r0, [r4, #84]	; 0x54
 802b14a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802b14e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802b152:	81a3      	strheq	r3, [r4, #12]
 802b154:	bf18      	it	ne
 802b156:	81a3      	strhne	r3, [r4, #12]
 802b158:	bd10      	pop	{r4, pc}

0802b15a <__sclose>:
 802b15a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b15e:	f000 b8f3 	b.w	802b348 <_close_r>

0802b162 <__swbuf_r>:
 802b162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b164:	460e      	mov	r6, r1
 802b166:	4614      	mov	r4, r2
 802b168:	4605      	mov	r5, r0
 802b16a:	b118      	cbz	r0, 802b174 <__swbuf_r+0x12>
 802b16c:	6a03      	ldr	r3, [r0, #32]
 802b16e:	b90b      	cbnz	r3, 802b174 <__swbuf_r+0x12>
 802b170:	f7ff ff6c 	bl	802b04c <__sinit>
 802b174:	69a3      	ldr	r3, [r4, #24]
 802b176:	60a3      	str	r3, [r4, #8]
 802b178:	89a3      	ldrh	r3, [r4, #12]
 802b17a:	071a      	lsls	r2, r3, #28
 802b17c:	d525      	bpl.n	802b1ca <__swbuf_r+0x68>
 802b17e:	6923      	ldr	r3, [r4, #16]
 802b180:	b31b      	cbz	r3, 802b1ca <__swbuf_r+0x68>
 802b182:	6823      	ldr	r3, [r4, #0]
 802b184:	6922      	ldr	r2, [r4, #16]
 802b186:	1a98      	subs	r0, r3, r2
 802b188:	6963      	ldr	r3, [r4, #20]
 802b18a:	b2f6      	uxtb	r6, r6
 802b18c:	4283      	cmp	r3, r0
 802b18e:	4637      	mov	r7, r6
 802b190:	dc04      	bgt.n	802b19c <__swbuf_r+0x3a>
 802b192:	4621      	mov	r1, r4
 802b194:	4628      	mov	r0, r5
 802b196:	f000 fdd5 	bl	802bd44 <_fflush_r>
 802b19a:	b9e0      	cbnz	r0, 802b1d6 <__swbuf_r+0x74>
 802b19c:	68a3      	ldr	r3, [r4, #8]
 802b19e:	3b01      	subs	r3, #1
 802b1a0:	60a3      	str	r3, [r4, #8]
 802b1a2:	6823      	ldr	r3, [r4, #0]
 802b1a4:	1c5a      	adds	r2, r3, #1
 802b1a6:	6022      	str	r2, [r4, #0]
 802b1a8:	701e      	strb	r6, [r3, #0]
 802b1aa:	6962      	ldr	r2, [r4, #20]
 802b1ac:	1c43      	adds	r3, r0, #1
 802b1ae:	429a      	cmp	r2, r3
 802b1b0:	d004      	beq.n	802b1bc <__swbuf_r+0x5a>
 802b1b2:	89a3      	ldrh	r3, [r4, #12]
 802b1b4:	07db      	lsls	r3, r3, #31
 802b1b6:	d506      	bpl.n	802b1c6 <__swbuf_r+0x64>
 802b1b8:	2e0a      	cmp	r6, #10
 802b1ba:	d104      	bne.n	802b1c6 <__swbuf_r+0x64>
 802b1bc:	4621      	mov	r1, r4
 802b1be:	4628      	mov	r0, r5
 802b1c0:	f000 fdc0 	bl	802bd44 <_fflush_r>
 802b1c4:	b938      	cbnz	r0, 802b1d6 <__swbuf_r+0x74>
 802b1c6:	4638      	mov	r0, r7
 802b1c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b1ca:	4621      	mov	r1, r4
 802b1cc:	4628      	mov	r0, r5
 802b1ce:	f000 f805 	bl	802b1dc <__swsetup_r>
 802b1d2:	2800      	cmp	r0, #0
 802b1d4:	d0d5      	beq.n	802b182 <__swbuf_r+0x20>
 802b1d6:	f04f 37ff 	mov.w	r7, #4294967295
 802b1da:	e7f4      	b.n	802b1c6 <__swbuf_r+0x64>

0802b1dc <__swsetup_r>:
 802b1dc:	b538      	push	{r3, r4, r5, lr}
 802b1de:	4b2a      	ldr	r3, [pc, #168]	; (802b288 <__swsetup_r+0xac>)
 802b1e0:	4605      	mov	r5, r0
 802b1e2:	6818      	ldr	r0, [r3, #0]
 802b1e4:	460c      	mov	r4, r1
 802b1e6:	b118      	cbz	r0, 802b1f0 <__swsetup_r+0x14>
 802b1e8:	6a03      	ldr	r3, [r0, #32]
 802b1ea:	b90b      	cbnz	r3, 802b1f0 <__swsetup_r+0x14>
 802b1ec:	f7ff ff2e 	bl	802b04c <__sinit>
 802b1f0:	89a3      	ldrh	r3, [r4, #12]
 802b1f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b1f6:	0718      	lsls	r0, r3, #28
 802b1f8:	d422      	bmi.n	802b240 <__swsetup_r+0x64>
 802b1fa:	06d9      	lsls	r1, r3, #27
 802b1fc:	d407      	bmi.n	802b20e <__swsetup_r+0x32>
 802b1fe:	2309      	movs	r3, #9
 802b200:	602b      	str	r3, [r5, #0]
 802b202:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802b206:	81a3      	strh	r3, [r4, #12]
 802b208:	f04f 30ff 	mov.w	r0, #4294967295
 802b20c:	e034      	b.n	802b278 <__swsetup_r+0x9c>
 802b20e:	0758      	lsls	r0, r3, #29
 802b210:	d512      	bpl.n	802b238 <__swsetup_r+0x5c>
 802b212:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b214:	b141      	cbz	r1, 802b228 <__swsetup_r+0x4c>
 802b216:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b21a:	4299      	cmp	r1, r3
 802b21c:	d002      	beq.n	802b224 <__swsetup_r+0x48>
 802b21e:	4628      	mov	r0, r5
 802b220:	f000 f9ea 	bl	802b5f8 <_free_r>
 802b224:	2300      	movs	r3, #0
 802b226:	6363      	str	r3, [r4, #52]	; 0x34
 802b228:	89a3      	ldrh	r3, [r4, #12]
 802b22a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802b22e:	81a3      	strh	r3, [r4, #12]
 802b230:	2300      	movs	r3, #0
 802b232:	6063      	str	r3, [r4, #4]
 802b234:	6923      	ldr	r3, [r4, #16]
 802b236:	6023      	str	r3, [r4, #0]
 802b238:	89a3      	ldrh	r3, [r4, #12]
 802b23a:	f043 0308 	orr.w	r3, r3, #8
 802b23e:	81a3      	strh	r3, [r4, #12]
 802b240:	6923      	ldr	r3, [r4, #16]
 802b242:	b94b      	cbnz	r3, 802b258 <__swsetup_r+0x7c>
 802b244:	89a3      	ldrh	r3, [r4, #12]
 802b246:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802b24a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802b24e:	d003      	beq.n	802b258 <__swsetup_r+0x7c>
 802b250:	4621      	mov	r1, r4
 802b252:	4628      	mov	r0, r5
 802b254:	f000 fdc4 	bl	802bde0 <__smakebuf_r>
 802b258:	89a0      	ldrh	r0, [r4, #12]
 802b25a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b25e:	f010 0301 	ands.w	r3, r0, #1
 802b262:	d00a      	beq.n	802b27a <__swsetup_r+0x9e>
 802b264:	2300      	movs	r3, #0
 802b266:	60a3      	str	r3, [r4, #8]
 802b268:	6963      	ldr	r3, [r4, #20]
 802b26a:	425b      	negs	r3, r3
 802b26c:	61a3      	str	r3, [r4, #24]
 802b26e:	6923      	ldr	r3, [r4, #16]
 802b270:	b943      	cbnz	r3, 802b284 <__swsetup_r+0xa8>
 802b272:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802b276:	d1c4      	bne.n	802b202 <__swsetup_r+0x26>
 802b278:	bd38      	pop	{r3, r4, r5, pc}
 802b27a:	0781      	lsls	r1, r0, #30
 802b27c:	bf58      	it	pl
 802b27e:	6963      	ldrpl	r3, [r4, #20]
 802b280:	60a3      	str	r3, [r4, #8]
 802b282:	e7f4      	b.n	802b26e <__swsetup_r+0x92>
 802b284:	2000      	movs	r0, #0
 802b286:	e7f7      	b.n	802b278 <__swsetup_r+0x9c>
 802b288:	20000148 	.word	0x20000148

0802b28c <memset>:
 802b28c:	4402      	add	r2, r0
 802b28e:	4603      	mov	r3, r0
 802b290:	4293      	cmp	r3, r2
 802b292:	d100      	bne.n	802b296 <memset+0xa>
 802b294:	4770      	bx	lr
 802b296:	f803 1b01 	strb.w	r1, [r3], #1
 802b29a:	e7f9      	b.n	802b290 <memset+0x4>

0802b29c <strncmp>:
 802b29c:	b510      	push	{r4, lr}
 802b29e:	b16a      	cbz	r2, 802b2bc <strncmp+0x20>
 802b2a0:	3901      	subs	r1, #1
 802b2a2:	1884      	adds	r4, r0, r2
 802b2a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b2a8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802b2ac:	429a      	cmp	r2, r3
 802b2ae:	d103      	bne.n	802b2b8 <strncmp+0x1c>
 802b2b0:	42a0      	cmp	r0, r4
 802b2b2:	d001      	beq.n	802b2b8 <strncmp+0x1c>
 802b2b4:	2a00      	cmp	r2, #0
 802b2b6:	d1f5      	bne.n	802b2a4 <strncmp+0x8>
 802b2b8:	1ad0      	subs	r0, r2, r3
 802b2ba:	bd10      	pop	{r4, pc}
 802b2bc:	4610      	mov	r0, r2
 802b2be:	e7fc      	b.n	802b2ba <strncmp+0x1e>

0802b2c0 <strncpy>:
 802b2c0:	b510      	push	{r4, lr}
 802b2c2:	3901      	subs	r1, #1
 802b2c4:	4603      	mov	r3, r0
 802b2c6:	b132      	cbz	r2, 802b2d6 <strncpy+0x16>
 802b2c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802b2cc:	f803 4b01 	strb.w	r4, [r3], #1
 802b2d0:	3a01      	subs	r2, #1
 802b2d2:	2c00      	cmp	r4, #0
 802b2d4:	d1f7      	bne.n	802b2c6 <strncpy+0x6>
 802b2d6:	441a      	add	r2, r3
 802b2d8:	2100      	movs	r1, #0
 802b2da:	4293      	cmp	r3, r2
 802b2dc:	d100      	bne.n	802b2e0 <strncpy+0x20>
 802b2de:	bd10      	pop	{r4, pc}
 802b2e0:	f803 1b01 	strb.w	r1, [r3], #1
 802b2e4:	e7f9      	b.n	802b2da <strncpy+0x1a>

0802b2e6 <_raise_r>:
 802b2e6:	291f      	cmp	r1, #31
 802b2e8:	b538      	push	{r3, r4, r5, lr}
 802b2ea:	4604      	mov	r4, r0
 802b2ec:	460d      	mov	r5, r1
 802b2ee:	d904      	bls.n	802b2fa <_raise_r+0x14>
 802b2f0:	2316      	movs	r3, #22
 802b2f2:	6003      	str	r3, [r0, #0]
 802b2f4:	f04f 30ff 	mov.w	r0, #4294967295
 802b2f8:	bd38      	pop	{r3, r4, r5, pc}
 802b2fa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 802b2fc:	b112      	cbz	r2, 802b304 <_raise_r+0x1e>
 802b2fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b302:	b94b      	cbnz	r3, 802b318 <_raise_r+0x32>
 802b304:	4620      	mov	r0, r4
 802b306:	f000 f8bb 	bl	802b480 <_getpid_r>
 802b30a:	462a      	mov	r2, r5
 802b30c:	4601      	mov	r1, r0
 802b30e:	4620      	mov	r0, r4
 802b310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b314:	f000 b8a2 	b.w	802b45c <_kill_r>
 802b318:	2b01      	cmp	r3, #1
 802b31a:	d00a      	beq.n	802b332 <_raise_r+0x4c>
 802b31c:	1c59      	adds	r1, r3, #1
 802b31e:	d103      	bne.n	802b328 <_raise_r+0x42>
 802b320:	2316      	movs	r3, #22
 802b322:	6003      	str	r3, [r0, #0]
 802b324:	2001      	movs	r0, #1
 802b326:	e7e7      	b.n	802b2f8 <_raise_r+0x12>
 802b328:	2400      	movs	r4, #0
 802b32a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802b32e:	4628      	mov	r0, r5
 802b330:	4798      	blx	r3
 802b332:	2000      	movs	r0, #0
 802b334:	e7e0      	b.n	802b2f8 <_raise_r+0x12>
	...

0802b338 <raise>:
 802b338:	4b02      	ldr	r3, [pc, #8]	; (802b344 <raise+0xc>)
 802b33a:	4601      	mov	r1, r0
 802b33c:	6818      	ldr	r0, [r3, #0]
 802b33e:	f7ff bfd2 	b.w	802b2e6 <_raise_r>
 802b342:	bf00      	nop
 802b344:	20000148 	.word	0x20000148

0802b348 <_close_r>:
 802b348:	b538      	push	{r3, r4, r5, lr}
 802b34a:	4d06      	ldr	r5, [pc, #24]	; (802b364 <_close_r+0x1c>)
 802b34c:	2300      	movs	r3, #0
 802b34e:	4604      	mov	r4, r0
 802b350:	4608      	mov	r0, r1
 802b352:	602b      	str	r3, [r5, #0]
 802b354:	f7d9 fa34 	bl	80047c0 <_close>
 802b358:	1c43      	adds	r3, r0, #1
 802b35a:	d102      	bne.n	802b362 <_close_r+0x1a>
 802b35c:	682b      	ldr	r3, [r5, #0]
 802b35e:	b103      	cbz	r3, 802b362 <_close_r+0x1a>
 802b360:	6023      	str	r3, [r4, #0]
 802b362:	bd38      	pop	{r3, r4, r5, pc}
 802b364:	20028740 	.word	0x20028740

0802b368 <_reclaim_reent>:
 802b368:	4b29      	ldr	r3, [pc, #164]	; (802b410 <_reclaim_reent+0xa8>)
 802b36a:	681b      	ldr	r3, [r3, #0]
 802b36c:	4283      	cmp	r3, r0
 802b36e:	b570      	push	{r4, r5, r6, lr}
 802b370:	4604      	mov	r4, r0
 802b372:	d04b      	beq.n	802b40c <_reclaim_reent+0xa4>
 802b374:	69c3      	ldr	r3, [r0, #28]
 802b376:	b143      	cbz	r3, 802b38a <_reclaim_reent+0x22>
 802b378:	68db      	ldr	r3, [r3, #12]
 802b37a:	2b00      	cmp	r3, #0
 802b37c:	d144      	bne.n	802b408 <_reclaim_reent+0xa0>
 802b37e:	69e3      	ldr	r3, [r4, #28]
 802b380:	6819      	ldr	r1, [r3, #0]
 802b382:	b111      	cbz	r1, 802b38a <_reclaim_reent+0x22>
 802b384:	4620      	mov	r0, r4
 802b386:	f000 f937 	bl	802b5f8 <_free_r>
 802b38a:	6961      	ldr	r1, [r4, #20]
 802b38c:	b111      	cbz	r1, 802b394 <_reclaim_reent+0x2c>
 802b38e:	4620      	mov	r0, r4
 802b390:	f000 f932 	bl	802b5f8 <_free_r>
 802b394:	69e1      	ldr	r1, [r4, #28]
 802b396:	b111      	cbz	r1, 802b39e <_reclaim_reent+0x36>
 802b398:	4620      	mov	r0, r4
 802b39a:	f000 f92d 	bl	802b5f8 <_free_r>
 802b39e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802b3a0:	b111      	cbz	r1, 802b3a8 <_reclaim_reent+0x40>
 802b3a2:	4620      	mov	r0, r4
 802b3a4:	f000 f928 	bl	802b5f8 <_free_r>
 802b3a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b3aa:	b111      	cbz	r1, 802b3b2 <_reclaim_reent+0x4a>
 802b3ac:	4620      	mov	r0, r4
 802b3ae:	f000 f923 	bl	802b5f8 <_free_r>
 802b3b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802b3b4:	b111      	cbz	r1, 802b3bc <_reclaim_reent+0x54>
 802b3b6:	4620      	mov	r0, r4
 802b3b8:	f000 f91e 	bl	802b5f8 <_free_r>
 802b3bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802b3be:	b111      	cbz	r1, 802b3c6 <_reclaim_reent+0x5e>
 802b3c0:	4620      	mov	r0, r4
 802b3c2:	f000 f919 	bl	802b5f8 <_free_r>
 802b3c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802b3c8:	b111      	cbz	r1, 802b3d0 <_reclaim_reent+0x68>
 802b3ca:	4620      	mov	r0, r4
 802b3cc:	f000 f914 	bl	802b5f8 <_free_r>
 802b3d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802b3d2:	b111      	cbz	r1, 802b3da <_reclaim_reent+0x72>
 802b3d4:	4620      	mov	r0, r4
 802b3d6:	f000 f90f 	bl	802b5f8 <_free_r>
 802b3da:	6a23      	ldr	r3, [r4, #32]
 802b3dc:	b1b3      	cbz	r3, 802b40c <_reclaim_reent+0xa4>
 802b3de:	4620      	mov	r0, r4
 802b3e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802b3e4:	4718      	bx	r3
 802b3e6:	5949      	ldr	r1, [r1, r5]
 802b3e8:	b941      	cbnz	r1, 802b3fc <_reclaim_reent+0x94>
 802b3ea:	3504      	adds	r5, #4
 802b3ec:	69e3      	ldr	r3, [r4, #28]
 802b3ee:	2d80      	cmp	r5, #128	; 0x80
 802b3f0:	68d9      	ldr	r1, [r3, #12]
 802b3f2:	d1f8      	bne.n	802b3e6 <_reclaim_reent+0x7e>
 802b3f4:	4620      	mov	r0, r4
 802b3f6:	f000 f8ff 	bl	802b5f8 <_free_r>
 802b3fa:	e7c0      	b.n	802b37e <_reclaim_reent+0x16>
 802b3fc:	680e      	ldr	r6, [r1, #0]
 802b3fe:	4620      	mov	r0, r4
 802b400:	f000 f8fa 	bl	802b5f8 <_free_r>
 802b404:	4631      	mov	r1, r6
 802b406:	e7ef      	b.n	802b3e8 <_reclaim_reent+0x80>
 802b408:	2500      	movs	r5, #0
 802b40a:	e7ef      	b.n	802b3ec <_reclaim_reent+0x84>
 802b40c:	bd70      	pop	{r4, r5, r6, pc}
 802b40e:	bf00      	nop
 802b410:	20000148 	.word	0x20000148

0802b414 <_lseek_r>:
 802b414:	b538      	push	{r3, r4, r5, lr}
 802b416:	4d07      	ldr	r5, [pc, #28]	; (802b434 <_lseek_r+0x20>)
 802b418:	4604      	mov	r4, r0
 802b41a:	4608      	mov	r0, r1
 802b41c:	4611      	mov	r1, r2
 802b41e:	2200      	movs	r2, #0
 802b420:	602a      	str	r2, [r5, #0]
 802b422:	461a      	mov	r2, r3
 802b424:	f7d9 f9d6 	bl	80047d4 <_lseek>
 802b428:	1c43      	adds	r3, r0, #1
 802b42a:	d102      	bne.n	802b432 <_lseek_r+0x1e>
 802b42c:	682b      	ldr	r3, [r5, #0]
 802b42e:	b103      	cbz	r3, 802b432 <_lseek_r+0x1e>
 802b430:	6023      	str	r3, [r4, #0]
 802b432:	bd38      	pop	{r3, r4, r5, pc}
 802b434:	20028740 	.word	0x20028740

0802b438 <_read_r>:
 802b438:	b538      	push	{r3, r4, r5, lr}
 802b43a:	4d07      	ldr	r5, [pc, #28]	; (802b458 <_read_r+0x20>)
 802b43c:	4604      	mov	r4, r0
 802b43e:	4608      	mov	r0, r1
 802b440:	4611      	mov	r1, r2
 802b442:	2200      	movs	r2, #0
 802b444:	602a      	str	r2, [r5, #0]
 802b446:	461a      	mov	r2, r3
 802b448:	f7d9 f99e 	bl	8004788 <_read>
 802b44c:	1c43      	adds	r3, r0, #1
 802b44e:	d102      	bne.n	802b456 <_read_r+0x1e>
 802b450:	682b      	ldr	r3, [r5, #0]
 802b452:	b103      	cbz	r3, 802b456 <_read_r+0x1e>
 802b454:	6023      	str	r3, [r4, #0]
 802b456:	bd38      	pop	{r3, r4, r5, pc}
 802b458:	20028740 	.word	0x20028740

0802b45c <_kill_r>:
 802b45c:	b538      	push	{r3, r4, r5, lr}
 802b45e:	4d07      	ldr	r5, [pc, #28]	; (802b47c <_kill_r+0x20>)
 802b460:	2300      	movs	r3, #0
 802b462:	4604      	mov	r4, r0
 802b464:	4608      	mov	r0, r1
 802b466:	4611      	mov	r1, r2
 802b468:	602b      	str	r3, [r5, #0]
 802b46a:	f7d9 f97f 	bl	800476c <_kill>
 802b46e:	1c43      	adds	r3, r0, #1
 802b470:	d102      	bne.n	802b478 <_kill_r+0x1c>
 802b472:	682b      	ldr	r3, [r5, #0]
 802b474:	b103      	cbz	r3, 802b478 <_kill_r+0x1c>
 802b476:	6023      	str	r3, [r4, #0]
 802b478:	bd38      	pop	{r3, r4, r5, pc}
 802b47a:	bf00      	nop
 802b47c:	20028740 	.word	0x20028740

0802b480 <_getpid_r>:
 802b480:	f7d9 b972 	b.w	8004768 <_getpid>

0802b484 <_sbrk_r>:
 802b484:	b538      	push	{r3, r4, r5, lr}
 802b486:	4d06      	ldr	r5, [pc, #24]	; (802b4a0 <_sbrk_r+0x1c>)
 802b488:	2300      	movs	r3, #0
 802b48a:	4604      	mov	r4, r0
 802b48c:	4608      	mov	r0, r1
 802b48e:	602b      	str	r3, [r5, #0]
 802b490:	f000 fd04 	bl	802be9c <_sbrk>
 802b494:	1c43      	adds	r3, r0, #1
 802b496:	d102      	bne.n	802b49e <_sbrk_r+0x1a>
 802b498:	682b      	ldr	r3, [r5, #0]
 802b49a:	b103      	cbz	r3, 802b49e <_sbrk_r+0x1a>
 802b49c:	6023      	str	r3, [r4, #0]
 802b49e:	bd38      	pop	{r3, r4, r5, pc}
 802b4a0:	20028740 	.word	0x20028740

0802b4a4 <_write_r>:
 802b4a4:	b538      	push	{r3, r4, r5, lr}
 802b4a6:	4d07      	ldr	r5, [pc, #28]	; (802b4c4 <_write_r+0x20>)
 802b4a8:	4604      	mov	r4, r0
 802b4aa:	4608      	mov	r0, r1
 802b4ac:	4611      	mov	r1, r2
 802b4ae:	2200      	movs	r2, #0
 802b4b0:	602a      	str	r2, [r5, #0]
 802b4b2:	461a      	mov	r2, r3
 802b4b4:	f7d9 f976 	bl	80047a4 <_write>
 802b4b8:	1c43      	adds	r3, r0, #1
 802b4ba:	d102      	bne.n	802b4c2 <_write_r+0x1e>
 802b4bc:	682b      	ldr	r3, [r5, #0]
 802b4be:	b103      	cbz	r3, 802b4c2 <_write_r+0x1e>
 802b4c0:	6023      	str	r3, [r4, #0]
 802b4c2:	bd38      	pop	{r3, r4, r5, pc}
 802b4c4:	20028740 	.word	0x20028740

0802b4c8 <__errno>:
 802b4c8:	4b01      	ldr	r3, [pc, #4]	; (802b4d0 <__errno+0x8>)
 802b4ca:	6818      	ldr	r0, [r3, #0]
 802b4cc:	4770      	bx	lr
 802b4ce:	bf00      	nop
 802b4d0:	20000148 	.word	0x20000148

0802b4d4 <__libc_init_array>:
 802b4d4:	b570      	push	{r4, r5, r6, lr}
 802b4d6:	4d0d      	ldr	r5, [pc, #52]	; (802b50c <__libc_init_array+0x38>)
 802b4d8:	4c0d      	ldr	r4, [pc, #52]	; (802b510 <__libc_init_array+0x3c>)
 802b4da:	1b64      	subs	r4, r4, r5
 802b4dc:	10a4      	asrs	r4, r4, #2
 802b4de:	2600      	movs	r6, #0
 802b4e0:	42a6      	cmp	r6, r4
 802b4e2:	d109      	bne.n	802b4f8 <__libc_init_array+0x24>
 802b4e4:	4d0b      	ldr	r5, [pc, #44]	; (802b514 <__libc_init_array+0x40>)
 802b4e6:	4c0c      	ldr	r4, [pc, #48]	; (802b518 <__libc_init_array+0x44>)
 802b4e8:	f000 fce6 	bl	802beb8 <_init>
 802b4ec:	1b64      	subs	r4, r4, r5
 802b4ee:	10a4      	asrs	r4, r4, #2
 802b4f0:	2600      	movs	r6, #0
 802b4f2:	42a6      	cmp	r6, r4
 802b4f4:	d105      	bne.n	802b502 <__libc_init_array+0x2e>
 802b4f6:	bd70      	pop	{r4, r5, r6, pc}
 802b4f8:	f855 3b04 	ldr.w	r3, [r5], #4
 802b4fc:	4798      	blx	r3
 802b4fe:	3601      	adds	r6, #1
 802b500:	e7ee      	b.n	802b4e0 <__libc_init_array+0xc>
 802b502:	f855 3b04 	ldr.w	r3, [r5], #4
 802b506:	4798      	blx	r3
 802b508:	3601      	adds	r6, #1
 802b50a:	e7f2      	b.n	802b4f2 <__libc_init_array+0x1e>
 802b50c:	08033c10 	.word	0x08033c10
 802b510:	08033c10 	.word	0x08033c10
 802b514:	08033c10 	.word	0x08033c10
 802b518:	08033c2c 	.word	0x08033c2c

0802b51c <__retarget_lock_acquire_recursive>:
 802b51c:	4770      	bx	lr

0802b51e <__retarget_lock_release_recursive>:
 802b51e:	4770      	bx	lr

0802b520 <memcpy>:
 802b520:	440a      	add	r2, r1
 802b522:	4291      	cmp	r1, r2
 802b524:	f100 33ff 	add.w	r3, r0, #4294967295
 802b528:	d100      	bne.n	802b52c <memcpy+0xc>
 802b52a:	4770      	bx	lr
 802b52c:	b510      	push	{r4, lr}
 802b52e:	f811 4b01 	ldrb.w	r4, [r1], #1
 802b532:	f803 4f01 	strb.w	r4, [r3, #1]!
 802b536:	4291      	cmp	r1, r2
 802b538:	d1f9      	bne.n	802b52e <memcpy+0xe>
 802b53a:	bd10      	pop	{r4, pc}

0802b53c <__register_exitproc>:
 802b53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b540:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 802b5f4 <__register_exitproc+0xb8>
 802b544:	4606      	mov	r6, r0
 802b546:	f8d8 0000 	ldr.w	r0, [r8]
 802b54a:	461f      	mov	r7, r3
 802b54c:	460d      	mov	r5, r1
 802b54e:	4691      	mov	r9, r2
 802b550:	f7ff ffe4 	bl	802b51c <__retarget_lock_acquire_recursive>
 802b554:	4b23      	ldr	r3, [pc, #140]	; (802b5e4 <__register_exitproc+0xa8>)
 802b556:	681c      	ldr	r4, [r3, #0]
 802b558:	b934      	cbnz	r4, 802b568 <__register_exitproc+0x2c>
 802b55a:	4c23      	ldr	r4, [pc, #140]	; (802b5e8 <__register_exitproc+0xac>)
 802b55c:	601c      	str	r4, [r3, #0]
 802b55e:	4b23      	ldr	r3, [pc, #140]	; (802b5ec <__register_exitproc+0xb0>)
 802b560:	b113      	cbz	r3, 802b568 <__register_exitproc+0x2c>
 802b562:	681b      	ldr	r3, [r3, #0]
 802b564:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802b568:	6863      	ldr	r3, [r4, #4]
 802b56a:	2b1f      	cmp	r3, #31
 802b56c:	dd07      	ble.n	802b57e <__register_exitproc+0x42>
 802b56e:	f8d8 0000 	ldr.w	r0, [r8]
 802b572:	f7ff ffd4 	bl	802b51e <__retarget_lock_release_recursive>
 802b576:	f04f 30ff 	mov.w	r0, #4294967295
 802b57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b57e:	b32e      	cbz	r6, 802b5cc <__register_exitproc+0x90>
 802b580:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802b584:	b968      	cbnz	r0, 802b5a2 <__register_exitproc+0x66>
 802b586:	4b1a      	ldr	r3, [pc, #104]	; (802b5f0 <__register_exitproc+0xb4>)
 802b588:	2b00      	cmp	r3, #0
 802b58a:	d0f0      	beq.n	802b56e <__register_exitproc+0x32>
 802b58c:	f44f 7084 	mov.w	r0, #264	; 0x108
 802b590:	f7ff fc18 	bl	802adc4 <malloc>
 802b594:	2800      	cmp	r0, #0
 802b596:	d0ea      	beq.n	802b56e <__register_exitproc+0x32>
 802b598:	2300      	movs	r3, #0
 802b59a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802b59e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802b5a2:	6863      	ldr	r3, [r4, #4]
 802b5a4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802b5a8:	2201      	movs	r2, #1
 802b5aa:	409a      	lsls	r2, r3
 802b5ac:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802b5b0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802b5b4:	4313      	orrs	r3, r2
 802b5b6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802b5ba:	2e02      	cmp	r6, #2
 802b5bc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802b5c0:	bf02      	ittt	eq
 802b5c2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802b5c6:	4313      	orreq	r3, r2
 802b5c8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802b5cc:	6863      	ldr	r3, [r4, #4]
 802b5ce:	f8d8 0000 	ldr.w	r0, [r8]
 802b5d2:	1c5a      	adds	r2, r3, #1
 802b5d4:	3302      	adds	r3, #2
 802b5d6:	6062      	str	r2, [r4, #4]
 802b5d8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802b5dc:	f7ff ff9f 	bl	802b51e <__retarget_lock_release_recursive>
 802b5e0:	2000      	movs	r0, #0
 802b5e2:	e7ca      	b.n	802b57a <__register_exitproc+0x3e>
 802b5e4:	200287d4 	.word	0x200287d4
 802b5e8:	20028748 	.word	0x20028748
 802b5ec:	08031564 	.word	0x08031564
 802b5f0:	0802adc5 	.word	0x0802adc5
 802b5f4:	2000014c 	.word	0x2000014c

0802b5f8 <_free_r>:
 802b5f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802b5fa:	2900      	cmp	r1, #0
 802b5fc:	d044      	beq.n	802b688 <_free_r+0x90>
 802b5fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b602:	9001      	str	r0, [sp, #4]
 802b604:	2b00      	cmp	r3, #0
 802b606:	f1a1 0404 	sub.w	r4, r1, #4
 802b60a:	bfb8      	it	lt
 802b60c:	18e4      	addlt	r4, r4, r3
 802b60e:	f7ff fc89 	bl	802af24 <__malloc_lock>
 802b612:	4a1e      	ldr	r2, [pc, #120]	; (802b68c <_free_r+0x94>)
 802b614:	9801      	ldr	r0, [sp, #4]
 802b616:	6813      	ldr	r3, [r2, #0]
 802b618:	b933      	cbnz	r3, 802b628 <_free_r+0x30>
 802b61a:	6063      	str	r3, [r4, #4]
 802b61c:	6014      	str	r4, [r2, #0]
 802b61e:	b003      	add	sp, #12
 802b620:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802b624:	f7ff bc84 	b.w	802af30 <__malloc_unlock>
 802b628:	42a3      	cmp	r3, r4
 802b62a:	d908      	bls.n	802b63e <_free_r+0x46>
 802b62c:	6825      	ldr	r5, [r4, #0]
 802b62e:	1961      	adds	r1, r4, r5
 802b630:	428b      	cmp	r3, r1
 802b632:	bf01      	itttt	eq
 802b634:	6819      	ldreq	r1, [r3, #0]
 802b636:	685b      	ldreq	r3, [r3, #4]
 802b638:	1949      	addeq	r1, r1, r5
 802b63a:	6021      	streq	r1, [r4, #0]
 802b63c:	e7ed      	b.n	802b61a <_free_r+0x22>
 802b63e:	461a      	mov	r2, r3
 802b640:	685b      	ldr	r3, [r3, #4]
 802b642:	b10b      	cbz	r3, 802b648 <_free_r+0x50>
 802b644:	42a3      	cmp	r3, r4
 802b646:	d9fa      	bls.n	802b63e <_free_r+0x46>
 802b648:	6811      	ldr	r1, [r2, #0]
 802b64a:	1855      	adds	r5, r2, r1
 802b64c:	42a5      	cmp	r5, r4
 802b64e:	d10b      	bne.n	802b668 <_free_r+0x70>
 802b650:	6824      	ldr	r4, [r4, #0]
 802b652:	4421      	add	r1, r4
 802b654:	1854      	adds	r4, r2, r1
 802b656:	42a3      	cmp	r3, r4
 802b658:	6011      	str	r1, [r2, #0]
 802b65a:	d1e0      	bne.n	802b61e <_free_r+0x26>
 802b65c:	681c      	ldr	r4, [r3, #0]
 802b65e:	685b      	ldr	r3, [r3, #4]
 802b660:	6053      	str	r3, [r2, #4]
 802b662:	440c      	add	r4, r1
 802b664:	6014      	str	r4, [r2, #0]
 802b666:	e7da      	b.n	802b61e <_free_r+0x26>
 802b668:	d902      	bls.n	802b670 <_free_r+0x78>
 802b66a:	230c      	movs	r3, #12
 802b66c:	6003      	str	r3, [r0, #0]
 802b66e:	e7d6      	b.n	802b61e <_free_r+0x26>
 802b670:	6825      	ldr	r5, [r4, #0]
 802b672:	1961      	adds	r1, r4, r5
 802b674:	428b      	cmp	r3, r1
 802b676:	bf04      	itt	eq
 802b678:	6819      	ldreq	r1, [r3, #0]
 802b67a:	685b      	ldreq	r3, [r3, #4]
 802b67c:	6063      	str	r3, [r4, #4]
 802b67e:	bf04      	itt	eq
 802b680:	1949      	addeq	r1, r1, r5
 802b682:	6021      	streq	r1, [r4, #0]
 802b684:	6054      	str	r4, [r2, #4]
 802b686:	e7ca      	b.n	802b61e <_free_r+0x26>
 802b688:	b003      	add	sp, #12
 802b68a:	bd30      	pop	{r4, r5, pc}
 802b68c:	200285fc 	.word	0x200285fc

0802b690 <__sfputc_r>:
 802b690:	6893      	ldr	r3, [r2, #8]
 802b692:	3b01      	subs	r3, #1
 802b694:	2b00      	cmp	r3, #0
 802b696:	b410      	push	{r4}
 802b698:	6093      	str	r3, [r2, #8]
 802b69a:	da08      	bge.n	802b6ae <__sfputc_r+0x1e>
 802b69c:	6994      	ldr	r4, [r2, #24]
 802b69e:	42a3      	cmp	r3, r4
 802b6a0:	db01      	blt.n	802b6a6 <__sfputc_r+0x16>
 802b6a2:	290a      	cmp	r1, #10
 802b6a4:	d103      	bne.n	802b6ae <__sfputc_r+0x1e>
 802b6a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b6aa:	f7ff bd5a 	b.w	802b162 <__swbuf_r>
 802b6ae:	6813      	ldr	r3, [r2, #0]
 802b6b0:	1c58      	adds	r0, r3, #1
 802b6b2:	6010      	str	r0, [r2, #0]
 802b6b4:	7019      	strb	r1, [r3, #0]
 802b6b6:	4608      	mov	r0, r1
 802b6b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b6bc:	4770      	bx	lr

0802b6be <__sfputs_r>:
 802b6be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b6c0:	4606      	mov	r6, r0
 802b6c2:	460f      	mov	r7, r1
 802b6c4:	4614      	mov	r4, r2
 802b6c6:	18d5      	adds	r5, r2, r3
 802b6c8:	42ac      	cmp	r4, r5
 802b6ca:	d101      	bne.n	802b6d0 <__sfputs_r+0x12>
 802b6cc:	2000      	movs	r0, #0
 802b6ce:	e007      	b.n	802b6e0 <__sfputs_r+0x22>
 802b6d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b6d4:	463a      	mov	r2, r7
 802b6d6:	4630      	mov	r0, r6
 802b6d8:	f7ff ffda 	bl	802b690 <__sfputc_r>
 802b6dc:	1c43      	adds	r3, r0, #1
 802b6de:	d1f3      	bne.n	802b6c8 <__sfputs_r+0xa>
 802b6e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802b6e4 <_vfiprintf_r>:
 802b6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b6e8:	460d      	mov	r5, r1
 802b6ea:	b09d      	sub	sp, #116	; 0x74
 802b6ec:	4614      	mov	r4, r2
 802b6ee:	4698      	mov	r8, r3
 802b6f0:	4606      	mov	r6, r0
 802b6f2:	b118      	cbz	r0, 802b6fc <_vfiprintf_r+0x18>
 802b6f4:	6a03      	ldr	r3, [r0, #32]
 802b6f6:	b90b      	cbnz	r3, 802b6fc <_vfiprintf_r+0x18>
 802b6f8:	f7ff fca8 	bl	802b04c <__sinit>
 802b6fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b6fe:	07d9      	lsls	r1, r3, #31
 802b700:	d405      	bmi.n	802b70e <_vfiprintf_r+0x2a>
 802b702:	89ab      	ldrh	r3, [r5, #12]
 802b704:	059a      	lsls	r2, r3, #22
 802b706:	d402      	bmi.n	802b70e <_vfiprintf_r+0x2a>
 802b708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b70a:	f7ff ff07 	bl	802b51c <__retarget_lock_acquire_recursive>
 802b70e:	89ab      	ldrh	r3, [r5, #12]
 802b710:	071b      	lsls	r3, r3, #28
 802b712:	d501      	bpl.n	802b718 <_vfiprintf_r+0x34>
 802b714:	692b      	ldr	r3, [r5, #16]
 802b716:	b99b      	cbnz	r3, 802b740 <_vfiprintf_r+0x5c>
 802b718:	4629      	mov	r1, r5
 802b71a:	4630      	mov	r0, r6
 802b71c:	f7ff fd5e 	bl	802b1dc <__swsetup_r>
 802b720:	b170      	cbz	r0, 802b740 <_vfiprintf_r+0x5c>
 802b722:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b724:	07dc      	lsls	r4, r3, #31
 802b726:	d504      	bpl.n	802b732 <_vfiprintf_r+0x4e>
 802b728:	f04f 30ff 	mov.w	r0, #4294967295
 802b72c:	b01d      	add	sp, #116	; 0x74
 802b72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b732:	89ab      	ldrh	r3, [r5, #12]
 802b734:	0598      	lsls	r0, r3, #22
 802b736:	d4f7      	bmi.n	802b728 <_vfiprintf_r+0x44>
 802b738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b73a:	f7ff fef0 	bl	802b51e <__retarget_lock_release_recursive>
 802b73e:	e7f3      	b.n	802b728 <_vfiprintf_r+0x44>
 802b740:	2300      	movs	r3, #0
 802b742:	9309      	str	r3, [sp, #36]	; 0x24
 802b744:	2320      	movs	r3, #32
 802b746:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802b74a:	f8cd 800c 	str.w	r8, [sp, #12]
 802b74e:	2330      	movs	r3, #48	; 0x30
 802b750:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 802b904 <_vfiprintf_r+0x220>
 802b754:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802b758:	f04f 0901 	mov.w	r9, #1
 802b75c:	4623      	mov	r3, r4
 802b75e:	469a      	mov	sl, r3
 802b760:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b764:	b10a      	cbz	r2, 802b76a <_vfiprintf_r+0x86>
 802b766:	2a25      	cmp	r2, #37	; 0x25
 802b768:	d1f9      	bne.n	802b75e <_vfiprintf_r+0x7a>
 802b76a:	ebba 0b04 	subs.w	fp, sl, r4
 802b76e:	d00b      	beq.n	802b788 <_vfiprintf_r+0xa4>
 802b770:	465b      	mov	r3, fp
 802b772:	4622      	mov	r2, r4
 802b774:	4629      	mov	r1, r5
 802b776:	4630      	mov	r0, r6
 802b778:	f7ff ffa1 	bl	802b6be <__sfputs_r>
 802b77c:	3001      	adds	r0, #1
 802b77e:	f000 80a9 	beq.w	802b8d4 <_vfiprintf_r+0x1f0>
 802b782:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802b784:	445a      	add	r2, fp
 802b786:	9209      	str	r2, [sp, #36]	; 0x24
 802b788:	f89a 3000 	ldrb.w	r3, [sl]
 802b78c:	2b00      	cmp	r3, #0
 802b78e:	f000 80a1 	beq.w	802b8d4 <_vfiprintf_r+0x1f0>
 802b792:	2300      	movs	r3, #0
 802b794:	f04f 32ff 	mov.w	r2, #4294967295
 802b798:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b79c:	f10a 0a01 	add.w	sl, sl, #1
 802b7a0:	9304      	str	r3, [sp, #16]
 802b7a2:	9307      	str	r3, [sp, #28]
 802b7a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802b7a8:	931a      	str	r3, [sp, #104]	; 0x68
 802b7aa:	4654      	mov	r4, sl
 802b7ac:	2205      	movs	r2, #5
 802b7ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b7b2:	4854      	ldr	r0, [pc, #336]	; (802b904 <_vfiprintf_r+0x220>)
 802b7b4:	f7d4 fd44 	bl	8000240 <memchr>
 802b7b8:	9a04      	ldr	r2, [sp, #16]
 802b7ba:	b9d8      	cbnz	r0, 802b7f4 <_vfiprintf_r+0x110>
 802b7bc:	06d1      	lsls	r1, r2, #27
 802b7be:	bf44      	itt	mi
 802b7c0:	2320      	movmi	r3, #32
 802b7c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b7c6:	0713      	lsls	r3, r2, #28
 802b7c8:	bf44      	itt	mi
 802b7ca:	232b      	movmi	r3, #43	; 0x2b
 802b7cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b7d0:	f89a 3000 	ldrb.w	r3, [sl]
 802b7d4:	2b2a      	cmp	r3, #42	; 0x2a
 802b7d6:	d015      	beq.n	802b804 <_vfiprintf_r+0x120>
 802b7d8:	9a07      	ldr	r2, [sp, #28]
 802b7da:	4654      	mov	r4, sl
 802b7dc:	2000      	movs	r0, #0
 802b7de:	f04f 0c0a 	mov.w	ip, #10
 802b7e2:	4621      	mov	r1, r4
 802b7e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b7e8:	3b30      	subs	r3, #48	; 0x30
 802b7ea:	2b09      	cmp	r3, #9
 802b7ec:	d94d      	bls.n	802b88a <_vfiprintf_r+0x1a6>
 802b7ee:	b1b0      	cbz	r0, 802b81e <_vfiprintf_r+0x13a>
 802b7f0:	9207      	str	r2, [sp, #28]
 802b7f2:	e014      	b.n	802b81e <_vfiprintf_r+0x13a>
 802b7f4:	eba0 0308 	sub.w	r3, r0, r8
 802b7f8:	fa09 f303 	lsl.w	r3, r9, r3
 802b7fc:	4313      	orrs	r3, r2
 802b7fe:	9304      	str	r3, [sp, #16]
 802b800:	46a2      	mov	sl, r4
 802b802:	e7d2      	b.n	802b7aa <_vfiprintf_r+0xc6>
 802b804:	9b03      	ldr	r3, [sp, #12]
 802b806:	1d19      	adds	r1, r3, #4
 802b808:	681b      	ldr	r3, [r3, #0]
 802b80a:	9103      	str	r1, [sp, #12]
 802b80c:	2b00      	cmp	r3, #0
 802b80e:	bfbb      	ittet	lt
 802b810:	425b      	neglt	r3, r3
 802b812:	f042 0202 	orrlt.w	r2, r2, #2
 802b816:	9307      	strge	r3, [sp, #28]
 802b818:	9307      	strlt	r3, [sp, #28]
 802b81a:	bfb8      	it	lt
 802b81c:	9204      	strlt	r2, [sp, #16]
 802b81e:	7823      	ldrb	r3, [r4, #0]
 802b820:	2b2e      	cmp	r3, #46	; 0x2e
 802b822:	d10c      	bne.n	802b83e <_vfiprintf_r+0x15a>
 802b824:	7863      	ldrb	r3, [r4, #1]
 802b826:	2b2a      	cmp	r3, #42	; 0x2a
 802b828:	d134      	bne.n	802b894 <_vfiprintf_r+0x1b0>
 802b82a:	9b03      	ldr	r3, [sp, #12]
 802b82c:	1d1a      	adds	r2, r3, #4
 802b82e:	681b      	ldr	r3, [r3, #0]
 802b830:	9203      	str	r2, [sp, #12]
 802b832:	2b00      	cmp	r3, #0
 802b834:	bfb8      	it	lt
 802b836:	f04f 33ff 	movlt.w	r3, #4294967295
 802b83a:	3402      	adds	r4, #2
 802b83c:	9305      	str	r3, [sp, #20]
 802b83e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 802b914 <_vfiprintf_r+0x230>
 802b842:	7821      	ldrb	r1, [r4, #0]
 802b844:	2203      	movs	r2, #3
 802b846:	4650      	mov	r0, sl
 802b848:	f7d4 fcfa 	bl	8000240 <memchr>
 802b84c:	b138      	cbz	r0, 802b85e <_vfiprintf_r+0x17a>
 802b84e:	9b04      	ldr	r3, [sp, #16]
 802b850:	eba0 000a 	sub.w	r0, r0, sl
 802b854:	2240      	movs	r2, #64	; 0x40
 802b856:	4082      	lsls	r2, r0
 802b858:	4313      	orrs	r3, r2
 802b85a:	3401      	adds	r4, #1
 802b85c:	9304      	str	r3, [sp, #16]
 802b85e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b862:	4829      	ldr	r0, [pc, #164]	; (802b908 <_vfiprintf_r+0x224>)
 802b864:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802b868:	2206      	movs	r2, #6
 802b86a:	f7d4 fce9 	bl	8000240 <memchr>
 802b86e:	2800      	cmp	r0, #0
 802b870:	d03f      	beq.n	802b8f2 <_vfiprintf_r+0x20e>
 802b872:	4b26      	ldr	r3, [pc, #152]	; (802b90c <_vfiprintf_r+0x228>)
 802b874:	bb1b      	cbnz	r3, 802b8be <_vfiprintf_r+0x1da>
 802b876:	9b03      	ldr	r3, [sp, #12]
 802b878:	3307      	adds	r3, #7
 802b87a:	f023 0307 	bic.w	r3, r3, #7
 802b87e:	3308      	adds	r3, #8
 802b880:	9303      	str	r3, [sp, #12]
 802b882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b884:	443b      	add	r3, r7
 802b886:	9309      	str	r3, [sp, #36]	; 0x24
 802b888:	e768      	b.n	802b75c <_vfiprintf_r+0x78>
 802b88a:	fb0c 3202 	mla	r2, ip, r2, r3
 802b88e:	460c      	mov	r4, r1
 802b890:	2001      	movs	r0, #1
 802b892:	e7a6      	b.n	802b7e2 <_vfiprintf_r+0xfe>
 802b894:	2300      	movs	r3, #0
 802b896:	3401      	adds	r4, #1
 802b898:	9305      	str	r3, [sp, #20]
 802b89a:	4619      	mov	r1, r3
 802b89c:	f04f 0c0a 	mov.w	ip, #10
 802b8a0:	4620      	mov	r0, r4
 802b8a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b8a6:	3a30      	subs	r2, #48	; 0x30
 802b8a8:	2a09      	cmp	r2, #9
 802b8aa:	d903      	bls.n	802b8b4 <_vfiprintf_r+0x1d0>
 802b8ac:	2b00      	cmp	r3, #0
 802b8ae:	d0c6      	beq.n	802b83e <_vfiprintf_r+0x15a>
 802b8b0:	9105      	str	r1, [sp, #20]
 802b8b2:	e7c4      	b.n	802b83e <_vfiprintf_r+0x15a>
 802b8b4:	fb0c 2101 	mla	r1, ip, r1, r2
 802b8b8:	4604      	mov	r4, r0
 802b8ba:	2301      	movs	r3, #1
 802b8bc:	e7f0      	b.n	802b8a0 <_vfiprintf_r+0x1bc>
 802b8be:	ab03      	add	r3, sp, #12
 802b8c0:	9300      	str	r3, [sp, #0]
 802b8c2:	462a      	mov	r2, r5
 802b8c4:	4b12      	ldr	r3, [pc, #72]	; (802b910 <_vfiprintf_r+0x22c>)
 802b8c6:	a904      	add	r1, sp, #16
 802b8c8:	4630      	mov	r0, r6
 802b8ca:	f3af 8000 	nop.w
 802b8ce:	4607      	mov	r7, r0
 802b8d0:	1c78      	adds	r0, r7, #1
 802b8d2:	d1d6      	bne.n	802b882 <_vfiprintf_r+0x19e>
 802b8d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b8d6:	07d9      	lsls	r1, r3, #31
 802b8d8:	d405      	bmi.n	802b8e6 <_vfiprintf_r+0x202>
 802b8da:	89ab      	ldrh	r3, [r5, #12]
 802b8dc:	059a      	lsls	r2, r3, #22
 802b8de:	d402      	bmi.n	802b8e6 <_vfiprintf_r+0x202>
 802b8e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b8e2:	f7ff fe1c 	bl	802b51e <__retarget_lock_release_recursive>
 802b8e6:	89ab      	ldrh	r3, [r5, #12]
 802b8e8:	065b      	lsls	r3, r3, #25
 802b8ea:	f53f af1d 	bmi.w	802b728 <_vfiprintf_r+0x44>
 802b8ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 802b8f0:	e71c      	b.n	802b72c <_vfiprintf_r+0x48>
 802b8f2:	ab03      	add	r3, sp, #12
 802b8f4:	9300      	str	r3, [sp, #0]
 802b8f6:	462a      	mov	r2, r5
 802b8f8:	4b05      	ldr	r3, [pc, #20]	; (802b910 <_vfiprintf_r+0x22c>)
 802b8fa:	a904      	add	r1, sp, #16
 802b8fc:	4630      	mov	r0, r6
 802b8fe:	f000 f879 	bl	802b9f4 <_printf_i>
 802b902:	e7e4      	b.n	802b8ce <_vfiprintf_r+0x1ea>
 802b904:	08031568 	.word	0x08031568
 802b908:	08031572 	.word	0x08031572
 802b90c:	00000000 	.word	0x00000000
 802b910:	0802b6bf 	.word	0x0802b6bf
 802b914:	0803156e 	.word	0x0803156e

0802b918 <_printf_common>:
 802b918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b91c:	4616      	mov	r6, r2
 802b91e:	4699      	mov	r9, r3
 802b920:	688a      	ldr	r2, [r1, #8]
 802b922:	690b      	ldr	r3, [r1, #16]
 802b924:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802b928:	4293      	cmp	r3, r2
 802b92a:	bfb8      	it	lt
 802b92c:	4613      	movlt	r3, r2
 802b92e:	6033      	str	r3, [r6, #0]
 802b930:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802b934:	4607      	mov	r7, r0
 802b936:	460c      	mov	r4, r1
 802b938:	b10a      	cbz	r2, 802b93e <_printf_common+0x26>
 802b93a:	3301      	adds	r3, #1
 802b93c:	6033      	str	r3, [r6, #0]
 802b93e:	6823      	ldr	r3, [r4, #0]
 802b940:	0699      	lsls	r1, r3, #26
 802b942:	bf42      	ittt	mi
 802b944:	6833      	ldrmi	r3, [r6, #0]
 802b946:	3302      	addmi	r3, #2
 802b948:	6033      	strmi	r3, [r6, #0]
 802b94a:	6825      	ldr	r5, [r4, #0]
 802b94c:	f015 0506 	ands.w	r5, r5, #6
 802b950:	d106      	bne.n	802b960 <_printf_common+0x48>
 802b952:	f104 0a19 	add.w	sl, r4, #25
 802b956:	68e3      	ldr	r3, [r4, #12]
 802b958:	6832      	ldr	r2, [r6, #0]
 802b95a:	1a9b      	subs	r3, r3, r2
 802b95c:	42ab      	cmp	r3, r5
 802b95e:	dc26      	bgt.n	802b9ae <_printf_common+0x96>
 802b960:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802b964:	1e13      	subs	r3, r2, #0
 802b966:	6822      	ldr	r2, [r4, #0]
 802b968:	bf18      	it	ne
 802b96a:	2301      	movne	r3, #1
 802b96c:	0692      	lsls	r2, r2, #26
 802b96e:	d42b      	bmi.n	802b9c8 <_printf_common+0xb0>
 802b970:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802b974:	4649      	mov	r1, r9
 802b976:	4638      	mov	r0, r7
 802b978:	47c0      	blx	r8
 802b97a:	3001      	adds	r0, #1
 802b97c:	d01e      	beq.n	802b9bc <_printf_common+0xa4>
 802b97e:	6823      	ldr	r3, [r4, #0]
 802b980:	6922      	ldr	r2, [r4, #16]
 802b982:	f003 0306 	and.w	r3, r3, #6
 802b986:	2b04      	cmp	r3, #4
 802b988:	bf02      	ittt	eq
 802b98a:	68e5      	ldreq	r5, [r4, #12]
 802b98c:	6833      	ldreq	r3, [r6, #0]
 802b98e:	1aed      	subeq	r5, r5, r3
 802b990:	68a3      	ldr	r3, [r4, #8]
 802b992:	bf0c      	ite	eq
 802b994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802b998:	2500      	movne	r5, #0
 802b99a:	4293      	cmp	r3, r2
 802b99c:	bfc4      	itt	gt
 802b99e:	1a9b      	subgt	r3, r3, r2
 802b9a0:	18ed      	addgt	r5, r5, r3
 802b9a2:	2600      	movs	r6, #0
 802b9a4:	341a      	adds	r4, #26
 802b9a6:	42b5      	cmp	r5, r6
 802b9a8:	d11a      	bne.n	802b9e0 <_printf_common+0xc8>
 802b9aa:	2000      	movs	r0, #0
 802b9ac:	e008      	b.n	802b9c0 <_printf_common+0xa8>
 802b9ae:	2301      	movs	r3, #1
 802b9b0:	4652      	mov	r2, sl
 802b9b2:	4649      	mov	r1, r9
 802b9b4:	4638      	mov	r0, r7
 802b9b6:	47c0      	blx	r8
 802b9b8:	3001      	adds	r0, #1
 802b9ba:	d103      	bne.n	802b9c4 <_printf_common+0xac>
 802b9bc:	f04f 30ff 	mov.w	r0, #4294967295
 802b9c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b9c4:	3501      	adds	r5, #1
 802b9c6:	e7c6      	b.n	802b956 <_printf_common+0x3e>
 802b9c8:	18e1      	adds	r1, r4, r3
 802b9ca:	1c5a      	adds	r2, r3, #1
 802b9cc:	2030      	movs	r0, #48	; 0x30
 802b9ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802b9d2:	4422      	add	r2, r4
 802b9d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802b9d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802b9dc:	3302      	adds	r3, #2
 802b9de:	e7c7      	b.n	802b970 <_printf_common+0x58>
 802b9e0:	2301      	movs	r3, #1
 802b9e2:	4622      	mov	r2, r4
 802b9e4:	4649      	mov	r1, r9
 802b9e6:	4638      	mov	r0, r7
 802b9e8:	47c0      	blx	r8
 802b9ea:	3001      	adds	r0, #1
 802b9ec:	d0e6      	beq.n	802b9bc <_printf_common+0xa4>
 802b9ee:	3601      	adds	r6, #1
 802b9f0:	e7d9      	b.n	802b9a6 <_printf_common+0x8e>
	...

0802b9f4 <_printf_i>:
 802b9f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802b9f8:	7e0f      	ldrb	r7, [r1, #24]
 802b9fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802b9fc:	2f78      	cmp	r7, #120	; 0x78
 802b9fe:	4691      	mov	r9, r2
 802ba00:	4680      	mov	r8, r0
 802ba02:	460c      	mov	r4, r1
 802ba04:	469a      	mov	sl, r3
 802ba06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802ba0a:	d807      	bhi.n	802ba1c <_printf_i+0x28>
 802ba0c:	2f62      	cmp	r7, #98	; 0x62
 802ba0e:	d80a      	bhi.n	802ba26 <_printf_i+0x32>
 802ba10:	2f00      	cmp	r7, #0
 802ba12:	f000 80d4 	beq.w	802bbbe <_printf_i+0x1ca>
 802ba16:	2f58      	cmp	r7, #88	; 0x58
 802ba18:	f000 80c0 	beq.w	802bb9c <_printf_i+0x1a8>
 802ba1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ba20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802ba24:	e03a      	b.n	802ba9c <_printf_i+0xa8>
 802ba26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802ba2a:	2b15      	cmp	r3, #21
 802ba2c:	d8f6      	bhi.n	802ba1c <_printf_i+0x28>
 802ba2e:	a101      	add	r1, pc, #4	; (adr r1, 802ba34 <_printf_i+0x40>)
 802ba30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802ba34:	0802ba8d 	.word	0x0802ba8d
 802ba38:	0802baa1 	.word	0x0802baa1
 802ba3c:	0802ba1d 	.word	0x0802ba1d
 802ba40:	0802ba1d 	.word	0x0802ba1d
 802ba44:	0802ba1d 	.word	0x0802ba1d
 802ba48:	0802ba1d 	.word	0x0802ba1d
 802ba4c:	0802baa1 	.word	0x0802baa1
 802ba50:	0802ba1d 	.word	0x0802ba1d
 802ba54:	0802ba1d 	.word	0x0802ba1d
 802ba58:	0802ba1d 	.word	0x0802ba1d
 802ba5c:	0802ba1d 	.word	0x0802ba1d
 802ba60:	0802bba5 	.word	0x0802bba5
 802ba64:	0802bacd 	.word	0x0802bacd
 802ba68:	0802bb5f 	.word	0x0802bb5f
 802ba6c:	0802ba1d 	.word	0x0802ba1d
 802ba70:	0802ba1d 	.word	0x0802ba1d
 802ba74:	0802bbc7 	.word	0x0802bbc7
 802ba78:	0802ba1d 	.word	0x0802ba1d
 802ba7c:	0802bacd 	.word	0x0802bacd
 802ba80:	0802ba1d 	.word	0x0802ba1d
 802ba84:	0802ba1d 	.word	0x0802ba1d
 802ba88:	0802bb67 	.word	0x0802bb67
 802ba8c:	682b      	ldr	r3, [r5, #0]
 802ba8e:	1d1a      	adds	r2, r3, #4
 802ba90:	681b      	ldr	r3, [r3, #0]
 802ba92:	602a      	str	r2, [r5, #0]
 802ba94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ba98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802ba9c:	2301      	movs	r3, #1
 802ba9e:	e09f      	b.n	802bbe0 <_printf_i+0x1ec>
 802baa0:	6820      	ldr	r0, [r4, #0]
 802baa2:	682b      	ldr	r3, [r5, #0]
 802baa4:	0607      	lsls	r7, r0, #24
 802baa6:	f103 0104 	add.w	r1, r3, #4
 802baaa:	6029      	str	r1, [r5, #0]
 802baac:	d501      	bpl.n	802bab2 <_printf_i+0xbe>
 802baae:	681e      	ldr	r6, [r3, #0]
 802bab0:	e003      	b.n	802baba <_printf_i+0xc6>
 802bab2:	0646      	lsls	r6, r0, #25
 802bab4:	d5fb      	bpl.n	802baae <_printf_i+0xba>
 802bab6:	f9b3 6000 	ldrsh.w	r6, [r3]
 802baba:	2e00      	cmp	r6, #0
 802babc:	da03      	bge.n	802bac6 <_printf_i+0xd2>
 802babe:	232d      	movs	r3, #45	; 0x2d
 802bac0:	4276      	negs	r6, r6
 802bac2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802bac6:	485a      	ldr	r0, [pc, #360]	; (802bc30 <_printf_i+0x23c>)
 802bac8:	230a      	movs	r3, #10
 802baca:	e012      	b.n	802baf2 <_printf_i+0xfe>
 802bacc:	682b      	ldr	r3, [r5, #0]
 802bace:	6820      	ldr	r0, [r4, #0]
 802bad0:	1d19      	adds	r1, r3, #4
 802bad2:	6029      	str	r1, [r5, #0]
 802bad4:	0605      	lsls	r5, r0, #24
 802bad6:	d501      	bpl.n	802badc <_printf_i+0xe8>
 802bad8:	681e      	ldr	r6, [r3, #0]
 802bada:	e002      	b.n	802bae2 <_printf_i+0xee>
 802badc:	0641      	lsls	r1, r0, #25
 802bade:	d5fb      	bpl.n	802bad8 <_printf_i+0xe4>
 802bae0:	881e      	ldrh	r6, [r3, #0]
 802bae2:	4853      	ldr	r0, [pc, #332]	; (802bc30 <_printf_i+0x23c>)
 802bae4:	2f6f      	cmp	r7, #111	; 0x6f
 802bae6:	bf0c      	ite	eq
 802bae8:	2308      	moveq	r3, #8
 802baea:	230a      	movne	r3, #10
 802baec:	2100      	movs	r1, #0
 802baee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802baf2:	6865      	ldr	r5, [r4, #4]
 802baf4:	60a5      	str	r5, [r4, #8]
 802baf6:	2d00      	cmp	r5, #0
 802baf8:	bfa2      	ittt	ge
 802bafa:	6821      	ldrge	r1, [r4, #0]
 802bafc:	f021 0104 	bicge.w	r1, r1, #4
 802bb00:	6021      	strge	r1, [r4, #0]
 802bb02:	b90e      	cbnz	r6, 802bb08 <_printf_i+0x114>
 802bb04:	2d00      	cmp	r5, #0
 802bb06:	d04b      	beq.n	802bba0 <_printf_i+0x1ac>
 802bb08:	4615      	mov	r5, r2
 802bb0a:	fbb6 f1f3 	udiv	r1, r6, r3
 802bb0e:	fb03 6711 	mls	r7, r3, r1, r6
 802bb12:	5dc7      	ldrb	r7, [r0, r7]
 802bb14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802bb18:	4637      	mov	r7, r6
 802bb1a:	42bb      	cmp	r3, r7
 802bb1c:	460e      	mov	r6, r1
 802bb1e:	d9f4      	bls.n	802bb0a <_printf_i+0x116>
 802bb20:	2b08      	cmp	r3, #8
 802bb22:	d10b      	bne.n	802bb3c <_printf_i+0x148>
 802bb24:	6823      	ldr	r3, [r4, #0]
 802bb26:	07de      	lsls	r6, r3, #31
 802bb28:	d508      	bpl.n	802bb3c <_printf_i+0x148>
 802bb2a:	6923      	ldr	r3, [r4, #16]
 802bb2c:	6861      	ldr	r1, [r4, #4]
 802bb2e:	4299      	cmp	r1, r3
 802bb30:	bfde      	ittt	le
 802bb32:	2330      	movle	r3, #48	; 0x30
 802bb34:	f805 3c01 	strble.w	r3, [r5, #-1]
 802bb38:	f105 35ff 	addle.w	r5, r5, #4294967295
 802bb3c:	1b52      	subs	r2, r2, r5
 802bb3e:	6122      	str	r2, [r4, #16]
 802bb40:	f8cd a000 	str.w	sl, [sp]
 802bb44:	464b      	mov	r3, r9
 802bb46:	aa03      	add	r2, sp, #12
 802bb48:	4621      	mov	r1, r4
 802bb4a:	4640      	mov	r0, r8
 802bb4c:	f7ff fee4 	bl	802b918 <_printf_common>
 802bb50:	3001      	adds	r0, #1
 802bb52:	d14a      	bne.n	802bbea <_printf_i+0x1f6>
 802bb54:	f04f 30ff 	mov.w	r0, #4294967295
 802bb58:	b004      	add	sp, #16
 802bb5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bb5e:	6823      	ldr	r3, [r4, #0]
 802bb60:	f043 0320 	orr.w	r3, r3, #32
 802bb64:	6023      	str	r3, [r4, #0]
 802bb66:	4833      	ldr	r0, [pc, #204]	; (802bc34 <_printf_i+0x240>)
 802bb68:	2778      	movs	r7, #120	; 0x78
 802bb6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802bb6e:	6823      	ldr	r3, [r4, #0]
 802bb70:	6829      	ldr	r1, [r5, #0]
 802bb72:	061f      	lsls	r7, r3, #24
 802bb74:	f851 6b04 	ldr.w	r6, [r1], #4
 802bb78:	d402      	bmi.n	802bb80 <_printf_i+0x18c>
 802bb7a:	065f      	lsls	r7, r3, #25
 802bb7c:	bf48      	it	mi
 802bb7e:	b2b6      	uxthmi	r6, r6
 802bb80:	07df      	lsls	r7, r3, #31
 802bb82:	bf48      	it	mi
 802bb84:	f043 0320 	orrmi.w	r3, r3, #32
 802bb88:	6029      	str	r1, [r5, #0]
 802bb8a:	bf48      	it	mi
 802bb8c:	6023      	strmi	r3, [r4, #0]
 802bb8e:	b91e      	cbnz	r6, 802bb98 <_printf_i+0x1a4>
 802bb90:	6823      	ldr	r3, [r4, #0]
 802bb92:	f023 0320 	bic.w	r3, r3, #32
 802bb96:	6023      	str	r3, [r4, #0]
 802bb98:	2310      	movs	r3, #16
 802bb9a:	e7a7      	b.n	802baec <_printf_i+0xf8>
 802bb9c:	4824      	ldr	r0, [pc, #144]	; (802bc30 <_printf_i+0x23c>)
 802bb9e:	e7e4      	b.n	802bb6a <_printf_i+0x176>
 802bba0:	4615      	mov	r5, r2
 802bba2:	e7bd      	b.n	802bb20 <_printf_i+0x12c>
 802bba4:	682b      	ldr	r3, [r5, #0]
 802bba6:	6826      	ldr	r6, [r4, #0]
 802bba8:	6961      	ldr	r1, [r4, #20]
 802bbaa:	1d18      	adds	r0, r3, #4
 802bbac:	6028      	str	r0, [r5, #0]
 802bbae:	0635      	lsls	r5, r6, #24
 802bbb0:	681b      	ldr	r3, [r3, #0]
 802bbb2:	d501      	bpl.n	802bbb8 <_printf_i+0x1c4>
 802bbb4:	6019      	str	r1, [r3, #0]
 802bbb6:	e002      	b.n	802bbbe <_printf_i+0x1ca>
 802bbb8:	0670      	lsls	r0, r6, #25
 802bbba:	d5fb      	bpl.n	802bbb4 <_printf_i+0x1c0>
 802bbbc:	8019      	strh	r1, [r3, #0]
 802bbbe:	2300      	movs	r3, #0
 802bbc0:	6123      	str	r3, [r4, #16]
 802bbc2:	4615      	mov	r5, r2
 802bbc4:	e7bc      	b.n	802bb40 <_printf_i+0x14c>
 802bbc6:	682b      	ldr	r3, [r5, #0]
 802bbc8:	1d1a      	adds	r2, r3, #4
 802bbca:	602a      	str	r2, [r5, #0]
 802bbcc:	681d      	ldr	r5, [r3, #0]
 802bbce:	6862      	ldr	r2, [r4, #4]
 802bbd0:	2100      	movs	r1, #0
 802bbd2:	4628      	mov	r0, r5
 802bbd4:	f7d4 fb34 	bl	8000240 <memchr>
 802bbd8:	b108      	cbz	r0, 802bbde <_printf_i+0x1ea>
 802bbda:	1b40      	subs	r0, r0, r5
 802bbdc:	6060      	str	r0, [r4, #4]
 802bbde:	6863      	ldr	r3, [r4, #4]
 802bbe0:	6123      	str	r3, [r4, #16]
 802bbe2:	2300      	movs	r3, #0
 802bbe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802bbe8:	e7aa      	b.n	802bb40 <_printf_i+0x14c>
 802bbea:	6923      	ldr	r3, [r4, #16]
 802bbec:	462a      	mov	r2, r5
 802bbee:	4649      	mov	r1, r9
 802bbf0:	4640      	mov	r0, r8
 802bbf2:	47d0      	blx	sl
 802bbf4:	3001      	adds	r0, #1
 802bbf6:	d0ad      	beq.n	802bb54 <_printf_i+0x160>
 802bbf8:	6823      	ldr	r3, [r4, #0]
 802bbfa:	079b      	lsls	r3, r3, #30
 802bbfc:	d413      	bmi.n	802bc26 <_printf_i+0x232>
 802bbfe:	68e0      	ldr	r0, [r4, #12]
 802bc00:	9b03      	ldr	r3, [sp, #12]
 802bc02:	4298      	cmp	r0, r3
 802bc04:	bfb8      	it	lt
 802bc06:	4618      	movlt	r0, r3
 802bc08:	e7a6      	b.n	802bb58 <_printf_i+0x164>
 802bc0a:	2301      	movs	r3, #1
 802bc0c:	4632      	mov	r2, r6
 802bc0e:	4649      	mov	r1, r9
 802bc10:	4640      	mov	r0, r8
 802bc12:	47d0      	blx	sl
 802bc14:	3001      	adds	r0, #1
 802bc16:	d09d      	beq.n	802bb54 <_printf_i+0x160>
 802bc18:	3501      	adds	r5, #1
 802bc1a:	68e3      	ldr	r3, [r4, #12]
 802bc1c:	9903      	ldr	r1, [sp, #12]
 802bc1e:	1a5b      	subs	r3, r3, r1
 802bc20:	42ab      	cmp	r3, r5
 802bc22:	dcf2      	bgt.n	802bc0a <_printf_i+0x216>
 802bc24:	e7eb      	b.n	802bbfe <_printf_i+0x20a>
 802bc26:	2500      	movs	r5, #0
 802bc28:	f104 0619 	add.w	r6, r4, #25
 802bc2c:	e7f5      	b.n	802bc1a <_printf_i+0x226>
 802bc2e:	bf00      	nop
 802bc30:	08031579 	.word	0x08031579
 802bc34:	0803158a 	.word	0x0803158a

0802bc38 <__sflush_r>:
 802bc38:	898a      	ldrh	r2, [r1, #12]
 802bc3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bc3e:	4605      	mov	r5, r0
 802bc40:	0710      	lsls	r0, r2, #28
 802bc42:	460c      	mov	r4, r1
 802bc44:	d458      	bmi.n	802bcf8 <__sflush_r+0xc0>
 802bc46:	684b      	ldr	r3, [r1, #4]
 802bc48:	2b00      	cmp	r3, #0
 802bc4a:	dc05      	bgt.n	802bc58 <__sflush_r+0x20>
 802bc4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802bc4e:	2b00      	cmp	r3, #0
 802bc50:	dc02      	bgt.n	802bc58 <__sflush_r+0x20>
 802bc52:	2000      	movs	r0, #0
 802bc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bc58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802bc5a:	2e00      	cmp	r6, #0
 802bc5c:	d0f9      	beq.n	802bc52 <__sflush_r+0x1a>
 802bc5e:	2300      	movs	r3, #0
 802bc60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802bc64:	682f      	ldr	r7, [r5, #0]
 802bc66:	6a21      	ldr	r1, [r4, #32]
 802bc68:	602b      	str	r3, [r5, #0]
 802bc6a:	d032      	beq.n	802bcd2 <__sflush_r+0x9a>
 802bc6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802bc6e:	89a3      	ldrh	r3, [r4, #12]
 802bc70:	075a      	lsls	r2, r3, #29
 802bc72:	d505      	bpl.n	802bc80 <__sflush_r+0x48>
 802bc74:	6863      	ldr	r3, [r4, #4]
 802bc76:	1ac0      	subs	r0, r0, r3
 802bc78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802bc7a:	b10b      	cbz	r3, 802bc80 <__sflush_r+0x48>
 802bc7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802bc7e:	1ac0      	subs	r0, r0, r3
 802bc80:	2300      	movs	r3, #0
 802bc82:	4602      	mov	r2, r0
 802bc84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802bc86:	6a21      	ldr	r1, [r4, #32]
 802bc88:	4628      	mov	r0, r5
 802bc8a:	47b0      	blx	r6
 802bc8c:	1c43      	adds	r3, r0, #1
 802bc8e:	89a3      	ldrh	r3, [r4, #12]
 802bc90:	d106      	bne.n	802bca0 <__sflush_r+0x68>
 802bc92:	6829      	ldr	r1, [r5, #0]
 802bc94:	291d      	cmp	r1, #29
 802bc96:	d82b      	bhi.n	802bcf0 <__sflush_r+0xb8>
 802bc98:	4a29      	ldr	r2, [pc, #164]	; (802bd40 <__sflush_r+0x108>)
 802bc9a:	410a      	asrs	r2, r1
 802bc9c:	07d6      	lsls	r6, r2, #31
 802bc9e:	d427      	bmi.n	802bcf0 <__sflush_r+0xb8>
 802bca0:	2200      	movs	r2, #0
 802bca2:	6062      	str	r2, [r4, #4]
 802bca4:	04d9      	lsls	r1, r3, #19
 802bca6:	6922      	ldr	r2, [r4, #16]
 802bca8:	6022      	str	r2, [r4, #0]
 802bcaa:	d504      	bpl.n	802bcb6 <__sflush_r+0x7e>
 802bcac:	1c42      	adds	r2, r0, #1
 802bcae:	d101      	bne.n	802bcb4 <__sflush_r+0x7c>
 802bcb0:	682b      	ldr	r3, [r5, #0]
 802bcb2:	b903      	cbnz	r3, 802bcb6 <__sflush_r+0x7e>
 802bcb4:	6560      	str	r0, [r4, #84]	; 0x54
 802bcb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802bcb8:	602f      	str	r7, [r5, #0]
 802bcba:	2900      	cmp	r1, #0
 802bcbc:	d0c9      	beq.n	802bc52 <__sflush_r+0x1a>
 802bcbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802bcc2:	4299      	cmp	r1, r3
 802bcc4:	d002      	beq.n	802bccc <__sflush_r+0x94>
 802bcc6:	4628      	mov	r0, r5
 802bcc8:	f7ff fc96 	bl	802b5f8 <_free_r>
 802bccc:	2000      	movs	r0, #0
 802bcce:	6360      	str	r0, [r4, #52]	; 0x34
 802bcd0:	e7c0      	b.n	802bc54 <__sflush_r+0x1c>
 802bcd2:	2301      	movs	r3, #1
 802bcd4:	4628      	mov	r0, r5
 802bcd6:	47b0      	blx	r6
 802bcd8:	1c41      	adds	r1, r0, #1
 802bcda:	d1c8      	bne.n	802bc6e <__sflush_r+0x36>
 802bcdc:	682b      	ldr	r3, [r5, #0]
 802bcde:	2b00      	cmp	r3, #0
 802bce0:	d0c5      	beq.n	802bc6e <__sflush_r+0x36>
 802bce2:	2b1d      	cmp	r3, #29
 802bce4:	d001      	beq.n	802bcea <__sflush_r+0xb2>
 802bce6:	2b16      	cmp	r3, #22
 802bce8:	d101      	bne.n	802bcee <__sflush_r+0xb6>
 802bcea:	602f      	str	r7, [r5, #0]
 802bcec:	e7b1      	b.n	802bc52 <__sflush_r+0x1a>
 802bcee:	89a3      	ldrh	r3, [r4, #12]
 802bcf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802bcf4:	81a3      	strh	r3, [r4, #12]
 802bcf6:	e7ad      	b.n	802bc54 <__sflush_r+0x1c>
 802bcf8:	690f      	ldr	r7, [r1, #16]
 802bcfa:	2f00      	cmp	r7, #0
 802bcfc:	d0a9      	beq.n	802bc52 <__sflush_r+0x1a>
 802bcfe:	0793      	lsls	r3, r2, #30
 802bd00:	680e      	ldr	r6, [r1, #0]
 802bd02:	bf08      	it	eq
 802bd04:	694b      	ldreq	r3, [r1, #20]
 802bd06:	600f      	str	r7, [r1, #0]
 802bd08:	bf18      	it	ne
 802bd0a:	2300      	movne	r3, #0
 802bd0c:	eba6 0807 	sub.w	r8, r6, r7
 802bd10:	608b      	str	r3, [r1, #8]
 802bd12:	f1b8 0f00 	cmp.w	r8, #0
 802bd16:	dd9c      	ble.n	802bc52 <__sflush_r+0x1a>
 802bd18:	6a21      	ldr	r1, [r4, #32]
 802bd1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802bd1c:	4643      	mov	r3, r8
 802bd1e:	463a      	mov	r2, r7
 802bd20:	4628      	mov	r0, r5
 802bd22:	47b0      	blx	r6
 802bd24:	2800      	cmp	r0, #0
 802bd26:	dc06      	bgt.n	802bd36 <__sflush_r+0xfe>
 802bd28:	89a3      	ldrh	r3, [r4, #12]
 802bd2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802bd2e:	81a3      	strh	r3, [r4, #12]
 802bd30:	f04f 30ff 	mov.w	r0, #4294967295
 802bd34:	e78e      	b.n	802bc54 <__sflush_r+0x1c>
 802bd36:	4407      	add	r7, r0
 802bd38:	eba8 0800 	sub.w	r8, r8, r0
 802bd3c:	e7e9      	b.n	802bd12 <__sflush_r+0xda>
 802bd3e:	bf00      	nop
 802bd40:	dfbffffe 	.word	0xdfbffffe

0802bd44 <_fflush_r>:
 802bd44:	b538      	push	{r3, r4, r5, lr}
 802bd46:	690b      	ldr	r3, [r1, #16]
 802bd48:	4605      	mov	r5, r0
 802bd4a:	460c      	mov	r4, r1
 802bd4c:	b913      	cbnz	r3, 802bd54 <_fflush_r+0x10>
 802bd4e:	2500      	movs	r5, #0
 802bd50:	4628      	mov	r0, r5
 802bd52:	bd38      	pop	{r3, r4, r5, pc}
 802bd54:	b118      	cbz	r0, 802bd5e <_fflush_r+0x1a>
 802bd56:	6a03      	ldr	r3, [r0, #32]
 802bd58:	b90b      	cbnz	r3, 802bd5e <_fflush_r+0x1a>
 802bd5a:	f7ff f977 	bl	802b04c <__sinit>
 802bd5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bd62:	2b00      	cmp	r3, #0
 802bd64:	d0f3      	beq.n	802bd4e <_fflush_r+0xa>
 802bd66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802bd68:	07d0      	lsls	r0, r2, #31
 802bd6a:	d404      	bmi.n	802bd76 <_fflush_r+0x32>
 802bd6c:	0599      	lsls	r1, r3, #22
 802bd6e:	d402      	bmi.n	802bd76 <_fflush_r+0x32>
 802bd70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802bd72:	f7ff fbd3 	bl	802b51c <__retarget_lock_acquire_recursive>
 802bd76:	4628      	mov	r0, r5
 802bd78:	4621      	mov	r1, r4
 802bd7a:	f7ff ff5d 	bl	802bc38 <__sflush_r>
 802bd7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802bd80:	07da      	lsls	r2, r3, #31
 802bd82:	4605      	mov	r5, r0
 802bd84:	d4e4      	bmi.n	802bd50 <_fflush_r+0xc>
 802bd86:	89a3      	ldrh	r3, [r4, #12]
 802bd88:	059b      	lsls	r3, r3, #22
 802bd8a:	d4e1      	bmi.n	802bd50 <_fflush_r+0xc>
 802bd8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802bd8e:	f7ff fbc6 	bl	802b51e <__retarget_lock_release_recursive>
 802bd92:	e7dd      	b.n	802bd50 <_fflush_r+0xc>

0802bd94 <__swhatbuf_r>:
 802bd94:	b570      	push	{r4, r5, r6, lr}
 802bd96:	460c      	mov	r4, r1
 802bd98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bd9c:	2900      	cmp	r1, #0
 802bd9e:	b096      	sub	sp, #88	; 0x58
 802bda0:	4615      	mov	r5, r2
 802bda2:	461e      	mov	r6, r3
 802bda4:	da0d      	bge.n	802bdc2 <__swhatbuf_r+0x2e>
 802bda6:	89a3      	ldrh	r3, [r4, #12]
 802bda8:	f013 0f80 	tst.w	r3, #128	; 0x80
 802bdac:	f04f 0100 	mov.w	r1, #0
 802bdb0:	bf0c      	ite	eq
 802bdb2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 802bdb6:	2340      	movne	r3, #64	; 0x40
 802bdb8:	2000      	movs	r0, #0
 802bdba:	6031      	str	r1, [r6, #0]
 802bdbc:	602b      	str	r3, [r5, #0]
 802bdbe:	b016      	add	sp, #88	; 0x58
 802bdc0:	bd70      	pop	{r4, r5, r6, pc}
 802bdc2:	466a      	mov	r2, sp
 802bdc4:	f000 f848 	bl	802be58 <_fstat_r>
 802bdc8:	2800      	cmp	r0, #0
 802bdca:	dbec      	blt.n	802bda6 <__swhatbuf_r+0x12>
 802bdcc:	9901      	ldr	r1, [sp, #4]
 802bdce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802bdd2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 802bdd6:	4259      	negs	r1, r3
 802bdd8:	4159      	adcs	r1, r3
 802bdda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bdde:	e7eb      	b.n	802bdb8 <__swhatbuf_r+0x24>

0802bde0 <__smakebuf_r>:
 802bde0:	898b      	ldrh	r3, [r1, #12]
 802bde2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802bde4:	079d      	lsls	r5, r3, #30
 802bde6:	4606      	mov	r6, r0
 802bde8:	460c      	mov	r4, r1
 802bdea:	d507      	bpl.n	802bdfc <__smakebuf_r+0x1c>
 802bdec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802bdf0:	6023      	str	r3, [r4, #0]
 802bdf2:	6123      	str	r3, [r4, #16]
 802bdf4:	2301      	movs	r3, #1
 802bdf6:	6163      	str	r3, [r4, #20]
 802bdf8:	b002      	add	sp, #8
 802bdfa:	bd70      	pop	{r4, r5, r6, pc}
 802bdfc:	ab01      	add	r3, sp, #4
 802bdfe:	466a      	mov	r2, sp
 802be00:	f7ff ffc8 	bl	802bd94 <__swhatbuf_r>
 802be04:	9900      	ldr	r1, [sp, #0]
 802be06:	4605      	mov	r5, r0
 802be08:	4630      	mov	r0, r6
 802be0a:	f7ff f80b 	bl	802ae24 <_malloc_r>
 802be0e:	b948      	cbnz	r0, 802be24 <__smakebuf_r+0x44>
 802be10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802be14:	059a      	lsls	r2, r3, #22
 802be16:	d4ef      	bmi.n	802bdf8 <__smakebuf_r+0x18>
 802be18:	f023 0303 	bic.w	r3, r3, #3
 802be1c:	f043 0302 	orr.w	r3, r3, #2
 802be20:	81a3      	strh	r3, [r4, #12]
 802be22:	e7e3      	b.n	802bdec <__smakebuf_r+0xc>
 802be24:	89a3      	ldrh	r3, [r4, #12]
 802be26:	6020      	str	r0, [r4, #0]
 802be28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802be2c:	81a3      	strh	r3, [r4, #12]
 802be2e:	9b00      	ldr	r3, [sp, #0]
 802be30:	6163      	str	r3, [r4, #20]
 802be32:	9b01      	ldr	r3, [sp, #4]
 802be34:	6120      	str	r0, [r4, #16]
 802be36:	b15b      	cbz	r3, 802be50 <__smakebuf_r+0x70>
 802be38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802be3c:	4630      	mov	r0, r6
 802be3e:	f000 f81d 	bl	802be7c <_isatty_r>
 802be42:	b128      	cbz	r0, 802be50 <__smakebuf_r+0x70>
 802be44:	89a3      	ldrh	r3, [r4, #12]
 802be46:	f023 0303 	bic.w	r3, r3, #3
 802be4a:	f043 0301 	orr.w	r3, r3, #1
 802be4e:	81a3      	strh	r3, [r4, #12]
 802be50:	89a3      	ldrh	r3, [r4, #12]
 802be52:	431d      	orrs	r5, r3
 802be54:	81a5      	strh	r5, [r4, #12]
 802be56:	e7cf      	b.n	802bdf8 <__smakebuf_r+0x18>

0802be58 <_fstat_r>:
 802be58:	b538      	push	{r3, r4, r5, lr}
 802be5a:	4d07      	ldr	r5, [pc, #28]	; (802be78 <_fstat_r+0x20>)
 802be5c:	2300      	movs	r3, #0
 802be5e:	4604      	mov	r4, r0
 802be60:	4608      	mov	r0, r1
 802be62:	4611      	mov	r1, r2
 802be64:	602b      	str	r3, [r5, #0]
 802be66:	f7d8 fcae 	bl	80047c6 <_fstat>
 802be6a:	1c43      	adds	r3, r0, #1
 802be6c:	d102      	bne.n	802be74 <_fstat_r+0x1c>
 802be6e:	682b      	ldr	r3, [r5, #0]
 802be70:	b103      	cbz	r3, 802be74 <_fstat_r+0x1c>
 802be72:	6023      	str	r3, [r4, #0]
 802be74:	bd38      	pop	{r3, r4, r5, pc}
 802be76:	bf00      	nop
 802be78:	20028740 	.word	0x20028740

0802be7c <_isatty_r>:
 802be7c:	b538      	push	{r3, r4, r5, lr}
 802be7e:	4d06      	ldr	r5, [pc, #24]	; (802be98 <_isatty_r+0x1c>)
 802be80:	2300      	movs	r3, #0
 802be82:	4604      	mov	r4, r0
 802be84:	4608      	mov	r0, r1
 802be86:	602b      	str	r3, [r5, #0]
 802be88:	f7d8 fca2 	bl	80047d0 <_isatty>
 802be8c:	1c43      	adds	r3, r0, #1
 802be8e:	d102      	bne.n	802be96 <_isatty_r+0x1a>
 802be90:	682b      	ldr	r3, [r5, #0]
 802be92:	b103      	cbz	r3, 802be96 <_isatty_r+0x1a>
 802be94:	6023      	str	r3, [r4, #0]
 802be96:	bd38      	pop	{r3, r4, r5, pc}
 802be98:	20028740 	.word	0x20028740

0802be9c <_sbrk>:
 802be9c:	4a04      	ldr	r2, [pc, #16]	; (802beb0 <_sbrk+0x14>)
 802be9e:	6811      	ldr	r1, [r2, #0]
 802bea0:	4603      	mov	r3, r0
 802bea2:	b909      	cbnz	r1, 802bea8 <_sbrk+0xc>
 802bea4:	4903      	ldr	r1, [pc, #12]	; (802beb4 <_sbrk+0x18>)
 802bea6:	6011      	str	r1, [r2, #0]
 802bea8:	6810      	ldr	r0, [r2, #0]
 802beaa:	4403      	add	r3, r0
 802beac:	6013      	str	r3, [r2, #0]
 802beae:	4770      	bx	lr
 802beb0:	200288e0 	.word	0x200288e0
 802beb4:	200288e8 	.word	0x200288e8

0802beb8 <_init>:
 802beb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802beba:	bf00      	nop
 802bebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802bebe:	bc08      	pop	{r3}
 802bec0:	469e      	mov	lr, r3
 802bec2:	4770      	bx	lr

0802bec4 <_fini>:
 802bec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bec6:	bf00      	nop
 802bec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802beca:	bc08      	pop	{r3}
 802becc:	469e      	mov	lr, r3
 802bece:	4770      	bx	lr
