/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

// Default TypedTextDatabase
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x200b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x57fa, 0x4e8e, 0x4e, 0x61, 0x6e, 0x6f, 0x45, 0x64, 0x67, 0x65, 0x20, 0x41, 0x49, 0x7684, 0xa, 0x200b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65e0, 0x4eba, 0x673a, 0x667a, 0x6167, 0x6545, 0x969c, 0x68c0, 0x6d4b, 0x7cfb, 0x7edf, 0xa, 0xa, 0x200b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x968f, 0x7740, 0x79d1, 0x6280, 0x7684, 0x8fc5, 0x901f, 0x53d1, 0x5c55, 0xff0c, 0x65e0, 0x4eba, 0x673a, 0x7684, 0x5e94, 0x7528, 0x573a, 0xa, 0x666f, 0x65e5, 0x76ca, 0x6269, 0x5927, 0x3002, 0x7136, 0x800c, 0xff0c, 0x4e00, 0x65e6, 0x65e0, 0x4eba, 0x673a, 0x51fa, 0x73b0, 0x6545, 0x969c, 0x5e76, 0xa, 0x5760, 0x843d, 0xff0c, 0x53ef, 0x80fd, 0x4f1a, 0x9020, 0x6210, 0x4e25, 0x91cd, 0x7684, 0x4e8b, 0x6545, 0x3002, 0x56e0, 0x6b64, 0xff0c, 0x8feb, 0x5207, 0xa, 0x9700, 0x8981, 0x8bbe, 0x8ba1, 0x4e00, 0x5957, 0x9ad8, 0x6548, 0x3001, 0x53ef, 0x9760, 0x7684, 0x65e0, 0x4eba, 0x673a, 0x667a, 0x80fd, 0x6545, 0x969c, 0xa, 0x68c0, 0x6d4b, 0x7cfb, 0x7edf, 0xff0c, 0x80fd, 0x591f, 0x81ea, 0x4e3b, 0x68c0, 0x6d4b, 0x6545, 0x969c, 0xff0c, 0x5e76, 0x91c7, 0x53d6, 0x76f8, 0x5e94, 0xa, 0x5e72, 0x9884, 0x63aa, 0x65bd, 0xff0c, 0x907f, 0x514d, 0x53ef, 0x80fd, 0x4ea7, 0x751f, 0x7684, 0x4e8b, 0x6545, 0x3002, 0xa, 0x200b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x672c, 0x65e0, 0x4eba, 0x673a, 0x667a, 0x6167, 0x6545, 0x969c, 0x68c0, 0x6d4b, 0x7cfb, 0x7edf, 0x9002, 0x7528, 0x4e8e, 0x822a, 0x7a7a, 0xa, 0x9886, 0x57df, 0xff0c, 0x53ef, 0x4ee5, 0x7528, 0x4e8e, 0x5404, 0x79cd, 0x529f, 0x80fd, 0x7684, 0x65e0, 0x4eba, 0x673a, 0xff0c, 0x4f8b, 0x5982, 0x5de1, 0xa, 0x903b, 0x3001, 0x641c, 0x7d22, 0x3001, 0x6551, 0x63f4, 0x65e0, 0x4eba, 0x673a, 0xff0c, 0x4ee5, 0x53ca, 0x519b, 0x4e8b, 0x3001, 0x6c11, 0x7528, 0x7b49, 0xa, 0x9886, 0x57df, 0x7684, 0x5e94, 0x7528, 0x3002, 0x5728, 0x822a, 0x7a7a, 0x5b89, 0x5168, 0x9886, 0x57df, 0xff0c, 0x7cfb, 0x7edf, 0x80fd, 0x81ea, 0x4e3b, 0xa, 0x68c0, 0x6d4b, 0x68c0, 0x6d4b, 0x822a, 0x7a7a, 0x5668, 0x7684, 0x5f02, 0x5e38, 0x60c5, 0x51b5, 0xff0c, 0x53ca, 0x65f6, 0x91c7, 0x53d6, 0x63aa, 0x65bd, 0xa, 0x9632, 0x8303, 0x4e8b, 0x6545, 0x7684, 0x53d1, 0x751f, 0xff1b, 0x5728, 0x6c11, 0x7528, 0x9886, 0x57df, 0xff0c, 0x53ef, 0x4ee5, 0x7528, 0x4e8e, 0x641c, 0xa, 0x7d22, 0x6551, 0x63f4, 0x3001, 0x4ea4, 0x901a, 0x7ba1, 0x5236, 0x3001, 0x73af, 0x5883, 0x76d1, 0x6d4b, 0x65e0, 0x4eba, 0x673a, 0x7b49, 0x3002, 0x56e0, 0xa, 0x6b64, 0xff0c, 0x672c, 0x7cfb, 0x7edf, 0x7684, 0x5e94, 0x7528, 0x9886, 0x57df, 0x975e, 0x5e38, 0x5e7f, 0x6cdb, 0xff0c, 0x53ef, 0x4ee5, 0x6ee1, 0x8db3, 0xa, 0x4e0d, 0x540c, 0x9886, 0x57df, 0x7684, 0x9700, 0x6c42, 0xff0c, 0x4e3a, 0x793e, 0x4f1a, 0x7684, 0x53d1, 0x5c55, 0x548c, 0x5b89, 0x5168, 0x505a, 0x51fa, 0xa, 0x8d21, 0x732e, 0x3002, 0xa, 0x4e3b, 0x8981, 0x6280, 0x672f, 0x7279, 0x70b9, 0x3a, 0xa, 0xff08, 0x31, 0xff09, 0x672c, 0x7cfb, 0x7edf, 0x57fa, 0x4e8e, 0x4e, 0x61, 0x6e, 0x6f, 0x45, 0x64, 0x67, 0x65, 0x20, 0x41, 0x49, 0x20, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0xff0c, 0x5229, 0xa, 0x7528, 0x53, 0x54, 0x4d, 0x33, 0x32, 0x48, 0x35, 0x36, 0x33, 0x548c, 0x516d, 0x8f74, 0x9640, 0x87ba, 0x4eea, 0x60ef, 0x6027, 0x6d4b, 0x91cf, 0x5355, 0x5143, 0xff0c, 0xa, 0x5b9e, 0x73b0, 0x4e86, 0x65e0, 0x4eba, 0x673a, 0x7684, 0x81ea, 0x4e3b, 0x6545, 0x969c, 0x68c0, 0x6d4b, 0x529f, 0x80fd, 0x3002, 0x20, 0xa, 0xff08, 0x32, 0xff09, 0x96c6, 0x6210, 0x53, 0x54, 0x4d, 0x33, 0x32, 0x57, 0x42, 0x41, 0x35, 0x32, 0x84dd, 0x7259, 0x6a21, 0x7ec4, 0x548c, 0x65e0, 0x7ebf, 0x901a, 0xa, 0x4fe1, 0x6a21, 0x7ec4, 0xff0c, 0x5b9e, 0x73b0, 0x624b, 0x673a, 0x4e0e, 0x9065, 0x63a7, 0x5668, 0x3001, 0x65e0, 0x4eba, 0x673a, 0x4e0e, 0x9065, 0x63a7, 0xa, 0x5668, 0x7684, 0x4fe1, 0x606f, 0x4f20, 0x8f93, 0x3002, 0xa, 0xff08, 0x33, 0xff09, 0x5e94, 0x7528, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x46, 0x58, 0x4e0e, 0x53, 0x54, 0x4d, 0x33, 0x32, 0x46, 0x37, 0x8bbe, 0x8ba1, 0x9065, 0x63a7, 0xa, 0x5668, 0x7684, 0x47, 0x55, 0x49, 0x9875, 0x9762, 0xff0c, 0x4ea4, 0x4e92, 0x4e30, 0x5bcc, 0xff0c, 0x52a8, 0x753b, 0x6d41, 0x7545, 0xff0c, 0x4f7f, 0x64cd, 0xa, 0x4f5c, 0x5458, 0x53ef, 0x4ee5, 0x7b80, 0x6d01, 0x660e, 0x4e86, 0x7684, 0x638c, 0x63e1, 0x65e0, 0x4eba, 0x673a, 0x7684, 0x98de, 0x884c, 0x72b6, 0xa, 0x6001, 0x3002, 0xa, 0xff08, 0x34, 0xff09, 0x57fa, 0x4e8e, 0x53, 0x54, 0x4d, 0x33, 0x32, 0x48, 0x37, 0x34, 0x33, 0x8bbe, 0x8ba1, 0x56db, 0x65cb, 0x7ffc, 0x65e0, 0x4eba, 0x673a, 0xa, 0x98de, 0x63a7, 0xff0c, 0x5e94, 0x7528, 0x4e86, 0x610f, 0x6cd5, 0x534a, 0x5bfc, 0x4f53, 0x7684, 0x56, 0x4c, 0x35, 0x33, 0x4c, 0x30, 0x58, 0x20, 0x54, 0x4f, 0x46, 0x4f20, 0xa, 0x611f, 0x5668, 0xff0c, 0x4e3a, 0x65e0, 0x4eba, 0x673a, 0x611f, 0x77e5, 0x73af, 0x5883, 0x63d0, 0x4f9b, 0x4e86, 0x53, 0x54, 0x65b9, 0x6848, 0x3002, 0xa, 0x200b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x672c, 0x7cfb, 0x7edf, 0x5b9e, 0x73b0, 0x4e86, 0x5929, 0x7a7a, 0x7aef, 0x81ea, 0x4e3b, 0x6545, 0x969c, 0x68c0, 0x6d4b, 0xff0c, 0x4e91, 0xa, 0x7aef, 0x4fe1, 0x606f, 0x4e0a, 0x4f20, 0xff0c, 0x9065, 0x63a7, 0x7aef, 0x4fe1, 0x606f, 0x56de, 0x4f20, 0xff0c, 0x7ec4, 0x6210, 0x4e00, 0x5957, 0x65e0, 0xa, 0x4eba, 0x673a, 0x667a, 0x6167, 0x6545, 0x969c, 0x68c0, 0x6d4b, 0x7cfb, 0x7edf, 0x3002, 0x0, // @0 "?                      ??NanoEdge AI?\n?                  ???????????\n\n?        ?????????????????\n???????????????????\n???????????????????\n???????????????????\n???????????????????\n???????????????\n?       ?????????????????\n???????????????????\n???????????????????\n???????????????????\n???????????????????\n???????????????????\n???????????????????\n???????????????????\n???????????????????\n???\n??????:\n?1??????NanoEdge AI Studio??\n?STM32H563?????????????\n???????????????? \n?2???STM32WBA52????????\n???????????????????\n???????\n?3???TouchGFX?STM32F7????\n??GUI???????????????\n??????????????????\n??\n?4???STM32H743????????\n????????????VL53L0X TOF?\n??????????????ST???\n?       ?????????????????\n???????????????????\n???????????"
    0x54, 0x4f, 0x46, 0x20, 0x2, 0x20, 0x6d, 0x0, // @709 "TOF <> m"
    0x4e00, 0x98de, 0x51b2, 0x5929, 0x961f, 0x27, 0x73, 0x20, 0x44, 0x72, 0x6f, 0x6e, 0x65, 0x0, // @717 "?????'s Drone"
    0x7b2c, 0x516d, 0x5c4a, 0x5d4c, 0x5165, 0x5f0f, 0x7ade, 0x8d5b, 0xa, 0x53c2, 0x8d5b, 0x4f5c, 0x54c1, 0x0, // @731 "????????\n????"
    0x901f, 0x5ea6, 0x3a, 0x2, 0x6d, 0x2f, 0x73, 0x0, // @745 "??:<>m/s"
    0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x0, // @753 "Designed by"
    0x7535, 0x6c60, 0x20, 0x20, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x0, // @765 "??  Battery"
    0x5173, 0x4e8e, 0x20, 0x20, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x0, // @777 "??  About"
    0x5f00, 0x59cb, 0x20, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x0, // @787 "??  Start"
    0x68c0, 0x6d4b, 0x5230, 0x81ea, 0x7531, 0x843d, 0x4f53, 0xff01, 0x0, // @797 "????????"
    0x20, 0x2d, 0x34, 0x36, 0x64, 0x42, 0x6d, 0x0, // @806 " -46dBm"
    0x2, 0x0, // @814 "<>"
    0x5411, 0x4e0a, 0x62d6, 0x52a8, 0x4ee5, 0x6d4f, 0x89c8, 0x0, // @816 "???????"
    0x6868, 0x53f6, 0x5f02, 0x5e38, 0x632f, 0x52a8, 0xff01, 0x0, // @824 "???????"
    0x2d, 0x34, 0x31, 0x64, 0x42, 0x6d, 0x0, // @832 "-41dBm"
    0x2d, 0x34, 0x32, 0x64, 0x42, 0x6d, 0x0, // @839 "-42dBm"
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x21, 0x0, // @846 "ERROR!"
    0x7535, 0x91cf, 0x3a, 0x38, 0x34, 0x25, 0x0, // @853 "??:84%"
    0x7535, 0x91cf, 0xff1a, 0x38, 0x34, 0x25, 0x0, // @860 "???84%"
    0xa, 0xa, 0x4e3b, 0x20, 0x9875, 0x0, // @867 "\n\n? ?"
    0xa, 0xa, 0x5173, 0x20, 0x4e8e, 0x0, // @873 "\n\n? ?"
    0xa, 0xa, 0x5f00, 0x20, 0x59cb, 0x0, // @879 "\n\n? ?"
    0xa, 0xa, 0x7535, 0x20, 0x6c60, 0x0, // @885 "\n\n? ?"
    0x524d, 0x65b9, 0x969c, 0x788d, 0xff01, 0x0, // @891 "?????"
    0x72b6, 0x6001, 0xff1a, 0x653e, 0x7535, 0x0, // @897 "?????"
    0x72b6, 0x6001, 0xff1a, 0x6b63, 0x5e38, 0x0, // @903 "?????"
    0x4fe1, 0x53f7, 0x5f3a, 0x5ea6, 0x0, // @909 "????"
    0x7535, 0x538b, 0x76d1, 0x6d4b, 0x0, // @914 "????"
    0x30, 0x2e, 0x30, 0x0, // @919 "0.0"
    0x5237, 0x20, 0x65b0, 0x0, // @923 "? ?"
    0x5df2, 0x8fde, 0x63a5, 0x0, // @927 "???"
    0x65ad, 0x20, 0x5f00, 0x0, // @931 "? ?"
    0x72b6, 0x6001, 0x0, // @935 "??"
    0x9501, 0x5b9a, 0x0, // @938 "??"
    0x221e, 0x0 // @941 "?"
};

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const uint32_t indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

// Array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

// Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
