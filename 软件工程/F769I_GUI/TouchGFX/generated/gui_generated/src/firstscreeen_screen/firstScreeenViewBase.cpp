/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/firstscreeen_screen/firstScreeenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

firstScreeenViewBase::firstScreeenViewBase() :
    backGroung_fadeInEndedCallback(this, &firstScreeenViewBase::backGroung_fadeInEndedCallbackHandler),
    sT_LOGO_fadeInEndedCallback(this, &firstScreeenViewBase::sT_LOGO_fadeInEndedCallbackHandler),
    frontGroung_fadeInEndedCallback(this, &firstScreeenViewBase::frontGroung_fadeInEndedCallbackHandler),
    showGlassEndedCallback(this, &firstScreeenViewBase::showGlassEndedCallbackHandler)
{
    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    backGround.setPosition(0, 0, 800, 480);
    backGround.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    backGround.setAlpha(0);
    add(backGround);

    STLOGO.setXY(192, 75);
    STLOGO.setBitmap(touchgfx::Bitmap(BITMAP_ST_LOGO_ID));
    STLOGO.setAlpha(0);
    add(STLOGO);

    frontGround.setPosition(0, 0, 800, 480);
    frontGround.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    frontGround.setAlpha(0);
    add(frontGround);

    glassless.setXY(0, 0);
    glassless.setBitmap(touchgfx::Bitmap(BITMAP_GLASSLESS_ID));
    glassless.setAlpha(0);
    add(glassless);
}

firstScreeenViewBase::~firstScreeenViewBase()
{

}

void firstScreeenViewBase::setupScreen()
{
    transitionBegins();
}

void firstScreeenViewBase::transitionBegins()
{
    //backGroung_fadeIn
    //When screen transition begins fade backGround
    //Fade backGround to alpha:255 with LinearIn easing in 500 ms (30 Ticks)
    backGround.clearFadeAnimationEndedAction();
    backGround.startFadeAnimation(255, 30, touchgfx::EasingEquations::linearEaseIn);
    backGround.setFadeAnimationEndedAction(backGroung_fadeInEndedCallback);
}

void firstScreeenViewBase::backGroung_fadeInEndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::Box>& comp)
{
    //ST_LOGO_fadeIn
    //When backGroung_fadeIn completed fade STLOGO
    //Fade STLOGO to alpha:255 with LinearIn easing in 800 ms (48 Ticks)
    STLOGO.clearFadeAnimationEndedAction();
    STLOGO.startFadeAnimation(255, 48, touchgfx::EasingEquations::linearEaseIn);
    STLOGO.setFadeAnimationEndedAction(sT_LOGO_fadeInEndedCallback);
}

void firstScreeenViewBase::sT_LOGO_fadeInEndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::Image>& comp)
{
    //frontGroung_fadeIn
    //When ST_LOGO_fadeIn completed fade frontGround
    //Fade frontGround to alpha:255 with LinearIn easing in 500 ms (30 Ticks)
    frontGround.clearFadeAnimationEndedAction();
    frontGround.setFadeAnimationDelay(48);
    frontGround.startFadeAnimation(255, 30, touchgfx::EasingEquations::linearEaseIn);
    frontGround.setFadeAnimationEndedAction(frontGroung_fadeInEndedCallback);
}

void firstScreeenViewBase::frontGroung_fadeInEndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::Box>& comp)
{
    //showGlass
    //When frontGroung_fadeIn completed fade glassless
    //Fade glassless to alpha:255 with LinearIn easing in 500 ms (30 Ticks)
    glassless.clearFadeAnimationEndedAction();
    glassless.startFadeAnimation(255, 30, touchgfx::EasingEquations::linearEaseIn);
    glassless.setFadeAnimationEndedAction(showGlassEndedCallback);
}

void firstScreeenViewBase::showGlassEndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::Image>& comp)
{
    //lock
    //When showGlass completed change screen to lockScreen
    //Go to lockScreen with no screen transition
    application().gotolockScreenScreenNoTransition();
}
