/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/aboutscreen_screen/aboutScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

aboutScreenViewBase::aboutScreenViewBase() :
    buttonCallback(this, &aboutScreenViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &aboutScreenViewBase::sliderValueChangedCallbackHandler)
{
    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    backGround.setPosition(0, 0, 800, 480);
    backGround.setColor(touchgfx::Color::getColorFromRGB(227, 234, 241));
    add(backGround);

    backPicture.setXY(0, 0);
    backPicture.setBitmap(touchgfx::Bitmap(BITMAP_ABOUT_ID));
    add(backPicture);

    tch_LOGO.setXY(316, 446);
    tch_LOGO.setBitmap(touchgfx::Bitmap(BITMAP_TCHGFX_LOGO_ID));
    add(tch_LOGO);

    arrow.setXY(104, 139);
    arrow.setBitmaps(BITMAP_ARROW1_ID, BITMAP_ARROW3_ID);
    arrow.setUpdateTicksInterval(24);
    arrow.startAnimation(false, true, true);
    add(arrow);

    sliderDrone.setXY(22, 119);
    sliderDrone.setBitmaps(touchgfx::Bitmap(BITMAP_SLIDERBAR_ID), touchgfx::Bitmap(BITMAP_SLIDERBAR_ID), touchgfx::Bitmap(BITMAP_FLY_ID));
    sliderDrone.setupVerticalSlider(16, 12, 0, 0, 140);
    sliderDrone.setValueRange(0, 100);
    sliderDrone.setValue(0);
    sliderDrone.setNewValueCallback(sliderValueChangedCallback);
    add(sliderDrone);

    embedded.setXY(610, 431);
    embedded.setColor(touchgfx::Color::getColorFromRGB(133, 133, 133));
    embedded.setLinespacing(0);
    embedded.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UV2T));
    add(embedded);

    design.setXY(356, 423);
    design.setColor(touchgfx::Color::getColorFromRGB(133, 133, 133));
    design.setLinespacing(0);
    design.setTypedText(touchgfx::TypedText(T___SINGLEUSE_N86C));
    add(design);

    noteText.setXY(77, 384);
    noteText.setColor(touchgfx::Color::getColorFromRGB(168, 168, 168));
    noteText.setLinespacing(0);
    noteText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EIL5));
    add(noteText);

    textContainer.setPosition(281, 132, 482, 263);
    introduceText.setXY(14, 8);
    introduceText.setColor(touchgfx::Color::getColorFromRGB(61, 66, 66));
    introduceText.setLinespacing(0);
    introduceText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_P0EB));
    textContainer.add(introduceText);

    add(textContainer);

    About.setXY(40, 51);
    About.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    About.setLinespacing(0);
    About.setTypedText(touchgfx::TypedText(T___SINGLEUSE_U4E7));
    add(About);

    returnBut.setXY(0, 400);
    returnBut.setBitmaps(touchgfx::Bitmap(BITMAP_RETURN1_ID), touchgfx::Bitmap(BITMAP_RETURN2_ID));
    returnBut.setAction(buttonCallback);
    add(returnBut);
}

aboutScreenViewBase::~aboutScreenViewBase()
{

}

void aboutScreenViewBase::setupScreen()
{

}

void aboutScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &returnBut)
    {
        //returnMain
        //When returnBut clicked change screen to mainScreen
        //Go to mainScreen with screen transition towards West
        application().gotomainScreenScreenCoverTransitionWest();
    }
}

void aboutScreenViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &sliderDrone)
    {
        //slideText
        //When sliderDrone value changed execute C++ code
        //Execute C++ code
        int16_t yPot = 8 - value * 9;
        introduceText.setY(yPot);
        textContainer.invalidate();
        //arrowFade
        //When sliderDrone value changed fade arrow
        //Fade arrow to alpha:0 with LinearIn easing in 200 ms (12 Ticks)
        arrow.clearFadeAnimationEndedAction();
        arrow.startFadeAnimation(0, 12, touchgfx::EasingEquations::linearEaseIn);
        //noteFade
        //When sliderDrone value changed fade noteText
        //Fade noteText to alpha:0 with LinearIn easing in 300 ms (18 Ticks)
        noteText.clearFadeAnimationEndedAction();
        noteText.startFadeAnimation(0, 18, touchgfx::EasingEquations::linearEaseIn);
    }
}
