
H563NanoEdgeAI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a314  08000250  08000250  00010250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015170  0800a568  0800a568  0001a568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f6d8  0801f6d8  0003005c  2**0
                  CONTENTS
  4 .ARM          00000008  0801f6d8  0801f6d8  0002f6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f6e0  0801f6e0  0003005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f6e0  0801f6e0  0002f6e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f6e4  0801f6e4  0002f6e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0801f6e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a0c  2000005c  0801f744  0003005c  2**2
                  ALLOC
 10 ._user_heap_stack 00003000  20000a68  0801f744  00030a68  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0003005c  2**0
                  CONTENTS, READONLY
 12 .comment      000000bc  00000000  00000000  00030092  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e56b  00000000  00000000  0003014e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e86  00000000  00000000  0003e6b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a68  00000000  00000000  00040540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007eb  00000000  00000000  00040fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000303b8  00000000  00000000  00041793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010462  00000000  00000000  00071b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012ca03  00000000  00000000  00081fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032e0  00000000  00000000  001ae9b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  001b1c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000005c 	.word	0x2000005c
 800026c:	00000000 	.word	0x00000000
 8000270:	0800a54c 	.word	0x0800a54c

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000060 	.word	0x20000060
 800028c:	0800a54c 	.word	0x0800a54c

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2f>:
 8000b9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba4:	bf24      	itt	cs
 8000ba6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000baa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bae:	d90d      	bls.n	8000bcc <__aeabi_d2f+0x30>
 8000bb0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bbc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc4:	bf08      	it	eq
 8000bc6:	f020 0001 	biceq.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd0:	d121      	bne.n	8000c16 <__aeabi_d2f+0x7a>
 8000bd2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd6:	bfbc      	itt	lt
 8000bd8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	4770      	bxlt	lr
 8000bde:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be6:	f1c2 0218 	rsb	r2, r2, #24
 8000bea:	f1c2 0c20 	rsb	ip, r2, #32
 8000bee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf6:	bf18      	it	ne
 8000bf8:	f040 0001 	orrne.w	r0, r0, #1
 8000bfc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c08:	ea40 000c 	orr.w	r0, r0, ip
 8000c0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c14:	e7cc      	b.n	8000bb0 <__aeabi_d2f+0x14>
 8000c16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1a:	d107      	bne.n	8000c2c <__aeabi_d2f+0x90>
 8000c1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c20:	bf1e      	ittt	ne
 8000c22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2a:	4770      	bxne	lr
 8000c2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__aeabi_uldivmod>:
 8000c3c:	b953      	cbnz	r3, 8000c54 <__aeabi_uldivmod+0x18>
 8000c3e:	b94a      	cbnz	r2, 8000c54 <__aeabi_uldivmod+0x18>
 8000c40:	2900      	cmp	r1, #0
 8000c42:	bf08      	it	eq
 8000c44:	2800      	cmpeq	r0, #0
 8000c46:	bf1c      	itt	ne
 8000c48:	f04f 31ff 	movne.w	r1, #4294967295
 8000c4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c50:	f000 b982 	b.w	8000f58 <__aeabi_idiv0>
 8000c54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c5c:	f000 f806 	bl	8000c6c <__udivmoddi4>
 8000c60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c68:	b004      	add	sp, #16
 8000c6a:	4770      	bx	lr

08000c6c <__udivmoddi4>:
 8000c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c70:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000c72:	460d      	mov	r5, r1
 8000c74:	4604      	mov	r4, r0
 8000c76:	460f      	mov	r7, r1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d146      	bne.n	8000d0a <__udivmoddi4+0x9e>
 8000c7c:	428a      	cmp	r2, r1
 8000c7e:	4694      	mov	ip, r2
 8000c80:	d95e      	bls.n	8000d40 <__udivmoddi4+0xd4>
 8000c82:	fab2 f382 	clz	r3, r2
 8000c86:	b143      	cbz	r3, 8000c9a <__udivmoddi4+0x2e>
 8000c88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c8c:	f1c3 0220 	rsb	r2, r3, #32
 8000c90:	409f      	lsls	r7, r3
 8000c92:	409c      	lsls	r4, r3
 8000c94:	fa20 f202 	lsr.w	r2, r0, r2
 8000c98:	4317      	orrs	r7, r2
 8000c9a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c9e:	fa1f f58c 	uxth.w	r5, ip
 8000ca2:	0c22      	lsrs	r2, r4, #16
 8000ca4:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ca8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cac:	fb01 f005 	mul.w	r0, r1, r5
 8000cb0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cb4:	4290      	cmp	r0, r2
 8000cb6:	d908      	bls.n	8000cca <__udivmoddi4+0x5e>
 8000cb8:	eb1c 0202 	adds.w	r2, ip, r2
 8000cbc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cc0:	d202      	bcs.n	8000cc8 <__udivmoddi4+0x5c>
 8000cc2:	4290      	cmp	r0, r2
 8000cc4:	f200 8134 	bhi.w	8000f30 <__udivmoddi4+0x2c4>
 8000cc8:	4639      	mov	r1, r7
 8000cca:	1a12      	subs	r2, r2, r0
 8000ccc:	b2a4      	uxth	r4, r4
 8000cce:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cd2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cd6:	fb00 f505 	mul.w	r5, r0, r5
 8000cda:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cde:	42a5      	cmp	r5, r4
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x88>
 8000ce2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x86>
 8000cec:	42a5      	cmp	r5, r4
 8000cee:	f200 8119 	bhi.w	8000f24 <__udivmoddi4+0x2b8>
 8000cf2:	4610      	mov	r0, r2
 8000cf4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cf8:	1b64      	subs	r4, r4, r5
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	b11e      	cbz	r6, 8000d06 <__udivmoddi4+0x9a>
 8000cfe:	40dc      	lsrs	r4, r3
 8000d00:	2300      	movs	r3, #0
 8000d02:	e9c6 4300 	strd	r4, r3, [r6]
 8000d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0xb4>
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f000 80fc 	beq.w	8000f0c <__udivmoddi4+0x2a0>
 8000d14:	2100      	movs	r1, #0
 8000d16:	e9c6 0500 	strd	r0, r5, [r6]
 8000d1a:	4608      	mov	r0, r1
 8000d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d20:	fab3 f183 	clz	r1, r3
 8000d24:	2900      	cmp	r1, #0
 8000d26:	d14c      	bne.n	8000dc2 <__udivmoddi4+0x156>
 8000d28:	42ab      	cmp	r3, r5
 8000d2a:	f0c0 80f2 	bcc.w	8000f12 <__udivmoddi4+0x2a6>
 8000d2e:	4282      	cmp	r2, r0
 8000d30:	f240 80ef 	bls.w	8000f12 <__udivmoddi4+0x2a6>
 8000d34:	4608      	mov	r0, r1
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	d0e5      	beq.n	8000d06 <__udivmoddi4+0x9a>
 8000d3a:	e9c6 4700 	strd	r4, r7, [r6]
 8000d3e:	e7e2      	b.n	8000d06 <__udivmoddi4+0x9a>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xd8>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f382 	clz	r3, r2
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f040 809f 	bne.w	8000e8c <__udivmoddi4+0x220>
 8000d4e:	1a8a      	subs	r2, r1, r2
 8000d50:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fbb2 f5fe 	udiv	r5, r2, lr
 8000d5e:	fb0e 2015 	mls	r0, lr, r5, r2
 8000d62:	0c22      	lsrs	r2, r4, #16
 8000d64:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d68:	fb07 f005 	mul.w	r0, r7, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90f      	bls.n	8000d90 <__udivmoddi4+0x124>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d78:	bf2c      	ite	cs
 8000d7a:	f04f 0901 	movcs.w	r9, #1
 8000d7e:	f04f 0900 	movcc.w	r9, #0
 8000d82:	4290      	cmp	r0, r2
 8000d84:	d903      	bls.n	8000d8e <__udivmoddi4+0x122>
 8000d86:	f1b9 0f00 	cmp.w	r9, #0
 8000d8a:	f000 80ce 	beq.w	8000f2a <__udivmoddi4+0x2be>
 8000d8e:	4645      	mov	r5, r8
 8000d90:	1a12      	subs	r2, r2, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d98:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d9c:	fb00 f707 	mul.w	r7, r0, r7
 8000da0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da4:	42a7      	cmp	r7, r4
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x14e>
 8000da8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dac:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db0:	d202      	bcs.n	8000db8 <__udivmoddi4+0x14c>
 8000db2:	42a7      	cmp	r7, r4
 8000db4:	f200 80b3 	bhi.w	8000f1e <__udivmoddi4+0x2b2>
 8000db8:	4610      	mov	r0, r2
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dc0:	e79c      	b.n	8000cfc <__udivmoddi4+0x90>
 8000dc2:	f1c1 0420 	rsb	r4, r1, #32
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 fc01 	lsl.w	ip, r5, r1
 8000dcc:	fa22 f704 	lsr.w	r7, r2, r4
 8000dd0:	40e5      	lsrs	r5, r4
 8000dd2:	408a      	lsls	r2, r1
 8000dd4:	431f      	orrs	r7, r3
 8000dd6:	fa20 f304 	lsr.w	r3, r0, r4
 8000dda:	4088      	lsls	r0, r1
 8000ddc:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000de0:	ea43 030c 	orr.w	r3, r3, ip
 8000de4:	fa1f fc87 	uxth.w	ip, r7
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb5 fef8 	udiv	lr, r5, r8
 8000df0:	fb08 551e 	mls	r5, r8, lr, r5
 8000df4:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000df8:	fb0e f90c 	mul.w	r9, lr, ip
 8000dfc:	45a9      	cmp	r9, r5
 8000dfe:	d90e      	bls.n	8000e1e <__udivmoddi4+0x1b2>
 8000e00:	197d      	adds	r5, r7, r5
 8000e02:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e06:	bf2c      	ite	cs
 8000e08:	f04f 0b01 	movcs.w	fp, #1
 8000e0c:	f04f 0b00 	movcc.w	fp, #0
 8000e10:	45a9      	cmp	r9, r5
 8000e12:	d903      	bls.n	8000e1c <__udivmoddi4+0x1b0>
 8000e14:	f1bb 0f00 	cmp.w	fp, #0
 8000e18:	f000 808d 	beq.w	8000f36 <__udivmoddi4+0x2ca>
 8000e1c:	46d6      	mov	lr, sl
 8000e1e:	eba5 0509 	sub.w	r5, r5, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb5 f3f8 	udiv	r3, r5, r8
 8000e2a:	fb08 5513 	mls	r5, r8, r3, r5
 8000e2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e32:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000e36:	45ac      	cmp	ip, r5
 8000e38:	d906      	bls.n	8000e48 <__udivmoddi4+0x1dc>
 8000e3a:	197d      	adds	r5, r7, r5
 8000e3c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e40:	d201      	bcs.n	8000e46 <__udivmoddi4+0x1da>
 8000e42:	45ac      	cmp	ip, r5
 8000e44:	d87e      	bhi.n	8000f44 <__udivmoddi4+0x2d8>
 8000e46:	4643      	mov	r3, r8
 8000e48:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000e4c:	eba5 050c 	sub.w	r5, r5, ip
 8000e50:	fba3 9802 	umull	r9, r8, r3, r2
 8000e54:	4545      	cmp	r5, r8
 8000e56:	46ce      	mov	lr, r9
 8000e58:	46c4      	mov	ip, r8
 8000e5a:	d302      	bcc.n	8000e62 <__udivmoddi4+0x1f6>
 8000e5c:	d106      	bne.n	8000e6c <__udivmoddi4+0x200>
 8000e5e:	4548      	cmp	r0, r9
 8000e60:	d204      	bcs.n	8000e6c <__udivmoddi4+0x200>
 8000e62:	3b01      	subs	r3, #1
 8000e64:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e68:	eb68 0c07 	sbc.w	ip, r8, r7
 8000e6c:	2e00      	cmp	r6, #0
 8000e6e:	d06f      	beq.n	8000f50 <__udivmoddi4+0x2e4>
 8000e70:	ebb0 020e 	subs.w	r2, r0, lr
 8000e74:	eb65 050c 	sbc.w	r5, r5, ip
 8000e78:	40ca      	lsrs	r2, r1
 8000e7a:	fa05 f404 	lsl.w	r4, r5, r4
 8000e7e:	40cd      	lsrs	r5, r1
 8000e80:	4618      	mov	r0, r3
 8000e82:	4314      	orrs	r4, r2
 8000e84:	2100      	movs	r1, #0
 8000e86:	e9c6 4500 	strd	r4, r5, [r6]
 8000e8a:	e73c      	b.n	8000d06 <__udivmoddi4+0x9a>
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	f1c3 0220 	rsb	r2, r3, #32
 8000e94:	4099      	lsls	r1, r3
 8000e96:	409c      	lsls	r4, r3
 8000e98:	40d5      	lsrs	r5, r2
 8000e9a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ea2:	fa1f f78c 	uxth.w	r7, ip
 8000ea6:	fbb5 f0fe 	udiv	r0, r5, lr
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	fb0e 5510 	mls	r5, lr, r0, r5
 8000eb0:	0c11      	lsrs	r1, r2, #16
 8000eb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb6:	fb00 f507 	mul.w	r5, r0, r7
 8000eba:	428d      	cmp	r5, r1
 8000ebc:	d90e      	bls.n	8000edc <__udivmoddi4+0x270>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	bf2c      	ite	cs
 8000ec8:	f04f 0901 	movcs.w	r9, #1
 8000ecc:	f04f 0900 	movcc.w	r9, #0
 8000ed0:	428d      	cmp	r5, r1
 8000ed2:	d902      	bls.n	8000eda <__udivmoddi4+0x26e>
 8000ed4:	f1b9 0f00 	cmp.w	r9, #0
 8000ed8:	d031      	beq.n	8000f3e <__udivmoddi4+0x2d2>
 8000eda:	4640      	mov	r0, r8
 8000edc:	1b49      	subs	r1, r1, r5
 8000ede:	b292      	uxth	r2, r2
 8000ee0:	fbb1 f5fe 	udiv	r5, r1, lr
 8000ee4:	fb0e 1115 	mls	r1, lr, r5, r1
 8000ee8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eec:	fb05 f107 	mul.w	r1, r5, r7
 8000ef0:	4291      	cmp	r1, r2
 8000ef2:	d907      	bls.n	8000f04 <__udivmoddi4+0x298>
 8000ef4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ef8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000efc:	d201      	bcs.n	8000f02 <__udivmoddi4+0x296>
 8000efe:	4291      	cmp	r1, r2
 8000f00:	d823      	bhi.n	8000f4a <__udivmoddi4+0x2de>
 8000f02:	4645      	mov	r5, r8
 8000f04:	1a52      	subs	r2, r2, r1
 8000f06:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f0a:	e726      	b.n	8000d5a <__udivmoddi4+0xee>
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e6f9      	b.n	8000d06 <__udivmoddi4+0x9a>
 8000f12:	1a84      	subs	r4, r0, r2
 8000f14:	eb65 0203 	sbc.w	r2, r5, r3
 8000f18:	2001      	movs	r0, #1
 8000f1a:	4617      	mov	r7, r2
 8000f1c:	e70b      	b.n	8000d36 <__udivmoddi4+0xca>
 8000f1e:	4464      	add	r4, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74a      	b.n	8000dba <__udivmoddi4+0x14e>
 8000f24:	4464      	add	r4, ip
 8000f26:	3802      	subs	r0, #2
 8000f28:	e6e4      	b.n	8000cf4 <__udivmoddi4+0x88>
 8000f2a:	3d02      	subs	r5, #2
 8000f2c:	4462      	add	r2, ip
 8000f2e:	e72f      	b.n	8000d90 <__udivmoddi4+0x124>
 8000f30:	3902      	subs	r1, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e6c9      	b.n	8000cca <__udivmoddi4+0x5e>
 8000f36:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f3a:	443d      	add	r5, r7
 8000f3c:	e76f      	b.n	8000e1e <__udivmoddi4+0x1b2>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	e7cb      	b.n	8000edc <__udivmoddi4+0x270>
 8000f44:	3b02      	subs	r3, #2
 8000f46:	443d      	add	r5, r7
 8000f48:	e77e      	b.n	8000e48 <__udivmoddi4+0x1dc>
 8000f4a:	3d02      	subs	r5, #2
 8000f4c:	4462      	add	r2, ip
 8000f4e:	e7d9      	b.n	8000f04 <__udivmoddi4+0x298>
 8000f50:	4618      	mov	r0, r3
 8000f52:	4631      	mov	r1, r6
 8000f54:	e6d7      	b.n	8000d06 <__udivmoddi4+0x9a>
 8000f56:	bf00      	nop

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <IIC_SDA>:
#define IIC_PIN_PORT GPIOB

#include "main.h"

void IIC_SDA(unsigned char Value)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(IIC_PIN_PORT, IIC_SDA_PIN, Value);
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6e:	4803      	ldr	r0, [pc, #12]	; (8000f7c <IIC_SDA+0x20>)
 8000f70:	f001 f9ca 	bl	8002308 <HAL_GPIO_WritePin>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	42020400 	.word	0x42020400

08000f80 <IIC_SCL>:

void IIC_SCL(unsigned char Value)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(IIC_PIN_PORT, IIC_SCL_PIN, Value);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f92:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <IIC_SCL+0x20>)
 8000f94:	f001 f9b8 	bl	8002308 <HAL_GPIO_WritePin>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	42020400 	.word	0x42020400

08000fa4 <IIC_R_SDA>:

uint8_t IIC_R_SDA(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
	uint8_t Value;
	Value = HAL_GPIO_ReadPin(IIC_PIN_PORT, IIC_SDA_PIN);
 8000faa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <IIC_R_SDA+0x20>)
 8000fb0:	f001 f992 	bl	80022d8 <HAL_GPIO_ReadPin>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	71fb      	strb	r3, [r7, #7]
	return Value;
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	42020400 	.word	0x42020400

08000fc8 <IIC_Start>:

void IIC_Start(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	IIC_SDA(1);
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f7ff ffc5 	bl	8000f5c <IIC_SDA>
	IIC_SCL(1);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f7ff ffd4 	bl	8000f80 <IIC_SCL>
	IIC_SDA(0);
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f7ff ffbf 	bl	8000f5c <IIC_SDA>
	IIC_SCL(0);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f7ff ffce 	bl	8000f80 <IIC_SCL>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <IIC_Stop>:

void IIC_Stop(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	IIC_SCL(0);
 8000fec:	2000      	movs	r0, #0
 8000fee:	f7ff ffc7 	bl	8000f80 <IIC_SCL>
	IIC_SDA(0);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f7ff ffb2 	bl	8000f5c <IIC_SDA>
	IIC_SCL(1);
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f7ff ffc1 	bl	8000f80 <IIC_SCL>
	IIC_SDA(1);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f7ff ffac 	bl	8000f5c <IIC_SDA>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <IIC_WriteByte>:

void IIC_WriteByte(uint8_t Byte)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	73fb      	strb	r3, [r7, #15]

	for(i = 0; i < 8; i++)
 8001016:	2300      	movs	r3, #0
 8001018:	73fb      	strb	r3, [r7, #15]
 800101a:	e015      	b.n	8001048 <IIC_WriteByte+0x40>
	{
		IIC_SDA(Byte & (0x80 >> i));
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	2280      	movs	r2, #128	; 0x80
 8001020:	fa42 f303 	asr.w	r3, r2, r3
 8001024:	b25a      	sxtb	r2, r3
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	4013      	ands	r3, r2
 800102c:	b25b      	sxtb	r3, r3
 800102e:	b2db      	uxtb	r3, r3
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff93 	bl	8000f5c <IIC_SDA>
		IIC_SCL(1);
 8001036:	2001      	movs	r0, #1
 8001038:	f7ff ffa2 	bl	8000f80 <IIC_SCL>
		IIC_SCL(0);
 800103c:	2000      	movs	r0, #0
 800103e:	f7ff ff9f 	bl	8000f80 <IIC_SCL>
	for(i = 0; i < 8; i++)
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	3301      	adds	r3, #1
 8001046:	73fb      	strb	r3, [r7, #15]
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	2b07      	cmp	r3, #7
 800104c:	d9e6      	bls.n	800101c <IIC_WriteByte+0x14>
	}
}
 800104e:	bf00      	nop
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <IIC_ReadByte>:

uint8_t IIC_ReadByte(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
	uint8_t i, Byte = 0x00;
 800105e:	2300      	movs	r3, #0
 8001060:	71bb      	strb	r3, [r7, #6]

	IIC_SDA(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f7ff ff7a 	bl	8000f5c <IIC_SDA>

	for(i = 0; i < 8; i++)
 8001068:	2300      	movs	r3, #0
 800106a:	71fb      	strb	r3, [r7, #7]
 800106c:	e017      	b.n	800109e <IIC_ReadByte+0x46>
	{
		IIC_SCL(1);
 800106e:	2001      	movs	r0, #1
 8001070:	f7ff ff86 	bl	8000f80 <IIC_SCL>
		if(IIC_R_SDA() == 1)
 8001074:	f7ff ff96 	bl	8000fa4 <IIC_R_SDA>
 8001078:	4603      	mov	r3, r0
 800107a:	2b01      	cmp	r3, #1
 800107c:	d109      	bne.n	8001092 <IIC_ReadByte+0x3a>
			Byte |= (0x80 >> i);
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2280      	movs	r2, #128	; 0x80
 8001082:	fa42 f303 	asr.w	r3, r2, r3
 8001086:	b25a      	sxtb	r2, r3
 8001088:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800108c:	4313      	orrs	r3, r2
 800108e:	b25b      	sxtb	r3, r3
 8001090:	71bb      	strb	r3, [r7, #6]
		IIC_SCL(0);
 8001092:	2000      	movs	r0, #0
 8001094:	f7ff ff74 	bl	8000f80 <IIC_SCL>
	for(i = 0; i < 8; i++)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	3301      	adds	r3, #1
 800109c:	71fb      	strb	r3, [r7, #7]
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2b07      	cmp	r3, #7
 80010a2:	d9e4      	bls.n	800106e <IIC_ReadByte+0x16>
	}

	return Byte;
 80010a4:	79bb      	ldrb	r3, [r7, #6]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <IIC_SendACK>:

void IIC_SendACK(uint8_t ACK)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	71fb      	strb	r3, [r7, #7]
	IIC_SDA(ACK);
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff4e 	bl	8000f5c <IIC_SDA>
	IIC_SCL(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f7ff ff5d 	bl	8000f80 <IIC_SCL>
	IIC_SCL(0);
 80010c6:	2000      	movs	r0, #0
 80010c8:	f7ff ff5a 	bl	8000f80 <IIC_SCL>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <IIC_ReadACK>:

uint8_t IIC_ReadACK(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
	uint8_t ACK = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	71fb      	strb	r3, [r7, #7]
	IIC_SDA(1);
 80010de:	2001      	movs	r0, #1
 80010e0:	f7ff ff3c 	bl	8000f5c <IIC_SDA>
	IIC_SCL(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f7ff ff4b 	bl	8000f80 <IIC_SCL>
	ACK = IIC_R_SDA();
 80010ea:	f7ff ff5b 	bl	8000fa4 <IIC_R_SDA>
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
	IIC_SCL(0);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f7ff ff44 	bl	8000f80 <IIC_SCL>
	return ACK;
 80010f8:	79fb      	ldrb	r3, [r7, #7]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <MPU6050_WriteReg>:
#include "MPU6050_Reg.h"

#define MPU6050_ADDRESS		0xD0

void MPU6050_WriteReg(uint8_t RegAddress, uint8_t Data)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	460a      	mov	r2, r1
 800110c:	71fb      	strb	r3, [r7, #7]
 800110e:	4613      	mov	r3, r2
 8001110:	71bb      	strb	r3, [r7, #6]
	IIC_Start();
 8001112:	f7ff ff59 	bl	8000fc8 <IIC_Start>

	IIC_WriteByte(MPU6050_ADDRESS);
 8001116:	20d0      	movs	r0, #208	; 0xd0
 8001118:	f7ff ff76 	bl	8001008 <IIC_WriteByte>
	IIC_ReadACK();
 800111c:	f7ff ffda 	bl	80010d4 <IIC_ReadACK>

	IIC_WriteByte(RegAddress);
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff70 	bl	8001008 <IIC_WriteByte>
	IIC_ReadACK();
 8001128:	f7ff ffd4 	bl	80010d4 <IIC_ReadACK>

	IIC_WriteByte(Data);
 800112c:	79bb      	ldrb	r3, [r7, #6]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ff6a 	bl	8001008 <IIC_WriteByte>
	IIC_ReadACK();
 8001134:	f7ff ffce 	bl	80010d4 <IIC_ReadACK>

	IIC_Stop();
 8001138:	f7ff ff56 	bl	8000fe8 <IIC_Stop>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <MPU6050_ReadReg>:

uint8_t MPU6050_ReadReg(uint8_t RegAddress)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	uint8_t Data;

	IIC_Start();
 800114e:	f7ff ff3b 	bl	8000fc8 <IIC_Start>

	IIC_WriteByte(MPU6050_ADDRESS);
 8001152:	20d0      	movs	r0, #208	; 0xd0
 8001154:	f7ff ff58 	bl	8001008 <IIC_WriteByte>
	IIC_ReadACK();
 8001158:	f7ff ffbc 	bl	80010d4 <IIC_ReadACK>

	IIC_WriteByte(RegAddress);
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff52 	bl	8001008 <IIC_WriteByte>
	IIC_ReadACK();
 8001164:	f7ff ffb6 	bl	80010d4 <IIC_ReadACK>

	IIC_Start();
 8001168:	f7ff ff2e 	bl	8000fc8 <IIC_Start>

	IIC_WriteByte(MPU6050_ADDRESS | 0x01);
 800116c:	20d1      	movs	r0, #209	; 0xd1
 800116e:	f7ff ff4b 	bl	8001008 <IIC_WriteByte>
	IIC_ReadACK();
 8001172:	f7ff ffaf 	bl	80010d4 <IIC_ReadACK>

	Data = IIC_ReadByte();
 8001176:	f7ff ff6f 	bl	8001058 <IIC_ReadByte>
 800117a:	4603      	mov	r3, r0
 800117c:	73fb      	strb	r3, [r7, #15]
	IIC_SendACK(1);
 800117e:	2001      	movs	r0, #1
 8001180:	f7ff ff95 	bl	80010ae <IIC_SendACK>

	IIC_Stop();
 8001184:	f7ff ff30 	bl	8000fe8 <IIC_Stop>

	return Data;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <MPU6050_Init>:

void MPU6050_Init(void)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	af00      	add	r7, sp, #0
	MPU6050_WriteReg(MPU6050_PWR_MGMT_1, 0x01);
 8001196:	2101      	movs	r1, #1
 8001198:	206b      	movs	r0, #107	; 0x6b
 800119a:	f7ff ffb2 	bl	8001102 <MPU6050_WriteReg>
	MPU6050_WriteReg(MPU6050_PWR_MGMT_2, 0x00);
 800119e:	2100      	movs	r1, #0
 80011a0:	206c      	movs	r0, #108	; 0x6c
 80011a2:	f7ff ffae 	bl	8001102 <MPU6050_WriteReg>
	MPU6050_WriteReg(MPU6050_SMPLRT_DIV, 0x09);
 80011a6:	2109      	movs	r1, #9
 80011a8:	2019      	movs	r0, #25
 80011aa:	f7ff ffaa 	bl	8001102 <MPU6050_WriteReg>
	MPU6050_WriteReg(MPU6050_CONFIG, 0x06);
 80011ae:	2106      	movs	r1, #6
 80011b0:	201a      	movs	r0, #26
 80011b2:	f7ff ffa6 	bl	8001102 <MPU6050_WriteReg>
	MPU6050_WriteReg(MPU6050_GYRO_CONFIG, 0x18);
 80011b6:	2118      	movs	r1, #24
 80011b8:	201b      	movs	r0, #27
 80011ba:	f7ff ffa2 	bl	8001102 <MPU6050_WriteReg>
	MPU6050_WriteReg(MPU6050_ACCEL_CONFIG, 0x18);
 80011be:	2118      	movs	r1, #24
 80011c0:	201c      	movs	r0, #28
 80011c2:	f7ff ff9e 	bl	8001102 <MPU6050_WriteReg>
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}

080011ca <MPU6050_GetData>:
	return MPU6050_ReadReg(MPU6050_WHO_AM_I);
}

void MPU6050_GetData(int16_t *AccX, int16_t *AccY, int16_t *AccZ,
						int16_t *GyroX, int16_t *GyroY, int16_t *GyroZ)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	603b      	str	r3, [r7, #0]
	uint8_t DataH, DataL;

	DataH = MPU6050_ReadReg(MPU6050_ACCEL_XOUT_H);
 80011d8:	203b      	movs	r0, #59	; 0x3b
 80011da:	f7ff ffb3 	bl	8001144 <MPU6050_ReadReg>
 80011de:	4603      	mov	r3, r0
 80011e0:	75fb      	strb	r3, [r7, #23]
	DataL = MPU6050_ReadReg(MPU6050_ACCEL_XOUT_L);
 80011e2:	203c      	movs	r0, #60	; 0x3c
 80011e4:	f7ff ffae 	bl	8001144 <MPU6050_ReadReg>
 80011e8:	4603      	mov	r3, r0
 80011ea:	75bb      	strb	r3, [r7, #22]
	*AccX = (DataH << 8) | DataL;
 80011ec:	7dfb      	ldrb	r3, [r7, #23]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	7dbb      	ldrb	r3, [r7, #22]
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	801a      	strh	r2, [r3, #0]

	DataH = MPU6050_ReadReg(MPU6050_ACCEL_YOUT_H);
 80011fe:	203d      	movs	r0, #61	; 0x3d
 8001200:	f7ff ffa0 	bl	8001144 <MPU6050_ReadReg>
 8001204:	4603      	mov	r3, r0
 8001206:	75fb      	strb	r3, [r7, #23]
	DataL = MPU6050_ReadReg(MPU6050_ACCEL_YOUT_L);
 8001208:	203e      	movs	r0, #62	; 0x3e
 800120a:	f7ff ff9b 	bl	8001144 <MPU6050_ReadReg>
 800120e:	4603      	mov	r3, r0
 8001210:	75bb      	strb	r3, [r7, #22]
	*AccY = (DataH << 8) | DataL;
 8001212:	7dfb      	ldrb	r3, [r7, #23]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b21a      	sxth	r2, r3
 8001218:	7dbb      	ldrb	r3, [r7, #22]
 800121a:	b21b      	sxth	r3, r3
 800121c:	4313      	orrs	r3, r2
 800121e:	b21a      	sxth	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	801a      	strh	r2, [r3, #0]

	DataH = MPU6050_ReadReg(MPU6050_ACCEL_ZOUT_H);
 8001224:	203f      	movs	r0, #63	; 0x3f
 8001226:	f7ff ff8d 	bl	8001144 <MPU6050_ReadReg>
 800122a:	4603      	mov	r3, r0
 800122c:	75fb      	strb	r3, [r7, #23]
	DataL = MPU6050_ReadReg(MPU6050_ACCEL_ZOUT_L);
 800122e:	2040      	movs	r0, #64	; 0x40
 8001230:	f7ff ff88 	bl	8001144 <MPU6050_ReadReg>
 8001234:	4603      	mov	r3, r0
 8001236:	75bb      	strb	r3, [r7, #22]
	*AccZ = (DataH << 8) | DataL;
 8001238:	7dfb      	ldrb	r3, [r7, #23]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b21a      	sxth	r2, r3
 800123e:	7dbb      	ldrb	r3, [r7, #22]
 8001240:	b21b      	sxth	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b21a      	sxth	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	801a      	strh	r2, [r3, #0]

	DataH = MPU6050_ReadReg(MPU6050_GYRO_XOUT_H);
 800124a:	2043      	movs	r0, #67	; 0x43
 800124c:	f7ff ff7a 	bl	8001144 <MPU6050_ReadReg>
 8001250:	4603      	mov	r3, r0
 8001252:	75fb      	strb	r3, [r7, #23]
	DataL = MPU6050_ReadReg(MPU6050_GYRO_XOUT_L);
 8001254:	2044      	movs	r0, #68	; 0x44
 8001256:	f7ff ff75 	bl	8001144 <MPU6050_ReadReg>
 800125a:	4603      	mov	r3, r0
 800125c:	75bb      	strb	r3, [r7, #22]
	*GyroX = (DataH << 8) | DataL;
 800125e:	7dfb      	ldrb	r3, [r7, #23]
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	b21a      	sxth	r2, r3
 8001264:	7dbb      	ldrb	r3, [r7, #22]
 8001266:	b21b      	sxth	r3, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	b21a      	sxth	r2, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	801a      	strh	r2, [r3, #0]

	DataH = MPU6050_ReadReg(MPU6050_GYRO_YOUT_H);
 8001270:	2045      	movs	r0, #69	; 0x45
 8001272:	f7ff ff67 	bl	8001144 <MPU6050_ReadReg>
 8001276:	4603      	mov	r3, r0
 8001278:	75fb      	strb	r3, [r7, #23]
	DataL = MPU6050_ReadReg(MPU6050_GYRO_YOUT_L);
 800127a:	2046      	movs	r0, #70	; 0x46
 800127c:	f7ff ff62 	bl	8001144 <MPU6050_ReadReg>
 8001280:	4603      	mov	r3, r0
 8001282:	75bb      	strb	r3, [r7, #22]
	*GyroY = (DataH << 8) | DataL;
 8001284:	7dfb      	ldrb	r3, [r7, #23]
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	b21a      	sxth	r2, r3
 800128a:	7dbb      	ldrb	r3, [r7, #22]
 800128c:	b21b      	sxth	r3, r3
 800128e:	4313      	orrs	r3, r2
 8001290:	b21a      	sxth	r2, r3
 8001292:	6a3b      	ldr	r3, [r7, #32]
 8001294:	801a      	strh	r2, [r3, #0]

	DataH = MPU6050_ReadReg(MPU6050_GYRO_ZOUT_H);
 8001296:	2047      	movs	r0, #71	; 0x47
 8001298:	f7ff ff54 	bl	8001144 <MPU6050_ReadReg>
 800129c:	4603      	mov	r3, r0
 800129e:	75fb      	strb	r3, [r7, #23]
	DataL = MPU6050_ReadReg(MPU6050_GYRO_ZOUT_L);
 80012a0:	2048      	movs	r0, #72	; 0x48
 80012a2:	f7ff ff4f 	bl	8001144 <MPU6050_ReadReg>
 80012a6:	4603      	mov	r3, r0
 80012a8:	75bb      	strb	r3, [r7, #22]
	*GyroZ = (DataH << 8) | DataL;
 80012aa:	7dfb      	ldrb	r3, [r7, #23]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	7dbb      	ldrb	r3, [r7, #22]
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	4313      	orrs	r3, r2
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	801a      	strh	r2, [r3, #0]
}
 80012bc:	bf00      	nop
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <MX_GPIO_Init>:
     PA14(JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PA15(JTDI)   ------> DEBUG_JTDI
     PB3(JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08e      	sub	sp, #56	; 0x38
 80012c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012da:	4b6b      	ldr	r3, [pc, #428]	; (8001488 <MX_GPIO_Init+0x1c4>)
 80012dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012e0:	4a69      	ldr	r2, [pc, #420]	; (8001488 <MX_GPIO_Init+0x1c4>)
 80012e2:	f043 0310 	orr.w	r3, r3, #16
 80012e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012ea:	4b67      	ldr	r3, [pc, #412]	; (8001488 <MX_GPIO_Init+0x1c4>)
 80012ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012f0:	f003 0310 	and.w	r3, r3, #16
 80012f4:	623b      	str	r3, [r7, #32]
 80012f6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f8:	4b63      	ldr	r3, [pc, #396]	; (8001488 <MX_GPIO_Init+0x1c4>)
 80012fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012fe:	4a62      	ldr	r2, [pc, #392]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001308:	4b5f      	ldr	r3, [pc, #380]	; (8001488 <MX_GPIO_Init+0x1c4>)
 800130a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001316:	4b5c      	ldr	r3, [pc, #368]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800131c:	4a5a      	ldr	r2, [pc, #360]	; (8001488 <MX_GPIO_Init+0x1c4>)
 800131e:	f043 0320 	orr.w	r3, r3, #32
 8001322:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001326:	4b58      	ldr	r3, [pc, #352]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800132c:	f003 0320 	and.w	r3, r3, #32
 8001330:	61bb      	str	r3, [r7, #24]
 8001332:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001334:	4b54      	ldr	r3, [pc, #336]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800133a:	4a53      	ldr	r2, [pc, #332]	; (8001488 <MX_GPIO_Init+0x1c4>)
 800133c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001340:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001344:	4b50      	ldr	r3, [pc, #320]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800134a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	4b4d      	ldr	r3, [pc, #308]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001358:	4a4b      	ldr	r2, [pc, #300]	; (8001488 <MX_GPIO_Init+0x1c4>)
 800135a:	f043 0302 	orr.w	r3, r3, #2
 800135e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001362:	4b49      	ldr	r3, [pc, #292]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001370:	4b45      	ldr	r3, [pc, #276]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001376:	4a44      	ldr	r2, [pc, #272]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001378:	f043 0308 	orr.w	r3, r3, #8
 800137c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001380:	4b41      	ldr	r3, [pc, #260]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001382:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800138e:	4b3e      	ldr	r3, [pc, #248]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001394:	4a3c      	ldr	r2, [pc, #240]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800139a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800139e:	4b3a      	ldr	r3, [pc, #232]	; (8001488 <MX_GPIO_Init+0x1c4>)
 80013a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ac:	4b36      	ldr	r3, [pc, #216]	; (8001488 <MX_GPIO_Init+0x1c4>)
 80013ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013b2:	4a35      	ldr	r2, [pc, #212]	; (8001488 <MX_GPIO_Init+0x1c4>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013bc:	4b32      	ldr	r3, [pc, #200]	; (8001488 <MX_GPIO_Init+0x1c4>)
 80013be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2110      	movs	r1, #16
 80013ce:	482f      	ldr	r0, [pc, #188]	; (800148c <MX_GPIO_Init+0x1c8>)
 80013d0:	f000 ff9a 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2101      	movs	r1, #1
 80013d8:	482d      	ldr	r0, [pc, #180]	; (8001490 <MX_GPIO_Init+0x1cc>)
 80013da:	f000 ff95 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED4_RED_Pin|LED3_RED_Pin, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	2118      	movs	r1, #24
 80013e2:	482c      	ldr	r0, [pc, #176]	; (8001494 <MX_GPIO_Init+0x1d0>)
 80013e4:	f000 ff90 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCL_Pin|SDA_Pin, GPIO_PIN_SET);
 80013e8:	2201      	movs	r2, #1
 80013ea:	f44f 7140 	mov.w	r1, #768	; 0x300
 80013ee:	4828      	ldr	r0, [pc, #160]	; (8001490 <MX_GPIO_Init+0x1cc>)
 80013f0:	f000 ff8a 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80013f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013fa:	4b27      	ldr	r3, [pc, #156]	; (8001498 <MX_GPIO_Init+0x1d4>)
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001406:	4619      	mov	r1, r3
 8001408:	4824      	ldr	r0, [pc, #144]	; (800149c <MX_GPIO_Init+0x1d8>)
 800140a:	f000 fe13 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_YELLOW_Pin;
 800140e:	2310      	movs	r3, #16
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001412:	2301      	movs	r3, #1
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001422:	4619      	mov	r1, r3
 8001424:	4819      	ldr	r0, [pc, #100]	; (800148c <MX_GPIO_Init+0x1c8>)
 8001426:	f000 fe05 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_GREEN_Pin;
 800142a:	2301      	movs	r3, #1
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GREEN_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143e:	4619      	mov	r1, r3
 8001440:	4813      	ldr	r0, [pc, #76]	; (8001490 <MX_GPIO_Init+0x1cc>)
 8001442:	f000 fdf7 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LED4_RED_Pin|LED3_RED_Pin;
 8001446:	2318      	movs	r3, #24
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	2301      	movs	r3, #1
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145a:	4619      	mov	r1, r3
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <MX_GPIO_Init+0x1d0>)
 800145e:	f000 fde9 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8001462:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001468:	2311      	movs	r3, #17
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800146c:	2301      	movs	r3, #1
 800146e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001478:	4619      	mov	r1, r3
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_GPIO_Init+0x1cc>)
 800147c:	f000 fdda 	bl	8002034 <HAL_GPIO_Init>

}
 8001480:	bf00      	nop
 8001482:	3738      	adds	r7, #56	; 0x38
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	44020c00 	.word	0x44020c00
 800148c:	42021400 	.word	0x42021400
 8001490:	42020400 	.word	0x42020400
 8001494:	42021800 	.word	0x42021800
 8001498:	10110000 	.word	0x10110000
 800149c:	42020800 	.word	0x42020800

080014a0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80014a0:	b5b0      	push	{r4, r5, r7, lr}
 80014a2:	b08c      	sub	sp, #48	; 0x30
 80014a4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80014a6:	f000 fc41 	bl	8001d2c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80014aa:	f000 f899 	bl	80015e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80014ae:	f7ff ff09 	bl	80012c4 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 80014b2:	f000 fa7b 	bl	80019ac <MX_LPUART1_UART_Init>
	MX_USART3_UART_Init();
 80014b6:	f000 fac3 	bl	8001a40 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	MPU6050_Init();
 80014ba:	f7ff fe6a 	bl	8001192 <MPU6050_Init>
	neai_classification_init(knowledge_buffer);
 80014be:	483d      	ldr	r0, [pc, #244]	; (80015b4 <main+0x114>)
 80014c0:	f007 fcfe 	bl	8008ec0 <neai_classification_init>
	int count[5] = { 0 };
 80014c4:	f107 0318 	add.w	r3, r7, #24
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
	int check[5] = { 4, 4, 6, 6, 2 };
 80014d4:	4b38      	ldr	r3, [pc, #224]	; (80015b8 <main+0x118>)
 80014d6:	1d3c      	adds	r4, r7, #4
 80014d8:	461d      	mov	r5, r3
 80014da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014de:	682b      	ldr	r3, [r5, #0]
 80014e0:	6023      	str	r3, [r4, #0]
		 * 7：前方障�?
		 * 8：电量不�?
		 */

		//读取数据，伴随黄灯微�?
		HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin,
 80014e2:	2200      	movs	r2, #0
 80014e4:	2110      	movs	r1, #16
 80014e6:	4835      	ldr	r0, [pc, #212]	; (80015bc <main+0x11c>)
 80014e8:	f000 ff0e 	bl	8002308 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		fill_input_user_buffer();
 80014ec:	f000 f8de 	bl	80016ac <fill_input_user_buffer>

		//print_input_user_buffer(); //调试时取消注释，运行时需要注释以加�?�循�?

		//使用NEAI�?测，并依据分类结果执行不同语�?

		neai_classification(input_user_buffer, output_class_buffer, &id_class);
 80014f0:	4a33      	ldr	r2, [pc, #204]	; (80015c0 <main+0x120>)
 80014f2:	4934      	ldr	r1, [pc, #208]	; (80015c4 <main+0x124>)
 80014f4:	4834      	ldr	r0, [pc, #208]	; (80015c8 <main+0x128>)
 80014f6:	f007 fde1 	bl	80090bc <neai_classification>
		if (1) {
			count[id_class] = count[id_class] + 1;
 80014fa:	4b31      	ldr	r3, [pc, #196]	; (80015c0 <main+0x120>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	3330      	adds	r3, #48	; 0x30
 8001502:	443b      	add	r3, r7
 8001504:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8001508:	4a2d      	ldr	r2, [pc, #180]	; (80015c0 <main+0x120>)
 800150a:	8812      	ldrh	r2, [r2, #0]
 800150c:	4611      	mov	r1, r2
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	008b      	lsls	r3, r1, #2
 8001512:	3330      	adds	r3, #48	; 0x30
 8001514:	443b      	add	r3, r7
 8001516:	f843 2c18 	str.w	r2, [r3, #-24]
			if (count[id_class] == check[id_class]) {
 800151a:	4b29      	ldr	r3, [pc, #164]	; (80015c0 <main+0x120>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	3330      	adds	r3, #48	; 0x30
 8001522:	443b      	add	r3, r7
 8001524:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001528:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <main+0x120>)
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	3330      	adds	r3, #48	; 0x30
 8001530:	443b      	add	r3, r7
 8001532:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001536:	429a      	cmp	r2, r3
 8001538:	d1d3      	bne.n	80014e2 <main+0x42>
				sprintf(buffer, "%hu", id_class);
 800153a:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <main+0x120>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	4922      	ldr	r1, [pc, #136]	; (80015cc <main+0x12c>)
 8001542:	4823      	ldr	r0, [pc, #140]	; (80015d0 <main+0x130>)
 8001544:	f008 f92a 	bl	800979c <siprintf>
				HAL_UART_Transmit(&hlpuart1, (uint8_t*) buffer, strlen(buffer),
 8001548:	4821      	ldr	r0, [pc, #132]	; (80015d0 <main+0x130>)
 800154a:	f7fe fea1 	bl	8000290 <strlen>
 800154e:	4603      	mov	r3, r0
 8001550:	b29a      	uxth	r2, r3
 8001552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001556:	491e      	ldr	r1, [pc, #120]	; (80015d0 <main+0x130>)
 8001558:	481e      	ldr	r0, [pc, #120]	; (80015d4 <main+0x134>)
 800155a:	f006 ff09 	bl	8008370 <HAL_UART_Transmit>
						1000);
				HAL_UART_Transmit(&hlpuart1, (uint8_t*) "\n", strlen("\n"),
 800155e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001562:	2201      	movs	r2, #1
 8001564:	491c      	ldr	r1, [pc, #112]	; (80015d8 <main+0x138>)
 8001566:	481b      	ldr	r0, [pc, #108]	; (80015d4 <main+0x134>)
 8001568:	f006 ff02 	bl	8008370 <HAL_UART_Transmit>
						1000);
				HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer),
 800156c:	4818      	ldr	r0, [pc, #96]	; (80015d0 <main+0x130>)
 800156e:	f7fe fe8f 	bl	8000290 <strlen>
 8001572:	4603      	mov	r3, r0
 8001574:	b29a      	uxth	r2, r3
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	4915      	ldr	r1, [pc, #84]	; (80015d0 <main+0x130>)
 800157c:	4817      	ldr	r0, [pc, #92]	; (80015dc <main+0x13c>)
 800157e:	f006 fef7 	bl	8008370 <HAL_UART_Transmit>
						1000);
				HAL_UART_Transmit(&huart3, (uint8_t*) "\n", strlen("\n"), 1000);
 8001582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001586:	2201      	movs	r2, #1
 8001588:	4913      	ldr	r1, [pc, #76]	; (80015d8 <main+0x138>)
 800158a:	4814      	ldr	r0, [pc, #80]	; (80015dc <main+0x13c>)
 800158c:	f006 fef0 	bl	8008370 <HAL_UART_Transmit>
				for (int i = 0; i < 5; i++)
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001594:	e009      	b.n	80015aa <main+0x10a>
					count[i] = 0;
 8001596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	3330      	adds	r3, #48	; 0x30
 800159c:	443b      	add	r3, r7
 800159e:	2200      	movs	r2, #0
 80015a0:	f843 2c18 	str.w	r2, [r3, #-24]
				for (int i = 0; i < 5; i++)
 80015a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a6:	3301      	adds	r3, #1
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	ddf2      	ble.n	8001596 <main+0xf6>
		HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin,
 80015b0:	e797      	b.n	80014e2 <main+0x42>
 80015b2:	bf00      	nop
 80015b4:	0800a5c8 	.word	0x0800a5c8
 80015b8:	0800a5b0 	.word	0x0800a5b0
 80015bc:	42021400 	.word	0x42021400
 80015c0:	20000098 	.word	0x20000098
 80015c4:	2000054c 	.word	0x2000054c
 80015c8:	2000009c 	.word	0x2000009c
 80015cc:	0800a5a8 	.word	0x0800a5a8
 80015d0:	20000084 	.word	0x20000084
 80015d4:	20000560 	.word	0x20000560
 80015d8:	0800a5ac 	.word	0x0800a5ac
 80015dc:	200005f4 	.word	0x200005f4

080015e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b09c      	sub	sp, #112	; 0x70
 80015e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80015e6:	f107 0320 	add.w	r3, r7, #32
 80015ea:	2250      	movs	r2, #80	; 0x50
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f008 f8f4 	bl	80097dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80015f4:	f107 0308 	add.w	r3, r7, #8
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
 8001604:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001606:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <SystemClock_Config+0xc8>)
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	4a27      	ldr	r2, [pc, #156]	; (80016a8 <SystemClock_Config+0xc8>)
 800160c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001610:	6113      	str	r3, [r2, #16]
 8001612:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <SystemClock_Config+0xc8>)
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800161e:	bf00      	nop
 8001620:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <SystemClock_Config+0xc8>)
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b08      	cmp	r3, #8
 800162a:	d1f9      	bne.n	8001620 <SystemClock_Config+0x40>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800162c:	2301      	movs	r3, #1
 800162e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 8001630:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001636:	2302      	movs	r3, #2
 8001638:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800163a:	2303      	movs	r3, #3
 800163c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800163e:	2304      	movs	r3, #4
 8001640:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 250;
 8001642:	23fa      	movs	r3, #250	; 0xfa
 8001644:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8001646:	2302      	movs	r3, #2
 8001648:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800164a:	2302      	movs	r3, #2
 800164c:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800164e:	2302      	movs	r3, #2
 8001650:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8001652:	2304      	movs	r3, #4
 8001654:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8001656:	2300      	movs	r3, #0
 8001658:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800165e:	f107 0320 	add.w	r3, r7, #32
 8001662:	4618      	mov	r0, r3
 8001664:	f000 fe68 	bl	8002338 <HAL_RCC_OscConfig>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <SystemClock_Config+0x92>
		Error_Handler();
 800166e:	f000 f8b5 	bl	80017dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001672:	231f      	movs	r3, #31
 8001674:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001676:	2303      	movs	r3, #3
 8001678:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	2105      	movs	r1, #5
 8001690:	4618      	mov	r0, r3
 8001692:	f001 fa89 	bl	8002ba8 <HAL_RCC_ClockConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <SystemClock_Config+0xc0>
		Error_Handler();
 800169c:	f000 f89e 	bl	80017dc <Error_Handler>
	}
}
 80016a0:	bf00      	nop
 80016a2:	3770      	adds	r7, #112	; 0x70
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	44020800 	.word	0x44020800

080016ac <fill_input_user_buffer>:

/* USER CODE BEGIN 4 */
void fill_input_user_buffer(void) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af02      	add	r7, sp, #8
	for (int i = 0; i < DATA_INPUT_USER; i++) {
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	e07a      	b.n	80017ae <fill_input_user_buffer+0x102>
		MPU6050_GetData(&AX, &AY, &AZ, &GX, &GY, &GZ);
 80016b8:	4b41      	ldr	r3, [pc, #260]	; (80017c0 <fill_input_user_buffer+0x114>)
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	4b41      	ldr	r3, [pc, #260]	; (80017c4 <fill_input_user_buffer+0x118>)
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	4b41      	ldr	r3, [pc, #260]	; (80017c8 <fill_input_user_buffer+0x11c>)
 80016c2:	4a42      	ldr	r2, [pc, #264]	; (80017cc <fill_input_user_buffer+0x120>)
 80016c4:	4942      	ldr	r1, [pc, #264]	; (80017d0 <fill_input_user_buffer+0x124>)
 80016c6:	4843      	ldr	r0, [pc, #268]	; (80017d4 <fill_input_user_buffer+0x128>)
 80016c8:	f7ff fd7f 	bl	80011ca <MPU6050_GetData>
		HAL_Delay(8);
 80016cc:	2008      	movs	r0, #8
 80016ce:	f000 fba9 	bl	8001e24 <HAL_Delay>
		input_user_buffer[AXIS_NUMBER * i + 0] = AX;
 80016d2:	4b40      	ldr	r3, [pc, #256]	; (80017d4 <fill_input_user_buffer+0x128>)
 80016d4:	f9b3 1000 	ldrsh.w	r1, [r3]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	ee07 1a90 	vmov	s15, r1
 80016e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ea:	4a3b      	ldr	r2, [pc, #236]	; (80017d8 <fill_input_user_buffer+0x12c>)
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	edc3 7a00 	vstr	s15, [r3]
		input_user_buffer[AXIS_NUMBER * i + 1] = AY;
 80016f4:	4b36      	ldr	r3, [pc, #216]	; (80017d0 <fill_input_user_buffer+0x124>)
 80016f6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	3301      	adds	r3, #1
 8001706:	ee07 1a90 	vmov	s15, r1
 800170a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800170e:	4a32      	ldr	r2, [pc, #200]	; (80017d8 <fill_input_user_buffer+0x12c>)
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	edc3 7a00 	vstr	s15, [r3]
		input_user_buffer[AXIS_NUMBER * i + 2] = AZ;
 8001718:	4b2c      	ldr	r3, [pc, #176]	; (80017cc <fill_input_user_buffer+0x120>)
 800171a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	4413      	add	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	3302      	adds	r3, #2
 800172a:	ee07 1a90 	vmov	s15, r1
 800172e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001732:	4a29      	ldr	r2, [pc, #164]	; (80017d8 <fill_input_user_buffer+0x12c>)
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	edc3 7a00 	vstr	s15, [r3]
		input_user_buffer[AXIS_NUMBER * i + 3] = GX;
 800173c:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <fill_input_user_buffer+0x11c>)
 800173e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	3303      	adds	r3, #3
 800174e:	ee07 1a90 	vmov	s15, r1
 8001752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001756:	4a20      	ldr	r2, [pc, #128]	; (80017d8 <fill_input_user_buffer+0x12c>)
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	edc3 7a00 	vstr	s15, [r3]
		input_user_buffer[AXIS_NUMBER * i + 4] = GY;
 8001760:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <fill_input_user_buffer+0x118>)
 8001762:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	3304      	adds	r3, #4
 8001772:	ee07 1a90 	vmov	s15, r1
 8001776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177a:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <fill_input_user_buffer+0x12c>)
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	edc3 7a00 	vstr	s15, [r3]
		input_user_buffer[AXIS_NUMBER * i + 5] = GZ;
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <fill_input_user_buffer+0x114>)
 8001786:	f9b3 1000 	ldrsh.w	r1, [r3]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	3305      	adds	r3, #5
 8001796:	ee07 1a90 	vmov	s15, r1
 800179a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800179e:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <fill_input_user_buffer+0x12c>)
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < DATA_INPUT_USER; i++) {
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3301      	adds	r3, #1
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b31      	cmp	r3, #49	; 0x31
 80017b2:	dd81      	ble.n	80016b8 <fill_input_user_buffer+0xc>
	}
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000082 	.word	0x20000082
 80017c4:	20000080 	.word	0x20000080
 80017c8:	2000007e 	.word	0x2000007e
 80017cc:	2000007c 	.word	0x2000007c
 80017d0:	2000007a 	.word	0x2000007a
 80017d4:	20000078 	.word	0x20000078
 80017d8:	2000009c 	.word	0x2000009c

080017dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e0:	b672      	cpsid	i
}
 80017e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017e4:	e7fe      	b.n	80017e4 <Error_Handler+0x8>

080017e6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <NMI_Handler+0x4>

080017fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <HardFault_Handler+0x4>

08001800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <MemManage_Handler+0x4>

08001806 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <BusFault_Handler+0x4>

0800180c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <UsageFault_Handler+0x4>

08001812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001840:	f000 fad0 	bl	8001de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}

08001848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001850:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <_sbrk+0x5c>)
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <_sbrk+0x60>)
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800185c:	4b13      	ldr	r3, [pc, #76]	; (80018ac <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <_sbrk+0x64>)
 8001866:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <_sbrk+0x68>)
 8001868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	429a      	cmp	r2, r3
 8001876:	d207      	bcs.n	8001888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001878:	f007 ffb8 	bl	80097ec <__errno>
 800187c:	4603      	mov	r3, r0
 800187e:	220c      	movs	r2, #12
 8001880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
 8001886:	e009      	b.n	800189c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <_sbrk+0x64>)
 8001898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200a0000 	.word	0x200a0000
 80018a8:	00002000 	.word	0x00002000
 80018ac:	2000055c 	.word	0x2000055c
 80018b0:	20000a68 	.word	0x20000a68

080018b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018ba:	4b35      	ldr	r3, [pc, #212]	; (8001990 <SystemInit+0xdc>)
 80018bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018c0:	4a33      	ldr	r2, [pc, #204]	; (8001990 <SystemInit+0xdc>)
 80018c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80018ca:	4b32      	ldr	r3, [pc, #200]	; (8001994 <SystemInit+0xe0>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80018d0:	4b30      	ldr	r3, [pc, #192]	; (8001994 <SystemInit+0xe0>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80018d6:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <SystemInit+0xe0>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80018dc:	4b2d      	ldr	r3, [pc, #180]	; (8001994 <SystemInit+0xe0>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	492c      	ldr	r1, [pc, #176]	; (8001994 <SystemInit+0xe0>)
 80018e2:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <SystemInit+0xe4>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80018e8:	4b2a      	ldr	r3, [pc, #168]	; (8001994 <SystemInit+0xe0>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 80018ee:	4b29      	ldr	r3, [pc, #164]	; (8001994 <SystemInit+0xe0>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80018f4:	4b27      	ldr	r3, [pc, #156]	; (8001994 <SystemInit+0xe0>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80018fa:	4b26      	ldr	r3, [pc, #152]	; (8001994 <SystemInit+0xe0>)
 80018fc:	4a27      	ldr	r2, [pc, #156]	; (800199c <SystemInit+0xe8>)
 80018fe:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <SystemInit+0xe0>)
 8001902:	2200      	movs	r2, #0
 8001904:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001906:	4b23      	ldr	r3, [pc, #140]	; (8001994 <SystemInit+0xe0>)
 8001908:	4a24      	ldr	r2, [pc, #144]	; (800199c <SystemInit+0xe8>)
 800190a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800190c:	4b21      	ldr	r3, [pc, #132]	; (8001994 <SystemInit+0xe0>)
 800190e:	2200      	movs	r2, #0
 8001910:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <SystemInit+0xe0>)
 8001914:	4a21      	ldr	r2, [pc, #132]	; (800199c <SystemInit+0xe8>)
 8001916:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001918:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <SystemInit+0xe0>)
 800191a:	2200      	movs	r2, #0
 800191c:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800191e:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <SystemInit+0xe0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a1c      	ldr	r2, [pc, #112]	; (8001994 <SystemInit+0xe0>)
 8001924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001928:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800192a:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <SystemInit+0xe0>)
 800192c:	2200      	movs	r2, #0
 800192e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001930:	4b17      	ldr	r3, [pc, #92]	; (8001990 <SystemInit+0xdc>)
 8001932:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001936:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001938:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <SystemInit+0xec>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001940:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8001948:	d003      	beq.n	8001952 <SystemInit+0x9e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001950:	d117      	bne.n	8001982 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001952:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <SystemInit+0xec>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d005      	beq.n	800196a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <SystemInit+0xec>)
 8001960:	4a10      	ldr	r2, [pc, #64]	; (80019a4 <SystemInit+0xf0>)
 8001962:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <SystemInit+0xec>)
 8001966:	4a10      	ldr	r2, [pc, #64]	; (80019a8 <SystemInit+0xf4>)
 8001968:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <SystemInit+0xec>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <SystemInit+0xec>)
 8001970:	f043 0302 	orr.w	r3, r3, #2
 8001974:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <SystemInit+0xec>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	4a09      	ldr	r2, [pc, #36]	; (80019a0 <SystemInit+0xec>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	61d3      	str	r3, [r2, #28]
  }
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00
 8001994:	44020c00 	.word	0x44020c00
 8001998:	eae2eae3 	.word	0xeae2eae3
 800199c:	01010280 	.word	0x01010280
 80019a0:	40022000 	.word	0x40022000
 80019a4:	08192a3b 	.word	0x08192a3b
 80019a8:	4c5d6e7f 	.word	0x4c5d6e7f

080019ac <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80019b0:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <MX_LPUART1_UART_Init+0x8c>)
 80019b2:	4a22      	ldr	r2, [pc, #136]	; (8001a3c <MX_LPUART1_UART_Init+0x90>)
 80019b4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80019b6:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <MX_LPUART1_UART_Init+0x8c>)
 80019b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019bc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019be:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <MX_LPUART1_UART_Init+0x8c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80019c4:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <MX_LPUART1_UART_Init+0x8c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80019ca:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <MX_LPUART1_UART_Init+0x8c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80019d0:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <MX_LPUART1_UART_Init+0x8c>)
 80019d2:	220c      	movs	r2, #12
 80019d4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <MX_LPUART1_UART_Init+0x8c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019dc:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <MX_LPUART1_UART_Init+0x8c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <MX_LPUART1_UART_Init+0x8c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <MX_LPUART1_UART_Init+0x8c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80019ee:	4812      	ldr	r0, [pc, #72]	; (8001a38 <MX_LPUART1_UART_Init+0x8c>)
 80019f0:	f006 fc6e 	bl	80082d0 <HAL_UART_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80019fa:	f7ff feef 	bl	80017dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019fe:	2100      	movs	r1, #0
 8001a00:	480d      	ldr	r0, [pc, #52]	; (8001a38 <MX_LPUART1_UART_Init+0x8c>)
 8001a02:	f007 f993 	bl	8008d2c <HAL_UARTEx_SetTxFifoThreshold>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001a0c:	f7ff fee6 	bl	80017dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a10:	2100      	movs	r1, #0
 8001a12:	4809      	ldr	r0, [pc, #36]	; (8001a38 <MX_LPUART1_UART_Init+0x8c>)
 8001a14:	f007 f9c8 	bl	8008da8 <HAL_UARTEx_SetRxFifoThreshold>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001a1e:	f7ff fedd 	bl	80017dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001a22:	4805      	ldr	r0, [pc, #20]	; (8001a38 <MX_LPUART1_UART_Init+0x8c>)
 8001a24:	f007 f949 	bl	8008cba <HAL_UARTEx_DisableFifoMode>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001a2e:	f7ff fed5 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000560 	.word	0x20000560
 8001a3c:	44002400 	.word	0x44002400

08001a40 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a44:	4b25      	ldr	r3, [pc, #148]	; (8001adc <MX_USART3_UART_Init+0x9c>)
 8001a46:	4a26      	ldr	r2, [pc, #152]	; (8001ae0 <MX_USART3_UART_Init+0xa0>)
 8001a48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a4a:	4b24      	ldr	r3, [pc, #144]	; (8001adc <MX_USART3_UART_Init+0x9c>)
 8001a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a52:	4b22      	ldr	r3, [pc, #136]	; (8001adc <MX_USART3_UART_Init+0x9c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a58:	4b20      	ldr	r3, [pc, #128]	; (8001adc <MX_USART3_UART_Init+0x9c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a5e:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <MX_USART3_UART_Init+0x9c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a64:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <MX_USART3_UART_Init+0x9c>)
 8001a66:	220c      	movs	r2, #12
 8001a68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	; (8001adc <MX_USART3_UART_Init+0x9c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8001a70:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <MX_USART3_UART_Init+0x9c>)
 8001a72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a76:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <MX_USART3_UART_Init+0x9c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a7e:	4b17      	ldr	r3, [pc, #92]	; (8001adc <MX_USART3_UART_Init+0x9c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 8001a84:	4b15      	ldr	r3, [pc, #84]	; (8001adc <MX_USART3_UART_Init+0x9c>)
 8001a86:	2202      	movs	r2, #2
 8001a88:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8001a8a:	4b14      	ldr	r3, [pc, #80]	; (8001adc <MX_USART3_UART_Init+0x9c>)
 8001a8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a92:	4812      	ldr	r0, [pc, #72]	; (8001adc <MX_USART3_UART_Init+0x9c>)
 8001a94:	f006 fc1c 	bl	80082d0 <HAL_UART_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_USART3_UART_Init+0x62>
  {
    Error_Handler();
 8001a9e:	f7ff fe9d 	bl	80017dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	480d      	ldr	r0, [pc, #52]	; (8001adc <MX_USART3_UART_Init+0x9c>)
 8001aa6:	f007 f941 	bl	8008d2c <HAL_UARTEx_SetTxFifoThreshold>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_USART3_UART_Init+0x74>
  {
    Error_Handler();
 8001ab0:	f7ff fe94 	bl	80017dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4809      	ldr	r0, [pc, #36]	; (8001adc <MX_USART3_UART_Init+0x9c>)
 8001ab8:	f007 f976 	bl	8008da8 <HAL_UARTEx_SetRxFifoThreshold>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_USART3_UART_Init+0x86>
  {
    Error_Handler();
 8001ac2:	f7ff fe8b 	bl	80017dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001ac6:	4805      	ldr	r0, [pc, #20]	; (8001adc <MX_USART3_UART_Init+0x9c>)
 8001ac8:	f007 f8f7 	bl	8008cba <HAL_UARTEx_DisableFifoMode>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_USART3_UART_Init+0x96>
  {
    Error_Handler();
 8001ad2:	f7ff fe83 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200005f4 	.word	0x200005f4
 8001ae0:	40004800 	.word	0x40004800

08001ae4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b0ce      	sub	sp, #312	; 0x138
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001aee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001af2:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001b08:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001b12:	461a      	mov	r2, r3
 8001b14:	2100      	movs	r1, #0
 8001b16:	f007 fe61 	bl	80097dc <memset>
  if(uartHandle->Instance==LPUART1)
 8001b1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001b1e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a67      	ldr	r2, [pc, #412]	; (8001cc4 <HAL_UART_MspInit+0x1e0>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d15e      	bne.n	8001bea <HAL_UART_MspInit+0x106>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001b2c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001b30:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001b34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8001b40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001b44:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b4e:	f107 0318 	add.w	r3, r7, #24
 8001b52:	4618      	mov	r0, r3
 8001b54:	f001 fb6a 	bl	800322c <HAL_RCCEx_PeriphCLKConfig>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8001b5e:	f7ff fe3d 	bl	80017dc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001b62:	4b59      	ldr	r3, [pc, #356]	; (8001cc8 <HAL_UART_MspInit+0x1e4>)
 8001b64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001b68:	4a57      	ldr	r2, [pc, #348]	; (8001cc8 <HAL_UART_MspInit+0x1e4>)
 8001b6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b6e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001b72:	4b55      	ldr	r3, [pc, #340]	; (8001cc8 <HAL_UART_MspInit+0x1e4>)
 8001b74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001b78:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8001b7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001b80:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001b8a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b8e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b90:	4b4d      	ldr	r3, [pc, #308]	; (8001cc8 <HAL_UART_MspInit+0x1e4>)
 8001b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b96:	4a4c      	ldr	r2, [pc, #304]	; (8001cc8 <HAL_UART_MspInit+0x1e4>)
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ba0:	4b49      	ldr	r3, [pc, #292]	; (8001cc8 <HAL_UART_MspInit+0x1e4>)
 8001ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ba6:	f003 0202 	and.w	r2, r3, #2
 8001baa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001bae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001bb8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001bbc:	681b      	ldr	r3, [r3, #0]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8001bbe:	23c0      	movs	r3, #192	; 0xc0
 8001bc0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001bd6:	2308      	movs	r3, #8
 8001bd8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bdc:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001be0:	4619      	mov	r1, r3
 8001be2:	483a      	ldr	r0, [pc, #232]	; (8001ccc <HAL_UART_MspInit+0x1e8>)
 8001be4:	f000 fa26 	bl	8002034 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001be8:	e066      	b.n	8001cb8 <HAL_UART_MspInit+0x1d4>
  else if(uartHandle->Instance==USART3)
 8001bea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001bee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a36      	ldr	r2, [pc, #216]	; (8001cd0 <HAL_UART_MspInit+0x1ec>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d15d      	bne.n	8001cb8 <HAL_UART_MspInit+0x1d4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bfc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001c00:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001c04:	f04f 0204 	mov.w	r2, #4
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001c14:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c18:	2200      	movs	r2, #0
 8001c1a:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1c:	f107 0318 	add.w	r3, r7, #24
 8001c20:	4618      	mov	r0, r3
 8001c22:	f001 fb03 	bl	800322c <HAL_RCCEx_PeriphCLKConfig>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8001c2c:	f7ff fdd6 	bl	80017dc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c30:	4b25      	ldr	r3, [pc, #148]	; (8001cc8 <HAL_UART_MspInit+0x1e4>)
 8001c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c36:	4a24      	ldr	r2, [pc, #144]	; (8001cc8 <HAL_UART_MspInit+0x1e4>)
 8001c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c3c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001c40:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <HAL_UART_MspInit+0x1e4>)
 8001c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c46:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8001c4a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001c4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001c58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c5c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <HAL_UART_MspInit+0x1e4>)
 8001c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c64:	4a18      	ldr	r2, [pc, #96]	; (8001cc8 <HAL_UART_MspInit+0x1e4>)
 8001c66:	f043 0308 	orr.w	r3, r3, #8
 8001c6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c6e:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <HAL_UART_MspInit+0x1e4>)
 8001c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c74:	f003 0208 	and.w	r2, r3, #8
 8001c78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001c7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c8a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8001c8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ca6:	2307      	movs	r3, #7
 8001ca8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cac:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4808      	ldr	r0, [pc, #32]	; (8001cd4 <HAL_UART_MspInit+0x1f0>)
 8001cb4:	f000 f9be 	bl	8002034 <HAL_GPIO_Init>
}
 8001cb8:	bf00      	nop
 8001cba:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	44002400 	.word	0x44002400
 8001cc8:	44020c00 	.word	0x44020c00
 8001ccc:	42020400 	.word	0x42020400
 8001cd0:	40004800 	.word	0x40004800
 8001cd4:	42020c00 	.word	0x42020c00

08001cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cd8:	480d      	ldr	r0, [pc, #52]	; (8001d10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cda:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cdc:	f7ff fdea 	bl	80018b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ce0:	480c      	ldr	r0, [pc, #48]	; (8001d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ce2:	490d      	ldr	r1, [pc, #52]	; (8001d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ce4:	4a0d      	ldr	r2, [pc, #52]	; (8001d1c <LoopForever+0xe>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce8:	e002      	b.n	8001cf0 <LoopCopyDataInit>

08001cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cee:	3304      	adds	r3, #4

08001cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf4:	d3f9      	bcc.n	8001cea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cf8:	4c0a      	ldr	r4, [pc, #40]	; (8001d24 <LoopForever+0x16>)
  movs r3, #0
 8001cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cfc:	e001      	b.n	8001d02 <LoopFillZerobss>

08001cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d00:	3204      	adds	r2, #4

08001d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d04:	d3fb      	bcc.n	8001cfe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d06:	f007 fd77 	bl	80097f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d0a:	f7ff fbc9 	bl	80014a0 <main>

08001d0e <LoopForever>:

LoopForever:
    b LoopForever
 8001d0e:	e7fe      	b.n	8001d0e <LoopForever>
  ldr   r0, =_estack
 8001d10:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d18:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001d1c:	0801f6e8 	.word	0x0801f6e8
  ldr r2, =_sbss
 8001d20:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001d24:	20000a68 	.word	0x20000a68

08001d28 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d28:	e7fe      	b.n	8001d28 <ADC1_IRQHandler>
	...

08001d2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d30:	2003      	movs	r0, #3
 8001d32:	f000 f94d 	bl	8001fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001d36:	f001 f8ef 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_Init+0x40>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	490a      	ldr	r1, [pc, #40]	; (8001d70 <HAL_Init+0x44>)
 8001d46:	5ccb      	ldrb	r3, [r1, r3]
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4c:	4a09      	ldr	r2, [pc, #36]	; (8001d74 <HAL_Init+0x48>)
 8001d4e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d50:	200f      	movs	r0, #15
 8001d52:	f000 f811 	bl	8001d78 <HAL_InitTick>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e002      	b.n	8001d66 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d60:	f7ff fd41 	bl	80017e6 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	44020c00 	.word	0x44020c00
 8001d70:	0801f630 	.word	0x0801f630
 8001d74:	20000000 	.word	0x20000000

08001d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001d80:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_InitTick+0x60>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e021      	b.n	8001dd0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <HAL_InitTick+0x64>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <HAL_InitTick+0x60>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4619      	mov	r1, r3
 8001d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f939 	bl	800201a <HAL_SYSTICK_Config>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00e      	b.n	8001dd0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b0f      	cmp	r3, #15
 8001db6:	d80a      	bhi.n	8001dce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db8:	2200      	movs	r2, #0
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	f000 f911 	bl	8001fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc4:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <HAL_InitTick+0x68>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e000      	b.n	8001dd0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000008 	.word	0x20000008
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000004 	.word	0x20000004

08001de4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_IncTick+0x20>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_IncTick+0x24>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <HAL_IncTick+0x24>)
 8001df6:	6013      	str	r3, [r2, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000008 	.word	0x20000008
 8001e08:	20000688 	.word	0x20000688

08001e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e10:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <HAL_GetTick+0x14>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000688 	.word	0x20000688

08001e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e2c:	f7ff ffee 	bl	8001e0c <HAL_GetTick>
 8001e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3c:	d005      	beq.n	8001e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_Delay+0x44>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e4a:	bf00      	nop
 8001e4c:	f7ff ffde 	bl	8001e0c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d8f7      	bhi.n	8001e4c <HAL_Delay+0x28>
  {
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000008 	.word	0x20000008

08001e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	60d3      	str	r3, [r2, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <__NVIC_GetPriorityGrouping+0x18>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 0307 	and.w	r3, r3, #7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	6039      	str	r1, [r7, #0]
 8001eda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001edc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	db0a      	blt.n	8001efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	490c      	ldr	r1, [pc, #48]	; (8001f1c <__NVIC_SetPriority+0x4c>)
 8001eea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eee:	0112      	lsls	r2, r2, #4
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef8:	e00a      	b.n	8001f10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4908      	ldr	r1, [pc, #32]	; (8001f20 <__NVIC_SetPriority+0x50>)
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	3b04      	subs	r3, #4
 8001f08:	0112      	lsls	r2, r2, #4
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	761a      	strb	r2, [r3, #24]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000e100 	.word	0xe000e100
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f1c3 0307 	rsb	r3, r3, #7
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	bf28      	it	cs
 8001f42:	2304      	movcs	r3, #4
 8001f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	2b06      	cmp	r3, #6
 8001f4c:	d902      	bls.n	8001f54 <NVIC_EncodePriority+0x30>
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3b03      	subs	r3, #3
 8001f52:	e000      	b.n	8001f56 <NVIC_EncodePriority+0x32>
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f58:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43da      	mvns	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	401a      	ands	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	43d9      	mvns	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	4313      	orrs	r3, r2
         );
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3724      	adds	r7, #36	; 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f9c:	d301      	bcc.n	8001fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00f      	b.n	8001fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <SysTick_Config+0x40>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001faa:	210f      	movs	r1, #15
 8001fac:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb0:	f7ff ff8e 	bl	8001ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <SysTick_Config+0x40>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fba:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <SysTick_Config+0x40>)
 8001fbc:	2207      	movs	r2, #7
 8001fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	e000e010 	.word	0xe000e010

08001fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ff47 	bl	8001e6c <__NVIC_SetPriorityGrouping>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff4:	f7ff ff5e 	bl	8001eb4 <__NVIC_GetPriorityGrouping>
 8001ff8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	6978      	ldr	r0, [r7, #20]
 8002000:	f7ff ff90 	bl	8001f24 <NVIC_EncodePriority>
 8002004:	4602      	mov	r2, r0
 8002006:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff5f 	bl	8001ed0 <__NVIC_SetPriority>
}
 8002012:	bf00      	nop
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff ffb2 	bl	8001f8c <SysTick_Config>
 8002028:	4603      	mov	r3, r0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002034:	b480      	push	{r7}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002042:	e136      	b.n	80022b2 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	2101      	movs	r1, #1
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	fa01 f303 	lsl.w	r3, r1, r3
 8002050:	4013      	ands	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 8128 	beq.w	80022ac <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x38>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b12      	cmp	r3, #18
 800206a:	d125      	bne.n	80020b8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	08da      	lsrs	r2, r3, #3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3208      	adds	r2, #8
 8002074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002078:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	220f      	movs	r2, #15
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	4013      	ands	r3, r2
 800208e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f003 020f 	and.w	r2, r3, #15
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	08da      	lsrs	r2, r3, #3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3208      	adds	r2, #8
 80020b2:	6979      	ldr	r1, [r7, #20]
 80020b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	2203      	movs	r2, #3
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4013      	ands	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 0203 	and.w	r2, r3, #3
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d00b      	beq.n	800210c <HAL_GPIO_Init+0xd8>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d007      	beq.n	800210c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002100:	2b11      	cmp	r3, #17
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b12      	cmp	r3, #18
 800210a:	d130      	bne.n	800216e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	2203      	movs	r2, #3
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4013      	ands	r3, r2
 8002122:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	4313      	orrs	r3, r2
 8002134:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002142:	2201      	movs	r2, #1
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	4013      	ands	r3, r2
 8002150:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	091b      	lsrs	r3, r3, #4
 8002158:	f003 0201 	and.w	r2, r3, #1
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4313      	orrs	r3, r2
 8002166:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b03      	cmp	r3, #3
 8002174:	d017      	beq.n	80021a6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	2203      	movs	r2, #3
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	4013      	ands	r3, r2
 800218c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4313      	orrs	r3, r2
 800219e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d07c      	beq.n	80022ac <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80021b2:	4a47      	ldr	r2, [pc, #284]	; (80022d0 <HAL_GPIO_Init+0x29c>)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	089b      	lsrs	r3, r3, #2
 80021b8:	3318      	adds	r3, #24
 80021ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021be:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	220f      	movs	r2, #15
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	4013      	ands	r3, r2
 80021d4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	0a9a      	lsrs	r2, r3, #10
 80021da:	4b3e      	ldr	r3, [pc, #248]	; (80022d4 <HAL_GPIO_Init+0x2a0>)
 80021dc:	4013      	ands	r3, r2
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	f002 0203 	and.w	r2, r2, #3
 80021e4:	00d2      	lsls	r2, r2, #3
 80021e6:	4093      	lsls	r3, r2
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80021ee:	4938      	ldr	r1, [pc, #224]	; (80022d0 <HAL_GPIO_Init+0x29c>)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	089b      	lsrs	r3, r3, #2
 80021f4:	3318      	adds	r3, #24
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80021fc:	4b34      	ldr	r3, [pc, #208]	; (80022d0 <HAL_GPIO_Init+0x29c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	43db      	mvns	r3, r3
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4013      	ands	r3, r2
 800220a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002220:	4a2b      	ldr	r2, [pc, #172]	; (80022d0 <HAL_GPIO_Init+0x29c>)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002226:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <HAL_GPIO_Init+0x29c>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	43db      	mvns	r3, r3
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	4013      	ands	r3, r2
 8002234:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800224a:	4a21      	ldr	r2, [pc, #132]	; (80022d0 <HAL_GPIO_Init+0x29c>)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002250:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <HAL_GPIO_Init+0x29c>)
 8002252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002256:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	43db      	mvns	r3, r3
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	4013      	ands	r3, r2
 8002260:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002276:	4a16      	ldr	r2, [pc, #88]	; (80022d0 <HAL_GPIO_Init+0x29c>)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <HAL_GPIO_Init+0x29c>)
 8002280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002284:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	43db      	mvns	r3, r3
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4013      	ands	r3, r2
 800228e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80022a4:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <HAL_GPIO_Init+0x29c>)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	3301      	adds	r3, #1
 80022b0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f47f aec1 	bne.w	8002044 <HAL_GPIO_Init+0x10>
  }
}
 80022c2:	bf00      	nop
 80022c4:	bf00      	nop
 80022c6:	371c      	adds	r7, #28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	44022000 	.word	0x44022000
 80022d4:	002f7f7f 	.word	0x002f7f7f

080022d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	887b      	ldrh	r3, [r7, #2]
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022f0:	2301      	movs	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
 80022f4:	e001      	b.n	80022fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f6:	2300      	movs	r3, #0
 80022f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
 8002314:	4613      	mov	r3, r2
 8002316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002318:	787b      	ldrb	r3, [r7, #1]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800231e:	887a      	ldrh	r2, [r7, #2]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002324:	e002      	b.n	800232c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002326:	887a      	ldrh	r2, [r7, #2]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d102      	bne.n	800234c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	f000 bc28 	b.w	8002b9c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800234c:	4b94      	ldr	r3, [pc, #592]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	f003 0318 	and.w	r3, r3, #24
 8002354:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002356:	4b92      	ldr	r3, [pc, #584]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0310 	and.w	r3, r3, #16
 8002368:	2b00      	cmp	r3, #0
 800236a:	d05b      	beq.n	8002424 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	2b08      	cmp	r3, #8
 8002370:	d005      	beq.n	800237e <HAL_RCC_OscConfig+0x46>
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	2b18      	cmp	r3, #24
 8002376:	d114      	bne.n	80023a2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d111      	bne.n	80023a2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d102      	bne.n	800238c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	f000 bc08 	b.w	8002b9c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800238c:	4b84      	ldr	r3, [pc, #528]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	041b      	lsls	r3, r3, #16
 800239a:	4981      	ldr	r1, [pc, #516]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 800239c:	4313      	orrs	r3, r2
 800239e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80023a0:	e040      	b.n	8002424 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d023      	beq.n	80023f2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80023aa:	4b7d      	ldr	r3, [pc, #500]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a7c      	ldr	r2, [pc, #496]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 80023b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b6:	f7ff fd29 	bl	8001e0c <HAL_GetTick>
 80023ba:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80023be:	f7ff fd25 	bl	8001e0c <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e3e5      	b.n	8002b9c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80023d0:	4b73      	ldr	r3, [pc, #460]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80023dc:	4b70      	ldr	r3, [pc, #448]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	041b      	lsls	r3, r3, #16
 80023ea:	496d      	ldr	r1, [pc, #436]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	618b      	str	r3, [r1, #24]
 80023f0:	e018      	b.n	8002424 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80023f2:	4b6b      	ldr	r3, [pc, #428]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a6a      	ldr	r2, [pc, #424]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 80023f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fe:	f7ff fd05 	bl	8001e0c <HAL_GetTick>
 8002402:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002406:	f7ff fd01 	bl	8001e0c <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e3c1      	b.n	8002b9c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002418:	4b61      	ldr	r3, [pc, #388]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f0      	bne.n	8002406 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 80a0 	beq.w	8002572 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	2b10      	cmp	r3, #16
 8002436:	d005      	beq.n	8002444 <HAL_RCC_OscConfig+0x10c>
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	2b18      	cmp	r3, #24
 800243c:	d109      	bne.n	8002452 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d106      	bne.n	8002452 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	f040 8092 	bne.w	8002572 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e3a4      	b.n	8002b9c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x132>
 800245c:	4b50      	ldr	r3, [pc, #320]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a4f      	ldr	r2, [pc, #316]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 8002462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	e058      	b.n	800251c <HAL_RCC_OscConfig+0x1e4>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d112      	bne.n	8002498 <HAL_RCC_OscConfig+0x160>
 8002472:	4b4b      	ldr	r3, [pc, #300]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a4a      	ldr	r2, [pc, #296]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b48      	ldr	r3, [pc, #288]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a47      	ldr	r2, [pc, #284]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 8002484:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b45      	ldr	r3, [pc, #276]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a44      	ldr	r2, [pc, #272]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 8002490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e041      	b.n	800251c <HAL_RCC_OscConfig+0x1e4>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a0:	d112      	bne.n	80024c8 <HAL_RCC_OscConfig+0x190>
 80024a2:	4b3f      	ldr	r3, [pc, #252]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a3e      	ldr	r2, [pc, #248]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 80024a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	4b3c      	ldr	r3, [pc, #240]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a3b      	ldr	r2, [pc, #236]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 80024b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a38      	ldr	r2, [pc, #224]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e029      	b.n	800251c <HAL_RCC_OscConfig+0x1e4>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80024d0:	d112      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1c0>
 80024d2:	4b33      	ldr	r3, [pc, #204]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a32      	ldr	r2, [pc, #200]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 80024d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	4b30      	ldr	r3, [pc, #192]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a2f      	ldr	r2, [pc, #188]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 80024e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a2c      	ldr	r2, [pc, #176]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 80024f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e011      	b.n	800251c <HAL_RCC_OscConfig+0x1e4>
 80024f8:	4b29      	ldr	r3, [pc, #164]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a28      	ldr	r2, [pc, #160]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 80024fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a25      	ldr	r2, [pc, #148]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 800250a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	4b23      	ldr	r3, [pc, #140]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a22      	ldr	r2, [pc, #136]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 8002516:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800251a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d013      	beq.n	800254c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7ff fc72 	bl	8001e0c <HAL_GetTick>
 8002528:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800252c:	f7ff fc6e 	bl	8001e0c <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b64      	cmp	r3, #100	; 0x64
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e32e      	b.n	8002b9c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800253e:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f0      	beq.n	800252c <HAL_RCC_OscConfig+0x1f4>
 800254a:	e012      	b.n	8002572 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7ff fc5e 	bl	8001e0c <HAL_GetTick>
 8002550:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002554:	f7ff fc5a 	bl	8001e0c <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b64      	cmp	r3, #100	; 0x64
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e31a      	b.n	8002b9c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <HAL_RCC_OscConfig+0x268>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 809a 	beq.w	80026b4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <HAL_RCC_OscConfig+0x25a>
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	2b18      	cmp	r3, #24
 800258a:	d149      	bne.n	8002620 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d146      	bne.n	8002620 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d104      	bne.n	80025a4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e2fe      	b.n	8002b9c <HAL_RCC_OscConfig+0x864>
 800259e:	bf00      	nop
 80025a0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d11c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80025aa:	4b9a      	ldr	r3, [pc, #616]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0218 	and.w	r2, r3, #24
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d014      	beq.n	80025e4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80025ba:	4b96      	ldr	r3, [pc, #600]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 0218 	bic.w	r2, r3, #24
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	4993      	ldr	r1, [pc, #588]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80025cc:	f000 fdd0 	bl	8003170 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025d0:	4b91      	ldr	r3, [pc, #580]	; (8002818 <HAL_RCC_OscConfig+0x4e0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff fbcf 	bl	8001d78 <HAL_InitTick>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e2db      	b.n	8002b9c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7ff fc12 	bl	8001e0c <HAL_GetTick>
 80025e8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80025ec:	f7ff fc0e 	bl	8001e0c <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e2ce      	b.n	8002b9c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025fe:	4b85      	ldr	r3, [pc, #532]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800260a:	4b82      	ldr	r3, [pc, #520]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	041b      	lsls	r3, r3, #16
 8002618:	497e      	ldr	r1, [pc, #504]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 800261a:	4313      	orrs	r3, r2
 800261c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800261e:	e049      	b.n	80026b4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d02c      	beq.n	8002682 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002628:	4b7a      	ldr	r3, [pc, #488]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f023 0218 	bic.w	r2, r3, #24
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	4977      	ldr	r1, [pc, #476]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800263a:	4b76      	ldr	r3, [pc, #472]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a75      	ldr	r2, [pc, #468]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002646:	f7ff fbe1 	bl	8001e0c <HAL_GetTick>
 800264a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800264e:	f7ff fbdd 	bl	8001e0c <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e29d      	b.n	8002b9c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002660:	4b6c      	ldr	r3, [pc, #432]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800266c:	4b69      	ldr	r3, [pc, #420]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	041b      	lsls	r3, r3, #16
 800267a:	4966      	ldr	r1, [pc, #408]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 800267c:	4313      	orrs	r3, r2
 800267e:	610b      	str	r3, [r1, #16]
 8002680:	e018      	b.n	80026b4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002682:	4b64      	ldr	r3, [pc, #400]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a63      	ldr	r2, [pc, #396]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 8002688:	f023 0301 	bic.w	r3, r3, #1
 800268c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268e:	f7ff fbbd 	bl	8001e0c <HAL_GetTick>
 8002692:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002696:	f7ff fbb9 	bl	8001e0c <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e279      	b.n	8002b9c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026a8:	4b5a      	ldr	r3, [pc, #360]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f0      	bne.n	8002696 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d03c      	beq.n	800273a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d01c      	beq.n	8002702 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c8:	4b52      	ldr	r3, [pc, #328]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 80026ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026ce:	4a51      	ldr	r2, [pc, #324]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 80026d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d8:	f7ff fb98 	bl	8001e0c <HAL_GetTick>
 80026dc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80026e0:	f7ff fb94 	bl	8001e0c <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e254      	b.n	8002b9c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80026f2:	4b48      	ldr	r3, [pc, #288]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 80026f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0ef      	beq.n	80026e0 <HAL_RCC_OscConfig+0x3a8>
 8002700:	e01b      	b.n	800273a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002702:	4b44      	ldr	r3, [pc, #272]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 8002704:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002708:	4a42      	ldr	r2, [pc, #264]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 800270a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800270e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002712:	f7ff fb7b 	bl	8001e0c <HAL_GetTick>
 8002716:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800271a:	f7ff fb77 	bl	8001e0c <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e237      	b.n	8002b9c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800272c:	4b39      	ldr	r3, [pc, #228]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 800272e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002732:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1ef      	bne.n	800271a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 80d2 	beq.w	80028ec <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002748:	4b34      	ldr	r3, [pc, #208]	; (800281c <HAL_RCC_OscConfig+0x4e4>)
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d118      	bne.n	8002786 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002754:	4b31      	ldr	r3, [pc, #196]	; (800281c <HAL_RCC_OscConfig+0x4e4>)
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	4a30      	ldr	r2, [pc, #192]	; (800281c <HAL_RCC_OscConfig+0x4e4>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002760:	f7ff fb54 	bl	8001e0c <HAL_GetTick>
 8002764:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002768:	f7ff fb50 	bl	8001e0c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e210      	b.n	8002b9c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800277a:	4b28      	ldr	r3, [pc, #160]	; (800281c <HAL_RCC_OscConfig+0x4e4>)
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d108      	bne.n	80027a0 <HAL_RCC_OscConfig+0x468>
 800278e:	4b21      	ldr	r3, [pc, #132]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 8002790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002794:	4a1f      	ldr	r2, [pc, #124]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800279e:	e074      	b.n	800288a <HAL_RCC_OscConfig+0x552>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d118      	bne.n	80027da <HAL_RCC_OscConfig+0x4a2>
 80027a8:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 80027aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027ae:	4a19      	ldr	r2, [pc, #100]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027b8:	4b16      	ldr	r3, [pc, #88]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 80027ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027be:	4a15      	ldr	r2, [pc, #84]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 80027c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027c8:	4b12      	ldr	r3, [pc, #72]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 80027ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027ce:	4a11      	ldr	r2, [pc, #68]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 80027d0:	f023 0304 	bic.w	r3, r3, #4
 80027d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027d8:	e057      	b.n	800288a <HAL_RCC_OscConfig+0x552>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2b05      	cmp	r3, #5
 80027e0:	d11e      	bne.n	8002820 <HAL_RCC_OscConfig+0x4e8>
 80027e2:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 80027e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027e8:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 80027ea:	f043 0304 	orr.w	r3, r3, #4
 80027ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027f2:	4b08      	ldr	r3, [pc, #32]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 80027f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027f8:	4a06      	ldr	r2, [pc, #24]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 80027fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002802:	4b04      	ldr	r3, [pc, #16]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 8002804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002808:	4a02      	ldr	r2, [pc, #8]	; (8002814 <HAL_RCC_OscConfig+0x4dc>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002812:	e03a      	b.n	800288a <HAL_RCC_OscConfig+0x552>
 8002814:	44020c00 	.word	0x44020c00
 8002818:	20000004 	.word	0x20000004
 800281c:	44020800 	.word	0x44020800
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b85      	cmp	r3, #133	; 0x85
 8002826:	d118      	bne.n	800285a <HAL_RCC_OscConfig+0x522>
 8002828:	4ba2      	ldr	r3, [pc, #648]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 800282a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800282e:	4aa1      	ldr	r2, [pc, #644]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002830:	f043 0304 	orr.w	r3, r3, #4
 8002834:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002838:	4b9e      	ldr	r3, [pc, #632]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 800283a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800283e:	4a9d      	ldr	r2, [pc, #628]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002844:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002848:	4b9a      	ldr	r3, [pc, #616]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 800284a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800284e:	4a99      	ldr	r2, [pc, #612]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002858:	e017      	b.n	800288a <HAL_RCC_OscConfig+0x552>
 800285a:	4b96      	ldr	r3, [pc, #600]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 800285c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002860:	4a94      	ldr	r2, [pc, #592]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002862:	f023 0301 	bic.w	r3, r3, #1
 8002866:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800286a:	4b92      	ldr	r3, [pc, #584]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 800286c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002870:	4a90      	ldr	r2, [pc, #576]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002872:	f023 0304 	bic.w	r3, r3, #4
 8002876:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800287a:	4b8e      	ldr	r3, [pc, #568]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 800287c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002880:	4a8c      	ldr	r2, [pc, #560]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002886:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d016      	beq.n	80028c0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002892:	f7ff fabb 	bl	8001e0c <HAL_GetTick>
 8002896:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002898:	e00a      	b.n	80028b0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f7ff fab7 	bl	8001e0c <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e175      	b.n	8002b9c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b0:	4b80      	ldr	r3, [pc, #512]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 80028b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0ed      	beq.n	800289a <HAL_RCC_OscConfig+0x562>
 80028be:	e015      	b.n	80028ec <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7ff faa4 	bl	8001e0c <HAL_GetTick>
 80028c4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028c6:	e00a      	b.n	80028de <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c8:	f7ff faa0 	bl	8001e0c <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e15e      	b.n	8002b9c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028de:	4b75      	ldr	r3, [pc, #468]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 80028e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1ed      	bne.n	80028c8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d036      	beq.n	8002966 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d019      	beq.n	8002934 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002900:	4b6c      	ldr	r3, [pc, #432]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a6b      	ldr	r2, [pc, #428]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002906:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800290a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7ff fa7e 	bl	8001e0c <HAL_GetTick>
 8002910:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002914:	f7ff fa7a 	bl	8001e0c <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e13a      	b.n	8002b9c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002926:	4b63      	ldr	r3, [pc, #396]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0x5dc>
 8002932:	e018      	b.n	8002966 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002934:	4b5f      	ldr	r3, [pc, #380]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a5e      	ldr	r2, [pc, #376]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 800293a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800293e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002940:	f7ff fa64 	bl	8001e0c <HAL_GetTick>
 8002944:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002948:	f7ff fa60 	bl	8001e0c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e120      	b.n	8002b9c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800295a:	4b56      	ldr	r3, [pc, #344]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 8115 	beq.w	8002b9a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	2b18      	cmp	r3, #24
 8002974:	f000 80af 	beq.w	8002ad6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	2b02      	cmp	r3, #2
 800297e:	f040 8086 	bne.w	8002a8e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002982:	4b4c      	ldr	r3, [pc, #304]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a4b      	ldr	r2, [pc, #300]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002988:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800298c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298e:	f7ff fa3d 	bl	8001e0c <HAL_GetTick>
 8002992:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002996:	f7ff fa39 	bl	8001e0c <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e0f9      	b.n	8002b9c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80029a8:	4b42      	ldr	r3, [pc, #264]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f0      	bne.n	8002996 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80029b4:	4b3f      	ldr	r3, [pc, #252]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80029bc:	f023 0303 	bic.w	r3, r3, #3
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029c8:	0212      	lsls	r2, r2, #8
 80029ca:	430a      	orrs	r2, r1
 80029cc:	4939      	ldr	r1, [pc, #228]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	628b      	str	r3, [r1, #40]	; 0x28
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d6:	3b01      	subs	r3, #1
 80029d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	3b01      	subs	r3, #1
 80029e2:	025b      	lsls	r3, r3, #9
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ec:	3b01      	subs	r3, #1
 80029ee:	041b      	lsls	r3, r3, #16
 80029f0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	3b01      	subs	r3, #1
 80029fc:	061b      	lsls	r3, r3, #24
 80029fe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a02:	492c      	ldr	r1, [pc, #176]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002a08:	4b2a      	ldr	r3, [pc, #168]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0c:	4a29      	ldr	r2, [pc, #164]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002a0e:	f023 0310 	bic.w	r3, r3, #16
 8002a12:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a18:	4a26      	ldr	r2, [pc, #152]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002a1e:	4b25      	ldr	r3, [pc, #148]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	4a24      	ldr	r2, [pc, #144]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002a24:	f043 0310 	orr.w	r3, r3, #16
 8002a28:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002a2a:	4b22      	ldr	r3, [pc, #136]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2e:	f023 020c 	bic.w	r2, r3, #12
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	491f      	ldr	r1, [pc, #124]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002a3c:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a40:	f023 0220 	bic.w	r2, r3, #32
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a48:	491a      	ldr	r1, [pc, #104]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a4e:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a52:	4a18      	ldr	r2, [pc, #96]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a58:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002a60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a66:	f7ff f9d1 	bl	8001e0c <HAL_GetTick>
 8002a6a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002a6e:	f7ff f9cd 	bl	8001e0c <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e08d      	b.n	8002b9c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x736>
 8002a8c:	e085      	b.n	8002b9a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002a8e:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a08      	ldr	r2, [pc, #32]	; (8002ab4 <HAL_RCC_OscConfig+0x77c>)
 8002a94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9a:	f7ff f9b7 	bl	8001e0c <HAL_GetTick>
 8002a9e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002aa0:	e00a      	b.n	8002ab8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002aa2:	f7ff f9b3 	bl	8001e0c <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d903      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e073      	b.n	8002b9c <HAL_RCC_OscConfig+0x864>
 8002ab4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002ab8:	4b3a      	ldr	r3, [pc, #232]	; (8002ba4 <HAL_RCC_OscConfig+0x86c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1ee      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002ac4:	4b37      	ldr	r3, [pc, #220]	; (8002ba4 <HAL_RCC_OscConfig+0x86c>)
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	4a36      	ldr	r2, [pc, #216]	; (8002ba4 <HAL_RCC_OscConfig+0x86c>)
 8002aca:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002ace:	f023 0303 	bic.w	r3, r3, #3
 8002ad2:	6293      	str	r3, [r2, #40]	; 0x28
 8002ad4:	e061      	b.n	8002b9a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002ad6:	4b33      	ldr	r3, [pc, #204]	; (8002ba4 <HAL_RCC_OscConfig+0x86c>)
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002adc:	4b31      	ldr	r3, [pc, #196]	; (8002ba4 <HAL_RCC_OscConfig+0x86c>)
 8002ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d031      	beq.n	8002b4e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f003 0203 	and.w	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d12a      	bne.n	8002b4e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	0a1b      	lsrs	r3, r3, #8
 8002afc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d122      	bne.n	8002b4e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b12:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d11a      	bne.n	8002b4e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	0a5b      	lsrs	r3, r3, #9
 8002b1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d111      	bne.n	8002b4e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	0c1b      	lsrs	r3, r3, #16
 8002b2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b36:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d108      	bne.n	8002b4e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	0e1b      	lsrs	r3, r3, #24
 8002b40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d001      	beq.n	8002b52 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e024      	b.n	8002b9c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002b52:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <HAL_RCC_OscConfig+0x86c>)
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	08db      	lsrs	r3, r3, #3
 8002b58:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d01a      	beq.n	8002b9a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <HAL_RCC_OscConfig+0x86c>)
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	4a0e      	ldr	r2, [pc, #56]	; (8002ba4 <HAL_RCC_OscConfig+0x86c>)
 8002b6a:	f023 0310 	bic.w	r3, r3, #16
 8002b6e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7ff f94c 	bl	8001e0c <HAL_GetTick>
 8002b74:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002b76:	bf00      	nop
 8002b78:	f7ff f948 	bl	8001e0c <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d0f9      	beq.n	8002b78 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b88:	4a06      	ldr	r2, [pc, #24]	; (8002ba4 <HAL_RCC_OscConfig+0x86c>)
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002b8e:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_RCC_OscConfig+0x86c>)
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	4a04      	ldr	r2, [pc, #16]	; (8002ba4 <HAL_RCC_OscConfig+0x86c>)
 8002b94:	f043 0310 	orr.w	r3, r3, #16
 8002b98:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3720      	adds	r7, #32
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	44020c00 	.word	0x44020c00

08002ba8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e19e      	b.n	8002efa <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b83      	ldr	r3, [pc, #524]	; (8002dcc <HAL_RCC_ClockConfig+0x224>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d910      	bls.n	8002bec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b80      	ldr	r3, [pc, #512]	; (8002dcc <HAL_RCC_ClockConfig+0x224>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 020f 	bic.w	r2, r3, #15
 8002bd2:	497e      	ldr	r1, [pc, #504]	; (8002dcc <HAL_RCC_ClockConfig+0x224>)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bda:	4b7c      	ldr	r3, [pc, #496]	; (8002dcc <HAL_RCC_ClockConfig+0x224>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d001      	beq.n	8002bec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e186      	b.n	8002efa <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d012      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	695a      	ldr	r2, [r3, #20]
 8002bfc:	4b74      	ldr	r3, [pc, #464]	; (8002dd0 <HAL_RCC_ClockConfig+0x228>)
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d909      	bls.n	8002c1e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002c0a:	4b71      	ldr	r3, [pc, #452]	; (8002dd0 <HAL_RCC_ClockConfig+0x228>)
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	496d      	ldr	r1, [pc, #436]	; (8002dd0 <HAL_RCC_ClockConfig+0x228>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d012      	beq.n	8002c50 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	4b68      	ldr	r3, [pc, #416]	; (8002dd0 <HAL_RCC_ClockConfig+0x228>)
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	091b      	lsrs	r3, r3, #4
 8002c34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d909      	bls.n	8002c50 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002c3c:	4b64      	ldr	r3, [pc, #400]	; (8002dd0 <HAL_RCC_ClockConfig+0x228>)
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	4961      	ldr	r1, [pc, #388]	; (8002dd0 <HAL_RCC_ClockConfig+0x228>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d010      	beq.n	8002c7e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	4b5b      	ldr	r3, [pc, #364]	; (8002dd0 <HAL_RCC_ClockConfig+0x228>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d908      	bls.n	8002c7e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002c6c:	4b58      	ldr	r3, [pc, #352]	; (8002dd0 <HAL_RCC_ClockConfig+0x228>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4955      	ldr	r1, [pc, #340]	; (8002dd0 <HAL_RCC_ClockConfig+0x228>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d010      	beq.n	8002cac <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	4b50      	ldr	r3, [pc, #320]	; (8002dd0 <HAL_RCC_ClockConfig+0x228>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d908      	bls.n	8002cac <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002c9a:	4b4d      	ldr	r3, [pc, #308]	; (8002dd0 <HAL_RCC_ClockConfig+0x228>)
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f023 020f 	bic.w	r2, r3, #15
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	494a      	ldr	r1, [pc, #296]	; (8002dd0 <HAL_RCC_ClockConfig+0x228>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 8093 	beq.w	8002de0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	d107      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002cc2:	4b43      	ldr	r3, [pc, #268]	; (8002dd0 <HAL_RCC_ClockConfig+0x228>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d121      	bne.n	8002d12 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e113      	b.n	8002efa <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d107      	bne.n	8002cea <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cda:	4b3d      	ldr	r3, [pc, #244]	; (8002dd0 <HAL_RCC_ClockConfig+0x228>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d115      	bne.n	8002d12 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e107      	b.n	8002efa <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d107      	bne.n	8002d02 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002cf2:	4b37      	ldr	r3, [pc, #220]	; (8002dd0 <HAL_RCC_ClockConfig+0x228>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d109      	bne.n	8002d12 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e0fb      	b.n	8002efa <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d02:	4b33      	ldr	r3, [pc, #204]	; (8002dd0 <HAL_RCC_ClockConfig+0x228>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e0f3      	b.n	8002efa <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002d12:	4b2f      	ldr	r3, [pc, #188]	; (8002dd0 <HAL_RCC_ClockConfig+0x228>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f023 0203 	bic.w	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	492c      	ldr	r1, [pc, #176]	; (8002dd0 <HAL_RCC_ClockConfig+0x228>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d24:	f7ff f872 	bl	8001e0c <HAL_GetTick>
 8002d28:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d112      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d32:	e00a      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002d34:	f7ff f86a 	bl	8001e0c <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e0d7      	b.n	8002efa <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d4a:	4b21      	ldr	r3, [pc, #132]	; (8002dd0 <HAL_RCC_ClockConfig+0x228>)
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f003 0318 	and.w	r3, r3, #24
 8002d52:	2b18      	cmp	r3, #24
 8002d54:	d1ee      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x18c>
 8002d56:	e043      	b.n	8002de0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d112      	bne.n	8002d86 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d60:	e00a      	b.n	8002d78 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002d62:	f7ff f853 	bl	8001e0c <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e0c0      	b.n	8002efa <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d78:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <HAL_RCC_ClockConfig+0x228>)
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	f003 0318 	and.w	r3, r3, #24
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d1ee      	bne.n	8002d62 <HAL_RCC_ClockConfig+0x1ba>
 8002d84:	e02c      	b.n	8002de0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d122      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002d90:	f7ff f83c 	bl	8001e0c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e0a9      	b.n	8002efa <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002da6:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <HAL_RCC_ClockConfig+0x228>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	f003 0318 	and.w	r3, r3, #24
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d1ee      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x1e8>
 8002db2:	e015      	b.n	8002de0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002db4:	f7ff f82a 	bl	8001e0c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d906      	bls.n	8002dd4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e097      	b.n	8002efa <HAL_RCC_ClockConfig+0x352>
 8002dca:	bf00      	nop
 8002dcc:	40022000 	.word	0x40022000
 8002dd0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dd4:	4b4b      	ldr	r3, [pc, #300]	; (8002f04 <HAL_RCC_ClockConfig+0x35c>)
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	f003 0318 	and.w	r3, r3, #24
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1e9      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d010      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	4b44      	ldr	r3, [pc, #272]	; (8002f04 <HAL_RCC_ClockConfig+0x35c>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d208      	bcs.n	8002e0e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002dfc:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <HAL_RCC_ClockConfig+0x35c>)
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f023 020f 	bic.w	r2, r3, #15
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	493e      	ldr	r1, [pc, #248]	; (8002f04 <HAL_RCC_ClockConfig+0x35c>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e0e:	4b3e      	ldr	r3, [pc, #248]	; (8002f08 <HAL_RCC_ClockConfig+0x360>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d210      	bcs.n	8002e3e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1c:	4b3a      	ldr	r3, [pc, #232]	; (8002f08 <HAL_RCC_ClockConfig+0x360>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f023 020f 	bic.w	r2, r3, #15
 8002e24:	4938      	ldr	r1, [pc, #224]	; (8002f08 <HAL_RCC_ClockConfig+0x360>)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2c:	4b36      	ldr	r3, [pc, #216]	; (8002f08 <HAL_RCC_ClockConfig+0x360>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d001      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e05d      	b.n	8002efa <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d010      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	4b2d      	ldr	r3, [pc, #180]	; (8002f04 <HAL_RCC_ClockConfig+0x35c>)
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d208      	bcs.n	8002e6c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002e5a:	4b2a      	ldr	r3, [pc, #168]	; (8002f04 <HAL_RCC_ClockConfig+0x35c>)
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	4927      	ldr	r1, [pc, #156]	; (8002f04 <HAL_RCC_ClockConfig+0x35c>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d012      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	4b21      	ldr	r3, [pc, #132]	; (8002f04 <HAL_RCC_ClockConfig+0x35c>)
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d209      	bcs.n	8002e9e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002e8a:	4b1e      	ldr	r3, [pc, #120]	; (8002f04 <HAL_RCC_ClockConfig+0x35c>)
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	491a      	ldr	r1, [pc, #104]	; (8002f04 <HAL_RCC_ClockConfig+0x35c>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d012      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	4b15      	ldr	r3, [pc, #84]	; (8002f04 <HAL_RCC_ClockConfig+0x35c>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	0a1b      	lsrs	r3, r3, #8
 8002eb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d209      	bcs.n	8002ed0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002ebc:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <HAL_RCC_ClockConfig+0x35c>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	021b      	lsls	r3, r3, #8
 8002eca:	490e      	ldr	r1, [pc, #56]	; (8002f04 <HAL_RCC_ClockConfig+0x35c>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002ed0:	f000 f822 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCC_ClockConfig+0x35c>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	490b      	ldr	r1, [pc, #44]	; (8002f0c <HAL_RCC_ClockConfig+0x364>)
 8002ee0:	5ccb      	ldrb	r3, [r1, r3]
 8002ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee6:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <HAL_RCC_ClockConfig+0x368>)
 8002ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002eea:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <HAL_RCC_ClockConfig+0x36c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fe ff42 	bl	8001d78 <HAL_InitTick>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002ef8:	7afb      	ldrb	r3, [r7, #11]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	44020c00 	.word	0x44020c00
 8002f08:	40022000 	.word	0x40022000
 8002f0c:	0801f630 	.word	0x0801f630
 8002f10:	20000000 	.word	0x20000000
 8002f14:	20000004 	.word	0x20000004

08002f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b089      	sub	sp, #36	; 0x24
 8002f1c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002f1e:	4b8c      	ldr	r3, [pc, #560]	; (8003150 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f003 0318 	and.w	r3, r3, #24
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d102      	bne.n	8002f30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002f2a:	4b8a      	ldr	r3, [pc, #552]	; (8003154 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	e107      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f30:	4b87      	ldr	r3, [pc, #540]	; (8003150 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	f003 0318 	and.w	r3, r3, #24
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d112      	bne.n	8002f62 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002f3c:	4b84      	ldr	r3, [pc, #528]	; (8003150 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d009      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002f48:	4b81      	ldr	r3, [pc, #516]	; (8003150 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	08db      	lsrs	r3, r3, #3
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	4a81      	ldr	r2, [pc, #516]	; (8003158 <HAL_RCC_GetSysClockFreq+0x240>)
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
 8002f58:	61fb      	str	r3, [r7, #28]
 8002f5a:	e0f1      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002f5c:	4b7e      	ldr	r3, [pc, #504]	; (8003158 <HAL_RCC_GetSysClockFreq+0x240>)
 8002f5e:	61fb      	str	r3, [r7, #28]
 8002f60:	e0ee      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f62:	4b7b      	ldr	r3, [pc, #492]	; (8003150 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f003 0318 	and.w	r3, r3, #24
 8002f6a:	2b10      	cmp	r3, #16
 8002f6c:	d102      	bne.n	8002f74 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f6e:	4b7b      	ldr	r3, [pc, #492]	; (800315c <HAL_RCC_GetSysClockFreq+0x244>)
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	e0e5      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f74:	4b76      	ldr	r3, [pc, #472]	; (8003150 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f003 0318 	and.w	r3, r3, #24
 8002f7c:	2b18      	cmp	r3, #24
 8002f7e:	f040 80dd 	bne.w	800313c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002f82:	4b73      	ldr	r3, [pc, #460]	; (8003150 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002f8c:	4b70      	ldr	r3, [pc, #448]	; (8003150 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f90:	0a1b      	lsrs	r3, r3, #8
 8002f92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f96:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002f98:	4b6d      	ldr	r3, [pc, #436]	; (8003150 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002fa4:	4b6a      	ldr	r3, [pc, #424]	; (8003150 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002fa8:	08db      	lsrs	r3, r3, #3
 8002faa:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	fb02 f303 	mul.w	r3, r2, r3
 8002fb4:	ee07 3a90 	vmov	s15, r3
 8002fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fbc:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 80b7 	beq.w	8003136 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d003      	beq.n	8002fd6 <HAL_RCC_GetSysClockFreq+0xbe>
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d056      	beq.n	8003082 <HAL_RCC_GetSysClockFreq+0x16a>
 8002fd4:	e077      	b.n	80030c6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002fd6:	4b5e      	ldr	r3, [pc, #376]	; (8003150 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d02d      	beq.n	800303e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002fe2:	4b5b      	ldr	r3, [pc, #364]	; (8003150 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	08db      	lsrs	r3, r3, #3
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	4a5a      	ldr	r2, [pc, #360]	; (8003158 <HAL_RCC_GetSysClockFreq+0x240>)
 8002fee:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	ee07 3a90 	vmov	s15, r3
 8002ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	ee07 3a90 	vmov	s15, r3
 8003004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003008:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800300c:	4b50      	ldr	r3, [pc, #320]	; (8003150 <HAL_RCC_GetSysClockFreq+0x238>)
 800300e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003014:	ee07 3a90 	vmov	s15, r3
 8003018:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800301c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003020:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003160 <HAL_RCC_GetSysClockFreq+0x248>
 8003024:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003028:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800302c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003030:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003038:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800303c:	e065      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	ee07 3a90 	vmov	s15, r3
 8003044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003048:	eddf 6a46 	vldr	s13, [pc, #280]	; 8003164 <HAL_RCC_GetSysClockFreq+0x24c>
 800304c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003050:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <HAL_RCC_GetSysClockFreq+0x238>)
 8003052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003058:	ee07 3a90 	vmov	s15, r3
 800305c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003060:	ed97 6a02 	vldr	s12, [r7, #8]
 8003064:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003160 <HAL_RCC_GetSysClockFreq+0x248>
 8003068:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800306c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003070:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003074:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800307c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003080:	e043      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	ee07 3a90 	vmov	s15, r3
 8003088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800308c:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003168 <HAL_RCC_GetSysClockFreq+0x250>
 8003090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003094:	4b2e      	ldr	r3, [pc, #184]	; (8003150 <HAL_RCC_GetSysClockFreq+0x238>)
 8003096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800309c:	ee07 3a90 	vmov	s15, r3
 80030a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80030a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80030a8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003160 <HAL_RCC_GetSysClockFreq+0x248>
 80030ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80030b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80030c4:	e021      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	ee07 3a90 	vmov	s15, r3
 80030cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d0:	eddf 6a26 	vldr	s13, [pc, #152]	; 800316c <HAL_RCC_GetSysClockFreq+0x254>
 80030d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030d8:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <HAL_RCC_GetSysClockFreq+0x238>)
 80030da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e0:	ee07 3a90 	vmov	s15, r3
 80030e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80030e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ec:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003160 <HAL_RCC_GetSysClockFreq+0x248>
 80030f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80030f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003104:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003108:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800310a:	4b11      	ldr	r3, [pc, #68]	; (8003150 <HAL_RCC_GetSysClockFreq+0x238>)
 800310c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310e:	0a5b      	lsrs	r3, r3, #9
 8003110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003114:	3301      	adds	r3, #1
 8003116:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	ee07 3a90 	vmov	s15, r3
 800311e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003122:	edd7 6a06 	vldr	s13, [r7, #24]
 8003126:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800312a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800312e:	ee17 3a90 	vmov	r3, s15
 8003132:	61fb      	str	r3, [r7, #28]
 8003134:	e004      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	e001      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <HAL_RCC_GetSysClockFreq+0x240>)
 800313e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003140:	69fb      	ldr	r3, [r7, #28]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3724      	adds	r7, #36	; 0x24
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	44020c00 	.word	0x44020c00
 8003154:	003d0900 	.word	0x003d0900
 8003158:	03d09000 	.word	0x03d09000
 800315c:	007a1200 	.word	0x007a1200
 8003160:	46000000 	.word	0x46000000
 8003164:	4c742400 	.word	0x4c742400
 8003168:	4af42400 	.word	0x4af42400
 800316c:	4a742400 	.word	0x4a742400

08003170 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003174:	f7ff fed0 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 8003178:	4602      	mov	r2, r0
 800317a:	4b08      	ldr	r3, [pc, #32]	; (800319c <HAL_RCC_GetHCLKFreq+0x2c>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800317e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003182:	4907      	ldr	r1, [pc, #28]	; (80031a0 <HAL_RCC_GetHCLKFreq+0x30>)
 8003184:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003186:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800318a:	fa22 f303 	lsr.w	r3, r2, r3
 800318e:	4a05      	ldr	r2, [pc, #20]	; (80031a4 <HAL_RCC_GetHCLKFreq+0x34>)
 8003190:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003192:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <HAL_RCC_GetHCLKFreq+0x34>)
 8003194:	681b      	ldr	r3, [r3, #0]
}
 8003196:	4618      	mov	r0, r3
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	44020c00 	.word	0x44020c00
 80031a0:	0801f630 	.word	0x0801f630
 80031a4:	20000000 	.word	0x20000000

080031a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80031ac:	f7ff ffe0 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	091b      	lsrs	r3, r3, #4
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	4904      	ldr	r1, [pc, #16]	; (80031d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	f003 031f 	and.w	r3, r3, #31
 80031c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	44020c00 	.word	0x44020c00
 80031d0:	0801f640 	.word	0x0801f640

080031d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80031d8:	f7ff ffca 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 80031dc:	4602      	mov	r2, r0
 80031de:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	0a1b      	lsrs	r3, r3, #8
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	4904      	ldr	r1, [pc, #16]	; (80031fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80031ea:	5ccb      	ldrb	r3, [r1, r3]
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	44020c00 	.word	0x44020c00
 80031fc:	0801f640 	.word	0x0801f640

08003200 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003204:	f7ff ffb4 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 8003208:	4602      	mov	r2, r0
 800320a:	4b06      	ldr	r3, [pc, #24]	; (8003224 <HAL_RCC_GetPCLK3Freq+0x24>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	0b1b      	lsrs	r3, r3, #12
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	4904      	ldr	r1, [pc, #16]	; (8003228 <HAL_RCC_GetPCLK3Freq+0x28>)
 8003216:	5ccb      	ldrb	r3, [r1, r3]
 8003218:	f003 031f 	and.w	r3, r3, #31
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003220:	4618      	mov	r0, r3
 8003222:	bd80      	pop	{r7, pc}
 8003224:	44020c00 	.word	0x44020c00
 8003228:	0801f640 	.word	0x0801f640

0800322c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800322c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003230:	b0d8      	sub	sp, #352	; 0x160
 8003232:	af00      	add	r7, sp, #0
 8003234:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003238:	2300      	movs	r3, #0
 800323a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800323e:	2300      	movs	r3, #0
 8003240:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003244:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324c:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8003250:	2500      	movs	r5, #0
 8003252:	ea54 0305 	orrs.w	r3, r4, r5
 8003256:	d00b      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003258:	4bcd      	ldr	r3, [pc, #820]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800325a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800325e:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8003262:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003268:	4ac9      	ldr	r2, [pc, #804]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800326a:	430b      	orrs	r3, r1
 800326c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003270:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003278:	f002 0801 	and.w	r8, r2, #1
 800327c:	f04f 0900 	mov.w	r9, #0
 8003280:	ea58 0309 	orrs.w	r3, r8, r9
 8003284:	d042      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003286:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800328a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328c:	2b05      	cmp	r3, #5
 800328e:	d823      	bhi.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8003290:	a201      	add	r2, pc, #4	; (adr r2, 8003298 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003296:	bf00      	nop
 8003298:	080032e1 	.word	0x080032e1
 800329c:	080032b1 	.word	0x080032b1
 80032a0:	080032c5 	.word	0x080032c5
 80032a4:	080032e1 	.word	0x080032e1
 80032a8:	080032e1 	.word	0x080032e1
 80032ac:	080032e1 	.word	0x080032e1
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032b4:	3308      	adds	r3, #8
 80032b6:	4618      	mov	r0, r3
 80032b8:	f004 feda 	bl	8008070 <RCCEx_PLL2_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80032c2:	e00e      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032c8:	3330      	adds	r3, #48	; 0x30
 80032ca:	4618      	mov	r0, r3
 80032cc:	f004 ff68 	bl	80081a0 <RCCEx_PLL3_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80032d6:	e004      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80032de:	e000      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80032e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10c      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80032ea:	4ba9      	ldr	r3, [pc, #676]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80032ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80032f0:	f023 0107 	bic.w	r1, r3, #7
 80032f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fa:	4aa5      	ldr	r2, [pc, #660]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80032fc:	430b      	orrs	r3, r1
 80032fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003302:	e003      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003304:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003308:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800330c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003314:	f002 0a02 	and.w	sl, r2, #2
 8003318:	f04f 0b00 	mov.w	fp, #0
 800331c:	ea5a 030b 	orrs.w	r3, sl, fp
 8003320:	f000 8088 	beq.w	8003434 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003324:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800332a:	2b28      	cmp	r3, #40	; 0x28
 800332c:	d868      	bhi.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800332e:	a201      	add	r2, pc, #4	; (adr r2, 8003334 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003334:	08003409 	.word	0x08003409
 8003338:	08003401 	.word	0x08003401
 800333c:	08003401 	.word	0x08003401
 8003340:	08003401 	.word	0x08003401
 8003344:	08003401 	.word	0x08003401
 8003348:	08003401 	.word	0x08003401
 800334c:	08003401 	.word	0x08003401
 8003350:	08003401 	.word	0x08003401
 8003354:	080033d9 	.word	0x080033d9
 8003358:	08003401 	.word	0x08003401
 800335c:	08003401 	.word	0x08003401
 8003360:	08003401 	.word	0x08003401
 8003364:	08003401 	.word	0x08003401
 8003368:	08003401 	.word	0x08003401
 800336c:	08003401 	.word	0x08003401
 8003370:	08003401 	.word	0x08003401
 8003374:	080033ed 	.word	0x080033ed
 8003378:	08003401 	.word	0x08003401
 800337c:	08003401 	.word	0x08003401
 8003380:	08003401 	.word	0x08003401
 8003384:	08003401 	.word	0x08003401
 8003388:	08003401 	.word	0x08003401
 800338c:	08003401 	.word	0x08003401
 8003390:	08003401 	.word	0x08003401
 8003394:	08003409 	.word	0x08003409
 8003398:	08003401 	.word	0x08003401
 800339c:	08003401 	.word	0x08003401
 80033a0:	08003401 	.word	0x08003401
 80033a4:	08003401 	.word	0x08003401
 80033a8:	08003401 	.word	0x08003401
 80033ac:	08003401 	.word	0x08003401
 80033b0:	08003401 	.word	0x08003401
 80033b4:	08003409 	.word	0x08003409
 80033b8:	08003401 	.word	0x08003401
 80033bc:	08003401 	.word	0x08003401
 80033c0:	08003401 	.word	0x08003401
 80033c4:	08003401 	.word	0x08003401
 80033c8:	08003401 	.word	0x08003401
 80033cc:	08003401 	.word	0x08003401
 80033d0:	08003401 	.word	0x08003401
 80033d4:	08003409 	.word	0x08003409
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033dc:	3308      	adds	r3, #8
 80033de:	4618      	mov	r0, r3
 80033e0:	f004 fe46 	bl	8008070 <RCCEx_PLL2_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80033ea:	e00e      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033f0:	3330      	adds	r3, #48	; 0x30
 80033f2:	4618      	mov	r0, r3
 80033f4:	f004 fed4 	bl	80081a0 <RCCEx_PLL3_Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80033fe:	e004      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003406:	e000      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800340a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10c      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003412:	4b5f      	ldr	r3, [pc, #380]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003414:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003418:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800341c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003422:	4a5b      	ldr	r2, [pc, #364]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003424:	430b      	orrs	r3, r1
 8003426:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800342a:	e003      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003430:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003434:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343c:	f002 0304 	and.w	r3, r2, #4
 8003440:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003444:	2300      	movs	r3, #0
 8003446:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800344a:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 800344e:	460b      	mov	r3, r1
 8003450:	4313      	orrs	r3, r2
 8003452:	d04e      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003454:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800345a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800345e:	d02c      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8003460:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003464:	d825      	bhi.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800346a:	d028      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x292>
 800346c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003470:	d81f      	bhi.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003472:	2bc0      	cmp	r3, #192	; 0xc0
 8003474:	d025      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003476:	2bc0      	cmp	r3, #192	; 0xc0
 8003478:	d81b      	bhi.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800347a:	2b80      	cmp	r3, #128	; 0x80
 800347c:	d00f      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x272>
 800347e:	2b80      	cmp	r3, #128	; 0x80
 8003480:	d817      	bhi.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003482:	2b00      	cmp	r3, #0
 8003484:	d01f      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003486:	2b40      	cmp	r3, #64	; 0x40
 8003488:	d113      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800348a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800348e:	3308      	adds	r3, #8
 8003490:	4618      	mov	r0, r3
 8003492:	f004 fded 	bl	8008070 <RCCEx_PLL2_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800349c:	e014      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800349e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034a2:	3330      	adds	r3, #48	; 0x30
 80034a4:	4618      	mov	r0, r3
 80034a6:	f004 fe7b 	bl	80081a0 <RCCEx_PLL3_Config>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80034b0:	e00a      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80034b8:	e006      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80034ba:	bf00      	nop
 80034bc:	e004      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80034be:	bf00      	nop
 80034c0:	e002      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80034c2:	bf00      	nop
 80034c4:	e000      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80034c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034c8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10c      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80034d0:	4b2f      	ldr	r3, [pc, #188]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80034d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80034d6:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80034da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034e0:	4a2b      	ldr	r2, [pc, #172]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80034e2:	430b      	orrs	r3, r1
 80034e4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80034e8:	e003      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80034ee:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fa:	f002 0308 	and.w	r3, r2, #8
 80034fe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003502:	2300      	movs	r3, #0
 8003504:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8003508:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 800350c:	460b      	mov	r3, r1
 800350e:	4313      	orrs	r3, r2
 8003510:	d056      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8003512:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003518:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800351c:	d031      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800351e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003522:	d82a      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003528:	d02d      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800352a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800352e:	d824      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003530:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003534:	d029      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003536:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800353a:	d81e      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800353c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003540:	d011      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8003542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003546:	d818      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003548:	2b00      	cmp	r3, #0
 800354a:	d023      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800354c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003550:	d113      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003552:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003556:	3308      	adds	r3, #8
 8003558:	4618      	mov	r0, r3
 800355a:	f004 fd89 	bl	8008070 <RCCEx_PLL2_Config>
 800355e:	4603      	mov	r3, r0
 8003560:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8003564:	e017      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003566:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800356a:	3330      	adds	r3, #48	; 0x30
 800356c:	4618      	mov	r0, r3
 800356e:	f004 fe17 	bl	80081a0 <RCCEx_PLL3_Config>
 8003572:	4603      	mov	r3, r0
 8003574:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8003578:	e00d      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003580:	e009      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003582:	bf00      	nop
 8003584:	e007      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003586:	bf00      	nop
 8003588:	e005      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800358a:	bf00      	nop
 800358c:	e003      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800358e:	bf00      	nop
 8003590:	44020c00 	.word	0x44020c00
        break;
 8003594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003596:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10c      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800359e:	4bbb      	ldr	r3, [pc, #748]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80035a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80035a4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80035a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ae:	4ab7      	ldr	r2, [pc, #732]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80035b0:	430b      	orrs	r3, r1
 80035b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80035b6:	e003      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035bc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	f002 0310 	and.w	r3, r2, #16
 80035cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80035d0:	2300      	movs	r3, #0
 80035d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80035d6:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 80035da:	460b      	mov	r3, r1
 80035dc:	4313      	orrs	r3, r2
 80035de:	d053      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80035e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035e6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80035ea:	d031      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80035ec:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80035f0:	d82a      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80035f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035f6:	d02d      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80035f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035fc:	d824      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80035fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003602:	d029      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003604:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003608:	d81e      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800360a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800360e:	d011      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003614:	d818      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d020      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800361a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800361e:	d113      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003620:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003624:	3308      	adds	r3, #8
 8003626:	4618      	mov	r0, r3
 8003628:	f004 fd22 	bl	8008070 <RCCEx_PLL2_Config>
 800362c:	4603      	mov	r3, r0
 800362e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8003632:	e014      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003634:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003638:	3330      	adds	r3, #48	; 0x30
 800363a:	4618      	mov	r0, r3
 800363c:	f004 fdb0 	bl	80081a0 <RCCEx_PLL3_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8003646:	e00a      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800364e:	e006      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003650:	bf00      	nop
 8003652:	e004      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003654:	bf00      	nop
 8003656:	e002      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003658:	bf00      	nop
 800365a:	e000      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800365c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800365e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10c      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003666:	4b89      	ldr	r3, [pc, #548]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003668:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800366c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003670:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003676:	4a85      	ldr	r2, [pc, #532]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003678:	430b      	orrs	r3, r1
 800367a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800367e:	e003      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003680:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003684:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003688:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800368c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003690:	f002 0320 	and.w	r3, r2, #32
 8003694:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003698:	2300      	movs	r3, #0
 800369a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800369e:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 80036a2:	460b      	mov	r3, r1
 80036a4:	4313      	orrs	r3, r2
 80036a6:	d053      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80036a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ae:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80036b2:	d031      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80036b4:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80036b8:	d82a      	bhi.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80036ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036be:	d02d      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80036c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036c4:	d824      	bhi.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80036c6:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80036ca:	d029      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80036cc:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80036d0:	d81e      	bhi.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80036d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d6:	d011      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80036d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036dc:	d818      	bhi.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d020      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80036e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036e6:	d113      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036ec:	3308      	adds	r3, #8
 80036ee:	4618      	mov	r0, r3
 80036f0:	f004 fcbe 	bl	8008070 <RCCEx_PLL2_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80036fa:	e014      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80036fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003700:	3330      	adds	r3, #48	; 0x30
 8003702:	4618      	mov	r0, r3
 8003704:	f004 fd4c 	bl	80081a0 <RCCEx_PLL3_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800370e:	e00a      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003716:	e006      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003718:	bf00      	nop
 800371a:	e004      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800371c:	bf00      	nop
 800371e:	e002      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003720:	bf00      	nop
 8003722:	e000      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003726:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10c      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800372e:	4b57      	ldr	r3, [pc, #348]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003730:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003734:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8003738:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	4a53      	ldr	r2, [pc, #332]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003740:	430b      	orrs	r3, r1
 8003742:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003746:	e003      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003748:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800374c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003750:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003758:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800375c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003760:	2300      	movs	r3, #0
 8003762:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003766:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 800376a:	460b      	mov	r3, r1
 800376c:	4313      	orrs	r3, r2
 800376e:	d053      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8003770:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003776:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800377a:	d031      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800377c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003780:	d82a      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003786:	d02d      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8003788:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800378c:	d824      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800378e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003792:	d029      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003794:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003798:	d81e      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800379a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800379e:	d011      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80037a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037a4:	d818      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d020      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80037aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037ae:	d113      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037b4:	3308      	adds	r3, #8
 80037b6:	4618      	mov	r0, r3
 80037b8:	f004 fc5a 	bl	8008070 <RCCEx_PLL2_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80037c2:	e014      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037c8:	3330      	adds	r3, #48	; 0x30
 80037ca:	4618      	mov	r0, r3
 80037cc:	f004 fce8 	bl	80081a0 <RCCEx_PLL3_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80037d6:	e00a      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80037de:	e006      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80037e0:	bf00      	nop
 80037e2:	e004      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80037e4:	bf00      	nop
 80037e6:	e002      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80037e8:	bf00      	nop
 80037ea:	e000      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80037ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10c      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80037f6:	4b25      	ldr	r3, [pc, #148]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80037f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80037fc:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8003800:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003806:	4a21      	ldr	r2, [pc, #132]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003808:	430b      	orrs	r3, r1
 800380a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800380e:	e003      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003810:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003814:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003818:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800381c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003820:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003824:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003828:	2300      	movs	r3, #0
 800382a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800382e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8003832:	460b      	mov	r3, r1
 8003834:	4313      	orrs	r3, r2
 8003836:	d055      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8003838:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800383c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800383e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003842:	d033      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x680>
 8003844:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003848:	d82c      	bhi.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800384a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800384e:	d02f      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003850:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003854:	d826      	bhi.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003856:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800385a:	d02b      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800385c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003860:	d820      	bhi.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003862:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003866:	d013      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800386c:	d81a      	bhi.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d022      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8003872:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003876:	d115      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003878:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800387c:	3308      	adds	r3, #8
 800387e:	4618      	mov	r0, r3
 8003880:	f004 fbf6 	bl	8008070 <RCCEx_PLL2_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800388a:	e016      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800388c:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003890:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003894:	3330      	adds	r3, #48	; 0x30
 8003896:	4618      	mov	r0, r3
 8003898:	f004 fc82 	bl	80081a0 <RCCEx_PLL3_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80038a2:	e00a      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80038aa:	e006      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80038ac:	bf00      	nop
 80038ae:	e004      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80038b0:	bf00      	nop
 80038b2:	e002      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80038b4:	bf00      	nop
 80038b6:	e000      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80038b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10c      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80038c2:	4bbb      	ldr	r3, [pc, #748]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80038c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80038c8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80038cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038d2:	4ab7      	ldr	r2, [pc, #732]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80038d4:	430b      	orrs	r3, r1
 80038d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80038da:	e003      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038dc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80038e0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80038e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ec:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80038f0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80038f4:	2300      	movs	r3, #0
 80038f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80038fa:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80038fe:	460b      	mov	r3, r1
 8003900:	4313      	orrs	r3, r2
 8003902:	d053      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8003904:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800390a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800390e:	d031      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003910:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003914:	d82a      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003916:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800391a:	d02d      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800391c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003920:	d824      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003922:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003926:	d029      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x750>
 8003928:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800392c:	d81e      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800392e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003932:	d011      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8003934:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003938:	d818      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800393a:	2b00      	cmp	r3, #0
 800393c:	d020      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800393e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003942:	d113      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003944:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003948:	3308      	adds	r3, #8
 800394a:	4618      	mov	r0, r3
 800394c:	f004 fb90 	bl	8008070 <RCCEx_PLL2_Config>
 8003950:	4603      	mov	r3, r0
 8003952:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8003956:	e014      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003958:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800395c:	3330      	adds	r3, #48	; 0x30
 800395e:	4618      	mov	r0, r3
 8003960:	f004 fc1e 	bl	80081a0 <RCCEx_PLL3_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800396a:	e00a      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003972:	e006      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003974:	bf00      	nop
 8003976:	e004      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003978:	bf00      	nop
 800397a:	e002      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800397c:	bf00      	nop
 800397e:	e000      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003982:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10c      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800398a:	4b89      	ldr	r3, [pc, #548]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800398c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003990:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003994:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800399a:	4a85      	ldr	r2, [pc, #532]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800399c:	430b      	orrs	r3, r1
 800399e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80039a2:	e003      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80039a8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80039ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b4:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80039b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80039bc:	2300      	movs	r3, #0
 80039be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80039c2:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80039c6:	460b      	mov	r3, r1
 80039c8:	4313      	orrs	r3, r2
 80039ca:	d055      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80039cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039d4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80039d8:	d031      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x812>
 80039da:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80039de:	d82a      	bhi.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80039e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039e4:	d02d      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80039e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ea:	d824      	bhi.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80039ec:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80039f0:	d029      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80039f2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80039f6:	d81e      	bhi.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80039f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039fc:	d011      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80039fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a02:	d818      	bhi.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d020      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8003a08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a0c:	d113      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a12:	3308      	adds	r3, #8
 8003a14:	4618      	mov	r0, r3
 8003a16:	f004 fb2b 	bl	8008070 <RCCEx_PLL2_Config>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003a20:	e014      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a26:	3330      	adds	r3, #48	; 0x30
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f004 fbb9 	bl	80081a0 <RCCEx_PLL3_Config>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003a34:	e00a      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003a3c:	e006      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003a3e:	bf00      	nop
 8003a40:	e004      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003a42:	bf00      	nop
 8003a44:	e002      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003a46:	bf00      	nop
 8003a48:	e000      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003a4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a4c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10d      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8003a54:	4b56      	ldr	r3, [pc, #344]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003a56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a5a:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8003a5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a66:	4a52      	ldr	r2, [pc, #328]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003a6e:	e003      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a70:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a74:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8003a78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003a84:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a8e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003a92:	460b      	mov	r3, r1
 8003a94:	4313      	orrs	r3, r2
 8003a96:	d044      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8003a98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aa0:	2b05      	cmp	r3, #5
 8003aa2:	d823      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003aa4:	a201      	add	r2, pc, #4	; (adr r2, 8003aac <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aaa:	bf00      	nop
 8003aac:	08003af5 	.word	0x08003af5
 8003ab0:	08003ac5 	.word	0x08003ac5
 8003ab4:	08003ad9 	.word	0x08003ad9
 8003ab8:	08003af5 	.word	0x08003af5
 8003abc:	08003af5 	.word	0x08003af5
 8003ac0:	08003af5 	.word	0x08003af5
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ac4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ac8:	3308      	adds	r3, #8
 8003aca:	4618      	mov	r0, r3
 8003acc:	f004 fad0 	bl	8008070 <RCCEx_PLL2_Config>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003ad6:	e00e      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ad8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003adc:	3330      	adds	r3, #48	; 0x30
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f004 fb5e 	bl	80081a0 <RCCEx_PLL3_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003aea:	e004      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003af2:	e000      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10d      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8003afe:	4b2c      	ldr	r3, [pc, #176]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003b00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003b04:	f023 0107 	bic.w	r1, r3, #7
 8003b08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b10:	4a27      	ldr	r2, [pc, #156]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003b12:	430b      	orrs	r3, r1
 8003b14:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003b18:	e003      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b1e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003b22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003b2e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003b32:	2300      	movs	r3, #0
 8003b34:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b38:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	d04f      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8003b42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4a:	2b50      	cmp	r3, #80	; 0x50
 8003b4c:	d029      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003b4e:	2b50      	cmp	r3, #80	; 0x50
 8003b50:	d823      	bhi.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003b52:	2b40      	cmp	r3, #64	; 0x40
 8003b54:	d027      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8003b56:	2b40      	cmp	r3, #64	; 0x40
 8003b58:	d81f      	bhi.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003b5a:	2b30      	cmp	r3, #48	; 0x30
 8003b5c:	d025      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8003b5e:	2b30      	cmp	r3, #48	; 0x30
 8003b60:	d81b      	bhi.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003b62:	2b20      	cmp	r3, #32
 8003b64:	d00f      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d817      	bhi.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d022      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003b6e:	2b10      	cmp	r3, #16
 8003b70:	d113      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b72:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b76:	3308      	adds	r3, #8
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f004 fa79 	bl	8008070 <RCCEx_PLL2_Config>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003b84:	e017      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b8a:	3330      	adds	r3, #48	; 0x30
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f004 fb07 	bl	80081a0 <RCCEx_PLL3_Config>
 8003b92:	4603      	mov	r3, r0
 8003b94:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003b98:	e00d      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003ba0:	e009      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003ba2:	bf00      	nop
 8003ba4:	e007      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003ba6:	bf00      	nop
 8003ba8:	e005      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003baa:	bf00      	nop
 8003bac:	e003      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8003bae:	bf00      	nop
 8003bb0:	44020c00 	.word	0x44020c00
        break;
 8003bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bb6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10d      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8003bbe:	4baf      	ldr	r3, [pc, #700]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003bc0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003bc4:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003bc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd0:	4aaa      	ldr	r2, [pc, #680]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003bd2:	430b      	orrs	r3, r1
 8003bd4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003bd8:	e003      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bda:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003bde:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003be2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bea:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003bee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003bf8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	d055      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003c02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c0a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003c0e:	d031      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8003c10:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003c14:	d82a      	bhi.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003c16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c1a:	d02d      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003c1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c20:	d824      	bhi.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003c22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c26:	d029      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003c28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c2c:	d81e      	bhi.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003c2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c32:	d011      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003c34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c38:	d818      	bhi.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d020      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8003c3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c42:	d113      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c48:	3308      	adds	r3, #8
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f004 fa10 	bl	8008070 <RCCEx_PLL2_Config>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003c56:	e014      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c5c:	3330      	adds	r3, #48	; 0x30
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f004 fa9e 	bl	80081a0 <RCCEx_PLL3_Config>
 8003c64:	4603      	mov	r3, r0
 8003c66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003c6a:	e00a      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003c72:	e006      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003c74:	bf00      	nop
 8003c76:	e004      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003c78:	bf00      	nop
 8003c7a:	e002      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003c7c:	bf00      	nop
 8003c7e:	e000      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003c80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c82:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10d      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003c8a:	4b7c      	ldr	r3, [pc, #496]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c90:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003c94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c9c:	4a77      	ldr	r2, [pc, #476]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c9e:	430b      	orrs	r3, r1
 8003ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ca4:	e003      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003caa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003cba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003cc4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	d03d      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003cce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cda:	d01b      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003cdc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ce0:	d814      	bhi.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003ce2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ce6:	d017      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003ce8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cec:	d80e      	bhi.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d014      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf6:	d109      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003cf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cfc:	3330      	adds	r3, #48	; 0x30
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f004 fa4e 	bl	80081a0 <RCCEx_PLL3_Config>
 8003d04:	4603      	mov	r3, r0
 8003d06:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003d0a:	e008      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d12:	e004      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003d14:	bf00      	nop
 8003d16:	e002      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003d18:	bf00      	nop
 8003d1a:	e000      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d1e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10d      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003d26:	4b55      	ldr	r3, [pc, #340]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003d28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d2c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003d30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d38:	4a50      	ldr	r2, [pc, #320]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003d3a:	430b      	orrs	r3, r1
 8003d3c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003d40:	e003      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d42:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d46:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003d56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d60:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4313      	orrs	r3, r2
 8003d68:	d03d      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003d6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d72:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d76:	d01b      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8003d78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d7c:	d814      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003d7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d82:	d017      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003d84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d88:	d80e      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d014      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003d8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d92:	d109      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d98:	3330      	adds	r3, #48	; 0x30
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f004 fa00 	bl	80081a0 <RCCEx_PLL3_Config>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003da6:	e008      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003dae:	e004      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003db0:	bf00      	nop
 8003db2:	e002      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003db4:	bf00      	nop
 8003db6:	e000      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10d      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003dc2:	4b2e      	ldr	r3, [pc, #184]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003dc4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003dc8:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003dcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd4:	4a29      	ldr	r2, [pc, #164]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003dd6:	430b      	orrs	r3, r1
 8003dd8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003ddc:	e003      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dde:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003de2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003de6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003df2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003df6:	2300      	movs	r3, #0
 8003df8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003dfc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e00:	460b      	mov	r3, r1
 8003e02:	4313      	orrs	r3, r2
 8003e04:	d040      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003e06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e12:	d01b      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003e14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e18:	d814      	bhi.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003e1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e1e:	d017      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003e20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e24:	d80e      	bhi.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d014      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e2e:	d109      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e34:	3330      	adds	r3, #48	; 0x30
 8003e36:	4618      	mov	r0, r3
 8003e38:	f004 f9b2 	bl	80081a0 <RCCEx_PLL3_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003e42:	e008      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003e4a:	e004      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003e4c:	bf00      	nop
 8003e4e:	e002      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003e50:	bf00      	nop
 8003e52:	e000      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e56:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d110      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003e5e:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003e60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003e64:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003e68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e70:	4a02      	ldr	r2, [pc, #8]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003e72:	430b      	orrs	r3, r1
 8003e74:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003e78:	e006      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003e7a:	bf00      	nop
 8003e7c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e80:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e84:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e90:	2100      	movs	r1, #0
 8003e92:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003e9e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	d03d      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003ea8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003eac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eb0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003eb4:	d01b      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003eb6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003eba:	d814      	bhi.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003ebc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ec0:	d017      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003ec2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ec6:	d80e      	bhi.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d014      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ed0:	d109      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ed2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ed6:	3330      	adds	r3, #48	; 0x30
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f004 f961 	bl	80081a0 <RCCEx_PLL3_Config>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003eec:	e004      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003eee:	bf00      	nop
 8003ef0:	e002      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003ef2:	bf00      	nop
 8003ef4:	e000      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003ef6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ef8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10d      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003f00:	4bbe      	ldr	r3, [pc, #760]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003f06:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003f0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f12:	4aba      	ldr	r2, [pc, #744]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f14:	430b      	orrs	r3, r1
 8003f16:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003f1a:	e003      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f20:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003f24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003f30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f34:	2300      	movs	r3, #0
 8003f36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f3a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4313      	orrs	r3, r2
 8003f42:	d035      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003f44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f50:	d015      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003f52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f56:	d80e      	bhi.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d012      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f60:	d109      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f66:	3330      	adds	r3, #48	; 0x30
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f004 f919 	bl	80081a0 <RCCEx_PLL3_Config>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003f74:	e006      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003f7c:	e002      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003f7e:	bf00      	nop
 8003f80:	e000      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003f82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f84:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10d      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003f8c:	4b9b      	ldr	r3, [pc, #620]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003f92:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8003f96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f9e:	4a97      	ldr	r2, [pc, #604]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003fa6:	e003      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003fac:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003fb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb8:	2100      	movs	r1, #0
 8003fba:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fc6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	d00e      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003fd0:	4b8a      	ldr	r3, [pc, #552]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	4a89      	ldr	r2, [pc, #548]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003fd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003fda:	61d3      	str	r3, [r2, #28]
 8003fdc:	4b87      	ldr	r3, [pc, #540]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003fde:	69d9      	ldr	r1, [r3, #28]
 8003fe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fe4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003fe8:	4a84      	ldr	r2, [pc, #528]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003fea:	430b      	orrs	r3, r1
 8003fec:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003ffa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ffe:	2300      	movs	r3, #0
 8004000:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004004:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004008:	460b      	mov	r3, r1
 800400a:	4313      	orrs	r3, r2
 800400c:	d055      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800400e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004012:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004016:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800401a:	d031      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 800401c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004020:	d82a      	bhi.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004026:	d02d      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402c:	d824      	bhi.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800402e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004032:	d029      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004034:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004038:	d81e      	bhi.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800403a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800403e:	d011      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8004040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004044:	d818      	bhi.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d020      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800404a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800404e:	d113      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004050:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004054:	3308      	adds	r3, #8
 8004056:	4618      	mov	r0, r3
 8004058:	f004 f80a 	bl	8008070 <RCCEx_PLL2_Config>
 800405c:	4603      	mov	r3, r0
 800405e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004062:	e014      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004064:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004068:	3330      	adds	r3, #48	; 0x30
 800406a:	4618      	mov	r0, r3
 800406c:	f004 f898 	bl	80081a0 <RCCEx_PLL3_Config>
 8004070:	4603      	mov	r3, r0
 8004072:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004076:	e00a      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800407e:	e006      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004080:	bf00      	nop
 8004082:	e004      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004084:	bf00      	nop
 8004086:	e002      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004088:	bf00      	nop
 800408a:	e000      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800408c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800408e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10d      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004096:	4b59      	ldr	r3, [pc, #356]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004098:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800409c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80040a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80040a8:	4a54      	ldr	r2, [pc, #336]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80040aa:	430b      	orrs	r3, r1
 80040ac:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80040b0:	e003      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80040b6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80040ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80040c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040ca:	2300      	movs	r3, #0
 80040cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040d0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80040d4:	460b      	mov	r3, r1
 80040d6:	4313      	orrs	r3, r2
 80040d8:	d055      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80040da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80040e2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80040e6:	d031      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80040e8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80040ec:	d82a      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80040ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f2:	d02d      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80040f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f8:	d824      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80040fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040fe:	d029      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8004100:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004104:	d81e      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800410a:	d011      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 800410c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004110:	d818      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004112:	2b00      	cmp	r3, #0
 8004114:	d020      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800411a:	d113      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800411c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004120:	3308      	adds	r3, #8
 8004122:	4618      	mov	r0, r3
 8004124:	f003 ffa4 	bl	8008070 <RCCEx_PLL2_Config>
 8004128:	4603      	mov	r3, r0
 800412a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800412e:	e014      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004130:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004134:	3330      	adds	r3, #48	; 0x30
 8004136:	4618      	mov	r0, r3
 8004138:	f004 f832 	bl	80081a0 <RCCEx_PLL3_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004142:	e00a      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800414a:	e006      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800414c:	bf00      	nop
 800414e:	e004      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004150:	bf00      	nop
 8004152:	e002      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004154:	bf00      	nop
 8004156:	e000      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800415a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10d      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004162:	4b26      	ldr	r3, [pc, #152]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004164:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004168:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800416c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004170:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004174:	4a21      	ldr	r2, [pc, #132]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004176:	430b      	orrs	r3, r1
 8004178:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800417c:	e003      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004182:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8004186:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418e:	2100      	movs	r1, #0
 8004190:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800419c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80041a0:	460b      	mov	r3, r1
 80041a2:	4313      	orrs	r3, r2
 80041a4:	d057      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 80041a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80041ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041b2:	d033      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80041b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041b8:	d82c      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80041ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041be:	d02f      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 80041c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041c4:	d826      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80041c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041ca:	d02b      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 80041cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041d0:	d820      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80041d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041d6:	d013      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80041d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041dc:	d81a      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d022      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80041e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e6:	d115      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041ec:	3308      	adds	r3, #8
 80041ee:	4618      	mov	r0, r3
 80041f0:	f003 ff3e 	bl	8008070 <RCCEx_PLL2_Config>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80041fa:	e016      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80041fc:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004200:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004204:	3330      	adds	r3, #48	; 0x30
 8004206:	4618      	mov	r0, r3
 8004208:	f003 ffca 	bl	80081a0 <RCCEx_PLL3_Config>
 800420c:	4603      	mov	r3, r0
 800420e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004212:	e00a      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800421a:	e006      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800421c:	bf00      	nop
 800421e:	e004      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004220:	bf00      	nop
 8004222:	e002      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004224:	bf00      	nop
 8004226:	e000      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800422a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10d      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8004232:	4bbb      	ldr	r3, [pc, #748]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004234:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004238:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800423c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004240:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004244:	4ab6      	ldr	r2, [pc, #728]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004246:	430b      	orrs	r3, r1
 8004248:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800424c:	e003      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004252:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8004256:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800425a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425e:	2100      	movs	r1, #0
 8004260:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004268:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800426c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004270:	460b      	mov	r3, r1
 8004272:	4313      	orrs	r3, r2
 8004274:	d055      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8004276:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800427a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800427e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004282:	d031      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004284:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004288:	d82a      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800428a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800428e:	d02d      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8004290:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004294:	d824      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004296:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800429a:	d029      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 800429c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042a0:	d81e      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80042a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042a6:	d011      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80042a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042ac:	d818      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d020      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80042b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042b6:	d113      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042bc:	3308      	adds	r3, #8
 80042be:	4618      	mov	r0, r3
 80042c0:	f003 fed6 	bl	8008070 <RCCEx_PLL2_Config>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80042ca:	e014      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042d0:	3330      	adds	r3, #48	; 0x30
 80042d2:	4618      	mov	r0, r3
 80042d4:	f003 ff64 	bl	80081a0 <RCCEx_PLL3_Config>
 80042d8:	4603      	mov	r3, r0
 80042da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80042de:	e00a      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80042e6:	e006      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80042e8:	bf00      	nop
 80042ea:	e004      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80042ec:	bf00      	nop
 80042ee:	e002      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80042f0:	bf00      	nop
 80042f2:	e000      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80042f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10d      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80042fe:	4b88      	ldr	r3, [pc, #544]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004300:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004304:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8004308:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800430c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004310:	4a83      	ldr	r2, [pc, #524]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004312:	430b      	orrs	r3, r1
 8004314:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004318:	e003      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800431e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8004322:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432a:	2100      	movs	r1, #0
 800432c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8004330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004334:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004338:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800433c:	460b      	mov	r3, r1
 800433e:	4313      	orrs	r3, r2
 8004340:	d055      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8004342:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004346:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800434a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800434e:	d031      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8004350:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004354:	d82a      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004356:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800435a:	d02d      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 800435c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004360:	d824      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004362:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004366:	d029      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8004368:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800436c:	d81e      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800436e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004372:	d011      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8004374:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004378:	d818      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800437a:	2b00      	cmp	r3, #0
 800437c:	d020      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800437e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004382:	d113      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004384:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004388:	3308      	adds	r3, #8
 800438a:	4618      	mov	r0, r3
 800438c:	f003 fe70 	bl	8008070 <RCCEx_PLL2_Config>
 8004390:	4603      	mov	r3, r0
 8004392:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8004396:	e014      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004398:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800439c:	3330      	adds	r3, #48	; 0x30
 800439e:	4618      	mov	r0, r3
 80043a0:	f003 fefe 	bl	80081a0 <RCCEx_PLL3_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80043aa:	e00a      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80043b2:	e006      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80043b4:	bf00      	nop
 80043b6:	e004      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80043b8:	bf00      	nop
 80043ba:	e002      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80043bc:	bf00      	nop
 80043be:	e000      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80043c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10d      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80043ca:	4b55      	ldr	r3, [pc, #340]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80043cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80043d0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80043d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043dc:	4a50      	ldr	r2, [pc, #320]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80043de:	430b      	orrs	r3, r1
 80043e0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80043e4:	e003      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043ea:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80043ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f6:	2100      	movs	r1, #0
 80043f8:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80043fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004400:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004404:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004408:	460b      	mov	r3, r1
 800440a:	4313      	orrs	r3, r2
 800440c:	d055      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800440e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004412:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004416:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800441a:	d031      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800441c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004420:	d82a      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004426:	d02d      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8004428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442c:	d824      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800442e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004432:	d029      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8004434:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004438:	d81e      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800443a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800443e:	d011      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8004440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004444:	d818      	bhi.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004446:	2b00      	cmp	r3, #0
 8004448:	d020      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800444a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800444e:	d113      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004450:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004454:	3308      	adds	r3, #8
 8004456:	4618      	mov	r0, r3
 8004458:	f003 fe0a 	bl	8008070 <RCCEx_PLL2_Config>
 800445c:	4603      	mov	r3, r0
 800445e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8004462:	e014      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004464:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004468:	3330      	adds	r3, #48	; 0x30
 800446a:	4618      	mov	r0, r3
 800446c:	f003 fe98 	bl	80081a0 <RCCEx_PLL3_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8004476:	e00a      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800447e:	e006      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004480:	bf00      	nop
 8004482:	e004      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004484:	bf00      	nop
 8004486:	e002      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004488:	bf00      	nop
 800448a:	e000      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800448c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800448e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10d      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8004496:	4b22      	ldr	r3, [pc, #136]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004498:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800449c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80044a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80044a8:	4a1d      	ldr	r2, [pc, #116]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80044aa:	430b      	orrs	r3, r1
 80044ac:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80044b0:	e003      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80044b6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80044ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c2:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80044c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044ca:	2300      	movs	r3, #0
 80044cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80044d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80044d4:	460b      	mov	r3, r1
 80044d6:	4313      	orrs	r3, r2
 80044d8:	d055      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80044da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044de:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80044e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044e6:	d035      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80044e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044ec:	d82e      	bhi.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80044ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044f2:	d031      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80044f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044f8:	d828      	bhi.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80044fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044fe:	d01b      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8004500:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004504:	d822      	bhi.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800450a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800450e:	d009      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8004510:	e01c      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004512:	4b03      	ldr	r3, [pc, #12]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004516:	4a02      	ldr	r2, [pc, #8]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800451c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800451e:	e01c      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8004520:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004524:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004528:	3308      	adds	r3, #8
 800452a:	4618      	mov	r0, r3
 800452c:	f003 fda0 	bl	8008070 <RCCEx_PLL2_Config>
 8004530:	4603      	mov	r3, r0
 8004532:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004536:	e010      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004538:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800453c:	3330      	adds	r3, #48	; 0x30
 800453e:	4618      	mov	r0, r3
 8004540:	f003 fe2e 	bl	80081a0 <RCCEx_PLL3_Config>
 8004544:	4603      	mov	r3, r0
 8004546:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800454a:	e006      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004552:	e002      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004554:	bf00      	nop
 8004556:	e000      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800455a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10d      	bne.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004562:	4bc3      	ldr	r3, [pc, #780]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004564:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004568:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800456c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004570:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004574:	4abe      	ldr	r2, [pc, #760]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004576:	430b      	orrs	r3, r1
 8004578:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800457c:	e003      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004582:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8004586:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800458a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458e:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004592:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004596:	2300      	movs	r3, #0
 8004598:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800459c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80045a0:	460b      	mov	r3, r1
 80045a2:	4313      	orrs	r3, r2
 80045a4:	d051      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80045a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80045ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045b2:	d033      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80045b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045b8:	d82c      	bhi.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80045ba:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80045be:	d02d      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80045c0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80045c4:	d826      	bhi.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80045c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ca:	d019      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80045cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d0:	d820      	bhi.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80045d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045da:	d007      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80045dc:	e01a      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045de:	4ba4      	ldr	r3, [pc, #656]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	4aa3      	ldr	r2, [pc, #652]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80045e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045e8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80045ea:	e018      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045f0:	3308      	adds	r3, #8
 80045f2:	4618      	mov	r0, r3
 80045f4:	f003 fd3c 	bl	8008070 <RCCEx_PLL2_Config>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80045fe:	e00e      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004600:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004604:	3330      	adds	r3, #48	; 0x30
 8004606:	4618      	mov	r0, r3
 8004608:	f003 fdca 	bl	80081a0 <RCCEx_PLL3_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004612:	e004      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800461a:	e000      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800461c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800461e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10d      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004626:	4b92      	ldr	r3, [pc, #584]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004628:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800462c:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8004630:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004634:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004638:	4a8d      	ldr	r2, [pc, #564]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800463a:	430b      	orrs	r3, r1
 800463c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004640:	e003      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004642:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004646:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800464a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004652:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004656:	67bb      	str	r3, [r7, #120]	; 0x78
 8004658:	2300      	movs	r3, #0
 800465a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800465c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004660:	460b      	mov	r3, r1
 8004662:	4313      	orrs	r3, r2
 8004664:	d032      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004666:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800466a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800466e:	2b05      	cmp	r3, #5
 8004670:	d80f      	bhi.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8004672:	2b03      	cmp	r3, #3
 8004674:	d211      	bcs.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8004676:	2b01      	cmp	r3, #1
 8004678:	d911      	bls.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800467a:	2b02      	cmp	r3, #2
 800467c:	d109      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800467e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004682:	3308      	adds	r3, #8
 8004684:	4618      	mov	r0, r3
 8004686:	f003 fcf3 	bl	8008070 <RCCEx_PLL2_Config>
 800468a:	4603      	mov	r3, r0
 800468c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004690:	e006      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004698:	e002      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800469a:	bf00      	nop
 800469c:	e000      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800469e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046a0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10d      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80046a8:	4b71      	ldr	r3, [pc, #452]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046ae:	f023 0107 	bic.w	r1, r3, #7
 80046b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80046ba:	4a6d      	ldr	r2, [pc, #436]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046bc:	430b      	orrs	r3, r1
 80046be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80046c2:	e003      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80046c8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80046cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d4:	2100      	movs	r1, #0
 80046d6:	6739      	str	r1, [r7, #112]	; 0x70
 80046d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046dc:	677b      	str	r3, [r7, #116]	; 0x74
 80046de:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80046e2:	460b      	mov	r3, r1
 80046e4:	4313      	orrs	r3, r2
 80046e6:	d024      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80046e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d005      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80046fe:	e002      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004700:	bf00      	nop
 8004702:	e000      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004706:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10d      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800470e:	4b58      	ldr	r3, [pc, #352]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004710:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004714:	f023 0108 	bic.w	r1, r3, #8
 8004718:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800471c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004720:	4a53      	ldr	r2, [pc, #332]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004722:	430b      	orrs	r3, r1
 8004724:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004728:	e003      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800472a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800472e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004732:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473a:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800473e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004740:	2300      	movs	r3, #0
 8004742:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004744:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004748:	460b      	mov	r3, r1
 800474a:	4313      	orrs	r3, r2
 800474c:	f000 80b9 	beq.w	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004750:	4b48      	ldr	r3, [pc, #288]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	4a47      	ldr	r2, [pc, #284]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800475c:	f7fd fb56 	bl	8001e0c <HAL_GetTick>
 8004760:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004764:	e00b      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004766:	f7fd fb51 	bl	8001e0c <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d903      	bls.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800477c:	e005      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800477e:	4b3d      	ldr	r3, [pc, #244]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0ed      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800478a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800478e:	2b00      	cmp	r3, #0
 8004790:	f040 8093 	bne.w	80048ba <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004794:	4b36      	ldr	r3, [pc, #216]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004796:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800479a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800479e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80047a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d023      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80047aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047ae:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80047b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d01b      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047ba:	4b2d      	ldr	r3, [pc, #180]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80047bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047c4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047c8:	4b29      	ldr	r3, [pc, #164]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80047ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047ce:	4a28      	ldr	r2, [pc, #160]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80047d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047d8:	4b25      	ldr	r3, [pc, #148]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80047da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047de:	4a24      	ldr	r2, [pc, #144]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80047e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047e8:	4a21      	ldr	r2, [pc, #132]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80047ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80047ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d019      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fe:	f7fd fb05 	bl	8001e0c <HAL_GetTick>
 8004802:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004806:	e00d      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004808:	f7fd fb00 	bl	8001e0c <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004812:	1ad2      	subs	r2, r2, r3
 8004814:	f241 3388 	movw	r3, #5000	; 0x1388
 8004818:	429a      	cmp	r2, r3
 800481a:	d903      	bls.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8004822:	e006      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004824:	4b12      	ldr	r3, [pc, #72]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004826:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0ea      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8004832:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004836:	2b00      	cmp	r3, #0
 8004838:	d13a      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800483a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800483e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004846:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800484a:	d115      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 800484c:	4b08      	ldr	r3, [pc, #32]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004854:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004858:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800485c:	091b      	lsrs	r3, r3, #4
 800485e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004862:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004866:	4a02      	ldr	r2, [pc, #8]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004868:	430b      	orrs	r3, r1
 800486a:	61d3      	str	r3, [r2, #28]
 800486c:	e00a      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800486e:	bf00      	nop
 8004870:	44020c00 	.word	0x44020c00
 8004874:	44020800 	.word	0x44020800
 8004878:	4b9f      	ldr	r3, [pc, #636]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	4a9e      	ldr	r2, [pc, #632]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800487e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004882:	61d3      	str	r3, [r2, #28]
 8004884:	4b9c      	ldr	r3, [pc, #624]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004886:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800488a:	4a9b      	ldr	r2, [pc, #620]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800488c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004890:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004894:	4b98      	ldr	r3, [pc, #608]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004896:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 800489a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800489e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80048a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a6:	4a94      	ldr	r2, [pc, #592]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048a8:	430b      	orrs	r3, r1
 80048aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80048ae:	e008      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048b0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80048b4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 80048b8:	e003      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80048be:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80048c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80048ce:	663b      	str	r3, [r7, #96]	; 0x60
 80048d0:	2300      	movs	r3, #0
 80048d2:	667b      	str	r3, [r7, #100]	; 0x64
 80048d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80048d8:	460b      	mov	r3, r1
 80048da:	4313      	orrs	r3, r2
 80048dc:	d035      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80048de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80048e6:	2b30      	cmp	r3, #48	; 0x30
 80048e8:	d014      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80048ea:	2b30      	cmp	r3, #48	; 0x30
 80048ec:	d80e      	bhi.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80048ee:	2b20      	cmp	r3, #32
 80048f0:	d012      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80048f2:	2b20      	cmp	r3, #32
 80048f4:	d80a      	bhi.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d010      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80048fa:	2b10      	cmp	r3, #16
 80048fc:	d106      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048fe:	4b7e      	ldr	r3, [pc, #504]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004902:	4a7d      	ldr	r2, [pc, #500]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004908:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800490a:	e008      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004912:	e004      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004914:	bf00      	nop
 8004916:	e002      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004918:	bf00      	nop
 800491a:	e000      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800491c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800491e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10d      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004926:	4b74      	ldr	r3, [pc, #464]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004928:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800492c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004930:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004934:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004938:	4a6f      	ldr	r2, [pc, #444]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800493a:	430b      	orrs	r3, r1
 800493c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004940:	e003      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004942:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004946:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800494a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800494e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004952:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004956:	65bb      	str	r3, [r7, #88]	; 0x58
 8004958:	2300      	movs	r3, #0
 800495a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800495c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004960:	460b      	mov	r3, r1
 8004962:	4313      	orrs	r3, r2
 8004964:	d033      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8004966:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800496a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8004972:	2b40      	cmp	r3, #64	; 0x40
 8004974:	d007      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8004976:	e010      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004978:	4b5f      	ldr	r3, [pc, #380]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	4a5e      	ldr	r2, [pc, #376]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800497e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004982:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004984:	e00d      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004986:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800498a:	3308      	adds	r3, #8
 800498c:	4618      	mov	r0, r3
 800498e:	f003 fb6f 	bl	8008070 <RCCEx_PLL2_Config>
 8004992:	4603      	mov	r3, r0
 8004994:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004998:	e003      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80049a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049a2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10d      	bne.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80049aa:	4b53      	ldr	r3, [pc, #332]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80049ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80049b0:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80049b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049b8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80049bc:	4a4e      	ldr	r2, [pc, #312]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80049be:	430b      	orrs	r3, r1
 80049c0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80049c4:	e003      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80049ca:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80049ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80049da:	653b      	str	r3, [r7, #80]	; 0x50
 80049dc:	2300      	movs	r3, #0
 80049de:	657b      	str	r3, [r7, #84]	; 0x54
 80049e0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80049e4:	460b      	mov	r3, r1
 80049e6:	4313      	orrs	r3, r2
 80049e8:	d033      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80049ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049ee:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80049f6:	2b80      	cmp	r3, #128	; 0x80
 80049f8:	d007      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80049fa:	e010      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049fc:	4b3e      	ldr	r3, [pc, #248]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80049fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a00:	4a3d      	ldr	r2, [pc, #244]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a06:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004a08:	e00d      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a0e:	3308      	adds	r3, #8
 8004a10:	4618      	mov	r0, r3
 8004a12:	f003 fb2d 	bl	8008070 <RCCEx_PLL2_Config>
 8004a16:	4603      	mov	r3, r0
 8004a18:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004a1c:	e003      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a26:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10d      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8004a2e:	4b32      	ldr	r3, [pc, #200]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004a34:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004a38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a3c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004a40:	4a2d      	ldr	r2, [pc, #180]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a42:	430b      	orrs	r3, r1
 8004a44:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004a48:	e003      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a4e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004a52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5a:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8004a5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a60:	2300      	movs	r3, #0
 8004a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a64:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	d04a      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004a6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d827      	bhi.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8004a7a:	a201      	add	r2, pc, #4	; (adr r2, 8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8004a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a80:	08004a95 	.word	0x08004a95
 8004a84:	08004aa3 	.word	0x08004aa3
 8004a88:	08004ab7 	.word	0x08004ab7
 8004a8c:	08004ad3 	.word	0x08004ad3
 8004a90:	08004ad3 	.word	0x08004ad3
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a94:	4b18      	ldr	r3, [pc, #96]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a98:	4a17      	ldr	r2, [pc, #92]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a9e:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004aa0:	e018      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004aa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004aa6:	3308      	adds	r3, #8
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f003 fae1 	bl	8008070 <RCCEx_PLL2_Config>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004ab4:	e00e      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ab6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004aba:	3330      	adds	r3, #48	; 0x30
 8004abc:	4618      	mov	r0, r3
 8004abe:	f003 fb6f 	bl	80081a0 <RCCEx_PLL3_Config>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004ac8:	e004      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004ad0:	e000      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8004ad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ad4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10f      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004adc:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ae2:	f023 0107 	bic.w	r1, r3, #7
 8004ae6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004aee:	4a02      	ldr	r2, [pc, #8]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004af0:	430b      	orrs	r3, r1
 8004af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004af6:	e005      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8004af8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b00:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004b04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004b10:	643b      	str	r3, [r7, #64]	; 0x40
 8004b12:	2300      	movs	r3, #0
 8004b14:	647b      	str	r3, [r7, #68]	; 0x44
 8004b16:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	f000 8081 	beq.w	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004b22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d85f      	bhi.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8004b2e:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8004b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b34:	08004bb9 	.word	0x08004bb9
 8004b38:	08004bef 	.word	0x08004bef
 8004b3c:	08004bef 	.word	0x08004bef
 8004b40:	08004bef 	.word	0x08004bef
 8004b44:	08004bef 	.word	0x08004bef
 8004b48:	08004bef 	.word	0x08004bef
 8004b4c:	08004bef 	.word	0x08004bef
 8004b50:	08004bef 	.word	0x08004bef
 8004b54:	08004bc7 	.word	0x08004bc7
 8004b58:	08004bef 	.word	0x08004bef
 8004b5c:	08004bef 	.word	0x08004bef
 8004b60:	08004bef 	.word	0x08004bef
 8004b64:	08004bef 	.word	0x08004bef
 8004b68:	08004bef 	.word	0x08004bef
 8004b6c:	08004bef 	.word	0x08004bef
 8004b70:	08004bef 	.word	0x08004bef
 8004b74:	08004bdb 	.word	0x08004bdb
 8004b78:	08004bef 	.word	0x08004bef
 8004b7c:	08004bef 	.word	0x08004bef
 8004b80:	08004bef 	.word	0x08004bef
 8004b84:	08004bef 	.word	0x08004bef
 8004b88:	08004bef 	.word	0x08004bef
 8004b8c:	08004bef 	.word	0x08004bef
 8004b90:	08004bef 	.word	0x08004bef
 8004b94:	08004bf7 	.word	0x08004bf7
 8004b98:	08004bef 	.word	0x08004bef
 8004b9c:	08004bef 	.word	0x08004bef
 8004ba0:	08004bef 	.word	0x08004bef
 8004ba4:	08004bef 	.word	0x08004bef
 8004ba8:	08004bef 	.word	0x08004bef
 8004bac:	08004bef 	.word	0x08004bef
 8004bb0:	08004bef 	.word	0x08004bef
 8004bb4:	08004bf7 	.word	0x08004bf7
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bb8:	4bab      	ldr	r3, [pc, #684]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbc:	4aaa      	ldr	r2, [pc, #680]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bc2:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004bc4:	e018      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bca:	3308      	adds	r3, #8
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f003 fa4f 	bl	8008070 <RCCEx_PLL2_Config>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004bd8:	e00e      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bde:	3330      	adds	r3, #48	; 0x30
 8004be0:	4618      	mov	r0, r3
 8004be2:	f003 fadd 	bl	80081a0 <RCCEx_PLL3_Config>
 8004be6:	4603      	mov	r3, r0
 8004be8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004bec:	e004      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004bf4:	e000      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8004bf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bf8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10d      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004c00:	4b99      	ldr	r3, [pc, #612]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c06:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004c0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004c12:	4a95      	ldr	r2, [pc, #596]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004c14:	430b      	orrs	r3, r1
 8004c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c1a:	e003      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c20:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004c24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004c30:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c32:	2300      	movs	r3, #0
 8004c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c36:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	d04e      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004c40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4c:	d02e      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8004c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c52:	d827      	bhi.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004c54:	2bc0      	cmp	r3, #192	; 0xc0
 8004c56:	d02b      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8004c58:	2bc0      	cmp	r3, #192	; 0xc0
 8004c5a:	d823      	bhi.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004c5c:	2b80      	cmp	r3, #128	; 0x80
 8004c5e:	d017      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8004c60:	2b80      	cmp	r3, #128	; 0x80
 8004c62:	d81f      	bhi.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d002      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8004c68:	2b40      	cmp	r3, #64	; 0x40
 8004c6a:	d007      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8004c6c:	e01a      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c6e:	4b7e      	ldr	r3, [pc, #504]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c72:	4a7d      	ldr	r2, [pc, #500]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c78:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004c7a:	e01a      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c80:	3308      	adds	r3, #8
 8004c82:	4618      	mov	r0, r3
 8004c84:	f003 f9f4 	bl	8008070 <RCCEx_PLL2_Config>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004c8e:	e010      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c94:	3330      	adds	r3, #48	; 0x30
 8004c96:	4618      	mov	r0, r3
 8004c98:	f003 fa82 	bl	80081a0 <RCCEx_PLL3_Config>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004ca2:	e006      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004caa:	e002      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004cac:	bf00      	nop
 8004cae:	e000      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cb2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10d      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004cba:	4b6b      	ldr	r3, [pc, #428]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cc0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004cc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ccc:	4a66      	ldr	r2, [pc, #408]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004cce:	430b      	orrs	r3, r1
 8004cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004cd4:	e003      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004cda:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004cde:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004cea:	633b      	str	r3, [r7, #48]	; 0x30
 8004cec:	2300      	movs	r3, #0
 8004cee:	637b      	str	r3, [r7, #52]	; 0x34
 8004cf0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	d055      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004cfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cfe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004d02:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004d06:	d031      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8004d08:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004d0c:	d82a      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004d0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d12:	d02d      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8004d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d18:	d824      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004d1a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d1e:	d029      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8004d20:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d24:	d81e      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d2a:	d011      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8004d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d30:	d818      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d020      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8004d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d3a:	d113      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d40:	3308      	adds	r3, #8
 8004d42:	4618      	mov	r0, r3
 8004d44:	f003 f994 	bl	8008070 <RCCEx_PLL2_Config>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004d4e:	e014      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d54:	3330      	adds	r3, #48	; 0x30
 8004d56:	4618      	mov	r0, r3
 8004d58:	f003 fa22 	bl	80081a0 <RCCEx_PLL3_Config>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004d62:	e00a      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004d6a:	e006      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004d6c:	bf00      	nop
 8004d6e:	e004      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004d70:	bf00      	nop
 8004d72:	e002      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004d74:	bf00      	nop
 8004d76:	e000      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d7a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10d      	bne.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004d82:	4b39      	ldr	r3, [pc, #228]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d88:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004d8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d90:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004d94:	4a34      	ldr	r2, [pc, #208]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004d96:	430b      	orrs	r3, r1
 8004d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d9c:	e003      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004da2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8004da6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dae:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db4:	2300      	movs	r3, #0
 8004db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004db8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	d058      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8004dc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004dc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dca:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004dce:	d031      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004dd0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004dd4:	d82a      	bhi.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004dd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dda:	d02d      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004ddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004de0:	d824      	bhi.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004de2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004de6:	d029      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8004de8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dec:	d81e      	bhi.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df2:	d011      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df8:	d818      	bhi.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d020      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8004dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e02:	d113      	bne.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e08:	3308      	adds	r3, #8
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f003 f930 	bl	8008070 <RCCEx_PLL2_Config>
 8004e10:	4603      	mov	r3, r0
 8004e12:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004e16:	e014      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e1c:	3330      	adds	r3, #48	; 0x30
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f003 f9be 	bl	80081a0 <RCCEx_PLL3_Config>
 8004e24:	4603      	mov	r3, r0
 8004e26:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004e32:	e006      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004e34:	bf00      	nop
 8004e36:	e004      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004e38:	bf00      	nop
 8004e3a:	e002      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004e3c:	bf00      	nop
 8004e3e:	e000      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e42:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d110      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004e4a:	4b07      	ldr	r3, [pc, #28]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e50:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004e54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e5c:	4902      	ldr	r1, [pc, #8]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004e64:	e006      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8004e66:	bf00      	nop
 8004e68:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e70:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	6239      	str	r1, [r7, #32]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24
 8004e86:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	d055      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004e90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e98:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004e9c:	d031      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8004e9e:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004ea2:	d82a      	bhi.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004ea4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ea8:	d02d      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8004eaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eae:	d824      	bhi.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004eb0:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004eb4:	d029      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8004eb6:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004eba:	d81e      	bhi.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec0:	d011      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8004ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec6:	d818      	bhi.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d020      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ed0:	d113      	bne.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ed2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ed6:	3308      	adds	r3, #8
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f003 f8c9 	bl	8008070 <RCCEx_PLL2_Config>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ee4:	e014      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ee6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004eea:	3330      	adds	r3, #48	; 0x30
 8004eec:	4618      	mov	r0, r3
 8004eee:	f003 f957 	bl	80081a0 <RCCEx_PLL3_Config>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ef8:	e00a      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004f00:	e006      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004f02:	bf00      	nop
 8004f04:	e004      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004f06:	bf00      	nop
 8004f08:	e002      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004f0a:	bf00      	nop
 8004f0c:	e000      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f10:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10d      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004f18:	4b88      	ldr	r3, [pc, #544]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f1e:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8004f22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f2a:	4984      	ldr	r1, [pc, #528]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004f32:	e003      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f34:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f38:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f44:	2100      	movs	r1, #0
 8004f46:	61b9      	str	r1, [r7, #24]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004f52:	460b      	mov	r3, r1
 8004f54:	4313      	orrs	r3, r2
 8004f56:	d03d      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004f58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f5c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d81c      	bhi.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8004f64:	a201      	add	r2, pc, #4	; (adr r2, 8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8004f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6a:	bf00      	nop
 8004f6c:	08004fa7 	.word	0x08004fa7
 8004f70:	08004f7d 	.word	0x08004f7d
 8004f74:	08004f8b 	.word	0x08004f8b
 8004f78:	08004fa7 	.word	0x08004fa7
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f7c:	4b6f      	ldr	r3, [pc, #444]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f80:	4a6e      	ldr	r2, [pc, #440]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f86:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004f88:	e00e      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f8e:	3308      	adds	r3, #8
 8004f90:	4618      	mov	r0, r3
 8004f92:	f003 f86d 	bl	8008070 <RCCEx_PLL2_Config>
 8004f96:	4603      	mov	r3, r0
 8004f98:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004f9c:	e004      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004fa4:	e000      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8004fa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fa8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10d      	bne.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004fb0:	4b62      	ldr	r3, [pc, #392]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004fb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004fb6:	f023 0203 	bic.w	r2, r3, #3
 8004fba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fbe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004fc2:	495e      	ldr	r1, [pc, #376]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004fca:	e003      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fcc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004fd0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fdc:	2100      	movs	r1, #0
 8004fde:	6139      	str	r1, [r7, #16]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	617b      	str	r3, [r7, #20]
 8004fe6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004fea:	460b      	mov	r3, r1
 8004fec:	4313      	orrs	r3, r2
 8004fee:	d03a      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004ff0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ff4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ffc:	d00e      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8004ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005002:	d815      	bhi.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8005004:	2b00      	cmp	r3, #0
 8005006:	d017      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8005008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800500c:	d110      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800500e:	4b4b      	ldr	r3, [pc, #300]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005012:	4a4a      	ldr	r2, [pc, #296]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005018:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800501a:	e00e      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800501c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005020:	3308      	adds	r3, #8
 8005022:	4618      	mov	r0, r3
 8005024:	f003 f824 	bl	8008070 <RCCEx_PLL2_Config>
 8005028:	4603      	mov	r3, r0
 800502a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800502e:	e004      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005036:	e000      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8005038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800503a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10d      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005042:	4b3e      	ldr	r3, [pc, #248]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005048:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800504c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005050:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005054:	4939      	ldr	r1, [pc, #228]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 800505c:	e003      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005062:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005066:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800506a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506e:	2100      	movs	r1, #0
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	f003 0310 	and.w	r3, r3, #16
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800507c:	460b      	mov	r3, r1
 800507e:	4313      	orrs	r3, r2
 8005080:	d038      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005082:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005086:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800508a:	2b30      	cmp	r3, #48	; 0x30
 800508c:	d01b      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800508e:	2b30      	cmp	r3, #48	; 0x30
 8005090:	d815      	bhi.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8005092:	2b10      	cmp	r3, #16
 8005094:	d002      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8005096:	2b20      	cmp	r3, #32
 8005098:	d007      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800509a:	e010      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800509c:	4b27      	ldr	r3, [pc, #156]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800509e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a0:	4a26      	ldr	r2, [pc, #152]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80050a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050a6:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80050a8:	e00e      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050ae:	3330      	adds	r3, #48	; 0x30
 80050b0:	4618      	mov	r0, r3
 80050b2:	f003 f875 	bl	80081a0 <RCCEx_PLL3_Config>
 80050b6:	4603      	mov	r3, r0
 80050b8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80050bc:	e004      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80050c4:	e000      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 80050c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050c8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10d      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80050d0:	4b1a      	ldr	r3, [pc, #104]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80050d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80050d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050de:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80050e2:	4916      	ldr	r1, [pc, #88]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80050ea:	e003      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80050f0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fc:	2100      	movs	r1, #0
 80050fe:	6039      	str	r1, [r7, #0]
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	607b      	str	r3, [r7, #4]
 8005106:	e9d7 1200 	ldrd	r1, r2, [r7]
 800510a:	460b      	mov	r3, r1
 800510c:	4313      	orrs	r3, r2
 800510e:	d00c      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005110:	4b0a      	ldr	r3, [pc, #40]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005112:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005116:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800511a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800511e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005122:	4906      	ldr	r1, [pc, #24]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 800512a:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 800512e:	4618      	mov	r0, r3
 8005130:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8005134:	46bd      	mov	sp, r7
 8005136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800513a:	bf00      	nop
 800513c:	44020c00 	.word	0x44020c00

08005140 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005140:	b480      	push	{r7}
 8005142:	b08b      	sub	sp, #44	; 0x2c
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005148:	4bad      	ldr	r3, [pc, #692]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800514a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005150:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005152:	4bab      	ldr	r3, [pc, #684]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800515c:	4ba8      	ldr	r3, [pc, #672]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800515e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005160:	0a1b      	lsrs	r3, r3, #8
 8005162:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005166:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8005168:	4ba5      	ldr	r3, [pc, #660]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800516a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005172:	4ba3      	ldr	r3, [pc, #652]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	08db      	lsrs	r3, r3, #3
 8005178:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	fb02 f303 	mul.w	r3, r2, r3
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 8126 	beq.w	80053e2 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	2b03      	cmp	r3, #3
 800519a:	d053      	beq.n	8005244 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d86f      	bhi.n	8005282 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d003      	beq.n	80051b0 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d02b      	beq.n	8005206 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 80051ae:	e068      	b.n	8005282 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051b0:	4b93      	ldr	r3, [pc, #588]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	08db      	lsrs	r3, r3, #3
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	4a92      	ldr	r2, [pc, #584]	; (8005404 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80051bc:	fa22 f303 	lsr.w	r3, r2, r3
 80051c0:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	ee07 3a90 	vmov	s15, r3
 80051c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	ee07 3a90 	vmov	s15, r3
 80051e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e4:	ed97 6a04 	vldr	s12, [r7, #16]
 80051e8:	eddf 5a87 	vldr	s11, [pc, #540]	; 8005408 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80051ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005200:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005204:	e068      	b.n	80052d8 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	ee07 3a90 	vmov	s15, r3
 800520c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005210:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800540c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005222:	ed97 6a04 	vldr	s12, [r7, #16]
 8005226:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005408 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800522a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800522e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800523a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800523e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005242:	e049      	b.n	80052d8 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	ee07 3a90 	vmov	s15, r3
 800524a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800524e:	eddf 6a70 	vldr	s13, [pc, #448]	; 8005410 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8005252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	ee07 3a90 	vmov	s15, r3
 800525c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005260:	ed97 6a04 	vldr	s12, [r7, #16]
 8005264:	eddf 5a68 	vldr	s11, [pc, #416]	; 8005408 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005268:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800526c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005270:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005274:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800527c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005280:	e02a      	b.n	80052d8 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005282:	4b5f      	ldr	r3, [pc, #380]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	08db      	lsrs	r3, r3, #3
 8005288:	f003 0303 	and.w	r3, r3, #3
 800528c:	4a5d      	ldr	r2, [pc, #372]	; (8005404 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800528e:	fa22 f303 	lsr.w	r3, r2, r3
 8005292:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	ee07 3a90 	vmov	s15, r3
 800529a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	ee07 3a90 	vmov	s15, r3
 80052a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	ee07 3a90 	vmov	s15, r3
 80052b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80052ba:	eddf 5a53 	vldr	s11, [pc, #332]	; 8005408 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80052be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80052d6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80052d8:	4b49      	ldr	r3, [pc, #292]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052e4:	d121      	bne.n	800532a <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80052e6:	4b46      	ldr	r3, [pc, #280]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d017      	beq.n	8005322 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80052f2:	4b43      	ldr	r3, [pc, #268]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80052f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f6:	0a5b      	lsrs	r3, r3, #9
 80052f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052fc:	ee07 3a90 	vmov	s15, r3
 8005300:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005304:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005308:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800530c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005318:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	e006      	b.n	8005330 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	e002      	b.n	8005330 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005330:	4b33      	ldr	r3, [pc, #204]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005338:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800533c:	d121      	bne.n	8005382 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800533e:	4b30      	ldr	r3, [pc, #192]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d017      	beq.n	800537a <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800534a:	4b2d      	ldr	r3, [pc, #180]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800534c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534e:	0c1b      	lsrs	r3, r3, #16
 8005350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005354:	ee07 3a90 	vmov	s15, r3
 8005358:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800535c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005360:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005364:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800536c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005370:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	605a      	str	r2, [r3, #4]
 8005378:	e006      	b.n	8005388 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	605a      	str	r2, [r3, #4]
 8005380:	e002      	b.n	8005388 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005388:	4b1d      	ldr	r3, [pc, #116]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005390:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005394:	d121      	bne.n	80053da <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005396:	4b1a      	ldr	r3, [pc, #104]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d017      	beq.n	80053d2 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80053a2:	4b17      	ldr	r3, [pc, #92]	; (8005400 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80053a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a6:	0e1b      	lsrs	r3, r3, #24
 80053a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ac:	ee07 3a90 	vmov	s15, r3
 80053b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80053b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053b8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80053bc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80053c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053c8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80053d0:	e010      	b.n	80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	609a      	str	r2, [r3, #8]
}
 80053d8:	e00c      	b.n	80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	609a      	str	r2, [r3, #8]
}
 80053e0:	e008      	b.n	80053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	609a      	str	r2, [r3, #8]
}
 80053f4:	bf00      	nop
 80053f6:	372c      	adds	r7, #44	; 0x2c
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	44020c00 	.word	0x44020c00
 8005404:	03d09000 	.word	0x03d09000
 8005408:	46000000 	.word	0x46000000
 800540c:	4a742400 	.word	0x4a742400
 8005410:	4af42400 	.word	0x4af42400

08005414 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005414:	b480      	push	{r7}
 8005416:	b08b      	sub	sp, #44	; 0x2c
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800541c:	4bad      	ldr	r3, [pc, #692]	; (80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800541e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005424:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005426:	4bab      	ldr	r3, [pc, #684]	; (80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005430:	4ba8      	ldr	r3, [pc, #672]	; (80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005434:	0a1b      	lsrs	r3, r3, #8
 8005436:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800543a:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800543c:	4ba5      	ldr	r3, [pc, #660]	; (80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005440:	f003 0310 	and.w	r3, r3, #16
 8005444:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005446:	4ba3      	ldr	r3, [pc, #652]	; (80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	08db      	lsrs	r3, r3, #3
 800544c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	fb02 f303 	mul.w	r3, r2, r3
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 8126 	beq.w	80056b6 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	2b03      	cmp	r3, #3
 800546e:	d053      	beq.n	8005518 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	2b03      	cmp	r3, #3
 8005474:	d86f      	bhi.n	8005556 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d003      	beq.n	8005484 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	2b02      	cmp	r3, #2
 8005480:	d02b      	beq.n	80054da <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8005482:	e068      	b.n	8005556 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005484:	4b93      	ldr	r3, [pc, #588]	; (80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	08db      	lsrs	r3, r3, #3
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	4a92      	ldr	r2, [pc, #584]	; (80056d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005490:	fa22 f303 	lsr.w	r3, r2, r3
 8005494:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	ee07 3a90 	vmov	s15, r3
 800549c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	ee07 3a90 	vmov	s15, r3
 80054b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b8:	ed97 6a04 	vldr	s12, [r7, #16]
 80054bc:	eddf 5a87 	vldr	s11, [pc, #540]	; 80056dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80054c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80054d8:	e068      	b.n	80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	ee07 3a90 	vmov	s15, r3
 80054e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e4:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80056e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80054e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	ee07 3a90 	vmov	s15, r3
 80054f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054f6:	ed97 6a04 	vldr	s12, [r7, #16]
 80054fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80056dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80054fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800550a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800550e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005512:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005516:	e049      	b.n	80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	ee07 3a90 	vmov	s15, r3
 800551e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005522:	eddf 6a70 	vldr	s13, [pc, #448]	; 80056e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8005526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	ee07 3a90 	vmov	s15, r3
 8005530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005534:	ed97 6a04 	vldr	s12, [r7, #16]
 8005538:	eddf 5a68 	vldr	s11, [pc, #416]	; 80056dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800553c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005540:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005544:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005548:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800554c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005550:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005554:	e02a      	b.n	80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005556:	4b5f      	ldr	r3, [pc, #380]	; (80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	08db      	lsrs	r3, r3, #3
 800555c:	f003 0303 	and.w	r3, r3, #3
 8005560:	4a5d      	ldr	r2, [pc, #372]	; (80056d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005562:	fa22 f303 	lsr.w	r3, r2, r3
 8005566:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	ee07 3a90 	vmov	s15, r3
 800556e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	ee07 3a90 	vmov	s15, r3
 8005578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800557c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	ee07 3a90 	vmov	s15, r3
 8005586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800558a:	ed97 6a04 	vldr	s12, [r7, #16]
 800558e:	eddf 5a53 	vldr	s11, [pc, #332]	; 80056dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800559a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800559e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80055aa:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055ac:	4b49      	ldr	r3, [pc, #292]	; (80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055b8:	d121      	bne.n	80055fe <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80055ba:	4b46      	ldr	r3, [pc, #280]	; (80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80055bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d017      	beq.n	80055f6 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80055c6:	4b43      	ldr	r3, [pc, #268]	; (80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80055c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ca:	0a5b      	lsrs	r3, r3, #9
 80055cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055d0:	ee07 3a90 	vmov	s15, r3
 80055d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80055d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055dc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80055e0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80055e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ec:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	e006      	b.n	8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	e002      	b.n	8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005604:	4b33      	ldr	r3, [pc, #204]	; (80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800560c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005610:	d121      	bne.n	8005656 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005612:	4b30      	ldr	r3, [pc, #192]	; (80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d017      	beq.n	800564e <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800561e:	4b2d      	ldr	r3, [pc, #180]	; (80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005622:	0c1b      	lsrs	r3, r3, #16
 8005624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005628:	ee07 3a90 	vmov	s15, r3
 800562c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005630:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005634:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005638:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800563c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005644:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	605a      	str	r2, [r3, #4]
 800564c:	e006      	b.n	800565c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	605a      	str	r2, [r3, #4]
 8005654:	e002      	b.n	800565c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800565c:	4b1d      	ldr	r3, [pc, #116]	; (80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005664:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005668:	d121      	bne.n	80056ae <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800566a:	4b1a      	ldr	r3, [pc, #104]	; (80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800566c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d017      	beq.n	80056a6 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005676:	4b17      	ldr	r3, [pc, #92]	; (80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567a:	0e1b      	lsrs	r3, r3, #24
 800567c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005680:	ee07 3a90 	vmov	s15, r3
 8005684:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8005688:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800568c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005690:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800569c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80056a4:	e010      	b.n	80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	609a      	str	r2, [r3, #8]
}
 80056ac:	e00c      	b.n	80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	609a      	str	r2, [r3, #8]
}
 80056b4:	e008      	b.n	80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	609a      	str	r2, [r3, #8]
}
 80056c8:	bf00      	nop
 80056ca:	372c      	adds	r7, #44	; 0x2c
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	44020c00 	.word	0x44020c00
 80056d8:	03d09000 	.word	0x03d09000
 80056dc:	46000000 	.word	0x46000000
 80056e0:	4a742400 	.word	0x4a742400
 80056e4:	4af42400 	.word	0x4af42400

080056e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b08b      	sub	sp, #44	; 0x2c
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80056f0:	4bad      	ldr	r3, [pc, #692]	; (80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80056f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f8:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80056fa:	4bab      	ldr	r3, [pc, #684]	; (80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80056fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005704:	4ba8      	ldr	r3, [pc, #672]	; (80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	0a1b      	lsrs	r3, r3, #8
 800570a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800570e:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8005710:	4ba5      	ldr	r3, [pc, #660]	; (80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	f003 0310 	and.w	r3, r3, #16
 8005718:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800571a:	4ba3      	ldr	r3, [pc, #652]	; (80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800571c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800571e:	08db      	lsrs	r3, r3, #3
 8005720:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	fb02 f303 	mul.w	r3, r2, r3
 800572a:	ee07 3a90 	vmov	s15, r3
 800572e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005732:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 8126 	beq.w	800598a <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	2b03      	cmp	r3, #3
 8005742:	d053      	beq.n	80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	2b03      	cmp	r3, #3
 8005748:	d86f      	bhi.n	800582a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d003      	beq.n	8005758 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	2b02      	cmp	r3, #2
 8005754:	d02b      	beq.n	80057ae <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8005756:	e068      	b.n	800582a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005758:	4b93      	ldr	r3, [pc, #588]	; (80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	08db      	lsrs	r3, r3, #3
 800575e:	f003 0303 	and.w	r3, r3, #3
 8005762:	4a92      	ldr	r2, [pc, #584]	; (80059ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005764:	fa22 f303 	lsr.w	r3, r2, r3
 8005768:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	ee07 3a90 	vmov	s15, r3
 8005770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	ee07 3a90 	vmov	s15, r3
 8005788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800578c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005790:	eddf 5a87 	vldr	s11, [pc, #540]	; 80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005794:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005798:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800579c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80057ac:	e068      	b.n	8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	ee07 3a90 	vmov	s15, r3
 80057b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b8:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80059b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80057bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	ee07 3a90 	vmov	s15, r3
 80057c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ca:	ed97 6a04 	vldr	s12, [r7, #16]
 80057ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80057d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80057ea:	e049      	b.n	8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	ee07 3a90 	vmov	s15, r3
 80057f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f6:	eddf 6a70 	vldr	s13, [pc, #448]	; 80059b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80057fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	ee07 3a90 	vmov	s15, r3
 8005804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005808:	ed97 6a04 	vldr	s12, [r7, #16]
 800580c:	eddf 5a68 	vldr	s11, [pc, #416]	; 80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005810:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005814:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005818:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800581c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005824:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005828:	e02a      	b.n	8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800582a:	4b5f      	ldr	r3, [pc, #380]	; (80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	08db      	lsrs	r3, r3, #3
 8005830:	f003 0303 	and.w	r3, r3, #3
 8005834:	4a5d      	ldr	r2, [pc, #372]	; (80059ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005836:	fa22 f303 	lsr.w	r3, r2, r3
 800583a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	ee07 3a90 	vmov	s15, r3
 800584c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	ee07 3a90 	vmov	s15, r3
 800585a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800585e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005862:	eddf 5a53 	vldr	s11, [pc, #332]	; 80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800586a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800586e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800587a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800587e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005880:	4b49      	ldr	r3, [pc, #292]	; (80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005888:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800588c:	d121      	bne.n	80058d2 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800588e:	4b46      	ldr	r3, [pc, #280]	; (80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d017      	beq.n	80058ca <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800589a:	4b43      	ldr	r3, [pc, #268]	; (80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800589c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589e:	0a5b      	lsrs	r3, r3, #9
 80058a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058a4:	ee07 3a90 	vmov	s15, r3
 80058a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80058ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058b0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80058b4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80058b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058c0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	e006      	b.n	80058d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	e002      	b.n	80058d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058d8:	4b33      	ldr	r3, [pc, #204]	; (80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058e4:	d121      	bne.n	800592a <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80058e6:	4b30      	ldr	r3, [pc, #192]	; (80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80058e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d017      	beq.n	8005922 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80058f2:	4b2d      	ldr	r3, [pc, #180]	; (80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80058f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f6:	0c1b      	lsrs	r3, r3, #16
 80058f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058fc:	ee07 3a90 	vmov	s15, r3
 8005900:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005904:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005908:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800590c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005918:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	605a      	str	r2, [r3, #4]
 8005920:	e006      	b.n	8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	605a      	str	r2, [r3, #4]
 8005928:	e002      	b.n	8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005930:	4b1d      	ldr	r3, [pc, #116]	; (80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800593c:	d121      	bne.n	8005982 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800593e:	4b1a      	ldr	r3, [pc, #104]	; (80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d017      	beq.n	800597a <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800594a:	4b17      	ldr	r3, [pc, #92]	; (80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800594c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594e:	0e1b      	lsrs	r3, r3, #24
 8005950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005954:	ee07 3a90 	vmov	s15, r3
 8005958:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800595c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005960:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005964:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800596c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005970:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8005978:	e010      	b.n	800599c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	609a      	str	r2, [r3, #8]
}
 8005980:	e00c      	b.n	800599c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	609a      	str	r2, [r3, #8]
}
 8005988:	e008      	b.n	800599c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	609a      	str	r2, [r3, #8]
}
 800599c:	bf00      	nop
 800599e:	372c      	adds	r7, #44	; 0x2c
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	44020c00 	.word	0x44020c00
 80059ac:	03d09000 	.word	0x03d09000
 80059b0:	46000000 	.word	0x46000000
 80059b4:	4a742400 	.word	0x4a742400
 80059b8:	4af42400 	.word	0x4af42400

080059bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80059bc:	b590      	push	{r4, r7, lr}
 80059be:	b08f      	sub	sp, #60	; 0x3c
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80059c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059ca:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 80059ce:	4321      	orrs	r1, r4
 80059d0:	d150      	bne.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80059d2:	4b26      	ldr	r3, [pc, #152]	; (8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059dc:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80059de:	4b23      	ldr	r3, [pc, #140]	; (8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d108      	bne.n	80059fe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059f2:	d104      	bne.n	80059fe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80059f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059f8:	637b      	str	r3, [r7, #52]	; 0x34
 80059fa:	f002 bb2a 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80059fe:	4b1b      	ldr	r3, [pc, #108]	; (8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a0c:	d108      	bne.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a14:	d104      	bne.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8005a16:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a1c:	f002 bb19 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005a20:	4b12      	ldr	r3, [pc, #72]	; (8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a2c:	d119      	bne.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a34:	d115      	bne.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005a36:	4b0d      	ldr	r3, [pc, #52]	; (8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8005a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a42:	d30a      	bcc.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005a44:	4b09      	ldr	r3, [pc, #36]	; (8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	0a1b      	lsrs	r3, r3, #8
 8005a4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a4e:	4a08      	ldr	r2, [pc, #32]	; (8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a54:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005a56:	f002 bafc 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005a5e:	f002 baf8 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	637b      	str	r3, [r7, #52]	; 0x34
 8005a66:	f002 baf4 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005a6a:	bf00      	nop
 8005a6c:	44020c00 	.word	0x44020c00
 8005a70:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8005a74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a78:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 8005a7c:	ea50 0104 	orrs.w	r1, r0, r4
 8005a80:	f001 8275 	beq.w	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8005a84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a88:	2801      	cmp	r0, #1
 8005a8a:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 8005a8e:	f082 82dd 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a96:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 8005a9a:	ea50 0104 	orrs.w	r1, r0, r4
 8005a9e:	f001 816c 	beq.w	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8005aa2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aa6:	2801      	cmp	r0, #1
 8005aa8:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 8005aac:	f082 82ce 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ab0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ab4:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 8005ab8:	ea50 0104 	orrs.w	r1, r0, r4
 8005abc:	f001 8602 	beq.w	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8005ac0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ac4:	2801      	cmp	r0, #1
 8005ac6:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 8005aca:	f082 82bf 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ace:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ad2:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 8005ad6:	ea50 0104 	orrs.w	r1, r0, r4
 8005ada:	f001 854c 	beq.w	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8005ade:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ae2:	2801      	cmp	r0, #1
 8005ae4:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 8005ae8:	f082 82b0 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005aec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005af0:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 8005af4:	ea50 0104 	orrs.w	r1, r0, r4
 8005af8:	f001 849e 	beq.w	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8005afc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b00:	2801      	cmp	r0, #1
 8005b02:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 8005b06:	f082 82a1 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b0e:	f1a1 0420 	sub.w	r4, r1, #32
 8005b12:	ea50 0104 	orrs.w	r1, r0, r4
 8005b16:	f001 83e8 	beq.w	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8005b1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b1e:	2801      	cmp	r0, #1
 8005b20:	f171 0120 	sbcs.w	r1, r1, #32
 8005b24:	f082 8292 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b2c:	f1a1 0410 	sub.w	r4, r1, #16
 8005b30:	ea50 0104 	orrs.w	r1, r0, r4
 8005b34:	f002 8256 	beq.w	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005b38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b3c:	2801      	cmp	r0, #1
 8005b3e:	f171 0110 	sbcs.w	r1, r1, #16
 8005b42:	f082 8283 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b4a:	f1a1 0408 	sub.w	r4, r1, #8
 8005b4e:	ea50 0104 	orrs.w	r1, r0, r4
 8005b52:	f002 81cc 	beq.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8005b56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b5a:	2801      	cmp	r0, #1
 8005b5c:	f171 0108 	sbcs.w	r1, r1, #8
 8005b60:	f082 8274 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b68:	1f0c      	subs	r4, r1, #4
 8005b6a:	ea50 0104 	orrs.w	r1, r0, r4
 8005b6e:	f001 8648 	beq.w	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8005b72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b76:	2801      	cmp	r0, #1
 8005b78:	f171 0104 	sbcs.w	r1, r1, #4
 8005b7c:	f082 8266 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b84:	1e8c      	subs	r4, r1, #2
 8005b86:	ea50 0104 	orrs.w	r1, r0, r4
 8005b8a:	f002 8143 	beq.w	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8005b8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b92:	2801      	cmp	r0, #1
 8005b94:	f171 0102 	sbcs.w	r1, r1, #2
 8005b98:	f082 8258 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ba0:	1e4c      	subs	r4, r1, #1
 8005ba2:	ea50 0104 	orrs.w	r1, r0, r4
 8005ba6:	f002 80ce 	beq.w	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8005baa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bae:	2801      	cmp	r0, #1
 8005bb0:	f171 0101 	sbcs.w	r1, r1, #1
 8005bb4:	f082 824a 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bbc:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8005bc0:	4321      	orrs	r1, r4
 8005bc2:	f002 8059 	beq.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8005bc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bca:	4cd9      	ldr	r4, [pc, #868]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005bcc:	42a0      	cmp	r0, r4
 8005bce:	f171 0100 	sbcs.w	r1, r1, #0
 8005bd2:	f082 823b 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bda:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8005bde:	4321      	orrs	r1, r4
 8005be0:	f001 87d9 	beq.w	8007b96 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8005be4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005be8:	4cd2      	ldr	r4, [pc, #840]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005bea:	42a0      	cmp	r0, r4
 8005bec:	f171 0100 	sbcs.w	r1, r1, #0
 8005bf0:	f082 822c 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bf4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bf8:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8005bfc:	4321      	orrs	r1, r4
 8005bfe:	f001 8751 	beq.w	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8005c02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c06:	4ccc      	ldr	r4, [pc, #816]	; (8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005c08:	42a0      	cmp	r0, r4
 8005c0a:	f171 0100 	sbcs.w	r1, r1, #0
 8005c0e:	f082 821d 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c16:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 8005c1a:	4321      	orrs	r1, r4
 8005c1c:	f001 869a 	beq.w	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8005c20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c24:	4cc5      	ldr	r4, [pc, #788]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005c26:	42a0      	cmp	r0, r4
 8005c28:	f171 0100 	sbcs.w	r1, r1, #0
 8005c2c:	f082 820e 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c34:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 8005c38:	4321      	orrs	r1, r4
 8005c3a:	f001 8612 	beq.w	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8005c3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c42:	4cbf      	ldr	r4, [pc, #764]	; (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8005c44:	42a0      	cmp	r0, r4
 8005c46:	f171 0100 	sbcs.w	r1, r1, #0
 8005c4a:	f082 81ff 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c52:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 8005c56:	4321      	orrs	r1, r4
 8005c58:	f002 817e 	beq.w	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8005c5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c60:	4cb8      	ldr	r4, [pc, #736]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005c62:	42a0      	cmp	r0, r4
 8005c64:	f171 0100 	sbcs.w	r1, r1, #0
 8005c68:	f082 81f0 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c70:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 8005c74:	4321      	orrs	r1, r4
 8005c76:	f000 829e 	beq.w	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8005c7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c7e:	4cb2      	ldr	r4, [pc, #712]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005c80:	42a0      	cmp	r0, r4
 8005c82:	f171 0100 	sbcs.w	r1, r1, #0
 8005c86:	f082 81e1 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c8e:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 8005c92:	4321      	orrs	r1, r4
 8005c94:	f000 826d 	beq.w	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8005c98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c9c:	4cab      	ldr	r4, [pc, #684]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005c9e:	42a0      	cmp	r0, r4
 8005ca0:	f171 0100 	sbcs.w	r1, r1, #0
 8005ca4:	f082 81d2 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ca8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cac:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8005cb0:	4321      	orrs	r1, r4
 8005cb2:	f001 800d 	beq.w	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8005cb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cba:	4ca5      	ldr	r4, [pc, #660]	; (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005cbc:	42a0      	cmp	r0, r4
 8005cbe:	f171 0100 	sbcs.w	r1, r1, #0
 8005cc2:	f082 81c3 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005cc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cca:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8005cce:	4321      	orrs	r1, r4
 8005cd0:	f000 81d0 	beq.w	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8005cd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cd8:	4c9e      	ldr	r4, [pc, #632]	; (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005cda:	42a0      	cmp	r0, r4
 8005cdc:	f171 0100 	sbcs.w	r1, r1, #0
 8005ce0:	f082 81b4 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ce4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ce8:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8005cec:	4321      	orrs	r1, r4
 8005cee:	f000 8142 	beq.w	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8005cf2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cf6:	4c98      	ldr	r4, [pc, #608]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005cf8:	42a0      	cmp	r0, r4
 8005cfa:	f171 0100 	sbcs.w	r1, r1, #0
 8005cfe:	f082 81a5 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d06:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 8005d0a:	4321      	orrs	r1, r4
 8005d0c:	f001 824e 	beq.w	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8005d10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d14:	4c91      	ldr	r4, [pc, #580]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005d16:	42a0      	cmp	r0, r4
 8005d18:	f171 0100 	sbcs.w	r1, r1, #0
 8005d1c:	f082 8196 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d24:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 8005d28:	4321      	orrs	r1, r4
 8005d2a:	f001 8197 	beq.w	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8005d2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d32:	4c8b      	ldr	r4, [pc, #556]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005d34:	42a0      	cmp	r0, r4
 8005d36:	f171 0100 	sbcs.w	r1, r1, #0
 8005d3a:	f082 8187 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d42:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 8005d46:	4321      	orrs	r1, r4
 8005d48:	f001 8154 	beq.w	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8005d4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d50:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8005d54:	f171 0100 	sbcs.w	r1, r1, #0
 8005d58:	f082 8178 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d60:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8005d64:	4321      	orrs	r1, r4
 8005d66:	f001 80b7 	beq.w	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8005d6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d6e:	f248 0401 	movw	r4, #32769	; 0x8001
 8005d72:	42a0      	cmp	r0, r4
 8005d74:	f171 0100 	sbcs.w	r1, r1, #0
 8005d78:	f082 8168 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d80:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8005d84:	4321      	orrs	r1, r4
 8005d86:	f001 8064 	beq.w	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8005d8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d8e:	f244 0401 	movw	r4, #16385	; 0x4001
 8005d92:	42a0      	cmp	r0, r4
 8005d94:	f171 0100 	sbcs.w	r1, r1, #0
 8005d98:	f082 8158 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005da0:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8005da4:	4321      	orrs	r1, r4
 8005da6:	f001 8011 	beq.w	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8005daa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dae:	f242 0401 	movw	r4, #8193	; 0x2001
 8005db2:	42a0      	cmp	r0, r4
 8005db4:	f171 0100 	sbcs.w	r1, r1, #0
 8005db8:	f082 8148 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005dbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dc0:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8005dc4:	4321      	orrs	r1, r4
 8005dc6:	f000 871e 	beq.w	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8005dca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dce:	f241 0401 	movw	r4, #4097	; 0x1001
 8005dd2:	42a0      	cmp	r0, r4
 8005dd4:	f171 0100 	sbcs.w	r1, r1, #0
 8005dd8:	f082 8138 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ddc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005de0:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8005de4:	4321      	orrs	r1, r4
 8005de6:	f000 86a8 	beq.w	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8005dea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dee:	f640 0401 	movw	r4, #2049	; 0x801
 8005df2:	42a0      	cmp	r0, r4
 8005df4:	f171 0100 	sbcs.w	r1, r1, #0
 8005df8:	f082 8128 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005dfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e00:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8005e04:	4321      	orrs	r1, r4
 8005e06:	f000 8632 	beq.w	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8005e0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e0e:	f240 4401 	movw	r4, #1025	; 0x401
 8005e12:	42a0      	cmp	r0, r4
 8005e14:	f171 0100 	sbcs.w	r1, r1, #0
 8005e18:	f082 8118 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005e1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e20:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8005e24:	4321      	orrs	r1, r4
 8005e26:	f000 85b0 	beq.w	800698a <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8005e2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e2e:	f240 2401 	movw	r4, #513	; 0x201
 8005e32:	42a0      	cmp	r0, r4
 8005e34:	f171 0100 	sbcs.w	r1, r1, #0
 8005e38:	f082 8108 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005e3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e40:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8005e44:	4321      	orrs	r1, r4
 8005e46:	f000 8535 	beq.w	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8005e4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e4e:	f240 1401 	movw	r4, #257	; 0x101
 8005e52:	42a0      	cmp	r0, r4
 8005e54:	f171 0100 	sbcs.w	r1, r1, #0
 8005e58:	f082 80f8 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005e5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e60:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8005e64:	4321      	orrs	r1, r4
 8005e66:	f000 84ba 	beq.w	80067de <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8005e6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e6e:	2881      	cmp	r0, #129	; 0x81
 8005e70:	f171 0100 	sbcs.w	r1, r1, #0
 8005e74:	f082 80ea 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005e78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e7c:	2821      	cmp	r0, #33	; 0x21
 8005e7e:	f171 0100 	sbcs.w	r1, r1, #0
 8005e82:	d26f      	bcs.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005e84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e88:	4301      	orrs	r1, r0
 8005e8a:	f002 80df 	beq.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005e8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e92:	1e42      	subs	r2, r0, #1
 8005e94:	f141 33ff 	adc.w	r3, r1, #4294967295
 8005e98:	2a20      	cmp	r2, #32
 8005e9a:	f173 0100 	sbcs.w	r1, r3, #0
 8005e9e:	f082 80d5 	bcs.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ea2:	2a1f      	cmp	r2, #31
 8005ea4:	f202 80d2 	bhi.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ea8:	a101      	add	r1, pc, #4	; (adr r1, 8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8005eaa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005eae:	bf00      	nop
 8005eb0:	08006211 	.word	0x08006211
 8005eb4:	080062dd 	.word	0x080062dd
 8005eb8:	0800804d 	.word	0x0800804d
 8005ebc:	0800639d 	.word	0x0800639d
 8005ec0:	0800804d 	.word	0x0800804d
 8005ec4:	0800804d 	.word	0x0800804d
 8005ec8:	0800804d 	.word	0x0800804d
 8005ecc:	0800646d 	.word	0x0800646d
 8005ed0:	0800804d 	.word	0x0800804d
 8005ed4:	0800804d 	.word	0x0800804d
 8005ed8:	0800804d 	.word	0x0800804d
 8005edc:	0800804d 	.word	0x0800804d
 8005ee0:	0800804d 	.word	0x0800804d
 8005ee4:	0800804d 	.word	0x0800804d
 8005ee8:	0800804d 	.word	0x0800804d
 8005eec:	0800654f 	.word	0x0800654f
 8005ef0:	0800804d 	.word	0x0800804d
 8005ef4:	0800804d 	.word	0x0800804d
 8005ef8:	0800804d 	.word	0x0800804d
 8005efc:	0800804d 	.word	0x0800804d
 8005f00:	0800804d 	.word	0x0800804d
 8005f04:	0800804d 	.word	0x0800804d
 8005f08:	0800804d 	.word	0x0800804d
 8005f0c:	0800804d 	.word	0x0800804d
 8005f10:	0800804d 	.word	0x0800804d
 8005f14:	0800804d 	.word	0x0800804d
 8005f18:	0800804d 	.word	0x0800804d
 8005f1c:	0800804d 	.word	0x0800804d
 8005f20:	0800804d 	.word	0x0800804d
 8005f24:	0800804d 	.word	0x0800804d
 8005f28:	0800804d 	.word	0x0800804d
 8005f2c:	08006625 	.word	0x08006625
 8005f30:	80000001 	.word	0x80000001
 8005f34:	40000001 	.word	0x40000001
 8005f38:	20000001 	.word	0x20000001
 8005f3c:	10000001 	.word	0x10000001
 8005f40:	08000001 	.word	0x08000001
 8005f44:	04000001 	.word	0x04000001
 8005f48:	00800001 	.word	0x00800001
 8005f4c:	00400001 	.word	0x00400001
 8005f50:	00200001 	.word	0x00200001
 8005f54:	00100001 	.word	0x00100001
 8005f58:	00080001 	.word	0x00080001
 8005f5c:	00040001 	.word	0x00040001
 8005f60:	00020001 	.word	0x00020001
 8005f64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f68:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8005f6c:	430b      	orrs	r3, r1
 8005f6e:	f000 83c4 	beq.w	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005f72:	f002 b86b 	b.w	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005f76:	4ba1      	ldr	r3, [pc, #644]	; (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f7c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005f80:	633b      	str	r3, [r7, #48]	; 0x30
 8005f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f88:	d036      	beq.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f90:	d86b      	bhi.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f98:	d02b      	beq.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fa0:	d863      	bhi.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fa8:	d01b      	beq.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fb0:	d85b      	bhi.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d004      	beq.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fbe:	d008      	beq.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8005fc0:	e053      	b.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fc2:	f107 0320 	add.w	r3, r7, #32
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff f8ba 	bl	8005140 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005fd0:	e04e      	b.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fd2:	f107 0314 	add.w	r3, r7, #20
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7ff fa1c 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005fe0:	e046      	b.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fe2:	f107 0308 	add.w	r3, r7, #8
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff fb7e 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005ff0:	e03e      	b.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005ff2:	4b83      	ldr	r3, [pc, #524]	; (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005ff4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005ff6:	e03b      	b.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005ff8:	4b80      	ldr	r3, [pc, #512]	; (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ffa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ffe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006002:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006004:	4b7d      	ldr	r3, [pc, #500]	; (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b02      	cmp	r3, #2
 800600e:	d10c      	bne.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8006010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006012:	2b00      	cmp	r3, #0
 8006014:	d109      	bne.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006016:	4b79      	ldr	r3, [pc, #484]	; (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	08db      	lsrs	r3, r3, #3
 800601c:	f003 0303 	and.w	r3, r3, #3
 8006020:	4a78      	ldr	r2, [pc, #480]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006022:	fa22 f303 	lsr.w	r3, r2, r3
 8006026:	637b      	str	r3, [r7, #52]	; 0x34
 8006028:	e01e      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800602a:	4b74      	ldr	r3, [pc, #464]	; (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006036:	d106      	bne.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603e:	d102      	bne.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006040:	4b71      	ldr	r3, [pc, #452]	; (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8006042:	637b      	str	r3, [r7, #52]	; 0x34
 8006044:	e010      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006046:	4b6d      	ldr	r3, [pc, #436]	; (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800604e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006052:	d106      	bne.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8006054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006056:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800605a:	d102      	bne.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800605c:	4b6b      	ldr	r3, [pc, #428]	; (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800605e:	637b      	str	r3, [r7, #52]	; 0x34
 8006060:	e002      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006062:	2300      	movs	r3, #0
 8006064:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006066:	e003      	b.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8006068:	e002      	b.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800606e:	bf00      	nop
          }
        }
        break;
 8006070:	f001 bfef 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006074:	4b61      	ldr	r3, [pc, #388]	; (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006076:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800607a:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 800607e:	633b      	str	r3, [r7, #48]	; 0x30
 8006080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006082:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006086:	d036      	beq.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8006088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800608e:	d86b      	bhi.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006092:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006096:	d02b      	beq.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800609e:	d863      	bhi.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80060a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060a6:	d01b      	beq.n	80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060ae:	d85b      	bhi.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80060b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d004      	beq.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80060b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80060bc:	d008      	beq.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 80060be:	e053      	b.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060c0:	f107 0320 	add.w	r3, r7, #32
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff f83b 	bl	8005140 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80060ce:	e04e      	b.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060d0:	f107 0314 	add.w	r3, r7, #20
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7ff f99d 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80060de:	e046      	b.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060e0:	f107 0308 	add.w	r3, r7, #8
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7ff faff 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80060ee:	e03e      	b.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80060f0:	4b43      	ldr	r3, [pc, #268]	; (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80060f2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80060f4:	e03b      	b.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060f6:	4b41      	ldr	r3, [pc, #260]	; (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80060f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060fc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006100:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006102:	4b3e      	ldr	r3, [pc, #248]	; (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b02      	cmp	r3, #2
 800610c:	d10c      	bne.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800610e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006110:	2b00      	cmp	r3, #0
 8006112:	d109      	bne.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006114:	4b39      	ldr	r3, [pc, #228]	; (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	08db      	lsrs	r3, r3, #3
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	4a39      	ldr	r2, [pc, #228]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006120:	fa22 f303 	lsr.w	r3, r2, r3
 8006124:	637b      	str	r3, [r7, #52]	; 0x34
 8006126:	e01e      	b.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006128:	4b34      	ldr	r3, [pc, #208]	; (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006134:	d106      	bne.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800613c:	d102      	bne.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800613e:	4b32      	ldr	r3, [pc, #200]	; (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8006140:	637b      	str	r3, [r7, #52]	; 0x34
 8006142:	e010      	b.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006144:	4b2d      	ldr	r3, [pc, #180]	; (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800614c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006150:	d106      	bne.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006158:	d102      	bne.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800615a:	4b2c      	ldr	r3, [pc, #176]	; (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800615c:	637b      	str	r3, [r7, #52]	; 0x34
 800615e:	e002      	b.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006164:	e003      	b.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8006166:	e002      	b.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800616c:	bf00      	nop
          }
        }
        break;
 800616e:	f001 bf70 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006172:	4b22      	ldr	r3, [pc, #136]	; (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006174:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617c:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	2b00      	cmp	r3, #0
 8006182:	d108      	bne.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006184:	f107 0320 	add.w	r3, r7, #32
 8006188:	4618      	mov	r0, r3
 800618a:	f7fe ffd9 	bl	8005140 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006192:	f001 bf5e 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	2b40      	cmp	r3, #64	; 0x40
 800619a:	d108      	bne.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800619c:	f107 0314 	add.w	r3, r7, #20
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7ff f937 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061aa:	f001 bf52 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061b2:	f001 bf4e 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 80061b6:	4b11      	ldr	r3, [pc, #68]	; (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80061b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80061bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c0:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 80061c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d108      	bne.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061c8:	f107 0320 	add.w	r3, r7, #32
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fe ffb7 	bl	8005140 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80061d6:	f001 bf3c 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 80061da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061dc:	2b80      	cmp	r3, #128	; 0x80
 80061de:	d108      	bne.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061e0:	f107 0314 	add.w	r3, r7, #20
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7ff f915 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061ee:	f001 bf30 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061f6:	f001 bf2c 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80061fa:	bf00      	nop
 80061fc:	44020c00 	.word	0x44020c00
 8006200:	00bb8000 	.word	0x00bb8000
 8006204:	03d09000 	.word	0x03d09000
 8006208:	003d0900 	.word	0x003d0900
 800620c:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006210:	4b9d      	ldr	r3, [pc, #628]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006212:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006216:	f003 0307 	and.w	r3, r3, #7
 800621a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	2b00      	cmp	r3, #0
 8006220:	d104      	bne.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006222:	f7fc ffd7 	bl	80031d4 <HAL_RCC_GetPCLK2Freq>
 8006226:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006228:	f001 bf13 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800622c:	4b96      	ldr	r3, [pc, #600]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006238:	d10a      	bne.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623c:	2b01      	cmp	r3, #1
 800623e:	d107      	bne.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006240:	f107 0314 	add.w	r3, r7, #20
 8006244:	4618      	mov	r0, r3
 8006246:	f7ff f8e5 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	637b      	str	r3, [r7, #52]	; 0x34
 800624e:	e043      	b.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8006250:	4b8d      	ldr	r3, [pc, #564]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800625c:	d10a      	bne.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006260:	2b02      	cmp	r3, #2
 8006262:	d107      	bne.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006264:	f107 0308 	add.w	r3, r7, #8
 8006268:	4618      	mov	r0, r3
 800626a:	f7ff fa3d 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	637b      	str	r3, [r7, #52]	; 0x34
 8006272:	e031      	b.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006274:	4b84      	ldr	r3, [pc, #528]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b02      	cmp	r3, #2
 800627e:	d10c      	bne.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006282:	2b03      	cmp	r3, #3
 8006284:	d109      	bne.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006286:	4b80      	ldr	r3, [pc, #512]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	08db      	lsrs	r3, r3, #3
 800628c:	f003 0303 	and.w	r3, r3, #3
 8006290:	4a7e      	ldr	r2, [pc, #504]	; (800648c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006292:	fa22 f303 	lsr.w	r3, r2, r3
 8006296:	637b      	str	r3, [r7, #52]	; 0x34
 8006298:	e01e      	b.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800629a:	4b7b      	ldr	r3, [pc, #492]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062a6:	d105      	bne.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80062a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062aa:	2b04      	cmp	r3, #4
 80062ac:	d102      	bne.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 80062ae:	4b78      	ldr	r3, [pc, #480]	; (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80062b0:	637b      	str	r3, [r7, #52]	; 0x34
 80062b2:	e011      	b.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80062b4:	4b74      	ldr	r3, [pc, #464]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80062b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d106      	bne.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	2b05      	cmp	r3, #5
 80062c6:	d103      	bne.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 80062c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062cc:	637b      	str	r3, [r7, #52]	; 0x34
 80062ce:	e003      	b.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062d4:	f001 bebd 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80062d8:	f001 bebb 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80062dc:	4b6a      	ldr	r3, [pc, #424]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80062de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80062e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062e6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80062e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d104      	bne.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80062ee:	f7fc ff5b 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 80062f2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80062f4:	f001 bead 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80062f8:	4b63      	ldr	r3, [pc, #396]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006304:	d10a      	bne.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006308:	2b08      	cmp	r3, #8
 800630a:	d107      	bne.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800630c:	f107 0314 	add.w	r3, r7, #20
 8006310:	4618      	mov	r0, r3
 8006312:	f7ff f87f 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	637b      	str	r3, [r7, #52]	; 0x34
 800631a:	e03d      	b.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	2b10      	cmp	r3, #16
 8006320:	d108      	bne.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006322:	f107 0308 	add.w	r3, r7, #8
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff f9de 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006330:	f001 be8f 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006334:	4b54      	ldr	r3, [pc, #336]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b02      	cmp	r3, #2
 800633e:	d10c      	bne.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006342:	2b18      	cmp	r3, #24
 8006344:	d109      	bne.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006346:	4b50      	ldr	r3, [pc, #320]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	08db      	lsrs	r3, r3, #3
 800634c:	f003 0303 	and.w	r3, r3, #3
 8006350:	4a4e      	ldr	r2, [pc, #312]	; (800648c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006352:	fa22 f303 	lsr.w	r3, r2, r3
 8006356:	637b      	str	r3, [r7, #52]	; 0x34
 8006358:	e01e      	b.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800635a:	4b4b      	ldr	r3, [pc, #300]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006366:	d105      	bne.n	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636a:	2b20      	cmp	r3, #32
 800636c:	d102      	bne.n	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800636e:	4b48      	ldr	r3, [pc, #288]	; (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006370:	637b      	str	r3, [r7, #52]	; 0x34
 8006372:	e011      	b.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006374:	4b44      	ldr	r3, [pc, #272]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006376:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b02      	cmp	r3, #2
 8006380:	d106      	bne.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	2b28      	cmp	r3, #40	; 0x28
 8006386:	d103      	bne.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8006388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800638c:	637b      	str	r3, [r7, #52]	; 0x34
 800638e:	e003      	b.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006394:	f001 be5d 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006398:	f001 be5b 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800639c:	4b3a      	ldr	r3, [pc, #232]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800639e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80063a2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80063a6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80063a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d104      	bne.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80063ae:	f7fc fefb 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 80063b2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80063b4:	f001 be4d 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80063b8:	4b33      	ldr	r3, [pc, #204]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063c4:	d10a      	bne.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	2b40      	cmp	r3, #64	; 0x40
 80063ca:	d107      	bne.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063cc:	f107 0314 	add.w	r3, r7, #20
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7ff f81f 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	637b      	str	r3, [r7, #52]	; 0x34
 80063da:	e045      	b.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80063dc:	4b2a      	ldr	r3, [pc, #168]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063e8:	d10a      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 80063ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ec:	2b80      	cmp	r3, #128	; 0x80
 80063ee:	d107      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063f0:	f107 0308 	add.w	r3, r7, #8
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff f977 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	637b      	str	r3, [r7, #52]	; 0x34
 80063fe:	e033      	b.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006400:	4b21      	ldr	r3, [pc, #132]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0302 	and.w	r3, r3, #2
 8006408:	2b02      	cmp	r3, #2
 800640a:	d10c      	bne.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800640c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640e:	2bc0      	cmp	r3, #192	; 0xc0
 8006410:	d109      	bne.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006412:	4b1d      	ldr	r3, [pc, #116]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	08db      	lsrs	r3, r3, #3
 8006418:	f003 0303 	and.w	r3, r3, #3
 800641c:	4a1b      	ldr	r2, [pc, #108]	; (800648c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800641e:	fa22 f303 	lsr.w	r3, r2, r3
 8006422:	637b      	str	r3, [r7, #52]	; 0x34
 8006424:	e020      	b.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8006426:	4b18      	ldr	r3, [pc, #96]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800642e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006432:	d106      	bne.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800643a:	d102      	bne.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800643c:	4b14      	ldr	r3, [pc, #80]	; (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800643e:	637b      	str	r3, [r7, #52]	; 0x34
 8006440:	e012      	b.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006442:	4b11      	ldr	r3, [pc, #68]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006444:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	2b02      	cmp	r3, #2
 800644e:	d107      	bne.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006456:	d103      	bne.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8006458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800645c:	637b      	str	r3, [r7, #52]	; 0x34
 800645e:	e003      	b.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006464:	f001 bdf5 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006468:	f001 bdf3 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800646c:	4b06      	ldr	r3, [pc, #24]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800646e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006472:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006476:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10a      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800647e:	f7fc fe93 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 8006482:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006484:	f001 bde5 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006488:	44020c00 	.word	0x44020c00
 800648c:	03d09000 	.word	0x03d09000
 8006490:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8006494:	4ba0      	ldr	r3, [pc, #640]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800649c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064a0:	d10b      	bne.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064a8:	d107      	bne.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064aa:	f107 0314 	add.w	r3, r7, #20
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fe ffb0 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	637b      	str	r3, [r7, #52]	; 0x34
 80064b8:	e047      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80064ba:	4b97      	ldr	r3, [pc, #604]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064c6:	d10b      	bne.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064ce:	d107      	bne.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064d0:	f107 0308 	add.w	r3, r7, #8
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff f907 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	637b      	str	r3, [r7, #52]	; 0x34
 80064de:	e034      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80064e0:	4b8d      	ldr	r3, [pc, #564]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d10d      	bne.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80064f2:	d109      	bne.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064f4:	4b88      	ldr	r3, [pc, #544]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	08db      	lsrs	r3, r3, #3
 80064fa:	f003 0303 	and.w	r3, r3, #3
 80064fe:	4a87      	ldr	r2, [pc, #540]	; (800671c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006500:	fa22 f303 	lsr.w	r3, r2, r3
 8006504:	637b      	str	r3, [r7, #52]	; 0x34
 8006506:	e020      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8006508:	4b83      	ldr	r3, [pc, #524]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006514:	d106      	bne.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8006516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800651c:	d102      	bne.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800651e:	4b80      	ldr	r3, [pc, #512]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006520:	637b      	str	r3, [r7, #52]	; 0x34
 8006522:	e012      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006524:	4b7c      	ldr	r3, [pc, #496]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006526:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b02      	cmp	r3, #2
 8006530:	d107      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8006532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006534:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006538:	d103      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800653a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800653e:	637b      	str	r3, [r7, #52]	; 0x34
 8006540:	e003      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006546:	f001 bd84 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800654a:	f001 bd82 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800654e:	4b72      	ldr	r3, [pc, #456]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006550:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006554:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006558:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	2b00      	cmp	r3, #0
 800655e:	d104      	bne.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006560:	f7fc fe22 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 8006564:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8006566:	f001 bd74 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800656a:	4b6b      	ldr	r3, [pc, #428]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006576:	d10b      	bne.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8006578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800657e:	d107      	bne.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006580:	f107 0314 	add.w	r3, r7, #20
 8006584:	4618      	mov	r0, r3
 8006586:	f7fe ff45 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	637b      	str	r3, [r7, #52]	; 0x34
 800658e:	e047      	b.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8006590:	4b61      	ldr	r3, [pc, #388]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800659c:	d10b      	bne.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065a4:	d107      	bne.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065a6:	f107 0308 	add.w	r3, r7, #8
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7ff f89c 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	637b      	str	r3, [r7, #52]	; 0x34
 80065b4:	e034      	b.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80065b6:	4b58      	ldr	r3, [pc, #352]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d10d      	bne.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80065c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065c8:	d109      	bne.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065ca:	4b53      	ldr	r3, [pc, #332]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	08db      	lsrs	r3, r3, #3
 80065d0:	f003 0303 	and.w	r3, r3, #3
 80065d4:	4a51      	ldr	r2, [pc, #324]	; (800671c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80065d6:	fa22 f303 	lsr.w	r3, r2, r3
 80065da:	637b      	str	r3, [r7, #52]	; 0x34
 80065dc:	e020      	b.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80065de:	4b4e      	ldr	r3, [pc, #312]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ea:	d106      	bne.n	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065f2:	d102      	bne.n	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 80065f4:	4b4a      	ldr	r3, [pc, #296]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80065f6:	637b      	str	r3, [r7, #52]	; 0x34
 80065f8:	e012      	b.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80065fa:	4b47      	ldr	r3, [pc, #284]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80065fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b02      	cmp	r3, #2
 8006606:	d107      	bne.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8006608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800660e:	d103      	bne.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8006610:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006614:	637b      	str	r3, [r7, #52]	; 0x34
 8006616:	e003      	b.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800661c:	f001 bd19 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006620:	f001 bd17 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006624:	4b3c      	ldr	r3, [pc, #240]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006626:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800662a:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800662e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	2b00      	cmp	r3, #0
 8006634:	d104      	bne.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006636:	f7fc fdb7 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 800663a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800663c:	f001 bd09 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8006640:	4b35      	ldr	r3, [pc, #212]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800664c:	d10b      	bne.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006654:	d107      	bne.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006656:	f107 0314 	add.w	r3, r7, #20
 800665a:	4618      	mov	r0, r3
 800665c:	f7fe feda 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	637b      	str	r3, [r7, #52]	; 0x34
 8006664:	e047      	b.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8006666:	4b2c      	ldr	r3, [pc, #176]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800666e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006672:	d10b      	bne.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8006674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800667a:	d107      	bne.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800667c:	f107 0308 	add.w	r3, r7, #8
 8006680:	4618      	mov	r0, r3
 8006682:	f7ff f831 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	637b      	str	r3, [r7, #52]	; 0x34
 800668a:	e034      	b.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800668c:	4b22      	ldr	r3, [pc, #136]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b02      	cmp	r3, #2
 8006696:	d10d      	bne.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8006698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800669e:	d109      	bne.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066a0:	4b1d      	ldr	r3, [pc, #116]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	08db      	lsrs	r3, r3, #3
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	4a1c      	ldr	r2, [pc, #112]	; (800671c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80066ac:	fa22 f303 	lsr.w	r3, r2, r3
 80066b0:	637b      	str	r3, [r7, #52]	; 0x34
 80066b2:	e020      	b.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80066b4:	4b18      	ldr	r3, [pc, #96]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066c0:	d106      	bne.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80066c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066c8:	d102      	bne.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 80066ca:	4b15      	ldr	r3, [pc, #84]	; (8006720 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80066cc:	637b      	str	r3, [r7, #52]	; 0x34
 80066ce:	e012      	b.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80066d0:	4b11      	ldr	r3, [pc, #68]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80066d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d107      	bne.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80066e4:	d103      	bne.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 80066e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ea:	637b      	str	r3, [r7, #52]	; 0x34
 80066ec:	e003      	b.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066f2:	f001 bcae 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80066f6:	f001 bcac 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80066fa:	4b07      	ldr	r3, [pc, #28]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80066fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006700:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8006704:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8006706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10b      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800670c:	f7fc fd4c 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 8006710:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8006712:	f001 bc9e 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006716:	bf00      	nop
 8006718:	44020c00 	.word	0x44020c00
 800671c:	03d09000 	.word	0x03d09000
 8006720:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8006724:	4ba0      	ldr	r3, [pc, #640]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800672c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006730:	d10b      	bne.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006738:	d107      	bne.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800673a:	f107 0314 	add.w	r3, r7, #20
 800673e:	4618      	mov	r0, r3
 8006740:	f7fe fe68 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	637b      	str	r3, [r7, #52]	; 0x34
 8006748:	e047      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800674a:	4b97      	ldr	r3, [pc, #604]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006752:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006756:	d10b      	bne.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8006758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800675e:	d107      	bne.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006760:	f107 0308 	add.w	r3, r7, #8
 8006764:	4618      	mov	r0, r3
 8006766:	f7fe ffbf 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	637b      	str	r3, [r7, #52]	; 0x34
 800676e:	e034      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8006770:	4b8d      	ldr	r3, [pc, #564]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	2b02      	cmp	r3, #2
 800677a:	d10d      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006782:	d109      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006784:	4b88      	ldr	r3, [pc, #544]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	08db      	lsrs	r3, r3, #3
 800678a:	f003 0303 	and.w	r3, r3, #3
 800678e:	4a87      	ldr	r2, [pc, #540]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8006790:	fa22 f303 	lsr.w	r3, r2, r3
 8006794:	637b      	str	r3, [r7, #52]	; 0x34
 8006796:	e020      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8006798:	4b83      	ldr	r3, [pc, #524]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a4:	d106      	bne.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067ac:	d102      	bne.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80067ae:	4b80      	ldr	r3, [pc, #512]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80067b0:	637b      	str	r3, [r7, #52]	; 0x34
 80067b2:	e012      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80067b4:	4b7c      	ldr	r3, [pc, #496]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80067b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d107      	bne.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80067c8:	d103      	bne.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 80067ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ce:	637b      	str	r3, [r7, #52]	; 0x34
 80067d0:	e003      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067d6:	f001 bc3c 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80067da:	f001 bc3a 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 80067de:	4b72      	ldr	r3, [pc, #456]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80067e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80067e4:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80067e8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 80067ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d104      	bne.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80067f0:	f7fc fcda 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 80067f4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 80067f6:	f001 bc2c 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 80067fa:	4b6b      	ldr	r3, [pc, #428]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006802:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006806:	d10b      	bne.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800680e:	d107      	bne.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006810:	f107 0314 	add.w	r3, r7, #20
 8006814:	4618      	mov	r0, r3
 8006816:	f7fe fdfd 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	637b      	str	r3, [r7, #52]	; 0x34
 800681e:	e047      	b.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8006820:	4b61      	ldr	r3, [pc, #388]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800682c:	d10b      	bne.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006834:	d107      	bne.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006836:	f107 0308 	add.w	r3, r7, #8
 800683a:	4618      	mov	r0, r3
 800683c:	f7fe ff54 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	637b      	str	r3, [r7, #52]	; 0x34
 8006844:	e034      	b.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8006846:	4b58      	ldr	r3, [pc, #352]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b02      	cmp	r3, #2
 8006850:	d10d      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006858:	d109      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800685a:	4b53      	ldr	r3, [pc, #332]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	08db      	lsrs	r3, r3, #3
 8006860:	f003 0303 	and.w	r3, r3, #3
 8006864:	4a51      	ldr	r2, [pc, #324]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8006866:	fa22 f303 	lsr.w	r3, r2, r3
 800686a:	637b      	str	r3, [r7, #52]	; 0x34
 800686c:	e020      	b.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800686e:	4b4e      	ldr	r3, [pc, #312]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800687a:	d106      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800687c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006882:	d102      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8006884:	4b4a      	ldr	r3, [pc, #296]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8006886:	637b      	str	r3, [r7, #52]	; 0x34
 8006888:	e012      	b.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800688a:	4b47      	ldr	r3, [pc, #284]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800688c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b02      	cmp	r3, #2
 8006896:	d107      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800689e:	d103      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80068a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068a4:	637b      	str	r3, [r7, #52]	; 0x34
 80068a6:	e003      	b.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80068a8:	2300      	movs	r3, #0
 80068aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068ac:	f001 bbd1 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80068b0:	f001 bbcf 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80068b4:	4b3c      	ldr	r3, [pc, #240]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80068b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80068ba:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80068be:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d104      	bne.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80068c6:	f7fc fc6f 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 80068ca:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 80068cc:	f001 bbc1 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 80068d0:	4b35      	ldr	r3, [pc, #212]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068dc:	d10b      	bne.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80068de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068e4:	d107      	bne.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068e6:	f107 0314 	add.w	r3, r7, #20
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fe fd92 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	637b      	str	r3, [r7, #52]	; 0x34
 80068f4:	e047      	b.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80068f6:	4b2c      	ldr	r3, [pc, #176]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006902:	d10b      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8006904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006906:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800690a:	d107      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800690c:	f107 0308 	add.w	r3, r7, #8
 8006910:	4618      	mov	r0, r3
 8006912:	f7fe fee9 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	637b      	str	r3, [r7, #52]	; 0x34
 800691a:	e034      	b.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800691c:	4b22      	ldr	r3, [pc, #136]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b02      	cmp	r3, #2
 8006926:	d10d      	bne.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800692e:	d109      	bne.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006930:	4b1d      	ldr	r3, [pc, #116]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	08db      	lsrs	r3, r3, #3
 8006936:	f003 0303 	and.w	r3, r3, #3
 800693a:	4a1c      	ldr	r2, [pc, #112]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800693c:	fa22 f303 	lsr.w	r3, r2, r3
 8006940:	637b      	str	r3, [r7, #52]	; 0x34
 8006942:	e020      	b.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8006944:	4b18      	ldr	r3, [pc, #96]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800694c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006950:	d106      	bne.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8006952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006954:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006958:	d102      	bne.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800695a:	4b15      	ldr	r3, [pc, #84]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800695c:	637b      	str	r3, [r7, #52]	; 0x34
 800695e:	e012      	b.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8006960:	4b11      	ldr	r3, [pc, #68]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006962:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b02      	cmp	r3, #2
 800696c:	d107      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006974:	d103      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8006976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800697a:	637b      	str	r3, [r7, #52]	; 0x34
 800697c:	e003      	b.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800697e:	2300      	movs	r3, #0
 8006980:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006982:	f001 bb66 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006986:	f001 bb64 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800698a:	4b07      	ldr	r3, [pc, #28]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800698c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006990:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 8006994:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10b      	bne.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800699c:	f7fc fc04 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 80069a0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80069a2:	f001 bb56 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80069a6:	bf00      	nop
 80069a8:	44020c00 	.word	0x44020c00
 80069ac:	03d09000 	.word	0x03d09000
 80069b0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80069b4:	4ba1      	ldr	r3, [pc, #644]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069c0:	d10b      	bne.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80069c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069c8:	d107      	bne.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069ca:	f107 0314 	add.w	r3, r7, #20
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fe fd20 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	637b      	str	r3, [r7, #52]	; 0x34
 80069d8:	e047      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 80069da:	4b98      	ldr	r3, [pc, #608]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069e6:	d10b      	bne.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 80069e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069ee:	d107      	bne.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069f0:	f107 0308 	add.w	r3, r7, #8
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe fe77 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	637b      	str	r3, [r7, #52]	; 0x34
 80069fe:	e034      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8006a00:	4b8e      	ldr	r3, [pc, #568]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0302 	and.w	r3, r3, #2
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d10d      	bne.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006a12:	d109      	bne.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a14:	4b89      	ldr	r3, [pc, #548]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	08db      	lsrs	r3, r3, #3
 8006a1a:	f003 0303 	and.w	r3, r3, #3
 8006a1e:	4a88      	ldr	r2, [pc, #544]	; (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006a20:	fa22 f303 	lsr.w	r3, r2, r3
 8006a24:	637b      	str	r3, [r7, #52]	; 0x34
 8006a26:	e020      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8006a28:	4b84      	ldr	r3, [pc, #528]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a34:	d106      	bne.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8006a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a3c:	d102      	bne.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8006a3e:	4b81      	ldr	r3, [pc, #516]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006a40:	637b      	str	r3, [r7, #52]	; 0x34
 8006a42:	e012      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8006a44:	4b7d      	ldr	r3, [pc, #500]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d107      	bne.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8006a58:	d103      	bne.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8006a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a60:	e003      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a66:	f001 baf4 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006a6a:	f001 baf2 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8006a6e:	4b73      	ldr	r3, [pc, #460]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a70:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006a74:	f003 0307 	and.w	r3, r3, #7
 8006a78:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d104      	bne.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a80:	f7fc fb92 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 8006a84:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a86:	f001 bae4 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8006a8a:	4b6c      	ldr	r3, [pc, #432]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a96:	d10a      	bne.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8006a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d107      	bne.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a9e:	f107 0314 	add.w	r3, r7, #20
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fe fcb6 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8006aac:	e043      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8006aae:	4b63      	ldr	r3, [pc, #396]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aba:	d10a      	bne.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8006abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d107      	bne.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ac2:	f107 0308 	add.w	r3, r7, #8
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7fe fe0e 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	637b      	str	r3, [r7, #52]	; 0x34
 8006ad0:	e031      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8006ad2:	4b5a      	ldr	r3, [pc, #360]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d10c      	bne.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	2b03      	cmp	r3, #3
 8006ae2:	d109      	bne.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ae4:	4b55      	ldr	r3, [pc, #340]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	08db      	lsrs	r3, r3, #3
 8006aea:	f003 0303 	and.w	r3, r3, #3
 8006aee:	4a54      	ldr	r2, [pc, #336]	; (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006af0:	fa22 f303 	lsr.w	r3, r2, r3
 8006af4:	637b      	str	r3, [r7, #52]	; 0x34
 8006af6:	e01e      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8006af8:	4b50      	ldr	r3, [pc, #320]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b04:	d105      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d102      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8006b0c:	4b4d      	ldr	r3, [pc, #308]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b10:	e011      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8006b12:	4b4a      	ldr	r3, [pc, #296]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d106      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	2b05      	cmp	r3, #5
 8006b24:	d103      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8006b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b2c:	e003      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b32:	f001 ba8e 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b36:	f001 ba8c 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8006b3a:	4b40      	ldr	r3, [pc, #256]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006b40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b44:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d104      	bne.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b4c:	f7fc fb2c 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 8006b50:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8006b52:	f001 ba7e 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8006b56:	4b39      	ldr	r3, [pc, #228]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b62:	d10a      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8006b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b66:	2b10      	cmp	r3, #16
 8006b68:	d107      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b6a:	f107 0314 	add.w	r3, r7, #20
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fe fc50 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	637b      	str	r3, [r7, #52]	; 0x34
 8006b78:	e043      	b.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8006b7a:	4b30      	ldr	r3, [pc, #192]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b86:	d10a      	bne.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8006b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	d107      	bne.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b8e:	f107 0308 	add.w	r3, r7, #8
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe fda8 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b9c:	e031      	b.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8006b9e:	4b27      	ldr	r3, [pc, #156]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d10c      	bne.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	2b30      	cmp	r3, #48	; 0x30
 8006bae:	d109      	bne.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006bb0:	4b22      	ldr	r3, [pc, #136]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	08db      	lsrs	r3, r3, #3
 8006bb6:	f003 0303 	and.w	r3, r3, #3
 8006bba:	4a21      	ldr	r2, [pc, #132]	; (8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bc2:	e01e      	b.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8006bc4:	4b1d      	ldr	r3, [pc, #116]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bd0:	d105      	bne.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd4:	2b40      	cmp	r3, #64	; 0x40
 8006bd6:	d102      	bne.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8006bd8:	4b1a      	ldr	r3, [pc, #104]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006bda:	637b      	str	r3, [r7, #52]	; 0x34
 8006bdc:	e011      	b.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8006bde:	4b17      	ldr	r3, [pc, #92]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006be0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d106      	bne.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8006bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bee:	2b50      	cmp	r3, #80	; 0x50
 8006bf0:	d103      	bne.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8006bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8006bf8:	e003      	b.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bfe:	f001 ba28 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c02:	f001 ba26 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006c06:	4b0d      	ldr	r3, [pc, #52]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c0c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006c10:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d104      	bne.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006c18:	f7fc faf2 	bl	8003200 <HAL_RCC_GetPCLK3Freq>
 8006c1c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006c1e:	f001 ba18 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c28:	d10e      	bne.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c2a:	f107 0314 	add.w	r3, r7, #20
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fe fbf0 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c38:	f001 ba0b 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c3c:	44020c00 	.word	0x44020c00
 8006c40:	03d09000 	.word	0x03d09000
 8006c44:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c4e:	d108      	bne.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c50:	f107 0308 	add.w	r3, r7, #8
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7fe fd47 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c5e:	f001 b9f8 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006c62:	4ba4      	ldr	r3, [pc, #656]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d10d      	bne.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c74:	d109      	bne.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c76:	4b9f      	ldr	r3, [pc, #636]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	08db      	lsrs	r3, r3, #3
 8006c7c:	f003 0303 	and.w	r3, r3, #3
 8006c80:	4a9d      	ldr	r2, [pc, #628]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006c82:	fa22 f303 	lsr.w	r3, r2, r3
 8006c86:	637b      	str	r3, [r7, #52]	; 0x34
 8006c88:	e020      	b.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8006c8a:	4b9a      	ldr	r3, [pc, #616]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c96:	d106      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8006c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c9e:	d102      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8006ca0:	4b96      	ldr	r3, [pc, #600]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ca4:	e012      	b.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006ca6:	4b93      	ldr	r3, [pc, #588]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006ca8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cac:	f003 0302 	and.w	r3, r3, #2
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d107      	bne.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006cba:	d103      	bne.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8006cbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8006cc2:	e003      	b.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cc8:	f001 b9c3 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006ccc:	f001 b9c1 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006cd0:	4b88      	ldr	r3, [pc, #544]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006cd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006cd6:	f003 0307 	and.w	r3, r3, #7
 8006cda:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d104      	bne.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006ce2:	f7fc fa45 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 8006ce6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006ce8:	f001 b9b3 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d104      	bne.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8006cf2:	f7fc f911 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 8006cf6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006cf8:	f001 b9ab 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d108      	bne.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d02:	f107 0314 	add.w	r3, r7, #20
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fe fb84 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d10:	f001 b99f 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006d14:	4b77      	ldr	r3, [pc, #476]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d20:	d105      	bne.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	2b03      	cmp	r3, #3
 8006d26:	d102      	bne.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8006d28:	4b75      	ldr	r3, [pc, #468]	; (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8006d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d2c:	e023      	b.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006d2e:	4b71      	ldr	r3, [pc, #452]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d10c      	bne.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3c:	2b04      	cmp	r3, #4
 8006d3e:	d109      	bne.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d40:	4b6c      	ldr	r3, [pc, #432]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	08db      	lsrs	r3, r3, #3
 8006d46:	f003 0303 	and.w	r3, r3, #3
 8006d4a:	4a6b      	ldr	r2, [pc, #428]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d50:	637b      	str	r3, [r7, #52]	; 0x34
 8006d52:	e010      	b.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006d54:	4b67      	ldr	r3, [pc, #412]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d60:	d105      	bne.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	2b05      	cmp	r3, #5
 8006d66:	d102      	bne.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8006d68:	4b64      	ldr	r3, [pc, #400]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d6c:	e003      	b.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d72:	f001 b96e 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d76:	f001 b96c 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8006d7a:	4b5e      	ldr	r3, [pc, #376]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d80:	f003 0308 	and.w	r3, r3, #8
 8006d84:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8006d86:	4b5b      	ldr	r3, [pc, #364]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d106      	bne.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8006d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d103      	bne.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8006d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006da0:	e012      	b.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006da2:	4b54      	ldr	r3, [pc, #336]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006da4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006db0:	d106      	bne.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8006db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	d103      	bne.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8006db8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8006dbe:	e003      	b.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8006dc4:	f001 b945 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006dc8:	f001 b943 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006dcc:	4b49      	ldr	r3, [pc, #292]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006dce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006dd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006dd6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d104      	bne.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006dde:	f7fc f9e3 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 8006de2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006de4:	f001 b935 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dee:	d108      	bne.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006df0:	f107 0308 	add.w	r3, r7, #8
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fe fc77 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dfe:	f001 b928 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006e02:	4b3c      	ldr	r3, [pc, #240]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d10d      	bne.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e14:	d109      	bne.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e16:	4b37      	ldr	r3, [pc, #220]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	08db      	lsrs	r3, r3, #3
 8006e1c:	f003 0303 	and.w	r3, r3, #3
 8006e20:	4a35      	ldr	r2, [pc, #212]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006e22:	fa22 f303 	lsr.w	r3, r2, r3
 8006e26:	637b      	str	r3, [r7, #52]	; 0x34
 8006e28:	e011      	b.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006e2a:	4b32      	ldr	r3, [pc, #200]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e36:	d106      	bne.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8006e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e3e:	d102      	bne.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8006e40:	4b2e      	ldr	r3, [pc, #184]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006e42:	637b      	str	r3, [r7, #52]	; 0x34
 8006e44:	e003      	b.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e4a:	f001 b902 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006e4e:	f001 b900 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006e52:	4b28      	ldr	r3, [pc, #160]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006e54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006e58:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006e5c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d104      	bne.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e64:	f7fc f9a0 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 8006e68:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006e6a:	f001 b8f2 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e74:	d108      	bne.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e76:	f107 0308 	add.w	r3, r7, #8
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fe fc34 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e84:	f001 b8e5 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006e88:	4b1a      	ldr	r3, [pc, #104]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d10d      	bne.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8006e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e96:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e9a:	d109      	bne.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e9c:	4b15      	ldr	r3, [pc, #84]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	08db      	lsrs	r3, r3, #3
 8006ea2:	f003 0303 	and.w	r3, r3, #3
 8006ea6:	4a14      	ldr	r2, [pc, #80]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8006eac:	637b      	str	r3, [r7, #52]	; 0x34
 8006eae:	e011      	b.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006eb0:	4b10      	ldr	r3, [pc, #64]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ebc:	d106      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006ec4:	d102      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8006ec6:	4b0d      	ldr	r3, [pc, #52]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8006eca:	e003      	b.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ed0:	f001 b8bf 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006ed4:	f001 b8bd 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006ed8:	4b06      	ldr	r3, [pc, #24]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006eda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006ede:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006ee2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10c      	bne.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006eea:	f7fc f989 	bl	8003200 <HAL_RCC_GetPCLK3Freq>
 8006eee:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006ef0:	f001 b8af 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006ef4:	44020c00 	.word	0x44020c00
 8006ef8:	03d09000 	.word	0x03d09000
 8006efc:	003d0900 	.word	0x003d0900
 8006f00:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f0a:	d108      	bne.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f0c:	f107 0308 	add.w	r3, r7, #8
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7fe fbe9 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f1a:	f001 b89a 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006f1e:	4b9f      	ldr	r3, [pc, #636]	; (800719c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d10d      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f30:	d109      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f32:	4b9a      	ldr	r3, [pc, #616]	; (800719c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	08db      	lsrs	r3, r3, #3
 8006f38:	f003 0303 	and.w	r3, r3, #3
 8006f3c:	4a98      	ldr	r2, [pc, #608]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f42:	637b      	str	r3, [r7, #52]	; 0x34
 8006f44:	e011      	b.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8006f46:	4b95      	ldr	r3, [pc, #596]	; (800719c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f52:	d106      	bne.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8006f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f5a:	d102      	bne.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8006f5c:	4b91      	ldr	r3, [pc, #580]	; (80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f60:	e003      	b.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8006f62:	2300      	movs	r3, #0
 8006f64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f66:	f001 b874 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006f6a:	f001 b872 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006f6e:	4b8b      	ldr	r3, [pc, #556]	; (800719c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006f74:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006f78:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d104      	bne.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006f80:	f7fc f93e 	bl	8003200 <HAL_RCC_GetPCLK3Freq>
 8006f84:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006f86:	f001 b864 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f90:	d108      	bne.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f92:	f107 0308 	add.w	r3, r7, #8
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7fe fba6 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fa0:	f001 b857 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006fa4:	4b7d      	ldr	r3, [pc, #500]	; (800719c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0302 	and.w	r3, r3, #2
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d10d      	bne.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fb6:	d109      	bne.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006fb8:	4b78      	ldr	r3, [pc, #480]	; (800719c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	08db      	lsrs	r3, r3, #3
 8006fbe:	f003 0303 	and.w	r3, r3, #3
 8006fc2:	4a77      	ldr	r2, [pc, #476]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8006fca:	e011      	b.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8006fcc:	4b73      	ldr	r3, [pc, #460]	; (800719c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fd8:	d106      	bne.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8006fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fdc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006fe0:	d102      	bne.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8006fe2:	4b70      	ldr	r3, [pc, #448]	; (80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8006fe6:	e003      	b.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fec:	f001 b831 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006ff0:	f001 b82f 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006ff4:	4b69      	ldr	r3, [pc, #420]	; (800719c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006ff6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006ffa:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006ffe:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8007000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007002:	2b00      	cmp	r3, #0
 8007004:	d104      	bne.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007006:	f7fc f8cf 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 800700a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800700c:	f001 b821 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8007010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007012:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007016:	d108      	bne.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007018:	f107 0308 	add.w	r3, r7, #8
 800701c:	4618      	mov	r0, r3
 800701e:	f7fe fb63 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007026:	f001 b814 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800702a:	4b5c      	ldr	r3, [pc, #368]	; (800719c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b02      	cmp	r3, #2
 8007034:	d10e      	bne.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8007036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007038:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800703c:	d10a      	bne.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800703e:	4b57      	ldr	r3, [pc, #348]	; (800719c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	08db      	lsrs	r3, r3, #3
 8007044:	f003 0303 	and.w	r3, r3, #3
 8007048:	4a55      	ldr	r2, [pc, #340]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800704a:	fa22 f303 	lsr.w	r3, r2, r3
 800704e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007050:	f000 bfff 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007054:	2300      	movs	r3, #0
 8007056:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007058:	f000 bffb 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800705c:	4b4f      	ldr	r3, [pc, #316]	; (800719c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800705e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007062:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007066:	633b      	str	r3, [r7, #48]	; 0x30
 8007068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800706e:	d056      	beq.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8007070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007072:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007076:	f200 808b 	bhi.w	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800707a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007080:	d03e      	beq.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007088:	f200 8082 	bhi.w	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007092:	d027      	beq.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8007094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007096:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800709a:	d879      	bhi.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800709c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070a2:	d017      	beq.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 80070a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070aa:	d871      	bhi.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80070ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d004      	beq.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 80070b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070b8:	d004      	beq.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 80070ba:	e069      	b.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80070bc:	f7fc f8a0 	bl	8003200 <HAL_RCC_GetPCLK3Freq>
 80070c0:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80070c2:	e068      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070c4:	f107 0314 	add.w	r3, r7, #20
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fe f9a3 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070d2:	e060      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070d4:	f107 0308 	add.w	r3, r7, #8
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fe fb05 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070e2:	e058      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80070e4:	4b2d      	ldr	r3, [pc, #180]	; (800719c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80070e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d103      	bne.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 80070f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070f6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80070f8:	e04d      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80070fa:	2300      	movs	r3, #0
 80070fc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070fe:	e04a      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007100:	4b26      	ldr	r3, [pc, #152]	; (800719c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007102:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007106:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800710a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800710e:	d103      	bne.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8007110:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007114:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007116:	e03e      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8007118:	2300      	movs	r3, #0
 800711a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800711c:	e03b      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800711e:	4b1f      	ldr	r3, [pc, #124]	; (800719c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007120:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007124:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007128:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800712a:	4b1c      	ldr	r3, [pc, #112]	; (800719c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b02      	cmp	r3, #2
 8007134:	d10c      	bne.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8007136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007138:	2b00      	cmp	r3, #0
 800713a:	d109      	bne.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800713c:	4b17      	ldr	r3, [pc, #92]	; (800719c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	08db      	lsrs	r3, r3, #3
 8007142:	f003 0303 	and.w	r3, r3, #3
 8007146:	4a16      	ldr	r2, [pc, #88]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007148:	fa22 f303 	lsr.w	r3, r2, r3
 800714c:	637b      	str	r3, [r7, #52]	; 0x34
 800714e:	e01e      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007150:	4b12      	ldr	r3, [pc, #72]	; (800719c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800715c:	d106      	bne.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800715e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007164:	d102      	bne.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007166:	4b0f      	ldr	r3, [pc, #60]	; (80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007168:	637b      	str	r3, [r7, #52]	; 0x34
 800716a:	e010      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800716c:	4b0b      	ldr	r3, [pc, #44]	; (800719c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007174:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007178:	d106      	bne.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800717a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007180:	d102      	bne.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007182:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8007184:	637b      	str	r3, [r7, #52]	; 0x34
 8007186:	e002      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007188:	2300      	movs	r3, #0
 800718a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800718c:	e003      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800718e:	e002      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007194:	bf00      	nop
          }
        }
        break;
 8007196:	f000 bf5c 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800719a:	bf00      	nop
 800719c:	44020c00 	.word	0x44020c00
 80071a0:	03d09000 	.word	0x03d09000
 80071a4:	003d0900 	.word	0x003d0900
 80071a8:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80071ac:	4b9e      	ldr	r3, [pc, #632]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80071ae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80071b2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80071b6:	633b      	str	r3, [r7, #48]	; 0x30
 80071b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ba:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80071be:	d056      	beq.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 80071c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80071c6:	f200 808b 	bhi.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80071ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071d0:	d03e      	beq.n	8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071d8:	f200 8082 	bhi.w	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80071dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071e2:	d027      	beq.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 80071e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071ea:	d879      	bhi.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80071ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071f2:	d017      	beq.n	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 80071f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071fa:	d871      	bhi.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80071fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d004      	beq.n	800720c <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007208:	d004      	beq.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800720a:	e069      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800720c:	f7fb ffcc 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 8007210:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007212:	e068      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007214:	f107 0314 	add.w	r3, r7, #20
 8007218:	4618      	mov	r0, r3
 800721a:	f7fe f8fb 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007222:	e060      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007224:	f107 0308 	add.w	r3, r7, #8
 8007228:	4618      	mov	r0, r3
 800722a:	f7fe fa5d 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007232:	e058      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007234:	4b7c      	ldr	r3, [pc, #496]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007236:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b02      	cmp	r3, #2
 8007240:	d103      	bne.n	800724a <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8007242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007246:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007248:	e04d      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800724a:	2300      	movs	r3, #0
 800724c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800724e:	e04a      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007250:	4b75      	ldr	r3, [pc, #468]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007252:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007256:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800725a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800725e:	d103      	bne.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8007260:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007264:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007266:	e03e      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8007268:	2300      	movs	r3, #0
 800726a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800726c:	e03b      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800726e:	4b6e      	ldr	r3, [pc, #440]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007270:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007274:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007278:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800727a:	4b6b      	ldr	r3, [pc, #428]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0302 	and.w	r3, r3, #2
 8007282:	2b02      	cmp	r3, #2
 8007284:	d10c      	bne.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	2b00      	cmp	r3, #0
 800728a:	d109      	bne.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800728c:	4b66      	ldr	r3, [pc, #408]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	08db      	lsrs	r3, r3, #3
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	4a65      	ldr	r2, [pc, #404]	; (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8007298:	fa22 f303 	lsr.w	r3, r2, r3
 800729c:	637b      	str	r3, [r7, #52]	; 0x34
 800729e:	e01e      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072a0:	4b61      	ldr	r3, [pc, #388]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ac:	d106      	bne.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 80072ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b4:	d102      	bne.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80072b6:	4b5e      	ldr	r3, [pc, #376]	; (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80072b8:	637b      	str	r3, [r7, #52]	; 0x34
 80072ba:	e010      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072bc:	4b5a      	ldr	r3, [pc, #360]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072c8:	d106      	bne.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 80072ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072d0:	d102      	bne.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80072d2:	4b58      	ldr	r3, [pc, #352]	; (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80072d4:	637b      	str	r3, [r7, #52]	; 0x34
 80072d6:	e002      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80072d8:	2300      	movs	r3, #0
 80072da:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80072dc:	e003      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 80072de:	e002      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80072e4:	bf00      	nop
          }
        }
        break;
 80072e6:	f000 beb4 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80072ea:	4b4f      	ldr	r3, [pc, #316]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80072ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80072f0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80072f4:	633b      	str	r3, [r7, #48]	; 0x30
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072fc:	d056      	beq.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 80072fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007304:	f200 808b 	bhi.w	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800730e:	d03e      	beq.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8007310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007312:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007316:	f200 8082 	bhi.w	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007320:	d027      	beq.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007328:	d879      	bhi.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007330:	d017      	beq.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007338:	d871      	bhi.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733c:	2b00      	cmp	r3, #0
 800733e:	d004      	beq.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8007340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007346:	d004      	beq.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8007348:	e069      	b.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800734a:	f7fb ff59 	bl	8003200 <HAL_RCC_GetPCLK3Freq>
 800734e:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007350:	e068      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007352:	f107 0314 	add.w	r3, r7, #20
 8007356:	4618      	mov	r0, r3
 8007358:	f7fe f85c 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007360:	e060      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007362:	f107 0308 	add.w	r3, r7, #8
 8007366:	4618      	mov	r0, r3
 8007368:	f7fe f9be 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007370:	e058      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007372:	4b2d      	ldr	r3, [pc, #180]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	2b02      	cmp	r3, #2
 800737e:	d103      	bne.n	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8007380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007384:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007386:	e04d      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8007388:	2300      	movs	r3, #0
 800738a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800738c:	e04a      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800738e:	4b26      	ldr	r3, [pc, #152]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007398:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800739c:	d103      	bne.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800739e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80073a2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80073a4:	e03e      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80073aa:	e03b      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073ac:	4b1e      	ldr	r3, [pc, #120]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80073ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80073b2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80073b6:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073b8:	4b1b      	ldr	r3, [pc, #108]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0302 	and.w	r3, r3, #2
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d10c      	bne.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 80073c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d109      	bne.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80073ca:	4b17      	ldr	r3, [pc, #92]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	08db      	lsrs	r3, r3, #3
 80073d0:	f003 0303 	and.w	r3, r3, #3
 80073d4:	4a15      	ldr	r2, [pc, #84]	; (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80073d6:	fa22 f303 	lsr.w	r3, r2, r3
 80073da:	637b      	str	r3, [r7, #52]	; 0x34
 80073dc:	e01e      	b.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073de:	4b12      	ldr	r3, [pc, #72]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073ea:	d106      	bne.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 80073ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073f2:	d102      	bne.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80073f4:	4b0e      	ldr	r3, [pc, #56]	; (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80073f6:	637b      	str	r3, [r7, #52]	; 0x34
 80073f8:	e010      	b.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073fa:	4b0b      	ldr	r3, [pc, #44]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007402:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007406:	d106      	bne.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8007408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800740e:	d102      	bne.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007410:	4b08      	ldr	r3, [pc, #32]	; (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8007412:	637b      	str	r3, [r7, #52]	; 0x34
 8007414:	e002      	b.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007416:	2300      	movs	r3, #0
 8007418:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800741a:	e003      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800741c:	e002      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800741e:	2300      	movs	r3, #0
 8007420:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007422:	bf00      	nop
          }
        }
        break;
 8007424:	f000 be15 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007428:	44020c00 	.word	0x44020c00
 800742c:	03d09000 	.word	0x03d09000
 8007430:	003d0900 	.word	0x003d0900
 8007434:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8007438:	4b9e      	ldr	r3, [pc, #632]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800743a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800743e:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8007442:	633b      	str	r3, [r7, #48]	; 0x30
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800744a:	d056      	beq.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8007452:	f200 808b 	bhi.w	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800745c:	d03e      	beq.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800745e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007464:	f200 8082 	bhi.w	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800746e:	d027      	beq.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8007470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007472:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007476:	d879      	bhi.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800747e:	d017      	beq.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8007480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007482:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007486:	d871      	bhi.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748a:	2b00      	cmp	r3, #0
 800748c:	d004      	beq.n	8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007494:	d004      	beq.n	80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8007496:	e069      	b.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007498:	f7fb feb2 	bl	8003200 <HAL_RCC_GetPCLK3Freq>
 800749c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800749e:	e068      	b.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074a0:	f107 0314 	add.w	r3, r7, #20
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7fd ffb5 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074ae:	e060      	b.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074b0:	f107 0308 	add.w	r3, r7, #8
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7fe f917 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074be:	e058      	b.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80074c0:	4b7c      	ldr	r3, [pc, #496]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80074c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d103      	bne.n	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 80074ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074d2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80074d4:	e04d      	b.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80074d6:	2300      	movs	r3, #0
 80074d8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074da:	e04a      	b.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80074dc:	4b75      	ldr	r3, [pc, #468]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80074de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074ea:	d103      	bne.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 80074ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80074f0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80074f2:	e03e      	b.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80074f4:	2300      	movs	r3, #0
 80074f6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074f8:	e03b      	b.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074fa:	4b6e      	ldr	r3, [pc, #440]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80074fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007500:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007504:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007506:	4b6b      	ldr	r3, [pc, #428]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0302 	and.w	r3, r3, #2
 800750e:	2b02      	cmp	r3, #2
 8007510:	d10c      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8007512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007514:	2b00      	cmp	r3, #0
 8007516:	d109      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007518:	4b66      	ldr	r3, [pc, #408]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	08db      	lsrs	r3, r3, #3
 800751e:	f003 0303 	and.w	r3, r3, #3
 8007522:	4a65      	ldr	r2, [pc, #404]	; (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8007524:	fa22 f303 	lsr.w	r3, r2, r3
 8007528:	637b      	str	r3, [r7, #52]	; 0x34
 800752a:	e01e      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800752c:	4b61      	ldr	r3, [pc, #388]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007538:	d106      	bne.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800753a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007540:	d102      	bne.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007542:	4b5e      	ldr	r3, [pc, #376]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8007544:	637b      	str	r3, [r7, #52]	; 0x34
 8007546:	e010      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007548:	4b5a      	ldr	r3, [pc, #360]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007554:	d106      	bne.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8007556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007558:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800755c:	d102      	bne.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800755e:	4b58      	ldr	r3, [pc, #352]	; (80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8007560:	637b      	str	r3, [r7, #52]	; 0x34
 8007562:	e002      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007564:	2300      	movs	r3, #0
 8007566:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007568:	e003      	b.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800756a:	e002      	b.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007570:	bf00      	nop
          }
        }
        break;
 8007572:	f000 bd6e 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8007576:	4b4f      	ldr	r3, [pc, #316]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007578:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800757c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007580:	633b      	str	r3, [r7, #48]	; 0x30
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007588:	d056      	beq.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007590:	f200 808b 	bhi.w	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007596:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800759a:	d03e      	beq.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075a2:	f200 8082 	bhi.w	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80075ac:	d027      	beq.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 80075ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80075b4:	d879      	bhi.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80075b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075bc:	d017      	beq.n	80075ee <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 80075be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075c4:	d871      	bhi.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d004      	beq.n	80075d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 80075cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075d2:	d004      	beq.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 80075d4:	e069      	b.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80075d6:	f7fb fe13 	bl	8003200 <HAL_RCC_GetPCLK3Freq>
 80075da:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80075dc:	e068      	b.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075de:	f107 0314 	add.w	r3, r7, #20
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fd ff16 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80075ec:	e060      	b.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075ee:	f107 0308 	add.w	r3, r7, #8
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7fe f878 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80075fc:	e058      	b.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80075fe:	4b2d      	ldr	r3, [pc, #180]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007604:	f003 0302 	and.w	r3, r3, #2
 8007608:	2b02      	cmp	r3, #2
 800760a:	d103      	bne.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800760c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007610:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007612:	e04d      	b.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8007614:	2300      	movs	r3, #0
 8007616:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007618:	e04a      	b.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800761a:	4b26      	ldr	r3, [pc, #152]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800761c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007628:	d103      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800762a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800762e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007630:	e03e      	b.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8007632:	2300      	movs	r3, #0
 8007634:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007636:	e03b      	b.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007638:	4b1e      	ldr	r3, [pc, #120]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800763a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800763e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007642:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007644:	4b1b      	ldr	r3, [pc, #108]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0302 	and.w	r3, r3, #2
 800764c:	2b02      	cmp	r3, #2
 800764e:	d10c      	bne.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8007650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007652:	2b00      	cmp	r3, #0
 8007654:	d109      	bne.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007656:	4b17      	ldr	r3, [pc, #92]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	08db      	lsrs	r3, r3, #3
 800765c:	f003 0303 	and.w	r3, r3, #3
 8007660:	4a15      	ldr	r2, [pc, #84]	; (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8007662:	fa22 f303 	lsr.w	r3, r2, r3
 8007666:	637b      	str	r3, [r7, #52]	; 0x34
 8007668:	e01e      	b.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800766a:	4b12      	ldr	r3, [pc, #72]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007676:	d106      	bne.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8007678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800767e:	d102      	bne.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007680:	4b0e      	ldr	r3, [pc, #56]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8007682:	637b      	str	r3, [r7, #52]	; 0x34
 8007684:	e010      	b.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007686:	4b0b      	ldr	r3, [pc, #44]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800768e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007692:	d106      	bne.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8007694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007696:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800769a:	d102      	bne.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800769c:	4b08      	ldr	r3, [pc, #32]	; (80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800769e:	637b      	str	r3, [r7, #52]	; 0x34
 80076a0:	e002      	b.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80076a6:	e003      	b.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 80076a8:	e002      	b.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80076ae:	bf00      	nop
          }
        }
        break;
 80076b0:	f000 bccf 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80076b4:	44020c00 	.word	0x44020c00
 80076b8:	03d09000 	.word	0x03d09000
 80076bc:	003d0900 	.word	0x003d0900
 80076c0:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 80076c4:	4b9e      	ldr	r3, [pc, #632]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80076c6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80076ca:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80076ce:	633b      	str	r3, [r7, #48]	; 0x30
 80076d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076d6:	d056      	beq.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 80076d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076de:	f200 808b 	bhi.w	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e8:	d03e      	beq.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f0:	f200 8082 	bhi.w	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076fa:	d027      	beq.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 80076fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007702:	d879      	bhi.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800770a:	d017      	beq.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007712:	d871      	bhi.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007716:	2b00      	cmp	r3, #0
 8007718:	d004      	beq.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007720:	d004      	beq.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8007722:	e069      	b.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007724:	f7fb fd6c 	bl	8003200 <HAL_RCC_GetPCLK3Freq>
 8007728:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800772a:	e068      	b.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800772c:	f107 0314 	add.w	r3, r7, #20
 8007730:	4618      	mov	r0, r3
 8007732:	f7fd fe6f 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800773a:	e060      	b.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800773c:	f107 0308 	add.w	r3, r7, #8
 8007740:	4618      	mov	r0, r3
 8007742:	f7fd ffd1 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800774a:	e058      	b.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800774c:	4b7c      	ldr	r3, [pc, #496]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800774e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	2b02      	cmp	r3, #2
 8007758:	d103      	bne.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800775a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800775e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007760:	e04d      	b.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8007762:	2300      	movs	r3, #0
 8007764:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007766:	e04a      	b.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007768:	4b75      	ldr	r3, [pc, #468]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800776a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800776e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007772:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007776:	d103      	bne.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8007778:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800777c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800777e:	e03e      	b.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8007780:	2300      	movs	r3, #0
 8007782:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007784:	e03b      	b.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007786:	4b6e      	ldr	r3, [pc, #440]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007788:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800778c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007790:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007792:	4b6b      	ldr	r3, [pc, #428]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 0302 	and.w	r3, r3, #2
 800779a:	2b02      	cmp	r3, #2
 800779c:	d10c      	bne.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d109      	bne.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077a4:	4b66      	ldr	r3, [pc, #408]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	08db      	lsrs	r3, r3, #3
 80077aa:	f003 0303 	and.w	r3, r3, #3
 80077ae:	4a65      	ldr	r2, [pc, #404]	; (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80077b0:	fa22 f303 	lsr.w	r3, r2, r3
 80077b4:	637b      	str	r3, [r7, #52]	; 0x34
 80077b6:	e01e      	b.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077b8:	4b61      	ldr	r3, [pc, #388]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077c4:	d106      	bne.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 80077c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077cc:	d102      	bne.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80077ce:	4b5e      	ldr	r3, [pc, #376]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80077d0:	637b      	str	r3, [r7, #52]	; 0x34
 80077d2:	e010      	b.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077d4:	4b5a      	ldr	r3, [pc, #360]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077e0:	d106      	bne.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 80077e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077e8:	d102      	bne.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80077ea:	4b58      	ldr	r3, [pc, #352]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80077ec:	637b      	str	r3, [r7, #52]	; 0x34
 80077ee:	e002      	b.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80077f0:	2300      	movs	r3, #0
 80077f2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80077f4:	e003      	b.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 80077f6:	e002      	b.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 80077f8:	2300      	movs	r3, #0
 80077fa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80077fc:	bf00      	nop
          }
        }
        break;
 80077fe:	f000 bc28 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007802:	4b4f      	ldr	r3, [pc, #316]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007804:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800780c:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800780e:	4b4c      	ldr	r3, [pc, #304]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007816:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800781a:	d106      	bne.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800781c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781e:	2b00      	cmp	r3, #0
 8007820:	d103      	bne.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8007822:	4b4a      	ldr	r3, [pc, #296]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007824:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8007826:	f000 bc14 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007830:	d108      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007832:	f107 0320 	add.w	r3, r7, #32
 8007836:	4618      	mov	r0, r3
 8007838:	f7fd fc82 	bl	8005140 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007840:	f000 bc07 	b.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8007844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800784a:	d107      	bne.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800784c:	f107 0314 	add.w	r3, r7, #20
 8007850:	4618      	mov	r0, r3
 8007852:	f7fd fddf 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800785a:	e3fa      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800785c:	2300      	movs	r3, #0
 800785e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007860:	e3f7      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007862:	4b37      	ldr	r3, [pc, #220]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007868:	f003 0307 	and.w	r3, r3, #7
 800786c:	633b      	str	r3, [r7, #48]	; 0x30
 800786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007870:	2b04      	cmp	r3, #4
 8007872:	d861      	bhi.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8007874:	a201      	add	r2, pc, #4	; (adr r2, 800787c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8007876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787a:	bf00      	nop
 800787c:	08007891 	.word	0x08007891
 8007880:	080078a1 	.word	0x080078a1
 8007884:	080078b1 	.word	0x080078b1
 8007888:	080078c1 	.word	0x080078c1
 800788c:	080078c7 	.word	0x080078c7
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007890:	f107 0320 	add.w	r3, r7, #32
 8007894:	4618      	mov	r0, r3
 8007896:	f7fd fc53 	bl	8005140 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800789e:	e04e      	b.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078a0:	f107 0314 	add.w	r3, r7, #20
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7fd fdb5 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80078ae:	e046      	b.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078b0:	f107 0308 	add.w	r3, r7, #8
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7fd ff17 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80078be:	e03e      	b.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80078c0:	4b23      	ldr	r3, [pc, #140]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 80078c2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80078c4:	e03b      	b.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078c6:	4b1e      	ldr	r3, [pc, #120]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80078c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80078cc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80078d0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078d2:	4b1b      	ldr	r3, [pc, #108]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0302 	and.w	r3, r3, #2
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d10c      	bne.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 80078de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d109      	bne.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078e4:	4b16      	ldr	r3, [pc, #88]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	08db      	lsrs	r3, r3, #3
 80078ea:	f003 0303 	and.w	r3, r3, #3
 80078ee:	4a15      	ldr	r2, [pc, #84]	; (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80078f0:	fa22 f303 	lsr.w	r3, r2, r3
 80078f4:	637b      	str	r3, [r7, #52]	; 0x34
 80078f6:	e01e      	b.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078f8:	4b11      	ldr	r3, [pc, #68]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007904:	d106      	bne.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8007906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800790c:	d102      	bne.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800790e:	4b0e      	ldr	r3, [pc, #56]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8007910:	637b      	str	r3, [r7, #52]	; 0x34
 8007912:	e010      	b.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007914:	4b0a      	ldr	r3, [pc, #40]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800791c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007920:	d106      	bne.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8007922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007924:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007928:	d102      	bne.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800792a:	4b08      	ldr	r3, [pc, #32]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800792c:	637b      	str	r3, [r7, #52]	; 0x34
 800792e:	e002      	b.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007930:	2300      	movs	r3, #0
 8007932:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007934:	e003      	b.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8007936:	e002      	b.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8007938:	2300      	movs	r3, #0
 800793a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800793c:	bf00      	nop
          }
        }
        break;
 800793e:	e388      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007940:	44020c00 	.word	0x44020c00
 8007944:	03d09000 	.word	0x03d09000
 8007948:	003d0900 	.word	0x003d0900
 800794c:	007a1200 	.word	0x007a1200
 8007950:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007954:	4ba9      	ldr	r3, [pc, #676]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800795a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800795e:	633b      	str	r3, [r7, #48]	; 0x30
 8007960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007962:	2b20      	cmp	r3, #32
 8007964:	f200 809a 	bhi.w	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8007968:	a201      	add	r2, pc, #4	; (adr r2, 8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800796a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796e:	bf00      	nop
 8007970:	080079f5 	.word	0x080079f5
 8007974:	08007a9d 	.word	0x08007a9d
 8007978:	08007a9d 	.word	0x08007a9d
 800797c:	08007a9d 	.word	0x08007a9d
 8007980:	08007a9d 	.word	0x08007a9d
 8007984:	08007a9d 	.word	0x08007a9d
 8007988:	08007a9d 	.word	0x08007a9d
 800798c:	08007a9d 	.word	0x08007a9d
 8007990:	08007a05 	.word	0x08007a05
 8007994:	08007a9d 	.word	0x08007a9d
 8007998:	08007a9d 	.word	0x08007a9d
 800799c:	08007a9d 	.word	0x08007a9d
 80079a0:	08007a9d 	.word	0x08007a9d
 80079a4:	08007a9d 	.word	0x08007a9d
 80079a8:	08007a9d 	.word	0x08007a9d
 80079ac:	08007a9d 	.word	0x08007a9d
 80079b0:	08007a15 	.word	0x08007a15
 80079b4:	08007a9d 	.word	0x08007a9d
 80079b8:	08007a9d 	.word	0x08007a9d
 80079bc:	08007a9d 	.word	0x08007a9d
 80079c0:	08007a9d 	.word	0x08007a9d
 80079c4:	08007a9d 	.word	0x08007a9d
 80079c8:	08007a9d 	.word	0x08007a9d
 80079cc:	08007a9d 	.word	0x08007a9d
 80079d0:	08007a25 	.word	0x08007a25
 80079d4:	08007a9d 	.word	0x08007a9d
 80079d8:	08007a9d 	.word	0x08007a9d
 80079dc:	08007a9d 	.word	0x08007a9d
 80079e0:	08007a9d 	.word	0x08007a9d
 80079e4:	08007a9d 	.word	0x08007a9d
 80079e8:	08007a9d 	.word	0x08007a9d
 80079ec:	08007a9d 	.word	0x08007a9d
 80079f0:	08007a2b 	.word	0x08007a2b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079f4:	f107 0320 	add.w	r3, r7, #32
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7fd fba1 	bl	8005140 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a02:	e04e      	b.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a04:	f107 0314 	add.w	r3, r7, #20
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7fd fd03 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a12:	e046      	b.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a14:	f107 0308 	add.w	r3, r7, #8
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7fd fe65 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a22:	e03e      	b.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007a24:	4b76      	ldr	r3, [pc, #472]	; (8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8007a26:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a28:	e03b      	b.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a2a:	4b74      	ldr	r3, [pc, #464]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a30:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007a34:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a36:	4b71      	ldr	r3, [pc, #452]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0302 	and.w	r3, r3, #2
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d10c      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8007a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d109      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a48:	4b6c      	ldr	r3, [pc, #432]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	08db      	lsrs	r3, r3, #3
 8007a4e:	f003 0303 	and.w	r3, r3, #3
 8007a52:	4a6c      	ldr	r2, [pc, #432]	; (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8007a54:	fa22 f303 	lsr.w	r3, r2, r3
 8007a58:	637b      	str	r3, [r7, #52]	; 0x34
 8007a5a:	e01e      	b.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a5c:	4b67      	ldr	r3, [pc, #412]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a68:	d106      	bne.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8007a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a70:	d102      	bne.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007a72:	4b65      	ldr	r3, [pc, #404]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8007a74:	637b      	str	r3, [r7, #52]	; 0x34
 8007a76:	e010      	b.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a78:	4b60      	ldr	r3, [pc, #384]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a84:	d106      	bne.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8007a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a8c:	d102      	bne.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007a8e:	4b5f      	ldr	r3, [pc, #380]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8007a90:	637b      	str	r3, [r7, #52]	; 0x34
 8007a92:	e002      	b.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007a94:	2300      	movs	r3, #0
 8007a96:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007a98:	e003      	b.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8007a9a:	e002      	b.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007aa0:	bf00      	nop
          }
        }
        break;
 8007aa2:	e2d6      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007aa4:	4b55      	ldr	r3, [pc, #340]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007aaa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007aae:	633b      	str	r3, [r7, #48]	; 0x30
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ab6:	d031      	beq.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007abe:	d866      	bhi.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac2:	2bc0      	cmp	r3, #192	; 0xc0
 8007ac4:	d027      	beq.n	8007b16 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac8:	2bc0      	cmp	r3, #192	; 0xc0
 8007aca:	d860      	bhi.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	2b80      	cmp	r3, #128	; 0x80
 8007ad0:	d019      	beq.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad4:	2b80      	cmp	r3, #128	; 0x80
 8007ad6:	d85a      	bhi.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d003      	beq.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8007ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae0:	2b40      	cmp	r3, #64	; 0x40
 8007ae2:	d008      	beq.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8007ae4:	e053      	b.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ae6:	f107 0320 	add.w	r3, r7, #32
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fd fb28 	bl	8005140 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007af4:	e04e      	b.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007af6:	f107 0314 	add.w	r3, r7, #20
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fd fc8a 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b04:	e046      	b.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b06:	f107 0308 	add.w	r3, r7, #8
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fd fdec 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b14:	e03e      	b.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007b16:	4b3a      	ldr	r3, [pc, #232]	; (8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8007b18:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b1a:	e03b      	b.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b1c:	4b37      	ldr	r3, [pc, #220]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007b1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b22:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007b26:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b28:	4b34      	ldr	r3, [pc, #208]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0302 	and.w	r3, r3, #2
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d10c      	bne.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8007b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d109      	bne.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b3a:	4b30      	ldr	r3, [pc, #192]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	08db      	lsrs	r3, r3, #3
 8007b40:	f003 0303 	and.w	r3, r3, #3
 8007b44:	4a2f      	ldr	r2, [pc, #188]	; (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8007b46:	fa22 f303 	lsr.w	r3, r2, r3
 8007b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b4c:	e01e      	b.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b4e:	4b2b      	ldr	r3, [pc, #172]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b5a:	d106      	bne.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8007b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b62:	d102      	bne.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007b64:	4b28      	ldr	r3, [pc, #160]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8007b66:	637b      	str	r3, [r7, #52]	; 0x34
 8007b68:	e010      	b.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b6a:	4b24      	ldr	r3, [pc, #144]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b76:	d106      	bne.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8007b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b7e:	d102      	bne.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007b80:	4b22      	ldr	r3, [pc, #136]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8007b82:	637b      	str	r3, [r7, #52]	; 0x34
 8007b84:	e002      	b.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007b86:	2300      	movs	r3, #0
 8007b88:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007b8a:	e003      	b.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8007b8c:	e002      	b.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b92:	bf00      	nop
          }
        }
        break;
 8007b94:	e25d      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8007b96:	4b19      	ldr	r3, [pc, #100]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b9c:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8007ba0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d103      	bne.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007ba8:	f7fb fb14 	bl	80031d4 <HAL_RCC_GetPCLK2Freq>
 8007bac:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007bae:	e250      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8007bb0:	4b12      	ldr	r3, [pc, #72]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bbc:	d10b      	bne.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bc4:	d107      	bne.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bc6:	f107 0314 	add.w	r3, r7, #20
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fd fc22 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8007bd4:	e04f      	b.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8007bd6:	4b09      	ldr	r3, [pc, #36]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007be2:	d115      	bne.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8007be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bea:	d111      	bne.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bec:	f107 0308 	add.w	r3, r7, #8
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fd fd79 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8007bfa:	e03c      	b.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8007bfc:	44020c00 	.word	0x44020c00
 8007c00:	00bb8000 	.word	0x00bb8000
 8007c04:	03d09000 	.word	0x03d09000
 8007c08:	003d0900 	.word	0x003d0900
 8007c0c:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007c10:	4b94      	ldr	r3, [pc, #592]	; (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0302 	and.w	r3, r3, #2
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d10d      	bne.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8007c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007c22:	d109      	bne.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c24:	4b8f      	ldr	r3, [pc, #572]	; (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	08db      	lsrs	r3, r3, #3
 8007c2a:	f003 0303 	and.w	r3, r3, #3
 8007c2e:	4a8e      	ldr	r2, [pc, #568]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007c30:	fa22 f303 	lsr.w	r3, r2, r3
 8007c34:	637b      	str	r3, [r7, #52]	; 0x34
 8007c36:	e01e      	b.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007c38:	4b8a      	ldr	r3, [pc, #552]	; (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c44:	d106      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8007c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c4c:	d102      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8007c4e:	4b87      	ldr	r3, [pc, #540]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007c50:	637b      	str	r3, [r7, #52]	; 0x34
 8007c52:	e010      	b.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007c54:	4b83      	ldr	r3, [pc, #524]	; (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c60:	d106      	bne.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8007c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c64:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007c68:	d102      	bne.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8007c6a:	4b81      	ldr	r3, [pc, #516]	; (8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c6e:	e002      	b.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8007c70:	2300      	movs	r3, #0
 8007c72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c74:	e1ed      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c76:	e1ec      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8007c78:	4b7a      	ldr	r3, [pc, #488]	; (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c7e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007c82:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8007c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d103      	bne.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007c8a:	f7fb fab9 	bl	8003200 <HAL_RCC_GetPCLK3Freq>
 8007c8e:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007c90:	e1df      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8007c92:	4b74      	ldr	r3, [pc, #464]	; (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c9e:	d10b      	bne.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ca6:	d107      	bne.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ca8:	f107 0314 	add.w	r3, r7, #20
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fd fbb1 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8007cb6:	e045      	b.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8007cb8:	4b6a      	ldr	r3, [pc, #424]	; (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cc4:	d10b      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ccc:	d107      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cce:	f107 0308 	add.w	r3, r7, #8
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fd fd08 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	637b      	str	r3, [r7, #52]	; 0x34
 8007cdc:	e032      	b.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8007cde:	4b61      	ldr	r3, [pc, #388]	; (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0302 	and.w	r3, r3, #2
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d10d      	bne.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8007cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cf0:	d109      	bne.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007cf2:	4b5c      	ldr	r3, [pc, #368]	; (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	08db      	lsrs	r3, r3, #3
 8007cf8:	f003 0303 	and.w	r3, r3, #3
 8007cfc:	4a5a      	ldr	r2, [pc, #360]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8007d02:	637b      	str	r3, [r7, #52]	; 0x34
 8007d04:	e01e      	b.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8007d06:	4b57      	ldr	r3, [pc, #348]	; (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d12:	d106      	bne.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8007d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d1a:	d102      	bne.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8007d1c:	4b53      	ldr	r3, [pc, #332]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d20:	e010      	b.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8007d22:	4b50      	ldr	r3, [pc, #320]	; (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d2e:	d106      	bne.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8007d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d32:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007d36:	d102      	bne.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8007d38:	4b4d      	ldr	r3, [pc, #308]	; (8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d3c:	e002      	b.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d42:	e186      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d44:	e185      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007d46:	4b47      	ldr	r3, [pc, #284]	; (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d4c:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8007d50:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8007d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d103      	bne.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007d58:	f7fb fa3c 	bl	80031d4 <HAL_RCC_GetPCLK2Freq>
 8007d5c:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007d5e:	e178      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8007d60:	4b40      	ldr	r3, [pc, #256]	; (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d6c:	d10b      	bne.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d74:	d107      	bne.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d76:	f107 0314 	add.w	r3, r7, #20
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fd fb4a 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	637b      	str	r3, [r7, #52]	; 0x34
 8007d84:	e045      	b.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8007d86:	4b37      	ldr	r3, [pc, #220]	; (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d92:	d10b      	bne.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8007d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d9a:	d107      	bne.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d9c:	f107 0308 	add.w	r3, r7, #8
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7fd fca1 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	637b      	str	r3, [r7, #52]	; 0x34
 8007daa:	e032      	b.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8007dac:	4b2d      	ldr	r3, [pc, #180]	; (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 0302 	and.w	r3, r3, #2
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d10d      	bne.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8007db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dba:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007dbe:	d109      	bne.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007dc0:	4b28      	ldr	r3, [pc, #160]	; (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	08db      	lsrs	r3, r3, #3
 8007dc6:	f003 0303 	and.w	r3, r3, #3
 8007dca:	4a27      	ldr	r2, [pc, #156]	; (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8007dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8007dd2:	e01e      	b.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8007dd4:	4b23      	ldr	r3, [pc, #140]	; (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007de0:	d106      	bne.n	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8007de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007de8:	d102      	bne.n	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8007dea:	4b20      	ldr	r3, [pc, #128]	; (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007dec:	637b      	str	r3, [r7, #52]	; 0x34
 8007dee:	e010      	b.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8007df0:	4b1c      	ldr	r3, [pc, #112]	; (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dfc:	d106      	bne.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007e04:	d102      	bne.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8007e06:	4b1a      	ldr	r3, [pc, #104]	; (8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007e08:	637b      	str	r3, [r7, #52]	; 0x34
 8007e0a:	e002      	b.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e10:	e11f      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e12:	e11e      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007e14:	4b13      	ldr	r3, [pc, #76]	; (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007e16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007e1a:	f003 0303 	and.w	r3, r3, #3
 8007e1e:	633b      	str	r3, [r7, #48]	; 0x30
 8007e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e22:	2b03      	cmp	r3, #3
 8007e24:	d85f      	bhi.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8007e26:	a201      	add	r2, pc, #4	; (adr r2, 8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8007e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2c:	08007e3d 	.word	0x08007e3d
 8007e30:	08007e45 	.word	0x08007e45
 8007e34:	08007e55 	.word	0x08007e55
 8007e38:	08007e75 	.word	0x08007e75

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007e3c:	f7fb f998 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 8007e40:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007e42:	e053      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e44:	f107 0320 	add.w	r3, r7, #32
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fd f979 	bl	8005140 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e52:	e04b      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e54:	f107 0314 	add.w	r3, r7, #20
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fd fadb 	bl	8005414 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e62:	e043      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007e64:	44020c00 	.word	0x44020c00
 8007e68:	03d09000 	.word	0x03d09000
 8007e6c:	003d0900 	.word	0x003d0900
 8007e70:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e74:	4b79      	ldr	r3, [pc, #484]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e7a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007e7e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e80:	4b76      	ldr	r3, [pc, #472]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0302 	and.w	r3, r3, #2
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d10c      	bne.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8007e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d109      	bne.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e92:	4b72      	ldr	r3, [pc, #456]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	08db      	lsrs	r3, r3, #3
 8007e98:	f003 0303 	and.w	r3, r3, #3
 8007e9c:	4a70      	ldr	r2, [pc, #448]	; (8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8007e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8007ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ea4:	e01e      	b.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ea6:	4b6d      	ldr	r3, [pc, #436]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eb2:	d106      	bne.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8007eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eba:	d102      	bne.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007ebc:	4b69      	ldr	r3, [pc, #420]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8007ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8007ec0:	e010      	b.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ec2:	4b66      	ldr	r3, [pc, #408]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ece:	d106      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8007ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ed6:	d102      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007ed8:	4b63      	ldr	r3, [pc, #396]	; (8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8007eda:	637b      	str	r3, [r7, #52]	; 0x34
 8007edc:	e002      	b.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007ee2:	e003      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007ee4:	e002      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007eea:	bf00      	nop
          }
        }
        break;
 8007eec:	e0b1      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007eee:	4b5b      	ldr	r3, [pc, #364]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ef0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ef4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ef8:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007efa:	4b58      	ldr	r3, [pc, #352]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007efc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f00:	f003 0302 	and.w	r3, r3, #2
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d106      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8007f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d103      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8007f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f12:	637b      	str	r3, [r7, #52]	; 0x34
 8007f14:	e01f      	b.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8007f16:	4b51      	ldr	r3, [pc, #324]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f24:	d106      	bne.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	2b40      	cmp	r3, #64	; 0x40
 8007f2a:	d103      	bne.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8007f2c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007f30:	637b      	str	r3, [r7, #52]	; 0x34
 8007f32:	e010      	b.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007f34:	4b49      	ldr	r3, [pc, #292]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f40:	d106      	bne.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8007f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f44:	2b80      	cmp	r3, #128	; 0x80
 8007f46:	d103      	bne.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8007f48:	f248 0312 	movw	r3, #32786	; 0x8012
 8007f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f4e:	e002      	b.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007f50:	2300      	movs	r3, #0
 8007f52:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007f54:	e07d      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f56:	e07c      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007f58:	4b40      	ldr	r3, [pc, #256]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007f62:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007f64:	4b3d      	ldr	r3, [pc, #244]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f70:	d105      	bne.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8007f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d102      	bne.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8007f78:	4b3c      	ldr	r3, [pc, #240]	; (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f7c:	e031      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007f7e:	4b37      	ldr	r3, [pc, #220]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f8a:	d10a      	bne.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8e:	2b10      	cmp	r3, #16
 8007f90:	d107      	bne.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f92:	f107 0320 	add.w	r3, r7, #32
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fd f8d2 	bl	8005140 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8007fa0:	e01f      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8007fa2:	4b2e      	ldr	r3, [pc, #184]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fa8:	f003 0302 	and.w	r3, r3, #2
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d106      	bne.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb2:	2b20      	cmp	r3, #32
 8007fb4:	d103      	bne.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8007fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fba:	637b      	str	r3, [r7, #52]	; 0x34
 8007fbc:	e011      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007fbe:	4b27      	ldr	r3, [pc, #156]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007fc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fcc:	d106      	bne.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	2b30      	cmp	r3, #48	; 0x30
 8007fd2:	d103      	bne.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8007fd4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8007fda:	e002      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007fe0:	e037      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007fe2:	e036      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007fe4:	4b1d      	ldr	r3, [pc, #116]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007fe6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007fea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007fee:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff2:	2b10      	cmp	r3, #16
 8007ff4:	d107      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ff6:	f107 0320 	add.w	r3, r7, #32
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fd f8a0 	bl	8005140 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8008004:	e025      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8008006:	4b15      	ldr	r3, [pc, #84]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800800e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008012:	d10a      	bne.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8008014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008016:	2b20      	cmp	r3, #32
 8008018:	d107      	bne.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800801a:	f107 0308 	add.w	r3, r7, #8
 800801e:	4618      	mov	r0, r3
 8008020:	f7fd fb62 	bl	80056e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	637b      	str	r3, [r7, #52]	; 0x34
 8008028:	e00f      	b.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800802a:	4b0c      	ldr	r3, [pc, #48]	; (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008036:	d105      	bne.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8008038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803a:	2b30      	cmp	r3, #48	; 0x30
 800803c:	d102      	bne.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800803e:	4b0b      	ldr	r3, [pc, #44]	; (800806c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8008040:	637b      	str	r3, [r7, #52]	; 0x34
 8008042:	e002      	b.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8008044:	2300      	movs	r3, #0
 8008046:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8008048:	e003      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800804a:	e002      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008050:	bf00      	nop
    }
  }

  return (frequency);
 8008052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008054:	4618      	mov	r0, r3
 8008056:	373c      	adds	r7, #60	; 0x3c
 8008058:	46bd      	mov	sp, r7
 800805a:	bd90      	pop	{r4, r7, pc}
 800805c:	44020c00 	.word	0x44020c00
 8008060:	03d09000 	.word	0x03d09000
 8008064:	003d0900 	.word	0x003d0900
 8008068:	007a1200 	.word	0x007a1200
 800806c:	02dc6c00 	.word	0x02dc6c00

08008070 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8008078:	4b48      	ldr	r3, [pc, #288]	; (800819c <RCCEx_PLL2_Config+0x12c>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a47      	ldr	r2, [pc, #284]	; (800819c <RCCEx_PLL2_Config+0x12c>)
 800807e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008082:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008084:	f7f9 fec2 	bl	8001e0c <HAL_GetTick>
 8008088:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800808a:	e008      	b.n	800809e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800808c:	f7f9 febe 	bl	8001e0c <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	2b02      	cmp	r3, #2
 8008098:	d901      	bls.n	800809e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800809a:	2303      	movs	r3, #3
 800809c:	e07a      	b.n	8008194 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800809e:	4b3f      	ldr	r3, [pc, #252]	; (800819c <RCCEx_PLL2_Config+0x12c>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1f0      	bne.n	800808c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80080aa:	4b3c      	ldr	r3, [pc, #240]	; (800819c <RCCEx_PLL2_Config+0x12c>)
 80080ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80080b2:	f023 0303 	bic.w	r3, r3, #3
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	6811      	ldr	r1, [r2, #0]
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	6852      	ldr	r2, [r2, #4]
 80080be:	0212      	lsls	r2, r2, #8
 80080c0:	430a      	orrs	r2, r1
 80080c2:	4936      	ldr	r1, [pc, #216]	; (800819c <RCCEx_PLL2_Config+0x12c>)
 80080c4:	4313      	orrs	r3, r2
 80080c6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	3b01      	subs	r3, #1
 80080ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	3b01      	subs	r3, #1
 80080d8:	025b      	lsls	r3, r3, #9
 80080da:	b29b      	uxth	r3, r3
 80080dc:	431a      	orrs	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	3b01      	subs	r3, #1
 80080e4:	041b      	lsls	r3, r3, #16
 80080e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80080ea:	431a      	orrs	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	695b      	ldr	r3, [r3, #20]
 80080f0:	3b01      	subs	r3, #1
 80080f2:	061b      	lsls	r3, r3, #24
 80080f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80080f8:	4928      	ldr	r1, [pc, #160]	; (800819c <RCCEx_PLL2_Config+0x12c>)
 80080fa:	4313      	orrs	r3, r2
 80080fc:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80080fe:	4b27      	ldr	r3, [pc, #156]	; (800819c <RCCEx_PLL2_Config+0x12c>)
 8008100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008102:	f023 020c 	bic.w	r2, r3, #12
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	4924      	ldr	r1, [pc, #144]	; (800819c <RCCEx_PLL2_Config+0x12c>)
 800810c:	4313      	orrs	r3, r2
 800810e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8008110:	4b22      	ldr	r3, [pc, #136]	; (800819c <RCCEx_PLL2_Config+0x12c>)
 8008112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008114:	f023 0220 	bic.w	r2, r3, #32
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	69db      	ldr	r3, [r3, #28]
 800811c:	491f      	ldr	r1, [pc, #124]	; (800819c <RCCEx_PLL2_Config+0x12c>)
 800811e:	4313      	orrs	r3, r2
 8008120:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008122:	4b1e      	ldr	r3, [pc, #120]	; (800819c <RCCEx_PLL2_Config+0x12c>)
 8008124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812a:	491c      	ldr	r1, [pc, #112]	; (800819c <RCCEx_PLL2_Config+0x12c>)
 800812c:	4313      	orrs	r3, r2
 800812e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8008130:	4b1a      	ldr	r3, [pc, #104]	; (800819c <RCCEx_PLL2_Config+0x12c>)
 8008132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008134:	4a19      	ldr	r2, [pc, #100]	; (800819c <RCCEx_PLL2_Config+0x12c>)
 8008136:	f023 0310 	bic.w	r3, r3, #16
 800813a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800813c:	4b17      	ldr	r3, [pc, #92]	; (800819c <RCCEx_PLL2_Config+0x12c>)
 800813e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008140:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008144:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	6a12      	ldr	r2, [r2, #32]
 800814c:	00d2      	lsls	r2, r2, #3
 800814e:	4913      	ldr	r1, [pc, #76]	; (800819c <RCCEx_PLL2_Config+0x12c>)
 8008150:	4313      	orrs	r3, r2
 8008152:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8008154:	4b11      	ldr	r3, [pc, #68]	; (800819c <RCCEx_PLL2_Config+0x12c>)
 8008156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008158:	4a10      	ldr	r2, [pc, #64]	; (800819c <RCCEx_PLL2_Config+0x12c>)
 800815a:	f043 0310 	orr.w	r3, r3, #16
 800815e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8008160:	4b0e      	ldr	r3, [pc, #56]	; (800819c <RCCEx_PLL2_Config+0x12c>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a0d      	ldr	r2, [pc, #52]	; (800819c <RCCEx_PLL2_Config+0x12c>)
 8008166:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800816a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800816c:	f7f9 fe4e 	bl	8001e0c <HAL_GetTick>
 8008170:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008172:	e008      	b.n	8008186 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008174:	f7f9 fe4a 	bl	8001e0c <HAL_GetTick>
 8008178:	4602      	mov	r2, r0
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	2b02      	cmp	r3, #2
 8008180:	d901      	bls.n	8008186 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008182:	2303      	movs	r3, #3
 8008184:	e006      	b.n	8008194 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008186:	4b05      	ldr	r3, [pc, #20]	; (800819c <RCCEx_PLL2_Config+0x12c>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800818e:	2b00      	cmp	r3, #0
 8008190:	d0f0      	beq.n	8008174 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8008192:	2300      	movs	r3, #0

}
 8008194:	4618      	mov	r0, r3
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	44020c00 	.word	0x44020c00

080081a0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80081a8:	4b48      	ldr	r3, [pc, #288]	; (80082cc <RCCEx_PLL3_Config+0x12c>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a47      	ldr	r2, [pc, #284]	; (80082cc <RCCEx_PLL3_Config+0x12c>)
 80081ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081b2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80081b4:	f7f9 fe2a 	bl	8001e0c <HAL_GetTick>
 80081b8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80081ba:	e008      	b.n	80081ce <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80081bc:	f7f9 fe26 	bl	8001e0c <HAL_GetTick>
 80081c0:	4602      	mov	r2, r0
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d901      	bls.n	80081ce <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e07a      	b.n	80082c4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80081ce:	4b3f      	ldr	r3, [pc, #252]	; (80082cc <RCCEx_PLL3_Config+0x12c>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1f0      	bne.n	80081bc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80081da:	4b3c      	ldr	r3, [pc, #240]	; (80082cc <RCCEx_PLL3_Config+0x12c>)
 80081dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80081e2:	f023 0303 	bic.w	r3, r3, #3
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	6811      	ldr	r1, [r2, #0]
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	6852      	ldr	r2, [r2, #4]
 80081ee:	0212      	lsls	r2, r2, #8
 80081f0:	430a      	orrs	r2, r1
 80081f2:	4936      	ldr	r1, [pc, #216]	; (80082cc <RCCEx_PLL3_Config+0x12c>)
 80081f4:	4313      	orrs	r3, r2
 80081f6:	630b      	str	r3, [r1, #48]	; 0x30
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	3b01      	subs	r3, #1
 80081fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	3b01      	subs	r3, #1
 8008208:	025b      	lsls	r3, r3, #9
 800820a:	b29b      	uxth	r3, r3
 800820c:	431a      	orrs	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	3b01      	subs	r3, #1
 8008214:	041b      	lsls	r3, r3, #16
 8008216:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800821a:	431a      	orrs	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	3b01      	subs	r3, #1
 8008222:	061b      	lsls	r3, r3, #24
 8008224:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008228:	4928      	ldr	r1, [pc, #160]	; (80082cc <RCCEx_PLL3_Config+0x12c>)
 800822a:	4313      	orrs	r3, r2
 800822c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800822e:	4b27      	ldr	r3, [pc, #156]	; (80082cc <RCCEx_PLL3_Config+0x12c>)
 8008230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008232:	f023 020c 	bic.w	r2, r3, #12
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	4924      	ldr	r1, [pc, #144]	; (80082cc <RCCEx_PLL3_Config+0x12c>)
 800823c:	4313      	orrs	r3, r2
 800823e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8008240:	4b22      	ldr	r3, [pc, #136]	; (80082cc <RCCEx_PLL3_Config+0x12c>)
 8008242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008244:	f023 0220 	bic.w	r2, r3, #32
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	491f      	ldr	r1, [pc, #124]	; (80082cc <RCCEx_PLL3_Config+0x12c>)
 800824e:	4313      	orrs	r3, r2
 8008250:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008252:	4b1e      	ldr	r3, [pc, #120]	; (80082cc <RCCEx_PLL3_Config+0x12c>)
 8008254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	491c      	ldr	r1, [pc, #112]	; (80082cc <RCCEx_PLL3_Config+0x12c>)
 800825c:	4313      	orrs	r3, r2
 800825e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8008260:	4b1a      	ldr	r3, [pc, #104]	; (80082cc <RCCEx_PLL3_Config+0x12c>)
 8008262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008264:	4a19      	ldr	r2, [pc, #100]	; (80082cc <RCCEx_PLL3_Config+0x12c>)
 8008266:	f023 0310 	bic.w	r3, r3, #16
 800826a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800826c:	4b17      	ldr	r3, [pc, #92]	; (80082cc <RCCEx_PLL3_Config+0x12c>)
 800826e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008270:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008274:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	6a12      	ldr	r2, [r2, #32]
 800827c:	00d2      	lsls	r2, r2, #3
 800827e:	4913      	ldr	r1, [pc, #76]	; (80082cc <RCCEx_PLL3_Config+0x12c>)
 8008280:	4313      	orrs	r3, r2
 8008282:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8008284:	4b11      	ldr	r3, [pc, #68]	; (80082cc <RCCEx_PLL3_Config+0x12c>)
 8008286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008288:	4a10      	ldr	r2, [pc, #64]	; (80082cc <RCCEx_PLL3_Config+0x12c>)
 800828a:	f043 0310 	orr.w	r3, r3, #16
 800828e:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8008290:	4b0e      	ldr	r3, [pc, #56]	; (80082cc <RCCEx_PLL3_Config+0x12c>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a0d      	ldr	r2, [pc, #52]	; (80082cc <RCCEx_PLL3_Config+0x12c>)
 8008296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800829a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800829c:	f7f9 fdb6 	bl	8001e0c <HAL_GetTick>
 80082a0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80082a2:	e008      	b.n	80082b6 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80082a4:	f7f9 fdb2 	bl	8001e0c <HAL_GetTick>
 80082a8:	4602      	mov	r2, r0
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d901      	bls.n	80082b6 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e006      	b.n	80082c4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80082b6:	4b05      	ldr	r3, [pc, #20]	; (80082cc <RCCEx_PLL3_Config+0x12c>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d0f0      	beq.n	80082a4 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	44020c00 	.word	0x44020c00

080082d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d101      	bne.n	80082e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e042      	b.n	8008368 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d106      	bne.n	80082fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7f9 fbf5 	bl	8001ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2224      	movs	r2, #36	; 0x24
 80082fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f022 0201 	bic.w	r2, r2, #1
 8008310:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008316:	2b00      	cmp	r3, #0
 8008318:	d002      	beq.n	8008320 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fab4 	bl	8008888 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f8c3 	bl	80084ac <UART_SetConfig>
 8008326:	4603      	mov	r3, r0
 8008328:	2b01      	cmp	r3, #1
 800832a:	d101      	bne.n	8008330 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e01b      	b.n	8008368 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	685a      	ldr	r2, [r3, #4]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800833e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	689a      	ldr	r2, [r3, #8]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800834e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f042 0201 	orr.w	r2, r2, #1
 800835e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fb33 	bl	80089cc <UART_CheckIdleState>
 8008366:	4603      	mov	r3, r0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b08a      	sub	sp, #40	; 0x28
 8008374:	af02      	add	r7, sp, #8
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	603b      	str	r3, [r7, #0]
 800837c:	4613      	mov	r3, r2
 800837e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008386:	2b20      	cmp	r3, #32
 8008388:	f040 808b 	bne.w	80084a2 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d002      	beq.n	8008398 <HAL_UART_Transmit+0x28>
 8008392:	88fb      	ldrh	r3, [r7, #6]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d101      	bne.n	800839c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e083      	b.n	80084a4 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083a6:	2b80      	cmp	r3, #128	; 0x80
 80083a8:	d107      	bne.n	80083ba <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	689a      	ldr	r2, [r3, #8]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083b8:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2221      	movs	r2, #33	; 0x21
 80083c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80083ca:	f7f9 fd1f 	bl	8001e0c <HAL_GetTick>
 80083ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	88fa      	ldrh	r2, [r7, #6]
 80083d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	88fa      	ldrh	r2, [r7, #6]
 80083dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083e8:	d108      	bne.n	80083fc <HAL_UART_Transmit+0x8c>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d104      	bne.n	80083fc <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80083f2:	2300      	movs	r3, #0
 80083f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	61bb      	str	r3, [r7, #24]
 80083fa:	e003      	b.n	8008404 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008400:	2300      	movs	r3, #0
 8008402:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008404:	e030      	b.n	8008468 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	2200      	movs	r2, #0
 800840e:	2180      	movs	r1, #128	; 0x80
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f000 fb85 	bl	8008b20 <UART_WaitOnFlagUntilTimeout>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d005      	beq.n	8008428 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2220      	movs	r2, #32
 8008420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	e03d      	b.n	80084a4 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d10b      	bne.n	8008446 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	881b      	ldrh	r3, [r3, #0]
 8008432:	461a      	mov	r2, r3
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800843c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	3302      	adds	r3, #2
 8008442:	61bb      	str	r3, [r7, #24]
 8008444:	e007      	b.n	8008456 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	781a      	ldrb	r2, [r3, #0]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	3301      	adds	r3, #1
 8008454:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800845c:	b29b      	uxth	r3, r3
 800845e:	3b01      	subs	r3, #1
 8008460:	b29a      	uxth	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800846e:	b29b      	uxth	r3, r3
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1c8      	bne.n	8008406 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	2200      	movs	r2, #0
 800847c:	2140      	movs	r1, #64	; 0x40
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f000 fb4e 	bl	8008b20 <UART_WaitOnFlagUntilTimeout>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d005      	beq.n	8008496 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2220      	movs	r2, #32
 800848e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e006      	b.n	80084a4 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2220      	movs	r2, #32
 800849a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	e000      	b.n	80084a4 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80084a2:	2302      	movs	r3, #2
  }
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3720      	adds	r7, #32
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084b0:	b094      	sub	sp, #80	; 0x50
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80084bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	4b78      	ldr	r3, [pc, #480]	; (80086a4 <UART_SetConfig+0x1f8>)
 80084c2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c6:	689a      	ldr	r2, [r3, #8]
 80084c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	431a      	orrs	r2, r3
 80084ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	431a      	orrs	r2, r3
 80084d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d6:	69db      	ldr	r3, [r3, #28]
 80084d8:	4313      	orrs	r3, r2
 80084da:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4971      	ldr	r1, [pc, #452]	; (80086a8 <UART_SetConfig+0x1fc>)
 80084e4:	4019      	ands	r1, r3
 80084e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084ec:	430b      	orrs	r3, r1
 80084ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80084fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fc:	68d9      	ldr	r1, [r3, #12]
 80084fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	ea40 0301 	orr.w	r3, r0, r1
 8008506:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800850e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	4b64      	ldr	r3, [pc, #400]	; (80086a4 <UART_SetConfig+0x1f8>)
 8008514:	429a      	cmp	r2, r3
 8008516:	d009      	beq.n	800852c <UART_SetConfig+0x80>
 8008518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	4b63      	ldr	r3, [pc, #396]	; (80086ac <UART_SetConfig+0x200>)
 800851e:	429a      	cmp	r2, r3
 8008520:	d004      	beq.n	800852c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008524:	6a1a      	ldr	r2, [r3, #32]
 8008526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008528:	4313      	orrs	r3, r2
 800852a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800852c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8008536:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800853a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008540:	430b      	orrs	r3, r1
 8008542:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854a:	f023 000f 	bic.w	r0, r3, #15
 800854e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008550:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	ea40 0301 	orr.w	r3, r0, r1
 800855a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800855c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	4b53      	ldr	r3, [pc, #332]	; (80086b0 <UART_SetConfig+0x204>)
 8008562:	429a      	cmp	r2, r3
 8008564:	d102      	bne.n	800856c <UART_SetConfig+0xc0>
 8008566:	2301      	movs	r3, #1
 8008568:	64bb      	str	r3, [r7, #72]	; 0x48
 800856a:	e066      	b.n	800863a <UART_SetConfig+0x18e>
 800856c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	4b50      	ldr	r3, [pc, #320]	; (80086b4 <UART_SetConfig+0x208>)
 8008572:	429a      	cmp	r2, r3
 8008574:	d102      	bne.n	800857c <UART_SetConfig+0xd0>
 8008576:	2302      	movs	r3, #2
 8008578:	64bb      	str	r3, [r7, #72]	; 0x48
 800857a:	e05e      	b.n	800863a <UART_SetConfig+0x18e>
 800857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	4b4d      	ldr	r3, [pc, #308]	; (80086b8 <UART_SetConfig+0x20c>)
 8008582:	429a      	cmp	r2, r3
 8008584:	d102      	bne.n	800858c <UART_SetConfig+0xe0>
 8008586:	2304      	movs	r3, #4
 8008588:	64bb      	str	r3, [r7, #72]	; 0x48
 800858a:	e056      	b.n	800863a <UART_SetConfig+0x18e>
 800858c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	4b4a      	ldr	r3, [pc, #296]	; (80086bc <UART_SetConfig+0x210>)
 8008592:	429a      	cmp	r2, r3
 8008594:	d102      	bne.n	800859c <UART_SetConfig+0xf0>
 8008596:	2308      	movs	r3, #8
 8008598:	64bb      	str	r3, [r7, #72]	; 0x48
 800859a:	e04e      	b.n	800863a <UART_SetConfig+0x18e>
 800859c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	4b47      	ldr	r3, [pc, #284]	; (80086c0 <UART_SetConfig+0x214>)
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d102      	bne.n	80085ac <UART_SetConfig+0x100>
 80085a6:	2310      	movs	r3, #16
 80085a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80085aa:	e046      	b.n	800863a <UART_SetConfig+0x18e>
 80085ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	4b44      	ldr	r3, [pc, #272]	; (80086c4 <UART_SetConfig+0x218>)
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d102      	bne.n	80085bc <UART_SetConfig+0x110>
 80085b6:	2320      	movs	r3, #32
 80085b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80085ba:	e03e      	b.n	800863a <UART_SetConfig+0x18e>
 80085bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	4b41      	ldr	r3, [pc, #260]	; (80086c8 <UART_SetConfig+0x21c>)
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d102      	bne.n	80085cc <UART_SetConfig+0x120>
 80085c6:	2340      	movs	r3, #64	; 0x40
 80085c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80085ca:	e036      	b.n	800863a <UART_SetConfig+0x18e>
 80085cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	4b3e      	ldr	r3, [pc, #248]	; (80086cc <UART_SetConfig+0x220>)
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d102      	bne.n	80085dc <UART_SetConfig+0x130>
 80085d6:	2380      	movs	r3, #128	; 0x80
 80085d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80085da:	e02e      	b.n	800863a <UART_SetConfig+0x18e>
 80085dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	4b3b      	ldr	r3, [pc, #236]	; (80086d0 <UART_SetConfig+0x224>)
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d103      	bne.n	80085ee <UART_SetConfig+0x142>
 80085e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80085ec:	e025      	b.n	800863a <UART_SetConfig+0x18e>
 80085ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	4b38      	ldr	r3, [pc, #224]	; (80086d4 <UART_SetConfig+0x228>)
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d103      	bne.n	8008600 <UART_SetConfig+0x154>
 80085f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80085fe:	e01c      	b.n	800863a <UART_SetConfig+0x18e>
 8008600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	4b34      	ldr	r3, [pc, #208]	; (80086d8 <UART_SetConfig+0x22c>)
 8008606:	429a      	cmp	r2, r3
 8008608:	d103      	bne.n	8008612 <UART_SetConfig+0x166>
 800860a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800860e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008610:	e013      	b.n	800863a <UART_SetConfig+0x18e>
 8008612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	4b31      	ldr	r3, [pc, #196]	; (80086dc <UART_SetConfig+0x230>)
 8008618:	429a      	cmp	r2, r3
 800861a:	d103      	bne.n	8008624 <UART_SetConfig+0x178>
 800861c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008620:	64bb      	str	r3, [r7, #72]	; 0x48
 8008622:	e00a      	b.n	800863a <UART_SetConfig+0x18e>
 8008624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	4b1e      	ldr	r3, [pc, #120]	; (80086a4 <UART_SetConfig+0x1f8>)
 800862a:	429a      	cmp	r2, r3
 800862c:	d103      	bne.n	8008636 <UART_SetConfig+0x18a>
 800862e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008632:	64bb      	str	r3, [r7, #72]	; 0x48
 8008634:	e001      	b.n	800863a <UART_SetConfig+0x18e>
 8008636:	2300      	movs	r3, #0
 8008638:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800863a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	4b19      	ldr	r3, [pc, #100]	; (80086a4 <UART_SetConfig+0x1f8>)
 8008640:	429a      	cmp	r2, r3
 8008642:	d005      	beq.n	8008650 <UART_SetConfig+0x1a4>
 8008644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	4b18      	ldr	r3, [pc, #96]	; (80086ac <UART_SetConfig+0x200>)
 800864a:	429a      	cmp	r2, r3
 800864c:	f040 8094 	bne.w	8008778 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008652:	2200      	movs	r2, #0
 8008654:	623b      	str	r3, [r7, #32]
 8008656:	627a      	str	r2, [r7, #36]	; 0x24
 8008658:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800865c:	f7fd f9ae 	bl	80059bc <HAL_RCCEx_GetPeriphCLKFreq>
 8008660:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 80f7 	beq.w	8008858 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800866a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866e:	4a1c      	ldr	r2, [pc, #112]	; (80086e0 <UART_SetConfig+0x234>)
 8008670:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008674:	461a      	mov	r2, r3
 8008676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008678:	fbb3 f3f2 	udiv	r3, r3, r2
 800867c:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800867e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008680:	685a      	ldr	r2, [r3, #4]
 8008682:	4613      	mov	r3, r2
 8008684:	005b      	lsls	r3, r3, #1
 8008686:	4413      	add	r3, r2
 8008688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800868a:	429a      	cmp	r2, r3
 800868c:	d305      	bcc.n	800869a <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008694:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008696:	429a      	cmp	r2, r3
 8008698:	d924      	bls.n	80086e4 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80086a0:	e069      	b.n	8008776 <UART_SetConfig+0x2ca>
 80086a2:	bf00      	nop
 80086a4:	44002400 	.word	0x44002400
 80086a8:	cfff69f3 	.word	0xcfff69f3
 80086ac:	54002400 	.word	0x54002400
 80086b0:	40013800 	.word	0x40013800
 80086b4:	40004400 	.word	0x40004400
 80086b8:	40004800 	.word	0x40004800
 80086bc:	40004c00 	.word	0x40004c00
 80086c0:	40005000 	.word	0x40005000
 80086c4:	40006400 	.word	0x40006400
 80086c8:	40007800 	.word	0x40007800
 80086cc:	40007c00 	.word	0x40007c00
 80086d0:	40008000 	.word	0x40008000
 80086d4:	40006800 	.word	0x40006800
 80086d8:	40006c00 	.word	0x40006c00
 80086dc:	40008400 	.word	0x40008400
 80086e0:	0801f648 	.word	0x0801f648
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086e6:	2200      	movs	r2, #0
 80086e8:	61bb      	str	r3, [r7, #24]
 80086ea:	61fa      	str	r2, [r7, #28]
 80086ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f0:	4a64      	ldr	r2, [pc, #400]	; (8008884 <UART_SetConfig+0x3d8>)
 80086f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	2200      	movs	r2, #0
 80086fa:	613b      	str	r3, [r7, #16]
 80086fc:	617a      	str	r2, [r7, #20]
 80086fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008702:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008706:	f7f8 fa99 	bl	8000c3c <__aeabi_uldivmod>
 800870a:	4602      	mov	r2, r0
 800870c:	460b      	mov	r3, r1
 800870e:	4610      	mov	r0, r2
 8008710:	4619      	mov	r1, r3
 8008712:	f04f 0200 	mov.w	r2, #0
 8008716:	f04f 0300 	mov.w	r3, #0
 800871a:	020b      	lsls	r3, r1, #8
 800871c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008720:	0202      	lsls	r2, r0, #8
 8008722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008724:	6849      	ldr	r1, [r1, #4]
 8008726:	0849      	lsrs	r1, r1, #1
 8008728:	2000      	movs	r0, #0
 800872a:	460c      	mov	r4, r1
 800872c:	4605      	mov	r5, r0
 800872e:	eb12 0804 	adds.w	r8, r2, r4
 8008732:	eb43 0905 	adc.w	r9, r3, r5
 8008736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	60bb      	str	r3, [r7, #8]
 800873e:	60fa      	str	r2, [r7, #12]
 8008740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008744:	4640      	mov	r0, r8
 8008746:	4649      	mov	r1, r9
 8008748:	f7f8 fa78 	bl	8000c3c <__aeabi_uldivmod>
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	4613      	mov	r3, r2
 8008752:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800875a:	d308      	bcc.n	800876e <UART_SetConfig+0x2c2>
 800875c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800875e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008762:	d204      	bcs.n	800876e <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8008764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800876a:	60da      	str	r2, [r3, #12]
 800876c:	e003      	b.n	8008776 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8008774:	e070      	b.n	8008858 <UART_SetConfig+0x3ac>
 8008776:	e06f      	b.n	8008858 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877a:	69db      	ldr	r3, [r3, #28]
 800877c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008780:	d13c      	bne.n	80087fc <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008784:	2200      	movs	r2, #0
 8008786:	603b      	str	r3, [r7, #0]
 8008788:	607a      	str	r2, [r7, #4]
 800878a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800878e:	f7fd f915 	bl	80059bc <HAL_RCCEx_GetPeriphCLKFreq>
 8008792:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008796:	2b00      	cmp	r3, #0
 8008798:	d05e      	beq.n	8008858 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800879a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879e:	4a39      	ldr	r2, [pc, #228]	; (8008884 <UART_SetConfig+0x3d8>)
 80087a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087a4:	461a      	mov	r2, r3
 80087a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80087ac:	005a      	lsls	r2, r3, #1
 80087ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	085b      	lsrs	r3, r3, #1
 80087b4:	441a      	add	r2, r3
 80087b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80087be:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087c2:	2b0f      	cmp	r3, #15
 80087c4:	d916      	bls.n	80087f4 <UART_SetConfig+0x348>
 80087c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087cc:	d212      	bcs.n	80087f4 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	f023 030f 	bic.w	r3, r3, #15
 80087d6:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087da:	085b      	lsrs	r3, r3, #1
 80087dc:	b29b      	uxth	r3, r3
 80087de:	f003 0307 	and.w	r3, r3, #7
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80087e6:	4313      	orrs	r3, r2
 80087e8:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 80087ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80087f0:	60da      	str	r2, [r3, #12]
 80087f2:	e031      	b.n	8008858 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80087fa:	e02d      	b.n	8008858 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80087fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087fe:	2200      	movs	r2, #0
 8008800:	469a      	mov	sl, r3
 8008802:	4693      	mov	fp, r2
 8008804:	4650      	mov	r0, sl
 8008806:	4659      	mov	r1, fp
 8008808:	f7fd f8d8 	bl	80059bc <HAL_RCCEx_GetPeriphCLKFreq>
 800880c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800880e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008810:	2b00      	cmp	r3, #0
 8008812:	d021      	beq.n	8008858 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	4a1a      	ldr	r2, [pc, #104]	; (8008884 <UART_SetConfig+0x3d8>)
 800881a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800881e:	461a      	mov	r2, r3
 8008820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008822:	fbb3 f2f2 	udiv	r2, r3, r2
 8008826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	085b      	lsrs	r3, r3, #1
 800882c:	441a      	add	r2, r3
 800882e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	fbb2 f3f3 	udiv	r3, r2, r3
 8008836:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800883a:	2b0f      	cmp	r3, #15
 800883c:	d909      	bls.n	8008852 <UART_SetConfig+0x3a6>
 800883e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008844:	d205      	bcs.n	8008852 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008848:	b29a      	uxth	r2, r3
 800884a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	60da      	str	r2, [r3, #12]
 8008850:	e002      	b.n	8008858 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885a:	2201      	movs	r2, #1
 800885c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008862:	2201      	movs	r2, #1
 8008864:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886a:	2200      	movs	r2, #0
 800886c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800886e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008870:	2200      	movs	r2, #0
 8008872:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008874:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008878:	4618      	mov	r0, r3
 800887a:	3750      	adds	r7, #80	; 0x50
 800887c:	46bd      	mov	sp, r7
 800887e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008882:	bf00      	nop
 8008884:	0801f648 	.word	0x0801f648

08008888 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008894:	f003 0308 	and.w	r3, r3, #8
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00a      	beq.n	80088b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	430a      	orrs	r2, r1
 80088b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b6:	f003 0301 	and.w	r3, r3, #1
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00a      	beq.n	80088d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	430a      	orrs	r2, r1
 80088d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d8:	f003 0302 	and.w	r3, r3, #2
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00a      	beq.n	80088f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	430a      	orrs	r2, r1
 80088f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fa:	f003 0304 	and.w	r3, r3, #4
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00a      	beq.n	8008918 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	430a      	orrs	r2, r1
 8008916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891c:	f003 0310 	and.w	r3, r3, #16
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00a      	beq.n	800893a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	430a      	orrs	r2, r1
 8008938:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893e:	f003 0320 	and.w	r3, r3, #32
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00a      	beq.n	800895c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	430a      	orrs	r2, r1
 800895a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008964:	2b00      	cmp	r3, #0
 8008966:	d01a      	beq.n	800899e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	430a      	orrs	r2, r1
 800897c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008986:	d10a      	bne.n	800899e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00a      	beq.n	80089c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	430a      	orrs	r2, r1
 80089be:	605a      	str	r2, [r3, #4]
  }
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b098      	sub	sp, #96	; 0x60
 80089d0:	af02      	add	r7, sp, #8
 80089d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089dc:	f7f9 fa16 	bl	8001e0c <HAL_GetTick>
 80089e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0308 	and.w	r3, r3, #8
 80089ec:	2b08      	cmp	r3, #8
 80089ee:	d12f      	bne.n	8008a50 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089f4:	9300      	str	r3, [sp, #0]
 80089f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089f8:	2200      	movs	r2, #0
 80089fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f88e 	bl	8008b20 <UART_WaitOnFlagUntilTimeout>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d022      	beq.n	8008a50 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a12:	e853 3f00 	ldrex	r3, [r3]
 8008a16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a1e:	653b      	str	r3, [r7, #80]	; 0x50
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	461a      	mov	r2, r3
 8008a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a28:	647b      	str	r3, [r7, #68]	; 0x44
 8008a2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a30:	e841 2300 	strex	r3, r2, [r1]
 8008a34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1e6      	bne.n	8008a0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2220      	movs	r2, #32
 8008a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	e063      	b.n	8008b18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 0304 	and.w	r3, r3, #4
 8008a5a:	2b04      	cmp	r3, #4
 8008a5c:	d149      	bne.n	8008af2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a66:	2200      	movs	r2, #0
 8008a68:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f857 	bl	8008b20 <UART_WaitOnFlagUntilTimeout>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d03c      	beq.n	8008af2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	e853 3f00 	ldrex	r3, [r3]
 8008a84:	623b      	str	r3, [r7, #32]
   return(result);
 8008a86:	6a3b      	ldr	r3, [r7, #32]
 8008a88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	461a      	mov	r2, r3
 8008a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a96:	633b      	str	r3, [r7, #48]	; 0x30
 8008a98:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a9e:	e841 2300 	strex	r3, r2, [r1]
 8008aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d1e6      	bne.n	8008a78 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	3308      	adds	r3, #8
 8008ab0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	e853 3f00 	ldrex	r3, [r3]
 8008ab8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f023 0301 	bic.w	r3, r3, #1
 8008ac0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	3308      	adds	r3, #8
 8008ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008aca:	61fa      	str	r2, [r7, #28]
 8008acc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ace:	69b9      	ldr	r1, [r7, #24]
 8008ad0:	69fa      	ldr	r2, [r7, #28]
 8008ad2:	e841 2300 	strex	r3, r2, [r1]
 8008ad6:	617b      	str	r3, [r7, #20]
   return(result);
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1e5      	bne.n	8008aaa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2220      	movs	r2, #32
 8008ae2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008aee:	2303      	movs	r3, #3
 8008af0:	e012      	b.n	8008b18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2220      	movs	r2, #32
 8008af6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2220      	movs	r2, #32
 8008afe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3758      	adds	r7, #88	; 0x58
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	603b      	str	r3, [r7, #0]
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b30:	e049      	b.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b38:	d045      	beq.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b3a:	f7f9 f967 	bl	8001e0c <HAL_GetTick>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	69ba      	ldr	r2, [r7, #24]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d302      	bcc.n	8008b50 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d101      	bne.n	8008b54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b50:	2303      	movs	r3, #3
 8008b52:	e048      	b.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 0304 	and.w	r3, r3, #4
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d031      	beq.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	69db      	ldr	r3, [r3, #28]
 8008b68:	f003 0308 	and.w	r3, r3, #8
 8008b6c:	2b08      	cmp	r3, #8
 8008b6e:	d110      	bne.n	8008b92 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2208      	movs	r2, #8
 8008b76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f000 f838 	bl	8008bee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2208      	movs	r2, #8
 8008b82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e029      	b.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	69db      	ldr	r3, [r3, #28]
 8008b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ba0:	d111      	bne.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008baa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f000 f81e 	bl	8008bee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2220      	movs	r2, #32
 8008bb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	e00f      	b.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	69da      	ldr	r2, [r3, #28]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	4013      	ands	r3, r2
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	bf0c      	ite	eq
 8008bd6:	2301      	moveq	r3, #1
 8008bd8:	2300      	movne	r3, #0
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	461a      	mov	r2, r3
 8008bde:	79fb      	ldrb	r3, [r7, #7]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d0a6      	beq.n	8008b32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b095      	sub	sp, #84	; 0x54
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bfe:	e853 3f00 	ldrex	r3, [r3]
 8008c02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	461a      	mov	r2, r3
 8008c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c14:	643b      	str	r3, [r7, #64]	; 0x40
 8008c16:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c1c:	e841 2300 	strex	r3, r2, [r1]
 8008c20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d1e6      	bne.n	8008bf6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3308      	adds	r3, #8
 8008c2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c30:	6a3b      	ldr	r3, [r7, #32]
 8008c32:	e853 3f00 	ldrex	r3, [r3]
 8008c36:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c3e:	f023 0301 	bic.w	r3, r3, #1
 8008c42:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	3308      	adds	r3, #8
 8008c4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c54:	e841 2300 	strex	r3, r2, [r1]
 8008c58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1e3      	bne.n	8008c28 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d118      	bne.n	8008c9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	e853 3f00 	ldrex	r3, [r3]
 8008c74:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	f023 0310 	bic.w	r3, r3, #16
 8008c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	461a      	mov	r2, r3
 8008c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c86:	61bb      	str	r3, [r7, #24]
 8008c88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8a:	6979      	ldr	r1, [r7, #20]
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	e841 2300 	strex	r3, r2, [r1]
 8008c92:	613b      	str	r3, [r7, #16]
   return(result);
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1e6      	bne.n	8008c68 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2220      	movs	r2, #32
 8008c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008cae:	bf00      	nop
 8008cb0:	3754      	adds	r7, #84	; 0x54
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008cba:	b480      	push	{r7}
 8008cbc:	b085      	sub	sp, #20
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d101      	bne.n	8008cd0 <HAL_UARTEx_DisableFifoMode+0x16>
 8008ccc:	2302      	movs	r3, #2
 8008cce:	e027      	b.n	8008d20 <HAL_UARTEx_DisableFifoMode+0x66>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2224      	movs	r2, #36	; 0x24
 8008cdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f022 0201 	bic.w	r2, r2, #1
 8008cf6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008cfe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2220      	movs	r2, #32
 8008d12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d101      	bne.n	8008d44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d40:	2302      	movs	r3, #2
 8008d42:	e02d      	b.n	8008da0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2224      	movs	r2, #36	; 0x24
 8008d50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f022 0201 	bic.w	r2, r2, #1
 8008d6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	683a      	ldr	r2, [r7, #0]
 8008d7c:	430a      	orrs	r2, r1
 8008d7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f84f 	bl	8008e24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2220      	movs	r2, #32
 8008d92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d101      	bne.n	8008dc0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	e02d      	b.n	8008e1c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2224      	movs	r2, #36	; 0x24
 8008dcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f022 0201 	bic.w	r2, r2, #1
 8008de6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	683a      	ldr	r2, [r7, #0]
 8008df8:	430a      	orrs	r2, r1
 8008dfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f811 	bl	8008e24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2220      	movs	r2, #32
 8008e0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d108      	bne.n	8008e46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e44:	e031      	b.n	8008eaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e46:	2308      	movs	r3, #8
 8008e48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e4a:	2308      	movs	r3, #8
 8008e4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	0e5b      	lsrs	r3, r3, #25
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	f003 0307 	and.w	r3, r3, #7
 8008e5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	0f5b      	lsrs	r3, r3, #29
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	f003 0307 	and.w	r3, r3, #7
 8008e6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e6e:	7bbb      	ldrb	r3, [r7, #14]
 8008e70:	7b3a      	ldrb	r2, [r7, #12]
 8008e72:	4911      	ldr	r1, [pc, #68]	; (8008eb8 <UARTEx_SetNbDataToProcess+0x94>)
 8008e74:	5c8a      	ldrb	r2, [r1, r2]
 8008e76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e7a:	7b3a      	ldrb	r2, [r7, #12]
 8008e7c:	490f      	ldr	r1, [pc, #60]	; (8008ebc <UARTEx_SetNbDataToProcess+0x98>)
 8008e7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e80:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e8c:	7bfb      	ldrb	r3, [r7, #15]
 8008e8e:	7b7a      	ldrb	r2, [r7, #13]
 8008e90:	4909      	ldr	r1, [pc, #36]	; (8008eb8 <UARTEx_SetNbDataToProcess+0x94>)
 8008e92:	5c8a      	ldrb	r2, [r1, r2]
 8008e94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e98:	7b7a      	ldrb	r2, [r7, #13]
 8008e9a:	4908      	ldr	r1, [pc, #32]	; (8008ebc <UARTEx_SetNbDataToProcess+0x98>)
 8008e9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008eaa:	bf00      	nop
 8008eac:	3714      	adds	r7, #20
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	0801f660 	.word	0x0801f660
 8008ebc:	0801f668 	.word	0x0801f668

08008ec0 <neai_classification_init>:
 8008ec0:	4b6e      	ldr	r3, [pc, #440]	; (800907c <neai_classification_init+0x1bc>)
 8008ec2:	881b      	ldrh	r3, [r3, #0]
 8008ec4:	2ba5      	cmp	r3, #165	; 0xa5
 8008ec6:	f040 80d3 	bne.w	8009070 <neai_classification_init+0x1b0>
 8008eca:	ed90 7a01 	vldr	s14, [r0, #4]
 8008ece:	edd0 7a00 	vldr	s15, [r0]
 8008ed2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008ed6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eda:	ee17 1a10 	vmov	r1, s14
 8008ede:	ee17 3a90 	vmov	r3, s15
 8008ee2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee6:	1c8e      	adds	r6, r1, #2
 8008ee8:	eb06 0443 	add.w	r4, r6, r3, lsl #1
 8008eec:	191d      	adds	r5, r3, r4
 8008eee:	195a      	adds	r2, r3, r5
 8008ef0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008ef4:	ed92 7a00 	vldr	s14, [r2]
 8008ef8:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8008efc:	eeb4 7a67 	vcmp.f32	s14, s15
 8008f00:	2710      	movs	r7, #16
 8008f02:	f44f 2900 	mov.w	r9, #524288	; 0x80000
 8008f06:	f04f 0818 	mov.w	r8, #24
 8008f0a:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8008f0e:	f04f 0c20 	mov.w	ip, #32
 8008f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f16:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 80090b8 <neai_classification_init+0x1f8>
 8008f1a:	440b      	add	r3, r1
 8008f1c:	f103 0302 	add.w	r3, r3, #2
 8008f20:	f8ca 1000 	str.w	r1, [sl]
 8008f24:	4956      	ldr	r1, [pc, #344]	; (8009080 <neai_classification_init+0x1c0>)
 8008f26:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008f2a:	600b      	str	r3, [r1, #0]
 8008f2c:	4b55      	ldr	r3, [pc, #340]	; (8009084 <neai_classification_init+0x1c4>)
 8008f2e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8008f32:	601e      	str	r6, [r3, #0]
 8008f34:	4b54      	ldr	r3, [pc, #336]	; (8009088 <neai_classification_init+0x1c8>)
 8008f36:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8008f3a:	601a      	str	r2, [r3, #0]
 8008f3c:	4b53      	ldr	r3, [pc, #332]	; (800908c <neai_classification_init+0x1cc>)
 8008f3e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8008f42:	601d      	str	r5, [r3, #0]
 8008f44:	4b52      	ldr	r3, [pc, #328]	; (8009090 <neai_classification_init+0x1d0>)
 8008f46:	f100 0008 	add.w	r0, r0, #8
 8008f4a:	601c      	str	r4, [r3, #0]
 8008f4c:	4b51      	ldr	r3, [pc, #324]	; (8009094 <neai_classification_init+0x1d4>)
 8008f4e:	4952      	ldr	r1, [pc, #328]	; (8009098 <neai_classification_init+0x1d8>)
 8008f50:	6018      	str	r0, [r3, #0]
 8008f52:	4b52      	ldr	r3, [pc, #328]	; (800909c <neai_classification_init+0x1dc>)
 8008f54:	800f      	strh	r7, [r1, #0]
 8008f56:	809f      	strh	r7, [r3, #4]
 8008f58:	f8c3 9000 	str.w	r9, [r3]
 8008f5c:	4950      	ldr	r1, [pc, #320]	; (80090a0 <neai_classification_init+0x1e0>)
 8008f5e:	4b51      	ldr	r3, [pc, #324]	; (80090a4 <neai_classification_init+0x1e4>)
 8008f60:	f8a1 8000 	strh.w	r8, [r1]
 8008f64:	f8c3 e000 	str.w	lr, [r3]
 8008f68:	f8a3 c004 	strh.w	ip, [r3, #4]
 8008f6c:	d17b      	bne.n	8009066 <neai_classification_init+0x1a6>
 8008f6e:	ed92 7a01 	vldr	s14, [r2, #4]
 8008f72:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8008f76:	eeb4 7a67 	vcmp.f32	s14, s15
 8008f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f7e:	d172      	bne.n	8009066 <neai_classification_init+0x1a6>
 8008f80:	eddf 7a49 	vldr	s15, [pc, #292]	; 80090a8 <neai_classification_init+0x1e8>
 8008f84:	ed92 7a02 	vldr	s14, [r2, #8]
 8008f88:	eeb4 7a67 	vcmp.f32	s14, s15
 8008f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f90:	d169      	bne.n	8009066 <neai_classification_init+0x1a6>
 8008f92:	ed92 7a03 	vldr	s14, [r2, #12]
 8008f96:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008f9a:	eeb4 7a67 	vcmp.f32	s14, s15
 8008f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa2:	d160      	bne.n	8009066 <neai_classification_init+0x1a6>
 8008fa4:	edd2 7a04 	vldr	s15, [r2, #16]
 8008fa8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fb0:	d159      	bne.n	8009066 <neai_classification_init+0x1a6>
 8008fb2:	edd2 7a05 	vldr	s15, [r2, #20]
 8008fb6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fbe:	d152      	bne.n	8009066 <neai_classification_init+0x1a6>
 8008fc0:	ed92 7a06 	vldr	s14, [r2, #24]
 8008fc4:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8008fc8:	eeb4 7a67 	vcmp.f32	s14, s15
 8008fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd0:	d149      	bne.n	8009066 <neai_classification_init+0x1a6>
 8008fd2:	edd2 7a07 	vldr	s15, [r2, #28]
 8008fd6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fde:	d142      	bne.n	8009066 <neai_classification_init+0x1a6>
 8008fe0:	eddf 7a32 	vldr	s15, [pc, #200]	; 80090ac <neai_classification_init+0x1ec>
 8008fe4:	ed92 7a08 	vldr	s14, [r2, #32]
 8008fe8:	eeb4 7a67 	vcmp.f32	s14, s15
 8008fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff0:	d139      	bne.n	8009066 <neai_classification_init+0x1a6>
 8008ff2:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 8008ff6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8008ffa:	eeb4 7a67 	vcmp.f32	s14, s15
 8008ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009002:	d130      	bne.n	8009066 <neai_classification_init+0x1a6>
 8009004:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8009008:	eef5 7a40 	vcmp.f32	s15, #0.0
 800900c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009010:	d129      	bne.n	8009066 <neai_classification_init+0x1a6>
 8009012:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
 8009016:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800901a:	eeb4 7a67 	vcmp.f32	s14, s15
 800901e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009022:	d120      	bne.n	8009066 <neai_classification_init+0x1a6>
 8009024:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8009028:	eef5 7a40 	vcmp.f32	s15, #0.0
 800902c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009030:	d119      	bne.n	8009066 <neai_classification_init+0x1a6>
 8009032:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8009036:	eef5 7a40 	vcmp.f32	s15, #0.0
 800903a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800903e:	d112      	bne.n	8009066 <neai_classification_init+0x1a6>
 8009040:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8009044:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800904c:	d10b      	bne.n	8009066 <neai_classification_init+0x1a6>
 800904e:	eddf 7a18 	vldr	s15, [pc, #96]	; 80090b0 <neai_classification_init+0x1f0>
 8009052:	ed92 7a0f 	vldr	s14, [r2, #60]	; 0x3c
 8009056:	eeb4 7a67 	vcmp.f32	s14, s15
 800905a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800905e:	bf0c      	ite	eq
 8009060:	2000      	moveq	r0, #0
 8009062:	207d      	movne	r0, #125	; 0x7d
 8009064:	e000      	b.n	8009068 <neai_classification_init+0x1a8>
 8009066:	207d      	movs	r0, #125	; 0x7d
 8009068:	4b12      	ldr	r3, [pc, #72]	; (80090b4 <neai_classification_init+0x1f4>)
 800906a:	7018      	strb	r0, [r3, #0]
 800906c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009070:	237c      	movs	r3, #124	; 0x7c
 8009072:	4a10      	ldr	r2, [pc, #64]	; (80090b4 <neai_classification_init+0x1f4>)
 8009074:	4618      	mov	r0, r3
 8009076:	7013      	strb	r3, [r2, #0]
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	08fffff0 	.word	0x08fffff0
 8009080:	20000a54 	.word	0x20000a54
 8009084:	20000a58 	.word	0x20000a58
 8009088:	20000a5c 	.word	0x20000a5c
 800908c:	20000a4c 	.word	0x20000a4c
 8009090:	20000a48 	.word	0x20000a48
 8009094:	20000a40 	.word	0x20000a40
 8009098:	200008ee 	.word	0x200008ee
 800909c:	200008e8 	.word	0x200008e8
 80090a0:	200008f0 	.word	0x200008f0
 80090a4:	200008e0 	.word	0x200008e0
 80090a8:	42480000 	.word	0x42480000
 80090ac:	42680000 	.word	0x42680000
 80090b0:	49742400 	.word	0x49742400
 80090b4:	20000009 	.word	0x20000009
 80090b8:	200008f4 	.word	0x200008f4

080090bc <neai_classification>:
 80090bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c0:	ed2d 8b06 	vpush	{d8-d10}
 80090c4:	4b83      	ldr	r3, [pc, #524]	; (80092d4 <neai_classification+0x218>)
 80090c6:	b08b      	sub	sp, #44	; 0x2c
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	9005      	str	r0, [sp, #20]
 80090cc:	9304      	str	r3, [sp, #16]
 80090ce:	9208      	str	r2, [sp, #32]
 80090d0:	b12b      	cbz	r3, 80090de <neai_classification+0x22>
 80090d2:	9804      	ldr	r0, [sp, #16]
 80090d4:	b00b      	add	sp, #44	; 0x2c
 80090d6:	ecbd 8b06 	vpop	{d8-d10}
 80090da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090de:	4a7e      	ldr	r2, [pc, #504]	; (80092d8 <neai_classification+0x21c>)
 80090e0:	9303      	str	r3, [sp, #12]
 80090e2:	8812      	ldrh	r2, [r2, #0]
 80090e4:	4b7d      	ldr	r3, [pc, #500]	; (80092dc <neai_classification+0x220>)
 80090e6:	f8df b214 	ldr.w	fp, [pc, #532]	; 80092fc <neai_classification+0x240>
 80090ea:	881f      	ldrh	r7, [r3, #0]
 80090ec:	1e53      	subs	r3, r2, #1
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	3301      	adds	r3, #1
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	ed9f 9a7a 	vldr	s18, [pc, #488]	; 80092e0 <neai_classification+0x224>
 80090f8:	eddf 9a7a 	vldr	s19, [pc, #488]	; 80092e4 <neai_classification+0x228>
 80090fc:	ee0a 3a90 	vmov	s21, r3
 8009100:	46d9      	mov	r9, fp
 8009102:	9201      	str	r2, [sp, #4]
 8009104:	9109      	str	r1, [sp, #36]	; 0x24
 8009106:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 8009300 <neai_classification+0x244>
 800910a:	2264      	movs	r2, #100	; 0x64
 800910c:	46c2      	mov	sl, r8
 800910e:	2100      	movs	r1, #0
 8009110:	4875      	ldr	r0, [pc, #468]	; (80092e8 <neai_classification+0x22c>)
 8009112:	f000 fb63 	bl	80097dc <memset>
 8009116:	4b75      	ldr	r3, [pc, #468]	; (80092ec <neai_classification+0x230>)
 8009118:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 80092f0 <neai_classification+0x234>
 800911c:	9302      	str	r3, [sp, #8]
 800911e:	f8cd 9018 	str.w	r9, [sp, #24]
 8009122:	2f00      	cmp	r7, #0
 8009124:	f000 8322 	beq.w	800976c <neai_classification+0x6b0>
 8009128:	4a71      	ldr	r2, [pc, #452]	; (80092f0 <neai_classification+0x234>)
 800912a:	9b02      	ldr	r3, [sp, #8]
 800912c:	4614      	mov	r4, r2
 800912e:	4610      	mov	r0, r2
 8009130:	881b      	ldrh	r3, [r3, #0]
 8009132:	9903      	ldr	r1, [sp, #12]
 8009134:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009138:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800913c:	1e7e      	subs	r6, r7, #1
 800913e:	9905      	ldr	r1, [sp, #20]
 8009140:	f102 0e04 	add.w	lr, r2, #4
 8009144:	fa1f fc86 	uxth.w	ip, r6
 8009148:	4d6a      	ldr	r5, [pc, #424]	; (80092f4 <neai_classification+0x238>)
 800914a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800914e:	eb0e 018c 	add.w	r1, lr, ip, lsl #2
 8009152:	f853 cb18 	ldr.w	ip, [r3], #24
 8009156:	eca5 9a01 	vstmia	r5!, {s18}
 800915a:	f840 cb04 	str.w	ip, [r0], #4
 800915e:	4281      	cmp	r1, r0
 8009160:	d1f7      	bne.n	8009152 <neai_classification+0x96>
 8009162:	2f01      	cmp	r7, #1
 8009164:	edd4 7a00 	vldr	s15, [r4]
 8009168:	d00e      	beq.n	8009188 <neai_classification+0xcc>
 800916a:	4b63      	ldr	r3, [pc, #396]	; (80092f8 <neai_classification+0x23c>)
 800916c:	eb02 0187 	add.w	r1, r2, r7, lsl #2
 8009170:	ecb3 7a01 	vldmia	r3!, {s14}
 8009174:	4299      	cmp	r1, r3
 8009176:	ee77 7a87 	vadd.f32	s15, s15, s14
 800917a:	d1f9      	bne.n	8009170 <neai_classification+0xb4>
 800917c:	ee07 7a10 	vmov	s14, r7
 8009180:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009184:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8009188:	2300      	movs	r3, #0
 800918a:	ed92 7a00 	vldr	s14, [r2]
 800918e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009192:	3301      	adds	r3, #1
 8009194:	429f      	cmp	r7, r3
 8009196:	eca2 7a01 	vstmia	r2!, {s14}
 800919a:	d8f6      	bhi.n	800918a <neai_classification+0xce>
 800919c:	07fa      	lsls	r2, r7, #31
 800919e:	4638      	mov	r0, r7
 80091a0:	ea4f 0457 	mov.w	r4, r7, lsr #1
 80091a4:	f100 82cf 	bmi.w	8009746 <neai_classification+0x68a>
 80091a8:	f7f7 f9cc 	bl	8000544 <__aeabi_i2d>
 80091ac:	2500      	movs	r5, #0
 80091ae:	3501      	adds	r5, #1
 80091b0:	b2ad      	uxth	r5, r5
 80091b2:	fa47 f305 	asr.w	r3, r7, r5
 80091b6:	07db      	lsls	r3, r3, #31
 80091b8:	d5f9      	bpl.n	80091ae <neai_classification+0xf2>
 80091ba:	4602      	mov	r2, r0
 80091bc:	460b      	mov	r3, r1
 80091be:	2000      	movs	r0, #0
 80091c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80091c4:	f7f7 fb52 	bl	800086c <__aeabi_ddiv>
 80091c8:	f7f7 fce8 	bl	8000b9c <__aeabi_d2f>
 80091cc:	2f01      	cmp	r7, #1
 80091ce:	ee08 0a90 	vmov	s17, r0
 80091d2:	dd1f      	ble.n	8009214 <neai_classification+0x158>
 80091d4:	2300      	movs	r3, #0
 80091d6:	4619      	mov	r1, r3
 80091d8:	429c      	cmp	r4, r3
 80091da:	4622      	mov	r2, r4
 80091dc:	d805      	bhi.n	80091ea <neai_classification+0x12e>
 80091de:	1a9b      	subs	r3, r3, r2
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	f3c2 024f 	ubfx	r2, r2, #1, #16
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d2f9      	bcs.n	80091de <neai_classification+0x122>
 80091ea:	3101      	adds	r1, #1
 80091ec:	b289      	uxth	r1, r1
 80091ee:	4413      	add	r3, r2
 80091f0:	42b1      	cmp	r1, r6
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	da0e      	bge.n	8009214 <neai_classification+0x158>
 80091f6:	428b      	cmp	r3, r1
 80091f8:	d9ee      	bls.n	80091d8 <neai_classification+0x11c>
 80091fa:	eb0b 0281 	add.w	r2, fp, r1, lsl #2
 80091fe:	eb0b 0083 	add.w	r0, fp, r3, lsl #2
 8009202:	f8d2 c000 	ldr.w	ip, [r2]
 8009206:	f8d0 e000 	ldr.w	lr, [r0]
 800920a:	f8c2 e000 	str.w	lr, [r2]
 800920e:	f8c0 c000 	str.w	ip, [r0]
 8009212:	e7e1      	b.n	80091d8 <neai_classification+0x11c>
 8009214:	2d00      	cmp	r5, #0
 8009216:	f000 809f 	beq.w	8009358 <neai_classification+0x29c>
 800921a:	9407      	str	r4, [sp, #28]
 800921c:	f04f 0800 	mov.w	r8, #0
 8009220:	eeb0 aa49 	vmov.f32	s20, s18
 8009224:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
 8009228:	2601      	movs	r6, #1
 800922a:	462c      	mov	r4, r5
 800922c:	4630      	mov	r0, r6
 800922e:	0076      	lsls	r6, r6, #1
 8009230:	b2b6      	uxth	r6, r6
 8009232:	2800      	cmp	r0, #0
 8009234:	d066      	beq.n	8009304 <neai_classification+0x248>
 8009236:	2f00      	cmp	r7, #0
 8009238:	d064      	beq.n	8009304 <neai_classification+0x248>
 800923a:	2100      	movs	r1, #0
 800923c:	42b8      	cmp	r0, r7
 800923e:	4681      	mov	r9, r0
 8009240:	460b      	mov	r3, r1
 8009242:	bf28      	it	cs
 8009244:	46b9      	movcs	r9, r7
 8009246:	eef0 7a49 	vmov.f32	s15, s18
 800924a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800924e:	4d29      	ldr	r5, [pc, #164]	; (80092f4 <neai_classification+0x238>)
 8009250:	181a      	adds	r2, r3, r0
 8009252:	b292      	uxth	r2, r2
 8009254:	eb0b 0c82 	add.w	ip, fp, r2, lsl #2
 8009258:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800925c:	ed9c 5a00 	vldr	s10, [ip]
 8009260:	edd2 5a00 	vldr	s11, [r2]
 8009264:	ee65 6a27 	vmul.f32	s13, s10, s15
 8009268:	ee27 6ae5 	vnmul.f32	s12, s15, s11
 800926c:	eb0b 0e83 	add.w	lr, fp, r3, lsl #2
 8009270:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8009274:	eea5 6a07 	vfma.f32	s12, s10, s14
 8009278:	eee5 6a87 	vfma.f32	s13, s11, s14
 800927c:	ed9e 5a00 	vldr	s10, [lr]
 8009280:	edd5 5a00 	vldr	s11, [r5]
 8009284:	ee35 5a46 	vsub.f32	s10, s10, s12
 8009288:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800928c:	ed8c 5a00 	vstr	s10, [ip]
 8009290:	edc2 5a00 	vstr	s11, [r2]
 8009294:	ed9e 5a00 	vldr	s10, [lr]
 8009298:	edd5 5a00 	vldr	s11, [r5]
 800929c:	ee35 6a06 	vadd.f32	s12, s10, s12
 80092a0:	ee75 6aa6 	vadd.f32	s13, s11, s13
 80092a4:	4433      	add	r3, r6
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	42bb      	cmp	r3, r7
 80092aa:	ed8e 6a00 	vstr	s12, [lr]
 80092ae:	edc5 6a00 	vstr	s13, [r5]
 80092b2:	d3cc      	bcc.n	800924e <neai_classification+0x192>
 80092b4:	ee6a 6a67 	vnmul.f32	s13, s20, s15
 80092b8:	ee67 7a88 	vmul.f32	s15, s15, s16
 80092bc:	3101      	adds	r1, #1
 80092be:	b28b      	uxth	r3, r1
 80092c0:	454b      	cmp	r3, r9
 80092c2:	eee7 6a08 	vfma.f32	s13, s14, s16
 80092c6:	eee7 7a0a 	vfma.f32	s15, s14, s20
 80092ca:	d21b      	bcs.n	8009304 <neai_classification+0x248>
 80092cc:	eeb0 7a66 	vmov.f32	s14, s13
 80092d0:	e7bd      	b.n	800924e <neai_classification+0x192>
 80092d2:	bf00      	nop
 80092d4:	20000009 	.word	0x20000009
 80092d8:	200008f0 	.word	0x200008f0
 80092dc:	200008ee 	.word	0x200008ee
 80092e0:	00000000 	.word	0x00000000
 80092e4:	3b03126f 	.word	0x3b03126f
 80092e8:	2000087c 	.word	0x2000087c
 80092ec:	200008e0 	.word	0x200008e0
 80092f0:	200006ec 	.word	0x200006ec
 80092f4:	200007b4 	.word	0x200007b4
 80092f8:	200006f0 	.word	0x200006f0
 80092fc:	2000068c 	.word	0x2000068c
 8009300:	200008e8 	.word	0x200008e8
 8009304:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009308:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800930c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8009310:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009314:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8009318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800931c:	eeb1 aac0 	vsqrt.f32	s20, s0
 8009320:	f100 822a 	bmi.w	8009778 <neai_classification+0x6bc>
 8009324:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009328:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800932c:	ee38 8a00 	vadd.f32	s16, s16, s0
 8009330:	ee68 7a27 	vmul.f32	s15, s16, s15
 8009334:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800933c:	eeb1 aa4a 	vneg.f32	s20, s20
 8009340:	eeb1 8ae7 	vsqrt.f32	s16, s15
 8009344:	f100 821b 	bmi.w	800977e <neai_classification+0x6c2>
 8009348:	f108 0801 	add.w	r8, r8, #1
 800934c:	fa1f f388 	uxth.w	r3, r8
 8009350:	429c      	cmp	r4, r3
 8009352:	f63f af6b 	bhi.w	800922c <neai_classification+0x170>
 8009356:	9c07      	ldr	r4, [sp, #28]
 8009358:	2f00      	cmp	r7, #0
 800935a:	f000 81f0 	beq.w	800973e <neai_classification+0x682>
 800935e:	4d6d      	ldr	r5, [pc, #436]	; (8009514 <neai_classification+0x458>)
 8009360:	2100      	movs	r1, #0
 8009362:	462a      	mov	r2, r5
 8009364:	4b6c      	ldr	r3, [pc, #432]	; (8009518 <neai_classification+0x45c>)
 8009366:	ed93 7a00 	vldr	s14, [r3]
 800936a:	edd2 7a00 	vldr	s15, [r2]
 800936e:	ee27 7a28 	vmul.f32	s14, s14, s17
 8009372:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8009376:	3101      	adds	r1, #1
 8009378:	b288      	uxth	r0, r1
 800937a:	4287      	cmp	r7, r0
 800937c:	eca3 7a01 	vstmia	r3!, {s14}
 8009380:	ece2 7a01 	vstmia	r2!, {s15}
 8009384:	d8ef      	bhi.n	8009366 <neai_classification+0x2aa>
 8009386:	2c00      	cmp	r4, #0
 8009388:	d040      	beq.n	800940c <neai_classification+0x350>
 800938a:	4a64      	ldr	r2, [pc, #400]	; (800951c <neai_classification+0x460>)
 800938c:	4b61      	ldr	r3, [pc, #388]	; (8009514 <neai_classification+0x458>)
 800938e:	eb05 0684 	add.w	r6, r5, r4, lsl #2
 8009392:	edd3 7a01 	vldr	s15, [r3, #4]
 8009396:	ecb2 7a01 	vldmia	r2!, {s14}
 800939a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800939e:	eee7 7a07 	vfma.f32	s15, s14, s14
 80093a2:	ece3 7a01 	vstmia	r3!, {s15}
 80093a6:	429e      	cmp	r6, r3
 80093a8:	d1f3      	bne.n	8009392 <neai_classification+0x2d6>
 80093aa:	ecb5 0a01 	vldmia	r5!, {s0}
 80093ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80093b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093b6:	da0a      	bge.n	80093ce <neai_classification+0x312>
 80093b8:	42ae      	cmp	r6, r5
 80093ba:	ed05 9a01 	vstr	s18, [r5, #-4]
 80093be:	d012      	beq.n	80093e6 <neai_classification+0x32a>
 80093c0:	ecb5 0a01 	vldmia	r5!, {s0}
 80093c4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80093c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093cc:	dbf4      	blt.n	80093b8 <neai_classification+0x2fc>
 80093ce:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80093d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093d6:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80093da:	f100 81d5 	bmi.w	8009788 <neai_classification+0x6cc>
 80093de:	42ae      	cmp	r6, r5
 80093e0:	ed05 8a01 	vstr	s16, [r5, #-4]
 80093e4:	d1ec      	bne.n	80093c0 <neai_classification+0x304>
 80093e6:	2200      	movs	r2, #0
 80093e8:	4b4d      	ldr	r3, [pc, #308]	; (8009520 <neai_classification+0x464>)
 80093ea:	f8ba 0000 	ldrh.w	r0, [sl]
 80093ee:	4949      	ldr	r1, [pc, #292]	; (8009514 <neai_classification+0x458>)
 80093f0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80093f4:	edd3 7a00 	vldr	s15, [r3]
 80093f8:	ecb1 7a01 	vldmia	r1!, {s14}
 80093fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009400:	3201      	adds	r2, #1
 8009402:	b290      	uxth	r0, r2
 8009404:	4284      	cmp	r4, r0
 8009406:	ece3 7a01 	vstmia	r3!, {s15}
 800940a:	d8f3      	bhi.n	80093f4 <neai_classification+0x338>
 800940c:	9b02      	ldr	r3, [sp, #8]
 800940e:	f10a 0a02 	add.w	sl, sl, #2
 8009412:	3302      	adds	r3, #2
 8009414:	9302      	str	r3, [sp, #8]
 8009416:	4b43      	ldr	r3, [pc, #268]	; (8009524 <neai_classification+0x468>)
 8009418:	4553      	cmp	r3, sl
 800941a:	f47f ae82 	bne.w	8009122 <neai_classification+0x66>
 800941e:	9b01      	ldr	r3, [sp, #4]
 8009420:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d03d      	beq.n	80094a4 <neai_classification+0x3e8>
 8009428:	4c3d      	ldr	r4, [pc, #244]	; (8009520 <neai_classification+0x464>)
 800942a:	2300      	movs	r3, #0
 800942c:	4622      	mov	r2, r4
 800942e:	ecf2 7a01 	vldmia	r2!, {s15}
 8009432:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800943a:	da07      	bge.n	800944c <neai_classification+0x390>
 800943c:	ee07 3a90 	vmov	s15, r3
 8009440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009444:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8009448:	ed42 7a01 	vstr	s15, [r2, #-4]
 800944c:	9801      	ldr	r0, [sp, #4]
 800944e:	3301      	adds	r3, #1
 8009450:	b299      	uxth	r1, r3
 8009452:	4288      	cmp	r0, r1
 8009454:	d8eb      	bhi.n	800942e <neai_classification+0x372>
 8009456:	2804      	cmp	r0, #4
 8009458:	4603      	mov	r3, r0
 800945a:	f240 8169 	bls.w	8009730 <neai_classification+0x674>
 800945e:	4648      	mov	r0, r9
 8009460:	2100      	movs	r1, #0
 8009462:	1f1e      	subs	r6, r3, #4
 8009464:	2300      	movs	r3, #0
 8009466:	ecf0 7a01 	vldmia	r0!, {s15}
 800946a:	461a      	mov	r2, r3
 800946c:	ee07 2a10 	vmov	s14, r2
 8009470:	188d      	adds	r5, r1, r2
 8009472:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009476:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800947a:	edd5 6a00 	vldr	s13, [r5]
 800947e:	3201      	adds	r2, #1
 8009480:	eee7 6a87 	vfma.f32	s13, s15, s14
 8009484:	ee07 2a90 	vmov	s15, r2
 8009488:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800948c:	3301      	adds	r3, #1
 800948e:	b29b      	uxth	r3, r3
 8009490:	429e      	cmp	r6, r3
 8009492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009496:	461a      	mov	r2, r3
 8009498:	dae8      	bge.n	800946c <neai_classification+0x3b0>
 800949a:	3101      	adds	r1, #1
 800949c:	2904      	cmp	r1, #4
 800949e:	ed40 7a01 	vstr	s15, [r0, #-4]
 80094a2:	d1df      	bne.n	8009464 <neai_classification+0x3a8>
 80094a4:	9b03      	ldr	r3, [sp, #12]
 80094a6:	f109 0910 	add.w	r9, r9, #16
 80094aa:	3301      	adds	r3, #1
 80094ac:	2b06      	cmp	r3, #6
 80094ae:	9303      	str	r3, [sp, #12]
 80094b0:	f47f ae29 	bne.w	8009106 <neai_classification+0x4a>
 80094b4:	2300      	movs	r3, #0
 80094b6:	4a1c      	ldr	r2, [pc, #112]	; (8009528 <neai_classification+0x46c>)
 80094b8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80094bc:	6814      	ldr	r4, [r2, #0]
 80094be:	f8c9 3000 	str.w	r3, [r9]
 80094c2:	f8c9 3004 	str.w	r3, [r9, #4]
 80094c6:	f8c9 3008 	str.w	r3, [r9, #8]
 80094ca:	f8c9 300c 	str.w	r3, [r9, #12]
 80094ce:	2c00      	cmp	r4, #0
 80094d0:	d076      	beq.n	80095c0 <neai_classification+0x504>
 80094d2:	ee07 4a90 	vmov	s15, r4
 80094d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094de:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
 80094e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80094e6:	4811      	ldr	r0, [pc, #68]	; (800952c <neai_classification+0x470>)
 80094e8:	4d11      	ldr	r5, [pc, #68]	; (8009530 <neai_classification+0x474>)
 80094ea:	4912      	ldr	r1, [pc, #72]	; (8009534 <neai_classification+0x478>)
 80094ec:	4a12      	ldr	r2, [pc, #72]	; (8009538 <neai_classification+0x47c>)
 80094ee:	4b13      	ldr	r3, [pc, #76]	; (800953c <neai_classification+0x480>)
 80094f0:	6800      	ldr	r0, [r0, #0]
 80094f2:	f8d5 e000 	ldr.w	lr, [r5]
 80094f6:	f8d1 c000 	ldr.w	ip, [r1]
 80094fa:	6817      	ldr	r7, [r2, #0]
 80094fc:	681e      	ldr	r6, [r3, #0]
 80094fe:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8009502:	ecf0 7a01 	vldmia	r0!, {s15}
 8009506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800950a:	ee17 2a90 	vmov	r2, s15
 800950e:	ee17 3a90 	vmov	r3, s15
 8009512:	e021      	b.n	8009558 <neai_classification+0x49c>
 8009514:	200007b4 	.word	0x200007b4
 8009518:	200006ec 	.word	0x200006ec
 800951c:	200006f0 	.word	0x200006f0
 8009520:	2000087c 	.word	0x2000087c
 8009524:	200008ee 	.word	0x200008ee
 8009528:	200008f4 	.word	0x200008f4
 800952c:	20000a40 	.word	0x20000a40
 8009530:	20000a58 	.word	0x20000a58
 8009534:	20000a4c 	.word	0x20000a4c
 8009538:	20000a48 	.word	0x20000a48
 800953c:	20000a54 	.word	0x20000a54
 8009540:	edd1 7a00 	vldr	s15, [r1]
 8009544:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800954c:	d426      	bmi.n	800959c <neai_classification+0x4e0>
 800954e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009552:	ee17 3a90 	vmov	r3, s15
 8009556:	4413      	add	r3, r2
 8009558:	eb0e 0183 	add.w	r1, lr, r3, lsl #2
 800955c:	edd1 7a00 	vldr	s15, [r1]
 8009560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009564:	ee17 1a90 	vmov	r1, s15
 8009568:	4d89      	ldr	r5, [pc, #548]	; (8009790 <neai_classification+0x6d4>)
 800956a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800956e:	eb0c 0583 	add.w	r5, ip, r3, lsl #2
 8009572:	ed91 7a00 	vldr	s14, [r1]
 8009576:	edd5 7a00 	vldr	s15, [r5]
 800957a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800957e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009582:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8009586:	eb06 0103 	add.w	r1, r6, r3
 800958a:	443b      	add	r3, r7
 800958c:	d4d8      	bmi.n	8009540 <neai_classification+0x484>
 800958e:	edd3 7a00 	vldr	s15, [r3]
 8009592:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800959a:	d5d8      	bpl.n	800954e <neai_classification+0x492>
 800959c:	eef1 7a67 	vneg.f32	s15, s15
 80095a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095a4:	ee17 3a90 	vmov	r3, s15
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	4443      	add	r3, r8
 80095ac:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80095b0:	edd3 7a00 	vldr	s15, [r3]
 80095b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095b8:	42a0      	cmp	r0, r4
 80095ba:	edc3 7a00 	vstr	s15, [r3]
 80095be:	d1a0      	bne.n	8009502 <neai_classification+0x446>
 80095c0:	464b      	mov	r3, r9
 80095c2:	ba1a      	rev	r2, r3
 80095c4:	2000      	movs	r0, #0
 80095c6:	1e59      	subs	r1, r3, #1
 80095c8:	400b      	ands	r3, r1
 80095ca:	f100 0001 	add.w	r0, r0, #1
 80095ce:	d1fa      	bne.n	80095c6 <neai_classification+0x50a>
 80095d0:	b122      	cbz	r2, 80095dc <neai_classification+0x520>
 80095d2:	1e51      	subs	r1, r2, #1
 80095d4:	400a      	ands	r2, r1
 80095d6:	f103 0301 	add.w	r3, r3, #1
 80095da:	d1fa      	bne.n	80095d2 <neai_classification+0x516>
 80095dc:	1a1b      	subs	r3, r3, r0
 80095de:	fab3 f383 	clz	r3, r3
 80095e2:	095b      	lsrs	r3, r3, #5
 80095e4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80095e8:	eba2 0203 	sub.w	r2, r2, r3
 80095ec:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80095f0:	eba2 0203 	sub.w	r2, r2, r3
 80095f4:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80095f8:	441a      	add	r2, r3
 80095fa:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80095fe:	441a      	add	r2, r3
 8009600:	ea4f 1242 	mov.w	r2, r2, lsl #5
 8009604:	eba2 0203 	sub.w	r2, r2, r3
 8009608:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800960c:	eba2 0203 	sub.w	r2, r2, r3
 8009610:	ea6f 0202 	mvn.w	r2, r2
 8009614:	ba12      	rev	r2, r2
 8009616:	8bd4      	ldrh	r4, [r2, #30]
 8009618:	eddf 8a5e 	vldr	s17, [pc, #376]	; 8009794 <neai_classification+0x6d8>
 800961c:	1123      	asrs	r3, r4, #4
 800961e:	f004 040f 	and.w	r4, r4, #15
 8009622:	eba3 1103 	sub.w	r1, r3, r3, lsl #4
 8009626:	eba4 1204 	sub.w	r2, r4, r4, lsl #4
 800962a:	fb03 1303 	mla	r3, r3, r3, r1
 800962e:	fb04 2404 	mla	r4, r4, r4, r2
 8009632:	441c      	add	r4, r3
 8009634:	3464      	adds	r4, #100	; 0x64
 8009636:	444c      	add	r4, r9
 8009638:	edd4 7a01 	vldr	s15, [r4, #4]
 800963c:	ed94 8a00 	vldr	s16, [r4]
 8009640:	eeb4 8a67 	vcmp.f32	s16, s15
 8009644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009648:	ed94 7a02 	vldr	s14, [r4, #8]
 800964c:	bf48      	it	mi
 800964e:	eeb0 8a67 	vmovmi.f32	s16, s15
 8009652:	eeb4 7a48 	vcmp.f32	s14, s16
 8009656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800965a:	edd4 7a03 	vldr	s15, [r4, #12]
 800965e:	bfc8      	it	gt
 8009660:	eeb0 8a47 	vmovgt.f32	s16, s14
 8009664:	eef4 7a48 	vcmp.f32	s15, s16
 8009668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800966c:	4625      	mov	r5, r4
 800966e:	bfc8      	it	gt
 8009670:	eeb0 8a67 	vmovgt.f32	s16, s15
 8009674:	eeb2 9a00 	vmov.f32	s18, #32	; 0x41000000  8.0
 8009678:	f104 0610 	add.w	r6, r4, #16
 800967c:	edd4 7a00 	vldr	s15, [r4]
 8009680:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8009684:	ee67 7a89 	vmul.f32	s15, s15, s18
 8009688:	ee17 0a90 	vmov	r0, s15
 800968c:	f7f6 ff6c 	bl	8000568 <__aeabi_f2d>
 8009690:	ec41 0b10 	vmov	d0, r0, r1
 8009694:	f000 fd38 	bl	800a108 <exp>
 8009698:	ec51 0b10 	vmov	r0, r1, d0
 800969c:	f7f7 fa7e 	bl	8000b9c <__aeabi_d2f>
 80096a0:	ee07 0a90 	vmov	s15, r0
 80096a4:	f844 0b04 	str.w	r0, [r4], #4
 80096a8:	42a6      	cmp	r6, r4
 80096aa:	ee78 8aa7 	vadd.f32	s17, s17, s15
 80096ae:	d1e5      	bne.n	800967c <neai_classification+0x5c0>
 80096b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80096b4:	edd5 5a00 	vldr	s11, [r5]
 80096b8:	ee87 5aa8 	vdiv.f32	s10, s15, s17
 80096bc:	ed95 7a01 	vldr	s14, [r5, #4]
 80096c0:	ee65 5a85 	vmul.f32	s11, s11, s10
 80096c4:	ee27 7a05 	vmul.f32	s14, s14, s10
 80096c8:	eef4 5ac7 	vcmpe.f32	s11, s14
 80096cc:	edd5 7a02 	vldr	s15, [r5, #8]
 80096d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096d4:	eeb0 6a65 	vmov.f32	s12, s11
 80096d8:	ee67 7a85 	vmul.f32	s15, s15, s10
 80096dc:	bf48      	it	mi
 80096de:	eeb0 6a47 	vmovmi.f32	s12, s14
 80096e2:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80096e6:	bf48      	it	mi
 80096e8:	2302      	movmi	r3, #2
 80096ea:	edd5 6a03 	vldr	s13, [r5, #12]
 80096ee:	bf58      	it	pl
 80096f0:	2301      	movpl	r3, #1
 80096f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096f6:	ee66 6a85 	vmul.f32	s13, s13, s10
 80096fa:	bf48      	it	mi
 80096fc:	eeb0 6a67 	vmovmi.f32	s12, s15
 8009700:	eeb4 6a66 	vcmp.f32	s12, s13
 8009704:	bf48      	it	mi
 8009706:	2303      	movmi	r3, #3
 8009708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800970c:	bf48      	it	mi
 800970e:	2304      	movmi	r3, #4
 8009710:	9a08      	ldr	r2, [sp, #32]
 8009712:	9804      	ldr	r0, [sp, #16]
 8009714:	edc5 5a00 	vstr	s11, [r5]
 8009718:	ed85 7a01 	vstr	s14, [r5, #4]
 800971c:	edc5 7a02 	vstr	s15, [r5, #8]
 8009720:	edc5 6a03 	vstr	s13, [r5, #12]
 8009724:	8013      	strh	r3, [r2, #0]
 8009726:	b00b      	add	sp, #44	; 0x2c
 8009728:	ecbd 8b06 	vpop	{d8-d10}
 800972c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009730:	ee1a 2a90 	vmov	r2, s21
 8009734:	4648      	mov	r0, r9
 8009736:	4918      	ldr	r1, [pc, #96]	; (8009798 <neai_classification+0x6dc>)
 8009738:	f000 f884 	bl	8009844 <memcpy>
 800973c:	e6b2      	b.n	80094a4 <neai_classification+0x3e8>
 800973e:	2c00      	cmp	r4, #0
 8009740:	f43f ae64 	beq.w	800940c <neai_classification+0x350>
 8009744:	e64f      	b.n	80093e6 <neai_classification+0x32a>
 8009746:	f7f6 fefd 	bl	8000544 <__aeabi_i2d>
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
 800974e:	2000      	movs	r0, #0
 8009750:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009754:	f7f7 f88a 	bl	800086c <__aeabi_ddiv>
 8009758:	f7f7 fa20 	bl	8000b9c <__aeabi_d2f>
 800975c:	2f01      	cmp	r7, #1
 800975e:	ee08 0a90 	vmov	s17, r0
 8009762:	bf18      	it	ne
 8009764:	2500      	movne	r5, #0
 8009766:	f47f ad35 	bne.w	80091d4 <neai_classification+0x118>
 800976a:	e5f8      	b.n	800935e <neai_classification+0x2a2>
 800976c:	463c      	mov	r4, r7
 800976e:	f04f 36ff 	mov.w	r6, #4294967295
 8009772:	2000      	movs	r0, #0
 8009774:	2100      	movs	r1, #0
 8009776:	e519      	b.n	80091ac <neai_classification+0xf0>
 8009778:	f000 fd0e 	bl	800a198 <sqrtf>
 800977c:	e5d2      	b.n	8009324 <neai_classification+0x268>
 800977e:	eeb0 0a67 	vmov.f32	s0, s15
 8009782:	f000 fd09 	bl	800a198 <sqrtf>
 8009786:	e5df      	b.n	8009348 <neai_classification+0x28c>
 8009788:	f000 fd06 	bl	800a198 <sqrtf>
 800978c:	e627      	b.n	80093de <neai_classification+0x322>
 800978e:	bf00      	nop
 8009790:	2000068c 	.word	0x2000068c
 8009794:	00000000 	.word	0x00000000
 8009798:	2000087c 	.word	0x2000087c

0800979c <siprintf>:
 800979c:	b40e      	push	{r1, r2, r3}
 800979e:	b500      	push	{lr}
 80097a0:	b09c      	sub	sp, #112	; 0x70
 80097a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80097a6:	ab1d      	add	r3, sp, #116	; 0x74
 80097a8:	9002      	str	r0, [sp, #8]
 80097aa:	9006      	str	r0, [sp, #24]
 80097ac:	9107      	str	r1, [sp, #28]
 80097ae:	9104      	str	r1, [sp, #16]
 80097b0:	4808      	ldr	r0, [pc, #32]	; (80097d4 <siprintf+0x38>)
 80097b2:	4909      	ldr	r1, [pc, #36]	; (80097d8 <siprintf+0x3c>)
 80097b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80097b8:	9105      	str	r1, [sp, #20]
 80097ba:	a902      	add	r1, sp, #8
 80097bc:	6800      	ldr	r0, [r0, #0]
 80097be:	9301      	str	r3, [sp, #4]
 80097c0:	f000 f9a0 	bl	8009b04 <_svfiprintf_r>
 80097c4:	9b02      	ldr	r3, [sp, #8]
 80097c6:	2200      	movs	r2, #0
 80097c8:	701a      	strb	r2, [r3, #0]
 80097ca:	b01c      	add	sp, #112	; 0x70
 80097cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80097d0:	b003      	add	sp, #12
 80097d2:	4770      	bx	lr
 80097d4:	20000058 	.word	0x20000058
 80097d8:	ffff0208 	.word	0xffff0208

080097dc <memset>:
 80097dc:	4402      	add	r2, r0
 80097de:	4603      	mov	r3, r0
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d100      	bne.n	80097e6 <memset+0xa>
 80097e4:	4770      	bx	lr
 80097e6:	f803 1b01 	strb.w	r1, [r3], #1
 80097ea:	e7f9      	b.n	80097e0 <memset+0x4>

080097ec <__errno>:
 80097ec:	4b01      	ldr	r3, [pc, #4]	; (80097f4 <__errno+0x8>)
 80097ee:	6818      	ldr	r0, [r3, #0]
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	20000058 	.word	0x20000058

080097f8 <__libc_init_array>:
 80097f8:	b570      	push	{r4, r5, r6, lr}
 80097fa:	4d0d      	ldr	r5, [pc, #52]	; (8009830 <__libc_init_array+0x38>)
 80097fc:	2600      	movs	r6, #0
 80097fe:	4c0d      	ldr	r4, [pc, #52]	; (8009834 <__libc_init_array+0x3c>)
 8009800:	1b64      	subs	r4, r4, r5
 8009802:	10a4      	asrs	r4, r4, #2
 8009804:	42a6      	cmp	r6, r4
 8009806:	d109      	bne.n	800981c <__libc_init_array+0x24>
 8009808:	4d0b      	ldr	r5, [pc, #44]	; (8009838 <__libc_init_array+0x40>)
 800980a:	2600      	movs	r6, #0
 800980c:	4c0b      	ldr	r4, [pc, #44]	; (800983c <__libc_init_array+0x44>)
 800980e:	f000 fe9d 	bl	800a54c <_init>
 8009812:	1b64      	subs	r4, r4, r5
 8009814:	10a4      	asrs	r4, r4, #2
 8009816:	42a6      	cmp	r6, r4
 8009818:	d105      	bne.n	8009826 <__libc_init_array+0x2e>
 800981a:	bd70      	pop	{r4, r5, r6, pc}
 800981c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009820:	3601      	adds	r6, #1
 8009822:	4798      	blx	r3
 8009824:	e7ee      	b.n	8009804 <__libc_init_array+0xc>
 8009826:	f855 3b04 	ldr.w	r3, [r5], #4
 800982a:	3601      	adds	r6, #1
 800982c:	4798      	blx	r3
 800982e:	e7f2      	b.n	8009816 <__libc_init_array+0x1e>
 8009830:	0801f6e0 	.word	0x0801f6e0
 8009834:	0801f6e0 	.word	0x0801f6e0
 8009838:	0801f6e0 	.word	0x0801f6e0
 800983c:	0801f6e4 	.word	0x0801f6e4

08009840 <__retarget_lock_acquire_recursive>:
 8009840:	4770      	bx	lr

08009842 <__retarget_lock_release_recursive>:
 8009842:	4770      	bx	lr

08009844 <memcpy>:
 8009844:	440a      	add	r2, r1
 8009846:	1e43      	subs	r3, r0, #1
 8009848:	4291      	cmp	r1, r2
 800984a:	d100      	bne.n	800984e <memcpy+0xa>
 800984c:	4770      	bx	lr
 800984e:	b510      	push	{r4, lr}
 8009850:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009854:	4291      	cmp	r1, r2
 8009856:	f803 4f01 	strb.w	r4, [r3, #1]!
 800985a:	d1f9      	bne.n	8009850 <memcpy+0xc>
 800985c:	bd10      	pop	{r4, pc}
	...

08009860 <_free_r>:
 8009860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009862:	2900      	cmp	r1, #0
 8009864:	d043      	beq.n	80098ee <_free_r+0x8e>
 8009866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800986a:	1f0c      	subs	r4, r1, #4
 800986c:	9001      	str	r0, [sp, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	bfb8      	it	lt
 8009872:	18e4      	addlt	r4, r4, r3
 8009874:	f000 f8e0 	bl	8009a38 <__malloc_lock>
 8009878:	4a1e      	ldr	r2, [pc, #120]	; (80098f4 <_free_r+0x94>)
 800987a:	9801      	ldr	r0, [sp, #4]
 800987c:	6813      	ldr	r3, [r2, #0]
 800987e:	b933      	cbnz	r3, 800988e <_free_r+0x2e>
 8009880:	6063      	str	r3, [r4, #4]
 8009882:	6014      	str	r4, [r2, #0]
 8009884:	b003      	add	sp, #12
 8009886:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800988a:	f000 b8db 	b.w	8009a44 <__malloc_unlock>
 800988e:	42a3      	cmp	r3, r4
 8009890:	d908      	bls.n	80098a4 <_free_r+0x44>
 8009892:	6825      	ldr	r5, [r4, #0]
 8009894:	1961      	adds	r1, r4, r5
 8009896:	428b      	cmp	r3, r1
 8009898:	bf01      	itttt	eq
 800989a:	6819      	ldreq	r1, [r3, #0]
 800989c:	685b      	ldreq	r3, [r3, #4]
 800989e:	1949      	addeq	r1, r1, r5
 80098a0:	6021      	streq	r1, [r4, #0]
 80098a2:	e7ed      	b.n	8009880 <_free_r+0x20>
 80098a4:	461a      	mov	r2, r3
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	b10b      	cbz	r3, 80098ae <_free_r+0x4e>
 80098aa:	42a3      	cmp	r3, r4
 80098ac:	d9fa      	bls.n	80098a4 <_free_r+0x44>
 80098ae:	6811      	ldr	r1, [r2, #0]
 80098b0:	1855      	adds	r5, r2, r1
 80098b2:	42a5      	cmp	r5, r4
 80098b4:	d10b      	bne.n	80098ce <_free_r+0x6e>
 80098b6:	6824      	ldr	r4, [r4, #0]
 80098b8:	4421      	add	r1, r4
 80098ba:	1854      	adds	r4, r2, r1
 80098bc:	6011      	str	r1, [r2, #0]
 80098be:	42a3      	cmp	r3, r4
 80098c0:	d1e0      	bne.n	8009884 <_free_r+0x24>
 80098c2:	681c      	ldr	r4, [r3, #0]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	440c      	add	r4, r1
 80098c8:	6053      	str	r3, [r2, #4]
 80098ca:	6014      	str	r4, [r2, #0]
 80098cc:	e7da      	b.n	8009884 <_free_r+0x24>
 80098ce:	d902      	bls.n	80098d6 <_free_r+0x76>
 80098d0:	230c      	movs	r3, #12
 80098d2:	6003      	str	r3, [r0, #0]
 80098d4:	e7d6      	b.n	8009884 <_free_r+0x24>
 80098d6:	6825      	ldr	r5, [r4, #0]
 80098d8:	1961      	adds	r1, r4, r5
 80098da:	428b      	cmp	r3, r1
 80098dc:	bf02      	ittt	eq
 80098de:	6819      	ldreq	r1, [r3, #0]
 80098e0:	685b      	ldreq	r3, [r3, #4]
 80098e2:	1949      	addeq	r1, r1, r5
 80098e4:	6063      	str	r3, [r4, #4]
 80098e6:	bf08      	it	eq
 80098e8:	6021      	streq	r1, [r4, #0]
 80098ea:	6054      	str	r4, [r2, #4]
 80098ec:	e7ca      	b.n	8009884 <_free_r+0x24>
 80098ee:	b003      	add	sp, #12
 80098f0:	bd30      	pop	{r4, r5, pc}
 80098f2:	bf00      	nop
 80098f4:	20000a38 	.word	0x20000a38

080098f8 <sbrk_aligned>:
 80098f8:	b570      	push	{r4, r5, r6, lr}
 80098fa:	4e0e      	ldr	r6, [pc, #56]	; (8009934 <sbrk_aligned+0x3c>)
 80098fc:	460c      	mov	r4, r1
 80098fe:	4605      	mov	r5, r0
 8009900:	6831      	ldr	r1, [r6, #0]
 8009902:	b911      	cbnz	r1, 800990a <sbrk_aligned+0x12>
 8009904:	f000 fba8 	bl	800a058 <_sbrk_r>
 8009908:	6030      	str	r0, [r6, #0]
 800990a:	4621      	mov	r1, r4
 800990c:	4628      	mov	r0, r5
 800990e:	f000 fba3 	bl	800a058 <_sbrk_r>
 8009912:	1c43      	adds	r3, r0, #1
 8009914:	d00a      	beq.n	800992c <sbrk_aligned+0x34>
 8009916:	1cc4      	adds	r4, r0, #3
 8009918:	f024 0403 	bic.w	r4, r4, #3
 800991c:	42a0      	cmp	r0, r4
 800991e:	d007      	beq.n	8009930 <sbrk_aligned+0x38>
 8009920:	1a21      	subs	r1, r4, r0
 8009922:	4628      	mov	r0, r5
 8009924:	f000 fb98 	bl	800a058 <_sbrk_r>
 8009928:	3001      	adds	r0, #1
 800992a:	d101      	bne.n	8009930 <sbrk_aligned+0x38>
 800992c:	f04f 34ff 	mov.w	r4, #4294967295
 8009930:	4620      	mov	r0, r4
 8009932:	bd70      	pop	{r4, r5, r6, pc}
 8009934:	20000a3c 	.word	0x20000a3c

08009938 <_malloc_r>:
 8009938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800993c:	1ccd      	adds	r5, r1, #3
 800993e:	4607      	mov	r7, r0
 8009940:	f025 0503 	bic.w	r5, r5, #3
 8009944:	3508      	adds	r5, #8
 8009946:	2d0c      	cmp	r5, #12
 8009948:	bf38      	it	cc
 800994a:	250c      	movcc	r5, #12
 800994c:	2d00      	cmp	r5, #0
 800994e:	db01      	blt.n	8009954 <_malloc_r+0x1c>
 8009950:	42a9      	cmp	r1, r5
 8009952:	d905      	bls.n	8009960 <_malloc_r+0x28>
 8009954:	230c      	movs	r3, #12
 8009956:	2600      	movs	r6, #0
 8009958:	603b      	str	r3, [r7, #0]
 800995a:	4630      	mov	r0, r6
 800995c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009960:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009a34 <_malloc_r+0xfc>
 8009964:	f000 f868 	bl	8009a38 <__malloc_lock>
 8009968:	f8d8 3000 	ldr.w	r3, [r8]
 800996c:	461c      	mov	r4, r3
 800996e:	bb5c      	cbnz	r4, 80099c8 <_malloc_r+0x90>
 8009970:	4629      	mov	r1, r5
 8009972:	4638      	mov	r0, r7
 8009974:	f7ff ffc0 	bl	80098f8 <sbrk_aligned>
 8009978:	1c43      	adds	r3, r0, #1
 800997a:	4604      	mov	r4, r0
 800997c:	d155      	bne.n	8009a2a <_malloc_r+0xf2>
 800997e:	f8d8 4000 	ldr.w	r4, [r8]
 8009982:	4626      	mov	r6, r4
 8009984:	2e00      	cmp	r6, #0
 8009986:	d145      	bne.n	8009a14 <_malloc_r+0xdc>
 8009988:	2c00      	cmp	r4, #0
 800998a:	d048      	beq.n	8009a1e <_malloc_r+0xe6>
 800998c:	6823      	ldr	r3, [r4, #0]
 800998e:	4631      	mov	r1, r6
 8009990:	4638      	mov	r0, r7
 8009992:	eb04 0903 	add.w	r9, r4, r3
 8009996:	f000 fb5f 	bl	800a058 <_sbrk_r>
 800999a:	4581      	cmp	r9, r0
 800999c:	d13f      	bne.n	8009a1e <_malloc_r+0xe6>
 800999e:	6821      	ldr	r1, [r4, #0]
 80099a0:	4638      	mov	r0, r7
 80099a2:	1a6d      	subs	r5, r5, r1
 80099a4:	4629      	mov	r1, r5
 80099a6:	f7ff ffa7 	bl	80098f8 <sbrk_aligned>
 80099aa:	3001      	adds	r0, #1
 80099ac:	d037      	beq.n	8009a1e <_malloc_r+0xe6>
 80099ae:	6823      	ldr	r3, [r4, #0]
 80099b0:	442b      	add	r3, r5
 80099b2:	6023      	str	r3, [r4, #0]
 80099b4:	f8d8 3000 	ldr.w	r3, [r8]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d038      	beq.n	8009a2e <_malloc_r+0xf6>
 80099bc:	685a      	ldr	r2, [r3, #4]
 80099be:	42a2      	cmp	r2, r4
 80099c0:	d12b      	bne.n	8009a1a <_malloc_r+0xe2>
 80099c2:	2200      	movs	r2, #0
 80099c4:	605a      	str	r2, [r3, #4]
 80099c6:	e00f      	b.n	80099e8 <_malloc_r+0xb0>
 80099c8:	6822      	ldr	r2, [r4, #0]
 80099ca:	1b52      	subs	r2, r2, r5
 80099cc:	d41f      	bmi.n	8009a0e <_malloc_r+0xd6>
 80099ce:	2a0b      	cmp	r2, #11
 80099d0:	d917      	bls.n	8009a02 <_malloc_r+0xca>
 80099d2:	1961      	adds	r1, r4, r5
 80099d4:	42a3      	cmp	r3, r4
 80099d6:	6025      	str	r5, [r4, #0]
 80099d8:	bf18      	it	ne
 80099da:	6059      	strne	r1, [r3, #4]
 80099dc:	6863      	ldr	r3, [r4, #4]
 80099de:	bf08      	it	eq
 80099e0:	f8c8 1000 	streq.w	r1, [r8]
 80099e4:	5162      	str	r2, [r4, r5]
 80099e6:	604b      	str	r3, [r1, #4]
 80099e8:	f104 060b 	add.w	r6, r4, #11
 80099ec:	4638      	mov	r0, r7
 80099ee:	f000 f829 	bl	8009a44 <__malloc_unlock>
 80099f2:	1d23      	adds	r3, r4, #4
 80099f4:	f026 0607 	bic.w	r6, r6, #7
 80099f8:	1af2      	subs	r2, r6, r3
 80099fa:	d0ae      	beq.n	800995a <_malloc_r+0x22>
 80099fc:	1b9b      	subs	r3, r3, r6
 80099fe:	50a3      	str	r3, [r4, r2]
 8009a00:	e7ab      	b.n	800995a <_malloc_r+0x22>
 8009a02:	42a3      	cmp	r3, r4
 8009a04:	6862      	ldr	r2, [r4, #4]
 8009a06:	d1dd      	bne.n	80099c4 <_malloc_r+0x8c>
 8009a08:	f8c8 2000 	str.w	r2, [r8]
 8009a0c:	e7ec      	b.n	80099e8 <_malloc_r+0xb0>
 8009a0e:	4623      	mov	r3, r4
 8009a10:	6864      	ldr	r4, [r4, #4]
 8009a12:	e7ac      	b.n	800996e <_malloc_r+0x36>
 8009a14:	4634      	mov	r4, r6
 8009a16:	6876      	ldr	r6, [r6, #4]
 8009a18:	e7b4      	b.n	8009984 <_malloc_r+0x4c>
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	e7cc      	b.n	80099b8 <_malloc_r+0x80>
 8009a1e:	230c      	movs	r3, #12
 8009a20:	4638      	mov	r0, r7
 8009a22:	603b      	str	r3, [r7, #0]
 8009a24:	f000 f80e 	bl	8009a44 <__malloc_unlock>
 8009a28:	e797      	b.n	800995a <_malloc_r+0x22>
 8009a2a:	6025      	str	r5, [r4, #0]
 8009a2c:	e7dc      	b.n	80099e8 <_malloc_r+0xb0>
 8009a2e:	605b      	str	r3, [r3, #4]
 8009a30:	deff      	udf	#255	; 0xff
 8009a32:	bf00      	nop
 8009a34:	20000a38 	.word	0x20000a38

08009a38 <__malloc_lock>:
 8009a38:	4801      	ldr	r0, [pc, #4]	; (8009a40 <__malloc_lock+0x8>)
 8009a3a:	f7ff bf01 	b.w	8009840 <__retarget_lock_acquire_recursive>
 8009a3e:	bf00      	nop
 8009a40:	20000a34 	.word	0x20000a34

08009a44 <__malloc_unlock>:
 8009a44:	4801      	ldr	r0, [pc, #4]	; (8009a4c <__malloc_unlock+0x8>)
 8009a46:	f7ff befc 	b.w	8009842 <__retarget_lock_release_recursive>
 8009a4a:	bf00      	nop
 8009a4c:	20000a34 	.word	0x20000a34

08009a50 <__ssputs_r>:
 8009a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a54:	461f      	mov	r7, r3
 8009a56:	688e      	ldr	r6, [r1, #8]
 8009a58:	4682      	mov	sl, r0
 8009a5a:	460c      	mov	r4, r1
 8009a5c:	42be      	cmp	r6, r7
 8009a5e:	4690      	mov	r8, r2
 8009a60:	680b      	ldr	r3, [r1, #0]
 8009a62:	d82c      	bhi.n	8009abe <__ssputs_r+0x6e>
 8009a64:	898a      	ldrh	r2, [r1, #12]
 8009a66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a6a:	d026      	beq.n	8009aba <__ssputs_r+0x6a>
 8009a6c:	6965      	ldr	r5, [r4, #20]
 8009a6e:	6909      	ldr	r1, [r1, #16]
 8009a70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a74:	eba3 0901 	sub.w	r9, r3, r1
 8009a78:	1c7b      	adds	r3, r7, #1
 8009a7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a7e:	444b      	add	r3, r9
 8009a80:	106d      	asrs	r5, r5, #1
 8009a82:	429d      	cmp	r5, r3
 8009a84:	bf38      	it	cc
 8009a86:	461d      	movcc	r5, r3
 8009a88:	0553      	lsls	r3, r2, #21
 8009a8a:	d527      	bpl.n	8009adc <__ssputs_r+0x8c>
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	f7ff ff53 	bl	8009938 <_malloc_r>
 8009a92:	4606      	mov	r6, r0
 8009a94:	b360      	cbz	r0, 8009af0 <__ssputs_r+0xa0>
 8009a96:	464a      	mov	r2, r9
 8009a98:	6921      	ldr	r1, [r4, #16]
 8009a9a:	f7ff fed3 	bl	8009844 <memcpy>
 8009a9e:	89a3      	ldrh	r3, [r4, #12]
 8009aa0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa8:	81a3      	strh	r3, [r4, #12]
 8009aaa:	6126      	str	r6, [r4, #16]
 8009aac:	444e      	add	r6, r9
 8009aae:	6165      	str	r5, [r4, #20]
 8009ab0:	eba5 0509 	sub.w	r5, r5, r9
 8009ab4:	6026      	str	r6, [r4, #0]
 8009ab6:	463e      	mov	r6, r7
 8009ab8:	60a5      	str	r5, [r4, #8]
 8009aba:	42be      	cmp	r6, r7
 8009abc:	d900      	bls.n	8009ac0 <__ssputs_r+0x70>
 8009abe:	463e      	mov	r6, r7
 8009ac0:	4632      	mov	r2, r6
 8009ac2:	4641      	mov	r1, r8
 8009ac4:	6820      	ldr	r0, [r4, #0]
 8009ac6:	f000 faad 	bl	800a024 <memmove>
 8009aca:	68a3      	ldr	r3, [r4, #8]
 8009acc:	2000      	movs	r0, #0
 8009ace:	1b9b      	subs	r3, r3, r6
 8009ad0:	60a3      	str	r3, [r4, #8]
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	4433      	add	r3, r6
 8009ad6:	6023      	str	r3, [r4, #0]
 8009ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009adc:	462a      	mov	r2, r5
 8009ade:	f000 fad9 	bl	800a094 <_realloc_r>
 8009ae2:	4606      	mov	r6, r0
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	d1e0      	bne.n	8009aaa <__ssputs_r+0x5a>
 8009ae8:	6921      	ldr	r1, [r4, #16]
 8009aea:	4650      	mov	r0, sl
 8009aec:	f7ff feb8 	bl	8009860 <_free_r>
 8009af0:	230c      	movs	r3, #12
 8009af2:	f04f 30ff 	mov.w	r0, #4294967295
 8009af6:	f8ca 3000 	str.w	r3, [sl]
 8009afa:	89a3      	ldrh	r3, [r4, #12]
 8009afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b00:	81a3      	strh	r3, [r4, #12]
 8009b02:	e7e9      	b.n	8009ad8 <__ssputs_r+0x88>

08009b04 <_svfiprintf_r>:
 8009b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b08:	4698      	mov	r8, r3
 8009b0a:	898b      	ldrh	r3, [r1, #12]
 8009b0c:	b09d      	sub	sp, #116	; 0x74
 8009b0e:	4607      	mov	r7, r0
 8009b10:	061b      	lsls	r3, r3, #24
 8009b12:	460d      	mov	r5, r1
 8009b14:	4614      	mov	r4, r2
 8009b16:	d50e      	bpl.n	8009b36 <_svfiprintf_r+0x32>
 8009b18:	690b      	ldr	r3, [r1, #16]
 8009b1a:	b963      	cbnz	r3, 8009b36 <_svfiprintf_r+0x32>
 8009b1c:	2140      	movs	r1, #64	; 0x40
 8009b1e:	f7ff ff0b 	bl	8009938 <_malloc_r>
 8009b22:	6028      	str	r0, [r5, #0]
 8009b24:	6128      	str	r0, [r5, #16]
 8009b26:	b920      	cbnz	r0, 8009b32 <_svfiprintf_r+0x2e>
 8009b28:	230c      	movs	r3, #12
 8009b2a:	603b      	str	r3, [r7, #0]
 8009b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b30:	e0d0      	b.n	8009cd4 <_svfiprintf_r+0x1d0>
 8009b32:	2340      	movs	r3, #64	; 0x40
 8009b34:	616b      	str	r3, [r5, #20]
 8009b36:	2300      	movs	r3, #0
 8009b38:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b3c:	f04f 0901 	mov.w	r9, #1
 8009b40:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009cec <_svfiprintf_r+0x1e8>
 8009b44:	9309      	str	r3, [sp, #36]	; 0x24
 8009b46:	2320      	movs	r3, #32
 8009b48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b4c:	2330      	movs	r3, #48	; 0x30
 8009b4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b52:	4623      	mov	r3, r4
 8009b54:	469a      	mov	sl, r3
 8009b56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b5a:	b10a      	cbz	r2, 8009b60 <_svfiprintf_r+0x5c>
 8009b5c:	2a25      	cmp	r2, #37	; 0x25
 8009b5e:	d1f9      	bne.n	8009b54 <_svfiprintf_r+0x50>
 8009b60:	ebba 0b04 	subs.w	fp, sl, r4
 8009b64:	d00b      	beq.n	8009b7e <_svfiprintf_r+0x7a>
 8009b66:	465b      	mov	r3, fp
 8009b68:	4622      	mov	r2, r4
 8009b6a:	4629      	mov	r1, r5
 8009b6c:	4638      	mov	r0, r7
 8009b6e:	f7ff ff6f 	bl	8009a50 <__ssputs_r>
 8009b72:	3001      	adds	r0, #1
 8009b74:	f000 80a9 	beq.w	8009cca <_svfiprintf_r+0x1c6>
 8009b78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b7a:	445a      	add	r2, fp
 8009b7c:	9209      	str	r2, [sp, #36]	; 0x24
 8009b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f000 80a1 	beq.w	8009cca <_svfiprintf_r+0x1c6>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b8e:	f10a 0a01 	add.w	sl, sl, #1
 8009b92:	9304      	str	r3, [sp, #16]
 8009b94:	9307      	str	r3, [sp, #28]
 8009b96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b9a:	931a      	str	r3, [sp, #104]	; 0x68
 8009b9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ba0:	4654      	mov	r4, sl
 8009ba2:	2205      	movs	r2, #5
 8009ba4:	4851      	ldr	r0, [pc, #324]	; (8009cec <_svfiprintf_r+0x1e8>)
 8009ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009baa:	f000 fa65 	bl	800a078 <memchr>
 8009bae:	9a04      	ldr	r2, [sp, #16]
 8009bb0:	b9d8      	cbnz	r0, 8009bea <_svfiprintf_r+0xe6>
 8009bb2:	06d0      	lsls	r0, r2, #27
 8009bb4:	bf44      	itt	mi
 8009bb6:	2320      	movmi	r3, #32
 8009bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bbc:	0711      	lsls	r1, r2, #28
 8009bbe:	bf44      	itt	mi
 8009bc0:	232b      	movmi	r3, #43	; 0x2b
 8009bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8009bca:	2b2a      	cmp	r3, #42	; 0x2a
 8009bcc:	d015      	beq.n	8009bfa <_svfiprintf_r+0xf6>
 8009bce:	9a07      	ldr	r2, [sp, #28]
 8009bd0:	4654      	mov	r4, sl
 8009bd2:	2000      	movs	r0, #0
 8009bd4:	f04f 0c0a 	mov.w	ip, #10
 8009bd8:	4621      	mov	r1, r4
 8009bda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bde:	3b30      	subs	r3, #48	; 0x30
 8009be0:	2b09      	cmp	r3, #9
 8009be2:	d94d      	bls.n	8009c80 <_svfiprintf_r+0x17c>
 8009be4:	b1b0      	cbz	r0, 8009c14 <_svfiprintf_r+0x110>
 8009be6:	9207      	str	r2, [sp, #28]
 8009be8:	e014      	b.n	8009c14 <_svfiprintf_r+0x110>
 8009bea:	eba0 0308 	sub.w	r3, r0, r8
 8009bee:	46a2      	mov	sl, r4
 8009bf0:	fa09 f303 	lsl.w	r3, r9, r3
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	9304      	str	r3, [sp, #16]
 8009bf8:	e7d2      	b.n	8009ba0 <_svfiprintf_r+0x9c>
 8009bfa:	9b03      	ldr	r3, [sp, #12]
 8009bfc:	1d19      	adds	r1, r3, #4
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	9103      	str	r1, [sp, #12]
 8009c04:	bfbb      	ittet	lt
 8009c06:	425b      	neglt	r3, r3
 8009c08:	f042 0202 	orrlt.w	r2, r2, #2
 8009c0c:	9307      	strge	r3, [sp, #28]
 8009c0e:	9307      	strlt	r3, [sp, #28]
 8009c10:	bfb8      	it	lt
 8009c12:	9204      	strlt	r2, [sp, #16]
 8009c14:	7823      	ldrb	r3, [r4, #0]
 8009c16:	2b2e      	cmp	r3, #46	; 0x2e
 8009c18:	d10c      	bne.n	8009c34 <_svfiprintf_r+0x130>
 8009c1a:	7863      	ldrb	r3, [r4, #1]
 8009c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8009c1e:	d134      	bne.n	8009c8a <_svfiprintf_r+0x186>
 8009c20:	9b03      	ldr	r3, [sp, #12]
 8009c22:	3402      	adds	r4, #2
 8009c24:	1d1a      	adds	r2, r3, #4
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	9203      	str	r2, [sp, #12]
 8009c2c:	bfb8      	it	lt
 8009c2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c32:	9305      	str	r3, [sp, #20]
 8009c34:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009cfc <_svfiprintf_r+0x1f8>
 8009c38:	2203      	movs	r2, #3
 8009c3a:	7821      	ldrb	r1, [r4, #0]
 8009c3c:	4650      	mov	r0, sl
 8009c3e:	f000 fa1b 	bl	800a078 <memchr>
 8009c42:	b138      	cbz	r0, 8009c54 <_svfiprintf_r+0x150>
 8009c44:	eba0 000a 	sub.w	r0, r0, sl
 8009c48:	2240      	movs	r2, #64	; 0x40
 8009c4a:	9b04      	ldr	r3, [sp, #16]
 8009c4c:	3401      	adds	r4, #1
 8009c4e:	4082      	lsls	r2, r0
 8009c50:	4313      	orrs	r3, r2
 8009c52:	9304      	str	r3, [sp, #16]
 8009c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c58:	2206      	movs	r2, #6
 8009c5a:	4825      	ldr	r0, [pc, #148]	; (8009cf0 <_svfiprintf_r+0x1ec>)
 8009c5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c60:	f000 fa0a 	bl	800a078 <memchr>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	d038      	beq.n	8009cda <_svfiprintf_r+0x1d6>
 8009c68:	4b22      	ldr	r3, [pc, #136]	; (8009cf4 <_svfiprintf_r+0x1f0>)
 8009c6a:	bb1b      	cbnz	r3, 8009cb4 <_svfiprintf_r+0x1b0>
 8009c6c:	9b03      	ldr	r3, [sp, #12]
 8009c6e:	3307      	adds	r3, #7
 8009c70:	f023 0307 	bic.w	r3, r3, #7
 8009c74:	3308      	adds	r3, #8
 8009c76:	9303      	str	r3, [sp, #12]
 8009c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c7a:	4433      	add	r3, r6
 8009c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c7e:	e768      	b.n	8009b52 <_svfiprintf_r+0x4e>
 8009c80:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c84:	460c      	mov	r4, r1
 8009c86:	2001      	movs	r0, #1
 8009c88:	e7a6      	b.n	8009bd8 <_svfiprintf_r+0xd4>
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	3401      	adds	r4, #1
 8009c8e:	f04f 0c0a 	mov.w	ip, #10
 8009c92:	4619      	mov	r1, r3
 8009c94:	9305      	str	r3, [sp, #20]
 8009c96:	4620      	mov	r0, r4
 8009c98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c9c:	3a30      	subs	r2, #48	; 0x30
 8009c9e:	2a09      	cmp	r2, #9
 8009ca0:	d903      	bls.n	8009caa <_svfiprintf_r+0x1a6>
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d0c6      	beq.n	8009c34 <_svfiprintf_r+0x130>
 8009ca6:	9105      	str	r1, [sp, #20]
 8009ca8:	e7c4      	b.n	8009c34 <_svfiprintf_r+0x130>
 8009caa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cae:	4604      	mov	r4, r0
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e7f0      	b.n	8009c96 <_svfiprintf_r+0x192>
 8009cb4:	ab03      	add	r3, sp, #12
 8009cb6:	462a      	mov	r2, r5
 8009cb8:	a904      	add	r1, sp, #16
 8009cba:	4638      	mov	r0, r7
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	4b0e      	ldr	r3, [pc, #56]	; (8009cf8 <_svfiprintf_r+0x1f4>)
 8009cc0:	f3af 8000 	nop.w
 8009cc4:	1c42      	adds	r2, r0, #1
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	d1d6      	bne.n	8009c78 <_svfiprintf_r+0x174>
 8009cca:	89ab      	ldrh	r3, [r5, #12]
 8009ccc:	065b      	lsls	r3, r3, #25
 8009cce:	f53f af2d 	bmi.w	8009b2c <_svfiprintf_r+0x28>
 8009cd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cd4:	b01d      	add	sp, #116	; 0x74
 8009cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cda:	ab03      	add	r3, sp, #12
 8009cdc:	462a      	mov	r2, r5
 8009cde:	a904      	add	r1, sp, #16
 8009ce0:	4638      	mov	r0, r7
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	4b04      	ldr	r3, [pc, #16]	; (8009cf8 <_svfiprintf_r+0x1f4>)
 8009ce6:	f000 f87d 	bl	8009de4 <_printf_i>
 8009cea:	e7eb      	b.n	8009cc4 <_svfiprintf_r+0x1c0>
 8009cec:	0801f670 	.word	0x0801f670
 8009cf0:	0801f67a 	.word	0x0801f67a
 8009cf4:	00000000 	.word	0x00000000
 8009cf8:	08009a51 	.word	0x08009a51
 8009cfc:	0801f676 	.word	0x0801f676

08009d00 <_printf_common>:
 8009d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d04:	4616      	mov	r6, r2
 8009d06:	4699      	mov	r9, r3
 8009d08:	688a      	ldr	r2, [r1, #8]
 8009d0a:	4607      	mov	r7, r0
 8009d0c:	690b      	ldr	r3, [r1, #16]
 8009d0e:	460c      	mov	r4, r1
 8009d10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d14:	4293      	cmp	r3, r2
 8009d16:	bfb8      	it	lt
 8009d18:	4613      	movlt	r3, r2
 8009d1a:	6033      	str	r3, [r6, #0]
 8009d1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d20:	b10a      	cbz	r2, 8009d26 <_printf_common+0x26>
 8009d22:	3301      	adds	r3, #1
 8009d24:	6033      	str	r3, [r6, #0]
 8009d26:	6823      	ldr	r3, [r4, #0]
 8009d28:	0699      	lsls	r1, r3, #26
 8009d2a:	bf42      	ittt	mi
 8009d2c:	6833      	ldrmi	r3, [r6, #0]
 8009d2e:	3302      	addmi	r3, #2
 8009d30:	6033      	strmi	r3, [r6, #0]
 8009d32:	6825      	ldr	r5, [r4, #0]
 8009d34:	f015 0506 	ands.w	r5, r5, #6
 8009d38:	d106      	bne.n	8009d48 <_printf_common+0x48>
 8009d3a:	f104 0a19 	add.w	sl, r4, #25
 8009d3e:	68e3      	ldr	r3, [r4, #12]
 8009d40:	6832      	ldr	r2, [r6, #0]
 8009d42:	1a9b      	subs	r3, r3, r2
 8009d44:	42ab      	cmp	r3, r5
 8009d46:	dc2b      	bgt.n	8009da0 <_printf_common+0xa0>
 8009d48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d4c:	1e13      	subs	r3, r2, #0
 8009d4e:	6822      	ldr	r2, [r4, #0]
 8009d50:	bf18      	it	ne
 8009d52:	2301      	movne	r3, #1
 8009d54:	0692      	lsls	r2, r2, #26
 8009d56:	d430      	bmi.n	8009dba <_printf_common+0xba>
 8009d58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d5c:	4649      	mov	r1, r9
 8009d5e:	4638      	mov	r0, r7
 8009d60:	47c0      	blx	r8
 8009d62:	3001      	adds	r0, #1
 8009d64:	d023      	beq.n	8009dae <_printf_common+0xae>
 8009d66:	6823      	ldr	r3, [r4, #0]
 8009d68:	341a      	adds	r4, #26
 8009d6a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009d6e:	f003 0306 	and.w	r3, r3, #6
 8009d72:	2b04      	cmp	r3, #4
 8009d74:	bf0a      	itet	eq
 8009d76:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009d7a:	2500      	movne	r5, #0
 8009d7c:	6833      	ldreq	r3, [r6, #0]
 8009d7e:	f04f 0600 	mov.w	r6, #0
 8009d82:	bf08      	it	eq
 8009d84:	1aed      	subeq	r5, r5, r3
 8009d86:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009d8a:	bf08      	it	eq
 8009d8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d90:	4293      	cmp	r3, r2
 8009d92:	bfc4      	itt	gt
 8009d94:	1a9b      	subgt	r3, r3, r2
 8009d96:	18ed      	addgt	r5, r5, r3
 8009d98:	42b5      	cmp	r5, r6
 8009d9a:	d11a      	bne.n	8009dd2 <_printf_common+0xd2>
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	e008      	b.n	8009db2 <_printf_common+0xb2>
 8009da0:	2301      	movs	r3, #1
 8009da2:	4652      	mov	r2, sl
 8009da4:	4649      	mov	r1, r9
 8009da6:	4638      	mov	r0, r7
 8009da8:	47c0      	blx	r8
 8009daa:	3001      	adds	r0, #1
 8009dac:	d103      	bne.n	8009db6 <_printf_common+0xb6>
 8009dae:	f04f 30ff 	mov.w	r0, #4294967295
 8009db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009db6:	3501      	adds	r5, #1
 8009db8:	e7c1      	b.n	8009d3e <_printf_common+0x3e>
 8009dba:	18e1      	adds	r1, r4, r3
 8009dbc:	1c5a      	adds	r2, r3, #1
 8009dbe:	2030      	movs	r0, #48	; 0x30
 8009dc0:	3302      	adds	r3, #2
 8009dc2:	4422      	add	r2, r4
 8009dc4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009dcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009dd0:	e7c2      	b.n	8009d58 <_printf_common+0x58>
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	4622      	mov	r2, r4
 8009dd6:	4649      	mov	r1, r9
 8009dd8:	4638      	mov	r0, r7
 8009dda:	47c0      	blx	r8
 8009ddc:	3001      	adds	r0, #1
 8009dde:	d0e6      	beq.n	8009dae <_printf_common+0xae>
 8009de0:	3601      	adds	r6, #1
 8009de2:	e7d9      	b.n	8009d98 <_printf_common+0x98>

08009de4 <_printf_i>:
 8009de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009de8:	7e0f      	ldrb	r7, [r1, #24]
 8009dea:	4691      	mov	r9, r2
 8009dec:	4680      	mov	r8, r0
 8009dee:	460c      	mov	r4, r1
 8009df0:	2f78      	cmp	r7, #120	; 0x78
 8009df2:	469a      	mov	sl, r3
 8009df4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009df6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009dfa:	d807      	bhi.n	8009e0c <_printf_i+0x28>
 8009dfc:	2f62      	cmp	r7, #98	; 0x62
 8009dfe:	d80a      	bhi.n	8009e16 <_printf_i+0x32>
 8009e00:	2f00      	cmp	r7, #0
 8009e02:	f000 80d3 	beq.w	8009fac <_printf_i+0x1c8>
 8009e06:	2f58      	cmp	r7, #88	; 0x58
 8009e08:	f000 80bf 	beq.w	8009f8a <_printf_i+0x1a6>
 8009e0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e14:	e03a      	b.n	8009e8c <_printf_i+0xa8>
 8009e16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e1a:	2b15      	cmp	r3, #21
 8009e1c:	d8f6      	bhi.n	8009e0c <_printf_i+0x28>
 8009e1e:	a101      	add	r1, pc, #4	; (adr r1, 8009e24 <_printf_i+0x40>)
 8009e20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e24:	08009e7d 	.word	0x08009e7d
 8009e28:	08009e91 	.word	0x08009e91
 8009e2c:	08009e0d 	.word	0x08009e0d
 8009e30:	08009e0d 	.word	0x08009e0d
 8009e34:	08009e0d 	.word	0x08009e0d
 8009e38:	08009e0d 	.word	0x08009e0d
 8009e3c:	08009e91 	.word	0x08009e91
 8009e40:	08009e0d 	.word	0x08009e0d
 8009e44:	08009e0d 	.word	0x08009e0d
 8009e48:	08009e0d 	.word	0x08009e0d
 8009e4c:	08009e0d 	.word	0x08009e0d
 8009e50:	08009f93 	.word	0x08009f93
 8009e54:	08009ebd 	.word	0x08009ebd
 8009e58:	08009f4f 	.word	0x08009f4f
 8009e5c:	08009e0d 	.word	0x08009e0d
 8009e60:	08009e0d 	.word	0x08009e0d
 8009e64:	08009fb5 	.word	0x08009fb5
 8009e68:	08009e0d 	.word	0x08009e0d
 8009e6c:	08009ebd 	.word	0x08009ebd
 8009e70:	08009e0d 	.word	0x08009e0d
 8009e74:	08009e0d 	.word	0x08009e0d
 8009e78:	08009f57 	.word	0x08009f57
 8009e7c:	682b      	ldr	r3, [r5, #0]
 8009e7e:	1d1a      	adds	r2, r3, #4
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	602a      	str	r2, [r5, #0]
 8009e84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e09e      	b.n	8009fce <_printf_i+0x1ea>
 8009e90:	6820      	ldr	r0, [r4, #0]
 8009e92:	682b      	ldr	r3, [r5, #0]
 8009e94:	0607      	lsls	r7, r0, #24
 8009e96:	f103 0104 	add.w	r1, r3, #4
 8009e9a:	6029      	str	r1, [r5, #0]
 8009e9c:	d501      	bpl.n	8009ea2 <_printf_i+0xbe>
 8009e9e:	681e      	ldr	r6, [r3, #0]
 8009ea0:	e003      	b.n	8009eaa <_printf_i+0xc6>
 8009ea2:	0646      	lsls	r6, r0, #25
 8009ea4:	d5fb      	bpl.n	8009e9e <_printf_i+0xba>
 8009ea6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009eaa:	2e00      	cmp	r6, #0
 8009eac:	da03      	bge.n	8009eb6 <_printf_i+0xd2>
 8009eae:	232d      	movs	r3, #45	; 0x2d
 8009eb0:	4276      	negs	r6, r6
 8009eb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eb6:	4859      	ldr	r0, [pc, #356]	; (800a01c <_printf_i+0x238>)
 8009eb8:	230a      	movs	r3, #10
 8009eba:	e012      	b.n	8009ee2 <_printf_i+0xfe>
 8009ebc:	682b      	ldr	r3, [r5, #0]
 8009ebe:	6820      	ldr	r0, [r4, #0]
 8009ec0:	1d19      	adds	r1, r3, #4
 8009ec2:	6029      	str	r1, [r5, #0]
 8009ec4:	0605      	lsls	r5, r0, #24
 8009ec6:	d501      	bpl.n	8009ecc <_printf_i+0xe8>
 8009ec8:	681e      	ldr	r6, [r3, #0]
 8009eca:	e002      	b.n	8009ed2 <_printf_i+0xee>
 8009ecc:	0641      	lsls	r1, r0, #25
 8009ece:	d5fb      	bpl.n	8009ec8 <_printf_i+0xe4>
 8009ed0:	881e      	ldrh	r6, [r3, #0]
 8009ed2:	2f6f      	cmp	r7, #111	; 0x6f
 8009ed4:	4851      	ldr	r0, [pc, #324]	; (800a01c <_printf_i+0x238>)
 8009ed6:	bf0c      	ite	eq
 8009ed8:	2308      	moveq	r3, #8
 8009eda:	230a      	movne	r3, #10
 8009edc:	2100      	movs	r1, #0
 8009ede:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ee2:	6865      	ldr	r5, [r4, #4]
 8009ee4:	2d00      	cmp	r5, #0
 8009ee6:	60a5      	str	r5, [r4, #8]
 8009ee8:	bfa2      	ittt	ge
 8009eea:	6821      	ldrge	r1, [r4, #0]
 8009eec:	f021 0104 	bicge.w	r1, r1, #4
 8009ef0:	6021      	strge	r1, [r4, #0]
 8009ef2:	b90e      	cbnz	r6, 8009ef8 <_printf_i+0x114>
 8009ef4:	2d00      	cmp	r5, #0
 8009ef6:	d04a      	beq.n	8009f8e <_printf_i+0x1aa>
 8009ef8:	4615      	mov	r5, r2
 8009efa:	fbb6 f1f3 	udiv	r1, r6, r3
 8009efe:	fb03 6711 	mls	r7, r3, r1, r6
 8009f02:	5dc7      	ldrb	r7, [r0, r7]
 8009f04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f08:	4637      	mov	r7, r6
 8009f0a:	460e      	mov	r6, r1
 8009f0c:	42bb      	cmp	r3, r7
 8009f0e:	d9f4      	bls.n	8009efa <_printf_i+0x116>
 8009f10:	2b08      	cmp	r3, #8
 8009f12:	d10b      	bne.n	8009f2c <_printf_i+0x148>
 8009f14:	6823      	ldr	r3, [r4, #0]
 8009f16:	07de      	lsls	r6, r3, #31
 8009f18:	d508      	bpl.n	8009f2c <_printf_i+0x148>
 8009f1a:	6923      	ldr	r3, [r4, #16]
 8009f1c:	6861      	ldr	r1, [r4, #4]
 8009f1e:	4299      	cmp	r1, r3
 8009f20:	bfde      	ittt	le
 8009f22:	2330      	movle	r3, #48	; 0x30
 8009f24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f2c:	1b52      	subs	r2, r2, r5
 8009f2e:	6122      	str	r2, [r4, #16]
 8009f30:	464b      	mov	r3, r9
 8009f32:	aa03      	add	r2, sp, #12
 8009f34:	4621      	mov	r1, r4
 8009f36:	4640      	mov	r0, r8
 8009f38:	f8cd a000 	str.w	sl, [sp]
 8009f3c:	f7ff fee0 	bl	8009d00 <_printf_common>
 8009f40:	3001      	adds	r0, #1
 8009f42:	d149      	bne.n	8009fd8 <_printf_i+0x1f4>
 8009f44:	f04f 30ff 	mov.w	r0, #4294967295
 8009f48:	b004      	add	sp, #16
 8009f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	f043 0320 	orr.w	r3, r3, #32
 8009f54:	6023      	str	r3, [r4, #0]
 8009f56:	2778      	movs	r7, #120	; 0x78
 8009f58:	4831      	ldr	r0, [pc, #196]	; (800a020 <_printf_i+0x23c>)
 8009f5a:	6823      	ldr	r3, [r4, #0]
 8009f5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f60:	061f      	lsls	r7, r3, #24
 8009f62:	6829      	ldr	r1, [r5, #0]
 8009f64:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f68:	d402      	bmi.n	8009f70 <_printf_i+0x18c>
 8009f6a:	065f      	lsls	r7, r3, #25
 8009f6c:	bf48      	it	mi
 8009f6e:	b2b6      	uxthmi	r6, r6
 8009f70:	07df      	lsls	r7, r3, #31
 8009f72:	6029      	str	r1, [r5, #0]
 8009f74:	bf44      	itt	mi
 8009f76:	f043 0320 	orrmi.w	r3, r3, #32
 8009f7a:	6023      	strmi	r3, [r4, #0]
 8009f7c:	b91e      	cbnz	r6, 8009f86 <_printf_i+0x1a2>
 8009f7e:	6823      	ldr	r3, [r4, #0]
 8009f80:	f023 0320 	bic.w	r3, r3, #32
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	2310      	movs	r3, #16
 8009f88:	e7a8      	b.n	8009edc <_printf_i+0xf8>
 8009f8a:	4824      	ldr	r0, [pc, #144]	; (800a01c <_printf_i+0x238>)
 8009f8c:	e7e5      	b.n	8009f5a <_printf_i+0x176>
 8009f8e:	4615      	mov	r5, r2
 8009f90:	e7be      	b.n	8009f10 <_printf_i+0x12c>
 8009f92:	682b      	ldr	r3, [r5, #0]
 8009f94:	6826      	ldr	r6, [r4, #0]
 8009f96:	1d18      	adds	r0, r3, #4
 8009f98:	6961      	ldr	r1, [r4, #20]
 8009f9a:	6028      	str	r0, [r5, #0]
 8009f9c:	0635      	lsls	r5, r6, #24
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	d501      	bpl.n	8009fa6 <_printf_i+0x1c2>
 8009fa2:	6019      	str	r1, [r3, #0]
 8009fa4:	e002      	b.n	8009fac <_printf_i+0x1c8>
 8009fa6:	0670      	lsls	r0, r6, #25
 8009fa8:	d5fb      	bpl.n	8009fa2 <_printf_i+0x1be>
 8009faa:	8019      	strh	r1, [r3, #0]
 8009fac:	2300      	movs	r3, #0
 8009fae:	4615      	mov	r5, r2
 8009fb0:	6123      	str	r3, [r4, #16]
 8009fb2:	e7bd      	b.n	8009f30 <_printf_i+0x14c>
 8009fb4:	682b      	ldr	r3, [r5, #0]
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	1d1a      	adds	r2, r3, #4
 8009fba:	602a      	str	r2, [r5, #0]
 8009fbc:	681d      	ldr	r5, [r3, #0]
 8009fbe:	6862      	ldr	r2, [r4, #4]
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	f000 f859 	bl	800a078 <memchr>
 8009fc6:	b108      	cbz	r0, 8009fcc <_printf_i+0x1e8>
 8009fc8:	1b40      	subs	r0, r0, r5
 8009fca:	6060      	str	r0, [r4, #4]
 8009fcc:	6863      	ldr	r3, [r4, #4]
 8009fce:	6123      	str	r3, [r4, #16]
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fd6:	e7ab      	b.n	8009f30 <_printf_i+0x14c>
 8009fd8:	6923      	ldr	r3, [r4, #16]
 8009fda:	462a      	mov	r2, r5
 8009fdc:	4649      	mov	r1, r9
 8009fde:	4640      	mov	r0, r8
 8009fe0:	47d0      	blx	sl
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	d0ae      	beq.n	8009f44 <_printf_i+0x160>
 8009fe6:	6823      	ldr	r3, [r4, #0]
 8009fe8:	079b      	lsls	r3, r3, #30
 8009fea:	d413      	bmi.n	800a014 <_printf_i+0x230>
 8009fec:	68e0      	ldr	r0, [r4, #12]
 8009fee:	9b03      	ldr	r3, [sp, #12]
 8009ff0:	4298      	cmp	r0, r3
 8009ff2:	bfb8      	it	lt
 8009ff4:	4618      	movlt	r0, r3
 8009ff6:	e7a7      	b.n	8009f48 <_printf_i+0x164>
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	4632      	mov	r2, r6
 8009ffc:	4649      	mov	r1, r9
 8009ffe:	4640      	mov	r0, r8
 800a000:	47d0      	blx	sl
 800a002:	3001      	adds	r0, #1
 800a004:	d09e      	beq.n	8009f44 <_printf_i+0x160>
 800a006:	3501      	adds	r5, #1
 800a008:	68e3      	ldr	r3, [r4, #12]
 800a00a:	9903      	ldr	r1, [sp, #12]
 800a00c:	1a5b      	subs	r3, r3, r1
 800a00e:	42ab      	cmp	r3, r5
 800a010:	dcf2      	bgt.n	8009ff8 <_printf_i+0x214>
 800a012:	e7eb      	b.n	8009fec <_printf_i+0x208>
 800a014:	2500      	movs	r5, #0
 800a016:	f104 0619 	add.w	r6, r4, #25
 800a01a:	e7f5      	b.n	800a008 <_printf_i+0x224>
 800a01c:	0801f681 	.word	0x0801f681
 800a020:	0801f692 	.word	0x0801f692

0800a024 <memmove>:
 800a024:	4288      	cmp	r0, r1
 800a026:	b510      	push	{r4, lr}
 800a028:	eb01 0402 	add.w	r4, r1, r2
 800a02c:	d902      	bls.n	800a034 <memmove+0x10>
 800a02e:	4284      	cmp	r4, r0
 800a030:	4623      	mov	r3, r4
 800a032:	d807      	bhi.n	800a044 <memmove+0x20>
 800a034:	1e43      	subs	r3, r0, #1
 800a036:	42a1      	cmp	r1, r4
 800a038:	d008      	beq.n	800a04c <memmove+0x28>
 800a03a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a03e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a042:	e7f8      	b.n	800a036 <memmove+0x12>
 800a044:	4402      	add	r2, r0
 800a046:	4601      	mov	r1, r0
 800a048:	428a      	cmp	r2, r1
 800a04a:	d100      	bne.n	800a04e <memmove+0x2a>
 800a04c:	bd10      	pop	{r4, pc}
 800a04e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a052:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a056:	e7f7      	b.n	800a048 <memmove+0x24>

0800a058 <_sbrk_r>:
 800a058:	b538      	push	{r3, r4, r5, lr}
 800a05a:	2300      	movs	r3, #0
 800a05c:	4d05      	ldr	r5, [pc, #20]	; (800a074 <_sbrk_r+0x1c>)
 800a05e:	4604      	mov	r4, r0
 800a060:	4608      	mov	r0, r1
 800a062:	602b      	str	r3, [r5, #0]
 800a064:	f7f7 fbf0 	bl	8001848 <_sbrk>
 800a068:	1c43      	adds	r3, r0, #1
 800a06a:	d102      	bne.n	800a072 <_sbrk_r+0x1a>
 800a06c:	682b      	ldr	r3, [r5, #0]
 800a06e:	b103      	cbz	r3, 800a072 <_sbrk_r+0x1a>
 800a070:	6023      	str	r3, [r4, #0]
 800a072:	bd38      	pop	{r3, r4, r5, pc}
 800a074:	20000a30 	.word	0x20000a30

0800a078 <memchr>:
 800a078:	b2c9      	uxtb	r1, r1
 800a07a:	4402      	add	r2, r0
 800a07c:	b510      	push	{r4, lr}
 800a07e:	4290      	cmp	r0, r2
 800a080:	4603      	mov	r3, r0
 800a082:	d101      	bne.n	800a088 <memchr+0x10>
 800a084:	2300      	movs	r3, #0
 800a086:	e003      	b.n	800a090 <memchr+0x18>
 800a088:	781c      	ldrb	r4, [r3, #0]
 800a08a:	3001      	adds	r0, #1
 800a08c:	428c      	cmp	r4, r1
 800a08e:	d1f6      	bne.n	800a07e <memchr+0x6>
 800a090:	4618      	mov	r0, r3
 800a092:	bd10      	pop	{r4, pc}

0800a094 <_realloc_r>:
 800a094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a098:	4680      	mov	r8, r0
 800a09a:	4614      	mov	r4, r2
 800a09c:	460e      	mov	r6, r1
 800a09e:	b921      	cbnz	r1, 800a0aa <_realloc_r+0x16>
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a6:	f7ff bc47 	b.w	8009938 <_malloc_r>
 800a0aa:	b92a      	cbnz	r2, 800a0b8 <_realloc_r+0x24>
 800a0ac:	4625      	mov	r5, r4
 800a0ae:	f7ff fbd7 	bl	8009860 <_free_r>
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0b8:	f000 f81b 	bl	800a0f2 <_malloc_usable_size_r>
 800a0bc:	4284      	cmp	r4, r0
 800a0be:	4607      	mov	r7, r0
 800a0c0:	d802      	bhi.n	800a0c8 <_realloc_r+0x34>
 800a0c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a0c6:	d812      	bhi.n	800a0ee <_realloc_r+0x5a>
 800a0c8:	4621      	mov	r1, r4
 800a0ca:	4640      	mov	r0, r8
 800a0cc:	f7ff fc34 	bl	8009938 <_malloc_r>
 800a0d0:	4605      	mov	r5, r0
 800a0d2:	2800      	cmp	r0, #0
 800a0d4:	d0ed      	beq.n	800a0b2 <_realloc_r+0x1e>
 800a0d6:	42bc      	cmp	r4, r7
 800a0d8:	4622      	mov	r2, r4
 800a0da:	4631      	mov	r1, r6
 800a0dc:	bf28      	it	cs
 800a0de:	463a      	movcs	r2, r7
 800a0e0:	f7ff fbb0 	bl	8009844 <memcpy>
 800a0e4:	4631      	mov	r1, r6
 800a0e6:	4640      	mov	r0, r8
 800a0e8:	f7ff fbba 	bl	8009860 <_free_r>
 800a0ec:	e7e1      	b.n	800a0b2 <_realloc_r+0x1e>
 800a0ee:	4635      	mov	r5, r6
 800a0f0:	e7df      	b.n	800a0b2 <_realloc_r+0x1e>

0800a0f2 <_malloc_usable_size_r>:
 800a0f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0f6:	1f18      	subs	r0, r3, #4
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	bfbc      	itt	lt
 800a0fc:	580b      	ldrlt	r3, [r1, r0]
 800a0fe:	18c0      	addlt	r0, r0, r3
 800a100:	4770      	bx	lr
 800a102:	0000      	movs	r0, r0
 800a104:	0000      	movs	r0, r0
	...

0800a108 <exp>:
 800a108:	b538      	push	{r3, r4, r5, lr}
 800a10a:	ec55 4b10 	vmov	r4, r5, d0
 800a10e:	ed2d 8b02 	vpush	{d8}
 800a112:	f000 f86d 	bl	800a1f0 <__ieee754_exp>
 800a116:	eeb0 8a40 	vmov.f32	s16, s0
 800a11a:	eef0 8a60 	vmov.f32	s17, s1
 800a11e:	ec45 4b10 	vmov	d0, r4, r5
 800a122:	f000 f857 	bl	800a1d4 <finite>
 800a126:	b168      	cbz	r0, 800a144 <exp+0x3c>
 800a128:	4620      	mov	r0, r4
 800a12a:	4629      	mov	r1, r5
 800a12c:	a316      	add	r3, pc, #88	; (adr r3, 800a188 <exp+0x80>)
 800a12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a132:	f7f6 fd01 	bl	8000b38 <__aeabi_dcmpgt>
 800a136:	b160      	cbz	r0, 800a152 <exp+0x4a>
 800a138:	f7ff fb58 	bl	80097ec <__errno>
 800a13c:	2322      	movs	r3, #34	; 0x22
 800a13e:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800a178 <exp+0x70>
 800a142:	6003      	str	r3, [r0, #0]
 800a144:	eeb0 0a48 	vmov.f32	s0, s16
 800a148:	eef0 0a68 	vmov.f32	s1, s17
 800a14c:	ecbd 8b02 	vpop	{d8}
 800a150:	bd38      	pop	{r3, r4, r5, pc}
 800a152:	a30f      	add	r3, pc, #60	; (adr r3, 800a190 <exp+0x88>)
 800a154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a158:	4620      	mov	r0, r4
 800a15a:	4629      	mov	r1, r5
 800a15c:	f7f6 fcce 	bl	8000afc <__aeabi_dcmplt>
 800a160:	2800      	cmp	r0, #0
 800a162:	d0ef      	beq.n	800a144 <exp+0x3c>
 800a164:	f7ff fb42 	bl	80097ec <__errno>
 800a168:	2322      	movs	r3, #34	; 0x22
 800a16a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800a180 <exp+0x78>
 800a16e:	6003      	str	r3, [r0, #0]
 800a170:	e7e8      	b.n	800a144 <exp+0x3c>
 800a172:	bf00      	nop
 800a174:	f3af 8000 	nop.w
 800a178:	00000000 	.word	0x00000000
 800a17c:	7ff00000 	.word	0x7ff00000
	...
 800a188:	fefa39ef 	.word	0xfefa39ef
 800a18c:	40862e42 	.word	0x40862e42
 800a190:	d52d3051 	.word	0xd52d3051
 800a194:	c0874910 	.word	0xc0874910

0800a198 <sqrtf>:
 800a198:	b508      	push	{r3, lr}
 800a19a:	ed2d 8b02 	vpush	{d8}
 800a19e:	eeb0 8a40 	vmov.f32	s16, s0
 800a1a2:	f000 f822 	bl	800a1ea <__ieee754_sqrtf>
 800a1a6:	eeb4 8a48 	vcmp.f32	s16, s16
 800a1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1ae:	d60c      	bvs.n	800a1ca <sqrtf+0x32>
 800a1b0:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a1d0 <sqrtf+0x38>
 800a1b4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a1b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1bc:	d505      	bpl.n	800a1ca <sqrtf+0x32>
 800a1be:	f7ff fb15 	bl	80097ec <__errno>
 800a1c2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a1c6:	2321      	movs	r3, #33	; 0x21
 800a1c8:	6003      	str	r3, [r0, #0]
 800a1ca:	ecbd 8b02 	vpop	{d8}
 800a1ce:	bd08      	pop	{r3, pc}
 800a1d0:	00000000 	.word	0x00000000

0800a1d4 <finite>:
 800a1d4:	b082      	sub	sp, #8
 800a1d6:	ed8d 0b00 	vstr	d0, [sp]
 800a1da:	9801      	ldr	r0, [sp, #4]
 800a1dc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a1e0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a1e4:	0fc0      	lsrs	r0, r0, #31
 800a1e6:	b002      	add	sp, #8
 800a1e8:	4770      	bx	lr

0800a1ea <__ieee754_sqrtf>:
 800a1ea:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a1ee:	4770      	bx	lr

0800a1f0 <__ieee754_exp>:
 800a1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1f4:	ec55 4b10 	vmov	r4, r5, d0
 800a1f8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800a1fc:	49b2      	ldr	r1, [pc, #712]	; (800a4c8 <__ieee754_exp+0x2d8>)
 800a1fe:	0fee      	lsrs	r6, r5, #31
 800a200:	428a      	cmp	r2, r1
 800a202:	ed2d 8b04 	vpush	{d8-d9}
 800a206:	d93b      	bls.n	800a280 <__ieee754_exp+0x90>
 800a208:	49b0      	ldr	r1, [pc, #704]	; (800a4cc <__ieee754_exp+0x2dc>)
 800a20a:	428a      	cmp	r2, r1
 800a20c:	d916      	bls.n	800a23c <__ieee754_exp+0x4c>
 800a20e:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a212:	ee10 2a10 	vmov	r2, s0
 800a216:	4323      	orrs	r3, r4
 800a218:	d007      	beq.n	800a22a <__ieee754_exp+0x3a>
 800a21a:	462b      	mov	r3, r5
 800a21c:	4620      	mov	r0, r4
 800a21e:	4629      	mov	r1, r5
 800a220:	f7f6 f844 	bl	80002ac <__adddf3>
 800a224:	4604      	mov	r4, r0
 800a226:	460d      	mov	r5, r1
 800a228:	e002      	b.n	800a230 <__ieee754_exp+0x40>
 800a22a:	b10e      	cbz	r6, 800a230 <__ieee754_exp+0x40>
 800a22c:	2400      	movs	r4, #0
 800a22e:	2500      	movs	r5, #0
 800a230:	ecbd 8b04 	vpop	{d8-d9}
 800a234:	ec45 4b10 	vmov	d0, r4, r5
 800a238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a23c:	a38c      	add	r3, pc, #560	; (adr r3, 800a470 <__ieee754_exp+0x280>)
 800a23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a242:	ee10 0a10 	vmov	r0, s0
 800a246:	4629      	mov	r1, r5
 800a248:	f7f6 fc76 	bl	8000b38 <__aeabi_dcmpgt>
 800a24c:	4607      	mov	r7, r0
 800a24e:	b130      	cbz	r0, 800a25e <__ieee754_exp+0x6e>
 800a250:	2000      	movs	r0, #0
 800a252:	ecbd 8b04 	vpop	{d8-d9}
 800a256:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a25a:	f000 b96e 	b.w	800a53a <__math_oflow>
 800a25e:	a386      	add	r3, pc, #536	; (adr r3, 800a478 <__ieee754_exp+0x288>)
 800a260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a264:	4620      	mov	r0, r4
 800a266:	4629      	mov	r1, r5
 800a268:	f7f6 fc48 	bl	8000afc <__aeabi_dcmplt>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	f000 808b 	beq.w	800a388 <__ieee754_exp+0x198>
 800a272:	4638      	mov	r0, r7
 800a274:	ecbd 8b04 	vpop	{d8-d9}
 800a278:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a27c:	f000 b954 	b.w	800a528 <__math_uflow>
 800a280:	4b93      	ldr	r3, [pc, #588]	; (800a4d0 <__ieee754_exp+0x2e0>)
 800a282:	429a      	cmp	r2, r3
 800a284:	f240 80ac 	bls.w	800a3e0 <__ieee754_exp+0x1f0>
 800a288:	4b92      	ldr	r3, [pc, #584]	; (800a4d4 <__ieee754_exp+0x2e4>)
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d87c      	bhi.n	800a388 <__ieee754_exp+0x198>
 800a28e:	4b92      	ldr	r3, [pc, #584]	; (800a4d8 <__ieee754_exp+0x2e8>)
 800a290:	ee10 0a10 	vmov	r0, s0
 800a294:	4629      	mov	r1, r5
 800a296:	00f7      	lsls	r7, r6, #3
 800a298:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a29c:	f1c6 0a01 	rsb	sl, r6, #1
 800a2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a4:	f7f6 f800 	bl	80002a8 <__aeabi_dsub>
 800a2a8:	4b8c      	ldr	r3, [pc, #560]	; (800a4dc <__ieee754_exp+0x2ec>)
 800a2aa:	4680      	mov	r8, r0
 800a2ac:	4689      	mov	r9, r1
 800a2ae:	443b      	add	r3, r7
 800a2b0:	ebaa 0a06 	sub.w	sl, sl, r6
 800a2b4:	ed93 7b00 	vldr	d7, [r3]
 800a2b8:	eeb0 8a47 	vmov.f32	s16, s14
 800a2bc:	eef0 8a67 	vmov.f32	s17, s15
 800a2c0:	4640      	mov	r0, r8
 800a2c2:	4649      	mov	r1, r9
 800a2c4:	ec53 2b18 	vmov	r2, r3, d8
 800a2c8:	f7f5 ffee 	bl	80002a8 <__aeabi_dsub>
 800a2cc:	4604      	mov	r4, r0
 800a2ce:	460d      	mov	r5, r1
 800a2d0:	4622      	mov	r2, r4
 800a2d2:	462b      	mov	r3, r5
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	f7f6 f99e 	bl	8000618 <__aeabi_dmul>
 800a2dc:	4606      	mov	r6, r0
 800a2de:	460f      	mov	r7, r1
 800a2e0:	a367      	add	r3, pc, #412	; (adr r3, 800a480 <__ieee754_exp+0x290>)
 800a2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e6:	f7f6 f997 	bl	8000618 <__aeabi_dmul>
 800a2ea:	a367      	add	r3, pc, #412	; (adr r3, 800a488 <__ieee754_exp+0x298>)
 800a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f0:	f7f5 ffda 	bl	80002a8 <__aeabi_dsub>
 800a2f4:	4632      	mov	r2, r6
 800a2f6:	463b      	mov	r3, r7
 800a2f8:	f7f6 f98e 	bl	8000618 <__aeabi_dmul>
 800a2fc:	a364      	add	r3, pc, #400	; (adr r3, 800a490 <__ieee754_exp+0x2a0>)
 800a2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a302:	f7f5 ffd3 	bl	80002ac <__adddf3>
 800a306:	4632      	mov	r2, r6
 800a308:	463b      	mov	r3, r7
 800a30a:	f7f6 f985 	bl	8000618 <__aeabi_dmul>
 800a30e:	a362      	add	r3, pc, #392	; (adr r3, 800a498 <__ieee754_exp+0x2a8>)
 800a310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a314:	f7f5 ffc8 	bl	80002a8 <__aeabi_dsub>
 800a318:	4632      	mov	r2, r6
 800a31a:	463b      	mov	r3, r7
 800a31c:	f7f6 f97c 	bl	8000618 <__aeabi_dmul>
 800a320:	a35f      	add	r3, pc, #380	; (adr r3, 800a4a0 <__ieee754_exp+0x2b0>)
 800a322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a326:	f7f5 ffc1 	bl	80002ac <__adddf3>
 800a32a:	4632      	mov	r2, r6
 800a32c:	463b      	mov	r3, r7
 800a32e:	f7f6 f973 	bl	8000618 <__aeabi_dmul>
 800a332:	4602      	mov	r2, r0
 800a334:	460b      	mov	r3, r1
 800a336:	4620      	mov	r0, r4
 800a338:	4629      	mov	r1, r5
 800a33a:	f7f5 ffb5 	bl	80002a8 <__aeabi_dsub>
 800a33e:	4602      	mov	r2, r0
 800a340:	460b      	mov	r3, r1
 800a342:	4606      	mov	r6, r0
 800a344:	460f      	mov	r7, r1
 800a346:	4620      	mov	r0, r4
 800a348:	4629      	mov	r1, r5
 800a34a:	f7f6 f965 	bl	8000618 <__aeabi_dmul>
 800a34e:	ec41 0b19 	vmov	d9, r0, r1
 800a352:	f1ba 0f00 	cmp.w	sl, #0
 800a356:	d15d      	bne.n	800a414 <__ieee754_exp+0x224>
 800a358:	2200      	movs	r2, #0
 800a35a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a35e:	4630      	mov	r0, r6
 800a360:	4639      	mov	r1, r7
 800a362:	f7f5 ffa1 	bl	80002a8 <__aeabi_dsub>
 800a366:	4602      	mov	r2, r0
 800a368:	460b      	mov	r3, r1
 800a36a:	ec51 0b19 	vmov	r0, r1, d9
 800a36e:	f7f6 fa7d 	bl	800086c <__aeabi_ddiv>
 800a372:	4622      	mov	r2, r4
 800a374:	462b      	mov	r3, r5
 800a376:	f7f5 ff97 	bl	80002a8 <__aeabi_dsub>
 800a37a:	4602      	mov	r2, r0
 800a37c:	460b      	mov	r3, r1
 800a37e:	2000      	movs	r0, #0
 800a380:	4957      	ldr	r1, [pc, #348]	; (800a4e0 <__ieee754_exp+0x2f0>)
 800a382:	f7f5 ff91 	bl	80002a8 <__aeabi_dsub>
 800a386:	e74d      	b.n	800a224 <__ieee754_exp+0x34>
 800a388:	4b56      	ldr	r3, [pc, #344]	; (800a4e4 <__ieee754_exp+0x2f4>)
 800a38a:	4620      	mov	r0, r4
 800a38c:	4629      	mov	r1, r5
 800a38e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a392:	a345      	add	r3, pc, #276	; (adr r3, 800a4a8 <__ieee754_exp+0x2b8>)
 800a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a398:	f7f6 f93e 	bl	8000618 <__aeabi_dmul>
 800a39c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a3a0:	f7f5 ff84 	bl	80002ac <__adddf3>
 800a3a4:	f7f6 fbd2 	bl	8000b4c <__aeabi_d2iz>
 800a3a8:	4682      	mov	sl, r0
 800a3aa:	f7f6 f8cb 	bl	8000544 <__aeabi_i2d>
 800a3ae:	4606      	mov	r6, r0
 800a3b0:	460f      	mov	r7, r1
 800a3b2:	a33f      	add	r3, pc, #252	; (adr r3, 800a4b0 <__ieee754_exp+0x2c0>)
 800a3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b8:	f7f6 f92e 	bl	8000618 <__aeabi_dmul>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	460b      	mov	r3, r1
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	4629      	mov	r1, r5
 800a3c4:	f7f5 ff70 	bl	80002a8 <__aeabi_dsub>
 800a3c8:	4680      	mov	r8, r0
 800a3ca:	4689      	mov	r9, r1
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	4639      	mov	r1, r7
 800a3d0:	a339      	add	r3, pc, #228	; (adr r3, 800a4b8 <__ieee754_exp+0x2c8>)
 800a3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d6:	f7f6 f91f 	bl	8000618 <__aeabi_dmul>
 800a3da:	ec41 0b18 	vmov	d8, r0, r1
 800a3de:	e76f      	b.n	800a2c0 <__ieee754_exp+0xd0>
 800a3e0:	4b41      	ldr	r3, [pc, #260]	; (800a4e8 <__ieee754_exp+0x2f8>)
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d811      	bhi.n	800a40a <__ieee754_exp+0x21a>
 800a3e6:	ee10 0a10 	vmov	r0, s0
 800a3ea:	4629      	mov	r1, r5
 800a3ec:	a334      	add	r3, pc, #208	; (adr r3, 800a4c0 <__ieee754_exp+0x2d0>)
 800a3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f2:	f7f5 ff5b 	bl	80002ac <__adddf3>
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	4b39      	ldr	r3, [pc, #228]	; (800a4e0 <__ieee754_exp+0x2f0>)
 800a3fa:	f7f6 fb9d 	bl	8000b38 <__aeabi_dcmpgt>
 800a3fe:	b138      	cbz	r0, 800a410 <__ieee754_exp+0x220>
 800a400:	2200      	movs	r2, #0
 800a402:	4b37      	ldr	r3, [pc, #220]	; (800a4e0 <__ieee754_exp+0x2f0>)
 800a404:	4620      	mov	r0, r4
 800a406:	4629      	mov	r1, r5
 800a408:	e70a      	b.n	800a220 <__ieee754_exp+0x30>
 800a40a:	f04f 0a00 	mov.w	sl, #0
 800a40e:	e75f      	b.n	800a2d0 <__ieee754_exp+0xe0>
 800a410:	4682      	mov	sl, r0
 800a412:	e75d      	b.n	800a2d0 <__ieee754_exp+0xe0>
 800a414:	4632      	mov	r2, r6
 800a416:	463b      	mov	r3, r7
 800a418:	2000      	movs	r0, #0
 800a41a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a41e:	f7f5 ff43 	bl	80002a8 <__aeabi_dsub>
 800a422:	4602      	mov	r2, r0
 800a424:	460b      	mov	r3, r1
 800a426:	ec51 0b19 	vmov	r0, r1, d9
 800a42a:	f7f6 fa1f 	bl	800086c <__aeabi_ddiv>
 800a42e:	4602      	mov	r2, r0
 800a430:	460b      	mov	r3, r1
 800a432:	ec51 0b18 	vmov	r0, r1, d8
 800a436:	f7f5 ff37 	bl	80002a8 <__aeabi_dsub>
 800a43a:	4642      	mov	r2, r8
 800a43c:	464b      	mov	r3, r9
 800a43e:	f7f5 ff33 	bl	80002a8 <__aeabi_dsub>
 800a442:	4602      	mov	r2, r0
 800a444:	460b      	mov	r3, r1
 800a446:	2000      	movs	r0, #0
 800a448:	4925      	ldr	r1, [pc, #148]	; (800a4e0 <__ieee754_exp+0x2f0>)
 800a44a:	f7f5 ff2d 	bl	80002a8 <__aeabi_dsub>
 800a44e:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800a452:	4592      	cmp	sl, r2
 800a454:	db02      	blt.n	800a45c <__ieee754_exp+0x26c>
 800a456:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800a45a:	e6e3      	b.n	800a224 <__ieee754_exp+0x34>
 800a45c:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800a460:	2200      	movs	r2, #0
 800a462:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800a466:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800a46a:	f7f6 f8d5 	bl	8000618 <__aeabi_dmul>
 800a46e:	e6d9      	b.n	800a224 <__ieee754_exp+0x34>
 800a470:	fefa39ef 	.word	0xfefa39ef
 800a474:	40862e42 	.word	0x40862e42
 800a478:	d52d3051 	.word	0xd52d3051
 800a47c:	c0874910 	.word	0xc0874910
 800a480:	72bea4d0 	.word	0x72bea4d0
 800a484:	3e663769 	.word	0x3e663769
 800a488:	c5d26bf1 	.word	0xc5d26bf1
 800a48c:	3ebbbd41 	.word	0x3ebbbd41
 800a490:	af25de2c 	.word	0xaf25de2c
 800a494:	3f11566a 	.word	0x3f11566a
 800a498:	16bebd93 	.word	0x16bebd93
 800a49c:	3f66c16c 	.word	0x3f66c16c
 800a4a0:	5555553e 	.word	0x5555553e
 800a4a4:	3fc55555 	.word	0x3fc55555
 800a4a8:	652b82fe 	.word	0x652b82fe
 800a4ac:	3ff71547 	.word	0x3ff71547
 800a4b0:	fee00000 	.word	0xfee00000
 800a4b4:	3fe62e42 	.word	0x3fe62e42
 800a4b8:	35793c76 	.word	0x35793c76
 800a4bc:	3dea39ef 	.word	0x3dea39ef
 800a4c0:	8800759c 	.word	0x8800759c
 800a4c4:	7e37e43c 	.word	0x7e37e43c
 800a4c8:	40862e41 	.word	0x40862e41
 800a4cc:	7fefffff 	.word	0x7fefffff
 800a4d0:	3fd62e42 	.word	0x3fd62e42
 800a4d4:	3ff0a2b1 	.word	0x3ff0a2b1
 800a4d8:	0801f6b8 	.word	0x0801f6b8
 800a4dc:	0801f6c8 	.word	0x0801f6c8
 800a4e0:	3ff00000 	.word	0x3ff00000
 800a4e4:	0801f6a8 	.word	0x0801f6a8
 800a4e8:	3defffff 	.word	0x3defffff

0800a4ec <with_errno>:
 800a4ec:	b570      	push	{r4, r5, r6, lr}
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	460d      	mov	r5, r1
 800a4f2:	4616      	mov	r6, r2
 800a4f4:	f7ff f97a 	bl	80097ec <__errno>
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	6006      	str	r6, [r0, #0]
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	bd70      	pop	{r4, r5, r6, pc}

0800a500 <xflow>:
 800a500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a502:	4614      	mov	r4, r2
 800a504:	461d      	mov	r5, r3
 800a506:	b108      	cbz	r0, 800a50c <xflow+0xc>
 800a508:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a50c:	4620      	mov	r0, r4
 800a50e:	4629      	mov	r1, r5
 800a510:	e9cd 2300 	strd	r2, r3, [sp]
 800a514:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a518:	f7f6 f87e 	bl	8000618 <__aeabi_dmul>
 800a51c:	2222      	movs	r2, #34	; 0x22
 800a51e:	b003      	add	sp, #12
 800a520:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a524:	f7ff bfe2 	b.w	800a4ec <with_errno>

0800a528 <__math_uflow>:
 800a528:	b508      	push	{r3, lr}
 800a52a:	2200      	movs	r2, #0
 800a52c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a530:	f7ff ffe6 	bl	800a500 <xflow>
 800a534:	ec41 0b10 	vmov	d0, r0, r1
 800a538:	bd08      	pop	{r3, pc}

0800a53a <__math_oflow>:
 800a53a:	b508      	push	{r3, lr}
 800a53c:	2200      	movs	r2, #0
 800a53e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a542:	f7ff ffdd 	bl	800a500 <xflow>
 800a546:	ec41 0b10 	vmov	d0, r0, r1
 800a54a:	bd08      	pop	{r3, pc}

0800a54c <_init>:
 800a54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a54e:	bf00      	nop
 800a550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a552:	bc08      	pop	{r3}
 800a554:	469e      	mov	lr, r3
 800a556:	4770      	bx	lr

0800a558 <_fini>:
 800a558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55a:	bf00      	nop
 800a55c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a55e:	bc08      	pop	{r3}
 800a560:	469e      	mov	lr, r3
 800a562:	4770      	bx	lr
